{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testgroup\\\\TestGroupTestTab.jsx\";\nimport React, { Component } from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport TestGroupParameterTab from './TestGroupParameterTab';\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport { showEsign, sortData } from '../../components/CommonScript';\nimport Esign from '../audittrail/Esign';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { parameterType, SampleType, transactionStatus } from '../../components/Enumeration';\nimport EditTestGroupParameter from './EditTestGroupParameter';\nimport AddCodedResult from '../testmanagement/AddCodedResult';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport AddSpecification from '../testmanagement/AddSpecification';\nimport TemplateForm from '../checklist/checklist/TemplateForm';\nimport { toast } from 'react-toastify';\nimport TestGroupMaterialTab from './TestGroupMaterialTab';\nimport AddTestGroupTestMaterial from './AddTestGroupTestMaterial';\nimport AddTestGroupNumericSpecification from './AddTestGroupNumericSpecification';\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\nimport TestGroupRulesEngineTab from './TestGroupRulesEngineTab';\n\nclass TestGroupTestTab extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onTemplateInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTemplateComboChange = (comboData, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTemplateDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state.selectedRecord || {};\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleClose = () => {\n      let updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: {},\n          testGroupCheckList: {},\n          openTemplateModal: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.loadEsign;\n      let openChildModal = this.props.openChildModal;\n      let selectedRecord = this.props.selectedRecord;\n\n      if (this.props.loadEsign) {\n        if (this.props.operation === \"delete\" || this.props.operation === \"Default\") {\n          loadEsign = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord[\"agree\"] = 4;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.EditSpecDetails = (viewdetails, ncontrolCode) => {\n      this.props.addTestGroupNumericTab(\"update\", viewdetails, this.props.userInfo, {\n        testgroupspecification: this.props.masterData.SelectedSpecification\n      }, this.props.masterData, ncontrolCode);\n    };\n\n    this.DeleteSpecDetails = (viewdetails, ncontrolCode) => {\n      this.SpecConfirmDelete(\"delete\", 1, viewdetails, ncontrolCode);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_PARAMETER\", /*#__PURE__*/React.createElement(TestGroupParameterTab, {\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        masterData: this.props.masterData,\n        deleteAction: this.deleteAction,\n        onSwitchChange: this.onSwitchChange,\n        addTestFile: this.props.addTestFile,\n        viewTestFile: this.viewTestFile,\n        defaultRecord: this.defaultRecord,\n        filterData: this.props.filterData,\n        getTestGroupParameter: this.props.getTestGroupParameter,\n        editTestGroupParameter: this.props.editTestGroupParameter,\n        addTestGroupCodedResult: this.props.addTestGroupCodedResult,\n        addTestGroupNumericTab: this.props.addTestGroupNumericTab,\n        viewTestGroupCheckList: this.props.viewTestGroupCheckList,\n        EditSpecDetails: this.EditSpecDetails,\n        DeleteSpecDetails: this.DeleteSpecDetails,\n        dataState: this.props.dataState,\n        dataStateChange: this.props.dataStateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }\n      }));\n      return tabMap;\n    };\n\n    this.testTabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_PARAMETER\", /*#__PURE__*/React.createElement(TestGroupParameterTab, {\n        paneHeight: this.props.paneHeight,\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        masterData: this.props.masterData,\n        deleteAction: this.deleteAction,\n        onSwitchChange: this.onSwitchChange,\n        addTestFile: this.props.addTestFile,\n        viewTestFile: this.viewTestFile,\n        defaultRecord: this.defaultRecord,\n        filterData: this.props.filterData,\n        getTestGroupParameter: this.props.getTestGroupParameter,\n        editTestGroupParameter: this.props.editTestGroupParameter,\n        addTestGroupCodedResult: this.props.addTestGroupCodedResult,\n        addTestGroupNumericTab: this.props.addTestGroupNumericTab,\n        viewTestGroupCheckList: this.props.viewTestGroupCheckList,\n        EditSpecDetails: this.EditSpecDetails,\n        DeleteSpecDetails: this.DeleteSpecDetails,\n        hasDynamicColSize: true,\n        dataState: this.props.dataState,\n        dataStateChange: this.props.dataStateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_MATERIAL\", /*#__PURE__*/React.createElement(TestGroupMaterialTab, {\n        paneHeight: this.props.paneHeight,\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        masterData: this.props.masterData,\n        ConfirmDelete: this.ConfirmDelete,\n        getDataForTestMaterial: this.props.getDataForTestMaterial,\n        getTestGroupMaterial: this.props.getTestGroupMaterial,\n        getDataForEditTestMaterial: this.props.getDataForEditTestMaterial,\n        selectedRecord: this.state.selectedRecord,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_RULESENGINE\", /*#__PURE__*/React.createElement(TestGroupRulesEngineTab, {\n        paneHeight: this.props.paneHeight,\n        getTestGroupRulesEngineAdd: this.props.getTestGroupRulesEngineAdd,\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        userInfo: this.props.userInfo,\n        selectedRecord: this.state.selectedRecord,\n        masterData: this.props.masterData,\n        settings: this.props.settings,\n        skipRulesEngine: this.props.skipRulesEngine,\n        takeRulesEngine: this.props.takeRulesEngine,\n        getEditTestGroupRulesEngine: this.props.getEditTestGroupRulesEngine,\n        getSelectedTestGroupRulesEngine: this.props.getSelectedTestGroupRulesEngine,\n        ConfirmDeleteRule: this.props.ConfirmDeleteRule,\n        approveVersion: this.props.approveVersion,\n        openflowview: this.props.openflowview,\n        handlePageChangeRuleEngine: this.props.handlePageChangeRuleEngine,\n        viewOutcome: this.props.viewOutcome,\n        filterParamRulesEngine: this.props.filterParamRulesEngine,\n        filterTransactionList: this.props.filterTransactionList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 13\n        }\n      }));\n      return tabMap;\n    };\n\n    this.ConfirmDelete = (operation, deleteId, selectedRecord) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.DeleteTestMaterial(operation, deleteId, selectedRecord));\n    };\n\n    this.SpecConfirmDelete = (operation, deleteId, selectedRecord, ncontrolCode) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteAction(selectedRecord, \"delete\", ncontrolCode, \"TestGroupAddSpecification\", \"openChildModal\"));\n    };\n\n    this.DeleteTestMaterial = (operation, ncontrolCode) => {\n      let selectedSpecification = this.props.masterData.SelectedSpecification;\n\n      if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT || selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\n        let selectedRecord = this.state.selectedRecord;\n        let inputData = [];\n        inputData = {\n          ntreeversiontempcode: this.props.masterData.selectedNode.ntreeversiontempcode\n        };\n        inputData[\"testgrouptestmaterial\"] = {\n          ntestgrouptestmaterialcode: this.props.masterData.selectedMaterial.ntestgrouptestmaterialcode,\n          ntestgrouptestcode: this.props.masterData.selectedMaterial.ntestgrouptestcode\n        };\n        inputData[\"userinfo\"] = this.props.userInfo;\n        const inputParam = {\n          methodUrl: \"TestGroupTestMaterial\",\n          classUrl: this.props.inputParam.classUrl,\n          inputData: inputData,\n          operation: \"delete\"\n        };\n        const masterData = this.props.masterData;\n\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: \"IDS_TESTGROUPTESTMATERIAL\",\n              operation: operation.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n        }));\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputParam = {}; // if(this.props.screenName === \"IDS_TEST\" \n      //     || this.props.screenName === \"IDS_EDITTESTGROUPTEST\") {\n      //     inputParam = this.onSaveTest(saveType, formRef);\n      // } else \n\n      if (this.props.screenName === \"IDS_FORMULA\") {\n        inputParam = this.onSaveFormula(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_PARAMETER\") {\n        inputParam = this.onSaveParameter(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_CODEDRESULT\") {\n        inputParam = this.onSaveCodedResult(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_CLINICALSPEC\") {\n        inputParam = this.onSaveSpecification(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_TESTGROUPTESTMATERIAL\") {\n        inputParam = this.onSaveMaterial(saveType, formRef);\n      }\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", {});\n      }\n    };\n\n    this.onSaveParameter = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const parameterList = [\"ntestgrouptestparametercode\", \"ntestgrouptestcode\", \"ntestparametercode\", \"sparametersynonym\", \"nroundingdigits\", \"nresultmandatory\", \"nreportmandatory\", \"sspecdesc\", \"nsorter\"];\n      let testGroupTestParameter = {\n        nparametertypecode: selectedRecord.nparametertypecode.value,\n        nunitcode: selectedRecord.nunitcode ? selectedRecord.nunitcode.value : -1,\n        nchecklistversioncode: selectedRecord.nchecklistversioncode ? selectedRecord.nchecklistversioncode.value : -1\n      };\n      parameterList.map(item => {\n        return testGroupTestParameter[item] = selectedRecord[item] ? selectedRecord[item] : \"\";\n      });\n      let inputData = {\n        testgrouptestparameter: testGroupTestParameter,\n        userinfo: this.props.userInfo\n      };\n\n      if (selectedRecord.nparametertypecode.value === parameterType.NUMERIC) {\n        let testGroupTestNumericParameter = {};\n        const numericList = [\"sminlod\", \"smaxlod\", \"sminb\", \"smina\", \"smaxa\", \"smaxb\", \"sminloq\", \"smaxloq\", \"sdisregard\", \"sresultvalue\"];\n        testGroupTestNumericParameter[\"ntestgrouptestparametercode\"] = selectedRecord.ntestgrouptestparametercode;\n        numericList.map(item => {\n          return testGroupTestNumericParameter[item] = selectedRecord[item] ? selectedRecord[item] === \"0\" ? selectedRecord[item] : selectedRecord[item].replace(/^0+/, '') : null;\n        });\n        inputData[\"testgrouptestnumericparameter\"] = testGroupTestNumericParameter;\n\n        if (selectedRecord.ntestformulacode) {\n          const testFormula = selectedRecord.ntestformulacode.item;\n          const testgrouptestformula = {\n            ntestgrouptestparametercode: selectedRecord.ntestgrouptestparametercode,\n            ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\n            ntestformulacode: testFormula.ntestformulacode,\n            sformulacalculationcode: testFormula.sformulacalculationcode,\n            sformulacalculationdetail: testFormula.sformulacalculationdetail,\n            ntransactionstatus: transactionStatus.YES\n          };\n          inputData[\"testgrouptestformula\"] = testgrouptestformula;\n        } else {\n          inputData[\"testgrouptestformula\"] = null;\n        }\n      } else if (selectedRecord.nparametertypecode.value === parameterType.CHARACTER) {\n        const characterList = [\"ntestgrouptestparametercode\", \"scharname\"];\n        let testGroupTestCharParameter = {};\n        characterList.map(item => {\n          return testGroupTestCharParameter[item] = selectedRecord[item] ? selectedRecord[item] : \"\";\n        });\n        inputData[\"testgrouptestcharparameter\"] = testGroupTestCharParameter;\n      } else if (selectedRecord.nparametertypecode.value === parameterType.PREDEFINED) {\n        const testGroupTestPredefParameter = {\n          ntestgrouptestparametercode: selectedRecord.ntestgrouptestparametercode,\n          ngradecode: selectedRecord.ngradecode.value,\n          spredefinedname: selectedRecord.spredefinedname,\n          ntestgrouptestpredefcode: selectedRecord.ntestgrouptestpredefcode,\n          ndefaultstatus: selectedRecord.ndefaultstatus\n        };\n        inputData[\"testgrouptestpredefparameter\"] = testGroupTestPredefParameter;\n      }\n\n      console.log(\"input data:\", inputData);\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: \"update\",\n        methodUrl: \"TestGroupParameter\",\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        postParam: {\n          inputListName: \"TestGroupTest\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestgrouptestcode\",\n          primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\n          fetchUrl: \"testgroup/getTestGroupTest\",\n          fecthInputObject: {\n            userinfo: this.props.userInfo\n          },\n          masterData: this.props.masterData,\n          searchFieldList: this.searchFieldList\n        }\n      };\n      return inputParam;\n    };\n\n    this.onSaveFormula = (saveType, formRef) => {\n      const masterData = this.props.masterData;\n      const selectedRecord = this.state.selectedRecord;\n      const selectedParameter = masterData.selectedParameter;\n      const testFormulaArray = selectedRecord.ntestformulacode.map(test => {\n        return {\n          ntestgrouptestcode: selectedParameter.ntestgrouptestcode,\n          ntestgrouptestparametercode: selectedParameter.ntestgrouptestparametercode,\n          ntestformulacode: test.item.ntestformulacode,\n          sformulacalculationcode: test.item.sformulacalculationcode,\n          sformulacalculationdetail: test.item.sformulacalculationdetail,\n          ntransactionstatus: transactionStatus.NO\n        };\n      });\n      const inputData = {\n        testgroupspecification: masterData.SelectedSpecification,\n        testgrouptestformula: testFormulaArray,\n        userinfo: this.props.userInfo\n      };\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: this.props.operation,\n        methodUrl: \"TestGroupTestFormula\",\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        postParam: {\n          inputListName: \"TestGroupTest\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestgrouptestcode\",\n          primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\n          fetchUrl: \"testgroup/getTestGroupTest\",\n          fecthInputObject: {\n            userinfo: this.props.userInfo\n          },\n          masterData: this.props.masterData,\n          searchFieldList: this.searchFieldList\n        }\n      };\n      return inputParam;\n    };\n\n    this.onSaveCodedResult = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const testGroupPredefParameter = {\n        ndefaultstatus: transactionStatus.NO,\n        nstatus: transactionStatus.ACTIVE,\n        ntestgrouptestpredefcode: selectedRecord[\"ntestgrouptestpredefcode\"],\n        ntestgrouptestparametercode: this.props.masterData.selectedParameter[\"ntestgrouptestparametercode\"],\n        ngradecode: selectedRecord[\"ngradecode\"].value,\n        spredefinedname: selectedRecord[\"spredefinedname\"],\n        sresultparacomment: selectedRecord[\"sresultparacomment\"],\n        ntestpredefinedcode: this.props.masterData.selectedParameter[\"ntestpredefinedcode\"]\n      };\n      const inputParam = {\n        inputData: {\n          testgrouptestpredefinedparameter: testGroupPredefParameter,\n          userinfo: this.props.userInfo,\n          testgroupspecification: this.props.masterData.SelectedSpecification\n        },\n        classUrl: \"testgroup\",\n        operation: this.props.operation,\n        methodUrl: \"TestGroupPredefParameter\",\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        postParam: {\n          inputListName: \"TestGroupTest\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestgrouptestcode\",\n          primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\n          fetchUrl: \"testgroup/getTestGroupTest\",\n          fecthInputObject: {\n            userinfo: this.props.userInfo\n          },\n          masterData: this.props.masterData,\n          searchFieldList: this.searchFieldList\n        }\n      };\n      return inputParam;\n    };\n\n    this.onSaveSpecification = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord; // if(selectedRecord[\"nfromage\"]<selectedRecord[\"ntoage\"]){\n\n      const TestGroupAddSpecification = {\n        nstatus: transactionStatus.ACTIVE,\n        ntestgrouptestparametercode: this.props.masterData.selectedParameter[\"ntestgrouptestparametercode\"],\n        ngendercode: selectedRecord[\"ngendercode\"].value,\n        nfromage: selectedRecord[\"nfromage\"],\n        ntoage: selectedRecord[\"ntoage\"],\n        shigha: selectedRecord[\"nhigha\"],\n        shighb: selectedRecord[\"nhighb\"],\n        slowa: selectedRecord[\"nlowa\"],\n        slowb: selectedRecord[\"nlowb\"],\n        sresultvalue: selectedRecord[\"sresultvalue\"],\n        ntestgrouptestclinicspeccode: selectedRecord[\"ntestgrouptestclinicspeccode\"]\n      };\n      const inputParam = {\n        inputData: {\n          testgroupaddspecification: TestGroupAddSpecification,\n          userinfo: this.props.userInfo,\n          testgroupspecification: this.props.masterData.SelectedSpecification\n        },\n        classUrl: \"testgroup\",\n        operation: this.props.operation,\n        methodUrl: \"TestGroupAddSpecification\",\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        postParam: {\n          inputListName: \"TestGroupTest\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestgrouptestcode\",\n          primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\n          fetchUrl: \"testgroup/getTestGroupTest\",\n          fecthInputObject: {\n            userinfo: this.props.userInfo\n          },\n          masterData: this.props.masterData,\n          searchFieldList: this.searchFieldList\n        }\n      };\n      return inputParam; // }else{\n      //     toast.warn(this.props.intl.formatMessage({id: \"IDS_SELECTEDTEMPLATEISRETIRED\"})); \n      // }\n    };\n\n    this.onSaveMaterial = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      let testGroupTestMaterial = [];\n\n      if (this.props.operation === \"create\") {\n        testGroupTestMaterial = {\n          ntestgrouptestcode: this.props.masterData.SelectedTest.ntestgrouptestcode,\n          ntestgrouptestmaterialcode: this.props.masterData.SelectedTest.ntestgrouptestmaterialcode,\n          nmaterialtypecode: selectedRecord[\"nmaterialtypecode\"].item.jsondata.nmaterialtypecode,\n          nmaterialcatcode: selectedRecord[\"nmaterialcatcode\"].value,\n          nmaterialcode: selectedRecord[\"nmaterialcode\"].value,\n          smaterialname: selectedRecord[\"nmaterialcode\"].label,\n          sremarks: selectedRecord[\"sremarks\"],\n          nstatus: transactionStatus.ACTIVE\n        };\n      } else {\n        testGroupTestMaterial = {\n          ntestgrouptestcode: this.props.masterData.SelectedTest.ntestgrouptestcode,\n          ntestgrouptestmaterialcode: this.props.masterData.selectedMaterial.ntestgrouptestmaterialcode,\n          nmaterialtypecode: selectedRecord[\"nmaterialtypecode\"].value,\n          nmaterialcatcode: selectedRecord[\"nmaterialcatcode\"].value,\n          nmaterialcode: selectedRecord[\"nmaterialcode\"].value,\n          sremarks: selectedRecord[\"sremarks\"],\n          nstatus: transactionStatus.ACTIVE\n        };\n      }\n\n      const inputParam = {\n        inputData: {\n          testgrouptestmaterial: testGroupTestMaterial,\n          ntreeversiontempcode: this.props.masterData.selectedNode.ntreeversiontempcode,\n          userinfo: this.props.userInfo\n        },\n        classUrl: \"testgroup\",\n        operation: this.props.operation,\n        methodUrl: \"TestGroupTestMaterial\",\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        postParam: {\n          inputListName: \"TestGroupTest\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestgrouptestcode\",\n          primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\n          fetchUrl: \"testgroup/getTestGroupTest\",\n          fecthInputObject: {\n            userinfo: this.props.userInfo\n          },\n          masterData: this.props.masterData,\n          searchFieldList: this.searchFieldList\n        }\n      };\n      return inputParam;\n    };\n\n    this.deleteTest = deleteParam => {\n      const masterData = this.props.masterData;\n      const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n      const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n      if (templateVersionStatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n        }));\n      } else {\n        const testgroupspecification = this.props.masterData.SelectedSpecification;\n\n        if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n          const screenName = deleteParam.screenName;\n          const inputParam = {\n            inputData: {\n              testgrouptest: deleteParam.selectedRecord,\n              userinfo: this.props.userInfo,\n              testgroupspecification,\n              treetemplatemanipulation: this.props.masterData.selectedNode\n            },\n            classUrl: \"testgroup\",\n            operation: \"delete\",\n            methodUrl: \"Test\",\n            screenName: \"IDS_TEST\",\n            postParam: {\n              inputListName: \"TestGroupTest\",\n              selectedObject: \"SelectedTest\",\n              primaryKeyField: \"ntestgrouptestcode\",\n              primaryKeyValue: deleteParam.selectedRecord.ntestgrouptestcode,\n              fetchUrl: \"testgroup/getTestGroupTest\",\n              fecthInputObject: {\n                userinfo: this.props.userInfo\n              },\n              masterData: this.props.masterData,\n              searchFieldList: this.searchFieldList\n            }\n          };\n          const masterData = this.props.masterData;\n\n          if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                openModal: true,\n                screenName: screenName,\n                operation: deleteParam.operation,\n                selectedRecord: {}\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, masterData, \"openModal\", {});\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      }\n    };\n\n    this.deleteAction = (item, operation, ncontrolCode, methodUrl, modalName) => {\n      const masterData = this.props.masterData;\n      const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n      const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n      if (templateVersionStatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n        }));\n      } else {\n        const selected = item;\n        const inputParam = {\n          inputData: {\n            [methodUrl.toLowerCase()]: selected,\n            userinfo: this.props.userInfo,\n            testgroupspecification: this.props.masterData.SelectedSpecification\n          },\n          classUrl: \"testgroup\",\n          operation: operation,\n          methodUrl: methodUrl,\n          screenName: \"IDS_TEST\",\n          postParam: {\n            inputListName: \"TestGroupTest\",\n            selectedObject: \"SelectedTest\",\n            primaryKeyField: \"ntestgrouptestcode\",\n            primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\n            fetchUrl: \"testgroup/getTestGroupTest\",\n            fecthInputObject: {\n              userinfo: this.props.userInfo\n            },\n            masterData: this.props.masterData,\n            searchFieldList: this.searchFieldList\n          }\n        };\n        const masterData = this.props.masterData;\n\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              [modalName]: true,\n              screenName: \"IDS_TEST\",\n              operation: operation,\n              selectedRecord: {}\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\n        }\n      }\n    };\n\n    this.onSwitchChange = (item, key, methodUrl, event) => {\n      const masterData = this.props.masterData;\n      const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n      const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n      if (templateVersionStatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n        }));\n      } else {\n        //NIBSCRT-2236\n        const testgroupspecification = this.props.masterData.SelectedSpecification;\n\n        if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n          let dataItem = item;\n\n          if (methodUrl === \"TestGroupTestFormula\") {\n            dataItem[\"ntransactionstatus\"] = transactionStatus.YES;\n          } else if (methodUrl === 'TestGroupPredefParameter') {\n            // if(this.props.masterData.SelectedSpecification.napprovalstatus === transactionStatus.DRAFT || this.props.masterData.SelectedSpecification.napprovalstatus === transactionStatus.CORRECTION)\n            // {\n            dataItem['ndefaultstatus'] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO; // }\n            // else{\n            //     return toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\n            // }\n          } else {\n            dataItem[\"ndefaultstatus\"] = transactionStatus.YES;\n          }\n\n          const inputParam = {\n            inputData: {\n              [key]: dataItem,\n              userinfo: this.props.userInfo,\n              testgroupspecification: this.props.masterData.SelectedSpecification\n            },\n            classUrl: \"testgroup\",\n            operation: \"default\",\n            methodUrl: methodUrl\n          };\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", {});\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      let inputData = [];\n      let masterData = { ...this.props.masterData\n      };\n      let inputParam = [];\n      let selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 2:\n          selectedRecord[\"parameterTypeCode\"] = comboData.value;\n          selectedRecord[fieldName] = comboData;\n          const needRoundingDigit = comboData.value === parameterType.NUMERIC ? false : true;\n          const needUnit = comboData.value === parameterType.NUMERIC ? false : true;\n          selectedRecord[\"nroundingdigits\"] = 0;\n          selectedRecord[\"nunitcode\"] = comboData.value === parameterType.NUMERIC ? this.props.parameterData.defaultUnit : undefined;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord,\n              testGroupInputData: { ...this.props.testGroupInputData,\n                needRoundingDigit,\n                needUnit\n              }\n            }\n          };\n          this.props.updateStore(updateInfo);\n          break;\n\n        case 3:\n          selectedRecord[\"schecklistversionname\"] = comboData.item.schecklistversionname;\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 4:\n          let oldnmaterialtypecode = selectedRecord[\"nmaterialtypecode\"].value ? selectedRecord[\"nmaterialtypecode\"].value : selectedRecord[\"nmaterialtypecode\"];\n\n          if (oldnmaterialtypecode !== comboData.value) {\n            delete selectedRecord['nmaterialcatcode'];\n            delete selectedRecord['nmaterialcode'];\n          }\n\n          selectedRecord[\"nmaterialtypecode\"] = comboData.value;\n          selectedRecord[fieldName] = comboData;\n          inputData = {\n            userinfo: this.props.userInfo,\n            nmaterialtypecode: parseInt(comboData.value)\n          };\n          inputParam = {\n            materialType: this.props.materialType,\n            operation: this.props.operation,\n            masterData,\n            inputData,\n            selectedRecord,\n            screenName: \"IDS_TESTGROUPTESTMATERIAL\",\n            ncontrolCode: this.props.ncontrolCode\n          };\n          this.props.getMaterialCategoryBasedMaterialType(inputParam);\n          break;\n\n        case 5:\n          if (selectedRecord[\"nmaterialcatcode\"]) {\n            let oldnmaterialcatcode = selectedRecord[\"nmaterialcatcode\"].value ? selectedRecord[\"nmaterialcatcode\"].value : selectedRecord[\"nmaterialcatcode\"];\n\n            if (oldnmaterialcatcode !== comboData.value) {\n              delete selectedRecord['nmaterialcode'];\n            }\n          }\n\n          selectedRecord[\"nmaterialcatcode\"] = comboData.value;\n          selectedRecord[fieldName] = comboData;\n          inputData = {\n            userinfo: this.props.userInfo,\n            nmaterialcatcode: parseInt(selectedRecord[\"nmaterialcatcode\"].value),\n            nmaterialtypecode: parseInt(selectedRecord[\"nmaterialtypecode\"].value)\n          };\n          inputParam = {\n            masterData,\n            inputData,\n            selectedRecord,\n            operation: this.props.operation,\n            selectedRecord,\n            screenName: \"IDS_TESTGROUPTESTMATERIAL\",\n            ncontrolCode: this.props.ncontrolCode\n          };\n          this.props.getMaterialBasedMaterialCategory(inputParam);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.onInputOnChange = (event, caseNo, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (event.target.type === 'checkbox') {\n            selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\n          } else if (event.target.type === 'radio') {\n            selectedRecord[event.target.name] = optional;\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 2:\n          selectedRecord[event.target.name] = event.target.value;\n          const indexKey = Object.keys(optional)[0];\n          const value = Object.values(optional)[0];\n          const treeData = {\n            ntreeversiontempcode: value.ntreeversiontempcode,\n            npositioncode: value.nlevelno - 1,\n            sleveldescription: event.target.value,\n            ntemptranstestgroupcode: value.ntemptranstestgroupcode,\n            nformcode: 62,\n            schildnode: value.schildnode,\n            nnextchildcode: value.schildnode\n          };\n          let treetemplatemanipulation = selectedRecord.treetemplatemanipulation || [];\n          treetemplatemanipulation[indexKey] = treeData;\n          selectedRecord[\"treetemplatemanipulation\"] = treetemplatemanipulation;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 4:\n          const inputValue = event.target.value;\n\n          if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      console.log(\"value:\", value, name);\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (name === \"nroundingdigits\") {\n        // if (/^-?\\d*?$/.test(value.target.value) || value.target.value === \"\") {\n        //     console.log(\"val:\", value.target.value);\n        //     selectedRecord[name] = value.target.value;\n        // }\n        // if (/^-?\\d*?$/.test(value) || value === \"\") {\n        //    // console.log(\"val:\", value);\n        //     selectedRecord[name] = value;\n        // }\n        //const values = value.target.value.replace(/[^-^0-9]/g, '');\n        if (/^[0-9]+$/.test(value.target.value) || value.target.value === \"\") {\n          selectedRecord[name] = value.target.value;\n        } else {\n          selectedRecord[name] = \"\";\n        }\n      } else {\n        selectedRecord[name] = value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openChildModal\");\n    };\n\n    this.state = {\n      selectedRecord: {}\n    };\n    this.confirmMessage = new ConfirmMessage();\n    this.codedResultMandatory = [{\n      \"idsName\": \"IDS_CODEDRESULT\",\n      \"dataField\": \"spredefinedname\",\n      \"width\": \"200px\",\n      \"mandatory\": true\n    }, {\n      \"idsName\": \"IDS_ACTUALRESULT\",\n      \"dataField\": \"ngradecode\",\n      \"width\": \"200px\",\n      \"mandatory\": true\n    }];\n    this.clinicalSpecMandatory = [{\n      \"idsName\": \"IDS_GENDER\",\n      \"dataField\": \"ngendercode\",\n      \"width\": \"200px\",\n      \"mandatory\": true\n    }, {\n      \"idsName\": \"IDS_FROMAGE\",\n      \"dataField\": \"nfromage\",\n      \"width\": \"200px\",\n      \"mandatory\": true\n    }, {\n      \"idsName\": \"IDS_TOAGE\",\n      \"dataField\": \"ntoage\",\n      \"width\": \"200px\",\n      \"mandatory\": true\n    }];\n  }\n\n  render() {\n    if (this.props.masterData.TestGroupTestClinicalSpec) {\n      sortData(this.props.masterData.TestGroupTestClinicalSpec, \"ascending\", \"nfromage\");\n    }\n\n    this.paramColumnList = [{\n      \"idsName\": \"IDS_PARAMETERSYNONYM\",\n      \"dataField\": \"sparametersynonym\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_PARAMETERTYPE\",\n      \"dataField\": \"nparametertypecode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n\n    if (this.state.selectedRecord[\"parameterTypeCode\"] && this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC) {\n      this.paramColumnList = [{\n        \"idsName\": \"IDS_PARAMETERSYNONYM\",\n        \"dataField\": \"sparametersynonym\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_PARAMETERTYPE\",\n        \"dataField\": \"nparametertypecode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_ROUNDINGDIGITS\",\n        \"dataField\": \"nroundingdigits\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_UNIT\",\n        \"dataField\": \"nunitcode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n    }\n\n    if (this.state.selectedRecord[\"parameterTypeCode\"] && this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED) {\n      this.paramColumnList = [{\n        \"idsName\": \"IDS_PARAMETERSYNONYM\",\n        \"dataField\": \"sparametersynonym\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_PARAMETERTYPE\",\n        \"dataField\": \"nparametertypecode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_CODEDRESULT\",\n        \"dataField\": \"spredefinedname\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_ACTUALRESULT\",\n        \"dataField\": \"ngradecode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n    }\n\n    const paramMandatoryFields = [];\n    this.paramColumnList.forEach(item => item.mandatory === true ? paramMandatoryFields.push(item) : \"\");\n    this.materialColumnList = [{\n      \"idsName\": \"IDS_MATERIALTYPE\",\n      \"dataField\": \"nmaterialtypecode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_MATERIALCATEGORY\",\n      \"dataField\": \"nmaterialcatcode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_MATERIALNAME\",\n      \"dataField\": \"nmaterialcode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grouped-param-inner grouped-tab-inner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    }, !this.props.testView ? /*#__PURE__*/React.createElement(CustomTab, {\n      paneHeight: this.props.paneHeight,\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 29\n      }\n    }) : /*#__PURE__*/React.createElement(CustomTab, {\n      paneHeight: this.props.paneHeight,\n      tabDetail: this.testTabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 29\n      }\n    })), this.props.openChildModal && this.props.screenName && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.operation,\n      inputParam: this.props.inputParam,\n      screenName: this.props.screenName,\n      esign: this.props.loadEsign,\n      validateEsign: this.validateEsign,\n      onSaveClick: this.onSaveClick,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.screenName === \"IDS_PARAMETER\" ? paramMandatoryFields : this.props.screenName === \"IDS_CODEDRESULT\" ? this.codedResultMandatory : this.props.screenName === \"IDS_CLINICALSPEC\" ? this.clinicalSpecMandatory : this.props.screenName === \"IDS_TESTGROUPTESTMATERIAL\" ? this.materialColumnList : [],\n      addComponent: this.props.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 29\n        }\n      }) : this.props.screenName === \"IDS_PARAMETER\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(EditTestGroupParameter, {\n        selectedRecord: this.state.selectedRecord || {},\n        testGroupInputData: this.props.testGroupInputData,\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange //TestGroupTestClinicalSpec={this.props.masterData.TestGroupTestClinicalSpec}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 37\n        }\n      }), this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED || this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.CHARACTER || this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"horizontal-line\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 49\n        }\n      }))) : \"\", this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED && /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(AddCodedResult, {\n        onInputOnChange: this.onInputOnChange,\n        parameterData: this.props.parameterData,\n        selectedRecord: this.state.selectedRecord,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 45\n        }\n      })), this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.CHARACTER && /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormTextarea, {\n        name: \"scharname\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_TESTCHARACTER\"\n        }),\n        onChange: event => this.onInputOnChange(event, 1),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_TESTCHARACTER\"\n        }),\n        value: this.state.selectedRecord[\"scharname\"],\n        rows: \"2\",\n        required: false,\n        maxLength: 255,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 49\n        }\n      }))), this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC && this.props.masterData.selectedNode.nsampletypecode !== SampleType.CLINICALTYPE && /*#__PURE__*/React.createElement(AddSpecification, {\n        selectedRecord: this.state.selectedRecord,\n        onInputOnChange: this.onInputOnChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 41\n        }\n      })) : this.props.screenName === \"IDS_CODEDRESULT\" ? /*#__PURE__*/React.createElement(AddCodedResult, {\n        onInputOnChange: this.onInputOnChange,\n        parameterData: this.props.parameterData,\n        selectedRecord: this.state.selectedRecord,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 37\n        }\n      }) : this.props.screenName === \"IDS_CLINICALSPEC\" ? /*#__PURE__*/React.createElement(AddTestGroupNumericSpecification, {\n        onInputOnChange: this.onInputOnChange,\n        parameterData: this.props.parameterData,\n        selectedRecord: this.state.selectedRecord,\n        onComboChange: this.onComboChange,\n        onNumericInputChange: this.onNumericInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 41\n        }\n      }) : /*#__PURE__*/React.createElement(AddTestGroupTestMaterial, {\n        materialType: this.props.materialType,\n        selectedRecord: this.state.selectedRecord,\n        materialCategoryList: this.props.materialCategoryList,\n        materialList: this.props.materialList,\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 43\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }), this.props.testGroupCheckList && this.props.testGroupCheckList.templateData && this.props.testGroupCheckList.templateData.length > 0 && /*#__PURE__*/React.createElement(TemplateForm, {\n      templateData: this.props.testGroupCheckList.templateData,\n      handleClose: this.handleClose,\n      screenName: \"IDS_VIEWCHECKLIST\",\n      needSaveButton: false,\n      viewScreen: this.props.openTemplateModal,\n      onTemplateInputChange: this.onTemplateInputChange,\n      onTemplateComboChange: this.onTemplateComboChange,\n      onTemplateDateChange: this.onTemplateDateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default injectIntl(TestGroupTestTab);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testgroup/TestGroupTestTab.jsx"],"names":["React","Component","injectIntl","Row","Col","PerfectScrollbar","DEFAULT_RETURN","TestGroupParameterTab","CustomTab","showEsign","sortData","Esign","SlideOutModal","parameterType","SampleType","transactionStatus","EditTestGroupParameter","AddCodedResult","FormTextarea","AddSpecification","TemplateForm","toast","TestGroupMaterialTab","AddTestGroupTestMaterial","AddTestGroupNumericSpecification","ConfirmMessage","TestGroupRulesEngineTab","TestGroupTestTab","constructor","props","onTemplateInputChange","event","selectedRecord","state","target","type","name","checked","YES","NO","value","setState","onTemplateComboChange","comboData","fieldName","onTemplateDateChange","dateName","dateValue","Date","handleClose","updateInfo","typeName","data","testGroupCheckList","openTemplateModal","updateStore","closeModal","loadEsign","openChildModal","operation","onTabChange","tabProps","screenName","EditSpecDetails","viewdetails","ncontrolCode","addTestGroupNumericTab","userInfo","testgroupspecification","masterData","SelectedSpecification","DeleteSpecDetails","SpecConfirmDelete","tabDetail","tabMap","Map","set","controlMap","userRoleControlRights","inputParam","deleteAction","onSwitchChange","addTestFile","viewTestFile","defaultRecord","filterData","getTestGroupParameter","editTestGroupParameter","addTestGroupCodedResult","viewTestGroupCheckList","dataState","dataStateChange","testTabDetail","paneHeight","ConfirmDelete","getDataForTestMaterial","getTestGroupMaterial","getDataForEditTestMaterial","getTestGroupRulesEngineAdd","settings","skipRulesEngine","takeRulesEngine","getEditTestGroupRulesEngine","getSelectedTestGroupRulesEngine","ConfirmDeleteRule","approveVersion","openflowview","handlePageChangeRuleEngine","viewOutcome","filterParamRulesEngine","filterTransactionList","deleteId","confirmMessage","confirm","intl","formatMessage","id","DeleteTestMaterial","selectedSpecification","napprovalstatus","DRAFT","CORRECTION","inputData","ntreeversiontempcode","selectedNode","ntestgrouptestmaterialcode","selectedMaterial","ntestgrouptestcode","methodUrl","classUrl","esignRights","nformcode","screenData","openModal","crudMaster","warn","onSaveClick","saveType","formRef","onSaveFormula","onSaveParameter","onSaveCodedResult","onSaveSpecification","onSaveMaterial","parameterList","testGroupTestParameter","nparametertypecode","nunitcode","nchecklistversioncode","map","item","testgrouptestparameter","userinfo","NUMERIC","testGroupTestNumericParameter","numericList","ntestgrouptestparametercode","replace","ntestformulacode","testFormula","testgrouptestformula","sformulacalculationcode","sformulacalculationdetail","ntransactionstatus","CHARACTER","characterList","testGroupTestCharParameter","PREDEFINED","testGroupTestPredefParameter","ngradecode","spredefinedname","ntestgrouptestpredefcode","ndefaultstatus","console","log","searchRef","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","SelectedTest","fetchUrl","fecthInputObject","searchFieldList","selectedParameter","testFormulaArray","test","testGroupPredefParameter","nstatus","ACTIVE","sresultparacomment","ntestpredefinedcode","testgrouptestpredefinedparameter","TestGroupAddSpecification","ngendercode","nfromage","ntoage","shigha","shighb","slowa","slowb","sresultvalue","ntestgrouptestclinicspeccode","testgroupaddspecification","testGroupTestMaterial","nmaterialtypecode","jsondata","nmaterialcatcode","nmaterialcode","smaterialname","label","sremarks","testgrouptestmaterial","deleteTest","deleteParam","treeVersionTemplateIndex","findIndex","x","templateVersionStatus","RETIRED","testgrouptest","treetemplatemanipulation","modalName","selected","toLowerCase","key","dataItem","onEsignInputOnChange","onComboChange","caseNo","needRoundingDigit","needUnit","parameterData","defaultUnit","undefined","testGroupInputData","schecklistversionname","oldnmaterialtypecode","parseInt","materialType","getMaterialCategoryBasedMaterialType","oldnmaterialcatcode","getMaterialBasedMaterialCategory","onInputOnChange","optional","indexKey","Object","keys","values","treeData","npositioncode","nlevelno","sleveldescription","ntemptranstestgroupcode","schildnode","nnextchildcode","inputValue","onNumericInputChange","validateEsign","sreason","nreasoncode","spredefinedreason","password","validateEsignCredential","codedResultMandatory","clinicalSpecMandatory","render","TestGroupTestClinicalSpec","paramColumnList","paramMandatoryFields","forEach","mandatory","push","materialColumnList","testView","nsampletypecode","CLINICALTYPE","materialCategoryList","materialList","templateData","length","componentDidUpdate","previousProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport TestGroupParameterTab from './TestGroupParameterTab';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\r\nimport { showEsign, sortData } from '../../components/CommonScript';\r\nimport Esign from '../audittrail/Esign';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { parameterType, SampleType, transactionStatus } from '../../components/Enumeration';\r\nimport EditTestGroupParameter from './EditTestGroupParameter';\r\nimport AddCodedResult from '../testmanagement/AddCodedResult';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport AddSpecification from '../testmanagement/AddSpecification';\r\nimport TemplateForm from '../checklist/checklist/TemplateForm';\r\nimport { toast } from 'react-toastify';\r\nimport TestGroupMaterialTab from './TestGroupMaterialTab';\r\nimport AddTestGroupTestMaterial from './AddTestGroupTestMaterial';\r\nimport AddTestGroupNumericSpecification from './AddTestGroupNumericSpecification';\r\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\r\nimport TestGroupRulesEngineTab from './TestGroupRulesEngineTab';\r\n\r\nclass TestGroupTestTab extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedRecord: {}\r\n        }\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        this.codedResultMandatory = [{ \"idsName\": \"IDS_CODEDRESULT\", \"dataField\": \"spredefinedname\", \"width\": \"200px\", \"mandatory\": true },\r\n        { \"idsName\": \"IDS_ACTUALRESULT\", \"dataField\": \"ngradecode\", \"width\": \"200px\", \"mandatory\": true }];\r\n\r\n        this.clinicalSpecMandatory = [{ \"idsName\": \"IDS_GENDER\", \"dataField\": \"ngendercode\", \"width\": \"200px\", \"mandatory\": true },\r\n        { \"idsName\": \"IDS_FROMAGE\", \"dataField\": \"nfromage\", \"width\": \"200px\", \"mandatory\": true },\r\n        { \"idsName\": \"IDS_TOAGE\", \"dataField\": \"ntoage\", \"width\": \"200px\", \"mandatory\": true }];\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.props.masterData.TestGroupTestClinicalSpec) {\r\n            sortData(this.props.masterData.TestGroupTestClinicalSpec, \"ascending\", \"nfromage\");\r\n        }\r\n\r\n\r\n        this.paramColumnList = [\r\n            { \"idsName\": \"IDS_PARAMETERSYNONYM\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_PARAMETERTYPE\", \"dataField\": \"nparametertypecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n        ]\r\n        if (this.state.selectedRecord[\"parameterTypeCode\"] && this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC) {\r\n            this.paramColumnList = [\r\n                { \"idsName\": \"IDS_PARAMETERSYNONYM\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_PARAMETERTYPE\", \"dataField\": \"nparametertypecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_ROUNDINGDIGITS\", \"dataField\": \"nroundingdigits\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_UNIT\", \"dataField\": \"nunitcode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        }\r\n        if (this.state.selectedRecord[\"parameterTypeCode\"] && this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED) {\r\n            this.paramColumnList = [\r\n                { \"idsName\": \"IDS_PARAMETERSYNONYM\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_PARAMETERTYPE\", \"dataField\": \"nparametertypecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_CODEDRESULT\", \"dataField\": \"spredefinedname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_ACTUALRESULT\", \"dataField\": \"ngradecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        }\r\n        const paramMandatoryFields = [];\r\n\r\n        this.paramColumnList.forEach(item => item.mandatory === true ?\r\n            paramMandatoryFields.push(item) : \"\"\r\n        );\r\n        this.materialColumnList = [\r\n            { \"idsName\": \"IDS_MATERIALTYPE\", \"dataField\": \"nmaterialtypecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_MATERIALCATEGORY\", \"dataField\": \"nmaterialcatcode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_MATERIALNAME\", \"dataField\": \"nmaterialcode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n\r\n        ]\r\n        return (\r\n            <>\r\n                    <div className='grouped-param-inner grouped-tab-inner'>\r\n                        {!this.props.testView ?\r\n                            <CustomTab paneHeight={this.props.paneHeight} tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                            :\r\n                            <CustomTab paneHeight={this.props.paneHeight} tabDetail={this.testTabDetail()} onTabChange={this.onTabChange} />\r\n\r\n                        }\r\n                    </div>\r\n\r\n                {this.props.openChildModal && this.props.screenName &&\r\n                    <SlideOutModal\r\n                        show={this.props.openChildModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.operation}\r\n                        inputParam={this.props.inputParam}\r\n                        screenName={this.props.screenName}\r\n                        esign={this.props.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        onSaveClick={this.onSaveClick}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.screenName === \"IDS_PARAMETER\" ? paramMandatoryFields :\r\n                            this.props.screenName === \"IDS_CODEDRESULT\" ? this.codedResultMandatory : this.props.screenName === \"IDS_CLINICALSPEC\" ? this.clinicalSpecMandatory : this.props.screenName === \"IDS_TESTGROUPTESTMATERIAL\"\r\n                                ? this.materialColumnList : []}\r\n                        addComponent={this.props.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.operation}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> :\r\n                            this.props.screenName === \"IDS_PARAMETER\" ?\r\n                                <>\r\n                                    <EditTestGroupParameter\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        testGroupInputData={this.props.testGroupInputData}\r\n                                        onComboChange={this.onComboChange}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onNumericInputChange={this.onNumericInputChange}\r\n                                    //TestGroupTestClinicalSpec={this.props.masterData.TestGroupTestClinicalSpec}\r\n                                    />\r\n                                    {this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED ||\r\n                                        this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.CHARACTER ||\r\n                                        this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC ?\r\n                                        <Row>\r\n                                            <Col>\r\n                                                <div className=\"horizontal-line\"></div>\r\n                                            </Col>\r\n                                        </Row> : \"\"\r\n                                    }\r\n\r\n                                    {this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED &&\r\n                                        <Row>\r\n                                            <AddCodedResult\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                parameterData={this.props.parameterData}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                onComboChange={this.onComboChange}\r\n                                            />\r\n                                        </Row>}\r\n                                    {this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.CHARACTER &&\r\n                                        <Row>\r\n                                            <Col md=\"12\">\r\n                                                <FormTextarea\r\n                                                    name={\"scharname\"}\r\n                                                    label={this.props.intl.formatMessage({ id: \"IDS_TESTCHARACTER\" })}\r\n                                                    onChange={(event) => this.onInputOnChange(event, 1)}\r\n                                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_TESTCHARACTER\" })}\r\n                                                    value={this.state.selectedRecord[\"scharname\"]}\r\n                                                    rows=\"2\"\r\n                                                    required={false}\r\n                                                    maxLength={255}\r\n                                                >\r\n                                                </FormTextarea>\r\n                                            </Col>\r\n                                        </Row>}\r\n                                    {this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC && this.props.masterData.selectedNode.nsampletypecode!==SampleType.CLINICALTYPE &&\r\n                                        <AddSpecification\r\n                                            selectedRecord={this.state.selectedRecord}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                        />}\r\n                                </> :\r\n                                this.props.screenName === \"IDS_CODEDRESULT\" ?\r\n                                    <AddCodedResult\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        parameterData={this.props.parameterData}\r\n                                        selectedRecord={this.state.selectedRecord}\r\n                                        onComboChange={this.onComboChange}\r\n                                    />\r\n                                    :\r\n                                    this.props.screenName === \"IDS_CLINICALSPEC\" ?\r\n                                        <AddTestGroupNumericSpecification\r\n\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            parameterData={this.props.parameterData}\r\n                                            selectedRecord={this.state.selectedRecord}\r\n                                            onComboChange={this.onComboChange}\r\n                                            onNumericInputChange={this.onNumericInputChange}\r\n                                        />\r\n                                        : <AddTestGroupTestMaterial\r\n                                            materialType={this.props.materialType}\r\n                                            selectedRecord={this.state.selectedRecord}\r\n                                            materialCategoryList={this.props.materialCategoryList}\r\n                                            materialList={this.props.materialList}\r\n                                            onComboChange={this.onComboChange}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onNumericInputChange={this.onNumericInputChange}\r\n\r\n                                        />\r\n\r\n                        }\r\n                    />\r\n                }\r\n                {this.props.testGroupCheckList && this.props.testGroupCheckList.templateData &&\r\n                    this.props.testGroupCheckList.templateData.length > 0 &&\r\n                    <TemplateForm\r\n                        templateData={this.props.testGroupCheckList.templateData}\r\n                        handleClose={this.handleClose}\r\n                        screenName=\"IDS_VIEWCHECKLIST\"\r\n                        needSaveButton={false}\r\n                        viewScreen={this.props.openTemplateModal}\r\n                        onTemplateInputChange={this.onTemplateInputChange}\r\n                        onTemplateComboChange={this.onTemplateComboChange}\r\n                        onTemplateDateChange={this.onTemplateDateChange}\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    onTemplateInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTemplateComboChange = (comboData, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTemplateDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state.selectedRecord || {};\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleClose = () => {\r\n        let updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: {},\r\n                testGroupCheckList: {},\r\n                openTemplateModal: false\r\n            }\r\n        };\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.loadEsign;\r\n        let openChildModal = this.props.openChildModal;\r\n        let selectedRecord = this.props.selectedRecord;\r\n        if (this.props.loadEsign) {\r\n            if (this.props.operation === \"delete\" || this.props.operation === \"Default\") {\r\n                loadEsign = false;\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord[\"agree\"] = 4;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        } else {\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    EditSpecDetails = (viewdetails, ncontrolCode) => {\r\n\r\n        this.props.addTestGroupNumericTab(\"update\", viewdetails, this.props.userInfo, { testgroupspecification: this.props.masterData.SelectedSpecification }, this.props.masterData, ncontrolCode)\r\n    };\r\n\r\n    DeleteSpecDetails = (viewdetails, ncontrolCode) => {\r\n        this.SpecConfirmDelete(\"delete\", 1, viewdetails, ncontrolCode)\r\n    };\r\n\r\n\r\n    tabDetail = () => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_PARAMETER\",\r\n            <TestGroupParameterTab\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                userInfo={this.props.userInfo}\r\n                inputParam={this.props.inputParam}\r\n                masterData={this.props.masterData}\r\n                deleteAction={this.deleteAction}\r\n                onSwitchChange={this.onSwitchChange}\r\n                addTestFile={this.props.addTestFile}\r\n                viewTestFile={this.viewTestFile}\r\n                defaultRecord={this.defaultRecord}\r\n                filterData={this.props.filterData}\r\n                getTestGroupParameter={this.props.getTestGroupParameter}\r\n                editTestGroupParameter={this.props.editTestGroupParameter}\r\n                addTestGroupCodedResult={this.props.addTestGroupCodedResult}\r\n                addTestGroupNumericTab={this.props.addTestGroupNumericTab}\r\n                viewTestGroupCheckList={this.props.viewTestGroupCheckList}\r\n                EditSpecDetails={this.EditSpecDetails}\r\n                DeleteSpecDetails={this.DeleteSpecDetails}\r\n                dataState={this.props.dataState}\r\n                dataStateChange={this.props.dataStateChange}\r\n\r\n            />);\r\n        return tabMap;\r\n    }\r\n    testTabDetail = () => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_PARAMETER\",\r\n            <TestGroupParameterTab\r\n                paneHeight={this.props.paneHeight}\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                userInfo={this.props.userInfo}\r\n                inputParam={this.props.inputParam}\r\n                masterData={this.props.masterData}\r\n                deleteAction={this.deleteAction}\r\n                onSwitchChange={this.onSwitchChange}\r\n                addTestFile={this.props.addTestFile}\r\n                viewTestFile={this.viewTestFile}\r\n                defaultRecord={this.defaultRecord}\r\n                filterData={this.props.filterData}\r\n                getTestGroupParameter={this.props.getTestGroupParameter}\r\n                editTestGroupParameter={this.props.editTestGroupParameter}\r\n                addTestGroupCodedResult={this.props.addTestGroupCodedResult}\r\n                addTestGroupNumericTab={this.props.addTestGroupNumericTab}\r\n                viewTestGroupCheckList={this.props.viewTestGroupCheckList}\r\n                EditSpecDetails={this.EditSpecDetails}\r\n                DeleteSpecDetails={this.DeleteSpecDetails}\r\n                hasDynamicColSize={true}\r\n                dataState={this.props.dataState}\r\n                dataStateChange={this.props.dataStateChange}\r\n            />);\r\n        tabMap.set(\"IDS_MATERIAL\",\r\n            <TestGroupMaterialTab\r\n                paneHeight={this.props.paneHeight}\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                userInfo={this.props.userInfo}\r\n                inputParam={this.props.inputParam}\r\n                masterData={this.props.masterData}\r\n                ConfirmDelete={this.ConfirmDelete}\r\n                getDataForTestMaterial={this.props.getDataForTestMaterial}\r\n                getTestGroupMaterial={this.props.getTestGroupMaterial}\r\n                getDataForEditTestMaterial={this.props.getDataForEditTestMaterial}\r\n                selectedRecord={this.state.selectedRecord}\r\n\r\n            />);\r\n            tabMap.set(\"IDS_RULESENGINE\",\r\n            <TestGroupRulesEngineTab\r\n                paneHeight={this.props.paneHeight}\r\n                getTestGroupRulesEngineAdd={this.props.getTestGroupRulesEngineAdd}\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                userInfo={this.props.userInfo} \r\n                selectedRecord={this.state.selectedRecord} \r\n                masterData={this.props.masterData}\r\n                settings={this.props.settings}\r\n                skipRulesEngine={this.props.skipRulesEngine}\r\n                takeRulesEngine={this.props.takeRulesEngine}\r\n                getEditTestGroupRulesEngine={ this.props.getEditTestGroupRulesEngine}\r\n                getSelectedTestGroupRulesEngine={this.props.getSelectedTestGroupRulesEngine}\r\n                ConfirmDeleteRule={this.props.ConfirmDeleteRule}\r\n                approveVersion={this.props.approveVersion}\r\n                openflowview={this.props.openflowview} \r\n                handlePageChangeRuleEngine={this.props.handlePageChangeRuleEngine} \r\n                viewOutcome={this.props.viewOutcome} \r\n                filterParamRulesEngine={this.props.filterParamRulesEngine}\r\n                filterTransactionList={this.props.filterTransactionList} \r\n\r\n            />);\r\n        return tabMap;\r\n    }\r\n    ConfirmDelete = (operation, deleteId, selectedRecord) => {\r\n        this.confirmMessage.confirm(\r\n            \"deleteMessage\",\r\n            this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () =>\r\n                this.DeleteTestMaterial(\r\n                    operation,\r\n                    deleteId, selectedRecord\r\n                )\r\n        );\r\n    };\r\n\r\n    SpecConfirmDelete = (operation, deleteId, selectedRecord, ncontrolCode) => {\r\n        this.confirmMessage.confirm(\r\n            \"deleteMessage\",\r\n            this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () =>\r\n                this.deleteAction(selectedRecord, \"delete\", ncontrolCode, \"TestGroupAddSpecification\", \"openChildModal\")\r\n        );\r\n    };\r\n    DeleteTestMaterial = (operation, ncontrolCode) => {\r\n        let selectedSpecification= this.props.masterData.SelectedSpecification;\r\n        if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT\r\n            || selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n        let selectedRecord = this.state.selectedRecord\r\n        let inputData = [];\r\n        inputData = { ntreeversiontempcode: this.props.masterData.selectedNode.ntreeversiontempcode }\r\n\r\n        inputData[\"testgrouptestmaterial\"] = {\r\n            ntestgrouptestmaterialcode: this.props.masterData.selectedMaterial.ntestgrouptestmaterialcode,\r\n            ntestgrouptestcode: this.props.masterData.selectedMaterial.ntestgrouptestcode,\r\n\r\n        };\r\n\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupTestMaterial\",\r\n            classUrl: this.props.inputParam.classUrl,\r\n            inputData: inputData,\r\n            operation: \"delete\",\r\n        };\r\n        const masterData = this.props.masterData;\r\n        if (\r\n            showEsign(\r\n                this.props.esignRights,\r\n                this.props.userInfo.nformcode,\r\n                ncontrolCode\r\n            )\r\n        ) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    openModal: true,\r\n                    screenName: \"IDS_TESTGROUPTESTMATERIAL\",\r\n                    operation: operation.operation,\r\n                },\r\n            };\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\r\n        }\r\n    }\r\n    else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n    }\r\n    }\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputParam = {};\r\n        // if(this.props.screenName === \"IDS_TEST\" \r\n        //     || this.props.screenName === \"IDS_EDITTESTGROUPTEST\") {\r\n        //     inputParam = this.onSaveTest(saveType, formRef);\r\n        // } else \r\n        if (this.props.screenName === \"IDS_FORMULA\") {\r\n            inputParam = this.onSaveFormula(saveType, formRef);\r\n        } else if (this.props.screenName === \"IDS_PARAMETER\") {\r\n            inputParam = this.onSaveParameter(saveType, formRef);\r\n        } else if (this.props.screenName === \"IDS_CODEDRESULT\") {\r\n            inputParam = this.onSaveCodedResult(saveType, formRef);\r\n        } else if (this.props.screenName === \"IDS_CLINICALSPEC\") {\r\n            inputParam = this.onSaveSpecification(saveType, formRef);\r\n        }\r\n        else if (this.props.screenName === \"IDS_TESTGROUPTESTMATERIAL\") {\r\n            inputParam = this.onSaveMaterial(saveType, formRef);\r\n        }\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", {});\r\n        }\r\n    }\r\n\r\n    onSaveParameter = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const parameterList = [\"ntestgrouptestparametercode\", \"ntestgrouptestcode\", \"ntestparametercode\", \"sparametersynonym\", \"nroundingdigits\",\r\n            \"nresultmandatory\", \"nreportmandatory\", \"sspecdesc\", \"nsorter\"];\r\n        let testGroupTestParameter = {\r\n            nparametertypecode: selectedRecord.nparametertypecode.value,\r\n            nunitcode: selectedRecord.nunitcode?selectedRecord.nunitcode.value:-1,\r\n            nchecklistversioncode:selectedRecord.nchecklistversioncode? selectedRecord.nchecklistversioncode.value:-1\r\n        }\r\n        parameterList.map(item => {\r\n            return testGroupTestParameter[item] = selectedRecord[item] ? selectedRecord[item] : \"\";\r\n        });\r\n        let inputData = {\r\n            testgrouptestparameter: testGroupTestParameter,\r\n            userinfo: this.props.userInfo\r\n        };\r\n        if (selectedRecord.nparametertypecode.value === parameterType.NUMERIC) {\r\n            let testGroupTestNumericParameter = {};\r\n            const numericList = [\"sminlod\", \"smaxlod\", \"sminb\", \"smina\", \"smaxa\", \"smaxb\", \"sminloq\", \"smaxloq\", \"sdisregard\", \"sresultvalue\"];\r\n            testGroupTestNumericParameter[\"ntestgrouptestparametercode\"] = selectedRecord.ntestgrouptestparametercode;\r\n            numericList.map(item => {\r\n                return testGroupTestNumericParameter[item] = selectedRecord[item] ? selectedRecord[item] === \"0\" ? selectedRecord[item] : selectedRecord[item].replace(/^0+/, '') : null;\r\n            });\r\n            inputData[\"testgrouptestnumericparameter\"] = testGroupTestNumericParameter;\r\n            if (selectedRecord.ntestformulacode) {\r\n                const testFormula = selectedRecord.ntestformulacode.item;\r\n                const testgrouptestformula = {\r\n                    ntestgrouptestparametercode: selectedRecord.ntestgrouptestparametercode,\r\n                    ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\r\n                    ntestformulacode: testFormula.ntestformulacode,\r\n                    sformulacalculationcode: testFormula.sformulacalculationcode,\r\n                    sformulacalculationdetail: testFormula.sformulacalculationdetail,\r\n                    ntransactionstatus: transactionStatus.YES\r\n                };\r\n                inputData[\"testgrouptestformula\"] = testgrouptestformula;\r\n            } else {\r\n                inputData[\"testgrouptestformula\"] = null;\r\n            }\r\n        } else if (selectedRecord.nparametertypecode.value === parameterType.CHARACTER) {\r\n            const characterList = [\"ntestgrouptestparametercode\", \"scharname\"];\r\n            let testGroupTestCharParameter = {};\r\n            characterList.map(item => {\r\n                return testGroupTestCharParameter[item] = selectedRecord[item] ? selectedRecord[item] : \"\";\r\n            });\r\n            inputData[\"testgrouptestcharparameter\"] = testGroupTestCharParameter;\r\n        } else if (selectedRecord.nparametertypecode.value === parameterType.PREDEFINED) {\r\n            const testGroupTestPredefParameter = {\r\n                ntestgrouptestparametercode: selectedRecord.ntestgrouptestparametercode,\r\n                ngradecode: selectedRecord.ngradecode.value,\r\n                spredefinedname: selectedRecord.spredefinedname,\r\n                ntestgrouptestpredefcode: selectedRecord.ntestgrouptestpredefcode,\r\n                ndefaultstatus: selectedRecord.ndefaultstatus\r\n            }\r\n            inputData[\"testgrouptestpredefparameter\"] = testGroupTestPredefParameter;\r\n        }\r\n        console.log(\"input data:\", inputData);\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: \"update\",\r\n            methodUrl: \"TestGroupParameter\",\r\n            saveType, formRef, searchRef: this.searchRef,\r\n            postParam: {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n            }\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveFormula = (saveType, formRef) => {\r\n        const masterData = this.props.masterData;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const selectedParameter = masterData.selectedParameter;\r\n        const testFormulaArray = selectedRecord.ntestformulacode.map(test => {\r\n            return {\r\n                ntestgrouptestcode: selectedParameter.ntestgrouptestcode,\r\n                ntestgrouptestparametercode: selectedParameter.ntestgrouptestparametercode,\r\n                ntestformulacode: test.item.ntestformulacode,\r\n                sformulacalculationcode: test.item.sformulacalculationcode,\r\n                sformulacalculationdetail: test.item.sformulacalculationdetail,\r\n                ntransactionstatus: transactionStatus.NO\r\n            }\r\n        });\r\n        const inputData = {\r\n            testgroupspecification: masterData.SelectedSpecification,\r\n            testgrouptestformula: testFormulaArray,\r\n            userinfo: this.props.userInfo\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: this.props.operation,\r\n            methodUrl: \"TestGroupTestFormula\",\r\n            saveType, formRef, searchRef: this.searchRef,\r\n            postParam: {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n            }\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveCodedResult = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const testGroupPredefParameter = {\r\n            ndefaultstatus: transactionStatus.NO,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            ntestgrouptestpredefcode: selectedRecord[\"ntestgrouptestpredefcode\"],\r\n            ntestgrouptestparametercode: this.props.masterData.selectedParameter[\"ntestgrouptestparametercode\"],\r\n            ngradecode: selectedRecord[\"ngradecode\"].value,\r\n            spredefinedname: selectedRecord[\"spredefinedname\"],\r\n            sresultparacomment: selectedRecord[\"sresultparacomment\"],\r\n            ntestpredefinedcode: this.props.masterData.selectedParameter[\"ntestpredefinedcode\"],\r\n\r\n        };\r\n        const inputParam = {\r\n            inputData: {\r\n                testgrouptestpredefinedparameter: testGroupPredefParameter,\r\n                userinfo: this.props.userInfo,\r\n                testgroupspecification: this.props.masterData.SelectedSpecification\r\n            },\r\n            classUrl: \"testgroup\",\r\n            operation: this.props.operation,\r\n            methodUrl: \"TestGroupPredefParameter\",\r\n            saveType, formRef, searchRef: this.searchRef,\r\n            postParam: {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n            }\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n\r\n\r\n    onSaveSpecification = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        // if(selectedRecord[\"nfromage\"]<selectedRecord[\"ntoage\"]){\r\n        \r\n        const TestGroupAddSpecification = {\r\n            nstatus: transactionStatus.ACTIVE,\r\n            ntestgrouptestparametercode: this.props.masterData.selectedParameter[\"ntestgrouptestparametercode\"],\r\n            ngendercode: selectedRecord[\"ngendercode\"].value,\r\n            nfromage: selectedRecord[\"nfromage\"],\r\n            ntoage: selectedRecord[\"ntoage\"],\r\n            shigha: selectedRecord[\"nhigha\"],\r\n            shighb: selectedRecord[\"nhighb\"],\r\n            slowa: selectedRecord[\"nlowa\"],\r\n            slowb: selectedRecord[\"nlowb\"],\r\n            sresultvalue: selectedRecord[\"sresultvalue\"],\r\n\r\n            ntestgrouptestclinicspeccode: selectedRecord[\"ntestgrouptestclinicspeccode\"],\r\n\r\n        };\r\n\r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                testgroupaddspecification: TestGroupAddSpecification,\r\n                userinfo: this.props.userInfo,\r\n                testgroupspecification: this.props.masterData.SelectedSpecification\r\n            },\r\n            classUrl: \"testgroup\",\r\n            operation: this.props.operation,\r\n            methodUrl: \"TestGroupAddSpecification\",\r\n            saveType, formRef, searchRef: this.searchRef,\r\n            postParam: {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n            }\r\n        }\r\n        return inputParam;\r\n    // }else{\r\n    //     toast.warn(this.props.intl.formatMessage({id: \"IDS_SELECTEDTEMPLATEISRETIRED\"})); \r\n    // }\r\n    }\r\n    onSaveMaterial = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        let testGroupTestMaterial = []\r\n        if (this.props.operation === \"create\") {\r\n            testGroupTestMaterial = {\r\n                ntestgrouptestcode: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                ntestgrouptestmaterialcode: this.props.masterData.SelectedTest.ntestgrouptestmaterialcode,\r\n                nmaterialtypecode: selectedRecord[\"nmaterialtypecode\"].item.jsondata.nmaterialtypecode,\r\n                nmaterialcatcode: selectedRecord[\"nmaterialcatcode\"].value,\r\n                nmaterialcode: selectedRecord[\"nmaterialcode\"].value,\r\n                smaterialname: selectedRecord[\"nmaterialcode\"].label,\r\n                sremarks: selectedRecord[\"sremarks\"],\r\n                nstatus: transactionStatus.ACTIVE,\r\n\r\n            };\r\n        }\r\n        else {\r\n            testGroupTestMaterial = {\r\n                ntestgrouptestcode: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                ntestgrouptestmaterialcode: this.props.masterData.selectedMaterial.ntestgrouptestmaterialcode,\r\n                nmaterialtypecode: selectedRecord[\"nmaterialtypecode\"].value,\r\n                nmaterialcatcode: selectedRecord[\"nmaterialcatcode\"].value,\r\n                nmaterialcode: selectedRecord[\"nmaterialcode\"].value,\r\n                sremarks: selectedRecord[\"sremarks\"],\r\n                nstatus: transactionStatus.ACTIVE,\r\n\r\n            };\r\n        }\r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                testgrouptestmaterial: testGroupTestMaterial,\r\n                ntreeversiontempcode: this.props.masterData.selectedNode.ntreeversiontempcode,\r\n                userinfo: this.props.userInfo,\r\n            },\r\n            classUrl: \"testgroup\",\r\n            operation: this.props.operation,\r\n            methodUrl: \"TestGroupTestMaterial\",\r\n            saveType, formRef, searchRef: this.searchRef,\r\n            postParam: {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n            }\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    deleteTest = (deleteParam) => {\r\n\r\n        const masterData = this.props.masterData;\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            const testgroupspecification = this.props.masterData.SelectedSpecification;\r\n            if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n                || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                const screenName = deleteParam.screenName;\r\n                const inputParam = {\r\n                    inputData: {\r\n                        testgrouptest: deleteParam.selectedRecord,\r\n                        userinfo: this.props.userInfo,\r\n                        testgroupspecification,\r\n                        treetemplatemanipulation: this.props.masterData.selectedNode\r\n                    },\r\n                    classUrl: \"testgroup\",\r\n                    operation: \"delete\",\r\n                    methodUrl: \"Test\",\r\n                    screenName: \"IDS_TEST\",\r\n                    postParam: {\r\n                        inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                        primaryKeyValue: deleteParam.selectedRecord.ntestgrouptestcode,\r\n                        fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                        masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n                    }\r\n                }\r\n                const masterData = this.props.masterData;\r\n                if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData },\r\n                            openModal: true, screenName: screenName, operation: deleteParam.operation, selectedRecord: {}\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteAction = (item, operation, ncontrolCode, methodUrl, modalName) => {\r\n\r\n        const masterData = this.props.masterData;\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            const selected = item;\r\n            const inputParam = {\r\n                inputData: {\r\n                    [methodUrl.toLowerCase()]: selected,\r\n                    userinfo: this.props.userInfo,\r\n                    testgroupspecification: this.props.masterData.SelectedSpecification\r\n                },\r\n                classUrl: \"testgroup\",\r\n                operation: operation,\r\n                methodUrl: methodUrl,\r\n                screenName: \"IDS_TEST\",\r\n                postParam: {\r\n                    inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                    primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                    fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                    masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n                }\r\n            }\r\n            const masterData = this.props.masterData;\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        [modalName]: true, screenName: \"IDS_TEST\", operation: operation, selectedRecord: {}\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    onSwitchChange = (item, key, methodUrl, event) => {\r\n        const masterData = this.props.masterData;\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            //NIBSCRT-2236\r\n            const testgroupspecification = this.props.masterData.SelectedSpecification;\r\n            if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n                || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                let dataItem = item;\r\n                if (methodUrl === \"TestGroupTestFormula\") {\r\n                    dataItem[\"ntransactionstatus\"] = transactionStatus.YES;\r\n                } else if (methodUrl === 'TestGroupPredefParameter') {\r\n                    // if(this.props.masterData.SelectedSpecification.napprovalstatus === transactionStatus.DRAFT || this.props.masterData.SelectedSpecification.napprovalstatus === transactionStatus.CORRECTION)\r\n                    // {\r\n                    dataItem['ndefaultstatus'] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n                    // }\r\n                    // else{\r\n                    //     return toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n                    // }\r\n\r\n                }\r\n                else {\r\n                    dataItem[\"ndefaultstatus\"] = transactionStatus.YES;\r\n                }\r\n                const inputParam = {\r\n                    inputData: {\r\n                        [key]: dataItem,\r\n                        userinfo: this.props.userInfo,\r\n                        testgroupspecification: this.props.masterData.SelectedSpecification\r\n                    },\r\n                    classUrl: \"testgroup\",\r\n                    operation: \"default\",\r\n                    methodUrl: methodUrl\r\n                }\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", {});\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, caseNo) => {\r\n        let inputData = [];\r\n        let masterData = { ...this.props.masterData }\r\n        let inputParam = []\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                selectedRecord[\"parameterTypeCode\"] = comboData.value;\r\n                selectedRecord[fieldName] = comboData;\r\n                const needRoundingDigit = comboData.value === parameterType.NUMERIC ? false : true;\r\n                const needUnit = comboData.value === parameterType.NUMERIC ? false : true;\r\n                selectedRecord[\"nroundingdigits\"] =  0;\r\n                selectedRecord[\"nunitcode\"] = comboData.value === parameterType.NUMERIC ? this.props.parameterData.defaultUnit : undefined;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        selectedRecord,\r\n                        testGroupInputData: {\r\n                            ...this.props.testGroupInputData,\r\n                            needRoundingDigit, needUnit\r\n                        }\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n                break;\r\n\r\n            case 3:\r\n                selectedRecord[\"schecklistversionname\"] = comboData.item.schecklistversionname;\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n            case 4:\r\n                let oldnmaterialtypecode = selectedRecord[\"nmaterialtypecode\"].value ? selectedRecord[\"nmaterialtypecode\"].value : selectedRecord[\"nmaterialtypecode\"];\r\n\r\n                if (oldnmaterialtypecode !== comboData.value) {\r\n                    delete selectedRecord['nmaterialcatcode']\r\n                    delete selectedRecord['nmaterialcode']\r\n                }\r\n                selectedRecord[\"nmaterialtypecode\"] = comboData.value;\r\n\r\n                selectedRecord[fieldName] = comboData;\r\n                inputData = {\r\n                    userinfo: this.props.userInfo,\r\n                    nmaterialtypecode: parseInt(comboData.value),\r\n                }\r\n                inputParam = { materialType: this.props.materialType, \r\n                    operation: this.props.operation, masterData,\r\n                     inputData, selectedRecord, \r\n                     screenName: \"IDS_TESTGROUPTESTMATERIAL\",ncontrolCode:this.props.ncontrolCode }\r\n                this.props.getMaterialCategoryBasedMaterialType(inputParam)\r\n                break;\r\n            case 5:\r\n                if (selectedRecord[\"nmaterialcatcode\"]) {\r\n                    let oldnmaterialcatcode = selectedRecord[\"nmaterialcatcode\"].value ? selectedRecord[\"nmaterialcatcode\"].value : selectedRecord[\"nmaterialcatcode\"];\r\n                    if (oldnmaterialcatcode !== comboData.value) {\r\n\r\n                        delete selectedRecord['nmaterialcode']\r\n                    }\r\n                }\r\n                selectedRecord[\"nmaterialcatcode\"] = comboData.value;\r\n\r\n                selectedRecord[fieldName] = comboData;\r\n                inputData = {\r\n                    userinfo: this.props.userInfo,\r\n                    nmaterialcatcode: parseInt(selectedRecord[\"nmaterialcatcode\"].value),\r\n                    nmaterialtypecode: parseInt(selectedRecord[\"nmaterialtypecode\"].value),\r\n\r\n                }\r\n                inputParam = { masterData, inputData, \r\n                    selectedRecord, operation: this.props.operation, \r\n                    selectedRecord, screenName: \"IDS_TESTGROUPTESTMATERIAL\" ,ncontrolCode:this.props.ncontrolCode }\r\n                this.props.getMaterialBasedMaterialCategory(inputParam)\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event, caseNo, optional) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (event.target.type === 'checkbox') {\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\r\n                } else if (event.target.type === 'radio') {\r\n                    selectedRecord[event.target.name] = optional;\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                selectedRecord[event.target.name] = event.target.value;\r\n                const indexKey = Object.keys(optional)[0];\r\n                const value = Object.values(optional)[0];\r\n                const treeData = {\r\n                    ntreeversiontempcode: value.ntreeversiontempcode,\r\n                    npositioncode: value.nlevelno - 1,\r\n                    sleveldescription: event.target.value,\r\n                    ntemptranstestgroupcode: value.ntemptranstestgroupcode,\r\n                    nformcode: 62,\r\n                    schildnode: value.schildnode,\r\n                    nnextchildcode: value.schildnode\r\n                }\r\n                let treetemplatemanipulation = selectedRecord.treetemplatemanipulation || [];\r\n                treetemplatemanipulation[indexKey] = treeData;\r\n                selectedRecord[\"treetemplatemanipulation\"] = treetemplatemanipulation;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 4:\r\n                const inputValue = event.target.value;\r\n                if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        console.log(\"value:\", value, name);\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (name === \"nroundingdigits\") {\r\n\r\n            // if (/^-?\\d*?$/.test(value.target.value) || value.target.value === \"\") {\r\n            //     console.log(\"val:\", value.target.value);\r\n            //     selectedRecord[name] = value.target.value;\r\n            // }\r\n            // if (/^-?\\d*?$/.test(value) || value === \"\") {\r\n            //    // console.log(\"val:\", value);\r\n            //     selectedRecord[name] = value;\r\n            // }\r\n             //const values = value.target.value.replace(/[^-^0-9]/g, '');\r\n             if (/^[0-9]+$/.test(value.target.value) || value.target.value === \"\") {\r\n                selectedRecord[name] = value.target.value;\r\n     \r\n             }else{\r\n                selectedRecord[name] = \"\";\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[name] = value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default injectIntl(TestGroupTestTab);"]},"metadata":{},"sourceType":"module"}