{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\sidebar\\\\sidebar.component.jsx\";\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink, withRouter } from 'react-router-dom';\nimport { Tab, Nav, Image, Accordion, Button } from 'react-bootstrap';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Preloader from '../preloader/preloader.component';\nimport ContextAwareToggle from './ContextAwareToggle';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { callService, navPage, elnLoginAction, sdmsLoginAction, updateStore } from '../../actions';\nimport { SidebarNav, SidebarBrand, SidebarBrandTxt, NavHeader, CollapseInner } from '../../components/sidebar/sidebar.styles'; // import HomeListLogo from '../../assets/image/homelist.svg';\n\nimport toggleExpand from \"../../assets/image/expand-icon.svg\";\nimport toggleCollapse from \"../../assets/image/collapse-icon.svg\";\nimport PrimaryLogo from '../../assets/image/sidebar-logo.png';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport { formatInputDate } from '../CommonScript'; //import LogiLabLogo from '../../assets/image/logilablogo.png'\n//import SDMSLogo from '../../assets/image/sdmslogo.png'\n\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Menu extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.getDetail = (classUrl, methodUrl, formCode, displayName, moduleCode, formname, modulename) => {\n      this.props.inputRef.current.value = \"\";\n\n      if (this.props.Login.userInfo.nformcode !== formCode) {\n        const userInfo = { ...this.props.Login.userInfo,\n          \"nformcode\": formCode,\n          \"nmodulecode\": moduleCode,\n          \"sformname\": formname.sdisplayname,\n          \"smodulename\": modulename.sdisplayname\n        };\n        const inputParam = {\n          inputData: {\n            \"userinfo\": userInfo,\n            currentdate: formatInputDate(new Date(), true)\n          },\n          classUrl,\n          methodUrl,\n          displayName,\n          key: `MenuId_${formname.nmenucode}`,\n          serviceNeed: true\n        };\n        this.props.callService(inputParam);\n      }\n    };\n\n    this.onELNLoginClick = () => {\n      if (this.props.Login.sdmselnsettings && this.props.Login.sdmselnsettings[3]) {\n        const serverUrl = this.props.Login.sdmselnsettings[3] + \"Login/Validateuser\";\n        const uiUrl = this.props.Login.sdmselnsettings[4];\n        const userInfo = this.props.Login.userInfo;\n        const inputParam = {\n          username: userInfo.sloginid,\n          lssitemaster: {\n            \"sitecode\": \"1\"\n          },\n          password: userInfo.spassword,\n          lsusergroup: {\n            \"usergroupname\": userInfo.suserrolename\n          }\n        };\n        this.props.elnLoginAction(inputParam, serverUrl, uiUrl);\n      } else {\n        toast.info(this.intl.FormattedMessage({\n          id: \"IDS_ELNSERVERURLNOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.onSDMSLoginClick = () => {\n      if (this.props.Login.sdmselnsettings && this.props.Login.sdmselnsettings[1]) {\n        const serverUrl = this.props.Login.sdmselnsettings[1] + \"/Login/validatelinkUser\";\n        const uiUrl = this.props.Login.sdmselnsettings[2];\n        const userInfo = this.props.Login.userInfo;\n        const inputParam = {\n          sUserName: userInfo.sloginid,\n          sSiteCode: \"DEFAULT\",\n          sGroupName: userInfo.suserrolename\n        };\n        this.props.sdmsLoginAction(inputParam, serverUrl, uiUrl);\n      } else {\n        toast.info(this.intl.FormattedMessage({\n          id: \"IDS_ELNSERVERURLNOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.setKey = k => {\n      // this.props.inputRef.current.value=\"\"\n      this.setState({\n        key: k\n      });\n    };\n\n    this.getDetailHome = () => {\n      const userInfo = { ...this.props.Login.userInfo\n      };\n      delete userInfo['nformcode'];\n      delete userInfo['nmodulecode'];\n      delete userInfo['sformname'];\n      delete userInfo['smodulename']; // const inputParam = {\n      //     inputData: { \"userinfo\": userInfo, currentdate: formatInputDate(new Date(), true) }\n      //     ,serviceNeed:false\n      // };\n      // const { history } = this.props;\n      // history.push('/home');\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData: [],\n          userInfo,\n          organisation: undefined,\n          loading: false,\n          displayName: \"\"\n        }\n      }; //     this.props.updateStore(updateInfo);\n\n      this.props.layOutGetHome(updateInfo); //  this.props.callService(inputParam);\n    };\n\n    this.ToggleAction = value => {\n      this.setState({\n        isSidebarActive: value\n      });\n    };\n\n    this.pinnedEvent = () => {\n      let {\n        isPinned\n      } = this.state;\n      this.setState({\n        isPinned: !isPinned\n      });\n    };\n\n    this.formRef = React.createRef();\n    this.state = {\n      show: false,\n      nusermultirolecode: -1,\n      selectedRecord: {},\n      isSidebarActive: false,\n      isPinned: false,\n      key: this.props.Login.menuDesign && this.props.Login.menuDesign[0] ? `MenuId_${this.props.Login.menuDesign[0].nmenucode}` : \"MenuId_0\"\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.Login.menuDesign !== prevProps.Login.menuDesign) {\n      this.setState({\n        key: this.props.Login.menuDesign && this.props.Login.menuDesign[0] ? `MenuId_${this.props.Login.menuDesign[0].nmenucode}` : \"MenuId_0\"\n      });\n    }\n\n    if (this.props.Login.key !== prevProps.Login.key) {\n      this.setState({\n        key: this.props.Login.key\n      });\n    }\n  }\n\n  render() {\n    const {\n      isSidebarActive\n    } = this.state;\n    const {\n      menuDesign,\n      loading\n    } = this.props.Login;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Preloader, {\n      loading: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(SidebarNav, {\n      className: `d-flex side-nav sidebar sidebar-dark bg-gradient-primary ${isSidebarActive && !this.state.isPinned || this.state.key === \"MenuId_-2\" ? 'toggled' : ''} ${this.state.isPinned && 'at-sidebar-pinned'}`,\n      onMouseEnter: () => this.ToggleAction(false),\n      onMouseLeave: () => this.ToggleAction(true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Tab.Container, {\n      activeKey: this.state.key,\n      onSelect: k => this.setKey(k),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Nav, {\n      className: \"nav flex-column side-nav\",\n      variant: \"pills\",\n      key: \"MenuIcon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"text-center\",\n      key: this.state.key,\n      onClick: () => this.pinnedEvent(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: !this.state.isPinned ? toggleExpand : toggleCollapse,\n      alt: \"sidebar\",\n      width: \"34\",\n      height: \"34\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      to: '/home',\n      onClick: e => this.getDetailHome(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 30\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faHome,\n      size: \"2x\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 33\n      }\n    })), menuDesign && menuDesign.map(menu => {\n      return menu.nmenucode !== -2 ? /*#__PURE__*/React.createElement(Nav.Link, {\n        key: menu.nmenucode,\n        eventKey: `MenuId_${menu.nmenucode}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Image, {\n        src: require(`../../assets/image/${menu.smenuname.toLowerCase()}.svg`),\n        alt: \"sidebar\",\n        width: \"34\",\n        height: \"34\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 45\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 45\n        }\n      }, menu.sdisplayname)) : /*#__PURE__*/React.createElement(Nav.Link, {\n        to: '/home',\n        key: menu.nmenucode,\n        eventKey: `MenuId_${menu.nmenucode}`,\n        onClick: e => this.getDetailHome(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 55\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faHome,\n        size: \"2x\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 45\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 45\n        }\n      }, 'Home'));\n    }), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"mt-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: PrimaryLogo,\n      alt: \"Primary-Logo\",\n      width: \"45\",\n      height: \"60\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(Tab.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 25\n      }\n    }, menuDesign && menuDesign.map(menu => {\n      return /*#__PURE__*/React.createElement(Tab.Pane, {\n        key: menu.nmenucode,\n        eventKey: `MenuId_${menu.nmenucode}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Accordion, {\n        className: \"navbar-nav position-relative\",\n        as: \"ul\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(SidebarBrand, {\n        className: \"sidebar-brand d-flex align-items-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(SidebarBrandTxt, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: menu.sdisplayname,\n        defaultMessage: menu.sdisplayname,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 53\n        }\n      }))), /*#__PURE__*/React.createElement(PerfectScrollbar, {\n        className: \"sidebar-scroll\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 45\n        }\n      }, menu.nmenucode !== -2 && menu.lstmodule.map(module => {\n        return /*#__PURE__*/React.createElement(Nav.Item, {\n          key: module.nmodulecode,\n          as: \"li\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 61\n          }\n        }, /*#__PURE__*/React.createElement(ContextAwareToggle, {\n          eventKey: module.nmodulecode,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 65\n          }\n        }, /*#__PURE__*/React.createElement(NavHeader, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 69\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: module.sdisplayname,\n          defaultMessage: module.sdisplayname,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 73\n          }\n        }))), /*#__PURE__*/React.createElement(Accordion.Collapse, {\n          eventKey: module.nmodulecode,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 65\n          }\n        }, /*#__PURE__*/React.createElement(CollapseInner, {\n          className: \"bg-transparent py-2 collapse-inner rounded\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 69\n          }\n        }, module.lstforms !== null && module.lstforms.map(forms => {\n          return /*#__PURE__*/React.createElement(NavLink, {\n            className: `collapse-item ${forms.nformcode === this.props.Login.userInfo.nformcode ? 'active-form' : ''}`,\n            key: forms.nformcode,\n            nformcode: forms.nformcode,\n            to: '/' + forms.sclassname,\n            onClick: () => this.getDetail(forms.sclassname.toLowerCase(), forms.surl, forms.nformcode, forms.sdisplayname, module.nmodulecode, forms, module),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 85\n            }\n          }, /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: forms.sdisplayname,\n            defaultMessage: forms.sdisplayname,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 89\n            }\n          }));\n        }))));\n      }))));\n    })))));\n  } // selectInputOnChange = (ComboVal, fieldName) =>  {\n  //     this.setState({ [fieldName] : ComboVal }); \n  // }\n\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  navPage,\n  elnLoginAction,\n  sdmsLoginAction,\n  updateStore\n})(injectIntl(Menu));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/sidebar/sidebar.component.jsx"],"names":["React","PureComponent","connect","NavLink","withRouter","Tab","Nav","Image","Accordion","Button","FormattedMessage","injectIntl","Preloader","ContextAwareToggle","PerfectScrollbar","callService","navPage","elnLoginAction","sdmsLoginAction","updateStore","SidebarNav","SidebarBrand","SidebarBrandTxt","NavHeader","CollapseInner","PrimaryLogo","formatInputDate","toast","DEFAULT_RETURN","FontAwesomeIcon","faHome","mapStateToProps","state","Login","Menu","constructor","props","getDetail","classUrl","methodUrl","formCode","displayName","moduleCode","formname","modulename","inputRef","current","value","userInfo","nformcode","sdisplayname","inputParam","inputData","currentdate","Date","key","nmenucode","serviceNeed","onELNLoginClick","sdmselnsettings","serverUrl","uiUrl","username","sloginid","lssitemaster","password","spassword","lsusergroup","suserrolename","info","intl","id","onSDMSLoginClick","sUserName","sSiteCode","sGroupName","setKey","k","setState","getDetailHome","updateInfo","typeName","data","masterData","organisation","undefined","loading","layOutGetHome","ToggleAction","isSidebarActive","pinnedEvent","isPinned","formRef","createRef","show","nusermultirolecode","selectedRecord","menuDesign","componentDidUpdate","prevProps","render","toggleExpand","toggleCollapse","e","map","menu","require","smenuname","toLowerCase","lstmodule","module","nmodulecode","lstforms","forms","sclassname","surl"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,kBAApC;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,KAAnB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,iBAAnD;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,YAA7C;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,cAA/B,EAA+CC,eAA/C,EAAgEC,WAAhE,QAAmF,eAAnF;AACA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,eAAnC,EAAoDC,SAApD,EAA+DC,aAA/D,QAAoF,yCAApF,C,CACA;;;;AAGA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,OAAO,6CAAP;AACA,SAASC,eAAT,QAAgC,iBAAhC,C,CACA;AACA;;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,MAAT,QAAuB,mCAAvB;;AAGA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AAAEC,IAAAA,KAAK,EAAED,KAAK,CAACC;AAAf,GAAP;AACH,CAFD;;AAIA,MAAMC,IAAN,SAAmBjC,aAAnB,CAAiC;AAC7BkC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAgBnBC,SAhBmB,GAgBP,CAACC,QAAD,EAAWC,SAAX,EAAsBC,QAAtB,EAAgCC,WAAhC,EAA6CC,UAA7C,EAAyDC,QAAzD,EAAmEC,UAAnE,KAAkF;AAC1F,WAAKR,KAAL,CAAWS,QAAX,CAAoBC,OAApB,CAA4BC,KAA5B,GAAkC,EAAlC;;AACA,UAAI,KAAKX,KAAL,CAAWH,KAAX,CAAiBe,QAAjB,CAA0BC,SAA1B,KAAwCT,QAA5C,EAAsD;AAClD,cAAMQ,QAAQ,GAAG,EACb,GAAG,KAAKZ,KAAL,CAAWH,KAAX,CAAiBe,QADP;AACiB,uBAAaR,QAD9B;AAEb,yBAAeE,UAFF;AAEc,uBAAaC,QAAQ,CAACO,YAFpC;AAEkD,yBAAeN,UAAU,CAACM;AAF5E,SAAjB;AAIA,cAAMC,UAAU,GAAG;AACfC,UAAAA,SAAS,EAAE;AAAE,wBAAYJ,QAAd;AAAwBK,YAAAA,WAAW,EAAE3B,eAAe,CAAC,IAAI4B,IAAJ,EAAD,EAAa,IAAb;AAApD,WADI;AAEfhB,UAAAA,QAFe;AAELC,UAAAA,SAFK;AAEME,UAAAA,WAFN;AAEmBc,UAAAA,GAAG,EAAG,UAASZ,QAAQ,CAACa,SAAU,EAFrD;AAEwDC,UAAAA,WAAW,EAAE;AAFrE,SAAnB;AAKA,aAAKrB,KAAL,CAAWrB,WAAX,CAAuBoC,UAAvB;AACH;AACJ,KA9BkB;;AAAA,SAgCnBO,eAhCmB,GAgCD,MAAM;AACpB,UAAI,KAAKtB,KAAL,CAAWH,KAAX,CAAiB0B,eAAjB,IAAoC,KAAKvB,KAAL,CAAWH,KAAX,CAAiB0B,eAAjB,CAAiC,CAAjC,CAAxC,EAA6E;AACzE,cAAMC,SAAS,GAAG,KAAKxB,KAAL,CAAWH,KAAX,CAAiB0B,eAAjB,CAAiC,CAAjC,IAAsC,oBAAxD;AACA,cAAME,KAAK,GAAG,KAAKzB,KAAL,CAAWH,KAAX,CAAiB0B,eAAjB,CAAiC,CAAjC,CAAd;AACA,cAAMX,QAAQ,GAAG,KAAKZ,KAAL,CAAWH,KAAX,CAAiBe,QAAlC;AACA,cAAMG,UAAU,GAAG;AACfW,UAAAA,QAAQ,EAAEd,QAAQ,CAACe,QADJ;AAEfC,UAAAA,YAAY,EAAE;AAAE,wBAAY;AAAd,WAFC;AAGfC,UAAAA,QAAQ,EAAEjB,QAAQ,CAACkB,SAHJ;AAIfC,UAAAA,WAAW,EAAE;AAAE,6BAAiBnB,QAAQ,CAACoB;AAA5B;AAJE,SAAnB;AAMA,aAAKhC,KAAL,CAAWnB,cAAX,CAA0BkC,UAA1B,EAAsCS,SAAtC,EAAiDC,KAAjD;AACH,OAXD,MAWO;AACHlC,QAAAA,KAAK,CAAC0C,IAAN,CAAW,KAAKC,IAAL,CAAU5D,gBAAV,CAA2B;AAAE6D,UAAAA,EAAE,EAAE;AAAN,SAA3B,CAAX;AACH;AACJ,KA/CkB;;AAAA,SAiDnBC,gBAjDmB,GAiDA,MAAM;AACrB,UAAI,KAAKpC,KAAL,CAAWH,KAAX,CAAiB0B,eAAjB,IAAoC,KAAKvB,KAAL,CAAWH,KAAX,CAAiB0B,eAAjB,CAAiC,CAAjC,CAAxC,EAA6E;AACzE,cAAMC,SAAS,GAAG,KAAKxB,KAAL,CAAWH,KAAX,CAAiB0B,eAAjB,CAAiC,CAAjC,IAAsC,yBAAxD;AACA,cAAME,KAAK,GAAG,KAAKzB,KAAL,CAAWH,KAAX,CAAiB0B,eAAjB,CAAiC,CAAjC,CAAd;AACA,cAAMX,QAAQ,GAAG,KAAKZ,KAAL,CAAWH,KAAX,CAAiBe,QAAlC;AACA,cAAMG,UAAU,GAAG;AACfsB,UAAAA,SAAS,EAAEzB,QAAQ,CAACe,QADL;AAEfW,UAAAA,SAAS,EAAE,SAFI;AAGfC,UAAAA,UAAU,EAAE3B,QAAQ,CAACoB;AAHN,SAAnB;AAKA,aAAKhC,KAAL,CAAWlB,eAAX,CAA2BiC,UAA3B,EAAuCS,SAAvC,EAAkDC,KAAlD;AACH,OAVD,MAUO;AACHlC,QAAAA,KAAK,CAAC0C,IAAN,CAAW,KAAKC,IAAL,CAAU5D,gBAAV,CAA2B;AAAE6D,UAAAA,EAAE,EAAE;AAAN,SAA3B,CAAX;AACH;AACJ,KA/DkB;;AAAA,SAgEnBK,MAhEmB,GAgETC,CAAD,IAAO;AACb;AACC,WAAKC,QAAL,CAAc;AAAEvB,QAAAA,GAAG,EAAEsB;AAAP,OAAd;AACH,KAnEkB;;AAAA,SAgFnBE,aAhFmB,GAgFH,MAAM;AAClB,YAAM/B,QAAQ,GAAG,EACb,GAAG,KAAKZ,KAAL,CAAWH,KAAX,CAAiBe;AADP,OAAjB;AAGA,aAAOA,QAAQ,CAAC,WAAD,CAAf;AACA,aAAOA,QAAQ,CAAC,aAAD,CAAf;AACA,aAAOA,QAAQ,CAAC,WAAD,CAAf;AACA,aAAOA,QAAQ,CAAC,aAAD,CAAf,CAPkB,CAQlB;AACA;AACA;AACA;AAEA;AACA;;AAEA,YAAMgC,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAErD,cADK;AAEfsD,QAAAA,IAAI,EAAE;AAAEC,UAAAA,UAAU,EAAE,EAAd;AAAkBnC,UAAAA,QAAlB;AAA4BoC,UAAAA,YAAY,EAAEC,SAA1C;AAAqDC,UAAAA,OAAO,EAAE,KAA9D;AAAqE7C,UAAAA,WAAW,EAAE;AAAlF;AAFS,OAAnB,CAhBkB,CAoBvB;;AACK,WAAKL,KAAL,CAAWmD,aAAX,CAAyBP,UAAzB,EArBkB,CAuBlB;AACH,KAxGkB;;AAAA,SA6NnBQ,YA7NmB,GA6NHzC,KAAD,IAAW;AAEtB,WAAK+B,QAAL,CAAc;AACVW,QAAAA,eAAe,EAAE1C;AADP,OAAd;AAGH,KAlOkB;;AAAA,SA2OnB2C,WA3OmB,GA2OL,MAAM;AAChB,UAAI;AAAEC,QAAAA;AAAF,UAAe,KAAK3D,KAAxB;AACA,WAAK8C,QAAL,CAAc;AACVa,QAAAA,QAAQ,EAAE,CAACA;AADD,OAAd;AAGH,KAhPkB;;AAEf,SAAKC,OAAL,GAAe5F,KAAK,CAAC6F,SAAN,EAAf;AACA,SAAK7D,KAAL,GAAa;AACT8D,MAAAA,IAAI,EAAE,KADG;AAETC,MAAAA,kBAAkB,EAAE,CAAC,CAFZ;AAGTC,MAAAA,cAAc,EAAE,EAHP;AAITP,MAAAA,eAAe,EAAE,KAJR;AAKTE,MAAAA,QAAQ,EAAE,KALD;AAMTpC,MAAAA,GAAG,EAAE,KAAKnB,KAAL,CAAWH,KAAX,CAAiBgE,UAAjB,IACD,KAAK7D,KAAL,CAAWH,KAAX,CAAiBgE,UAAjB,CAA4B,CAA5B,CADC,GAEA,UAAS,KAAK7D,KAAL,CAAWH,KAAX,CAAiBgE,UAAjB,CAA4B,CAA5B,EAA+BzC,SAAU,EAFlD,GAGD;AATK,KAAb;AAWH;;AAuDD0C,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC1B,QAAI,KAAK/D,KAAL,CAAWH,KAAX,CAAiBgE,UAAjB,KAAgCE,SAAS,CAAClE,KAAV,CAAgBgE,UAApD,EAAgE;AAC5D,WAAKnB,QAAL,CAAc;AAAEvB,QAAAA,GAAG,EAAE,KAAKnB,KAAL,CAAWH,KAAX,CAAiBgE,UAAjB,IAA+B,KAAK7D,KAAL,CAAWH,KAAX,CAAiBgE,UAAjB,CAA4B,CAA5B,CAA/B,GAAiE,UAAS,KAAK7D,KAAL,CAAWH,KAAX,CAAiBgE,UAAjB,CAA4B,CAA5B,EAA+BzC,SAAU,EAAnH,GAAuH;AAA9H,OAAd;AACH;;AAED,QAAG,KAAKpB,KAAL,CAAWH,KAAX,CAAiBsB,GAAjB,KAAuB4C,SAAS,CAAClE,KAAV,CAAgBsB,GAA1C,EAA8C;AAC1C,WAAKuB,QAAL,CAAc;AAAEvB,QAAAA,GAAG,EAAE,KAAKnB,KAAL,CAAWH,KAAX,CAAiBsB;AAAxB,OAAd;AACH;AACJ;;AA6BD6C,EAAAA,MAAM,GAAG;AAEL,UAAM;AAAEX,MAAAA;AAAF,QAAsB,KAAKzD,KAAjC;AACA,UAAM;AAAEiE,MAAAA,UAAF;AAAcX,MAAAA;AAAd,QAA0B,KAAKlD,KAAL,CAAWH,KAA3C;AAEA,wBACI,uDACI,oBAAC,SAAD;AAAW,MAAA,OAAO,EAAEqD,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAGI,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAG,4DAA4DG,eAAe,IAAI,CAAC,KAAKzD,KAAL,CAAW2D,QAAhC,IAA2C,KAAK3D,KAAL,CAAWuB,GAAX,KAAiB,WAA5D,GAA0E,SAA1E,GAAsF,EAAG,IAAG,KAAKvB,KAAL,CAAW2D,QAAX,IAAuB,mBAAoB,EAA1N;AAA6N,MAAA,YAAY,EAAE,MAAM,KAAKH,YAAL,CAAkB,KAAlB,CAAjP;AAA2Q,MAAA,YAAY,EAAE,MAAM,KAAKA,YAAL,CAAkB,IAAlB,CAA/R;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,GAAD,CAAK,SAAL;AACI,MAAA,SAAS,EAAE,KAAKxD,KAAL,CAAWuB,GAD1B;AAEI,MAAA,QAAQ,EAAGsB,CAAD,IAAO,KAAKD,MAAL,CAAYC,CAAZ,CAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII,oBAAE,GAAF;AAAM,MAAA,SAAS,EAAC,0BAAhB;AAA2C,MAAA,OAAO,EAAC,OAAnD;AAA2D,MAAA,GAAG,EAAC,UAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,aAApB;AAAkC,MAAA,GAAG,EAAE,KAAK7C,KAAL,CAAWuB,GAAlD;AAAuD,MAAA,OAAO,EAAE,MAAM,KAAKmC,WAAL,CAAiB,KAAjB,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAE,CAAC,KAAK1D,KAAL,CAAW2D,QAAZ,GAAuBU,YAAvB,GAAsCC,cAAlD;AAAkE,MAAA,GAAG,EAAC,SAAtE;AAAgF,MAAA,KAAK,EAAC,IAAtF;AAA2F,MAAA,MAAM,EAAC,IAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAJJ,eAOK,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,EAAE,EAAE,OAAd;AAAuB,MAAA,OAAO,EAAGC,CAAD,IAAO,KAAKxB,aAAL,EAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAEjD,MAAvB;AAA+B,MAAA,IAAI,EAAC,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CAPL,EAWKmE,UAAU,IAAIA,UAAU,CAACO,GAAX,CAAgBC,IAAD,IAAU;AACpC,aACIA,IAAI,CAACjD,SAAL,KAAmB,CAAC,CAApB,gBACI,oBAAC,GAAD,CAAK,IAAL;AAAU,QAAA,GAAG,EAAEiD,IAAI,CAACjD,SAApB;AAA+B,QAAA,QAAQ,EAAG,UAASiD,IAAI,CAACjD,SAAU,EAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAEkD,OAAO,CAAE,sBAAqBD,IAAI,CAACE,SAAL,CAAeC,WAAf,EAA6B,MAApD,CAAnB;AAA+E,QAAA,GAAG,EAAC,SAAnF;AAA6F,QAAA,KAAK,EAAC,IAAnG;AAAwG,QAAA,MAAM,EAAC,IAA/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOH,IAAI,CAACvD,YAAZ,CAFJ,CADJ,gBAIkB,oBAAC,GAAD,CAAK,IAAL;AAAU,QAAA,EAAE,EAAE,OAAd;AAAuB,QAAA,GAAG,EAAEuD,IAAI,CAACjD,SAAjC;AAA4C,QAAA,QAAQ,EAAG,UAASiD,IAAI,CAACjD,SAAU,EAA/E;AACd,QAAA,OAAO,EAAG+C,CAAD,IAAO,KAAKxB,aAAL,EADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAGV,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEjD,MAAvB;AAA+B,QAAA,IAAI,EAAC,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHU,eAIV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAO,MAAP,CAJU,CALtB;AAWH,KAZc,CAXnB,eAiCI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEL,WAAZ;AAAyB,MAAA,GAAG,EAAC,cAA7B;AAA4C,MAAA,KAAK,EAAC,IAAlD;AAAuD,MAAA,MAAM,EAAC,IAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAjCJ,CAJJ,eA0CI,oBAAC,GAAD,CAAK,OAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKwE,UAAU,IAAIA,UAAU,CAACO,GAAX,CAAeC,IAAI,IAAI;AAClC,0BACI,oBAAC,GAAD,CAAK,IAAL;AAAU,QAAA,GAAG,EAAEA,IAAI,CAACjD,SAApB;AAA+B,QAAA,QAAQ,EAAG,UAASiD,IAAI,CAACjD,SAAU,EAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAC,8BAArB;AAAoD,QAAA,EAAE,EAAC,IAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI,oBAAC,YAAD;AAAc,QAAA,SAAS,EAAC,yCAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AAAkB,QAAA,EAAE,EAAEiD,IAAI,CAACvD,YAA3B;AACI,QAAA,cAAc,EAAEuD,IAAI,CAACvD,YADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,CAFJ,eAQI,oBAAC,gBAAD;AAAkB,QAAA,SAAS,EAAC,gBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEMuD,IAAI,CAACjD,SAAL,KAAiB,CAAC,CAAlB,IAAsBiD,IAAI,CAACI,SAAN,CAAiBL,GAAjB,CAAqBM,MAAM,IAAI;AAE9C,4BAEI,oBAAC,GAAD,CAAK,IAAL;AAAU,UAAA,GAAG,EAAEA,MAAM,CAACC,WAAtB;AAAmC,UAAA,EAAE,EAAC,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,kBAAD;AAAoB,UAAA,QAAQ,EAAED,MAAM,CAACC,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAGI,oBAAC,gBAAD;AAAkB,UAAA,EAAE,EAAED,MAAM,CAAC5D,YAA7B;AACI,UAAA,cAAc,EAAE4D,MAAM,CAAC5D,YAD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHJ,CADJ,CADJ,eAUI,oBAAC,SAAD,CAAW,QAAX;AAAoB,UAAA,QAAQ,EAAE4D,MAAM,CAACC,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,aAAD;AAAe,UAAA,SAAS,EAAC,4CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEOD,MAAM,CAACE,QAAP,KAAkB,IAAlB,IAA0BF,MAAM,CAACE,QAAR,CAAkBR,GAAlB,CAAsBS,KAAK,IAAI;AACnD,8BACI,oBAAC,OAAD;AAAS,YAAA,SAAS,EAAG,iBAAgBA,KAAK,CAAChE,SAAN,KAAoB,KAAKb,KAAL,CAAWH,KAAX,CAAiBe,QAAjB,CAA0BC,SAA9C,GAA0D,aAA1D,GAA0E,EAAG,EAAlH;AAAqH,YAAA,GAAG,EAAEgE,KAAK,CAAChE,SAAhI;AACI,YAAA,SAAS,EAAEgE,KAAK,CAAChE,SADrB;AACgC,YAAA,EAAE,EAAE,MAAMgE,KAAK,CAACC,UADhD;AAEI,YAAA,OAAO,EAAE,MAAM,KAAK7E,SAAL,CAAe4E,KAAK,CAACC,UAAN,CAAiBN,WAAjB,EAAf,EAA+CK,KAAK,CAACE,IAArD,EACXF,KAAK,CAAChE,SADK,EACMgE,KAAK,CAAC/D,YADZ,EAC0B4D,MAAM,CAACC,WADjC,EAC8CE,KAD9C,EACqDH,MADrD,CAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAKI,oBAAC,gBAAD;AAAkB,YAAA,EAAE,EAAEG,KAAK,CAAC/D,YAA5B;AACI,YAAA,cAAc,EAAE+D,KAAK,CAAC/D,YAD1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,CADJ;AAUH,SAXuB,CAFhC,CADJ,CAVJ,CAFJ;AAgCH,OAlCkB,CAF3B,CARJ,CADJ,CADJ;AAoDH,KArDc,CADnB,CA1CJ,CAFJ,CAHJ,CADJ;AA6GH,GA7N4B,CAkP7B;AACA;AACA;;;AApP6B;;AAwPjC,eAAehD,OAAO,CAAC6B,eAAD,EAAkB;AAAEhB,EAAAA,WAAF;AAAeC,EAAAA,OAAf;AAAwBC,EAAAA,cAAxB;AAAwCC,EAAAA,eAAxC;AAAyDC,EAAAA;AAAzD,CAAlB,CAAP,CAAiGR,UAAU,CAACuB,IAAD,CAA3G,CAAf","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { NavLink, withRouter } from 'react-router-dom';\r\nimport { Tab, Nav, Image, Accordion, Button } from 'react-bootstrap';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport Preloader from '../preloader/preloader.component';\r\nimport ContextAwareToggle from './ContextAwareToggle';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport { callService, navPage, elnLoginAction, sdmsLoginAction, updateStore } from '../../actions'\r\nimport { SidebarNav, SidebarBrand, SidebarBrandTxt, NavHeader, CollapseInner } from '../../components/sidebar/sidebar.styles';\r\n// import HomeListLogo from '../../assets/image/homelist.svg';\r\nimport toggleExpand from '../../assets/image/expand-icon.svg';\r\nimport toggleCollapse from '../../assets/image/collapse-icon.svg';\r\nimport PrimaryLogo from '../../assets/image/sidebar-logo.png';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\nimport { formatInputDate } from '../CommonScript';\r\n//import LogiLabLogo from '../../assets/image/logilablogo.png'\r\n//import SDMSLogo from '../../assets/image/sdmslogo.png'\r\nimport { toast } from 'react-toastify';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { Login: state.Login }\r\n}\r\n\r\nclass Menu extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.state = {\r\n            show: false,\r\n            nusermultirolecode: -1,\r\n            selectedRecord: {},\r\n            isSidebarActive: false,\r\n            isPinned: false,\r\n            key: this.props.Login.menuDesign &&\r\n                this.props.Login.menuDesign[0] ?\r\n                `MenuId_${this.props.Login.menuDesign[0].nmenucode}` :\r\n                \"MenuId_0\"\r\n        }\r\n    }\r\n\r\n    getDetail = (classUrl, methodUrl, formCode, displayName, moduleCode, formname, modulename) => {\r\n        this.props.inputRef.current.value=\"\"\r\n        if (this.props.Login.userInfo.nformcode !== formCode) {\r\n            const userInfo = {\r\n                ...this.props.Login.userInfo, \"nformcode\": formCode,\r\n                \"nmodulecode\": moduleCode, \"sformname\": formname.sdisplayname, \"smodulename\": modulename.sdisplayname\r\n            }\r\n            const inputParam = {\r\n                inputData: { \"userinfo\": userInfo, currentdate: formatInputDate(new Date(), true) },\r\n                classUrl, methodUrl, displayName, key: `MenuId_${formname.nmenucode}`, serviceNeed: true\r\n            };\r\n\r\n            this.props.callService(inputParam);\r\n        }\r\n    }\r\n\r\n    onELNLoginClick = () => {\r\n        if (this.props.Login.sdmselnsettings && this.props.Login.sdmselnsettings[3]) {\r\n            const serverUrl = this.props.Login.sdmselnsettings[3] + \"Login/Validateuser\";\r\n            const uiUrl = this.props.Login.sdmselnsettings[4];\r\n            const userInfo = this.props.Login.userInfo;\r\n            const inputParam = {\r\n                username: userInfo.sloginid,\r\n                lssitemaster: { \"sitecode\": \"1\" },\r\n                password: userInfo.spassword,\r\n                lsusergroup: { \"usergroupname\": userInfo.suserrolename }\r\n            };\r\n            this.props.elnLoginAction(inputParam, serverUrl, uiUrl);\r\n        } else {\r\n            toast.info(this.intl.FormattedMessage({ id: \"IDS_ELNSERVERURLNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n\r\n    onSDMSLoginClick = () => {\r\n        if (this.props.Login.sdmselnsettings && this.props.Login.sdmselnsettings[1]) {\r\n            const serverUrl = this.props.Login.sdmselnsettings[1] + \"/Login/validatelinkUser\";\r\n            const uiUrl = this.props.Login.sdmselnsettings[2];\r\n            const userInfo = this.props.Login.userInfo;\r\n            const inputParam = {\r\n                sUserName: userInfo.sloginid,\r\n                sSiteCode: \"DEFAULT\",\r\n                sGroupName: userInfo.suserrolename\r\n            };\r\n            this.props.sdmsLoginAction(inputParam, serverUrl, uiUrl);\r\n        } else {\r\n            toast.info(this.intl.FormattedMessage({ id: \"IDS_ELNSERVERURLNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n    setKey = (k) => {\r\n       // this.props.inputRef.current.value=\"\"\r\n        this.setState({ key: k })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.Login.menuDesign !== prevProps.Login.menuDesign) {\r\n            this.setState({ key: this.props.Login.menuDesign && this.props.Login.menuDesign[0] ? `MenuId_${this.props.Login.menuDesign[0].nmenucode}` : \"MenuId_0\" })\r\n        }\r\n\r\n        if(this.props.Login.key!==prevProps.Login.key){\r\n            this.setState({ key: this.props.Login.key})\r\n        }\r\n    }\r\n\r\n\r\n    getDetailHome = () => {\r\n        const userInfo = {\r\n            ...this.props.Login.userInfo\r\n        }\r\n        delete userInfo['nformcode']\r\n        delete userInfo['nmodulecode']\r\n        delete userInfo['sformname']\r\n        delete userInfo['smodulename']\r\n        // const inputParam = {\r\n        //     inputData: { \"userinfo\": userInfo, currentdate: formatInputDate(new Date(), true) }\r\n        //     ,serviceNeed:false\r\n        // };\r\n\r\n        // const { history } = this.props;\r\n        // history.push('/home');\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData: [], userInfo, organisation: undefined, loading: false, displayName: \"\" }\r\n        }\r\n   //     this.props.updateStore(updateInfo);\r\n        this.props.layOutGetHome(updateInfo)\r\n\r\n        //  this.props.callService(inputParam);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { isSidebarActive } = this.state;\r\n        const { menuDesign, loading } = this.props.Login;\r\n\r\n        return (\r\n            <>\r\n                <Preloader loading={loading} />\r\n\r\n                <SidebarNav className={`d-flex side-nav sidebar sidebar-dark bg-gradient-primary ${(isSidebarActive && !this.state.isPinned)||this.state.key===\"MenuId_-2\" ? 'toggled' : ''} ${this.state.isPinned && 'at-sidebar-pinned'}`} onMouseEnter={() => this.ToggleAction(false)} onMouseLeave={() => this.ToggleAction(true)}\r\n                >\r\n                    <Tab.Container\r\n                        activeKey={this.state.key}\r\n                        onSelect={(k) => this.setKey(k)} >\r\n                        {/* Left Menu Icon */}\r\n                        < Nav className=\"nav flex-column side-nav\" variant=\"pills\" key='MenuIcon' >\r\n                            {/* <Nav.Link key={this.state.key} eventKey={this.state.key} onClick={() => this.ToggleAction1(false)}>\r\n                                <Image src={PrimaryLogo} alt=\"Primary-Logo\" width=\"45\" height=\"60\" />\r\n                            </Nav.Link> */}\r\n                            <Nav.Link className=\"text-center\" key={this.state.key} onClick={() => this.pinnedEvent(false)}>\r\n                                <Image src={!this.state.isPinned ? toggleExpand : toggleCollapse} alt=\"sidebar\" width=\"34\" height=\"34\" />\r\n                            </Nav.Link>\r\n                             <Nav.Link to={'/home'} onClick={(e) => this.getDetailHome()}  >\r\n                                <FontAwesomeIcon icon={faHome} size=\"2x\" />\r\n                            </Nav.Link> \r\n\r\n                            {menuDesign && menuDesign.map((menu) => {\r\n                                return (\r\n                                    menu.nmenucode !== -2 ?\r\n                                        <Nav.Link key={menu.nmenucode} eventKey={`MenuId_${menu.nmenucode}`} >\r\n                                            <Image src={require(`../../assets/image/${menu.smenuname.toLowerCase()}.svg`)} alt=\"sidebar\" width=\"34\" height=\"34\" />\r\n                                            <span>{menu.sdisplayname}</span>\r\n                                        </Nav.Link> : <Nav.Link to={'/home'} key={menu.nmenucode} eventKey={`MenuId_${menu.nmenucode}`}  \r\n                                        onClick={(e) => this.getDetailHome()}  >\r\n                                            {/* <Image src={PrimaryLogo} alt=\"Primary-Logo\" width=\"45\" height=\"60\" /> */}\r\n                                            <FontAwesomeIcon icon={faHome} size=\"2x\" />\r\n                                            <span>{'Home'}</span>\r\n                                        </Nav.Link>)\r\n                            })}\r\n                            {/* <Nav.Link key={6} onClick={() => this.onELNLoginClick()}>\r\n                                <Image src={LogiLabLogo} alt=\"logilablogo\" width=\"45\" height=\"55\" />\r\n                            </Nav.Link>\r\n                            <Nav.Link key={7} onClick={() => this.onSDMSLoginClick()}>\r\n                                <Image src={SDMSLogo} alt=\"sdmslogo\" width=\"45\" height=\"55\" />\r\n                            </Nav.Link> */}\r\n                            {/* //key={this.state.key} eventKey={this.state.key}  */}\r\n\r\n\r\n                            <Nav.Link className=\"mt-auto\">\r\n                                <Image src={PrimaryLogo} alt=\"Primary-Logo\" width=\"45\" height=\"60\" />\r\n                            </Nav.Link>\r\n                        </Nav>\r\n                        {/* <Button className=\"rounded-circle border-0\" id=\"sidebarToggle\" ></Button> */}\r\n                        <Tab.Content>\r\n                            {menuDesign && menuDesign.map(menu => {\r\n                                return (\r\n                                    <Tab.Pane key={menu.nmenucode} eventKey={`MenuId_${menu.nmenucode}`}>\r\n                                        <Accordion className=\"navbar-nav position-relative\" as=\"ul\" >\r\n                                            {/* onClick={() => this.pinnedEvent()} */}\r\n                                            <SidebarBrand className=\"sidebar-brand d-flex align-items-center\">\r\n                                                <SidebarBrandTxt>\r\n                                                    <FormattedMessage id={menu.sdisplayname}\r\n                                                        defaultMessage={menu.sdisplayname} />\r\n                                                </SidebarBrandTxt>\r\n                                            </SidebarBrand>\r\n                                            <PerfectScrollbar className=\"sidebar-scroll\">\r\n                                                {\r\n                                                  menu.nmenucode!==-2&&(menu.lstmodule).map(module => {\r\n\r\n                                                        return (\r\n\r\n                                                            <Nav.Item key={module.nmodulecode} as=\"li\">\r\n                                                                <ContextAwareToggle eventKey={module.nmodulecode} >\r\n                                                                    <NavHeader>\r\n                                                                        {/* {console.log(module.smodulename)}\r\n                                                                        {console.log(module.sdisplayname)} */}\r\n                                                                        <FormattedMessage id={module.sdisplayname}\r\n                                                                            defaultMessage={module.sdisplayname} />\r\n                                                                    </NavHeader>\r\n                                                                </ContextAwareToggle>\r\n\r\n                                                                <Accordion.Collapse eventKey={module.nmodulecode}>\r\n                                                                    <CollapseInner className=\"bg-transparent py-2 collapse-inner rounded\">\r\n                                                                        {\r\n                                                                           module.lstforms!==null&& (module.lstforms).map(forms => {\r\n                                                                                return (\r\n                                                                                    <NavLink className={`collapse-item ${forms.nformcode === this.props.Login.userInfo.nformcode ? 'active-form' : ''}`} key={forms.nformcode}\r\n                                                                                        nformcode={forms.nformcode} to={'/' + forms.sclassname}\r\n                                                                                        onClick={() => this.getDetail(forms.sclassname.toLowerCase(), forms.surl,\r\n                                                                                            forms.nformcode, forms.sdisplayname, module.nmodulecode, forms, module)}\r\n                                                                                    >\r\n                                                                                        <FormattedMessage id={forms.sdisplayname}\r\n                                                                                            defaultMessage={forms.sdisplayname} />\r\n                                                                                    </NavLink>\r\n                                                                                )\r\n                                                                            })\r\n                                                                        }\r\n                                                                    </CollapseInner>\r\n                                                                </Accordion.Collapse>\r\n                                                            </Nav.Item>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                            </PerfectScrollbar>\r\n\r\n                                        </Accordion>\r\n                                    </Tab.Pane>)\r\n                            })}\r\n\r\n                        </Tab.Content>\r\n                    </Tab.Container>\r\n                </SidebarNav>\r\n            </>\r\n        );\r\n    }\r\n    ToggleAction = (value) => {\r\n\r\n        this.setState({\r\n            isSidebarActive: value\r\n        })\r\n    }\r\n    // ToggleAction1 = (value) => {\r\n    // let isSidebarActive = this.state.isSidebarActive;\r\n    // let isPinned  = this.state.isPinned;\r\n    //     this.setState({\r\n    //         isSidebarActive: !isSidebarActive,\r\n    //         isPinned: !isPinned\r\n    //     })\r\n    // }\r\n    pinnedEvent = () => {\r\n        let { isPinned } = this.state;\r\n        this.setState({\r\n            isPinned: !isPinned\r\n        })\r\n    }\r\n    // selectInputOnChange = (ComboVal, fieldName) =>  {\r\n    //     this.setState({ [fieldName] : ComboVal }); \r\n    // }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, { callService, navPage, elnLoginAction, sdmsLoginAction, updateStore })(injectIntl(Menu));\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}