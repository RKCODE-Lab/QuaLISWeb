{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\contactmaster\\\\ClientSiteAddressTab.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, Tab, Nav } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { FormattedMessage } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { process } from '@progress/kendo-data-query';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, validateEmail, validatePhoneNumber } from '../../components/CommonScript';\nimport Esign from '../audittrail/Esign';\nimport { transactionStatus } from '../../components/Enumeration';\nimport CustomAccordion from '../../components/custom-accordion/custom-accordion.component';\nimport ClientTabsAccordion from './ClientTabsAccordion';\nimport { toast } from 'react-toastify';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddClientContact from './AddClientContact';\nimport AddClientSite from './AddClientSite';\n\nclass ClientSiteAddressTab extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.ClientContact, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.openModalContact = input => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal: true,\n          operation: input.operation,\n          selectedRecord: {\n            \"ndefaultstatus\": transactionStatus.NO\n          },\n          defaultSite: undefined,\n          ncontrolCode: input.ncontrolCode,\n          screenName: \"IDS_CLIENTCONTACT\",\n          loading: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.clientSiteAccordion = clientSite => {\n      let primaryKeyField = \"nclientcontactcode\";\n      const addClientContactId = this.props.controlMap.has(\"AddClientContact\") && this.props.controlMap.get(\"AddClientContact\").ncontrolcode;\n      const editClientContactId = this.props.controlMap.has(\"EditClientContact\") && this.props.controlMap.get(\"EditClientContact\").ncontrolcode;\n      const editContactParam = {\n        screenName: \"ClientContactInfo\",\n        primaryKeyField: \"nclientcontactcode\",\n        operation: \"update\",\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        ncontrolCode: editClientContactId\n      };\n      const AddContactParam = {\n        screenName: \"ClientContactInfo\",\n        primaryKeyField,\n        undefined,\n        operation: \"create\",\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        ncontrolCode: addClientContactId\n      };\n      const accordionMap = new Map();\n      clientSite.map(clientSite => accordionMap.set(clientSite.nclientsitecode, /*#__PURE__*/React.createElement(ClientTabsAccordion, {\n        clientSite: clientSite,\n        getClientSiteForAddEdit: this.props.getClientSiteForAddEdit,\n        masterData: this.props.masterData,\n        ConfirmDelete: this.ConfirmDelete,\n        addClientContactId: addClientContactId,\n        AddContactParam: AddContactParam,\n        openModalContact: this.openModalContact // tabDetail={this.tabDetail(userSite)}   \n        ,\n        primaryKeyField: primaryKeyField,\n        expandField: \"expanded\",\n        detailedFieldList: this.detailedFieldList,\n        extractedColumnList: this.ContactColumns,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        data: this.state.ClientContact || [],\n        ClientContact: this.state.ClientContact || [],\n        dataState: this.state.dataState,\n        dataStateChange: this.dataStateChange,\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights || [],\n        methodUrl: \"ClientContact\",\n        getClientContactForAddEdit: this.props.getClientContactForAddEdit,\n        editParam: editContactParam,\n        deleteParam: {\n          operation: \"delete\"\n        },\n        deleteRecord: this.DeleteContact,\n        scrollable: \"scrollable\",\n        isActionRequired: true,\n        selectedId: this.props.selectedId,\n        hasDynamicColSize: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 17\n        }\n      })));\n      return accordionMap;\n    };\n\n    this.ConfirmDelete = obj => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.Delete(obj));\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'ntransactionstatus') {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\n        } else if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        }\n      } else {\n        if (event.target.name === \"sphoneno\" || event.target.name === \"smobileno\" || event.target.name === \"sfaxno\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validatePhoneNumber(event.target.value);\n            selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        } // selectedRecord[event.target.name] = event.target.value;\n\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData; //.value;\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.loadEsign;\n      let openChildModal = this.props.openChildModal;\n      let selectedRecord = this.props.selectedRecord;\n\n      if (this.props.loadEsign) {\n        if (this.props.operation === \"delete\") {\n          loadEsign = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.state.selectedRecord['semail'] ? validateEmail(this.state.selectedRecord['semail']) : true) {\n        let inputParam = {};\n\n        if (this.props.screenName === \"IDS_CLIENTSITE\") {\n          inputParam = this.SaveSiteDetails(saveType, formRef);\n        } else {\n          inputParam = this.SaveContactInfo(saveType, formRef);\n        }\n\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALIDEMAIL\"\n        }));\n      }\n    };\n\n    this.DeleteContact = deleteParam => {\n      let inputData = [];\n\n      if (deleteParam.selectedRecord.expanded !== undefined) {\n        delete deleteParam.selectedRecord.expanded;\n      }\n\n      inputData[\"clientcontactinfo\"] = deleteParam.selectedRecord;\n      inputData[\"userinfo\"] = this.props.userInfo;\n      const inputParam = {\n        methodUrl: \"ClientContactInfo\",\n        classUrl: this.props.inputParam.classUrl,\n        inputData: inputData,\n        operation: \"delete\",\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            openChildModal: true,\n            screenName: \"Contact\",\n            operation: \"delete\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              openChildModal: true,\n              screenName: \"Contact\",\n              operation: \"delete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      }\n    };\n\n    this.Delete = deleteParam => {\n      let inputData = [];\n\n      if (deleteParam.selectedRecord.expanded && deleteParam.selectedRecord.expanded !== undefined) {\n        delete deleteParam.selectedRecord.expanded;\n      }\n\n      inputData[deleteParam.Type] = deleteParam.selectedRecord;\n      inputData[\"userinfo\"] = this.props.userInfo;\n      const inputParam = {\n        methodUrl: deleteParam.methodURL,\n        classUrl: this.props.inputParam.classUrl,\n        inputData: inputData,\n        operation: \"delete\"\n      };\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            openChildModal: true,\n            screenName: deleteParam.screenName,\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              openChildModal: true,\n              screenName: deleteParam.screenName,\n              operation: deleteParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openChildModal\");\n    };\n\n    const dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      isSiteOpen: false,\n      isContactOpen: false,\n      siteSelectedRecord: {},\n      contactSelectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      ClientContact: this.props.masterData.ClientContact,\n      Country: [],\n      SiteCode: this.props.masterData.SiteCode,\n      selectedRecord: {},\n      countryCode: []\n    };\n    this.ContactColumns = [{\n      \"idsName\": \"IDS_CLIENTCONTACTNAME\",\n      \"mandatory\": false,\n      \"dataField\": \"scontactname\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      dataField: \"semail\",\n      idsName: \"IDS_EMAILID\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      dataField: \"sdefaultContact\",\n      idsName: \"IDS_DEFAULT\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.siteColumns = [{\n      \"idsName\": \"IDS_CLIENTSITENAME\",\n      \"mandatory\": true,\n      \"dataField\": \"sclientsitename\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_ADDRESS1\",\n      \"mandatory\": true,\n      \"dataField\": \"saddress1\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_COUNTRYNAME\",\n      \"mandatory\": true,\n      \"dataField\": \"ncountrycode\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.detailedFieldList = [{\n      \"dataField\": \"sphoneno\",\n      \"idsName\": \"IDS_PHONE\",\n      columnSize: \"4\"\n    }, {\n      \"idsName\": \"IDS_MOBILE\",\n      \"dataField\": \"smobileno\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"sfaxno\",\n      idsName: \"IDS_FAX\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"scomments\",\n      idsName: \"IDS_COMMENTS\",\n      columnSize: \"12\"\n    }];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  render() {\n    const addClientSiteId = this.props.controlMap.has(\"AddClientSite\") && this.props.controlMap.get(\"AddClientSite\").ncontrolcode;\n    const mandatoryFields = [];\n\n    if (this.props.screenName === \"IDS_CLIENTSITE\") {\n      this.siteColumns.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    } else {\n      this.ContactColumns.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Tab.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Tab.Pane, {\n      \"aria-labelledby\": \"Version-tab\",\n      className: \"p-0 active show\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters pt-2 pb-2 col-12 text-right border-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"add-txt-btn\",\n      hidden: this.props.userRoleControlRights.indexOf(addClientSiteId) === -1,\n      onClick: () => this.props.getClientSiteForAddEdit(\"ClientSite\", \"create\", this.props.masterData.selectedClient.nclientcode, undefined, addClientSiteId, this.props.userInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 53\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CLIENTSITE\",\n      defaultMessage: \"Site\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 53\n      }\n    }))))), /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 41\n      }\n    }, this.props.masterData.ClientSite && this.props.masterData.ClientSite.length > 0 ? /*#__PURE__*/React.createElement(CustomAccordion, {\n      key: \"filter\",\n      accordionTitle: \"sclientsitename\",\n      accordionComponent: this.clientSiteAccordion(this.props.masterData.ClientSite),\n      inputParam: {\n        masterData: this.props.masterData,\n        userInfo: this.props.userInfo\n      },\n      accordionClick: this.props.getClientSiteContactDetails,\n      accordionPrimaryKey: \"nclientsitecode\",\n      accordionObjectName: \"clientSite\",\n      selectedKey: this.props.masterData.selectedClientSite.nclientsitecode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 49\n      }\n    }) : \"\"))))))), /*#__PURE__*/React.createElement(React.Fragment, null, this.props.openChildModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.operation,\n      inputParam: this.props.inputParam,\n      screenName: this.props.screenName,\n      onSaveClick: this.onSaveClick,\n      updateStore: this.props.updateStore,\n      esign: this.props.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 33\n        }\n      }) : this.props.screenName === \"IDS_CLIENTSITE\" ? /*#__PURE__*/React.createElement(AddClientSite, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        Country: this.props.Country || [] //inputParam={this.props.inputParam}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 37\n        }\n      }) : /*#__PURE__*/React.createElement(AddClientContact, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 37\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }\n    })));\n  }\n\n  SaveSiteDetails(saveType, formRef) {\n    let inputData = [];\n    let postParam = undefined;\n    inputData[\"userinfo\"] = this.props.userInfo;\n    let fieldList = [\"nclientsitecode\", \"ncountrycode\", \"sclientsitename\", \"saddress1\", \"saddress2\", \"saddress3\", \"ndefaultstatus\"];\n\n    if (this.props.operation === \"update\") {\n      postParam = {\n        inputListName: \"ClientSiteAddress\",\n        selectedObject: \"selectedClientSite\",\n        primaryKeyField: \"nclientsitecode\"\n      };\n      inputData[\"clientsiteaddress\"] = {\n        \"nclientcode\": this.props.masterData.selectedClient.nclientcode,\n        \"nclientsitecode\": this.props.masterData.selectedClientSite.nclientsitecode\n      };\n      fieldList.map(item => {\n        if (item === \"ncountrycode\") {\n          return inputData[\"clientsiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item].value : \"\";\n        } else {\n          return inputData[\"clientsiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n        }\n      });\n    } else {\n      inputData[\"clientsiteaddress\"] = {\n        \"nclientcode\": this.props.masterData.selectedClient.nclientcode\n      };\n      fieldList.map(item => {\n        if (item === \"ncountrycode\") {\n          return inputData[\"clientsiteaddress\"][item] = this.state.selectedRecord[item].value;\n        } else {\n          return inputData[\"clientsiteaddress\"][item] = this.state.selectedRecord[item];\n        }\n      });\n    }\n\n    const inputParam = {\n      classUrl: this.props.inputParam.classUrl,\n      methodUrl: \"ClientSiteAddress\",\n      inputData: inputData,\n      operation: this.props.operation,\n      saveType,\n      formRef,\n      postParam: postParam\n    };\n    return inputParam; //this.props.crudMaster(inputParam, this.props.masterData);\n  }\n\n  SaveContactInfo(saveType, formRef) {\n    let dataState = undefined;\n    let inputData = [];\n    let postParam = undefined;\n    inputData[\"userinfo\"] = this.props.userInfo;\n    let fieldList = [\"nclientcontactcode\", \"scontactname\", \"sphoneno\", \"smobileno\", \"semail\", \"sfaxno\", \"scomments\", \"ndefaultstatus\"];\n    let selectedId = null;\n\n    if (this.props.operation === \"update\") {\n      postParam = {\n        inputListName: \"ClientContactInfo\",\n        selectedObject: \"selectedClientContact\",\n        primaryKeyField: \"nclientcontactcode\"\n      };\n      inputData[\"clientcontactinfo\"] = {\n        \"nclientcode\": this.props.masterData.selectedClient.nclientcode,\n        \"nclientsitecode\": this.props.masterData.selectedClientSite.nclientsitecode\n      };\n      selectedId = this.props.selectedRecord.nclientcontactcode;\n      fieldList.map(item => {\n        return inputData[\"clientcontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n      });\n      dataState = this.state.dataState;\n    } else {\n      inputData[\"clientcontactinfo\"] = {\n        \"nclientcode\": this.props.masterData.selectedClient.nclientcode,\n        \"nclientsitecode\": this.props.masterData.selectedClientSite.nclientsitecode\n      };\n      fieldList.map(item => {\n        return inputData[\"clientcontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n      });\n      inputData[\"clientcontactinfo\"]['ndefaultstatus'] = this.state.selectedRecord && this.state.selectedRecord.ndefaultstatus ? this.state.selectedRecord.ndefaultstatus : transactionStatus.YES;\n    }\n\n    const inputParam = {\n      classUrl: this.props.inputParam.classUrl,\n      methodUrl: \"ClientContactInfo\",\n      inputData: inputData,\n      selectedId,\n      operation: this.props.operation,\n      saveType,\n      formRef,\n      dataState,\n      postParam: postParam\n    };\n    return inputParam;\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.masterData !== previousProps.masterData) {\n      let {\n        dataState\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        dataState = {\n          skip: 0,\n          take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n        };\n      }\n\n      this.setState({\n        isSiteOpen: false,\n        isContactOpen: false,\n        ClientContact: this.props.masterData.ClientContact,\n        SiteCode: this.props.masterData.SiteCode,\n        Country: this.props.masterData.Country,\n        dataState\n      });\n    }\n\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default injectIntl(ClientSiteAddressTab);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/contactmaster/ClientSiteAddressTab.jsx"],"names":["React","Component","Row","Col","Card","Tab","Nav","injectIntl","FormattedMessage","FontAwesomeIcon","faPlus","process","SlideOutModal","DEFAULT_RETURN","showEsign","validateEmail","validatePhoneNumber","Esign","transactionStatus","CustomAccordion","ClientTabsAccordion","toast","ConfirmMessage","AddClientContact","AddClientSite","ClientSiteAddressTab","constructor","props","dataStateChange","event","setState","dataResult","state","ClientContact","dataState","openModalContact","input","updateInfo","typeName","data","openChildModal","operation","selectedRecord","NO","defaultSite","undefined","ncontrolCode","screenName","loading","updateStore","clientSiteAccordion","clientSite","primaryKeyField","addClientContactId","controlMap","has","get","ncontrolcode","editClientContactId","editContactParam","inputParam","userInfo","AddContactParam","accordionMap","Map","map","set","nclientsitecode","getClientSiteForAddEdit","masterData","ConfirmDelete","detailedFieldList","ContactColumns","userRoleControlRights","getClientContactForAddEdit","DeleteContact","selectedId","obj","confirmMessage","confirm","intl","formatMessage","id","Delete","onInputOnChange","target","type","name","checked","ACTIVE","DEACTIVE","YES","value","onComboChange","comboData","fieldName","closeModal","loadEsign","onSaveClick","saveType","formRef","SaveSiteDetails","SaveContactInfo","esignRights","nformcode","screenData","crudMaster","warn","deleteParam","inputData","expanded","methodUrl","classUrl","Type","methodURL","validateEsign","sreason","password","validateEsignCredential","skip","take","settings","parseInt","isSiteOpen","isContactOpen","siteSelectedRecord","contactSelectedRecord","Country","SiteCode","countryCode","dataField","idsName","siteColumns","columnSize","render","addClientSiteId","mandatoryFields","forEach","item","mandatory","push","indexOf","selectedClient","nclientcode","ClientSite","length","getClientSiteContactDetails","selectedClientSite","postParam","fieldList","inputListName","selectedObject","nclientcontactcode","ndefaultstatus","componentDidUpdate","previousProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Card, Tab, Nav } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, validateEmail, validatePhoneNumber } from '../../components/CommonScript';\r\nimport Esign from '../audittrail/Esign';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport CustomAccordion from '../../components/custom-accordion/custom-accordion.component';\r\n import ClientTabsAccordion from './ClientTabsAccordion';\r\nimport { toast } from 'react-toastify';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddClientContact from './AddClientContact';\r\nimport AddClientSite from './AddClientSite';\r\n\r\nclass ClientSiteAddressTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take :this.props.settings ? parseInt(this.props.settings[14]) : 5\r\n        };\r\n        this.state = {\r\n            isSiteOpen: false, isContactOpen: false, siteSelectedRecord: {}, contactSelectedRecord: {}, dataResult: [],\r\n            dataState: dataState, ClientContact: this.props.masterData.ClientContact, Country: [],\r\n            SiteCode: this.props.masterData.SiteCode, selectedRecord: {}, countryCode: [],\r\n\r\n        };\r\n        this.ContactColumns = [{ \"idsName\": \"IDS_CLIENTCONTACTNAME\", \"mandatory\": false, \"dataField\": \"scontactname\", \"width\": \"150px\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n        { dataField: \"semail\", idsName: \"IDS_EMAILID\",\"width\": \"150px\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n        { dataField: \"sdefaultContact\", idsName: \"IDS_DEFAULT\",\"width\": \"150px\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n     \r\n\r\n        ];\r\n\r\n        this.siteColumns = [{ \"idsName\": \"IDS_CLIENTSITENAME\", \"mandatory\": true, \"dataField\": \"sclientsitename\", \"width\": \"150px\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n        { \"idsName\": \"IDS_ADDRESS1\", \"mandatory\": true, \"dataField\": \"saddress1\", \"width\": \"150px\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n        { \"idsName\": \"IDS_COUNTRYNAME\", \"mandatory\": true, \"dataField\": \"ncountrycode\", \"width\": \"150px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n\r\n        ];\r\n        this.detailedFieldList = [\r\n            { \"dataField\": \"sphoneno\",\"idsName\": \"IDS_PHONE\" , columnSize:\"4\"},\r\n            { \"idsName\": \"IDS_MOBILE\", \"dataField\": \"smobileno\" , columnSize:\"4\"},\r\n            { dataField: \"sfaxno\", idsName: \"IDS_FAX\" , columnSize:\"4\"},\r\n            { dataField: \"scomments\", idsName: \"IDS_COMMENTS\", columnSize:\"12\" }\r\n          \r\n        ];\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.ClientContact, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    openModalContact = (input) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openChildModal: true, operation: input.operation,\r\n                selectedRecord:{\"ndefaultstatus\":transactionStatus.NO},\r\n                defaultSite: undefined, ncontrolCode: input.ncontrolCode,\r\n                screenName: \"IDS_CLIENTCONTACT\", loading: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    render() {\r\n\r\n        const addClientSiteId = this.props.controlMap.has(\"AddClientSite\") && this.props.controlMap.get(\"AddClientSite\").ncontrolcode\r\n        const mandatoryFields = [];\r\n        if (this.props.screenName === \"IDS_CLIENTSITE\") {\r\n            this.siteColumns.forEach(item => item.mandatory === true ?\r\n                mandatoryFields.push(item) : \"\"\r\n            );\r\n        }\r\n        else {\r\n            this.ContactColumns.forEach(item => item.mandatory === true ?\r\n                mandatoryFields.push(item) : \"\"\r\n            );\r\n        }\r\n        return (\r\n            <>\r\n                <Row noGutters={true}>\r\n                    <Col md='12'>\r\n                        <Card className=\"at-tabs\">\r\n                            <Tab.Content>\r\n                                <Tab.Pane aria-labelledby=\"Version-tab\" className=\"p-0 active show\">\r\n\r\n                                    <Row className=\"no-gutters pt-2 pb-2 col-12 text-right border-bottom\" >\r\n                                        <Col md={12}>\r\n                                            <div className=\"d-flex justify-content-end\">\r\n                                                <Nav.Link className=\"add-txt-btn\" hidden={this.props.userRoleControlRights.indexOf(addClientSiteId) === -1}\r\n                                                    onClick={() => this.props.getClientSiteForAddEdit(\"ClientSite\", \"create\", this.props.masterData.selectedClient.nclientcode, undefined, addClientSiteId, this.props.userInfo)}>\r\n                                                    <FontAwesomeIcon icon={faPlus} /> { }\r\n                                                    <FormattedMessage id='IDS_CLIENTSITE' defaultMessage='Site' />\r\n                                                </Nav.Link>\r\n                                            </div>\r\n                                        </Col>\r\n\r\n                                    </Row>\r\n\r\n                                    <Row className=\"no-gutters\">\r\n                                        <Col md={12}>\r\n                                            {this.props.masterData.ClientSite && this.props.masterData.ClientSite.length > 0 ?\r\n                                                <CustomAccordion key=\"filter\"\r\n                                                    accordionTitle={\"sclientsitename\"}\r\n                                                    accordionComponent={this.clientSiteAccordion(this.props.masterData.ClientSite)}\r\n                                                    inputParam={{ masterData: this.props.masterData,userInfo:this.props.userInfo }}\r\n                                                    accordionClick={this.props.getClientSiteContactDetails}\r\n                                                    accordionPrimaryKey={\"nclientsitecode\"}\r\n                                                    accordionObjectName={\"clientSite\"}\r\n                                                    selectedKey={this.props.masterData.selectedClientSite.nclientsitecode}\r\n                                                />\r\n                                                : \"\"}\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                </Tab.Pane >\r\n                            </Tab.Content >\r\n                        </Card >\r\n                    </Col >\r\n                </Row >\r\n                <>\r\n                    {this.props.openChildModal &&\r\n                        <SlideOutModal show={this.props.openChildModal}\r\n                            closeModal={this.closeModal}\r\n                            operation={this.props.operation}\r\n                            inputParam={this.props.inputParam}\r\n                            screenName={this.props.screenName}\r\n                            onSaveClick={this.onSaveClick}\r\n                            updateStore={this.props.updateStore}\r\n                            esign={this.props.loadEsign}\r\n                            validateEsign={this.validateEsign}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                            mandatoryFields={mandatoryFields}\r\n                            addComponent={this.props.loadEsign ?\r\n                                <Esign operation={this.props.operation}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    inputParam={this.props.inputParam}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                /> :\r\n                                this.props.screenName === \"IDS_CLIENTSITE\" ?\r\n                                    <AddClientSite selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onComboChange={this.onComboChange}\r\n                                        Country={this.props.Country || []}\r\n                                        //inputParam={this.props.inputParam}\r\n                                    />\r\n                                    :\r\n                                    <AddClientContact\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onComboChange={this.onComboChange}\r\n\r\n                                     />\r\n                            }\r\n                        />\r\n\r\n                    }\r\n\r\n                </>\r\n            </>\r\n        );\r\n    }\r\n    clientSiteAccordion = (clientSite) => {\r\n        let primaryKeyField = \"nclientcontactcode\";\r\n        const addClientContactId = this.props.controlMap.has(\"AddClientContact\") && this.props.controlMap.get(\"AddClientContact\").ncontrolcode\r\n        const editClientContactId = this.props.controlMap.has(\"EditClientContact\") && this.props.controlMap.get(\"EditClientContact\").ncontrolcode;\r\n        const editContactParam = {\r\n            screenName: \"ClientContactInfo\", primaryKeyField: \"nclientcontactcode\", operation: \"update\",\r\n            inputParam: this.props.inputParam, userInfo: this.props.userInfo, ncontrolCode: editClientContactId\r\n        };\r\n        const AddContactParam = {\r\n            screenName: \"ClientContactInfo\", primaryKeyField, undefined, operation: \"create\",\r\n            inputParam: this.props.inputParam, userInfo: this.props.userInfo, ncontrolCode: addClientContactId\r\n        };\r\n\r\n        const accordionMap = new Map();\r\n        clientSite.map((clientSite) =>\r\n            accordionMap.set(clientSite.nclientsitecode,\r\n                <ClientTabsAccordion clientSite={clientSite}\r\n                getClientSiteForAddEdit={this.props.getClientSiteForAddEdit}\r\n                    masterData={this.props.masterData}\r\n                    ConfirmDelete={this.ConfirmDelete}\r\n                    addClientContactId={addClientContactId}\r\n                    AddContactParam={AddContactParam}\r\n                    openModalContact={this.openModalContact}\r\n                    // tabDetail={this.tabDetail(userSite)}   \r\n\r\n                    primaryKeyField={primaryKeyField}\r\n                    expandField=\"expanded\"\r\n                    detailedFieldList={this.detailedFieldList}\r\n                    extractedColumnList={this.ContactColumns}\r\n                    inputParam={this.props.inputParam}\r\n                    userInfo={this.props.userInfo}\r\n                    data={this.state.ClientContact || []}\r\n                    ClientContact={this.state.ClientContact || []}\r\n                    dataState={this.state.dataState}\r\n                    dataStateChange={this.dataStateChange}\r\n                    controlMap={this.props.controlMap}\r\n                    userRoleControlRights={this.props.userRoleControlRights || []}\r\n                    methodUrl=\"ClientContact\"\r\n                    getClientContactForAddEdit={this.props.getClientContactForAddEdit}\r\n                    editParam={editContactParam}\r\n                    deleteParam={{ operation: \"delete\" }}\r\n                    deleteRecord={this.DeleteContact}\r\n                    scrollable={\"scrollable\"}\r\n                    isActionRequired={true}\r\n                    selectedId={this.props.selectedId}\r\n                    hasDynamicColSize={true}\r\n                />\r\n                )\r\n        )\r\n        return accordionMap;\r\n    }\r\n\r\n    ConfirmDelete = (obj) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.Delete(obj));\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'ntransactionstatus') {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            }\r\n            else \r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n\r\n        }\r\n\r\n        else {\r\n\r\n            if (event.target.name === \"sphoneno\" || event.target.name === \"smobileno\"\r\n                || event.target.name === \"sfaxno\") {\r\n\r\n                if (event.target.value !== \"\") {\r\n                    event.target.value = validatePhoneNumber(event.target.value);\r\n                    selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n                }\r\n                else {\r\n                    selectedRecord[event.target.name] = event.target.value\r\n                }\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n            // selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;//.value;\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.loadEsign;\r\n        let openChildModal = this.props.openChildModal;\r\n        let selectedRecord = this.props.selectedRecord;\r\n        if (this.props.loadEsign) {\r\n            if (this.props.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.state.selectedRecord['semail'] ? validateEmail(this.state.selectedRecord['semail']) : true) {\r\n            let inputParam = {};\r\n\r\n            if (this.props.screenName === \"IDS_CLIENTSITE\") {\r\n                inputParam = this.SaveSiteDetails(saveType, formRef);\r\n            }\r\n            else {\r\n\r\n                inputParam = this.SaveContactInfo(saveType, formRef);\r\n            }\r\n\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALIDEMAIL\" }));\r\n        }\r\n    }\r\n    SaveSiteDetails(saveType, formRef) {\r\n        let inputData = [];\r\n        let postParam=undefined;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        let fieldList = [\"nclientsitecode\", \"ncountrycode\", \"sclientsitename\",\r\n            \"saddress1\", \"saddress2\", \"saddress3\", \"ndefaultstatus\"];\r\n\r\n        if (this.props.operation === \"update\") {\r\n            postParam = {\r\n                inputListName: \"ClientSiteAddress\",\r\n                selectedObject: \"selectedClientSite\",\r\n                primaryKeyField: \"nclientsitecode\",\r\n              };\r\n            inputData[\"clientsiteaddress\"] = { \"nclientcode\": this.props.masterData.selectedClient.nclientcode ,\r\n                                     \"nclientsitecode\": this.props.masterData.selectedClientSite.nclientsitecode};\r\n            fieldList.map(item => {\r\n                if (item === \"ncountrycode\") {\r\n                    return inputData[\"clientsiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item].value : \"\";\r\n                }\r\n                else {\r\n                    return inputData[\"clientsiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n                }\r\n            })\r\n        }\r\n        else {\r\n\r\n            inputData[\"clientsiteaddress\"] = { \"nclientcode\": this.props.masterData.selectedClient.nclientcode };\r\n\r\n            fieldList.map(item => {\r\n                if (item === \"ncountrycode\") {\r\n                    return inputData[\"clientsiteaddress\"][item] = this.state.selectedRecord[item].value\r\n                }\r\n                else {\r\n                    return inputData[\"clientsiteaddress\"][item] = this.state.selectedRecord[item]\r\n                }\r\n            })\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"ClientSiteAddress\",\r\n            inputData: inputData,\r\n            operation: this.props.operation, saveType, formRef,\r\n            postParam:postParam\r\n        }\r\n        return inputParam;\r\n        //this.props.crudMaster(inputParam, this.props.masterData);\r\n    }\r\n    SaveContactInfo(saveType, formRef) {\r\n\r\n        let dataState = undefined;\r\n        let inputData = [];\r\n        let postParam=undefined;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        let fieldList = [\"nclientcontactcode\", \"scontactname\",\r\n            \"sphoneno\", \"smobileno\", \"semail\", \"sfaxno\", \"scomments\", \"ndefaultstatus\"];\r\n\r\n        let selectedId = null;\r\n        if (this.props.operation === \"update\") {\r\n            postParam = {\r\n                inputListName: \"ClientContactInfo\",\r\n                selectedObject: \"selectedClientContact\",\r\n                primaryKeyField: \"nclientcontactcode\",\r\n              };\r\n            inputData[\"clientcontactinfo\"] = {\r\n                \"nclientcode\": this.props.masterData.selectedClient.nclientcode,\r\n                \"nclientsitecode\": this.props.masterData.selectedClientSite.nclientsitecode\r\n            };\r\n\r\n            selectedId = this.props.selectedRecord.nclientcontactcode;\r\n\r\n            fieldList.map(item => {\r\n                return inputData[\"clientcontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            })\r\n            dataState = this.state.dataState;\r\n        }\r\n        else {\r\n\r\n            inputData[\"clientcontactinfo\"] = {\r\n                \"nclientcode\": this.props.masterData.selectedClient.nclientcode,\r\n                \"nclientsitecode\": this.props.masterData.selectedClientSite.nclientsitecode\r\n            };\r\n            fieldList.map(item => {\r\n                return inputData[\"clientcontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            })\r\n            inputData[\"clientcontactinfo\"]['ndefaultstatus'] = this.state.selectedRecord && this.state.selectedRecord.ndefaultstatus ?\r\n                this.state.selectedRecord.ndefaultstatus\r\n                : transactionStatus.YES\r\n\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"ClientContactInfo\",\r\n            inputData: inputData, selectedId,\r\n            operation: this.props.operation, saveType, formRef, dataState,\r\n            postParam:postParam\r\n        }\r\n        return inputParam;\r\n\r\n    }\r\n    DeleteContact = (deleteParam) => {\r\n        let inputData = [];\r\n        if (deleteParam.selectedRecord.expanded !== undefined) {\r\n            delete deleteParam.selectedRecord.expanded\r\n        }\r\n        inputData[\"clientcontactinfo\"] = deleteParam.selectedRecord;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        const inputParam = {\r\n            methodUrl: \"ClientContactInfo\",\r\n            classUrl: this.props.inputParam.classUrl,\r\n            inputData: inputData,\r\n            operation: \"delete\",\r\n            dataState: this.state.dataState\r\n        }\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                    openChildModal: true, screenName: \"Contact\", operation: \"delete\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                        openChildModal: true, screenName: \"Contact\", operation: \"delete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n            }\r\n        }\r\n    }\r\n    Delete = (deleteParam) => {\r\n        let inputData = [];\r\n        if (deleteParam.selectedRecord.expanded && deleteParam.selectedRecord.expanded !== undefined) {\r\n            delete deleteParam.selectedRecord.expanded\r\n        }\r\n        inputData[deleteParam.Type] = deleteParam.selectedRecord;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        const inputParam = {\r\n            methodUrl: deleteParam.methodURL,\r\n            classUrl: this.props.inputParam.classUrl,\r\n            inputData: inputData,\r\n            operation: \"delete\"\r\n        }\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                    openChildModal: true, screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                        openChildModal: true, screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n            }\r\n        }\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.masterData !== previousProps.masterData) {\r\n\r\n            let { dataState } = this.state;\r\n            if (this.props.dataState === undefined) {\r\n                dataState = { skip: 0 ,take :this.props.settings ? parseInt(this.props.settings[14]) : 5}\r\n            }\r\n\r\n            this.setState({\r\n                isSiteOpen: false, isContactOpen: false,\r\n                ClientContact: this.props.masterData.ClientContact,\r\n                SiteCode: this.props.masterData.SiteCode, Country: this.props.masterData.Country, dataState\r\n\r\n            });\r\n        }\r\n\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n    }\r\n}\r\nexport default (injectIntl(ClientSiteAddressTab));"]},"metadata":{},"sourceType":"module"}