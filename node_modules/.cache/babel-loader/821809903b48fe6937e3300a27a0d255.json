{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\BarcodeTemplate\\\\BarcodePreRegDesign.jsx\";\nimport React from 'react';\nimport { Button, Col, Modal, Row } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { TouchBackend } from 'react-dnd-touch-backend';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport device from 'current-device';\nimport Dynamicinput from '../../components/droparea/Dynamicinputs';\nimport { connect } from 'react-redux';\nimport { updateStore, crudMaster, getTableColumns, getForeignTableData, getDynamicFilter, getDynamicFilterExecuteData } from '../../actions/index';\nimport { condition } from '../../components/Enumeration';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { validateCreateView } from '../../components/CommonScript';\nimport { getChildComponentForeignKey, getcomponentdata, getValidComponent, replaceChildFromChildren } from '../../components/droparea/helpers';\nimport { ReactComponents } from '../../components/Enumeration';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { toast } from 'react-toastify';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass BarcodePreRegDesign extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.validateDynamicDesign = () => {\n      let valid = this.validateTemplate(this.state.design);\n\n      if (!valid) {\n        return null;\n      } else {\n        const data = [];\n        this.state.design.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    data.push(componentrow);\n                  }\n                });\n              } else {\n                if (component.inputtype === \"combo\") {\n                  data.push(component);\n                }\n              }\n            });\n          });\n        });\n\n        if (this.props.selectedRecord && this.props.selectedRecord.ncontrolcode && this.props.selectedRecord.ncontrolcode.item) {\n          const data1 = this.getMappingCheck(this.props.selectedRecord.ncontrolcode.item, this.props.Login.columnInfo, data[data.length - 1]);\n\n          if (data1) {\n            let inputData = [];\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\n\n            if (this.props.Login.operation === \"update\") {\n              inputData[\"registrationtemplate\"] = {\n                jsonString: JSON.stringify(this.state.design),\n                jsondata: this.state.design,\n                valuemember: data[data.length - 1].valuemember\n              };\n            } else {\n              //add               \n              inputData[\"registrationtemplate\"] = {\n                jsonString: JSON.stringify(this.state.design),\n                jsondata: this.state.design,\n                valuemember: data[data.length - 1].valuemember\n              };\n            }\n\n            this.props.saveScreenFilter(inputData, \"openPortal\");\n          } else {\n            toast.warn(\"last level is does not relationship with selected screen\");\n          }\n        } else {\n          toast.warn(\"Select Control\");\n        }\n      }\n    };\n\n    this.showPropFilter = () => {\n      const selectedFieldRecord = this.state.selectedFieldRecord;\n\n      if (selectedFieldRecord.inputtype === 'backendsearchfilter') {\n        if (selectedFieldRecord.label !== '' && selectedFieldRecord.table && selectedFieldRecord.filterfields) {\n          const inputparam = {\n            component: selectedFieldRecord,\n            userinfo: this.props.Login.userInfo,\n            type: 'design',\n            selectedComponentpath: this.state.selectedComponentpath\n          };\n          this.props.getDynamicFilter(inputparam);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_PLEASESELECTMANDATORYFIELDS\"\n          }));\n        }\n      } else if (selectedFieldRecord.inputtype === 'frontendsearchfilter') {\n        if (selectedFieldRecord.label !== '' && selectedFieldRecord.table && selectedFieldRecord.filterfields) {\n          const inputparam = {\n            component: selectedFieldRecord,\n            userinfo: this.props.Login.userInfo,\n            type: 'design',\n            selectedComponentpath: this.state.selectedComponentpath\n          };\n          this.props.getDynamicFilter(inputparam);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_PLEASESELECTMANDATORYFIELDS\"\n          }));\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            showFilter: !this.state.showFilter\n          }\n        };\n        this.props.updateStore(updateInfo); //  this.setState({ showFilter: !this.state.showFilter })\n      }\n    };\n\n    this.hidePropFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo); //  this.setState({ showFilter: !this.state.showFilter })\n    };\n\n    this.setLayout = (design, splitDropZonePath, remove, removeChild) => {\n      let selectedFieldRecord = {};\n\n      if (remove === undefined) {\n        selectedFieldRecord = getcomponentdata(design, splitDropZonePath.split(\"-\"));\n      } else if (removeChild) {\n        let childRecord = {};\n        this.state.toBeDeleted.deleteComponent.child.map(myChild => {\n          childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"));\n          childRecord['childValue'] = undefined;\n          childRecord['parentPath'] = undefined;\n          childRecord['valuecolumn'] = undefined;\n          design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord);\n          return null;\n        });\n      }\n\n      design = this.updatePath(design);\n      const components = this.getComponents(design).components;\n      let validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo);\n      this.setState({\n        showConfirmAlert: false,\n        toBeDeleted: {},\n        design,\n        selectedFieldRecord: selectedFieldRecord,\n        components,\n        validComponents,\n        selectedComponentpath: splitDropZonePath.split(\"-\").length > 1 ? splitDropZonePath : '0-0-' + splitDropZonePath\n      });\n    };\n\n    this.updatePath = design => {\n      design.map((row, rowIndex) => row.children.map((column, columnIndex) => column.children.map((componnetrow, compRowIndex) => {\n        if (componnetrow.hasOwnProperty('children')) {\n          componnetrow.children.map((component, compIndex) => {\n            if (component.inputtype !== 'radio') {\n              if (component.child) {\n                let newChild = [];\n                component.child.map(childComp => {\n                  const obj = this.getIndexByLabel(design, childComp.label);\n                  newChild.push({ ...childComp,\n                    childPath: obj.path\n                  });\n                  const newObj = { ...obj.object,\n                    parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}`\n                  };\n                  design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\n                });\n                component = { ...component,\n                  child: newChild\n                };\n                design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\n              }\n            } else {\n              if (component.child) {\n                let newChild = [];\n                component.child.map(childComp => {\n                  const obj = this.getIndexByLabel(design, childComp.label);\n                  newChild.push({ ...childComp,\n                    childPath: obj.path\n                  });\n                  const newObj = { ...obj.object,\n                    radioparentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}`\n                  };\n                  design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\n                });\n                component = { ...component,\n                  child: newChild\n                };\n                design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\n              }\n            }\n          });\n        } else {\n          if (componnetrow.inputtype !== 'radio') {\n            if (componnetrow.child) {\n              let newChild = [];\n              componnetrow.child.map(childComp => {\n                const obj = this.getIndexByLabel(design, childComp.label);\n                newChild.push({ ...childComp,\n                  childPath: obj.path\n                });\n                const newObj = { ...obj.object,\n                  parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-0`\n                };\n                design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\n              });\n              componnetrow = { ...componnetrow,\n                child: newChild\n              };\n              design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\n            }\n          } else {\n            if (componnetrow.child) {\n              let newChild = [];\n              componnetrow.child.map(childComp => {\n                const obj = this.getIndexByLabel(design, childComp.label);\n                newChild.push({ ...childComp,\n                  childPath: obj.path\n                });\n                const newObj = { ...obj.object,\n                  radioparentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-0`\n                };\n                design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\n              });\n              componnetrow = { ...componnetrow,\n                child: newChild\n              };\n              design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\n            }\n          }\n        }\n      })));\n      return design;\n    };\n\n    this.validateDelete = (design, splitDropZonePath) => {\n      const path = splitDropZonePath.split(\"-\");\n      let showAlert = false;\n      let toBeDeleted = {};\n      let component = getcomponentdata(this.state.design, path);\n\n      if (component.child && component.child.length > 0) {\n        let childRecord = {};\n\n        if (component.inputtype === 'radio') {\n          component.child.map(myChild => {\n            childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"));\n            delete childRecord[\"radioparentLabel\"];\n            delete childRecord[\"selectedrecordbasedhide\"];\n            delete childRecord[\"recordbasedhide\"];\n            delete childRecord[\"radioparent\"];\n            delete childRecord[\"radioparentPath\"];\n            delete childRecord[\"recordbasedshowhide\"];\n            delete childRecord[\"recordbasedreadonly\"];\n            design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord);\n            return null;\n          });\n        } else {\n          component.child.map(myChild => {\n            childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"));\n            childRecord['childValue'] = undefined;\n            childRecord['parentPath'] = undefined;\n            childRecord['valuecolumn'] = undefined;\n\n            if (myChild.componentcode !== ReactComponents.COMBO) {\n              childRecord['column'] = undefined;\n            }\n\n            design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord);\n            return null;\n          });\n        }\n\n        showAlert = true;\n        toBeDeleted = {\n          design,\n          splitDropZonePath,\n          deleteComponent: component\n        };\n      }\n\n      if (component.childValue) {\n        let parentData = getcomponentdata(this.state.design, component.parentPath.split(\"-\"));\n        let newChildData = parentData.child.filter(child => child.label !== component.label);\n        parentData = { ...parentData,\n          child: newChildData\n        };\n        design = replaceChildFromChildren(design, component.parentPath.split(\"-\"), parentData);\n        toBeDeleted = {\n          design,\n          splitDropZonePath,\n          deleteComponent: component\n        };\n      }\n\n      if (component.radioparent) {\n        let parentData = getcomponentdata(this.state.design, component.radioparentPath.split(\"-\"));\n        let newChildData = parentData.child.filter(child => child.label !== component.label);\n        parentData = { ...parentData,\n          child: newChildData\n        };\n        design = replaceChildFromChildren(design, component.radioparentPath.split(\"-\"), parentData);\n        toBeDeleted = {\n          design,\n          splitDropZonePath,\n          deleteComponent: component\n        };\n      }\n\n      if (showAlert) {\n        this.showAlert(true, toBeDeleted);\n      } else {\n        this.setLayout(design, splitDropZonePath, true);\n      }\n    };\n\n    this.confirmAlert = () => {\n      this.confirmMessage.confirm(this.props.intl.formatMessage({\n        id: \"IDS_WARNING\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_WARNING\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_PARENTCOMPONENTCANNOTBEDELETED\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.setLayout(this.state.toBeDeleted.design, this.state.toBeDeleted.splitDropZonePath, true, true), undefined, () => this.showAlert(false));\n    };\n\n    this.showAlert = (bool, toBeDeleted) => {\n      this.setState({\n        showConfirmAlert: bool,\n        toBeDeleted\n      });\n    };\n\n    this.onclickcomponent = (event, data, path) => {\n      const selectedFieldRecord = { ...data\n      };\n      const obj = this.getComponents(this.state.design); //console.log(\"obj:\", obj);\n\n      const components = obj.components;\n      let dateComponents = obj.dateComponents;\n\n      if (data.inputtype === \"date\") {\n        const filterDataComponents = dateComponents.filter(item => item.label !== data.label);\n        dateComponents = filterDataComponents;\n      }\n\n      let componentData = {\n        components,\n        selectedComponentpath: path\n      };\n      let parentRadioValue = [];\n\n      if ((selectedFieldRecord.componentcode === ReactComponents.COMBO || selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) && selectedFieldRecord.source !== undefined && (this.props.Login.columnInfo === undefined || this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode] === undefined)) {\n        this.props.getTableColumns(this.state.design, selectedFieldRecord, selectedFieldRecord.nquerybuildertablecode, this.props.Login.userInfo, \"\", this.props.Login.columnInfo, componentData, undefined, false);\n      } else {\n        const validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo);\n        let tableColumn = selectedFieldRecord.nquerybuildertablecode ? this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].tableColumn : [];\n        let filterColumns = selectedFieldRecord.nquerybuildertablecode ? this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].filterColumns : [];\n\n        if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n          if (selectedFieldRecord.radioparentPath) {\n            let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"));\n\n            if (oldParentData.hasOwnProperty('child')) {\n              oldParentData.child.map(item => {\n                if (item.label === selectedFieldRecord.label) {\n                  parentRadioValue = oldParentData.radioOptions.tags.map(item => {\n                    return {\n                      value: item.id,\n                      label: item.text,\n                      item\n                    };\n                  });\n                }\n              });\n            }\n          }\n        } else {\n          if (selectedFieldRecord.radioparentPath) {\n            if (selectedFieldRecord.radioparentPath) {\n              let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"));\n\n              if (oldParentData.hasOwnProperty('child')) {\n                oldParentData.child.map(item => {\n                  if (item.label === selectedFieldRecord.label) {\n                    parentRadioValue = oldParentData.radioOptions.tags.map(item => {\n                      return {\n                        value: item.id,\n                        label: item.text,\n                        item\n                      };\n                    });\n                  }\n                });\n              }\n            }\n          }\n        }\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\n          if (this.props.Login.columnInfo && selectedFieldRecord.childValue && this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode]) {\n            tableColumn = this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].tableColumn;\n            filterColumns = this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].filterColumns;\n            this.setState({\n              selectedComponentpath: path,\n              selectedFieldRecord: selectedFieldRecord,\n              components,\n              tableColumn,\n              filterColumns,\n              validComponents,\n              parentRadioValue,\n              showFilter: false\n            });\n          } else {\n            if (selectedFieldRecord.childValue) {\n              this.props.getTableColumns(this.state.design, selectedFieldRecord, selectedFieldRecord.childValue.nquerybuildertablecode, this.props.Login.userInfo, \"\", this.props.Login.columnInfo, componentData, undefined, false);\n            } else {\n              this.setState({\n                selectedComponentpath: path,\n                selectedFieldRecord: selectedFieldRecord,\n                components,\n                tableColumn,\n                filterColumns,\n                dateComponents,\n                validComponents,\n                parentRadioValue,\n                showFilter: false\n              });\n            }\n          }\n        } else {\n          this.setState({\n            selectedComponentpath: path,\n            selectedFieldRecord: selectedFieldRecord,\n            components,\n            tableColumn,\n            filterColumns,\n            dateComponents,\n            validComponents,\n            parentRadioValue,\n            showFilter: false\n          });\n        }\n      }\n    };\n\n    this.getComponents = design => {\n      let components = [];\n      let dateComponents = [{\n        label: \"Current Date\",\n        value: \"utccurrentdate\"\n      }];\n      design.map((row, rowIndex) => {\n        row.children.map((column, columnIndex) => {\n          column.children.map((componnet, compindex) => {\n            if (componnet.hasOwnProperty(\"children\")) {\n              componnet.children.map((componnetrow, compRowIndex) => {\n                componnetrow.inputtype === 'date' && componnetrow.label && dateComponents.push({\n                  label: componnetrow.label,\n                  value: componnetrow.label\n                });\n                componnetrow.label && components.push({\n                  label: componnetrow.label,\n                  value: componnetrow.label,\n                  nformcode: componnetrow.nformcode,\n                  // item: componnetrow,\n                  inputtype: componnetrow.inputtype,\n                  source: componnetrow.source,\n                  nquerybuildertablecode: componnetrow.nquerybuildertablecode,\n                  child: componnetrow.child,\n                  valuemember: componnetrow.valuemember,\n                  path: `${rowIndex}-${columnIndex}-${compindex}-${compRowIndex}`\n                });\n              });\n            } else {\n              componnet.inputtype === 'date' && componnet.label && dateComponents.push({\n                label: componnet.label,\n                value: componnet.label\n              });\n              componnet.label && components.push({\n                label: componnet.label,\n                value: componnet.label,\n                nformcode: componnet.nformcode,\n                // item: componnet,\n                inputtype: componnet.inputtype,\n                source: componnet.source,\n                nquerybuildertablecode: componnet.nquerybuildertablecode,\n                child: componnet.child,\n                valuemember: componnet.valuemember,\n                path: `${rowIndex}-${columnIndex}-${compindex}-0`\n              });\n            }\n          });\n          return null;\n        });\n        return null;\n      });\n      return {\n        components,\n        dateComponents\n      };\n    };\n\n    this.getValueMembers = selectedFieldRecord => {\n      if (selectedFieldRecord.childValue) {\n        let valueColumn = [];\n        this.props.Login.columnInfo && this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode] && this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].numericColumns.map(x => {\n          if (x.foriegntablename === selectedFieldRecord.childValue.source) valueColumn.push({\n            label: x.displayname[this.props.Login.userInfo.slanguagetypecode],\n            value: x.tablecolumnname,\n            item: {\n              foriegntablePK: x.foriegntablePK\n            }\n          });\n          return null;\n        });\n\n        if (valueColumn.length) {\n          return valueColumn;\n        } else {\n          this.props.Login.columnInfo && this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode] && this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].numericColumns.map(x => {\n            if (x.foriegntablename === selectedFieldRecord.source) valueColumn.push({\n              label: x.displayname[this.props.Login.userInfo.slanguagetypecode],\n              value: x.tablecolumnname,\n              item: {\n                foriegntablePK: x.foriegntablePK\n              }\n            });\n            return null;\n          });\n          return valueColumn;\n        }\n      } else {\n        return null;\n      }\n    };\n\n    this.onInputOnChange = (event, name) => {\n      const selectedFieldRecord = this.state.selectedFieldRecord || {};\n      const selectedRecord = this.state.selectedRecord || {};\n      let chillabelUpdate = false;\n      let newLabel = \"\";\n      let oldLabel = \"\";\n\n      if (event.target.type === 'checkbox') {\n        if (name === \"recordbasedreadonly\" || name === \"recordbasedshowhide\") {\n          let design = this.state.design;\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n\n          if (selectedFieldRecord[\"recordbasedshowhide\"] || selectedFieldRecord[\"recordbasedreadonly\"]) {\n            // let design = this.state.design\n            if (selectedFieldRecord.radioparentPath) {\n              let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"));\n\n              if (oldParentData.child) {\n                let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\n                oldParentData = { ...oldParentData,\n                  child: newChildData1\n                };\n                design = replaceChildFromChildren(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"), oldParentData);\n              }\n\n              delete selectedFieldRecord[\"radioparentLabel\"];\n              delete selectedFieldRecord[\"selectedrecordbasedhide\"];\n              delete selectedFieldRecord[\"recordbasedhide\"];\n              delete selectedFieldRecord[\"radioparent\"];\n            }\n\n            selectedFieldRecord[name === \"recordbasedreadonly\" ? \"recordbasedshowhide\" : \"recordbasedreadonly\"] = false;\n          }\n\n          selectedFieldRecord[event.target.name] = event.target.checked;\n          const newdata = { ...selectedFieldRecord\n          };\n          design = replaceChildFromChildren(design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else if (event.target.name === \"loadselecteddate\" || event.target.name === \"loadcurrentdate\") {\n          if (event.target.name === \"loadselecteddate\" && selectedFieldRecord['loadcurrentdate']) {\n            selectedFieldRecord['loadcurrentdate'] = false;\n          } else if (event.target.name === \"loadcurrentdate\" && selectedFieldRecord['loadselecteddate']) {\n            selectedFieldRecord['loadselecteddate'] = false;\n          }\n\n          selectedFieldRecord[event.target.name] = event.target.checked;\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === \"unique\") {\n          selectedFieldRecord[event.target.name] = event.target.checked;\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'isAddMaster' || event.target.name === 'isView' || event.target.name === 'isEditMaster') {\n          selectedFieldRecord[event.target.name] = event.target.checked;\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'autoFocus') {\n          if (event.target.checked === true) {\n            const val = this.checkAutoFocus();\n\n            if (val === '') {\n              selectedFieldRecord[event.target.name] = event.target.checked;\n              this.saveComponentProperties(selectedFieldRecord);\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_ALREADYFOCUSAPPLIEDON\"\n              }) + ' ' + val);\n            }\n          } else {\n            selectedFieldRecord[event.target.name] = event.target.checked;\n            this.saveComponentProperties(selectedFieldRecord);\n          }\n        } else if (event.target.name === 'isalphabetcaptial') {\n          selectedFieldRecord['isalphabetcaptial'] = event.target.checked ? true : false;\n          selectedFieldRecord['isalphabetsmall'] = false;\n          selectedFieldRecord['isalphabetspl'] = false;\n          selectedFieldRecord['isalphanumeric'] = false;\n          selectedFieldRecord['isnumeric'] = false;\n          selectedFieldRecord['isnumericspl'] = false;\n          selectedFieldRecord['ncustomization'] = false;\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'isnumeric') {\n          selectedFieldRecord['isnumeric'] = event.target.checked ? true : false;\n          selectedFieldRecord['isalphabetspl'] = false;\n          selectedFieldRecord['isalphanumeric'] = false;\n          selectedFieldRecord['isalphabetcaptial'] = false;\n          selectedFieldRecord['isalphabetsmall'] = false;\n          selectedFieldRecord['isnumericspl'] = false;\n          selectedFieldRecord['ncustomization'] = false;\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'isalphanumeric') {\n          selectedFieldRecord['isalphanumeric'] = event.target.checked ? true : false;\n          selectedFieldRecord['isalphabetsmall'] = false;\n          selectedFieldRecord['isalphabetspl'] = false;\n          selectedFieldRecord['isalphabetcaptial'] = false;\n          selectedFieldRecord['isnumeric'] = false;\n          selectedFieldRecord['isnumericspl'] = false;\n          delete selectedFieldRecord['ncasesensitive'];\n          delete selectedFieldRecord['ncaptialletters'];\n          delete selectedFieldRecord['nsmallletters'];\n          delete selectedFieldRecord['nmaxletters'];\n          delete selectedFieldRecord['nmaxnumeric'];\n          selectedFieldRecord['ncustomization'] = false;\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'isnumericspl') {\n          selectedFieldRecord['isnumericspl'] = event.target.checked ? true : false;\n          selectedFieldRecord['isalphabetsmall'] = false;\n          selectedFieldRecord['isalphabetspl'] = false;\n          selectedFieldRecord['isalphanumeric'] = false;\n          selectedFieldRecord['isnumeric'] = false;\n          selectedFieldRecord['isalphabetcaptial'] = false;\n          selectedFieldRecord['ncustomization'] = false;\n          delete selectedFieldRecord['nmaxnumeric'];\n          delete selectedFieldRecord['nsplchar'];\n          delete selectedFieldRecord['naviodsplchar'];\n          delete selectedFieldRecord['nsplchar'];\n          delete selectedFieldRecord['nsplcharnotallow'];\n          delete selectedFieldRecord['ncasesensitive'];\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'isalphabetsmall') {\n          selectedFieldRecord['isalphabetsmall'] = event.target.checked ? true : false;\n          selectedFieldRecord['isalphanumeric'] = false;\n          selectedFieldRecord['isalphabetspl'] = false;\n          selectedFieldRecord['isalphabetcaptial'] = false;\n          selectedFieldRecord['isnumeric'] = false;\n          selectedFieldRecord['isnumericspl'] = false;\n          selectedFieldRecord['ncustomization'] = false;\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'isalphabetspl') {\n          selectedFieldRecord['isalphabetspl'] = event.target.checked ? true : false;\n          selectedFieldRecord['isalphabetsmall'] = false;\n          selectedFieldRecord['isalphanumeric'] = false;\n          selectedFieldRecord['isalphabetcaptial'] = false;\n          selectedFieldRecord['isnumeric'] = false;\n          selectedFieldRecord['isnumericspl'] = false;\n          delete selectedFieldRecord['ncasesensitive'];\n          delete selectedFieldRecord['ncaptialletters'];\n          delete selectedFieldRecord['nsmallletters'];\n          delete selectedFieldRecord['nmaxletters'];\n          delete selectedFieldRecord['nmaxnumeric'];\n          delete selectedFieldRecord['naviodsplchar'];\n          delete selectedFieldRecord['nsplchar'];\n          delete selectedFieldRecord['nsplcharnotallow'];\n          selectedFieldRecord['ncustomization'] = false;\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'ncustomization' && event.target.checked === false) {\n          selectedFieldRecord['ncustomization'] = event.target.checked ? true : false;\n          delete selectedFieldRecord['nmaxletters'];\n          delete selectedFieldRecord['nmaxnumeric'];\n          delete selectedFieldRecord['nsplchar'];\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'naviodsplchar' && event.target.checked === false) {\n          selectedFieldRecord['naviodsplchar'] = event.target.checked ? true : false;\n          delete selectedFieldRecord['nsplcharnotallow'];\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'ncasesensitive') {\n          selectedFieldRecord['ncasesensitive'] = event.target.checked ? true : false;\n          delete selectedFieldRecord['nsmallletters'];\n          delete selectedFieldRecord['ncaptialletters'];\n          delete selectedFieldRecord['nmaxcapticalletters'];\n          delete selectedFieldRecord['nmaxsmallletters'];\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'ncaptialletters') {\n          selectedFieldRecord['ncaptialletters'] = event.target.checked ? true : false;\n          delete selectedFieldRecord['nsmallletters'];\n          delete selectedFieldRecord['ncasesensitive'];\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'nsmallletters') {\n          selectedFieldRecord['nsmallletters'] = event.target.checked ? true : false;\n          delete selectedFieldRecord['ncasesensitive'];\n          delete selectedFieldRecord['ncaptialletters'];\n          this.saveComponentProperties(selectedFieldRecord);\n        } else {\n          if (event.target.name === 'timeonly') {\n            selectedFieldRecord['dateonly'] = false;\n          }\n\n          if (event.target.name === 'dateonly') {\n            selectedFieldRecord['timeonly'] = false;\n          }\n\n          if (event.target.name === 'mandatory') {\n            if (event.target.checked === false) {\n              if (selectedFieldRecord['unique']) {\n                selectedFieldRecord['unique'] = false;\n              }\n            }\n          }\n\n          selectedFieldRecord[event.target.name] = event.target.checked;\n          this.saveComponentProperties(selectedFieldRecord);\n        }\n      } else if (event.target.name === 'templatename') {\n        if (event.target.value !== \"\") {\n          event.target.value = validateCreateView(event.target.value);\n          selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        if (name === 'synonym') {\n          selectedFieldRecord['displayname'] = { ...selectedFieldRecord['displayname'],\n            [event.target.name]: event.target.value\n          };\n        }\n\n        if (event.target.name === 'label') {\n          const langArray = this.props.Login.languageList;\n          const langDataObject = {};\n          langArray.map(item => langDataObject[item.value] = event.target.value);\n          selectedFieldRecord['displayname'] = { ...selectedFieldRecord['displayname'],\n            ...langDataObject\n          };\n          chillabelUpdate = true;\n          newLabel = event.target.value;\n          oldLabel = selectedFieldRecord[event.target.name];\n          selectedFieldRecord[event.target.name] = event.target.value;\n        } else {\n          selectedFieldRecord[event.target.name] = event.target.value;\n        }\n\n        this.saveComponentProperties(selectedFieldRecord, chillabelUpdate, oldLabel, newLabel);\n      }\n    };\n\n    this.onComboChange = (comboData, comboName) => {\n      let {\n        selectedFieldRecord\n      } = this.state;\n\n      if (selectedFieldRecord.label) {\n        if (comboName === 'table') {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord['source'] = comboData.item.stablename;\n          selectedFieldRecord['nformcode'] = comboData.item.nformcode;\n\n          if (comboData.item.stablename === 'dynamicmaster') {\n            selectedFieldRecord['conditionstring'] = ' and nformcode = ' + comboData.item.nformcode;\n          }\n\n          selectedFieldRecord['nquerybuildertablecode'] = comboData.value;\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.props.getTableColumns(design, selectedFieldRecord, comboData.value, this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo);\n        } else if (comboName === 'column') {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord['displaymember'] = comboData.value;\n\n          if (comboData.item.ismultilingual) {\n            selectedFieldRecord['isMultiLingual'] = true;\n          }\n\n          if (comboData.item.stablename === 'dynamicmaster') {\n            selectedFieldRecord['name'] = comboData.value;\n          }\n\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else if (comboName === 'childValue') {\n          if (comboData) {\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            let design = this.state.design;\n\n            if (selectedFieldRecord.parentPath) {\n              let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n\n              if (oldParentData.child) {\n                let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\n                oldParentData = { ...oldParentData,\n                  child: newChildData1\n                };\n                design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), oldParentData);\n              }\n            }\n\n            let parentData = getcomponentdata(design, comboData.path.split(\"-\"));\n            selectedFieldRecord['childValue'] = comboData;\n            selectedFieldRecord['parentPath'] = comboData.path;\n\n            if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n              selectedFieldRecord['parentLabel'] = comboData.label;\n            }\n\n            const newdata = { ...selectedFieldRecord\n            };\n            design = replaceChildFromChildren(design, splititemarray, newdata);\n            let newChildData = parentData.child || [];\n            let validateChild = newChildData.filter(x => x.label === selectedFieldRecord.label);\n\n            if (validateChild.length === 0) {\n              let valueMemberOptions = this.getValueMembers(selectedFieldRecord);\n\n              if (valueMemberOptions.length === 1) {\n                const foriegntablePK = getChildComponentForeignKey(selectedFieldRecord, comboData, this.props.Login.columnInfo);\n                newChildData.push({\n                  label: selectedFieldRecord.label,\n                  foriegntablePK: foriegntablePK,\n                  tablecolumnname: valueMemberOptions[0].value,\n                  childPath: this.state.selectedComponentpath,\n                  isDynamicMapping: selectedFieldRecord.valuemember === \"ndynamicmastercode\" ? true : false\n                });\n              } else {\n                newChildData.push({\n                  label: selectedFieldRecord.label,\n                  childPath: this.state.selectedComponentpath\n                });\n              }\n            }\n\n            parentData = { ...parentData,\n              child: newChildData\n            };\n            design = replaceChildFromChildren(design, comboData.path.split(\"-\"), parentData);\n\n            if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\n              this.setState({\n                design,\n                selectedFieldRecord\n              });\n            } else if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n              let parentRadioValue = this.state.parentRadioValue || [];\n              parentRadioValue = parentData.radioOptions.tags.map(item => {\n                return {\n                  value: item.id,\n                  label: item.text,\n                  item\n                };\n              });\n              this.setState({\n                design,\n                selectedFieldRecord,\n                parentRadioValue\n              });\n            } else {\n              this.props.getTableColumns(design, selectedFieldRecord, selectedFieldRecord.childValue.nquerybuildertablecode, this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo, {\n                components: this.state.components,\n                selectedComponentpath: this.state.selectedComponentpath\n              }, true);\n            }\n          } else {\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n            let newChildData = parentData.child.filter(child => child.label !== selectedFieldRecord.label);\n            parentData = { ...parentData,\n              child: newChildData\n            };\n            let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData);\n            selectedFieldRecord['childValue'] = comboData;\n            if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) selectedFieldRecord['column'] = comboData;\n            const newdata = { ...selectedFieldRecord\n            };\n            design = replaceChildFromChildren(design, splititemarray, newdata);\n\n            if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\n              this.setState({\n                design,\n                selectedFieldRecord\n              });\n            } else {\n              this.setState({\n                design,\n                selectedFieldRecord,\n                tableColumn: []\n              });\n            }\n          }\n        } else if (comboName === 'valuecolumn') {\n          selectedFieldRecord['valuecolumn'] = comboData;\n          let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n          let newChildData = [];\n          parentData.child.map(child => {\n            if (child.label === selectedFieldRecord.label) {\n              newChildData.push({ ...child,\n                tablecolumnname: comboData.value,\n                foriegntablePK: comboData.item.foriegntablePK,\n                isDynamicMapping: selectedFieldRecord.valuemember === \"ndynamicmastercode\" ? true : false\n              });\n            } else {\n              newChildData.push(child);\n            }\n\n            return null;\n          });\n          parentData = { ...parentData,\n            child: newChildData\n          };\n          let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData);\n          const newdata = { ...selectedFieldRecord\n          };\n          design = replaceChildFromChildren(design, this.state.selectedComponentpath.split(\"-\"), newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else if (comboName === \"staticfiltertable\") {\n          if (comboData) {\n            selectedFieldRecord[comboName] = comboData;\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            const newdata = { ...selectedFieldRecord\n            };\n            const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n            const list = JSON.parse(comboData.item.jsondata.value).jcolumnname;\n            const staticfiltercolumn = list.map(x => {\n              // x['displayname']= x['displayname'][this.props.Login.userInfo.slanguagetypecode]\n              return {\n                label: x['displayname'][this.props.Login.userInfo.slanguagetypecode],\n                value: x['displayname'][this.props.Login.userInfo.slanguagetypecode],\n                item: x\n              };\n            });\n            this.setState({\n              design,\n              selectedFieldRecord,\n              staticfiltercolumn\n            });\n          } else {\n            selectedFieldRecord[comboName] = comboData;\n            delete selectedFieldRecord['staticfiltercolumn'];\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            const newdata = { ...selectedFieldRecord\n            };\n            const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n            this.setState({\n              design,\n              selectedFieldRecord,\n              staticfiltercolumn: []\n            });\n          }\n        } else {\n          selectedFieldRecord[comboName] = comboData;\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERLABEL\"\n        }));\n      }\n    };\n\n    this.addCondition = () => {\n      let {\n        selectedFieldRecord\n      } = this.state;\n      let filterColumnName;\n      let filterValue;\n      let conditionString;\n      let conditionArrayString;\n      let selectedStaticfiltertable = {};\n\n      if (selectedFieldRecord[\"filtercolumn\"] && selectedFieldRecord['condition'] && (selectedFieldRecord['staticfiltercolumn'] || selectedFieldRecord['staticfiltercolumn'])) {\n        selectedStaticfiltertable = JSON.parse(selectedFieldRecord[\"staticfiltertable\"].item.jsondata.value);\n\n        switch (selectedFieldRecord[\"filtercolumn\"].type) {\n          case 'static':\n            {\n              filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.columnname;\n              filterValue = {\n                label: selectedFieldRecord.staticfiltercolumn.label,\n                value: selectedFieldRecord.staticfiltercolumn.item.columnname\n              };\n              break;\n            }\n\n          case 'dynamic':\n            {\n              filterColumnName = \" and jsondata->>'\" + selectedFieldRecord.filtercolumn.item.columnname + \"'\";\n              filterValue = {\n                label: selectedFieldRecord.staticfiltercolumn.label,\n                value: selectedFieldRecord.selectedFieldRecord.staticfiltercolumn.item.columnname\n              };\n              break;\n            }\n\n          case 'numeric':\n            {\n              filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.tablecolumnname;\n              filterValue = {\n                label: selectedFieldRecord.staticfiltercolumn.label,\n                value: selectedFieldRecord.staticfiltercolumn.item.columnname\n              };\n              break;\n            }\n\n          default:\n            break;\n        }\n\n        switch (selectedFieldRecord[\"condition\"].value) {\n          case condition.EQUALS:\n            conditionString = filterColumnName + \" = P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label;\n            break;\n\n          case condition.NOTEQUALS:\n            conditionString = filterColumnName + \" P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label;\n            break;\n\n          case condition.STARTSWITH:\n            conditionString = filterColumnName + \" like 'P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P\" + \"%'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Starts With \" + filterValue.label;\n            break;\n\n          case condition.ENDSWITH:\n            conditionString = filterColumnName + \" like '%P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \"Ends With \" + filterValue.label;\n            break;\n\n          case condition.INCLUDES:\n            conditionString = filterColumnName + \" like '%P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P%'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Contains \" + filterValue.label;\n            break;\n          // case condition.CONTAINS:\n          //     conditionString = filterColumnName + \" in (\" + filterValue.map(x => x.value).join(',') + \" )\"\n          //     conditionArrayString = selectedFieldRecord.filtercolumn.label + \" in (\" + filterValue.map(x => x.label).join(',') + \" )\"\n          //     break;\n          // case condition.NOTCONTAINS:\n          //     conditionString = filterColumnName + \" not in (\" + filterValue.map(x => x.value).join(',') + \" )\"\n          //     conditionArrayString = selectedFieldRecord.filtercolumn.label + \" not in (\" + filterValue.map(x => x.label).join(',') + \" )\"\n          //     break;\n\n          default:\n            break;\n        }\n\n        let conditionArrayUI = selectedFieldRecord.conditionArrayUI || [];\n        let conditionArraySQL = selectedFieldRecord.conditionArraySQL || [];\n        conditionArrayUI.push(conditionArrayString);\n        conditionArraySQL.push(conditionString);\n        selectedFieldRecord = { ...selectedFieldRecord,\n          filtercolumn: \"\",\n          condition: \"\",\n          staticfiltervalue: undefined,\n          filtervalue: \"\",\n          staticfiltertable: \"\",\n          nsystemconfiguration: false,\n          conditionArrayUI,\n          conditionArraySQL,\n          staticfiltercolumn: \"\"\n        };\n        selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\n      } else if (selectedFieldRecord[\"filtercolumn\"] && selectedFieldRecord['condition'] && (selectedFieldRecord['staticfiltervalue'] || selectedFieldRecord['filtervalue'])) {\n        switch (selectedFieldRecord[\"filtercolumn\"].type) {\n          case 'static':\n            {\n              filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.columnname;\n              filterValue = {\n                label: selectedFieldRecord.staticfiltervalue,\n                value: selectedFieldRecord.staticfiltervalue\n              };\n              break;\n            }\n\n          case 'dynamic':\n            {\n              filterColumnName = \" and jsondata->>'\" + selectedFieldRecord.filtercolumn.item.columnname + \"'\";\n              filterValue = {\n                label: selectedFieldRecord.staticfiltervalue,\n                value: selectedFieldRecord.staticfiltervalue\n              };\n              break;\n            }\n\n          case 'numeric':\n            {\n              filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.tablecolumnname;\n              filterValue = selectedFieldRecord.filtervalue;\n              break;\n            }\n\n          default:\n            break;\n        }\n\n        switch (selectedFieldRecord[\"condition\"].value) {\n          case condition.EQUALS:\n            conditionString = filterColumnName + \" = '\" + filterValue.value + \"'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label;\n            break;\n\n          case condition.NOTEQUALS:\n            conditionString = filterColumnName + \" != '\" + filterValue.value + \"'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label;\n            break;\n\n          case condition.STARTSWITH:\n            conditionString = filterColumnName + \" like '\" + filterValue.value + \"%'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Starts With \" + filterValue.label;\n            break;\n\n          case condition.ENDSWITH:\n            conditionString = filterColumnName + \" like '%\" + filterValue.value + \"'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \"Ends With \" + filterValue.label;\n            break;\n\n          case condition.INCLUDES:\n            conditionString = filterColumnName + \" like '%\" + filterValue.value + \"%'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Contains \" + filterValue.label;\n            break;\n\n          case condition.CONTAINS:\n            conditionString = filterColumnName + \" in (\" + filterValue.map(x => x.value).join(',') + \" )\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" in (\" + filterValue.map(x => x.label).join(',') + \" )\";\n            break;\n\n          case condition.NOTCONTAINS:\n            conditionString = filterColumnName + \" not in (\" + filterValue.map(x => x.value).join(',') + \" )\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" not in (\" + filterValue.map(x => x.label).join(',') + \" )\";\n            break;\n\n          default:\n            break;\n        }\n\n        let conditionArrayUI = selectedFieldRecord.conditionArrayUI || [];\n        let conditionArraySQL = selectedFieldRecord.conditionArraySQL || [];\n        conditionArrayUI.push(conditionArrayString);\n        conditionArraySQL.push(conditionString);\n        selectedFieldRecord = { ...selectedFieldRecord,\n          filtercolumn: \"\",\n          condition: \"\",\n          staticfiltervalue: undefined,\n          filtervalue: \"\",\n          conditionArrayUI,\n          conditionArraySQL,\n          nsystemconfiguration: false,\n          staticfiltercolumn: \"\"\n        };\n        selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\n      } else {\n        return toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALUES\"\n        }));\n      }\n\n      const splititemarray = this.state.selectedComponentpath.split(\"-\");\n      const newdata = { ...selectedFieldRecord\n      };\n      const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n      this.setState({\n        design,\n        selectedFieldRecord,\n        staticfiltercolumn: \"\"\n      });\n    };\n\n    this.deleteCondition = index => {\n      let {\n        selectedFieldRecord\n      } = this.state;\n      let conditionArrayUI = selectedFieldRecord.conditionArrayUI;\n      let conditionArraySQL = selectedFieldRecord.conditionArraySQL;\n      conditionArrayUI.splice(index, 1);\n      conditionArraySQL.splice(index, 1);\n      selectedFieldRecord['conditionArrayUI'] = conditionArrayUI;\n      selectedFieldRecord['conditionArraySQL'] = conditionArraySQL;\n      selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\n      const splititemarray = this.state.selectedComponentpath.split(\"-\");\n      const newdata = { ...selectedFieldRecord\n      };\n      const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n      this.setState({\n        design,\n        selectedFieldRecord\n      });\n    };\n\n    this.saveComponentProperties = (selectedFieldRecord, childLabelUpdate, oldLabelName, newLabelName) => {\n      const splititemarray = this.state.selectedComponentpath.split(\"-\"); // const selectedFieldRecord = this.state.selectedFieldRecord;\n\n      const newdata = { ...selectedFieldRecord\n      };\n      let design1 = this.state.design;\n\n      if (childLabelUpdate) {\n        design1 = this.updateLabelName(this.state.design, oldLabelName, newLabelName);\n      }\n\n      const design = replaceChildFromChildren(design1, splititemarray, newdata);\n      this.setState({\n        design,\n        selectedFieldRecord\n      });\n    };\n\n    this.updateLabelName = (design, oldLabelName, newLabelName) => {\n      design.map((row, rowIndex) => row.children.map((column, columnIndex) => column.children.map((componnetrow, compRowIndex) => {\n        if (componnetrow.hasOwnProperty('children')) {\n          componnetrow.children.map((component, compIndex) => {\n            if (component.child) {\n              let newChild = [];\n              component.child.map(childComp => {\n                if (childComp.label === oldLabelName) {\n                  newChild.push({ ...childComp,\n                    label: newLabelName\n                  });\n                } else {\n                  newChild.push({ ...childComp\n                  });\n                }\n              });\n              component = { ...component,\n                child: newChild\n              };\n              design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\n            }\n          });\n        } else {\n          if (componnetrow.child) {\n            let newChild = [];\n            componnetrow.child.map(childComp => {\n              if (childComp.label === oldLabelName) {\n                newChild.push({ ...childComp,\n                  label: newLabelName\n                });\n              } else {\n                newChild.push({ ...childComp\n                });\n              }\n            });\n            componnetrow = { ...componnetrow,\n              child: newChild\n            };\n            design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\n          }\n        }\n      })));\n      return design;\n    };\n\n    this.validateTemplate = template => {\n      let invalidComponent = [];\n      let duplicateComponents = [];\n      let insufficientMultilingualData = [];\n      let incompletePropertiesComponent = [];\n      let notcompleteProperties = [];\n      let labels = [];\n      let length = 0;\n      template.map((row, rowIndex) => {\n        row.children.map((column, columnIndex) => {\n          column.children.map((componnet, compindex) => {\n            if (componnet.hasOwnProperty(\"children\")) {\n              componnet.children.map((componnetrow, compRowIndex) => {\n                length = length + 1;\n\n                if (!componnetrow.hasOwnProperty('label') || componnetrow.label.trim() === '') {\n                  invalidComponent.push(componnetrow);\n                }\n\n                if (labels.includes(componnetrow.label)) {\n                  duplicateComponents.push(componnetrow);\n                } else {\n                  if (componnetrow.label !== undefined) labels.push(componnetrow.label);\n                }\n\n                if (componnetrow.componentcode === ReactComponents.COMBO) {\n                  if (!componnetrow.hasOwnProperty('source') && !componnetrow.hasOwnProperty('displaymember')) {\n                    incompletePropertiesComponent.push(componnetrow);\n                  }\n                }\n\n                if (!componnetrow.hasOwnProperty('displayname') || Object.keys(componnetrow.displayname).length < this.props.Login.languageList.length) {\n                  insufficientMultilingualData.push(componnetrow);\n                }\n              });\n            } else {\n              length = length + 1;\n\n              if (!componnet.hasOwnProperty('label') || componnet.label.trim() === '') {\n                invalidComponent.push(componnet);\n              }\n\n              if (labels.includes(componnet.label)) {\n                duplicateComponents.push(componnet);\n              } else {\n                if (componnet.label !== undefined) labels.push(componnet.label);\n              }\n\n              if (componnet.componentcode === ReactComponents.COMBO) {\n                if (!componnet.hasOwnProperty('source') && !componnet.hasOwnProperty('displaymember')) {\n                  incompletePropertiesComponent.push(componnet);\n                }\n              }\n\n              if (!componnet.hasOwnProperty('displayname') || Object.keys(componnet.displayname).length < this.props.Login.languageList.length) {\n                insufficientMultilingualData.push(componnet);\n              }\n            }\n          });\n          return null;\n        });\n        return null;\n      });\n\n      if (length === 0) {\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_CREATETEMPLATE'\n        }));\n      }\n\n      if (duplicateComponents.length > 0) {\n        const dataArray = [];\n        duplicateComponents.map(item => dataArray.push(item.label));\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_DUPLICATECOMPONENTSFOUND'\n        }) + dataArray.join(\",\"));\n        return false;\n      }\n\n      if (invalidComponent.length > 0) {\n        const dataArray = [];\n        invalidComponent.map(item => dataArray.push(item.label));\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_MISSINGCOMPONENTLABEL'\n        }));\n        return false;\n      }\n\n      if (insufficientMultilingualData.length > 0) {\n        const dataArray = [];\n        insufficientMultilingualData.map(item => dataArray.push(item.label));\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_INSUFFICIENTMULTILINGUALDATA'\n        }) + dataArray.join(\",\"));\n        return false;\n      }\n\n      if (incompletePropertiesComponent.length > 0) {\n        const dataArray = [];\n        incompletePropertiesComponent.map(item => dataArray.push(item.label));\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_INVALIDCOMPONENT'\n        }) + dataArray.join(\",\"));\n        return false;\n      }\n\n      if (notcompleteProperties.length > 0) {\n        const dataArray = [];\n        notcompleteProperties.map(item => dataArray.push(item.label));\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_MISSMATCHEDVALUES'\n        }) + dataArray.join(\",\"));\n        return false;\n      }\n\n      return true;\n    };\n\n    this.getMappingCheck = (selectedRecord, columnInfo, component) => {\n      const formPrimaryKey = selectedRecord.stableprimarykeyname;\n      const formJnumericColumn = selectedRecord.jnumericcolumns;\n      const check = [];\n\n      if (columnInfo[component.nquerybuildertablecode].numericColumns.length) {\n        columnInfo[component.nquerybuildertablecode].numericColumns.map(mycol => {\n          if (mycol.foriegntablePK === 'ndynamicmastercode') {\n            const index = columnInfo[component.nquerybuildertablecode].staicColumns.findIndex(x => x.columnname === mycol.parentforeignPK && component.nformcode === mycol.foreigntableformcode);\n\n            if (index !== -1) {\n              check.push(true);\n            }\n          } else if (mycol.foriegntablePK === formPrimaryKey) {\n            check.push(true);\n          }\n        });\n      }\n\n      if (formJnumericColumn.length) {\n        formJnumericColumn.map(mycol => {\n          if (mycol.foriegntablePK === 'ndynamicmastercode') {\n            const index = columnInfo[component.nquerybuildertablecode].staicColumns.findIndex(x => x.columnname === mycol.parentforeignPK && component.nformcode === mycol.foreigntableformcode);\n\n            if (index !== -1) {\n              check.push(true);\n            }\n          } else if (mycol.foriegntablePK === component.valuemember) {\n            check.push(true);\n          }\n        });\n      }\n\n      if (component.valuemember === formPrimaryKey) {\n        check.push(true);\n      }\n\n      return check.includes(true);\n    };\n\n    this.confirmMessage = new ConfirmMessage();\n    this.state = {\n      nflag: 1,\n      design: this.props.Login.design,\n      selectedRecord: this.props.Login.selectedRecord || {},\n      selectedFieldRecord: {},\n      selectedComponentpath: \"\",\n      components: [],\n      filterColumns: [],\n      validComponents: [],\n      showConfirmAlert: false,\n      showsynonym: false,\n      toBeDeleted: {},\n      numericConditions: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"equal to(=)\"\n        }),\n        value: condition.EQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_NOTEQUALS\",\n          defaultMessage: \"not equal to(!=)\"\n        }),\n        value: condition.NOTEQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_IN\",\n          defaultMessage: \"In\"\n        }),\n        value: condition.CONTAINS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_NOTIN\",\n          defaultMessage: \"Not In\"\n        }),\n        value: condition.NOTCONTAINS\n      }],\n      stringConditions: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"equal to(=)\"\n        }),\n        value: condition.EQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_NOTEQUALS\",\n          defaultMessage: \"not equal to(!=)\"\n        }),\n        value: condition.NOTEQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_STARTSWITH\",\n          defaultMessage: \"Starts With\"\n        }),\n        value: condition.STARTSWITH\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_ENDSWITH\",\n          defaultMessage: \"Ends With\"\n        }),\n        value: condition.ENDSWITH\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_CONTAINS\",\n          defaultMessage: \"Contains\"\n        }),\n        value: condition.INCLUDES\n      }],\n      dateConditions: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_LESSTHAN\",\n          defaultMessage: \"Less Than (<)\"\n        }),\n        value: condition.LESSTHAN\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_LESSTHANOREQUALS\",\n          defaultMessage: \"Less Than Or Equals(<=)\"\n        }),\n        value: condition.LESSTHANOREQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_GREATERTHAN\",\n          defaultMessage: \"Greater Than(>)\"\n        }),\n        value: condition.GREATERTHAN\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_GREATERTHANOREQUALS\",\n          defaultMessage: \"Greater Than Or Equals(>=)\"\n        }),\n        value: condition.GREATERTHANEQUALS\n      }]\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {\n      centered: true,\n      scrollable: true,\n      bsPrefix: \"model model_zindex\",\n      show: this.props.Login.openPortal,\n      onHide: this.props.closeModal,\n      dialogClassName: `${this.state.nflag && this.state.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`,\n      backdrop: \"static\",\n      keyboard: false,\n      enforceFocus: false,\n      \"aria-labelledby\": \"example-custom-modal-styling-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 25\n      }\n    }, `${this.props.Login.operation === \"update\" ? this.props.intl.formatMessage({\n      id: \"IDS_EDIT\"\n    }) : this.props.Login.operation === \"viewdesign\" ? this.props.intl.formatMessage({\n      id: \"IDS_VIEW\"\n    }) : this.props.intl.formatMessage({\n      id: \"IDS_ADD\"\n    })} ${this.props.intl.formatMessage({\n      id: \"IDS_BARCODEFILTERDESIGN\"\n    })}`), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.props.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 33\n      }\n    })), this.props.Login.operation !== \"viewdesign\" ? /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\" //onClick={() => this.setState({ openAlertModal: true, templateName: \"\" })}\n      ,\n      onClick: this.validateDynamicDesign,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 37\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 37\n      }\n    })) : \"\")), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-inner-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DndProvider, {\n      backend: device.os !== 'android' ? HTML5Backend : TouchBackend,\n      options: {\n        enableMouseEvents: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Dynamicinput, {\n      layout: this.state.design,\n      reactInputFields: this.props.Login.ReactInputFields || {},\n      setLayout: this.setLayout,\n      reactComponents: this.props.Login.ReactComponents || {},\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputChange: this.onNumericInputChange,\n      onComboChange: this.onComboChange,\n      selectedFieldRecord: this.state.selectedFieldRecord,\n      onclickcomponent: (event, data, path) => this.onclickcomponent(event, data, path),\n      ReactTables: this.props.Login.ReactTables,\n      tableColumn: this.state.tableColumn,\n      filterColumns: this.state.filterColumns,\n      numericConditions: this.state.numericConditions,\n      stringConditions: this.state.stringConditions,\n      filterData: this.props.Login.filterData,\n      inputFields: this.state.validComponents || [],\n      addChildMapping: this.addChildMapping,\n      valueMembers: this.getValueMembers(this.state.selectedFieldRecord),\n      validateDelete: this.validateDelete,\n      showFilter: this.state.showFilter,\n      showPropFilter: this.showPropFilter,\n      hidePropFilter: this.hidePropFilter,\n      addCondition: this.addCondition,\n      deleteCondition: this.deleteCondition,\n      addDateConstraints: this.addDateConstraints,\n      deleteDateCondition: this.deleteDateCondition,\n      showsynonym: this.state.showsynonym,\n      languages: this.props.Login.languageList || [],\n      addSynonym: () => this.setState({\n        showsynonym: !this.state.showsynonym\n      }),\n      userinfo: this.props.Login.userInfo,\n      staticfiltertables: this.props.Login.staticfiltertables,\n      staticfiltercolumn: this.state.staticfiltercolumn || [],\n      handlePageChange: this.handlePageChange,\n      userInfo: this.props.Login.userInfo,\n      BarcodeConfig: true,\n      selectedRecord: this.props.selectedRecord,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 41\n      }\n    }))))))));\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      openAlertModal,\n      design,\n      selectedRecord,\n      selectedFieldRecord,\n      selectedComponentpath,\n      components,\n      validComponents,\n      tableColumn,\n      filterColumns,\n      showConfirmAlert,\n      parentRadioValue,\n      showFilter\n    } = this.state;\n\n    if (this.props.Login.openPortal === false && previousProps.Login.openPortal) {\n      updateState = true;\n      openAlertModal = false;\n    }\n\n    if (this.props.Login.design !== previousProps.Login.design) {\n      updateState = true;\n      design = this.props.Login.design;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      updateState = true;\n    }\n\n    if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\n      selectedFieldRecord = this.props.Login.selectedFieldRecord;\n      updateState = true;\n    }\n\n    if (this.props.Login.showFilter !== previousProps.Login.showFilter) {\n      showFilter = this.props.Login.showFilter;\n      updateState = true;\n    }\n\n    if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\n      if (this.props.Login.selectedComponentpath && this.props.Login.selectedComponentpath !== previousProps.Login.selectedFieldRecord) {\n        selectedComponentpath = this.props.Login.selectedComponentpath;\n      }\n\n      selectedFieldRecord = this.props.Login.selectedFieldRecord;\n      components = this.props.Login.components;\n      validComponents = this.props.Login.validComponents;\n      tableColumn = this.props.Login.tableColumn;\n      filterColumns = this.props.Login.filterColumns;\n      updateState = true;\n    }\n\n    if (this.props.Login.parentRadioValue !== previousProps.Login.parentRadioValue) {\n      parentRadioValue = this.props.Login.parentRadioValue;\n      updateState = true;\n    }\n\n    if (updateState) {\n      this.setState({\n        openAlertModal,\n        design,\n        selectedRecord,\n        selectedFieldRecord,\n        tableColumn,\n        selectedComponentpath,\n        components,\n        validComponents,\n        showConfirmAlert,\n        filterColumns,\n        parentRadioValue,\n        showFilter\n      });\n    }\n  }\n\n  getIndexByLabel(design, label) {\n    let obj = {};\n    design.map((row, rowIndex) => row.children.map((column, columnIndex) => column.children.map((componnetrow, compRowIndex) => {\n      if (componnetrow.hasOwnProperty('children')) {\n        componnetrow.children.map((component, compIndex) => {\n          if (component.label === label) {\n            obj = {\n              object: component,\n              path: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}`\n            }; // break;\n          }\n\n          return null;\n        });\n      } else {\n        if (componnetrow.label === label) {\n          obj = {\n            object: componnetrow,\n            path: `${rowIndex}-${columnIndex}-${compRowIndex}-0`\n          }; // return obj;\n          // break;\n        }\n      }\n\n      return null;\n    })));\n    return obj;\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  updateStore,\n  crudMaster,\n  getTableColumns,\n  getForeignTableData,\n  getDynamicFilter,\n  getDynamicFilterExecuteData\n})(injectIntl(BarcodePreRegDesign));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/BarcodeTemplate/BarcodePreRegDesign.jsx"],"names":["React","Button","Col","Modal","Row","FontAwesomeIcon","faSave","FormattedMessage","injectIntl","TouchBackend","HTML5Backend","DndProvider","device","Dynamicinput","connect","updateStore","crudMaster","getTableColumns","getForeignTableData","getDynamicFilter","getDynamicFilterExecuteData","condition","DEFAULT_RETURN","validateCreateView","getChildComponentForeignKey","getcomponentdata","getValidComponent","replaceChildFromChildren","ReactComponents","ConfirmMessage","toast","mapStateToProps","state","Login","BarcodePreRegDesign","Component","constructor","props","validateDynamicDesign","valid","validateTemplate","design","data","map","row","children","column","component","hasOwnProperty","componentrow","inputtype","push","selectedRecord","ncontrolcode","item","data1","getMappingCheck","columnInfo","length","inputData","userInfo","operation","jsonString","JSON","stringify","jsondata","valuemember","saveScreenFilter","warn","showPropFilter","selectedFieldRecord","label","table","filterfields","inputparam","userinfo","type","selectedComponentpath","info","intl","formatMessage","id","updateInfo","typeName","showFilter","hidePropFilter","setLayout","splitDropZonePath","remove","removeChild","undefined","split","childRecord","toBeDeleted","deleteComponent","child","myChild","childPath","updatePath","components","getComponents","validComponents","setState","showConfirmAlert","rowIndex","columnIndex","componnetrow","compRowIndex","compIndex","newChild","childComp","obj","getIndexByLabel","path","newObj","object","parentPath","radioparentPath","validateDelete","showAlert","componentcode","COMBO","childValue","parentData","newChildData","filter","radioparent","confirmAlert","confirmMessage","confirm","bool","onclickcomponent","event","dateComponents","filterDataComponents","componentData","parentRadioValue","FRONTENDSEARCHFILTER","BACKENDSEARCHFILTER","source","nquerybuildertablecode","tableColumn","filterColumns","oldParentData","radioOptions","tags","value","text","componnet","compindex","nformcode","getValueMembers","valueColumn","numericColumns","x","foriegntablename","displayname","slanguagetypecode","tablecolumnname","foriegntablePK","onInputOnChange","name","chillabelUpdate","newLabel","oldLabel","target","splititemarray","newChildData1","checked","newdata","saveComponentProperties","val","checkAutoFocus","langArray","languageList","langDataObject","onComboChange","comboData","comboName","stablename","ismultilingual","validateChild","valueMemberOptions","isDynamicMapping","list","parse","jcolumnname","staticfiltercolumn","addCondition","filterColumnName","filterValue","conditionString","conditionArrayString","selectedStaticfiltertable","filtercolumn","columnname","EQUALS","jtablename","tablename","NOTEQUALS","STARTSWITH","ENDSWITH","INCLUDES","conditionArrayUI","conditionArraySQL","staticfiltervalue","filtervalue","staticfiltertable","nsystemconfiguration","join","CONTAINS","NOTCONTAINS","deleteCondition","index","splice","childLabelUpdate","oldLabelName","newLabelName","design1","updateLabelName","template","invalidComponent","duplicateComponents","insufficientMultilingualData","incompletePropertiesComponent","notcompleteProperties","labels","trim","includes","Object","keys","dataArray","formPrimaryKey","stableprimarykeyname","formJnumericColumn","jnumericcolumns","check","mycol","staicColumns","findIndex","parentforeignPK","foreigntableformcode","nflag","showsynonym","numericConditions","defaultMessage","stringConditions","dateConditions","LESSTHAN","LESSTHANOREQUALS","GREATERTHAN","GREATERTHANEQUALS","render","openPortal","closeModal","os","enableMouseEvents","ReactInputFields","onNumericInputChange","ReactTables","filterData","addChildMapping","addDateConstraints","deleteDateCondition","staticfiltertables","handlePageChange","componentDidUpdate","previousProps","updateState","openAlertModal"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport { Button, Col, Modal, Row } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { TouchBackend } from 'react-dnd-touch-backend'\r\nimport { HTML5Backend } from 'react-dnd-html5-backend'\r\nimport { DndProvider } from 'react-dnd'\r\nimport device from 'current-device';\r\nimport Dynamicinput from '../../components/droparea/Dynamicinputs';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    updateStore, crudMaster, getTableColumns,\r\n    getForeignTableData, getDynamicFilter, getDynamicFilterExecuteData,\r\n} from '../../actions/index'\r\nimport { condition } from '../../components/Enumeration';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { validateCreateView } from '../../components/CommonScript';\r\nimport { getChildComponentForeignKey, getcomponentdata, getValidComponent, replaceChildFromChildren } from '../../components/droparea/helpers';\r\nimport { ReactComponents } from '../../components/Enumeration';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { toast } from 'react-toastify';\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass BarcodePreRegDesign extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        this.state = {\r\n            nflag: 1,\r\n            design: this.props.Login.design,\r\n            selectedRecord: this.props.Login.selectedRecord || {},\r\n            selectedFieldRecord: {},\r\n            selectedComponentpath: \"\",\r\n            components: [],\r\n            filterColumns: [],\r\n            validComponents: [],\r\n            showConfirmAlert: false,\r\n            showsynonym: false,\r\n            toBeDeleted: {},\r\n            numericConditions: [\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"equal to(=)\" }), value: condition.EQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_NOTEQUALS\", defaultMessage: \"not equal to(!=)\" }), value: condition.NOTEQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_IN\", defaultMessage: \"In\" }), value: condition.CONTAINS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_NOTIN\", defaultMessage: \"Not In\" }), value: condition.NOTCONTAINS }\r\n            ],\r\n            stringConditions: [\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"equal to(=)\" }), value: condition.EQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_NOTEQUALS\", defaultMessage: \"not equal to(!=)\" }), value: condition.NOTEQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_STARTSWITH\", defaultMessage: \"Starts With\" }), value: condition.STARTSWITH },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_ENDSWITH\", defaultMessage: \"Ends With\" }), value: condition.ENDSWITH },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_CONTAINS\", defaultMessage: \"Contains\" }), value: condition.INCLUDES }\r\n            ],\r\n            dateConditions: [\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_LESSTHAN\", defaultMessage: \"Less Than (<)\" }), value: condition.LESSTHAN },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_LESSTHANOREQUALS\", defaultMessage: \"Less Than Or Equals(<=)\" }), value: condition.LESSTHANOREQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_GREATERTHAN\", defaultMessage: \"Greater Than(>)\" }), value: condition.GREATERTHAN },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_GREATERTHANOREQUALS\", defaultMessage: \"Greater Than Or Equals(>=)\" }), value: condition.GREATERTHANEQUALS }\r\n            ]\r\n\r\n\r\n        }\r\n    }\r\n\r\n    validateDynamicDesign = () => {\r\n        let valid = this.validateTemplate(this.state.design);\r\n        if (!valid) {\r\n            return null;\r\n        }\r\n        else {\r\n            const data = []\r\n            this.state.design.map(row => {\r\n                row.children.map(column => {\r\n                    column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    data.push(componentrow);\r\n                                }\r\n                            })\r\n                        } else {\r\n                            if (component.inputtype === \"combo\") {\r\n                                data.push(component);\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n\r\n            if (this.props.selectedRecord && this.props.selectedRecord.ncontrolcode && this.props.selectedRecord.ncontrolcode.item) {\r\n                const data1 = this.getMappingCheck(this.props.selectedRecord.ncontrolcode.item, this.props.Login.columnInfo, data[data.length - 1]);\r\n\r\n                if (data1) {\r\n                    let inputData = [];\r\n                    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n                    if (this.props.Login.operation === \"update\") {\r\n                        inputData[\"registrationtemplate\"] = {\r\n                            jsonString: JSON.stringify(this.state.design),\r\n                            jsondata: this.state.design,\r\n                            valuemember: data[data.length - 1].valuemember\r\n                        }\r\n                    }\r\n                    else {\r\n                        //add               \r\n                        inputData[\"registrationtemplate\"] =\r\n                        {\r\n                            jsonString: JSON.stringify(this.state.design),\r\n                            jsondata: this.state.design,\r\n                            valuemember: data[data.length - 1].valuemember\r\n                        };\r\n                    }\r\n\r\n                    this.props.saveScreenFilter(inputData, \"openPortal\");\r\n                } else {\r\n                    toast.warn(\"last level is does not relationship with selected screen\")\r\n                }\r\n\r\n            } else {\r\n                toast.warn(\"Select Control\")\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Modal\r\n                    centered\r\n                    scrollable\r\n                    bsPrefix=\"model model_zindex\"\r\n                    show={this.props.Login.openPortal}\r\n                    onHide={this.props.closeModal}\r\n                    dialogClassName={`${this.state.nflag && this.state.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                    enforceFocus={false}\r\n                    aria-labelledby=\"example-custom-modal-styling-title\"\r\n                >\r\n                    <Modal.Header className=\"d-flex align-items-center\">\r\n                        <Modal.Title id=\"add\" className=\"header-primary flex-grow-1\">\r\n                            {`${this.props.Login.operation === \"update\"\r\n                                ? this.props.intl.formatMessage({ id: \"IDS_EDIT\" })\r\n                                : this.props.Login.operation === \"viewdesign\"\r\n                                    ? this.props.intl.formatMessage({ id: \"IDS_VIEW\" })\r\n                                    : this.props.intl.formatMessage({ id: \"IDS_ADD\" })} ${this.props.intl.formatMessage({ id: \"IDS_BARCODEFILTERDESIGN\" })}`\r\n                            }\r\n                        </Modal.Title>\r\n                        <>\r\n                            <Button className=\"btn-user btn-cancel\" variant=\"\" onClick={this.props.closeModal}>\r\n                                <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                            </Button>\r\n                            {this.props.Login.operation !== \"viewdesign\" ?\r\n                                <Button className=\" btn-user btn-primary-blue\"\r\n                                    //onClick={() => this.setState({ openAlertModal: true, templateName: \"\" })}\r\n                                    onClick={this.validateDynamicDesign}\r\n                                >\r\n                                    <FontAwesomeIcon icon={faSave} /> { }\r\n                                    <FormattedMessage id={\"IDS_SAVE\"} defaultMessage={\"Save\"} />\r\n                                </Button> : \"\"}\r\n                        </>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"modal-inner-content\">\r\n                            <Row>\r\n                                <Col md={12} className='p-0'>\r\n                                    <DndProvider backend={device.os !== 'android' ? HTML5Backend : TouchBackend} options={{ enableMouseEvents: true }} >\r\n                                        <Dynamicinput\r\n                                            layout={this.state.design}\r\n                                            reactInputFields={this.props.Login.ReactInputFields || {}}\r\n                                            setLayout={this.setLayout}\r\n                                            reactComponents={this.props.Login.ReactComponents || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onNumericInputChange={this.onNumericInputChange}\r\n                                            onComboChange={this.onComboChange}\r\n                                            selectedFieldRecord={this.state.selectedFieldRecord}\r\n                                            onclickcomponent={(event, data, path) => this.onclickcomponent(event, data, path)}\r\n                                            ReactTables={this.props.Login.ReactTables}\r\n                                            tableColumn={this.state.tableColumn}\r\n                                            filterColumns={this.state.filterColumns}\r\n                                            numericConditions={this.state.numericConditions}\r\n                                            stringConditions={this.state.stringConditions}\r\n                                            filterData={this.props.Login.filterData}\r\n                                            inputFields={this.state.validComponents || []}\r\n                                            addChildMapping={this.addChildMapping}\r\n                                            valueMembers={this.getValueMembers(this.state.selectedFieldRecord)}\r\n                                            validateDelete={this.validateDelete}\r\n                                            showFilter={this.state.showFilter}\r\n                                            showPropFilter={this.showPropFilter}\r\n                                            hidePropFilter={this.hidePropFilter}\r\n                                            addCondition={this.addCondition}\r\n                                            deleteCondition={this.deleteCondition}\r\n                                            addDateConstraints={this.addDateConstraints}\r\n                                            deleteDateCondition={this.deleteDateCondition}\r\n                                            showsynonym={this.state.showsynonym}\r\n                                            languages={this.props.Login.languageList || []}\r\n                                            addSynonym={() => this.setState({ showsynonym: !(this.state.showsynonym) })}\r\n                                            userinfo={this.props.Login.userInfo}\r\n                                            staticfiltertables={this.props.Login.staticfiltertables}\r\n                                            staticfiltercolumn={this.state.staticfiltercolumn || []}\r\n                                            handlePageChange={this.handlePageChange}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            BarcodeConfig={true}\r\n                                            selectedRecord={this.props.selectedRecord}\r\n                                        />\r\n                                    </DndProvider>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    </Modal.Body>\r\n                </Modal>\r\n\r\n            </>\r\n        );\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false;\r\n        let { openAlertModal, design, selectedRecord, selectedFieldRecord,\r\n            selectedComponentpath, components, validComponents, tableColumn, filterColumns,\r\n            showConfirmAlert, parentRadioValue, showFilter } = this.state\r\n\r\n        if (this.props.Login.openPortal === false && previousProps.Login.openPortal) {\r\n            updateState = true;\r\n            openAlertModal = false;\r\n        }\r\n        if (this.props.Login.design !== previousProps.Login.design) {\r\n            updateState = true;\r\n            design = this.props.Login.design;\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\r\n            selectedFieldRecord = this.props.Login.selectedFieldRecord;\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.showFilter !== previousProps.Login.showFilter) {\r\n            showFilter = this.props.Login.showFilter\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\r\n            if (this.props.Login.selectedComponentpath && this.props.Login.selectedComponentpath !== previousProps.Login.selectedFieldRecord) {\r\n                selectedComponentpath = this.props.Login.selectedComponentpath\r\n            }\r\n\r\n            selectedFieldRecord = this.props.Login.selectedFieldRecord\r\n            components = this.props.Login.components\r\n            validComponents = this.props.Login.validComponents\r\n            tableColumn = this.props.Login.tableColumn\r\n            filterColumns = this.props.Login.filterColumns\r\n            updateState = true;\r\n\r\n        }\r\n        if (this.props.Login.parentRadioValue !== previousProps.Login.parentRadioValue) {\r\n            parentRadioValue = this.props.Login.parentRadioValue\r\n            updateState = true;\r\n        }\r\n        if (updateState) {\r\n            this.setState({\r\n                openAlertModal, design, selectedRecord, selectedFieldRecord,\r\n                tableColumn, selectedComponentpath, components, validComponents,\r\n                showConfirmAlert, filterColumns, parentRadioValue, showFilter\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    showPropFilter = () => {\r\n        const selectedFieldRecord = this.state.selectedFieldRecord\r\n        if (selectedFieldRecord.inputtype === 'backendsearchfilter') {\r\n            if (selectedFieldRecord.label !== ''\r\n                && selectedFieldRecord.table && selectedFieldRecord.filterfields) {\r\n                const inputparam = {\r\n                    component: selectedFieldRecord\r\n                    , userinfo: this.props.Login.userInfo,\r\n                    type: 'design',\r\n                    selectedComponentpath: this.state.selectedComponentpath\r\n                }\r\n                this.props.getDynamicFilter(inputparam)\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTMANDATORYFIELDS\" }))\r\n            }\r\n\r\n        } else if (selectedFieldRecord.inputtype === 'frontendsearchfilter') {\r\n            if (selectedFieldRecord.label !== ''\r\n                && selectedFieldRecord.table && selectedFieldRecord.filterfields) {\r\n                const inputparam = {\r\n                    component: selectedFieldRecord\r\n                    , userinfo: this.props.Login.userInfo,\r\n                    type: 'design',\r\n                    selectedComponentpath: this.state.selectedComponentpath\r\n                }\r\n                this.props.getDynamicFilter(inputparam)\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTMANDATORYFIELDS\" }))\r\n            }\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    showFilter: !this.state.showFilter\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            //  this.setState({ showFilter: !this.state.showFilter })\r\n        }\r\n\r\n    }\r\n    hidePropFilter = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                showFilter: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        //  this.setState({ showFilter: !this.state.showFilter })\r\n    }\r\n    setLayout = (design, splitDropZonePath, remove, removeChild) => {\r\n        let selectedFieldRecord = {}\r\n        if (remove === undefined) {\r\n            selectedFieldRecord = getcomponentdata(design, splitDropZonePath.split(\"-\"))\r\n        }\r\n        else if (removeChild) {\r\n            let childRecord = {}\r\n            this.state.toBeDeleted.deleteComponent.child.map(myChild => {\r\n                childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\r\n                childRecord['childValue'] = undefined;\r\n                childRecord['parentPath'] = undefined;\r\n                childRecord['valuecolumn'] = undefined;\r\n\r\n                design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord)\r\n                return null;\r\n            })\r\n        }\r\n        design = this.updatePath(design)\r\n        const components = this.getComponents(design).components;\r\n        let validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo)\r\n        this.setState({ showConfirmAlert: false, toBeDeleted: {}, design, selectedFieldRecord: selectedFieldRecord, components, validComponents, selectedComponentpath: splitDropZonePath.split(\"-\").length > 1 ? splitDropZonePath : '0-0-' + splitDropZonePath })\r\n    }\r\n    updatePath = (design) => {\r\n        design.map((row, rowIndex) =>\r\n            row.children.map((column, columnIndex) =>\r\n                column.children.map((componnetrow, compRowIndex) => {\r\n                    if (componnetrow.hasOwnProperty('children')) {\r\n                        componnetrow.children.map((component, compIndex) => {\r\n                            if (component.inputtype !== 'radio') {\r\n                                if (component.child) {\r\n                                    let newChild = [];\r\n                                    component.child.map(childComp => {\r\n                                        const obj = this.getIndexByLabel(design, childComp.label);\r\n                                        newChild.push({ ...childComp, childPath: obj.path });\r\n                                        const newObj = { ...obj.object, parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}` };\r\n                                        design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\r\n                                    })\r\n                                    component = { ...component, child: newChild }\r\n                                    design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\r\n                                }\r\n                            } else {\r\n                                if (component.child) {\r\n                                    let newChild = [];\r\n                                    component.child.map(childComp => {\r\n                                        const obj = this.getIndexByLabel(design, childComp.label);\r\n                                        newChild.push({ ...childComp, childPath: obj.path });\r\n                                        const newObj = { ...obj.object, radioparentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}` };\r\n                                        design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\r\n                                    })\r\n                                    component = { ...component, child: newChild }\r\n                                    design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\r\n                                }\r\n                            }\r\n\r\n                        })\r\n                    } else {\r\n                        if (componnetrow.inputtype !== 'radio') {\r\n                            if (componnetrow.child) {\r\n                                let newChild = [];\r\n                                componnetrow.child.map(childComp => {\r\n                                    const obj = this.getIndexByLabel(design, childComp.label);\r\n                                    newChild.push({ ...childComp, childPath: obj.path });\r\n                                    const newObj = { ...obj.object, parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-0` };\r\n                                    design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\r\n                                })\r\n                                componnetrow = { ...componnetrow, child: newChild }\r\n                                design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\r\n                            }\r\n                        } else {\r\n                            if (componnetrow.child) {\r\n                                let newChild = [];\r\n                                componnetrow.child.map(childComp => {\r\n                                    const obj = this.getIndexByLabel(design, childComp.label);\r\n                                    newChild.push({ ...childComp, childPath: obj.path });\r\n                                    const newObj = { ...obj.object, radioparentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-0` };\r\n                                    design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\r\n                                })\r\n                                componnetrow = { ...componnetrow, child: newChild }\r\n                                design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n            )\r\n        )\r\n        return design;\r\n    }\r\n    getIndexByLabel(design, label) {\r\n        let obj = {};\r\n        design.map((row, rowIndex) =>\r\n            row.children.map((column, columnIndex) =>\r\n                column.children.map((componnetrow, compRowIndex) => {\r\n                    if (componnetrow.hasOwnProperty('children')) {\r\n                        componnetrow.children.map((component, compIndex) => {\r\n                            if (component.label === label) {\r\n                                obj = {\r\n                                    object: component,\r\n                                    path: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}`\r\n                                }\r\n                                // break;\r\n                            }\r\n\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        if (componnetrow.label === label) {\r\n                            obj = {\r\n                                object: componnetrow,\r\n                                path: `${rowIndex}-${columnIndex}-${compRowIndex}-0`\r\n                            }\r\n                            // return obj;\r\n                            // break;\r\n                        }\r\n                    }\r\n                    return null;\r\n                })\r\n            )\r\n        )\r\n        return obj;\r\n    }\r\n    validateDelete = (design, splitDropZonePath) => {\r\n        const path = splitDropZonePath.split(\"-\")\r\n        let showAlert = false;\r\n        let toBeDeleted = {};\r\n        let component = getcomponentdata(this.state.design, path)\r\n        if (component.child && component.child.length > 0) {\r\n\r\n            let childRecord = {}\r\n            if (component.inputtype === 'radio') {\r\n                component.child.map(myChild => {\r\n                    childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\r\n                    delete childRecord[\"radioparentLabel\"]\r\n                    delete childRecord[\"selectedrecordbasedhide\"]\r\n                    delete childRecord[\"recordbasedhide\"]\r\n                    delete childRecord[\"radioparent\"]\r\n                    delete childRecord[\"radioparentPath\"]\r\n                    delete childRecord[\"recordbasedshowhide\"]\r\n                    delete childRecord[\"recordbasedreadonly\"]\r\n\r\n\r\n                    design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord)\r\n                    return null;\r\n                })\r\n            } else {\r\n                component.child.map(myChild => {\r\n                    childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\r\n                    childRecord['childValue'] = undefined;\r\n                    childRecord['parentPath'] = undefined;\r\n                    childRecord['valuecolumn'] = undefined;\r\n                    if (myChild.componentcode !== ReactComponents.COMBO) {\r\n                        childRecord['column'] = undefined;\r\n                    }\r\n                    design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord)\r\n                    return null;\r\n                })\r\n            }\r\n\r\n            showAlert = true;\r\n            toBeDeleted = { design, splitDropZonePath, deleteComponent: component }\r\n        }\r\n        if (component.childValue) {\r\n            let parentData = getcomponentdata(this.state.design, component.parentPath.split(\"-\"));\r\n            let newChildData = parentData.child.filter(child => child.label !== component.label)\r\n            parentData = { ...parentData, child: newChildData };\r\n            design = replaceChildFromChildren(design, component.parentPath.split(\"-\"), parentData)\r\n            toBeDeleted = { design, splitDropZonePath, deleteComponent: component }\r\n\r\n        }\r\n\r\n        if (component.radioparent) {\r\n            let parentData = getcomponentdata(this.state.design, component.radioparentPath.split(\"-\"));\r\n            let newChildData = parentData.child.filter(child => child.label !== component.label)\r\n            parentData = { ...parentData, child: newChildData };\r\n            design = replaceChildFromChildren(design, component.radioparentPath.split(\"-\"), parentData)\r\n            toBeDeleted = { design, splitDropZonePath, deleteComponent: component }\r\n\r\n        }\r\n        if (showAlert) {\r\n            this.showAlert(true, toBeDeleted);\r\n        }\r\n        else {\r\n            this.setLayout(design, splitDropZonePath, true)\r\n        }\r\n    }\r\n    confirmAlert = () => {\r\n        this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_PARENTCOMPONENTCANNOTBEDELETED\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.setLayout(this.state.toBeDeleted.design, this.state.toBeDeleted.splitDropZonePath, true, true),\r\n            undefined,\r\n            () => this.showAlert(false));\r\n    }\r\n    showAlert = (bool, toBeDeleted) => {\r\n\r\n        this.setState({ showConfirmAlert: bool, toBeDeleted })\r\n    }\r\n    onclickcomponent = (event, data, path) => {\r\n        const selectedFieldRecord = { ...data }\r\n        const obj = this.getComponents(this.state.design);\r\n        //console.log(\"obj:\", obj);\r\n        const components = obj.components;\r\n\r\n        let dateComponents = obj.dateComponents;\r\n        if (data.inputtype === \"date\") {\r\n            const filterDataComponents = dateComponents.filter(item => item.label !== data.label);\r\n            dateComponents = filterDataComponents;\r\n        }\r\n\r\n        let componentData = { components, selectedComponentpath: path }\r\n        let parentRadioValue = []\r\n\r\n        if ((selectedFieldRecord.componentcode === ReactComponents.COMBO ||\r\n            selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER ||\r\n            selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) &&\r\n            selectedFieldRecord.source !== undefined &&\r\n            (this.props.Login.columnInfo === undefined ||\r\n                this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode] === undefined)) {\r\n            this.props.getTableColumns(this.state.design, selectedFieldRecord,\r\n                selectedFieldRecord.nquerybuildertablecode, this.props.Login.userInfo,\r\n                \"\", this.props.Login.columnInfo, componentData, undefined, false)\r\n        } else {\r\n            const validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo)\r\n            let tableColumn = selectedFieldRecord.nquerybuildertablecode ? this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].tableColumn : [];\r\n            let filterColumns = selectedFieldRecord.nquerybuildertablecode ? this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].filterColumns : [];\r\n            if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER ||\r\n                selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                if (selectedFieldRecord.radioparentPath) {\r\n                    let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"))\r\n                    if (oldParentData.hasOwnProperty('child')) {\r\n                        oldParentData.child.map(item => {\r\n                            if (item.label === selectedFieldRecord.label) {\r\n                                parentRadioValue = oldParentData.radioOptions.tags.map(item => {\r\n                                    return { value: item.id, label: item.text, item }\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            } else {\r\n                if (selectedFieldRecord.radioparentPath) {\r\n                    if (selectedFieldRecord.radioparentPath) {\r\n                        let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"))\r\n                        if (oldParentData.hasOwnProperty('child')) {\r\n                            oldParentData.child.map(item => {\r\n                                if (item.label === selectedFieldRecord.label) {\r\n                                    parentRadioValue = oldParentData.radioOptions.tags.map(item => {\r\n                                        return { value: item.id, label: item.text, item }\r\n                                    })\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (selectedFieldRecord.componentcode !== ReactComponents.COMBO &&\r\n                selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER &&\r\n                selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\r\n                if (this.props.Login.columnInfo && selectedFieldRecord.childValue\r\n                    && this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode]) {\r\n                    tableColumn = this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].tableColumn;\r\n                    filterColumns = this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].filterColumns;\r\n                    this.setState({\r\n                        selectedComponentpath: path,\r\n                        selectedFieldRecord: selectedFieldRecord,\r\n                        components,\r\n                        tableColumn,\r\n                        filterColumns,\r\n                        validComponents,\r\n                        parentRadioValue,\r\n                        showFilter: false\r\n\r\n\r\n                    })\r\n                } else {\r\n                    if (selectedFieldRecord.childValue) {\r\n                        this.props.getTableColumns(this.state.design, selectedFieldRecord,\r\n                            selectedFieldRecord.childValue.nquerybuildertablecode, this.props.Login.userInfo,\r\n                            \"\", this.props.Login.columnInfo, componentData, undefined, false);\r\n                    } else {\r\n                        this.setState({\r\n                            selectedComponentpath: path,\r\n                            selectedFieldRecord: selectedFieldRecord,\r\n                            components,\r\n                            tableColumn,\r\n                            filterColumns,\r\n                            dateComponents,\r\n                            validComponents,\r\n                            parentRadioValue,\r\n                            showFilter: false\r\n                        })\r\n                    }\r\n                }\r\n            } else {\r\n                this.setState({\r\n                    selectedComponentpath: path,\r\n                    selectedFieldRecord: selectedFieldRecord,\r\n                    components,\r\n                    tableColumn,\r\n                    filterColumns,\r\n                    dateComponents,\r\n                    validComponents,\r\n                    parentRadioValue,\r\n                    showFilter: false\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n    getComponents = (design) => {\r\n        let components = [];\r\n        let dateComponents = [{ label: \"Current Date\", value: \"utccurrentdate\" }];\r\n        design.map((row, rowIndex) => {\r\n            row.children.map((column, columnIndex) => {\r\n                column.children.map((componnet, compindex) => {\r\n                    if (componnet.hasOwnProperty(\"children\")) {\r\n                        componnet.children.map((componnetrow, compRowIndex) => {\r\n                            componnetrow.inputtype === 'date' && componnetrow.label && dateComponents.push({ label: componnetrow.label, value: componnetrow.label })\r\n                            componnetrow.label && components.push({\r\n                                label: componnetrow.label,\r\n                                value: componnetrow.label,\r\n                                nformcode: componnetrow.nformcode,\r\n                                // item: componnetrow,\r\n                                inputtype: componnetrow.inputtype,\r\n                                source: componnetrow.source,\r\n                                nquerybuildertablecode: componnetrow.nquerybuildertablecode,\r\n                                child: componnetrow.child,\r\n                                valuemember: componnetrow.valuemember,\r\n                                path: `${rowIndex}-${columnIndex}-${compindex}-${compRowIndex}`\r\n                            })\r\n                        })\r\n                    } else {\r\n                        componnet.inputtype === 'date' && componnet.label && dateComponents.push({ label: componnet.label, value: componnet.label })\r\n                        componnet.label && components.push({\r\n                            label: componnet.label,\r\n                            value: componnet.label,\r\n                            nformcode: componnet.nformcode,\r\n                            // item: componnet,\r\n                            inputtype: componnet.inputtype,\r\n                            source: componnet.source,\r\n                            nquerybuildertablecode: componnet.nquerybuildertablecode,\r\n                            child: componnet.child,\r\n                            valuemember: componnet.valuemember,\r\n                            path: `${rowIndex}-${columnIndex}-${compindex}-0`\r\n                        })\r\n                    }\r\n                })\r\n                return null;\r\n            })\r\n            return null;\r\n        })\r\n        return { components, dateComponents };\r\n    }\r\n    getValueMembers = (selectedFieldRecord) => {\r\n        if (selectedFieldRecord.childValue) {\r\n            let valueColumn = [];\r\n            this.props.Login.columnInfo &&\r\n                this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode] &&\r\n                this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].numericColumns.map(x => {\r\n                    if (x.foriegntablename === selectedFieldRecord.childValue.source)\r\n                        valueColumn.push(\r\n                            {\r\n                                label: x.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                value: x.tablecolumnname,\r\n                                item: { foriegntablePK: x.foriegntablePK }\r\n                            }\r\n                        )\r\n                    return null;\r\n                })\r\n            if (valueColumn.length) {\r\n\r\n                return valueColumn;\r\n\r\n            } else {\r\n                this.props.Login.columnInfo &&\r\n                    this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode] &&\r\n                    this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].numericColumns.map(x => {\r\n                        if (x.foriegntablename === selectedFieldRecord.source)\r\n                            valueColumn.push(\r\n                                {\r\n                                    label: x.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                    value: x.tablecolumnname,\r\n                                    item: { foriegntablePK: x.foriegntablePK }\r\n                                }\r\n                            )\r\n                        return null;\r\n                    })\r\n                return valueColumn;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    onInputOnChange = (event, name) => {\r\n        const selectedFieldRecord = this.state.selectedFieldRecord || {};\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let chillabelUpdate = false;\r\n        let newLabel = \"\"\r\n        let oldLabel = \"\"\r\n        if (event.target.type === 'checkbox') {\r\n            if (name === \"recordbasedreadonly\" || name === \"recordbasedshowhide\") {\r\n                let design = this.state.design\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                if (selectedFieldRecord[\"recordbasedshowhide\"] || selectedFieldRecord[\"recordbasedreadonly\"]) {\r\n                    // let design = this.state.design\r\n                    if (selectedFieldRecord.radioparentPath) {\r\n                        let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"));\r\n                        if (oldParentData.child) {\r\n                            let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\r\n                            oldParentData = { ...oldParentData, child: newChildData1 };\r\n                            design = replaceChildFromChildren(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"), oldParentData)\r\n                        }\r\n                        delete selectedFieldRecord[\"radioparentLabel\"]\r\n                        delete selectedFieldRecord[\"selectedrecordbasedhide\"]\r\n                        delete selectedFieldRecord[\"recordbasedhide\"]\r\n                        delete selectedFieldRecord[\"radioparent\"]\r\n                    }\r\n                    selectedFieldRecord[name === \"recordbasedreadonly\" ? \"recordbasedshowhide\" : \"recordbasedreadonly\"] = false;\r\n                }\r\n                selectedFieldRecord[event.target.name] = event.target.checked;\r\n                const newdata = { ...selectedFieldRecord }\r\n                design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord })\r\n            } else if (event.target.name === \"loadselecteddate\" || event.target.name === \"loadcurrentdate\") {\r\n\r\n                if (event.target.name === \"loadselecteddate\" && selectedFieldRecord['loadcurrentdate']) {\r\n                    selectedFieldRecord['loadcurrentdate'] = false\r\n                } else if (event.target.name === \"loadcurrentdate\" && selectedFieldRecord['loadselecteddate']) {\r\n                    selectedFieldRecord['loadselecteddate'] = false\r\n                }\r\n                selectedFieldRecord[event.target.name] = event.target.checked;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            } else if (event.target.name === \"unique\") {\r\n                selectedFieldRecord[event.target.name] = event.target.checked;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }\r\n            else if (event.target.name === 'isAddMaster' || event.target.name === 'isView' || event.target.name === 'isEditMaster') {\r\n                selectedFieldRecord[event.target.name] = event.target.checked;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }\r\n            else if (event.target.name === 'autoFocus') {\r\n\r\n                if (event.target.checked === true) {\r\n                    const val = this.checkAutoFocus();\r\n                    if (val === '') {\r\n                        selectedFieldRecord[event.target.name] = event.target.checked;\r\n                        this.saveComponentProperties(selectedFieldRecord)\r\n                    } else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYFOCUSAPPLIEDON\" }) + ' ' + val)\r\n                    }\r\n                } else {\r\n                    selectedFieldRecord[event.target.name] = event.target.checked;\r\n                    this.saveComponentProperties(selectedFieldRecord)\r\n                }\r\n            } else if (event.target.name === 'isalphabetcaptial') {\r\n                selectedFieldRecord['isalphabetcaptial'] = event.target.checked ? true : false\r\n                selectedFieldRecord['isalphabetsmall'] = false\r\n                selectedFieldRecord['isalphabetspl'] = false\r\n                selectedFieldRecord['isalphanumeric'] = false\r\n                selectedFieldRecord['isnumeric'] = false\r\n                selectedFieldRecord['isnumericspl'] = false\r\n                selectedFieldRecord['ncustomization'] = false;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            } else if (event.target.name === 'isnumeric') {\r\n                selectedFieldRecord['isnumeric'] = event.target.checked ? true : false\r\n                selectedFieldRecord['isalphabetspl'] = false\r\n                selectedFieldRecord['isalphanumeric'] = false\r\n                selectedFieldRecord['isalphabetcaptial'] = false\r\n                selectedFieldRecord['isalphabetsmall'] = false\r\n                selectedFieldRecord['isnumericspl'] = false\r\n                selectedFieldRecord['ncustomization'] = false;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            } else if (event.target.name === 'isalphanumeric') {\r\n                selectedFieldRecord['isalphanumeric'] = event.target.checked ? true : false\r\n                selectedFieldRecord['isalphabetsmall'] = false\r\n                selectedFieldRecord['isalphabetspl'] = false\r\n                selectedFieldRecord['isalphabetcaptial'] = false\r\n                selectedFieldRecord['isnumeric'] = false\r\n                selectedFieldRecord['isnumericspl'] = false\r\n                delete (selectedFieldRecord['ncasesensitive']);\r\n                delete (selectedFieldRecord['ncaptialletters']);\r\n                delete (selectedFieldRecord['nsmallletters']);\r\n                delete (selectedFieldRecord['nmaxletters']);\r\n                delete (selectedFieldRecord['nmaxnumeric']);\r\n                selectedFieldRecord['ncustomization'] = false;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }\r\n            else if (event.target.name === 'isnumericspl') {\r\n                selectedFieldRecord['isnumericspl'] = event.target.checked ? true : false\r\n                selectedFieldRecord['isalphabetsmall'] = false\r\n                selectedFieldRecord['isalphabetspl'] = false\r\n                selectedFieldRecord['isalphanumeric'] = false\r\n                selectedFieldRecord['isnumeric'] = false\r\n                selectedFieldRecord['isalphabetcaptial'] = false\r\n                selectedFieldRecord['ncustomization'] = false;\r\n                delete (selectedFieldRecord['nmaxnumeric']);\r\n                delete (selectedFieldRecord['nsplchar']);\r\n                delete (selectedFieldRecord['naviodsplchar']);\r\n                delete (selectedFieldRecord['nsplchar']);\r\n                delete (selectedFieldRecord['nsplcharnotallow']);\r\n                delete (selectedFieldRecord['ncasesensitive']);\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }\r\n            else if (event.target.name === 'isalphabetsmall') {\r\n                selectedFieldRecord['isalphabetsmall'] = event.target.checked ? true : false\r\n                selectedFieldRecord['isalphanumeric'] = false\r\n                selectedFieldRecord['isalphabetspl'] = false\r\n                selectedFieldRecord['isalphabetcaptial'] = false\r\n                selectedFieldRecord['isnumeric'] = false\r\n                selectedFieldRecord['isnumericspl'] = false\r\n                selectedFieldRecord['ncustomization'] = false;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }\r\n            else if (event.target.name === 'isalphabetspl') {\r\n                selectedFieldRecord['isalphabetspl'] = event.target.checked ? true : false\r\n                selectedFieldRecord['isalphabetsmall'] = false\r\n                selectedFieldRecord['isalphanumeric'] = false\r\n                selectedFieldRecord['isalphabetcaptial'] = false\r\n                selectedFieldRecord['isnumeric'] = false\r\n                selectedFieldRecord['isnumericspl'] = false\r\n                delete (selectedFieldRecord['ncasesensitive']);\r\n                delete (selectedFieldRecord['ncaptialletters']);\r\n                delete (selectedFieldRecord['nsmallletters']);\r\n                delete (selectedFieldRecord['nmaxletters']);\r\n                delete (selectedFieldRecord['nmaxnumeric']);\r\n                delete (selectedFieldRecord['naviodsplchar']);\r\n                delete (selectedFieldRecord['nsplchar']);\r\n                delete (selectedFieldRecord['nsplcharnotallow']);\r\n                selectedFieldRecord['ncustomization'] = false;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            } else if (event.target.name === 'ncustomization' && event.target.checked === false) {\r\n                selectedFieldRecord['ncustomization'] = event.target.checked ? true : false\r\n                delete (selectedFieldRecord['nmaxletters']);\r\n                delete (selectedFieldRecord['nmaxnumeric']);\r\n                delete (selectedFieldRecord['nsplchar']);\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }\r\n            else if (event.target.name === 'naviodsplchar' && event.target.checked === false) {\r\n                selectedFieldRecord['naviodsplchar'] = event.target.checked ? true : false\r\n                delete (selectedFieldRecord['nsplcharnotallow']);\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            } else if (event.target.name === 'ncasesensitive') {\r\n                selectedFieldRecord['ncasesensitive'] = event.target.checked ? true : false\r\n                delete (selectedFieldRecord['nsmallletters']);\r\n                delete (selectedFieldRecord['ncaptialletters']);\r\n                delete (selectedFieldRecord['nmaxcapticalletters']);\r\n                delete (selectedFieldRecord['nmaxsmallletters']);\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            } else if (event.target.name === 'ncaptialletters') {\r\n                selectedFieldRecord['ncaptialletters'] = event.target.checked ? true : false\r\n                delete (selectedFieldRecord['nsmallletters']);\r\n                delete (selectedFieldRecord['ncasesensitive']);\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            } else if (event.target.name === 'nsmallletters') {\r\n                selectedFieldRecord['nsmallletters'] = event.target.checked ? true : false\r\n                delete (selectedFieldRecord['ncasesensitive']);\r\n                delete (selectedFieldRecord['ncaptialletters']);\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }\r\n            else {\r\n                if (event.target.name === 'timeonly') {\r\n                    selectedFieldRecord['dateonly'] = false;\r\n                }\r\n                if (event.target.name === 'dateonly') {\r\n                    selectedFieldRecord['timeonly'] = false;\r\n                }\r\n                if (event.target.name === 'mandatory') {\r\n                    if (event.target.checked === false) {\r\n                        if (selectedFieldRecord['unique']) {\r\n                            selectedFieldRecord['unique'] = false;\r\n                        }\r\n                    }\r\n                }\r\n                selectedFieldRecord[event.target.name] = event.target.checked;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }\r\n        }\r\n        else if (event.target.name === 'templatename') {\r\n            if (event.target.value !== \"\") {\r\n                event.target.value = validateCreateView(event.target.value);\r\n                selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else {\r\n            if (name === 'synonym') {\r\n\r\n                selectedFieldRecord['displayname'] = {\r\n                    ...selectedFieldRecord['displayname'],\r\n                    [event.target.name]: event.target.value\r\n\r\n                }\r\n            }\r\n            if (event.target.name === 'label') {\r\n                const langArray = this.props.Login.languageList;\r\n                const langDataObject = {};\r\n                langArray.map(item =>\r\n                    langDataObject[item.value] = event.target.value);\r\n\r\n                selectedFieldRecord['displayname'] = {\r\n                    ...selectedFieldRecord['displayname'],\r\n                    ...langDataObject\r\n\r\n                }\r\n                chillabelUpdate = true;\r\n                newLabel = event.target.value\r\n                oldLabel = selectedFieldRecord[event.target.name]\r\n                selectedFieldRecord[event.target.name] = event.target.value;\r\n            }\r\n            else {\r\n                selectedFieldRecord[event.target.name] = event.target.value;\r\n            }\r\n            this.saveComponentProperties(selectedFieldRecord, chillabelUpdate, oldLabel, newLabel)\r\n        }\r\n    }\r\n\r\n    onComboChange = (comboData, comboName) => {\r\n        let { selectedFieldRecord } = this.state;\r\n        if (selectedFieldRecord.label) {\r\n            if (comboName === 'table') {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord['source'] = comboData.item.stablename;\r\n                selectedFieldRecord['nformcode'] = comboData.item.nformcode\r\n\r\n                if (comboData.item.stablename === 'dynamicmaster') {\r\n                    selectedFieldRecord['conditionstring'] = ' and nformcode = ' + comboData.item.nformcode\r\n                }\r\n                selectedFieldRecord['nquerybuildertablecode'] = comboData.value;\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n\r\n                this.props.getTableColumns(design, selectedFieldRecord, comboData.value,\r\n                    this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo)\r\n\r\n\r\n            } else if (comboName === 'column') {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord['displaymember'] = comboData.value;\r\n                if (comboData.item.ismultilingual) {\r\n                    selectedFieldRecord['isMultiLingual'] = true;\r\n                }\r\n                if (comboData.item.stablename === 'dynamicmaster') {\r\n                    selectedFieldRecord['name'] = comboData.value\r\n                }\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord })\r\n            } else if (comboName === 'childValue') {\r\n                if (comboData) {\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                    let design = this.state.design\r\n                    if (selectedFieldRecord.parentPath) {\r\n                        let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n                        if (oldParentData.child) {\r\n                            let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\r\n                            oldParentData = { ...oldParentData, child: newChildData1 };\r\n                            design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), oldParentData)\r\n                        }\r\n\r\n                    }\r\n                    let parentData = getcomponentdata(design, comboData.path.split(\"-\"));\r\n                    selectedFieldRecord['childValue'] = comboData\r\n                    selectedFieldRecord['parentPath'] = comboData.path\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                        selectedFieldRecord['parentLabel'] = comboData.label\r\n                    }\r\n\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                    let newChildData = parentData.child || [];\r\n                    let validateChild = newChildData.filter(x => x.label === selectedFieldRecord.label)\r\n                    if (validateChild.length === 0) {\r\n                        let valueMemberOptions = this.getValueMembers(selectedFieldRecord);\r\n                        if (valueMemberOptions.length === 1) {\r\n\r\n                            const foriegntablePK = getChildComponentForeignKey(selectedFieldRecord, comboData, this.props.Login.columnInfo);\r\n                            newChildData.push({ label: selectedFieldRecord.label, foriegntablePK: foriegntablePK, tablecolumnname: valueMemberOptions[0].value, childPath: this.state.selectedComponentpath, isDynamicMapping: selectedFieldRecord.valuemember === \"ndynamicmastercode\" ? true : false })\r\n                        } else {\r\n                            newChildData.push({ label: selectedFieldRecord.label, childPath: this.state.selectedComponentpath })\r\n                        }\r\n\r\n                    }\r\n                    parentData = { ...parentData, child: newChildData };\r\n                    design = replaceChildFromChildren(design, comboData.path.split(\"-\"), parentData)\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\r\n                        this.setState({ design, selectedFieldRecord });\r\n                    } else if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                        let parentRadioValue = this.state.parentRadioValue || []\r\n                        parentRadioValue = parentData.radioOptions.tags.map(item => {\r\n                            return { value: item.id, label: item.text, item }\r\n                        })\r\n                        this.setState({ design, selectedFieldRecord, parentRadioValue });\r\n                    }\r\n                    else {\r\n                        this.props.getTableColumns(design, selectedFieldRecord,\r\n                            selectedFieldRecord.childValue.nquerybuildertablecode, this.props.Login.userInfo,\r\n                            splititemarray, this.props.Login.columnInfo,\r\n                            { components: this.state.components, selectedComponentpath: this.state.selectedComponentpath },\r\n                            true)\r\n                    }\r\n\r\n                } else {\r\n\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n\r\n                    let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n                    let newChildData = parentData.child.filter(child => child.label !== selectedFieldRecord.label)\r\n                    parentData = { ...parentData, child: newChildData };\r\n                    let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData)\r\n                    selectedFieldRecord['childValue'] = comboData\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO)\r\n                        selectedFieldRecord['column'] = comboData\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\r\n                        this.setState({ design, selectedFieldRecord });\r\n                    } else {\r\n                        this.setState({ design, selectedFieldRecord, tableColumn: [] })\r\n                    }\r\n                }\r\n\r\n            } else if (comboName === 'valuecolumn') {\r\n                selectedFieldRecord['valuecolumn'] = comboData;\r\n                let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n                let newChildData = []\r\n                parentData.child.map(child => {\r\n                    if (child.label === selectedFieldRecord.label) {\r\n                        newChildData.push({\r\n                            ...child, tablecolumnname: comboData.value, foriegntablePK: comboData.item.foriegntablePK, isDynamicMapping: selectedFieldRecord.valuemember === \"ndynamicmastercode\" ? true : false\r\n                        })\r\n                    } else {\r\n                        newChildData.push(child)\r\n                    }\r\n                    return null;\r\n                })\r\n                parentData = { ...parentData, child: newChildData };\r\n                let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData)\r\n                const newdata = { ...selectedFieldRecord }\r\n                design = replaceChildFromChildren(design, this.state.selectedComponentpath.split(\"-\"), newdata)\r\n                this.setState({ design, selectedFieldRecord });\r\n            }\r\n            else if (comboName === \"staticfiltertable\") {\r\n                if (comboData) {\r\n                    selectedFieldRecord[comboName] = comboData;\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                    const list = JSON.parse(comboData.item.jsondata.value).jcolumnname\r\n                    const staticfiltercolumn = list.map(x => {\r\n\r\n                        // x['displayname']= x['displayname'][this.props.Login.userInfo.slanguagetypecode]\r\n                        return { label: x['displayname'][this.props.Login.userInfo.slanguagetypecode], value: x['displayname'][this.props.Login.userInfo.slanguagetypecode], item: x };\r\n                    })\r\n\r\n                    this.setState({ design, selectedFieldRecord, staticfiltercolumn });\r\n                } else {\r\n                    selectedFieldRecord[comboName] = comboData;\r\n                    delete selectedFieldRecord['staticfiltercolumn']\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                    this.setState({ design, selectedFieldRecord, staticfiltercolumn: [] });\r\n                }\r\n            }\r\n            else {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord });\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERLABEL\" }))\r\n        }\r\n\r\n    }\r\n\r\n    addCondition = () => {\r\n        let { selectedFieldRecord } = this.state;\r\n        let filterColumnName;\r\n        let filterValue;\r\n        let conditionString;\r\n        let conditionArrayString;\r\n        let selectedStaticfiltertable = {}\r\n        if (selectedFieldRecord[\"filtercolumn\"] && selectedFieldRecord['condition']\r\n            && (selectedFieldRecord['staticfiltercolumn'] || selectedFieldRecord['staticfiltercolumn'])) {\r\n            selectedStaticfiltertable = JSON.parse(selectedFieldRecord[\"staticfiltertable\"].item.jsondata.value)\r\n            switch (selectedFieldRecord[\"filtercolumn\"].type) {\r\n                case 'static': {\r\n                    filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.columnname;\r\n                    filterValue = { label: selectedFieldRecord.staticfiltercolumn.label, value: selectedFieldRecord.staticfiltercolumn.item.columnname }\r\n\r\n                    break;\r\n                }\r\n                case 'dynamic': {\r\n                    filterColumnName = \" and jsondata->>'\" + selectedFieldRecord.filtercolumn.item.columnname + \"'\";\r\n                    filterValue = { label: selectedFieldRecord.staticfiltercolumn.label, value: selectedFieldRecord.selectedFieldRecord.staticfiltercolumn.item.columnname }\r\n                    break;\r\n                }\r\n                case 'numeric': {\r\n                    filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.tablecolumnname;\r\n                    filterValue = { label: selectedFieldRecord.staticfiltercolumn.label, value: selectedFieldRecord.staticfiltercolumn.item.columnname }\r\n\r\n                    break;\r\n                }\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            switch (selectedFieldRecord[\"condition\"].value) {\r\n                case condition.EQUALS:\r\n                    conditionString = filterColumnName + \" = P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label\r\n                    break;\r\n                case condition.NOTEQUALS:\r\n                    conditionString = filterColumnName + \" P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label\r\n                    break;\r\n                case condition.STARTSWITH:\r\n                    conditionString = filterColumnName + \" like 'P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P\" + \"%'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Starts With \" + filterValue.label\r\n                    break;\r\n                case condition.ENDSWITH:\r\n                    conditionString = filterColumnName + \" like '%P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \"Ends With \" + filterValue.label\r\n                    break;\r\n                case condition.INCLUDES:\r\n                    conditionString = filterColumnName + \" like '%P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P%'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Contains \" + filterValue.label\r\n                    break;\r\n                // case condition.CONTAINS:\r\n                //     conditionString = filterColumnName + \" in (\" + filterValue.map(x => x.value).join(',') + \" )\"\r\n                //     conditionArrayString = selectedFieldRecord.filtercolumn.label + \" in (\" + filterValue.map(x => x.label).join(',') + \" )\"\r\n                //     break;\r\n                // case condition.NOTCONTAINS:\r\n                //     conditionString = filterColumnName + \" not in (\" + filterValue.map(x => x.value).join(',') + \" )\"\r\n                //     conditionArrayString = selectedFieldRecord.filtercolumn.label + \" not in (\" + filterValue.map(x => x.label).join(',') + \" )\"\r\n                //     break;\r\n                default:\r\n                    break;\r\n            }\r\n            let conditionArrayUI = selectedFieldRecord.conditionArrayUI || [];\r\n            let conditionArraySQL = selectedFieldRecord.conditionArraySQL || [];\r\n            conditionArrayUI.push(conditionArrayString);\r\n            conditionArraySQL.push(conditionString);\r\n            selectedFieldRecord = {\r\n                ...selectedFieldRecord,\r\n                filtercolumn: \"\",\r\n                condition: \"\",\r\n                staticfiltervalue: undefined,\r\n                filtervalue: \"\",\r\n                staticfiltertable: \"\",\r\n                nsystemconfiguration: false,\r\n                conditionArrayUI,\r\n                conditionArraySQL,\r\n                staticfiltercolumn: \"\"\r\n            }\r\n\r\n            selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\r\n\r\n        }\r\n        else if (selectedFieldRecord[\"filtercolumn\"] && selectedFieldRecord['condition']\r\n            && (selectedFieldRecord['staticfiltervalue'] || selectedFieldRecord['filtervalue'])) {\r\n\r\n            switch (selectedFieldRecord[\"filtercolumn\"].type) {\r\n                case 'static': {\r\n                    filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.columnname;\r\n                    filterValue = { label: selectedFieldRecord.staticfiltervalue, value: selectedFieldRecord.staticfiltervalue }\r\n                    break;\r\n                }\r\n                case 'dynamic': {\r\n                    filterColumnName = \" and jsondata->>'\" + selectedFieldRecord.filtercolumn.item.columnname + \"'\";\r\n                    filterValue = { label: selectedFieldRecord.staticfiltervalue, value: selectedFieldRecord.staticfiltervalue }\r\n                    break;\r\n                }\r\n                case 'numeric': {\r\n                    filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.tablecolumnname;\r\n                    filterValue = selectedFieldRecord.filtervalue\r\n                    break;\r\n                }\r\n                default:\r\n                    break;\r\n            }\r\n            switch (selectedFieldRecord[\"condition\"].value) {\r\n                case condition.EQUALS:\r\n                    conditionString = filterColumnName + \" = '\" + filterValue.value + \"'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label\r\n                    break;\r\n                case condition.NOTEQUALS:\r\n                    conditionString = filterColumnName + \" != '\" + filterValue.value + \"'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label\r\n                    break;\r\n                case condition.STARTSWITH:\r\n                    conditionString = filterColumnName + \" like '\" + filterValue.value + \"%'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Starts With \" + filterValue.label\r\n                    break;\r\n                case condition.ENDSWITH:\r\n                    conditionString = filterColumnName + \" like '%\" + filterValue.value + \"'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \"Ends With \" + filterValue.label\r\n                    break;\r\n                case condition.INCLUDES:\r\n                    conditionString = filterColumnName + \" like '%\" + filterValue.value + \"%'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Contains \" + filterValue.label\r\n                    break;\r\n                case condition.CONTAINS:\r\n                    conditionString = filterColumnName + \" in (\" + filterValue.map(x => x.value).join(',') + \" )\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" in (\" + filterValue.map(x => x.label).join(',') + \" )\"\r\n                    break;\r\n                case condition.NOTCONTAINS:\r\n                    conditionString = filterColumnName + \" not in (\" + filterValue.map(x => x.value).join(',') + \" )\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" not in (\" + filterValue.map(x => x.label).join(',') + \" )\"\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            let conditionArrayUI = selectedFieldRecord.conditionArrayUI || [];\r\n            let conditionArraySQL = selectedFieldRecord.conditionArraySQL || [];\r\n            conditionArrayUI.push(conditionArrayString);\r\n            conditionArraySQL.push(conditionString);\r\n            selectedFieldRecord = {\r\n                ...selectedFieldRecord,\r\n                filtercolumn: \"\",\r\n                condition: \"\",\r\n                staticfiltervalue: undefined,\r\n                filtervalue: \"\",\r\n                conditionArrayUI,\r\n                conditionArraySQL,\r\n                nsystemconfiguration: false,\r\n                staticfiltercolumn: \"\"\r\n            }\r\n\r\n            selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\r\n        }\r\n        else {\r\n            return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALUES\" }))\r\n        }\r\n        const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n        const newdata = { ...selectedFieldRecord }\r\n        const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n        this.setState({ design, selectedFieldRecord, staticfiltercolumn: \"\" });\r\n    }\r\n    deleteCondition = (index) => {\r\n        let { selectedFieldRecord } = this.state;\r\n        let conditionArrayUI = selectedFieldRecord.conditionArrayUI;\r\n        let conditionArraySQL = selectedFieldRecord.conditionArraySQL;\r\n        conditionArrayUI.splice(index, 1);\r\n        conditionArraySQL.splice(index, 1);\r\n        selectedFieldRecord['conditionArrayUI'] = conditionArrayUI;\r\n        selectedFieldRecord['conditionArraySQL'] = conditionArraySQL;\r\n        selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\r\n        const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n        const newdata = { ...selectedFieldRecord }\r\n        const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n        this.setState({ design, selectedFieldRecord });\r\n    }\r\n\r\n\r\n    saveComponentProperties = (selectedFieldRecord, childLabelUpdate, oldLabelName, newLabelName) => {\r\n        const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n        // const selectedFieldRecord = this.state.selectedFieldRecord;\r\n        const newdata = { ...selectedFieldRecord }\r\n        let design1 = this.state.design\r\n        if (childLabelUpdate) {\r\n            design1 = this.updateLabelName(this.state.design, oldLabelName, newLabelName)\r\n        }\r\n        const design = replaceChildFromChildren(design1, splititemarray, newdata)\r\n        this.setState({ design, selectedFieldRecord })\r\n    }\r\n\r\n    updateLabelName = (design, oldLabelName, newLabelName) => {\r\n        design.map((row, rowIndex) =>\r\n            row.children.map((column, columnIndex) =>\r\n                column.children.map((componnetrow, compRowIndex) => {\r\n                    if (componnetrow.hasOwnProperty('children')) {\r\n                        componnetrow.children.map((component, compIndex) => {\r\n                            if (component.child) {\r\n                                let newChild = [];\r\n                                component.child.map(childComp => {\r\n                                    if (childComp.label === oldLabelName) {\r\n                                        newChild.push({ ...childComp, label: newLabelName });\r\n                                    } else {\r\n                                        newChild.push({ ...childComp });\r\n                                    }\r\n\r\n                                })\r\n                                component = { ...component, child: newChild }\r\n                                design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\r\n                            }\r\n\r\n\r\n                        })\r\n                    } else {\r\n                        if (componnetrow.child) {\r\n                            let newChild = [];\r\n                            componnetrow.child.map(childComp => {\r\n                                if (childComp.label === oldLabelName) {\r\n                                    newChild.push({ ...childComp, label: newLabelName });\r\n                                } else {\r\n                                    newChild.push({ ...childComp });\r\n                                }\r\n                            })\r\n                            componnetrow = { ...componnetrow, child: newChild }\r\n                            design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\r\n                        }\r\n\r\n                    }\r\n                })\r\n            )\r\n        )\r\n        return design;\r\n\r\n    }\r\n\r\n    validateTemplate = (template) => {\r\n\r\n        let invalidComponent = [];\r\n        let duplicateComponents = [];\r\n        let insufficientMultilingualData = [];\r\n        let incompletePropertiesComponent = [];\r\n        let notcompleteProperties = [];\r\n        let labels = [];\r\n        let length = 0;\r\n        template.map((row, rowIndex) => {\r\n            row.children.map((column, columnIndex) => {\r\n                column.children.map((componnet, compindex) => {\r\n                    if (componnet.hasOwnProperty(\"children\")) {\r\n                        componnet.children.map((componnetrow, compRowIndex) => {\r\n                            length = length + 1;\r\n                            if (!componnetrow.hasOwnProperty('label') || componnetrow.label.trim() === '') {\r\n                                invalidComponent.push(componnetrow)\r\n                            }\r\n                            if (labels.includes(componnetrow.label)) {\r\n                                duplicateComponents.push(componnetrow)\r\n                            } else {\r\n                                if (componnetrow.label !== undefined)\r\n                                    labels.push(componnetrow.label);\r\n                            }\r\n                            if (componnetrow.componentcode === ReactComponents.COMBO) {\r\n                                if ((!componnetrow.hasOwnProperty('source')) &&\r\n                                    (!componnetrow.hasOwnProperty('displaymember'))) {\r\n                                    incompletePropertiesComponent.push(componnetrow)\r\n                                }\r\n                            }\r\n\r\n                            if (!componnetrow.hasOwnProperty('displayname') || Object.keys(componnetrow.displayname).length < this.props.Login.languageList.length) {\r\n                                insufficientMultilingualData.push(componnetrow);\r\n                            }\r\n\r\n                        })\r\n                    } else {\r\n                        length = length + 1;\r\n                        if (!componnet.hasOwnProperty('label') || componnet.label.trim() === '') {\r\n                            invalidComponent.push(componnet)\r\n                        }\r\n                        if (labels.includes(componnet.label)) {\r\n                            duplicateComponents.push(componnet)\r\n                        } else {\r\n                            if (componnet.label !== undefined)\r\n                                labels.push(componnet.label);\r\n                        }\r\n                        if (componnet.componentcode === ReactComponents.COMBO) {\r\n                            if ((!componnet.hasOwnProperty('source')) &&\r\n                                (!componnet.hasOwnProperty('displaymember'))) {\r\n                                incompletePropertiesComponent.push(componnet)\r\n                            }\r\n                        }\r\n                        if (!componnet.hasOwnProperty('displayname') || Object.keys(componnet.displayname).length < this.props.Login.languageList.length) {\r\n                            insufficientMultilingualData.push(componnet);\r\n                        }\r\n                    }\r\n                })\r\n                return null;\r\n            })\r\n            return null;\r\n        })\r\n        if (length === 0) {\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_CREATETEMPLATE' }) );\r\n        }\r\n        if (duplicateComponents.length > 0) {\r\n            const dataArray = [];\r\n            duplicateComponents.map(item => dataArray.push(item.label));\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_DUPLICATECOMPONENTSFOUND' }) + dataArray.join(\",\"));\r\n            return false;\r\n        }\r\n        if (invalidComponent.length > 0) {\r\n            const dataArray = [];\r\n            invalidComponent.map(item => dataArray.push(item.label));\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_MISSINGCOMPONENTLABEL' }));\r\n            return false;\r\n        }\r\n        if (insufficientMultilingualData.length > 0) {\r\n            const dataArray = [];\r\n            insufficientMultilingualData.map(item => dataArray.push(item.label));\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_INSUFFICIENTMULTILINGUALDATA' }) + dataArray.join(\",\"));\r\n            return false;\r\n        }\r\n        if (incompletePropertiesComponent.length > 0) {\r\n            const dataArray = [];\r\n            incompletePropertiesComponent.map(item => dataArray.push(item.label));\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDCOMPONENT' }) + dataArray.join(\",\"));\r\n            return false;\r\n        }\r\n        if (notcompleteProperties.length > 0) {\r\n            const dataArray = [];\r\n            notcompleteProperties.map(item => dataArray.push(item.label));\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_MISSMATCHEDVALUES' }) + dataArray.join(\",\"));\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    getMappingCheck = (selectedRecord, columnInfo, component) => {\r\n\r\n        const formPrimaryKey = selectedRecord.stableprimarykeyname;\r\n        const formJnumericColumn = selectedRecord.jnumericcolumns;\r\n\r\n        const check = [];\r\n\r\n        if (columnInfo[component.nquerybuildertablecode].numericColumns.length) {\r\n            columnInfo[component.nquerybuildertablecode].numericColumns.map(mycol => {\r\n                if (mycol.foriegntablePK === 'ndynamicmastercode') {\r\n                    const index = columnInfo[component.nquerybuildertablecode].staicColumns.findIndex(x => x.columnname === mycol.parentforeignPK && component.nformcode === mycol.foreigntableformcode)\r\n                    if (index !== -1) {\r\n                        check.push(true)\r\n\r\n                    }\r\n                }\r\n                else if (mycol.foriegntablePK === formPrimaryKey) {\r\n                    check.push(true)\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n        if (formJnumericColumn.length) {\r\n            formJnumericColumn.map(mycol => {\r\n                if (mycol.foriegntablePK === 'ndynamicmastercode') {\r\n                    const index = columnInfo[component.nquerybuildertablecode].staicColumns.findIndex(x => x.columnname === mycol.parentforeignPK && component.nformcode === mycol.foreigntableformcode)\r\n                    if (index !== -1) {\r\n                        check.push(true)\r\n                    }\r\n                }\r\n                else if (mycol.foriegntablePK === component.valuemember) {\r\n                    check.push(true)\r\n                }\r\n            })\r\n\r\n\r\n        }\r\n\r\n        if(component.valuemember===formPrimaryKey){\r\n            check.push(true)\r\n        }\r\n\r\n    \r\n\r\n        return check.includes(true);\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    updateStore, crudMaster,\r\n    getTableColumns, getForeignTableData, getDynamicFilter, getDynamicFilterExecuteData\r\n})(injectIntl(BarcodePreRegDesign))"]},"metadata":{},"sourceType":"module"}