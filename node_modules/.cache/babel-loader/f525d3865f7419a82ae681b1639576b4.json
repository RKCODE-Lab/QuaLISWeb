{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\testmanagement\\\\AddCodedResult.jsx\";\nimport React from 'react';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component'; //import { Col, Row } from 'react-bootstrap';\n\nimport FormInput from '../../components/form-input/form-input.component';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { Row, Col, Nav } from 'react-bootstrap';\nimport DataGrid from '../../components/data-grid/data-grid.component';\n\nconst AddCodedResult = props => {\n  const {\n    needCodedResult,\n    needActualResult,\n    grade\n  } = props.parameterData;\n  const testMethodColumnList = [{\n    \"idsName\": \"IDS_SUBCODEDRESULT\",\n    \"dataField\": \"ssubcodedresult\",\n    \"width\": \"200px\"\n  }];\n  return /*#__PURE__*/React.createElement(Col, {\n    md: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"spredefinedname\",\n    label: props.intl.formatMessage({\n      id: \"IDS_CODEDRESULT\"\n    }),\n    type: \"text\",\n    required: !needCodedResult,\n    isMandatory: needCodedResult ? \"\" : \"*\",\n    isDisabled: needCodedResult,\n    value: props.selectedRecord && props.selectedRecord[\"spredefinedname\"] ? props.selectedRecord[\"spredefinedname\"] : \"\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_CODEDRESULT\"\n    }) //onChange = { (event) => props.onInputOnChange(event, 1) }\n    ,\n    onChange: event => props.onInputOnChange(event, 6),\n    maxLength: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_ACTUALRESULT\"\n    }),\n    isSearchable: true,\n    name: \"ngradecode\",\n    isDisabled: needActualResult,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: !needActualResult,\n    options: grade || [],\n    optionId: \"ngradecode\",\n    optionValue: \"sdisplaystatus\",\n    value: props.selectedRecord && props.selectedRecord[\"ngradecode\"] ? props.selectedRecord[\"ngradecode\"] : \"\",\n    onChange: value => props.onComboChange(value, \"ngradecode\", 1),\n    alphabeticalSort: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"spredefinedsynonym\",\n    label: props.intl.formatMessage({\n      id: \"IDS_CODEDRESULTSYNONYM\"\n    }),\n    type: \"text\",\n    required: !needCodedResult,\n    isMandatory: needCodedResult ? \"\" : \"*\",\n    isDisabled: needCodedResult,\n    value: props.selectedRecord && props.selectedRecord[\"spredefinedsynonym\"] ? props.selectedRecord[\"spredefinedsynonym\"] : \"\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_CODEDRESULTSYNONYM\"\n    }) //onChange = { (event) => props.onInputOnChange(event, 1) }\n    ,\n    onChange: event => props.onInputOnChange(event, 1),\n    maxLength: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }), props.userInfo.nformcode === 62 ? /*#__PURE__*/React.createElement(FormTextarea, {\n    name: \"spredefinedcomments\",\n    label: props.intl.formatMessage({\n      id: \"IDS_RESULTPARAMETERCOMMENTS\"\n    }),\n    IDS_CODEDRESULTSYNONYM: true,\n    onChange: event => props.onInputOnChange(event, 1),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_RESULTPARAMETERCOMMENTS\"\n    }),\n    value: props.selectedRecord && props.selectedRecord[\"spredefinedcomments\"] ? props.selectedRecord[\"spredefinedcomments\"] : \"\",\n    isDisabled: needActualResult,\n    rows: \"2\",\n    required: false,\n    maxLength: 255,\n    isMandatory: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 1\n    }\n  }) : \"\", props.userInfo.nformcode === 62 ? /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CustomSwitch, {\n    name: \"nneedresultentryalert\",\n    label: props.intl.formatMessage({\n      id: \"IDS_AlERTFORRESULTENTRY\"\n    }),\n    type: \"switch\",\n    onChange: event => props.onInputOnChange(event, 5, [3, 4]),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_AlERTFORRESULTENTRY\"\n    }),\n    defaultValue: props.selectedRecord[\"nneedresultentryalert\"] === 3 ? true : false,\n    checked: props.selectedRecord[\"nneedresultentryalert\"] === 3 ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CustomSwitch, {\n    name: \"nneedsubcodedresult\",\n    label: props.intl.formatMessage({\n      id: \"IDS_SUBCODERESULTNEED\"\n    }),\n    type: \"switch\",\n    onChange: event => props.onInputOnChange(event, 5, [3, 4]),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SUBCODERESULTNEED\"\n    }),\n    defaultValue: props.selectedRecord[\"nneedsubcodedresult\"] === 3 ? true : false,\n    checked: props.selectedRecord[\"nneedsubcodedresult\"] === 3 ? true : false,\n    disabled: props.selectedRecord[\"nneedresultentryalert\"] === 3 ? false : true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  })), props.selectedRecord[\"nneedresultentryalert\"] === 3 ? /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormTextarea, {\n    name: \"salertmessage\",\n    label: props.intl.formatMessage({\n      id: \"IDS_ALERTMESSAGE\"\n    }),\n    type: \"text\",\n    required: props.selectedRecord[\"nneedresultentryalert\"] === 3 ? false : true,\n    isMandatory: props.selectedRecord[\"nneedresultentryalert\"] === 3 ? \"*\" : \"\" //isDisabled={needCodedResult}\n    ,\n    value: props.selectedRecord && props.selectedRecord[\"salertmessage\"] ? props.selectedRecord[\"salertmessage\"] : \"\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_ALERTMESSAGE\"\n    }) //onChange = { (event) => props.onInputOnChange(event, 1) }\n    ,\n    onChange: event => props.onInputOnChange(event, 1),\n    maxLength: 255,\n    isDisabled: props.selectedRecord[\"nneedresultentryalert\"] === 3 ? false : true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  })) : \"\") : \"\", /*#__PURE__*/React.createElement(React.Fragment, null, props.userInfo.nformcode === 62 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex justify-content-end mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Nav.Item, {\n    className: \"add-txt-btn\",\n    name: \"addcodedresultname\",\n    hidden: props.selectedRecord[\"nneedsubcodedresult\"] === 4 ? true : false,\n    onClick: () => props.addSubCodedResult(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faPlus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 21\n    }\n  }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"IDS_SUBCODEDRESULT\",\n    defaultMessage: \"Sub Coded Result\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  }))) : \"\"), props.selectedRecord[\"nneedsubcodedresult\"] === 3 && props.userInfo.nformcode === 62 ?\n  /*#__PURE__*/\n  //  <Row noGutters={true}>\n  // <Col md=\"12\">\n  React.createElement(DataGrid, {\n    key: \"ssubcodedresult\",\n    primaryKeyField: \"ssubcodedresult\" // dataResult={[]}\n    ,\n    dataResult: props.selectedsubcodedresult || [] // dataResult={this.props.selectedWorklistHistory ||[]}\n    ,\n    dataState: {} // dataState={this.state.sectionDataState}\n    // dataStateChange={(event) => this.setState({ sectionDataState: event.dataState })}\n    ,\n    data: [],\n    extractedColumnList: testMethodColumnList,\n    controlMap: props.controlMap,\n    userRoleControlRights: props.userRoleControlRights,\n    pageable: false,\n    scrollable: 'scrollable',\n    gridHeight: '335px',\n    isActionRequired: true,\n    methodUrl: \"AuditTrail\",\n    hideColumnFilter: true,\n    actionIcons: [{\n      title: props.intl.formatMessage({\n        id: \"IDS_CODEDRESULT\"\n      }),\n      // title: this.props.intl.formatMessage({ id: \"IDS_PREVIOUSRESULTVIEW\" }),\n      controlname: \"faTrashAlt\",\n      objectName: \"ExceptionLogs\",\n      hidden: props.userRoleControlRights && props.userRoleControlRights.indexOf(props.controlMap.has(\"DeleteSubCodedResult\") && props.controlMap.get(\"DeleteSubCodedResult\").ncontrolcode) === -1,\n      onClick: (item, key, nn) => props.deleteSubCodedResult(item, key, nn) //onClick: (subCodedResult) => props.deleteSubCodedResult(subCodedResult)\n\n    }] //userRoleControlRights={this.props.userRoleControlRights}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 17\n    }\n  }) // </Col>\n  // </Row>\n  : \"\");\n};\n\nexport default injectIntl(AddCodedResult);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/testmanagement/AddCodedResult.jsx"],"names":["React","FormSelectSearch","FormInput","injectIntl","FormattedMessage","FormTextarea","CustomSwitch","FontAwesomeIcon","faPlus","Row","Col","Nav","DataGrid","AddCodedResult","props","needCodedResult","needActualResult","grade","parameterData","testMethodColumnList","intl","formatMessage","id","selectedRecord","event","onInputOnChange","value","onComboChange","userInfo","nformcode","addSubCodedResult","selectedsubcodedresult","controlMap","userRoleControlRights","title","controlname","objectName","hidden","indexOf","has","get","ncontrolcode","onClick","item","key","nn","deleteSubCodedResult"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,kEAA7B,C,CACA;;AACA,OAAOC,SAAP,MAAsB,kDAAtB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,YAA7C;AACA,OAAOC,YAAP,MAAyB,wDAAzB;AACA,OAAOC,YAAP,MAAyB,wDAAzB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,MAAT,QAAsB,mCAAtB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,GAAnB,QAA8B,iBAA9B;AACA,OAAOC,QAAP,MAAqB,gDAArB;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAC9B,QAAM;AAAEC,IAAAA,eAAF;AAAmBC,IAAAA,gBAAnB;AAAqCC,IAAAA;AAArC,MAA+CH,KAAK,CAACI,aAA3D;AACA,QAAMC,oBAAoB,GAAG,CACzB;AAAE,eAAW,oBAAb;AAAmC,iBAAa,iBAAhD;AAAmE,aAAS;AAA5E,GADyB,CAA7B;AAGA,sBACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AACI,IAAA,IAAI,EAAC,iBADT;AAEI,IAAA,KAAK,EAAEL,KAAK,CAACM,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CAFX;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,QAAQ,EAAE,CAACP,eAJf;AAKI,IAAA,WAAW,EAAEA,eAAe,GAAG,EAAH,GAAQ,GALxC;AAMI,IAAA,UAAU,EAAEA,eANhB;AAOI,IAAA,KAAK,EAAED,KAAK,CAACS,cAAN,IAAwBT,KAAK,CAACS,cAAN,CAAqB,iBAArB,CAAxB,GAAkET,KAAK,CAACS,cAAN,CAAqB,iBAArB,CAAlE,GAA4G,EAPvH;AAQI,IAAA,WAAW,EAAET,KAAK,CAACM,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CARjB,CASI;AATJ;AAUI,IAAA,QAAQ,EAAGE,KAAD,IAAWV,KAAK,CAACW,eAAN,CAAsBD,KAAtB,EAA6B,CAA7B,CAVzB;AAWI,IAAA,SAAS,EAAE,GAXf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAcI,oBAAC,gBAAD;AACI,IAAA,SAAS,EAAEV,KAAK,CAACM,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CADf;AAEI,IAAA,YAAY,EAAE,IAFlB;AAGI,IAAA,IAAI,EAAE,YAHV;AAII,IAAA,UAAU,EAAEN,gBAJhB;AAKI,IAAA,WAAW,EAAEF,KAAK,CAACM,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CALjB;AAMI,IAAA,WAAW,EAAE,CAACN,gBANlB;AAOI,IAAA,OAAO,EAAEC,KAAK,IAAI,EAPtB;AAQI,IAAA,QAAQ,EAAC,YARb;AASI,IAAA,WAAW,EAAC,gBAThB;AAUI,IAAA,KAAK,EAAEH,KAAK,CAACS,cAAN,IAAwBT,KAAK,CAACS,cAAN,CAAqB,YAArB,CAAxB,GAA6DT,KAAK,CAACS,cAAN,CAAqB,YAArB,CAA7D,GAAkG,EAV7G;AAWI,IAAA,QAAQ,EAAEG,KAAK,IAAIZ,KAAK,CAACa,aAAN,CAAoBD,KAApB,EAA2B,YAA3B,EAAyC,CAAzC,CAXvB;AAYI,IAAA,gBAAgB,EAAE,IAZtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdJ,eA6CI,oBAAC,SAAD;AACI,IAAA,IAAI,EAAC,oBADT;AAEI,IAAA,KAAK,EAAEZ,KAAK,CAACM,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CAFX;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,QAAQ,EAAE,CAACP,eAJf;AAKI,IAAA,WAAW,EAAEA,eAAe,GAAG,EAAH,GAAQ,GALxC;AAMI,IAAA,UAAU,EAAEA,eANhB;AAOI,IAAA,KAAK,EAAED,KAAK,CAACS,cAAN,IAAwBT,KAAK,CAACS,cAAN,CAAqB,oBAArB,CAAxB,GAAqET,KAAK,CAACS,cAAN,CAAqB,oBAArB,CAArE,GAAkH,EAP7H;AAQI,IAAA,WAAW,EAAET,KAAK,CAACM,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CARjB,CASI;AATJ;AAUI,IAAA,QAAQ,EAAGE,KAAD,IAAWV,KAAK,CAACW,eAAN,CAAsBD,KAAtB,EAA6B,CAA7B,CAVzB;AAWI,IAAA,SAAS,EAAE,GAXf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7CJ,EA0DPV,KAAK,CAACc,QAAN,CAAeC,SAAf,KAA6B,EAA7B,gBACD,oBAAC,YAAD;AACA,IAAA,IAAI,EAAE,qBADN;AAEA,IAAA,KAAK,EAAEf,KAAK,CAACM,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CAFP;AAEuE,IAAA,sBAAsB,MAF7F;AAGA,IAAA,QAAQ,EAAGE,KAAD,IAAWV,KAAK,CAACW,eAAN,CAAsBD,KAAtB,EAA6B,CAA7B,CAHrB;AAIA,IAAA,WAAW,EAAEV,KAAK,CAACM,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CAJb;AAKA,IAAA,KAAK,EAAER,KAAK,CAACS,cAAN,IAAwBT,KAAK,CAACS,cAAN,CAAqB,qBAArB,CAAxB,GAAsET,KAAK,CAACS,cAAN,CAAqB,qBAArB,CAAtE,GAAoH,EAL3H;AAMA,IAAA,UAAU,EAAEP,gBANZ;AAOA,IAAA,IAAI,EAAC,GAPL;AAQA,IAAA,QAAQ,EAAE,KARV;AASA,IAAA,SAAS,EAAE,GATX;AAUA,IAAA,WAAW,EAAE,KAVb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADC,GAaY,EAvEL,EAwEPF,KAAK,CAACc,QAAN,CAAeC,SAAf,KAA6B,EAA7B,gBAKW,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGI,oBAAC,YAAD;AACI,IAAA,IAAI,EAAE,uBADV;AAEI,IAAA,KAAK,EAAEf,KAAK,CAACM,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CAFX;AAGI,IAAA,IAAI,EAAC,QAHT;AAII,IAAA,QAAQ,EAAGE,KAAD,IAAWV,KAAK,CAACW,eAAN,CAAsBD,KAAtB,EAA6B,CAA7B,EAAgC,CAAC,CAAD,EAAI,CAAJ,CAAhC,CAJzB;AAKI,IAAA,WAAW,EAAEV,KAAK,CAACM,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CALjB;AAMI,IAAA,YAAY,EAAER,KAAK,CAACS,cAAN,CAAqB,uBAArB,MAAkD,CAAlD,GAAsD,IAAtD,GAA6D,KAN/E;AAOI,IAAA,OAAO,EAAET,KAAK,CAACS,cAAN,CAAqB,uBAArB,MAAkD,CAAlD,GAAsD,IAAtD,GAA6D,KAP1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CAFJ,eAgBI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AACI,IAAA,IAAI,EAAE,qBADV;AAEI,IAAA,KAAK,EAAET,KAAK,CAACM,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CAFX;AAGI,IAAA,IAAI,EAAC,QAHT;AAII,IAAA,QAAQ,EAAGE,KAAD,IAAWV,KAAK,CAACW,eAAN,CAAsBD,KAAtB,EAA6B,CAA7B,EAAgC,CAAC,CAAD,EAAI,CAAJ,CAAhC,CAJzB;AAKI,IAAA,WAAW,EAAEV,KAAK,CAACM,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CALjB;AAMI,IAAA,YAAY,EAAER,KAAK,CAACS,cAAN,CAAqB,qBAArB,MAAgD,CAAhD,GAAoD,IAApD,GAA2D,KAN7E;AAOI,IAAA,OAAO,EAAET,KAAK,CAACS,cAAN,CAAqB,qBAArB,MAAgD,CAAhD,GAAoD,IAApD,GAA2D,KAPxE;AAQI,IAAA,QAAQ,EAAET,KAAK,CAACS,cAAN,CAAqB,uBAArB,MAAkD,CAAlD,GAAsD,KAAtD,GAA8D,IAR5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAhBJ,EA6BKT,KAAK,CAACS,cAAN,CAAqB,uBAArB,MAAkD,CAAlD,gBACD,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,YAAD;AACI,IAAA,IAAI,EAAC,eADT;AAEI,IAAA,KAAK,EAAET,KAAK,CAACM,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CAFX;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,QAAQ,EAAER,KAAK,CAACS,cAAN,CAAqB,uBAArB,MAAkD,CAAlD,GAAsD,KAAtD,GAA8D,IAJ5E;AAKI,IAAA,WAAW,EAAET,KAAK,CAACS,cAAN,CAAqB,uBAArB,MAAkD,CAAlD,GAAsD,GAAtD,GAA4D,EAL7E,CAMI;AANJ;AAOI,IAAA,KAAK,EAAET,KAAK,CAACS,cAAN,IAAwBT,KAAK,CAACS,cAAN,CAAqB,eAArB,CAAxB,GAAgET,KAAK,CAACS,cAAN,CAAqB,eAArB,CAAhE,GAAwG,EAPnH;AAQI,IAAA,WAAW,EAAET,KAAK,CAACM,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CARjB,CASI;AATJ;AAUI,IAAA,QAAQ,EAAGE,KAAD,IAAWV,KAAK,CAACW,eAAN,CAAsBD,KAAtB,EAA6B,CAA7B,CAVzB;AAWI,IAAA,SAAS,EAAE,GAXf;AAYI,IAAA,UAAU,EAAEV,KAAK,CAACS,cAAN,CAAqB,uBAArB,MAAkD,CAAlD,GAAsD,KAAtD,GAA8D,IAZ9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADC,GAkBA,EA/CL,CALX,GAsDY,EA9HL,eA+HI,0CACCT,KAAK,CAACc,QAAN,CAAeC,SAAf,KAA2B,EAA3B,gBACD;AAAK,IAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD,CAAK,IAAL;AAAU,IAAA,SAAS,EAAC,aAApB;AAAkC,IAAA,IAAI,EAAC,oBAAvC;AACI,IAAA,MAAM,EAAEf,KAAK,CAACS,cAAN,CAAqB,qBAArB,MAAgD,CAAhD,GAAoD,IAApD,GAA2D,KADvE;AAEI,IAAA,OAAO,EAAE,MAAMT,KAAK,CAACgB,iBAAN,EAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGI,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAEtB,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAGsD,GAHtD,eAII,oBAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,oBAArB;AAA0C,IAAA,cAAc,EAAC,kBAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ,CADC,GASZ,EAVW,CA/HJ,EA8IKM,KAAK,CAACS,cAAN,CAAqB,qBAArB,MAAgD,CAAhD,IAAqDT,KAAK,CAACc,QAAN,CAAeC,SAAf,KAA2B,EAAhF;AAAA;AACG;AACA;AACA,sBAAC,QAAD;AACI,IAAA,GAAG,EAAC,iBADR;AAEI,IAAA,eAAe,EAAC,iBAFpB,CAGI;AAHJ;AAII,IAAA,UAAU,EAAEf,KAAK,CAACiB,sBAAN,IAAgC,EAJhD,CAKI;AALJ;AAMI,IAAA,SAAS,EAAE,EANf,CAOI;AACA;AARJ;AASI,IAAA,IAAI,EAAE,EATV;AAUI,IAAA,mBAAmB,EAAEZ,oBAVzB;AAWI,IAAA,UAAU,EAAEL,KAAK,CAACkB,UAXtB;AAYI,IAAA,qBAAqB,EAAElB,KAAK,CAACmB,qBAZjC;AAaI,IAAA,QAAQ,EAAE,KAbd;AAcI,IAAA,UAAU,EAAE,YAdhB;AAeI,IAAA,UAAU,EAAE,OAfhB;AAgBI,IAAA,gBAAgB,EAAE,IAhBtB;AAiBI,IAAA,SAAS,EAAC,YAjBd;AAkBI,IAAA,gBAAgB,EAAE,IAlBtB;AAmBI,IAAA,WAAW,EAAE,CAAC;AACVC,MAAAA,KAAK,EAAEpB,KAAK,CAACM,IAAN,CAAWC,aAAX,CAAyB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAzB,CADG;AAEV;AACAa,MAAAA,WAAW,EAAE,YAHH;AAIVC,MAAAA,UAAU,EAAE,eAJF;AAOVC,MAAAA,MAAM,EAAEvB,KAAK,CAACmB,qBAAN,IAA+BnB,KAAK,CAACmB,qBAAN,CAA4BK,OAA5B,CAAoCxB,KAAK,CAACkB,UAAN,CAAiBO,GAAjB,CAAqB,sBAArB,KAAgDzB,KAAK,CAACkB,UAAN,CAAiBQ,GAAjB,CAAqB,sBAArB,EAA6CC,YAAjI,MAAoJ,CAAC,CAPlL;AAQVC,MAAAA,OAAO,EAAE,CAACC,IAAD,EAAOC,GAAP,EAAYC,EAAZ,KAAmB/B,KAAK,CAACgC,oBAAN,CAA2BH,IAA3B,EAAiCC,GAAjC,EAAsCC,EAAtC,CARlB,CASV;;AATU,KAAD,CAnBjB,CA8BA;AA9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHH,CAqCG;AACA;AAtCH,IAuCK,EArLV,CADJ;AA0MH,CA/MD;;AAiNA,eAAe1C,UAAU,CAACU,cAAD,CAAzB","sourcesContent":["import React from 'react';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\n//import { Col, Row } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus} from '@fortawesome/free-solid-svg-icons';\r\nimport { Row, Col, Nav } from 'react-bootstrap';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\n\r\nconst AddCodedResult = (props) => {\r\n    const { needCodedResult, needActualResult, grade } = props.parameterData;\r\n    const testMethodColumnList = [\r\n        { \"idsName\": \"IDS_SUBCODEDRESULT\", \"dataField\": \"ssubcodedresult\", \"width\": \"200px\" }];\r\n        \r\n    return (\r\n        <Col md=\"12\">\r\n            <FormInput\r\n                name=\"spredefinedname\"\r\n                label={props.intl.formatMessage({ id: \"IDS_CODEDRESULT\" })}\r\n                type=\"text\"\r\n                required={!needCodedResult}\r\n                isMandatory={needCodedResult ? \"\" : \"*\"}\r\n                isDisabled={needCodedResult}\r\n                value={props.selectedRecord && props.selectedRecord[\"spredefinedname\"] ? props.selectedRecord[\"spredefinedname\"] : \"\"}\r\n                placeholder={props.intl.formatMessage({ id: \"IDS_CODEDRESULT\" })}\r\n                //onChange = { (event) => props.onInputOnChange(event, 1) }\r\n                onChange={(event) => props.onInputOnChange(event, 6)}\r\n                maxLength={100}\r\n            />\r\n            <FormSelectSearch\r\n                formLabel={props.intl.formatMessage({ id: \"IDS_ACTUALRESULT\" })}\r\n                isSearchable={true}\r\n                name={\"ngradecode\"}\r\n                isDisabled={needActualResult}\r\n                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                isMandatory={!needActualResult}\r\n                options={grade || []}\r\n                optionId='ngradecode'\r\n                optionValue='sdisplaystatus'\r\n                value={props.selectedRecord && props.selectedRecord[\"ngradecode\"] ? props.selectedRecord[\"ngradecode\"] : \"\"}\r\n                onChange={value => props.onComboChange(value, \"ngradecode\", 1)}\r\n                alphabeticalSort={true}\r\n            >\r\n            </FormSelectSearch>\r\n\r\n            {/* <FormTextarea\r\n                name={\"sresultparacomment\"}\r\n                //label={props.intl.formatMessage({ id: \"IDS_RESULTPARAMETERCOMMENTS\" })}IDS_CODEDRESULTSYNONYM\r\n                label={props.intl.formatMessage({ id: \"IDS_CODEDRESULTSYNONYM\" })}\r\n                onChange={(event) => props.onInputOnChange(event, 1)}\r\n                placeholder={props.intl.formatMessage({ id: \"IDS_CODEDRESULTSYNONYM\" })}\r\n                //value={props.selectedRecord?props.selectedRecord[\"sresultparacomment\"]:\"\"}\r\n                value={props.selectedRecord && props.selectedRecord[\"sresultparacomment\"] ? props.selectedRecord[\"sresultparacomment\"] : \"\"}\r\n                isDisabled={needActualResult}\r\n                rows=\"2\"\r\n                required={false}\r\n                maxLength={500}\r\n                isMandatory={needCodedResult ? \"\" : \"*\"}\r\n            ></FormTextarea> */}\r\n\r\n            <FormInput\r\n                name=\"spredefinedsynonym\"\r\n                label={props.intl.formatMessage({ id: \"IDS_CODEDRESULTSYNONYM\" })}\r\n                type=\"text\"\r\n                required={!needCodedResult}\r\n                isMandatory={needCodedResult ? \"\" : \"*\"}\r\n                isDisabled={needCodedResult}\r\n                value={props.selectedRecord && props.selectedRecord[\"spredefinedsynonym\"] ? props.selectedRecord[\"spredefinedsynonym\"] : \"\"}\r\n                placeholder={props.intl.formatMessage({ id: \"IDS_CODEDRESULTSYNONYM\" })}\r\n                //onChange = { (event) => props.onInputOnChange(event, 1) }\r\n                onChange={(event) => props.onInputOnChange(event, 1)}\r\n                maxLength={100}\r\n            />\r\n{props.userInfo.nformcode === 62?\r\n<FormTextarea\r\nname={\"spredefinedcomments\"}\r\nlabel={props.intl.formatMessage({ id: \"IDS_RESULTPARAMETERCOMMENTS\" })}IDS_CODEDRESULTSYNONYM\r\nonChange={(event) => props.onInputOnChange(event, 1)}\r\nplaceholder={props.intl.formatMessage({ id: \"IDS_RESULTPARAMETERCOMMENTS\" })}\r\nvalue={props.selectedRecord && props.selectedRecord[\"spredefinedcomments\"] ? props.selectedRecord[\"spredefinedcomments\"] : \"\"}\r\nisDisabled={needActualResult}\r\nrows=\"2\"\r\nrequired={false}\r\nmaxLength={255}\r\nisMandatory={false}\r\n></FormTextarea>\r\n            :\"\"}\r\n{props.userInfo.nformcode === 62?\r\n\r\n\r\n\r\n\r\n            <Row>\r\n                \r\n                <Col md={6}>\r\n\r\n                \r\n                    <CustomSwitch\r\n                        name={\"nneedresultentryalert\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_AlERTFORRESULTENTRY\" })}\r\n                        type=\"switch\"\r\n                        onChange={(event) => props.onInputOnChange(event, 5, [3, 4])}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_AlERTFORRESULTENTRY\" })}\r\n                        defaultValue={props.selectedRecord[\"nneedresultentryalert\"] === 3 ? true : false}\r\n                        checked={props.selectedRecord[\"nneedresultentryalert\"] === 3 ? true : false}\r\n                    >\r\n                    </CustomSwitch>\r\n                </Col>\r\n                <Col md={6}>\r\n                    <CustomSwitch\r\n                        name={\"nneedsubcodedresult\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_SUBCODERESULTNEED\" })}\r\n                        type=\"switch\"\r\n                        onChange={(event) => props.onInputOnChange(event, 5, [3, 4])}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_SUBCODERESULTNEED\" })}\r\n                        defaultValue={props.selectedRecord[\"nneedsubcodedresult\"] === 3 ? true : false}\r\n                        checked={props.selectedRecord[\"nneedsubcodedresult\"] === 3 ? true : false}\r\n                        disabled={props.selectedRecord[\"nneedresultentryalert\"] === 3 ? false : true}\r\n                    >\r\n                    </CustomSwitch>\r\n                </Col>\r\n                {props.selectedRecord[\"nneedresultentryalert\"] === 3?\r\n                <Col>\r\n\r\n                    <FormTextarea\r\n                        name=\"salertmessage\"\r\n                        label={props.intl.formatMessage({ id: \"IDS_ALERTMESSAGE\" })}\r\n                        type=\"text\"\r\n                        required={props.selectedRecord[\"nneedresultentryalert\"] === 3 ? false : true}\r\n                        isMandatory={props.selectedRecord[\"nneedresultentryalert\"] === 3 ? \"*\" : \"\"}\r\n                        //isDisabled={needCodedResult}\r\n                        value={props.selectedRecord && props.selectedRecord[\"salertmessage\"] ? props.selectedRecord[\"salertmessage\"] : \"\"}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_ALERTMESSAGE\" })}\r\n                        //onChange = { (event) => props.onInputOnChange(event, 1) }\r\n                        onChange={(event) => props.onInputOnChange(event, 1)}\r\n                        maxLength={255}\r\n                        isDisabled={props.selectedRecord[\"nneedresultentryalert\"] === 3 ? false : true}\r\n                    ></FormTextarea>\r\n                </Col>\r\n                :\"\"}\r\n            </Row>\r\n            :\"\"}\r\n            <>\r\n            {props.userInfo.nformcode===62?\r\n            <div className='d-flex justify-content-end mb-3'>\r\n                <Nav.Item className=\"add-txt-btn\" name=\"addcodedresultname\"\r\n                    hidden={props.selectedRecord[\"nneedsubcodedresult\"] === 4 ? true : false}\r\n                    onClick={() => props.addSubCodedResult()}>\r\n                    <FontAwesomeIcon icon={faPlus}></FontAwesomeIcon>{\" \"}\r\n                    <FormattedMessage id=\"IDS_SUBCODEDRESULT\" defaultMessage=\"Sub Coded Result\" />\r\n                </Nav.Item>\r\n            </div>\r\n:\"\"}\r\n            </>\r\n\r\n\r\n\r\n            {props.selectedRecord[\"nneedsubcodedresult\"] === 3 && props.userInfo.nformcode===62 ?\r\n                //  <Row noGutters={true}>\r\n                // <Col md=\"12\">\r\n                <DataGrid\r\n                    key=\"ssubcodedresult\"\r\n                    primaryKeyField=\"ssubcodedresult\"\r\n                    // dataResult={[]}\r\n                    dataResult={props.selectedsubcodedresult || []}\r\n                    // dataResult={this.props.selectedWorklistHistory ||[]}\r\n                    dataState={{}}\r\n                    // dataState={this.state.sectionDataState}\r\n                    // dataStateChange={(event) => this.setState({ sectionDataState: event.dataState })}\r\n                    data={[]}\r\n                    extractedColumnList={testMethodColumnList}\r\n                    controlMap={props.controlMap}\r\n                    userRoleControlRights={props.userRoleControlRights}\r\n                    pageable={false}\r\n                    scrollable={'scrollable'}\r\n                    gridHeight={'335px'}\r\n                    isActionRequired={true}\r\n                    methodUrl=\"AuditTrail\"\r\n                    hideColumnFilter={true}\r\n                    actionIcons={[{\r\n                        title: props.intl.formatMessage({ id: \"IDS_CODEDRESULT\" }),\r\n                        // title: this.props.intl.formatMessage({ id: \"IDS_PREVIOUSRESULTVIEW\" }),\r\n                        controlname: \"faTrashAlt\",\r\n                        objectName: \"ExceptionLogs\",\r\n\r\n                       \r\n                        hidden: props.userRoleControlRights && props.userRoleControlRights.indexOf(props.controlMap.has(\"DeleteSubCodedResult\") && props.controlMap.get(\"DeleteSubCodedResult\").ncontrolcode)  === -1,\r\n                        onClick: (item, key, nn) => props.deleteSubCodedResult(item, key, nn)\r\n                        //onClick: (subCodedResult) => props.deleteSubCodedResult(subCodedResult)\r\n                    }]}\r\n                //userRoleControlRights={this.props.userRoleControlRights}\r\n\r\n                >\r\n                </DataGrid>\r\n                // </Col>\r\n                // </Row>\r\n                : \"\"}\r\n            {/* <FormTextarea\r\n                    name={\"sresultparacomment\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_CODEDRESULTSYNONYM\" })}\r\n                    onChange={(event) => props.onInputOnChange(event, 1)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_CODEDRESULTSYNONYM\" })}\r\n                    //value={props.selectedRecord?props.selectedRecord[\"sresultparacomment\"]:\"\"}\r\n                    value={props.selectedRecord && props.selectedRecord[\"sresultparacomment\"]?props.selectedRecord[\"sresultparacomment\"]:\"\"}\r\n                    isDisabled={needActualResult}\r\n                    isMandatory={true}\r\n                    rows=\"2\"\r\n                    required={true}\r\n                    maxLength={500}\r\n                ></FormTextarea> */}\r\n        </Col>\r\n\r\n\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default injectIntl(AddCodedResult);"]},"metadata":{},"sourceType":"module"}