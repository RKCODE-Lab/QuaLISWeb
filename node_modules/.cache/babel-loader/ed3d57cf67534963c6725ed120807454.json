{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { toast } from 'react-toastify';\nimport { transactionStatus, attachmentType } from \"../components/Enumeration\";\nexport function getInstrumentCombo(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    if (masterData.SelectedInsCat !== null || masterData.SelectedInsCat !== undefined) {\n      let urlArray = [];\n      const InstrumentCategory = rsapi.post(\"/instrumentcategory/fetchinstrumentcategory\", {\n        \"userinfo\": userInfo\n      });\n      const Supplier = rsapi.post(\"/instrument/getSupplier\", {\n        \"userinfo\": userInfo\n      });\n      const Manufacturer = rsapi.post(\"/instrument/getManufacturer\", {\n        \"userinfo\": userInfo\n      });\n      const InstrumentStatus = rsapi.post(\"/instrument/getInstrumentStatus\", {\n        \"userinfo\": userInfo\n      });\n      const Lab = rsapi.post(\"/section/getSection\", {\n        \"userinfo\": userInfo\n      });\n      const Period = rsapi.post(\"/period/getPeriodByControl\", {\n        \"ncontrolcode\": ncontrolCode,\n        \"userinfo\": userInfo\n      });\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      const Instrumentdate = rsapi.post(\"/instrument/addInstrumentDate\", {\n        \"ncontrolcode\": ncontrolCode,\n        \"userinfo\": userInfo\n      });\n      const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo: userInfo\n      });\n      const validationStatus = rsapi.post(\"instrument/getInstrumentValidationStatus\", {\n        \"userinfo\": userInfo\n      });\n      const calibrationStatus = rsapi.post(\"instrument/getInstrumentCalibrationStatus\", {\n        \"userinfo\": userInfo\n      });\n      const maintenanceStatus = rsapi.post(\"instrument/getInstrumentMaintenanceStatus\", {\n        \"userinfo\": userInfo\n      });\n      const calibrationRequired = rsapi.post(\"instrument/getCalibrationRequired\", {\n        \"ninstrumentcatcode\": masterData.SelectedInsCat.ninstrumentcatcode,\n        userinfo: userInfo\n      });\n      const siteService = rsapi.post(\"site/getSite\", {\n        userinfo: userInfo\n      });\n\n      if (operation === \"create\") {\n        urlArray = [InstrumentCategory, Supplier, Manufacturer, InstrumentStatus, Lab, Period, timeZoneService, Instrumentdate, UTCtimeZoneService, validationStatus, calibrationStatus, maintenanceStatus, calibrationRequired, siteService];\n      } else {\n        const InstrumentId = rsapi.post(\"/instrument/getActiveInstrumentById\", {\n          [primaryKeyName]: masterData.selectedInstrument[primaryKeyName],\n          \"userinfo\": userInfo\n        }); //const ManufacturerByID = rsapi.post(\"/manufacturer/getManufacturerById\", { [primaryKeyName] :masterData.selectedManufacturer[primaryKeyName], \"userinfo\": userInfo });\n\n        urlArray = [InstrumentCategory, Supplier, Manufacturer, InstrumentStatus, Lab, Period, timeZoneService, InstrumentId, Instrumentdate, UTCtimeZoneService, siteService];\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let expiryDate = undefined;\n        let currentTime = undefined;\n        const instcatMap = constructOptionList(response[0].data || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, false);\n        const supplierMap = constructOptionList(response[1].data.Supplier || [], \"nsuppliercode\", \"ssuppliername\", undefined, undefined, false);\n        const manufMap = constructOptionList(response[2].data.Manufacturer || [], \"nmanufcode\", \"smanufname\", undefined, undefined, false);\n        const inststatusMap = constructOptionList(response[3].data || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n        const sectionMap = constructOptionList(response[4].data || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n        const periodMap = constructOptionList(response[5].data || [], \"nperiodcode\", \"speriodname\", undefined, undefined, false);\n        const timezoneMap = constructOptionList(response[6].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false); // const validationMap={};\n        // const calibrationMap ={};\n        // const maintenanceMap ={};\n\n        let ValidationStatus = [];\n        let CalibrationStatus = [];\n        let MaintenanceStatus = [];\n        let CalibrationRequired = \"\";\n        let siteList = [];\n        const InstrumentCategory = instcatMap.get(\"OptionList\");\n        const Supplier = supplierMap.get(\"OptionList\");\n        const Manufacturer = manufMap.get(\"OptionList\");\n        const InstrumentStatus = inststatusMap.get(\"OptionList\");\n        const Lab = sectionMap.get(\"OptionList\");\n        const Period = periodMap.get(\"OptionList\");\n        const TimeZoneList = timezoneMap.get(\"OptionList\");\n        let selectedRecord = {\n          \"ninstrumentcatcode\": {\n            \"value\": masterData.SelectedInsCat.ninstrumentcatcode,\n            \"label\": masterData.SelectedInsCat.sinstrumentcatname\n          }\n        }; // let selectedRecord = {\n        //     \"ninstrumentcatcode\": {\n        //         \"value\": masterData.SelectedInsCat.ninstrumentcatcode,\n        //         \"label\": masterData.SelectedInsCat.sinstrumentcatname\n        //     },\n        //     \"ntzmanufdate\": {\n        //         \"value\": userInfo.ntimezonecode,\n        //         \"label\": userInfo.stimezoneid\n        //     },\n        //     //\"stzmanufdate\":userInfo.stimezoneid\n        //     \"ntzpodate\": {\n        //         \"value\": userInfo.ntimezonecode,\n        //         \"label\": userInfo.stimezoneid\n        //     },\n        //     \"stzpodate\": userInfo.stimezoneid,\n        //     \"ntzreceivedate\": {\n        //         \"value\": userInfo.ntimezonecode,\n        //         \"label\": userInfo.stimezoneid\n        //     },\n        //     \"stzreceivedate\": userInfo.stimezoneid,\n        //     \"ntzinstallationdate\": {\n        //         \"value\": userInfo.ntimezonecode,\n        //         \"label\": userInfo.stimezoneid\n        //     },\n        //     \"stzinstallationdate\": userInfo.stimezoneid,\n        //     \"ntzexpirydate\": {\n        //         \"value\": userInfo.ntimezonecode,\n        //         \"label\": userInfo.stimezoneid\n        //     },\n        //     \"stzexpirydate\": userInfo.stimezoneid\n        // };\n\n        let instrumentCategory = [];\n        let supplier = [];\n        let regionalSite = [];\n        let manufacturer = [];\n        let instrumentstatus = [];\n        let nwindowsperiodminusunit = [];\n        let nwindowsperiodplusunit = [];\n        ;\n        let nnextcalibrationperiod = [];\n        let lab = [];\n        let ntzmanufdate = [];\n        let ntzpodate = [];\n        let ntzreceivedate = [];\n        let ntzinstallationdate = [];\n        let ntzexpirydate = [];\n        let susername = [];\n        let service = []; // let validation = [];\n        // let calibration = [];\n        // let maintenance = [];\n        //if (operation === \"create\") {\n        // let date = rearrangeDateFormat(userInfo, response[8].data);\n        // selectedRecord[\"dmanufacdate\"] = date; //new Date(response[8].data);\n        // selectedRecord[\"dpodate\"] = date;\n        // selectedRecord[\"dreceiveddate\"] = date;\n        // selectedRecord[\"dinstallationdate\"] = date;\n        // currentTime = date;\n        // if (response[7].data[\"ExpiryDate\"] !== \"\") {\n        //     expiryDate = rearrangeDateFormat(userInfo, response[7].data[\"ExpiryDate\"]); //new Date(response[7].data[\"ExpiryDate\"]);\n        //     selectedRecord[\"dexpirydate\"] = expiryDate;\n        // }\n        //   }\n\n        if (operation === \"update\") {\n          selectedRecord = response[7].data;\n          instrumentCategory.push({\n            \"value\": response[7].data[\"ninstrumentcatcode\"],\n            \"label\": response[7].data[\"sinstrumentcatname\"]\n          });\n          supplier.push({\n            \"value\": response[7].data[\"nsuppliercode\"],\n            \"label\": response[7].data[\"ssuppliername\"]\n          });\n          regionalSite.push({\n            \"value\": response[7].data[\"nregionalsitecode\"],\n            \"label\": response[7].data[\"sregionalsitename\"]\n          });\n          service.push({\n            \"value\": response[7].data[\"nservicecode\"],\n            \"label\": response[7].data[\"sserviceby\"]\n          });\n          manufacturer.push({\n            \"value\": response[7].data[\"nmanufcode\"],\n            \"label\": response[7].data[\"smanufname\"]\n          });\n          instrumentstatus.push({\n            \"value\": response[7].data[\"ntranscode\"],\n            \"label\": response[7].data[\"sactivestatus\"]\n          });\n          nwindowsperiodminusunit.push({\n            \"value\": response[7].data[\"nwindowsperiodminusunit\"],\n            \"label\": response[7].data[\"swindowsperiodminusunit\"]\n          });\n          nwindowsperiodplusunit.push({\n            \"value\": response[7].data[\"nwindowsperiodplusunit\"],\n            \"label\": response[7].data[\"swindowsperiodplusunit\"]\n          });\n          nnextcalibrationperiod.push({\n            \"value\": response[7].data[\"nnextcalibrationperiod\"],\n            \"label\": response[7].data[\"snextcalibrationperiod\"]\n          });\n          lab.push({\n            \"value\": response[7].data[\"nsectioncode\"],\n            \"label\": response[7].data[\"ssectionname\"]\n          });\n          ntzmanufdate.push({\n            \"value\": response[7].data[\"ntzmanufdate\"],\n            \"label\": response[7].data[\"stzmanufdate\"]\n          });\n          ntzpodate.push({\n            \"value\": response[7].data[\"ntzpodate\"],\n            \"label\": response[7].data[\"stzpodate\"]\n          });\n          ntzreceivedate.push({\n            \"value\": response[7].data[\"ntzreceivedate\"],\n            \"label\": response[7].data[\"stzreceivedate\"]\n          });\n          ntzinstallationdate.push({\n            \"value\": response[7].data[\"ntzinstallationdate\"],\n            \"label\": response[7].data[\"stzinstallationdate\"]\n          });\n          ntzexpirydate.push({\n            \"value\": response[7].data[\"ntzexpirydate\"],\n            \"label\": response[7].data[\"stzexpirydate\"]\n          });\n          susername.push({\n            \"value\": response[7].data[\"nusercode1\"],\n            \"label\": response[7].data[\"susername\"]\n          }); // validation.push({\n          //     \"value\": response[8].data[\"ntranscode\"],\n          //     \"label\": response[8].data[\"stransdisplaystatus\"]\n          // })\n          // calibration.push({\n          //     \"value\": response[9].data[\"ntranscode\"],\n          //     \"label\": response[9].data[\"stransdisplaystatus\"]\n          // })\n          // maintenance.push({\n          //     \"value\": response[10].data[\"ntranscode\"],\n          //     \"label\": response[10].data[\"stransdisplaystatus\"]\n          // })\n\n          if (response[7].data[\"smanufacdate\"] !== \"\") {\n            selectedRecord[\"dmanufacdate\"] = rearrangeDateFormat(userInfo, response[7].data[\"smanufacdate\"]); //new Date(response[7].data[\"smanufacdate\"]);\n          }\n\n          if (response[7].data[\"spodate\"] !== \"\") {\n            selectedRecord[\"dpodate\"] = rearrangeDateFormat(userInfo, response[7].data[\"spodate\"]); //new Date(response[7].data[\"spodate\"]);\n          } // else{\n          //     selectedRecord[\"dpodate\"] = \" \";\n          // }\n\n\n          if (response[7].data[\"sreceiveddate\"] !== \"\") {\n            selectedRecord[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sreceiveddate\"]); //new Date(response[7].data[\"sreceiveddate\"]);\n          }\n\n          if (response[7].data[\"sinstallationdate\"] !== \"\") {\n            selectedRecord[\"dinstallationdate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sinstallationdate\"]); //new Date(response[7].data[\"sinstallationdate\"]);\n          }\n\n          if (response[7].data[\"sexpirydate\"] !== \"\") {\n            selectedRecord[\"dexpirydate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sexpirydate\"]); //new Date(response[7].data[\"sexpirydate\"]);\n          }\n\n          selectedRecord[\"ninstrumentcatcode\"] = instrumentCategory[0];\n          selectedRecord[\"nsuppliercode\"] = supplier[0];\n          selectedRecord[\"nservicecode\"] = service[0];\n          selectedRecord[\"nregionalsitecode\"] = regionalSite[0];\n          if (manufacturer[0].value !== -1) selectedRecord[\"nmanufcode\"] = manufacturer[0];\n          if (instrumentstatus[0].value !== -1) selectedRecord[\"ntranscode\"] = instrumentstatus[0];\n          if (nwindowsperiodminusunit[0].value !== -1) selectedRecord[\"nwindowsperiodminusunit\"] = nwindowsperiodminusunit[0];\n          if (nwindowsperiodplusunit[0].value !== -1) selectedRecord[\"nwindowsperiodplusunit\"] = nwindowsperiodplusunit[0];\n          if (nnextcalibrationperiod[0].value !== -1) selectedRecord[\"nnextcalibrationperiod\"] = nnextcalibrationperiod[0];\n          selectedRecord[\"nsectioncode\"] = lab[0];\n          selectedRecord[\"ntzmanufdate\"] = ntzmanufdate[0];\n          selectedRecord[\"stzmanufdate\"] = ntzmanufdate[0].label;\n          selectedRecord[\"ntzpodate\"] = ntzpodate[0];\n          selectedRecord[\"stzpodate\"] = ntzpodate[0].label;\n          selectedRecord[\"ntzreceivedate\"] = ntzreceivedate[0];\n          selectedRecord[\"stzreceivedate\"] = ntzreceivedate[0].label;\n          selectedRecord[\"ntzinstallationdate\"] = ntzinstallationdate[0];\n          selectedRecord[\"stzinstallationdate\"] = ntzinstallationdate[0].label;\n          selectedRecord[\"ntzexpirydate\"] = ntzexpirydate[0];\n          selectedRecord[\"stzexpirydate\"] = ntzexpirydate[0].label;\n          selectedRecord[\"susername\"] = susername[0]; //  selectedRecord[\"ntranscode\"] = validation[0];\n          //  selectedRecord[\"ntranscode\"] = calibration[0];\n          //     selectedRecord[\"ntranscode\"] = maintenance[0];\n\n          const siteMap = constructOptionList(response[10].data || [], \"nsitecode\", \"ssitename\", undefined, undefined, true);\n          siteList = siteMap.get(\"OptionList\");\n        } else {\n          const validationMap = constructOptionList(response[9].data.ValidationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          const calibrationMap = constructOptionList(response[10].data.CalibrationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          const maintenanceMap = constructOptionList(response[11].data.MaintenanceStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          CalibrationRequired = response[12].data.ncalibrationrequired;\n          const siteMap = constructOptionList(response[13].data || [], \"nsitecode\", \"ssitename\", undefined, undefined, true);\n          siteList = siteMap.get(\"OptionList\");\n          ValidationStatus = validationMap.get(\"OptionList\");\n          CalibrationStatus = calibrationMap.get(\"OptionList\");\n          MaintenanceStatus = maintenanceMap.get(\"OptionList\");\n          const timezone = TimeZoneList.filter(x => x.value === userInfo.ntimezonecode);\n          selectedRecord[\"ntzmanufdate\"] = timezone[0]; // selectedRecord[\"stzmanufdate\"] = ntzmanufdate[0].label;\n\n          selectedRecord[\"ntzpodate\"] = timezone[0]; // selectedRecord[\"stzpodate\"] = ntzpodate[0].label;\n\n          selectedRecord[\"ntzreceivedate\"] = timezone[0]; // selectedRecord[\"stzreceivedate\"] = ntzreceivedate[0].label;\n\n          selectedRecord[\"ntzinstallationdate\"] = timezone[0]; // selectedRecord[\"stzinstallationdate\"] = ntzinstallationdate[0].label;\n\n          selectedRecord[\"ntzexpirydate\"] = timezone[0]; //selectedRecord[\"stzexpirydate\"] = ntzexpirydate[0].label;\n\n          let date = rearrangeDateFormat(userInfo, response[8].data);\n          selectedRecord[\"dclosedate\"] = date;\n          selectedRecord[\"dopendate\"] = date;\n          selectedRecord[\"dlastcalibrationdate\"] = date;\n          selectedRecord[\"dlastmaintenancedate\"] = date;\n          selectedRecord[\"dduedate\"] = date;\n          selectedRecord[\"dvalidationdate\"] = date;\n          selectedRecord[\"ntzclosedate\"] = timezone[0];\n          selectedRecord[\"ntzopendate\"] = timezone[0];\n          selectedRecord[\"ntzlastcalibrationdate\"] = timezone[0];\n          selectedRecord[\"ntzlastmaintenancedate\"] = timezone[0];\n          selectedRecord[\"ntzduedate\"] = timezone[0];\n          selectedRecord[\"ntzvalidationdate\"] = timezone[0];\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            InstrumentCategory,\n            Supplier,\n            Manufacturer,\n            InstrumentStatus,\n            instrumentCategory: instrumentCategory,\n            supplier: supplier,\n            manufacturer: manufacturer,\n            Lab,\n            Period,\n            TimeZoneList,\n            ValidationStatus,\n            CalibrationStatus,\n            MaintenanceStatus,\n            CalibrationRequired,\n            siteList,\n            isOpen: true,\n            selectedRecord: selectedRecord,\n            operation: operation,\n            screenName: screenName,\n            openModal: true,\n            ncontrolCode: ncontrolCode,\n            loading: false,\n            currentTime,\n            expiryDate\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_INSTRUMENTCATEGORYNOTAVALIABLE\"\n      }));\n    }\n  };\n}\nexport function getSectionUsers(nsectioncode, userInfo, selectedRecord, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"instrument/getSectionBasedUser\", {\n      \"nsectioncode\": nsectioncode\n    }, {\n      userinfo: userInfo\n    }).then(response => {\n      //console.log(\" response:\", response); \n      let Users = [];\n\n      if (screenName === \"IDS_SECTION\") {\n        //let sectionusers=[];\n        const userName = constructOptionList(response.data || [], \"nusercode\", \"susername\", undefined, undefined, false);\n        Users = userName.get(\"OptionList\"); //selectedRecord[\"nusercode\"]=\"\";\n\n        selectedRecord[\"nusercode\"] = undefined; //{label:SectionUsers[0].label,value:SectionUsers[0].value,item:SectionUsers[0]};\n      } else {\n        Users = response.data;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Users,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getCalibrationRequired(ninstrumentcatcode, userInfo, selectedRecord, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"instrument/getCalibrationRequired\", {\n      \"ninstrumentcatcode\": ninstrumentcatcode,\n      userinfo: userInfo\n    }).then(response => {\n      let CalibrationRequired = [];\n      CalibrationRequired = response.data.ncalibrationrequired;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          CalibrationRequired,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getInstrumentDetail(Instrument, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"instrument/getInstrument\", {\n      ninstrumentcode: Instrument.ninstrumentcode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const getAvailableInstData = (instItem, url, key, screenName, userInfo, ncontrolCode, selectedRecord) => {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let url = '';\n    url = \"/instrument/getUsers\";\n    return rsapi.post(url, {\n      \"userinfo\": userInfo\n    }).then(response => {\n      const secMap = constructOptionList(response.data.Section || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n      const userMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      const Lab = secMap.get(\"OptionList\");\n      const LabDefault = secMap.get(\"DefaultValue\");\n\n      if (LabDefault !== undefined) {\n        selectedRecord = {\n          \"nsectioncode\": {\n            \"value\": LabDefault.value,\n            \"label\": LabDefault.label\n          }\n        };\n      }\n\n      const Users = userMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Lab,\n          Users,\n          isOpen: true,\n          selectedRecord,\n          operation: \"create\",\n          screenName: screenName,\n          // openModal: true,\n          openChildModal: true,\n          ncontrolCode: ncontrolCode,\n          instItem: instItem,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 417) {\n        toast.info(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const changeInstrumentCategoryFilter = (inputParam, filterInstrumentCategory) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/instrument/get\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      //const masterData = response.data\n      const masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          dataState: undefined,\n          masterData: { ...masterData,\n            filterInstrumentCategory,\n            nfilterInstrumentCategory: inputParam.inputData.nfilterInstrumentCategory\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const addInstrumentFile = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\n      userinfo: inputParam.userInfo\n    })];\n\n    if (inputParam.operation === \"update\") {\n      urlArray.push(rsapi.post(\"/instrument/editInstrumentFile\", {\n        userinfo: inputParam.userInfo,\n        Instrumentfile: inputParam.selectedRecord\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      // let selectedRecord = {};\n      // let editObject = {};\n      // let operation = \"update\";\n      // editObject = response[0].data;\n      const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\n      const linkmaster = linkMap.get(\"OptionList\");\n      let selectedRecord = {};\n      const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\n      let disabled = false;\n      let editObject = {};\n\n      if (inputParam.operation === \"update\") {\n        editObject = response[1].data;\n        let nlinkcode = {};\n        let link = {};\n\n        if (editObject.nattachmenttypecode === attachmentType.LINK) {\n          nlinkcode = {\n            \"label\": editObject.slinkname,\n            \"value\": editObject.nlinkcode\n          };\n          link = {\n            slinkfilename: editObject.sfilename,\n            slinkdescription: editObject.sfiledesc,\n            nlinkdefaultstatus: editObject.ndefaultstatus,\n            sfilesize: '',\n            nfilesize: 0,\n            ndefaultstatus: 4,\n            sfilename: ''\n          };\n        } else {\n          nlinkcode = defaultLink.length > 0 ? defaultLink[0] : \"\"; //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\"\n\n          link = {\n            slinkfilename: '',\n            slinkdescription: '',\n            nlinkdefaultstatus: 4,\n            sfiledesc: editObject.sfiledesc,\n            sfilesize: editObject.sfilesize,\n            nfilesize: editObject.nfilesize,\n            ndefaultstatus: editObject.ndefaultstatus,\n            sfilename: editObject.sfilename,\n            ssystemfilename: editObject.ssystemfilename\n          };\n        }\n\n        selectedRecord = {\n          ninstrumentfilecode: editObject.ninstrumentfilecode,\n          // sfiledesc: editObject.sfiledesc,\n          // sfilename: editObject.sfilename,\n          // sdescription: editObject.sdescription,\n          // ssystemfilename: editObject.ssystemfilename,\n          nattachmenttypecode: editObject.nattachmenttypecode,\n          ...link,\n          //...editObject,\n          nlinkcode\n        };\n      } else {\n        selectedRecord = {\n          nattachmenttypecode: response[0].data.AttachmentType.length > 0 ? response[0].data.AttachmentType[0].nattachmenttypecode : attachmentType.FTP,\n          nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\",\n          //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\n          disabled\n        };\n      } // selectedRecord = {\n      //     ninstrumentfilecode: editObject.ninstrumentfilecode,\n      //     sfiledesc: editObject.sfiledesc,\n      //     sfilename: editObject.sfilename,\n      //     sdescription: editObject.sdescription,\n      //     ssystemfilename: editObject.ssystemfilename\n      // };\n\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // openModal: true,\n          openChildModal: true,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolCode,\n          selectedRecord,\n          loading: false,\n          linkMaster: linkmaster,\n          showSaveContinue: false,\n          editFiles: editObject.nattachmenttypecode === \"1\" ? editObject : {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getDataForAddEditValidation = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\n  return function (dispatch) {\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: userInfo\n    });\n    const validationStatusService = rsapi.post(\"instrument/getInstrumentValidationStatus\", {\n      \"userinfo\": userInfo\n    });\n\n    if (operation === \"create\") {\n      urlArray = [validationStatusService, UTCtimeZoneService, timeZoneService];\n    } else {\n      const ValidationById = rsapi.post(\"instrument/getActiveInstrumentValidationById\", {\n        [primaryKeyName]: masterData.selectedInstrumentValidation.ninstrumentvalidationcode,\n        \"userinfo\": userInfo\n      });\n      urlArray = [validationStatusService, UTCtimeZoneService, timeZoneService, ValidationById];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      let ValidationData = [];\n      const validationMap = constructOptionList(response[0].data.ValidationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n      const ValidationStatus = validationMap.get(\"OptionList\");\n      let ntzvalidationdate = [];\n      const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n      const TimeZoneList = timezoneMap.get(\"OptionList\");\n\n      if (operation === \"create\") {\n        selectedRecord = {\n          \"ntzvalidationdate\": {\n            \"value\": userInfo.ntimezonecode,\n            \"label\": userInfo.stimezoneid\n          },\n          \"stzvalidationdate\": userInfo.stimezoneid\n        };\n        let date = rearrangeDateFormat(userInfo, response[1].data);\n        selectedRecord[\"dvalidationdate\"] = date;\n      }\n\n      if (operation === \"update\") {\n        ValidationData.push({\n          \"value\": response[3].data[\"nvalidationstatus\"],\n          \"label\": response[3].data[\"stransdisplaystatus\"]\n        });\n        selectedRecord = response[3].data;\n        selectedRecord[\"ntranscode\"] = ValidationData[0];\n        ntzvalidationdate.push({\n          \"value\": response[3].data[\"ntzvalidationdate\"],\n          \"label\": response[3].data[\"stzvalidationdate\"]\n        });\n        selectedRecord[\"ntzvalidationdate\"] = ntzvalidationdate[0];\n\n        if (response[3].data[\"svalidationdate\"] !== \"\") {\n          selectedRecord[\"dvalidationdate\"] = rearrangeDateFormat(userInfo, response[3].data[\"svalidationdate\"]); //new Date(response[7].data[\"smanufacdate\"]);\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ValidationStatus,\n          TimeZoneList,\n          selectedRecord: selectedRecord,\n          isOpen: true,\n          operation: operation,\n          screenName: screenName,\n          // openModal: true,\n          openChildModal: true,\n          ncontrolCode: ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const getDataForAddEditCalibration = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\n  return function (dispatch) {\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationStatus\", {\n      \"userinfo\": userInfo\n    });\n    const LastCalibrationDateService = rsapi.post(\"instrument/getInstrumentLastCalibrationDate\", {\n      \"userinfo\": userInfo,\n      ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\n    });\n\n    if (operation === \"create\") {\n      const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 1,\n        ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\n      });\n      urlArray = [calibrationStatusService, LastCalibrationDateService, timeZoneService, calibrationValidationService];\n    } else {\n      const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 2,\n        ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\n        ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\n      });\n      const CalibrationById = rsapi.post(\"instrument/getActiveInstrumentCalibrationById\", {\n        [primaryKeyName]: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\n        \"userinfo\": userInfo\n      });\n      urlArray = [calibrationStatusService, LastCalibrationDateService, timeZoneService, calibrationValidationService, CalibrationById];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let CalibrationStatus = [];\n      let TimeZoneList = [];\n\n      if (response[3].data.OpenCloseStatus === \"Success\") {\n        let selectedRecord = {};\n        let CalibrationData = [];\n        const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n        CalibrationStatus = calibrationMap.get(\"OptionList\");\n        let Action;\n        let ntzlastcalibrationdate = [];\n        let ntzduedate = [];\n        const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n        TimeZoneList = timezoneMap.get(\"OptionList\");\n\n        if (operation === \"create\") {\n          selectedRecord = {\n            \"ntzlastcalibrationdate\": {\n              \"value\": userInfo.ntimezonecode,\n              \"label\": userInfo.stimezoneid\n            },\n            \"stzlastcalibrationdate\": userInfo.stimezoneid,\n            \"ntzduedate\": {\n              \"value\": userInfo.ntimezonecode,\n              \"label\": userInfo.stimezoneid\n            },\n            \"stzduedate\": userInfo.stimezoneid\n          };\n          let date = rearrangeDateFormat(userInfo, response[1].data.date);\n          selectedRecord[\"dlastcalibrationdate\"] = date;\n          selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, new Date());\n          Action = 'Add';\n        }\n\n        if (operation === \"update\") {\n          Action = 'Edit';\n          CalibrationData.push({\n            \"value\": response[4].data[\"ncalibrationstatus\"],\n            \"label\": response[4].data[\"stransdisplaystatus\"]\n          });\n          selectedRecord = response[4].data;\n          selectedRecord[\"ntranscode\"] = CalibrationData[0];\n          ntzlastcalibrationdate.push({\n            \"value\": response[4].data[\"ntzlastcalibrationdate\"],\n            \"label\": response[4].data[\"stzlastcalibrationdate\"]\n          });\n          ntzduedate.push({\n            \"value\": response[4].data[\"ntzduedate\"],\n            \"label\": response[4].data[\"stzduedate\"]\n          });\n          selectedRecord[\"ntzlastcalibrationdate\"] = ntzlastcalibrationdate[0];\n          selectedRecord[\"ntzduedate\"] = ntzduedate[0];\n\n          if (response[4].data[\"slastcalibrationdate\"] !== \"\") {\n            selectedRecord[\"dlastcalibrationdate\"] = rearrangeDateFormat(userInfo, response[4].data[\"slastcalibrationdate\"]);\n          }\n\n          if (response[4].data[\"sduedate\"] !== \"\") {\n            selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"sduedate\"]);\n          }\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            CalibrationStatus,\n            Action: Action,\n            TimeZoneList,\n            selectedRecord: selectedRecord,\n            isOpen: true,\n            operation: operation,\n            screenName: screenName,\n            // openModal: true,\n            openChildModal: true,\n            ncontrolCode: ncontrolCode,\n            loading: false,\n            popUp: \"\"\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[3].data.Status\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation: operation,\n            screenName: screenName,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const getTabDetails = inputParam => {\n  return function (dispatch) {\n    const instrumentValidation = inputParam.instrumentValidation;\n    const instrumentCalibration = inputParam.instrumentCalibration;\n    const instrumentMaintenance = inputParam.instrumentMaintenance;\n    let urlArray = [];\n    dispatch(initRequest(true));\n\n    if (inputParam.screenName === \"IDS_INSTRUMENTVALIDATION\") {\n      urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\n        ninstrumentcode: instrumentValidation.ninstrumentcode,\n        \"nFlag\": inputParam.nFlag,\n        ninstrumentvalidationcode: instrumentValidation.ninstrumentvalidationcode,\n        userinfo: inputParam.userInfo\n      }));\n    } else if (inputParam.screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n      urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\n        ninstrumentcode: instrumentCalibration.ninstrumentcode,\n        \"nFlag\": inputParam.nFlag,\n        ninstrumentcalibrationcode: instrumentCalibration.ninstrumentcalibrationcode,\n        userinfo: inputParam.userInfo\n      }));\n    } else if (inputParam.screenName === \"IDS_INSTRUMENTMAINTENANCE\") {\n      urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\n        ninstrumentcode: instrumentMaintenance.ninstrumentcode,\n        \"nFlag\": inputParam.nFlag,\n        ninstrumentmaintenancecode: instrumentMaintenance.ninstrumentmaintenancecode,\n        userinfo: inputParam.userInfo\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      let masterData = inputParam.masterData;\n      masterData = { ...masterData,\n        ...response[0].data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getDataForAddEditMaintenance = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\n  return function (dispatch) {\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const LastMaintenanceDateService = rsapi.post(\"instrument/getInstrumentLastMaintenanceDate\", {\n      \"userinfo\": userInfo,\n      ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\n    });\n    const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceStatus\", {\n      \"userinfo\": userInfo\n    });\n\n    if (operation === \"create\") {\n      const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 1,\n        ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\n      });\n      urlArray = [maintenanceStatusService, LastMaintenanceDateService, timeZoneService, maintenanceValidationService];\n    } else {\n      const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 2,\n        ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\n        ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\n      });\n      const MaintenanceById = rsapi.post(\"instrument/getActiveInstrumentMaintenanceById\", {\n        [primaryKeyName]: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\n        \"userinfo\": userInfo\n      });\n      urlArray = [maintenanceStatusService, LastMaintenanceDateService, timeZoneService, maintenanceValidationService, MaintenanceById];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let MaintenanceStatus = [];\n      let TimeZoneList = [];\n\n      if (response[3].data.OpenCloseStatus === \"Success\") {\n        let selectedRecord = {};\n        let MaintenanceData = [];\n        const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n        MaintenanceStatus = maintenanceMap.get(\"OptionList\");\n        let Action;\n        let ntzlastmaintenancedate = [];\n        let ntzduedate = [];\n        const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n        TimeZoneList = timezoneMap.get(\"OptionList\");\n\n        if (operation === \"create\") {\n          selectedRecord = {\n            \"ntzlastmaintenancedate\": {\n              \"value\": userInfo.ntimezonecode,\n              \"label\": userInfo.stimezoneid\n            },\n            \"stzlastmaintenancedate\": userInfo.stimezoneid,\n            \"ntzduedate\": {\n              \"value\": userInfo.ntimezonecode,\n              \"label\": userInfo.stimezoneid\n            },\n            \"stzduedate\": userInfo.stimezoneid\n          };\n          let date = rearrangeDateFormat(userInfo, response[1].data.date);\n          selectedRecord[\"dlastmaintenancedate\"] = date;\n          selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, new Date());\n          Action = 'Add';\n        }\n\n        if (operation === \"update\") {\n          Action = 'Edit';\n          MaintenanceData.push({\n            \"value\": response[4].data[\"nmaintenancestatus\"],\n            \"label\": response[4].data[\"stransdisplaystatus\"]\n          });\n          selectedRecord = response[4].data;\n          selectedRecord[\"ntranscode\"] = MaintenanceData[0];\n          ntzlastmaintenancedate.push({\n            \"value\": response[4].data[\"ntzlastmaintenancedate\"],\n            \"label\": response[4].data[\"stzlastmaintenancedate\"]\n          });\n          ntzduedate.push({\n            \"value\": response[4].data[\"ntzduedate\"],\n            \"label\": response[4].data[\"stzduedate\"]\n          });\n          selectedRecord[\"ntzlastmaintenancedate\"] = ntzlastmaintenancedate[0];\n          selectedRecord[\"ntzduedate\"] = ntzduedate[0];\n\n          if (response[4].data[\"slastmaintenancedate\"] !== \"\") {\n            selectedRecord[\"dlastmaintenancedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"slastmaintenancedate\"]); //new Date(response[7].data[\"smanufacdate\"]);\n          }\n\n          if (response[4].data[\"sduedate\"] !== \"\") {\n            selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"sduedate\"]); //new Date(response[7].data[\"smanufacdate\"]);\n          }\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            MaintenanceStatus,\n            Action: Action,\n            TimeZoneList,\n            selectedRecord: selectedRecord,\n            isOpen: true,\n            operation: operation,\n            screenName: screenName,\n            // openModal: true,\n            openChildModal: true,\n            ncontrolCode: ncontrolCode,\n            loading: false,\n            popUp: \"\"\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[3].data.Status\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation: operation,\n            screenName: screenName,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const OpenDate = (screenName, userInfo, ncontrolCode, selectedRecord, masterData) => {\n  return function (dispatch) {\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: userInfo\n    });\n\n    if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n      const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 3,\n        ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\n        ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\n      });\n      const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationOpenDateStatus\", {\n        \"userinfo\": userInfo,\n        nFlag: 2,\n        ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode\n      });\n      urlArray = [calibrationStatusService, timeZoneService, UTCtimeZoneService, calibrationValidationService];\n    } else {\n      const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 3,\n        ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\n        ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\n      });\n      const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceOpenCloseDateStatus\", {\n        \"userinfo\": userInfo,\n        nFlag: 2,\n        ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode\n      });\n      urlArray = [maintenanceStatusService, timeZoneService, UTCtimeZoneService, maintenanceValidationService];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      if (response[3].data.OpenCloseStatus === \"Success\") {\n        let CalibrationStatus = {};\n        let MaintenanceStatus = {};\n        let selectedRecord = {};\n        const timezoneMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n        const TimeZoneList = timezoneMap.get(\"OptionList\");\n        selectedRecord = {\n          \"ntzopendate\": {\n            \"value\": userInfo.ntimezonecode,\n            \"label\": userInfo.stimezoneid\n          },\n          \"stzopendate\": userInfo.stimezoneid\n        };\n        let popUp = \"\";\n        let date = rearrangeDateFormat(userInfo, response[2].data);\n        selectedRecord[\"dopendate\"] = date;\n\n        if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n          const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          CalibrationStatus = calibrationMap.get(\"OptionList\");\n          popUp = \"IDS_INSTRUMENTCALIBRATIONOPENDATE\"; //  let CalibrationData=[];\n          //  CalibrationData.push(response[0].data.CalibrationStatus[1]);\n          //  CalibrationData.push({\n          //     \"value\": response[0].data.CalibrationStatus[1].ntranscode,\n          //     \"label\": response[0].data.CalibrationStatus[1].stransdisplaystatus\n          // });\n          //  selectedRecord[\"ntranscode\"] = CalibrationData[0];\n        } else {\n          const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          MaintenanceStatus = maintenanceMap.get(\"OptionList\");\n          popUp = \"IDS_INSTRUMENTMAINTENANCEOPENDATE\";\n        }\n\n        let operation = \"create\";\n        let modalTitle = \"IDS_OPENDATE\";\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            isOpen: true,\n            selectedRecord: selectedRecord,\n            operation: operation,\n            modalTitle: modalTitle,\n            CalibrationStatus: CalibrationStatus,\n            MaintenanceStatus: MaintenanceStatus,\n            TimeZoneList: TimeZoneList,\n            screenName: screenName,\n            modalShow: true,\n            ncontrolCode: ncontrolCode,\n            popUp: popUp,\n            loading: false\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[3].data.Status\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const CloseDate = (screenName, userInfo, ncontrolCode, selectedRecord, masterData) => {\n  return function (dispatch) {\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: userInfo\n    });\n\n    if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n      const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 4,\n        ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\n        ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\n      });\n      const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationOpenDateStatus\", {\n        \"userinfo\": userInfo,\n        nFlag: 2,\n        ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode\n      });\n      urlArray = [calibrationStatusService, timeZoneService, UTCtimeZoneService, calibrationValidationService];\n    } else {\n      const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 4,\n        ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\n        ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\n      });\n      const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceOpenCloseDateStatus\", {\n        \"userinfo\": userInfo,\n        nFlag: 2,\n        ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode\n      });\n      urlArray = [maintenanceStatusService, timeZoneService, UTCtimeZoneService, maintenanceValidationService];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      if (response[3].data.OpenCloseStatus === \"Success\") {\n        let CalibrationStatus = [];\n        let MaintenanceStatus = {};\n        let selectedRecord = {};\n        const timezoneMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n        const TimeZoneList = timezoneMap.get(\"OptionList\");\n        selectedRecord = {\n          \"ntzclosedate\": {\n            \"value\": userInfo.ntimezonecode,\n            \"label\": userInfo.stimezoneid\n          },\n          \"stzclosedate\": userInfo.stimezoneid\n        };\n        let date = rearrangeDateFormat(userInfo, response[2].data);\n        selectedRecord[\"dclosedate\"] = date;\n        let popUp = \"\";\n\n        if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n          const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          CalibrationStatus = calibrationMap.get(\"OptionList\");\n          popUp = \"IDS_INSTRUMENTCALIBRATIONCLOSEDATE\"; //     let CalibrationData=[];\n          //  CalibrationData.push({\n          //     \"value\": response[0].data.CalibrationStatus[0].ntranscode,\n          //     \"label\": response[0].data.CalibrationStatus[0].stransstatus\n          // });\n          // selectedRecord[\"ntranscode\"] = CalibrationData[0];\n          //selectedRecord.ntranscode=CalibrationData[0];\n        } else {\n          const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          MaintenanceStatus = maintenanceMap.get(\"OptionList\");\n          popUp = \"IDS_INSTRUMENTMAINTENANCECLOSEDATE\";\n        }\n\n        let operation = \"create\";\n        let modalTitle = \"IDS_CLOSEDATE\";\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            isOpen: true,\n            selectedRecord: selectedRecord,\n            operation: operation,\n            modalTitle: modalTitle,\n            CalibrationStatus: CalibrationStatus,\n            MaintenanceStatus: MaintenanceStatus,\n            TimeZoneList: TimeZoneList,\n            screenName: screenName,\n            modalShow: true,\n            ncontrolCode: ncontrolCode,\n            loading: false,\n            popUp: popUp\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[3].data.Status\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/InstrumentAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","constructOptionList","rearrangeDateFormat","Axios","initRequest","intl","toast","transactionStatus","attachmentType","getInstrumentCombo","screenName","operation","primaryKeyName","masterData","userInfo","ncontrolCode","dispatch","SelectedInsCat","undefined","urlArray","InstrumentCategory","post","Supplier","Manufacturer","InstrumentStatus","Lab","Period","timeZoneService","Instrumentdate","UTCtimeZoneService","userinfo","validationStatus","calibrationStatus","maintenanceStatus","calibrationRequired","ninstrumentcatcode","siteService","InstrumentId","selectedInstrument","all","then","response","expiryDate","currentTime","instcatMap","data","supplierMap","manufMap","inststatusMap","sectionMap","periodMap","timezoneMap","ValidationStatus","CalibrationStatus","MaintenanceStatus","CalibrationRequired","siteList","get","TimeZoneList","selectedRecord","sinstrumentcatname","instrumentCategory","supplier","regionalSite","manufacturer","instrumentstatus","nwindowsperiodminusunit","nwindowsperiodplusunit","nnextcalibrationperiod","lab","ntzmanufdate","ntzpodate","ntzreceivedate","ntzinstallationdate","ntzexpirydate","susername","service","push","value","label","siteMap","validationMap","calibrationMap","maintenanceMap","ncalibrationrequired","timezone","filter","x","ntimezonecode","date","type","payload","isOpen","openModal","loading","catch","error","status","formatMessage","id","message","warn","getSectionUsers","nsectioncode","Users","userName","getCalibrationRequired","getInstrumentDetail","Instrument","ninstrumentcode","modalName","dataState","getAvailableInstData","instItem","url","key","secMap","Section","userMap","LabDefault","openChildModal","info","changeInstrumentCategoryFilter","inputParam","filterInstrumentCategory","methodUrl","inputData","nfilterInstrumentCategory","addInstrumentFile","Instrumentfile","linkMap","LinkMaster","linkmaster","defaultLink","items","item","ndefaultlink","YES","disabled","editObject","nlinkcode","link","nattachmenttypecode","LINK","slinkname","slinkfilename","sfilename","slinkdescription","sfiledesc","nlinkdefaultstatus","ndefaultstatus","sfilesize","nfilesize","length","ssystemfilename","ninstrumentfilecode","AttachmentType","FTP","linkMaster","showSaveContinue","editFiles","getDataForAddEditValidation","validationStatusService","ValidationById","selectedInstrumentValidation","ninstrumentvalidationcode","ValidationData","ntzvalidationdate","stimezoneid","getDataForAddEditCalibration","calibrationStatusService","LastCalibrationDateService","calibrationValidationService","nFlag","ninstrumentcalibrationcode","selectedInstrumentCalibration","CalibrationById","OpenCloseStatus","CalibrationData","Action","ntzlastcalibrationdate","ntzduedate","Date","popUp","Status","getTabDetails","instrumentValidation","instrumentCalibration","instrumentMaintenance","ninstrumentmaintenancecode","getDataForAddEditMaintenance","LastMaintenanceDateService","maintenanceStatusService","maintenanceValidationService","selectedInstrumentMaintenance","MaintenanceById","MaintenanceData","ntzlastmaintenancedate","OpenDate","modalTitle","modalShow","CloseDate"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    sortData,\r\n    constructOptionList,\r\n    rearrangeDateFormat\r\n} from '../components/CommonScript';\r\nimport Axios from 'axios';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    transactionStatus,\r\n    attachmentType\r\n} from \"../components/Enumeration\";\r\n\r\nexport function getInstrumentCombo(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if (masterData.SelectedInsCat !== null || masterData.SelectedInsCat !== undefined) {\r\n        let urlArray = [];\r\n        const InstrumentCategory = rsapi.post(\"/instrumentcategory/fetchinstrumentcategory\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const Supplier = rsapi.post(\"/instrument/getSupplier\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const Manufacturer = rsapi.post(\"/instrument/getManufacturer\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const InstrumentStatus = rsapi.post(\"/instrument/getInstrumentStatus\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const Lab = rsapi.post(\"/section/getSection\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const Period = rsapi.post(\"/period/getPeriodByControl\", {\r\n            \"ncontrolcode\": ncontrolCode,\r\n            \"userinfo\": userInfo\r\n        });\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n\r\n        const Instrumentdate = rsapi.post(\"/instrument/addInstrumentDate\", {\r\n            \"ncontrolcode\": ncontrolCode,\r\n            \"userinfo\": userInfo\r\n        });\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo: userInfo\r\n        });\r\n        const validationStatus = rsapi.post(\"instrument/getInstrumentValidationStatus\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const calibrationStatus = rsapi.post(\"instrument/getInstrumentCalibrationStatus\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const maintenanceStatus = rsapi.post(\"instrument/getInstrumentMaintenanceStatus\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const calibrationRequired =rsapi.post(\"instrument/getCalibrationRequired\",{\r\n            \"ninstrumentcatcode\":masterData.SelectedInsCat.ninstrumentcatcode,\r\n            userinfo:userInfo\r\n        });\r\n        const siteService = rsapi.post(\"site/getSite\",{userinfo:userInfo});\r\n        if (operation === \"create\") {\r\n            urlArray = [InstrumentCategory, Supplier, Manufacturer, InstrumentStatus, Lab, Period, timeZoneService, Instrumentdate, UTCtimeZoneService,validationStatus,calibrationStatus,maintenanceStatus,calibrationRequired,siteService];\r\n\r\n        } else {\r\n            const InstrumentId = rsapi.post(\"/instrument/getActiveInstrumentById\", {\r\n                [primaryKeyName]: masterData.selectedInstrument[primaryKeyName],\r\n                \"userinfo\": userInfo\r\n            });\r\n            //const ManufacturerByID = rsapi.post(\"/manufacturer/getManufacturerById\", { [primaryKeyName] :masterData.selectedManufacturer[primaryKeyName], \"userinfo\": userInfo });\r\n            urlArray = [InstrumentCategory, Supplier, Manufacturer, InstrumentStatus, Lab, Period, timeZoneService, InstrumentId, Instrumentdate, UTCtimeZoneService,siteService];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                let expiryDate = undefined;\r\n                let currentTime = undefined;\r\n                \r\n                const instcatMap = constructOptionList(response[0].data || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, false);\r\n\r\n                const supplierMap = constructOptionList(response[1].data.Supplier || [], \"nsuppliercode\",\r\n                    \"ssuppliername\", undefined, undefined, false);\r\n\r\n                const manufMap = constructOptionList(response[2].data.Manufacturer || [], \"nmanufcode\",\r\n                    \"smanufname\", undefined, undefined, false);\r\n\r\n                const inststatusMap = constructOptionList(response[3].data || [], \"ntranscode\",\r\n                    \"stransstatus\", undefined, undefined, false);\r\n\r\n                const sectionMap = constructOptionList(response[4].data || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, false);\r\n\r\n                const periodMap = constructOptionList(response[5].data || [], \"nperiodcode\",\r\n                    \"speriodname\", undefined, undefined, false);\r\n\r\n                const timezoneMap = constructOptionList(response[6].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, false);\r\n\r\n                // const validationMap={};\r\n                // const calibrationMap ={};\r\n                // const maintenanceMap ={};\r\n                let ValidationStatus =[];\r\n                let CalibrationStatus=[];\r\n                let MaintenanceStatus=[];\r\n                let CalibrationRequired =\"\";\r\n                let siteList=[];\r\n\r\n                const InstrumentCategory = instcatMap.get(\"OptionList\");\r\n                const Supplier = supplierMap.get(\"OptionList\");\r\n                const Manufacturer = manufMap.get(\"OptionList\");\r\n                const InstrumentStatus = inststatusMap.get(\"OptionList\");\r\n                const Lab = sectionMap.get(\"OptionList\");\r\n                const Period = periodMap.get(\"OptionList\");\r\n\r\n                const TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                \r\n\r\n                let selectedRecord = {\"ninstrumentcatcode\": {\r\n                            \"value\": masterData.SelectedInsCat.ninstrumentcatcode,\r\n                             \"label\": masterData.SelectedInsCat.sinstrumentcatname\r\n                         }};\r\n                // let selectedRecord = {\r\n                //     \"ninstrumentcatcode\": {\r\n                //         \"value\": masterData.SelectedInsCat.ninstrumentcatcode,\r\n                //         \"label\": masterData.SelectedInsCat.sinstrumentcatname\r\n                //     },\r\n                //     \"ntzmanufdate\": {\r\n                //         \"value\": userInfo.ntimezonecode,\r\n                //         \"label\": userInfo.stimezoneid\r\n                //     },\r\n                //     //\"stzmanufdate\":userInfo.stimezoneid\r\n\r\n                //     \"ntzpodate\": {\r\n                //         \"value\": userInfo.ntimezonecode,\r\n                //         \"label\": userInfo.stimezoneid\r\n                //     },\r\n                //     \"stzpodate\": userInfo.stimezoneid,\r\n\r\n\r\n                //     \"ntzreceivedate\": {\r\n                //         \"value\": userInfo.ntimezonecode,\r\n                //         \"label\": userInfo.stimezoneid\r\n                //     },\r\n                //     \"stzreceivedate\": userInfo.stimezoneid,\r\n\r\n\r\n                //     \"ntzinstallationdate\": {\r\n                //         \"value\": userInfo.ntimezonecode,\r\n                //         \"label\": userInfo.stimezoneid\r\n                //     },\r\n                //     \"stzinstallationdate\": userInfo.stimezoneid,\r\n\r\n\r\n                //     \"ntzexpirydate\": {\r\n                //         \"value\": userInfo.ntimezonecode,\r\n                //         \"label\": userInfo.stimezoneid\r\n                //     },\r\n                //     \"stzexpirydate\": userInfo.stimezoneid\r\n                // };\r\n                let instrumentCategory = [];\r\n                let supplier = [];\r\n                let regionalSite = [];\r\n                let manufacturer = [];\r\n                let instrumentstatus = [];\r\n                let nwindowsperiodminusunit = [];\r\n                let nwindowsperiodplusunit = [];;\r\n                let nnextcalibrationperiod=[];\r\n                let lab = [];\r\n                let ntzmanufdate = [];\r\n                let ntzpodate = [];\r\n                let ntzreceivedate = [];\r\n                let ntzinstallationdate = [];\r\n                let ntzexpirydate = [];\r\n                let susername = [];\r\n                let service = [];\r\n                // let validation = [];\r\n                // let calibration = [];\r\n                // let maintenance = [];\r\n\r\n                //if (operation === \"create\") {\r\n                    // let date = rearrangeDateFormat(userInfo, response[8].data);\r\n                    // selectedRecord[\"dmanufacdate\"] = date; //new Date(response[8].data);\r\n                    // selectedRecord[\"dpodate\"] = date;\r\n                    // selectedRecord[\"dreceiveddate\"] = date;\r\n                    // selectedRecord[\"dinstallationdate\"] = date;\r\n                    // currentTime = date;\r\n                    // if (response[7].data[\"ExpiryDate\"] !== \"\") {\r\n                    //     expiryDate = rearrangeDateFormat(userInfo, response[7].data[\"ExpiryDate\"]); //new Date(response[7].data[\"ExpiryDate\"]);\r\n                    //     selectedRecord[\"dexpirydate\"] = expiryDate;\r\n                    // }\r\n             //   }\r\n                if (operation === \"update\") {\r\n                    selectedRecord = response[7].data;\r\n                    instrumentCategory.push({\r\n                        \"value\": response[7].data[\"ninstrumentcatcode\"],\r\n                        \"label\": response[7].data[\"sinstrumentcatname\"]\r\n                    });\r\n                    supplier.push({\r\n                        \"value\": response[7].data[\"nsuppliercode\"],\r\n                        \"label\": response[7].data[\"ssuppliername\"]\r\n                    });\r\n                    regionalSite.push({\r\n                        \"value\": response[7].data[\"nregionalsitecode\"],\r\n                        \"label\": response[7].data[\"sregionalsitename\"]\r\n                    });\r\n                    service.push({\r\n                        \"value\": response[7].data[\"nservicecode\"],\r\n                        \"label\": response[7].data[\"sserviceby\"]\r\n                    });\r\n                    manufacturer.push({\r\n                        \"value\": response[7].data[\"nmanufcode\"],\r\n                        \"label\": response[7].data[\"smanufname\"]\r\n                    });\r\n                    instrumentstatus.push({\r\n                        \"value\": response[7].data[\"ntranscode\"],\r\n                        \"label\": response[7].data[\"sactivestatus\"]\r\n                    });\r\n                    nwindowsperiodminusunit.push({\r\n                        \"value\": response[7].data[\"nwindowsperiodminusunit\"],\r\n                        \"label\": response[7].data[\"swindowsperiodminusunit\"]\r\n                    });\r\n                    nwindowsperiodplusunit.push({\r\n                        \"value\": response[7].data[\"nwindowsperiodplusunit\"],\r\n                        \"label\": response[7].data[\"swindowsperiodplusunit\"]\r\n                    });\r\n                    nnextcalibrationperiod.push({\r\n                        \"value\": response[7].data[\"nnextcalibrationperiod\"],\r\n                        \"label\": response[7].data[\"snextcalibrationperiod\"]\r\n                    });\r\n                    lab.push({\r\n                        \"value\": response[7].data[\"nsectioncode\"],\r\n                        \"label\": response[7].data[\"ssectionname\"]\r\n                    })\r\n                    ntzmanufdate.push({\r\n                        \"value\": response[7].data[\"ntzmanufdate\"],\r\n                        \"label\": response[7].data[\"stzmanufdate\"]\r\n                    })\r\n                    ntzpodate.push({\r\n                        \"value\": response[7].data[\"ntzpodate\"],\r\n                        \"label\": response[7].data[\"stzpodate\"]\r\n                    })\r\n                    ntzreceivedate.push({\r\n                        \"value\": response[7].data[\"ntzreceivedate\"],\r\n                        \"label\": response[7].data[\"stzreceivedate\"]\r\n                    })\r\n                    ntzinstallationdate.push({\r\n                        \"value\": response[7].data[\"ntzinstallationdate\"],\r\n                        \"label\": response[7].data[\"stzinstallationdate\"]\r\n                    })\r\n                    ntzexpirydate.push({\r\n                        \"value\": response[7].data[\"ntzexpirydate\"],\r\n                        \"label\": response[7].data[\"stzexpirydate\"]\r\n                    })\r\n                    susername.push({\r\n                        \"value\": response[7].data[\"nusercode1\"],\r\n                        \"label\": response[7].data[\"susername\"]\r\n                    })\r\n                    // validation.push({\r\n                    //     \"value\": response[8].data[\"ntranscode\"],\r\n                    //     \"label\": response[8].data[\"stransdisplaystatus\"]\r\n                    // })\r\n                    // calibration.push({\r\n                    //     \"value\": response[9].data[\"ntranscode\"],\r\n                    //     \"label\": response[9].data[\"stransdisplaystatus\"]\r\n                    // })\r\n                    // maintenance.push({\r\n                    //     \"value\": response[10].data[\"ntranscode\"],\r\n                    //     \"label\": response[10].data[\"stransdisplaystatus\"]\r\n                    // })\r\n                    if (response[7].data[\"smanufacdate\"] !== \"\") {\r\n\r\n                        selectedRecord[\"dmanufacdate\"] = rearrangeDateFormat(userInfo, response[7].data[\"smanufacdate\"]); //new Date(response[7].data[\"smanufacdate\"]);\r\n                    }\r\n\r\n                    if (response[7].data[\"spodate\"] !== \"\") {\r\n                        selectedRecord[\"dpodate\"] = rearrangeDateFormat(userInfo, response[7].data[\"spodate\"]); //new Date(response[7].data[\"spodate\"]);\r\n                    }\r\n                    // else{\r\n                    //     selectedRecord[\"dpodate\"] = \" \";\r\n                    // }\r\n\r\n                    if (response[7].data[\"sreceiveddate\"] !== \"\") {\r\n                        selectedRecord[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sreceiveddate\"]); //new Date(response[7].data[\"sreceiveddate\"]);\r\n                    }\r\n                    if (response[7].data[\"sinstallationdate\"] !== \"\") {\r\n                        selectedRecord[\"dinstallationdate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sinstallationdate\"]); //new Date(response[7].data[\"sinstallationdate\"]);\r\n                    }\r\n\r\n                    if (response[7].data[\"sexpirydate\"] !== \"\") {\r\n                        selectedRecord[\"dexpirydate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sexpirydate\"]); //new Date(response[7].data[\"sexpirydate\"]);\r\n                    }\r\n\r\n\r\n                    selectedRecord[\"ninstrumentcatcode\"] = instrumentCategory[0];\r\n                    selectedRecord[\"nsuppliercode\"] = supplier[0];\r\n                    selectedRecord[\"nservicecode\"] = service[0];\r\n                    selectedRecord[\"nregionalsitecode\"] = regionalSite[0];\r\n                    if (manufacturer[0].value !== -1)\r\n                        selectedRecord[\"nmanufcode\"] = manufacturer[0];\r\n                    if (instrumentstatus[0].value !== -1)\r\n                        selectedRecord[\"ntranscode\"] = instrumentstatus[0];\r\n                    if (nwindowsperiodminusunit[0].value !== -1)\r\n                        selectedRecord[\"nwindowsperiodminusunit\"] = nwindowsperiodminusunit[0];\r\n                    if (nwindowsperiodplusunit[0].value !== -1)\r\n                        selectedRecord[\"nwindowsperiodplusunit\"] = nwindowsperiodplusunit[0];\r\n                    if (nnextcalibrationperiod[0].value !== -1)\r\n                        selectedRecord[\"nnextcalibrationperiod\"] = nnextcalibrationperiod[0];\r\n                    selectedRecord[\"nsectioncode\"] = lab[0];\r\n                    selectedRecord[\"ntzmanufdate\"] = ntzmanufdate[0];\r\n                    selectedRecord[\"stzmanufdate\"] = ntzmanufdate[0].label;\r\n                    selectedRecord[\"ntzpodate\"] = ntzpodate[0];\r\n                    selectedRecord[\"stzpodate\"] = ntzpodate[0].label;\r\n                    selectedRecord[\"ntzreceivedate\"] = ntzreceivedate[0];\r\n                    selectedRecord[\"stzreceivedate\"] = ntzreceivedate[0].label;\r\n                    selectedRecord[\"ntzinstallationdate\"] = ntzinstallationdate[0];\r\n                    selectedRecord[\"stzinstallationdate\"] = ntzinstallationdate[0].label;\r\n                    selectedRecord[\"ntzexpirydate\"] = ntzexpirydate[0];\r\n                    selectedRecord[\"stzexpirydate\"] = ntzexpirydate[0].label;\r\n                    selectedRecord[\"susername\"] = susername[0];\r\n                  //  selectedRecord[\"ntranscode\"] = validation[0];\r\n                 //  selectedRecord[\"ntranscode\"] = calibration[0];\r\n               //     selectedRecord[\"ntranscode\"] = maintenance[0];\r\n               const siteMap = constructOptionList(response[10].data || [],\"nsitecode\", \"ssitename\",\r\n               undefined, undefined, true) ;\r\n               siteList = siteMap.get(\"OptionList\");\r\n                }\r\n                else{\r\n                    const validationMap = constructOptionList(response[9].data.ValidationStatus || [], \"ntranscode\",\r\n                    \"stransstatus\", undefined, undefined, false);\r\n\r\n                    const calibrationMap = constructOptionList(response[10].data.CalibrationStatus || [], \"ntranscode\",\r\n                    \"stransstatus\", undefined, undefined, false);\r\n\r\n                    const maintenanceMap = constructOptionList(response[11].data.MaintenanceStatus || [], \"ntranscode\",\r\n                    \"stransstatus\", undefined, undefined, false);\r\n\r\n                    CalibrationRequired =response[12].data.ncalibrationrequired;\r\n                    \r\n                    const siteMap = constructOptionList(response[13].data || [],\"nsitecode\", \"ssitename\",\r\n                    undefined, undefined, true) ;\r\n                    siteList = siteMap.get(\"OptionList\");\r\n\r\n                 ValidationStatus = validationMap.get(\"OptionList\");\r\n                 CalibrationStatus = calibrationMap.get(\"OptionList\");\r\n                 MaintenanceStatus = maintenanceMap.get(\"OptionList\");\r\n\r\n                   const timezone=  TimeZoneList.filter(x=>x.value===userInfo.ntimezonecode);\r\n\r\n                   selectedRecord[\"ntzmanufdate\"] = timezone[0];\r\n                  // selectedRecord[\"stzmanufdate\"] = ntzmanufdate[0].label;\r\n                   selectedRecord[\"ntzpodate\"] = timezone[0];\r\n                  // selectedRecord[\"stzpodate\"] = ntzpodate[0].label;\r\n                   selectedRecord[\"ntzreceivedate\"] = timezone[0];\r\n                  // selectedRecord[\"stzreceivedate\"] = ntzreceivedate[0].label;\r\n                   selectedRecord[\"ntzinstallationdate\"] = timezone[0];\r\n                  // selectedRecord[\"stzinstallationdate\"] = ntzinstallationdate[0].label;\r\n                   selectedRecord[\"ntzexpirydate\"] = timezone[0];\r\n                   //selectedRecord[\"stzexpirydate\"] = ntzexpirydate[0].label;\r\n\r\n\r\n                   let date = rearrangeDateFormat(userInfo, response[8].data);\r\n                     selectedRecord[\"dclosedate\"] = date; \r\n                     selectedRecord[\"dopendate\"] = date;\r\n                     selectedRecord[\"dlastcalibrationdate\"] = date; \r\n                     selectedRecord[\"dlastmaintenancedate\"] = date;\r\n                     selectedRecord[\"dduedate\"] = date; \r\n                     selectedRecord[\"dvalidationdate\"] = date;\r\n\r\n                     selectedRecord[\"ntzclosedate\"] = timezone[0]; \r\n                     selectedRecord[\"ntzopendate\"] = timezone[0];\r\n                     selectedRecord[\"ntzlastcalibrationdate\"] = timezone[0]; \r\n                     selectedRecord[\"ntzlastmaintenancedate\"] = timezone[0];\r\n                     selectedRecord[\"ntzduedate\"] = timezone[0]; \r\n                     selectedRecord[\"ntzvalidationdate\"] = timezone[0];\r\n\r\n                }\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        InstrumentCategory,\r\n                        Supplier,\r\n                        Manufacturer,\r\n                        InstrumentStatus,\r\n                        instrumentCategory: instrumentCategory,\r\n                        supplier: supplier,\r\n                        manufacturer: manufacturer,\r\n                        Lab,\r\n                        Period,\r\n                        TimeZoneList,\r\n                        ValidationStatus,\r\n                        CalibrationStatus,\r\n                        MaintenanceStatus,\r\n                        CalibrationRequired,\r\n                        siteList,\r\n                        isOpen: true,\r\n                        selectedRecord: selectedRecord,\r\n                        operation: operation,\r\n                        screenName: screenName,\r\n                        openModal: true,\r\n                        ncontrolCode: ncontrolCode,\r\n                        loading: false,\r\n                        currentTime,\r\n                        expiryDate\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n        }\r\n        else{\r\n            toast.warn(intl.formatMessage({ id: \"IDS_INSTRUMENTCATEGORYNOTAVALIABLE\"}));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function getSectionUsers(nsectioncode, userInfo, selectedRecord, screenName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"instrument/getSectionBasedUser\", {\r\n                \"nsectioncode\": nsectioncode\r\n            }, {\r\n                userinfo: userInfo\r\n            })\r\n            .then(response => {\r\n                //console.log(\" response:\", response); \r\n                let Users = [];\r\n                if (screenName === \"IDS_SECTION\") {\r\n                    //let sectionusers=[];\r\n                    const userName = constructOptionList(response.data || [], \"nusercode\",\r\n                        \"susername\", undefined, undefined, false);\r\n                    Users = userName.get(\"OptionList\");\r\n                    //selectedRecord[\"nusercode\"]=\"\";\r\n                    selectedRecord[\"nusercode\"] = undefined; //{label:SectionUsers[0].label,value:SectionUsers[0].value,item:SectionUsers[0]};\r\n                } else {\r\n                    Users = response.data;\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Users,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getCalibrationRequired(ninstrumentcatcode, userInfo, selectedRecord, screenName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"instrument/getCalibrationRequired\", {\r\n                \"ninstrumentcatcode\": ninstrumentcatcode,userinfo: userInfo})\r\n            .then(response => {\r\n                let CalibrationRequired = [];\r\n                CalibrationRequired=response.data.ncalibrationrequired\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        CalibrationRequired,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getInstrumentDetail(Instrument, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"instrument/getInstrument\", {\r\n                ninstrumentcode: Instrument.ninstrumentcode,\r\n                userinfo: userInfo\r\n            })\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data\r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        operation: null,\r\n                        modalName: undefined,\r\n                        loading: false,\r\n                        dataState: undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const getAvailableInstData = (instItem, url, key, screenName, userInfo, ncontrolCode, selectedRecord) => {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let url = ''\r\n\r\n        url = \"/instrument/getUsers\";\r\n\r\n        return rsapi.post(url, {\r\n                \"userinfo\": userInfo\r\n            })\r\n            .then(response => {\r\n\r\n                const secMap = constructOptionList(response.data.Section || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, false);\r\n                const userMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                    \"susername\", undefined, undefined, false);\r\n                const Lab = secMap.get(\"OptionList\");\r\n                const LabDefault = secMap.get(\"DefaultValue\");\r\n                if (LabDefault !== undefined) {\r\n                    selectedRecord = {\r\n                        \"nsectioncode\": {\r\n                            \"value\": LabDefault.value,\r\n                            \"label\": LabDefault.label\r\n                        },\r\n                    }\r\n                }\r\n                const Users = userMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n\r\n                        Lab,\r\n                        Users,\r\n                        isOpen: true,\r\n                        selectedRecord,\r\n                        operation: \"create\",\r\n                        screenName: screenName,\r\n                        // openModal: true,\r\n                        openChildModal: true,\r\n                        ncontrolCode: ncontrolCode,\r\n                        instItem: instItem,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 417) {\r\n                    toast.info(error.response.data)\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const changeInstrumentCategoryFilter = (inputParam, filterInstrumentCategory) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/instrument/get\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                //const masterData = response.data\r\n                const masterData = {...inputParam.masterData,...response.data}\r\n                sortData(masterData);\r\n                    \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        dataState: undefined,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterInstrumentCategory,\r\n                            nfilterInstrumentCategory: inputParam.inputData.nfilterInstrumentCategory\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport const addInstrumentFile = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\r\n            userinfo: inputParam.userInfo\r\n        })];\r\n        if (inputParam.operation === \"update\") {\r\n        urlArray.push(rsapi.post(\"/instrument/editInstrumentFile\", {\r\n            userinfo: inputParam.userInfo,\r\n            Instrumentfile: inputParam.selectedRecord\r\n        }))\r\n    }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                // let selectedRecord = {};\r\n                // let editObject = {};\r\n                // let operation = \"update\";\r\n                // editObject = response[0].data;\r\n\r\n\r\n                const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\r\n                const linkmaster = linkMap.get(\"OptionList\");\r\n                let selectedRecord = {};\r\n                const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\r\n                let disabled = false;\r\n                let editObject = {};\r\n                if (inputParam.operation === \"update\") {\r\n                    editObject = response[1].data;\r\n                    let nlinkcode = {};\r\n                    let link = {};\r\n                    if (editObject.nattachmenttypecode === attachmentType.LINK) {\r\n                        nlinkcode = {\r\n                            \"label\": editObject.slinkname,\r\n                            \"value\": editObject.nlinkcode\r\n                        }\r\n\r\n                        link = {\r\n                            slinkfilename:editObject.sfilename,\r\n                            slinkdescription:editObject.sfiledesc,\r\n                            nlinkdefaultstatus:editObject.ndefaultstatus,\r\n                            sfilesize:'',\r\n                            nfilesize:0,\r\n                            ndefaultstatus:4,\r\n                            sfilename:'',\r\n                        }\r\n\r\n                    } else {\r\n                        nlinkcode = defaultLink.length > 0 ? defaultLink[0] : \"\" //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\"\r\n                        link = {\r\n                            slinkfilename:'',\r\n                            slinkdescription:'',\r\n                            nlinkdefaultstatus:4,\r\n                            sfiledesc: editObject.sfiledesc,\r\n                            sfilesize:editObject.sfilesize,\r\n                            nfilesize:editObject.nfilesize,\r\n                            ndefaultstatus:editObject.ndefaultstatus,\r\n                            sfilename:editObject.sfilename,\r\n                            ssystemfilename:editObject.ssystemfilename\r\n                        }\r\n                    }\r\n\r\n\r\n\r\n                    selectedRecord = {\r\n                        ninstrumentfilecode: editObject.ninstrumentfilecode,\r\n                        // sfiledesc: editObject.sfiledesc,\r\n    \r\n                        // sfilename: editObject.sfilename,\r\n                        // sdescription: editObject.sdescription,\r\n                        // ssystemfilename: editObject.ssystemfilename,\r\n                        nattachmenttypecode:editObject.nattachmenttypecode,\r\n                        ...link, \r\n                        //...editObject,\r\n                        nlinkcode,\r\n                    };\r\n                } else {\r\n                    selectedRecord = {\r\n                        nattachmenttypecode:response[0].data.AttachmentType.length>0?\r\n                        response[0].data.AttachmentType[0].nattachmenttypecode:attachmentType.FTP,\r\n                        nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\", //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\r\n                        disabled\r\n                    };\r\n                }\r\n\r\n                // selectedRecord = {\r\n                //     ninstrumentfilecode: editObject.ninstrumentfilecode,\r\n                //     sfiledesc: editObject.sfiledesc,\r\n\r\n                //     sfilename: editObject.sfilename,\r\n                //     sdescription: editObject.sdescription,\r\n                //     ssystemfilename: editObject.ssystemfilename\r\n                // };\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        // openModal: true,\r\n                        openChildModal: true,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord,\r\n                        loading: false,\r\n                        linkMaster: linkmaster,\r\n                        showSaveContinue: false,\r\n                        editFiles: editObject.nattachmenttypecode === \"1\" ? editObject : {}\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getDataForAddEditValidation = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {userinfo: userInfo});\r\n        const validationStatusService = rsapi.post(\"instrument/getInstrumentValidationStatus\", {\"userinfo\": userInfo});\r\n\r\n        if (operation === \"create\") {\r\n            urlArray = [validationStatusService, UTCtimeZoneService, timeZoneService];\r\n\r\n        } else {\r\n            const ValidationById = rsapi.post(\"instrument/getActiveInstrumentValidationById\", {\r\n                [primaryKeyName]: masterData.selectedInstrumentValidation.ninstrumentvalidationcode,\r\n                \"userinfo\": userInfo\r\n            });\r\n            urlArray = [validationStatusService, UTCtimeZoneService, timeZoneService, ValidationById];\r\n\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                let ValidationData = [];\r\n\r\n\r\n                const validationMap = constructOptionList(response[0].data.ValidationStatus || [], \"ntranscode\",\r\n                    \"stransstatus\", undefined, undefined, false);\r\n\r\n                const ValidationStatus = validationMap.get(\"OptionList\");\r\n\r\n                let ntzvalidationdate = [];\r\n                const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, false);\r\n\r\n                const TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                if (operation === \"create\") {\r\n                     selectedRecord = {\r\n                        \"ntzvalidationdate\": {\r\n                            \"value\": userInfo.ntimezonecode,\r\n                            \"label\": userInfo.stimezoneid\r\n                        },\r\n                        \"stzvalidationdate\": userInfo.stimezoneid,\r\n                    };\r\n                    let date = rearrangeDateFormat(userInfo, response[1].data);\r\n                    selectedRecord[\"dvalidationdate\"] = date;\r\n\r\n                }\r\n                if (operation === \"update\") {\r\n\r\n                    ValidationData.push({\r\n                        \"value\": response[3].data[\"nvalidationstatus\"],\r\n                        \"label\": response[3].data[\"stransdisplaystatus\"]\r\n                    });\r\n                    selectedRecord = response[3].data;\r\n                    selectedRecord[\"ntranscode\"] = ValidationData[0];\r\n\r\n                    ntzvalidationdate.push({\r\n                        \"value\": response[3].data[\"ntzvalidationdate\"],\r\n                        \"label\": response[3].data[\"stzvalidationdate\"]\r\n                    });\r\n                    selectedRecord[\"ntzvalidationdate\"] = ntzvalidationdate[0];\r\n                    if (response[3].data[\"svalidationdate\"] !== \"\") {\r\n\r\n                        selectedRecord[\"dvalidationdate\"] = rearrangeDateFormat(userInfo, response[3].data[\"svalidationdate\"]); //new Date(response[7].data[\"smanufacdate\"]);\r\n                    }\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ValidationStatus,\r\n                        TimeZoneList,\r\n                        selectedRecord: selectedRecord,\r\n                        isOpen: true,\r\n                        operation: operation,\r\n                        screenName: screenName,\r\n                        // openModal: true,\r\n                        openChildModal: true,\r\n                        ncontrolCode: ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const getDataForAddEditCalibration = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n     \r\n        const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationStatus\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const LastCalibrationDateService =\r\n        rsapi.post(\"instrument/getInstrumentLastCalibrationDate\", {\r\n            \"userinfo\": userInfo,\r\n            ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\r\n\r\n        });\r\n        if (operation === \"create\") {\r\n            const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 1,\r\n                ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\r\n            });\r\n           \r\n            urlArray = [calibrationStatusService, LastCalibrationDateService, timeZoneService, calibrationValidationService];\r\n\r\n        } else {\r\n            const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\r\n                ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\r\n\r\n            });\r\n\r\n            const CalibrationById = rsapi.post(\"instrument/getActiveInstrumentCalibrationById\", {\r\n                [primaryKeyName]: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\r\n                \"userinfo\": userInfo\r\n            });\r\n\r\n            urlArray = [calibrationStatusService, LastCalibrationDateService, timeZoneService, calibrationValidationService, CalibrationById];\r\n\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let CalibrationStatus = [];\r\n                let TimeZoneList = [];\r\n                if (response[3].data.OpenCloseStatus === \"Success\") {\r\n                    let selectedRecord = {};\r\n                    let CalibrationData = [];\r\n\r\n\r\n                    const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\",\r\n                        \"stransstatus\", undefined, undefined, false);\r\n\r\n                    CalibrationStatus = calibrationMap.get(\"OptionList\");\r\n                    let Action;\r\n                    let ntzlastcalibrationdate = [];\r\n                    let ntzduedate = [];\r\n                    const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, false);\r\n\r\n                    TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                    if (operation === \"create\") {\r\n                        selectedRecord = {\r\n                            \"ntzlastcalibrationdate\": {\r\n                                \"value\": userInfo.ntimezonecode,\r\n                                \"label\": userInfo.stimezoneid\r\n                            },\r\n                            \"stzlastcalibrationdate\": userInfo.stimezoneid,\r\n\r\n                            \"ntzduedate\": {\r\n                                \"value\": userInfo.ntimezonecode,\r\n                                \"label\": userInfo.stimezoneid\r\n                            },\r\n                            \"stzduedate\": userInfo.stimezoneid\r\n                        };\r\n                        let date = rearrangeDateFormat(userInfo, response[1].data.date);\r\n                        selectedRecord[\"dlastcalibrationdate\"] = date;\r\n                        selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, new Date());\r\n                        Action = 'Add';\r\n\r\n                    }\r\n                    if (operation === \"update\") {\r\n                        Action = 'Edit';\r\n\r\n                        CalibrationData.push({\r\n                            \"value\": response[4].data[\"ncalibrationstatus\"],\r\n                            \"label\": response[4].data[\"stransdisplaystatus\"]\r\n                        });\r\n                        selectedRecord = response[4].data;\r\n                        selectedRecord[\"ntranscode\"] = CalibrationData[0];\r\n\r\n                        ntzlastcalibrationdate.push({\r\n                            \"value\": response[4].data[\"ntzlastcalibrationdate\"],\r\n                            \"label\": response[4].data[\"stzlastcalibrationdate\"]\r\n                        });\r\n                        ntzduedate.push({\r\n                            \"value\": response[4].data[\"ntzduedate\"],\r\n                            \"label\": response[4].data[\"stzduedate\"]\r\n                        });\r\n                        selectedRecord[\"ntzlastcalibrationdate\"] = ntzlastcalibrationdate[0];\r\n                        selectedRecord[\"ntzduedate\"] = ntzduedate[0];\r\n                        if (response[4].data[\"slastcalibrationdate\"] !== \"\") {\r\n\r\n                            selectedRecord[\"dlastcalibrationdate\"] = rearrangeDateFormat(userInfo, response[4].data[\"slastcalibrationdate\"]);\r\n                        }\r\n                        if (response[4].data[\"sduedate\"] !== \"\") {\r\n\r\n                            selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"sduedate\"]);\r\n                        }\r\n\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            CalibrationStatus,\r\n                            Action: Action,\r\n                            TimeZoneList,\r\n                            selectedRecord: selectedRecord,\r\n                            isOpen: true,\r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            // openModal: true,\r\n                            openChildModal: true,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false,\r\n                            popUp:\"\"\r\n                        }\r\n                    });\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[3].data.Status\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: { \r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const getTabDetails = (inputParam) => {\r\n    return function (dispatch) {\r\n\r\n        const instrumentValidation = inputParam.instrumentValidation;\r\n        const instrumentCalibration = inputParam.instrumentCalibration;\r\n        const instrumentMaintenance = inputParam.instrumentMaintenance;\r\n        let urlArray = [];\r\n        dispatch(initRequest(true));\r\n        if (inputParam.screenName === \"IDS_INSTRUMENTVALIDATION\") {\r\n            urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\r\n                ninstrumentcode: instrumentValidation.ninstrumentcode,\r\n                \"nFlag\": inputParam.nFlag,\r\n                ninstrumentvalidationcode: instrumentValidation.ninstrumentvalidationcode,\r\n                userinfo: inputParam.userInfo\r\n            }))\r\n        } else if (inputParam.screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n            urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\r\n                ninstrumentcode: instrumentCalibration.ninstrumentcode,\r\n                \"nFlag\": inputParam.nFlag,\r\n                ninstrumentcalibrationcode: instrumentCalibration.ninstrumentcalibrationcode,\r\n                userinfo: inputParam.userInfo\r\n            }))\r\n        } else if (inputParam.screenName === \"IDS_INSTRUMENTMAINTENANCE\") {\r\n            urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\r\n                ninstrumentcode: instrumentMaintenance.ninstrumentcode,\r\n                \"nFlag\": inputParam.nFlag,\r\n                ninstrumentmaintenancecode: instrumentMaintenance.ninstrumentmaintenancecode,\r\n                userinfo: inputParam.userInfo\r\n            }))\r\n        }\r\n\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                let masterData = inputParam.masterData\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response[0].data\r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getDataForAddEditMaintenance = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        \r\n        const LastMaintenanceDateService =\r\n                rsapi.post(\"instrument/getInstrumentLastMaintenanceDate\", {\r\n                    \"userinfo\": userInfo,\r\n                    ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\r\n        });\r\n        \r\n        const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceStatus\", {\r\n            \"userinfo\": userInfo  \r\n         });\r\n\r\n        if (operation === \"create\") {\r\n            const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 1,\r\n                ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\r\n            });\r\n\r\n            urlArray = [maintenanceStatusService, LastMaintenanceDateService, timeZoneService, maintenanceValidationService];\r\n\r\n        } else {\r\n            const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\r\n                ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\r\n            });\r\n\r\n            const MaintenanceById = rsapi.post(\"instrument/getActiveInstrumentMaintenanceById\", {\r\n                [primaryKeyName]: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\r\n                \"userinfo\": userInfo\r\n            });\r\n\r\n            urlArray = [maintenanceStatusService, LastMaintenanceDateService, timeZoneService, maintenanceValidationService, MaintenanceById];\r\n\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let MaintenanceStatus = [];\r\n                let TimeZoneList = [];\r\n                if (response[3].data.OpenCloseStatus === \"Success\") {\r\n                    let selectedRecord = {};\r\n                    let MaintenanceData = [];\r\n\r\n                    const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\",\r\n                        \"stransstatus\", undefined, undefined, false);\r\n\r\n                        MaintenanceStatus = maintenanceMap.get(\"OptionList\");\r\n                    let Action;\r\n                    let ntzlastmaintenancedate = [];\r\n                    let ntzduedate = [];\r\n                    const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, false);\r\n\r\n                    TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                    if (operation === \"create\") {\r\n                        selectedRecord = {\r\n                            \"ntzlastmaintenancedate\": {\r\n                                \"value\": userInfo.ntimezonecode,\r\n                                \"label\": userInfo.stimezoneid\r\n                            },\r\n                            \"stzlastmaintenancedate\": userInfo.stimezoneid,\r\n\r\n                            \"ntzduedate\": {\r\n                                \"value\": userInfo.ntimezonecode,\r\n                                \"label\": userInfo.stimezoneid\r\n                            },\r\n                            \"stzduedate\": userInfo.stimezoneid\r\n                        };\r\n                        let date = rearrangeDateFormat(userInfo, response[1].data.date);\r\n                        selectedRecord[\"dlastmaintenancedate\"] = date;\r\n                        selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, new Date());\r\n                        Action = 'Add';\r\n\r\n                    }\r\n                    if (operation === \"update\") {\r\n                        Action = 'Edit';\r\n\r\n                        MaintenanceData.push({\r\n                            \"value\": response[4].data[\"nmaintenancestatus\"],\r\n                            \"label\": response[4].data[\"stransdisplaystatus\"]\r\n                        });\r\n                        selectedRecord = response[4].data;\r\n                        selectedRecord[\"ntranscode\"] = MaintenanceData[0];\r\n\r\n                        ntzlastmaintenancedate.push({\r\n                            \"value\": response[4].data[\"ntzlastmaintenancedate\"],\r\n                            \"label\": response[4].data[\"stzlastmaintenancedate\"]\r\n                        });\r\n                        ntzduedate.push({\r\n                            \"value\": response[4].data[\"ntzduedate\"],\r\n                            \"label\": response[4].data[\"stzduedate\"]\r\n                        });\r\n                        selectedRecord[\"ntzlastmaintenancedate\"] = ntzlastmaintenancedate[0];\r\n                        selectedRecord[\"ntzduedate\"] = ntzduedate[0];\r\n                        if (response[4].data[\"slastmaintenancedate\"] !== \"\") {\r\n\r\n                            selectedRecord[\"dlastmaintenancedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"slastmaintenancedate\"]); //new Date(response[7].data[\"smanufacdate\"]);\r\n                        }\r\n                        if (response[4].data[\"sduedate\"] !== \"\") {\r\n\r\n                            selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"sduedate\"]); //new Date(response[7].data[\"smanufacdate\"]);\r\n                        }\r\n\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            MaintenanceStatus,\r\n                            Action: Action,\r\n                            TimeZoneList,\r\n                            selectedRecord: selectedRecord,\r\n                            isOpen: true,\r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            // openModal: true,\r\n                            openChildModal: true,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false,\r\n                            popUp:\"\"\r\n                        }\r\n                    });\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[3].data.Status\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {  \r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const OpenDate = (screenName, userInfo, ncontrolCode, selectedRecord, masterData) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo: userInfo\r\n        });\r\n\r\n        if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n            const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 3,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\r\n                ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\r\n            });\r\n\r\n            const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationOpenDateStatus\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode\r\n            });\r\n            urlArray = [calibrationStatusService, timeZoneService, UTCtimeZoneService, calibrationValidationService];\r\n        } else {\r\n            const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 3,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\r\n                ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\r\n            });\r\n\r\n            const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceOpenCloseDateStatus\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode\r\n            });\r\n            urlArray = [maintenanceStatusService, timeZoneService, UTCtimeZoneService, maintenanceValidationService];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (response[3].data.OpenCloseStatus === \"Success\") {\r\n\r\n                    let CalibrationStatus = {};\r\n                    let MaintenanceStatus = {};\r\n\r\n                    let selectedRecord = {};\r\n                    const timezoneMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, false);\r\n\r\n                    const TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                    selectedRecord = {\r\n                        \"ntzopendate\": {\r\n                            \"value\": userInfo.ntimezonecode,\r\n                            \"label\": userInfo.stimezoneid\r\n                        },\r\n                        \"stzopendate\": userInfo.stimezoneid,\r\n                    };\r\n                    let popUp=\"\"\r\n                    let date = rearrangeDateFormat(userInfo, response[2].data);\r\n                    selectedRecord[\"dopendate\"] = date;\r\n                    if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n                        const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\",\r\n                            \"stransstatus\", undefined, undefined, false);\r\n\r\n                        CalibrationStatus = calibrationMap.get(\"OptionList\");\r\n                     popUp=\"IDS_INSTRUMENTCALIBRATIONOPENDATE\"\r\n                    //  let CalibrationData=[];\r\n                    //  CalibrationData.push(response[0].data.CalibrationStatus[1]);\r\n                    //  CalibrationData.push({\r\n                    //     \"value\": response[0].data.CalibrationStatus[1].ntranscode,\r\n                    //     \"label\": response[0].data.CalibrationStatus[1].stransdisplaystatus\r\n                    // });\r\n                     \r\n                    //  selectedRecord[\"ntranscode\"] = CalibrationData[0];\r\n                        \r\n                    } else {\r\n                        const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\",\r\n                            \"stransstatus\", undefined, undefined, false);\r\n\r\n                        MaintenanceStatus = maintenanceMap.get(\"OptionList\");\r\n                        popUp=\"IDS_INSTRUMENTMAINTENANCEOPENDATE\"\r\n\r\n                    }\r\n\r\n                    let operation = \"create\";\r\n                    let modalTitle = \"IDS_OPENDATE\";\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            isOpen: true,\r\n                            selectedRecord: selectedRecord,\r\n                            operation: operation,\r\n                            modalTitle: modalTitle,\r\n                            CalibrationStatus: CalibrationStatus,\r\n                            MaintenanceStatus: MaintenanceStatus,\r\n                            TimeZoneList: TimeZoneList,\r\n                            screenName: screenName,\r\n                            modalShow: true,\r\n                            ncontrolCode: ncontrolCode,\r\n                            popUp:popUp,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[3].data.Status\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const CloseDate = (screenName, userInfo, ncontrolCode, selectedRecord, masterData) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo: userInfo\r\n        });\r\n\r\n        if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n            const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 4,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\r\n                ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\r\n            });\r\n\r\n            const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationOpenDateStatus\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode\r\n            });\r\n            urlArray = [calibrationStatusService, timeZoneService, UTCtimeZoneService, calibrationValidationService];\r\n        } else {\r\n            const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 4,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\r\n                ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\r\n            });\r\n\r\n            const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceOpenCloseDateStatus\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode\r\n            });\r\n            urlArray = [maintenanceStatusService, timeZoneService, UTCtimeZoneService, maintenanceValidationService];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (response[3].data.OpenCloseStatus === \"Success\") {\r\n\r\n                    let CalibrationStatus = [];\r\n                    let MaintenanceStatus = {};\r\n\r\n                    let selectedRecord = {};\r\n                    \r\n                    const timezoneMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, false);\r\n\r\n                    const TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                    selectedRecord = {\r\n                        \"ntzclosedate\": {\r\n                            \"value\": userInfo.ntimezonecode,\r\n                            \"label\": userInfo.stimezoneid\r\n                        },\r\n                        \"stzclosedate\": userInfo.stimezoneid,\r\n                    };\r\n                    let date = rearrangeDateFormat(userInfo, response[2].data);\r\n                    selectedRecord[\"dclosedate\"] = date;\r\n                    let popUp=\"\"\r\n                    if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n                        const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\",\r\n                            \"stransstatus\", undefined, undefined, false);\r\n\r\n                        CalibrationStatus = calibrationMap.get(\"OptionList\");\r\n\r\n                        popUp=\"IDS_INSTRUMENTCALIBRATIONCLOSEDATE\"\r\n\r\n                    //     let CalibrationData=[];\r\n                    //  CalibrationData.push({\r\n                    //     \"value\": response[0].data.CalibrationStatus[0].ntranscode,\r\n                    //     \"label\": response[0].data.CalibrationStatus[0].stransstatus\r\n                    // });\r\n                     \r\n                    // selectedRecord[\"ntranscode\"] = CalibrationData[0];\r\n                    //selectedRecord.ntranscode=CalibrationData[0];\r\n                    } else {\r\n                        const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\",\r\n                            \"stransstatus\", undefined, undefined, false);\r\n\r\n                        MaintenanceStatus = maintenanceMap.get(\"OptionList\");\r\n\r\n                        popUp=\"IDS_INSTRUMENTMAINTENANCECLOSEDATE\"\r\n\r\n                    }\r\n                    let operation = \"create\";\r\n                    let modalTitle = \"IDS_CLOSEDATE\";\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            isOpen: true,\r\n                            selectedRecord: selectedRecord,\r\n                            operation: operation,\r\n                            modalTitle: modalTitle,\r\n                            CalibrationStatus: CalibrationStatus,\r\n                            MaintenanceStatus: MaintenanceStatus,\r\n                            TimeZoneList: TimeZoneList,\r\n                            screenName: screenName,\r\n                            modalShow: true,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false,\r\n                            popUp:popUp\r\n                        }\r\n                    });\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[3].data.Status\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}