{"ast":null,"code":"import _defineProperty from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import{toast}from'react-toastify';import Axios from'axios';import rsapi from'../rsapi';import{initRequest}from'./LoginAction';import{DEFAULT_RETURN}from'./LoginTypes';import{sortData,getComboLabelValue,constructOptionList,formatInputDate,rearrangeDateFormat,formatDate}from'../components/CommonScript';import{intl}from'../components/App';import{transactionStatus}from'../components/Enumeration';export function getSchedulerDetail(scheduler,userInfo,masterData,sscheduletype){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"scheduler/getScheduler\",{nschedulecode:scheduler.nschedulecode,userinfo:userInfo,sscheduletype:sscheduletype}).then(function(response){masterData=_objectSpread(_objectSpread({},masterData),response.data);sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,operation:null,modalName:undefined,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}// export function getSchedulerDetail (scheduler, userInfo, masterData) {\n//     return function (dispatch) {   \n//         const schedulerService = rsapi.post(\"scheduler/getScheduler\", {nschedulecode:scheduler.nschedulecode, userinfo:userInfo});\n//         const schedulerTypeService = rsapi.post(\"scheduler/getSchedulerType\", {userinfo:userInfo});\n//         let urlArray = [];\n//         urlArray = [schedulerService,schedulerTypeService];\n//     dispatch(initRequest(true));\n//     //return rsapi.post(\"scheduler/getScheduler\", {nschedulecode:scheduler.nschedulecode, userinfo:userInfo})\n//     Axios.all(urlArray)\n//    .then(response=>{     \n//         masterData = {...masterData, ...response[0].data};       \n//         sortData(masterData);\n//         const schedulerTypeMap = constructOptionList(response[1].data['SchedulerType'] || [], \"nschedulertypecode\",\n//                                           \"sschedulertypename\", undefined, undefined, false);  \n//         const schedulerTypeList = schedulerTypeMap.get(\"OptionList\");             \n//         dispatch({type: DEFAULT_RETURN, payload:{masterData,schedulerTypeList, operation:null, modalName:undefined, \n//              loading:false}});   \n//    })\n//    .catch(error=>{\n//         dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\n//        if (error.response.status === 500){\n//            toast.error(error.message);\n//        } \n//        else{               \n//            toast.warn(error.response.data);\n//        }  \n//    })\n// }\n// }\nexport function getSchedulerComboService(inputParam){return function(dispatch){if(inputParam.operation===\"create\"||inputParam.operation===\"update\"&&inputParam.masterData.SelectedScheduler.ntransactionstatus===transactionStatus.DRAFT){var schedulerTypeService=rsapi.post(\"scheduler/getSchedulerType\",{userinfo:inputParam.userInfo});var srecurringTypeService=rsapi.post(\"scheduler/getSchedulerTypeRecurring\",{userinfo:inputParam.userInfo});var srecurringMonthlyService=rsapi.post(\"scheduler/getSchedulerRecurringMonthlyPeriod\",{userinfo:inputParam.userInfo});//const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputParam.userInfo });\nvar urlArray=[];if(inputParam.operation===\"create\"){urlArray=[schedulerTypeService,srecurringTypeService,srecurringMonthlyService];//, UTCtimeZoneService\n}else{var _rsapi$post;var schedulerById=rsapi.post(\"scheduler/getActiveSchedulerById\",(_rsapi$post={},_defineProperty(_rsapi$post,inputParam.primaryKeyName,inputParam.masterData.SelectedScheduler[inputParam.primaryKeyName]),_defineProperty(_rsapi$post,\"userinfo\",inputParam.userInfo),_rsapi$post));urlArray=[schedulerTypeService,srecurringTypeService,srecurringMonthlyService,schedulerById];}dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var gender=[];var schedulerTypeMap=constructOptionList(response[0].data['SchedulerType']||[],\"nschedulertypecode\",\"sschedulertypename\",undefined,undefined,false);var recurringMap=constructOptionList(response[1].data['SchedulerTypeRecurring']||[],\"ntyperecurringcode\",\"srecurringmodename\",undefined,undefined,false);var recurringMonthlyMap=constructOptionList(response[2].data['SchedulerRecurringMonthlyPeriod']||[],\"nrecurringperiodcode\",\"srecurrenceperiod\",undefined,undefined,false);var schedulerTypeList=schedulerTypeMap.get(\"OptionList\");var recurringList=recurringMap.get(\"OptionList\");var monthlyTypeList=recurringMonthlyMap.get(\"OptionList\");var selectedRecord={};var schedulertype=[];var recurringtype=[];var monthlytype=[];//const currentTime = rearrangeDateFormat(inputParam.userInfo, response[1].data);\nif(inputParam.operation===\"update\"){selectedRecord=response[3].data;if(selectedRecord[\"sscheduletype\"]===\"O\"){schedulertype.push({\"value\":1,\"label\":\"One Time\"});selectedRecord[\"nschedulertypecode\"]=schedulertype[0];recurringtype.push({\"value\":1,\"label\":\"Daily\"});selectedRecord[\"ntyperecurringcode\"]=recurringtype[0];monthlytype.push({\"value\":1,\"label\":\"Exact Day\"});selectedRecord[\"nrecurringperiodcode\"]=monthlytype[0];}else if(selectedRecord[\"sscheduletype\"]===\"D\"){schedulertype.push({\"value\":2,\"label\":\"Recurring\"});selectedRecord[\"nschedulertypecode\"]=schedulertype[0];recurringtype.push({\"value\":1,\"label\":\"Daily\"});selectedRecord[\"ntyperecurringcode\"]=recurringtype[0];monthlytype.push({\"value\":1,\"label\":\"Exact Day\"});selectedRecord[\"nrecurringperiodcode\"]=monthlytype[0];//selectedRecord[\"sstartdate\"] = rearrangeDateFormat(inputParam.userInfo,selectedRecord[\"sstartdate\"]);\nvar date=selectedRecord[\"sstartdate\"];date=date.substring(0,10);var time=selectedRecord[\"soccurencehourwiseinterval\"];date=date+\" \"+time+\":00\";selectedRecord[\"soccurencehourwiseinterval\"]=date;selectedRecord[\"soccurencehourwiseinterval\"]=rearrangeDateFormat(inputParam.userInfo,selectedRecord[\"soccurencehourwiseinterval\"]);}else if(selectedRecord[\"sscheduletype\"]===\"W\"){schedulertype.push({\"value\":2,\"label\":\"Recurring\"});selectedRecord[\"nschedulertypecode\"]=schedulertype[0];recurringtype.push({\"value\":2,\"label\":\"Weekly\"});selectedRecord[\"ntyperecurringcode\"]=recurringtype[0];monthlytype.push({\"value\":1,\"label\":\"Exact Day\"});selectedRecord[\"nrecurringperiodcode\"]=monthlytype[0];}else if(selectedRecord[\"sscheduletype\"]===\"M\"){schedulertype.push({\"value\":2,\"label\":\"Recurring\"});selectedRecord[\"nschedulertypecode\"]=schedulertype[0];recurringtype.push({\"value\":3,\"label\":\"Monthly\"});selectedRecord[\"ntyperecurringcode\"]=recurringtype[0];if(selectedRecord[\"nmonthlyoccurrencetype\"]===1){monthlytype.push({\"value\":1,\"label\":\"Exact Day\"});selectedRecord[\"nrecurringperiodcode\"]=monthlytype[0];}if(selectedRecord[\"nmonthlyoccurrencetype\"]===2){monthlytype.push({\"value\":2,\"label\":\"1st Week\"});selectedRecord[\"nrecurringperiodcode\"]=monthlytype[0];}if(selectedRecord[\"nmonthlyoccurrencetype\"]===3){monthlytype.push({\"value\":3,\"label\":\"2nd Week\"});selectedRecord[\"nrecurringperiodcode\"]=monthlytype[0];}if(selectedRecord[\"nmonthlyoccurrencetype\"]===4){monthlytype.push({\"value\":4,\"label\":\"3rd Week\"});selectedRecord[\"nrecurringperiodcode\"]=monthlytype[0];}if(selectedRecord[\"nmonthlyoccurrencetype\"]===5){monthlytype.push({\"value\":5,\"label\":\"4th Week\"});selectedRecord[\"nrecurringperiodcode\"]=monthlytype[0];}}selectedRecord[\"sstartdate\"]=rearrangeDateFormat(inputParam.userInfo,selectedRecord[\"sstartdate\"]);selectedRecord[\"sstarttime\"]=rearrangeDateFormat(inputParam.userInfo,selectedRecord[\"sstarttime\"]);selectedRecord[\"senddate\"]=rearrangeDateFormat(inputParam.userInfo,selectedRecord[\"senddate\"]);selectedRecord[\"sendtime\"]=rearrangeDateFormat(inputParam.userInfo,selectedRecord[\"sendtime\"]);//    let date= selectedRecord[\"sstartdate\"];\n//    let time= selectedRecord[\"soccurencehourwiseinterval\"];\n//    date=date.substring(0,10);\n//    selectedRecord[\"soccurencehourwiseinterval\"]=date+\" \"+time;\n// gender.push({\"value\" : response[1].data[\"ngendercode\"], \"label\" : response[1].data[\"sgendername\"]});\n// selectedRecord[\"ngendercode\"] = gender[0];\n// if (selectedRecord[\"ddob\"] !== null){\n//     selectedRecord[\"ddob\"] = rearrangeDateFormat(inputParam.userInfo, selectedRecord[\"sdob\"]);\n// }                                          \n}else{if(inputParam.nfilterScheduleType){selectedRecord[\"nschedulertypecode\"]=inputParam.nfilterScheduleType;}else{selectedRecord[\"nschedulertypecode\"]=schedulerTypeMap.get(\"DefaultValue\");}selectedRecord[\"ntyperecurringcode\"]=recurringMap.get(\"DefaultValue\");selectedRecord[\"nrecurringperiodcode\"]=recurringMonthlyMap.get(\"DefaultValue\");//selectedRecord[\"ddob\"] = rearrangeDateFormat(inputParam.userInfo, response[1].data);\n//selectedRecord[\"sage\"]  = ageCalculate(selectedRecord[\"ddob\"])\n}dispatch({type:DEFAULT_RETURN,payload:{schedulerTypeList:schedulerTypeList,recurringList:recurringList,monthlyTypeList:monthlyTypeList,operation:inputParam.operation,screenName:inputParam.screenName,selectedRecord:selectedRecord,openModal:true,ncontrolCode:inputParam.ncontrolcode,loading:false//currentTime\n}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{var message=\"IDS_SELECTDRAFTRECORDTOEDIT\";toast.warn(intl.formatMessage({id:message}));}};}export var changeScheduleTypeFilter=function changeScheduleTypeFilter(inputParam,filterScheduleType){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/scheduler/get\"+inputParam.methodUrl,inputParam.inputData).then(function(response){var masterData=response.data;sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{loading:false,masterData:_objectSpread(_objectSpread({},masterData),{},{filterScheduleType:filterScheduleType,nfilterScheduleType:inputParam.inputData.nfilterScheduleType})}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.error(error.message);});};};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/actions/SchedulerAction.js"],"names":["toast","Axios","rsapi","initRequest","DEFAULT_RETURN","sortData","getComboLabelValue","constructOptionList","formatInputDate","rearrangeDateFormat","formatDate","intl","transactionStatus","getSchedulerDetail","scheduler","userInfo","masterData","sscheduletype","dispatch","post","nschedulecode","userinfo","then","response","data","type","payload","operation","modalName","undefined","loading","catch","error","status","message","warn","getSchedulerComboService","inputParam","SelectedScheduler","ntransactionstatus","DRAFT","schedulerTypeService","srecurringTypeService","srecurringMonthlyService","urlArray","schedulerById","primaryKeyName","all","gender","schedulerTypeMap","recurringMap","recurringMonthlyMap","schedulerTypeList","get","recurringList","monthlyTypeList","selectedRecord","schedulertype","recurringtype","monthlytype","push","date","substring","time","nfilterScheduleType","screenName","openModal","ncontrolCode","ncontrolcode","formatMessage","id","changeScheduleTypeFilter","filterScheduleType","methodUrl","inputData"],"mappings":"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","sourcesContent":["import { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport rsapi from '../rsapi';\r\nimport { initRequest } from './LoginAction';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {sortData, getComboLabelValue, constructOptionList,formatInputDate, rearrangeDateFormat, formatDate} from '../components/CommonScript';\r\nimport { intl } from '../components/App';\r\nimport {transactionStatus} from '../components/Enumeration';\r\n\r\nexport function getSchedulerDetail (scheduler, userInfo, masterData,sscheduletype) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"scheduler/getScheduler\", {nschedulecode:scheduler.nschedulecode, userinfo:userInfo,sscheduletype:sscheduletype})\r\n   .then(response=>{     \r\n        masterData = {...masterData, ...response.data};       \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, operation:null, modalName:undefined, \r\n             loading:false}});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}\r\n}\r\n// export function getSchedulerDetail (scheduler, userInfo, masterData) {\r\n//     return function (dispatch) {   \r\n//         const schedulerService = rsapi.post(\"scheduler/getScheduler\", {nschedulecode:scheduler.nschedulecode, userinfo:userInfo});\r\n//         const schedulerTypeService = rsapi.post(\"scheduler/getSchedulerType\", {userinfo:userInfo});\r\n//         let urlArray = [];\r\n//         urlArray = [schedulerService,schedulerTypeService];\r\n//     dispatch(initRequest(true));\r\n//     //return rsapi.post(\"scheduler/getScheduler\", {nschedulecode:scheduler.nschedulecode, userinfo:userInfo})\r\n//     Axios.all(urlArray)\r\n//    .then(response=>{     \r\n//         masterData = {...masterData, ...response[0].data};       \r\n//         sortData(masterData);\r\n//         const schedulerTypeMap = constructOptionList(response[1].data['SchedulerType'] || [], \"nschedulertypecode\",\r\n//                                           \"sschedulertypename\", undefined, undefined, false);  \r\n//         const schedulerTypeList = schedulerTypeMap.get(\"OptionList\");             \r\n//         dispatch({type: DEFAULT_RETURN, payload:{masterData,schedulerTypeList, operation:null, modalName:undefined, \r\n//              loading:false}});   \r\n//    })\r\n//    .catch(error=>{\r\n//         dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n//        if (error.response.status === 500){\r\n//            toast.error(error.message);\r\n//        } \r\n//        else{               \r\n//            toast.warn(error.response.data);\r\n//        }  \r\n  \r\n//    })\r\n// }\r\n// }\r\n\r\nexport function getSchedulerComboService(inputParam){ \r\n    return function (dispatch) {    \r\n        if (inputParam.operation === \"create\" || (inputParam.operation === \"update\" && inputParam.masterData.SelectedScheduler.ntransactionstatus === transactionStatus.DRAFT)) {\r\n            const schedulerTypeService = rsapi.post(\"scheduler/getSchedulerType\", {userinfo:inputParam.userInfo});\r\n            const srecurringTypeService = rsapi.post(\"scheduler/getSchedulerTypeRecurring\", {userinfo:inputParam.userInfo});\r\n            const srecurringMonthlyService = rsapi.post(\"scheduler/getSchedulerRecurringMonthlyPeriod\", {userinfo:inputParam.userInfo});\r\n            //const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputParam.userInfo });\r\n                    \r\n            let urlArray = [];\r\n            if (inputParam.operation === \"create\"){\r\n               urlArray = [schedulerTypeService,srecurringTypeService,srecurringMonthlyService];//, UTCtimeZoneService\r\n            }\r\n            else{                    \r\n                const schedulerById =  rsapi.post(\"scheduler/getActiveSchedulerById\", \r\n                                { [inputParam.primaryKeyName] :inputParam.masterData.SelectedScheduler[inputParam.primaryKeyName] , \r\n                                    \"userinfo\": inputParam.userInfo} );\r\n                \r\n                urlArray = [schedulerTypeService,srecurringTypeService,srecurringMonthlyService,schedulerById];\r\n            }\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response=>{                   \r\n                    let gender =[];\r\n                 \r\n                    const schedulerTypeMap = constructOptionList(response[0].data['SchedulerType'] || [], \"nschedulertypecode\",\r\n                                          \"sschedulertypename\", undefined, undefined, false);               \r\n                    const recurringMap = constructOptionList(response[1].data['SchedulerTypeRecurring'] || [], \"ntyperecurringcode\",\r\n                                          \"srecurringmodename\", undefined, undefined, false);               \r\n                    const recurringMonthlyMap = constructOptionList(response[2].data['SchedulerRecurringMonthlyPeriod'] || [], \"nrecurringperiodcode\",\r\n                                          \"srecurrenceperiod\", undefined, undefined, false);               \r\n\r\n                    const schedulerTypeList = schedulerTypeMap.get(\"OptionList\");\r\n                    const recurringList = recurringMap.get(\"OptionList\");\r\n                    const monthlyTypeList = recurringMonthlyMap.get(\"OptionList\");\r\n                    \r\n                    let selectedRecord =  {};\r\n                    let schedulertype =[];\r\n                    let recurringtype =[];\r\n                    let monthlytype =[];\r\n                    //const currentTime = rearrangeDateFormat(inputParam.userInfo, response[1].data);\r\n                   \r\n                    if (inputParam.operation === \"update\"){\r\n                         selectedRecord = response[3].data;\r\n                         if(selectedRecord[\"sscheduletype\"]===\"O\")\r\n                         {\r\n                            schedulertype.push({\"value\": 1,\"label\": \"One Time\"});\r\n                            selectedRecord[\"nschedulertypecode\"]= schedulertype[0];\r\n                            recurringtype.push({\"value\": 1,\"label\": \"Daily\"})\r\n                            selectedRecord[\"ntyperecurringcode\"] = recurringtype[0]; \r\n                            monthlytype.push({\"value\": 1,\"label\": \"Exact Day\"});\r\n                            selectedRecord[\"nrecurringperiodcode\"] = monthlytype[0];\r\n                         }\r\n                         else if(selectedRecord[\"sscheduletype\"]===\"D\")\r\n                         {\r\n                            schedulertype.push({\"value\": 2,\"label\": \"Recurring\"});\r\n                            selectedRecord[\"nschedulertypecode\"]= schedulertype[0];\r\n                            recurringtype.push({\"value\": 1,\"label\": \"Daily\"})\r\n                            selectedRecord[\"ntyperecurringcode\"] = recurringtype[0]; \r\n                            monthlytype.push({\"value\": 1,\"label\": \"Exact Day\"});\r\n                            selectedRecord[\"nrecurringperiodcode\"] = monthlytype[0];\r\n                            //selectedRecord[\"sstartdate\"] = rearrangeDateFormat(inputParam.userInfo,selectedRecord[\"sstartdate\"]);\r\n                            let date=selectedRecord[\"sstartdate\"];\r\n                            date=date.substring(0,10);\r\n                            let time=selectedRecord[\"soccurencehourwiseinterval\"];\r\n                             \r\n                             date=date+\" \"+time+\":00\";\r\n                             selectedRecord[\"soccurencehourwiseinterval\"]=date;\r\n                             selectedRecord[\"soccurencehourwiseinterval\"]=rearrangeDateFormat(inputParam.userInfo,selectedRecord[\"soccurencehourwiseinterval\"]);\r\n                         }\r\n                         else if(selectedRecord[\"sscheduletype\"]===\"W\")\r\n                         {\r\n                            schedulertype.push({\"value\": 2,\"label\": \"Recurring\"});\r\n                            selectedRecord[\"nschedulertypecode\"]= schedulertype[0];\r\n                            recurringtype.push({\"value\": 2,\"label\": \"Weekly\"})\r\n                            selectedRecord[\"ntyperecurringcode\"] = recurringtype[0]; \r\n                            monthlytype.push({\"value\": 1,\"label\": \"Exact Day\"});\r\n                            selectedRecord[\"nrecurringperiodcode\"] = monthlytype[0];\r\n                         }\r\n                         else if(selectedRecord[\"sscheduletype\"]===\"M\")\r\n                         {\r\n                            schedulertype.push({\"value\": 2,\"label\": \"Recurring\"});\r\n                            selectedRecord[\"nschedulertypecode\"]= schedulertype[0];\r\n                            recurringtype.push({\"value\": 3,\"label\": \"Monthly\"})\r\n                            selectedRecord[\"ntyperecurringcode\"] = recurringtype[0]; \r\n                            \r\n                            if(selectedRecord[\"nmonthlyoccurrencetype\"]===1)\r\n                            {\r\n                                monthlytype.push({\"value\": 1,\"label\": \"Exact Day\"});\r\n                                selectedRecord[\"nrecurringperiodcode\"] = monthlytype[0];\r\n                            }\r\n                            if(selectedRecord[\"nmonthlyoccurrencetype\"]===2)\r\n                            {\r\n                                monthlytype.push({\"value\": 2,\"label\": \"1st Week\"});\r\n                                selectedRecord[\"nrecurringperiodcode\"] = monthlytype[0];\r\n                            }\r\n                            if(selectedRecord[\"nmonthlyoccurrencetype\"]===3)\r\n                            {\r\n                                monthlytype.push({\"value\": 3,\"label\": \"2nd Week\"});\r\n                                selectedRecord[\"nrecurringperiodcode\"] = monthlytype[0];\r\n                            }\r\n                            if(selectedRecord[\"nmonthlyoccurrencetype\"]===4)\r\n                            {\r\n                                monthlytype.push({\"value\": 4,\"label\": \"3rd Week\"});\r\n                                selectedRecord[\"nrecurringperiodcode\"] = monthlytype[0];\r\n                            }\r\n                            if(selectedRecord[\"nmonthlyoccurrencetype\"]===5)\r\n                            {\r\n                                monthlytype.push({\"value\": 5,\"label\": \"4th Week\"});\r\n                                selectedRecord[\"nrecurringperiodcode\"] = monthlytype[0];\r\n                            }\r\n                            \r\n                         }\r\n                         selectedRecord[\"sstartdate\"] = rearrangeDateFormat(inputParam.userInfo,selectedRecord[\"sstartdate\"]);\r\n                            selectedRecord[\"sstarttime\"] = rearrangeDateFormat(inputParam.userInfo,selectedRecord[\"sstarttime\"]);\r\n                            selectedRecord[\"senddate\"] = rearrangeDateFormat(inputParam.userInfo,selectedRecord[\"senddate\"]);\r\n                            selectedRecord[\"sendtime\"] = rearrangeDateFormat(inputParam.userInfo,selectedRecord[\"sendtime\"]);\r\n                        //    let date= selectedRecord[\"sstartdate\"];\r\n                        //    let time= selectedRecord[\"soccurencehourwiseinterval\"];\r\n                        //    date=date.substring(0,10);\r\n                        //    selectedRecord[\"soccurencehourwiseinterval\"]=date+\" \"+time;\r\n\r\n                        // gender.push({\"value\" : response[1].data[\"ngendercode\"], \"label\" : response[1].data[\"sgendername\"]});\r\n                                             \r\n                        // selectedRecord[\"ngendercode\"] = gender[0];\r\n\r\n                        // if (selectedRecord[\"ddob\"] !== null){\r\n                        //     selectedRecord[\"ddob\"] = rearrangeDateFormat(inputParam.userInfo, selectedRecord[\"sdob\"]);\r\n                        // }                                          \r\n                    }\r\n                    else{        \r\n                        if(inputParam.nfilterScheduleType)\r\n                        {\r\n                            selectedRecord[\"nschedulertypecode\"] = inputParam.nfilterScheduleType;  \r\n                        }\r\n                        else\r\n                        {\r\n                        selectedRecord[\"nschedulertypecode\"] = schedulerTypeMap.get(\"DefaultValue\");  \r\n                        }\r\n                        selectedRecord[\"ntyperecurringcode\"] = recurringMap.get(\"DefaultValue\");  \r\n                        selectedRecord[\"nrecurringperiodcode\"] = recurringMonthlyMap.get(\"DefaultValue\");  \r\n                        //selectedRecord[\"ddob\"] = rearrangeDateFormat(inputParam.userInfo, response[1].data);\r\n                        //selectedRecord[\"sage\"]  = ageCalculate(selectedRecord[\"ddob\"])\r\n                    }\r\n                  \r\n                    dispatch({type: DEFAULT_RETURN, payload:{schedulerTypeList,\r\n                                                            recurringList,\r\n                                                            monthlyTypeList,                         \r\n                                                            operation:inputParam.operation, \r\n                                                            screenName:inputParam.screenName,   \r\n                                                            selectedRecord,\r\n                                                            openModal : true,\r\n                                                            ncontrolCode:inputParam.ncontrolcode,\r\n                                                            loading:false,\r\n                                                            //currentTime\r\n                                                            }});\r\n                })\r\n                .catch(error=>{\r\n                    dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                    if (error.response.status === 500){\r\n                        toast.error(error.message);\r\n                    } \r\n                    else{               \r\n                        toast.warn(error.response.data);\r\n                    }  \r\n                }) \r\n            }\r\n            else\r\n            {\r\n                let message = \"IDS_SELECTDRAFTRECORDTOEDIT\";\r\n            \r\n            toast.warn(intl.formatMessage({ id: message }));\r\n            }\r\n}\r\n}\r\n\r\nexport const changeScheduleTypeFilter = (inputParam, filterScheduleType) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/scheduler/get\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                const masterData = response.data\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterScheduleType,\r\n                            nfilterScheduleType: inputParam.inputData.nfilterScheduleType\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}