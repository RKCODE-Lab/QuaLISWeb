{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\storagemanagement\\\\AddSampleProcessing.jsx\";\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col, Card, FormGroup, FormLabel } from 'react-bootstrap';\nimport FormInput from '../../components/form-input/form-input.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { ReadOnlyText } from '../../components/App.styles';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\n\nconst AddSampleProcessing = props => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.formatMessage({\n      id: \"IDS_PROJECTTYPE\"\n    }),\n    name: \"nprojecttypecode\",\n    type: \"text\",\n    placeholder: props.formatMessage({\n      id: \"IDS_PROJECTTYPE\"\n    }),\n    onChange: event => props.onInputOnChange(event),\n    isDisabled: true,\n    value: props.masterData.selectedProjectType.label,\n    isMandatory: true,\n    required: true,\n    maxLength: 50,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_SAMPLETYPE\"\n    }),\n    isSearchable: true,\n    name: \"nproductcode\",\n    isDisabled: props.operation == \"update\" ? true : false,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: true,\n    isClearable: false,\n    options: props.sampletype,\n    value: props.selectedRecord[\"nproductcode\"] || \"\",\n    onChange: event => props.onComboChange(event, \"nproductcode\"),\n    closeMenuOnSelect: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_COLLECTIONTUBETYPENAME\"\n    }),\n    isSearchable: true,\n    name: \"ncollectiontubetypecode\",\n    isDisabled: props.operation == \"update\" ? true : false,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: true,\n    isClearable: false,\n    options: props.collectiontubetype,\n    value: props.selectedRecord[\"ncollectiontubetypecode\"] || \"\",\n    defaultValue: props.selectedRecord[\"ncollectiontubetypecode\"],\n    onChange: event => props.onComboChange(event, \"ncollectiontubetypecode\"),\n    closeMenuOnSelect: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_PROCESSTYPENAME\"\n    }),\n    isSearchable: true,\n    name: \"nprocesstypecode\",\n    isDisabled: props.operation == \"update\" ? true : false,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: true,\n    isClearable: false,\n    options: props.selectedRecord[\"processtype\"],\n    value: props.selectedRecord[\"ncollectiontubetypecode\"] && props.selectedRecord[\"nprocesstypecode\"] && props.selectedRecord[\"nprocesstypecode\"] || \"\",\n    onChange: event => props.onComboChange(event, \"nprocesstypecode\"),\n    closeMenuOnSelect: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.formatMessage({\n      id: \"IDS_PROCESSDURATION\"\n    }),\n    name: \"sprocessduration\",\n    type: \"text\",\n    placeholder: props.formatMessage({\n      id: \"IDS_PROCESSDURATION\"\n    }),\n    isDisabled: true,\n    value: props.selectedRecord[\"sprocessduration\"],\n    isMandatory: false,\n    required: false,\n    maxLength: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.formatMessage({\n      id: \"IDS_GRACEDURATION\"\n    }),\n    name: \"sgraceduration\",\n    type: \"text\",\n    placeholder: props.formatMessage({\n      id: \"IDS_GRACEDURATION\"\n    }),\n    isDisabled: true,\n    value: props.selectedRecord[\"sgraceduration\"],\n    isMandatory: false,\n    required: false,\n    maxLength: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.formatMessage({\n      id: \"IDS_BARCODEID\"\n    }),\n    name: \"sbarcodeid\",\n    type: \"text\" //onBlur={(event) => props.autoSaveGetData(event)}\n    ,\n    onKeyUp: event => props.autoSaveGetDataProcessing(event, \"sbarcodeid\"),\n    placeholder: props.formatMessage({\n      id: \"IDS_BARCODEID\"\n    }),\n    onChange: event => props.onInputOnChange(event),\n    isDisabled: props.operation == \"update\" ? true : false,\n    value: props.selectedRecord[\"sbarcodeid\"],\n    isMandatory: true,\n    required: true,\n    maxLength: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: props.userInfo.istimezoneshow === transactionStatus.YES ? 6 : 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(DateTimePicker, {\n    name: \"dprocessstartdate\",\n    label: props.intl.formatMessage({\n      id: \"IDS_STARTDATEANDTIME\"\n    }),\n    className: \"form-control\",\n    placeholderText: props.intl.formatMessage({\n      id: \"IDS_SELECTDATE\"\n    }) //dateFormat={props.userInfo[\"ssitedatetime\"]}\n    ,\n    dateFormat: props.userInfo.ssitedatetime,\n    timeInputLabel: props.intl.formatMessage({\n      id: \"IDS_STARTDATEANDTIME\"\n    }),\n    showTimeInput: true,\n    timeFormat: true,\n    isClearable: false,\n    isMandatory: !props.masterData.sprocessstartdatesecondtime,\n    required: true // isDisabled={diableAllStatus === recordStatus}\n    //  minDate={props.currentTime}\n    //   minTime={props.currentTime}\n    ,\n    onChange: date => props.handleDateChangeSlidout(\"dprocessstartdate\", date),\n    selected: props.selectedRecord ? props.selectedRecord[\"dprocessstartdate\"] : new Date(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: props.userInfo.istimezoneshow === transactionStatus.YES ? 12 : 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(DateTimePicker, {\n    name: \"dprocessenddate\",\n    label: props.intl.formatMessage({\n      id: \"IDS_ENDDATEANDTIME\"\n    }),\n    className: \"form-control\",\n    placeholderText: props.intl.formatMessage({\n      id: \"IDS_SELECTDATE\"\n    }) //dateFormat={props.userInfo[\"ssitedatetime\"]}\n    ,\n    dateFormat: props.userInfo.ssitedatetime,\n    timeInputLabel: props.intl.formatMessage({\n      id: \"IDS_ENDDATEANDTIME\"\n    }),\n    showTimeInput: true,\n    timeFormat: true,\n    isClearable: !props.masterData.sprocessstartdatesecondtime,\n    isMandatory: props.masterData.sprocessstartdatesecondtime,\n    required: true //    minDate={props.currentTime}\n    //    minTime={props.currentTime}\n    ,\n    onChange: date => props.handleDateChangeSlidout(\"dprocessenddate\", date),\n    selected: props.selectedRecord ? props.selectedRecord[\"dprocessenddate\"] : new Date(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormTextarea, {\n    label: props.intl.formatMessage({\n      id: \"IDS_COMMENTS\"\n    }),\n    name: \"scomments\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_COMMENTS\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"scomments\"] : \"\",\n    rows: \"2\" //   isMandatory={props.masterData.iscommentsrequired?true:props.masterData.isdevaiationrequired?true:false}\n    // required={props.masterData.iscommentsrequired?true:props.masterData.isdevaiationrequired?true:false}\n    ,\n    isMandatory: false,\n    required: false,\n    maxLength: \"255\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormTextarea, {\n    label: props.intl.formatMessage({\n      id: \"IDS_DEVIATIONCOMMENTS\"\n    }),\n    name: \"sdeviationcomments\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_DEVIATIONCOMMENTS\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"sdeviationcomments\"] : \"\",\n    rows: \"2\" //    isMandatory={props.masterData.isdevaiationrequired}\n    //   required={props.masterData.isdevaiationrequired}\n    ,\n    isMandatory: false,\n    required: false,\n    maxLength: \"255\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 25\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }\n  }, props.masterData.barcodedata && Object.entries(props.masterData.barcodedata).length !== 0 && /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    className: \" mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Card.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: \"inline-block\",\n      marginTop: \"1%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 37\n    }\n  }, props.intl.formatMessage({\n    id: \"IDS_SAMPLEINFO\"\n  })))), /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 33\n    }\n  }, props.masterData.jsondataBarcodeFields && props.masterData.jsondataBarcodeFields.map(item => {\n    return props.masterData.barcodedata && Object.entries(props.masterData.barcodedata).map(([key, value]) => {\n      if (item.sfieldname === key) {\n        return /*#__PURE__*/React.createElement(Col, {\n          md: 6,\n          key: `specInfo_${key}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 61\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 65\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 69\n          }\n        }, key), /*#__PURE__*/React.createElement(ReadOnlyText, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 69\n          }\n        }, value)));\n      } else {\n        return null;\n      }\n    });\n  })))))));\n};\n\nexport default injectIntl(AddSampleProcessing);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/storagemanagement/AddSampleProcessing.jsx"],"names":["React","injectIntl","Row","Col","Card","FormGroup","FormLabel","FormInput","DateTimePicker","FormSelectSearch","transactionStatus","ReadOnlyText","FormTextarea","AddSampleProcessing","props","formatMessage","id","event","onInputOnChange","masterData","selectedProjectType","label","intl","operation","sampletype","selectedRecord","onComboChange","collectiontubetype","autoSaveGetDataProcessing","userInfo","istimezoneshow","YES","ssitedatetime","sprocessstartdatesecondtime","date","handleDateChangeSlidout","Date","barcodedata","Object","entries","length","display","marginTop","jsondataBarcodeFields","map","item","key","value","sfieldname"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,SAAzB,EAAoCC,SAApC,QAAqD,iBAArD;AACA,OAAOC,SAAP,MAAsB,kDAAtB;AACA,OAAOC,cAAP,MAA2B,8DAA3B;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,OAAOC,YAAP,MAAyB,wDAAzB;;AAEA,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AACnC,sBACI,uDACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAEA,KAAK,CAACC,aAAN,CAAoB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAApB,CADX;AAEI,IAAA,IAAI,EAAE,kBAFV;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,WAAW,EAAEF,KAAK,CAACC,aAAN,CAAoB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAApB,CAJjB;AAKI,IAAA,QAAQ,EAAGC,KAAD,IAAWH,KAAK,CAACI,eAAN,CAAsBD,KAAtB,CALzB;AAMI,IAAA,UAAU,EAAE,IANhB;AAOI,IAAA,KAAK,EAAEH,KAAK,CAACK,UAAN,CAAiBC,mBAAjB,CAAqCC,KAPhD;AAQI,IAAA,WAAW,EAAE,IARjB;AASI,IAAA,QAAQ,EAAE,IATd;AAUI,IAAA,SAAS,EAAE,EAVf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,eAkBI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AACI,IAAA,SAAS,EAAEP,KAAK,CAACQ,IAAN,CAAWP,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CADf;AAEI,IAAA,YAAY,EAAE,IAFlB;AAGI,IAAA,IAAI,EAAE,cAHV;AAII,IAAA,UAAU,EAAEF,KAAK,CAACS,SAAN,IAAmB,QAAnB,GAA8B,IAA9B,GAAqC,KAJrD;AAKI,IAAA,WAAW,EAAET,KAAK,CAACQ,IAAN,CAAWP,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CALjB;AAMI,IAAA,WAAW,EAAE,IANjB;AAOI,IAAA,WAAW,EAAE,KAPjB;AAQI,IAAA,OAAO,EAAEF,KAAK,CAACU,UARnB;AASI,IAAA,KAAK,EAAEV,KAAK,CAACW,cAAN,CAAqB,cAArB,KAAwC,EATnD;AAUI,IAAA,QAAQ,EAAGR,KAAD,IAAWH,KAAK,CAACY,aAAN,CAAoBT,KAApB,EAA2B,cAA3B,CAVzB;AAYI,IAAA,iBAAiB,EAAE,IAZvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAlBJ,eAmCI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AACI,IAAA,SAAS,EAAEH,KAAK,CAACQ,IAAN,CAAWP,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CADf;AAEI,IAAA,YAAY,EAAE,IAFlB;AAGI,IAAA,IAAI,EAAE,yBAHV;AAII,IAAA,UAAU,EAAEF,KAAK,CAACS,SAAN,IAAmB,QAAnB,GAA8B,IAA9B,GAAqC,KAJrD;AAKI,IAAA,WAAW,EAAET,KAAK,CAACQ,IAAN,CAAWP,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CALjB;AAMI,IAAA,WAAW,EAAE,IANjB;AAOI,IAAA,WAAW,EAAE,KAPjB;AAQI,IAAA,OAAO,EAAEF,KAAK,CAACa,kBARnB;AASI,IAAA,KAAK,EAAEb,KAAK,CAACW,cAAN,CAAqB,yBAArB,KAAmD,EAT9D;AAUI,IAAA,YAAY,EAAEX,KAAK,CAACW,cAAN,CAAqB,yBAArB,CAVlB;AAWI,IAAA,QAAQ,EAAGR,KAAD,IAAWH,KAAK,CAACY,aAAN,CAAoBT,KAApB,EAA2B,yBAA3B,CAXzB;AAYI,IAAA,iBAAiB,EAAE,IAZvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAnCJ,eAoDI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AACI,IAAA,SAAS,EAAEH,KAAK,CAACQ,IAAN,CAAWP,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CADf;AAEI,IAAA,YAAY,EAAE,IAFlB;AAGI,IAAA,IAAI,EAAE,kBAHV;AAII,IAAA,UAAU,EAAEF,KAAK,CAACS,SAAN,IAAmB,QAAnB,GAA8B,IAA9B,GAAqC,KAJrD;AAKI,IAAA,WAAW,EAAET,KAAK,CAACQ,IAAN,CAAWP,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CALjB;AAMI,IAAA,WAAW,EAAE,IANjB;AAOI,IAAA,WAAW,EAAE,KAPjB;AAQI,IAAA,OAAO,EAAEF,KAAK,CAACW,cAAN,CAAqB,aAArB,CARb;AASI,IAAA,KAAK,EAAEX,KAAK,CAACW,cAAN,CAAqB,yBAArB,KAAmDX,KAAK,CAACW,cAAN,CAAqB,kBAArB,CAAnD,IAA+FX,KAAK,CAACW,cAAN,CAAqB,kBAArB,CAA/F,IAA2I,EATtJ;AAUI,IAAA,QAAQ,EAAGR,KAAD,IAAWH,KAAK,CAACY,aAAN,CAAoBT,KAApB,EAA2B,kBAA3B,CAVzB;AAWI,IAAA,iBAAiB,EAAE,IAXvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CApDJ,eAoEI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAEH,KAAK,CAACC,aAAN,CAAoB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAApB,CADX;AAEI,IAAA,IAAI,EAAE,kBAFV;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,WAAW,EAAEF,KAAK,CAACC,aAAN,CAAoB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAApB,CAJjB;AAKI,IAAA,UAAU,EAAE,IALhB;AAMI,IAAA,KAAK,EAAEF,KAAK,CAACW,cAAN,CAAqB,kBAArB,CANX;AAOI,IAAA,WAAW,EAAE,KAPjB;AAQI,IAAA,QAAQ,EAAE,KARd;AASI,IAAA,SAAS,EAAE,EATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CApEJ,eAkFI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAEX,KAAK,CAACC,aAAN,CAAoB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAApB,CADX;AAEI,IAAA,IAAI,EAAE,gBAFV;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,WAAW,EAAEF,KAAK,CAACC,aAAN,CAAoB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAApB,CAJjB;AAKI,IAAA,UAAU,EAAE,IALhB;AAMI,IAAA,KAAK,EAAEF,KAAK,CAACW,cAAN,CAAqB,gBAArB,CANX;AAOI,IAAA,WAAW,EAAE,KAPjB;AAQI,IAAA,QAAQ,EAAE,KARd;AASI,IAAA,SAAS,EAAE,EATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAlFJ,CADJ,eAkGI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAEX,KAAK,CAACC,aAAN,CAAoB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAApB,CADX;AAEI,IAAA,IAAI,EAAE,YAFV;AAGI,IAAA,IAAI,EAAC,MAHT,CAII;AAJJ;AAKI,IAAA,OAAO,EAAGC,KAAD,IAAWH,KAAK,CAACc,yBAAN,CAAgCX,KAAhC,EAAuC,YAAvC,CALxB;AAMI,IAAA,WAAW,EAAEH,KAAK,CAACC,aAAN,CAAoB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAApB,CANjB;AAOI,IAAA,QAAQ,EAAGC,KAAD,IAAWH,KAAK,CAACI,eAAN,CAAsBD,KAAtB,CAPzB;AAQI,IAAA,UAAU,EAAEH,KAAK,CAACS,SAAN,IAAmB,QAAnB,GAA8B,IAA9B,GAAqC,KARrD;AASI,IAAA,KAAK,EAAET,KAAK,CAACW,cAAN,CAAqB,YAArB,CATX;AAUI,IAAA,WAAW,EAAE,IAVjB;AAWI,IAAA,QAAQ,EAAE,IAXd;AAYI,IAAA,SAAS,EAAE,EAZf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eAmBI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAEX,KAAK,CAACe,QAAN,CAAeC,cAAf,KAAkCpB,iBAAiB,CAACqB,GAApD,GAA0D,CAA1D,GAA8D,EAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,cAAD;AACI,IAAA,IAAI,EAAE,mBADV;AAEI,IAAA,KAAK,EAAEjB,KAAK,CAACQ,IAAN,CAAWP,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CAFX;AAGI,IAAA,SAAS,EAAC,cAHd;AAII,IAAA,eAAe,EAAEF,KAAK,CAACQ,IAAN,CAAWP,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CAJrB,CAKI;AALJ;AAMI,IAAA,UAAU,EAAEF,KAAK,CAACe,QAAN,CAAeG,aAN/B;AAOI,IAAA,cAAc,EAAElB,KAAK,CAACQ,IAAN,CAAWP,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CAPpB;AAQI,IAAA,aAAa,EAAE,IARnB;AASI,IAAA,UAAU,EAAE,IAThB;AAUI,IAAA,WAAW,EAAE,KAVjB;AAWI,IAAA,WAAW,EAAE,CAACF,KAAK,CAACK,UAAN,CAAiBc,2BAXnC;AAYI,IAAA,QAAQ,EAAE,IAZd,CAaI;AACA;AACA;AAfJ;AAgBI,IAAA,QAAQ,EAAEC,IAAI,IAAIpB,KAAK,CAACqB,uBAAN,CAA8B,mBAA9B,EAAmDD,IAAnD,CAhBtB;AAiBI,IAAA,QAAQ,EAAEpB,KAAK,CAACW,cAAN,GAAuBX,KAAK,CAACW,cAAN,CAAqB,mBAArB,CAAvB,GAAmE,IAAIW,IAAJ,EAjBjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAnBJ,eAwCI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAEtB,KAAK,CAACe,QAAN,CAAeC,cAAf,KAAkCpB,iBAAiB,CAACqB,GAApD,GAA0D,EAA1D,GAA+D,EAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,cAAD;AACI,IAAA,IAAI,EAAE,iBADV;AAEI,IAAA,KAAK,EAAEjB,KAAK,CAACQ,IAAN,CAAWP,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CAFX;AAGI,IAAA,SAAS,EAAC,cAHd;AAII,IAAA,eAAe,EAAEF,KAAK,CAACQ,IAAN,CAAWP,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CAJrB,CAKI;AALJ;AAMI,IAAA,UAAU,EAAEF,KAAK,CAACe,QAAN,CAAeG,aAN/B;AAOI,IAAA,cAAc,EAAElB,KAAK,CAACQ,IAAN,CAAWP,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CAPpB;AAQI,IAAA,aAAa,EAAE,IARnB;AASI,IAAA,UAAU,EAAE,IAThB;AAUI,IAAA,WAAW,EAAE,CAACF,KAAK,CAACK,UAAN,CAAiBc,2BAVnC;AAWI,IAAA,WAAW,EAAEnB,KAAK,CAACK,UAAN,CAAiBc,2BAXlC;AAYI,IAAA,QAAQ,EAAE,IAZd,CAaI;AACA;AAdJ;AAeI,IAAA,QAAQ,EAAEC,IAAI,IAAIpB,KAAK,CAACqB,uBAAN,CAA8B,iBAA9B,EAAiDD,IAAjD,CAftB;AAgBI,IAAA,QAAQ,EAAEpB,KAAK,CAACW,cAAN,GAAuBX,KAAK,CAACW,cAAN,CAAqB,iBAArB,CAAvB,GAAiE,IAAIW,IAAJ,EAhB/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAxCJ,eA2DI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AACI,IAAA,KAAK,EAAEtB,KAAK,CAACQ,IAAN,CAAWP,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CADX;AAEI,IAAA,IAAI,EAAE,WAFV;AAGI,IAAA,QAAQ,EAAGC,KAAD,IAAWH,KAAK,CAACI,eAAN,CAAsBD,KAAtB,CAHzB;AAII,IAAA,WAAW,EAAEH,KAAK,CAACQ,IAAN,CAAWP,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CAJjB;AAKI,IAAA,KAAK,EAAEF,KAAK,CAACW,cAAN,GAAuBX,KAAK,CAACW,cAAN,CAAqB,WAArB,CAAvB,GAA2D,EALtE;AAMI,IAAA,IAAI,EAAC,GANT,CAOI;AACA;AARJ;AASI,IAAA,WAAW,EAAE,KATjB;AAUI,IAAA,QAAQ,EAAE,KAVd;AAYI,IAAA,SAAS,EAAE,KAZf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CA3DJ,eA6EI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AACI,IAAA,KAAK,EAAEX,KAAK,CAACQ,IAAN,CAAWP,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CADX;AAEI,IAAA,IAAI,EAAE,oBAFV;AAGI,IAAA,QAAQ,EAAGC,KAAD,IAAWH,KAAK,CAACI,eAAN,CAAsBD,KAAtB,CAHzB;AAII,IAAA,WAAW,EAAEH,KAAK,CAACQ,IAAN,CAAWP,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CAJjB;AAKI,IAAA,KAAK,EAAEF,KAAK,CAACW,cAAN,GAAuBX,KAAK,CAACW,cAAN,CAAqB,oBAArB,CAAvB,GAAoE,EAL/E;AAMI,IAAA,IAAI,EAAC,GANT,CAOI;AACA;AARJ;AASI,IAAA,WAAW,EAAE,KATjB;AAUI,IAAA,QAAQ,EAAE,KAVd;AAYI,IAAA,SAAS,EAAE,KAZf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CA7EJ,CAlGJ,CADJ,eAwMI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKX,KAAK,CAACK,UAAN,CAAiBkB,WAAjB,IAAgCC,MAAM,CAACC,OAAP,CAAezB,KAAK,CAACK,UAAN,CAAiBkB,WAAhC,EAA6CG,MAA7C,KAAwD,CAAxF,iBACG,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAa,IAAA,SAAS,EAAC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,cAAX;AAA2BC,MAAAA,SAAS,EAAE;AAAtC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK5B,KAAK,CAACQ,IAAN,CAAWP,aAAX,CAAyB;AAAEC,IAAAA,EAAE,EAAE;AAAN,GAAzB,CAAL,CADJ,CADJ,CADJ,eAMI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQF,KAAK,CAACK,UAAN,CAAiBwB,qBAAjB,IAA0C7B,KAAK,CAACK,UAAN,CAAiBwB,qBAAjB,CAAuCC,GAAvC,CAA2CC,IAAI,IAAI;AACzF,WACI/B,KAAK,CAACK,UAAN,CAAiBkB,WAAjB,IAAgCC,MAAM,CAACC,OAAP,CAAezB,KAAK,CAACK,UAAN,CAAiBkB,WAAhC,EAA6CO,GAA7C,CAAiD,CAAC,CAACE,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAC/F,UAAIF,IAAI,CAACG,UAAL,KAAoBF,GAAxB,EAA6B;AACzB,4BACI,oBAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAY,UAAA,GAAG,EAAG,YAAWA,GAAI,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKA,GADL,CADJ,eAII,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAeC,KAAf,CAJJ,CADJ,CADJ;AAUH,OAXD,MAWO;AACH,eAAO,IAAP;AACH;AACJ,KAf+B,CADpC;AAkBH,GAnByC,CAFlD,CADJ,CANJ,CADJ,CAFR,CAxMJ,CADJ;AAmPH,CApPD;;AAqPA,eAAe9C,UAAU,CAACY,mBAAD,CAAzB","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col, Card, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { ReadOnlyText } from '../../components/App.styles';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\n\r\nconst AddSampleProcessing = (props) => {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col md={6}>\r\n                    <Col md={12}>\r\n\r\n                        <FormInput\r\n                            label={props.formatMessage({ id: \"IDS_PROJECTTYPE\" })}\r\n                            name={\"nprojecttypecode\"}\r\n                            type=\"text\"\r\n                            placeholder={props.formatMessage({ id: \"IDS_PROJECTTYPE\" })}\r\n                            onChange={(event) => props.onInputOnChange(event)}\r\n                            isDisabled={true}\r\n                            value={props.masterData.selectedProjectType.label}\r\n                            isMandatory={true}\r\n                            required={true}\r\n                            maxLength={50}\r\n\r\n                        />\r\n\r\n                    </Col>\r\n                    <Col md={12}>\r\n                        <FormSelectSearch\r\n                            formLabel={props.intl.formatMessage({ id: \"IDS_SAMPLETYPE\" })}\r\n                            isSearchable={true}\r\n                            name={\"nproductcode\"}\r\n                            isDisabled={props.operation == \"update\" ? true : false}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            isMandatory={true}\r\n                            isClearable={false}\r\n                            options={props.sampletype}\r\n                            value={props.selectedRecord[\"nproductcode\"] || \"\"}\r\n                            onChange={(event) => props.onComboChange(event, \"nproductcode\")}\r\n\r\n                            closeMenuOnSelect={true}\r\n                        >\r\n                        </FormSelectSearch>\r\n                    </Col>\r\n                    <Col md={12}>\r\n                        <FormSelectSearch\r\n                            formLabel={props.intl.formatMessage({ id: \"IDS_COLLECTIONTUBETYPENAME\" })}\r\n                            isSearchable={true}\r\n                            name={\"ncollectiontubetypecode\"}\r\n                            isDisabled={props.operation == \"update\" ? true : false}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            isMandatory={true}\r\n                            isClearable={false}\r\n                            options={props.collectiontubetype}\r\n                            value={props.selectedRecord[\"ncollectiontubetypecode\"] || \"\"}\r\n                            defaultValue={props.selectedRecord[\"ncollectiontubetypecode\"]}\r\n                            onChange={(event) => props.onComboChange(event, \"ncollectiontubetypecode\")}\r\n                            closeMenuOnSelect={true}\r\n                        >\r\n                        </FormSelectSearch>\r\n                    </Col>\r\n                    <Col md={12}>\r\n                        <FormSelectSearch\r\n                            formLabel={props.intl.formatMessage({ id: \"IDS_PROCESSTYPENAME\" })}\r\n                            isSearchable={true}\r\n                            name={\"nprocesstypecode\"}\r\n                            isDisabled={props.operation == \"update\" ? true : false}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            isMandatory={true}\r\n                            isClearable={false}\r\n                            options={props.selectedRecord[\"processtype\"]}\r\n                            value={props.selectedRecord[\"ncollectiontubetypecode\"] && props.selectedRecord[\"nprocesstypecode\"] && props.selectedRecord[\"nprocesstypecode\"] || \"\"}\r\n                            onChange={(event) => props.onComboChange(event, \"nprocesstypecode\")}\r\n                            closeMenuOnSelect={true}\r\n                        >\r\n                        </FormSelectSearch>\r\n                    </Col>\r\n                    <Col md={12}>\r\n                        <FormInput\r\n                            label={props.formatMessage({ id: \"IDS_PROCESSDURATION\" })}\r\n                            name={\"sprocessduration\"}\r\n                            type=\"text\"\r\n                            placeholder={props.formatMessage({ id: \"IDS_PROCESSDURATION\" })}\r\n                            isDisabled={true}\r\n                            value={props.selectedRecord[\"sprocessduration\"]}\r\n                            isMandatory={false}\r\n                            required={false}\r\n                            maxLength={20}\r\n\r\n                        />\r\n                    </Col>\r\n                    <Col md={12}>\r\n                        <FormInput\r\n                            label={props.formatMessage({ id: \"IDS_GRACEDURATION\" })}\r\n                            name={\"sgraceduration\"}\r\n                            type=\"text\"\r\n                            placeholder={props.formatMessage({ id: \"IDS_GRACEDURATION\" })}\r\n                            isDisabled={true}\r\n                            value={props.selectedRecord[\"sgraceduration\"]}\r\n                            isMandatory={false}\r\n                            required={false}\r\n                            maxLength={20}\r\n\r\n                        />\r\n                    </Col>\r\n                </Col>\r\n                <Col md={6}>\r\n                    <Col md={12}>\r\n                        <FormInput\r\n                            label={props.formatMessage({ id: \"IDS_BARCODEID\" })}\r\n                            name={\"sbarcodeid\"}\r\n                            type=\"text\"\r\n                            //onBlur={(event) => props.autoSaveGetData(event)}\r\n                            onKeyUp={(event) => props.autoSaveGetDataProcessing(event, \"sbarcodeid\")}\r\n                            placeholder={props.formatMessage({ id: \"IDS_BARCODEID\" })}\r\n                            onChange={(event) => props.onInputOnChange(event)}\r\n                            isDisabled={props.operation == \"update\" ? true : false}\r\n                            value={props.selectedRecord[\"sbarcodeid\"]}\r\n                            isMandatory={true}\r\n                            required={true}\r\n                            maxLength={20}\r\n\r\n                        />\r\n                    </Col>\r\n\r\n                    <Col md={props.userInfo.istimezoneshow === transactionStatus.YES ? 6 : 12}>\r\n                        <DateTimePicker\r\n                            name={\"dprocessstartdate\"}\r\n                            label={props.intl.formatMessage({ id: \"IDS_STARTDATEANDTIME\" })}\r\n                            className='form-control'\r\n                            placeholderText={props.intl.formatMessage({ id: \"IDS_SELECTDATE\" })}\r\n                            //dateFormat={props.userInfo[\"ssitedatetime\"]}\r\n                            dateFormat={props.userInfo.ssitedatetime}\r\n                            timeInputLabel={props.intl.formatMessage({ id: \"IDS_STARTDATEANDTIME\" })}\r\n                            showTimeInput={true}\r\n                            timeFormat={true}\r\n                            isClearable={false}\r\n                            isMandatory={!props.masterData.sprocessstartdatesecondtime}\r\n                            required={true}\r\n                            // isDisabled={diableAllStatus === recordStatus}\r\n                            //  minDate={props.currentTime}\r\n                            //   minTime={props.currentTime}\r\n                            onChange={date => props.handleDateChangeSlidout(\"dprocessstartdate\", date)}\r\n                            selected={props.selectedRecord ? props.selectedRecord[\"dprocessstartdate\"] : new Date()} />\r\n                    </Col>\r\n\r\n                    <Col md={props.userInfo.istimezoneshow === transactionStatus.YES ? 12 : 12}>\r\n                        <DateTimePicker\r\n                            name={\"dprocessenddate\"}\r\n                            label={props.intl.formatMessage({ id: \"IDS_ENDDATEANDTIME\" })}\r\n                            className='form-control'\r\n                            placeholderText={props.intl.formatMessage({ id: \"IDS_SELECTDATE\" })}\r\n                            //dateFormat={props.userInfo[\"ssitedatetime\"]}\r\n                            dateFormat={props.userInfo.ssitedatetime}\r\n                            timeInputLabel={props.intl.formatMessage({ id: \"IDS_ENDDATEANDTIME\" })}\r\n                            showTimeInput={true}\r\n                            timeFormat={true}\r\n                            isClearable={!props.masterData.sprocessstartdatesecondtime}\r\n                            isMandatory={props.masterData.sprocessstartdatesecondtime}\r\n                            required={true}\r\n                            //    minDate={props.currentTime}\r\n                            //    minTime={props.currentTime}\r\n                            onChange={date => props.handleDateChangeSlidout(\"dprocessenddate\", date)}\r\n                            selected={props.selectedRecord ? props.selectedRecord[\"dprocessenddate\"] : new Date()} />\r\n                    </Col>\r\n                    <Col md={12}>\r\n                        <FormTextarea\r\n                            label={props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                            name={\"scomments\"}\r\n                            onChange={(event) => props.onInputOnChange(event)}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                            value={props.selectedRecord ? props.selectedRecord[\"scomments\"] : \"\"}\r\n                            rows=\"2\"\r\n                            //   isMandatory={props.masterData.iscommentsrequired?true:props.masterData.isdevaiationrequired?true:false}\r\n                            // required={props.masterData.iscommentsrequired?true:props.masterData.isdevaiationrequired?true:false}\r\n                            isMandatory={false}\r\n                            required={false}\r\n\r\n                            maxLength={\"255\"}\r\n                        >\r\n                        </FormTextarea>\r\n                    </Col>\r\n\r\n                    <Col md={12}>\r\n                        <FormTextarea\r\n                            label={props.intl.formatMessage({ id: \"IDS_DEVIATIONCOMMENTS\" })}\r\n                            name={\"sdeviationcomments\"}\r\n                            onChange={(event) => props.onInputOnChange(event)}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_DEVIATIONCOMMENTS\" })}\r\n                            value={props.selectedRecord ? props.selectedRecord[\"sdeviationcomments\"] : \"\"}\r\n                            rows=\"2\"\r\n                            //    isMandatory={props.masterData.isdevaiationrequired}\r\n                            //   required={props.masterData.isdevaiationrequired}\r\n                            isMandatory={false}\r\n                            required={false}\r\n\r\n                            maxLength={\"255\"}\r\n                        >\r\n                        </FormTextarea>\r\n                    </Col>\r\n\r\n\r\n                </Col>\r\n\r\n\r\n\r\n            </Row>\r\n            <Row>\r\n                {props.masterData.barcodedata && Object.entries(props.masterData.barcodedata).length !== 0 &&\r\n                    <Col md={12} className=' mb-2'>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                    <h4>{props.intl.formatMessage({ id: \"IDS_SAMPLEINFO\" })}</h4>\r\n                                </span>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <Row>\r\n                                    {\r\n                                        props.masterData.jsondataBarcodeFields && props.masterData.jsondataBarcodeFields.map(item => {\r\n                                            return (\r\n                                                props.masterData.barcodedata && Object.entries(props.masterData.barcodedata).map(([key, value]) => {\r\n                                                    if (item.sfieldname === key) {\r\n                                                        return (\r\n                                                            <Col md={6} key={`specInfo_${key}`}>\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel>\r\n                                                                        {key}\r\n                                                                    </FormLabel>\r\n                                                                    <ReadOnlyText>{value}</ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        );\r\n                                                    } else {\r\n                                                        return null;\r\n                                                    }\r\n                                                })\r\n                                            );\r\n                                        })\r\n                                    }\r\n\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>}\r\n            </Row>\r\n        </>\r\n\r\n    )\r\n}\r\nexport default injectIntl(AddSampleProcessing);\r\n"]},"metadata":{},"sourceType":"module"}