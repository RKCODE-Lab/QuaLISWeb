{"ast":null,"code":"import { toast } from 'react-toastify';\nimport rsapi from '../rsapi';\nimport { initRequest, updateStore } from './LoginAction';\nimport { DEFAULT_RETURN, REQUEST_FAILURE } from './LoginTypes';\nimport { sortData, searchData, searchJsonData, replaceUpdatedObject, constructOptionList, rearrangeDateFormat, Lims_JSON_stringify } from '../components/CommonScript';\nimport { intl } from '../components/App';\nimport { selectedDashBoardView } from './DashBoardTypeAction';\nimport Axios from \"axios\";\nimport { designComponents } from '../components/Enumeration'; // import { getValidComponent } from '../components/droparea/helpers';\n//import { Engine } from 'json-rules-engine';\n//import employee from '../rules/Employee-Salary.json';\n\nexport const callService = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(inputParam.classUrl + \"/get\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      // console.log(\"res:\", response);\n      ///Start of Rule Engine code///////////////////////\n      // const decisions1 = [\n      //   {\n      //       \"conditions\": {\n      //           \"all\": [\n      //               {\n      //                   \"fact\": \"Designation\",\n      //                   \"operator\": \"equal\",\n      //                   \"value\": \"Manager\"\n      //               },\n      //               {\n      //                   \"fact\": \"Experience\",\n      //                   \"operator\": \"greaterThan\",\n      //                   \"value\": 10\n      //               }\n      //           ]\n      //       },\n      //       \"event\": {\n      //           \"type\": \"RS.1500000\",\n      //           \"params\": {message: 'Your Salary is 1500000/annum!'}\n      //       }\n      //   }\n      // ];\n      // console.log(\"decisions:\",decisions1);  \n      // const inputs1 = {Designation: 'Manager', Experience: 9 };\n      // const engine = new Engine(employee.decisions);   \n      // engine.run(inputs1)\n      // .then(results => {       \n      //   console.log(\"Rule output:\", results.events);\n      //   if ( results.events.length > 0){\n      //     const events = results.events;\n      //     events.map(event => console.log(\"Message:\",event.params.message)); \n      //     rsapi.post(\"section/getSection\" , inputParam.inputData)\n      //     .then(response => {\n      //       console.log(\"data:\", response);\n      //       let data = response.data;\n      //       sortData(data);\n      //       const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: { masterData: [], organisation: undefined, }\n      //       }\n      //       dispatch(updateStore(updateInfo))\n      //       dispatch({\n      //         type: DEFAULT_RETURN,\n      //         payload: {\n      //           masterData: data,\n      //           activeTestTab: data.activeTestTab,\n      //           activeTestKey: data.activeTestKey,\n      //           activeBCTab: data.activeBCTab,\n      //           inputParam: inputParam,\n      //           masterStatus: \"\",\n      //           userInfo: inputParam.inputData.userinfo,\n      //           loading: false, selectedId: null, selectedRecord: {},\n      //           dataState: undefined,\n      //           organisation: {\n      //             selectedNode: data.SelectedNode, selectedNodeName: data.SelectedNodeName,\n      //             primaryKeyValue: data.AddedChildPrimaryKey\n      //           },\n      //           displayName: inputParam.displayName,\n      //           reportFilePath: undefined\n      //         }\n      //       })\n      //     })\n      //     .catch(error => {\n      //       if (error.response === undefined && error === \"Network Error\") {\n      //         dispatch({\n      //           type: REQUEST_FAILURE,\n      //           payload: {\n      //             error: \"Network Error\",\n      //             loading: false,\n      //           }\n      //         });\n      //       } else if (error.response.status === 417) {\n      //         toast.warning(error.response.data);\n      //         dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } });\n      //       } else {\n      //         dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } })\n      //       }\n      //     })\n      //   }\n      //   else{\n      //     console.log(\"Message:\",\"Rules Failed\");\n      //     dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } });\n      //   }         \n      // })\n      ///End of Rule Engine code///////////////////////\n      ////uncomment below for Orginial Source start////////////////////\n      if (response.data[\"Success\"]) {\n        toast.warn(response.data.Success);\n      }\n\n      let data = response.data;\n      sortData(data);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData: [],\n          organisation: undefined\n        }\n      };\n      dispatch(updateStore(updateInfo));\n\n      if (response.data.rtn == \"IDS_USERNOTINRESULTENTRYFLOW\") {\n        toast.warning(intl.formatMessage({\n          id: \"IDS_USERNOTINRESULTENTRYFLOW\"\n        }));\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: data,\n          activeTestTab: data.activeTestTab,\n          activeTestKey: data.activeTestKey,\n          activeBCTab: data.activeBCTab,\n          inputParam: inputParam,\n          masterStatus: \"\",\n          userInfo: inputParam.inputData.userinfo,\n          loading: false,\n          selectedId: null,\n          selectedRecord: {},\n          dataState: undefined,\n          organisation: {\n            selectedNode: data.SelectedNode,\n            selectedNodeName: data.SelectedNodeName,\n            primaryKeyValue: data.AddedChildPrimaryKey\n          },\n          displayName: inputParam.displayName,\n          reportFilePath: undefined,\n          skip: 0,\n          take: undefined,\n          testskip: 0,\n          testtake: 5 //  key:inputParam.key!==undefined?inputParam.key:\"\"\n\n        }\n      }); ///Uncomment till above for original source\n    }).catch(error => {\n      //console.log(\"error:\", error);\n      if (error.response === undefined && error === \"Network Error\") {\n        dispatch({\n          type: REQUEST_FAILURE,\n          payload: {\n            error: \"Network Error\",\n            loading: false\n          }\n        });\n      } else if (error.response.status === 417) {\n        toast.warning(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            displayName: inputParam.displayName,\n            userInfo: inputParam.inputData.userinfo\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            displayName: inputParam.displayName,\n            userInfo: inputParam.inputData.userinfo\n          }\n        });\n      }\n    });\n  };\n}; //Start- Add /Edit/Delete Master Data\n\nexport function crudMaster(inputParam, masterData, modalName, defaultInput) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let requestUrl = '';\n\n    if (inputParam.isFileupload) {\n      const formData = inputParam.formData;\n      formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\n      requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, formData);\n    } else {\n      requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData\n      });\n    }\n\n    return requestUrl.then(response => {\n      if (response.status === 202) {\n        //HttpStatus:Accepted\n        //Use this block when u need to display any success message\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loadEsign: false,\n            [modalName]: false,\n            loading: false\n          }\n        });\n        toast.success(response.data);\n      } else if (response.status === 208) {\n        //HttpStatus:Accepted\n        //208-Already Reported\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loadEsign: false,\n            [modalName]: false,\n            loading: false\n          }\n        });\n        toast.warn(response.data);\n      } else {\n        const retrievedData = sortData(response.data);\n\n        if (masterData === undefined || Array.isArray(retrievedData)) {\n          masterData = retrievedData;\n        } else {\n          masterData = { ...masterData,\n            ...retrievedData\n          };\n\n          if (modalName === \"openModal\" && inputParam.operation !== \"delete\" && inputParam.operation !== \"create\" && inputParam.operation !== \"copy\") {\n            if (inputParam.postParam) {\n              if (masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]) {\n                const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]);\n                masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\n              } else {\n                const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][0][inputParam.postParam.primaryKeyField]);\n                masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject][0];\n              }\n            }\n          } else if (modalName === \"openModal\" && inputParam.operation === \"create\") {\n            if (inputParam.postParam && inputParam.postParam.isSingleGet) {\n              masterData[inputParam.postParam.inputListName].push(response.data[inputParam.postParam.selectedObject]); //masterData[inputParam.postParam.selectedObject] = response.data;\n\n              sortData(masterData);\n            }\n          } else if (modalName === \"openChildModal\" && inputParam.operation === \"create\") {\n            //searchedData\n            if (inputParam.postParam && inputParam.postParam.isSingleGet) {\n              const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]);\n              masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\n\n              if (masterData[\"searchedData\"] !== undefined) {\n                const foundIndex = masterData[\"searchedData\"].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]);\n                masterData[\"searchedData\"][foundIndex] = masterData[inputParam.postParam.selectedObject];\n              }\n\n              sortData(masterData);\n            }\n          } else if (modalName === \"openModal\" && inputParam.operation === \"copy\") {\n            if (inputParam.postParam && inputParam.postParam.isSingleGet) {\n              masterData[inputParam.postParam.inputListName].push(response.data[inputParam.postParam.selectedObject]);\n              masterData = { ...masterData,\n                ...response.data\n              };\n              sortData(masterData);\n            }\n          } else if (modalName === \"openModal\" && inputParam.operation === \"delete\") {\n            if (inputParam.postParam && inputParam.postParam.isSingleGet) {\n              if (inputParam.postParam.task === \"cancel\") {\n                const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]);\n                masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\n              } else {\n                const list = masterData[inputParam.postParam.inputListName].filter(item => item[inputParam.postParam.primaryKeyField] !== inputParam.postParam.primaryKeyValue);\n                masterData[inputParam.postParam.inputListName] = list; // const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\n                //   x => x[inputParam.postParam.primaryKeyField] === inputParam.postParam.primaryKeyField\n                // );\n                // masterData[inputParam.postParam.inputListName].splice(foundIndex, 1)         \n              }\n\n              masterData = { ...masterData,\n                ...response.data\n              };\n              sortData(masterData);\n            }\n          }\n        } // (masterData);\n\n\n        let openModal = false; // let openChildModal= false;\n\n        let selectedRecord = {};\n        let activeSampleTab = inputParam.activeSampleTab ? {\n          activeSampleTab: inputParam.activeSampleTab\n        } : '';\n        let activeTestKey = inputParam.activeTestKey ? {\n          activeTestKey: inputParam.activeTestKey\n        } : '';\n        let showSample = inputParam.showSample ? inputParam.showSample : '';\n        let respObject = {\n          masterData,\n          inputParam,\n          modalName,\n          //   openChildModal,\n          //modalName:undefined,\n          [modalName]: openModal,\n          operation: inputParam.operation,\n          masterStatus: \"\",\n          errorCode: undefined,\n          loadEsign: false,\n          showEsign: false,\n          selectedRecord,\n          loading: false,\n          dataState: inputParam.dataState,\n          selectedId: inputParam.selectedId,\n          ...activeSampleTab,\n          ...activeTestKey,\n          showSample,\n          design: [],\n          //organisation: undefined\n          organisation: inputParam.nextNode ? {\n            selectedNode: inputParam.nextNode,\n            selectedNodeName: masterData.SelectedNodeName,\n            primaryKeyValue: masterData.AddedChildPrimaryKey\n          } : undefined,\n          showConfirmAlert: inputParam.showConfirmAlert,\n          loadPoolSource: inputParam.loadPoolSource,\n          skip: inputParam.skip || undefined,\n          take: inputParam.take || undefined,\n          openPortal: false\n        };\n\n        if (inputParam.operation === \"create\" || inputParam.operation === \"copy\") {\n          if (inputParam.saveType === 2) {\n            openModal = true;\n            selectedRecord = defaultInput;\n          }\n\n          respObject = { ...respObject,\n            [modalName]: openModal,\n            selectedRecord\n          };\n        }\n\n        if ((modalName === \"openModal\" || modalName === \"openChildModal\") && Object.keys(masterData).indexOf(\"searchedData\") !== -1 && masterData[\"searchedData\"] !== undefined) {\n          dispatch(postCRUDOrganiseSearch(inputParam.postParam, respObject));\n        } else {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...respObject,\n              modalName: undefined\n            }\n          });\n        }\n      }\n    }).catch(response => {\n      console.log(\"error:\", response);\n\n      if (response.response.status === 500) {\n        dispatch({\n          type: REQUEST_FAILURE,\n          payload: {\n            error: response.message,\n            loading: false // openPortal:this.props.Login.openPortal,\n            //openModal:inputParam.openPortal?false:true\n\n          }\n        });\n      } else {\n        let obj = {};\n\n        if (inputParam.openPortal === true) {\n          obj = {\n            openModal: false\n          };\n        }\n\n        if (inputParam.operation === \"delete\" || inputParam.operation === \"receive\" || inputParam.operation === 'approve' || inputParam.operation === \"correction\" || inputParam.operation === \"complete\" || inputParam.operation === \"dynamic\" || inputParam.operation === \"setDefault\" || inputParam.operation === \"reset\" || inputParam.operation === \"retire\" || inputParam.operation === \"xml\" || inputParam.operation === 'blackList' || inputParam.operation === 'attendance' || inputParam.operation === 'certified' || inputParam.operation === 'competent' || inputParam.operation === \"invite\" || inputParam.operation === \"cancel\" || inputParam.operation === \"cancel\" || inputParam.operation === \"conduct\" || inputParam.operation === \"attend\" || inputParam.operation === \"certify\" || inputParam.operation === \"Competent\") {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterStatus: response.response.data,\n              errorCode: response.response.status,\n              loadEsign: false,\n              [modalName]: false,\n              loading: false,\n              openPortal: false\n            }\n          });\n        } else {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterStatus: response.response.data,\n              errorCode: response.response.status,\n              loadEsign: false,\n              loading: false,\n              ...obj\n            }\n          });\n        }\n      }\n    });\n  };\n}\nexport const validateEsignCredential = (inputParam, modalName) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n\n    if (inputParam && inputParam.inputData && inputParam.inputData.userinfo) {\n      inputParam.inputData[\"userinfo\"] = { ...inputParam.inputData.userinfo,\n        sformname: Lims_JSON_stringify(inputParam.inputData.userinfo.sformname),\n        smodulename: Lims_JSON_stringify(inputParam.inputData.userinfo.smodulename)\n      };\n    }\n\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = inputParam[\"screenData\"][\"inputParam\"][\"methodUrl\"];\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\n          //if(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\n          //  && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"].length > 0)\n          //  {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n\n          if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n          } //  }\n\n        }\n\n        dispatch(crudMaster(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"], modalName));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const fetchRecord = fetchRecordParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    const url = fetchRecordParam.inputParam.classUrl + \"/getActive\" + fetchRecordParam.inputParam.methodUrl + \"ById\";\n    rsapi.post(url, {\n      [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue,\n      \"userinfo\": fetchRecordParam.userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: response.data,\n          screenName: fetchRecordParam.screenName,\n          operation: fetchRecordParam.operation,\n          openModal: true,\n          ncontrolCode: fetchRecordParam.ncontrolCode,\n          loading: false,\n          selectedId: fetchRecordParam.primaryKeyValue\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport function filterColumnData(filterValue, filterParam) {\n  return function (dispatch) {\n    let masterData = filterParam.masterData;\n    let primaryKeyValue = 0;\n    let searchedData = undefined;\n\n    if (filterValue === \"\") {\n      if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\n        // if(filterParam.isjsondata)\n        // {\n        //    primaryKeyValue = masterData[filterParam.inputListName][0][\"jsondata\"][filterParam.primaryKeyField]\n        //  }\n        //else\n        // {\n        primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField]; // }\n      }\n    } else {\n      if (filterParam.isjsondata) {\n        searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n      } else {\n        searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n      }\n\n      if (searchedData.length > 0) {\n        //  if(filterParam.isjsondata)\n        // {\n        //  primaryKeyValue = searchedData[0][\"jsondata\"][filterParam.primaryKeyField];\n        //  }\n        // else{\n        primaryKeyValue = searchedData[0][filterParam.primaryKeyField]; //  }\n      }\n    }\n\n    if (primaryKeyValue !== 0) {\n      dispatch(initRequest(true));\n      return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject,\n        [filterParam.primaryKeyField]: primaryKeyValue\n      }).then(response => {\n        masterData[\"searchedData\"] = searchedData;\n        masterData = { ...masterData,\n          ...response.data\n        };\n\n        if (filterParam.inputListName === \"DashBoardView\") {\n          dispatch(selectedDashBoardView(response, masterData));\n        } else {\n          if (filterParam.sortField) {\n            sortData(masterData, filterParam.sortOrder, filterParam.sortField);\n          } else {\n            sortData(masterData);\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              loading: false,\n              skip: 0,\n              take: 10,\n              selectedId: null\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      masterData[filterParam.selectedObject] = undefined;\n      masterData[\"searchedData\"] = [];\n      Object.keys(masterData).forEach(item => {\n        if (item !== filterParam.inputListName && item !== filterParam.selectedObject && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1) masterData[item] = [];\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function postCRUDOrganiseSearch(postParam, respObject) {\n  return function (dispatch) {\n    let masterData = respObject.masterData;\n\n    if (respObject.inputParam.operation === \"create\" || respObject.inputParam.operation === \"copy\") {\n      if (respObject.modalName === \"openModal\") {\n        if (respObject.inputParam.isChild === undefined) {\n          respObject.inputParam.searchRef.current.value = \"\";\n          masterData[\"searchedData\"] = undefined;\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...respObject,\n          masterData,\n          modalName: undefined\n        }\n      });\n    } else if (respObject.inputParam.operation === \"delete\") {\n      if (masterData[\"searchedData\"] !== undefined && respObject.modalName === \"openModal\") {\n        let temp = masterData[\"searchedData\"];\n        let primaryKeyValue = respObject.masterData[\"searchedData\"][0][postParam.primaryKeyField];\n\n        if (respObject.inputParam.isChild === undefined) {\n          temp = masterData[\"searchedData\"].filter(item => Array.isArray(postParam.primaryKeyValue) ? !postParam.primaryKeyValue.includes(item[postParam.primaryKeyField]) : item[postParam.primaryKeyField] !== postParam.primaryKeyValue);\n          primaryKeyValue = temp.length > 0 ? temp[0][postParam.primaryKeyField] : 0;\n        } else {\n          primaryKeyValue = masterData[postParam.selectedObject][postParam.primaryKeyField];\n        }\n\n        masterData[\"searchedData\"] = temp;\n        respObject = { ...respObject,\n          modalName: undefined\n        };\n\n        if (masterData[\"searchedData\"].length > 0) {\n          primaryKeyValue = masterData[\"searchedData\"][0][postParam.primaryKeyField];\n          return rsapi.post(postParam.fetchUrl, { ...postParam.fecthInputObject,\n            [postParam.primaryKeyField]: primaryKeyValue\n          }).then(response => {\n            masterData = { ...masterData,\n              ...response.data\n            };\n            sortData(masterData);\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: { ...respObject,\n                masterData\n              }\n            });\n          }).catch(error => {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: { ...respObject\n              }\n            });\n\n            if (error.response.status === 500) {\n              toast.error(intl.formatMessage({\n                id: error.message\n              }));\n            } else {\n              toast.warn(intl.formatMessage({\n                id: error.response.data\n              }));\n            }\n          });\n        } else {\n          masterData[postParam.selectedObject] = undefined;\n          masterData[\"searchedData\"] = [];\n          Object.keys(masterData).forEach(item => {\n            if (item !== postParam.inputListName && item !== postParam.selectedObject && postParam.unchangeList && postParam.unchangeList.indexOf(item) === -1) masterData[item] = [];\n          });\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...respObject,\n              masterData\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...respObject,\n            masterData,\n            modalName: undefined\n          }\n        });\n      }\n    } else if (respObject.inputParam.filtercombochange) {\n      respObject = { ...respObject,\n        modalName: undefined\n      };\n\n      if (masterData[\"searchedData\"] !== undefined) {\n        masterData[\"searchedData\"] = undefined;\n        respObject.inputParam.searchRef.current.value = \"\";\n      }\n\n      let Map = {};\n\n      if (postParam.selectedComboName !== undefined) {\n        Map = {\n          [postParam.selectedComboName]: {\n            [postParam.selectedComboId]: postParam.selectedCombo\n          }\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...respObject,\n          masterData,\n          ...Map\n        }\n      });\n    } else {\n      respObject = { ...respObject,\n        modalName: undefined\n      };\n\n      if (masterData[\"searchedData\"] !== undefined) {\n        if (masterData[postParam.selectedObject][postParam.primaryKeyField]) {\n          const foundIndex = masterData[\"searchedData\"].findIndex(x => x[postParam.primaryKeyField] === masterData[postParam.selectedObject][postParam.primaryKeyField]);\n          masterData[\"searchedData\"][foundIndex] = masterData[postParam.selectedObject];\n        } else {\n          const foundIndex = masterData[\"searchedData\"].findIndex(x => x[postParam.primaryKeyField] === masterData[postParam.selectedObject][0][postParam.primaryKeyField]);\n          masterData[\"searchedData\"][foundIndex] = masterData[postParam.selectedObject][0];\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...respObject,\n          masterData\n        }\n      });\n    }\n  };\n}\nexport const viewAttachment = inputParam => {\n  return dispatch => {\n    let inputData = { ...inputParam.inputData\n    };\n\n    if (inputData['selectedRecord']) {\n      delete inputData['selectedRecord']['expanded'];\n    }\n\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      let value = \"\";\n\n      if (response.data[\"AttachFile\"]) {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\n        document.getElementById(\"download_data\").click();\n      } else if (response.data[\"AttachLink\"]) {\n        value = response.data[\"AttachLink\"];\n        var win = window.open(value, '_blank');\n\n        if (win) {\n          win.focus();\n        } else {\n          intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\n        }\n      } else {\n        if (response.data[\"rtn\"]) {\n          toast.warn(intl.formatMessage({\n            id: response.data.rtn\n          }));\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport function filterTransactionList(filterValue, filterParam, filteredListName) {\n  return function (dispatch) {\n    let masterData = filterParam.masterData;\n    filteredListName = filteredListName || \"searchedData\";\n    let primaryKeyValue = 0;\n    let searchedData = undefined;\n    let selectedData = [];\n    filterParam.childRefs && filterParam.childRefs.map(childref => {\n      if (childref.ref !== undefined && childref.ref.current !== null) {\n        childref.ref.current.value = \"\";\n        masterData[childref.childFilteredListName] = undefined;\n      }\n\n      return null;\n    });\n\n    if (filterValue === \"\") {\n      if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\n        primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\n        selectedData.push(masterData[filterParam.inputListName][0]);\n      }\n    } else {\n      if (masterData[filterParam.inputListName]) {\n        searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n      } else {\n        searchedData = [];\n      }\n\n      if (searchedData.length > 0) {\n        primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\n        selectedData.push(searchedData[0]);\n      }\n    }\n\n    if (primaryKeyValue !== 0) {\n      primaryKeyValue = filterParam.isSingleSelect ? primaryKeyValue : String(primaryKeyValue);\n      dispatch(initRequest(true));\n      return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject,\n        [filterParam.primaryKeyField]: primaryKeyValue\n      }).then(response => {\n        const dataState = {\n          skip: 0,\n          take: 10\n        };\n        masterData[filteredListName] = searchedData;\n        masterData[filterParam.selectedObject] = selectedData;\n        masterData = { ...masterData,\n          ...response.data\n        };\n\n        if (filterParam.isSortable) {\n          sortData(masterData[filterParam.sortList], 'descending', filterParam.sortValue);\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            // skip: 0, take: 10, testskip: 0, testtake: 10,dataState \n            skip: filterParam.skip,\n            take: filterParam.take,\n            testskip: filterParam.testskip,\n            testtake: filterParam.testtake,\n            dataState\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      masterData[filterParam.selectedObject] = undefined;\n      masterData[filteredListName] = [];\n      filterParam.changeList.map(name => masterData[name] = []); // Object.keys(masterData).forEach(item=> {\n      //   if (item !== filterParam.inputListName && item !== filterParam.selectedObject \n      //     && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) ===-1)\n      //       masterData[item] = [];\n      //   })   \n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function postCRUDOrganiseTransSearch(postParamList, respObject) {\n  return function (dispatch) {\n    let masterData = respObject.masterData;\n    postParamList && Array.isArray(postParamList) && postParamList.map((postParam, index) => {\n      if (postParam.clearFilter === 'yes') {\n        if (postParam.searchRef.current) {\n          postParam.searchRef.current.value = \"\";\n        }\n\n        masterData[postParam.filteredListName] = undefined;\n        postParam.childRefs && postParam.childRefs.map(childref => {\n          if (childref.ref !== undefined && childref.ref.current !== null) {\n            childref.ref.current.value = \"\";\n            masterData[childref.childFilteredListName] = undefined;\n          }\n\n          return null;\n        });\n      }\n\n      if (Object.keys(masterData).indexOf(postParam.filteredListName) !== -1 && masterData[postParam.filteredListName] !== undefined) {\n        if (postParam.clearFilter === 'check') {\n          if (masterData[postParam.filteredListName] !== undefined) {\n            const temp = masterData[postParam.filteredListName].filter(item => !Array.isArray(postParam.primaryKeyValue) ? postParam.primaryKeyValue : postParam.primaryKeyValue.includes(item[postParam.primaryKeyField]));\n            masterData[postParam.filteredListName] = temp;\n\n            if (masterData[postParam.filteredListName].length > 0) {\n              return rsapi.post(postParam.fetchUrl, { ...postParam.fecthInputObject.fecthInputObject,\n                [postParam.primaryKeyField]: String(respObject.masterData[postParam.filteredListName][0][postParam.primaryKeyField])\n              }).then(response => {\n                masterData = { ...masterData,\n                  ...response.data\n                };\n              });\n            }\n          }\n        } else {\n          if (masterData[postParam.filteredListName] !== undefined) {\n            masterData[postParam.filteredListName] = replaceUpdatedObject(masterData[postParam.updatedListname], masterData[postParam.filteredListName], postParam.primaryKeyField);\n          }\n        }\n      }\n\n      return null;\n    }); //sortData(masterData);\n\n    dispatch({\n      type: DEFAULT_RETURN,\n      payload: { ...respObject,\n        masterData\n      }\n    });\n  };\n}\nexport function showUnderDevelopment() {\n  return function (dispatch) {\n    toast.info(intl.formatMessage({\n      id: \"IDS_UNDERDEVELOPMENT\"\n    }));\n  };\n} //Fetch record when clicking add button in Type3Component\n// export function onComboLoad(operation, userInfo, inputParam, ncontrolCode, extractedColumnList,IntegrationSettings) {\n//   return function (dispatch) {\n//     dispatch(initRequest(true));\n//     let urlArray = [];\n//     extractedColumnList.map(item=>{\n//       if(item.elnget){\n//         //urlArray.push(rsapi.post(\"https://logilabelntest.azurewebsites.net\"+\"/\"+item.classUrl+\"/\"+item.methodUrl,{}))\n//         urlArray.push(rsapi.post(IntegrationSettings[0].slinkname+\"/\"+item.classUrl+\"/\"+item.methodUrl,{}))\n//       }\n//       else{\n//         urlArray.push(rsapi.post(item.classUrl+\"/\"+item.methodUrl, { userinfo: userInfo }))\n//       }\n//     }\n//       )\n//           Axios.all(urlArray)\n//               .then(response => {\n//                 let ComboFieldData = [];\n//                 let dataList = [];\n//                     extractedColumnList.map((item, index)=> {\n//                       if(item.ndesigncomponentcode == designComponents.COMBOBOX){\n//                         ComboFieldData = constructOptionList(item.objectValue === null ? response[index].data || [] : response[index].data[item.objectValue], item.foreignDataField,\n//                                 item.dataField, undefined, undefined, undefined);\n//                            dataList[item.dataField] = ComboFieldData.get(\"OptionList\");\n//                       }\n//     extractedColumnList.map(item =>\n//       urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, { userinfo: userInfo }))\n//     )\n//     Axios.all(urlArray)\n//       .then(response => {\n//         let ComboFieldData = [];\n//         let dataList = [];\n//         extractedColumnList.map((item, index) => {\n//           if (item.ndesigncomponentcode == designComponents.COMBOBOX) {\n//             ComboFieldData = constructOptionList(item.objectValue === null ? response[index].data || [] : response[index].data[item.objectValue], item.foreignDataField,\n//               item.dataField, undefined, undefined, undefined);\n//             dataList[item.dataField] = ComboFieldData.get(\"OptionList\");\n//           }\n//         });\n//         dispatch({\n//           type: DEFAULT_RETURN,\n//           payload: {\n//             dataList,\n//             operation,\n//             screenName: inputParam.displayName,\n//             openModal: true,\n//             ncontrolCode, loading: false\n//           }\n//         })\n//       })\n//       .catch(error => {\n//         dispatch(initRequest(false));\n//         if (error.response.status === 500) {\n//           toast.error(error.message);\n//         } else {\n//           toast.warn(intl.formatMessage({\n//             id: error.response.data\n//           }));\n//         }\n//       })\n//   }\n// }\n//Fetch record when clicking add button in Type3Component\n\nexport function onComboLoad(operation, userInfo, inputParam, ncontrolCode, extractedColumnList, IntegrationSettings) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    extractedColumnList.map(item => {\n      if (item.elnget) {\n        //urlArray.push(rsapi.post(\"https://logilabelntest.azurewebsites.net\"+\"/\"+item.classUrl+\"/\"+item.methodUrl,{}))\n        urlArray.push(rsapi.post(IntegrationSettings[0].slinkname + \"/\" + item.classUrl + \"/\" + item.methodUrl, {}));\n      } else {\n        urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, {\n          userinfo: userInfo\n        }));\n      }\n    });\n    Axios.all(urlArray).then(response => {\n      let ComboFieldData = [];\n      let dataList = [];\n      extractedColumnList.map((item, index) => {\n        if (item.ndesigncomponentcode == designComponents.COMBOBOX) {\n          ComboFieldData = constructOptionList(item.objectValue === null ? response[index].data || [] : response[index].data[item.objectValue], item.foreignDataField, item.dataField, undefined, undefined, undefined);\n          dataList[item.dataField] = ComboFieldData.get(\"OptionList\");\n        }\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          dataList,\n          operation,\n          screenName: inputParam.displayName,\n          openModal: true,\n          ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch(initRequest(false));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n} //Fetch record when clicking edit button in Type3Component\n\nexport const fetchRecordCombo = fetchRecordParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const url = fetchRecordParam.inputParam.classUrl + \"/getActive\" + fetchRecordParam.inputParam.methodUrl + \"ById\";\n    urlArray.push(rsapi.post(url, {\n      [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue,\n      \"userinfo\": fetchRecordParam.userInfo\n    }));\n    fetchRecordParam.extractedColumnList.map(item => {\n      if (item.elnget) {\n        urlArray.push(rsapi.post(fetchRecordParam.integrationSettings[0].slinkname + \"/\" + item.classUrl + \"/\" + item.methodUrl, {}));\n      } else if (item.classUrl && item.methodUrl) {\n        urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, {\n          \"userinfo\": fetchRecordParam.userInfo\n        }));\n      }\n    });\n    Axios.all(urlArray).then(response => {\n      let ComboFieldData = [];\n      let dataList = [];\n      let selectedRecordData = { ...response[0].data\n      };\n      let responseData = [...response];\n      let extractedColumnData = [];\n      responseData.splice(0, 1);\n      fetchRecordParam.extractedColumnList.map(item => {\n        if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n          extractedColumnData.push(item);\n          selectedRecordData[item.dataField] = {\n            value: selectedRecordData[item.foreignDataField],\n            label: selectedRecordData[item.dataField]\n          };\n        } else if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n          selectedRecordData[item.dataField] = rearrangeDateFormat(fetchRecordParam.userInfo, selectedRecordData[item.dataField]);\n        }\n      });\n      extractedColumnData.map((field, index) => {\n        responseData.map((item, indexValue) => {\n          if (index === indexValue) {\n            if (field.classUrl === 'limselnusermapping' && field.methodUrl === 'getLimsUsers') {\n              responseData[index].data.push(response[0].data);\n            }\n\n            ComboFieldData = constructOptionList(field.objectValue === null ? responseData[index].data || [] : responseData[index].data[field.objectValue], field.foreignDataField, field.dataField, undefined, undefined, undefined);\n            dataList[field.dataField] = ComboFieldData.get(\"OptionList\");\n          }\n        });\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: selectedRecordData,\n          screenName: fetchRecordParam.screenName,\n          operation: fetchRecordParam.operation,\n          openModal: true,\n          ncontrolCode: fetchRecordParam.ncontrolCode,\n          loading: false,\n          selectedId: fetchRecordParam.primaryKeyValue,\n          dataList\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}; //Fetch record when clicking edit button in Type3Component\n// export const fetchRecordCombo = (fetchRecordParam) => {\n//   return (dispatch) => {\n//     dispatch(initRequest(true));\n//     let urlArray = [];\n//     const url = fetchRecordParam.inputParam.classUrl + \"/getActive\" + fetchRecordParam.inputParam.methodUrl + \"ById\";\n//     urlArray.push(rsapi.post(url, { [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo }));\n//     fetchRecordParam.extractedColumnList.map(item => {\n//       if(item.classUrl && item.methodUrl){\n//         if(item.elnget){\n//           urlArray.push(rsapi.post(\"https://logilabelntest.azurewebsites.net\"+\"/\"+item.classUrl+\"/\"+item.methodUrl,{}))\n//         }\n//         else{\n//           urlArray.push(rsapi.post(item.classUrl+\"/\"+item.methodUrl, { \"userinfo\" : fetchRecordParam.userInfo }))\n//         }\n//         //urlArray.push(rsapi.post(item.classUrl+\"/\"+item.methodUrl, { \"userinfo\" : fetchRecordParam.userInfo }))\n//       if (item.classUrl && item.methodUrl) {\n//         urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, { \"userinfo\": fetchRecordParam.userInfo }))\n//       }\n//     });\n//     Axios.all(urlArray)\n//       .then(response => {\n//       fetchRecordParam.extractedColumnList.map((item) => {\n//         if(item.ndesigncomponentcode === designComponents.COMBOBOX){\n//           extractedColumnData.push(item);\n//           selectedRecordData[item.dataField] = {\n//             value:selectedRecordData[item.foreignDataField],\n//             label:selectedRecordData[item.dataField]\n//           }                      \n//         }\n//         else if(item.ndesigncomponentcode === designComponents.DATEPICKER){\n//           selectedRecordData[item.dataField] = rearrangeDateFormat(fetchRecordParam.userInfo, selectedRecordData[item.dataField]);\n//         }\n//       })\n//       extractedColumnData.map((field, index) => {\n//         responseData.map((item, indexValue) => {\n//           if(index === indexValue){\n//             if(field.classUrl==='limselnusermapping'&&field.methodUrl==='getLimsUsers'){\n//             responseData[index].data.push(response[0].data);}\n//             ComboFieldData = constructOptionList(field.objectValue === null ? responseData[index].data || [] : responseData[index].data[field.objectValue], field.foreignDataField,\n//               field.dataField, undefined, undefined, undefined);\n//          dataList[field.dataField] = ComboFieldData.get(\"OptionList\");\n//         let ComboFieldData = [];\n//         let dataList = [];\n//         let selectedRecordData = { ...response[0].data };\n//         let responseData = [...response];\n//         let extractedColumnData = [];\n//         responseData.splice(0, 1);\n//         fetchRecordParam.extractedColumnList.map((item) => {\n//           if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n//             extractedColumnData.push(item);\n//             selectedRecordData[item.dataField] = {\n//               value: selectedRecordData[item.foreignDataField],\n//               label: selectedRecordData[item.dataField]\n//             }\n//           }\n//           else if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n//             selectedRecordData[item.dataField] = rearrangeDateFormat(fetchRecordParam.userInfo, selectedRecordData[item.dataField]);\n//           }\n//         })\n//         extractedColumnData.map((field, index) => {\n//           responseData.map((item, indexValue) => {\n//             if (index === indexValue) {\n//               ComboFieldData = constructOptionList(field.objectValue === null ? responseData[index].data || [] : responseData[index].data[field.objectValue], field.foreignDataField,\n//                 field.dataField, undefined, undefined, undefined);\n//               dataList[field.dataField] = ComboFieldData.get(\"OptionList\");\n//             }\n//           })\n//         });\n//         dispatch({\n//           type: DEFAULT_RETURN,\n//           payload: {\n//             selectedRecord: selectedRecordData,\n//             screenName: fetchRecordParam.screenName,\n//             operation: fetchRecordParam.operation,\n//             openModal: true,\n//             ncontrolCode: fetchRecordParam.ncontrolCode,\n//             loading: false,\n//             selectedId: fetchRecordParam.primaryKeyValue,\n//             dataList\n//           }\n//         });\n//       })\n//       .catch(error => {\n//         dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//         if (error.response.status === 500) {\n//           toast.error(intl.formatMessage({ id: error.message }));\n//         } else {\n//           toast.warn(intl.formatMessage({ id: error.response.data }));\n//         }\n//       })\n//   }\n// }","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ServiceAction.js"],"names":["toast","rsapi","initRequest","updateStore","DEFAULT_RETURN","REQUEST_FAILURE","sortData","searchData","searchJsonData","replaceUpdatedObject","constructOptionList","rearrangeDateFormat","Lims_JSON_stringify","intl","selectedDashBoardView","Axios","designComponents","callService","inputParam","dispatch","post","classUrl","methodUrl","inputData","then","response","data","warn","Success","updateInfo","typeName","masterData","organisation","undefined","rtn","warning","formatMessage","id","type","payload","activeTestTab","activeTestKey","activeBCTab","masterStatus","userInfo","userinfo","loading","selectedId","selectedRecord","dataState","selectedNode","SelectedNode","selectedNodeName","SelectedNodeName","primaryKeyValue","AddedChildPrimaryKey","displayName","reportFilePath","skip","take","testskip","testtake","catch","error","status","crudMaster","modalName","defaultInput","requestUrl","isFileupload","formData","append","JSON","stringify","operation","loadEsign","success","retrievedData","Array","isArray","postParam","selectedObject","primaryKeyField","foundIndex","inputListName","findIndex","x","isSingleGet","push","task","list","filter","item","openModal","activeSampleTab","showSample","respObject","errorCode","showEsign","design","nextNode","showConfirmAlert","loadPoolSource","openPortal","saveType","Object","keys","indexOf","postCRUDOrganiseSearch","console","log","message","obj","validateEsignCredential","sformname","smodulename","toLowerCase","fetchRecord","fetchRecordParam","url","screenName","ncontrolCode","filterColumnData","filterValue","filterParam","searchedData","length","isjsondata","searchFieldList","fetchUrl","fecthInputObject","sortField","sortOrder","forEach","unchangeList","isChild","searchRef","current","value","temp","includes","filtercombochange","Map","selectedComboName","selectedComboId","selectedCombo","viewAttachment","document","getElementById","setAttribute","FilePath","click","win","window","open","focus","filterTransactionList","filteredListName","selectedData","childRefs","map","childref","ref","childFilteredListName","isSingleSelect","String","isSortable","sortList","sortValue","changeList","name","postCRUDOrganiseTransSearch","postParamList","index","clearFilter","updatedListname","showUnderDevelopment","info","onComboLoad","extractedColumnList","IntegrationSettings","urlArray","elnget","slinkname","all","ComboFieldData","dataList","ndesigncomponentcode","COMBOBOX","objectValue","foreignDataField","dataField","get","fetchRecordCombo","integrationSettings","selectedRecordData","responseData","extractedColumnData","splice","label","DATEPICKER","field","indexValue"],"mappings":"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AAU,EAAEuE,gBAAgB,CAAChE,eAPtB;AAQPoI,UAAAA;AARO;AAFF,OAAD,CAAR;AAaD,KAhDH,EAiDG5H,KAjDH,CAiDSC,KAAK,IAAI;AACd5C,MAAAA,QAAQ,CAAC;AAAEmB,QAAAA,IAAI,EAAElC,cAAR;AAAwBmC,QAAAA,OAAO,EAAE;AAAEO,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIiB,KAAK,CAACtC,QAAN,CAAeuC,MAAf,KAA0B,GAA9B,EAAmC;AACjChE,QAAAA,KAAK,CAAC+D,KAAN,CAAYlD,IAAI,CAACuB,aAAL,CAAmB;AAAEC,UAAAA,EAAE,EAAE0B,KAAK,CAACgD;AAAZ,SAAnB,CAAZ;AACD,OAFD,MAEO;AACL/G,QAAAA,KAAK,CAAC2B,IAAN,CAAWd,IAAI,CAACuB,aAAL,CAAmB;AAAEC,UAAAA,EAAE,EAAE0B,KAAK,CAACtC,QAAN,CAAeC;AAArB,SAAnB,CAAX;AACD;AACF,KAxDH;AAyDD,GAzED;AA0ED,CA3EM,C,CAgFP;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { toast } from 'react-toastify';\r\nimport rsapi from '../rsapi';\r\nimport { initRequest, updateStore } from './LoginAction';\r\nimport { DEFAULT_RETURN, REQUEST_FAILURE } from './LoginTypes';\r\nimport { sortData, searchData, searchJsonData, replaceUpdatedObject, constructOptionList, rearrangeDateFormat, Lims_JSON_stringify } from '../components/CommonScript';\r\nimport { intl } from '../components/App';\r\nimport { selectedDashBoardView } from './DashBoardTypeAction';\r\nimport Axios from \"axios\";\r\nimport { designComponents } from '../components/Enumeration';\r\n// import { getValidComponent } from '../components/droparea/helpers';\r\n//import { Engine } from 'json-rules-engine';\r\n//import employee from '../rules/Employee-Salary.json';\r\n\r\nexport const callService = (inputParam) => {\r\n  return (dispatch) => {\r\n    dispatch(initRequest(true));\r\n    return rsapi.post(inputParam.classUrl + \"/get\" + inputParam.methodUrl, inputParam.inputData)\r\n      .then(response => {\r\n\r\n        // console.log(\"res:\", response);\r\n\r\n        ///Start of Rule Engine code///////////////////////\r\n\r\n        // const decisions1 = [\r\n        //   {\r\n        //       \"conditions\": {\r\n        //           \"all\": [\r\n        //               {\r\n        //                   \"fact\": \"Designation\",\r\n        //                   \"operator\": \"equal\",\r\n        //                   \"value\": \"Manager\"\r\n        //               },\r\n        //               {\r\n        //                   \"fact\": \"Experience\",\r\n        //                   \"operator\": \"greaterThan\",\r\n        //                   \"value\": 10\r\n        //               }\r\n        //           ]\r\n        //       },\r\n        //       \"event\": {\r\n        //           \"type\": \"RS.1500000\",\r\n        //           \"params\": {message: 'Your Salary is 1500000/annum!'}\r\n        //       }\r\n        //   }\r\n        // ];\r\n        // console.log(\"decisions:\",decisions1);  \r\n        // const inputs1 = {Designation: 'Manager', Experience: 9 };\r\n\r\n        // const engine = new Engine(employee.decisions);   \r\n\r\n        // engine.run(inputs1)\r\n        // .then(results => {       \r\n        //   console.log(\"Rule output:\", results.events);\r\n        //   if ( results.events.length > 0){\r\n        //     const events = results.events;\r\n        //     events.map(event => console.log(\"Message:\",event.params.message)); \r\n\r\n\r\n        //     rsapi.post(\"section/getSection\" , inputParam.inputData)\r\n        //     .then(response => {\r\n        //       console.log(\"data:\", response);\r\n        //       let data = response.data;\r\n        //       sortData(data);\r\n\r\n        //       const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: { masterData: [], organisation: undefined, }\r\n        //       }\r\n        //       dispatch(updateStore(updateInfo))\r\n\r\n        //       dispatch({\r\n        //         type: DEFAULT_RETURN,\r\n        //         payload: {\r\n        //           masterData: data,\r\n        //           activeTestTab: data.activeTestTab,\r\n        //           activeTestKey: data.activeTestKey,\r\n        //           activeBCTab: data.activeBCTab,\r\n        //           inputParam: inputParam,\r\n        //           masterStatus: \"\",\r\n        //           userInfo: inputParam.inputData.userinfo,\r\n        //           loading: false, selectedId: null, selectedRecord: {},\r\n        //           dataState: undefined,\r\n        //           organisation: {\r\n        //             selectedNode: data.SelectedNode, selectedNodeName: data.SelectedNodeName,\r\n        //             primaryKeyValue: data.AddedChildPrimaryKey\r\n        //           },\r\n        //           displayName: inputParam.displayName,\r\n        //           reportFilePath: undefined\r\n        //         }\r\n        //       })\r\n\r\n        //     })\r\n        //     .catch(error => {\r\n        //       if (error.response === undefined && error === \"Network Error\") {\r\n        //         dispatch({\r\n        //           type: REQUEST_FAILURE,\r\n        //           payload: {\r\n        //             error: \"Network Error\",\r\n        //             loading: false,\r\n        //           }\r\n        //         });\r\n        //       } else if (error.response.status === 417) {\r\n        //         toast.warning(error.response.data);\r\n        //         dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } });\r\n        //       } else {\r\n        //         dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } })\r\n        //       }\r\n        //     })\r\n        //   }\r\n        //   else{\r\n        //     console.log(\"Message:\",\"Rules Failed\");\r\n        //     dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } });\r\n        //   }         \r\n        // })\r\n        ///End of Rule Engine code///////////////////////\r\n\r\n        ////uncomment below for Orginial Source start////////////////////\r\n\r\n        if (response.data[\"Success\"]) {\r\n          toast.warn(response.data.Success);\r\n        }\r\n\r\n        let data = response.data;\r\n        sortData(data);\r\n\r\n        const updateInfo = {\r\n          typeName: DEFAULT_RETURN,\r\n          data: { masterData: [], organisation: undefined, }\r\n        }\r\n        dispatch(updateStore(updateInfo))\r\n\r\n        if (response.data.rtn == \"IDS_USERNOTINRESULTENTRYFLOW\") {\r\n          toast.warning(intl.formatMessage({ id: \"IDS_USERNOTINRESULTENTRYFLOW\" }));\r\n        }\r\n\r\n        dispatch({\r\n          type: DEFAULT_RETURN,\r\n          payload: {\r\n            masterData: data,\r\n            activeTestTab: data.activeTestTab,\r\n            activeTestKey: data.activeTestKey,\r\n            activeBCTab: data.activeBCTab,\r\n            inputParam: inputParam,\r\n            masterStatus: \"\",\r\n            userInfo: inputParam.inputData.userinfo,\r\n            loading: false, selectedId: null, selectedRecord: {},\r\n            dataState: undefined,\r\n            organisation: {\r\n              selectedNode: data.SelectedNode, selectedNodeName: data.SelectedNodeName,\r\n              primaryKeyValue: data.AddedChildPrimaryKey\r\n            },\r\n            displayName: inputParam.displayName,\r\n            reportFilePath: undefined,\r\n            skip: 0, take: undefined, testskip: 0, testtake: 5,\r\n          //  key:inputParam.key!==undefined?inputParam.key:\"\"\r\n          }\r\n        })\r\n\r\n        ///Uncomment till above for original source\r\n      })\r\n      .catch(error => {\r\n        //console.log(\"error:\", error);\r\n        if (error.response === undefined && error === \"Network Error\") {\r\n          dispatch({\r\n            type: REQUEST_FAILURE,\r\n            payload: {\r\n              error: \"Network Error\",\r\n              loading: false,\r\n            }\r\n          });\r\n        } else if (error.response.status === 417) {\r\n          toast.warning(error.response.data);\r\n          dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } });\r\n        } else {\r\n          dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } })\r\n        }\r\n      })\r\n    \r\n  };\r\n};\r\n\r\n//Start- Add /Edit/Delete Master Data\r\nexport function crudMaster(inputParam, masterData, modalName, defaultInput) {\r\n  return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n    let requestUrl = '';\r\n    if (inputParam.isFileupload) {\r\n      const formData = inputParam.formData;\r\n      formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\r\n      requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, formData);\r\n    } else {\r\n      requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData });\r\n    }\r\n    return requestUrl\r\n      .then(response => {\r\n        if (response.status === 202) {\r\n          //HttpStatus:Accepted\r\n          //Use this block when u need to display any success message\r\n\r\n          dispatch({\r\n            type: DEFAULT_RETURN, payload: {\r\n              loadEsign: false,\r\n              [modalName]: false,\r\n              loading: false\r\n            }\r\n          })\r\n          toast.success(response.data);\r\n        }\r\n        else if (response.status === 208) {\r\n          //HttpStatus:Accepted\r\n          //208-Already Reported\r\n          dispatch({\r\n            type: DEFAULT_RETURN, payload: {\r\n              loadEsign: false,\r\n              [modalName]: false,\r\n              loading: false,\r\n\r\n            }\r\n          })\r\n          toast.warn(response.data);\r\n        }\r\n        else {\r\n          const retrievedData = sortData(response.data);\r\n          if (masterData === undefined || Array.isArray(retrievedData)) {\r\n            masterData = retrievedData;\r\n          }\r\n          else {\r\n            masterData = {\r\n              ...masterData,\r\n              ...retrievedData\r\n            };\r\n            if (modalName === \"openModal\" && inputParam.operation !== \"delete\"\r\n              && inputParam.operation !== \"create\" && inputParam.operation !== \"copy\") {\r\n\r\n              if (inputParam.postParam) {\r\n                if (masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]) {\r\n                  const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                    x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]\r\n                  );\r\n                  masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\r\n                } else {\r\n                  const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                    x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][0][inputParam.postParam.primaryKeyField]\r\n                  );\r\n                  masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject][0];\r\n                }\r\n              }\r\n            }\r\n            else if (modalName === \"openModal\" && inputParam.operation === \"create\") {\r\n              if (inputParam.postParam && inputParam.postParam.isSingleGet) {\r\n                masterData[inputParam.postParam.inputListName].push(response.data[inputParam.postParam.selectedObject]);\r\n                //masterData[inputParam.postParam.selectedObject] = response.data;\r\n                sortData(masterData);\r\n              }\r\n            }\r\n            else if (modalName === \"openChildModal\" && inputParam.operation === \"create\") {//searchedData\r\n              if (inputParam.postParam && inputParam.postParam.isSingleGet) {\r\n                const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                  x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]\r\n                );\r\n                masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\r\n\r\n                if (masterData[\"searchedData\"] !== undefined) {\r\n                  const foundIndex = masterData[\"searchedData\"].findIndex(\r\n                    x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]\r\n                  );\r\n                  masterData[\"searchedData\"][foundIndex] = masterData[inputParam.postParam.selectedObject];\r\n\r\n                }\r\n                sortData(masterData);\r\n              }\r\n            }\r\n            else if (modalName === \"openModal\" && inputParam.operation === \"copy\") {\r\n              if (inputParam.postParam && inputParam.postParam.isSingleGet) {\r\n                masterData[inputParam.postParam.inputListName].push(response.data[inputParam.postParam.selectedObject]);\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n              }\r\n            }\r\n            else if (modalName === \"openModal\" && inputParam.operation === \"delete\") {\r\n              if (inputParam.postParam && inputParam.postParam.isSingleGet) {\r\n                if (inputParam.postParam.task === \"cancel\") {\r\n                  const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                    x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]\r\n                  );\r\n                  masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\r\n                }\r\n                else {\r\n                  const list = masterData[inputParam.postParam.inputListName]\r\n                    .filter(item => item[inputParam.postParam.primaryKeyField] !== inputParam.postParam.primaryKeyValue)\r\n                  masterData[inputParam.postParam.inputListName] = list;\r\n\r\n                  // const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                  //   x => x[inputParam.postParam.primaryKeyField] === inputParam.postParam.primaryKeyField\r\n                  // );\r\n                  // masterData[inputParam.postParam.inputListName].splice(foundIndex, 1)         \r\n\r\n                }\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n              }\r\n            }\r\n          }\r\n          // (masterData);\r\n\r\n          let openModal = false;\r\n         // let openChildModal= false;\r\n\r\n          let selectedRecord = {};\r\n          let activeSampleTab = inputParam.activeSampleTab ? { activeSampleTab: inputParam.activeSampleTab } : ''\r\n          let activeTestKey = inputParam.activeTestKey ? { activeTestKey: inputParam.activeTestKey } : ''\r\n          let showSample = inputParam.showSample ? inputParam.showSample : ''\r\n          let respObject = {\r\n            masterData,\r\n            inputParam,\r\n            modalName,\r\n         //   openChildModal,\r\n            //modalName:undefined,\r\n            [modalName]: openModal,\r\n            operation: inputParam.operation,\r\n            masterStatus: \"\",\r\n            errorCode: undefined,\r\n            loadEsign: false,\r\n            showEsign: false,\r\n            selectedRecord,\r\n            loading: false,\r\n            dataState: inputParam.dataState,\r\n            selectedId: inputParam.selectedId,\r\n            ...activeSampleTab,\r\n            ...activeTestKey,\r\n            showSample,\r\n            design: [],\r\n            //organisation: undefined\r\n            organisation: inputParam.nextNode ? {\r\n              selectedNode: inputParam.nextNode,\r\n              selectedNodeName: masterData.SelectedNodeName,\r\n              primaryKeyValue: masterData.AddedChildPrimaryKey,\r\n\r\n            } : undefined,\r\n            showConfirmAlert: inputParam.showConfirmAlert,\r\n            loadPoolSource: inputParam.loadPoolSource,\r\n            skip: inputParam.skip || undefined,\r\n            take: inputParam.take || undefined,\r\n            openPortal: false\r\n          }\r\n\r\n          if (inputParam.operation === \"create\" || inputParam.operation === \"copy\") {\r\n            if (inputParam.saveType === 2) {\r\n              openModal = true;\r\n              selectedRecord = defaultInput;\r\n\r\n            }\r\n            respObject = { ...respObject, [modalName]: openModal, selectedRecord };\r\n          }\r\n          if ((modalName === \"openModal\" || modalName === \"openChildModal\") && Object.keys(masterData).indexOf(\"searchedData\") !== -1\r\n            && masterData[\"searchedData\"] !== undefined) {\r\n            dispatch(postCRUDOrganiseSearch(inputParam.postParam, respObject))\r\n          }\r\n          else {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, modalName: undefined } })\r\n          }\r\n        }\r\n      })\r\n      .catch(response => {\r\n        console.log(\"error:\", response);\r\n        if (response.response.status === 500) {\r\n          dispatch({\r\n            type: REQUEST_FAILURE,\r\n            payload: {\r\n              error: response.message,\r\n              loading: false,\r\n              // openPortal:this.props.Login.openPortal,\r\n              //openModal:inputParam.openPortal?false:true\r\n            }\r\n          });\r\n        } else {\r\n\r\n          let obj = {}\r\n          if (inputParam.openPortal === true) {\r\n            obj = { openModal: false }\r\n          }\r\n\r\n          if (inputParam.operation === \"delete\" || inputParam.operation === \"receive\" ||\r\n            inputParam.operation === 'approve' || inputParam.operation === \"correction\"\r\n            || inputParam.operation === \"complete\" || inputParam.operation === \"dynamic\"\r\n            || inputParam.operation === \"setDefault\" || inputParam.operation === \"reset\" || inputParam.operation === \"retire\"\r\n            || inputParam.operation === \"xml\" || inputParam.operation === 'blackList' || inputParam.operation === 'attendance'\r\n            || inputParam.operation === 'certified' || inputParam.operation === 'competent' || inputParam.operation === \"invite\"\r\n            || inputParam.operation === \"cancel\" || inputParam.operation === \"cancel\" || inputParam.operation === \"conduct\"\r\n            || inputParam.operation === \"attend\" || inputParam.operation === \"certify\" || inputParam.operation === \"Competent\") {\r\n            dispatch({\r\n              type: DEFAULT_RETURN,\r\n              payload: {\r\n                masterStatus: response.response.data,\r\n                errorCode: response.response.status,\r\n                loadEsign: false,\r\n                [modalName]: false,\r\n                loading: false,\r\n                openPortal: false\r\n              }\r\n            });\r\n          } else {\r\n            dispatch({\r\n              type: DEFAULT_RETURN,\r\n              payload: {\r\n                masterStatus: response.response.data,\r\n                errorCode: response.response.status,\r\n                loadEsign: false, loading: false,\r\n                ...obj\r\n              }\r\n            });\r\n          }\r\n\r\n        }\r\n      });\r\n  }\r\n}\r\n\r\nexport const validateEsignCredential = (inputParam, modalName) => {\r\n  return (dispatch) => {\r\n    dispatch(initRequest(true));\r\n    if(inputParam && inputParam.inputData && inputParam.inputData.userinfo){\r\n      inputParam.inputData[\"userinfo\"] = {\r\n        ...inputParam.inputData.userinfo,\r\n        sformname: Lims_JSON_stringify(inputParam.inputData.userinfo.sformname),\r\n        smodulename: Lims_JSON_stringify(inputParam.inputData.userinfo.smodulename),\r\n      }\r\n    }\r\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n      .then(response => {\r\n        if (response.data === \"Success\") {\r\n\r\n          const methodUrl = inputParam[\"screenData\"][\"inputParam\"][\"methodUrl\"];\r\n          inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n          if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\r\n            //if(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n            //  && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"].length > 0)\r\n            //  {\r\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n            if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\r\n              delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n              delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n              delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n            }\r\n            //  }\r\n          }\r\n          dispatch(crudMaster(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"], modalName))\r\n        }\r\n      })\r\n      .catch(error => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n        if (error.response.status === 500) {\r\n          toast.error(intl.formatMessage({ id: error.message }));\r\n        } else {\r\n          toast.warn(intl.formatMessage({ id: error.response.data }));\r\n        }\r\n      })\r\n  };\r\n};\r\n\r\nexport const fetchRecord = (fetchRecordParam) => {\r\n  return (dispatch) => {\r\n\r\n    dispatch(initRequest(true));\r\n    const url = fetchRecordParam.inputParam.classUrl + \"/getActive\" + fetchRecordParam.inputParam.methodUrl + \"ById\";\r\n    rsapi.post(url, {\r\n      [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo\r\n    })\r\n      .then(response => {\r\n        dispatch({\r\n          type: DEFAULT_RETURN,\r\n          payload: {\r\n            selectedRecord: response.data,\r\n            screenName: fetchRecordParam.screenName,\r\n            operation: fetchRecordParam.operation,\r\n            openModal: true,\r\n            ncontrolCode: fetchRecordParam.ncontrolCode,\r\n            loading: false,\r\n            selectedId: fetchRecordParam.primaryKeyValue\r\n          }\r\n        });\r\n      })\r\n      .catch(error => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n        if (error.response.status === 500) {\r\n          toast.error(intl.formatMessage({ id: error.message }));\r\n        } else {\r\n          toast.warn(intl.formatMessage({ id: error.response.data }));\r\n        }\r\n      })\r\n  }\r\n}\r\n\r\nexport function filterColumnData(filterValue, filterParam) {\r\n  return function (dispatch) {\r\n\r\n    let masterData = filterParam.masterData;\r\n\r\n    let primaryKeyValue = 0;\r\n    let searchedData = undefined;\r\n    if (filterValue === \"\") {\r\n      if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\r\n        // if(filterParam.isjsondata)\r\n        // {\r\n        //    primaryKeyValue = masterData[filterParam.inputListName][0][\"jsondata\"][filterParam.primaryKeyField]\r\n\r\n        //  }\r\n        //else\r\n        // {\r\n        primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\r\n        // }\r\n      }\r\n    }\r\n    else {\r\n      if (filterParam.isjsondata) {\r\n        searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n      }\r\n      else {\r\n        searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n\r\n      }\r\n      if (searchedData.length > 0) {\r\n        //  if(filterParam.isjsondata)\r\n        // {\r\n        //  primaryKeyValue = searchedData[0][\"jsondata\"][filterParam.primaryKeyField];\r\n        //  }\r\n        // else{\r\n        primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\r\n        //  }\r\n      }\r\n    }\r\n\r\n    if (primaryKeyValue !== 0) {\r\n      dispatch(initRequest(true));\r\n      return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject, [filterParam.primaryKeyField]: primaryKeyValue })\r\n        .then(response => {\r\n          masterData[\"searchedData\"] = searchedData;\r\n          masterData = { ...masterData, ...response.data };\r\n\r\n          if (filterParam.inputListName === \"DashBoardView\") {\r\n            dispatch(selectedDashBoardView(response, masterData));\r\n          }\r\n          else {\r\n            if (filterParam.sortField) {\r\n              sortData(masterData, filterParam.sortOrder, filterParam.sortField);\r\n            }\r\n            else {\r\n              sortData(masterData);\r\n            }\r\n            dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false, skip: 0, take: 10, selectedId: null } });\r\n          }\r\n        })\r\n        .catch(error => {\r\n          dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n          if (error.response.status === 500) {\r\n            toast.error(intl.formatMessage({ id: error.message }));\r\n          }\r\n          else {\r\n            toast.warn(intl.formatMessage({ id: error.response.data }));\r\n          }\r\n        })\r\n    }\r\n    else {\r\n      masterData[filterParam.selectedObject] = undefined;\r\n      masterData[\"searchedData\"] = [];\r\n      Object.keys(masterData).forEach(item => {\r\n        if (item !== filterParam.inputListName && item !== filterParam.selectedObject\r\n          && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1)\r\n          masterData[item] = [];\r\n      })\r\n      dispatch({\r\n        type: DEFAULT_RETURN, payload: {\r\n          masterData, operation: null, modalName: undefined,\r\n          loading: false\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport function postCRUDOrganiseSearch(postParam, respObject) {\r\n  return function (dispatch) {\r\n\r\n    let masterData = respObject.masterData;\r\n\r\n    if (respObject.inputParam.operation === \"create\" || respObject.inputParam.operation === \"copy\") {\r\n      if (respObject.modalName === \"openModal\") {\r\n        if (respObject.inputParam.isChild === undefined) {\r\n          respObject.inputParam.searchRef.current.value = \"\";\r\n          masterData[\"searchedData\"] = undefined;\r\n        }\r\n      }\r\n      dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, masterData, modalName: undefined } })\r\n    }\r\n    else if (respObject.inputParam.operation === \"delete\") {\r\n\r\n      if (masterData[\"searchedData\"] !== undefined && respObject.modalName === \"openModal\") {\r\n        let temp = masterData[\"searchedData\"];\r\n        let primaryKeyValue = respObject.masterData[\"searchedData\"][0][postParam.primaryKeyField];\r\n        if (respObject.inputParam.isChild === undefined) {\r\n\r\n          temp = masterData[\"searchedData\"].filter(item => Array.isArray(postParam.primaryKeyValue) ?\r\n            !postParam.primaryKeyValue.includes(item[postParam.primaryKeyField])\r\n            : item[postParam.primaryKeyField] !== postParam.primaryKeyValue);\r\n          primaryKeyValue = temp.length > 0 ? temp[0][postParam.primaryKeyField] : 0;\r\n        }\r\n        else {\r\n          primaryKeyValue = masterData[postParam.selectedObject][postParam.primaryKeyField];\r\n        }\r\n        masterData[\"searchedData\"] = temp;\r\n        respObject = { ...respObject, modalName: undefined };\r\n        if (masterData[\"searchedData\"].length > 0) {\r\n          primaryKeyValue = masterData[\"searchedData\"][0][postParam.primaryKeyField];\r\n\r\n          return rsapi.post(postParam.fetchUrl, {\r\n            ...postParam.fecthInputObject, [postParam.primaryKeyField]: primaryKeyValue\r\n          })\r\n            .then(response => {\r\n              masterData = { ...masterData, ...response.data };\r\n              sortData(masterData);\r\n              dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, masterData } });\r\n            })\r\n            .catch(error => {\r\n              dispatch({ type: DEFAULT_RETURN, payload: { ...respObject } })\r\n              if (error.response.status === 500) {\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n              }\r\n              else {\r\n                toast.warn(intl.formatMessage({ id: error.response.data }));\r\n              }\r\n            })\r\n        }\r\n        else {\r\n          masterData[postParam.selectedObject] = undefined;\r\n          masterData[\"searchedData\"] = [];\r\n          Object.keys(masterData).forEach(item => {\r\n            if (item !== postParam.inputListName && item !== postParam.selectedObject\r\n              && postParam.unchangeList && postParam.unchangeList.indexOf(item) === -1)\r\n              masterData[item] = [];\r\n          })\r\n\r\n          dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, masterData } });\r\n        }\r\n      }\r\n      else {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, masterData, modalName: undefined } });\r\n      }\r\n    }\r\n    else if (respObject.inputParam.filtercombochange) {\r\n\r\n      respObject = { ...respObject, modalName: undefined };\r\n      if (masterData[\"searchedData\"] !== undefined) {\r\n        masterData[\"searchedData\"] = undefined;\r\n        respObject.inputParam.searchRef.current.value = \"\";\r\n      }\r\n\r\n      let Map = {}\r\n      if (postParam.selectedComboName !== undefined) {\r\n        Map = { [postParam.selectedComboName]: { [postParam.selectedComboId]: postParam.selectedCombo } }\r\n      }\r\n\r\n      dispatch({\r\n        type: DEFAULT_RETURN, payload: {\r\n          ...respObject, masterData, ...Map\r\n        }\r\n      });\r\n    }\r\n    else {\r\n      respObject = { ...respObject, modalName: undefined };\r\n      if (masterData[\"searchedData\"] !== undefined) {\r\n        if (masterData[postParam.selectedObject][postParam.primaryKeyField]) {\r\n\r\n          const foundIndex = masterData[\"searchedData\"].findIndex(\r\n            x => x[postParam.primaryKeyField] === masterData[postParam.selectedObject][postParam.primaryKeyField]\r\n          );\r\n          masterData[\"searchedData\"][foundIndex] = masterData[postParam.selectedObject];\r\n        } else {\r\n          const foundIndex = masterData[\"searchedData\"].findIndex(\r\n            x => x[postParam.primaryKeyField] === masterData[postParam.selectedObject][0][postParam.primaryKeyField]\r\n          );\r\n          masterData[\"searchedData\"][foundIndex] = masterData[postParam.selectedObject][0];\r\n        }\r\n      }\r\n      dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, masterData } });\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport const viewAttachment = (inputParam) => {\r\n  return (dispatch) => {\r\n    let inputData = { ...inputParam.inputData }\r\n    if (inputData['selectedRecord']) {\r\n      delete inputData['selectedRecord']['expanded'];\r\n    }\r\n    dispatch(initRequest(true));\r\n    rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, inputData)\r\n      .then(response => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n        let value = \"\";\r\n        if (response.data[\"AttachFile\"]) {\r\n          document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\r\n          document.getElementById(\"download_data\").click();\r\n        } else if (response.data[\"AttachLink\"]) {\r\n          value = response.data[\"AttachLink\"];\r\n          var win = window.open(value, '_blank');\r\n          if (win) {\r\n            win.focus();\r\n          } else {\r\n            intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\r\n          }\r\n        }\r\n        else {\r\n          if (response.data[\"rtn\"]) {\r\n            toast.warn(intl.formatMessage({ id: response.data.rtn }));\r\n          }\r\n\r\n        }\r\n      })\r\n      .catch(error => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n        if (error.response.status === 500) {\r\n          toast.error(error.message);\r\n        } else {\r\n          toast.warn(error.response.data);\r\n        }\r\n      });\r\n  }\r\n}\r\n\r\nexport function filterTransactionList(filterValue, filterParam, filteredListName) {\r\n  return function (dispatch) {\r\n    let masterData = filterParam.masterData;\r\n    filteredListName = filteredListName || \"searchedData\"\r\n    let primaryKeyValue = 0;\r\n    let searchedData = undefined;\r\n    let selectedData = []\r\n    filterParam.childRefs && filterParam.childRefs.map(childref => {\r\n      if (childref.ref !== undefined && childref.ref.current !== null) {\r\n        childref.ref.current.value = \"\";\r\n        masterData[childref.childFilteredListName] = undefined\r\n      }\r\n      return null;\r\n    })\r\n    if (filterValue === \"\") {\r\n      if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\r\n        primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\r\n        selectedData.push(masterData[filterParam.inputListName][0])\r\n      }\r\n    }\r\n    else {\r\n      if (masterData[filterParam.inputListName]) {\r\n        searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n      } else {\r\n        searchedData = []\r\n      }\r\n\r\n      if (searchedData.length > 0) {\r\n        primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\r\n        selectedData.push(searchedData[0])\r\n      }\r\n    }\r\n\r\n    if (primaryKeyValue !== 0) {\r\n      primaryKeyValue = filterParam.isSingleSelect ? primaryKeyValue : String(primaryKeyValue)\r\n      dispatch(initRequest(true));\r\n      return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject, [filterParam.primaryKeyField]: primaryKeyValue })\r\n        .then(response => {\r\n          const dataState = {\r\n            skip: 0,\r\n            take: 10\r\n          }\r\n          masterData[filteredListName] = searchedData;\r\n          masterData[filterParam.selectedObject] = selectedData\r\n          masterData = { ...masterData, ...response.data };\r\n          if (filterParam.isSortable) {\r\n            sortData(masterData[filterParam.sortList], 'descending', filterParam.sortValue);\r\n          }\r\n          dispatch({\r\n            type: DEFAULT_RETURN, payload: {\r\n              masterData, loading: false,\r\n              // skip: 0, take: 10, testskip: 0, testtake: 10,dataState \r\n              skip: filterParam.skip, take: filterParam.take,\r\n              testskip: filterParam.testskip, testtake: filterParam.testtake,\r\n              dataState\r\n            }\r\n          });\r\n        })\r\n        .catch(error => {\r\n          dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n          if (error.response.status === 500) {\r\n            toast.error(intl.formatMessage({ id: error.message }));\r\n          }\r\n          else {\r\n            toast.warn(intl.formatMessage({ id: error.response.data }));\r\n          }\r\n        })\r\n    }\r\n    else {\r\n      masterData[filterParam.selectedObject] = undefined;\r\n      masterData[filteredListName] = [];\r\n      filterParam.changeList.map(name => masterData[name] = [])\r\n      // Object.keys(masterData).forEach(item=> {\r\n      //   if (item !== filterParam.inputListName && item !== filterParam.selectedObject \r\n      //     && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) ===-1)\r\n      //       masterData[item] = [];\r\n      //   })   \r\n      dispatch({\r\n        type: DEFAULT_RETURN, payload: {\r\n          masterData, operation: null, modalName: undefined,\r\n          loading: false\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function postCRUDOrganiseTransSearch(postParamList, respObject) {\r\n  return function (dispatch) {\r\n    let masterData = respObject.masterData;\r\n    postParamList && Array.isArray(postParamList) && postParamList.map((postParam, index) => {\r\n      if (postParam.clearFilter === 'yes') {\r\n\r\n        if (postParam.searchRef.current) {\r\n          postParam.searchRef.current.value = \"\";\r\n        }\r\n        masterData[postParam.filteredListName] = undefined;\r\n        postParam.childRefs && postParam.childRefs.map(childref => {\r\n          if (childref.ref !== undefined && childref.ref.current !== null) {\r\n            childref.ref.current.value = \"\";\r\n            masterData[childref.childFilteredListName] = undefined\r\n          }\r\n          return null;\r\n        })\r\n\r\n      }\r\n      if (Object.keys(masterData).indexOf(postParam.filteredListName) !== -1 && masterData[postParam.filteredListName] !== undefined) {\r\n\r\n        if (postParam.clearFilter === 'check') {\r\n          if (masterData[postParam.filteredListName] !== undefined) {\r\n            const temp = masterData[postParam.filteredListName].filter(item => !Array.isArray(postParam.primaryKeyValue) ? postParam.primaryKeyValue : postParam.primaryKeyValue.includes(item[postParam.primaryKeyField]));\r\n            masterData[postParam.filteredListName] = temp;\r\n\r\n            if (masterData[postParam.filteredListName].length > 0) {\r\n              return rsapi.post(postParam.fetchUrl, { ...postParam.fecthInputObject.fecthInputObject, [postParam.primaryKeyField]: String(respObject.masterData[postParam.filteredListName][0][postParam.primaryKeyField]) })\r\n                .then(response => {\r\n                  masterData = { ...masterData, ...response.data };\r\n                })\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          if (masterData[postParam.filteredListName] !== undefined) {\r\n            masterData[postParam.filteredListName] = replaceUpdatedObject(masterData[postParam.updatedListname], masterData[postParam.filteredListName], postParam.primaryKeyField)\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    })\r\n    //sortData(masterData);\r\n    dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, masterData } })\r\n  }\r\n}\r\n\r\nexport function showUnderDevelopment() {\r\n  return function (dispatch) {\r\n    toast.info(intl.formatMessage({ id: \"IDS_UNDERDEVELOPMENT\" }));\r\n  }\r\n}\r\n\r\n//Fetch record when clicking add button in Type3Component\r\n// export function onComboLoad(operation, userInfo, inputParam, ncontrolCode, extractedColumnList,IntegrationSettings) {\r\n//   return function (dispatch) {\r\n\r\n//     dispatch(initRequest(true));\r\n//     let urlArray = [];\r\n//     extractedColumnList.map(item=>{\r\n//       if(item.elnget){\r\n//         //urlArray.push(rsapi.post(\"https://logilabelntest.azurewebsites.net\"+\"/\"+item.classUrl+\"/\"+item.methodUrl,{}))\r\n//         urlArray.push(rsapi.post(IntegrationSettings[0].slinkname+\"/\"+item.classUrl+\"/\"+item.methodUrl,{}))\r\n//       }\r\n//       else{\r\n//         urlArray.push(rsapi.post(item.classUrl+\"/\"+item.methodUrl, { userinfo: userInfo }))\r\n//       }\r\n      \r\n//     }\r\n      \r\n//       )\r\n\r\n//           Axios.all(urlArray)\r\n//               .then(response => {\r\n//                 let ComboFieldData = [];\r\n//                 let dataList = [];\r\n                     \r\n//                     extractedColumnList.map((item, index)=> {\r\n//                       if(item.ndesigncomponentcode == designComponents.COMBOBOX){\r\n//                         ComboFieldData = constructOptionList(item.objectValue === null ? response[index].data || [] : response[index].data[item.objectValue], item.foreignDataField,\r\n//                                 item.dataField, undefined, undefined, undefined);\r\n//                            dataList[item.dataField] = ComboFieldData.get(\"OptionList\");\r\n//                       }\r\n//     extractedColumnList.map(item =>\r\n//       urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, { userinfo: userInfo }))\r\n//     )\r\n\r\n//     Axios.all(urlArray)\r\n//       .then(response => {\r\n//         let ComboFieldData = [];\r\n//         let dataList = [];\r\n\r\n//         extractedColumnList.map((item, index) => {\r\n//           if (item.ndesigncomponentcode == designComponents.COMBOBOX) {\r\n//             ComboFieldData = constructOptionList(item.objectValue === null ? response[index].data || [] : response[index].data[item.objectValue], item.foreignDataField,\r\n//               item.dataField, undefined, undefined, undefined);\r\n//             dataList[item.dataField] = ComboFieldData.get(\"OptionList\");\r\n//           }\r\n\r\n//         });\r\n\r\n//         dispatch({\r\n//           type: DEFAULT_RETURN,\r\n//           payload: {\r\n//             dataList,\r\n//             operation,\r\n//             screenName: inputParam.displayName,\r\n//             openModal: true,\r\n//             ncontrolCode, loading: false\r\n//           }\r\n//         })\r\n//       })\r\n//       .catch(error => {\r\n//         dispatch(initRequest(false));\r\n//         if (error.response.status === 500) {\r\n//           toast.error(error.message);\r\n//         } else {\r\n//           toast.warn(intl.formatMessage({\r\n//             id: error.response.data\r\n//           }));\r\n//         }\r\n//       })\r\n//   }\r\n// }\r\n\r\n\r\n//Fetch record when clicking add button in Type3Component\r\n\r\nexport function onComboLoad(operation, userInfo, inputParam, ncontrolCode, extractedColumnList,IntegrationSettings) {\r\n return function (dispatch) {\r\n dispatch(initRequest(true));\r\n   let urlArray = [];\r\n        extractedColumnList.map(item =>\r\n      {\r\n        if(item.elnget){\r\n          //urlArray.push(rsapi.post(\"https://logilabelntest.azurewebsites.net\"+\"/\"+item.classUrl+\"/\"+item.methodUrl,{}))\r\n          urlArray.push(rsapi.post(IntegrationSettings[0].slinkname+\"/\"+item.classUrl+\"/\"+item.methodUrl,{}))\r\n        }\r\n        else{\r\n          urlArray.push(rsapi.post(item.classUrl+\"/\"+item.methodUrl, { userinfo: userInfo }))\r\n        }\r\n        \r\n      }\r\n    )\r\n    Axios.all(urlArray)\r\n      .then(response => {\r\n        let ComboFieldData = [];\r\n        let dataList = [];\r\n        extractedColumnList.map((item, index) => {\r\n          if (item.ndesigncomponentcode == designComponents.COMBOBOX) {\r\n            ComboFieldData = constructOptionList(item.objectValue === null ? response[index].data || [] : response[index].data[item.objectValue], item.foreignDataField,\r\n             item.dataField, undefined, undefined, undefined);\r\n            dataList[item.dataField] = ComboFieldData.get(\"OptionList\");\r\n          }\r\n        });\r\n        dispatch({\r\n          type: DEFAULT_RETURN,\r\n         payload: {\r\n            dataList,\r\n            operation,\r\n            screenName: inputParam.displayName,\r\n            openModal: true,\r\n            ncontrolCode, loading: false\r\n          }\r\n        })\r\n      })\r\n\r\n      .catch(error => {\r\n\r\n        dispatch(initRequest(false));\r\n\r\n        if (error.response.status === 500) {\r\n\r\n          toast.error(error.message);\r\n\r\n        } else {\r\n\r\n          toast.warn(intl.formatMessage({\r\n\r\n            id: error.response.data\r\n\r\n          }));\r\n\r\n        }\r\n\r\n      })\r\n\r\n  }\r\n\r\n}\r\n\r\n//Fetch record when clicking edit button in Type3Component\r\nexport const fetchRecordCombo = (fetchRecordParam) => {\r\n  return (dispatch) => {\r\n\r\n    dispatch(initRequest(true));\r\n    let urlArray = [];\r\n    const url = fetchRecordParam.inputParam.classUrl + \"/getActive\" + fetchRecordParam.inputParam.methodUrl + \"ById\";\r\n    urlArray.push(rsapi.post(url, { [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo }));\r\n    fetchRecordParam.extractedColumnList.map(item => {\r\n\r\n      if(item.elnget){\r\n        urlArray.push(rsapi.post(fetchRecordParam.integrationSettings[0].slinkname+\"/\"+item.classUrl+\"/\"+item.methodUrl,{}))\r\n      }\r\n      else if (item.classUrl && item.methodUrl) {\r\n        urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, { \"userinfo\": fetchRecordParam.userInfo }))\r\n      }\r\n    });\r\n\r\n    Axios.all(urlArray)\r\n      .then(response => {\r\n\r\n        let ComboFieldData = [];\r\n        let dataList = [];\r\n        let selectedRecordData = { ...response[0].data };\r\n        let responseData = [...response];\r\n        let extractedColumnData = [];\r\n        responseData.splice(0, 1);\r\n\r\n        fetchRecordParam.extractedColumnList.map((item) => {\r\n          if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n            extractedColumnData.push(item);\r\n            selectedRecordData[item.dataField] = {\r\n              value: selectedRecordData[item.foreignDataField],\r\n              label: selectedRecordData[item.dataField]\r\n            }\r\n          }\r\n          else if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n            selectedRecordData[item.dataField] = rearrangeDateFormat(fetchRecordParam.userInfo, selectedRecordData[item.dataField]);\r\n          }\r\n        })\r\n\r\n        extractedColumnData.map((field, index) => {\r\n          responseData.map((item, indexValue) => {\r\n            if (index === indexValue) {\r\n              if(field.classUrl==='limselnusermapping'&&field.methodUrl==='getLimsUsers'){\r\n                             responseData[index].data.push(response[0].data);}\r\n              ComboFieldData = constructOptionList(field.objectValue === null ? responseData[index].data || [] : responseData[index].data[field.objectValue], field.foreignDataField,\r\n                field.dataField, undefined, undefined, undefined);\r\n              dataList[field.dataField] = ComboFieldData.get(\"OptionList\");\r\n            }\r\n          })\r\n        });\r\n\r\n        dispatch({\r\n          type: DEFAULT_RETURN,\r\n          payload: {\r\n            selectedRecord: selectedRecordData,\r\n            screenName: fetchRecordParam.screenName,\r\n            operation: fetchRecordParam.operation,\r\n            openModal: true,\r\n            ncontrolCode: fetchRecordParam.ncontrolCode,\r\n            loading: false,\r\n            selectedId: fetchRecordParam.primaryKeyValue,\r\n            dataList\r\n          }\r\n        });\r\n      })\r\n      .catch(error => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n        if (error.response.status === 500) {\r\n          toast.error(intl.formatMessage({ id: error.message }));\r\n        } else {\r\n          toast.warn(intl.formatMessage({ id: error.response.data }));\r\n        }\r\n      })\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n//Fetch record when clicking edit button in Type3Component\r\n// export const fetchRecordCombo = (fetchRecordParam) => {\r\n//   return (dispatch) => {\r\n\r\n//     dispatch(initRequest(true));\r\n//     let urlArray = [];\r\n//     const url = fetchRecordParam.inputParam.classUrl + \"/getActive\" + fetchRecordParam.inputParam.methodUrl + \"ById\";\r\n//     urlArray.push(rsapi.post(url, { [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo }));\r\n//     fetchRecordParam.extractedColumnList.map(item => {\r\n//       if(item.classUrl && item.methodUrl){\r\n\r\n//         if(item.elnget){\r\n//           urlArray.push(rsapi.post(\"https://logilabelntest.azurewebsites.net\"+\"/\"+item.classUrl+\"/\"+item.methodUrl,{}))\r\n//         }\r\n//         else{\r\n//           urlArray.push(rsapi.post(item.classUrl+\"/\"+item.methodUrl, { \"userinfo\" : fetchRecordParam.userInfo }))\r\n//         }\r\n//         //urlArray.push(rsapi.post(item.classUrl+\"/\"+item.methodUrl, { \"userinfo\" : fetchRecordParam.userInfo }))\r\n//       if (item.classUrl && item.methodUrl) {\r\n//         urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, { \"userinfo\": fetchRecordParam.userInfo }))\r\n//       }\r\n//     });\r\n\r\n//     Axios.all(urlArray)\r\n//       .then(response => {\r\n\r\n//       fetchRecordParam.extractedColumnList.map((item) => {\r\n//         if(item.ndesigncomponentcode === designComponents.COMBOBOX){\r\n//           extractedColumnData.push(item);\r\n//           selectedRecordData[item.dataField] = {\r\n//             value:selectedRecordData[item.foreignDataField],\r\n//             label:selectedRecordData[item.dataField]\r\n//           }                      \r\n//         }\r\n//         else if(item.ndesigncomponentcode === designComponents.DATEPICKER){\r\n//           selectedRecordData[item.dataField] = rearrangeDateFormat(fetchRecordParam.userInfo, selectedRecordData[item.dataField]);\r\n//         }\r\n//       })\r\n           \r\n//       extractedColumnData.map((field, index) => {\r\n//         responseData.map((item, indexValue) => {\r\n//           if(index === indexValue){\r\n//             if(field.classUrl==='limselnusermapping'&&field.methodUrl==='getLimsUsers'){\r\n//             responseData[index].data.push(response[0].data);}\r\n//             ComboFieldData = constructOptionList(field.objectValue === null ? responseData[index].data || [] : responseData[index].data[field.objectValue], field.foreignDataField,\r\n//               field.dataField, undefined, undefined, undefined);\r\n//          dataList[field.dataField] = ComboFieldData.get(\"OptionList\");\r\n//         let ComboFieldData = [];\r\n//         let dataList = [];\r\n//         let selectedRecordData = { ...response[0].data };\r\n//         let responseData = [...response];\r\n//         let extractedColumnData = [];\r\n//         responseData.splice(0, 1);\r\n\r\n//         fetchRecordParam.extractedColumnList.map((item) => {\r\n//           if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n//             extractedColumnData.push(item);\r\n//             selectedRecordData[item.dataField] = {\r\n//               value: selectedRecordData[item.foreignDataField],\r\n//               label: selectedRecordData[item.dataField]\r\n//             }\r\n//           }\r\n//           else if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n//             selectedRecordData[item.dataField] = rearrangeDateFormat(fetchRecordParam.userInfo, selectedRecordData[item.dataField]);\r\n//           }\r\n//         })\r\n\r\n//         extractedColumnData.map((field, index) => {\r\n//           responseData.map((item, indexValue) => {\r\n//             if (index === indexValue) {\r\n//               ComboFieldData = constructOptionList(field.objectValue === null ? responseData[index].data || [] : responseData[index].data[field.objectValue], field.foreignDataField,\r\n//                 field.dataField, undefined, undefined, undefined);\r\n//               dataList[field.dataField] = ComboFieldData.get(\"OptionList\");\r\n//             }\r\n//           })\r\n//         });\r\n\r\n//         dispatch({\r\n//           type: DEFAULT_RETURN,\r\n//           payload: {\r\n//             selectedRecord: selectedRecordData,\r\n//             screenName: fetchRecordParam.screenName,\r\n//             operation: fetchRecordParam.operation,\r\n//             openModal: true,\r\n//             ncontrolCode: fetchRecordParam.ncontrolCode,\r\n//             loading: false,\r\n//             selectedId: fetchRecordParam.primaryKeyValue,\r\n//             dataList\r\n//           }\r\n//         });\r\n//       })\r\n//       .catch(error => {\r\n//         dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//         if (error.response.status === 500) {\r\n//           toast.error(intl.formatMessage({ id: error.message }));\r\n//         } else {\r\n//           toast.warn(intl.formatMessage({ id: error.response.data }));\r\n//         }\r\n//       })\r\n//   }\r\n// }"]},"metadata":{},"sourceType":"module"}