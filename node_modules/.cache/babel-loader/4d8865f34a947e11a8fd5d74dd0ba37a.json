{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.elasticSearchFormat = elasticSearchFormat;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _ruleUtils = require(\"../utils/ruleUtils\");\n\nvar _defaultUtils = require(\"../utils/defaultUtils\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * Converts a string representation of top_left and bottom_right cords to\n * a ES geo_point required for query\n *\n * @param {string} geoPointString - comma separated string of lat/lon coods\n * @returns {{top_left: {lon: number, lat: number}, bottom_right: {lon: number, lat: number}}} - ES geoPoint formatted object\n * @private\n */\n\n\nfunction buildEsGeoPoint(geoPointString) {\n  if (geoPointString == null) {\n    return null;\n  }\n\n  var coordsNumberArray = geoPointString.split(\",\").map(Number);\n  return {\n    top_left: {\n      lat: coordsNumberArray[0],\n      lon: coordsNumberArray[1]\n    },\n    bottom_right: {\n      lat: coordsNumberArray[2],\n      lon: coordsNumberArray[3]\n    }\n  };\n}\n/**\n * Converts a dateTime string from the query builder to a ES range formatted object\n *\n * @param {string} dateTime - dateTime formatted string\n * @param {string} operator - query builder operator type, see constants.js and query builder docs\n * @returns {{lt: string}|{lte: string}|{gte: string}|{gte: string, lte: string}|undefined} - ES range query parameter\n *\n * @private\n */\n\n\nfunction buildEsRangeParameters(value, operator) {\n  // -- if value is greater than 1 then we assume this is a between operator : BUG this is wrong, a selectable list can have multiple values\n  if (value.length > 1) {\n    return {\n      gte: \"\".concat(value[0]),\n      lte: \"\".concat(value[1])\n    };\n  } // -- if value is only one we assume this is a date time query for a specific day\n\n\n  var dateTime = value[0]; //TODO: Rethink about this part, what if someone adds a new type of opperator\n  //todo: move this logic into config\n\n  switch (operator) {\n    case \"on_date\": //todo: not used\n\n    case \"not_on_date\":\n    case \"equal\":\n    case \"select_equals\":\n    case \"not_equal\":\n      return {\n        gte: \"\".concat(dateTime, \"||/d\"),\n        lte: \"\".concat(dateTime, \"||+1d\")\n      };\n\n    case \"less_or_equal\":\n      return {\n        lte: \"\".concat(dateTime)\n      };\n\n    case \"greater_or_equal\":\n      return {\n        gte: \"\".concat(dateTime)\n      };\n\n    case \"less\":\n      return {\n        lt: \"\".concat(dateTime)\n      };\n\n    case \"greater\":\n      return {\n        gte: \"\".concat(dateTime)\n      };\n\n    default:\n      return undefined;\n  }\n}\n/**\n * Builds the DSL parameters for a Wildcard query\n *\n * @param {string} value - The match value\n * @returns {{value: string}} - The value = value parameter surrounded with * on each end\n * @private\n */\n\n\nfunction buildEsWildcardParameters(value) {\n  return {\n    value: \"*\" + value + \"*\"\n  };\n}\n/**\n * Takes the match type string from awesome query builder like 'greater_or_equal' and\n * returns the ES occurrence required for bool queries\n *\n * @param {string} combinator - query group type or rule condition\n * @returns {string} - ES occurrence type. See constants.js\n * @private\n */\n\n\nfunction determineOccurrence(combinator) {\n  //todo: move into config, like mongoConj\n  switch (combinator) {\n    case \"AND\":\n      return \"must\";\n    // -- AND\n\n    case \"OR\":\n      return \"should\";\n    // -- OR\n\n    case \"NOT\":\n      return \"must_not\";\n    // -- NOT AND\n\n    default:\n      return undefined;\n  }\n}\n/**\n * Determines what field to query off of given the operator type\n *\n * @param {string} fieldDataType - The type of data\n * @param {string} fullFieldName - A '.' separated string containing the property lineage (including self)\n * @param {string} queryType - The query type\n * @returns {string|*} - will be either the fullFieldName or fullFieldName.keyword\n * @private\n */\n//todo: not used\n\n\nfunction determineQueryField(fieldDataType, fullFieldName, queryType) {\n  if (fieldDataType === \"boolean\") {\n    return fullFieldName;\n  }\n\n  switch (queryType) {\n    case \"term\":\n    case \"wildcard\":\n      return \"\".concat(fullFieldName, \".keyword\");\n\n    case \"geo_bounding_box\":\n    case \"range\":\n    case \"match\":\n      return fullFieldName;\n\n    default:\n      console.error(\"Can't determine query field for query type \".concat(queryType));\n      return null;\n  }\n}\n\nfunction buildRegexpParameters(value) {\n  return {\n    value: value\n  };\n}\n\nfunction determineField(fieldName, config) {\n  //todo: ElasticSearchTextField - not used\n  //return config.fields[fieldName].ElasticSearchTextField || fieldName;\n  return fieldName;\n}\n\nfunction buildParameters(queryType, value, operator, fieldName, config) {\n  var textField = determineField(fieldName, config);\n\n  switch (queryType) {\n    case \"filter\":\n      //todo: elasticSearchScript - not used\n      return {\n        script: config.operators[operator].elasticSearchScript(fieldName, value)\n      };\n\n    case \"exists\":\n      return {\n        field: fieldName\n      };\n\n    case \"match\":\n      return (0, _defineProperty2[\"default\"])({}, textField, value[0]);\n\n    case \"term\":\n      return (0, _defineProperty2[\"default\"])({}, fieldName, value[0]);\n    //todo: not used\n    // need to add geo type into RAQB or remove this code\n\n    case \"geo_bounding_box\":\n      return (0, _defineProperty2[\"default\"])({}, fieldName, buildEsGeoPoint(value[0]));\n\n    case \"range\":\n      return (0, _defineProperty2[\"default\"])({}, fieldName, buildEsRangeParameters(value, operator));\n\n    case \"wildcard\":\n      return (0, _defineProperty2[\"default\"])({}, fieldName, buildEsWildcardParameters(value[0]));\n\n    case \"regexp\":\n      return (0, _defineProperty2[\"default\"])({}, fieldName, buildRegexpParameters(value[0]));\n\n    default:\n      return undefined;\n  }\n}\n/**\n * Handles the building of the group portion of the DSL\n *\n * @param {string} fieldName - The name of the field you are building a rule for\n * @param {string} fieldDataType - The type of data this field holds\n * @param {string} value - The value of this rule\n * @param {string} operator - The condition on how the value is matched\n * @returns {object} - The ES rule\n * @private\n */\n\n\nfunction buildEsRule(fieldName, value, operator, config, valueSrc) {\n  if (!fieldName || !operator || value == undefined) return undefined; // rule is not fully entered\n\n  var op = operator;\n  var opConfig = config.operators[op];\n  if (!opConfig) return undefined; // unknown operator\n\n  var _opConfig = opConfig,\n      elasticSearchQueryType = _opConfig.elasticSearchQueryType; // not\n\n  var not = false;\n\n  if (!elasticSearchQueryType && opConfig.reversedOp) {\n    not = true;\n    op = opConfig.reversedOp;\n    opConfig = config.operators[op];\n    var _opConfig2 = opConfig;\n    elasticSearchQueryType = _opConfig2.elasticSearchQueryType;\n  } // handle if value 0 has multiple values like a select in a array\n\n\n  var widget = (0, _ruleUtils.getWidgetForFieldOp)(config, fieldName, op, valueSrc);\n  var widgetConfig = config.widgets[widget];\n  var elasticSearchFormatValue = widgetConfig.elasticSearchFormatValue;\n  /** In most cases the queryType will be static however in some casese (like between) the query type will change\n   * based on the data type. i.e. a between time will be different than between number, date, letters etc... */\n\n  var queryType;\n\n  if (typeof elasticSearchQueryType === \"function\") {\n    queryType = elasticSearchQueryType(widget);\n  } else {\n    queryType = elasticSearchQueryType;\n  }\n\n  if (!queryType) {\n    // Not supported\n    return undefined;\n  }\n  /** If a widget has a rule on how to format that data then use that otherwise use default way of determineing search parameters\n   * */\n\n\n  var parameters;\n\n  if (typeof elasticSearchFormatValue === \"function\") {\n    parameters = elasticSearchFormatValue(queryType, value, op, fieldName, config);\n  } else {\n    parameters = buildParameters(queryType, value, op, fieldName, config);\n  }\n\n  if (not) {\n    return {\n      bool: {\n        must_not: (0, _defineProperty2[\"default\"])({}, queryType, _objectSpread({}, parameters))\n      }\n    };\n  } else {\n    return (0, _defineProperty2[\"default\"])({}, queryType, _objectSpread({}, parameters));\n  }\n}\n/**\n * Handles the building of the group portion of the DSL\n *\n * @param {object} children - The contents of the group\n * @param {string} conjunction - The way the contents of the group are joined together i.e. AND OR\n * @param {Function} recursiveFxn - The recursive fxn to build the contents of the groups children\n * @private\n * @returns {object} - The ES group\n */\n\n\nfunction buildEsGroup(children, conjunction, recursiveFxn, config) {\n  if (!children || !children.size) return undefined;\n  var childrenArray = children.valueSeq().toArray();\n  var occurrence = determineOccurrence(conjunction);\n  var result = childrenArray.map(function (c) {\n    return recursiveFxn(c, config);\n  }).filter(function (v) {\n    return v !== undefined;\n  });\n  if (!result.length) return undefined;\n  var resultFlat = result.flat(Infinity);\n  return {\n    bool: (0, _defineProperty2[\"default\"])({}, occurrence, resultFlat)\n  };\n}\n\nfunction elasticSearchFormat(tree, config) {\n  // -- format the es dsl here\n  if (!tree) return undefined;\n  var type = tree.get(\"type\");\n  var properties = tree.get(\"properties\") || new Map();\n\n  if (type === \"rule\" && properties.get(\"field\")) {\n    var _properties$get, _properties$get2; // -- field is null when a new blank rule is added\n\n\n    var operator = properties.get(\"operator\");\n    var field = properties.get(\"field\");\n    var value = properties.get(\"value\").toJS();\n\n    var _valueType = (_properties$get = properties.get(\"valueType\")) === null || _properties$get === void 0 ? void 0 : _properties$get.get(0);\n\n    var valueSrc = (_properties$get2 = properties.get(\"valueSrc\")) === null || _properties$get2 === void 0 ? void 0 : _properties$get2.get(0);\n\n    if (valueSrc === \"func\") {\n      // -- elastic search doesn't support functions (that is post processing)\n      return;\n    }\n\n    if (value && Array.isArray(value[0])) {\n      //TODO : Handle case where the value has multiple values such as in the case of a list\n      return value[0].map(function (val) {\n        return buildEsRule(field, [val], operator, config, valueSrc);\n      });\n    } else {\n      return buildEsRule(field, value, operator, config, valueSrc);\n    }\n  }\n\n  if (type === \"group\" || type === \"rule_group\") {\n    var conjunction = properties.get(\"conjunction\");\n    if (!conjunction) conjunction = (0, _defaultUtils.defaultConjunction)(config);\n    var children = tree.get(\"children1\");\n    return buildEsGroup(children, conjunction, elasticSearchFormat, config);\n  }\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/node_modules/react-awesome-query-builder/lib/export/elasticSearch.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","elasticSearchFormat","_defineProperty2","_ruleUtils","_defaultUtils","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","buildEsGeoPoint","geoPointString","coordsNumberArray","split","map","Number","top_left","lat","lon","bottom_right","buildEsRangeParameters","operator","gte","concat","lte","dateTime","lt","undefined","buildEsWildcardParameters","determineOccurrence","combinator","determineQueryField","fieldDataType","fullFieldName","queryType","console","error","buildRegexpParameters","determineField","fieldName","config","buildParameters","textField","script","operators","elasticSearchScript","field","buildEsRule","valueSrc","op","opConfig","_opConfig","elasticSearchQueryType","not","reversedOp","_opConfig2","widget","getWidgetForFieldOp","widgetConfig","widgets","elasticSearchFormatValue","parameters","bool","must_not","buildEsGroup","children","conjunction","recursiveFxn","size","childrenArray","valueSeq","toArray","occurrence","result","c","v","resultFlat","flat","Infinity","tree","type","get","properties","Map","_properties$get","_properties$get2","toJS","_valueType","Array","isArray","val","defaultConjunction"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B;;AAEA,IAAIC,gBAAgB,GAAGP,sBAAsB,CAACC,OAAO,CAAC,uCAAD,CAAR,CAA7C;;AAEA,IAAIO,UAAU,GAAGP,OAAO,CAAC,oBAAD,CAAxB;;AAEA,IAAIQ,aAAa,GAAGR,OAAO,CAAC,uBAAD,CAA3B;;AAEA,SAASS,OAAT,CAAiBC,MAAjB,EAAyBC,cAAzB,EAAyC;AAAE,MAAIC,IAAI,GAAGX,MAAM,CAACW,IAAP,CAAYF,MAAZ,CAAX;;AAAgC,MAAIT,MAAM,CAACY,qBAAX,EAAkC;AAAE,QAAIC,OAAO,GAAGb,MAAM,CAACY,qBAAP,CAA6BH,MAA7B,CAAd;;AAAoD,QAAIC,cAAJ,EAAoB;AAAEG,MAAAA,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,UAAUC,GAAV,EAAe;AAAE,eAAOf,MAAM,CAACgB,wBAAP,CAAgCP,MAAhC,EAAwCM,GAAxC,EAA6CE,UAApD;AAAiE,OAAjG,CAAV;AAA+G;;AAACN,IAAAA,IAAI,CAACO,IAAL,CAAUC,KAAV,CAAgBR,IAAhB,EAAsBE,OAAtB;AAAiC;;AAAC,SAAOF,IAAP;AAAc;;AAEzV,SAASS,aAAT,CAAuBC,MAAvB,EAA+B;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAT,IAAgB,IAAhB,GAAuBC,SAAS,CAACD,CAAD,CAAhC,GAAsC,EAAnD;;AAAuD,QAAIA,CAAC,GAAG,CAAR,EAAW;AAAEd,MAAAA,OAAO,CAACR,MAAM,CAACyB,MAAD,CAAP,EAAiB,IAAjB,CAAP,CAA8BC,OAA9B,CAAsC,UAAUC,GAAV,EAAe;AAAE,SAAC,GAAGtB,gBAAgB,CAAC,SAAD,CAApB,EAAiCgB,MAAjC,EAAyCM,GAAzC,EAA8CF,MAAM,CAACE,GAAD,CAApD;AAA6D,OAApH;AAAwH,KAArI,MAA2I,IAAI3B,MAAM,CAAC4B,yBAAX,EAAsC;AAAE5B,MAAAA,MAAM,CAAC6B,gBAAP,CAAwBR,MAAxB,EAAgCrB,MAAM,CAAC4B,yBAAP,CAAiCH,MAAjC,CAAhC;AAA4E,KAApH,MAA0H;AAAEjB,MAAAA,OAAO,CAACR,MAAM,CAACyB,MAAD,CAAP,CAAP,CAAwBC,OAAxB,CAAgC,UAAUC,GAAV,EAAe;AAAE3B,QAAAA,MAAM,CAACC,cAAP,CAAsBoB,MAAtB,EAA8BM,GAA9B,EAAmC3B,MAAM,CAACgB,wBAAP,CAAgCS,MAAhC,EAAwCE,GAAxC,CAAnC;AAAmF,OAApI;AAAwI;AAAE;;AAAC,SAAON,MAAP;AAAgB;AAEviB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,eAAT,CAAyBC,cAAzB,EAAyC;AACvC,MAAIA,cAAc,IAAI,IAAtB,EAA4B;AAC1B,WAAO,IAAP;AACD;;AAED,MAAIC,iBAAiB,GAAGD,cAAc,CAACE,KAAf,CAAqB,GAArB,EAA0BC,GAA1B,CAA8BC,MAA9B,CAAxB;AACA,SAAO;AACLC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,GAAG,EAAEL,iBAAiB,CAAC,CAAD,CADd;AAERM,MAAAA,GAAG,EAAEN,iBAAiB,CAAC,CAAD;AAFd,KADL;AAKLO,IAAAA,YAAY,EAAE;AACZF,MAAAA,GAAG,EAAEL,iBAAiB,CAAC,CAAD,CADV;AAEZM,MAAAA,GAAG,EAAEN,iBAAiB,CAAC,CAAD;AAFV;AALT,GAAP;AAUD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASQ,sBAAT,CAAgCrC,KAAhC,EAAuCsC,QAAvC,EAAiD;AAC/C;AACA,MAAItC,KAAK,CAACqB,MAAN,GAAe,CAAnB,EAAsB;AACpB,WAAO;AACLkB,MAAAA,GAAG,EAAE,GAAGC,MAAH,CAAUxC,KAAK,CAAC,CAAD,CAAf,CADA;AAELyC,MAAAA,GAAG,EAAE,GAAGD,MAAH,CAAUxC,KAAK,CAAC,CAAD,CAAf;AAFA,KAAP;AAID,GAP8C,CAO7C;;;AAGF,MAAI0C,QAAQ,GAAG1C,KAAK,CAAC,CAAD,CAApB,CAV+C,CAUtB;AACzB;;AAEA,UAAQsC,QAAR;AACE,SAAK,SAAL,CADF,CACkB;;AAEhB,SAAK,aAAL;AACA,SAAK,OAAL;AACA,SAAK,eAAL;AACA,SAAK,WAAL;AACE,aAAO;AACLC,QAAAA,GAAG,EAAE,GAAGC,MAAH,CAAUE,QAAV,EAAoB,MAApB,CADA;AAELD,QAAAA,GAAG,EAAE,GAAGD,MAAH,CAAUE,QAAV,EAAoB,OAApB;AAFA,OAAP;;AAKF,SAAK,eAAL;AACE,aAAO;AACLD,QAAAA,GAAG,EAAE,GAAGD,MAAH,CAAUE,QAAV;AADA,OAAP;;AAIF,SAAK,kBAAL;AACE,aAAO;AACLH,QAAAA,GAAG,EAAE,GAAGC,MAAH,CAAUE,QAAV;AADA,OAAP;;AAIF,SAAK,MAAL;AACE,aAAO;AACLC,QAAAA,EAAE,EAAE,GAAGH,MAAH,CAAUE,QAAV;AADC,OAAP;;AAIF,SAAK,SAAL;AACE,aAAO;AACLH,QAAAA,GAAG,EAAE,GAAGC,MAAH,CAAUE,QAAV;AADA,OAAP;;AAIF;AACE,aAAOE,SAAP;AAjCJ;AAmCD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,yBAAT,CAAmC7C,KAAnC,EAA0C;AACxC,SAAO;AACLA,IAAAA,KAAK,EAAE,MAAMA,KAAN,GAAc;AADhB,GAAP;AAGD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAAS8C,mBAAT,CAA6BC,UAA7B,EAAyC;AACvC;AACA,UAAQA,UAAR;AACE,SAAK,KAAL;AACE,aAAO,MAAP;AACF;;AAEA,SAAK,IAAL;AACE,aAAO,QAAP;AACF;;AAEA,SAAK,KAAL;AACE,aAAO,UAAP;AACF;;AAEA;AACE,aAAOH,SAAP;AAdJ;AAgBD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASI,mBAAT,CAA6BC,aAA7B,EAA4CC,aAA5C,EAA2DC,SAA3D,EAAsE;AACpE,MAAIF,aAAa,KAAK,SAAtB,EAAiC;AAC/B,WAAOC,aAAP;AACD;;AAED,UAAQC,SAAR;AACE,SAAK,MAAL;AACA,SAAK,UAAL;AACE,aAAO,GAAGX,MAAH,CAAUU,aAAV,EAAyB,UAAzB,CAAP;;AAEF,SAAK,kBAAL;AACA,SAAK,OAAL;AACA,SAAK,OAAL;AACE,aAAOA,aAAP;;AAEF;AACEE,MAAAA,OAAO,CAACC,KAAR,CAAc,8CAA8Cb,MAA9C,CAAqDW,SAArD,CAAd;AACA,aAAO,IAAP;AAZJ;AAcD;;AAED,SAASG,qBAAT,CAA+BtD,KAA/B,EAAsC;AACpC,SAAO;AACLA,IAAAA,KAAK,EAAEA;AADF,GAAP;AAGD;;AAED,SAASuD,cAAT,CAAwBC,SAAxB,EAAmCC,MAAnC,EAA2C;AACzC;AACA;AACA,SAAOD,SAAP;AACD;;AAED,SAASE,eAAT,CAAyBP,SAAzB,EAAoCnD,KAApC,EAA2CsC,QAA3C,EAAqDkB,SAArD,EAAgEC,MAAhE,EAAwE;AACtE,MAAIE,SAAS,GAAGJ,cAAc,CAACC,SAAD,EAAYC,MAAZ,CAA9B;;AAEA,UAAQN,SAAR;AACE,SAAK,QAAL;AACE;AACA,aAAO;AACLS,QAAAA,MAAM,EAAEH,MAAM,CAACI,SAAP,CAAiBvB,QAAjB,EAA2BwB,mBAA3B,CAA+CN,SAA/C,EAA0DxD,KAA1D;AADH,OAAP;;AAIF,SAAK,QAAL;AACE,aAAO;AACL+D,QAAAA,KAAK,EAAEP;AADF,OAAP;;AAIF,SAAK,OAAL;AACE,aAAO,CAAC,GAAGtD,gBAAgB,CAAC,SAAD,CAApB,EAAiC,EAAjC,EAAqCyD,SAArC,EAAgD3D,KAAK,CAAC,CAAD,CAArD,CAAP;;AAEF,SAAK,MAAL;AACE,aAAO,CAAC,GAAGE,gBAAgB,CAAC,SAAD,CAApB,EAAiC,EAAjC,EAAqCsD,SAArC,EAAgDxD,KAAK,CAAC,CAAD,CAArD,CAAP;AACF;AACA;;AAEA,SAAK,kBAAL;AACE,aAAO,CAAC,GAAGE,gBAAgB,CAAC,SAAD,CAApB,EAAiC,EAAjC,EAAqCsD,SAArC,EAAgD7B,eAAe,CAAC3B,KAAK,CAAC,CAAD,CAAN,CAA/D,CAAP;;AAEF,SAAK,OAAL;AACE,aAAO,CAAC,GAAGE,gBAAgB,CAAC,SAAD,CAApB,EAAiC,EAAjC,EAAqCsD,SAArC,EAAgDnB,sBAAsB,CAACrC,KAAD,EAAQsC,QAAR,CAAtE,CAAP;;AAEF,SAAK,UAAL;AACE,aAAO,CAAC,GAAGpC,gBAAgB,CAAC,SAAD,CAApB,EAAiC,EAAjC,EAAqCsD,SAArC,EAAgDX,yBAAyB,CAAC7C,KAAK,CAAC,CAAD,CAAN,CAAzE,CAAP;;AAEF,SAAK,QAAL;AACE,aAAO,CAAC,GAAGE,gBAAgB,CAAC,SAAD,CAApB,EAAiC,EAAjC,EAAqCsD,SAArC,EAAgDF,qBAAqB,CAACtD,KAAK,CAAC,CAAD,CAAN,CAArE,CAAP;;AAEF;AACE,aAAO4C,SAAP;AAjCJ;AAmCD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASoB,WAAT,CAAqBR,SAArB,EAAgCxD,KAAhC,EAAuCsC,QAAvC,EAAiDmB,MAAjD,EAAyDQ,QAAzD,EAAmE;AACjE,MAAI,CAACT,SAAD,IAAc,CAAClB,QAAf,IAA2BtC,KAAK,IAAI4C,SAAxC,EAAmD,OAAOA,SAAP,CADc,CACI;;AAErE,MAAIsB,EAAE,GAAG5B,QAAT;AACA,MAAI6B,QAAQ,GAAGV,MAAM,CAACI,SAAP,CAAiBK,EAAjB,CAAf;AACA,MAAI,CAACC,QAAL,EAAe,OAAOvB,SAAP,CALkD,CAKhC;;AAEjC,MAAIwB,SAAS,GAAGD,QAAhB;AAAA,MACIE,sBAAsB,GAAGD,SAAS,CAACC,sBADvC,CAPiE,CAQF;;AAE/D,MAAIC,GAAG,GAAG,KAAV;;AAEA,MAAI,CAACD,sBAAD,IAA2BF,QAAQ,CAACI,UAAxC,EAAoD;AAClDD,IAAAA,GAAG,GAAG,IAAN;AACAJ,IAAAA,EAAE,GAAGC,QAAQ,CAACI,UAAd;AACAJ,IAAAA,QAAQ,GAAGV,MAAM,CAACI,SAAP,CAAiBK,EAAjB,CAAX;AACA,QAAIM,UAAU,GAAGL,QAAjB;AACAE,IAAAA,sBAAsB,GAAGG,UAAU,CAACH,sBAApC;AACD,GAlBgE,CAkB/D;;;AAGF,MAAII,MAAM,GAAG,CAAC,GAAGtE,UAAU,CAACuE,mBAAf,EAAoCjB,MAApC,EAA4CD,SAA5C,EAAuDU,EAAvD,EAA2DD,QAA3D,CAAb;AACA,MAAIU,YAAY,GAAGlB,MAAM,CAACmB,OAAP,CAAeH,MAAf,CAAnB;AACA,MAAII,wBAAwB,GAAGF,YAAY,CAACE,wBAA5C;AACA;AACF;;AAEE,MAAI1B,SAAJ;;AAEA,MAAI,OAAOkB,sBAAP,KAAkC,UAAtC,EAAkD;AAChDlB,IAAAA,SAAS,GAAGkB,sBAAsB,CAACI,MAAD,CAAlC;AACD,GAFD,MAEO;AACLtB,IAAAA,SAAS,GAAGkB,sBAAZ;AACD;;AAED,MAAI,CAAClB,SAAL,EAAgB;AACd;AACA,WAAOP,SAAP;AACD;AACD;AACF;;;AAGE,MAAIkC,UAAJ;;AAEA,MAAI,OAAOD,wBAAP,KAAoC,UAAxC,EAAoD;AAClDC,IAAAA,UAAU,GAAGD,wBAAwB,CAAC1B,SAAD,EAAYnD,KAAZ,EAAmBkE,EAAnB,EAAuBV,SAAvB,EAAkCC,MAAlC,CAArC;AACD,GAFD,MAEO;AACLqB,IAAAA,UAAU,GAAGpB,eAAe,CAACP,SAAD,EAAYnD,KAAZ,EAAmBkE,EAAnB,EAAuBV,SAAvB,EAAkCC,MAAlC,CAA5B;AACD;;AAED,MAAIa,GAAJ,EAAS;AACP,WAAO;AACLS,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE,CAAC,GAAG9E,gBAAgB,CAAC,SAAD,CAApB,EAAiC,EAAjC,EAAqCiD,SAArC,EAAgDlC,aAAa,CAAC,EAAD,EAAK6D,UAAL,CAA7D;AADN;AADD,KAAP;AAKD,GAND,MAMO;AACL,WAAO,CAAC,GAAG5E,gBAAgB,CAAC,SAAD,CAApB,EAAiC,EAAjC,EAAqCiD,SAArC,EAAgDlC,aAAa,CAAC,EAAD,EAAK6D,UAAL,CAA7D,CAAP;AACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASG,YAAT,CAAsBC,QAAtB,EAAgCC,WAAhC,EAA6CC,YAA7C,EAA2D3B,MAA3D,EAAmE;AACjE,MAAI,CAACyB,QAAD,IAAa,CAACA,QAAQ,CAACG,IAA3B,EAAiC,OAAOzC,SAAP;AACjC,MAAI0C,aAAa,GAAGJ,QAAQ,CAACK,QAAT,GAAoBC,OAApB,EAApB;AACA,MAAIC,UAAU,GAAG3C,mBAAmB,CAACqC,WAAD,CAApC;AACA,MAAIO,MAAM,GAAGJ,aAAa,CAACvD,GAAd,CAAkB,UAAU4D,CAAV,EAAa;AAC1C,WAAOP,YAAY,CAACO,CAAD,EAAIlC,MAAJ,CAAnB;AACD,GAFY,EAEV9C,MAFU,CAEH,UAAUiF,CAAV,EAAa;AACrB,WAAOA,CAAC,KAAKhD,SAAb;AACD,GAJY,CAAb;AAKA,MAAI,CAAC8C,MAAM,CAACrE,MAAZ,EAAoB,OAAOuB,SAAP;AACpB,MAAIiD,UAAU,GAAGH,MAAM,CAACI,IAAP,CAAYC,QAAZ,CAAjB;AACA,SAAO;AACLhB,IAAAA,IAAI,EAAE,CAAC,GAAG7E,gBAAgB,CAAC,SAAD,CAApB,EAAiC,EAAjC,EAAqCuF,UAArC,EAAiDI,UAAjD;AADD,GAAP;AAGD;;AAED,SAAS5F,mBAAT,CAA6B+F,IAA7B,EAAmCvC,MAAnC,EAA2C;AACzC;AACA,MAAI,CAACuC,IAAL,EAAW,OAAOpD,SAAP;AACX,MAAIqD,IAAI,GAAGD,IAAI,CAACE,GAAL,CAAS,MAAT,CAAX;AACA,MAAIC,UAAU,GAAGH,IAAI,CAACE,GAAL,CAAS,YAAT,KAA0B,IAAIE,GAAJ,EAA3C;;AAEA,MAAIH,IAAI,KAAK,MAAT,IAAmBE,UAAU,CAACD,GAAX,CAAe,OAAf,CAAvB,EAAgD;AAC9C,QAAIG,eAAJ,EAAqBC,gBAArB,CAD8C,CAG9C;;;AACA,QAAIhE,QAAQ,GAAG6D,UAAU,CAACD,GAAX,CAAe,UAAf,CAAf;AACA,QAAInC,KAAK,GAAGoC,UAAU,CAACD,GAAX,CAAe,OAAf,CAAZ;AACA,QAAIlG,KAAK,GAAGmG,UAAU,CAACD,GAAX,CAAe,OAAf,EAAwBK,IAAxB,EAAZ;;AAEA,QAAIC,UAAU,GAAG,CAACH,eAAe,GAAGF,UAAU,CAACD,GAAX,CAAe,WAAf,CAAnB,MAAoD,IAApD,IAA4DG,eAAe,KAAK,KAAK,CAArF,GAAyF,KAAK,CAA9F,GAAkGA,eAAe,CAACH,GAAhB,CAAoB,CAApB,CAAnH;;AAEA,QAAIjC,QAAQ,GAAG,CAACqC,gBAAgB,GAAGH,UAAU,CAACD,GAAX,CAAe,UAAf,CAApB,MAAoD,IAApD,IAA4DI,gBAAgB,KAAK,KAAK,CAAtF,GAA0F,KAAK,CAA/F,GAAmGA,gBAAgB,CAACJ,GAAjB,CAAqB,CAArB,CAAlH;;AAEA,QAAIjC,QAAQ,KAAK,MAAjB,EAAyB;AACvB;AACA;AACD;;AAED,QAAIjE,KAAK,IAAIyG,KAAK,CAACC,OAAN,CAAc1G,KAAK,CAAC,CAAD,CAAnB,CAAb,EAAsC;AACpC;AACA,aAAOA,KAAK,CAAC,CAAD,CAAL,CAAS+B,GAAT,CAAa,UAAU4E,GAAV,EAAe;AACjC,eAAO3C,WAAW,CAACD,KAAD,EAAQ,CAAC4C,GAAD,CAAR,EAAerE,QAAf,EAAyBmB,MAAzB,EAAiCQ,QAAjC,CAAlB;AACD,OAFM,CAAP;AAGD,KALD,MAKO;AACL,aAAOD,WAAW,CAACD,KAAD,EAAQ/D,KAAR,EAAesC,QAAf,EAAyBmB,MAAzB,EAAiCQ,QAAjC,CAAlB;AACD;AACF;;AAED,MAAIgC,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,YAAjC,EAA+C;AAC7C,QAAId,WAAW,GAAGgB,UAAU,CAACD,GAAX,CAAe,aAAf,CAAlB;AACA,QAAI,CAACf,WAAL,EAAkBA,WAAW,GAAG,CAAC,GAAG/E,aAAa,CAACwG,kBAAlB,EAAsCnD,MAAtC,CAAd;AAClB,QAAIyB,QAAQ,GAAGc,IAAI,CAACE,GAAL,CAAS,WAAT,CAAf;AACA,WAAOjB,YAAY,CAACC,QAAD,EAAWC,WAAX,EAAwBlF,mBAAxB,EAA6CwD,MAA7C,CAAnB;AACD;AACF","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.elasticSearchFormat = elasticSearchFormat;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _ruleUtils = require(\"../utils/ruleUtils\");\n\nvar _defaultUtils = require(\"../utils/defaultUtils\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Converts a string representation of top_left and bottom_right cords to\n * a ES geo_point required for query\n *\n * @param {string} geoPointString - comma separated string of lat/lon coods\n * @returns {{top_left: {lon: number, lat: number}, bottom_right: {lon: number, lat: number}}} - ES geoPoint formatted object\n * @private\n */\nfunction buildEsGeoPoint(geoPointString) {\n  if (geoPointString == null) {\n    return null;\n  }\n\n  var coordsNumberArray = geoPointString.split(\",\").map(Number);\n  return {\n    top_left: {\n      lat: coordsNumberArray[0],\n      lon: coordsNumberArray[1]\n    },\n    bottom_right: {\n      lat: coordsNumberArray[2],\n      lon: coordsNumberArray[3]\n    }\n  };\n}\n/**\n * Converts a dateTime string from the query builder to a ES range formatted object\n *\n * @param {string} dateTime - dateTime formatted string\n * @param {string} operator - query builder operator type, see constants.js and query builder docs\n * @returns {{lt: string}|{lte: string}|{gte: string}|{gte: string, lte: string}|undefined} - ES range query parameter\n *\n * @private\n */\n\n\nfunction buildEsRangeParameters(value, operator) {\n  // -- if value is greater than 1 then we assume this is a between operator : BUG this is wrong, a selectable list can have multiple values\n  if (value.length > 1) {\n    return {\n      gte: \"\".concat(value[0]),\n      lte: \"\".concat(value[1])\n    };\n  } // -- if value is only one we assume this is a date time query for a specific day\n\n\n  var dateTime = value[0]; //TODO: Rethink about this part, what if someone adds a new type of opperator\n  //todo: move this logic into config\n\n  switch (operator) {\n    case \"on_date\": //todo: not used\n\n    case \"not_on_date\":\n    case \"equal\":\n    case \"select_equals\":\n    case \"not_equal\":\n      return {\n        gte: \"\".concat(dateTime, \"||/d\"),\n        lte: \"\".concat(dateTime, \"||+1d\")\n      };\n\n    case \"less_or_equal\":\n      return {\n        lte: \"\".concat(dateTime)\n      };\n\n    case \"greater_or_equal\":\n      return {\n        gte: \"\".concat(dateTime)\n      };\n\n    case \"less\":\n      return {\n        lt: \"\".concat(dateTime)\n      };\n\n    case \"greater\":\n      return {\n        gte: \"\".concat(dateTime)\n      };\n\n    default:\n      return undefined;\n  }\n}\n/**\n * Builds the DSL parameters for a Wildcard query\n *\n * @param {string} value - The match value\n * @returns {{value: string}} - The value = value parameter surrounded with * on each end\n * @private\n */\n\n\nfunction buildEsWildcardParameters(value) {\n  return {\n    value: \"*\" + value + \"*\"\n  };\n}\n/**\n * Takes the match type string from awesome query builder like 'greater_or_equal' and\n * returns the ES occurrence required for bool queries\n *\n * @param {string} combinator - query group type or rule condition\n * @returns {string} - ES occurrence type. See constants.js\n * @private\n */\n\n\nfunction determineOccurrence(combinator) {\n  //todo: move into config, like mongoConj\n  switch (combinator) {\n    case \"AND\":\n      return \"must\";\n    // -- AND\n\n    case \"OR\":\n      return \"should\";\n    // -- OR\n\n    case \"NOT\":\n      return \"must_not\";\n    // -- NOT AND\n\n    default:\n      return undefined;\n  }\n}\n/**\n * Determines what field to query off of given the operator type\n *\n * @param {string} fieldDataType - The type of data\n * @param {string} fullFieldName - A '.' separated string containing the property lineage (including self)\n * @param {string} queryType - The query type\n * @returns {string|*} - will be either the fullFieldName or fullFieldName.keyword\n * @private\n */\n//todo: not used\n\n\nfunction determineQueryField(fieldDataType, fullFieldName, queryType) {\n  if (fieldDataType === \"boolean\") {\n    return fullFieldName;\n  }\n\n  switch (queryType) {\n    case \"term\":\n    case \"wildcard\":\n      return \"\".concat(fullFieldName, \".keyword\");\n\n    case \"geo_bounding_box\":\n    case \"range\":\n    case \"match\":\n      return fullFieldName;\n\n    default:\n      console.error(\"Can't determine query field for query type \".concat(queryType));\n      return null;\n  }\n}\n\nfunction buildRegexpParameters(value) {\n  return {\n    value: value\n  };\n}\n\nfunction determineField(fieldName, config) {\n  //todo: ElasticSearchTextField - not used\n  //return config.fields[fieldName].ElasticSearchTextField || fieldName;\n  return fieldName;\n}\n\nfunction buildParameters(queryType, value, operator, fieldName, config) {\n  var textField = determineField(fieldName, config);\n\n  switch (queryType) {\n    case \"filter\":\n      //todo: elasticSearchScript - not used\n      return {\n        script: config.operators[operator].elasticSearchScript(fieldName, value)\n      };\n\n    case \"exists\":\n      return {\n        field: fieldName\n      };\n\n    case \"match\":\n      return (0, _defineProperty2[\"default\"])({}, textField, value[0]);\n\n    case \"term\":\n      return (0, _defineProperty2[\"default\"])({}, fieldName, value[0]);\n    //todo: not used\n    // need to add geo type into RAQB or remove this code\n\n    case \"geo_bounding_box\":\n      return (0, _defineProperty2[\"default\"])({}, fieldName, buildEsGeoPoint(value[0]));\n\n    case \"range\":\n      return (0, _defineProperty2[\"default\"])({}, fieldName, buildEsRangeParameters(value, operator));\n\n    case \"wildcard\":\n      return (0, _defineProperty2[\"default\"])({}, fieldName, buildEsWildcardParameters(value[0]));\n\n    case \"regexp\":\n      return (0, _defineProperty2[\"default\"])({}, fieldName, buildRegexpParameters(value[0]));\n\n    default:\n      return undefined;\n  }\n}\n/**\n * Handles the building of the group portion of the DSL\n *\n * @param {string} fieldName - The name of the field you are building a rule for\n * @param {string} fieldDataType - The type of data this field holds\n * @param {string} value - The value of this rule\n * @param {string} operator - The condition on how the value is matched\n * @returns {object} - The ES rule\n * @private\n */\n\n\nfunction buildEsRule(fieldName, value, operator, config, valueSrc) {\n  if (!fieldName || !operator || value == undefined) return undefined; // rule is not fully entered\n\n  var op = operator;\n  var opConfig = config.operators[op];\n  if (!opConfig) return undefined; // unknown operator\n\n  var _opConfig = opConfig,\n      elasticSearchQueryType = _opConfig.elasticSearchQueryType; // not\n\n  var not = false;\n\n  if (!elasticSearchQueryType && opConfig.reversedOp) {\n    not = true;\n    op = opConfig.reversedOp;\n    opConfig = config.operators[op];\n    var _opConfig2 = opConfig;\n    elasticSearchQueryType = _opConfig2.elasticSearchQueryType;\n  } // handle if value 0 has multiple values like a select in a array\n\n\n  var widget = (0, _ruleUtils.getWidgetForFieldOp)(config, fieldName, op, valueSrc);\n  var widgetConfig = config.widgets[widget];\n  var elasticSearchFormatValue = widgetConfig.elasticSearchFormatValue;\n  /** In most cases the queryType will be static however in some casese (like between) the query type will change\n   * based on the data type. i.e. a between time will be different than between number, date, letters etc... */\n\n  var queryType;\n\n  if (typeof elasticSearchQueryType === \"function\") {\n    queryType = elasticSearchQueryType(widget);\n  } else {\n    queryType = elasticSearchQueryType;\n  }\n\n  if (!queryType) {\n    // Not supported\n    return undefined;\n  }\n  /** If a widget has a rule on how to format that data then use that otherwise use default way of determineing search parameters\n   * */\n\n\n  var parameters;\n\n  if (typeof elasticSearchFormatValue === \"function\") {\n    parameters = elasticSearchFormatValue(queryType, value, op, fieldName, config);\n  } else {\n    parameters = buildParameters(queryType, value, op, fieldName, config);\n  }\n\n  if (not) {\n    return {\n      bool: {\n        must_not: (0, _defineProperty2[\"default\"])({}, queryType, _objectSpread({}, parameters))\n      }\n    };\n  } else {\n    return (0, _defineProperty2[\"default\"])({}, queryType, _objectSpread({}, parameters));\n  }\n}\n/**\n * Handles the building of the group portion of the DSL\n *\n * @param {object} children - The contents of the group\n * @param {string} conjunction - The way the contents of the group are joined together i.e. AND OR\n * @param {Function} recursiveFxn - The recursive fxn to build the contents of the groups children\n * @private\n * @returns {object} - The ES group\n */\n\n\nfunction buildEsGroup(children, conjunction, recursiveFxn, config) {\n  if (!children || !children.size) return undefined;\n  var childrenArray = children.valueSeq().toArray();\n  var occurrence = determineOccurrence(conjunction);\n  var result = childrenArray.map(function (c) {\n    return recursiveFxn(c, config);\n  }).filter(function (v) {\n    return v !== undefined;\n  });\n  if (!result.length) return undefined;\n  var resultFlat = result.flat(Infinity);\n  return {\n    bool: (0, _defineProperty2[\"default\"])({}, occurrence, resultFlat)\n  };\n}\n\nfunction elasticSearchFormat(tree, config) {\n  // -- format the es dsl here\n  if (!tree) return undefined;\n  var type = tree.get(\"type\");\n  var properties = tree.get(\"properties\") || new Map();\n\n  if (type === \"rule\" && properties.get(\"field\")) {\n    var _properties$get, _properties$get2;\n\n    // -- field is null when a new blank rule is added\n    var operator = properties.get(\"operator\");\n    var field = properties.get(\"field\");\n    var value = properties.get(\"value\").toJS();\n\n    var _valueType = (_properties$get = properties.get(\"valueType\")) === null || _properties$get === void 0 ? void 0 : _properties$get.get(0);\n\n    var valueSrc = (_properties$get2 = properties.get(\"valueSrc\")) === null || _properties$get2 === void 0 ? void 0 : _properties$get2.get(0);\n\n    if (valueSrc === \"func\") {\n      // -- elastic search doesn't support functions (that is post processing)\n      return;\n    }\n\n    if (value && Array.isArray(value[0])) {\n      //TODO : Handle case where the value has multiple values such as in the case of a list\n      return value[0].map(function (val) {\n        return buildEsRule(field, [val], operator, config, valueSrc);\n      });\n    } else {\n      return buildEsRule(field, value, operator, config, valueSrc);\n    }\n  }\n\n  if (type === \"group\" || type === \"rule_group\") {\n    var conjunction = properties.get(\"conjunction\");\n    if (!conjunction) conjunction = (0, _defaultUtils.defaultConjunction)(config);\n    var children = tree.get(\"children1\");\n    return buildEsGroup(children, conjunction, elasticSearchFormat, config);\n  }\n}"]},"metadata":{},"sourceType":"script"}