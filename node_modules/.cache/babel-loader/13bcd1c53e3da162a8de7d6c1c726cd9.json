{"ast":null,"code":"import _defineProperty from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _toConsumableArray from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{toast}from'react-toastify';import{initRequest}from'./LoginAction';import{intl}from'../components/App';import Axios from'axios';import{numericGrade}from'../pages/ResultEntryBySample/ResultEntryValidation';import{constructOptionList,fillRecordBasedOnCheckBoxSelection,filterRecordBasedOnTwoArrays,getRecordBasedOnPrimaryKeyName,getSameRecordFromTwoArrays,replaceUpdatedObject,sortData,updatedObjectWithNewElement,rearrangeDateFormat}from'../components/CommonScript';import{transactionStatus}from'../components/Enumeration';export function getsubSampleREDetail(inputData,isServiceRequired){return function(dispatch){var inputParamData={ntype:2,nflag:inputData.nflag||2,nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,ntranscode:String(inputData.ntransactionstatus),ntransactiontestcode:0,userinfo:inputData.userinfo,ntestcode:inputData.ntestcode,napprovalversioncode:inputData.napprovalversioncode,fromdate:inputData.fromdate,todate:inputData.todate,activeTestKey:inputData.activeTestKey,activeSampleKey:inputData.activeSampleKey,nneedsubsample:inputData.masterData.nneedsubsample,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode};var activeName=\"\";var dataStateName=\"\";// let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n//     documentDataState, testCommentDataState } = inputData\ndispatch(initRequest(true));if(isServiceRequired){rsapi.post(\"resultentrybysample/getResultEntryDetails\",_objectSpread(_objectSpread({},inputParamData),{},{checkBoxOperation:inputData.checkBoxOperation})).then(function(response){// if (response.data.DynamicGetSamples) {\n//     sortData(response.data.DynamicGetSamples, \"\", \"\");\n// }\n// if (response.data.DynamicGetTests) {\n//     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\n// }\n//sortData(response.data);\nvar oldSelectedTest=inputData.masterData.RESelectedTest;fillRecordBasedOnCheckBoxSelection(inputData.masterData,response.data,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var RESelectedSubSample=inputData.checkBoxOperation===3?response.data.RESelectedSubSample:inputData.masterData.RESelectedSubSample;RESelectedSubSample=inputData.masterData.nneedsubsample?RESelectedSubSample:inputData.masterData.RE_SUBSAMPLE;var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{// ...response.data,\nRESelectedTest:inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[],RESelectedSample:inputData.RESelectedSample,RESelectedSubSample:RESelectedSubSample});// if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n//     inputData.searchSampleRef.current.value = \"\";\n//     masterData['searchedSample'] = undefined\n// }\nif(inputData.searchSubSampleRef!==undefined&&inputData.searchSubSampleRef.current!==null){inputData.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTest']=undefined;}var _inputData=inputData,testskip=_inputData.testskip,testtake=_inputData.testtake;var bool=false;var skipInfo={};if(inputData.masterData.RE_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}var TestParameters=[];var ResultUsedInstrument=[];var ResultUsedTasks=[];var RegistrationTestAttachment=[];var ResultChangeHistory=[];var RegistrationTestComment=[];if(inputData.checkBoxOperation===1){//added by sudharshanan for test select issue while sample click\nvar wholeTestList=masterData.RE_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var ntransactiontestcode;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedTest:oldSelectedTest});}else{ntransactiontestcode=masterData.RESelectedTest[0].ntransactiontestcode;}switch(inputData.activeTestKey){case\"IDS_RESULTS\":TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":ResultUsedInstrument=keepOld?inputData.masterData.ResultUsedInstrument:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_TASK\":ResultUsedTasks=keepOld?inputData.masterData.ResultUsedTasks:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_RESULTCHANGEHISTORY\":ResultChangeHistory=keepOld?inputData.masterData.ResultChangeHistory:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;default:TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}}else if(inputData.checkBoxOperation===5){var list=[];var dbData=[];switch(inputData.activeTestKey){case\"IDS_RESULTS\":dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.TestParameters),_toConsumableArray(response.data.TestParameters));TestParameters=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_INSTRUMENT\":dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedInstrument),_toConsumableArray(response.data.ResultUsedInstrument));ResultUsedInstrument=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TASK\":dbData=response.data.ResultUsedTasks||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedTasks),_toConsumableArray(dbData));list.reduce(function(unique,item){return unique.includes(item)?unique:[].concat(_toConsumableArray(unique),[item]);},[]);ResultUsedTasks=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTATTACHMENTS\":dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_RESULTCHANGEHISTORY\":dbData=response.data.ResultChangeHistory||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultChangeHistory),_toConsumableArray(dbData));ResultChangeHistory=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":dbData=response.data.RegistrationTestComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestComment),_toConsumableArray(dbData));RegistrationTestComment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;default:dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.TestParameters),_toConsumableArray(dbData));TestParameters=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else{var _list=[];switch(inputData.activeTestKey){case\"IDS_RESULTS\":_list=response.data.TestParameters?sortData(response.data.TestParameters,'ascending','ntransactionresultcode'):[];TestParameters=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":_list=response.data.ResultUsedInstrument?sortData(response.data.ResultUsedInstrument,'descending','nresultusedinstrumentcode'):[];ResultUsedInstrument=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_TASK\":_list=response.data.ResultUsedTasks?sortData(response.data.ResultUsedTasks,'descending','nresultusedtaskcode'):[];_list.reduce(function(unique,item){return unique.includes(item)?unique:[].concat(_toConsumableArray(unique),[item]);},[]);ResultUsedTasks=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":_list=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_RESULTCHANGEHISTORY\":_list=response.data.ResultChangeHistory?sortData(response.data.ResultChangeHistory,'descending','nresultchangehistorycode'):[];ResultChangeHistory=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_TESTCOMMENTS\":_list=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;default:_list=response.data.TestParameters?sortData(response.data.TestParameters,'ascending','ntransactionresultcode'):[];TestParameters=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}}masterData=_objectSpread(_objectSpread({},masterData),{},{// wholeApprovalParameter,\nTestParameters:TestParameters,// wholeResultUsedInstrument,\nResultUsedInstrument:ResultUsedInstrument,// wholeResultUsedTasks,\nResultUsedTasks:ResultUsedTasks,// wholeRegistrationTestAttachment,\nRegistrationTestAttachment:RegistrationTestAttachment,// wholeResultChangeHistory,\nResultChangeHistory:ResultChangeHistory,// wholeRegistrationTestComments,\nRegistrationTestComment:RegistrationTestComment});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,skip:undefined,take:undefined},skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{var oldSelectedTest=inputData.masterData.RESelectedTest;var TestSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest,inputData.removeElementFromArray[0].npreregno,\"npreregno\");var isGrandChildGetRequired=false;var oldSelectedSubSample=inputData.masterData.RESelectedSubSample;var _inputData2=inputData,subsampletake=_inputData2.subsampletake,subsampleskip=_inputData2.subsampleskip;var skipInfo={};if(TestSelected.length>0){isGrandChildGetRequired=true;}else{isGrandChildGetRequired=false;}fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.RESelectedSample,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);if(isGrandChildGetRequired){var ntransactiontestcode=inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode.toString():\"\";var RESelectedSample=inputData.RESelectedSample;var RESelectedTest=inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[];var RESelectedSubSample=inputData.masterData.RE_SUBSAMPLE;if(inputData.masterData.nneedsubsample){var filterSelectedSubSample=getSameRecordFromTwoArrays(oldSelectedSubSample,inputData.masterData.RE_SUBSAMPLE,\"ntransactionsamplecode\");RESelectedSubSample=filterSelectedSubSample.length>0?filterSelectedSubSample:[inputData.masterData.RE_SUBSAMPLE[0]];if(inputData.masterData.RE_SUBSAMPLE.length<=inputData.subsampleskip){subsampleskip=0;skipInfo={subsampletake:subsampletake,subsampleskip:subsampleskip};}}var ntransactionsamplecode=RESelectedSubSample.map(function(subsample){return subsample.ntransactionsamplecode;}).join(',');inputData=_objectSpread(_objectSpread({},inputData),{},{ntransactiontestcode:ntransactiontestcode,ntransactionsamplecode:ntransactionsamplecode,RESelectedSample:RESelectedSample,RESelectedTest:RESelectedTest,RESelectedSubSample:RESelectedSubSample,checkBoxOperation:3,activeTestKey:inputData.activeTestKey});if(RESelectedTest.length>0){inputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"TestParameters\",\"ResultUsedInstrument\",\"ResultUsedTasks\",\"RegistrationTestAttachment\",\"ResultChangeHistory\",\"RegistrationTestComment\",\"ResultChangeHistory\"]});dispatch(getTestChildTabREDetail(inputData,true));}else{inputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"RE_TEST\"]});dispatch(getTestREDetail(inputData,true));}}else{//added by sudharshanan for test select issue while sample click\nvar masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{RESelectedTest:inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[],RESelectedSample:inputData.RESelectedSample,RESelectedSubSample:inputData.masterData.nneedsubsample&&inputData.masterData.RE_SUBSAMPLE.length>0?inputData.masterData.RESelectedSubSample:inputData.masterData.RE_SUBSAMPLE});var subsamplecheck=true;if(inputData.masterData.nneedsubsample){var SubSampleSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample,inputData.removeElementFromArray[0].npreregno,\"npreregno\");if(SubSampleSelected.length>0){var _filterSelectedSubSample=getSameRecordFromTwoArrays(oldSelectedSubSample,inputData.masterData.RE_SUBSAMPLE,\"ntransactionsamplecode\");if(_filterSelectedSubSample.length===0){var wholeSubSample=masterData.RE_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample.forEach(function(test,index){if(!wholeSubSample.includes(test.ntransactionsamplecode)){oldSelectedSubSample.splice(index,1);}return null;});if(oldSelectedSubSample.length===0&&wholeSubSample.length>0&&masterData.selectedTest.length===0){var selectedSubSample1=[inputData.masterData.RE_SUBSAMPLE[0]];masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedSubSample:selectedSubSample1,selectedTest:[]});inputData=_objectSpread(_objectSpread({},inputData),masterData);inputData[\"npreregno\"]=selectedSubSample1.map(function(x){return x.npreregno;}).join(\",\");inputData[\"ntransactionsamplecode\"]=selectedSubSample1.map(function(x){return x.ntransactionsamplecode;}).join(\",\");inputData[\"checkBoxOperation\"]=3;inputData[\"childTabsKey\"]=[\"RE_TEST\"];subsamplecheck=false;dispatch(getTestREDetail(inputData,true));}}else{oldSelectedSubSample=_filterSelectedSubSample;}}else{var _wholeSubSample=masterData.RE_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample.forEach(function(test,index){if(!_wholeSubSample.includes(test.ntransactionsamplecode)){oldSelectedSubSample.splice(index,1);}return null;});}if(subsamplecheck){masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedSubSample:oldSelectedSubSample});}if(inputData.masterData.RE_SUBSAMPLE.length<=inputData.subsampleskip){subsampleskip=0;_skipInfo={subsampleskip:subsampleskip,subsampletake:subsampletake};}}var wholeTestList=masterData.RE_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var _ntransactiontestcode;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedTest:oldSelectedTest});}else{_ntransactiontestcode=masterData.RE_TEST[0].ntransactiontestcode;}var TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,_ntransactiontestcode,\"ntransactiontestcode\");var ResultUsedInstrument=keepOld?inputData.masterData.ResultUsedInstrument:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument||[],_ntransactiontestcode,\"ntransactiontestcode\");var ResultUsedTasks=keepOld?inputData.masterData.ResultUsedTasks:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks||[],_ntransactiontestcode,\"ntransactiontestcode\");var RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment||[],_ntransactiontestcode,\"ntransactiontestcode\");var RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment||[],_ntransactiontestcode,\"ntransactiontestcode\");var ResultChangeHistory=keepOld?inputData.masterData.ResultChangeHistory:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory||[],_ntransactiontestcode,\"ntransactiontestcode\");var _inputData3=inputData,testskip=_inputData3.testskip,testtake=_inputData3.testtake;var bool=false;var _skipInfo={};if(inputData.masterData.RE_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){_skipInfo={testskip:testskip,testtake:testtake};}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:_objectSpread(_objectSpread({},masterData),{},{RESelectedSample:inputData.RESelectedSample,// selectedPreregno: inputData.npreregno,\n// RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\n//     searchedTest[0]\n// ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\n//     RE_TEST[0]\n// ] : [],\n// RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\nTestParameters:TestParameters,ResultUsedInstrument:ResultUsedInstrument,ResultUsedTasks:ResultUsedTasks,RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,ResultChangeHistory:ResultChangeHistory// RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\n}),loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestKey:inputData.activeTestKey},_skipInfo)});}}};}export function getTestREDetail(inputData,isServiceRequired){return function(dispatch){var activeName=\"\";var dataStateName=\"\";var inputParamData={nflag:3,ntype:3,nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,ntransactiontestcode:0,ntranscode:inputData.ntransactionstatus.toString(),ntransactionsamplecode:inputData.ntransactionsamplecode,userinfo:inputData.userinfo,ntestcode:inputData.ntestcode,activeTestKey:inputData.activeTestKey,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode};// dispatch(initRequest(true));\n// rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\nif(isServiceRequired){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\",inputParamData).then(function(response){// let responseData = {\n//     ...response.data,\n//     RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\n//     RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\n//     // RESelectedTest: inputData.masterData.RESelectedTest\n// }\nvar oldSelectedTest=inputData.masterData.RESelectedTest;fillRecordBasedOnCheckBoxSelection(inputData.masterData,response.data,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{// ...response.data,\nRESelectedTest:inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[],RESelectedSample:inputData.masterData.RESelectedSample,RESelectedSubSample:inputData.RESelectedSubSample||inputData.masterData.RESelectedSubSample});if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTests']=undefined;}var _inputData4=inputData,testskip=_inputData4.testskip,testtake=_inputData4.testtake;var bool=false;var skipInfo={};if(inputData.masterData.RE_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}var TestParameters=[];var ResultUsedInstrument=[];var ResultUsedTasks=[];var RegistrationTestAttachment=[];var ResultChangeHistory=[];var RegistrationTestComment=[];if(inputData.checkBoxOperation===1){//added by sudharshanan for test select issue while sample click\nvar wholeTestList=masterData.RE_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var ntransactiontestcode;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedTest:oldSelectedTest});}else{ntransactiontestcode=masterData.RESelectedTest[0].ntransactiontestcode;}switch(inputData.activeTestKey){case\"IDS_RESULTS\":TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":ResultUsedInstrument=keepOld?inputData.masterData.ResultUsedInstrument:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_TASK\":ResultUsedTasks=keepOld?inputData.masterData.ResultUsedTasks:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_RESULTCHANGEHISTORY\":ResultChangeHistory=keepOld?inputData.masterData.ResultChangeHistory:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;default:TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}}else if(inputData.checkBoxOperation===5){var list=[];var dbData=[];switch(inputData.activeTestKey){case\"IDS_RESULTS\":dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.TestParameters),_toConsumableArray(response.data.TestParameters));TestParameters=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_INSTRUMENT\":dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedInstrument),_toConsumableArray(response.data.ResultUsedInstrument));ResultUsedInstrument=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TASK\":dbData=response.data.ResultUsedTasks||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedTasks),_toConsumableArray(dbData));list.reduce(function(unique,item){return unique.includes(item)?unique:[].concat(_toConsumableArray(unique),[item]);},[]);ResultUsedTasks=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTATTACHMENTS\":dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_RESULTCHANGEHISTORY\":dbData=response.data.ResultChangeHistory||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultChangeHistory),_toConsumableArray(dbData));ResultChangeHistory=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":dbData=response.data.RegistrationTestComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestComment),_toConsumableArray(dbData));RegistrationTestComment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;default:dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.TestParameters),_toConsumableArray(dbData));TestParameters=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else{var _list2=[];switch(inputData.activeTestKey){case\"IDS_RESULTS\":_list2=response.data.TestParameters?sortData(response.data.TestParameters,'ascending','ntransactionresultcode'):[];TestParameters=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":_list2=response.data.ResultUsedInstrument?sortData(response.data.ResultUsedInstrument,'descending','nresultusedinstrumentcode'):[];ResultUsedInstrument=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_TASK\":_list2=response.data.ResultUsedTasks?sortData(response.data.ResultUsedTasks,'descending','nresultusedtaskcode'):[];_list2.reduce(function(unique,item){return unique.includes(item)?unique:[].concat(_toConsumableArray(unique),[item]);},[]);ResultUsedTasks=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":_list2=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_RESULTCHANGEHISTORY\":_list2=response.data.ResultChangeHistory?sortData(response.data.ResultChangeHistory,'descending','nresultchangehistorycode'):[];ResultChangeHistory=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_TESTCOMMENTS\":_list2=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;default:_list2=response.data.TestParameters?sortData(response.data.TestParameters,'ascending','ntransactionresultcode'):[];TestParameters=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}}masterData=_objectSpread(_objectSpread({},masterData),{},{// wholeApprovalParameter,\nTestParameters:TestParameters,// wholeResultUsedInstrument,\nResultUsedInstrument:ResultUsedInstrument,// wholeResultUsedTasks,\nResultUsedTasks:ResultUsedTasks,// wholeRegistrationTestAttachment,\nRegistrationTestAttachment:RegistrationTestAttachment,// wholeResultChangeHistory,\nResultChangeHistory:ResultChangeHistory,// wholeRegistrationTestComments,\nRegistrationTestComment:RegistrationTestComment});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTestKey:inputData.activeTestKey,screenName:inputData.screenName},skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{//fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\nvar oldSelectedTest=inputData.masterData.RESelectedTest;var TestSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest,inputData.removeElementFromArray[0].ntransactionsamplecode,\"ntransactionsamplecode\");var isGrandChildGetRequired=false;if(TestSelected.length>0){isGrandChildGetRequired=true;}else{isGrandChildGetRequired=false;}fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.RESelectedSubSample,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactionsamplecode\",inputData.removeElementFromArray);if(isGrandChildGetRequired){var ntransactiontestcode=inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode.toString():\"\";var RESelectedSubSample=inputData.RESelectedSubSample;var RESelectedTest=inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[];// let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\ninputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"TestParameters\",\"ResultUsedInstrument\",\"ResultUsedTasks\",\"RegistrationTestAttachment\",\"ResultChangeHistory\",\"RegistrationTestComment\",\"ResultChangeHistory\"],ntransactiontestcode:ntransactiontestcode,RESelectedSample:inputData.masterData.RESelectedSample,RESelectedTest:RESelectedTest,RESelectedSubSample:RESelectedSubSample,checkBoxOperation:3,activeTestKey:inputData.activeTestKey});dispatch(getTestChildTabREDetail(inputData,true));}else{//added by sudharshanan for test select issue while sample click\nvar masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{RESelectedTest:inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[],RESelectedSubSample:inputData.RESelectedSubSample});var wholeTestList=masterData.RE_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var _ntransactiontestcode2;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedTest:oldSelectedTest});}else{_ntransactiontestcode2=masterData.RE_TEST[0].ntransactiontestcode;}var TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,_ntransactiontestcode2,\"ntransactiontestcode\");var ResultUsedInstrument=keepOld?inputData.masterData.ResultUsedInstrument:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument||[],_ntransactiontestcode2,\"ntransactiontestcode\");var ResultUsedTasks=keepOld?inputData.masterData.ResultUsedTasks:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks||[],_ntransactiontestcode2,\"ntransactiontestcode\");var RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment||[],_ntransactiontestcode2,\"ntransactiontestcode\");var RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment||[],_ntransactiontestcode2,\"ntransactiontestcode\");var ResultChangeHistory=keepOld?inputData.masterData.ResultChangeHistory:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory||[],_ntransactiontestcode2,\"ntransactiontestcode\");var _inputData5=inputData,testskip=_inputData5.testskip,testtake=_inputData5.testtake;var bool=false;var skipInfo={};if(inputData.masterData.RE_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:_objectSpread(_objectSpread({},masterData),{},{RESelectedSubSample:inputData.RESelectedSubSample,// selectedPreregno: inputData.npreregno,\n// RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\n//     searchedTest[0]\n// ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\n//     RE_TEST[0]\n// ] : [],\n// RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\nTestParameters:TestParameters,ResultUsedInstrument:ResultUsedInstrument,ResultUsedTasks:ResultUsedTasks,RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,ResultChangeHistory:ResultChangeHistory}),loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestKey:inputData.activeTestKey},skipInfo)});}}};}export function getSampleChildTabREDetail(inputData){return function(dispatch){var inputParamData={ntransactiontestcode:inputData.ntransactiontestcode,npreregno:inputData.npreregno,userinfo:inputData.userinfo};var url=\"\";switch(inputData.activeSampleKey){case\"IDS_DOCUMENTS\":url=\"attachment/getSampleAttachment\";break;case\"IDS_SAMPLEATTACHMENTS\":url=\"attachment/getSampleAttachment\";break;case\"IDS_APPROVALHISTORY\":url=\"resultentrybysample/getSampleApprovalHistory\";break;default:url=\"attachment/getSampleAttachment\";break;}dispatch(initRequest(true));rsapi.post(url,inputParamData).then(function(response){var responseData=_objectSpread({},response.data);//responseData = sortData(responseData)\nfillRecordBasedOnCheckBoxSelection(inputData.masterData,responseData,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{RESelectedSample:inputData.RESelectedSample}),loading:false,activeSampleKey:inputData.activeSampleKey,screenName:inputData.screenName}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getTestChildTabREDetail(inputData,isServiceRequired){return function(dispatch){var inputParamData={ntransactiontestcode:inputData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"),npreregno:inputData.npreregno,userinfo:inputData.userinfo};var activeName=\"\";var dataStateName=\"\";// let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n//     documentDataState, testCommentDataState } = inputData\nvar url=\"resultentrybysample/getTestbasedParameter\";switch(inputData.activeTestKey){case\"IDS_RESULTS\":url=\"resultentrybysample/getTestbasedParameter\";activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":url=\"resultentrybysample/getResultUsedInstrument\";activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_MATERIAL\":url=\"resultentrybysample/getResultUsedMaterial\";activeName=\"\";dataStateName=\"materialDataState\";break;case\"IDS_TASK\":url=\"resultentrybysample/getResultUsedTask\";activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":url=\"attachment/getTestAttachment\";activeName=\"RegistrationTestAttachment\";break;case\"IDS_TESTCOMMENTS\":url=\"comments/getTestComment\";activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_DOCUMENTS\":url=\"attachment/getSampleAttachment\";activeName=\"\";dataStateName=\"documentDataState\";break;case\"IDS_RESULTCHANGEHISTORY\":url=\"resultentrybysample/getResultChangeHistory\";activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_SAMPLEATTACHMENTS\":url=\"attachment/getSampleAttachment\";activeName=\"\";dataStateName=\"resultDataState\";break;default:url=\"resultentrybysample/getTestbasedParameter\";activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}dispatch(initRequest(true));if(isServiceRequired){rsapi.post(url,inputParamData).then(function(response){var responseData=_objectSpread(_objectSpread({},response.data),{},{RESelectedSample:inputData.RESelectedSample||inputData.masterData.RESelectedSample,RESelectedTest:inputData.RESelectedTest});var skipInfo={};//responseData = sortData(responseData)\nfillRecordBasedOnCheckBoxSelection(inputData.masterData,responseData,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var masterData=_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),sortData(responseData)),{},{RESelectedTest:inputData.RESelectedTest});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,activeTestKey:inputData.activeTestKey,screenName:inputData.activeTestKey,testskip:undefined,testtake:undefined},skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{//fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\nfillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.RESelectedTest,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactiontestcode\",inputData.removeElementFromArray);var skipInfo={};var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{RESelectedTest:inputData.RESelectedTest});if(masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTestKey:inputData.activeTestKey,screenName:inputData.screenName},skipInfo)});}};}export function getRERegistrationType(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getRegistrationType\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),response.data),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getRERegistrationSubType(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getRegistrationsubType\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultRegistrationType:inputData.defaultRegistrationType}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREApprovalConfigVersion(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getApprovalConfigVersion\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultRegistrationSubType:inputData.defaultRegistrationSubType// fromDate: inputData.fromdate,\n//  toDate: inputData.todate\n}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREFilterStatus(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getFilterStatus\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultjobstatus:inputData.defaultjobstatus// fromDate: inputData.fromdate,\n// toDate: inputData.todate\n}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREJobStatus(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getJobStatus\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultApprovalConfigVersion:inputData.defaultApprovalConfigVersion// fromDate: inputData.fromdate,\n// toDate: inputData.todate\n}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getResultEntryDetails(inputParamData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultEntryDetails\",_objectSpread(_objectSpread({},inputParamData.inputData),{},{nneedsubsample:inputParamData.masterData.nneedsubsample})).then(function(response){var masterData=_objectSpread({},inputParamData.masterData);if(inputParamData.refs.searchSampleRef!==undefined&&inputParamData.refs.searchSampleRef.current!==null){inputParamData.refs.searchSampleRef.current.value=\"\";masterData['searchedSample']=undefined;}if(inputParamData.refs.searchSubSampleRef!==undefined&&inputParamData.refs.searchSubSampleRef.current!==null){inputParamData.refs.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputParamData.refs.searchTestRef!==undefined&&inputParamData.refs.searchTestRef.current!==null){inputParamData.refs.searchTestRef.current.value=\"\";// masterData['searchedTests'] = undefined\nmasterData['searchedTest']=undefined;}dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},masterData),response.data),{},{realFromDate:response.data[\"fromDate\"],realToDate:response.data[\"toDate\"]}),loading:false,showTest:inputParamData.inputData.showTest,showSample:inputParamData.inputData.showSample,activeTestKey:inputParamData.inputData.activeTestKey,skip:0,take:inputParamData.inputData.take,testskip:0,testtake:inputParamData.inputData.testtake,resultDataState:_objectSpread(_objectSpread({},inputParamData.resultDataState),{},{sort:undefined,filter:undefined}),instrumentDataState:_objectSpread(_objectSpread({},inputParamData.instrumentDataState),{},{sort:undefined,filter:undefined}),materialDataState:_objectSpread(_objectSpread({},inputParamData.materialDataState),{},{sort:undefined,filter:undefined}),taskDataState:_objectSpread(_objectSpread({},inputParamData.taskDataState),{},{sort:undefined,filter:undefined}),documentDataState:_objectSpread(_objectSpread({},inputParamData.documentDataState),{},{sort:undefined,filter:undefined}),resultChangeDataState:_objectSpread(_objectSpread({},inputParamData.resultChangeDataState),{},{sort:undefined,filter:undefined}),testCommentDataState:_objectSpread(_objectSpread({},inputParamData.testCommentDataState),{},{sort:undefined,filter:undefined}),historyDataState:_objectSpread(_objectSpread({},inputParamData.historyDataState),{},{sort:undefined,filter:undefined}),samplePrintHistoryDataState:_objectSpread(_objectSpread({},inputParamData.samplePrintHistoryDataState),{},{sort:undefined,filter:undefined}),sampleHistoryDataState:_objectSpread(_objectSpread({},inputParamData.sampleHistoryDataState),{},{sort:undefined,filter:undefined})}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function resultGetModule(inputData,userInfo,ncontrolcode,testskip,testtake){return function(dispatch){var TestList=_toConsumableArray(inputData.RE_TEST);TestList=TestList.splice(testskip,testskip+testtake);var acceptTestList=getSameRecordFromTwoArrays(TestList,inputData.RESelectedTest,\"ntransactiontestcode\");if(acceptTestList&&acceptTestList.length>0){if(Object.values(inputData).length>0&&inputData.RESelectedTest.length>0){var inputParamData={ntransactiontestcode:acceptTestList?acceptTestList.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",userinfo:userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultEntryResults\",inputParamData).then(function(response){var selectedResultGrade=[];var paremterResultcode=[];var parameterResults=response.data.ResultParameter;parameterResults.map(function(param,index){selectedResultGrade[index]={ngradecode:param.ngradecode};paremterResultcode[index]=param.ntransactionresultcode;response.data.PredefinedValues&&response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]&&response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(function(predefinedvalue){if(predefinedvalue.ndefaultstatus===transactionStatus.YES){response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]=constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]||[],'spredefinedname','spredefinedname',undefined,undefined,undefined).get(\"OptionList\");if(response.data.ResultParameter[index].sresult===null){response.data.ResultParameter[index].sresult=predefinedvalue.spredefinedname;response.data.ResultParameter[index].sfinal=predefinedvalue.spredefinedname;response.data.ResultParameter[index].editable=true;response.data.ResultParameter[index].ngradecode=predefinedvalue.ngradecode;}}return null;});return null;});dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData),response.data),{},{paremterResultcode:paremterResultcode//,\n//selectedResultGrade ,\n}),selectedRecord:{selectedResultGrade:selectedResultGrade,ResultParameter:response.data.ResultParameter},loading:false,screenName:\"IDS_RESULTENTRY\",openModal:true,operation:\"update\",activeTestKey:\"IDS_RESULTS\",ncontrolcode:ncontrolcode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});//}\n}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.warn(intl.formatMessage({id:\"IDS_SELECTTESTTOENTERRESULT\"}));}}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.warn(intl.formatMessage({id:\"IDS_SELECTTESTTOENTERRESULT\"}));}};}export function completeTest(inputParam,acceptList,userInfo,completeResultId){if(acceptList!==undefined&&acceptList.length>0){return function(dispatch){var inputData=inputParam.testChildGetREParam;var inputParamData={ntype:3,nflag:3,nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,ntranscode:String(inputData.ntransactionstatus),napprovalversioncode:inputData.napprovalversioncode,napprovalconfigcode:inputData.napprovalconfigcode,ntransactionsamplecode:inputData.ntransactionsamplecode,userinfo:userInfo,fromdate:inputData.fromdate,todate:inputData.todate,ntestcode:inputData.ntestcode,transactiontestcode:acceptList?acceptList.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",ntransactiontestcode:0,activeTestKey:inputData.activeTestKey,ncontrolcode:inputParam.inputData.ncontrolcode,nneedsubsample:inputData.masterData.nneedsubsample,ndesigntemplatemappingcode:inputData.masterData.ndesigntemplatemappingcode};var activeName=\"\";var dataStateName=\"\";// let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n//     documentDataState, testCommentDataState } = inputData\n// let url = \"resultentrybysample/getTestbasedParameter\"\nswitch(inputData.activeTestKey){case\"IDS_RESULTS\":activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_MATERIAL\":activeName=\"\";dataStateName=\"materialDataState\";break;case\"IDS_TASK\":activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":activeName=\"RegistrationTestAttachment\";break;case\"IDS_TESTCOMMENTS\":activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_DOCUMENTS\":activeName=\"\";dataStateName=\"documentDataState\";break;case\"IDS_RESULTCHANGEHISTORY\":activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_SAMPLEATTACHMENTS\":activeName=\"\";dataStateName=\"resultDataState\";break;default:activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}dispatch(initRequest(true));rsapi.post(\"resultentrybysample/completeTest\",inputParamData).then(function(response){var RE_SAMPLE=[];var RE_SUBSAMPLE=[];var RE_TEST=[];var responseData=response.data;if(responseData[\"RE_TEST\"].length>0){if(inputData.masterData.nneedsubsample)RE_TEST=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"],responseData[\"RE_TEST\"],\"ntransactionsamplecode\");else RE_TEST=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"],responseData[\"RE_TEST\"],\"npreregno\");}else{RE_TEST=inputData.masterData[\"RE_TEST\"];}RE_SUBSAMPLE=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"],RE_TEST,\"ntransactionsamplecode\");if(RE_SUBSAMPLE.length>0){RE_SAMPLE=inputData.masterData[\"RE_SAMPLE\"];}else{RE_SAMPLE=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"],RE_TEST,\"npreregno\");}var RESelectedSample=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"],RE_TEST,\"npreregno\");var RESelectedSubSample=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"],RE_TEST,\"ntransactionsamplecode\");var RESelectedTest1=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"],acceptList,\"ntransactiontestcode\");var RESelectedTest2=updatedObjectWithNewElement(RESelectedTest1,responseData.RESelectedTest);var searchedSample=undefined;if(inputData.masterData[\"searchedSample\"]){searchedSample=filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"],RE_TEST,\"npreregno\");}var masterData=_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{RE_SAMPLE:RE_SAMPLE,RE_SUBSAMPLE:RE_SUBSAMPLE,RESelectedSubSample:RESelectedSubSample,searchedSample:searchedSample,RESelectedSample:RESelectedSample,RESelectedTest:RESelectedTest2,RE_TEST:responseData[\"RE_TEST\"]});var skipInfo={};if(masterData.RE_SAMPLE&&masterData.RE_SAMPLE.length<=inputParam.skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{skip:0,take:inputParam.take});}if(masterData.RE_TEST&&masterData.RE_TEST.length<=inputParam.testskip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{testskip:0,testtake:inputParam.testtake});}if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}var respObject=_objectSpread(_objectSpread({},inputParamData.inputData),{},{openModal:false,loadEsign:false,showConfirmAlert:false,selectedRecord:undefined,loading:false,screenName:inputData.activeTestKey},skipInfo);if(searchedSample&&RESelectedSample.length===0&&searchedSample.length>0){var _objectSpread10;var paramList=inputParam.postParamList[0];var inputParameter=_objectSpread(_objectSpread({},paramList.fecthInputObject.fecthInputObject),{},(_objectSpread10={fetchUrl:paramList.fetchUrl},_defineProperty(_objectSpread10,paramList.primaryKeyField,String(searchedSample[0][paramList.primaryKeyField])),_defineProperty(_objectSpread10,\"ntype\",2),_defineProperty(_objectSpread10,\"nflag\",2),_objectSpread10));respObject=_objectSpread(_objectSpread({},respObject),{},{masterData:_objectSpread(_objectSpread({},masterData),{},{RESelectedSample:[searchedSample[0]]})});dispatch(fetchSelectedData(_objectSpread(_objectSpread({},inputParameter),{},{checkBoxOperation:3}),respObject));}else if(!searchedSample&&RESelectedSample.length===0&&RE_SAMPLE.length>0){var _objectSpread11;var _paramList=inputParam.postParamList[0];var _inputParameter=_objectSpread(_objectSpread({},_paramList.fecthInputObject.fecthInputObject),{},(_objectSpread11={fetchUrl:_paramList.fetchUrl},_defineProperty(_objectSpread11,_paramList.primaryKeyField,String(RE_SAMPLE[0][_paramList.primaryKeyField])),_defineProperty(_objectSpread11,\"ntype\",2),_defineProperty(_objectSpread11,\"nflag\",2),_objectSpread11));respObject=_objectSpread(_objectSpread({},respObject),{},{masterData:_objectSpread(_objectSpread({},masterData),{},{RESelectedSample:[RE_SAMPLE[0]]})});dispatch(fetchSelectedData(_objectSpread(_objectSpread({},_inputParameter),{},{checkBoxOperation:3}),respObject));}else{respObject=_objectSpread(_objectSpread({},respObject),{},{masterData:masterData});dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({},respObject),{},{loading:false})});}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}else{toast.warn(intl.formatMessage({id:\"IDS_SELECTTESTTOCOMPLETE\"}));}}//Compare two array and return the first array which is available in second array\nexport function compareTwoArray(firstArray,secondArray,PrimaryKey){var filterArray=firstArray.filter(function(x){return secondArray.some(function(y){return x[PrimaryKey]===y[PrimaryKey];});});return filterArray;}function fetchSelectedData(inputParam,respObject){return function(dispatch){rsapi.post(inputParam.fetchUrl,_objectSpread({},inputParam)).then(function(response){var masterData=_objectSpread(_objectSpread(_objectSpread({},respObject.masterData),response.data),{},{RESelectedSample:response.data.RESelectedSample||respObject.masterData.RESelectedSample||[]});//sortData(masterData);\ndispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({},respObject),{},{masterData:masterData,loading:false})});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function testMethodSourceEdit(inputData){return function(dispatch){var inputParamData={ntransactiontestcode:inputData.test.ntransactiontestcode,ntestgrouptestcode:inputData.test.ntestgrouptestcode,ntestcode:inputData.test.ntestcode,ncontrolcode:inputData.editSourceMethodId,userinfo:inputData.userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getTestMethodSource\",inputParamData).then(function(response){var TagSource=constructOptionList(response.data.SourceData||[],\"nsourcecode\",\"ssourcename\",undefined,undefined,undefined);var TagListSource=TagSource.get(\"OptionList\");var TagMethod=constructOptionList(response.data.MethodData||[],\"nmethodcode\",\"smethodname\",undefined,undefined,undefined);var TagListMethod=TagMethod.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),{},{SourceData:TagListSource,MethodData:TagListMethod,RESelectedSubSample:inputData.masterData.RESelectedSubSample}),selectedRecord:{ntransactiontestcode:inputData.test.ntransactiontestcode,stestsynonym:inputData.test.jsondata.stestsynonym,nsourcecode:response.data.SourceDataValue,nmethodcode:response.data.MethodDataValue},loading:false,screenName:\"IDS_TESTMETHODSOURCE\",openModal:true,operation:\"update\",ncontrolcode:inputData.editSourceMethodId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function updateParameterComments(inputData,masterData){return function(dispatch){var inputParamData={ntransactiontestcode:inputData.ntransactiontestcode,ntransactionresultcode:inputData.ntransactionresultcode,sresultcomment:inputData.sresultcomment,transactiontestcode:inputData.transactiontestcode,userinfo:inputData.userinfo,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,ncontrolcode:inputData.ncontrolcode};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/updateParameterComments\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},masterData),response.data),loading:false,loadEsign:false,screenName:\"IDS_RESULT\",openModal:false,operation:\"update\",ncontrolcode:inputData.ncontrolcode//ncontrolcode:inputData.editSourceMethodId\n}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function addREInstrument(inputData){return function(dispatch){var urlArray=[];var resultusedinstrument=rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\",{userinfo:inputData.userInfo});var timeZoneService=rsapi.post(\"timezone/getTimeZone\");var UTCtimeZoneService=rsapi.post(\"timezone/getLocalTimeByZone\",{userinfo:inputData.userInfo});urlArray=[resultusedinstrument,timeZoneService,UTCtimeZoneService];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var TagInstrument=constructOptionList(response[0].data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,undefined);var TagListInstrument=TagInstrument.get(\"OptionList\");var TagInsturmentcategory=constructOptionList(response[0].data.InstrumentCategory||[],\"ninstrumentcatcode\",\"sinstrumentcatname\",undefined,undefined,undefined);var TagListInstrumentCategory=TagInsturmentcategory.get(\"OptionList\");var TagTimeZone=constructOptionList(response[1].data||[],\"ntimezonecode\",\"stimezoneid\",undefined,undefined,undefined);var TagListTimeZone=TagTimeZone.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),{},{Instrument:TagListInstrument,InstrumentCategory:TagListInstrumentCategory}),selectedId:null,selectedRecord:{sarno:inputData.test.sarno,ssamplearno:inputData.test.ssamplearno,stestsynonym:inputData.test.jsondata.stestsynonym,transactiontestcode:inputData.RESelectedTest?inputData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\").toString():\"\",ntransactiontestcode:inputData.test.ntransactiontestcode,ninstrumentcatcode:TagInsturmentcategory.get(\"DefaultValue\")?TagInsturmentcategory.get(\"DefaultValue\"):[],ninstrumentcode:TagInstrument.get(\"DefaultValue\")?TagInstrument.get(\"DefaultValue\"):[],npreregno:inputData.test.npreregno,//dtodate: new Date(response[2].data),//new Date(),\ndtodate:rearrangeDateFormat(inputData.userInfo,response[2].data),//new Date(),\n//dfromdate: new Date(response[2].data),//new Date(),\ndfromdate:rearrangeDateFormat(inputData.userInfo,response[2].data),//new Date(),\nntzfromdate:{\"value\":inputData.userInfo.ntimezonecode,\"label\":inputData.userInfo.stimezoneid},ntztodate:{\"value\":inputData.userInfo.ntimezonecode,\"label\":inputData.userInfo.stimezoneid}},timeZoneList:TagListTimeZone||[],loading:false,screenName:\"IDS_INSTRUMENT\",openModal:true,operation:\"create\",//activeTestKey: \"IDS_INSTRUMENT\",\nncontrolcode:inputData.addResultUsedInstrumentId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function deleteInstrumentRecord(inputData){return function(dispatch){var inputParamData={nresultusedinstrumentcode:inputData.selectedRecord.nresultusedinstrumentcode,userinfo:inputData.userInfo,ntransactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\").toString():\"\",nregtypecode:inputData.masterData.defaultRegistrationType.nregtypecode,nregsubtypecode:inputData.masterData.defaultRegistrationSubType.nregsubtypecode};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),response.data),loading:false,operation:\"delete\",openModal:false,loadEsign:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function fetchInstrumentRecord(inputData){return function(dispatch){var urlArray=[];//const resultUsedInstrumentCombo = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", { userinfo: inputData.userInfo });\nvar timeZoneService=rsapi.post(\"resultentrybysample/getResultUsedInstrument\",{nresultusedinstrumentcode:inputData.editRow.nresultusedinstrumentcode,userinfo:inputData.userInfo});var getResultUsedInstrument=rsapi.post(\"timezone/getTimeZone\");urlArray=[timeZoneService,getResultUsedInstrument];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var TagInstrument=constructOptionList(response[0].data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,undefined);var TagListInstrument=TagInstrument.get(\"OptionList\");var TagInsturmentcategory=constructOptionList(response[0].data.InstrumentCategory||[],\"ninstrumentcatcode\",\"sinstrumentcatname\",undefined,undefined,undefined);var TagListInstrumentCategory=TagInsturmentcategory.get(\"OptionList\");var TagTimeZone=constructOptionList(response[1].data||[],\"ntimezonecode\",\"stimezoneid\",undefined,undefined,undefined);var TagListTimeZone=TagTimeZone.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),{},{Instrument:TagListInstrument,InstrumentCategory:TagListInstrumentCategory},response[1].data),selectedId:inputData.editRow.nresultusedinstrumentcode,selectedRecord:{stestsynonym:inputData.editRow.stestsynonym,npreregno:response[0].data.EditResultUsedInstrument[0].npreregno,ntransactiontestcode:inputData.editRow.ntransactiontestcode,nresultusedinstrumentcode:inputData.editRow.nresultusedinstrumentcode,ninstrumentcatcode:{\"value\":response[0].data.EditResultUsedInstrument[0].ninstrumentcatcode,\"label\":response[0].data.EditResultUsedInstrument[0].sinstrumentcatname},ninstrumentcode:{\"value\":response[0].data.EditResultUsedInstrument[0].ninstrumentcode,\"label\":response[0].data.EditResultUsedInstrument[0].sinstrumentid},ntzfromdate:{\"value\":response[0].data.EditResultUsedInstrument[0].ntzfromdate,\"label\":response[0].data.EditResultUsedInstrument[0].stzfromdate},ntztodate:{\"value\":response[0].data.EditResultUsedInstrument[0].ntztodate,\"label\":response[0].data.EditResultUsedInstrument[0].stztodate},//dfromdate: new Date(response[0].data.EditResultUsedInstrument[0].sfromdate),\n//dtodate: new Date(response[0].data.EditResultUsedInstrument[0].stodate)\ndfromdate:rearrangeDateFormat(inputData.userInfo,response[0].data.EditResultUsedInstrument[0].sfromdate),dtodate:rearrangeDateFormat(inputData.userInfo,response[0].data.EditResultUsedInstrument[0].stodate)},timeZoneList:TagListTimeZone||[],ncontrolcode:inputData.ncontrolCode,loading:false,screenName:\"IDS_INSTRUMENT\",openModal:true,operation:\"update\"}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function deleteTaskRecord(inputData,userInfo){return function(dispatch){var inputParamData={nresultusedtaskcode:inputData.selectedRecord.nresultusedtaskcode,userinfo:inputData.userInfo,ntransactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\").toString():\"\",nregtypecode:inputData.masterData.defaultRegistrationType.nregtypecode,nregsubtypecode:inputData.masterData.defaultRegistrationSubType.nregsubtypecode};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/deleteResultUsedTasks\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),response.data),loading:false,operation:\"delete\",openModal:false,loadEsign:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function fetchTaskRecord(inputData){return function(dispatch){var inputParamData={nresultusedtaskcode:inputData.editRow.nresultusedtaskcode,userinfo:inputData.userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultUsedTask\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),response.data),selectedId:response.data.EditResultUsedTasks[0].nresultusedtaskcode,selectedRecord:{npreregno:response.data.EditResultUsedTasks[0].npreregno,stestsynonym:inputData.editRow.stestsynonym,sanalysistime:response.data.EditResultUsedTasks[0].sanalysistime,smisctime:response.data.EditResultUsedTasks[0].smisctime,spreanalysistime:response.data.EditResultUsedTasks[0].spreanalysistime,spreparationtime:response.data.EditResultUsedTasks[0].spreparationtime,scomments:response.data.EditResultUsedTasks[0].scomments,nresultusedtaskcode:response.data.EditResultUsedTasks[0].nresultusedtaskcode},loading:false,screenName:\"IDS_TASK\",openModal:true,operation:\"update\",ncontrolcode:inputData.ncontrolcode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function parameterRecord(inputData){return function(dispatch){var inputParamData={ntransactionresultcode:inputData.selectedRecord.ntransactionresultcode,ntransactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",ncontrolcode:inputData.controlcode,userinfo:inputData.userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getParameterComments\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread({},inputData.masterData),selectedId:response.data.ParameterComments.ntransactionresultcode,selectedRecord:{sresultcomment:response.data.ParameterComments.sresultcomment,stestsynonym:inputData.selectedRecord.stestsynonym,sparametersynonym:inputData.selectedRecord.sparametersynonym,transactiontestcode:response.data.ParameterComments.ntransactiontestcode,ntransactionresultcode:response.data.ParameterComments.ntransactionresultcode,ntransactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",ncontrolcode:inputData.controlcode},loading:false,screenName:\"IDS_PARAMETERCOMMENTS\",openModal:true,operation:\"updateParameterComments\",ncontrolcode:inputData.controlcode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function checkListRecord(inputData){return function(dispatch){var inputParamData={ntransactionresultcode:inputData.selectedRecord.ntransactionresultcode,napprovalparametercode:inputData.selectedRecord.napprovalparametercode,nchecklistversioncode:inputData.selectedRecord.nchecklistversioncode,ntransactiontestcode:inputData.selectedRecord.ntransactiontestcode.toString(),ncontrolcode:inputData.ncontrolcode,userinfo:inputData.userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getChecklistdesign\",inputParamData).then(function(response){var selectedRecord={};var lsteditedQB=[];selectedRecord={npreregno:inputData.selectedRecord.npreregno,stestsynonym:inputData.selectedRecord.stestsynonym,sparametersynonym:inputData.selectedRecord.sparametersynonym,ntransactiontestcode:inputData.selectedRecord.ntransactiontestcode,ntransactionresultcode:inputData.selectedRecord.ntransactionresultcode,transactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\"};response.data.ChecklistData.map(function(checklist){selectedRecord[checklist.nchecklistversionqbcode]={nchecklistqbcode:checklist.nchecklistqbcode,nchecklistversioncode:checklist.nchecklistversioncode,nchecklistversionqbcode:checklist.nchecklistversionqbcode,sdefaultvalue:checklist.sdefaultvalue};lsteditedQB.push(checklist.nchecklistversionqbcode);return null;});selectedRecord[\"editedQB\"]=lsteditedQB;dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),response.data),selectedId:response.data.selectedId,selectedRecord:selectedRecord,loading:false,screenName:\"IDS_CHECKLISTRESULT\",openTemplateModal:true,needSaveButton:inputData.needSaveButton,operation:\"create\",ncontrolCode:inputData.ncontrolcode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function onSaveCheckList(selectedRecord,userInfo,nregtypecode,nregsubtypecode){return function(dispatch){var listResultCheckList=[];if(selectedRecord&&selectedRecord.editedQB){selectedRecord.editedQB.map(function(qbcode){return listResultCheckList.push(selectedRecord[qbcode]);});var inputParamData={ntransactionresultcode:selectedRecord.ntransactionresultcode,ntransactiontestcode:selectedRecord.ntransactiontestcode.toString(),transactiontestcode:selectedRecord.transactiontestcode,npreregno:selectedRecord.npreregno,ResultCheckList:listResultCheckList,userinfo:userInfo,nregtypecode:nregtypecode,nregsubtypecode:nregsubtypecode,ncontrolcode:-1};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/createResultEntryChecklist\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{selectedRecord:{},templateData:undefined,openTemplateModal:false,openModal:false,loading:false,loadEsign:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{dispatch({type:DEFAULT_RETURN,payload:{openTemplateModal:false,selectedRecord:{},loading:false,loadEsign:false}});}};}export function defaultTest(inputData,RESelectedTest,RESelectedSample,nregtypecode,nregsubtypecode){if(RESelectedTest!==undefined&&RESelectedTest.length>0){return function(dispatch){var inputParamData={userinfo:inputData.userinfo,ntransactiontestcode:RESelectedTest?RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",ntestgrouptestcode:RESelectedTest?RESelectedTest.map(function(test){return test.ntestgrouptestcode;}).join(\",\"):\"\",npreregno:RESelectedTest?RESelectedTest.map(function(preregno){return preregno.npreregno;}).join(\",\"):\"\",//RESelectedSample ? RESelectedSample.map(preregno => preregno.npreregno).join(\",\") : \"\",\nnregtypecode:nregtypecode,nregsubtypecode:nregsubtypecode,ncontrolcode:inputData.ncontrolcode};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/updateDefaultValue\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{TestParameters:replaceUpdatedObject(response.data.TestParameters,inputData.masterData.TestParameters,'ntransactionresultcode'),RESelectedSubSample:inputData.masterData.RESelectedSubSample}),loading:false,activeTestKey:\"IDS_RESULTS\",openModal:false,loadEsign:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false,openModal:false,loadEsign:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}else{toast.warn(intl.formatMessage({id:\"IDS_SELECTTESTTOCOMPLETE\"}));}}export function getFormula(parameterData,userInfo,masterData,index,selectedRecord){return function(dispatch){var inputParamData={ntransactiontestcode:parameterData.ntransactiontestcode,nformulacode:parameterData.ntestgrouptestformulacode,userinfo:userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getFormulaInputs\",inputParamData).then(function(response){var validateFormulaMandyFields=response.data.DynamicFormulaFields.map(function(item,index){return{\"idsName\":\"IDS_FILLALLFIELDS\",\"dataField\":index,\"mandatory\":true};});dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},masterData),response.data),selectedRecord:_objectSpread(_objectSpread({},selectedRecord),{},{parameterData:parameterData,sformulacalculationdetail:response.data.query,formulainput:response.data.Formula,resultindex:index,selectedForumulaInput:[]}),validateFormulaMandyFields:validateFormulaMandyFields,loading:false,screenName:\"IDS_RESULTFORMULA\",showFormula:true,operation:\"validate\",showValidate:true}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function calculateFormula(inputDataValue){return function(dispatch){var inputData={ntransactiontestcode:inputDataValue.selectedRecord.parameterData.ntransactiontestcode,ntransactionresultcode:inputDataValue.selectedRecord.parameterData.ntransactionresultcode,npreregno:inputDataValue.selectedRecord.parameterData.npreregno,sformulacalculationcode:inputDataValue.selectedRecord.sformulacalculationdetail,nformulacode:inputDataValue.selectedRecord.parameterData.ntestgrouptestformulacode,userinfo:inputDataValue.userInfo,dynamicformulafields:inputDataValue.lstDynamicFields};dispatch(initRequest(true));rsapi.post(\"testmaster/calculateFormula\",inputData).then(function(response){// inputDataValue.selectedResultData[inputDataValue.selectedRecord.resultindex] =\n// {\n//     ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\n//     ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\n//     nparametertypecode: inputDataValue.selectedRecord.parameterData.nparametertypecode,\n//     sresult: response.data.Result,\n//     nroundingdigit: inputDataValue.selectedRecord.parameterData.nroundingdigits,\n//     value: inputDataValue.selectedRecord.parameterData.ngradecode,\n//     parameter: inputDataValue.selectedRecord.parameterData\n// }\ninputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sfinal\"]=response.data.Result;inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sresult\"]=response.data.Result;inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex]['editable']=true;inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"ncalculatedresult\"]=3;inputDataValue.selectedResultGrade[inputDataValue.selectedRecord.resultindex]={ngradecode:numericGrade(inputDataValue.selectedRecord.parameterData,parseInt(response.data.Result))};dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread({},inputDataValue.masterData),selectedRecord:{selectedResultGrade:inputDataValue.selectedResultGrade,ResultParameter:inputDataValue.ResultParameter},loading:false,screenName:\"IDS_RESULTENTRY\",showFormula:false,operation:\"update\",showValidate:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{//toast.warn(error.response.data);\ntoast.warn(error.response.data[\"Result\"]);}});};}export function getREFilterTestData(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getTestBasedOnCombo\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultFilterStatus:inputData.defaultFilterStatus}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function updateTestMethodSource(inputData,masterData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/updateTestMethodSource\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},masterData),{},{RE_TEST:replaceUpdatedObject(response.data.RE_TEST,masterData.RE_TEST,'ntransactiontestcode')}),loading:false,openModal:false,loadEsign:false// activeTestKey: \"IDS_RESULTS\"\n}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function resultImportFile(inputData,masterData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getImportResultEntry\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread({},masterData),loading:false,openModal:false// activeTestKey: \"IDS_RESULTS\"\n}});if(response.data.returnStatus&&response.data.returnStatus!==\"\"){toast.info(response.data.returnStatus);}else{toast.warn(response.data.returnStatus);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function validateEsignCredentialComplete(inputParam){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"login/validateEsignCredential\",inputParam.inputData).then(function(response){if(response.data===\"Success\"){var methodUrl=\"performaction\";inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"]=inputParam.inputData.userinfo;if(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]&&inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]){delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];}if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"complete\"){dispatch(completeTest(inputParam[\"screenData\"][\"inputParam\"],inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"],inputParam.inputData.userinfo));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"default\"){dispatch(defaultTest(inputParam[\"screenData\"][\"inputParam\"][\"testChildGetREParam\"],inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"],inputParam[\"screenData\"][\"inputParam\"][\"RESelectedSample\"],inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregtypecode\"],inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregsubtypecode\"]));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"deleteInstrument\"){dispatch(deleteInstrumentRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"createMethod\"){dispatch(updateTestMethodSource(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"],inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"deleteTask\"){dispatch(deleteTaskRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"updateParameterComments\"){dispatch(updateParameterComments(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"],inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]));}else if(inputParam[\"screenData\"][\"operation\"]===\"updatechecklist\"){var _inputParam$screenDat=inputParam[\"screenData\"],selectedRecord=_inputParam$screenDat.selectedRecord,userInfo=_inputParam$screenDat.userInfo,nregtypecode=_inputParam$screenDat.nregtypecode,nregsubtypecode=_inputParam$screenDat.nregsubtypecode;delete selectedRecord.esignpassword;delete selectedRecord.esigncomments;delete selectedRecord.agree;delete inputParam.inputData.password;userInfo=inputParam.inputData.userinfo;dispatch(onSaveCheckList(selectedRecord,userInfo,nregtypecode,nregsubtypecode));}}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getMeanCalculationTestParameter(meanParam){return function(dispatch){dispatch(initRequest(true));var inputData={npreregno:meanParam.selectedRecord.npreregno,ntransactionresultcode:meanParam.selectedRecord.ntransactionresultcode,userinfo:meanParam.userInfo};return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\",inputData).then(function(response){var list=response.data||[];// const optionList = [];\n// list.map(item=>{\n//     console.log(\"item:\", item);\n//         optionList.push({item:item, \n//                         label:\"[\"+item.stestsynonym+\"]-[\"+item.sparametersynonym+\"]-[\"+item.sresult+\"]\", \n//                         value:item.ntransactionresultcode})\n//     })\n// const masterData = {...masterData, ResultParameter:meanParam.selectedRecord}\ndispatch({type:DEFAULT_RETURN,payload:{loading:false,openModal:true,meanTestParameterList:list,screenName:\"IDS_MEANPARAMETER\",ncontrolcode:meanParam.ncontrolCode,selectedTestParameterMean:meanParam.selectedRecord}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/ResultEntryAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","intl","Axios","numericGrade","constructOptionList","fillRecordBasedOnCheckBoxSelection","filterRecordBasedOnTwoArrays","getRecordBasedOnPrimaryKeyName","getSameRecordFromTwoArrays","replaceUpdatedObject","sortData","updatedObjectWithNewElement","rearrangeDateFormat","transactionStatus","getsubSampleREDetail","inputData","isServiceRequired","dispatch","inputParamData","ntype","nflag","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntranscode","String","ntransactionstatus","ntransactiontestcode","userinfo","ntestcode","napprovalversioncode","fromdate","todate","activeTestKey","activeSampleKey","nneedsubsample","masterData","ndesigntemplatemappingcode","activeName","dataStateName","post","checkBoxOperation","then","response","oldSelectedTest","RESelectedTest","data","childTabsKey","removeElementFromArray","RESelectedSubSample","RE_SUBSAMPLE","RE_TEST","length","RESelectedSample","searchSubSampleRef","undefined","current","value","searchTestRef","testskip","testtake","bool","skipInfo","TestParameters","ResultUsedInstrument","ResultUsedTasks","RegistrationTestAttachment","ResultChangeHistory","RegistrationTestComment","wholeTestList","map","b","test","index","includes","splice","keepOld","list","dbData","reduce","unique","item","skip","sort","filter","type","payload","loading","take","catch","error","status","message","warn","TestSelected","isGrandChildGetRequired","oldSelectedSubSample","subsampletake","subsampleskip","toString","filterSelectedSubSample","ntransactionsamplecode","subsample","join","getTestChildTabREDetail","getTestREDetail","subsamplecheck","SubSampleSelected","wholeSubSample","forEach","selectedTest","selectedSubSample1","x","showFilter","activeSampleTab","screenName","getSampleChildTabREDetail","url","responseData","getRERegistrationType","getRERegistrationSubType","defaultRegistrationType","getREApprovalConfigVersion","defaultRegistrationSubType","getREFilterStatus","defaultjobstatus","getREJobStatus","defaultApprovalConfigVersion","getResultEntryDetails","refs","searchSampleRef","realFromDate","realToDate","showTest","showSample","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","samplePrintHistoryDataState","sampleHistoryDataState","resultGetModule","userInfo","ncontrolcode","TestList","acceptTestList","Object","values","selectedResultGrade","paremterResultcode","parameterResults","ResultParameter","param","ngradecode","ntransactionresultcode","PredefinedValues","predefinedvalue","ndefaultstatus","YES","get","sresult","spredefinedname","sfinal","editable","selectedRecord","openModal","operation","formatMessage","id","completeTest","inputParam","acceptList","completeResultId","testChildGetREParam","napprovalconfigcode","transactiontestcode","RE_SAMPLE","RESelectedTest1","RESelectedTest2","searchedSample","respObject","loadEsign","showConfirmAlert","paramList","postParamList","inputParameter","fecthInputObject","fetchUrl","primaryKeyField","fetchSelectedData","compareTwoArray","firstArray","secondArray","PrimaryKey","filterArray","some","y","testMethodSourceEdit","ntestgrouptestcode","editSourceMethodId","TagSource","SourceData","TagListSource","TagMethod","MethodData","TagListMethod","stestsynonym","jsondata","nsourcecode","SourceDataValue","nmethodcode","MethodDataValue","updateParameterComments","sresultcomment","addREInstrument","urlArray","resultusedinstrument","timeZoneService","UTCtimeZoneService","all","TagInstrument","Instrument","TagListInstrument","TagInsturmentcategory","InstrumentCategory","TagListInstrumentCategory","TagTimeZone","TagListTimeZone","selectedId","sarno","ssamplearno","ninstrumentcatcode","ninstrumentcode","dtodate","dfromdate","ntzfromdate","ntimezonecode","stimezoneid","ntztodate","timeZoneList","addResultUsedInstrumentId","deleteInstrumentRecord","nresultusedinstrumentcode","fetchInstrumentRecord","editRow","getResultUsedInstrument","EditResultUsedInstrument","sinstrumentcatname","sinstrumentid","stzfromdate","stztodate","sfromdate","stodate","ncontrolCode","deleteTaskRecord","nresultusedtaskcode","fetchTaskRecord","EditResultUsedTasks","sanalysistime","smisctime","spreanalysistime","spreparationtime","scomments","parameterRecord","controlcode","ParameterComments","sparametersynonym","checkListRecord","napprovalparametercode","nchecklistversioncode","lsteditedQB","ChecklistData","checklist","nchecklistversionqbcode","nchecklistqbcode","sdefaultvalue","push","openTemplateModal","needSaveButton","onSaveCheckList","listResultCheckList","editedQB","qbcode","ResultCheckList","templateData","defaultTest","preregno","getFormula","parameterData","nformulacode","ntestgrouptestformulacode","validateFormulaMandyFields","DynamicFormulaFields","sformulacalculationdetail","query","formulainput","Formula","resultindex","selectedForumulaInput","showFormula","showValidate","calculateFormula","inputDataValue","sformulacalculationcode","dynamicformulafields","lstDynamicFields","Result","parseInt","getREFilterTestData","defaultFilterStatus","updateTestMethodSource","resultImportFile","returnStatus","info","validateEsignCredentialComplete","methodUrl","toLowerCase","esignpassword","esigncomments","agree","password","getMeanCalculationTestParameter","meanParam","meanTestParameterList","selectedTestParameterMean"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport Axios from 'axios';\r\nimport {\r\n    numericGrade\r\n} from '../pages/ResultEntryBySample/ResultEntryValidation';\r\nimport {\r\n    constructOptionList,\r\n    fillRecordBasedOnCheckBoxSelection,\r\n    filterRecordBasedOnTwoArrays,\r\n    getRecordBasedOnPrimaryKeyName,\r\n    getSameRecordFromTwoArrays,\r\n    replaceUpdatedObject,\r\n    sortData,\r\n    updatedObjectWithNewElement, rearrangeDateFormat\r\n} from '../components/CommonScript';\r\nimport {\r\n    transactionStatus\r\n} from '../components/Enumeration';\r\n\r\nexport function getsubSampleREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n            nflag: inputData.nflag || 2,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntranscode: String(inputData.ntransactionstatus),\r\n            ntransactiontestcode: 0,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            fromdate: inputData.fromdate,\r\n            todate: inputData.todate,\r\n            activeTestKey: inputData.activeTestKey,\r\n            activeSampleKey: inputData.activeSampleKey,\r\n            nneedsubsample: inputData.masterData.nneedsubsample,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n        //     documentDataState, testCommentDataState } = inputData\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData, checkBoxOperation: inputData.checkBoxOperation})\r\n                .then(response => {\r\n                    // if (response.data.DynamicGetSamples) {\r\n                    //     sortData(response.data.DynamicGetSamples, \"\", \"\");\r\n                    // }\r\n                    // if (response.data.DynamicGetTests) {\r\n                    //     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\r\n                    // }\r\n                    //sortData(response.data);\r\n                    let oldSelectedTest = inputData.masterData.RESelectedTest\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let RESelectedSubSample = inputData.checkBoxOperation === 3 ? response.data.RESelectedSubSample : inputData.masterData.RESelectedSubSample\r\n                    RESelectedSubSample = inputData.masterData.nneedsubsample ? RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE;\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        // ...response.data,\r\n                        RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                        RESelectedSample: inputData.RESelectedSample,\r\n                        RESelectedSubSample\r\n                    }\r\n                    // if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    //     inputData.searchSampleRef.current.value = \"\";\r\n                    //     masterData['searchedSample'] = undefined\r\n                    // }\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let TestParameters = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        //added by sudharshanan for test select issue while sample click\r\n                        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                RESelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        // wholeApprovalParameter,\r\n                        TestParameters,\r\n                        // wholeResultUsedInstrument,\r\n                        ResultUsedInstrument,\r\n                        // wholeResultUsedTasks,\r\n                        ResultUsedTasks,\r\n                        // wholeRegistrationTestAttachment,\r\n                        RegistrationTestAttachment,\r\n                        // wholeResultChangeHistory,\r\n                        ResultChangeHistory,\r\n                        // wholeRegistrationTestComments,\r\n                        RegistrationTestComment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.RESelectedTest\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            let oldSelectedSubSample = inputData.masterData.RESelectedSubSample\r\n            let { subsampletake, subsampleskip } = inputData;\r\n            let skipInfo = {};\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let RESelectedSample = inputData.RESelectedSample;\r\n                let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\r\n                let RESelectedSubSample =  inputData.masterData.RE_SUBSAMPLE\r\n                \r\n                \r\n                if (inputData.masterData.nneedsubsample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    RESelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RE_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n                }\r\n                let ntransactionsamplecode = RESelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\r\n                inputData = {\r\n                    ...inputData,\r\n                    ntransactiontestcode,\r\n                    ntransactionsamplecode,\r\n                    RESelectedSample,\r\n                    RESelectedTest,\r\n                    RESelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey\r\n                }\r\n                if (RESelectedTest.length > 0) {\r\n                    inputData = {\r\n                        ...inputData, \r\n                        childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                            \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"\r\n                        ]\r\n                    }\r\n                    dispatch(getTestChildTabREDetail(inputData, true));\r\n                } else {\r\n                    inputData = {\r\n                        ...inputData,\r\n                        childTabsKey: [\"RE_TEST\"]\r\n                    }\r\n                    dispatch(getTestREDetail(inputData, true));\r\n                }\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    RESelectedSample: inputData.RESelectedSample,\r\n                    RESelectedSubSample: inputData.masterData.nneedsubsample && inputData.masterData.RE_SUBSAMPLE.length>0 ? inputData.masterData.RESelectedSubSample  : inputData.masterData.RE_SUBSAMPLE\r\n                }\r\n                let subsamplecheck = true;\r\n                if (inputData.masterData.nneedsubsample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((test, index) => {\r\n                                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.RE_SUBSAMPLE[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    RESelectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"childTabsKey\"] = [\"RE_TEST\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getTestREDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.forEach((test, index) => {\r\n                            if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            RESelectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RESelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\r\n                }\r\n                const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RESelectedSample: inputData.RESelectedSample,\r\n                            // selectedPreregno: inputData.npreregno,\r\n                            // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\r\n                            //     searchedTest[0]\r\n                            // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\r\n                            //     RE_TEST[0]\r\n                            // ] : [],\r\n                            // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                            TestParameters,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            ResultChangeHistory,\r\n                            // RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTestREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let inputParamData = {\r\n            nflag: 3,\r\n            ntype: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactiontestcode: 0,\r\n            ntranscode: inputData.ntransactionstatus.toString(),\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestKey: inputData.activeTestKey,\r\n            ndesigntemplatemappingcode : inputData.ndesigntemplatemappingcode\r\n        }\r\n        // dispatch(initRequest(true));\r\n        // rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\r\n        if (isServiceRequired) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\r\n                .then(response => {\r\n                    // let responseData = {\r\n                    //     ...response.data,\r\n                    //     RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\r\n                    //     RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\r\n                    //     // RESelectedTest: inputData.masterData.RESelectedTest\r\n                    // }\r\n                    let oldSelectedTest = inputData.masterData.RESelectedTest\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        // ...response.data,\r\n                        RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                        RESelectedSample: inputData.masterData.RESelectedSample,\r\n                        RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let TestParameters = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        //added by sudharshanan for test select issue while sample click\r\n                        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                RESelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        // wholeApprovalParameter,\r\n                        TestParameters,\r\n                        // wholeResultUsedInstrument,\r\n                        ResultUsedInstrument,\r\n                        // wholeResultUsedTasks,\r\n                        ResultUsedTasks,\r\n                        // wholeRegistrationTestAttachment,\r\n                        RegistrationTestAttachment,\r\n                        // wholeResultChangeHistory,\r\n                        ResultChangeHistory,\r\n                        // wholeRegistrationTestComments,\r\n                        RegistrationTestComment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            screenName: inputData.screenName,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n            let oldSelectedTest = inputData.masterData.RESelectedTest\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let RESelectedSubSample = inputData.RESelectedSubSample;\r\n                let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\r\n                // let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\r\n\r\n                inputData = {\r\n                    ...inputData,\r\n                    childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                        \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"\r\n                    ],\r\n                    ntransactiontestcode,\r\n                    RESelectedSample: inputData.masterData.RESelectedSample,\r\n                    RESelectedTest,\r\n                    RESelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey\r\n                }\r\n                dispatch(getTestChildTabREDetail(inputData, true));\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    RESelectedSubSample: inputData.RESelectedSubSample\r\n                }\r\n                let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RESelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\r\n                }\r\n                const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RESelectedSubSample: inputData.RESelectedSubSample,\r\n                            // selectedPreregno: inputData.npreregno,\r\n                            // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\r\n                            //     searchedTest[0]\r\n                            // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\r\n                            //     RE_TEST[0]\r\n                            // ] : [],\r\n                            // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                            TestParameters,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            ResultChangeHistory,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getSampleChildTabREDetail(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            npreregno: inputData.npreregno,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let url = \"\"\r\n        switch (inputData.activeSampleKey) {\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_APPROVALHISTORY\":\r\n                url = \"resultentrybysample/getSampleApprovalHistory\"\r\n                break;\r\n            default:\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(url, inputParamData)\r\n            .then(response => {\r\n                let responseData = {\r\n                    ...response.data\r\n                }\r\n                //responseData = sortData(responseData)\r\n                fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            RESelectedSample: inputData.RESelectedSample\r\n                        },\r\n                        loading: false,\r\n                        activeSampleKey: inputData.activeSampleKey,\r\n                        screenName: inputData.screenName\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getTestChildTabREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\r\n            npreregno: inputData.npreregno,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n        //     documentDataState, testCommentDataState } = inputData\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (inputData.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                activeName = \"TestParameters\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                url = \"resultentrybysample/getResultUsedInstrument\"\r\n                activeName = \"ResultUsedInstrument\"\r\n                dataStateName = \"instrumentDataState\"\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                url = \"resultentrybysample/getResultUsedMaterial\";\r\n                activeName = \"\"\r\n                dataStateName = \"materialDataState\"\r\n                break;\r\n            case \"IDS_TASK\":\r\n                url = \"resultentrybysample/getResultUsedTask\"\r\n                activeName = \"ResultUsedTasks\"\r\n                dataStateName = \"taskDataState\"\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                activeName = \"RegistrationTestComment\"\r\n                dataStateName = \"testCommentDataState\"\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"\"\r\n                dataStateName = \"documentDataState\"\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                url = \"resultentrybysample/getResultChangeHistory\"\r\n                activeName = \"ResultChangeHistory\"\r\n                dataStateName = \"resultChangeDataState\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n            default:\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                activeName = \"TestParameters\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(url, inputParamData)\r\n                .then(response => {\r\n                    let responseData = {\r\n                        ...response.data,\r\n                        RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\r\n                        RESelectedTest: inputData.RESelectedTest\r\n                    }\r\n                    let skipInfo = {};\r\n                    //responseData = sortData(responseData)\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...sortData(responseData),\r\n                        RESelectedTest: inputData.RESelectedTest\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            screenName: inputData.activeTestKey,\r\n                            testskip: undefined,\r\n                            testtake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n            let skipInfo = {};\r\n            let masterData = {\r\n                ...inputData.masterData,\r\n                RESelectedTest: inputData.RESelectedTest\r\n            }\r\n            if (masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                skipInfo = {\r\n\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        skip: 0,\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            } else {\r\n                skipInfo = {\r\n                    ...skipInfo,\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData,\r\n                    loading: false,\r\n                    showFilter: false,\r\n                    activeTestKey: inputData.activeTestKey,\r\n                    screenName: inputData.screenName,\r\n                    ...skipInfo\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function getRERegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRERegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getRegistrationsubType\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultRegistrationType: inputData.defaultRegistrationType\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREApprovalConfigVersion(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getApprovalConfigVersion\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultRegistrationSubType: inputData.defaultRegistrationSubType,\r\n                            // fromDate: inputData.fromdate,\r\n                            //  toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getFilterStatus\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultjobstatus: inputData.defaultjobstatus,\r\n                            // fromDate: inputData.fromdate,\r\n                            // toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getREJobStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getJobStatus\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultApprovalConfigVersion: inputData.defaultApprovalConfigVersion,\r\n                            // fromDate: inputData.fromdate,\r\n                            // toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getResultEntryDetails(inputParamData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData.inputData, nneedsubsample: inputParamData.masterData.nneedsubsample })\r\n            .then(response => {\r\n                let masterData = { ...inputParamData.masterData }\r\n                if (inputParamData.refs.searchSampleRef !== undefined && inputParamData.refs.searchSampleRef.current !== null) {\r\n                    inputParamData.refs.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParamData.refs.searchSubSampleRef !== undefined && inputParamData.refs.searchSubSampleRef.current !== null) {\r\n                    inputParamData.refs.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParamData.refs.searchTestRef !== undefined && inputParamData.refs.searchTestRef.current !== null) {\r\n                    inputParamData.refs.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTests'] = undefined\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            realFromDate: response.data[\"fromDate\"],\r\n                            realToDate: response.data[\"toDate\"]\r\n                        },\r\n                        loading: false,\r\n                        showTest: inputParamData.inputData.showTest,\r\n                        showSample: inputParamData.inputData.showSample,\r\n                        activeTestKey: inputParamData.inputData.activeTestKey,\r\n                        skip: 0,\r\n                        take: inputParamData.inputData.take,\r\n                        testskip: 0,\r\n                        testtake: inputParamData.inputData.testtake,\r\n                        resultDataState: { ...inputParamData.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParamData.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParamData.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParamData.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParamData.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParamData.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParamData.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParamData.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParamData.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParamData.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function resultGetModule(inputData, userInfo, ncontrolcode, testskip, testtake) {\r\n    return function (dispatch) {\r\n        let TestList = [...inputData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, inputData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            if (Object.values(inputData).length > 0 && inputData.RESelectedTest.length > 0) {\r\n                let inputParamData = {\r\n                    ntransactiontestcode: acceptTestList ? acceptTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                    userinfo: userInfo\r\n                }\r\n                dispatch(initRequest(true));\r\n                rsapi.post(\"resultentrybysample/getResultEntryResults\", inputParamData)\r\n                    .then(response => {\r\n                        let selectedResultGrade = [];\r\n                        let paremterResultcode = [];\r\n                        const parameterResults = response.data.ResultParameter\r\n                        parameterResults.map((param, index) => {\r\n                            selectedResultGrade[index] = { ngradecode: param.ngradecode };\r\n                            paremterResultcode[index] = param.ntransactionresultcode;\r\n\r\n                            (response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]) &&\r\n                                response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\r\n                                    if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\r\n                                        response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\r\n                                            constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                                                undefined, undefined).get(\"OptionList\");\r\n                                        if (response.data.ResultParameter[index].sresult === null) {\r\n                                            response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\r\n                                            response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedname;\r\n                                            response.data.ResultParameter[index].editable = true;\r\n                                            response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                });\r\n                            return null;\r\n                        });\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                masterData: {\r\n                                    ...inputData,\r\n                                    ...response.data,\r\n                                    paremterResultcode//,\r\n                                    //selectedResultGrade ,\r\n\r\n                                },\r\n                                selectedRecord: {\r\n                                    selectedResultGrade: selectedResultGrade,\r\n                                    ResultParameter: response.data.ResultParameter\r\n                                },\r\n                                loading: false,\r\n                                screenName: \"IDS_RESULTENTRY\",\r\n                                openModal: true,\r\n                                operation: \"update\",\r\n                                activeTestKey: \"IDS_RESULTS\",\r\n                                ncontrolcode: ncontrolcode\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n                //}\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SELECTTESTTOENTERRESULT\"\r\n                }));\r\n            }\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    loading: false\r\n                }\r\n            })\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTTESTTOENTERRESULT\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function completeTest(inputParam, acceptList, userInfo, completeResultId) {\r\n    if (acceptList !== undefined && acceptList.length > 0) {\r\n        return function (dispatch) {\r\n            let inputData = inputParam.testChildGetREParam\r\n            let inputParamData = {\r\n                ntype: 3,\r\n                nflag: 3,\r\n                nsampletypecode: inputData.nsampletypecode,\r\n                nregtypecode: inputData.nregtypecode,\r\n                nregsubtypecode: inputData.nregsubtypecode,\r\n                npreregno: inputData.npreregno,\r\n                ntranscode: String(inputData.ntransactionstatus),\r\n                napprovalversioncode: inputData.napprovalversioncode,\r\n                napprovalconfigcode: inputData.napprovalconfigcode,\r\n                ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n                userinfo: userInfo,\r\n                fromdate: inputData.fromdate,\r\n                todate: inputData.todate,\r\n                ntestcode: inputData.ntestcode,\r\n                transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntransactiontestcode: 0,\r\n                activeTestKey: inputData.activeTestKey,\r\n                ncontrolcode: inputParam.inputData.ncontrolcode,\r\n                nneedsubsample: inputData.masterData.nneedsubsample,\r\n                ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode\r\n            }\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n            //     documentDataState, testCommentDataState } = inputData\r\n            // let url = \"resultentrybysample/getTestbasedParameter\"\r\n            switch (inputData.activeTestKey) {\r\n                case \"IDS_RESULTS\":\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"materialDataState\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"documentDataState\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    activeName = \"ResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                default:\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/completeTest\", inputParamData)\r\n                .then(response => {\r\n                    let RE_SAMPLE = [];\r\n                    let RE_SUBSAMPLE = [];\r\n                    let RE_TEST = [];\r\n                    let responseData = response.data\r\n                    if (responseData[\"RE_TEST\"].length > 0) {\r\n                        if(inputData.masterData.nneedsubsample)\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\");\r\n                        else\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\r\n                    } else {\r\n                        RE_TEST = inputData.masterData[\"RE_TEST\"];\r\n                    }\r\n\r\n                    RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    if (RE_SUBSAMPLE.length > 0) {\r\n                        RE_SAMPLE = inputData.masterData[\"RE_SAMPLE\"];\r\n                    } else {\r\n                        RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\r\n                    }\r\n                    const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\r\n                    const RESelectedSubSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\r\n                    let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest)\r\n\r\n                    let searchedSample = undefined;\r\n                    if (inputData.masterData[\"searchedSample\"]) {\r\n                        searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\r\n                    }\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        RE_SAMPLE,\r\n                        RE_SUBSAMPLE,\r\n                        RESelectedSubSample,\r\n                        searchedSample,\r\n                        RESelectedSample,\r\n                        RESelectedTest: RESelectedTest2,\r\n                        RE_TEST: responseData[\"RE_TEST\"]\r\n                    }\r\n                    let skipInfo = {};\r\n                    if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            skip: 0,\r\n                            take: inputParam.take\r\n                        }\r\n                    }\r\n                    if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            testskip: 0,\r\n                            testtake: inputParam.testtake\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    let respObject = {\r\n                        ...inputParamData.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        selectedRecord: undefined,\r\n                        loading: false,\r\n                        screenName: inputData.activeTestKey,\r\n                        ...skipInfo\r\n                    }\r\n                    if (searchedSample && RESelectedSample.length === 0 && searchedSample.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [searchedSample[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation : 3 }, respObject));\r\n                    } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [RE_SAMPLE[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation : 3 }, respObject));\r\n                    } else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData\r\n                        };\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ...respObject,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n\r\n//Compare two array and return the first array which is available in second array\r\nexport function compareTwoArray(firstArray, secondArray, PrimaryKey) {\r\n    const filterArray = firstArray.filter(function (x) {\r\n        return secondArray.some(function (y) {\r\n            return x[PrimaryKey] === y[PrimaryKey]\r\n        })\r\n    });\r\n    return filterArray;\r\n}\r\n\r\nfunction fetchSelectedData(inputParam, respObject) {\r\n    return (dispatch) => {\r\n        rsapi.post(inputParam.fetchUrl, {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                const masterData = {\r\n                    ...respObject.masterData,\r\n                    ...response.data,\r\n                    RESelectedSample: response.data.RESelectedSample || respObject.masterData.RESelectedSample || []\r\n                };\r\n                //sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...respObject,\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function testMethodSourceEdit(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n            ntestgrouptestcode: inputData.test.ntestgrouptestcode,\r\n            ntestcode: inputData.test.ntestcode,\r\n            ncontrolcode: inputData.editSourceMethodId,\r\n            userinfo: inputData.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestMethodSource\", inputParamData)\r\n            .then(response => {\r\n\r\n                const TagSource = constructOptionList(response.data.SourceData || [], \"nsourcecode\",\r\n                    \"ssourcename\", undefined, undefined, undefined);\r\n                const TagListSource = TagSource.get(\"OptionList\");\r\n\r\n                const TagMethod = constructOptionList(response.data.MethodData || [], \"nmethodcode\",\r\n                    \"smethodname\", undefined, undefined, undefined);\r\n                const TagListMethod = TagMethod.get(\"OptionList\");\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            SourceData: TagListSource,\r\n                            MethodData: TagListMethod,\r\n                            RESelectedSubSample: inputData.masterData.RESelectedSubSample\r\n                        },\r\n                        selectedRecord: {\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            stestsynonym: inputData.test.jsondata.stestsynonym,\r\n                            nsourcecode: response.data.SourceDataValue,\r\n                            nmethodcode: response.data.MethodDataValue\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_TESTMETHODSOURCE\",\r\n                        openModal: true,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.editSourceMethodId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateParameterComments(inputData, masterData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            ntransactionresultcode: inputData.ntransactionresultcode,\r\n            sresultcomment: inputData.sresultcomment,\r\n            transactiontestcode: inputData.transactiontestcode,\r\n            userinfo: inputData.userinfo,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            ncontrolcode: inputData.ncontrolcode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/updateParameterComments\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        screenName: \"IDS_RESULT\",\r\n                        openModal: false,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.ncontrolcode\r\n                        //ncontrolcode:inputData.editSourceMethodId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function addREInstrument(inputData) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        const resultusedinstrument = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", {\r\n            userinfo: inputData.userInfo\r\n        });\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputData.userInfo });\r\n        urlArray = [resultusedinstrument, timeZoneService, UTCtimeZoneService];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\",\r\n                    \"sinstrumentid\", undefined, undefined, undefined);\r\n                const TagListInstrument = TagInstrument.get(\"OptionList\");\r\n\r\n\r\n                const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, undefined);\r\n                const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\r\n\r\n                const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, undefined);\r\n                const TagListTimeZone = TagTimeZone.get(\"OptionList\")\r\n\r\n                dispatch({\r\n\r\n\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            Instrument: TagListInstrument,\r\n                            InstrumentCategory: TagListInstrumentCategory\r\n\r\n                        },\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            sarno: inputData.test.sarno,\r\n                            ssamplearno: inputData.test.ssamplearno,\r\n                            stestsynonym: inputData.test.jsondata.stestsynonym,\r\n                            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            ninstrumentcatcode: TagInsturmentcategory.get(\"DefaultValue\") ? TagInsturmentcategory.get(\"DefaultValue\") : [],\r\n                            ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\r\n                            npreregno: inputData.test.npreregno,\r\n                            //dtodate: new Date(response[2].data),//new Date(),\r\n                            dtodate: rearrangeDateFormat(inputData.userInfo, response[2].data),//new Date(),\r\n                            //dfromdate: new Date(response[2].data),//new Date(),\r\n                            dfromdate: rearrangeDateFormat(inputData.userInfo, response[2].data),//new Date(),\r\n                            ntzfromdate: {\r\n                                \"value\": inputData.userInfo.ntimezonecode,\r\n                                \"label\": inputData.userInfo.stimezoneid\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": inputData.userInfo.ntimezonecode,\r\n                                \"label\": inputData.userInfo.stimezoneid\r\n                            }\r\n                        },\r\n                        timeZoneList: TagListTimeZone || [],\r\n                        loading: false,\r\n                        screenName: \"IDS_INSTRUMENT\",\r\n                        openModal: true,\r\n                        operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedInstrumentId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteInstrumentRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function fetchInstrumentRecord(inputData) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        //const resultUsedInstrumentCombo = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", { userinfo: inputData.userInfo });\r\n        const timeZoneService = rsapi.post(\"resultentrybysample/getResultUsedInstrument\", {\r\n            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo\r\n        });\r\n        const getResultUsedInstrument = rsapi.post(\"timezone/getTimeZone\");\r\n        urlArray = [timeZoneService, getResultUsedInstrument];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\",\r\n                    \"sinstrumentid\", undefined, undefined, undefined);\r\n                const TagListInstrument = TagInstrument.get(\"OptionList\");\r\n\r\n\r\n                const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, undefined);\r\n                const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\r\n\r\n                const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, undefined);\r\n                const TagListTimeZone = TagTimeZone.get(\"OptionList\")\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            Instrument: TagListInstrument,\r\n                            InstrumentCategory: TagListInstrumentCategory,\r\n                            // ...response[0].data,\r\n                            ...response[1].data,\r\n                            //...response[2].data\r\n                        },\r\n                        selectedId: inputData.editRow.nresultusedinstrumentcode,\r\n                        selectedRecord: {\r\n                            stestsynonym: inputData.editRow.stestsynonym,\r\n                            npreregno: response[0].data.EditResultUsedInstrument[0].npreregno,\r\n                            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\r\n                            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n                            ninstrumentcatcode: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcatcode,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentcatname\r\n                            },\r\n                            ninstrumentcode: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcode,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentid\r\n                            },\r\n                            ntzfromdate: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ntzfromdate,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].stzfromdate\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ntztodate,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].stztodate\r\n                            },\r\n                            //dfromdate: new Date(response[0].data.EditResultUsedInstrument[0].sfromdate),\r\n                            //dtodate: new Date(response[0].data.EditResultUsedInstrument[0].stodate)\r\n                            dfromdate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].sfromdate),\r\n                            dtodate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].stodate)\r\n                        },\r\n                        timeZoneList: TagListTimeZone || [],\r\n                        ncontrolcode: inputData.ncontrolCode,\r\n                        loading: false,\r\n                        screenName: \"IDS_INSTRUMENT\",\r\n                        openModal: true,\r\n                        operation: \"update\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteTaskRecord(inputData, userInfo) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedtaskcode: inputData.selectedRecord.nresultusedtaskcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedTasks\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function fetchTaskRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedtaskcode: inputData.editRow.nresultusedtaskcode,\r\n            userinfo: inputData.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedTask\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        selectedId: response.data.EditResultUsedTasks[0].nresultusedtaskcode,\r\n                        selectedRecord: {\r\n                            npreregno: response.data.EditResultUsedTasks[0].npreregno,\r\n                            stestsynonym: inputData.editRow.stestsynonym,\r\n                            sanalysistime: response.data.EditResultUsedTasks[0].sanalysistime,\r\n                            smisctime: response.data.EditResultUsedTasks[0].smisctime,\r\n                            spreanalysistime: response.data.EditResultUsedTasks[0].spreanalysistime,\r\n                            spreparationtime: response.data.EditResultUsedTasks[0].spreparationtime,\r\n                            scomments: response.data.EditResultUsedTasks[0].scomments,\r\n                            nresultusedtaskcode: response.data.EditResultUsedTasks[0].nresultusedtaskcode\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_TASK\",\r\n                        openModal: true,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.ncontrolcode,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function parameterRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n            ncontrolcode: inputData.controlcode,\r\n            userinfo: inputData.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getParameterComments\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                        },\r\n                        selectedId: response.data.ParameterComments.ntransactionresultcode,\r\n                        selectedRecord: {\r\n                            sresultcomment: response.data.ParameterComments.sresultcomment,\r\n                            stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                            sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                            transactiontestcode: response.data.ParameterComments.ntransactiontestcode,\r\n                            ntransactionresultcode: response.data.ParameterComments.ntransactionresultcode,\r\n                            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                            ncontrolcode: inputData.controlcode\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_PARAMETERCOMMENTS\",\r\n                        openModal: true,\r\n                        operation: \"updateParameterComments\",\r\n                        ncontrolcode: inputData.controlcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function checkListRecord(inputData) {\r\n\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n            napprovalparametercode: inputData.selectedRecord.napprovalparametercode,\r\n            nchecklistversioncode: inputData.selectedRecord.nchecklistversioncode,\r\n            ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode.toString(),\r\n            ncontrolcode: inputData.ncontrolcode,\r\n            userinfo: inputData.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getChecklistdesign\", inputParamData)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                let lsteditedQB = [];\r\n                selectedRecord = {\r\n                    npreregno: inputData.selectedRecord.npreregno,\r\n                    stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                    sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                    ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode,\r\n                    ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n                    transactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\r\n                }\r\n\r\n                response.data.ChecklistData.map(checklist => {\r\n                    selectedRecord[checklist.nchecklistversionqbcode] = {\r\n                        nchecklistqbcode: checklist.nchecklistqbcode,\r\n                        nchecklistversioncode: checklist.nchecklistversioncode,\r\n                        nchecklistversionqbcode: checklist.nchecklistversionqbcode,\r\n                        sdefaultvalue: checklist.sdefaultvalue\r\n                    }\r\n                    lsteditedQB.push(checklist.nchecklistversionqbcode);\r\n                    return null;\r\n                });\r\n                selectedRecord[\"editedQB\"] = lsteditedQB;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        selectedId: response.data.selectedId,\r\n                        selectedRecord: selectedRecord,\r\n                        loading: false,\r\n                        screenName: \"IDS_CHECKLISTRESULT\",\r\n                        openTemplateModal: true,\r\n                        needSaveButton: inputData.needSaveButton,\r\n                        operation: \"create\",\r\n                        ncontrolCode: inputData.ncontrolcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let listResultCheckList = [];\r\n        if (selectedRecord && selectedRecord.editedQB) {\r\n            selectedRecord.editedQB.map(qbcode =>\r\n                listResultCheckList.push(selectedRecord[qbcode]))\r\n\r\n            let inputParamData = {\r\n                ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\r\n                transactiontestcode: selectedRecord.transactiontestcode,\r\n                npreregno: selectedRecord.npreregno,\r\n                ResultCheckList: listResultCheckList,\r\n                userinfo: userInfo,\r\n                nregtypecode: nregtypecode,\r\n                nregsubtypecode: nregsubtypecode,\r\n                ncontrolcode: -1\r\n            }\r\n\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/createResultEntryChecklist\", inputParamData)\r\n\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            selectedRecord: {},\r\n                            templateData: undefined,\r\n                            openTemplateModal: false,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    openTemplateModal: false,\r\n                    selectedRecord: {},\r\n                    loading: false,\r\n                    loadEsign: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function defaultTest(inputData, RESelectedTest, RESelectedSample, nregtypecode, nregsubtypecode) {\r\n    if (RESelectedTest !== undefined && RESelectedTest.length > 0) {\r\n        return function (dispatch) {\r\n            let inputParamData = {\r\n                userinfo: inputData.userinfo,\r\n                ntransactiontestcode: RESelectedTest ? RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntestgrouptestcode: RESelectedTest ? RESelectedTest.map(test => test.ntestgrouptestcode).join(\",\") : \"\",\r\n                npreregno: RESelectedTest ? RESelectedTest.map(preregno => preregno.npreregno).join(\",\") : \"\",\r\n                //RESelectedSample ? RESelectedSample.map(preregno => preregno.npreregno).join(\",\") : \"\",\r\n                nregtypecode: nregtypecode,\r\n                nregsubtypecode: nregsubtypecode,\r\n                ncontrolcode: inputData.ncontrolcode\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/updateDefaultValue\", inputParamData)\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...response.data,\r\n                                TestParameters: replaceUpdatedObject(response.data.TestParameters, inputData.masterData.TestParameters, 'ntransactionresultcode'),\r\n                                RESelectedSubSample: inputData.masterData.RESelectedSubSample\r\n                            },\r\n                            loading: false,\r\n                            activeTestKey: \"IDS_RESULTS\",\r\n                            openModal: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            openModal: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n\r\nexport function getFormula(parameterData, userInfo, masterData, index, selectedRecord) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: parameterData.ntransactiontestcode,\r\n            nformulacode: parameterData.ntestgrouptestformulacode,\r\n            userinfo: userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getFormulaInputs\", inputParamData)\r\n            .then(response => {\r\n\r\n                const validateFormulaMandyFields = response.data.DynamicFormulaFields.map((item, index) => {\r\n                    return {\r\n                        \"idsName\": \"IDS_FILLALLFIELDS\",\r\n                        \"dataField\": index,\r\n                        \"mandatory\": true\r\n                    }\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                        },\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            parameterData: parameterData,\r\n                            sformulacalculationdetail: response.data.query,\r\n                            formulainput: response.data.Formula,\r\n                            resultindex: index,\r\n                            selectedForumulaInput: []\r\n                        },\r\n                        validateFormulaMandyFields,\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTFORMULA\",\r\n                        showFormula: true,\r\n                        operation: \"validate\",\r\n                        showValidate: true\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function calculateFormula(inputDataValue) {\r\n    return function (dispatch) {\r\n        const inputData = {\r\n            ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\r\n            ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\r\n            npreregno: inputDataValue.selectedRecord.parameterData.npreregno,\r\n            sformulacalculationcode: inputDataValue.selectedRecord.sformulacalculationdetail,\r\n            nformulacode: inputDataValue.selectedRecord.parameterData.ntestgrouptestformulacode,\r\n            userinfo: inputDataValue.userInfo,\r\n            dynamicformulafields: inputDataValue.lstDynamicFields,\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testmaster/calculateFormula\", inputData)\r\n            .then(response => {\r\n\r\n                // inputDataValue.selectedResultData[inputDataValue.selectedRecord.resultindex] =\r\n                // {\r\n                //     ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\r\n                //     ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\r\n                //     nparametertypecode: inputDataValue.selectedRecord.parameterData.nparametertypecode,\r\n                //     sresult: response.data.Result,\r\n                //     nroundingdigit: inputDataValue.selectedRecord.parameterData.nroundingdigits,\r\n                //     value: inputDataValue.selectedRecord.parameterData.ngradecode,\r\n                //     parameter: inputDataValue.selectedRecord.parameterData\r\n                // }\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sfinal\"] = response.data.Result;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sresult\"] = response.data.Result;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex]['editable'] = true;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"ncalculatedresult\"] = 3;\r\n                inputDataValue.selectedResultGrade[inputDataValue.selectedRecord.resultindex] = {\r\n                    ngradecode: numericGrade(inputDataValue.selectedRecord.parameterData, parseInt(response.data.Result))\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputDataValue.masterData,\r\n                            //selectedResultData: inputDataValue.selectedResultData,\r\n                            //selectedResultGrade: inputDataValue.selectedResultGrade,\r\n                            //ResultParameter: inputDataValue.ResultParameter\r\n                        },\r\n                        selectedRecord: {\r\n                            selectedResultGrade: inputDataValue.selectedResultGrade,\r\n                            ResultParameter: inputDataValue.ResultParameter\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTENTRY\",\r\n                        showFormula: false,\r\n                        operation: \"update\",\r\n                        showValidate: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    //toast.warn(error.response.data);\r\n                    toast.warn(error.response.data[\"Result\"]);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREFilterTestData(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultFilterStatus: inputData.defaultFilterStatus,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateTestMethodSource(inputData, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/updateTestMethodSource\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RE_TEST: replaceUpdatedObject(response.data.RE_TEST, masterData.RE_TEST, 'ntransactiontestcode')\r\n                        },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        loadEsign: false\r\n\r\n                        // activeTestKey: \"IDS_RESULTS\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function resultImportFile(inputData, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getImportResultEntry\", inputData)\r\n            .then(response => {\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData\r\n                        },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        // activeTestKey: \"IDS_RESULTS\"\r\n                    }\r\n                })\r\n\r\n                if (response.data.returnStatus && response.data.returnStatus !== \"\") {\r\n                    toast.info(response.data.returnStatus);\r\n                }\r\n                else {\r\n                    toast.warn(response.data.returnStatus);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function validateEsignCredentialComplete(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n\r\n\r\n                    const methodUrl = \"performaction\"\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"complete\") {\r\n                        dispatch(completeTest(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam.inputData.userinfo))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"default\") {\r\n                        dispatch(defaultTest(inputParam[\"screenData\"][\"inputParam\"][\"testChildGetREParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedSample\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregtypecode\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregsubtypecode\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteInstrument\") {\r\n                        dispatch(deleteInstrumentRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"createMethod\") {\r\n                        dispatch(updateTestMethodSource(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteTask\") {\r\n                        dispatch(deleteTaskRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"updateParameterComments\") {\r\n                        dispatch(updateParameterComments(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"operation\"] === \"updatechecklist\") {\r\n                        let { selectedRecord, userInfo, nregtypecode, nregsubtypecode } = inputParam[\"screenData\"];\r\n                        delete selectedRecord.esignpassword;\r\n                        delete selectedRecord.esigncomments;\r\n                        delete selectedRecord.agree;\r\n                        delete inputParam.inputData.password;\r\n                        userInfo = inputParam.inputData.userinfo;\r\n                        dispatch(onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode))\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport function getMeanCalculationTestParameter(meanParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: meanParam.selectedRecord.npreregno,\r\n            ntransactionresultcode: meanParam.selectedRecord.ntransactionresultcode,\r\n            userinfo: meanParam.userInfo\r\n        }\r\n        return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\r\n            .then(response => {\r\n\r\n                const list = response.data || [];\r\n                // const optionList = [];\r\n                // list.map(item=>{\r\n                //     console.log(\"item:\", item);\r\n                //         optionList.push({item:item, \r\n                //                         label:\"[\"+item.stestsynonym+\"]-[\"+item.sparametersynonym+\"]-[\"+item.sresult+\"]\", \r\n                //                         value:item.ntransactionresultcode})\r\n                //     })\r\n                // const masterData = {...masterData, ResultParameter:meanParam.selectedRecord}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal: true,\r\n                        meanTestParameterList: list,\r\n                        screenName: \"IDS_MEANPARAMETER\",\r\n                        ncontrolcode: meanParam.ncontrolCode,\r\n                        selectedTestParameterMean: meanParam.selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}