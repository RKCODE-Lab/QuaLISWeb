{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, constructOptionList, rearrangeDateFormat, getComboLabelValue } from '../components/CommonScript';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { toast } from 'react-toastify';\nimport { transactionStatus, attachmentType } from \"../components/Enumeration\";\nexport function getInstrumentCombo(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    if (masterData.SelectedInsCat !== undefined) {\n      let check = true;\n\n      if (operation === \"update\") {\n        if (masterData.selectedInstrument.ninstrumentstatus === transactionStatus.Disposed) {\n          check = false;\n        }\n      }\n\n      if (check) {\n        let urlArray = [];\n        const InstrumentCategory = rsapi.post(\"/instrumentcategory/fetchinstrumentcategory\", {\n          \"userinfo\": userInfo\n        });\n        const Supplier = rsapi.post(\"/instrument/getSupplier\", {\n          \"userinfo\": userInfo\n        });\n        const Manufacturer = rsapi.post(\"/instrument/getManufacturer\", {\n          \"userinfo\": userInfo\n        });\n        const InstrumentStatus = rsapi.post(\"/instrument/getInstrumentStatus\", {\n          \"userinfo\": userInfo\n        }); // ALPD-5330 - Gowtham R - Section not loaded initially\n\n        const Lab = rsapi.post(\"/instrument/getSection\", {\n          \"userinfo\": userInfo\n        });\n        const Period = rsapi.post(\"/period/getPeriodByControl\", {\n          \"ncontrolcode\": ncontrolCode,\n          \"userinfo\": userInfo\n        });\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n        const Instrumentdate = rsapi.post(\"/instrument/addInstrumentDate\", {\n          \"ncontrolcode\": ncontrolCode,\n          \"userinfo\": userInfo\n        });\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n          userinfo: userInfo\n        });\n        const validationStatus = rsapi.post(\"instrument/getInstrumentValidationStatus\", {\n          \"userinfo\": userInfo\n        });\n        const calibrationStatus = rsapi.post(\"instrument/getInstrumentCalibrationStatus\", {\n          \"userinfo\": userInfo\n        });\n        const maintenanceStatus = rsapi.post(\"instrument/getInstrumentMaintenanceStatus\", {\n          \"userinfo\": userInfo\n        });\n        const calibrationRequired = rsapi.post(\"instrument/getCalibrationRequired\", {\n          \"ninstrumentcatcode\": masterData.SelectedInsCat.ninstrumentcatcode,\n          userinfo: userInfo\n        });\n        const siteService = rsapi.post(\"site/getSite\", {\n          userinfo: userInfo\n        });\n        const InstrumentName = rsapi.post(\"/instrument/getInstrumentName\", {\n          \"userinfo\": userInfo\n        });\n        const InstrumentLocation = rsapi.post(\"/instrument/getInstrumentLocation\", {\n          \"userinfo\": userInfo\n        });\n\n        if (operation === \"create\") {\n          urlArray = [InstrumentCategory, Supplier, Manufacturer, InstrumentStatus, Lab, Period, timeZoneService, Instrumentdate, UTCtimeZoneService, validationStatus, calibrationStatus, maintenanceStatus, calibrationRequired, siteService, InstrumentName, InstrumentLocation];\n        } else {\n          const InstrumentId = rsapi.post(\"/instrument/getActiveInstrumentById\", {\n            [primaryKeyName]: masterData.selectedInstrument[primaryKeyName],\n            \"userinfo\": userInfo\n          });\n          const ValidateInst = rsapi.post(\"/instrument/validateOpenDate\", {\n            [primaryKeyName]: masterData.selectedInstrument[primaryKeyName],\n            \"userinfo\": userInfo\n          }); //const ManufacturerByID = rsapi.post(\"/manufacturer/getManufacturerById\", { [primaryKeyName] :masterData.selectedManufacturer[primaryKeyName], \"userinfo\": userInfo });\n\n          urlArray = [InstrumentCategory, Supplier, Manufacturer, InstrumentStatus, Lab, Period, timeZoneService, InstrumentId, Instrumentdate, UTCtimeZoneService, siteService, ValidateInst, InstrumentName, InstrumentLocation];\n        }\n\n        dispatch(initRequest(true));\n        Axios.all(urlArray).then(response => {\n          let expiryDate = undefined;\n          let currentTime = undefined;\n          let validateOpenDate = false;\n          let insLocationMap = [];\n          const instcatMap = constructOptionList(response[0].data || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, false);\n          const supplierMap = constructOptionList(response[1].data.Supplier || [], \"nsuppliercode\", \"ssuppliername\", undefined, undefined, false);\n          const manufMap = constructOptionList(response[2].data.Manufacturer || [], \"nmanufcode\", \"smanufname\", undefined, undefined, false);\n          const inststatusMap = constructOptionList(response[3].data || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false); // ALPD-5330 - Gowtham R - Section not loaded initially\n\n          const sectionMap = constructOptionList(response[4].data || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n          const periodMap = constructOptionList(response[5].data || [], \"nperiodcode\", \"speriodname\", undefined, undefined, false);\n          const timezoneMap = constructOptionList(response[6].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n\n          if (operation === \"update\") {\n            insLocationMap = constructOptionList(response[13].data.InstrumentLocation || [], \"ninstrumentlocationcode\", \"sinstrumentlocationname\", undefined, undefined, false);\n          } else {\n            insLocationMap = constructOptionList(response[15].data.InstrumentLocation || [], \"ninstrumentlocationcode\", \"sinstrumentlocationname\", undefined, undefined, false);\n          }\n\n          const instrumentNamemap = constructOptionList(operation === \"update\" ? response[12].data.InstrumentName.filter(x => x.ninstrumentnamecode !== -1) || [] : response[14].data.InstrumentName.filter(x => x.ninstrumentnamecode !== -1) || [], \"ninstrumentnamecode\", \"sinstrumentname\", undefined, undefined, false); // const validationMap={};\n          // const calibrationMap ={};\n          // const maintenanceMap ={};\n\n          let ValidationStatus = [];\n          let CalibrationStatus = [];\n          let MaintenanceStatus = [];\n          let CalibrationRequired = \"\";\n          let siteList = [];\n          const InstrumentCategory = instcatMap.get(\"OptionList\");\n          const Supplier = supplierMap.get(\"OptionList\");\n          const Manufacturer = manufMap.get(\"OptionList\");\n          const InstrumentStatus = inststatusMap.get(\"OptionList\"); // ALPD-5330 - Gowtham R - Section not loaded initially\n\n          const Lab = sectionMap.get(\"OptionList\");\n          const Period = periodMap.get(\"OptionList\");\n          const TimeZoneList = timezoneMap.get(\"OptionList\");\n          const instName = instrumentNamemap.get(\"OptionList\");\n          const InstrumentLocation = insLocationMap.get(\"OptionList\");\n          let selectedRecord = {\n            \"ninstrumentcatcode\": {\n              \"value\": masterData.SelectedInsCat.ninstrumentcatcode,\n              \"label\": masterData.SelectedInsCat.sinstrumentcatname\n            }\n          }; // let selectedRecord = {\n          //     \"ninstrumentcatcode\": {\n          //         \"value\": masterData.SelectedInsCat.ninstrumentcatcode,\n          //         \"label\": masterData.SelectedInsCat.sinstrumentcatname\n          //     },\n          //     \"ntzmanufdate\": {\n          //         \"value\": userInfo.ntimezonecode,\n          //         \"label\": userInfo.stimezoneid\n          //     },\n          //     //\"stzmanufdate\":userInfo.stimezoneid\n          //     \"ntzpodate\": {\n          //         \"value\": userInfo.ntimezonecode,\n          //         \"label\": userInfo.stimezoneid\n          //     },\n          //     \"stzpodate\": userInfo.stimezoneid,\n          //     \"ntzreceivedate\": {\n          //         \"value\": userInfo.ntimezonecode,\n          //         \"label\": userInfo.stimezoneid\n          //     },\n          //     \"stzreceivedate\": userInfo.stimezoneid,\n          //     \"ntzinstallationdate\": {\n          //         \"value\": userInfo.ntimezonecode,\n          //         \"label\": userInfo.stimezoneid\n          //     },\n          //     \"stzinstallationdate\": userInfo.stimezoneid,\n          //     \"ntzexpirydate\": {\n          //         \"value\": userInfo.ntimezonecode,\n          //         \"label\": userInfo.stimezoneid\n          //     },\n          //     \"stzexpirydate\": userInfo.stimezoneid\n          // };\n\n          let instrumentCategory = [];\n          let supplier = [];\n          let regionalSite = [];\n          let manufacturer = [];\n          let instrumentstatus = [];\n          let nwindowsperiodminusunit = [];\n          let nwindowsperiodplusunit = [];\n          ;\n          let nnextcalibrationperiod = [];\n          let lab = [];\n          let ntzmanufdate = [];\n          let ntzpodate = [];\n          let ntzreceivedate = [];\n          let ntzinstallationdate = [];\n          let ntzexpirydate = [];\n          let susername = [];\n          let service = [];\n          let instname = [];\n          let ntzservicedate = [];\n          let inslocation = []; // let validation = [];\n          // let calibration = [];\n          // let maintenance = [];\n          //if (operation === \"create\") {\n          // let date = rearrangeDateFormat(userInfo, response[8].data);\n          // selectedRecord[\"dmanufacdate\"] = date; //new Date(response[8].data);\n          // selectedRecord[\"dpodate\"] = date;\n          // selectedRecord[\"dreceiveddate\"] = date;\n          // selectedRecord[\"dinstallationdate\"] = date;\n          // currentTime = date;\n          // if (response[7].data[\"ExpiryDate\"] !== \"\") {\n          //     expiryDate = rearrangeDateFormat(userInfo, response[7].data[\"ExpiryDate\"]); //new Date(response[7].data[\"ExpiryDate\"]);\n          //     selectedRecord[\"dexpirydate\"] = expiryDate;\n          // }\n          //   }\n\n          if (operation === \"update\") {\n            selectedRecord = response[7].data;\n            instrumentCategory.push({\n              \"value\": response[7].data[\"ninstrumentcatcode\"],\n              \"label\": response[7].data[\"sinstrumentcatname\"]\n            });\n            supplier.push({\n              \"value\": response[7].data[\"nsuppliercode\"],\n              \"label\": response[7].data[\"ssuppliername\"]\n            });\n            regionalSite.push({\n              \"value\": response[7].data[\"nregionalsitecode\"],\n              \"label\": response[7].data[\"sregionalsitename\"]\n            });\n            service.push({\n              \"value\": response[7].data[\"nservicecode\"],\n              \"label\": response[7].data[\"sserviceby\"]\n            });\n            manufacturer.push({\n              \"value\": response[7].data[\"nmanufcode\"],\n              \"label\": response[7].data[\"smanufname\"]\n            });\n            instrumentstatus.push({\n              \"value\": response[7].data[\"ntranscode\"],\n              \"label\": response[7].data[\"sactivestatus\"]\n            });\n            nwindowsperiodminusunit.push({\n              \"value\": response[7].data[\"nwindowsperiodminusunit\"],\n              \"label\": response[7].data[\"swindowsperiodminusunit\"]\n            });\n            nwindowsperiodplusunit.push({\n              \"value\": response[7].data[\"nwindowsperiodplusunit\"],\n              \"label\": response[7].data[\"swindowsperiodplusunit\"]\n            });\n            nnextcalibrationperiod.push({\n              \"value\": response[7].data[\"nnextcalibrationperiod\"],\n              \"label\": response[7].data[\"snextcalibrationperiod\"]\n            });\n            lab.push({\n              \"value\": response[7].data[\"nsectioncode\"],\n              \"label\": response[7].data[\"ssectionname\"]\n            });\n            ntzmanufdate.push({\n              \"value\": response[7].data[\"ntzmanufdate\"],\n              \"label\": response[7].data[\"stzmanufdate\"]\n            });\n            ntzpodate.push({\n              \"value\": response[7].data[\"ntzpodate\"],\n              \"label\": response[7].data[\"stzpodate\"]\n            });\n            ntzreceivedate.push({\n              \"value\": response[7].data[\"ntzreceivedate\"],\n              \"label\": response[7].data[\"stzreceivedate\"]\n            });\n            ntzinstallationdate.push({\n              \"value\": response[7].data[\"ntzinstallationdate\"],\n              \"label\": response[7].data[\"stzinstallationdate\"]\n            });\n            ntzexpirydate.push({\n              \"value\": response[7].data[\"ntzexpirydate\"],\n              \"label\": response[7].data[\"stzexpirydate\"]\n            });\n            ntzservicedate.push({\n              \"value\": response[7].data[\"ntzservicedate\"],\n              \"label\": response[7].data[\"sservicedate\"]\n            });\n            susername.push({\n              \"value\": response[7].data[\"nusercode1\"],\n              \"label\": response[7].data[\"susername\"]\n            });\n            instname.push({\n              \"value\": response[7].data[\"ninstrumentnamecode\"],\n              \"label\": response[7].data[\"sinstrumentname\"]\n            });\n            inslocation.push({\n              \"value\": response[7].data[\"ninstrumentlocationcode\"],\n              \"label\": response[7].data[\"sinstrumentlocationname\"]\n            }); // validation.push({\n            //     \"value\": response[8].data[\"ntranscode\"],\n            //     \"label\": response[8].data[\"stransdisplaystatus\"]\n            // })\n            // calibration.push({\n            //     \"value\": response[9].data[\"ntranscode\"],\n            //     \"label\": response[9].data[\"stransdisplaystatus\"]\n            // })\n            // maintenance.push({\n            //     \"value\": response[10].data[\"ntranscode\"],\n            //     \"label\": response[10].data[\"stransdisplaystatus\"]\n            // })\n\n            if (response[7].data[\"smanufacdate\"] !== \"\") {\n              selectedRecord[\"dmanufacdate\"] = rearrangeDateFormat(userInfo, response[7].data[\"smanufacdate\"]); //new Date(response[7].data[\"smanufacdate\"]);\n            }\n\n            if (response[7].data[\"spodate\"] !== \"\") {\n              selectedRecord[\"dpodate\"] = rearrangeDateFormat(userInfo, response[7].data[\"spodate\"]); //new Date(response[7].data[\"spodate\"]);\n            } // else{\n            //     selectedRecord[\"dpodate\"] = \" \";\n            // }\n\n\n            if (response[7].data[\"sreceiveddate\"] !== \"\") {\n              selectedRecord[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sreceiveddate\"]); //new Date(response[7].data[\"sreceiveddate\"]);\n            }\n\n            if (response[7].data[\"sinstallationdate\"] !== \"\") {\n              selectedRecord[\"dinstallationdate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sinstallationdate\"]); //new Date(response[7].data[\"sinstallationdate\"]);\n            }\n\n            if (response[7].data[\"sexpirydate\"] !== \"\") {\n              selectedRecord[\"dexpirydate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sexpirydate\"]); //new Date(response[7].data[\"sexpirydate\"]);\n            }\n\n            if (response[7].data[\"sservicedate\"] !== \"\") {\n              selectedRecord[\"dservicedate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sservicedate\"]); //new Date(response[7].data[\"sexpirydate\"]);\n            }\n\n            selectedRecord[\"ninstrumentcatcode\"] = instrumentCategory[0];\n            if (supplier[0].value !== -1) selectedRecord[\"nsuppliercode\"] = supplier[0];\n            selectedRecord[\"nservicecode\"] = service[0];\n            selectedRecord[\"nregionalsitecode\"] = regionalSite[0];\n            selectedRecord[\"ninstrumentnamecode\"] = instname[0];\n            if (inslocation[0].value !== -1) selectedRecord[\"ninstrumentlocationcode\"] = inslocation[0];\n            if (manufacturer[0].value !== -1) selectedRecord[\"nmanufcode\"] = manufacturer[0];\n            if (instrumentstatus[0].value !== -1) selectedRecord[\"ntranscode\"] = instrumentstatus[0];\n            if (nwindowsperiodminusunit[0].value !== -1) selectedRecord[\"nwindowsperiodminusunit\"] = nwindowsperiodminusunit[0];\n            if (nwindowsperiodplusunit[0].value !== -1) selectedRecord[\"nwindowsperiodplusunit\"] = nwindowsperiodplusunit[0];\n            if (nnextcalibrationperiod[0].value !== -1) selectedRecord[\"nnextcalibrationperiod\"] = nnextcalibrationperiod[0];\n            selectedRecord[\"nsectioncode\"] = lab[0];\n            selectedRecord[\"ntzmanufdate\"] = ntzmanufdate[0];\n            selectedRecord[\"stzmanufdate\"] = ntzmanufdate[0].label;\n            selectedRecord[\"ntzpodate\"] = ntzpodate[0];\n            selectedRecord[\"stzpodate\"] = ntzpodate[0].label;\n            selectedRecord[\"ntzreceivedate\"] = ntzreceivedate[0];\n            selectedRecord[\"stzreceivedate\"] = ntzreceivedate[0].label;\n            selectedRecord[\"ntzinstallationdate\"] = ntzinstallationdate[0];\n            selectedRecord[\"stzinstallationdate\"] = ntzinstallationdate[0].label;\n            selectedRecord[\"ntzexpirydate\"] = ntzexpirydate[0];\n            selectedRecord[\"stzexpirydate\"] = ntzexpirydate[0].label;\n            selectedRecord[\"ntzservicedate\"] = ntzservicedate[0];\n            selectedRecord[\"sservicedate\"] = ntzservicedate[0].label;\n            selectedRecord[\"susername\"] = susername[0]; //  selectedRecord[\"ntranscode\"] = validation[0];\n            //  selectedRecord[\"ntranscode\"] = calibration[0];\n            //     selectedRecord[\"ntranscode\"] = maintenance[0];\n\n            const siteMap = constructOptionList(response[10].data || [], \"nsitecode\", \"ssitename\", undefined, undefined, true);\n            siteList = siteMap.get(\"OptionList\");\n            validateOpenDate = response[11].data.ValidateOpenDate;\n          } else {\n            const validationMap = constructOptionList(response[9].data.ValidationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n            const calibrationMap = constructOptionList(response[10].data.CalibrationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n            const maintenanceMap = constructOptionList(response[11].data.MaintenanceStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n            CalibrationRequired = response[12].data.ncalibrationrequired;\n            const siteMap = constructOptionList(response[13].data || [], \"nsitecode\", \"ssitename\", undefined, undefined, true);\n            siteList = siteMap.get(\"OptionList\");\n            selectedRecord[\"nregionalsitecode\"] = getComboLabelValue({ ...userInfo\n            }, response[13].data || [], \"nsitecode\", \"ssitename\");\n            ValidationStatus = validationMap.get(\"OptionList\");\n            CalibrationStatus = calibrationMap.get(\"OptionList\");\n            MaintenanceStatus = maintenanceMap.get(\"OptionList\");\n            const timezone = TimeZoneList.filter(x => x.value === userInfo.ntimezonecode);\n            selectedRecord[\"ntzmanufdate\"] = timezone[0]; // selectedRecord[\"stzmanufdate\"] = ntzmanufdate[0].label;\n\n            selectedRecord[\"ntzpodate\"] = timezone[0]; // selectedRecord[\"stzpodate\"] = ntzpodate[0].label;\n\n            selectedRecord[\"ntzreceivedate\"] = timezone[0]; // selectedRecord[\"stzreceivedate\"] = ntzreceivedate[0].label;\n\n            selectedRecord[\"ntzinstallationdate\"] = timezone[0]; // selectedRecord[\"stzinstallationdate\"] = ntzinstallationdate[0].label;\n\n            selectedRecord[\"ntzexpirydate\"] = timezone[0];\n            selectedRecord[\"ntzservicedate\"] = timezone[0]; //selectedRecord[\"stzexpirydate\"] = ntzexpirydate[0].label;\n\n            let date = rearrangeDateFormat(userInfo, response[8].data);\n            selectedRecord[\"dclosedate\"] = date;\n            selectedRecord[\"dopendate\"] = date;\n            selectedRecord[\"dlastcalibrationdate\"] = date;\n            selectedRecord[\"dlastmaintenancedate\"] = date;\n            selectedRecord[\"dduedate\"] = date;\n            selectedRecord[\"dvalidationdate\"] = date;\n            selectedRecord[\"ntzclosedate\"] = timezone[0];\n            selectedRecord[\"ntzopendate\"] = timezone[0];\n            selectedRecord[\"ntzlastcalibrationdate\"] = timezone[0];\n            selectedRecord[\"ntzlastmaintenancedate\"] = timezone[0];\n            selectedRecord[\"ntzduedate\"] = timezone[0];\n            selectedRecord[\"ntzvalidationdate\"] = timezone[0];\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              InstrumentCategory,\n              Supplier,\n              Manufacturer,\n              InstrumentStatus,\n              InstrumentLocation,\n              instrumentCategory: instrumentCategory,\n              supplier: supplier,\n              manufacturer: manufacturer,\n              inslocation: inslocation,\n              Lab,\n              Period,\n              TimeZoneList,\n              ValidationStatus,\n              CalibrationStatus,\n              MaintenanceStatus,\n              CalibrationRequired,\n              siteList,\n              validateOpenDate,\n              isOpen: true,\n              selectedRecord: selectedRecord,\n              operation: operation,\n              screenName: screenName,\n              openModal: true,\n              ncontrolCode: ncontrolCode,\n              loading: false,\n              currentTime,\n              expiryDate,\n              instName\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(intl.formatMessage({\n              id: error.message\n            }));\n          } else {\n            toast.warn(intl.formatMessage({\n              id: error.response.data\n            }));\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_DISPOSEDINSTRUMENT\"\n        }));\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_INSTRUMENTCATEGORYNOTAVALIABLE\"\n      }));\n    }\n  };\n}\nexport function getSectionUsers(nsectioncode, userInfo, selectedRecord, masterData, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"instrument/getSectionBasedUser\", {\n      \"nsectioncode\": nsectioncode,\n      // ALPD-3514 taking nregionalsitecode from selectedRecord incase of Adding new instrument and from masterData's selected Instrument incase of adding section user\n      \"nregionalsitecode\": selectedRecord && selectedRecord.nregionalsitecode ? selectedRecord.nregionalsitecode.value : masterData.selectedInstrument.nregionalsitecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      //console.log(\" response:\", response); \n      let Users = [];\n\n      if (screenName === \"IDS_SECTION\") {\n        //let sectionusers=[];\n        const userName = constructOptionList(response.data || [], \"nusercode\", \"susername\", undefined, undefined, false);\n        Users = userName.get(\"OptionList\"); //selectedRecord[\"nusercode\"]=\"\";\n\n        selectedRecord[\"nusercode\"] = undefined; //{label:SectionUsers[0].label,value:SectionUsers[0].value,item:SectionUsers[0]};\n      } else {\n        Users = response.data;\n        selectedRecord[\"nusercode\"] = undefined;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Users,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getCalibrationRequired(ninstrumentcatcode, userInfo, selectedRecord, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"instrument/getCalibrationRequired\", {\n      \"ninstrumentcatcode\": ninstrumentcatcode,\n      userinfo: userInfo\n    }).then(response => {\n      let CalibrationRequired = [];\n      CalibrationRequired = response.data.ncalibrationrequired;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          CalibrationRequired,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getInstrumentDetail(Instrument, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"instrument/getInstrument\", {\n      ninstrumentcode: Instrument.ninstrumentcode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const getAvailableInstData = (instItem, url, key, screenName, userInfo, ncontrolCode, selectedRecord) => {\n  return function (dispatch) {\n    if (instItem.ninstrumentstatus !== transactionStatus.Disposed) {\n      dispatch(initRequest(true));\n      let url = '';\n      url = \"/instrument/getUsers\";\n      return rsapi.post(url, {\n        \"userinfo\": userInfo,\n        \"ninstrumentcode\": instItem.ninstrumentcode,\n        \"nregionalsitecode\": instItem.nregionalsitecode\n      }).then(response => {\n        const secMap = constructOptionList(response.data.Section || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n        const userMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n        const Lab = secMap.get(\"OptionList\");\n        const LabDefault = secMap.get(\"DefaultValue\");\n\n        if (LabDefault !== undefined) {\n          selectedRecord = {\n            \"nsectioncode\": {\n              \"value\": LabDefault.value,\n              \"label\": LabDefault.label\n            }\n          };\n        }\n\n        const Users = userMap.get(\"OptionList\"); // let  openChildModal=true;\n        //     openChildModal=false;\n        //     toast.warn(intl.formatMessage({ id: \"IDS_DISPOSEDINSTRUMENT\"}));\n        // }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            Lab,\n            Users,\n            isOpen: true,\n            selectedRecord,\n            operation: \"create\",\n            screenName: screenName,\n            // openModal: true,\n            openChildModal: true,\n            ncontrolCode: ncontrolCode,\n            instItem: instItem,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 417) {\n          toast.info(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_DISPOSEDINSTRUMENT\"\n      }));\n    }\n  };\n};\nexport const changeInstrumentCategoryFilter = (inputParam, filterInstrumentCategory) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/instrument/get\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      //const masterData = response.data\n      const masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          dataState: undefined,\n          masterData: { ...masterData,\n            filterInstrumentCategory,\n            nfilterInstrumentCategory: inputParam.inputData.nfilterInstrumentCategory\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const addInstrumentFile = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\n      userinfo: inputParam.userInfo\n    })];\n\n    if (inputParam.operation === \"update\") {\n      urlArray.push(rsapi.post(\"/instrument/editInstrumentFile\", {\n        userinfo: inputParam.userInfo,\n        Instrumentfile: inputParam.selectedRecord\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      // let selectedRecord = {};\n      // let editObject = {};\n      // let operation = \"update\";\n      // editObject = response[0].data;\n      const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\n      const linkmaster = linkMap.get(\"OptionList\");\n      let selectedRecord = {};\n      const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\n      let disabled = false;\n      let editObject = {};\n\n      if (inputParam.operation === \"update\") {\n        editObject = response[1].data;\n        let nlinkcode = {};\n        let link = {};\n\n        if (editObject.nattachmenttypecode === attachmentType.LINK) {\n          nlinkcode = {\n            \"label\": editObject.slinkname,\n            \"value\": editObject.nlinkcode\n          };\n          link = {\n            slinkfilename: editObject.sfilename,\n            slinkdescription: editObject.sfiledesc,\n            nlinkdefaultstatus: editObject.ndefaultstatus,\n            sfilesize: '',\n            nfilesize: 0,\n            ndefaultstatus: 4,\n            sfilename: ''\n          };\n        } else {\n          nlinkcode = defaultLink.length > 0 ? defaultLink[0] : \"\"; //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\"\n\n          link = {\n            slinkfilename: '',\n            slinkdescription: '',\n            nlinkdefaultstatus: 4,\n            sfiledesc: editObject.sfiledesc,\n            sfilesize: editObject.sfilesize,\n            nfilesize: editObject.nfilesize,\n            ndefaultstatus: editObject.ndefaultstatus,\n            sfilename: editObject.sfilename,\n            ssystemfilename: editObject.ssystemfilename\n          };\n        }\n\n        selectedRecord = {\n          ninstrumentfilecode: editObject.ninstrumentfilecode,\n          // sfiledesc: editObject.sfiledesc,\n          // sfilename: editObject.sfilename,\n          // sdescription: editObject.sdescription,\n          // ssystemfilename: editObject.ssystemfilename,\n          nattachmenttypecode: editObject.nattachmenttypecode,\n          ...link,\n          //...editObject,\n          nlinkcode\n        };\n      } else {\n        selectedRecord = {\n          nattachmenttypecode: response[0].data.AttachmentType.length > 0 ? response[0].data.AttachmentType[0].nattachmenttypecode : attachmentType.FTP,\n          nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\",\n          //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\n          disabled\n        };\n      } // selectedRecord = {\n      //     ninstrumentfilecode: editObject.ninstrumentfilecode,\n      //     sfiledesc: editObject.sfiledesc,\n      //     sfilename: editObject.sfilename,\n      //     sdescription: editObject.sdescription,\n      //     ssystemfilename: editObject.ssystemfilename\n      // };\n\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // openModal: true,\n          openChildModal: true,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolCode,\n          selectedRecord,\n          loading: false,\n          linkMaster: linkmaster,\n          showSaveContinue: false,\n          editFiles: editObject.nattachmenttypecode === \"1\" ? editObject : {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getDataForAddEditValidation = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\n  return function (dispatch) {\n    if (masterData.selectedInstrument.ninstrumentstatus !== transactionStatus.Disposed) {\n      let urlArray = [];\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo: userInfo\n      });\n      const validationStatusService = rsapi.post(\"instrument/getInstrumentValidationStatus\", {\n        \"userinfo\": userInfo,\n        \"ninstrumentcode\": masterData.selectedInstrument.ninstrumentcode\n      });\n\n      if (operation === \"create\") {\n        urlArray = [validationStatusService, UTCtimeZoneService, timeZoneService];\n      } else {\n        const ValidationById = rsapi.post(\"instrument/getActiveInstrumentValidationById\", {\n          [primaryKeyName]: masterData.selectedInstrumentValidation.ninstrumentvalidationcode,\n          \"userinfo\": userInfo,\n          \"ninstrumentcode\": masterData.selectedInstrument.ninstrumentcode\n        });\n        urlArray = [validationStatusService, UTCtimeZoneService, timeZoneService, ValidationById];\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = {};\n        let ValidationData = [];\n        const validationMap = constructOptionList(response[0].data.ValidationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n        const ValidationStatus = validationMap.get(\"OptionList\");\n        let ntzvalidationdate = [];\n        const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n        const TimeZoneList = timezoneMap.get(\"OptionList\");\n\n        if (operation === \"create\") {\n          selectedRecord = {\n            \"ntzvalidationdate\": {\n              \"value\": userInfo.ntimezonecode,\n              \"label\": userInfo.stimezoneid\n            },\n            \"stzvalidationdate\": userInfo.stimezoneid\n          };\n          let date = rearrangeDateFormat(userInfo, response[1].data);\n          selectedRecord[\"dvalidationdate\"] = date;\n        }\n\n        if (operation === \"update\") {\n          ValidationData.push({\n            \"value\": response[3].data[\"nvalidationstatus\"],\n            \"label\": response[3].data[\"stransdisplaystatus\"]\n          });\n          selectedRecord = response[3].data;\n          selectedRecord[\"ntranscode\"] = ValidationData[0];\n          ntzvalidationdate.push({\n            \"value\": response[3].data[\"ntzvalidationdate\"],\n            \"label\": response[3].data[\"stzvalidationdate\"]\n          });\n          selectedRecord[\"ntzvalidationdate\"] = ntzvalidationdate[0];\n\n          if (response[3].data[\"svalidationdate\"] !== \"\") {\n            selectedRecord[\"dvalidationdate\"] = rearrangeDateFormat(userInfo, response[3].data[\"svalidationdate\"]); //new Date(response[7].data[\"smanufacdate\"]);\n          }\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ValidationStatus,\n            TimeZoneList,\n            selectedRecord: selectedRecord,\n            isOpen: true,\n            operation: operation,\n            screenName: screenName,\n            // openModal: true,\n            openChildModal: true,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_DISPOSEDINSTRUMENT\"\n      }));\n    }\n  };\n};\nexport const getDataForAddEditCalibration = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\n  return function (dispatch) {\n    if (masterData.selectedInstrument.ninstrumentstatus !== transactionStatus.Disposed) {\n      let urlArray = [];\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationStatus\", {\n        \"userinfo\": userInfo\n      });\n      const LastCalibrationDateService = rsapi.post(\"instrument/getInstrumentLastCalibrationDate\", {\n        \"userinfo\": userInfo,\n        ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\n      });\n\n      if (operation === \"create\") {\n        const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\n          \"userinfo\": userInfo,\n          nFlag: 1,\n          ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\n        });\n        urlArray = [calibrationStatusService, LastCalibrationDateService, timeZoneService, calibrationValidationService];\n      } else {\n        const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\n          \"userinfo\": userInfo,\n          nFlag: 2,\n          ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\n          ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\n        });\n        const CalibrationById = rsapi.post(\"instrument/getActiveInstrumentCalibrationById\", {\n          [primaryKeyName]: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\n          \"userinfo\": userInfo\n        });\n        urlArray = [calibrationStatusService, LastCalibrationDateService, timeZoneService, calibrationValidationService, CalibrationById];\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let CalibrationStatus = [];\n        let TimeZoneList = [];\n\n        if (response[3].data.OpenCloseStatus === \"Success\") {\n          let selectedRecord = {};\n          let CalibrationData = [];\n          const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          CalibrationStatus = calibrationMap.get(\"OptionList\");\n          let Action;\n          let ntzlastcalibrationdate = [];\n          let ntzduedate = [];\n          const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n          TimeZoneList = timezoneMap.get(\"OptionList\");\n\n          if (operation === \"create\") {\n            selectedRecord = {\n              \"ntzlastcalibrationdate\": {\n                \"value\": userInfo.ntimezonecode,\n                \"label\": userInfo.stimezoneid\n              },\n              \"stzlastcalibrationdate\": userInfo.stimezoneid,\n              \"ntzduedate\": {\n                \"value\": userInfo.ntimezonecode,\n                \"label\": userInfo.stimezoneid\n              },\n              \"stzduedate\": userInfo.stimezoneid\n            };\n            let date = rearrangeDateFormat(userInfo, response[1].data.date);\n            selectedRecord[\"dlastcalibrationdate\"] = date;\n            selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, new Date());\n            Action = 'Add';\n          }\n\n          if (operation === \"update\") {\n            Action = 'Edit';\n            CalibrationData.push({\n              \"value\": response[4].data[\"ncalibrationstatus\"],\n              \"label\": response[4].data[\"stransdisplaystatus\"]\n            });\n            selectedRecord = response[4].data;\n            selectedRecord[\"ntranscode\"] = CalibrationData[0];\n            ntzlastcalibrationdate.push({\n              \"value\": response[4].data[\"ntzlastcalibrationdate\"],\n              \"label\": response[4].data[\"stzlastcalibrationdate\"]\n            });\n            ntzduedate.push({\n              \"value\": response[4].data[\"ntzduedate\"],\n              \"label\": response[4].data[\"stzduedate\"]\n            });\n            selectedRecord[\"ntzlastcalibrationdate\"] = ntzlastcalibrationdate[0];\n            selectedRecord[\"ntzduedate\"] = ntzduedate[0];\n\n            if (response[4].data[\"slastcalibrationdate\"] !== \"\") {\n              selectedRecord[\"dlastcalibrationdate\"] = rearrangeDateFormat(userInfo, response[4].data[\"slastcalibrationdate\"]);\n            }\n\n            if (response[4].data[\"sduedate\"] !== \"\") {\n              selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"sduedate\"]);\n            }\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              CalibrationStatus,\n              Action: Action,\n              TimeZoneList,\n              selectedRecord: selectedRecord,\n              isOpen: true,\n              operation: operation,\n              screenName: screenName,\n              // openModal: true,\n              openChildModal: true,\n              ncontrolCode: ncontrolCode,\n              loading: false,\n              popUp: \"\"\n            }\n          });\n        } else {\n          toast.warn(intl.formatMessage({\n            id: response[3].data.Status\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              operation: operation,\n              screenName: screenName,\n              ncontrolCode: ncontrolCode,\n              loading: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_DISPOSEDINSTRUMENT\"\n      }));\n    }\n  };\n};\nexport const getTabDetails = inputParam => {\n  return function (dispatch) {\n    const instrumentValidation = inputParam.instrumentValidation;\n    const instrumentCalibration = inputParam.instrumentCalibration;\n    const instrumentMaintenance = inputParam.instrumentMaintenance;\n    let urlArray = [];\n    dispatch(initRequest(true));\n\n    if (inputParam.screenName === \"IDS_INSTRUMENTVALIDATION\") {\n      urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\n        ninstrumentcode: instrumentValidation.ninstrumentcode,\n        \"nFlag\": inputParam.nFlag,\n        ninstrumentvalidationcode: instrumentValidation.ninstrumentvalidationcode,\n        userinfo: inputParam.userInfo\n      }));\n    } else if (inputParam.screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n      urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\n        ninstrumentcode: instrumentCalibration.ninstrumentcode,\n        \"nFlag\": inputParam.nFlag,\n        ninstrumentcalibrationcode: instrumentCalibration.ninstrumentcalibrationcode,\n        userinfo: inputParam.userInfo\n      }));\n    } else if (inputParam.screenName === \"IDS_INSTRUMENTMAINTENANCE\") {\n      urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\n        ninstrumentcode: instrumentMaintenance.ninstrumentcode,\n        \"nFlag\": inputParam.nFlag,\n        ninstrumentmaintenancecode: instrumentMaintenance.ninstrumentmaintenancecode,\n        userinfo: inputParam.userInfo\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      let masterData = inputParam.masterData;\n      masterData = { ...masterData,\n        ...response[0].data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getDataForAddEditMaintenance = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\n  return function (dispatch) {\n    if (masterData.selectedInstrument.ninstrumentstatus !== transactionStatus.Disposed) {\n      let urlArray = [];\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      const LastMaintenanceDateService = rsapi.post(\"instrument/getInstrumentLastMaintenanceDate\", {\n        \"userinfo\": userInfo,\n        ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\n      });\n      const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceStatus\", {\n        \"userinfo\": userInfo\n      });\n\n      if (operation === \"create\") {\n        const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\n          \"userinfo\": userInfo,\n          nFlag: 1,\n          ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\n        });\n        urlArray = [maintenanceStatusService, LastMaintenanceDateService, timeZoneService, maintenanceValidationService];\n      } else {\n        const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\n          \"userinfo\": userInfo,\n          nFlag: 2,\n          ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\n          ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\n        });\n        const MaintenanceById = rsapi.post(\"instrument/getActiveInstrumentMaintenanceById\", {\n          [primaryKeyName]: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\n          \"userinfo\": userInfo\n        });\n        urlArray = [maintenanceStatusService, LastMaintenanceDateService, timeZoneService, maintenanceValidationService, MaintenanceById];\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let MaintenanceStatus = [];\n        let TimeZoneList = [];\n\n        if (response[3].data.OpenCloseStatus === \"Success\") {\n          let selectedRecord = {};\n          let MaintenanceData = [];\n          const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          MaintenanceStatus = maintenanceMap.get(\"OptionList\");\n          let Action;\n          let ntzlastmaintenancedate = [];\n          let ntzduedate = [];\n          const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n          TimeZoneList = timezoneMap.get(\"OptionList\");\n\n          if (operation === \"create\") {\n            selectedRecord = {\n              \"ntzlastmaintenancedate\": {\n                \"value\": userInfo.ntimezonecode,\n                \"label\": userInfo.stimezoneid\n              },\n              \"stzlastmaintenancedate\": userInfo.stimezoneid,\n              \"ntzduedate\": {\n                \"value\": userInfo.ntimezonecode,\n                \"label\": userInfo.stimezoneid\n              },\n              \"stzduedate\": userInfo.stimezoneid\n            };\n            let date = rearrangeDateFormat(userInfo, response[1].data.date);\n            selectedRecord[\"dlastmaintenancedate\"] = date;\n            selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, new Date());\n            Action = 'Add';\n          }\n\n          if (operation === \"update\") {\n            Action = 'Edit';\n            MaintenanceData.push({\n              \"value\": response[4].data[\"nmaintenancestatus\"],\n              \"label\": response[4].data[\"stransdisplaystatus\"]\n            });\n            selectedRecord = response[4].data;\n            selectedRecord[\"ntranscode\"] = MaintenanceData[0];\n            ntzlastmaintenancedate.push({\n              \"value\": response[4].data[\"ntzlastmaintenancedate\"],\n              \"label\": response[4].data[\"stzlastmaintenancedate\"]\n            });\n            ntzduedate.push({\n              \"value\": response[4].data[\"ntzduedate\"],\n              \"label\": response[4].data[\"stzduedate\"]\n            });\n            selectedRecord[\"ntzlastmaintenancedate\"] = ntzlastmaintenancedate[0];\n            selectedRecord[\"ntzduedate\"] = ntzduedate[0];\n\n            if (response[4].data[\"slastmaintenancedate\"] !== \"\") {\n              selectedRecord[\"dlastmaintenancedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"slastmaintenancedate\"]); //new Date(response[7].data[\"smanufacdate\"]);\n            }\n\n            if (response[4].data[\"sduedate\"] !== \"\") {\n              selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"sduedate\"]); //new Date(response[7].data[\"smanufacdate\"]);\n            }\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              MaintenanceStatus,\n              Action: Action,\n              TimeZoneList,\n              selectedRecord: selectedRecord,\n              isOpen: true,\n              operation: operation,\n              screenName: screenName,\n              // openModal: true,\n              openChildModal: true,\n              ncontrolCode: ncontrolCode,\n              loading: false,\n              popUp: \"\"\n            }\n          });\n        } else {\n          toast.warn(intl.formatMessage({\n            id: response[3].data.Status\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              operation: operation,\n              screenName: screenName,\n              ncontrolCode: ncontrolCode,\n              loading: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_DISPOSEDINSTRUMENT\"\n      }));\n    }\n  };\n};\nexport const OpenDate = (screenName, userInfo, ncontrolCode, selectedRecord, masterData) => {\n  return function (dispatch) {\n    if (masterData.selectedInstrument.ninstrumentstatus !== transactionStatus.Disposed) {\n      let urlArray = [];\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo: userInfo\n      });\n\n      if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n        const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\n          \"userinfo\": userInfo,\n          nFlag: 3,\n          ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\n          ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\n        });\n        const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationOpenDateStatus\", {\n          \"userinfo\": userInfo,\n          nFlag: 2,\n          ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\n          ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\n        });\n        urlArray = [calibrationStatusService, timeZoneService, UTCtimeZoneService, calibrationValidationService];\n      } else {\n        const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\n          \"userinfo\": userInfo,\n          nFlag: 3,\n          ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\n          ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\n        });\n        const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceOpenCloseDateStatus\", {\n          \"userinfo\": userInfo,\n          nFlag: 2,\n          ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\n          ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\n        });\n        urlArray = [maintenanceStatusService, timeZoneService, UTCtimeZoneService, maintenanceValidationService];\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        if (response[3].data.OpenCloseStatus === \"Success\") {\n          let CalibrationStatus = {};\n          let MaintenanceStatus = {};\n          let selectedRecord = {};\n          const timezoneMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n          const TimeZoneList = timezoneMap.get(\"OptionList\");\n          selectedRecord = {\n            \"ntzopendate\": {\n              \"value\": userInfo.ntimezonecode,\n              \"label\": userInfo.stimezoneid\n            },\n            \"stzopendate\": userInfo.stimezoneid\n          };\n          let popUp = \"\";\n          let date = rearrangeDateFormat(userInfo, response[2].data);\n          selectedRecord[\"dopendate\"] = date;\n\n          if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n            const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n            CalibrationStatus = calibrationMap.get(\"OptionList\");\n            popUp = \"IDS_INSTRUMENTCALIBRATIONOPENDATE\"; //  let CalibrationData=[];\n            //  CalibrationData.push(response[0].data.CalibrationStatus[1]);\n            //  CalibrationData.push({\n            //     \"value\": response[0].data.CalibrationStatus[1].ntranscode,\n            //     \"label\": response[0].data.CalibrationStatus[1].stransdisplaystatus\n            // });\n            //  selectedRecord[\"ntranscode\"] = CalibrationData[0];\n          } else {\n            const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n            MaintenanceStatus = maintenanceMap.get(\"OptionList\");\n            popUp = \"IDS_INSTRUMENTMAINTENANCEOPENDATE\";\n          }\n\n          let operation = \"create\";\n          let modalTitle = \"IDS_OPENDATE\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              isOpen: true,\n              selectedRecord: selectedRecord,\n              operation: operation,\n              modalTitle: modalTitle,\n              CalibrationStatus: CalibrationStatus,\n              MaintenanceStatus: MaintenanceStatus,\n              TimeZoneList: TimeZoneList,\n              screenName: screenName,\n              modalShow: true,\n              ncontrolCode: ncontrolCode,\n              popUp: popUp,\n              loading: false\n            }\n          });\n        } else {\n          toast.warn(intl.formatMessage({\n            id: response[3].data.Status\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              ncontrolCode: ncontrolCode,\n              loading: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_DISPOSEDINSTRUMENT\"\n      }));\n    }\n  };\n};\nexport const CloseDate = (screenName, userInfo, ncontrolCode, selectedRecord, masterData) => {\n  return function (dispatch) {\n    if (masterData.selectedInstrument.ninstrumentstatus !== transactionStatus.Disposed) {\n      let urlArray = [];\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo: userInfo\n      });\n\n      if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n        const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\n          \"userinfo\": userInfo,\n          nFlag: 4,\n          ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\n          ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\n        });\n        const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationOpenDateStatus\", {\n          \"userinfo\": userInfo,\n          nFlag: 2,\n          ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\n          ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\n        });\n        urlArray = [calibrationStatusService, timeZoneService, UTCtimeZoneService, calibrationValidationService];\n      } else {\n        const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\n          \"userinfo\": userInfo,\n          nFlag: 4,\n          ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\n          ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\n        });\n        const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceOpenCloseDateStatus\", {\n          \"userinfo\": userInfo,\n          nFlag: 2,\n          ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\n          ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\n        });\n        urlArray = [maintenanceStatusService, timeZoneService, UTCtimeZoneService, maintenanceValidationService];\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        if (response[3].data.OpenCloseStatus === \"Success\") {\n          let CalibrationStatus = [];\n          let MaintenanceStatus = {};\n          let selectedRecord = {};\n          const timezoneMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n          const TimeZoneList = timezoneMap.get(\"OptionList\");\n          selectedRecord = {\n            \"ntzclosedate\": {\n              \"value\": userInfo.ntimezonecode,\n              \"label\": userInfo.stimezoneid\n            },\n            \"stzclosedate\": userInfo.stimezoneid\n          };\n          let date = rearrangeDateFormat(userInfo, response[2].data);\n          selectedRecord[\"dclosedate\"] = date;\n          let popUp = \"\";\n\n          if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n            const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n            CalibrationStatus = calibrationMap.get(\"OptionList\");\n            popUp = \"IDS_INSTRUMENTCALIBRATIONCLOSEDATE\"; //     let CalibrationData=[];\n            //  CalibrationData.push({\n            //     \"value\": response[0].data.CalibrationStatus[0].ntranscode,\n            //     \"label\": response[0].data.CalibrationStatus[0].stransstatus\n            // });\n            // selectedRecord[\"ntranscode\"] = CalibrationData[0];\n            //selectedRecord.ntranscode=CalibrationData[0];\n          } else {\n            const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n            MaintenanceStatus = maintenanceMap.get(\"OptionList\");\n            popUp = \"IDS_INSTRUMENTMAINTENANCECLOSEDATE\";\n          }\n\n          let operation = \"create\";\n          let modalTitle = \"IDS_CLOSEDATE\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              isOpen: true,\n              selectedRecord: selectedRecord,\n              operation: operation,\n              modalTitle: modalTitle,\n              CalibrationStatus: CalibrationStatus,\n              MaintenanceStatus: MaintenanceStatus,\n              TimeZoneList: TimeZoneList,\n              screenName: screenName,\n              modalShow: true,\n              ncontrolCode: ncontrolCode,\n              loading: false,\n              popUp: popUp\n            }\n          });\n        } else {\n          toast.warn(intl.formatMessage({\n            id: response[3].data.Status\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              ncontrolCode: ncontrolCode,\n              loading: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_DISPOSEDINSTRUMENT\"\n      }));\n    }\n  };\n};\nexport function getInstrumentSiteSection(nregionalsitecode, userInfo, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let url = \"/instrument/getSiteBasedSection\";\n    return rsapi.post(url, {\n      \"userinfo\": userInfo,\n      \"nsitecode\": nregionalsitecode\n    }).then(response => {\n      const secMap = constructOptionList(response.data || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n      const Lab = secMap.get(\"OptionList\");\n      selectedRecord[\"nsectioncode\"] = undefined;\n      selectedRecord[\"nusercode\"] = undefined;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Lab,\n          selectedRecord,\n          nsitecode: nregionalsitecode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n} //Added by sonia on 30th Sept 2024 for Jira idL:ALPD-4940\n\nexport function updateAutoCalibration(masterData, userInfo, controlId) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const url = \"/instrument/updateAutoCalibrationInstrument\";\n    return rsapi.post(url, {\n      \"ninstrumentcode\": masterData.selectedInstrument.ninstrumentcode,\n      \"nautocalibration\": masterData.selectedInstrument.nautocalibration,\n      \"userinfo\": userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        selectedInstrument: response.data && response.data.selectedInstrument,\n        instrumentCalibration: response.data && response.data.instrumentCalibration,\n        selectedInstrumentCalibration: response.data && response.data.selectedInstrumentCalibration\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      console.log(\"error\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/actions/InstrumentAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","constructOptionList","rearrangeDateFormat","getComboLabelValue","Axios","initRequest","intl","toast","transactionStatus","attachmentType","getInstrumentCombo","screenName","operation","primaryKeyName","masterData","userInfo","ncontrolCode","dispatch","SelectedInsCat","undefined","check","selectedInstrument","ninstrumentstatus","Disposed","urlArray","InstrumentCategory","post","Supplier","Manufacturer","InstrumentStatus","Lab","Period","timeZoneService","Instrumentdate","UTCtimeZoneService","userinfo","validationStatus","calibrationStatus","maintenanceStatus","calibrationRequired","ninstrumentcatcode","siteService","InstrumentName","InstrumentLocation","InstrumentId","ValidateInst","all","then","response","expiryDate","currentTime","validateOpenDate","insLocationMap","instcatMap","data","supplierMap","manufMap","inststatusMap","sectionMap","periodMap","timezoneMap","instrumentNamemap","filter","x","ninstrumentnamecode","ValidationStatus","CalibrationStatus","MaintenanceStatus","CalibrationRequired","siteList","get","TimeZoneList","instName","selectedRecord","sinstrumentcatname","instrumentCategory","supplier","regionalSite","manufacturer","instrumentstatus","nwindowsperiodminusunit","nwindowsperiodplusunit","nnextcalibrationperiod","lab","ntzmanufdate","ntzpodate","ntzreceivedate","ntzinstallationdate","ntzexpirydate","susername","service","instname","ntzservicedate","inslocation","push","value","label","siteMap","ValidateOpenDate","validationMap","calibrationMap","maintenanceMap","ncalibrationrequired","timezone","ntimezonecode","date","type","payload","isOpen","openModal","loading","catch","error","status","formatMessage","id","message","warn","getSectionUsers","nsectioncode","nregionalsitecode","Users","userName","getCalibrationRequired","getInstrumentDetail","Instrument","ninstrumentcode","modalName","dataState","getAvailableInstData","instItem","url","key","secMap","Section","userMap","LabDefault","openChildModal","info","changeInstrumentCategoryFilter","inputParam","filterInstrumentCategory","methodUrl","inputData","nfilterInstrumentCategory","addInstrumentFile","Instrumentfile","linkMap","LinkMaster","linkmaster","defaultLink","items","item","ndefaultlink","YES","disabled","editObject","nlinkcode","link","nattachmenttypecode","LINK","slinkname","slinkfilename","sfilename","slinkdescription","sfiledesc","nlinkdefaultstatus","ndefaultstatus","sfilesize","nfilesize","length","ssystemfilename","ninstrumentfilecode","AttachmentType","FTP","linkMaster","showSaveContinue","editFiles","getDataForAddEditValidation","validationStatusService","ValidationById","selectedInstrumentValidation","ninstrumentvalidationcode","ValidationData","ntzvalidationdate","stimezoneid","getDataForAddEditCalibration","calibrationStatusService","LastCalibrationDateService","calibrationValidationService","nFlag","ninstrumentcalibrationcode","selectedInstrumentCalibration","CalibrationById","OpenCloseStatus","CalibrationData","Action","ntzlastcalibrationdate","ntzduedate","Date","popUp","Status","getTabDetails","instrumentValidation","instrumentCalibration","instrumentMaintenance","ninstrumentmaintenancecode","getDataForAddEditMaintenance","LastMaintenanceDateService","maintenanceStatusService","maintenanceValidationService","selectedInstrumentMaintenance","MaintenanceById","MaintenanceData","ntzlastmaintenancedate","OpenDate","modalTitle","modalShow","CloseDate","getInstrumentSiteSection","nsitecode","updateAutoCalibration","controlId","nautocalibration","console","log"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    sortData,\r\n    constructOptionList,\r\n    rearrangeDateFormat,getComboLabelValue\r\n} from '../components/CommonScript';\r\nimport Axios from 'axios';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    transactionStatus,\r\n    attachmentType\r\n} from \"../components/Enumeration\";\r\n\r\nexport function getInstrumentCombo(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if ( masterData.SelectedInsCat !== undefined) {\r\n            let check=true;\r\n            if(operation===\"update\"){\r\n                if(masterData.selectedInstrument.ninstrumentstatus===transactionStatus.Disposed){\r\n                    check=false\r\n            }}\r\n            if(check){\r\n        let urlArray = [];\r\n        const InstrumentCategory = rsapi.post(\"/instrumentcategory/fetchinstrumentcategory\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const Supplier = rsapi.post(\"/instrument/getSupplier\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const Manufacturer = rsapi.post(\"/instrument/getManufacturer\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const InstrumentStatus = rsapi.post(\"/instrument/getInstrumentStatus\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        // ALPD-5330 - Gowtham R - Section not loaded initially\r\n        const Lab = rsapi.post(\"/instrument/getSection\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const Period = rsapi.post(\"/period/getPeriodByControl\", {\r\n            \"ncontrolcode\": ncontrolCode,\r\n            \"userinfo\": userInfo\r\n        });\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n\r\n        const Instrumentdate = rsapi.post(\"/instrument/addInstrumentDate\", {\r\n            \"ncontrolcode\": ncontrolCode,\r\n            \"userinfo\": userInfo\r\n        });\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo: userInfo\r\n        });\r\n        const validationStatus = rsapi.post(\"instrument/getInstrumentValidationStatus\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const calibrationStatus = rsapi.post(\"instrument/getInstrumentCalibrationStatus\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const maintenanceStatus = rsapi.post(\"instrument/getInstrumentMaintenanceStatus\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const calibrationRequired =rsapi.post(\"instrument/getCalibrationRequired\",{\r\n            \"ninstrumentcatcode\":masterData.SelectedInsCat.ninstrumentcatcode,\r\n            userinfo:userInfo\r\n        });\r\n        const siteService = rsapi.post(\"site/getSite\",{userinfo:userInfo});\r\n        const InstrumentName = rsapi.post(\"/instrument/getInstrumentName\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const InstrumentLocation = rsapi.post(\"/instrument/getInstrumentLocation\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        if (operation === \"create\") {\r\n            urlArray = [InstrumentCategory, Supplier, Manufacturer, InstrumentStatus, Lab, Period, timeZoneService, Instrumentdate, UTCtimeZoneService,validationStatus,calibrationStatus,maintenanceStatus,calibrationRequired,siteService,InstrumentName,InstrumentLocation];\r\n\r\n        } else {\r\n            const InstrumentId = rsapi.post(\"/instrument/getActiveInstrumentById\", {\r\n                [primaryKeyName]: masterData.selectedInstrument[primaryKeyName],\r\n                \"userinfo\": userInfo\r\n            });\r\n            const ValidateInst = rsapi.post(\"/instrument/validateOpenDate\", {\r\n                [primaryKeyName]: masterData.selectedInstrument[primaryKeyName],\r\n                \"userinfo\": userInfo\r\n            });\r\n            //const ManufacturerByID = rsapi.post(\"/manufacturer/getManufacturerById\", { [primaryKeyName] :masterData.selectedManufacturer[primaryKeyName], \"userinfo\": userInfo });\r\n            urlArray = [InstrumentCategory, Supplier, Manufacturer, InstrumentStatus, Lab, Period, timeZoneService, InstrumentId, Instrumentdate, UTCtimeZoneService,siteService,ValidateInst,InstrumentName,InstrumentLocation];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                let expiryDate = undefined;\r\n                let currentTime = undefined;\r\n                let validateOpenDate=false;\r\n                let insLocationMap=[];\r\n                const instcatMap = constructOptionList(response[0].data || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, false);\r\n\r\n                const supplierMap = constructOptionList(response[1].data.Supplier || [], \"nsuppliercode\",\r\n                    \"ssuppliername\", undefined, undefined, false);\r\n\r\n                const manufMap = constructOptionList(response[2].data.Manufacturer || [], \"nmanufcode\",\r\n                    \"smanufname\", undefined, undefined, false);\r\n\r\n                const inststatusMap = constructOptionList(response[3].data || [], \"ntranscode\",\r\n                    \"stransstatus\", undefined, undefined, false);\r\n\r\n                // ALPD-5330 - Gowtham R - Section not loaded initially\r\n                const sectionMap = constructOptionList(response[4].data || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, false);\r\n\r\n                const periodMap = constructOptionList(response[5].data || [], \"nperiodcode\",\r\n                    \"speriodname\", undefined, undefined, false);\r\n\r\n                const timezoneMap = constructOptionList(response[6].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, false);\r\n                  \r\n                    if(operation===\"update\"){\r\n                         insLocationMap = constructOptionList(response[13].data.InstrumentLocation || [], \"ninstrumentlocationcode\",\r\n                        \"sinstrumentlocationname\", undefined, undefined, false);\r\n                    }\r\n                    else{\r\n                         insLocationMap = constructOptionList(response[15].data.InstrumentLocation || [], \"ninstrumentlocationcode\",\r\n                        \"sinstrumentlocationname\", undefined, undefined, false);\r\n                    }\r\n\r\n                    \r\n\r\n\r\n                    const instrumentNamemap = constructOptionList(  operation === \"update\"? response[12].data.InstrumentName.filter(x => x.ninstrumentnamecode !== -1) || []:response[14].data.InstrumentName.filter(x => x.ninstrumentnamecode !== -1) || [], \"ninstrumentnamecode\",\r\n                    \"sinstrumentname\", undefined, undefined, false);\r\n                  \r\n                // const validationMap={};\r\n                // const calibrationMap ={};\r\n                // const maintenanceMap ={};\r\n                let ValidationStatus =[];\r\n                let CalibrationStatus=[];\r\n                let MaintenanceStatus=[];\r\n                let CalibrationRequired =\"\";\r\n                let siteList=[];\r\n\r\n                const InstrumentCategory = instcatMap.get(\"OptionList\");\r\n                const Supplier = supplierMap.get(\"OptionList\");\r\n                const Manufacturer = manufMap.get(\"OptionList\");\r\n                const InstrumentStatus = inststatusMap.get(\"OptionList\");\r\n                // ALPD-5330 - Gowtham R - Section not loaded initially\r\n                const Lab = sectionMap.get(\"OptionList\");\r\n                const Period = periodMap.get(\"OptionList\");\r\n\r\n                const TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                const instName=instrumentNamemap.get(\"OptionList\")\r\n                const InstrumentLocation=insLocationMap.get(\"OptionList\");\r\n\r\n                let selectedRecord = {\"ninstrumentcatcode\": {\r\n                            \"value\": masterData.SelectedInsCat.ninstrumentcatcode,\r\n                             \"label\": masterData.SelectedInsCat.sinstrumentcatname\r\n                         }};\r\n                // let selectedRecord = {\r\n                //     \"ninstrumentcatcode\": {\r\n                //         \"value\": masterData.SelectedInsCat.ninstrumentcatcode,\r\n                //         \"label\": masterData.SelectedInsCat.sinstrumentcatname\r\n                //     },\r\n                //     \"ntzmanufdate\": {\r\n                //         \"value\": userInfo.ntimezonecode,\r\n                //         \"label\": userInfo.stimezoneid\r\n                //     },\r\n                //     //\"stzmanufdate\":userInfo.stimezoneid\r\n\r\n                //     \"ntzpodate\": {\r\n                //         \"value\": userInfo.ntimezonecode,\r\n                //         \"label\": userInfo.stimezoneid\r\n                //     },\r\n                //     \"stzpodate\": userInfo.stimezoneid,\r\n\r\n\r\n                //     \"ntzreceivedate\": {\r\n                //         \"value\": userInfo.ntimezonecode,\r\n                //         \"label\": userInfo.stimezoneid\r\n                //     },\r\n                //     \"stzreceivedate\": userInfo.stimezoneid,\r\n\r\n\r\n                //     \"ntzinstallationdate\": {\r\n                //         \"value\": userInfo.ntimezonecode,\r\n                //         \"label\": userInfo.stimezoneid\r\n                //     },\r\n                //     \"stzinstallationdate\": userInfo.stimezoneid,\r\n\r\n\r\n                //     \"ntzexpirydate\": {\r\n                //         \"value\": userInfo.ntimezonecode,\r\n                //         \"label\": userInfo.stimezoneid\r\n                //     },\r\n                //     \"stzexpirydate\": userInfo.stimezoneid\r\n                // };\r\n                let instrumentCategory = [];\r\n                let supplier = [];\r\n                let regionalSite = [];\r\n                let manufacturer = [];\r\n                let instrumentstatus = [];\r\n                let nwindowsperiodminusunit = [];\r\n                let nwindowsperiodplusunit = [];;\r\n                let nnextcalibrationperiod=[];\r\n                let lab = [];\r\n                let ntzmanufdate = [];\r\n                let ntzpodate = [];\r\n                let ntzreceivedate = [];\r\n                let ntzinstallationdate = [];\r\n                let ntzexpirydate = [];\r\n                let susername = [];\r\n                let service = [];\r\n                let instname = [];\r\n                let ntzservicedate=[];\r\n                let inslocation=[];\r\n               \r\n                // let validation = [];\r\n                // let calibration = [];\r\n                // let maintenance = [];\r\n\r\n                //if (operation === \"create\") {\r\n                    // let date = rearrangeDateFormat(userInfo, response[8].data);\r\n                    // selectedRecord[\"dmanufacdate\"] = date; //new Date(response[8].data);\r\n                    // selectedRecord[\"dpodate\"] = date;\r\n                    // selectedRecord[\"dreceiveddate\"] = date;\r\n                    // selectedRecord[\"dinstallationdate\"] = date;\r\n                    // currentTime = date;\r\n                    // if (response[7].data[\"ExpiryDate\"] !== \"\") {\r\n                    //     expiryDate = rearrangeDateFormat(userInfo, response[7].data[\"ExpiryDate\"]); //new Date(response[7].data[\"ExpiryDate\"]);\r\n                    //     selectedRecord[\"dexpirydate\"] = expiryDate;\r\n                    // }\r\n             //   }\r\n         \r\n                if (operation === \"update\") {\r\n                    selectedRecord = response[7].data;\r\n                    instrumentCategory.push({\r\n                        \"value\": response[7].data[\"ninstrumentcatcode\"],\r\n                        \"label\": response[7].data[\"sinstrumentcatname\"]\r\n                    });\r\n                    supplier.push({\r\n                        \r\n                        \"value\": response[7].data[\"nsuppliercode\"],\r\n                        \"label\": response[7].data[\"ssuppliername\"]\r\n                    });\r\n                    regionalSite.push({\r\n                        \"value\": response[7].data[\"nregionalsitecode\"],\r\n                        \"label\": response[7].data[\"sregionalsitename\"]\r\n                    });\r\n                    service.push({\r\n                        \"value\": response[7].data[\"nservicecode\"],\r\n                        \"label\": response[7].data[\"sserviceby\"]\r\n                    });\r\n                    manufacturer.push({\r\n                        \"value\": response[7].data[\"nmanufcode\"],\r\n                        \"label\": response[7].data[\"smanufname\"]\r\n                    });\r\n                    instrumentstatus.push({\r\n                        \"value\": response[7].data[\"ntranscode\"],\r\n                        \"label\": response[7].data[\"sactivestatus\"]\r\n                    });\r\n                    nwindowsperiodminusunit.push({\r\n                        \"value\": response[7].data[\"nwindowsperiodminusunit\"],\r\n                        \"label\": response[7].data[\"swindowsperiodminusunit\"]\r\n                    });\r\n                    nwindowsperiodplusunit.push({\r\n                        \"value\": response[7].data[\"nwindowsperiodplusunit\"],\r\n                        \"label\": response[7].data[\"swindowsperiodplusunit\"]\r\n                    });\r\n                    nnextcalibrationperiod.push({\r\n                        \"value\": response[7].data[\"nnextcalibrationperiod\"],\r\n                        \"label\": response[7].data[\"snextcalibrationperiod\"]\r\n                    });\r\n                    lab.push({\r\n                        \"value\": response[7].data[\"nsectioncode\"],\r\n                        \"label\": response[7].data[\"ssectionname\"]\r\n                    })\r\n                    ntzmanufdate.push({\r\n                        \"value\": response[7].data[\"ntzmanufdate\"],\r\n                        \"label\": response[7].data[\"stzmanufdate\"]\r\n                    })\r\n                    ntzpodate.push({\r\n                        \"value\": response[7].data[\"ntzpodate\"],\r\n                        \"label\": response[7].data[\"stzpodate\"]\r\n                    })\r\n                    ntzreceivedate.push({\r\n                        \"value\": response[7].data[\"ntzreceivedate\"],\r\n                        \"label\": response[7].data[\"stzreceivedate\"]\r\n                    })\r\n                    ntzinstallationdate.push({\r\n                        \"value\": response[7].data[\"ntzinstallationdate\"],\r\n                        \"label\": response[7].data[\"stzinstallationdate\"]\r\n                    })\r\n                    ntzexpirydate.push({\r\n                        \"value\": response[7].data[\"ntzexpirydate\"],\r\n                        \"label\": response[7].data[\"stzexpirydate\"]\r\n                    })\r\n                    ntzservicedate.push({\r\n                        \"value\": response[7].data[\"ntzservicedate\"],\r\n                        \"label\": response[7].data[\"sservicedate\"]\r\n                    })\r\n                    susername.push({\r\n                        \"value\": response[7].data[\"nusercode1\"],\r\n                        \"label\": response[7].data[\"susername\"]\r\n                    })\r\n                    instname.push({\r\n                        \"value\": response[7].data[\"ninstrumentnamecode\"],\r\n                        \"label\": response[7].data[\"sinstrumentname\"]\r\n                    })\r\n\r\n                    inslocation.push({\r\n                        \"value\": response[7].data[\"ninstrumentlocationcode\"],\r\n                        \"label\": response[7].data[\"sinstrumentlocationname\"] \r\n                    })\r\n                    // validation.push({\r\n                    //     \"value\": response[8].data[\"ntranscode\"],\r\n                    //     \"label\": response[8].data[\"stransdisplaystatus\"]\r\n                    // })\r\n                    // calibration.push({\r\n                    //     \"value\": response[9].data[\"ntranscode\"],\r\n                    //     \"label\": response[9].data[\"stransdisplaystatus\"]\r\n                    // })\r\n                    // maintenance.push({\r\n                    //     \"value\": response[10].data[\"ntranscode\"],\r\n                    //     \"label\": response[10].data[\"stransdisplaystatus\"]\r\n                    // })\r\n                    if (response[7].data[\"smanufacdate\"] !== \"\") {\r\n\r\n                        selectedRecord[\"dmanufacdate\"] = rearrangeDateFormat(userInfo, response[7].data[\"smanufacdate\"]); //new Date(response[7].data[\"smanufacdate\"]);\r\n                    }\r\n\r\n                    if (response[7].data[\"spodate\"] !== \"\") {\r\n                        selectedRecord[\"dpodate\"] = rearrangeDateFormat(userInfo, response[7].data[\"spodate\"]); //new Date(response[7].data[\"spodate\"]);\r\n                    }\r\n                    // else{\r\n                    //     selectedRecord[\"dpodate\"] = \" \";\r\n                    // }\r\n\r\n                    if (response[7].data[\"sreceiveddate\"] !== \"\") {\r\n                        selectedRecord[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sreceiveddate\"]); //new Date(response[7].data[\"sreceiveddate\"]);\r\n                    }\r\n                    if (response[7].data[\"sinstallationdate\"] !== \"\") {\r\n                        selectedRecord[\"dinstallationdate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sinstallationdate\"]); //new Date(response[7].data[\"sinstallationdate\"]);\r\n                    }\r\n\r\n                    if (response[7].data[\"sexpirydate\"] !== \"\") {\r\n                        selectedRecord[\"dexpirydate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sexpirydate\"]); //new Date(response[7].data[\"sexpirydate\"]);\r\n                    }\r\n                    if (response[7].data[\"sservicedate\"] !== \"\") {\r\n                        selectedRecord[\"dservicedate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sservicedate\"]); //new Date(response[7].data[\"sexpirydate\"]);\r\n                    }\r\n\r\n\r\n\r\n                    selectedRecord[\"ninstrumentcatcode\"] = instrumentCategory[0];\r\n                    if(supplier[0].value!==-1)\r\n                        selectedRecord[\"nsuppliercode\"] =supplier[0];\r\n                    selectedRecord[\"nservicecode\"] = service[0];\r\n                    selectedRecord[\"nregionalsitecode\"] = regionalSite[0];\r\n                    selectedRecord[\"ninstrumentnamecode\"]= instname[0];\r\n                    if(inslocation[0].value!==-1)\r\n                        selectedRecord[\"ninstrumentlocationcode\"]=inslocation[0];\r\n                    \r\n                   \r\n                    if (manufacturer[0].value !== -1)\r\n                        selectedRecord[\"nmanufcode\"] = manufacturer[0];\r\n                    if (instrumentstatus[0].value !== -1)\r\n                        selectedRecord[\"ntranscode\"] = instrumentstatus[0];\r\n                    if (nwindowsperiodminusunit[0].value !== -1)\r\n                        selectedRecord[\"nwindowsperiodminusunit\"] = nwindowsperiodminusunit[0];\r\n                    if (nwindowsperiodplusunit[0].value !== -1)\r\n                        selectedRecord[\"nwindowsperiodplusunit\"] = nwindowsperiodplusunit[0];\r\n                    if (nnextcalibrationperiod[0].value !== -1)\r\n                        selectedRecord[\"nnextcalibrationperiod\"] = nnextcalibrationperiod[0];\r\n                    selectedRecord[\"nsectioncode\"] = lab[0];\r\n                    selectedRecord[\"ntzmanufdate\"] = ntzmanufdate[0];\r\n                    selectedRecord[\"stzmanufdate\"] = ntzmanufdate[0].label;\r\n                    selectedRecord[\"ntzpodate\"] = ntzpodate[0];\r\n                    selectedRecord[\"stzpodate\"] = ntzpodate[0].label;\r\n                    selectedRecord[\"ntzreceivedate\"] = ntzreceivedate[0];\r\n                    selectedRecord[\"stzreceivedate\"] = ntzreceivedate[0].label;\r\n                    selectedRecord[\"ntzinstallationdate\"] = ntzinstallationdate[0];\r\n                    selectedRecord[\"stzinstallationdate\"] = ntzinstallationdate[0].label;\r\n                    selectedRecord[\"ntzexpirydate\"] = ntzexpirydate[0];\r\n                    selectedRecord[\"stzexpirydate\"] = ntzexpirydate[0].label;\r\n\r\n                    selectedRecord[\"ntzservicedate\"] = ntzservicedate[0];\r\n                    selectedRecord[\"sservicedate\"] = ntzservicedate[0].label;\r\n\r\n                    selectedRecord[\"susername\"] = susername[0];\r\n                  //  selectedRecord[\"ntranscode\"] = validation[0];\r\n                 //  selectedRecord[\"ntranscode\"] = calibration[0];\r\n               //     selectedRecord[\"ntranscode\"] = maintenance[0];\r\n               const siteMap = constructOptionList(response[10].data || [],\"nsitecode\", \"ssitename\",\r\n               undefined, undefined, true) ;\r\n               siteList = siteMap.get(\"OptionList\");\r\n               validateOpenDate=response[11].data.ValidateOpenDate;\r\n                }\r\n                else{\r\n                    const validationMap = constructOptionList(response[9].data.ValidationStatus || [], \"ntranscode\",\r\n                    \"stransstatus\", undefined, undefined, false);\r\n\r\n                    const calibrationMap = constructOptionList(response[10].data.CalibrationStatus || [], \"ntranscode\",\r\n                    \"stransstatus\", undefined, undefined, false);\r\n\r\n                    const maintenanceMap = constructOptionList(response[11].data.MaintenanceStatus || [], \"ntranscode\",\r\n                    \"stransstatus\", undefined, undefined, false);\r\n\r\n                    CalibrationRequired =response[12].data.ncalibrationrequired;\r\n                    \r\n                    const siteMap = constructOptionList(response[13].data || [],\"nsitecode\", \"ssitename\",\r\n                    undefined, undefined, true) ;\r\n                    siteList = siteMap.get(\"OptionList\");\r\n\r\n                  selectedRecord[\"nregionalsitecode\"]=getComboLabelValue({...userInfo},response[13].data||[],\"nsitecode\", \"ssitename\")\r\n\r\n                 ValidationStatus = validationMap.get(\"OptionList\");\r\n                 CalibrationStatus = calibrationMap.get(\"OptionList\");\r\n                 MaintenanceStatus = maintenanceMap.get(\"OptionList\");\r\n\r\n                   const timezone=  TimeZoneList.filter(x=>x.value===userInfo.ntimezonecode);\r\n\r\n                   selectedRecord[\"ntzmanufdate\"] = timezone[0];\r\n                  // selectedRecord[\"stzmanufdate\"] = ntzmanufdate[0].label;\r\n                   selectedRecord[\"ntzpodate\"] = timezone[0];\r\n                  // selectedRecord[\"stzpodate\"] = ntzpodate[0].label;\r\n                   selectedRecord[\"ntzreceivedate\"] = timezone[0];\r\n                  // selectedRecord[\"stzreceivedate\"] = ntzreceivedate[0].label;\r\n                   selectedRecord[\"ntzinstallationdate\"] = timezone[0];\r\n                  // selectedRecord[\"stzinstallationdate\"] = ntzinstallationdate[0].label;\r\n                   selectedRecord[\"ntzexpirydate\"] = timezone[0];\r\n\r\n                   selectedRecord[\"ntzservicedate\"] = timezone[0];\r\n                   //selectedRecord[\"stzexpirydate\"] = ntzexpirydate[0].label;\r\n\r\n\r\n                   let date = rearrangeDateFormat(userInfo, response[8].data);\r\n                     selectedRecord[\"dclosedate\"] = date; \r\n                     selectedRecord[\"dopendate\"] = date;\r\n                     selectedRecord[\"dlastcalibrationdate\"] = date; \r\n                     selectedRecord[\"dlastmaintenancedate\"] = date;\r\n                     selectedRecord[\"dduedate\"] = date; \r\n                     selectedRecord[\"dvalidationdate\"] = date;\r\n\r\n                     selectedRecord[\"ntzclosedate\"] = timezone[0]; \r\n                     selectedRecord[\"ntzopendate\"] = timezone[0];\r\n                     selectedRecord[\"ntzlastcalibrationdate\"] = timezone[0]; \r\n                     selectedRecord[\"ntzlastmaintenancedate\"] = timezone[0];\r\n                     selectedRecord[\"ntzduedate\"] = timezone[0]; \r\n                     selectedRecord[\"ntzvalidationdate\"] = timezone[0];\r\n\r\n                }\r\n          \r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        InstrumentCategory,\r\n                        Supplier,\r\n                        Manufacturer,\r\n                        InstrumentStatus,\r\n                        InstrumentLocation,\r\n                        instrumentCategory: instrumentCategory,\r\n                        supplier: supplier,\r\n                        manufacturer: manufacturer,\r\n                        inslocation:inslocation,\r\n                        Lab,\r\n                        Period,\r\n                        TimeZoneList,\r\n                        ValidationStatus,\r\n                        CalibrationStatus,\r\n                        MaintenanceStatus,\r\n                        CalibrationRequired,\r\n                        siteList,\r\n                        validateOpenDate,\r\n                        isOpen: true,\r\n                        selectedRecord: selectedRecord,\r\n                        operation: operation,\r\n                        screenName: screenName,\r\n                        openModal:true,\r\n                        ncontrolCode: ncontrolCode,\r\n                        loading: false,\r\n                        currentTime,\r\n                        expiryDate,instName\r\n                    }\r\n                });\r\n        })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n        }\r\n        else{\r\n            toast.warn(intl.formatMessage({ id: \"IDS_DISPOSEDINSTRUMENT\"}));\r\n        }\r\n\r\n        }\r\n        else{\r\n            toast.warn(intl.formatMessage({ id: \"IDS_INSTRUMENTCATEGORYNOTAVALIABLE\"}));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function getSectionUsers(nsectioncode, userInfo, selectedRecord, masterData, screenName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"instrument/getSectionBasedUser\", {\r\n                \"nsectioncode\": nsectioncode,\r\n                // ALPD-3514 taking nregionalsitecode from selectedRecord incase of Adding new instrument and from masterData's selected Instrument incase of adding section user\r\n                \"nregionalsitecode\":selectedRecord && selectedRecord.nregionalsitecode ? selectedRecord.nregionalsitecode.value : masterData.selectedInstrument.nregionalsitecode, \r\n                \"userinfo\": userInfo,\r\n            }\r\n            )\r\n            .then(response => {\r\n                //console.log(\" response:\", response); \r\n                let Users = [];\r\n                if (screenName === \"IDS_SECTION\") {\r\n                    //let sectionusers=[];\r\n                    const userName = constructOptionList(response.data || [], \"nusercode\",\r\n                        \"susername\", undefined, undefined, false);\r\n                    Users = userName.get(\"OptionList\");\r\n                    //selectedRecord[\"nusercode\"]=\"\";\r\n                    selectedRecord[\"nusercode\"] = undefined; //{label:SectionUsers[0].label,value:SectionUsers[0].value,item:SectionUsers[0]};\r\n                } else {\r\n                    Users = response.data;\r\n                    selectedRecord[\"nusercode\"] = undefined;\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Users,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getCalibrationRequired(ninstrumentcatcode, userInfo, selectedRecord, screenName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"instrument/getCalibrationRequired\", {\r\n                \"ninstrumentcatcode\": ninstrumentcatcode,userinfo: userInfo})\r\n            .then(response => {\r\n                let CalibrationRequired = [];\r\n                CalibrationRequired=response.data.ncalibrationrequired\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        CalibrationRequired,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getInstrumentDetail(Instrument, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"instrument/getInstrument\", {\r\n                ninstrumentcode: Instrument.ninstrumentcode,\r\n                userinfo: userInfo\r\n            })\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data\r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        operation: null,\r\n                        modalName: undefined,\r\n                        loading: false,\r\n                        dataState: undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const getAvailableInstData = (instItem, url, key, screenName, userInfo, ncontrolCode, selectedRecord) => {\r\n    return function (dispatch) {\r\n        if(instItem.ninstrumentstatus!==transactionStatus.Disposed){\r\n        dispatch(initRequest(true));\r\n        let url = ''\r\n\r\n        url = \"/instrument/getUsers\";\r\n\r\n        return rsapi.post(url, {\r\n                \"userinfo\": userInfo,\"ninstrumentcode\":instItem.ninstrumentcode, \"nregionalsitecode\":instItem.nregionalsitecode\r\n            })\r\n            .then(response => {\r\n\r\n                const secMap = constructOptionList(response.data.Section || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, false);\r\n                const userMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                    \"susername\", undefined, undefined, false);\r\n                const Lab = secMap.get(\"OptionList\");\r\n                const LabDefault = secMap.get(\"DefaultValue\");\r\n                if (LabDefault !== undefined) {\r\n                    selectedRecord = {\r\n                        \"nsectioncode\": {\r\n                            \"value\": LabDefault.value,\r\n                            \"label\": LabDefault.label\r\n                        },\r\n                    }\r\n                }\r\n                const Users = userMap.get(\"OptionList\");\r\n\r\n                // let  openChildModal=true;\r\n                \r\n                //     openChildModal=false;\r\n                //     toast.warn(intl.formatMessage({ id: \"IDS_DISPOSEDINSTRUMENT\"}));\r\n                // }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n\r\n                        Lab,\r\n                        Users,\r\n                        isOpen: true,\r\n                        selectedRecord,\r\n                        operation: \"create\",\r\n                        screenName: screenName,\r\n                        // openModal: true,\r\n                        openChildModal:true,\r\n                        ncontrolCode: ncontrolCode,\r\n                        instItem: instItem,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 417) {\r\n                    toast.info(error.response.data)\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n\r\nelse{\r\n    toast.warn(intl.formatMessage({ id: \"IDS_DISPOSEDINSTRUMENT\"}));\r\n}}\r\n}\r\n\r\n\r\n\r\nexport const changeInstrumentCategoryFilter = (inputParam, filterInstrumentCategory) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/instrument/get\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                //const masterData = response.data\r\n                const masterData = {...inputParam.masterData,...response.data}\r\n                sortData(masterData);\r\n                    \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        dataState: undefined,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterInstrumentCategory,\r\n                            nfilterInstrumentCategory: inputParam.inputData.nfilterInstrumentCategory\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport const addInstrumentFile = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\r\n            userinfo: inputParam.userInfo\r\n        })];\r\n        if (inputParam.operation === \"update\") {\r\n        urlArray.push(rsapi.post(\"/instrument/editInstrumentFile\", {\r\n            userinfo: inputParam.userInfo,\r\n            Instrumentfile: inputParam.selectedRecord\r\n        }))\r\n    }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                // let selectedRecord = {};\r\n                // let editObject = {};\r\n                // let operation = \"update\";\r\n                // editObject = response[0].data;\r\n\r\n\r\n                const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\r\n                const linkmaster = linkMap.get(\"OptionList\");\r\n                let selectedRecord = {};\r\n                const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\r\n                let disabled = false;\r\n                let editObject = {};\r\n                if (inputParam.operation === \"update\") {\r\n                    editObject = response[1].data;\r\n                    let nlinkcode = {};\r\n                    let link = {};\r\n                    if (editObject.nattachmenttypecode === attachmentType.LINK) {\r\n                        nlinkcode = {\r\n                            \"label\": editObject.slinkname,\r\n                            \"value\": editObject.nlinkcode\r\n                        }\r\n\r\n                        link = {\r\n                            slinkfilename:editObject.sfilename,\r\n                            slinkdescription:editObject.sfiledesc,\r\n                            nlinkdefaultstatus:editObject.ndefaultstatus,\r\n                            sfilesize:'',\r\n                            nfilesize:0,\r\n                            ndefaultstatus:4,\r\n                            sfilename:'',\r\n                        }\r\n\r\n                    } else {\r\n                        nlinkcode = defaultLink.length > 0 ? defaultLink[0] : \"\" //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\"\r\n                        link = {\r\n                            slinkfilename:'',\r\n                            slinkdescription:'',\r\n                            nlinkdefaultstatus:4,\r\n                            sfiledesc: editObject.sfiledesc,\r\n                            sfilesize:editObject.sfilesize,\r\n                            nfilesize:editObject.nfilesize,\r\n                            ndefaultstatus:editObject.ndefaultstatus,\r\n                            sfilename:editObject.sfilename,\r\n                            ssystemfilename:editObject.ssystemfilename\r\n                        }\r\n                    }\r\n\r\n\r\n\r\n                    selectedRecord = {\r\n                        ninstrumentfilecode: editObject.ninstrumentfilecode,\r\n                        // sfiledesc: editObject.sfiledesc,\r\n    \r\n                        // sfilename: editObject.sfilename,\r\n                        // sdescription: editObject.sdescription,\r\n                        // ssystemfilename: editObject.ssystemfilename,\r\n                        nattachmenttypecode:editObject.nattachmenttypecode,\r\n                        ...link, \r\n                        //...editObject,\r\n                        nlinkcode,\r\n                    };\r\n                } else {\r\n                    selectedRecord = {\r\n                        nattachmenttypecode:response[0].data.AttachmentType.length>0?\r\n                        response[0].data.AttachmentType[0].nattachmenttypecode:attachmentType.FTP,\r\n                        nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\", //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\r\n                        disabled\r\n                    };\r\n                }\r\n\r\n                // selectedRecord = {\r\n                //     ninstrumentfilecode: editObject.ninstrumentfilecode,\r\n                //     sfiledesc: editObject.sfiledesc,\r\n\r\n                //     sfilename: editObject.sfilename,\r\n                //     sdescription: editObject.sdescription,\r\n                //     ssystemfilename: editObject.ssystemfilename\r\n                // };\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        // openModal: true,\r\n                        openChildModal: true,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord,\r\n                        loading: false,\r\n                        linkMaster: linkmaster,\r\n                        showSaveContinue: false,\r\n                        editFiles: editObject.nattachmenttypecode === \"1\" ? editObject : {}\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getDataForAddEditValidation = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\r\n    return function (dispatch) {\r\n        if(masterData.selectedInstrument.ninstrumentstatus!==transactionStatus.Disposed){\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {userinfo: userInfo});\r\n        const validationStatusService = rsapi.post(\"instrument/getInstrumentValidationStatus\", {\"userinfo\": userInfo,\"ninstrumentcode\":masterData.selectedInstrument.ninstrumentcode});\r\n\r\n        if (operation === \"create\") {\r\n            urlArray = [validationStatusService, UTCtimeZoneService, timeZoneService];\r\n\r\n        } else {\r\n            const ValidationById = rsapi.post(\"instrument/getActiveInstrumentValidationById\", {\r\n                [primaryKeyName]: masterData.selectedInstrumentValidation.ninstrumentvalidationcode,\r\n                \"userinfo\": userInfo,\"ninstrumentcode\":masterData.selectedInstrument.ninstrumentcode\r\n            });\r\n            urlArray = [validationStatusService, UTCtimeZoneService, timeZoneService, ValidationById];\r\n\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                let ValidationData = [];\r\n\r\n\r\n                const validationMap = constructOptionList(response[0].data.ValidationStatus || [], \"ntranscode\",\r\n                    \"stransstatus\", undefined, undefined, false);\r\n\r\n                const ValidationStatus = validationMap.get(\"OptionList\");\r\n\r\n                let ntzvalidationdate = [];\r\n                const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, false);\r\n\r\n                const TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                if (operation === \"create\") {\r\n                     selectedRecord = {\r\n                        \"ntzvalidationdate\": {\r\n                            \"value\": userInfo.ntimezonecode,\r\n                            \"label\": userInfo.stimezoneid\r\n                        },\r\n                        \"stzvalidationdate\": userInfo.stimezoneid,\r\n                    };\r\n                    let date = rearrangeDateFormat(userInfo, response[1].data);\r\n                    selectedRecord[\"dvalidationdate\"] = date;\r\n\r\n                }\r\n                if (operation === \"update\") {\r\n\r\n                    ValidationData.push({\r\n                        \"value\": response[3].data[\"nvalidationstatus\"],\r\n                        \"label\": response[3].data[\"stransdisplaystatus\"]\r\n                    });\r\n                    selectedRecord = response[3].data;\r\n                    selectedRecord[\"ntranscode\"] = ValidationData[0];\r\n\r\n                    ntzvalidationdate.push({\r\n                        \"value\": response[3].data[\"ntzvalidationdate\"],\r\n                        \"label\": response[3].data[\"stzvalidationdate\"]\r\n                    });\r\n                    selectedRecord[\"ntzvalidationdate\"] = ntzvalidationdate[0];\r\n                    if (response[3].data[\"svalidationdate\"] !== \"\") {\r\n\r\n                        selectedRecord[\"dvalidationdate\"] = rearrangeDateFormat(userInfo, response[3].data[\"svalidationdate\"]); //new Date(response[7].data[\"smanufacdate\"]);\r\n                    }\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ValidationStatus,\r\n                        TimeZoneList,\r\n                        selectedRecord: selectedRecord,\r\n                        isOpen: true,\r\n                        operation: operation,\r\n                        screenName: screenName,\r\n                        // openModal: true,\r\n                        openChildModal: true,\r\n                        ncontrolCode: ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n        }\r\n        else{\r\n            toast.warn(intl.formatMessage({ id: \"IDS_DISPOSEDINSTRUMENT\"}));\r\n        }\r\n    }\r\n}\r\nexport const getDataForAddEditCalibration = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\r\n    return function (dispatch) {\r\n        if(masterData.selectedInstrument.ninstrumentstatus!==transactionStatus.Disposed){\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n     \r\n        const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationStatus\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const LastCalibrationDateService =\r\n        rsapi.post(\"instrument/getInstrumentLastCalibrationDate\", {\r\n            \"userinfo\": userInfo,\r\n            ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\r\n\r\n        });\r\n        if (operation === \"create\") {\r\n            const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 1,\r\n                ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\r\n            });\r\n           \r\n            urlArray = [calibrationStatusService, LastCalibrationDateService, timeZoneService, calibrationValidationService];\r\n\r\n        } else {\r\n            const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\r\n                ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\r\n\r\n            });\r\n\r\n            const CalibrationById = rsapi.post(\"instrument/getActiveInstrumentCalibrationById\", {\r\n                [primaryKeyName]: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\r\n                \"userinfo\": userInfo\r\n            });\r\n\r\n            urlArray = [calibrationStatusService, LastCalibrationDateService, timeZoneService, calibrationValidationService, CalibrationById];\r\n\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let CalibrationStatus = [];\r\n                let TimeZoneList = [];\r\n                if (response[3].data.OpenCloseStatus === \"Success\") {\r\n                    let selectedRecord = {};\r\n                    let CalibrationData = [];\r\n\r\n\r\n                    const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\",\r\n                        \"stransstatus\", undefined, undefined, false);\r\n\r\n                    CalibrationStatus = calibrationMap.get(\"OptionList\");\r\n                    let Action;\r\n                    let ntzlastcalibrationdate = [];\r\n                    let ntzduedate = [];\r\n                    const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, false);\r\n\r\n                    TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                    if (operation === \"create\") {\r\n                        selectedRecord = {\r\n                            \"ntzlastcalibrationdate\": {\r\n                                \"value\": userInfo.ntimezonecode,\r\n                                \"label\": userInfo.stimezoneid\r\n                            },\r\n                            \"stzlastcalibrationdate\": userInfo.stimezoneid,\r\n\r\n                            \"ntzduedate\": {\r\n                                \"value\": userInfo.ntimezonecode,\r\n                                \"label\": userInfo.stimezoneid\r\n                            },\r\n                            \"stzduedate\": userInfo.stimezoneid\r\n                        };\r\n                        let date = rearrangeDateFormat(userInfo, response[1].data.date);\r\n                        selectedRecord[\"dlastcalibrationdate\"] = date;\r\n                        selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, new Date());\r\n                        Action = 'Add';\r\n\r\n                    }\r\n                    if (operation === \"update\") {\r\n                        Action = 'Edit';\r\n\r\n                        CalibrationData.push({\r\n                            \"value\": response[4].data[\"ncalibrationstatus\"],\r\n                            \"label\": response[4].data[\"stransdisplaystatus\"]\r\n                        });\r\n                        selectedRecord = response[4].data;\r\n                        selectedRecord[\"ntranscode\"] = CalibrationData[0];\r\n\r\n                        ntzlastcalibrationdate.push({\r\n                            \"value\": response[4].data[\"ntzlastcalibrationdate\"],\r\n                            \"label\": response[4].data[\"stzlastcalibrationdate\"]\r\n                        });\r\n                        ntzduedate.push({\r\n                            \"value\": response[4].data[\"ntzduedate\"],\r\n                            \"label\": response[4].data[\"stzduedate\"]\r\n                        });\r\n                        selectedRecord[\"ntzlastcalibrationdate\"] = ntzlastcalibrationdate[0];\r\n                        selectedRecord[\"ntzduedate\"] = ntzduedate[0];\r\n                        if (response[4].data[\"slastcalibrationdate\"] !== \"\") {\r\n\r\n                            selectedRecord[\"dlastcalibrationdate\"] = rearrangeDateFormat(userInfo, response[4].data[\"slastcalibrationdate\"]);\r\n                        }\r\n                        if (response[4].data[\"sduedate\"] !== \"\") {\r\n\r\n                            selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"sduedate\"]);\r\n                        }\r\n\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            CalibrationStatus,\r\n                            Action: Action,\r\n                            TimeZoneList,\r\n                            selectedRecord: selectedRecord,\r\n                            isOpen: true,\r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            // openModal: true,\r\n                            openChildModal: true,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false,\r\n                            popUp:\"\"\r\n                        }\r\n                    });\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[3].data.Status\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: { \r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n        }\r\n        else{\r\n            toast.warn(intl.formatMessage({ id: \"IDS_DISPOSEDINSTRUMENT\"}));\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTabDetails = (inputParam) => {\r\n    return function (dispatch) {\r\n\r\n        const instrumentValidation = inputParam.instrumentValidation;\r\n        const instrumentCalibration = inputParam.instrumentCalibration;\r\n        const instrumentMaintenance = inputParam.instrumentMaintenance;\r\n        let urlArray = [];\r\n        dispatch(initRequest(true));\r\n        if (inputParam.screenName === \"IDS_INSTRUMENTVALIDATION\") {\r\n            urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\r\n                ninstrumentcode: instrumentValidation.ninstrumentcode,\r\n                \"nFlag\": inputParam.nFlag,\r\n                ninstrumentvalidationcode: instrumentValidation.ninstrumentvalidationcode,\r\n                userinfo: inputParam.userInfo\r\n            }))\r\n        } else if (inputParam.screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n            urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\r\n                ninstrumentcode: instrumentCalibration.ninstrumentcode,\r\n                \"nFlag\": inputParam.nFlag,\r\n                ninstrumentcalibrationcode: instrumentCalibration.ninstrumentcalibrationcode,\r\n                userinfo: inputParam.userInfo\r\n            }))\r\n        } else if (inputParam.screenName === \"IDS_INSTRUMENTMAINTENANCE\") {\r\n            urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\r\n                ninstrumentcode: instrumentMaintenance.ninstrumentcode,\r\n                \"nFlag\": inputParam.nFlag,\r\n                ninstrumentmaintenancecode: instrumentMaintenance.ninstrumentmaintenancecode,\r\n                userinfo: inputParam.userInfo\r\n            }))\r\n        }\r\n\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                let masterData = inputParam.masterData\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response[0].data\r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getDataForAddEditMaintenance = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\r\n    return function (dispatch) {\r\n        if(masterData.selectedInstrument.ninstrumentstatus!==transactionStatus.Disposed){\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        \r\n        const LastMaintenanceDateService =\r\n                rsapi.post(\"instrument/getInstrumentLastMaintenanceDate\", {\r\n                    \"userinfo\": userInfo,\r\n                    ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\r\n        });\r\n        \r\n        const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceStatus\", {\r\n            \"userinfo\": userInfo  \r\n         });\r\n\r\n        if (operation === \"create\") {\r\n            const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 1,\r\n                ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\r\n            });\r\n\r\n            urlArray = [maintenanceStatusService, LastMaintenanceDateService, timeZoneService, maintenanceValidationService];\r\n\r\n        } else {\r\n            const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\r\n                ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\r\n            });\r\n\r\n            const MaintenanceById = rsapi.post(\"instrument/getActiveInstrumentMaintenanceById\", {\r\n                [primaryKeyName]: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\r\n                \"userinfo\": userInfo\r\n            });\r\n\r\n            urlArray = [maintenanceStatusService, LastMaintenanceDateService, timeZoneService, maintenanceValidationService, MaintenanceById];\r\n\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let MaintenanceStatus = [];\r\n                let TimeZoneList = [];\r\n                if (response[3].data.OpenCloseStatus === \"Success\") {\r\n                    let selectedRecord = {};\r\n                    let MaintenanceData = [];\r\n\r\n                    const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\",\r\n                        \"stransstatus\", undefined, undefined, false);\r\n\r\n                        MaintenanceStatus = maintenanceMap.get(\"OptionList\");\r\n                    let Action;\r\n                    let ntzlastmaintenancedate = [];\r\n                    let ntzduedate = [];\r\n                    const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, false);\r\n\r\n                    TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                    if (operation === \"create\") {\r\n                        selectedRecord = {\r\n                            \"ntzlastmaintenancedate\": {\r\n                                \"value\": userInfo.ntimezonecode,\r\n                                \"label\": userInfo.stimezoneid\r\n                            },\r\n                            \"stzlastmaintenancedate\": userInfo.stimezoneid,\r\n\r\n                            \"ntzduedate\": {\r\n                                \"value\": userInfo.ntimezonecode,\r\n                                \"label\": userInfo.stimezoneid\r\n                            },\r\n                            \"stzduedate\": userInfo.stimezoneid\r\n                        };\r\n                        let date = rearrangeDateFormat(userInfo, response[1].data.date);\r\n                        selectedRecord[\"dlastmaintenancedate\"] = date;\r\n                        selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, new Date());\r\n                        Action = 'Add';\r\n\r\n                    }\r\n                    if (operation === \"update\") {\r\n                        Action = 'Edit';\r\n\r\n                        MaintenanceData.push({\r\n                            \"value\": response[4].data[\"nmaintenancestatus\"],\r\n                            \"label\": response[4].data[\"stransdisplaystatus\"]\r\n                        });\r\n                        selectedRecord = response[4].data;\r\n                        selectedRecord[\"ntranscode\"] = MaintenanceData[0];\r\n\r\n                        ntzlastmaintenancedate.push({\r\n                            \"value\": response[4].data[\"ntzlastmaintenancedate\"],\r\n                            \"label\": response[4].data[\"stzlastmaintenancedate\"]\r\n                        });\r\n                        ntzduedate.push({\r\n                            \"value\": response[4].data[\"ntzduedate\"],\r\n                            \"label\": response[4].data[\"stzduedate\"]\r\n                        });\r\n                        selectedRecord[\"ntzlastmaintenancedate\"] = ntzlastmaintenancedate[0];\r\n                        selectedRecord[\"ntzduedate\"] = ntzduedate[0];\r\n                        if (response[4].data[\"slastmaintenancedate\"] !== \"\") {\r\n\r\n                            selectedRecord[\"dlastmaintenancedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"slastmaintenancedate\"]); //new Date(response[7].data[\"smanufacdate\"]);\r\n                        }\r\n                        if (response[4].data[\"sduedate\"] !== \"\") {\r\n\r\n                            selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"sduedate\"]); //new Date(response[7].data[\"smanufacdate\"]);\r\n                        }\r\n\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            MaintenanceStatus,\r\n                            Action: Action,\r\n                            TimeZoneList,\r\n                            selectedRecord: selectedRecord,\r\n                            isOpen: true,\r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            // openModal: true,\r\n                            openChildModal: true,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false,\r\n                            popUp:\"\"\r\n                        }\r\n                    });\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[3].data.Status\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {  \r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n            \r\n            \r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n        }\r\n        else{\r\n            toast.warn(intl.formatMessage({ id: \"IDS_DISPOSEDINSTRUMENT\"}));\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const OpenDate = (screenName, userInfo, ncontrolCode, selectedRecord, masterData) => {\r\n    return function (dispatch) {\r\n        if(masterData.selectedInstrument.ninstrumentstatus!==transactionStatus.Disposed){\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo: userInfo\r\n        });\r\n\r\n        if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n            const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 3,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\r\n                ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\r\n            });\r\n\r\n            const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationOpenDateStatus\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\r\n                ninstrumentcode:masterData.selectedInstrumentCalibration.ninstrumentcode\r\n            });\r\n            urlArray = [calibrationStatusService, timeZoneService, UTCtimeZoneService, calibrationValidationService];\r\n        } else {\r\n            const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 3,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\r\n                ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\r\n            });\r\n\r\n            const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceOpenCloseDateStatus\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\r\n                ninstrumentcode:masterData.selectedInstrumentMaintenance.ninstrumentcode\r\n\r\n            });\r\n            urlArray = [maintenanceStatusService, timeZoneService, UTCtimeZoneService, maintenanceValidationService];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (response[3].data.OpenCloseStatus === \"Success\") {\r\n\r\n                    let CalibrationStatus = {};\r\n                    let MaintenanceStatus = {};\r\n\r\n                    let selectedRecord = {};\r\n                    const timezoneMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, false);\r\n\r\n                    const TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                    selectedRecord = {\r\n                        \"ntzopendate\": {\r\n                            \"value\": userInfo.ntimezonecode,\r\n                            \"label\": userInfo.stimezoneid\r\n                        },\r\n                        \"stzopendate\": userInfo.stimezoneid,\r\n                    };\r\n                    let popUp=\"\"\r\n                    let date = rearrangeDateFormat(userInfo, response[2].data);\r\n                    selectedRecord[\"dopendate\"] = date;\r\n                    if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n                        const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\",\r\n                            \"stransstatus\", undefined, undefined, false);\r\n\r\n                        CalibrationStatus = calibrationMap.get(\"OptionList\");\r\n                     popUp=\"IDS_INSTRUMENTCALIBRATIONOPENDATE\"\r\n                    //  let CalibrationData=[];\r\n                    //  CalibrationData.push(response[0].data.CalibrationStatus[1]);\r\n                    //  CalibrationData.push({\r\n                    //     \"value\": response[0].data.CalibrationStatus[1].ntranscode,\r\n                    //     \"label\": response[0].data.CalibrationStatus[1].stransdisplaystatus\r\n                    // });\r\n                     \r\n                    //  selectedRecord[\"ntranscode\"] = CalibrationData[0];\r\n                        \r\n                    } else {\r\n                        const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\",\r\n                            \"stransstatus\", undefined, undefined, false);\r\n\r\n                        MaintenanceStatus = maintenanceMap.get(\"OptionList\");\r\n                        popUp=\"IDS_INSTRUMENTMAINTENANCEOPENDATE\"\r\n\r\n                    }\r\n\r\n                    let operation = \"create\";\r\n                    let modalTitle = \"IDS_OPENDATE\";\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            isOpen: true,\r\n                            selectedRecord: selectedRecord,\r\n                            operation: operation,\r\n                            modalTitle: modalTitle,\r\n                            CalibrationStatus: CalibrationStatus,\r\n                            MaintenanceStatus: MaintenanceStatus,\r\n                            TimeZoneList: TimeZoneList,\r\n                            screenName: screenName,\r\n                            modalShow: true,\r\n                            ncontrolCode: ncontrolCode,\r\n                            popUp:popUp,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[3].data.Status\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n        }\r\n        else{                    toast.warn(intl.formatMessage({ id: \"IDS_DISPOSEDINSTRUMENT\"}));\r\n    }\r\n    }\r\n}\r\nexport const CloseDate = (screenName, userInfo, ncontrolCode, selectedRecord, masterData) => {\r\n    return function (dispatch) {\r\n        if(masterData.selectedInstrument.ninstrumentstatus!==transactionStatus.Disposed){\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo: userInfo\r\n        });\r\n\r\n        if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n            const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 4,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\r\n                ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\r\n            });\r\n\r\n            const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationOpenDateStatus\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\r\n                ninstrumentcode:masterData.selectedInstrumentCalibration.ninstrumentcode\r\n\r\n            });\r\n            urlArray = [calibrationStatusService, timeZoneService, UTCtimeZoneService, calibrationValidationService];\r\n        } else {\r\n            const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 4,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\r\n                ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\r\n            });\r\n\r\n            const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceOpenCloseDateStatus\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\r\n                ninstrumentcode:masterData.selectedInstrumentMaintenance.ninstrumentcode\r\n            });\r\n            urlArray = [maintenanceStatusService, timeZoneService, UTCtimeZoneService, maintenanceValidationService];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (response[3].data.OpenCloseStatus === \"Success\") {\r\n\r\n                    let CalibrationStatus = [];\r\n                    let MaintenanceStatus = {};\r\n\r\n                    let selectedRecord = {};\r\n                    \r\n                    const timezoneMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, false);\r\n\r\n                    const TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                    selectedRecord = {\r\n                        \"ntzclosedate\": {\r\n                            \"value\": userInfo.ntimezonecode,\r\n                            \"label\": userInfo.stimezoneid\r\n                        },\r\n                        \"stzclosedate\": userInfo.stimezoneid,\r\n                    };\r\n                    let date = rearrangeDateFormat(userInfo, response[2].data);\r\n                    selectedRecord[\"dclosedate\"] = date;\r\n                    let popUp=\"\"\r\n                    if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n                        const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\",\r\n                            \"stransstatus\", undefined, undefined, false);\r\n\r\n                        CalibrationStatus = calibrationMap.get(\"OptionList\");\r\n\r\n                        popUp=\"IDS_INSTRUMENTCALIBRATIONCLOSEDATE\"\r\n\r\n                    //     let CalibrationData=[];\r\n                    //  CalibrationData.push({\r\n                    //     \"value\": response[0].data.CalibrationStatus[0].ntranscode,\r\n                    //     \"label\": response[0].data.CalibrationStatus[0].stransstatus\r\n                    // });\r\n                     \r\n                    // selectedRecord[\"ntranscode\"] = CalibrationData[0];\r\n                    //selectedRecord.ntranscode=CalibrationData[0];\r\n                    } else {\r\n                        const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\",\r\n                            \"stransstatus\", undefined, undefined, false);\r\n\r\n                        MaintenanceStatus = maintenanceMap.get(\"OptionList\");\r\n\r\n                        popUp=\"IDS_INSTRUMENTMAINTENANCECLOSEDATE\"\r\n\r\n                    }\r\n                    let operation = \"create\";\r\n                    let modalTitle = \"IDS_CLOSEDATE\";\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            isOpen: true,\r\n                            selectedRecord: selectedRecord,\r\n                            operation: operation,\r\n                            modalTitle: modalTitle,\r\n                            CalibrationStatus: CalibrationStatus,\r\n                            MaintenanceStatus: MaintenanceStatus,\r\n                            TimeZoneList: TimeZoneList,\r\n                            screenName: screenName,\r\n                            modalShow: true,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false,\r\n                            popUp:popUp\r\n                        }\r\n                    });\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[3].data.Status\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n        }\r\n        else{\r\n            toast.warn(intl.formatMessage({ id: \"IDS_DISPOSEDINSTRUMENT\"}));\r\n        }\r\n    }\r\n}\r\nexport function getInstrumentSiteSection(nregionalsitecode, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n            dispatch(initRequest(true));\r\n            let url = \"/instrument/getSiteBasedSection\";\r\n            return rsapi.post(url, {\r\n                    \"userinfo\": userInfo,\"nsitecode\":nregionalsitecode\r\n                })\r\n                .then(response => {\r\n                    const secMap = constructOptionList(response.data || [], \"nsectioncode\",\r\n                        \"ssectionname\", undefined, undefined, false);\r\n                    const Lab = secMap.get(\"OptionList\");\r\n                    selectedRecord[\"nsectioncode\"] = undefined;\r\n                    selectedRecord[\"nusercode\"] = undefined;\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            Lab,\r\n                            selectedRecord,\r\n                            nsitecode: nregionalsitecode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n       \r\n    }\r\n}\r\n\r\n//Added by sonia on 30th Sept 2024 for Jira idL:ALPD-4940\r\nexport function updateAutoCalibration(masterData, userInfo, controlId) {\r\n    return function (dispatch) {\r\n            dispatch(initRequest(true));\r\n            const url = \"/instrument/updateAutoCalibrationInstrument\";\r\n            return rsapi.post(url, {\"ninstrumentcode\":masterData.selectedInstrument.ninstrumentcode,\r\n                \"nautocalibration\":masterData.selectedInstrument.nautocalibration,\r\n                \"userinfo\": userInfo\r\n                })\r\n                .then(response => {\r\n                    masterData = {\r\n                       ...masterData,                    \r\n                        selectedInstrument :response.data && response.data.selectedInstrument,\r\n                        instrumentCalibration :response.data && response.data.instrumentCalibration,\r\n                        selectedInstrumentCalibration : response.data && response.data.selectedInstrumentCalibration\r\n\r\n\r\n                    }\r\n                    \r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    console.log(\"error\");\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n       \r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}