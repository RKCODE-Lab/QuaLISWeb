{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\RegistrationType.jsx\";\nimport React from 'react';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { callService, crudMaster, showRegTypeAddScreen, fetchRegTypeById, updateStore, validateEsignCredential } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { showEsign, getControlMap } from '../../components/CommonScript';\nimport Esign from '../../pages/audittrail/Esign';\nimport { transactionStatus } from '../../components/Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass RegistrationType extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      let selectedId = null;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        selectedId = this.state.selectedRecord.nregtypecode;\n        dataState = this.state.dataState;\n        inputData[\"registrationtype\"] = {\n          \"nregtypecode\": this.state.selectedRecord.nregtypecode ? this.state.selectedRecord.nregtypecode : -1,\n          \"nsampletypecode\": this.state.selectedRecord.nsampletypecode,\n          \"sregtypename\": this.state.selectedRecord.sregtypename,\n          \"sdescription\": this.state.selectedRecord.sdescription // \"nmandatory\":this.state.selectedRecord.nmandatory,\n          // \"nchecklistcomponentcode\":this.state.selectedRecord.nchecklistcomponentcode?this.state.selectedRecord.nchecklistcomponentcode:-1,\n          // \"squestiondata\":parseInt(this.state.selectedRecord.nchecklistcomponentcode)===1||\n          //                 parseInt(this.state.selectedRecord.nchecklistcomponentcode)===4||\n          //                 parseInt(this.state.selectedRecord.nchecklistcomponentcode)===8?\n          //                 this.state.selectedRecord.squestiondata\n          //                 :\"\",\n          // \"nsitecode\":this.props.Login.userInfo.nmastersitecode\n\n        };\n      } else {\n        //add               \n        inputData[\"registrationtype\"] = {\n          \"nsampletypecode\": this.state.selectedRecord.nsampletypecode ? this.state.selectedRecord.nsampletypecode : -1,\n          \"sregtypename\": this.state.selectedRecord.sregtypename,\n          \"sdescription\": this.state.selectedRecord.sdescription // \"nmandatory\":this.state.selectedRecord.nmandatory,\n          // \"nchecklistcomponentcode\":this.state.selectedRecord.nchecklistcomponentcode?this.state.selectedRecord.nchecklistcomponentcode:-1,\n          // \"squestiondata\":parseInt(this.state.selectedRecord.nchecklistcomponentcode)===1||\n          //                 parseInt(this.state.selectedRecord.nchecklistcomponentcode)===4||\n          //                 parseInt(this.state.selectedRecord.nchecklistcomponentcode)===8?\n          //                 this.state.selectedRecord.squestiondata\n          //                 :\"\",\n          // \"nsitecode\":this.props.Login.userInfo.nmastersitecode\n\n        };\n      }\n\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState,\n        selectedId\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        dataState: this.state.dataState,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: {\n          \"registrationtype\": deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: deleteParam.operation,\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName,\n            optionsSampleType: this.props.Login.optionsSampleType //,\n            //optionsChecklistComponent:this.props.Login.optionsChecklistComponent\n\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const {\n        selectedRecord\n      } = this.state || {};\n\n      if (comboData) {\n        fieldName = 'nsampletypecode';\n        selectedRecord['SampleTypes'] = comboData;\n        selectedRecord[fieldName] = comboData.value;\n      } else {\n        fieldName = 'nsampletypecode';\n        selectedRecord['SampleTypes'] = comboData;\n        selectedRecord[fieldName] = \"\";\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.handleClose = this.handleClose.bind(this);\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      dataResult: [],\n      dataState: _dataState,\n      action: \"\",\n      mandatoryFields: [{\n        \"idsName\": \"IDS_SAMPLETYPENAME\",\n        \"dataField\": \"ssampletypename\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_REGISTRATIONTYPENAME\",\n        \"dataField\": \"sregtypename\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_DESCRIPTION\",\n        \"dataField\": \"sdescription\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }]\n    };\n  }\n\n  //to close side out\n  handleClose() {\n    let loadEsign = this.props.Login.loadEsign;\n    let openModal = this.props.Login.openModal;\n    let selectedRecord = this.props.Login.selectedRecord;\n\n    if (this.props.Login.loadEsign) {\n      if (this.props.Login.operation === \"delete\") {\n        loadEsign = false;\n        openModal = false;\n      } else {\n        loadEsign = false;\n      }\n    } else {\n      openModal = false;\n      selectedRecord = {};\n    }\n\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        openModal,\n        loadEsign,\n        selectedRecord,\n        optionsChecklistComponent: [],\n        optionsSampleType: []\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      //this.extractedColumnList =[\"schecklistqbcategoryname\",\"squestion\",\"scomponentname\",\"smandatory\",\"squestiondata\"]\n      this.extractedColumnList = [{\n        \"idsName\": \"IDS_SAMPLETYPENAME\",\n        \"dataField\": \"ssampletypename\",\n        \"width\": \"250px\"\n      }, {\n        \"idsName\": \"IDS_REGISTRATIONTYPENAME\",\n        \"dataField\": \"sregtypename\",\n        \"width\": \"250px\"\n      }, {\n        \"idsName\": \"IDS_DESCRIPTION\",\n        \"dataField\": \"sdescription\",\n        \"width\": \"150px\"\n      }];\n      primaryKeyField = \"nregtypecode\";\n    }\n\n    const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddRegistrationType\") && this.state.controlMap.get('AddRegistrationType').ncontrolcode;\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"EditRegistrationType\") && this.state.controlMap.get('EditRegistrationType').ncontrolcode;\n    const editParam = {\n      screenName: \"RegistrationType\",\n      operation: \"update\",\n      primaryKeyField: primaryKeyField,\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      screenName: \"RegistrationType\",\n      methodUrl: \"RegistrationType\",\n      operation: \"delete\",\n      key: 'registrationtype'\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 21\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      fetchRecord: this.props.fetchRegTypeById,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      pageable: true,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      gridHeight: '600px',\n      scrollable: \"scrollable\",\n      selectedId: this.props.Login.selectedId,\n      addRecord: () => this.props.showRegTypeAddScreen(this.props.Login.userInfo, addID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 29\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: this.props.Login.inputParam.displayName,\n      closeModal: this.handleClose,\n      show: this.props.Login.openModal,\n      showSaveContinue: true,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord,\n      mandatoryFields: this.state.mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation ? this.props.Login.operation : '',\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 21\n        }\n      }) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        name: \"nsampletypecode\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_SAMPLETYPENAME\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        value: this.state.selectedRecord.SampleTypes ? this.state.selectedRecord.SampleTypes : [],\n        options: this.props.Login.optionsSampleType ? this.props.Login.optionsSampleType : [],\n        optionId: \"nsampletypecode\",\n        optionValue: \"ssampletypename\",\n        isMandatory: true,\n        required: true,\n        as: \"select\",\n        onChange: event => this.onComboChange(event, \"nsampletypecode\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(FormTextarea, {\n        name: \"sregtypename\",\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_REGISTRATIONTYPENAME\"\n        }),\n        onChange: event => this.onInputOnChange(event),\n        className: \"\",\n        isMandatory: true,\n        rows: \"1\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_REGISTRATIONTYPENAME\"\n        }),\n        type: \"textarea\",\n        required: true,\n        defaultValue: this.state.selectedRecord ? this.state.selectedRecord.sregtypename : \"\",\n        maxLength: \"255\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(FormTextarea, {\n        name: \"sdescription\",\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_DESCRIPTION\"\n        }),\n        onChange: event => this.onInputOnChange(event),\n        className: \"\",\n        isMandatory: true,\n        rows: \"1\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_DESCRIPTION\"\n        }),\n        type: \"textarea\",\n        required: true,\n        defaultValue: this.state.selectedRecord ? this.state.selectedRecord.sdescription : \"\",\n        maxLength: \"255\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 29\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 13\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        if (this.props.Login.operation === \"create\" && this.props.Login.inputParam.saveType === 2) {\n          this.props.Login.inputParam.formRef.current.reset();\n        }\n\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState,\n          selectedRecord: {\n            sregtypename: '',\n            sdescription: '',\n            nmandatory: transactionStatus.NO\n          }\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      let mandatoryFields = this.props.Login.mandatoryFields ? this.props.Login.mandatoryFields : [{\n        \"idsName\": \"IDS_SAMPLETYPENAME\",\n        \"dataField\": \"SampleTypes\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_REGISTRATIONTYPENAME\",\n        \"dataField\": \"sregtypename\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_DESCRIPTION\",\n        \"dataField\": \"sdescription\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }];\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord,\n        mandatoryFields\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  showRegTypeAddScreen,\n  fetchRegTypeById,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(RegistrationType));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/basemaster/RegistrationType.jsx"],"names":["React","ListWrapper","Row","Col","toast","process","connect","injectIntl","callService","crudMaster","showRegTypeAddScreen","fetchRegTypeById","updateStore","validateEsignCredential","DEFAULT_RETURN","DataGrid","FormTextarea","FormSelectSearch","SlideOutModal","showEsign","getControlMap","Esign","transactionStatus","mapStateToProps","state","Login","RegistrationType","Component","constructor","props","dataStateChange","event","setState","dataResult","masterData","dataState","onSaveClick","saveType","formRef","inputData","selectedId","userInfo","undefined","operation","selectedRecord","nregtypecode","nsampletypecode","sregtypename","sdescription","inputParam","methodUrl","classUrl","displayName","userRoleControlRights","nformcode","ncontrolcode","updateInfo","typeName","data","loadEsign","screenData","deleteRecord","deleteParam","ncontrolCode","openModal","screenName","optionsSampleType","reloadData","userinfo","validateEsign","sreason","password","onInputOnChange","target","type","name","checked","YES","NO","value","onComboChange","comboData","fieldName","createRef","extractedColumnList","handleClose","bind","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","action","mandatoryFields","optionsChecklistComponent","getDerivedStateFromProps","warn","render","primaryKeyField","addID","has","get","editId","editParam","key","intl","formatMessage","id","SampleTypes","componentDidUpdate","previousProps","Object","values","map","item","push","current","reset","nmandatory","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {ListWrapper} from  '../../components/client-group.styles'\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { callService, crudMaster ,showRegTypeAddScreen,fetchRegTypeById,updateStore,validateEsignCredential} from '../../actions';\r\nimport {DEFAULT_RETURN} from '../../actions/LoginTypes';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {showEsign,getControlMap} from '../../components/CommonScript';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass RegistrationType  extends React.Component\r\n{\r\n    constructor(props){\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.handleClose = this.handleClose.bind(this);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data:[], masterStatus:\"\", error:\"\", selectedRecord:{},userRoleControlRights:[],controlMap:new Map(),\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            action:\"\",\r\n            mandatoryFields:[\r\n                {\"idsName\":\"IDS_SAMPLETYPENAME\",\"dataField\":\"ssampletypename\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                {\"idsName\":\"IDS_REGISTRATIONTYPENAME\",\"dataField\":\"sregtypename\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                {\"idsName\":\"IDS_DESCRIPTION\",\"dataField\":\"sdescription\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            ]\r\n        };  \r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    \r\n    //to close side out\r\n    handleClose (){\r\n        \r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign){          \r\n            if (this.props.Login.operation === \"delete\"){\r\n                loadEsign = false;\r\n                openModal =  false;\r\n            }\r\n            else{\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else{\r\n            openModal =  false;\r\n            selectedRecord ={};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {openModal, loadEsign, selectedRecord,optionsChecklistComponent:[],optionsSampleType:[]}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    };\r\n\r\n    //to open side out\r\n   \r\n    //to perform save action for both add and edit\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let selectedId=null;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState=undefined;\r\n        if ( this.props.Login.operation === \"update\"){\r\n            // edit\r\n            selectedId=this.state.selectedRecord.nregtypecode\r\n            dataState=this.state.dataState\r\n            inputData[\"registrationtype\"] = {\r\n                \"nregtypecode\":this.state.selectedRecord.nregtypecode?this.state.selectedRecord.nregtypecode:-1,\r\n                \"nsampletypecode\":this.state.selectedRecord.nsampletypecode,\r\n                \"sregtypename\":this.state.selectedRecord.sregtypename,\r\n                \"sdescription\":this.state.selectedRecord.sdescription,\r\n                // \"nmandatory\":this.state.selectedRecord.nmandatory,\r\n                // \"nchecklistcomponentcode\":this.state.selectedRecord.nchecklistcomponentcode?this.state.selectedRecord.nchecklistcomponentcode:-1,\r\n                // \"squestiondata\":parseInt(this.state.selectedRecord.nchecklistcomponentcode)===1||\r\n                //                 parseInt(this.state.selectedRecord.nchecklistcomponentcode)===4||\r\n                //                 parseInt(this.state.selectedRecord.nchecklistcomponentcode)===8?\r\n                //                 this.state.selectedRecord.squestiondata\r\n                //                 :\"\",\r\n                // \"nsitecode\":this.props.Login.userInfo.nmastersitecode\r\n            }   \r\n        }\r\n        else{\r\n            //add               \r\n            inputData[\"registrationtype\"] =\r\n                {\r\n                \"nsampletypecode\":this.state.selectedRecord.nsampletypecode?this.state.selectedRecord.nsampletypecode:-1,\r\n                \"sregtypename\":this.state.selectedRecord.sregtypename,\r\n                \"sdescription\":this.state.selectedRecord.sdescription,\r\n                // \"nmandatory\":this.state.selectedRecord.nmandatory,\r\n                // \"nchecklistcomponentcode\":this.state.selectedRecord.nchecklistcomponentcode?this.state.selectedRecord.nchecklistcomponentcode:-1,\r\n                // \"squestiondata\":parseInt(this.state.selectedRecord.nchecklistcomponentcode)===1||\r\n                //                 parseInt(this.state.selectedRecord.nchecklistcomponentcode)===4||\r\n                //                 parseInt(this.state.selectedRecord.nchecklistcomponentcode)===8?\r\n                //                 this.state.selectedRecord.squestiondata\r\n                //                 :\"\",\r\n                // \"nsitecode\":this.props.Login.userInfo.nmastersitecode\r\n            };         \r\n        }   \r\n                \r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl:this.props.Login.inputParam.classUrl,\r\n            displayName:this.props.Login.inputParam.displayName?this.props.Login.inputParam.displayName:'',\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef,dataState,selectedId    \r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        \r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)){\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign:true, screenData:{inputParam, masterData}, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else{\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n       }\r\n              \r\n    }\r\n    //to get the edit record\r\n    \r\n    //to delete a recoed\r\n    deleteRecord = (deleteParam) =>{\r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            dataState:this.state.dataState,\r\n            displayName:this.props.Login.inputParam.displayName?this.props.Login.inputParam.displayName:'',\r\n            inputData: {\"registrationtype\" :deleteParam.selectedRecord,\r\n                        \"userinfo\": this.props.Login.userInfo},\r\n                        operation :deleteParam.operation     \r\n                    }       \r\n                            \r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode,deleteParam.ncontrolCode)){\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign:true, screenData:{inputParam, masterData},operation:deleteParam.operation,openModal:true,\r\n                        screenName:this.props.Login.inputParam.displayName,optionsSampleType:this.props.Login.optionsSampleType//,\r\n                        //optionsChecklistComponent:this.props.Login.optionsChecklistComponent\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else{\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n    }\r\n\r\n    //to reload data\r\n    reloadData = () =>{\r\n        const inputParam = {\r\n            inputData : {userinfo: this.props.Login.userInfo},\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName:this.props.Login.inputParam.displayName?this.props.Login.inputParam.displayName:'',\r\n            userInfo: this.props.Login.userInfo\r\n            };\r\n                            \r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    validateEsign = () =>{\r\n        const inputParam = {\r\n                                inputData: {\"userinfo\": {...this.props.Login.userInfo, \r\n                                                        sreason: this.state.selectedRecord[\"esigncomments\"] },\r\n                                             password : this.state.selectedRecord[\"esignpassword\"]\r\n                                            },\r\n                                screenData : this.props.Login.screenData\r\n                            }        \r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    static getDerivedStateFromProps(props, state){\r\n    \r\n        if (props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";           \r\n        } \r\n         \r\n        if (props.Login.error !== state.error){\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }   \r\n        return null;\r\n     }\r\n     \r\n     render(){\r\n        let primaryKeyField = \"\";\r\n        if (this.props.Login.inputParam !== undefined){\r\n            //this.extractedColumnList =[\"schecklistqbcategoryname\",\"squestion\",\"scomponentname\",\"smandatory\",\"squestiondata\"]\r\n            this.extractedColumnList=[\r\n                    {\"idsName\":\"IDS_SAMPLETYPENAME\",\"dataField\":\"ssampletypename\",\"width\":\"250px\"},\r\n                    {\"idsName\":\"IDS_REGISTRATIONTYPENAME\",\"dataField\":\"sregtypename\",\"width\":\"250px\"},\r\n                    {\"idsName\":\"IDS_DESCRIPTION\",\"dataField\":\"sdescription\",\"width\":\"150px\"},       \r\n                ]\r\n            primaryKeyField = \"nregtypecode\";\r\n        }\r\n\r\n        const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddRegistrationType\")\r\n                        && this.state.controlMap.get('AddRegistrationType').ncontrolcode;\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"EditRegistrationType\")\r\n                        && this.state.controlMap.get('EditRegistrationType').ncontrolcode;\r\n        const editParam = {screenName:\"RegistrationType\", operation:\"update\",  primaryKeyField:primaryKeyField, \r\n                        masterData:this.props.Login.masterData,   userInfo:this.props.Login.userInfo, ncontrolCode:editId};\r\n\r\n        const deleteParam ={screenName:\"RegistrationType\", methodUrl:\"RegistrationType\", operation:\"delete\",key:'registrationtype'};\r\n        \r\n        return(\r\n            <>\r\n            <Row>\r\n                <Col>\r\n                    <ListWrapper className=\"client-list-content\">\r\n                        {this.state.data ?\r\n                            <DataGrid\r\n                                primaryKeyField = {primaryKeyField}\r\n                                data={this.state.data}\r\n                                dataResult = {this.state.dataResult}\r\n                                dataState = {this.state.dataState}\r\n                                dataStateChange = {this.dataStateChange}\r\n                                extractedColumnList = {this.extractedColumnList}\r\n                                fetchRecord = {this.props.fetchRegTypeById}\r\n                                deleteRecord = {this.deleteRecord}\r\n                                reloadData = {this.reloadData}\r\n                                controlMap = {this.state.controlMap}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                userInfo={this.props.Login.userInfo} \r\n                                editParam={editParam}\r\n                                deleteParam={deleteParam}\r\n                                pageable={true}\r\n                                isActionRequired={true}\r\n                                isToolBarRequired={true}\r\n                                gridHeight = {'600px'}\r\n                                scrollable={\"scrollable\"}\r\n                                selectedId={this.props.Login.selectedId}\r\n                                addRecord={()=>this.props.showRegTypeAddScreen(this.props.Login.userInfo,addID)}\r\n                            />\r\n                        :\"\"}    \r\n                    \r\n                    </ListWrapper>\r\n                </Col>\r\n            </Row>\r\n            {this.props.Login.openModal?\r\n            <SlideOutModal\r\n                onSaveClick={this.onSaveClick}\r\n                operation={this.props.Login.operation}\r\n                screenName={this.props.Login.inputParam.displayName}\r\n                closeModal={this.handleClose}\r\n                show={this.props.Login.openModal}\r\n                showSaveContinue={true}\r\n                inputParam={this.props.Login.inputParam}\r\n                esign={this.props.Login.loadEsign}\r\n                validateEsign={this.validateEsign}\r\n                selectedRecord={this.state.selectedRecord}\r\n                mandatoryFields={this.state.mandatoryFields}\r\n                addComponent={this.props.Login.loadEsign ? \r\n                    <Esign  operation={this.props.Login.operation?this.props.Login.operation:''}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}                                               \r\n                            selectedRecord={this.state.selectedRecord ||{}}\r\n                            />\r\n                  :\r\n                    <Row> \r\n                        <Col md={12}>\r\n                            <FormSelectSearch\r\n                            name={\"nsampletypecode\"}\r\n                            formLabel={this.props.intl.formatMessage({ id:\"IDS_SAMPLETYPENAME\"})}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            value={this.state.selectedRecord.SampleTypes?this.state.selectedRecord.SampleTypes:[]}\r\n                            options={this.props.Login.optionsSampleType?this.props.Login.optionsSampleType:[]}\r\n                            optionId=\"nsampletypecode\"\r\n                            optionValue=\"ssampletypename\"\r\n                            isMandatory={true}\r\n                            required={true}\r\n                            as={\"select\"}\r\n                            onChange={(event)=>this.onComboChange(event,\"nsampletypecode\")}\r\n                            />\r\n                            <FormTextarea\r\n                            name={\"sregtypename\"}\r\n                            placeholder={this.props.intl.formatMessage({ id:\"IDS_REGISTRATIONTYPENAME\"})}\r\n                            onChange={(event)=>this.onInputOnChange(event)}\r\n                            className=\"\"\r\n                            isMandatory={true}\r\n                            rows=\"1\"\r\n                            label={this.props.intl.formatMessage({ id:\"IDS_REGISTRATIONTYPENAME\"})}\r\n                            type=\"textarea\"\r\n                            required={true}\r\n                            defaultValue ={this.state.selectedRecord?this.state.selectedRecord.sregtypename:\"\"}\r\n                            maxLength={\"255\"}\r\n                            />\r\n                            <FormTextarea\r\n                            name={\"sdescription\"}\r\n                            placeholder={this.props.intl.formatMessage({ id:\"IDS_DESCRIPTION\"})}\r\n                            onChange={(event)=>this.onInputOnChange(event)}\r\n                            className=\"\"\r\n                            isMandatory={true}\r\n                            rows=\"1\"\r\n                            label={this.props.intl.formatMessage({ id:\"IDS_DESCRIPTION\"})}\r\n                            type=\"textarea\"\r\n                            required={true}\r\n                            defaultValue ={this.state.selectedRecord?this.state.selectedRecord.sdescription:\"\"}\r\n                            maxLength={\"255\"}\r\n                            />\r\n                                                      \r\n                        </Col>\r\n                    </Row>\r\n                }/>\r\n                :\"\"}\r\n            </>\r\n            \r\n          );\r\n     }\r\n     \r\n     componentDidUpdate(previousProps){\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData){            \r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode){\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights){\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item=>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({userRoleControlRights, controlMap, data:this.props.Login.masterData, \r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState)});\r\n            }\r\n            else{\r\n                if (this.props.Login.operation === \"create\" && this.props.Login.inputParam.saveType === 2){\r\n                    this.props.Login.inputParam.formRef.current.reset();\r\n                } \r\n                let {dataState}=this.state;\r\n                if(this.props.Login.dataState===undefined){\r\n                    dataState={skip:0,take:this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n                } \r\n                this.setState({data:this.props.Login.masterData, \r\n                    dataResult: process(this.props.Login.masterData,dataState),\r\n                    dataState,\r\n                    selectedRecord:{sregtypename:'',sdescription:'',nmandatory:transactionStatus.NO}\r\n                });\r\n            }\r\n         }\r\n         else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord ){    \r\n            let mandatoryFields=this.props.Login.mandatoryFields?(this.props.Login.mandatoryFields):[\r\n                {\"idsName\":\"IDS_SAMPLETYPENAME\",\"dataField\":\"SampleTypes\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                {\"idsName\":\"IDS_REGISTRATIONTYPENAME\",\"dataField\":\"sregtypename\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                {\"idsName\":\"IDS_DESCRIPTION\",\"dataField\":\"sdescription\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            ]\r\n            this.setState({selectedRecord:this.props.Login.selectedRecord,mandatoryFields});\r\n         }       \r\n    }  \r\n    componentWillUnmount(){\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                 masterData :[], inputParam:undefined, operation:null,modalName:undefined\r\n                }\r\n            }\r\n        this.props.updateStore(updateInfo);\r\n    }    \r\n    onInputOnChange=(event)=>  {\r\n        \r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox')\r\n        {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else{\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({selectedRecord});\r\n        \r\n    }\r\n    onComboChange=(comboData,fieldName)=>  {\r\n        const {selectedRecord} = this.state || {};\r\n        if(comboData){     \r\n            \r\n            fieldName='nsampletypecode';\r\n            selectedRecord['SampleTypes']=comboData;\r\n            selectedRecord[fieldName] = comboData.value;\r\n        }\r\n        else{\r\n            fieldName='nsampletypecode';\r\n            selectedRecord['SampleTypes']=comboData;\r\n            selectedRecord[fieldName] = \"\";\r\n        }\r\n       \r\n        this.setState({selectedRecord});\r\n    }\r\n }\r\nexport default connect(mapStateToProps, {callService, crudMaster,showRegTypeAddScreen,fetchRegTypeById,\r\n    updateStore,validateEsignCredential})(injectIntl(RegistrationType ));"]},"metadata":{},"sourceType":"module"}