{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5294\\\\QuaLISWeb\\\\src\\\\pages\\\\testapproval\\\\SampleCertificationHistory.jsx\";\nimport React, { Component } from 'react';\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport { Row, Col, Card, FormGroup, FormLabel, Button } from 'react-bootstrap';\nimport { callService, crudMaster, updateStore, getSampleCertTypeChange, getSampleCertRegSubTypeChange, filterColumnData, getTestResultDataHistory, getActiveSampleHistory, generateCertificateAction, sentCertificateAction, correctionCertificateAction, xmlExportAction, getWholeFilterStatusHistory } from '../../actions';\nimport { getControlMap, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript';\nimport { constructOptionList, validateTwoDigitDate } from '../../components/CommonScript';\nimport ApprovalHistory from './ApprovalHistory';\nimport PrintHistory from './PrintHistory';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport Results from './Results';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport SampleCertificationHistoryFilter from './SampleCertificationHistoryFilter';\nimport { ReadOnlyText, ContentPanel, OutlineTransactionStatus, DecisionStatus } from '../../components/App.styles';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport TransactionListMaster from '../../components/TransactionListMaster';\nimport { designProperties } from '../../components/Enumeration';\nimport SplitterLayout from \"react-splitter-layout\";\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { ProductList } from '../product/product.styled';\nimport { process } from '@progress/kendo-data-query';\nimport { ReactComponent as RefreshIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/refresh.svg\";\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass SampleCertificationHistory extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSampleTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map[\"nsampletypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getSampleCertTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.onRegSubTypeChange = (comboData, fieldName) => {\n      const regSubTypeValue = this.state.regSubTypeValue || {};\n      regSubTypeValue[fieldName] = comboData;\n      this.setState({\n        regSubTypeValue\n      }); //this.props.getSampleCertRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\n    };\n\n    this.onFilterChange = (comboData, fieldName) => {\n      const FilterStatusValue = this.state.FilterStatusValue || {};\n      FilterStatusValue[fieldName] = comboData;\n      this.setState({\n        FilterStatusValue\n      }); //this.props.getSampleCertRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\n    };\n\n    this.onRegTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map[\"nregtypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getSampleCertRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.handleExpandChange = (row, dataState) => {\n      const viewParam = {\n        TransactionSampleResults: this.props.Login.masterData.TransactionSampleResults,\n        userInfo: this.props.Login.userInfo,\n        primaryKeyField: \"ntransactiontestcode\",\n        npreregno: \"npreregno\",\n        masterData: this.props.Login.masterData\n      };\n      this.props.getTestResultDataHistory({ ...viewParam,\n        dataState,\n        primaryKeyValue: row[\"dataItem\"][viewParam.primaryKeyField],\n        viewRow: row[\"dataItem\"]\n      });\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleFilterDateChange = (dateName, dateValue) => {\n      const {\n        selectedFilter\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedFilter[dateName] = dateValue;\n      this.setState({\n        selectedFilter\n      });\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      }); // setTimeout(() => { this._scrollBarRef.updateScroll() })\n    };\n\n    this.onFilterSubmit = () => {\n      let SampleTypeValue = this.state.SampleTypeValue ? this.state.SampleTypeValue.nsampletypecode : \"\";\n\n      if (SampleTypeValue) {\n        let RealSampleTypeValue = this.state.SampleTypeValue ? this.state.SampleTypeValue.nsampletypecode.label : \"\";\n        let RealRegTypeValue = this.state.RegTypeValue ? this.state.RegTypeValue.nregtypecode.label : \"\";\n        let RealRegSubTypeValue = this.state.regSubTypeValue ? this.state.regSubTypeValue.nregsubtypecode.label : \"\";\n        let RealFromDate = new Date(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate);\n        let RealToDate = new Date(this.state.selectedFilter.todate || this.props.Login.masterData.ToDate);\n        let inputData = {\n          nsampletypecode: this.state.SampleTypeValue.nsampletypecode.value,\n          nregtypecode: this.state.RegTypeValue.nregtypecode.value,\n          nregsubtypecode: this.state.regSubTypeValue.nregsubtypecode.value,\n          // nfilterstatus: this.state.FilterStatusValue.ntransactionstatus.value,\n          userinfo: this.props.Login.userInfo\n        };\n        let masterData = { ...this.props.Login.masterData,\n          RealSampleTypeValue,\n          RealRegTypeValue,\n          RealRegSubTypeValue,\n          RealFromDate,\n          RealToDate\n        };\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.RealFromDate, this.state.selectedFilter.todate || this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n        inputData['FromDate'] = obj.fromDate;\n        inputData['ToDate'] = obj.toDate;\n        this.props.getWholeFilterStatusHistory(masterData, inputData, \"FilterSubmit\", {\n          printHistoryDataState: this.state.printHistoryDataState,\n          appHistoryDataState: this.state.appHistoryDataState,\n          resultsDataState: this.state.resultsDataState\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.reloadData = () => {\n      let SampleTypeValue = this.state.SampleTypeValue ? this.state.SampleTypeValue.nsampletypecode : \"\";\n\n      if (SampleTypeValue) {\n        let inputData = {\n          nsampletypecode: this.state.SampleTypeValue.nsampletypecode.value,\n          nregtypecode: this.state.RegTypeValue.nregtypecode.value,\n          nregsubtypecode: this.props.Login.masterData.RegistrationSubTypeValue ? this.props.Login.masterData.RegistrationSubTypeValue.nregsubtypecode : this.state.regSubTypeValue ? this.state.regSubTypeValue.nregsubtypecode.value : \"\",\n          userinfo: this.props.Login.userInfo\n        };\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.RealFromDate, this.state.selectedFilter.todate || this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n        inputData['FromDate'] = obj.fromDate;\n        inputData['ToDate'] = obj.toDate; //let inputParam = { masterData, inputData }\n        // const FilterStatusValue ={ntransactionstatus: this.state.FilterStatusValue.ntransactionstatus?\n        //     this.state.FilterStatusValue.ntransactionstatus.label: \"\"};\n        // this.setState({FilterStatusValue});\n\n        this.props.getWholeFilterStatusHistory(this.props.Login.masterData, inputData, \"FilterSubmit\", {\n          printHistoryDataState: this.state.printHistoryDataState,\n          appHistoryDataState: this.state.appHistoryDataState,\n          resultsDataState: this.state.resultsDataState\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_APPROVALHISTORY\", /*#__PURE__*/React.createElement(ApprovalHistory, {\n        approvalHistory: this.props.Login.masterData.approvalHistory,\n        dataResult: process(this.props.Login.masterData.approvalHistory || [], this.state.appHistoryDataState),\n        dataState: this.props.Login.screenName === \"\" || this.props.Login.screenName === \"IDS_APPROVALHISTORY\" ? this.state.appHistoryDataState : {\n          skip: 0,\n          take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n        },\n        controlMap: this.state.controlMap,\n        userInfo: this.props.Login.userInfo,\n        dataStateChange: event => this.setState({\n          appHistoryDataState: event.dataState\n        }),\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_APPROVALHISTORY\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_PRINTHISTORY\", /*#__PURE__*/React.createElement(PrintHistory, {\n        printHistory: this.props.Login.masterData.printHistory,\n        dataResult: process(this.props.Login.masterData.printHistory || [], this.state.printHistoryDataState),\n        dataState: this.props.Login.screenName === \"\" || this.props.Login.screenName === \"IDS_PRINTHISTORY\" ? this.state.printHistoryDataState : {\n          skip: 0,\n          take: 10\n        },\n        controlMap: this.state.controlMap,\n        dataStateChange: event => this.setState({\n          printHistoryDataState: event.dataState\n        }),\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        screenName: \"IDS_PRINTHISTORY\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_RESULTS\", /*#__PURE__*/React.createElement(Results, {\n        TransactionSampleTests: this.props.Login.masterData.TransactionSampleTests,\n        dataResult: process(this.props.Login.masterData.TransactionSampleTests || [], this.state.resultsDataState),\n        dataState: this.props.Login.screenName === \"\" || this.props.Login.screenName === \"IDS_RESULTS\" ? this.state.resultsDataState : {\n          skip: 0,\n          take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n        },\n        controlMap: this.state.controlMap,\n        dataStateChange: event => this.setState({\n          resultsDataState: event.dataState\n        }),\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        handleExpandChange: this.handleExpandChange,\n        screenName: \"IDS_RESULTS\",\n        childList: this.props.Login.masterData.sampleTestResults,\n        childMappingField: \"ntransactiontestcode\",\n        hasChild: true // childList ={props.childList || new Map()}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }\n      })); //         tabMap.set(\"IDS_SAMPLEREPORTHISTORY\", <SampleReportHistory \n      //         userRoleControlRights={this.props.userRoleControlRights}\n      //         controlMap={this.props.controlMap}\n      //         inputParam={this.props.inputParam}\n      //         userInfo={this.props.userInfo}\n      //         masterData={this.props.masterData}\n      //         primaryList={\"ReportHistory\"}\n      //         dataResult={process(this.props.masterData[\"ReportHistory\"]||[], this.state.dataStateReportHistory)}\n      //         dataState={(this.props.screenName === undefined || this.props.screenName === \"IDS_BATCHREPORTHISTORY\") ? this.state.dataStateReportHistory : { skip: 0, take: 10 }}\n      //         dataStateChange={(event) => this.setState({ dataStateReportHistory: event.data })}\n      //         columnList={this.extractedReportHistoryColumnList}\n      //         methodUrl={\"Cetrificate\"}\n      //         isActionRequired={true}\n      //         selectedId={0}\n      //         expandField=\"\"\n      //         handleExpandChange={this.props.handleExpandChange}\n      //         hasChild={false}\n      //         childColumnList={this.TestColumnList}\n      //         childList ={this.props.childList || new Map()}\n      //         viewDownloadFile= {this.props.viewDownloadFile}\n      //         downloadParam = {{classUrl:\"certificategeneration\",operation:\"download\",methodUrl:\"Report\"}}\n      //         hasControlWithOutRights={true}\n      //         showDocViewer={true}\n      //         handleClickRegenrate={this.props.handleClickRegenrate}\n      //    />)\n\n      return tabMap;\n    };\n\n    const appHistoryDataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const resultsDataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const printHistoryDataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const dataStateReportHistory = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.searchSampleRef = React.createRef();\n    this.state = {\n      openModal: false,\n      masterStatus: \"\",\n      controlMap: new Map(),\n      error: \"\",\n      selectedRecord: {},\n      selectedFilter: {},\n      userRoleControlRights: [],\n      appHistoryDataState,\n      resultsDataState,\n      printHistoryDataState,\n      dataStateReportHistory,\n      skip: 0,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25\n    };\n    this.searchRef = React.createRef();\n    this.searchFieldList = [\"scomponentname\", \"sarno\", \"sproductname\", \"ssamplecertificateversioncode\", \"sversion\", \"smanufname\", \"sspecname\", \"nrmsno\", \"dtransactiondate\", \"smanuflotno\"];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.showConfirmAlert !== state.showConfirmAlert) {\n      return {\n        showConfirmAlert: props.Login.showConfirmAlert\n      };\n    } // if (props.Login.selectComponent !== state.selectComponent) {\n    //     return {\n    //         selectComponent: props.Login.selectComponent\n    //     }\n    // }\n\n\n    return null;\n  }\n\n  covertDatetoString(startDateValue, endDateValue) {\n    const startDate = new Date(startDateValue);\n    const endDate = new Date(endDateValue);\n    const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\n    const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\n    const prevDay = validateTwoDigitDate(String(startDate.getDate()));\n    const currentDay = validateTwoDigitDate(String(endDate.getDate()));\n    const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay;\n    const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay;\n    const fromDate = fromDateOnly + \"T00:00:00\";\n    const toDate = toDateOnly + \"T23:59:59\";\n    return {\n      fromDate,\n      toDate,\n      breadCrumbFrom: fromDateOnly,\n      breadCrumbto: toDateOnly\n    };\n  }\n\n  render() {\n    const {\n      SelectedRegistration,\n      searchedData,\n      Registration\n    } = this.props.Login.masterData; // if (Registration) {\n    //     sortData(Registration, \"descending\", \"nregcertificatecode\");\n    // }\n\n    const getSample = {\n      screenName: \"IDS_SAMPLECERTIFICATIONGENERATION\",\n      operation: \"get\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      methodUrl: \"SampleCertification\",\n      keyName: \"samplecertification\"\n    };\n    this.fromDate = this.state.selectedFilter[\"fromdate\"] && this.state.selectedFilter[\"fromdate\"] || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.RealFromDate);\n    this.toDate = this.state.selectedFilter[\"todate\"] && this.state.selectedFilter[\"todate\"] || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.RealToDate);\n    let obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.RealFromDate, this.state.selectedFilter.todate || this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n    this.breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": obj.breadCrumbFrom || this.state.RealFromDate\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": obj.breadCrumbto || this.state.RealToDate\n    }, {\n      \"label\": \"IDS_SAMPLETYPE\",\n      //\"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\n      \"value\": this.state.RealSampleTypeValue\n    }, {\n      \"label\": \"IDS_REGTYPE\",\n      \"value\": this.state.RealRegTypeValue\n    }, {\n      \"label\": \"IDS_REGSUBTYPE\",\n      \"value\": this.state.RealRegSubTypeValue\n    } // {\n    //     \"label\": \"IDS_FILTERSTATUS\",\n    //     \"value\": this.state.RealFilterValue\n    // }\n    ];\n    const filterParam = {\n      inputListName: \"Registration\",\n      selectedObject: \"SelectedRegistration\",\n      primaryKeyField: \"nregcertificatecode\",\n      fetchUrl: \"samplecertificationhistory/getSampleCertificationById\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 17\n      }\n    }, this.breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 25\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height sticky_head_parent\",\n      ref: parentHeight => {\n        this.parentHeight = parentHeight;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      secondaryInitialSize: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster, {\n      masterList: searchedData || Registration || [],\n      selectedMaster: [SelectedRegistration],\n      primaryKeyField: \"nregcertificatecode\",\n      getMasterDetail: SampleCertification => this.props.getActiveSampleHistory(SampleCertification, this.props.Login.userInfo, this.props.Login.masterData, {\n        printHistoryDataState: this.state.printHistoryDataState,\n        appHistoryDataState: this.state.appHistoryDataState,\n        resultsDataState: this.state.resultsDataState\n      }),\n      inputParam: getSample,\n      additionalParam: [],\n      mainField: \"scomponentname\" // selectedListName=\"smanuflotno\"\n      // objectName=\"sarno\"\n      ,\n      listName: \"IDS_SAMPLE\",\n      showStatusLink: true,\n      subFields: [{\n        [designProperties.VALUE]: \"smanuflotno\"\n      }, {\n        [designProperties.VALUE]: \"sarno\"\n      }] // moreField=\"sarno\"\n      //needValidation={false}\n      ,\n      needFilter: true,\n      filterColumnData: this.props.filterColumnData,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      handlePageChange: this.handlePageChange,\n      onFilterSubmit: this.onFilterSubmit,\n      skip: this.state.skip,\n      take: this.state.take,\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2 p-0\",\n        variant: \"link\",\n        onClick: () => this.reloadData(),\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(RefreshIcon, {\n        className: \"custom_icons\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 53\n        }\n      }))),\n      filterComponent: [{\n        \"IDS_SAMPLECERTIFICATEGENERATION\": /*#__PURE__*/React.createElement(SampleCertificationHistoryFilter, {\n          formatMessage: this.props.intl.formatMessage,\n          Product: this.props.Login.masterData.MAHProduct || [],\n          SampleType: this.state.SampleType || [],\n          RegistrationType: this.state.RegistrationType || [],\n          RegistrationSubType: this.state.RegistrationSubType || [],\n          FilterStatus: this.state.FilterList || [],\n          userInfo: this.props.Login.userInfo || {},\n          SampleTypeValue: this.state.SampleTypeValue || {},\n          RegTypeValue: this.state.RegTypeValue || {},\n          regSubTypeValue: this.state.regSubTypeValue || {},\n          FilterStatusValue: this.state.FilterStatusValue || {},\n          FromDate: this.fromDate,\n          ToDate: this.toDate,\n          onSampleTypeChange: this.onSampleTypeChange,\n          onRegTypeChange: this.onRegTypeChange,\n          onRegSubTypeChange: this.onRegSubTypeChange,\n          handleFilterDateChange: this.handleFilterDateChange,\n          onFilterChange: this.onFilterChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 80\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(SplitterLayout, {\n      vertical: true,\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      secondaryInitialSize: 400,\n      customClassName: \"fixed_list_height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card_group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 49\n      }\n    }, this.props.Login.masterData.SelectedRegistration ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.SelectedRegistration.scomponentname), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(OutlineTransactionStatus, {\n      transcolor: this.props.Login.masterData.SelectedRegistration.scolorhexcode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedRegistration.stransdisplaystatus))))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ARNO\",\n      message: \"Arno\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 84\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedRegistration.sarno))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_COMPONENTNAME\",\n      message: \"Componentname\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 84\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedRegistration.scomponentname))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_GENERICPRODUCT\",\n      message: \"Genericproduct\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 84\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedRegistration.sproductname))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VERSION\",\n      message: \"Version\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 84\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedRegistration.sversion))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_MANUFACTURENAME\",\n      message: \"Manufacturename\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 84\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedRegistration.smanufname))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CERTIFICATENUMBER\",\n      message: \"Certificatenumber\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 84\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedRegistration.ssamplecertificateversioncode))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SPECIFICATIONSTUDYPLAN\",\n      message: \"Specificationname\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 84\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedRegistration.sspecname))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RMSNO\",\n      message: \"Rmsno\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 84\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedRegistration.nrmsno))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_REGISTRATIONDATE\",\n      message: \"RegistrationDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 84\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedRegistration.dtransactiondate))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_BATCHLOTNO\",\n      message: \"Batchlotno\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 84\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedRegistration.smanuflotno))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_DECISIONSTATUS\",\n      message: \"Decisionstatus\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 84\n      }\n    })), /*#__PURE__*/React.createElement(DecisionStatus, {\n      decisioncolor: this.props.Login.masterData.SelectedRegistration.sdecisioncolor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedRegistration.sdecisionstatus)))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"horizontal-line\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 69\n      }\n    }))), /*#__PURE__*/React.createElement(CustomTab, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 61\n      }\n    })) : \"\"))))))))));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const SampleMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", undefined, undefined, true);\n      const SampleType = SampleMap.get(\"OptionList\");\n      const SampleTypeValue = {\n        nsampletypecode: SampleType.length > 0 ? SampleType[0] : \"\"\n      };\n      const RegMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, true);\n      const RegistrationType = RegMap.get(\"OptionList\");\n      const RegTypeValue = {\n        nregtypecode: RegistrationType.length > 0 ? RegistrationType[0] : \"\"\n      };\n      const RegSubMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'nsorter', \"ascending\", false);\n      const RegistrationSubType = RegSubMap.get(\"OptionList\"); //const regSubTypeValue = {nregsubtypecode: RegistrationSubType.length> 0? RegistrationSubType[2]: \"\"};\n\n      const FilterStatus = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"napprovalstatuscode\", \"stransdisplaystatus\", undefined, undefined, true);\n      const FilterList = FilterStatus.get(\"OptionList\");\n      let FilterStatusValue = {};\n      let regSubTypeValue = {};\n\n      if (this.props.Login.masterData.operation === \"FilterSubmit\") {\n        FilterStatusValue = this.state.FilterStatusValue;\n        regSubTypeValue = this.state.regSubTypeValue;\n      } else {\n        FilterStatusValue = {\n          ntransactionstatus: FilterList.length > 0 ? FilterList[1] : \"\"\n        };\n        regSubTypeValue = {\n          nregsubtypecode: RegistrationSubType.length > 0 ? {\n            label: this.props.Login.masterData.RegistrationSubTypeValue.sregsubtypename,\n            value: this.props.Login.masterData.RegistrationSubTypeValue.nregsubtypecode,\n            item: this.props.Login.masterData.ApprovalVersionValue\n          } : \"\"\n        };\n      }\n\n      let RealFilterValue = {};\n      let RealRegSubTypeValue = {};\n      let RealFromDate = {};\n      let RealToDate = {};\n\n      if (this.props.Login.masterData.RealFilterValue !== previousProps.Login.masterData) {\n        RealFilterValue = this.props.Login.masterData.RealFilterValue ? this.props.Login.masterData.RealFilterValue : this.props.Login.masterData.FilterStatusValue ? this.props.Login.masterData.FilterStatusValue.stransdisplaystatus : \"\";\n      }\n\n      if (this.props.Login.masterData.RealRegSubTypeValue !== previousProps.Login.masterData) {\n        RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue : this.props.Login.masterData.RegistrationSubTypeValue ? this.props.Login.masterData.RegistrationSubTypeValue.sregsubtypename : \"\"; // RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue :\n        //     this.props.Login.masterData.RegistrationSubTypeValue ? this.props.Login.masterData.RegistrationSubTypeValue.sregsubtypename : \"\"\n      }\n\n      if (this.props.Login.masterData.RealFromDate !== previousProps.Login.masterData) {\n        RealFromDate = this.props.Login.masterData.RealFromDate ? this.props.Login.masterData.RealFromDate : this.props.Login.masterData.RealFromDate ? this.props.Login.masterData.RealFromDate : \"\";\n      }\n\n      if (this.props.Login.masterData.RealToDate !== previousProps.Login.masterData) {\n        RealToDate = this.props.Login.masterData.RealToDate ? this.props.Login.masterData.RealToDate : this.props.Login.masterData.RealToDate ? this.props.Login.masterData.RealToDate : \"\";\n      } // if (this.props.Login.masterData.Registration !== previousProps.Login.masterData) {\n      //     const  Registration  = this.props.Login.masterData;\n      //     sortData(Registration, \"descending\", \"nregcertificatecode\");\n      // }\n\n\n      let {\n        printHistoryDataState,\n        appHistoryDataState,\n        resultsDataState\n      } = this.state;\n      let isStateChanged = false;\n\n      if (this.props.Login.printHistoryDataState && this.props.Login.printHistoryDataState !== previousProps.Login.printHistoryDataState) {\n        printHistoryDataState = this.props.Login.printHistoryDataState;\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.appHistoryDataState && this.props.Login.appHistoryDataState !== previousProps.Login.appHistoryDataState) {\n        appHistoryDataState = this.props.Login.appHistoryDataState;\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.resultsDataState && this.props.Login.resultsDataState !== previousProps.Login.resultsDataState) {\n        resultsDataState = this.props.Login.resultsDataState;\n        isStateChanged = true;\n      }\n\n      const RealSampleTypeValue = this.props.Login.masterData.SampleTypeValue ? this.props.Login.masterData.SampleTypeValue.ssampletypename : \"\";\n      const RealRegTypeValue = this.props.Login.masterData.RegistrationTypeValue ? this.props.Login.masterData.RegistrationTypeValue.sregtypename : \"\";\n\n      if (isStateChanged) {\n        this.setState({\n          printHistoryDataState,\n          appHistoryDataState,\n          resultsDataState,\n          SampleType,\n          RegistrationType,\n          RegistrationSubType,\n          FilterList,\n          SampleTypeValue,\n          RegTypeValue,\n          RealSampleTypeValue,\n          regSubTypeValue,\n          FilterStatusValue,\n          RealRegTypeValue,\n          RealRegSubTypeValue,\n          RealFilterValue,\n          RealFromDate,\n          RealToDate\n        });\n      } else {\n        this.setState({\n          SampleType,\n          RegistrationType,\n          RegistrationSubType,\n          FilterList,\n          SampleTypeValue,\n          RegTypeValue,\n          RealSampleTypeValue,\n          regSubTypeValue,\n          FilterStatusValue,\n          RealRegTypeValue,\n          RealRegSubTypeValue,\n          RealFilterValue,\n          RealFromDate,\n          RealToDate\n        });\n      }\n    } // if (this.props.Login.masterData.RealFilterValue !== previousProps.Login.masterData)  {\n    //     const RealFilterValue = this.props.Login.masterData.RealFilterValue ? this.props.Login.masterData.RealFilterValue:\"\"\n    //     this.setState({RealFilterValue});\n    //  }\n    //else{\n    //     const RealFilterValue = this.props.Login.masterData.RealFilterValue ? this.props.Login.masterData.RealFilterValue:\"\"\n    //     //this.setState({RealFilterValue});\n    // }this.state.regSubTypeValue\n\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  getSampleCertTypeChange,\n  filterColumnData,\n  getSampleCertRegSubTypeChange,\n  getTestResultDataHistory,\n  getActiveSampleHistory,\n  generateCertificateAction,\n  sentCertificateAction,\n  correctionCertificateAction,\n  xmlExportAction,\n  getWholeFilterStatusHistory\n})(injectIntl(SampleCertificationHistory));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/pages/testapproval/SampleCertificationHistory.jsx"],"names":["React","Component","CustomTab","Row","Col","Card","FormGroup","FormLabel","Button","callService","crudMaster","updateStore","getSampleCertTypeChange","getSampleCertRegSubTypeChange","filterColumnData","getTestResultDataHistory","getActiveSampleHistory","generateCertificateAction","sentCertificateAction","correctionCertificateAction","xmlExportAction","getWholeFilterStatusHistory","getControlMap","convertDateValuetoString","rearrangeDateFormat","constructOptionList","validateTwoDigitDate","ApprovalHistory","PrintHistory","DEFAULT_RETURN","Results","connect","toast","FormattedMessage","injectIntl","SampleCertificationHistoryFilter","ReadOnlyText","ContentPanel","OutlineTransactionStatus","DecisionStatus","BreadcrumbComponent","TransactionListMaster","designProperties","SplitterLayout","PerfectScrollbar","ListWrapper","ProductList","process","mapStateToProps","state","Login","SampleCertificationHistory","constructor","props","onSampleTypeChange","event","fieldName","labelname","Map","parseInt","value","userInfo","masterData","onRegSubTypeChange","comboData","regSubTypeValue","setState","onFilterChange","FilterStatusValue","onRegTypeChange","handleExpandChange","row","dataState","viewParam","TransactionSampleResults","primaryKeyField","npreregno","primaryKeyValue","viewRow","onTabChange","tabProps","screenName","updateInfo","typeName","data","handleFilterDateChange","dateName","dateValue","selectedFilter","Date","handlePageChange","e","skip","take","onFilterSubmit","SampleTypeValue","nsampletypecode","RealSampleTypeValue","label","RealRegTypeValue","RegTypeValue","nregtypecode","RealRegSubTypeValue","nregsubtypecode","RealFromDate","fromdate","FromDate","RealToDate","todate","ToDate","inputData","userinfo","obj","fromDate","toDate","printHistoryDataState","appHistoryDataState","resultsDataState","warn","intl","formatMessage","id","reloadData","RegistrationSubTypeValue","tabDetail","tabMap","set","approvalHistory","settings","controlMap","userRoleControlRights","printHistory","inputParam","TransactionSampleTests","sampleTestResults","dataStateReportHistory","searchSampleRef","createRef","openModal","masterStatus","error","selectedRecord","searchRef","searchFieldList","getDerivedStateFromProps","showConfirmAlert","covertDatetoString","startDateValue","endDateValue","startDate","endDate","prevMonth","String","getMonth","currentMonth","prevDay","getDate","currentDay","fromDateOnly","getFullYear","toDateOnly","breadCrumbFrom","breadCrumbto","render","SelectedRegistration","searchedData","Registration","getSample","operation","methodUrl","keyName","breadCrumbData","filterParam","inputListName","selectedObject","fetchUrl","fecthInputObject","length","parentHeight","SampleCertification","VALUE","MAHProduct","SampleType","RegistrationType","RegistrationSubType","FilterList","scomponentname","scolorhexcode","stransdisplaystatus","sarno","sproductname","sversion","smanufname","ssamplecertificateversioncode","sspecname","nrmsno","dtransactiondate","smanuflotno","sdecisioncolor","sdecisionstatus","componentDidUpdate","previousProps","SampleMap","undefined","get","RegMap","RegSubMap","FilterStatus","ntransactionstatus","sregsubtypename","item","ApprovalVersionValue","RealFilterValue","isStateChanged","ssampletypename","RegistrationTypeValue","sregtypename","nformcode","Object","values","map","push","ncontrolcode"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,oDAAtB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,SAAzB,EAAoCC,SAApC,EAA+CC,MAA/C,QAA6D,iBAA7D;AACA,SACIC,WADJ,EACiBC,UADjB,EAC6BC,WAD7B,EAC0CC,uBAD1C,EACmEC,6BADnE,EACkGC,gBADlG,EAEIC,wBAFJ,EAE8BC,sBAF9B,EAEsDC,yBAFtD,EAEiFC,qBAFjF,EAEwGC,2BAFxG,EAEqIC,eAFrI,EAEsJC,2BAFtJ,QAGO,eAHP;AAIA,SAASC,aAAT,EAAuBC,wBAAvB,EAAgDC,mBAAhD,QAA0E,+BAA1E;AACA,SAASC,mBAAT,EAA8BC,oBAA9B,QAA0D,+BAA1D;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,YAA7C;AACA,OAAOC,gCAAP,MAA6C,oCAA7C;AACA,SAASC,YAAT,EAAuBC,YAAvB,EAAqCC,wBAArC,EAA+DC,cAA/D,QAAsF,6BAAtF;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AACA,OAAOC,qBAAP,MAAkC,wCAAlC;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,OAAT,QAAwB,4BAAxB;;;AAMA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAQ;AAAEC,IAAAA,KAAK,EAAED,KAAK,CAACC;AAAf,GAAR;AACH,CAFD;;AAGA,MAAMC,0BAAN,SAAyClD,SAAzC,CAAmD;AAC/CmD,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA8BnBC,kBA9BmB,GA8BE,CAACC,KAAD,EAAQC,SAAR,EAAmBC,SAAnB,KAAiC;AAClD,UAAIF,KAAK,KAAK,IAAd,EAAoB;AAChB,YAAIG,GAAG,GAAG,EAAV;AACAA,QAAAA,GAAG,CAAC,iBAAD,CAAH,GAAyBC,QAAQ,CAACJ,KAAK,CAACK,KAAP,CAAjC;AACAF,QAAAA,GAAG,CAAC,UAAD,CAAH,GAAkB,KAAKL,KAAL,CAAWH,KAAX,CAAiBW,QAAnC;AACA,aAAKR,KAAL,CAAWzC,uBAAX,CAAmC8C,GAAnC,EAAwC,KAAKL,KAAL,CAAWH,KAAX,CAAiBY,UAAzD,EAAqEP,KAArE,EAA4EE,SAA5E;AACH;AACJ,KArCkB;;AAAA,SAuCnBM,kBAvCmB,GAuCE,CAACC,SAAD,EAAYR,SAAZ,KAA0B;AAC3C,YAAMS,eAAe,GAAG,KAAKhB,KAAL,CAAWgB,eAAX,IAA8B,EAAtD;AACAA,MAAAA,eAAe,CAACT,SAAD,CAAf,GAA6BQ,SAA7B;AACA,WAAKE,QAAL,CAAc;AAAED,QAAAA;AAAF,OAAd,EAH2C,CAI3C;AAEH,KA7CkB;;AAAA,SAgDnBE,cAhDmB,GAgDF,CAACH,SAAD,EAAYR,SAAZ,KAA0B;AACvC,YAAMY,iBAAiB,GAAG,KAAKnB,KAAL,CAAWmB,iBAAX,IAAgC,EAA1D;AACAA,MAAAA,iBAAiB,CAACZ,SAAD,CAAjB,GAA+BQ,SAA/B;AACA,WAAKE,QAAL,CAAc;AAAEE,QAAAA;AAAF,OAAd,EAHuC,CAIvC;AAEH,KAtDkB;;AAAA,SA0DnBC,eA1DmB,GA0DD,CAACd,KAAD,EAAQC,SAAR,EAAmBC,SAAnB,KAAiC;AAC/C,UAAIF,KAAK,KAAK,IAAd,EAAoB;AAChB,YAAIG,GAAG,GAAG,EAAV;AACAA,QAAAA,GAAG,CAAC,cAAD,CAAH,GAAsBC,QAAQ,CAACJ,KAAK,CAACK,KAAP,CAA9B;AACAF,QAAAA,GAAG,CAAC,UAAD,CAAH,GAAkB,KAAKL,KAAL,CAAWH,KAAX,CAAiBW,QAAnC;AACA,aAAKR,KAAL,CAAWxC,6BAAX,CAAyC6C,GAAzC,EAA8C,KAAKL,KAAL,CAAWH,KAAX,CAAiBY,UAA/D,EAA2EP,KAA3E,EAAkFE,SAAlF;AACH;AACJ,KAjEkB;;AAAA,SAoEnBa,kBApEmB,GAoEE,CAACC,GAAD,EAAMC,SAAN,KAAoB;AAErC,YAAMC,SAAS,GAAG;AACdC,QAAAA,wBAAwB,EAAE,KAAKrB,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BY,wBADxC;AAEdb,QAAAA,QAAQ,EAAE,KAAKR,KAAL,CAAWH,KAAX,CAAiBW,QAFb;AAGdc,QAAAA,eAAe,EAAE,sBAHH;AAIdC,QAAAA,SAAS,EAAE,WAJG;AAKdd,QAAAA,UAAU,EAAE,KAAKT,KAAL,CAAWH,KAAX,CAAiBY;AALf,OAAlB;AAOA,WAAKT,KAAL,CAAWtC,wBAAX,CAAoC,EAChC,GAAG0D,SAD6B;AAClBD,QAAAA,SADkB;AAEhCK,QAAAA,eAAe,EAAEN,GAAG,CAAC,UAAD,CAAH,CAAgBE,SAAS,CAACE,eAA1B,CAFe;AAE6BG,QAAAA,OAAO,EAAEP,GAAG,CAAC,UAAD;AAFzC,OAApC;AAIH,KAjFkB;;AAAA,SAsFnBQ,WAtFmB,GAsFJC,QAAD,IAAc;AACxB,YAAMC,UAAU,GAAGD,QAAQ,CAACC,UAA5B;AACA,YAAMC,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEtD,cADK;AAEfuD,QAAAA,IAAI,EAAE;AAAEH,UAAAA;AAAF;AAFS,OAAnB;AAIA,WAAK5B,KAAL,CAAW1C,WAAX,CAAuBuE,UAAvB;AACH,KA7FkB;;AAAA,SAiGnBG,sBAjGmB,GAiGM,CAACC,QAAD,EAAWC,SAAX,KAAyB;AAC9C,YAAM;AAAEC,QAAAA;AAAF,UAAqB,KAAKvC,KAAhC;;AACA,UAAIsC,SAAS,KAAK,IAAlB,EAAwB;AACpBA,QAAAA,SAAS,GAAG,IAAIE,IAAJ,EAAZ;AACH;;AACDD,MAAAA,cAAc,CAACF,QAAD,CAAd,GAA2BC,SAA3B;AACA,WAAKrB,QAAL,CAAc;AAAEsB,QAAAA;AAAF,OAAd;AACH,KAxGkB;;AAAA,SAsInBE,gBAtImB,GAsIAC,CAAC,IAAI;AACpB,WAAKzB,QAAL,CAAc;AACV0B,QAAAA,IAAI,EAAED,CAAC,CAACC,IADE;AAEVC,QAAAA,IAAI,EAAEF,CAAC,CAACE;AAFE,OAAd,EADoB,CAKpB;AACH,KA5IkB;;AAAA,SA+InBC,cA/ImB,GA+IF,MAAM;AACnB,UAAIC,eAAe,GAAG,KAAK9C,KAAL,CAAW8C,eAAX,GAA2B,KAAK9C,KAAL,CAAW8C,eAAX,CAA2BC,eAAtD,GAAsE,EAA5F;;AAEL,UAAGD,eAAH,EAAmB;AACd,YAAIE,mBAAmB,GAAG,KAAKhD,KAAL,CAAW8C,eAAX,GAA6B,KAAK9C,KAAL,CAAW8C,eAAX,CAA2BC,eAA3B,CAA2CE,KAAxE,GAAgF,EAA1G;AACA,YAAIC,gBAAgB,GAAG,KAAKlD,KAAL,CAAWmD,YAAX,GAA0B,KAAKnD,KAAL,CAAWmD,YAAX,CAAwBC,YAAxB,CAAqCH,KAA/D,GAAuE,EAA9F;AACA,YAAII,mBAAmB,GAAG,KAAKrD,KAAL,CAAWgB,eAAX,GAA6B,KAAKhB,KAAL,CAAWgB,eAAX,CAA2BsC,eAA3B,CAA2CL,KAAxE,GAAgF,EAA1G;AACA,YAAIM,YAAY,GAAG,IAAIf,IAAJ,CAAS,KAAKxC,KAAL,CAAWuC,cAAX,CAA0BiB,QAA1B,IAAsC,KAAKpD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B4C,QAA3E,CAAnB;AACA,YAAIC,UAAU,GAAG,IAAIlB,IAAJ,CAAS,KAAKxC,KAAL,CAAWuC,cAAX,CAA0BoB,MAA1B,IAAoC,KAAKvD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B+C,MAAzE,CAAjB;AACA,YAAIC,SAAS,GAAG;AACZd,UAAAA,eAAe,EAAE,KAAK/C,KAAL,CAAW8C,eAAX,CAA2BC,eAA3B,CAA2CpC,KADhD;AAEZyC,UAAAA,YAAY,EAAE,KAAKpD,KAAL,CAAWmD,YAAX,CAAwBC,YAAxB,CAAqCzC,KAFvC;AAGZ2C,UAAAA,eAAe,EAAE,KAAKtD,KAAL,CAAWgB,eAAX,CAA2BsC,eAA3B,CAA2C3C,KAHhD;AAIZ;AACAmD,UAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWH,KAAX,CAAiBW;AALf,SAAhB;AAOA,YAAIC,UAAU,GAAG,EACb,GAAG,KAAKT,KAAL,CAAWH,KAAX,CAAiBY,UADP;AACmBmC,UAAAA,mBADnB;AACwCE,UAAAA,gBADxC;AAC0DG,UAAAA,mBAD1D;AAEbE,UAAAA,YAFa;AAECG,UAAAA;AAFD,SAAjB;AAKA,YAAIK,GAAG,GAAGzF,wBAAwB,CAAC,KAAK0B,KAAL,CAAWuC,cAAX,CAA0BiB,QAA1B,IAAsC,KAAKpD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B0C,YAAnE,EAC9B,KAAKvD,KAAL,CAAWuC,cAAX,CAA0BoB,MAA1B,IAAoC,KAAKvD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B6C,UADlC,EAC6C,KAAKtD,KAAL,CAAWH,KAAX,CAAiBW,QAD9D,CAAlC;AAEAiD,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwBE,GAAG,CAACC,QAA5B;AACAH,QAAAA,SAAS,CAAC,QAAD,CAAT,GAAsBE,GAAG,CAACE,MAA1B;AACA,aAAK7D,KAAL,CAAWhC,2BAAX,CAAuCyC,UAAvC,EAAmDgD,SAAnD,EAA8D,cAA9D,EAA+E;AAACK,UAAAA,qBAAqB,EAAC,KAAKlE,KAAL,CAAWkE,qBAAlC;AAC3EC,UAAAA,mBAAmB,EAAC,KAAKnE,KAAL,CAAWmE,mBAD4C;AAE3EC,UAAAA,gBAAgB,EAAC,KAAKpE,KAAL,CAAWoE;AAF+C,SAA/E;AAGC,OAzBN,MAyBW;AACFrF,QAAAA,KAAK,CAACsF,IAAN,CAAW,KAAKjE,KAAL,CAAWkE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AAEJ,KA/KkB;;AAAA,SAiLnBC,UAjLmB,GAiLN,MAAM;AACf,UAAI3B,eAAe,GAAG,KAAK9C,KAAL,CAAW8C,eAAX,GAA2B,KAAK9C,KAAL,CAAW8C,eAAX,CAA2BC,eAAtD,GAAsE,EAA5F;;AACA,UAAGD,eAAH,EAAmB;AACnB,YAAIe,SAAS,GAAG;AACZd,UAAAA,eAAe,EAAE,KAAK/C,KAAL,CAAW8C,eAAX,CAA2BC,eAA3B,CAA2CpC,KADhD;AAEZyC,UAAAA,YAAY,EAAE,KAAKpD,KAAL,CAAWmD,YAAX,CAAwBC,YAAxB,CAAqCzC,KAFvC;AAGZ2C,UAAAA,eAAe,EAAE,KAAKlD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B6D,wBAA5B,GAAuD,KAAKtE,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B6D,wBAA5B,CAAqDpB,eAA5G,GACb,KAAKtD,KAAL,CAAWgB,eAAX,GAA6B,KAAKhB,KAAL,CAAWgB,eAAX,CAA2BsC,eAA3B,CAA2C3C,KAAxE,GAAgF,EAJxE;AAKZmD,UAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWH,KAAX,CAAiBW;AALf,SAAhB;AAQA,YAAImD,GAAG,GAAGzF,wBAAwB,CAAC,KAAK0B,KAAL,CAAWuC,cAAX,CAA0BiB,QAA1B,IAAsC,KAAKpD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B0C,YAAnE,EAC9B,KAAKvD,KAAL,CAAWuC,cAAX,CAA0BoB,MAA1B,IAAoC,KAAKvD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B6C,UADlC,EAC6C,KAAKtD,KAAL,CAAWH,KAAX,CAAiBW,QAD9D,CAAlC;AAEAiD,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwBE,GAAG,CAACC,QAA5B;AACAH,QAAAA,SAAS,CAAC,QAAD,CAAT,GAAsBE,GAAG,CAACE,MAA1B,CAZmB,CAanB;AACA;AACA;AACA;;AACA,aAAK7D,KAAL,CAAWhC,2BAAX,CAAuC,KAAKgC,KAAL,CAAWH,KAAX,CAAiBY,UAAxD,EAAoEgD,SAApE,EAA+E,cAA/E,EAAgG;AAACK,UAAAA,qBAAqB,EAAC,KAAKlE,KAAL,CAAWkE,qBAAlC;AAC5FC,UAAAA,mBAAmB,EAAC,KAAKnE,KAAL,CAAWmE,mBAD6D;AAE5FC,UAAAA,gBAAgB,EAAC,KAAKpE,KAAL,CAAWoE;AAFgE,SAAhG;AAGC,OApBD,MAoBM;AACFrF,QAAAA,KAAK,CAACsF,IAAN,CAAW,KAAKjE,KAAL,CAAWkE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AAEJ,KA3MkB;;AAAA,SA6NnBG,SA7NmB,GA6NP,MAAM;AACd,YAAMC,MAAM,GAAG,IAAInE,GAAJ,EAAf;AACAmE,MAAAA,MAAM,CAACC,GAAP,CAAW,qBAAX,eACI,oBAAC,eAAD;AACI,QAAA,eAAe,EAAE,KAAKzE,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BiE,eADjD;AAEI,QAAA,UAAU,EAAEhF,OAAO,CAAC,KAAKM,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BiE,eAA5B,IAA+C,EAAhD,EAAoD,KAAK9E,KAAL,CAAWmE,mBAA/D,CAFvB;AAGI,QAAA,SAAS,EAAG,KAAK/D,KAAL,CAAWH,KAAX,CAAiB+B,UAAjB,KAAgC,EAAhC,IAAsC,KAAK5B,KAAL,CAAWH,KAAX,CAAiB+B,UAAjB,KAAgC,qBAAvE,GAAgG,KAAKhC,KAAL,CAAWmE,mBAA3G,GAAiI;AAAExB,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE,KAAKxC,KAAL,CAAWH,KAAX,CAAiB8E,QAAjB,GAA4BrE,QAAQ,CAAC,KAAKN,KAAL,CAAWH,KAAX,CAAiB8E,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAvF,SAHhJ;AAII,QAAA,UAAU,EAAE,KAAK/E,KAAL,CAAWgF,UAJ3B;AAKI,QAAA,QAAQ,EAAE,KAAK5E,KAAL,CAAWH,KAAX,CAAiBW,QAL/B;AAMI,QAAA,eAAe,EAAGN,KAAD,IAAW,KAAKW,QAAL,CAAc;AAAEkD,UAAAA,mBAAmB,EAAE7D,KAAK,CAACiB;AAA7B,SAAd,CANhC;AAOI,QAAA,qBAAqB,EAAE,KAAKvB,KAAL,CAAWiF,qBAPtC;AAQI,QAAA,UAAU,EAAC,qBARf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAaAL,MAAAA,MAAM,CAACC,GAAP,CAAW,kBAAX,eACI,oBAAC,YAAD;AACI,QAAA,YAAY,EAAE,KAAKzE,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BqE,YAD9C;AAEI,QAAA,UAAU,EAAEpF,OAAO,CAAC,KAAKM,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BqE,YAA5B,IAA4C,EAA7C,EAAiD,KAAKlF,KAAL,CAAWkE,qBAA5D,CAFvB;AAGI,QAAA,SAAS,EAAG,KAAK9D,KAAL,CAAWH,KAAX,CAAiB+B,UAAjB,KAAgC,EAAhC,IAAsC,KAAK5B,KAAL,CAAWH,KAAX,CAAiB+B,UAAjB,KAAgC,kBAAvE,GAA6F,KAAKhC,KAAL,CAAWkE,qBAAxG,GAAgI;AAAEvB,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SAH/I;AAII,QAAA,UAAU,EAAE,KAAK5C,KAAL,CAAWgF,UAJ3B;AAKI,QAAA,eAAe,EAAG1E,KAAD,IAAW,KAAKW,QAAL,CAAc;AAAEiD,UAAAA,qBAAqB,EAAE5D,KAAK,CAACiB;AAA/B,SAAd,CALhC;AAMI,QAAA,qBAAqB,EAAE,KAAKvB,KAAL,CAAWiF,qBANtC;AAOI,QAAA,QAAQ,EAAE,KAAK7E,KAAL,CAAWH,KAAX,CAAiBW,QAP/B;AAQI,QAAA,UAAU,EAAE,KAAKR,KAAL,CAAWH,KAAX,CAAiBkF,UARjC;AASI,QAAA,UAAU,EAAC,kBATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAcAP,MAAAA,MAAM,CAACC,GAAP,CAAW,aAAX,eACI,oBAAC,OAAD;AACI,QAAA,sBAAsB,EAAE,KAAKzE,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BuE,sBADxD;AAEI,QAAA,UAAU,EAAEtF,OAAO,CAAC,KAAKM,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BuE,sBAA5B,IAAsD,EAAvD,EAA2D,KAAKpF,KAAL,CAAWoE,gBAAtE,CAFvB;AAGI,QAAA,SAAS,EAAG,KAAKhE,KAAL,CAAWH,KAAX,CAAiB+B,UAAjB,KAAgC,EAAhC,IAAsC,KAAK5B,KAAL,CAAWH,KAAX,CAAiB+B,UAAjB,KAAgC,aAAvE,GAAwF,KAAKhC,KAAL,CAAWoE,gBAAnG,GAAsH;AAAEzB,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE,KAAKxC,KAAL,CAAWH,KAAX,CAAiB8E,QAAjB,GAA4BrE,QAAQ,CAAC,KAAKN,KAAL,CAAWH,KAAX,CAAiB8E,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAvF,SAHrI;AAII,QAAA,UAAU,EAAE,KAAK/E,KAAL,CAAWgF,UAJ3B;AAKI,QAAA,eAAe,EAAG1E,KAAD,IAAW,KAAKW,QAAL,CAAc;AAAEmD,UAAAA,gBAAgB,EAAE9D,KAAK,CAACiB;AAA1B,SAAd,CALhC;AAMI,QAAA,qBAAqB,EAAE,KAAKvB,KAAL,CAAWiF,qBANtC;AAOI,QAAA,QAAQ,EAAE,KAAK7E,KAAL,CAAWH,KAAX,CAAiBW,QAP/B;AAQI,QAAA,UAAU,EAAE,KAAKR,KAAL,CAAWH,KAAX,CAAiBkF,UARjC;AASI,QAAA,kBAAkB,EAAE,KAAK9D,kBAT7B;AAUI,QAAA,UAAU,EAAC,aAVf;AAWI,QAAA,SAAS,EAAE,KAAKjB,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BwE,iBAX3C;AAYI,QAAA,iBAAiB,EAAE,sBAZvB;AAaI,QAAA,QAAQ,EAAE,IAbd,CAcA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EA7Bc,CAgDlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,aAAOT,MAAP;AAEH,KAzSkB;;AAEf,UAAMT,mBAAmB,GAAG;AAAExB,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,IAAI,EAAE,KAAKxC,KAAL,CAAWH,KAAX,CAAiB8E,QAAjB,GAA4BrE,QAAQ,CAAC,KAAKN,KAAL,CAAWH,KAAX,CAAiB8E,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAvF,KAA5B;AACA,UAAMX,gBAAgB,GAAG;AAAEzB,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,IAAI,EAAE,KAAKxC,KAAL,CAAWH,KAAX,CAAiB8E,QAAjB,GAA4BrE,QAAQ,CAAC,KAAKN,KAAL,CAAWH,KAAX,CAAiB8E,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAvF,KAAzB;AACA,UAAMb,qBAAqB,GAAG;AAAEvB,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,IAAI,EAAE,KAAKxC,KAAL,CAAWH,KAAX,CAAiB8E,QAAjB,GAA4BrE,QAAQ,CAAC,KAAKN,KAAL,CAAWH,KAAX,CAAiB8E,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAvF,KAA9B;AACA,UAAMO,sBAAsB,GAAG;AAAE3C,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,IAAI,EAAE,KAAKxC,KAAL,CAAWH,KAAX,CAAiB8E,QAAjB,GAA4BrE,QAAQ,CAAC,KAAKN,KAAL,CAAWH,KAAX,CAAiB8E,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAvF,KAA/B;AAEA,SAAKQ,eAAL,GAAuBxI,KAAK,CAACyI,SAAN,EAAvB;AACA,SAAKxF,KAAL,GAAa;AACTyF,MAAAA,SAAS,EAAE,KADF;AAETC,MAAAA,YAAY,EAAE,EAFL;AAGTV,MAAAA,UAAU,EAAE,IAAIvE,GAAJ,EAHH;AAITkF,MAAAA,KAAK,EAAE,EAJE;AAKTC,MAAAA,cAAc,EAAE,EALP;AAMTrD,MAAAA,cAAc,EAAE,EANP;AAOT0C,MAAAA,qBAAqB,EAAE,EAPd;AAQTd,MAAAA,mBARS;AASTC,MAAAA,gBATS;AAUTF,MAAAA,qBAVS;AAWToB,MAAAA,sBAXS;AAYT3C,MAAAA,IAAI,EAAE,CAZG;AAaTC,MAAAA,IAAI,EAAE,KAAKxC,KAAL,CAAWH,KAAX,CAAiB8E,QAAjB,GAA4B,KAAK3E,KAAL,CAAWH,KAAX,CAAiB8E,QAAjB,CAA0B,CAA1B,CAA5B,GAA2D;AAbxD,KAAb;AAgBA,SAAKc,SAAL,GAAiB9I,KAAK,CAACyI,SAAN,EAAjB;AACA,SAAKM,eAAL,GAAwB,CAAC,gBAAD,EAAkB,OAAlB,EAA0B,cAA1B,EAAyC,+BAAzC,EAAyE,UAAzE,EAC9B,YAD8B,EACjB,WADiB,EACL,QADK,EACI,kBADJ,EACuB,aADvB,CAAxB;AAEH;;AAkF8B,SAAxBC,wBAAwB,CAAC3F,KAAD,EAAQJ,KAAR,EAAe;AAE1C,QAAII,KAAK,CAACH,KAAN,CAAYyF,YAAZ,KAA6B,EAA7B,IAAmCtF,KAAK,CAACH,KAAN,CAAYyF,YAAZ,KAA6B1F,KAAK,CAAC0F,YAA1E,EAAwF;AACpF3G,MAAAA,KAAK,CAACsF,IAAN,CAAWjE,KAAK,CAACH,KAAN,CAAYyF,YAAvB;AACAtF,MAAAA,KAAK,CAACH,KAAN,CAAYyF,YAAZ,GAA2B,EAA3B;AACH;;AAED,QAAItF,KAAK,CAACH,KAAN,CAAY0F,KAAZ,KAAsB3F,KAAK,CAAC2F,KAAhC,EAAuC;AACnC5G,MAAAA,KAAK,CAAC4G,KAAN,CAAYvF,KAAK,CAACH,KAAN,CAAY0F,KAAxB;AACAvF,MAAAA,KAAK,CAACH,KAAN,CAAY0F,KAAZ,GAAoB,EAApB;AACH;;AACD,QAAIvF,KAAK,CAACH,KAAN,CAAY+F,gBAAZ,KAAiChG,KAAK,CAACgG,gBAA3C,EAA6D;AACzD,aAAO;AACHA,QAAAA,gBAAgB,EAAE5F,KAAK,CAACH,KAAN,CAAY+F;AAD3B,OAAP;AAGH,KAfyC,CAgB1C;AACA;AACA;AACA;AACA;;;AACA,WAAO,IAAP;AACH;;AA0EDC,EAAAA,kBAAkB,CAACC,cAAD,EAAiBC,YAAjB,EAA+B;AAC7C,UAAMC,SAAS,GAAG,IAAI5D,IAAJ,CAAS0D,cAAT,CAAlB;AACA,UAAMG,OAAO,GAAG,IAAI7D,IAAJ,CAAS2D,YAAT,CAAhB;AAEA,UAAMG,SAAS,GAAG7H,oBAAoB,CAAC8H,MAAM,CAACH,SAAS,CAACI,QAAV,KAAuB,CAAxB,CAAP,CAAtC;AACA,UAAMC,YAAY,GAAGhI,oBAAoB,CAAC8H,MAAM,CAACF,OAAO,CAACG,QAAR,KAAqB,CAAtB,CAAP,CAAzC;AACA,UAAME,OAAO,GAAGjI,oBAAoB,CAAC8H,MAAM,CAACH,SAAS,CAACO,OAAV,EAAD,CAAP,CAApC;AACA,UAAMC,UAAU,GAAGnI,oBAAoB,CAAC8H,MAAM,CAACF,OAAO,CAACM,OAAR,EAAD,CAAP,CAAvC;AACA,UAAME,YAAY,GAAGT,SAAS,CAACU,WAAV,KAA0B,GAA1B,GAAgCR,SAAhC,GAA4C,GAA5C,GAAkDI,OAAvE;AACA,UAAMK,UAAU,GAAGV,OAAO,CAACS,WAAR,KAAwB,GAAxB,GAA8BL,YAA9B,GAA6C,GAA7C,GAAmDG,UAAtE;AAEA,UAAM5C,QAAQ,GAAG6C,YAAY,GAAG,WAAhC;AACA,UAAM5C,MAAM,GAAG8C,UAAU,GAAG,WAA5B;AACA,WAAQ;AAAE/C,MAAAA,QAAF;AAAYC,MAAAA,MAAZ;AAAoB+C,MAAAA,cAAc,EAAEH,YAApC;AAAkDI,MAAAA,YAAY,EAAEF;AAAhE,KAAR;AACH;;AAgFDG,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,oBAAF;AAAwBC,MAAAA,YAAxB;AAAsCC,MAAAA;AAAtC,QAAuD,KAAKjH,KAAL,CAAWH,KAAX,CAAiBY,UAA9E,CADK,CAIL;AACA;AACA;;AACA,UAAMyG,SAAS,GAAG;AACdtF,MAAAA,UAAU,EAAE,mCADE;AACmCuF,MAAAA,SAAS,EAAE,KAD9C;AACqD1G,MAAAA,UAAU,EAAE,KAAKT,KAAL,CAAWH,KAAX,CAAiBY,UADlF;AAEdD,MAAAA,QAAQ,EAAE,KAAKR,KAAL,CAAWH,KAAX,CAAiBW,QAFb;AAEuB4G,MAAAA,SAAS,EAAE,qBAFlC;AAEyDC,MAAAA,OAAO,EAAE;AAFlE,KAAlB;AAIA,SAAKzD,QAAL,GAAiB,KAAKhE,KAAL,CAAWuC,cAAX,CAA0B,UAA1B,KAAyC,KAAKvC,KAAL,CAAWuC,cAAX,CAA0B,UAA1B,CAA1C,IAAoFhE,mBAAmB,CAAC,KAAK6B,KAAL,CAAWH,KAAX,CAAiBW,QAAlB,EAA2B,KAAKR,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B0C,YAAvD,CAAvH;AACA,SAAKU,MAAL,GAAe,KAAKjE,KAAL,CAAWuC,cAAX,CAA0B,QAA1B,KAAuC,KAAKvC,KAAL,CAAWuC,cAAX,CAA0B,QAA1B,CAAxC,IAAgFhE,mBAAmB,CAAC,KAAK6B,KAAL,CAAWH,KAAX,CAAiBW,QAAlB,EAA2B,KAAKR,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B6C,UAAvD,CAAjH;AAGA,QAAIK,GAAG,GAAGzF,wBAAwB,CAAC,KAAK0B,KAAL,CAAWuC,cAAX,CAA0BiB,QAA1B,IAAsC,KAAKpD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B0C,YAAnE,EAC9B,KAAKvD,KAAL,CAAWuC,cAAX,CAA0BoB,MAA1B,IAAoC,KAAKvD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B6C,UADlC,EAC6C,KAAKtD,KAAL,CAAWH,KAAX,CAAiBW,QAD9D,CAAlC;AAGA,SAAK8G,cAAL,GAAsB,CAClB;AACI,eAAS,UADb;AAEI,eAAS3D,GAAG,CAACiD,cAAJ,IAAsB,KAAKhH,KAAL,CAAWuD;AAF9C,KADkB,EAIf;AACC,eAAS,QADV;AAEC,eAASQ,GAAG,CAACkD,YAAJ,IAAoB,KAAKjH,KAAL,CAAW0D;AAFzC,KAJe,EAQlB;AACI,eAAS,gBADb;AAEI;AACA,eAAS,KAAK1D,KAAL,CAAWgD;AAHxB,KARkB,EAYf;AACC,eAAS,aADV;AAEC,eAAS,KAAKhD,KAAL,CAAWkD;AAFrB,KAZe,EAef;AACC,eAAS,gBADV;AAEC,eAAS,KAAKlD,KAAL,CAAWqD;AAFrB,KAfe,CAmBlB;AACA;AACA;AACA;AAtBkB,KAAtB;AA0BA,UAAMsE,WAAW,GAAG;AAChBC,MAAAA,aAAa,EAAE,cADC;AACeC,MAAAA,cAAc,EAAE,sBAD/B;AACuDnG,MAAAA,eAAe,EAAE,qBADxE;AAEhBoG,MAAAA,QAAQ,EAAE,uDAFM;AAEmDC,MAAAA,gBAAgB,EAAE;AAAEjE,QAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWH,KAAX,CAAiBW;AAA7B,OAFrE;AAE8GC,MAAAA,UAAU,EAAE,KAAKT,KAAL,CAAWH,KAAX,CAAiBY,UAF3I;AAGhBiF,MAAAA,eAAe,EAAE,KAAKA;AAHN,KAApB;AAOA,wBACI,uDACI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,iDAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK4B,cAAL,CAAoBM,MAApB,GAA6B,CAA7B,gBACG,oBAAC,mBAAD;AAAqB,MAAA,cAAc,EAAE,KAAKN,cAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GACkE,EAFvE,eAKI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAa,MAAA,SAAS,EAAC,uCAAvB;AAA+D,MAAA,GAAG,EAAGO,YAAD,IAAkB;AAAE,aAAKA,YAAL,GAAoBA,YAApB;AAAkC,OAA1H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AAAgB,MAAA,WAAW,EAAC,MAA5B;AAAmC,MAAA,UAAU,EAAE,IAA/C;AAAqD,MAAA,YAAY,EAAE,CAAnE;AAAsE,MAAA,oBAAoB,EAAE,EAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,qBAAD;AACI,MAAA,UAAU,EAAEb,YAAY,IAAIC,YAAhB,IAAgC,EADhD;AAEI,MAAA,cAAc,EAAE,CAACF,oBAAD,CAFpB;AAGI,MAAA,eAAe,EAAC,qBAHpB;AAII,MAAA,eAAe,EAAGe,mBAAD,IAAyB,KAAK9H,KAAL,CAAWrC,sBAAX,CAAkCmK,mBAAlC,EAAuD,KAAK9H,KAAL,CAAWH,KAAX,CAAiBW,QAAxE,EAAkF,KAAKR,KAAL,CAAWH,KAAX,CAAiBY,UAAnG,EACN;AAACqD,QAAAA,qBAAqB,EAAC,KAAKlE,KAAL,CAAWkE,qBAAlC;AACCC,QAAAA,mBAAmB,EAAC,KAAKnE,KAAL,CAAWmE,mBADhC;AAECC,QAAAA,gBAAgB,EAAC,KAAKpE,KAAL,CAAWoE;AAF7B,OADM,CAJ9C;AASI,MAAA,UAAU,EAAEkD,SAThB;AAUI,MAAA,eAAe,EAAE,EAVrB;AAWI,MAAA,SAAS,EAAC,gBAXd,CAYI;AACA;AAbJ;AAcI,MAAA,QAAQ,EAAC,YAdb;AAeI,MAAA,cAAc,EAAE,IAfpB;AAgBI,MAAA,SAAS,EACL,CACI;AAAE,SAAC7H,gBAAgB,CAAC0I,KAAlB,GAA0B;AAA5B,OADJ,EAEI;AAAE,SAAC1I,gBAAgB,CAAC0I,KAAlB,GAA0B;AAA5B,OAFJ,CAjBR,CAsBI;AACA;AAvBJ;AAwBI,MAAA,UAAU,EAAE,IAxBhB;AAyBI,MAAA,gBAAgB,EAAE,KAAK/H,KAAL,CAAWvC,gBAzBjC;AA0BI,MAAA,cAAc,EAAC,cA1BnB;AA2BI,MAAA,SAAS,EAAE,KAAKgI,SA3BpB;AA4BI,MAAA,WAAW,EAAE8B,WA5BjB;AA6BI,MAAA,gBAAgB,EAAE,KAAKlF,gBA7B3B;AA8BI,MAAA,cAAc,EAAE,KAAKI,cA9BzB;AA+BI,MAAA,IAAI,EAAE,KAAK7C,KAAL,CAAW2C,IA/BrB;AAgCI,MAAA,IAAI,EAAE,KAAK3C,KAAL,CAAW4C,IAhCrB;AAiCI,MAAA,aAAa,eACT,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAC,qDAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,sCAAlB;AAAyD,QAAA,OAAO,EAAC,MAAjE;AACI,QAAA,OAAO,EAAE,MAAM,KAAK6B,UAAL,EADnB;AAEI,oBAAU,KAAKrE,KAAL,CAAWkE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAGQ,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAC,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHR,CADJ,CAlCR;AA0CI,MAAA,eAAe,EAAE,CACb;AACI,wDAAmC,oBAAC,gCAAD;AAC/B,UAAA,aAAa,EAAE,KAAKpE,KAAL,CAAWkE,IAAX,CAAgBC,aADA;AAE/B,UAAA,OAAO,EAAE,KAAKnE,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BuH,UAA5B,IAA0C,EAFpB;AAG/B,UAAA,UAAU,EAAE,KAAKpI,KAAL,CAAWqI,UAAX,IAAyB,EAHN;AAI/B,UAAA,gBAAgB,EAAE,KAAKrI,KAAL,CAAWsI,gBAAX,IAA+B,EAJlB;AAK/B,UAAA,mBAAmB,EAAE,KAAKtI,KAAL,CAAWuI,mBAAX,IAAkC,EALxB;AAM/B,UAAA,YAAY,EAAE,KAAKvI,KAAL,CAAWwI,UAAX,IAAyB,EANR;AAO/B,UAAA,QAAQ,EAAE,KAAKpI,KAAL,CAAWH,KAAX,CAAiBW,QAAjB,IAA6B,EAPR;AAQ/B,UAAA,eAAe,EAAE,KAAKZ,KAAL,CAAW8C,eAAX,IAA8B,EARhB;AAS/B,UAAA,YAAY,EAAE,KAAK9C,KAAL,CAAWmD,YAAX,IAA2B,EATV;AAU/B,UAAA,eAAe,EAAE,KAAKnD,KAAL,CAAWgB,eAAX,IAA8B,EAVhB;AAW/B,UAAA,iBAAiB,EAAE,KAAKhB,KAAL,CAAWmB,iBAAX,IAAgC,EAXpB;AAY/B,UAAA,QAAQ,EAAE,KAAK6C,QAZgB;AAa/B,UAAA,MAAM,EAAE,KAAKC,MAbkB;AAc/B,UAAA,kBAAkB,EAAE,KAAK5D,kBAdM;AAe/B,UAAA,eAAe,EAAE,KAAKe,eAfS;AAgB/B,UAAA,kBAAkB,EAAE,KAAKN,kBAhBM;AAiB/B,UAAA,sBAAsB,EAAE,KAAKsB,sBAjBE;AAkB/B,UAAA,cAAc,EAAE,KAAKlB,cAlBU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADvC,OADa,CA1CrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAqEI,oBAAC,cAAD;AAAgB,MAAA,QAAQ,MAAxB;AAAyB,MAAA,WAAW,EAAC,MAArC;AAA4C,MAAA,UAAU,EAAE,IAAxD;AAA8D,MAAA,YAAY,EAAE,CAA5E;AAA+E,MAAA,oBAAoB,EAAE,GAArG;AACI,MAAA,eAAe,EAAC,mBADpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAC,oBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKd,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BsG,oBAA5B,gBACG,uDACI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAC,oBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK/G,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BsG,oBAA5B,CAAiDsB,cADtD,CADJ,eAKI,oBAAC,IAAD,CAAM,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,+BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEA,oBAAC,wBAAD;AACQ,MAAA,UAAU,EAAE,KAAKrI,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BsG,oBAA5B,CAAiDuB,aADrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAES,KAAKtI,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BsG,oBAA5B,CAAiDwB,mBAF1D,CAFA,CADJ,CADJ,CALJ,CADJ,eA+BI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAW,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,UAArB;AAAgC,MAAA,OAAO,EAAC,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAX,CADJ,eAEI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAe,KAAKvI,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BsG,oBAA5B,CAAiDyB,KAAhE,CAFJ,CADJ,CADJ,eAOI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAW,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,mBAArB;AAAyC,MAAA,OAAO,EAAC,eAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAX,CADJ,eAEI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAe,KAAKxI,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BsG,oBAA5B,CAAiDsB,cAAhE,CAFJ,CADJ,CAPJ,eAcI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAW,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,oBAArB;AAA0C,MAAA,OAAO,EAAC,gBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAX,CADJ,eAEI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAe,KAAKrI,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BsG,oBAA5B,CAAiD0B,YAAhE,CAFJ,CADJ,CAdJ,eAoBI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAW,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,aAArB;AAAmC,MAAA,OAAO,EAAC,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAX,CADJ,eAEI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAe,KAAKzI,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BsG,oBAA5B,CAAiD2B,QAAhE,CAFJ,CADJ,CApBJ,eA2BI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAW,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,qBAArB;AAA2C,MAAA,OAAO,EAAC,iBAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAX,CADJ,eAEI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAe,KAAK1I,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BsG,oBAA5B,CAAiD4B,UAAhE,CAFJ,CADJ,CA3BJ,eAkCI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAW,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,uBAArB;AAA6C,MAAA,OAAO,EAAC,mBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAX,CADJ,eAEI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAe,KAAK3I,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BsG,oBAA5B,CAAiD6B,6BAAhE,CAFJ,CADJ,CAlCJ,eA0CI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAW,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,4BAArB;AAAkD,MAAA,OAAO,EAAC,mBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAX,CADJ,eAEI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAe,KAAK5I,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BsG,oBAA5B,CAAiD8B,SAAhE,CAFJ,CADJ,CA1CJ,eAiDI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAW,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,WAArB;AAAiC,MAAA,OAAO,EAAC,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAX,CADJ,eAEI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAe,KAAK7I,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BsG,oBAA5B,CAAiD+B,MAAhE,CAFJ,CADJ,CAjDJ,eAuDI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAW,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,sBAArB;AAA4C,MAAA,OAAO,EAAC,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAX,CADJ,eAEI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAe,KAAK9I,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BsG,oBAA5B,CAAiDgC,gBAAhE,CAFJ,CADJ,CAvDJ,eA8DI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAW,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,gBAArB;AAAsC,MAAA,OAAO,EAAC,YAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAX,CADJ,eAEI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAe,KAAK/I,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BsG,oBAA5B,CAAiDiC,WAAhE,CAFJ,CADJ,CA9DJ,eAqEI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAW,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,oBAArB;AAA0C,MAAA,OAAO,EAAC,gBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAX,CADJ,eAEI,oBAAC,cAAD;AACE,MAAA,aAAa,EAAE,KAAKhJ,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BsG,oBAA5B,CAAiDkC,cADlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEG,KAAKjJ,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BsG,oBAA5B,CAAiDmC,eAFpD,CAFJ,CADJ,CArEJ,CA/BJ,eAgHI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CAhHJ,eAsHI,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAE,KAAK3E,SAAL,EAAtB;AAAwC,MAAA,WAAW,EAAE,KAAK7C,WAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtHJ,CADH,GAyHK,EA1HV,CADJ,CADJ,CADJ,CAFJ,CArEJ,CADJ,CADJ,CALJ,CADJ,CADJ;AAyNH;;AAEDyH,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAE9B,QAAI,KAAKpJ,KAAL,CAAWH,KAAX,CAAiB2F,cAAjB,KAAoC4D,aAAa,CAACvJ,KAAd,CAAoB2F,cAA5D,EAA4E;AACxE,WAAK3E,QAAL,CAAc;AAAE2E,QAAAA,cAAc,EAAE,KAAKxF,KAAL,CAAWH,KAAX,CAAiB2F;AAAnC,OAAd;AACH;;AAED,QAAI,KAAKxF,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,KAAgC2I,aAAa,CAACvJ,KAAd,CAAoBY,UAAxD,EAAoE;AAChE,YAAM4I,SAAS,GAAGjL,mBAAmB,CAAC,KAAK4B,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BwH,UAA5B,IAA0C,EAA3C,EAA+C,iBAA/C,EACjC,iBADiC,EACdqB,SADc,EACHA,SADG,EACQ,IADR,CAArC;AAEA,YAAMrB,UAAU,GAAGoB,SAAS,CAACE,GAAV,CAAc,YAAd,CAAnB;AACA,YAAM7G,eAAe,GAAG;AAAEC,QAAAA,eAAe,EAAEsF,UAAU,CAACL,MAAX,GAAoB,CAApB,GAAwBK,UAAU,CAAC,CAAD,CAAlC,GAAwC;AAA3D,OAAxB;AAEA,YAAMuB,MAAM,GAAGpL,mBAAmB,CAAC,KAAK4B,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4ByH,gBAA5B,IAAgD,EAAjD,EAAqD,cAArD,EAC9B,cAD8B,EACdoB,SADc,EACHA,SADG,EACQ,IADR,CAAlC;AAEA,YAAMpB,gBAAgB,GAAGsB,MAAM,CAACD,GAAP,CAAW,YAAX,CAAzB;AACA,YAAMxG,YAAY,GAAG;AAAEC,QAAAA,YAAY,EAAEkF,gBAAgB,CAACN,MAAjB,GAA0B,CAA1B,GAA8BM,gBAAgB,CAAC,CAAD,CAA9C,GAAoD;AAApE,OAArB;AAEA,YAAMuB,SAAS,GAAGrL,mBAAmB,CAAC,KAAK4B,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B0H,mBAA5B,IAAmD,EAApD,EAAwD,iBAAxD,EACjC,iBADiC,EACd,SADc,EACH,WADG,EACU,KADV,CAArC;AAEA,YAAMA,mBAAmB,GAAGsB,SAAS,CAACF,GAAV,CAAc,YAAd,CAA5B,CAbgE,CAchE;;AAEA,YAAMG,YAAY,GAAGtL,mBAAmB,CAAC,KAAK4B,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BiJ,YAA5B,IAA4C,EAA7C,EAAiD,qBAAjD,EACpC,qBADoC,EACbJ,SADa,EACFA,SADE,EACS,IADT,CAAxC;AAEA,YAAMlB,UAAU,GAAGsB,YAAY,CAACH,GAAb,CAAiB,YAAjB,CAAnB;AACA,UAAIxI,iBAAiB,GAAG,EAAxB;AACA,UAAIH,eAAe,GAAG,EAAtB;;AACA,UAAI,KAAKZ,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B0G,SAA5B,KAA0C,cAA9C,EAA8D;AAC1DpG,QAAAA,iBAAiB,GAAG,KAAKnB,KAAL,CAAWmB,iBAA/B;AACAH,QAAAA,eAAe,GAAG,KAAKhB,KAAL,CAAWgB,eAA7B;AACH,OAHD,MAGO;AACHG,QAAAA,iBAAiB,GAAG;AAAE4I,UAAAA,kBAAkB,EAAEvB,UAAU,CAACR,MAAX,GAAoB,CAApB,GAAwBQ,UAAU,CAAC,CAAD,CAAlC,GAAwC;AAA9D,SAApB;AACAxH,QAAAA,eAAe,GAAG;AAAEsC,UAAAA,eAAe,EAAEiF,mBAAmB,CAACP,MAApB,GAA6B,CAA7B,GACjC;AAAC/E,YAAAA,KAAK,EAAC,KAAK7C,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B6D,wBAA5B,CAAqDsF,eAA5D;AACArJ,YAAAA,KAAK,EAAC,KAAKP,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B6D,wBAA5B,CAAqDpB,eAD3D;AAEA2G,YAAAA,IAAI,EAAC,KAAK7J,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BqJ;AAFjC,WADiC,GAI/B;AAJY,SAAlB;AAKH;;AAGD,UAAIC,eAAe,GAAG,EAAtB;AACA,UAAI9G,mBAAmB,GAAG,EAA1B;AACA,UAAIE,YAAY,GAAG,EAAnB;AACA,UAAIG,UAAU,GAAG,EAAjB;;AACA,UAAI,KAAKtD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BsJ,eAA5B,KAAgDX,aAAa,CAACvJ,KAAd,CAAoBY,UAAxE,EAAoF;AAEhFsJ,QAAAA,eAAe,GAAG,KAAK/J,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BsJ,eAA5B,GAA8C,KAAK/J,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BsJ,eAA1E,GACd,KAAK/J,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BM,iBAA5B,GAAgD,KAAKf,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BM,iBAA5B,CAA8CwH,mBAA9F,GAAoH,EADxH;AAGH;;AAED,UAAI,KAAKvI,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BwC,mBAA5B,KAAoDmG,aAAa,CAACvJ,KAAd,CAAoBY,UAA5E,EAAwF;AAEvFwC,QAAAA,mBAAmB,GAAG,KAAKjD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BwC,mBAA5B,GAAkD,KAAKjD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BwC,mBAA9E,GAChB,KAAKjD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B6D,wBAA5B,GAAqD,KAAKtE,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B6D,wBAA5B,CAAqDsF,eAA1G,GAA0H,EADhI,CAFuF,CAKpF;AACA;AAEH;;AAED,UAAI,KAAK5J,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B0C,YAA5B,KAA6CiG,aAAa,CAACvJ,KAAd,CAAoBY,UAArE,EAAiF;AAE7E0C,QAAAA,YAAY,GAAG,KAAKnD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B0C,YAA5B,GAA2C,KAAKnD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B0C,YAAvE,GACX,KAAKnD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B0C,YAA5B,GAA2C,KAAKnD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B0C,YAAvE,GAAsF,EAD1F;AAGH;;AAGD,UAAI,KAAKnD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B6C,UAA5B,KAA2C8F,aAAa,CAACvJ,KAAd,CAAoBY,UAAnE,EAA+E;AAE3E6C,QAAAA,UAAU,GAAG,KAAKtD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B6C,UAA5B,GAAyC,KAAKtD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B6C,UAArE,GACT,KAAKtD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B6C,UAA5B,GAAyC,KAAKtD,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4B6C,UAArE,GAAkF,EADtF;AAGH,OApE+D,CAsEhE;AAEA;AACA;AAEA;;;AAEA,UAAI;AAAEQ,QAAAA,qBAAF;AAAyBC,QAAAA,mBAAzB;AAA8CC,QAAAA;AAA9C,UAAkE,KAAKpE,KAA3E;AAEA,UAAKoK,cAAc,GAAG,KAAtB;;AACA,UAAI,KAAKhK,KAAL,CAAWH,KAAX,CAAiBiE,qBAAjB,IAA0C,KAAK9D,KAAL,CAAWH,KAAX,CAAiBiE,qBAAjB,KAA2CsF,aAAa,CAACvJ,KAAd,CAAoBiE,qBAA7G,EAAoI;AAChIA,QAAAA,qBAAqB,GAAG,KAAK9D,KAAL,CAAWH,KAAX,CAAiBiE,qBAAzC;AACAkG,QAAAA,cAAc,GAAG,IAAjB;AACH;;AACD,UAAI,KAAKhK,KAAL,CAAWH,KAAX,CAAiBkE,mBAAjB,IAAwC,KAAK/D,KAAL,CAAWH,KAAX,CAAiBkE,mBAAjB,KAAyCqF,aAAa,CAACvJ,KAAd,CAAoBkE,mBAAzG,EAA8H;AAC1HA,QAAAA,mBAAmB,GAAG,KAAK/D,KAAL,CAAWH,KAAX,CAAiBkE,mBAAvC;AACAiG,QAAAA,cAAc,GAAG,IAAjB;AACH;;AACD,UAAI,KAAKhK,KAAL,CAAWH,KAAX,CAAiBmE,gBAAjB,IAAqC,KAAKhE,KAAL,CAAWH,KAAX,CAAiBmE,gBAAjB,KAAsCoF,aAAa,CAACvJ,KAAd,CAAoBmE,gBAAnG,EAAqH;AACjHA,QAAAA,gBAAgB,GAAG,KAAKhE,KAAL,CAAWH,KAAX,CAAiBmE,gBAApC;AACAgG,QAAAA,cAAc,GAAG,IAAjB;AACH;;AAED,YAAMpH,mBAAmB,GAAG,KAAK5C,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BiC,eAA5B,GAA8C,KAAK1C,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4BiC,eAA5B,CAA4CuH,eAA1F,GAA4G,EAAxI;AACA,YAAMnH,gBAAgB,GAAG,KAAK9C,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4ByJ,qBAA5B,GAAoD,KAAKlK,KAAL,CAAWH,KAAX,CAAiBY,UAAjB,CAA4ByJ,qBAA5B,CAAkDC,YAAtG,GAAqH,EAA9I;;AACA,UAAIH,cAAJ,EACA;AACI,aAAKnJ,QAAL,CAAc;AAACiD,UAAAA,qBAAD;AAAwBC,UAAAA,mBAAxB;AAA6CC,UAAAA,gBAA7C;AACViE,UAAAA,UADU;AACEC,UAAAA,gBADF;AACoBC,UAAAA,mBADpB;AACyCC,UAAAA,UADzC;AACqD1F,UAAAA,eADrD;AACsEK,UAAAA,YADtE;AACoFH,UAAAA,mBADpF;AAEVhC,UAAAA,eAFU;AAEOG,UAAAA,iBAFP;AAE0B+B,UAAAA,gBAF1B;AAE4CG,UAAAA,mBAF5C;AAEiE8G,UAAAA,eAFjE;AAEkF5G,UAAAA,YAFlF;AAEgGG,UAAAA;AAFhG,SAAd;AAIH,OAND,MAOI;AACA,aAAKzC,QAAL,CAAc;AACVoH,UAAAA,UADU;AACEC,UAAAA,gBADF;AACoBC,UAAAA,mBADpB;AACyCC,UAAAA,UADzC;AACqD1F,UAAAA,eADrD;AACsEK,UAAAA,YADtE;AACoFH,UAAAA,mBADpF;AAEVhC,UAAAA,eAFU;AAEOG,UAAAA,iBAFP;AAE0B+B,UAAAA,gBAF1B;AAE4CG,UAAAA,mBAF5C;AAEiE8G,UAAAA,eAFjE;AAEkF5G,UAAAA,YAFlF;AAEgGG,UAAAA;AAFhG,SAAd;AAIH;AAEJ,KAnH6B,CAoH9B;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;AAKA,QAAI,KAAKtD,KAAL,CAAWH,KAAX,CAAiBW,QAAjB,CAA0B4J,SAA1B,KAAwChB,aAAa,CAACvJ,KAAd,CAAoBW,QAApB,CAA6B4J,SAAzE,EAAoF;AAChF,YAAMvF,qBAAqB,GAAG,EAA9B;;AACA,UAAI,KAAK7E,KAAL,CAAWH,KAAX,CAAiBgF,qBAArB,EAA4C;AACxC,aAAK7E,KAAL,CAAWH,KAAX,CAAiBgF,qBAAjB,CAAuC,KAAK7E,KAAL,CAAWH,KAAX,CAAiBW,QAAjB,CAA0B4J,SAAjE,KAA+EC,MAAM,CAACC,MAAP,CAAc,KAAKtK,KAAL,CAAWH,KAAX,CAAiBgF,qBAAjB,CAAuC,KAAK7E,KAAL,CAAWH,KAAX,CAAiBW,QAAjB,CAA0B4J,SAAjE,CAAd,EAA2FG,GAA3F,CAA+FV,IAAI,IAC9KhF,qBAAqB,CAAC2F,IAAtB,CAA2BX,IAAI,CAACY,YAAhC,CAD2E,CAA/E;AAEH;;AACD,YAAM7F,UAAU,GAAG3G,aAAa,CAAC,KAAK+B,KAAL,CAAWH,KAAX,CAAiBgF,qBAAlB,EAAyC,KAAK7E,KAAL,CAAWH,KAAX,CAAiBW,QAAjB,CAA0B4J,SAAnE,CAAhC;AACA,WAAKvJ,QAAL,CAAc;AAAEgE,QAAAA,qBAAF;AAAyBD,QAAAA;AAAzB,OAAd;AACH;AACJ;;AAtsB8C;;AA2sBnD,eAAelG,OAAO,CAACiB,eAAD,EAAkB;AACpCvC,EAAAA,WADoC;AACvBC,EAAAA,UADuB;AACXC,EAAAA,WADW;AACEC,EAAAA,uBADF;AAC2BE,EAAAA,gBAD3B;AAEpCD,EAAAA,6BAFoC;AAELE,EAAAA,wBAFK;AAEqBC,EAAAA,sBAFrB;AAE6CC,EAAAA,yBAF7C;AAEwEC,EAAAA,qBAFxE;AAGpCC,EAAAA,2BAHoC;AAGPC,EAAAA,eAHO;AAGUC,EAAAA;AAHV,CAAlB,CAAP,CAKba,UAAU,CAACiB,0BAAD,CALG,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\r\nimport { Row, Col, Card, FormGroup, FormLabel, Button } from 'react-bootstrap';\r\nimport {\r\n    callService, crudMaster, updateStore, getSampleCertTypeChange, getSampleCertRegSubTypeChange, filterColumnData,\r\n    getTestResultDataHistory, getActiveSampleHistory, generateCertificateAction, sentCertificateAction, correctionCertificateAction, xmlExportAction, getWholeFilterStatusHistory\r\n} from '../../actions'\r\nimport { getControlMap,convertDateValuetoString,rearrangeDateFormat} from '../../components/CommonScript';\r\nimport { constructOptionList, validateTwoDigitDate } from '../../components/CommonScript';\r\nimport ApprovalHistory from './ApprovalHistory';\r\nimport PrintHistory from './PrintHistory';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport Results from './Results';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport SampleCertificationHistoryFilter from './SampleCertificationHistoryFilter';\r\nimport { ReadOnlyText, ContentPanel, OutlineTransactionStatus, DecisionStatus  } from '../../components/App.styles';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport TransactionListMaster from '../../components/TransactionListMaster';\r\nimport { designProperties } from '../../components/Enumeration';\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { ProductList } from '../product/product.styled';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { ReactComponent as RefreshIcon } from '../../assets/image/refresh.svg';\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass SampleCertificationHistory extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const appHistoryDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n        const resultsDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n        const printHistoryDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n        const dataStateReportHistory = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n        \r\n        this.searchSampleRef = React.createRef();\r\n        this.state = {\r\n            openModal: false,\r\n            masterStatus: \"\",\r\n            controlMap: new Map(),\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            selectedFilter: {},\r\n            userRoleControlRights: [],\r\n            appHistoryDataState,\r\n            resultsDataState,\r\n            printHistoryDataState,\r\n            dataStateReportHistory,\r\n            skip: 0,\r\n            take: this.props.Login.settings ? this.props.Login.settings[3] : 25\r\n        }\r\n\r\n        this.searchRef = React.createRef();\r\n        this.searchFieldList =  [\"scomponentname\",\"sarno\",\"sproductname\",\"ssamplecertificateversioncode\",\"sversion\",\r\n\t\t\"smanufname\",\"sspecname\",\"nrmsno\",\"dtransactiondate\",\"smanuflotno\"]\r\n    }\r\n\r\n\r\n    onSampleTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map[\"nsampletypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getSampleCertTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n    onRegSubTypeChange = (comboData, fieldName) => {\r\n        const regSubTypeValue = this.state.regSubTypeValue || {};\r\n        regSubTypeValue[fieldName] = comboData;\r\n        this.setState({ regSubTypeValue });\r\n        //this.props.getSampleCertRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n\r\n    }\r\n\r\n\r\n    onFilterChange = (comboData, fieldName) => {\r\n        const FilterStatusValue = this.state.FilterStatusValue || {};\r\n        FilterStatusValue[fieldName] = comboData;\r\n        this.setState({ FilterStatusValue });\r\n        //this.props.getSampleCertRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n\r\n    }\r\n\r\n\r\n\r\n    onRegTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map[\"nregtypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getSampleCertRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n\r\n    handleExpandChange = (row, dataState) => {\r\n\r\n        const viewParam = {\r\n            TransactionSampleResults: this.props.Login.masterData.TransactionSampleResults,\r\n            userInfo: this.props.Login.userInfo,\r\n            primaryKeyField: \"ntransactiontestcode\",\r\n            npreregno: \"npreregno\",\r\n            masterData: this.props.Login.masterData\r\n        };\r\n        this.props.getTestResultDataHistory({\r\n            ...viewParam, dataState,\r\n            primaryKeyValue: row[\"dataItem\"][viewParam.primaryKeyField], viewRow: row[\"dataItem\"]\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n\r\n    handleFilterDateChange = (dateName, dateValue) => {\r\n        const { selectedFilter } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedFilter[dateName] = dateValue;\r\n        this.setState({ selectedFilter });\r\n    }\r\n\r\n\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.showConfirmAlert !== state.showConfirmAlert) {\r\n            return {\r\n                showConfirmAlert: props.Login.showConfirmAlert\r\n            }\r\n        }\r\n        // if (props.Login.selectComponent !== state.selectComponent) {\r\n        //     return {\r\n        //         selectComponent: props.Login.selectComponent\r\n        //     }\r\n        // }\r\n        return null;\r\n    }\r\n\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        // setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    };\r\n\r\n\r\n    onFilterSubmit = () => {\r\n        let SampleTypeValue = this.state.SampleTypeValue?this.state.SampleTypeValue.nsampletypecode:\"\"\r\n    \r\n   if(SampleTypeValue){\r\n        let RealSampleTypeValue = this.state.SampleTypeValue ? this.state.SampleTypeValue.nsampletypecode.label : \"\"\r\n        let RealRegTypeValue = this.state.RegTypeValue ? this.state.RegTypeValue.nregtypecode.label : \"\"\r\n        let RealRegSubTypeValue = this.state.regSubTypeValue ? this.state.regSubTypeValue.nregsubtypecode.label : \"\"\r\n        let RealFromDate = new Date(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate)\r\n        let RealToDate = new Date(this.state.selectedFilter.todate || this.props.Login.masterData.ToDate)       \r\n        let inputData = {\r\n            nsampletypecode: this.state.SampleTypeValue.nsampletypecode.value,\r\n            nregtypecode: this.state.RegTypeValue.nregtypecode.value,\r\n            nregsubtypecode: this.state.regSubTypeValue.nregsubtypecode.value,\r\n            // nfilterstatus: this.state.FilterStatusValue.ntransactionstatus.value,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        let masterData = {\r\n            ...this.props.Login.masterData, RealSampleTypeValue, RealRegTypeValue, RealRegSubTypeValue,\r\n            RealFromDate, RealToDate\r\n        }\r\n\r\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.RealFromDate,\r\n            this.state.selectedFilter.todate || this.props.Login.masterData.RealToDate,this.props.Login.userInfo)\r\n        inputData['FromDate'] = obj.fromDate;\r\n        inputData['ToDate'] = obj.toDate;\r\n        this.props.getWholeFilterStatusHistory(masterData, inputData, \"FilterSubmit\",  {printHistoryDataState:this.state.printHistoryDataState,\r\n            appHistoryDataState:this.state.appHistoryDataState,\r\n            resultsDataState:this.state.resultsDataState});\r\n        }else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n\r\n    }\r\n\r\n    reloadData = () => {\r\n        let SampleTypeValue = this.state.SampleTypeValue?this.state.SampleTypeValue.nsampletypecode:\"\"\r\n        if(SampleTypeValue){\r\n        let inputData = {\r\n            nsampletypecode: this.state.SampleTypeValue.nsampletypecode.value,\r\n            nregtypecode: this.state.RegTypeValue.nregtypecode.value,\r\n            nregsubtypecode: this.props.Login.masterData.RegistrationSubTypeValue ? this.props.Login.masterData.RegistrationSubTypeValue.nregsubtypecode :\r\n                this.state.regSubTypeValue ? this.state.regSubTypeValue.nregsubtypecode.value : \"\",\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n\r\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.RealFromDate,\r\n            this.state.selectedFilter.todate || this.props.Login.masterData.RealToDate,this.props.Login.userInfo)\r\n        inputData['FromDate'] = obj.fromDate;\r\n        inputData['ToDate'] = obj.toDate;\r\n        //let inputParam = { masterData, inputData }\r\n        // const FilterStatusValue ={ntransactionstatus: this.state.FilterStatusValue.ntransactionstatus?\r\n        //     this.state.FilterStatusValue.ntransactionstatus.label: \"\"};\r\n        // this.setState({FilterStatusValue});\r\n        this.props.getWholeFilterStatusHistory(this.props.Login.masterData, inputData, \"FilterSubmit\",  {printHistoryDataState:this.state.printHistoryDataState,\r\n            appHistoryDataState:this.state.appHistoryDataState,\r\n            resultsDataState:this.state.resultsDataState});\r\n        }else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n\r\n    }\r\n\r\n    covertDatetoString(startDateValue, endDateValue) {\r\n        const startDate = new Date(startDateValue);\r\n        const endDate = new Date(endDateValue);\r\n\r\n        const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\r\n        const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\r\n        const prevDay = validateTwoDigitDate(String(startDate.getDate()));\r\n        const currentDay = validateTwoDigitDate(String(endDate.getDate()));\r\n        const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay\r\n        const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay\r\n\r\n        const fromDate = fromDateOnly + \"T00:00:00\";\r\n        const toDate = toDateOnly + \"T23:59:59\";\r\n        return ({ fromDate, toDate, breadCrumbFrom: fromDateOnly, breadCrumbto: toDateOnly })\r\n    }\r\n\r\n    tabDetail = () => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_APPROVALHISTORY\",\r\n            <ApprovalHistory\r\n                approvalHistory={this.props.Login.masterData.approvalHistory}\r\n                dataResult={process(this.props.Login.masterData.approvalHistory || [], this.state.appHistoryDataState)}\r\n                dataState={(this.props.Login.screenName === \"\" || this.props.Login.screenName === \"IDS_APPROVALHISTORY\") ? this.state.appHistoryDataState : { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }}\r\n                controlMap={this.state.controlMap}\r\n                userInfo={this.props.Login.userInfo}\r\n                dataStateChange={(event) => this.setState({ appHistoryDataState: event.dataState })}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                screenName=\"IDS_APPROVALHISTORY\"\r\n            />\r\n        );\r\n\r\n        tabMap.set(\"IDS_PRINTHISTORY\",\r\n            <PrintHistory\r\n                printHistory={this.props.Login.masterData.printHistory}\r\n                dataResult={process(this.props.Login.masterData.printHistory || [], this.state.printHistoryDataState)}\r\n                dataState={(this.props.Login.screenName === \"\" || this.props.Login.screenName === \"IDS_PRINTHISTORY\") ? this.state.printHistoryDataState : { skip: 0, take: 10 }}\r\n                controlMap={this.state.controlMap}\r\n                dataStateChange={(event) => this.setState({ printHistoryDataState: event.dataState })}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                userInfo={this.props.Login.userInfo}\r\n                inputParam={this.props.Login.inputParam}\r\n                screenName=\"IDS_PRINTHISTORY\"\r\n            />);\r\n\r\n\r\n        tabMap.set(\"IDS_RESULTS\",\r\n            <Results\r\n                TransactionSampleTests={this.props.Login.masterData.TransactionSampleTests}\r\n                dataResult={process(this.props.Login.masterData.TransactionSampleTests || [], this.state.resultsDataState)}\r\n                dataState={(this.props.Login.screenName === \"\" || this.props.Login.screenName === \"IDS_RESULTS\") ? this.state.resultsDataState : { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }}\r\n                controlMap={this.state.controlMap}\r\n                dataStateChange={(event) => this.setState({ resultsDataState: event.dataState })}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                userInfo={this.props.Login.userInfo}\r\n                inputParam={this.props.Login.inputParam}\r\n                handleExpandChange={this.handleExpandChange}\r\n                screenName=\"IDS_RESULTS\"\r\n                childList={this.props.Login.masterData.sampleTestResults}\r\n                childMappingField={\"ntransactiontestcode\"}\r\n                hasChild={true}\r\n            // childList ={props.childList || new Map()}\r\n            />);\r\n\r\n\r\n    //         tabMap.set(\"IDS_SAMPLEREPORTHISTORY\", <SampleReportHistory \r\n    //         userRoleControlRights={this.props.userRoleControlRights}\r\n    //         controlMap={this.props.controlMap}\r\n    //         inputParam={this.props.inputParam}\r\n    //         userInfo={this.props.userInfo}\r\n    //         masterData={this.props.masterData}\r\n    //         primaryList={\"ReportHistory\"}\r\n    //         dataResult={process(this.props.masterData[\"ReportHistory\"]||[], this.state.dataStateReportHistory)}\r\n    //         dataState={(this.props.screenName === undefined || this.props.screenName === \"IDS_BATCHREPORTHISTORY\") ? this.state.dataStateReportHistory : { skip: 0, take: 10 }}\r\n    //         dataStateChange={(event) => this.setState({ dataStateReportHistory: event.data })}\r\n    //         columnList={this.extractedReportHistoryColumnList}\r\n    //         methodUrl={\"Cetrificate\"}\r\n    //         isActionRequired={true}\r\n    //         selectedId={0}\r\n    //         expandField=\"\"\r\n    //         handleExpandChange={this.props.handleExpandChange}\r\n    //         hasChild={false}\r\n    //         childColumnList={this.TestColumnList}\r\n    //         childList ={this.props.childList || new Map()}\r\n    //         viewDownloadFile= {this.props.viewDownloadFile}\r\n    //         downloadParam = {{classUrl:\"certificategeneration\",operation:\"download\",methodUrl:\"Report\"}}\r\n    //         hasControlWithOutRights={true}\r\n    //         showDocViewer={true}\r\n    //         handleClickRegenrate={this.props.handleClickRegenrate}\r\n    //    />)\r\n\r\n        return tabMap;\r\n\r\n    }\r\n\r\n    render() {\r\n        const { SelectedRegistration, searchedData, Registration } = this.props.Login.masterData;\r\n    \r\n\r\n        // if (Registration) {\r\n        //     sortData(Registration, \"descending\", \"nregcertificatecode\");\r\n        // }\r\n        const getSample = {\r\n            screenName: \"IDS_SAMPLECERTIFICATIONGENERATION\", operation: \"get\", masterData: this.props.Login.masterData,\r\n            userInfo: this.props.Login.userInfo, methodUrl: \"SampleCertification\", keyName: \"samplecertification\"\r\n        };\r\n        this.fromDate = (this.state.selectedFilter[\"fromdate\"] && this.state.selectedFilter[\"fromdate\"]) || rearrangeDateFormat(this.props.Login.userInfo,this.props.Login.masterData.RealFromDate);\r\n        this.toDate = (this.state.selectedFilter[\"todate\"] && this.state.selectedFilter[\"todate\"]) || rearrangeDateFormat(this.props.Login.userInfo,this.props.Login.masterData.RealToDate);\r\n       \r\n\r\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.RealFromDate,\r\n            this.state.selectedFilter.todate || this.props.Login.masterData.RealToDate,this.props.Login.userInfo)\r\n\r\n        this.breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": obj.breadCrumbFrom || this.state.RealFromDate\r\n            }, {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": obj.breadCrumbto || this.state.RealToDate\r\n            },\r\n            {\r\n                \"label\": \"IDS_SAMPLETYPE\",\r\n                //\"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\r\n                \"value\": this.state.RealSampleTypeValue\r\n            }, {\r\n                \"label\": \"IDS_REGTYPE\",\r\n                \"value\": this.state.RealRegTypeValue\r\n            }, {\r\n                \"label\": \"IDS_REGSUBTYPE\",\r\n                \"value\": this.state.RealRegSubTypeValue\r\n            },\r\n            // {\r\n            //     \"label\": \"IDS_FILTERSTATUS\",\r\n            //     \"value\": this.state.RealFilterValue\r\n            // }\r\n        ]\r\n\r\n\r\n        const filterParam = {\r\n            inputListName: \"Registration\", selectedObject: \"SelectedRegistration\", primaryKeyField: \"nregcertificatecode\",\r\n            fetchUrl: \"samplecertificationhistory/getSampleCertificationById\", fecthInputObject: { userinfo: this.props.Login.userInfo }, masterData: this.props.Login.masterData,\r\n            searchFieldList: this.searchFieldList\r\n        };\r\n\r\n\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    {this.breadCrumbData.length > 0 ?\r\n                        <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} /> : \"\"\r\n                    }\r\n\r\n                    <Row noGutters={true}>\r\n                        <Col md={12} className=\"parent-port-height sticky_head_parent\" ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n                            <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1} secondaryInitialSize={30}\r\n                            >\r\n                                <TransactionListMaster\r\n                                    masterList={searchedData || Registration || []}\r\n                                    selectedMaster={[SelectedRegistration]}\r\n                                    primaryKeyField=\"nregcertificatecode\"\r\n                                    getMasterDetail={(SampleCertification) => this.props.getActiveSampleHistory(SampleCertification, this.props.Login.userInfo, this.props.Login.masterData,\r\n                                                                        {printHistoryDataState:this.state.printHistoryDataState,\r\n                                                                         appHistoryDataState:this.state.appHistoryDataState,\r\n                                                                         resultsDataState:this.state.resultsDataState}\r\n                                                                        )}\r\n                                    inputParam={getSample}\r\n                                    additionalParam={[]}\r\n                                    mainField=\"scomponentname\"\r\n                                    // selectedListName=\"smanuflotno\"\r\n                                    // objectName=\"sarno\"\r\n                                    listName=\"IDS_SAMPLE\"\r\n                                    showStatusLink={true}\r\n                                    subFields={\r\n                                        [\r\n                                            { [designProperties.VALUE]: \"smanuflotno\" },\r\n                                            { [designProperties.VALUE]: \"sarno\" },\r\n                                        ]\r\n                                    }\r\n                                    // moreField=\"sarno\"\r\n                                    //needValidation={false}\r\n                                    needFilter={true}\r\n                                    filterColumnData={this.props.filterColumnData}\r\n                                    searchListName=\"searchedData\"\r\n                                    searchRef={this.searchRef}\r\n                                    filterParam={filterParam}\r\n                                    handlePageChange={this.handlePageChange}\r\n                                    onFilterSubmit={this.onFilterSubmit}\r\n                                    skip={this.state.skip}\r\n                                    take={this.state.take}\r\n                                    commonActions={\r\n                                        <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                            <Button className=\"btn btn-circle outline-grey ml-2 p-0\" variant=\"link\"\r\n                                                onClick={() => this.reloadData()} \r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })} >\r\n                                                    <RefreshIcon className='custom_icons'/>\r\n                                            </Button>\r\n                                        </ProductList>\r\n                                    }\r\n                                    filterComponent={[\r\n                                        {\r\n                                            \"IDS_SAMPLECERTIFICATEGENERATION\": <SampleCertificationHistoryFilter\r\n                                                formatMessage={this.props.intl.formatMessage}\r\n                                                Product={this.props.Login.masterData.MAHProduct || []}\r\n                                                SampleType={this.state.SampleType || []}\r\n                                                RegistrationType={this.state.RegistrationType || []}\r\n                                                RegistrationSubType={this.state.RegistrationSubType || []}\r\n                                                FilterStatus={this.state.FilterList || []}\r\n                                                userInfo={this.props.Login.userInfo || {}}\r\n                                                SampleTypeValue={this.state.SampleTypeValue || {}}\r\n                                                RegTypeValue={this.state.RegTypeValue || {}}\r\n                                                regSubTypeValue={this.state.regSubTypeValue || {}}\r\n                                                FilterStatusValue={this.state.FilterStatusValue || {}}\r\n                                                FromDate={this.fromDate}\r\n                                                ToDate={this.toDate}\r\n                                                onSampleTypeChange={this.onSampleTypeChange}\r\n                                                onRegTypeChange={this.onRegTypeChange}\r\n                                                onRegSubTypeChange={this.onRegSubTypeChange}\r\n                                                handleFilterDateChange={this.handleFilterDateChange}\r\n                                                onFilterChange={this.onFilterChange}\r\n                                            />\r\n                                        }\r\n                                    ]}\r\n                                />\r\n                                <SplitterLayout vertical borderColor=\"#999\" percentage={true} primaryIndex={1} secondaryInitialSize={400}\r\n                                    customClassName=\"fixed_list_height\">\r\n                                    <PerfectScrollbar>\r\n                                        <div className=\"card_group\">\r\n                                            <ContentPanel className=\"panel-main-content\">\r\n                                                <Card className=\"border-0\">\r\n                                                    {this.props.Login.masterData.SelectedRegistration ?\r\n                                                        <>\r\n                                                            <Card.Header>\r\n                                                                <Card.Title className=\"product-title-main\">\r\n                                                                    {this.props.Login.masterData.SelectedRegistration.scomponentname}\r\n                                                                </Card.Title>\r\n\r\n                                                                <Card.Subtitle>\r\n                                                                    <div className=\"d-flex product-category\">\r\n                                                                        <h2 className=\"product-title-sub flex-grow-1\">\r\n\r\n                                                                        <OutlineTransactionStatus\r\n                                                                                transcolor={this.props.Login.masterData.SelectedRegistration.scolorhexcode}>\r\n                                                                                {this.props.Login.masterData.SelectedRegistration.stransdisplaystatus}\r\n                                                                        </OutlineTransactionStatus>\r\n                                                                            {/* <DecisionStatus\r\n                                                                                decisioncolor={this.props.Login.masterData.SelectedRegistration.sdecisioncolor}>\r\n                                                                                {this.props.Login.masterData.SelectedRegistration.sdecisionstatus}\r\n                                                                            </DecisionStatus> */}\r\n                                                                            {/* <span className={`btn btn-outlined ${userStatusCSS} btn-sm ml-3`}>\r\n                                                                                {activeIconCSS !== \"\" ? <i class={activeIconCSS}></i> : \"\"}\r\n                                                                                <FormattedMessage id={this.props.Login.masterData.SelectedRegistration.sdecisionstatus} />\r\n                                                                            </span>\r\n                                                                            {\" \"}\r\n                                                                            <MediaLabel style={{ color: this.props.Login.masterData.SelectedRegistration ? this.props.Login.masterData.SelectedRegistration.scolorhexcode : \"\" }}>\r\n                                                                                <FormattedMessage id={this.props.Login.masterData.SelectedRegistration.stransdisplaystatus} />\r\n                                                                            </MediaLabel> */}\r\n                                                                        </h2>\r\n\r\n                                                                    </div>\r\n                                                                </Card.Subtitle>\r\n                                                            </Card.Header>\r\n                                                            <Row>\r\n                                                                <Col md={4}>\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel><FormattedMessage id=\"IDS_ARNO\" message=\"Arno\" /></FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.sarno}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                                <Col md={4}>\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel><FormattedMessage id=\"IDS_COMPONENTNAME\" message=\"Componentname\" /></FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.scomponentname}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n\r\n                                                                <Col md={4}>\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel><FormattedMessage id=\"IDS_GENERICPRODUCT\" message=\"Genericproduct\" /></FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.sproductname}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                                <Col md={4}>\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel><FormattedMessage id=\"IDS_VERSION\" message=\"Version\" /></FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.sversion}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n\r\n                                                                <Col md={4}>\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel><FormattedMessage id=\"IDS_MANUFACTURENAME\" message=\"Manufacturename\" /></FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.smanufname}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n\r\n                                                                <Col md={4}>\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel><FormattedMessage id=\"IDS_CERTIFICATENUMBER\" message=\"Certificatenumber\" /></FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.ssamplecertificateversioncode}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n\r\n\r\n                                                                <Col md={4}>\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel><FormattedMessage id=\"IDS_SPECIFICATIONSTUDYPLAN\" message=\"Specificationname\" /></FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.sspecname}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n\r\n                                                                <Col md={4}>\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel><FormattedMessage id=\"IDS_RMSNO\" message=\"Rmsno\" /></FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.nrmsno}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                                <Col md={4}>\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel><FormattedMessage id=\"IDS_REGISTRATIONDATE\" message=\"RegistrationDate\" /></FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.dtransactiondate}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n\r\n                                                                <Col md={4}>\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel><FormattedMessage id=\"IDS_BATCHLOTNO\" message=\"Batchlotno\" /></FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.smanuflotno}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n\r\n                                                                <Col md={4}>\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel><FormattedMessage id=\"IDS_DECISIONSTATUS\" message=\"Decisionstatus\" /></FormLabel>\r\n                                                                        <DecisionStatus\r\n                                                                          decisioncolor={this.props.Login.masterData.SelectedRegistration.sdecisioncolor}>\r\n                                                                          {this.props.Login.masterData.SelectedRegistration.sdecisionstatus}\r\n                                                                        </DecisionStatus> \r\n                                                                        {/* <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.sdecisionstatus}</ReadOnlyText> */}\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                            </Row>\r\n\r\n                                                            <Row>\r\n                                                                <Col>\r\n                                                                    <div className=\"horizontal-line\"></div>\r\n                                                                </Col>\r\n                                                            </Row>\r\n\r\n                                                            <CustomTab tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                                                        </>\r\n                                                        : \"\"}\r\n                                                </Card>\r\n                                            </ContentPanel>\r\n                                        </div>\r\n                                    </PerfectScrollbar>\r\n                                </SplitterLayout>\r\n                            </SplitterLayout >\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const SampleMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\",\r\n                \"ssampletypename\", undefined, undefined, true);\r\n            const SampleType = SampleMap.get(\"OptionList\");\r\n            const SampleTypeValue = { nsampletypecode: SampleType.length > 0 ? SampleType[0] : \"\" };\r\n\r\n            const RegMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\",\r\n                \"sregtypename\", undefined, undefined, true);\r\n            const RegistrationType = RegMap.get(\"OptionList\");\r\n            const RegTypeValue = { nregtypecode: RegistrationType.length > 0 ? RegistrationType[0] : \"\" };\r\n\r\n            const RegSubMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\",\r\n                \"sregsubtypename\", 'nsorter', \"ascending\", false);\r\n            const RegistrationSubType = RegSubMap.get(\"OptionList\");\r\n            //const regSubTypeValue = {nregsubtypecode: RegistrationSubType.length> 0? RegistrationSubType[2]: \"\"};\r\n\r\n            const FilterStatus = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"napprovalstatuscode\",\r\n                \"stransdisplaystatus\", undefined, undefined, true);\r\n            const FilterList = FilterStatus.get(\"OptionList\")\r\n            let FilterStatusValue = {};\r\n            let regSubTypeValue = {};\r\n            if (this.props.Login.masterData.operation === \"FilterSubmit\") {\r\n                FilterStatusValue = this.state.FilterStatusValue\r\n                regSubTypeValue = this.state.regSubTypeValue\r\n            } else {\r\n                FilterStatusValue = { ntransactionstatus: FilterList.length > 0 ? FilterList[1] : \"\" };\r\n                regSubTypeValue = { nregsubtypecode: RegistrationSubType.length > 0 ?\r\n                    {label:this.props.Login.masterData.RegistrationSubTypeValue.sregsubtypename,\r\n                    value:this.props.Login.masterData.RegistrationSubTypeValue.nregsubtypecode,\r\n                    item:this.props.Login.masterData.ApprovalVersionValue}\r\n                    : \"\" };\r\n            }\r\n\r\n\r\n            let RealFilterValue = {};\r\n            let RealRegSubTypeValue = {};\r\n            let RealFromDate = {};\r\n            let RealToDate = {};\r\n            if (this.props.Login.masterData.RealFilterValue !== previousProps.Login.masterData) {\r\n\r\n                RealFilterValue = this.props.Login.masterData.RealFilterValue ? this.props.Login.masterData.RealFilterValue :\r\n                    this.props.Login.masterData.FilterStatusValue ? this.props.Login.masterData.FilterStatusValue.stransdisplaystatus : \"\"\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.RealRegSubTypeValue !== previousProps.Login.masterData) {\r\n\r\n             RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue:\r\n                   this.props.Login.masterData.RegistrationSubTypeValue?this.props.Login.masterData.RegistrationSubTypeValue.sregsubtypename:\"\"\r\n                   \r\n                // RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue :\r\n                //     this.props.Login.masterData.RegistrationSubTypeValue ? this.props.Login.masterData.RegistrationSubTypeValue.sregsubtypename : \"\"\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.RealFromDate !== previousProps.Login.masterData) {\r\n\r\n                RealFromDate = this.props.Login.masterData.RealFromDate ? this.props.Login.masterData.RealFromDate :\r\n                    this.props.Login.masterData.RealFromDate ? this.props.Login.masterData.RealFromDate : \"\"\r\n\r\n            }\r\n\r\n\r\n            if (this.props.Login.masterData.RealToDate !== previousProps.Login.masterData) {\r\n\r\n                RealToDate = this.props.Login.masterData.RealToDate ? this.props.Login.masterData.RealToDate :\r\n                    this.props.Login.masterData.RealToDate ? this.props.Login.masterData.RealToDate : \"\"\r\n\r\n            }\r\n\r\n            // if (this.props.Login.masterData.Registration !== previousProps.Login.masterData) {\r\n\r\n            //     const  Registration  = this.props.Login.masterData;\r\n            //     sortData(Registration, \"descending\", \"nregcertificatecode\");\r\n\r\n            // }\r\n\r\n            let { printHistoryDataState, appHistoryDataState, resultsDataState} = this.state;\r\n          \r\n            let  isStateChanged = false;\r\n            if (this.props.Login.printHistoryDataState && this.props.Login.printHistoryDataState !== previousProps.Login.printHistoryDataState) {\r\n                printHistoryDataState = this.props.Login.printHistoryDataState;\r\n                isStateChanged = true;\r\n            }\r\n            if (this.props.Login.appHistoryDataState && this.props.Login.appHistoryDataState !== previousProps.Login.appHistoryDataState) {\r\n                appHistoryDataState = this.props.Login.appHistoryDataState;\r\n                isStateChanged = true;\r\n            }\r\n            if (this.props.Login.resultsDataState && this.props.Login.resultsDataState !== previousProps.Login.resultsDataState) {\r\n                resultsDataState = this.props.Login.resultsDataState;\r\n                isStateChanged = true;\r\n            }\r\n\r\n            const RealSampleTypeValue = this.props.Login.masterData.SampleTypeValue ? this.props.Login.masterData.SampleTypeValue.ssampletypename : \"\"\r\n            const RealRegTypeValue = this.props.Login.masterData.RegistrationTypeValue ? this.props.Login.masterData.RegistrationTypeValue.sregtypename : \"\"\r\n            if (isStateChanged)\r\n            {\r\n                this.setState({printHistoryDataState, appHistoryDataState, resultsDataState,\r\n                    SampleType, RegistrationType, RegistrationSubType, FilterList, SampleTypeValue, RegTypeValue, RealSampleTypeValue,\r\n                    regSubTypeValue, FilterStatusValue, RealRegTypeValue, RealRegSubTypeValue, RealFilterValue, RealFromDate, RealToDate\r\n                });\r\n            }  \r\n            else{\r\n                this.setState({\r\n                    SampleType, RegistrationType, RegistrationSubType, FilterList, SampleTypeValue, RegTypeValue, RealSampleTypeValue,\r\n                    regSubTypeValue, FilterStatusValue, RealRegTypeValue, RealRegSubTypeValue, RealFilterValue, RealFromDate, RealToDate\r\n                });  \r\n            }      \r\n\r\n        }\r\n        // if (this.props.Login.masterData.RealFilterValue !== previousProps.Login.masterData)  {\r\n\r\n        //     const RealFilterValue = this.props.Login.masterData.RealFilterValue ? this.props.Login.masterData.RealFilterValue:\"\"\r\n\r\n        //     this.setState({RealFilterValue});\r\n        //  }\r\n        //else{\r\n        //     const RealFilterValue = this.props.Login.masterData.RealFilterValue ? this.props.Login.masterData.RealFilterValue:\"\"\r\n\r\n        //     //this.setState({RealFilterValue});\r\n        // }this.state.regSubTypeValue\r\n\r\n\r\n\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ userRoleControlRights, controlMap });\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, getSampleCertTypeChange, filterColumnData,\r\n    getSampleCertRegSubTypeChange, getTestResultDataHistory, getActiveSampleHistory, generateCertificateAction, sentCertificateAction,\r\n    correctionCertificateAction, xmlExportAction, getWholeFilterStatusHistory\r\n}\r\n)(injectIntl(SampleCertificationHistory));"]},"metadata":{},"sourceType":"module"}