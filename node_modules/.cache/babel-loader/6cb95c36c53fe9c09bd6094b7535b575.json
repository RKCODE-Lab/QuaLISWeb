{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\competencemanagement\\\\trainingupdate\\\\TrainingUpdateChildTab.jsx\";\nimport React, { version } from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { process } from '@progress/kendo-data-query';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport { constructOptionList, onDropAttachFileList, deleteAttachmentDropZone, showEsign, create_UUID } from '../../../components/CommonScript';\nimport CustomTabs from '../../../components/custom-tabs/custom-tabs.component';\nimport { connect } from 'react-redux';\nimport TrainingParticipantsTab from './TrainingParticipantsTab';\nimport TrainingDocTab from './TrainingDocTab';\nimport AddTrainingDocFile from './AddTrainingDocFile';\nimport AddTraineeDocFile from './AddTraineeDocFile';\nimport Esign from '../../audittrail/Esign';\nimport { attachmentType, FORMULAFIELDTYPE, transactionStatus } from '../../../components/Enumeration';\nimport AddParticipantsStatus from '../trainingcertificate/AddParticipantsStatus';\nimport { addtraineedocfile } from '../../../actions';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass TrainingUpdateChildTab extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.TrainingDocumentDataStateChange = event => {\n      this.setState({\n        dataState: event.dataState\n      });\n    };\n\n    this.ParticipantsDataStateChange = event => {\n      this.setState({\n        dataStateParticipants: event.dataState\n      });\n    };\n\n    this.handleChange = (value, valueParam, isSection) => {\n      if (value !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[valueParam] = value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_PARTICIPANTS\", /*#__PURE__*/React.createElement(TrainingParticipantsTab, {\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        screenName: \" TrainieeDocuments\",\n        updateStore: this.props.updateStore,\n        primaryKeyField: \"nparticipantcode\",\n        masterData: this.props.masterData,\n        primaryList: \"Participants\",\n        dataResult: process(this.props.Login.masterData[(\"Participants\", \"TraineeDocuments\")] || [], this.state.dataStateParticipants),\n        dataState: this.props.screenName === undefined || this.props.screenName === \"Participants\" ? this.state.dataStateParticipants : {\n          skip: 0\n        },\n        dataStateChange: event => this.setState({\n          dataStateParticipants: event.data\n        }),\n        columnList: this.participantsColumnList,\n        methodUrl: \"TrainingParticipants\",\n        fetchParticipantsRecordByID: this.fetchParticipantsRecordByID,\n        deleteRecord: this.deleteRecord,\n        getAvailableData: this.props.getAvailableData,\n        addtraineedoc: this.addtraineedoc,\n        selectedRecord: this.state.selectedRecord || {},\n        getTrainingParticipantsAttended: this.props.getTrainingParticipantsAttended,\n        getTrainingParticipantsCompetent: this.props.getTrainingParticipantsCompetent,\n        getTrainingParticipantsCertified: this.props.getTrainingParticipantsCertified,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 40\n        }\n      }));\n      tabMap.set(\"IDS_TRAININGDOCUMENTS\", /*#__PURE__*/React.createElement(TrainingDocTab, {\n        screenName: \"TrainingDocuments\",\n        onInputOnChange: this.onInputOnChange,\n        controlMap: this.props.controlMap,\n        updateStore: this.props.updateStore,\n        userRoleControlRights: this.props.userRoleControlRights,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        deleteRecord: this.deleteRecord,\n        TrainingDocument: this.props.masterData.TrainingDocument || [],\n        getAvailableData: this.props.getAvailableData,\n        settings: this.props.settings,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 45\n        }\n      }));\n      return tabMap;\n    };\n\n    this.onInputOnChange = (event, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = optional;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.addtraineedoc = ncontrolcode => {\n      let openModal = this.props.Login.openModal;\n      let operation = \"create\";\n      let screenName = this.props.Login.screenName;\n      screenName = \"IDS_TRAINEEDOCUMENTS\";\n      openModal = true;\n      const selectedRecord = this.props.selectedRecord;\n      const updateInfo = {\n        userInfo: this.props.Login.userInfo,\n        operation,\n        selectedRecord,\n        ncontrolcode,\n        screenName\n      };\n      this.props.addtraineedocfile(updateInfo); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         openModal: true,\n      //         operation: \"create\",\n      //         selectedRecord: {},\n      //         ncontrolcode: ncontrolcode,\n      //         screenName : \"IDS_TRAINEEDOCUMENTS\" \n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"certify\" || this.props.Login.operation === \"attend\" || this.props.Login.operation === \"competent\" || this.props.Login.operation === \"complete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onDropTrainingDoc = (attachedFiles, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.onDropTrainieeDoc = (attachedFiles, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\"\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      const methodUrl = deleteParam.methodUrl;\n      const selected = deleteParam.selectedRecord;\n      let dataState = undefined;\n      const inputParam = {\n        inputData: {\n          [methodUrl.toLowerCase()]: selected,\n          userinfo: this.props.userInfo\n        },\n        classUrl: \"trainingupdate\",\n        operation: deleteParam.operation,\n        methodUrl: methodUrl,\n        dataState\n      };\n      const masterData = this.props.masterData;\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            operation: deleteParam.operation,\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\", {});\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputParam = {};\n      let defaultInput = {};\n      let isValidRequest = true;\n\n      if (this.props.screenName === \"IDS_TRAININGDOCUMENTS\") {\n        inputParam = this.onSaveTrainingDoc(saveType, formRef);\n      }\n\n      if (this.props.screenName === \"IDS_TRAINEEDOCUMENTS\") {\n        inputParam = this.onSaveTrainieeDoc(saveType, formRef);\n      }\n\n      if (this.props.screenName === \"IDS_ATTENDPARTICIPANTSDETAILS\") {\n        inputParam = this.onSaveAttended(saveType, formRef);\n      }\n\n      if (this.props.screenName === \"IDS_CERTIFYPARTICIPANTSDETAILS\") {\n        inputParam = this.onSaveCertified(saveType, formRef);\n      }\n\n      if (this.props.screenName === \"IDS_COMPETENTPARTICIPANTSDETAILS\") {\n        inputParam = this.onSaveCompetent(saveType, formRef);\n      }\n\n      if (isValidRequest) {\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openModal\", defaultInput);\n        }\n      }\n    };\n\n    this.onSaveAttended = (saveType, formRef) => {\n      let inputData = [];\n      let trainingupdate = [];\n      let dataState = undefined;\n      let postParam = {\n        inputListName: \"TechniqueList\",\n        selectedObject: \"SelectedTrainingUpdate\",\n        primaryKeyField: \"ntrainingcode\"\n      };\n      inputData[\"userinfo\"] = this.props.userInfo;\n      this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\n        trainingupdate.push({\n          ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\n          nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\n          ntransactionstatus: transactionStatus.ATTENDED,\n          ncertifiedstatus: transactionStatus.NO,\n          ncompetencystatus: transactionStatus.NO,\n          nusercode: participants.item.nusercode,\n          ntechniquecode: this.props.masterData.selectedTechinque.ntechniquecode\n        });\n      });\n      inputData[\"trainingupdate\"] = trainingupdate;\n      const inputParam = {\n        classUrl: 'trainingupdate',\n        methodUrl: \"TrainingParticipants\",\n        inputData: inputData,\n        operation: \"attend\",\n        saveType,\n        formRef,\n        dataState,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onSaveCertified = (saveType, formRef) => {\n      let inputData = [];\n      let trainingupdate = [];\n      let dataState = undefined;\n      let postParam = {\n        inputListName: \"TechniqueList\",\n        selectedObject: \"SelectedTrainingUpdate\",\n        primaryKeyField: \"ntrainingcode\"\n      };\n      inputData[\"userinfo\"] = this.props.userInfo;\n      this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\n        trainingupdate.push({\n          ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\n          nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\n          ntransactionstatus: transactionStatus.ATTENDED,\n          ncertifiedstatus: transactionStatus.YES,\n          ncompetencystatus: transactionStatus.NO,\n          nusercode: participants.item.nusercode,\n          ntechniquecode: this.props.masterData.selectedTechinque.ntechniquecode\n        });\n      });\n      inputData[\"trainingupdate\"] = trainingupdate;\n      const inputParam = {\n        classUrl: 'trainingupdate',\n        methodUrl: \"TrainingParticipants\",\n        inputData: inputData,\n        operation: \"certify\",\n        saveType,\n        formRef,\n        dataState,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onSaveCompetent = (saveType, formRef) => {\n      let inputData = [];\n      let trainingupdate = [];\n      let dataState = undefined;\n      let postParam = {\n        inputListName: \"TechniqueList\",\n        selectedObject: \"SelectedTrainingUpdate\",\n        primaryKeyField: \"ntrainingcode\"\n      };\n      inputData[\"userinfo\"] = this.props.userInfo;\n      this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\n        trainingupdate.push({\n          ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\n          nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\n          ntransactionstatus: transactionStatus.ATTENDED,\n          ncertifiedstatus: transactionStatus.NO,\n          ncompetencystatus: transactionStatus.YES,\n          nusercode: participants.item.nusercode,\n          ntechniquecode: this.props.masterData.selectedTechinque.ntechniquecode\n        });\n      });\n      inputData[\"trainingupdate\"] = trainingupdate;\n      const inputParam = {\n        classUrl: 'trainingupdate',\n        methodUrl: \"TrainingParticipants\",\n        inputData: inputData,\n        operation: \"competent\",\n        saveType,\n        formRef,\n        dataState,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onSaveTrainingDoc = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let trainingdocArray = [];\n      let trainingdoc = {\n        ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\n        ntrainingdoccode: selectedRecord.ntrainingdoccode ? selectedRecord.ntrainingdoccode : 0,\n        nstatus: transactionStatus.ACTIVE\n      };\n      const formData = new FormData();\n\n      if (nattachmenttypecode === attachmentType.FTP) {\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          acceptedFiles.forEach((file, index) => {\n            const tempData = Object.assign({}, trainingdoc);\n            const splittedFileName = file.name.split('.');\n            const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n            const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\n            const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\n            const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntrainingdoccode && selectedRecord.ntrainingdoccode > 0 && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n            tempData[\"sfilename\"] = file.name.trim();\n            tempData[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\n            tempData[\"ssystemfilename\"] = uniquefilename;\n            tempData[\"nfilesize\"] = file.size;\n            tempData[\"nlinkcode\"] = transactionStatus.NA;\n            tempData[\"nattachmenttypecode\"] = 1; // tempData[\"dcreateddate\"] = this.props.Login.userInfo;\n\n            formData.append(\"uploadedFile\" + index, file);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            trainingdocArray.push(tempData);\n          });\n          formData.append(\"filecount\", acceptedFiles.length);\n          isFileEdited = transactionStatus.YES;\n        } else {\n          trainingdoc[\"sfilename\"] = selectedRecord.sfilename;\n          trainingdoc[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\n          trainingdoc[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n          trainingdoc[\"nlinkcode\"] = transactionStatus.NA;\n          trainingdoc[\"nfilesize\"] = selectedRecord.nfilesize;\n          trainingdoc[\"dcreateddate\"] = this.props.Login.userInfo;\n          trainingdoc[\"nattachmenttypecode\"] = 1;\n          trainingdocArray.push(trainingdoc);\n        }\n      } else {\n        trainingdoc[\"ssystemfilename\"] = \"\";\n        trainingdoc[\"nattachmenttypecode\"] = 2;\n        trainingdoc[\"sfilename\"] = selectedRecord.slinkfilename;\n        trainingdoc[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\n        trainingdoc[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n        trainingdoc[\"nfilesize\"] = 0;\n        trainingdocArray.push(trainingdoc);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"trainingdoc\", JSON.stringify(trainingdocArray));\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.operation,\n        classUrl: \"trainingupdate\",\n        saveType,\n        formRef,\n        methodUrl: \"TrainingDoc\"\n      };\n      return inputParam;\n    };\n\n    this.onSaveTrainieeDoc = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let trainieedocArray = [];\n      let trainieedoc = {\n        nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\n        ntraineedoccode: selectedRecord.ntraineedoccode ? selectedRecord.ntraineedoccode : 0,\n        nstatus: transactionStatus.ACTIVE\n      };\n      const formData = new FormData();\n\n      if (nattachmenttypecode === attachmentType.FTP) {\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          acceptedFiles.forEach((file, index) => {\n            const tempData = Object.assign({}, trainieedoc);\n            const splittedFileName = file.name.split('.');\n            const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n            const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\n            const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\n            const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntraineedoccode && selectedRecord.ntraineedoccode > 0 && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n            tempData[\"sfilename\"] = file.name;\n            tempData[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\n            tempData[\"ssystemfilename\"] = uniquefilename;\n            tempData[\"nfilesize\"] = file.size;\n            tempData[\"nlinkcode\"] = transactionStatus.NA;\n            tempData[\"nattachmenttypecode\"] = 1; // tempData[\"dcreateddate\"] = this.props.Login.userInfo;\n\n            formData.append(\"uploadedFile\" + index, file);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            trainieedocArray.push(tempData);\n          });\n          formData.append(\"filecount\", acceptedFiles.length);\n          isFileEdited = transactionStatus.YES;\n        } else {\n          trainieedoc[\"sfilename\"] = selectedRecord.sfilename;\n          trainieedoc[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\n          trainieedoc[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n          trainieedoc[\"nlinkcode\"] = transactionStatus.NA;\n          trainieedoc[\"nfilesize\"] = selectedRecord.nfilesize;\n          trainieedoc[\"dcreateddate\"] = this.props.Login.userInfo;\n          trainieedoc[\"nattachmenttypecode\"] = 1;\n          trainieedocArray.push(trainieedoc);\n        }\n      } else {\n        trainieedoc[\"ssystemfilename\"] = \"\";\n        trainieedoc[\"nattachmenttypecode\"] = 2;\n        trainieedoc[\"sfilename\"] = selectedRecord.slinkfilename;\n        trainieedoc[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\n        trainieedoc[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n        trainieedoc[\"nfilesize\"] = 0;\n        trainieedocArray.push(trainieedoc);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"trainieedoc\", JSON.stringify(trainieedocArray));\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.operation,\n        classUrl: \"trainingupdate\",\n        saveType,\n        formRef,\n        methodUrl: \"TrainieeDoc\"\n      };\n      return inputParam;\n    };\n\n    this.fetchParticipantsRecordByID = (operation, version, ncontrolCode) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"trainingparticipants\"] = {\n        \"nusercode\": version.nusercode,\n        \"nparticipantcode\": version.nparticipantcode,\n        \"ntrainingcode\": version.ntrainingcode,\n        \"ncertifiedstatus\": version.ncertifiedstatus,\n        \"ncompetencystatus\": version.ncompetencystatus,\n        \"ntransactionstatus\": version.ntransactionstatus\n      };\n      const postParam = {\n        inputListName: \"TechniqueList\",\n        selectedObject: \"SelectedTrainingUpdate\",\n        primaryKeyField: \"ntrainingcode\",\n        primaryKeyValue: this.props.Login.masterData.TechniqueList.ntrainingcode,\n        fetchUrl: \"trainingupdate/getTraningUpdateByTechnique\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        methodUrl: \"TrainingParticipants\",\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        postParam,\n        operation\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            operation,\n            screenName: '',\n            id: 'ParticipantsStatus'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    const _dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    const dataStateParticipants = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      isOpen: false,\n      selectedRecord: {},\n      dataResult: [],\n      activeTab: 'Trainingdoc-tab',\n      dataState: _dataState,\n      dataStateParticipants: dataStateParticipants,\n      trainingDocument: [],\n      participants: []\n    };\n    this.trainingDocumentFieldList = ['ntrainingdoccode', 'nparticipantcode', 'ntrainingcode', 'sfilename', 'ntechniquecode', 'sfullname', 'nstatus', 'ntransactionstatus'];\n    this.trainingDocumentColumnList = [{\n      \"idsName\": \"IDS_TRAININGDOCUMENTNAME\",\n      \"dataField\": \"sfilename\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    this.participantsColumnList = [{\n      \"idsName\": \"IDS_PARTICIPANTSNAME\",\n      \"dataField\": \"sfullname\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }]; // this.validationTrainingDocumentColumnList = [{ \"idsName\": \"IDS_TRAININGDOCUMENTNAME\", \"dataField\": \"sfilename\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }];\n\n    this.validationParticipantsColumnList = [{\n      \"idsName\": \"IDS_PARTICIPANTS\",\n      \"dataField\": \"sfullname\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n  }\n\n  render() {\n    // const mandatoryFields = [];\n    // this.validationTrainingDocumentColumnList.forEach(item => item.mandatory === true ?\n    //    mandatoryFields.push(item) : \"\"\n    //  );\n    let mandatoryFields = [];\n\n    if (this.props.screenName === \"IDS_TRAININGDOCUMENTS\" || this.props.screenName === \"IDS_TRAINEEDOCUMENTS\") {\n      if (this.state.selectedRecord && this.state.selectedRecord.nattachmenttypecode === attachmentType.LINK) {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_FILENAME\",\n          \"dataField\": \"slinkfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }, {\n          \"idsName\": \"IDS_LINKNAME\",\n          \"dataField\": \"nlinkcode\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        });\n      } else {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        });\n      }\n    } else {\n      mandatoryFields.push({\n        mandatory: true,\n        idsName: \"IDS_PARTICIPANTNAME\",\n        dataField: \"nusercode\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CustomTabs, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 29\n      }\n    })))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 29\n        }\n      }) : this.props.screenName === \"IDS_TRAININGDOCUMENTS\" ? /*#__PURE__*/React.createElement(AddTrainingDocFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onDrop: this.onDropTrainingDoc,\n        onInputOnChange: this.onInputOnChange,\n        deleteAttachment: this.deleteAttachment,\n        formatMessage: this.props.intl.formatMessage,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_FILENAME\"\n        }),\n        operation: this.props.Login.operation,\n        userLogged: this.props.Login.userLogged,\n        inputParam: this.props.Login.inputParam,\n        selectedId: this.props.Login.selectedId,\n        maxSize: 20,\n        maxFiles: 1,\n        linkMaster: this.props.Login.linkMaster,\n        onComboChange: this.props.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 29\n        }\n      }) : this.props.screenName === \"IDS_TRAINEEDOCUMENTS\" ? /*#__PURE__*/React.createElement(AddTraineeDocFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onDrop: this.onDropTrainieeDoc,\n        onInputOnChange: this.onInputOnChange,\n        deleteAttachment: this.deleteAttachment,\n        formatMessage: this.props.intl.formatMessage,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_FILENAME\"\n        }),\n        operation: this.props.Login.operation,\n        userLogged: this.props.Login.userLogged,\n        inputParam: this.props.Login.inputParam,\n        selectedId: this.props.Login.selectedId,\n        linkMaster: this.props.Login.linkMaster,\n        onComboChange: this.props.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddParticipantsStatus, {\n        selectedRecord: this.props.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        handleChange: this.handleChange,\n        formatMessage: this.props.formatMessage,\n        usersStatus: this.props.usersStatus || [],\n        nusercode: this.props.nusercode || [],\n        selectedTrainingParticipants: this.props.masterData.SelectedTrainingParticipants || {},\n        extractedColumnList: this.extractedColumnList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.masterData !== previousProps.masterData) {\n      let isOpen = false;\n\n      if (this.props.errorCode !== undefined && (this.state.operation === \"create\" || this.state.operation === \"update\")) {\n        isOpen = true;\n      }\n\n      let {\n        dataState,\n        dataStateParticipants\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        dataState = {\n          skip: 0,\n          take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\n          filter: undefined,\n          sort: undefined\n        };\n        dataStateParticipants = {\n          skip: 0,\n          take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\n          filter: undefined,\n          sort: undefined\n        };\n      }\n\n      this.setState({\n        isOpen,\n        activeTab: 'Trainingdocument-tab',\n        dataState,\n        dataStateParticipants\n      });\n    }\n\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n\n    let {\n      dataState,\n      dataStateParticipants\n    } = this.state;\n\n    if (this.props.dataState !== previousProps.dataState && this.props.dataState !== dataState) {\n      dataState = {\n        skip: 0,\n        take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n      };\n      dataStateParticipants = {\n        skip: 0,\n        take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n      };\n      this.setState({\n        dataState,\n        dataStateParticipants\n      });\n    }\n\n    if (this.props.trainingDocument !== previousProps.trainingDocument || this.props.participants !== previousProps.participants) {\n      const participants = constructOptionList(this.props.participants || [], \"nparticipantcode\", \"sfullname\", undefined, undefined, undefined);\n      const participantsList = participants.get(\"OptionList\");\n      this.setState({\n        participants: participantsList\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  addtraineedocfile\n})(injectIntl(TrainingUpdateChildTab));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/competencemanagement/trainingupdate/TrainingUpdateChildTab.jsx"],"names":["React","version","Row","Col","Card","injectIntl","process","SlideOutModal","DEFAULT_RETURN","constructOptionList","onDropAttachFileList","deleteAttachmentDropZone","showEsign","create_UUID","CustomTabs","connect","TrainingParticipantsTab","TrainingDocTab","AddTrainingDocFile","AddTraineeDocFile","Esign","attachmentType","FORMULAFIELDTYPE","transactionStatus","AddParticipantsStatus","addtraineedocfile","mapStateToProps","state","Login","TrainingUpdateChildTab","Component","constructor","props","TrainingDocumentDataStateChange","event","setState","dataState","ParticipantsDataStateChange","dataStateParticipants","handleChange","value","valueParam","isSection","selectedRecord","tabDetail","tabMap","Map","set","userRoleControlRights","controlMap","inputParam","userInfo","updateStore","masterData","screenName","undefined","skip","data","participantsColumnList","fetchParticipantsRecordByID","deleteRecord","getAvailableData","addtraineedoc","getTrainingParticipantsAttended","getTrainingParticipantsCompetent","getTrainingParticipantsCertified","onInputOnChange","TrainingDocument","settings","optional","target","type","name","checked","ncontrolcode","openModal","operation","updateInfo","closeModal","loadEsign","typeName","selectedId","onDropTrainingDoc","attachedFiles","fieldName","actionType","onDropTrainieeDoc","validateEsign","inputData","sreason","nreasoncode","spredefinedreason","label","password","screenData","validateEsignCredential","deleteAttachment","file","deleteParam","methodUrl","selected","toLowerCase","userinfo","classUrl","esignRights","nformcode","ncontrolCode","crudMaster","onSaveClick","saveType","formRef","defaultInput","isValidRequest","onSaveTrainingDoc","onSaveTrainieeDoc","onSaveAttended","onSaveCertified","onSaveCompetent","trainingupdate","postParam","inputListName","selectedObject","primaryKeyField","nusercode","map","participants","push","ntrainingcode","SelectedTrainingUpdate","nparticipantcode","selectedParticipants","ntransactionstatus","ATTENDED","ncertifiedstatus","NO","ncompetencystatus","item","ntechniquecode","selectedTechinque","YES","acceptedFiles","sfilename","nattachmenttypecode","isFileEdited","trainingdocArray","trainingdoc","ntrainingdoccode","nstatus","ACTIVE","formData","FormData","FTP","Array","isArray","length","forEach","index","tempData","Object","assign","splittedFileName","split","fileExtension","ssystemfilename","filesystemfileext","uniquefilename","trim","sfiledesc","size","NA","append","nfilesize","slinkfilename","nlinkcode","JSON","stringify","isFileupload","trainieedocArray","trainieedoc","ntraineedoccode","primaryKeyValue","TechniqueList","fetchUrl","fecthInputObject","id","onTabChange","tabProps","take","parseInt","isOpen","dataResult","activeTab","trainingDocument","trainingDocumentFieldList","trainingDocumentColumnList","validationParticipantsColumnList","render","mandatoryFields","LINK","mandatory","idsName","dataField","mandatoryLabel","controlType","masterStatus","intl","formatMessage","userLogged","linkMaster","onComboChange","usersStatus","SelectedTrainingParticipants","extractedColumnList","componentDidUpdate","previousProps","errorCode","filter","sort","participantsList","get"],"mappings":"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","sourcesContent":["import React, { version } from 'react'\r\nimport { Row, Col, Card } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport { constructOptionList, onDropAttachFileList ,deleteAttachmentDropZone, showEsign,create_UUID} from '../../../components/CommonScript';\r\nimport CustomTabs from '../../../components/custom-tabs/custom-tabs.component';\r\nimport { connect } from 'react-redux';\r\nimport TrainingParticipantsTab from './TrainingParticipantsTab';\r\nimport TrainingDocTab from './TrainingDocTab';\r\nimport AddTrainingDocFile from './AddTrainingDocFile';\r\nimport AddTraineeDocFile from './AddTraineeDocFile';\r\nimport Esign from '../../audittrail/Esign';\r\nimport { attachmentType, FORMULAFIELDTYPE, transactionStatus } from '../../../components/Enumeration';\r\nimport AddParticipantsStatus from '../trainingcertificate/AddParticipantsStatus';\r\nimport { addtraineedocfile } from '../../../actions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass TrainingUpdateChildTab extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.settings? parseInt(this.props.settings[14]) : 5\r\n        };\r\n        const dataStateParticipants = {\r\n            skip: 0,\r\n            take:this.props.settings? parseInt(this.props.settings[14]) : 5\r\n        };\r\n        this.state = {\r\n            isOpen: false, selectedRecord: {}, dataResult: [],\r\n            activeTab: 'Trainingdoc-tab',\r\n            dataState: dataState,\r\n            dataStateParticipants: dataStateParticipants, trainingDocument: [], participants: []\r\n        };\r\n        this.trainingDocumentFieldList = ['ntrainingdoccode', 'nparticipantcode', 'ntrainingcode', 'sfilename', 'ntechniquecode', 'sfullname',\r\n            'nstatus', 'ntransactionstatus'];\r\n        this.trainingDocumentColumnList = [{ \"idsName\": \"IDS_TRAININGDOCUMENTNAME\", \"dataField\": \"sfilename\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" }];\r\n        this.participantsColumnList = [{ \"idsName\": \"IDS_PARTICIPANTSNAME\", \"dataField\": \"sfullname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" }];\r\n       // this.validationTrainingDocumentColumnList = [{ \"idsName\": \"IDS_TRAININGDOCUMENTNAME\", \"dataField\": \"sfilename\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }];\r\n        this.validationParticipantsColumnList = [{ \"idsName\": \"IDS_PARTICIPANTS\", \"dataField\": \"sfullname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }];\r\n    }\r\n    TrainingDocumentDataStateChange = (event) => {\r\n        this.setState({\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    ParticipantsDataStateChange = (event) => {\r\n        this.setState({\r\n            dataStateParticipants: event.dataState\r\n        });\r\n    }\r\n    handleChange = (value, valueParam, isSection) => {\r\n\r\n        if (value !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n\r\n            selectedRecord[valueParam] = value;\r\n \r\n                this.setState({ selectedRecord });\r\n           \r\n\r\n        }\r\n    }\r\n    render() {\r\n        // const mandatoryFields = [];\r\n        // this.validationTrainingDocumentColumnList.forEach(item => item.mandatory === true ?\r\n        //    mandatoryFields.push(item) : \"\"\r\n        //  );\r\n         let mandatoryFields = [];\r\n         if (this.props.screenName === \"IDS_TRAININGDOCUMENTS\"||this.props.screenName===\"IDS_TRAINEEDOCUMENTS\") {\r\n            if (this.state.selectedRecord && this.state.selectedRecord.nattachmenttypecode === attachmentType.LINK) {\r\n             mandatoryFields.push(\r\n                { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"slinkfilename\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                { \"idsName\": \"IDS_LINKNAME\", \"dataField\": \"nlinkcode\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                );\r\n                    }else {\r\n              mandatoryFields.push(\r\n                { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_CHOOSE\", \"controlType\": \"file\"}\r\n                );\r\n            }\r\n                 }\r\n                     else{\r\n                         mandatoryFields.push(\r\n                             {\r\n                               mandatory: true,\r\n                               idsName: \"IDS_PARTICIPANTNAME\",\r\n                               dataField: \"nusercode\",\r\n                               mandatoryLabel: \"IDS_SELECT\",\r\n                               controlType: \"selectbox\",\r\n                             });\r\n                     }\r\n        return (\r\n            <>\r\n                <Row className=\"no-gutters\">\r\n                    <Col md={12}>\r\n                        <Card className=\"at-tabs\">\r\n                            <CustomTabs tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                       mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                             : this.props.screenName === \"IDS_TRAININGDOCUMENTS\" ?\r\n                            <AddTrainingDocFile\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onDrop={this.onDropTrainingDoc}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                deleteAttachment={this.deleteAttachment}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                label={this.props.intl.formatMessage({ id: \"IDS_FILENAME\" })}\r\n                                operation={this.props.Login.operation}\r\n                                userLogged={this.props.Login.userLogged}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedId={this.props.Login.selectedId}\r\n                                maxSize={20}\r\n                                maxFiles={1}\r\n                                linkMaster = {this.props.Login.linkMaster}\r\n                                onComboChange={this.props.onComboChange}\r\n                                />\r\n                            : this.props.screenName === \"IDS_TRAINEEDOCUMENTS\" ?\r\n                            <AddTraineeDocFile\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onDrop={this.onDropTrainieeDoc}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                deleteAttachment={this.deleteAttachment}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                label={this.props.intl.formatMessage({ id: \"IDS_FILENAME\" })}\r\n                                operation={this.props.Login.operation}\r\n                                userLogged={this.props.Login.userLogged}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedId={this.props.Login.selectedId}\r\n                                linkMaster = {this.props.Login.linkMaster}\r\n                                onComboChange={this.props.onComboChange}\r\n                                />\r\n                            : <AddParticipantsStatus \r\n                            selectedRecord={this.props.selectedRecord || {}}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            handleChange={this.handleChange}\r\n                            formatMessage={this.props.formatMessage}\r\n                            usersStatus={this.props.usersStatus || []}\r\n                            nusercode={this.props.nusercode || []}\r\n                            selectedTrainingParticipants={this.props.masterData.SelectedTrainingParticipants || {}}\r\n                            extractedColumnList={this.extractedColumnList}\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n\r\n        )\r\n\r\n    }\r\n\r\n\r\n    tabDetail = () => {\r\n        \r\n        const tabMap = new Map();\r\n\r\n        tabMap.set(\"IDS_PARTICIPANTS\", <TrainingParticipantsTab \r\n                                                          \r\n                                                            userRoleControlRights={this.props.userRoleControlRights}\r\n                                                            controlMap={this.props.controlMap}\r\n                                                            inputParam={this.props.inputParam}\r\n                                                            userInfo={this.props.userInfo}\r\n                                                            screenName={\" TrainieeDocuments\"}   \r\n                                                            updateStore={this.props.updateStore}\r\n                                                            primaryKeyField={\"nparticipantcode\"}\r\n                                                            masterData={this.props.masterData}\r\n                                                            primaryList={\"Participants\"}\r\n                                                            dataResult={process(this.props.Login.masterData[\"Participants\", \"TraineeDocuments\"] || [], this.state.dataStateParticipants)}\r\n                                                            dataState={(this.props.screenName === undefined || this.props.screenName === \"Participants\") ? this.state.dataStateParticipants : { skip: 0 }}\r\n                                                            dataStateChange={(event) => this.setState({ dataStateParticipants: event.data })}\r\n                                                            columnList={this.participantsColumnList}\r\n                                                            methodUrl={\"TrainingParticipants\"}\r\n                                                            fetchParticipantsRecordByID={this.fetchParticipantsRecordByID}\r\n                                                            deleteRecord={this.deleteRecord}\r\n                                                        getAvailableData={this.props.getAvailableData}\r\n                                                        addtraineedoc={this.addtraineedoc}\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                        \r\n                                                        getTrainingParticipantsAttended={this.props.getTrainingParticipantsAttended}\r\n                                                        getTrainingParticipantsCompetent={this.props.getTrainingParticipantsCompetent}\r\n                                                        getTrainingParticipantsCertified={this.props.getTrainingParticipantsCertified}\r\n\r\n                                                        />)\r\n        tabMap.set(\"IDS_TRAININGDOCUMENTS\", <TrainingDocTab\r\n                                                screenName={\"TrainingDocuments\"}\r\n\r\n                                                    onInputOnChange={this.onInputOnChange}\r\n                                                    controlMap={this.props.controlMap}\r\n                                                    updateStore={this.props.updateStore}\r\n                                                    userRoleControlRights={this.props.userRoleControlRights}\r\n                                                    userInfo={this.props.userInfo}\r\n                                                    inputParam={this.props.inputParam}\r\n                                                    deleteRecord={this.deleteRecord}\r\n                                                    TrainingDocument={this.props.masterData.TrainingDocument || []}\r\n                                                    getAvailableData={this.props.getAvailableData}\r\n                                                    settings = {this.props.settings}\r\n                                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                                    />)\r\n        \r\n        return tabMap;\r\n    }\r\n\r\n\r\n    onInputOnChange = (event,optional) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n       \r\n           \r\n                if (event.target.type === 'checkbox') {\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\r\n                } else if (event.target.type === 'radio') {\r\n                    selectedRecord[event.target.name] = optional;\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n             \r\n           \r\n                }\r\n\r\n        addtraineedoc =(ncontrolcode) => {\r\n            let openModal = this.props.Login.openModal;\r\n            let operation = \"create\";\r\n            let screenName = this.props.Login.screenName;\r\n            screenName = \"IDS_TRAINEEDOCUMENTS\";\r\n            openModal = true;\r\n            const selectedRecord = this.props.selectedRecord;\r\n            const updateInfo = {\r\n                userInfo: this.props.Login.userInfo, operation, selectedRecord, ncontrolcode, screenName\r\n               };\r\n               this.props.addtraineedocfile(updateInfo);\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         openModal: true,\r\n        //         operation: \"create\",\r\n        //         selectedRecord: {},\r\n        //         ncontrolcode: ncontrolcode,\r\n        //         screenName : \"IDS_TRAINEEDOCUMENTS\" \r\n\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" ||\r\n                 this.props.Login.operation === \"certify\" ||\r\n                 this.props.Login.operation === \"attend\" ||\r\n                 this.props.Login.operation === \"competent\" || this.props.Login.operation === \"complete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n    onDropTrainingDoc = (attachedFiles, fieldName) => {\r\n\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n    onDropTrainieeDoc = (attachedFiles, fieldName) => {\r\n\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" \r\n        });\r\n    }\r\n        \r\n    \r\n    deleteRecord = (deleteParam) => {\r\n        const methodUrl = deleteParam.methodUrl;\r\n        const selected = deleteParam.selectedRecord;\r\n        let dataState = undefined;\r\n    const inputParam =   \r\n       {\r\n          inputData: {\r\n\r\n              [methodUrl.toLowerCase()]: selected,\r\n              userinfo: this.props.userInfo\r\n          },\r\n          classUrl: \"trainingupdate\",\r\n          operation: deleteParam.operation,\r\n          methodUrl: methodUrl,\r\n           dataState\r\n      }\r\n  \r\n   const masterData = this.props.masterData;\r\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n          const updateInfo = {\r\n              typeName: DEFAULT_RETURN,\r\n              data: {\r\n                  loadEsign: true, screenData: { inputParam, masterData },\r\n                  openModal: true,  operation: deleteParam.operation, selectedRecord: {}\r\n              }\r\n          }\r\n          this.props.updateStore(updateInfo);\r\n      } else {\r\n          this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n      }\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputParam = {};\r\n        let defaultInput = {};\r\n        let isValidRequest = true;\r\n         if (this.props.screenName === \"IDS_TRAININGDOCUMENTS\") {\r\n            inputParam = this.onSaveTrainingDoc(saveType, formRef);\r\n        } \r\n        if (this.props.screenName === \"IDS_TRAINEEDOCUMENTS\") {\r\n            inputParam = this.onSaveTrainieeDoc(saveType, formRef);\r\n        } \r\n        if (this.props.screenName === \"IDS_ATTENDPARTICIPANTSDETAILS\") {\r\n            inputParam = this.onSaveAttended(saveType, formRef);\r\n        } \r\n        if (this.props.screenName === \"IDS_CERTIFYPARTICIPANTSDETAILS\") {\r\n            inputParam = this.onSaveCertified(saveType, formRef);\r\n        } \r\n        if (this.props.screenName === \"IDS_COMPETENTPARTICIPANTSDETAILS\") {\r\n            inputParam = this.onSaveCompetent(saveType, formRef);\r\n        } \r\n        if (isValidRequest) {\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openModal\", defaultInput);\r\n            }\r\n        }\r\n    }\r\n    onSaveAttended = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let trainingupdate = [];\r\n        let dataState = undefined;\r\n        let postParam = { inputListName: \"TechniqueList\", selectedObject: \"SelectedTrainingUpdate\", primaryKeyField: \"ntrainingcode\" };\r\n\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n            this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\r\n                trainingupdate.push({\r\n                    ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\r\n                    nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\r\n                    ntransactionstatus: transactionStatus.ATTENDED,\r\n                    ncertifiedstatus: transactionStatus.NO,\r\n                    ncompetencystatus: transactionStatus.NO,\r\n                    nusercode: participants.item.nusercode,\r\n                ntechniquecode: this.props.masterData.selectedTechinque.ntechniquecode\r\n                })\r\n    \r\n            })\r\n            inputData[\"trainingupdate\"] = trainingupdate\r\n\r\n            const inputParam = {\r\n                classUrl: 'trainingupdate',\r\n                methodUrl: \"TrainingParticipants\",\r\n                inputData: inputData,\r\n                operation: \"attend\",saveType, formRef, dataState,\r\n                postParam\r\n            }\r\n            return inputParam;\r\n            \r\n    }\r\n    onSaveCertified = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let trainingupdate = [];\r\n        let dataState = undefined;\r\n        let postParam = { inputListName: \"TechniqueList\", selectedObject: \"SelectedTrainingUpdate\", primaryKeyField: \"ntrainingcode\" };\r\n\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n            this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\r\n                trainingupdate.push({\r\n                    ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\r\n                    nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\r\n                    ntransactionstatus: transactionStatus.ATTENDED,\r\n                    ncertifiedstatus: transactionStatus.YES,\r\n                    ncompetencystatus: transactionStatus.NO,\r\n                    nusercode: participants.item.nusercode,\r\n                    ntechniquecode: this.props.masterData.selectedTechinque.ntechniquecode\r\n\r\n                })\r\n    \r\n            })\r\n            inputData[\"trainingupdate\"] = trainingupdate\r\n\r\n            const inputParam = {\r\n                classUrl: 'trainingupdate',\r\n                methodUrl: \"TrainingParticipants\",\r\n                inputData: inputData,\r\n                operation: \"certify\",saveType, formRef, dataState,postParam\r\n            }\r\n            return inputParam;            \r\n    }\r\n    onSaveCompetent = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let trainingupdate = [];\r\n        let dataState = undefined;\r\n        let postParam = { inputListName: \"TechniqueList\", selectedObject: \"SelectedTrainingUpdate\", primaryKeyField: \"ntrainingcode\" };\r\n\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n            this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\r\n                trainingupdate.push({\r\n                    ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\r\n                    nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\r\n                    ntransactionstatus: transactionStatus.ATTENDED,\r\n                    ncertifiedstatus: transactionStatus.NO,\r\n                    ncompetencystatus: transactionStatus.YES,\r\n                    nusercode: participants.item.nusercode,\r\n                    ntechniquecode: this.props.masterData.selectedTechinque.ntechniquecode\r\n\r\n                })\r\n    \r\n            })\r\n            inputData[\"trainingupdate\"] = trainingupdate\r\n\r\n            const inputParam = {\r\n                classUrl: 'trainingupdate',\r\n                methodUrl: \"TrainingParticipants\",\r\n                inputData: inputData,\r\n                operation: \"competent\",saveType, formRef, dataState,postParam\r\n            }\r\n            return inputParam;            \r\n    }\r\n    onSaveTrainingDoc = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let trainingdocArray = [];\r\n        let trainingdoc = {\r\n            ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\r\n            ntrainingdoccode: selectedRecord.ntrainingdoccode ? selectedRecord.ntrainingdoccode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n           \r\n        };\r\n        const formData = new FormData();\r\n        if (nattachmenttypecode === attachmentType.FTP) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, trainingdoc);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\r\n                    const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntrainingdoccode && selectedRecord.ntrainingdoccode > 0\r\n                        && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] = file.name.trim();\r\n                    tempData[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    tempData[\"nfilesize\"] = file.size;\r\n                    tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"nattachmenttypecode\"] = 1;\r\n                    // tempData[\"dcreateddate\"] = this.props.Login.userInfo;\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    trainingdocArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                trainingdoc[\"sfilename\"] = selectedRecord.sfilename;\r\n                trainingdoc[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\r\n                trainingdoc[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                trainingdoc[\"nlinkcode\"] = transactionStatus.NA;\r\n                trainingdoc[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                trainingdoc[\"dcreateddate\"] = this.props.Login.userInfo;\r\n                trainingdoc[\"nattachmenttypecode\"] = 1;\r\n                trainingdocArray.push(trainingdoc);\r\n            }\r\n        } else {\r\n            trainingdoc[\"ssystemfilename\"] = \"\";\r\n            trainingdoc[\"nattachmenttypecode\"] = 2;\r\n            trainingdoc[\"sfilename\"] = selectedRecord.slinkfilename;\r\n            trainingdoc[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\r\n            trainingdoc[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n            trainingdoc[\"nfilesize\"] = 0;\r\n            trainingdocArray.push(trainingdoc);\r\n        }\r\n        \r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"trainingdoc\", JSON.stringify(trainingdocArray));\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.operation,\r\n            classUrl: \"trainingupdate\",\r\n            saveType, formRef, methodUrl: \"TrainingDoc\"\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveTrainieeDoc = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let trainieedocArray = [];\r\n        let trainieedoc = {\r\n            nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\r\n            ntraineedoccode: selectedRecord.ntraineedoccode ? selectedRecord.ntraineedoccode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n        };\r\n        const formData = new FormData();\r\n        if (nattachmenttypecode === attachmentType.FTP) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, trainieedoc);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\r\n                    const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntraineedoccode && selectedRecord.ntraineedoccode > 0\r\n                        && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] = file.name;\r\n                    tempData[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    tempData[\"nfilesize\"] = file.size;\r\n                    tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"nattachmenttypecode\"] = 1;\r\n                    // tempData[\"dcreateddate\"] = this.props.Login.userInfo;\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    trainieedocArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                trainieedoc[\"sfilename\"] = selectedRecord.sfilename;\r\n                trainieedoc[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\r\n                trainieedoc[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                trainieedoc[\"nlinkcode\"] = transactionStatus.NA;\r\n                trainieedoc[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                trainieedoc[\"dcreateddate\"] = this.props.Login.userInfo;\r\n                trainieedoc[\"nattachmenttypecode\"] = 1;\r\n                trainieedocArray.push(trainieedoc);\r\n            }\r\n        } else {\r\n            trainieedoc[\"ssystemfilename\"] = \"\";\r\n            trainieedoc[\"nattachmenttypecode\"] = 2;\r\n            trainieedoc[\"sfilename\"] = selectedRecord.slinkfilename;\r\n            trainieedoc[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\r\n            trainieedoc[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n            trainieedoc[\"nfilesize\"] = 0;\r\n            trainieedocArray.push(trainieedoc);\r\n        }\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"trainieedoc\", JSON.stringify(trainieedocArray));\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.operation,\r\n            classUrl: \"trainingupdate\",\r\n            saveType, formRef, methodUrl: \"TrainieeDoc\"\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    // fetchParticipantsRecordByID = (operation,version,ncontrolCode) => {\r\n\r\n    //     let inputData = [];\r\n    //     inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    //     inputData[\"trainingparticipants\"] = {\r\n    //         \"nusercode\": version.nusercode,\r\n    //         \"nparticipantcode\": version.nparticipantcode,\r\n    //         \"ntrainingcode\": version.ntrainingcode,\r\n    //         \"ncertifiedstatus\" : version.ncertifiedstatus,\r\n    //         \"ncompetencystatus\" : version.ncompetencystatus,\r\n    //         \"ntransactionstatus\" : version.ntransactionstatus\r\n\r\n    //     }\r\n    //     const postParam = {\r\n    //         inputListName: \"TechniqueList\", \r\n    //         selectedObject: \"SelectedTrainingUpdate\",\r\n    //         primaryKeyField: \"ntrainingcode\",\r\n    //         primaryKeyValue: this.props.Login.masterData.TechniqueList.ntrainingcode,\r\n    //         fetchUrl: \"trainingupdate/getTraningUpdateByTechnique\",\r\n    //         fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n    //     }\r\n    //     const inputParam = {\r\n    //         methodUrl: \"TrainingParticipants\",\r\n    //         classUrl: this.props.Login.inputParam.classUrl,\r\n    //         inputData: inputData, postParam,\r\n    //         operation\r\n    //     }\r\n    //     const masterData = this.props.Login.masterData;\r\n\r\n    //     if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n    //         const updateInfo = {\r\n    //             typeName: DEFAULT_RETURN,\r\n    //             data: {\r\n    //                 loadEsign: true, \r\n    //                 screenData: { inputParam, masterData }, \r\n    //                 openModal: true, \r\n    //                 operation, \r\n    //                 screenName: '', \r\n    //                 id: 'ParticipantsStatus'\r\n    //             }\r\n    //         }\r\n    //         this.props.updateStore(updateInfo);\r\n    //     }\r\n    //     else {\r\n    //         this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n    //     }\r\n    // }\r\n    \r\n    fetchParticipantsRecordByID = (operation,version,ncontrolCode) => {\r\n\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"trainingparticipants\"] = {\r\n            \"nusercode\": version.nusercode,\r\n            \"nparticipantcode\": version.nparticipantcode,\r\n            \"ntrainingcode\": version.ntrainingcode,\r\n            \"ncertifiedstatus\" : version.ncertifiedstatus,\r\n            \"ncompetencystatus\" : version.ncompetencystatus,\r\n            \"ntransactionstatus\" : version.ntransactionstatus\r\n\r\n        }\r\n        const postParam = {\r\n            inputListName: \"TechniqueList\", \r\n            selectedObject: \"SelectedTrainingUpdate\",\r\n            primaryKeyField: \"ntrainingcode\",\r\n            primaryKeyValue: this.props.Login.masterData.TechniqueList.ntrainingcode,\r\n            fetchUrl: \"trainingupdate/getTraningUpdateByTechnique\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        }\r\n        const inputParam = {\r\n            methodUrl: \"TrainingParticipants\",\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            inputData: inputData, postParam,\r\n            operation\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, \r\n                    screenData: { inputParam, masterData }, \r\n                    openModal: true, \r\n                    operation, \r\n                    screenName: '', \r\n                    id: 'ParticipantsStatus'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n  \r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.masterData !== previousProps.masterData) {\r\n\r\n            let isOpen = false;\r\n            if (this.props.errorCode !== undefined && (this.state.operation === \"create\" || this.state.operation === \"update\")) {\r\n                isOpen = true;\r\n            }\r\n            let { dataState, dataStateParticipants } = this.state;\r\n            if(this.props.dataState === undefined)\r\n            {\r\n                dataState={skip: 0,take:this.props.settings? parseInt(this.props.settings[14]) : 5,filter:undefined,sort:undefined}\r\n                dataStateParticipants = { skip: 0, take :this.props.settings? parseInt(this.props.settings[14]) : 5,filter:undefined,sort:undefined }\r\n            } \r\n            this.setState({ isOpen, activeTab: 'Trainingdocument-tab',dataState, dataStateParticipants });\r\n        }\r\n\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n        let { dataState, dataStateParticipants } = this.state;\r\n        if (this.props.dataState !== previousProps.dataState && this.props.dataState !== dataState) {\r\n            dataState = { skip: 0,take : this.props.settings? parseInt(this.props.settings[14]) : 5 }\r\n            dataStateParticipants = { skip: 0 , take:this.props.settings? parseInt(this.props.settings[14]) : 5}\r\n            this.setState({ dataState, dataStateParticipants });\r\n        }\r\n     \r\n       \r\n        if (this.props.trainingDocument !== previousProps.trainingDocument || this.props.participants !== previousProps.participants) {\r\n\r\n           \r\n            const participants = constructOptionList(this.props.participants || [], \"nparticipantcode\",\r\n                \"sfullname\", undefined, undefined, undefined);\r\n            const participantsList = participants.get(\"OptionList\");\r\n\r\n            this.setState({ \r\n                 participants: participantsList });\r\n        }\r\n    }\r\n\r\n    onTabChange = (tabProps) =>{\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {screenName}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps,{addtraineedocfile})(injectIntl(TrainingUpdateChildTab));\r\n\r\n"]},"metadata":{},"sourceType":"module"}