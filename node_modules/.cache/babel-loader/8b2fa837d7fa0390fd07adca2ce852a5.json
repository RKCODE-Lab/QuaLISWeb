{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\designtemplatemapping\\\\DesignTemplateMapping.jsx\";\nimport React from 'react';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTrashAlt, faThumbsUp, faUserLock, faClock, faList } from '@fortawesome/free-solid-svg-icons'; //,faUserTimes, faTrash\n\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getDesignTemplateMappingDetail, getMappedFieldProps, editFieldConfigService, getDesignTemplateMappingComboService, filterColumnData, reloadDesignTemplateMapping, getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit } from '../../actions';\nimport TemplateFilter from './TemplateFilter';\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\nimport { getControlMap, showEsign, convertDateValuetoString, constructOptionList, constructjsonOptionDefault } from '../../components/CommonScript'; //searchData, sortData,\n\nimport ListMaster from '../../components/list-master/list-master.component'; // import DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\n\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddDesignTemplateMapping from './AddDesignTemplateMapping';\nimport Esign from '../../pages/audittrail/Esign';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { designProperties, formCode, TemplateType, transactionStatus } from '../../components/Enumeration';\nimport AddSynonym from '../../components/droparea/AddSynonym';\nimport { Affix } from 'rsuite';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport ReactTooltip from 'react-tooltip';\nimport ConfigureScreenFields from './ConfigureScreenFields';\nimport ConfigureEditFields from './ConfigureEditFields';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass DesignTemplateMapping extends React.Component {\n  constructor(props) {\n    super(props); // const dataState = {\n    //     skip: 0,\n    //     take: 10,\n    // };\n\n    this.filterComboChange = (event, fieldname) => {\n      if (event !== null) {\n        // let uRL = \"\";\n        let inputData = [];\n\n        if (fieldname === \"sampleType\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 1,\n            nsampletypecode: parseInt(event.value)\n          };\n          let masterData = { ...this.props.Login.masterData,\n            defaultsampletype: event\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n\n          if (event.value === TemplateType.Masters) {\n            const masterTypeArray = this.state.masterTypeArray;\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData: { ...masterData,\n                  masterTypeArray,\n                  defaultMasterType: masterTypeArray[0],\n                  qualisforms: [],\n                  defaultform: this.state.newMasterForm,\n                  nregtypecode: -1,\n                  nregsubtypecode: -1\n                }\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.getTMPFilterRegType(inputParam);\n          }\n        } else if (fieldname === \"registrationType\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nregtypecode: parseInt(event.value),\n            nsampletypecode: this.props.Login.masterData.defaultsampletype.value\n          };\n          let masterData = { ...this.props.Login.masterData,\n            defaultregtype: event\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n          this.props.getTMPFilterRegSubType(inputParam);\n        } else if (fieldname === \"registrationSubType\") {\n          let masterData = { ...this.props.Login.masterData,\n            defaultregsubtype: event\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else if (fieldname === \"masterType\") {\n          let masterData = { ...this.props.Login.masterData,\n            defaultMasterType: event\n          };\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 1,\n            nsampletypecode: TemplateType.Masters\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n\n          if (event.value === 1) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData: { ...masterData,\n                  qualisforms: [],\n                  defaultform: this.state.newMasterForm\n                }\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.getTMPFilterRegType(inputParam);\n          }\n        } else {\n          let masterData = { ...this.props.Login.masterData,\n            defaultform: event\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      let inputData = {\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\n        nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\n        nsampletypecode: this.props.Login.masterData.realSampleValue.value,\n        nformcode: this.props.Login.masterData.realFormValue ? this.props.Login.masterData[\"realFormValue\"].value : -1\n      };\n      let inputParam = {\n        masterData: this.props.Login.masterData,\n        inputData\n      };\n      this.props.reloadDesignTemplateMapping(inputParam);\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      let inputData = {\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: this.props.Login.masterData.defaultsampletype.value === TemplateType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value || -1 : -1),\n        nregsubtypecode: this.props.Login.masterData.defaultsampletype.value === TemplateType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value || -1 : -1),\n        nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\n        nformcode: this.props.Login.masterData.defaultform ? this.props.Login.masterData.defaultform.value || -1 : -1\n      };\n      let masterData = { ...this.props.Login.masterData,\n        realSampleValue: this.props.Login.masterData.defaultsampletype,\n        realFormValue: this.props.Login.masterData.defaultform,\n        realRegTypeValue: this.props.Login.masterData.defaultregtype,\n        realRegSubTypeValue: this.props.Login.masterData.defaultregsubtype\n      };\n      let inputParam = {\n        masterData,\n        inputData\n      };\n      this.props.getTMPFilterSubmit(inputParam);\n    };\n\n    this.onApproveClick = () => {\n      if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus !== transactionStatus.RETIRED) {\n        const ncontrolCode = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode;\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = undefined;\n        inputData[\"designtemplatemapping\"] = {\n          \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\"\n        };\n        inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\n        postParam = {\n          inputListName: \"DesignTemplateMapping\",\n          selectedObject: \"selectedDesignTemplateMapping\",\n          primaryKeyField: \"ndesigntemplatemappingcode\"\n        };\n        const inputParam = {\n          inputData: {\n            \"userinfo\": this.props.Login.userInfo\n          },\n          classUrl: 'designtemplatemapping',\n          methodUrl: \"DesignTemplateMapping\",\n          inputData: inputData,\n          operation: \"approve\",\n          postParam\n        };\n        let saveType;\n        const masterData = this.props.Login.masterData;\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              openModal: true,\n              operation: \"approve\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATERETIRED\"\n        }));\n      }\n    };\n\n    this.ConfirmDelete = () => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteTemplate());\n    };\n\n    this.deleteTemplate = () => {\n      if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT) {\n        const ncontrolCode = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = undefined;\n        inputData[\"designtemplatemapping\"] = {\n          \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\"\n        };\n        inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\n        postParam = {\n          inputListName: \"DesignTemplateMapping\",\n          selectedObject: \"selectedDesignTemplateMapping\",\n          primaryKeyField: \"ndesigntemplatemappingcode\"\n        };\n        const inputParam = {\n          inputData: {\n            \"userinfo\": this.props.Login.userInfo\n          },\n          classUrl: 'designtemplatemapping',\n          methodUrl: \"DesignTemplateMapping\",\n          inputData: inputData,\n          operation: \"delete\",\n          postParam\n        };\n        let saveType;\n        const masterData = this.props.Login.masterData;\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              openModal: true,\n              operation: \"delete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTRECORDTODELETE\"\n        }));\n      }\n    };\n\n    this.openFieldConfiguration = (controlCode, operation) => {\n      let openModal = true; //let operation = 'configure';\n\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          userinfo: this.props.Login.userInfo\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n\n      if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== TemplateType.Masters) {\n        inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      }\n\n      inputParam[\"TemplateType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.getMappedFieldProps(inputParam);\n    };\n\n    this.editFieldConfiguration = (controlCode, operation) => {\n      //console.log(\"edit config:\", this.props.Login);\n      // let operation = 'configureedit';\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          nregtypecode: this.props.Login.masterData.defaultregtype.value,\n          nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,\n          userinfo: this.props.Login.userInfo\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      }; // if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== TemplateType.Masters){\n      //     inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      //  }\n\n      inputParam[\"TemplateType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.editFieldConfigService(inputParam);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"approve\" || this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      ;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onConfigureComboChange = (comboData, formCode, item) => {\n      const fieldName = item.label;\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[formCode] = { ...selectedRecord[formCode],\n        [fieldName]: comboData\n      };\n      this.setState({\n        selectedRecord\n      }); // let designData = this.props.Login.editFieldDesignData;\n      // let dataResult = this.props.Login.editFieldDataResult;\n      // if (formCode === undefined){\n      //     dataResult[dataIndex][field] = event.target.checked;\n      //     if (event.target.checked) {\n      //         designData[field].splice(dataIndex, 0, dataItem.realData)\n      //     } else {\n      //         designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\n      //     }\n      // }\n      // else{\n      //     dataResult[formCode][\"sampleeditable\"] = comboData;\n      //     if (event.target.checked) {\n      //         if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\n      //             return toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDS\" }))\n      //         } else {\n      //             designData[formCode][field].splice(dataIndex, 0, dataItem.realData)\n      //         }\n      //         if (field === 'sampledisplayfields') {\n      //             designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label)\n      //         }\n      //     } else {\n      //         if (field === 'sampledisplayfields') {\n      //             designData[formCode]['samplesearchfields'].splice(designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.label), 1)\n      //         }\n      //         designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\n      //     }\n      // }\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { designData, dataResult }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.getGridJsondata = templatedata => {\n      let gridItem = [];\n      let gridMoreItem = [];\n      let masterdatefields = [];\n      let masterdateconstraints = [];\n      let masteruniquevalidation = [];\n      let editable = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = [];\n      let templatePrimaryKey = \"\";\n      let mastertemplatefields = [];\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map((component, index) => {\n          //console.log(\"component2:\", component);\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              // console.log(\"component row2:\", componentRow);\n              componentRow.unique && masteruniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\n              let filterinputtype = \"text\";\n              let comboDataInputObject = {};\n\n              if (componentRow.inputtype === 'combo') {\n                comboDataInputObject = {\n                  \"predefinedtablename\": componentRow.source,\n                  \"predefinedvaluemember\": componentRow.valuemember,\n                  \"predefineddisplaymember\": componentRow.displaymember,\n                  \"predefinedismultilingual\": true,\n                  \"predefinedconditionalString\": componentRow.valuemember + \" > 0 \"\n                };\n                jnumericcolumns.push({\n                  \"columnname\": componentRow.displaymember,\n                  \"displayname\": componentRow.displayname,\n                  \"foriegntablePK\": componentRow.label,\n                  // \"ismultilingual\": true,\n                  // \"conditionstring\": \" and nformcode in (\"+componentRow.table.item.nformcode+\") \",\n                  \"tablecolumnname\": componentRow.valuemember,\n                  \"foriegntablename\": componentRow.source,\n                  ...comboDataInputObject\n                });\n                filterinputtype = \"predefinednumeric\";\n              } // samplesearchfields.push(componentRow.label)\n\n\n              if (componentRow.inputtype === 'date') {\n                filterinputtype = \"date\";\n                masterdatefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                masterdateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\n              }\n\n              if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\n                filterinputtype = \"numeric\";\n              }\n\n              jdynamiccolumns.push({\n                default: componentRow.unique ? true : false,\n                filterinputtype,\n                columnname: componentRow.label,\n                displayname: componentRow.displayname,\n                ...comboDataInputObject\n              }); // displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\n              // componentRow.templatemandatory && listItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\n\n              if (componentRow.mandatory || componentRow.templatemandatory) {\n                gridItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              } else {\n                gridMoreItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              }\n\n              mastertemplatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n\n              if (componentRow.templatemandatory) {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: []\n                });\n              } else {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: [transactionStatus.DRAFT]\n                });\n              }\n\n              return null;\n            });\n          } else {\n            //console.log(\"component2:\", component);\n            component.unique && masteruniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\n            let filterinputtype = \"text\";\n            let comboDataInputObject = {};\n            mastertemplatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            });\n\n            if (component.inputtype === 'combo') {\n              filterinputtype = \"predefinednumeric\";\n              comboDataInputObject = {\n                \"predefinedtablename\": component.source,\n                \"predefinedvaluemember\": component.valuemember,\n                \"predefineddisplaymember\": component.displaymember,\n                \"predefinedismultilingual\": true,\n                \"predefinedconditionalString\": component.valuemember + \" > 0\"\n              };\n              jnumericcolumns.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"foriegntablePK\": component.label,\n                // \"ismultilingual\": true,\n                \"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\n                \"tablecolumnname\": component.column.value,\n                \"foriegntablename\": \"dynamicmaster\",\n                ...comboDataInputObject\n              });\n            } // samplesearchfields.push(component.label)\n\n\n            if (component.inputtype === 'date') {\n              filterinputtype = \"date\";\n              masterdatefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              masterdateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\n            }\n\n            if (component.inputtype === 'numeric' || component.inputtype === 'radio') {\n              filterinputtype = \"numeric\";\n            }\n\n            jdynamiccolumns.push({\n              default: component.unique ? true : false,\n              columnname: component.label,\n              displayname: component.displayname,\n              filterinputtype,\n              ...comboDataInputObject\n            }); // displayFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\n            // component.templatemandatory && listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\n\n            if (component.mandatory || component.templatemandatory) {\n              gridItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            } else {\n              gridMoreItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            }\n\n            if (component.templatemandatory) {\n              editable.push({\n                label: component.label,\n                editableuntill: []\n              });\n            } else {\n              editable.push({\n                label: component.label,\n                editableuntill: [transactionStatus.DRAFT]\n              });\n            }\n\n            return null;\n          }\n        });\n      }));\n      let jsondata = {\n        griditem: gridItem,\n        gridmoreitem: gridMoreItem,\n        masterdatefields,\n        masterdateconstraints,\n        masteruniquevalidation,\n        editable,\n        mastertemplatefields\n      }; // console.log(\"dynamiccolumns:\", jdynamiccolumns);\n\n      return {\n        jsondata,\n        jdynamiccolumns,\n        jnumericcolumns,\n        templatePrimaryKey\n      };\n    };\n\n    this.getJsondata = templatedata => {\n      let displayFields = [];\n      let listItem = [];\n      let gridItem = [];\n      let gridMoreItem = [];\n      let editable = [];\n      let subsampleeditable = [];\n      let subsamplelistitem = [];\n      let sampledatefields = [{\n        [designProperties.VALUE]: 'dregdate',\n        dateonly: false\n      }];\n      let sampledateconstraints = [];\n      let subsampledatefields = [];\n      let subsampledateconstraints = [];\n      let samplesearchfields = [\"dregdate\", \"sarno\", \"stransdisplaystatus\"];\n      let subsamplesearchfields = [\"sarno\", \"ssamplearno\", \"stransdisplaystatus\"];\n      let sampletemplatefields = [];\n      let subsampletemplatefields = [];\n      let sampleuniquevalidation = [];\n      let subsampleuniquevalidation = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = []; // const staticSearchFields = [\"dregdate\", \"sarno\", \"stransdisplaystatus\"];\n      // const sampleStaticFields = [\n      //     { [designProperties.LABEL]: { \"en-US\": \"Reg Date\",\"Ko-KR\":\"Reg Date\",\"ru-RU\":\"Дата регистрации\",\"tg-TG\":\"Санаи бақайдгирӣ\" }, \n      //       [designProperties.VALUE]: 'dregdate' },\n      //     { [designProperties.LABEL]: { \"en-US\": \"Ar No.\",\"Ko-KR\":\"Reg Date\",\"ru-RU\":\"Ар №\",\"tg-TG\":\"Ар №\" }, \n      //       [designProperties.VALUE]: 'sarno' },\n      //     { [designProperties.LABEL]: { \"en-US\": \"Transaction Status\",\"Ko-KR\":\"Transaction Status\",\"ru-RU\":\"Статус транзакции\",\"tg-TG\":\"Ҳолати транзаксия\" }, \n      //       [designProperties.VALUE]: 'stransdisplaystatus' }\n      //     ]\n\n      let testdatefields = [{\n        [designProperties.VALUE]: 'dtransactiondate',\n        dateonly: false\n      }]; //console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\n\n      this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.item.jsondata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map(component => {\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              componentRow.unique && subsampleuniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              subsamplesearchfields.push(componentRow.label); //subsampleeditable.push({ label: componentRow.label, editableuntill: [17] })\n\n              subsampletemplatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n              if (component.readonly) subsampleeditable.push({\n                label: componentRow.label,\n                editableuntill: []\n              });else subsampleeditable.push({\n                label: componentRow.label,\n                editableuntill: [transactionStatus.PREREGISTER]\n              });\n\n              if (componentRow.inputtype === 'date') {\n                subsampledatefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                subsampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\n              }\n\n              subsamplelistitem.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n            });\n          } else {\n            component.unique && subsampleuniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            subsamplesearchfields.push(component.label); // subsampleeditable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\n\n            subsampletemplatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            });\n            if (component.readonly) subsampleeditable.push({\n              label: component.label,\n              editableuntill: []\n            });else subsampleeditable.push({\n              label: component.label,\n              editableuntill: [transactionStatus.PREREGISTER]\n            });\n\n            if (component.inputtype === 'date') {\n              subsampledatefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              subsampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\n            }\n\n            subsamplelistitem.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            });\n          }\n        });\n      }));\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map(component => {\n          if (component.hasOwnProperty('children')) {\n            // let combinedField = [];\n            component.children.map(componentRow => {\n              // combinedField.push(componentRow.label)\n              jdynamiccolumns.push({\n                columnname: componentRow.label,\n                displayname: componentRow.displayname\n              });\n\n              if (componentRow.hasOwnProperty('child')) {\n                componentRow.child.map(childData => {\n                  jnumericcolumns.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"foriegntablePK\": componentRow.label,\n                    // \"ismultilingual\": true,\n                    // \"conditionstring\": \" and nformcode in (140) \",\n                    \"tablecolumnname\": childData.tablecolumnname,\n                    \"foriegntablename\": \"dynamicmaster\"\n                  });\n                });\n              }\n\n              componentRow.unique && sampleuniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              samplesearchfields.push(componentRow.label);\n              sampletemplatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n\n              if (componentRow.inputtype === 'date') {\n                sampledatefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                sampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\n              }\n\n              displayFields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n              componentRow.templatemandatory && listItem.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n\n              if (componentRow.mandatory || componentRow.templatemandatory) {\n                gridItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              } else {\n                gridMoreItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              }\n\n              if (componentRow.templatemandatory) {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: []\n                });\n              } else {\n                if (componentRow.readonly) editable.push({\n                  label: componentRow.label,\n                  editableuntill: []\n                });else editable.push({\n                  label: componentRow.label,\n                  editableuntill: [transactionStatus.PREREGISTER]\n                });\n              }\n\n              return null;\n            }); // let fieldSet = combinedField.join(\"&\")\n            // displayFields.push(fieldSet);\n            // componentRow.templatemandatory && listItem.push(fieldSet)\n            // gridMoreItem.push(fieldSet);\n          } else {\n            jdynamiccolumns.push({\n              columnname: component.label,\n              displayname: component.displayname\n            });\n\n            if (component.hasOwnProperty('child')) {\n              component.child.map(childData => {\n                jnumericcolumns.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"foriegntablePK\": component.label,\n                  // \"ismultilingual\": true,\n                  // \"conditionstring\": \" and nformcode in (140) \",\n                  \"tablecolumnname\": childData.tablecolumnname,\n                  \"foriegntablename\": \"dynamicmaster\"\n                });\n              });\n            }\n\n            component.unique && sampleuniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            samplesearchfields.push(component.label);\n            sampletemplatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            });\n\n            if (component.inputtype === 'date') {\n              sampledatefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              sampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\n            }\n\n            displayFields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            }); // component.templatemandatory \n            //&& listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\n\n            if (component.mandatory || component.templatemandatory) {\n              gridItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n              listItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                mandatory: true\n              });\n            } else {\n              gridMoreItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            }\n\n            if (component.templatemandatory) {\n              editable.push({\n                label: component.label,\n                editableuntill: []\n              });\n            } else {\n              // editable.push({ label: component.label, editableuntill: [17] })\n              if (component.readonly) editable.push({\n                label: component.label,\n                editableuntill: []\n              });else editable.push({\n                label: component.label,\n                editableuntill: [transactionStatus.PREREGISTER]\n              });\n            }\n\n            return null;\n          }\n        });\n      }));\n      displayFields.push({\n        [designProperties.LABEL]: {\n          \"en-US\": \"Reg Date\",\n          \"Ko-KR\": \"Reg Date\",\n          \"ru-RU\": \"Дата регистрации\",\n          \"tg-TG\": \"Санаи бақайдгирӣ\"\n        },\n        [designProperties.VALUE]: 'dregdate'\n      }); //samplesearchfields.push(...staticSearchFields);\n      //console.log(\"reg sub type:\", this.props.Login);\n\n      let obj = {\n        sampledisplayfields: displayFields,\n        samplelistitem: listItem,\n        samplegriditem: gridItem,\n        samplegridmoreitem: gridMoreItem,\n        subsamplelistitem,\n        sampledatefields,\n        subsampledatefields,\n        samplesearchfields,\n        subsamplesearchfields,\n        testdatefields,\n        sampledateconstraints,\n        subsampledateconstraints,\n        sampleuniquevalidation,\n        subsampleuniquevalidation,\n        ...this.props.Login.testListFields\n      }; // console.log(\"Template mapping obj:\", obj);\n\n      let jsondata = {\n        sampletemplatefields,\n        subsampletemplatefields,\n        //: subsamplesearchfields,\n        [formCode.SAMPLEREGISTRATION]: { ...obj,\n          sampleeditable: editable,\n          subsampleeditable\n        },\n        [formCode.RESULTENTRY]: { ...obj\n        },\n        [formCode.APPROVAL]: { ...obj\n        },\n        [formCode.JOBALLOCATION]: { ...obj\n        },\n        [formCode.MYJOBS]: { ...obj\n        },\n        [formCode.TESTWISEMYJOBS]: { ...obj\n        }\n      };\n      return jsondata;\n    };\n\n    this.onChangeToggle = (event, dataItem, field, dataIndex, formCode) => {\n      let designData = this.props.Login.designData;\n      let dataResult = this.props.Login.dataResult;\n\n      if (formCode === undefined) {\n        dataResult[dataIndex][field] = event.target.checked;\n\n        if (event.target.checked) {\n          designData[field].splice(dataIndex, 0, dataItem.realData);\n        } else {\n          designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1);\n        }\n      } else {\n        //dataResult[formCode][dataIndex][field] = event.target.checked;\n        if (event.target.checked) {\n          if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_MAXIMUMSELECTIONEXCEEDS\"\n            }));\n          } else {\n            dataResult[formCode][dataIndex][field] = event.target.checked;\n            designData[formCode][field].splice(dataIndex, 0, dataItem.realData);\n          }\n\n          if (field === 'sampledisplayfields') {\n            dataResult[formCode][dataIndex][field] = event.target.checked;\n            designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label);\n          }\n        } else {\n          if (field === 'sampledisplayfields') {\n            dataResult[formCode][dataIndex][field] = event.target.checked;\n            designData[formCode]['samplesearchfields'].splice(designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.label), 1);\n          }\n\n          dataResult[formCode][dataIndex][field] = event.target.checked;\n          designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1);\n        }\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          designData,\n          dataResult\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //console.log(\"save:\", this.state.selectedRecord);\n      //console.log(\"data:\", this.props.Login.editFieldDesignData)\n      let inputData = [];\n      let operation = this.props.Login.operation;\n\n      if (operation === 'configure' || operation === 'configuresubsample') {\n        inputData = {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n            jsondataobj: this.props.Login.designData\n          },\n          userinfo: this.props.Login.userInfo\n        };\n        operation = 'configure';\n      } else if (operation === 'configureedit') {\n        let designData = this.props.Login.editFieldDesignData;\n        let formCodeArray = Object.keys(this.state.selectedRecord);\n        formCodeArray.forEach(formCode => {\n          const data = this.state.selectedRecord[formCode];\n          const editableData = designData[formCode]['sampleeditable'];\n          ;\n          Object.keys(data).map(label => {\n            const editableuntil = [];\n            data[label].map(statusItem => editableuntil.push(statusItem.value));\n            const index = editableData.findIndex(item => item.label === label);\n\n            if (index === -1) {\n              editableData.push({\n                \"label\": label,\n                \"editableuntill\": editableuntil\n              });\n            } else {\n              editableData[index] = {\n                \"label\": label,\n                \"editableuntill\": editableuntil\n              };\n            } //designData[formCode]['sampleeditable'].push({\"label\":label, \"editableuntill\":editableuntil});\n\n          });\n        });\n        inputData = {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n            jsondataobj: designData\n          },\n          userinfo: this.props.Login.userInfo\n        };\n        operation = 'configure';\n      } else {\n        let {\n          jsondata,\n          jdynamiccolumns,\n          jnumericcolumns,\n          templatePrimaryKey\n        } = this.props.Login.masterData.realSampleValue.value === TemplateType.Masters ? this.getGridJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata) : {};\n        inputData = {\n          \"userinfo\": this.props.Login.userInfo,\n          \"ncontrolcode\": this.props.Login.ncontrolCode,\n          \"nreactregtemplatecode\": this.state.selectedRecord.nreactregtemplatecode.value,\n          \"nsampletypecode\": this.props.Login.masterData.realSampleValue.value,\n          \"nregtypecode\": this.props.Login.masterData.realSampleValue.value === TemplateType.Masters ? -1 : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\n          \"nregsubtypecode\": this.props.Login.masterData.realSampleValue.value === TemplateType.Masters ? -1 : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\n          \"nformcode\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\n          \"nsubsampletemplatecode\": this.state.selectedRecord.nsubsampletemplatecode ? this.state.selectedRecord.nsubsampletemplatecode.value : -1,\n          \"jsondataobj\": this.props.Login.masterData.realSampleValue.value === TemplateType.Masters ? jsondata : this.getJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata)\n        };\n        inputData[\"designtemplatemapping\"] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n\n        if (this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.value === -2) {\n          let qf_jsonData = {\n            sdisplayname: {}\n          };\n          let qbt_jsonData = {\n            tablename: {}\n          };\n          this.props.Login.languageList.map(lang => {\n            qf_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord.sformname;\n            qbt_jsonData['tablename'][lang.value] = this.state.selectedRecord.sformname;\n          });\n          let qm_jsonData = {\n            sdisplayname: {}\n          };\n          let nmodulecode = 0;\n          let smoduledisplayname = \"\"; // if (typeof this.state.selectedRecord[\"nmodulecode\"].value === \"string\" )\n          // {\n          //     smoduledisplayname = this.state.selectedRecord[\"nmodulecode\"].value;\n          //     this.props.Login.languageList.map(lang => {\n          //         qm_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord[\"nmodulecode\"].value;\n          //     })\n          // }\n          // else{\n          //     nmodulecode = this.state.selectedRecord[\"nmodulecode\"].value;\n          // }\n\n          if (this.state.selectedRecord[\"nnewmodule\"].value === transactionStatus.YES) {\n            smoduledisplayname = this.state.selectedRecord[\"nmodulecode\"];\n            this.props.Login.languageList.map(lang => {\n              qm_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord[\"nmodulecode\"];\n            });\n          } else {\n            nmodulecode = this.state.selectedRecord[\"nmodulecode\"].value;\n          }\n\n          inputData = { ...inputData,\n            sformname: this.state.selectedRecord.sformname,\n            nmodulecode,\n            smoduledisplayname,\n            qm_jsonData,\n            qf_jsonData,\n            qbt_jsonData,\n            sprimarykeyname: templatePrimaryKey,\n            jdynamiccolumns,\n            jnumericcolumns\n          };\n        } // this.designtemplatemappingFieldList.map(item => {\n        //     return inputData[\"designtemplatemapping\"][item] = this.state.selectedRecord[item]\n        // });\n\n      }\n\n      let postParam = undefined;\n      const inputParam = {\n        classUrl: \"designtemplatemapping\",\n        methodUrl: \"DesignTemplateMapping\",\n        inputData: inputData,\n        operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.state = {\n      isOpen: false,\n      designtemplatemappingData: [],\n      masterStatus: \"\",\n      error: \"\",\n      //selectedRecord: {},\n      operation: \"\",\n      screenName: undefined,\n      userLogged: true,\n      selectedDesignTemplateMapping: undefined,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showAccordian: true,\n      selectedInput: \"\",\n      masterTypeArray: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_NEWMASTER\"\n        }),\n        value: 1,\n        item: {\n          nmastertypecode: 1,\n          smastertype: this.props.intl.formatMessage({\n            id: \"IDS_NEWMASTER\"\n          })\n        }\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EXISTINGMASTER\"\n        }),\n        value: 2,\n        item: {\n          nmastertypecode: 2,\n          smastertype: this.props.intl.formatMessage({\n            id: \"IDS_EXISTINGMASTER\"\n          })\n        }\n      }],\n      newMasterForm: {\n        value: -2,\n        label: \"-\"\n      },\n      moduleTypeArray: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_NEWMODULE\"\n        }),\n        value: 3\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EXISTINGMODULE\"\n        }),\n        value: 4\n      }]\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.searchFieldList = [\"sregtemplatename\", \"sversionno\", \"stransdisplaystatus\"];\n    this.designtemplatemappingFieldList = ['ndesigntemplatemappingcode', 'nsampletypecode', 'nformcode', 'nregtypecode', 'nregsubtypecode', 'nformwisetypecode', 'nreactregtemplatecode', 'ntransactionstatus', 'nversionno']; //'nmahcode',\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const Layout = this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata;\n    let userStatusCSS = \"outline-secondary\";\n\n    if (this.props.Login.masterData.selectedDesignTemplateMapping ? this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.ACTIVE || this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED : false) {\n      userStatusCSS = \"outline-success\";\n    } else if (this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.RETIRED) {\n      userStatusCSS = \"outline-danger\";\n    }\n\n    const addId = this.state.controlMap.has(\"AddDesignTemplateMapping\") && this.state.controlMap.get(\"AddDesignTemplateMapping\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"DesignTemplateMapping\",\n      selectedObject: \"selectedDesignTemplateMapping\",\n      primaryKeyField: \"ndesigntemplatemappingcode\",\n      fetchUrl: \"designtemplatemapping/getDesignTemplateMapping\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData[\"realSampleValue\"] ? this.props.Login.masterData[\"realSampleValue\"].value : -1,\n        nregtypecode: this.props.Login.masterData[\"realRegTypeValue\"] ? this.props.Login.masterData[\"realRegTypeValue\"].value : -1,\n        nregsubtypecode: this.props.Login.masterData[\"realRegSubTypeValue\"] ? this.props.Login.masterData[\"realRegSubTypeValue\"].value : -1,\n        nformcode: this.props.Login.masterData[\"realFormValue\"] ? this.props.Login.masterData[\"realFormValue\"].value : -1\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    this.validationColumnList = [{\n      \"idsName\": \"IDS_TEMPLATENAME\",\n      \"dataField\": \"nreactregtemplatecode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryFields = [];\n    this.validationColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\"); // let breadCrumbDataDate = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate,\n    //     this.props.Login.masterData && this.props.Login.masterData.ToDate,\n    //     this.props.Login.userInfo)\n    // const breadCrumbData = [\n\n    let breadCrumbData = [];\n    this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value === 4 ? breadCrumbData = [{\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\n    }, //defaultMasterType\n    // {\n    //     \"label\": \"IDS_MASTERTYPE\",\n    //     \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\n    // },\n    {\n      \"label\": \"IDS_SCREEN\",\n      \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\n    }] : breadCrumbData = [{\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\n    }, {\n      \"label\": \"IDS_REGTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.label : \"-\"\n    }, {\n      \"label\": \"IDS_REGSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"-\"\n    }];\n    const addParam = {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_DESIGNTEMPLATEMAPPING\"\n      }),\n      operation: \"create\",\n      userInfo: this.props.Login.userInfo,\n      realSampleValue: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value : -1,\n      realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\n      realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\n      controlId: addId,\n      moduleTypeArray: this.state.moduleTypeArray\n    }; //console.log(\"render, props, state:\", this.props.Login);\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 21\n      }\n    }), breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_DESIGNTEMPLATEMAPPING\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.DesignTemplateMapping,\n      getMasterDetail: designtemplatemapping => this.props.getDesignTemplateMappingDetail(designtemplatemapping, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedDesignTemplateMapping,\n      primaryKeyField: \"ndesigntemplatemappingcode\",\n      mainField: \"sregtemplatename\",\n      firstField: \"sversionno\",\n      secondField: \"stransdisplaystatus\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: true,\n      openModal: () => this.props.getDesignTemplateMappingComboService(addParam),\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      filterComponent: [{\n        \"IDS_TEMPLATEFILTER\": /*#__PURE__*/React.createElement(TemplateFilter, {\n          formatMessage: this.props.intl.formatMessage,\n          filterSampletype: this.state.listSampletype || [],\n          filterRegistrationType: this.state.listRegistrationType || [],\n          filterRegistrationSubType: this.state.listRegistrationSubType || [],\n          filterForms: this.state.listForms || [],\n          defaultsampletype: this.props.Login.masterData[\"defaultsampletype\"] || {},\n          defaultregsubtype: this.props.Login.masterData[\"defaultregsubtype\"] || [],\n          defaultregtype: this.props.Login.masterData[\"defaultregtype\"] || [],\n          defaultform: this.props.Login.masterData.defaultform || [],\n          filterComboChange: this.filterComboChange,\n          masterTypeArray: this.props.Login.masterData.masterTypeArray || [],\n          defaultMasterType: this.props.Login.masterData.defaultMasterType || {},\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping.length > 0 && this.props.Login.masterData.selectedDesignTemplateMapping ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.sregtemplatename)), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      className: \"text-muted font-weight-normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 10,\n      className: \"d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 61\n      }\n    }, `${this.props.intl.formatMessage({\n      id: \"IDS_VERSION\"\n    })} : ${this.props.Login.masterData.selectedDesignTemplateMapping.sversionno}`, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT ? \"outline-secondary\" : this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-danger\"} btn-sm mx-md-3 mx-sm-2`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.stransdisplaystatus))), /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category float-right icon-group-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: () => this.onApproveClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_CONFIGUREDISPLAYFIELDS\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: () => this.openFieldConfiguration(approveId, \"configure\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faList,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_CONFIGUREDISPLAYFIELDS\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 73\n      }\n    })), this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== TemplateType.Masters ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_CONFIGUREEDITFIELDS\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: () => this.editFieldConfiguration(approveId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 71\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faList,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_CONFIGUREEDITFIELDS\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 77\n      }\n    })), this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: () => this.openFieldConfiguration(approveId, 'configuresubsample'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faList,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 89\n      }\n    }))) : \"\") : \"\", /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1 // onClick={() => this.ConfirmDelete(this.state.approveId)}>\n      ,\n      onClick: () => this.ConfirmDelete(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 69\n      }\n    }))))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.nformcode > 0 && /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_MODULENAME\",\n      message: \"Module Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 68\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 57\n      }\n    }, \"   \", this.props.Login.masterData.selectedDesignTemplateMapping.smodulename))), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_FORMNAME\",\n      message: \"Form Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 68\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.sformname))), /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_TEMPLATE\",\n      message: \"Template\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 66\n      }\n    })), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 53\n      }\n    }, Layout ? Layout.map(item => /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 65\n      }\n    }, item.children.length > 0 ? item.children.map(column => /*#__PURE__*/React.createElement(Col, {\n      md: 12 / item.children.length,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 77\n      }\n    }, column.children.map(component => {\n      return component.hasOwnProperty(\"children\") ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 97\n        }\n      }, component.children.map(componentrow => /*#__PURE__*/React.createElement(Col, {\n        md: 12 / componentrow.length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 105\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 109\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 113\n        }\n      }, componentrow.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 113\n        }\n      }, \"-\"))))) : /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 97\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 101\n        }\n      }, component.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 101\n        }\n      }, \" \", \"-\"));\n    }))) : \"\")) : \"\")))) : \"\"))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      size: this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' ? \"xl\" : \"lg\",\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' || this.props.Login.operation === 'configureedit' ? [] : mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' ? /*#__PURE__*/React.createElement(ConfigureScreenFields, {\n        designData: this.props.Login.designData || {},\n        inputParam: this.props.Login.inputParam,\n        dataResult: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === TemplateType.Masters ? this.props.Login.dataResult || [] : this.props.Login.dataResult || {},\n        onChangeToggle: this.onChangeToggle,\n        approvedRegSubTypeVersion: this.props.Login.approvedRegSubTypeVersion,\n        selectedTemplateType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 33\n        }\n      }) : this.props.Login.operation === 'configureedit' ? /*#__PURE__*/React.createElement(ConfigureEditFields, {\n        designData: this.props.Login.editFieldDesignData || {},\n        inputParam: this.props.Login.inputParam,\n        dataResult: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === TemplateType.Masters ? this.props.Login.editFieldDataResult || [] : this.props.Login.editFieldDataResult || {},\n        selectedRecord: this.state.selectedRecord || {} // onChangeToggle={this.onChangeToggle}\n        ,\n        onComboChange: this.onConfigureComboChange // approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\n        ,\n        selectedTemplateType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 33\n        }\n      }) : this.state.showSynonym ? /*#__PURE__*/React.createElement(AddSynonym, {\n        selectedFieldRecord: this.state.selectedRecord,\n        onInputOnChange: this.onInputOnChange,\n        languages: this.props.Login.languageList || [],\n        fieldName: \"nmodulecode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(AddDesignTemplateMapping, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        formatMessage: this.props.intl.formatMessage,\n        designtemplatemappingList: this.props.Login.designtemplatemappingList,\n        subSampleTemplateList: this.props.Login.subSampleTemplateList,\n        selectedDesignTemplateMapping: this.props.Login.masterData.selectedDesignTemplateMapping || {},\n        operation: this.props.Login.operation,\n        userLogged: this.props.Login.userLogged,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        nformcode: this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\n        needSubSample: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false,\n        designTemplateQualisModule: this.props.Login.designTemplateQualisModule,\n        language: this.props.Login.language,\n        moduleTypeArray: this.state.moduleTypeArray || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 34\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 21\n      }\n    }));\n  } // onFilterSubmit = () => {\n  //     this.reloadData()\n  // }\n\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      selectedRecord,\n      userRoleControlRights,\n      controlMap,\n      listSampletype,\n      listRegistrationType,\n      listRegistrationSubType,\n      listForms\n    } = this.state;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        updateState = true;\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      updateState = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    const selectedInput = {};\n    let Taglstsampletype;\n    let TaglistRegistrationType;\n    let TaglistRegistrationSubType;\n    let ListFormsMap;\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      updateState = true;\n\n      if (this.props.Login.masterData.SampleTypes) {\n        Taglstsampletype = constructOptionList(this.props.Login.masterData.SampleTypes || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"undefined\", undefined);\n        listSampletype = Taglstsampletype.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.registrationTypes) {\n        TaglistRegistrationType = constructOptionList(this.props.Login.masterData.registrationTypes || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, undefined);\n        listRegistrationType = TaglistRegistrationType.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.registrationSubTypes) {\n        TaglistRegistrationSubType = constructOptionList(this.props.Login.masterData.registrationSubTypes || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", undefined);\n        listRegistrationSubType = TaglistRegistrationSubType.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.qualisforms) {\n        ListFormsMap = constructOptionList(this.props.Login.masterData.qualisforms || [], \"nformcode\", \"sdisplayname\", undefined, undefined, undefined);\n        listForms = ListFormsMap.get(\"OptionList\");\n      }\n    }\n\n    if (updateState) {\n      this.setState({\n        selectedRecord,\n        controlMap,\n        userRoleControlRights,\n        listSampletype,\n        listRegistrationType,\n        listRegistrationSubType,\n        selectedInput,\n        listForms\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  editFieldConfigService,\n  updateStore,\n  getDesignTemplateMappingDetail,\n  getMappedFieldProps,\n  getDesignTemplateMappingComboService,\n  filterColumnData,\n  reloadDesignTemplateMapping,\n  getTMPFilterRegType,\n  getTMPFilterRegSubType,\n  getTMPFilterSubmit\n})(injectIntl(DesignTemplateMapping));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/designtemplatemapping/DesignTemplateMapping.jsx"],"names":["React","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faPencilAlt","faTrashAlt","faThumbsUp","faUserLock","faClock","faList","connect","injectIntl","FormattedMessage","toast","callService","crudMaster","validateEsignCredential","updateStore","getDesignTemplateMappingDetail","getMappedFieldProps","editFieldConfigService","getDesignTemplateMappingComboService","filterColumnData","reloadDesignTemplateMapping","getTMPFilterRegType","getTMPFilterRegSubType","getTMPFilterSubmit","TemplateFilter","ContentPanel","ReadOnlyText","getControlMap","showEsign","convertDateValuetoString","constructOptionList","constructjsonOptionDefault","ListMaster","SlideOutModal","AddDesignTemplateMapping","Esign","DEFAULT_RETURN","BreadcrumbComponent","ListWrapper","designProperties","formCode","TemplateType","transactionStatus","AddSynonym","Affix","ConfirmMessage","ReactTooltip","ConfigureScreenFields","ConfigureEditFields","mapStateToProps","state","Login","DesignTemplateMapping","Component","constructor","props","filterComboChange","event","fieldname","inputData","userinfo","userInfo","nflag","nsampletypecode","parseInt","value","masterData","defaultsampletype","inputParam","Masters","masterTypeArray","updateInfo","typeName","data","defaultMasterType","qualisforms","defaultform","newMasterForm","nregtypecode","nregsubtypecode","defaultregtype","defaultregsubtype","reloadData","searchRef","current","realRegTypeValue","realRegSubTypeValue","realSampleValue","nformcode","realFormValue","openFilter","showFilter","closeFilter","onFilterSubmit","NA","onApproveClick","selectedDesignTemplateMapping","ntransactionstatus","RETIRED","ncontrolCode","controlMap","has","get","ncontrolcode","postParam","undefined","Value","inputListName","selectedObject","primaryKeyField","classUrl","methodUrl","operation","saveType","esignNeeded","userRoleControlRights","loadEsign","screenData","openModal","warn","intl","formatMessage","id","ConfirmDelete","confirmMessage","confirm","deleteTemplate","DRAFT","openFieldConfiguration","controlCode","screenName","designtemplatemapping","ndesigntemplatemappingcode","item","napprovalconfigcode","editFieldConfiguration","validateEsign","sreason","selectedRecord","password","closeModal","selectedId","onComboChange","comboData","fieldName","setState","onConfigureComboChange","label","onInputOnChange","target","type","name","checked","YES","NO","handleDateChange","dateName","dateValue","getGridJsondata","templatedata","gridItem","gridMoreItem","masterdatefields","masterdateconstraints","masteruniquevalidation","editable","jdynamiccolumns","jnumericcolumns","templatePrimaryKey","mastertemplatefields","map","row","children","column","component","index","hasOwnProperty","componentRow","unique","push","LABEL","filterinputtype","comboDataInputObject","inputtype","source","valuemember","displaymember","displayname","VALUE","dateonly","dateConstraintArraySQL","default","columnname","mandatory","templatemandatory","editableuntill","table","jsondata","griditem","gridmoreitem","getJsondata","displayFields","listItem","subsampleeditable","subsamplelistitem","sampledatefields","sampledateconstraints","subsampledatefields","subsampledateconstraints","samplesearchfields","subsamplesearchfields","sampletemplatefields","subsampletemplatefields","sampleuniquevalidation","subsampleuniquevalidation","testdatefields","nsubsampletemplatecode","readonly","PREREGISTER","child","childData","tablecolumnname","obj","sampledisplayfields","samplelistitem","samplegriditem","samplegridmoreitem","testListFields","SAMPLEREGISTRATION","sampleeditable","RESULTENTRY","APPROVAL","JOBALLOCATION","MYJOBS","TESTWISEMYJOBS","onChangeToggle","dataItem","field","dataIndex","designData","dataResult","splice","realData","findIndex","x","length","onSaveClick","formRef","jsondataobj","editFieldDesignData","formCodeArray","Object","keys","forEach","editableData","editableuntil","statusItem","nreactregtemplatecode","nmastersitecode","qf_jsonData","sdisplayname","qbt_jsonData","tablename","languageList","lang","sformname","qm_jsonData","nmodulecode","smoduledisplayname","sprimarykeyname","onTabChange","tabProps","isOpen","designtemplatemappingData","masterStatus","error","userLogged","Map","showAccordian","selectedInput","nmastertypecode","smastertype","moduleTypeArray","createRef","searchFieldList","designtemplatemappingFieldList","getDerivedStateFromProps","render","Layout","userStatusCSS","ACTIVE","APPROVED","addId","deleteId","approveId","filterParam","fetchUrl","fecthInputObject","validationColumnList","mandatoryFields","breadCrumbData","addParam","controlId","searchedData","listSampletype","listRegistrationType","listRegistrationSubType","listForms","sregtemplatename","sversionno","stransdisplaystatus","indexOf","nneedsubsample","smodulename","componentrow","approvedRegSubTypeVersion","editFieldDataResult","showSynonym","designtemplatemappingList","subSampleTemplateList","designTemplateQualisModule","language","componentDidUpdate","previousProps","updateState","values","Taglstsampletype","TaglistRegistrationType","TaglistRegistrationSubType","ListFormsMap","SampleTypes","registrationTypes","registrationSubTypes","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrashAlt, faThumbsUp, faUserLock, faClock, faList } from '@fortawesome/free-solid-svg-icons';//,faUserTimes, faTrash\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getDesignTemplateMappingDetail, \r\n    getMappedFieldProps, editFieldConfigService,\r\n    getDesignTemplateMappingComboService, filterColumnData, reloadDesignTemplateMapping, \r\n    getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit\r\n} from '../../actions';\r\nimport TemplateFilter from './TemplateFilter';\r\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\r\nimport { getControlMap, showEsign, convertDateValuetoString, constructOptionList, constructjsonOptionDefault } from '../../components/CommonScript';//searchData, sortData,\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\n// import DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddDesignTemplateMapping from './AddDesignTemplateMapping'\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { designProperties, formCode, TemplateType, transactionStatus } from '../../components/Enumeration';\r\n\r\nimport AddSynonym from '../../components/droparea/AddSynonym';\r\nimport { Affix } from 'rsuite';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport ConfigureScreenFields from './ConfigureScreenFields';\r\nimport ConfigureEditFields from './ConfigureEditFields';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass DesignTemplateMapping extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // const dataState = {\r\n        //     skip: 0,\r\n        //     take: 10,\r\n        // };\r\n\r\n        this.state = {\r\n            isOpen: false,\r\n            designtemplatemappingData: [],\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            //selectedRecord: {},\r\n            operation: \"\",\r\n\r\n            screenName: undefined,\r\n            userLogged: true,\r\n            selectedDesignTemplateMapping: undefined,\r\n\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            selectedInput: \"\",\r\n            masterTypeArray : [{label:this.props.intl.formatMessage({id:\"IDS_NEWMASTER\"}),value:1, item:{nmastertypecode:1, smastertype:this.props.intl.formatMessage({id:\"IDS_NEWMASTER\"})}},\r\n                                {label:this.props.intl.formatMessage({id:\"IDS_EXISTINGMASTER\"}),value:2, item:{nmastertypecode:2, smastertype:this.props.intl.formatMessage({id:\"IDS_EXISTINGMASTER\"})}}],\r\n            newMasterForm : {value:-2, label:\"-\"},\r\n            moduleTypeArray :[{label:this.props.intl.formatMessage({id:\"IDS_NEWMODULE\"}), value:3},\r\n                              {label:this.props.intl.formatMessage({id:\"IDS_EXISTINGMODULE\"}),value:4}]\r\n\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.searchFieldList = [\"sregtemplatename\", \"sversionno\", \"stransdisplaystatus\"];\r\n\r\n        this.designtemplatemappingFieldList = ['ndesigntemplatemappingcode', 'nsampletypecode', 'nformcode',\r\n            'nregtypecode', 'nregsubtypecode', 'nformwisetypecode', 'nreactregtemplatecode', 'ntransactionstatus', 'nversionno'];//'nmahcode',\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    filterComboChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            // let uRL = \"\";\r\n            let inputData = [];\r\n            if (fieldname === \"sampleType\") {\r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 1,\r\n                    nsampletypecode: parseInt(event.value),\r\n\r\n                }\r\n                let masterData = { ...this.props.Login.masterData, defaultsampletype: event }\r\n                let inputParam = { masterData, inputData }\r\n                if (event.value === TemplateType.Masters){\r\n                    const masterTypeArray = this.state.masterTypeArray\r\n            \r\n                    const updateInfo = {typeName: DEFAULT_RETURN,\r\n                                        data: { masterData:{...masterData,\r\n                                                             masterTypeArray, \r\n                                                             defaultMasterType:masterTypeArray[0],\r\n                                                             qualisforms:[], defaultform:this.state.newMasterForm,\r\n                                                             nregtypecode:-1, nregsubtypecode:-1 } \r\n                                                        }\r\n                                                    }\r\n    \r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else\r\n                {\r\n                    this.props.getTMPFilterRegType(inputParam)\r\n                }\r\n            }\r\n            else if (fieldname === \"registrationType\") {\r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n\r\n                    nregtypecode: parseInt(event.value),\r\n                    nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\r\n\r\n                }\r\n                let masterData = { ...this.props.Login.masterData, defaultregtype: event }\r\n                let inputParam = { masterData, inputData }\r\n                this.props.getTMPFilterRegSubType(inputParam)\r\n\r\n            } else if (fieldname === \"registrationSubType\") {\r\n\r\n                let masterData = { ...this.props.Login.masterData, defaultregsubtype: event }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData }\r\n                }\r\n\r\n                this.props.updateStore(updateInfo);\r\n            } \r\n            else if (fieldname === \"masterType\") {\r\n\r\n                let masterData = { ...this.props.Login.masterData, defaultMasterType: event }             \r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 1,\r\n                    nsampletypecode: TemplateType.Masters,\r\n                }\r\n               \r\n                let inputParam = { masterData, inputData }\r\n                if (event.value === 1){\r\n                   const updateInfo = { typeName: DEFAULT_RETURN,\r\n                                        data: { masterData:{...masterData, qualisforms:[], defaultform:this.state.newMasterForm} } \r\n                                      }\r\n    \r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else\r\n                {\r\n                    this.props.getTMPFilterRegType(inputParam)\r\n                }\r\n\r\n            }else {\r\n                let masterData = { ...this.props.Login.masterData, defaultform: event }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData }\r\n                }\r\n\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n       \r\n        const Layout = this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n            this.props.Login.masterData.selectedDesignTemplateMapping.jsondata\r\n\r\n        let userStatusCSS = \"outline-secondary\";\r\n        if (this.props.Login.masterData.selectedDesignTemplateMapping ? this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.ACTIVE\r\n            || this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED : false) {\r\n            userStatusCSS = \"outline-success\";\r\n        }\r\n        else if (this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.RETIRED) {\r\n            userStatusCSS = \"outline-danger\";\r\n        }\r\n\r\n        const addId = this.state.controlMap.has(\"AddDesignTemplateMapping\") && this.state.controlMap.get(\"AddDesignTemplateMapping\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode\r\n\r\n\r\n        const filterParam = {\r\n            inputListName: \"DesignTemplateMapping\",\r\n            selectedObject: \"selectedDesignTemplateMapping\",\r\n            primaryKeyField: \"ndesigntemplatemappingcode\",\r\n            fetchUrl: \"designtemplatemapping/getDesignTemplateMapping\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo,\r\n                                nsampletypecode:this.props.Login.masterData[\"realSampleValue\"] ? this.props.Login.masterData[\"realSampleValue\"].value :-1,\r\n                                nregtypecode:this.props.Login.masterData[\"realRegTypeValue\"] ? this.props.Login.masterData[\"realRegTypeValue\"].value :-1,\r\n                                nregsubtypecode:this.props.Login.masterData[\"realRegSubTypeValue\"] ? this.props.Login.masterData[\"realRegSubTypeValue\"].value :-1,\r\n                                nformcode:this.props.Login.masterData[\"realFormValue\"] ? this.props.Login.masterData[\"realFormValue\"].value :-1,\r\n                            },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: this.searchFieldList\r\n\r\n        };\r\n        this.validationColumnList = [\r\n            { \"idsName\": \"IDS_TEMPLATENAME\", \"dataField\": \"nreactregtemplatecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n\r\n\r\n        ]\r\n        const mandatoryFields = [];\r\n        this.validationColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n        // let breadCrumbDataDate = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate,\r\n        //     this.props.Login.masterData && this.props.Login.masterData.ToDate,\r\n        //     this.props.Login.userInfo)\r\n\r\n        // const breadCrumbData = [\r\n\r\n        let breadCrumbData = [];\r\n        this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value === 4 ?\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\r\n                }, \r\n                //defaultMasterType\r\n                // {\r\n                //     \"label\": \"IDS_MASTERTYPE\",\r\n                //     \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\r\n                // },\r\n                {\r\n                    \"label\": \"IDS_SCREEN\",\r\n                    \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\r\n                }\r\n            ] :\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\r\n                }, {\r\n                    \"label\": \"IDS_REGTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.label : \"-\"\r\n                }, {\r\n                    \"label\": \"IDS_REGSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"-\"\r\n                }\r\n            ];\r\n\r\n            const addParam = {\r\n                                screenName: this.props.intl.formatMessage({ id: \"IDS_DESIGNTEMPLATEMAPPING\"}), \r\n                                operation:\"create\", \r\n                                userInfo : this.props.Login.userInfo, \r\n                                realSampleValue: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value : -1,\r\n                                realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1, \r\n                                realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1, \r\n                                controlId : addId,\r\n                                moduleTypeArray:this.state.moduleTypeArray\r\n                             }\r\n          \r\n        //console.log(\"render, props, state:\", this.props.Login);\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    {/* Start of get display*/}\r\n                    {/* <div className=\"client-listing-wrap mtop-4\"> */}\r\n                    <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n                            <ListMaster\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_DESIGNTEMPLATEMAPPING\"})}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.DesignTemplateMapping}\r\n                                getMasterDetail={(designtemplatemapping) => this.props.getDesignTemplateMappingDetail(designtemplatemapping, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.selectedDesignTemplateMapping}\r\n                                primaryKeyField=\"ndesigntemplatemappingcode\"\r\n                                mainField=\"sregtemplatename\"\r\n                                firstField=\"sversionno\"\r\n                                secondField=\"stransdisplaystatus\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={true}\r\n                                openModal={() => this.props.getDesignTemplateMappingComboService(addParam)}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_TEMPLATEFILTER\":\r\n                                            <TemplateFilter\r\n                                                formatMessage={this.props.intl.formatMessage}\r\n                                                filterSampletype={this.state.listSampletype || []}\r\n                                                filterRegistrationType={this.state.listRegistrationType || []}\r\n                                                filterRegistrationSubType={this.state.listRegistrationSubType || []}\r\n                                                filterForms={this.state.listForms || []}\r\n                                                defaultsampletype={this.props.Login.masterData[\"defaultsampletype\"] || {}}\r\n                                                defaultregsubtype={this.props.Login.masterData[\"defaultregsubtype\"] || []}\r\n                                                defaultregtype={this.props.Login.masterData[\"defaultregtype\"] || []}\r\n                                                defaultform={this.props.Login.masterData.defaultform || []}\r\n                                                filterComboChange={this.filterComboChange}\r\n                                                masterTypeArray={this.props.Login.masterData.masterTypeArray || []}\r\n                                                defaultMasterType={this.props.Login.masterData.defaultMasterType || {}}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n\r\n\r\n                        <Col md={8}>\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Card className=\"border-0\">\r\n                                    {this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping.length > 0 && this.props.Login.masterData.selectedDesignTemplateMapping ?\r\n                                        <>\r\n                                            <Card.Header>\r\n                                                <Card.Title>\r\n                                                    <h1 className=\"product-title-main\">{this.props.Login.masterData.selectedDesignTemplateMapping.sregtemplatename}</h1>\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle className=\"text-muted font-weight-normal\">\r\n                                                    <Row>\r\n                                                        <Col md={10} className=\"d-flex\">\r\n                                                            <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                {`${this.props.intl.formatMessage({ id: \"IDS_VERSION\" })} : ${this.props.Login.masterData.selectedDesignTemplateMapping.sversionno}`}\r\n                                                                <span className={`btn btn-outlined ${this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT ? \"outline-secondary\" : this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-danger\"} btn-sm mx-md-3 mx-sm-2`}>\r\n                                                                    {this.props.Login.masterData.selectedDesignTemplateMapping.stransdisplaystatus}\r\n                                                                </span>\r\n\r\n                                                            </h2>\r\n                                                        </Col>\r\n                                                        <Col md={2}>\r\n                                                            <div className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={() => this.onApproveClick()}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faThumbsUp} title={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })} />\r\n                                                                </Nav.Link>\r\n                                                                {/* {this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== TemplateType.Masters ? */}\r\n                                                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREDISPLAYFIELDS\" })}\r\n                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                        onClick={() => this.openFieldConfiguration(approveId, \"configure\")}\r\n                                                                    >\r\n                                                                        <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREDISPLAYFIELDS\" })} />\r\n                                                                    </Nav.Link>\r\n                                                                     {/* : \"\"} */}\r\n                                                                {this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== TemplateType.Masters ?\r\n                                                                    <><Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREEDITFIELDS\" })}\r\n                                                                            data-for=\"tooltip_list_wrap\"\r\n                                                                            onClick={() => this.editFieldConfiguration(approveId)}\r\n                                                                        > \r\n                                                                            <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREEDITFIELDS\" })} />\r\n                                                                    </Nav.Link>\r\n                                                                    {this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true ?\r\n                                                                        <>\r\n                                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                                        hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\" })}\r\n                                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                                        onClick={() => this.openFieldConfiguration(approveId, 'configuresubsample')}\r\n                                                                                    > \r\n                                                                                        <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\" })} />\r\n                                                                            </Nav.Link>\r\n                                                                            {/* <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                                    hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURSUBSAMPLEEEDITFIELDS\" })}\r\n                                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                                    onClick={() => this.editFieldConfiguration(approveId)}\r\n                                                                                > \r\n                                                                                    <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGURSUBSAMPLEEEDITFIELDS\" })} />\r\n                                                                            </Nav.Link> */}\r\n                                                                        </>\r\n                                                                    :\"\"}\r\n                                                                    </>\r\n                                                                : \"\"}\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                    // onClick={() => this.ConfirmDelete(this.state.approveId)}>\r\n                                                                    onClick={() => this.ConfirmDelete()}>\r\n                                                                    <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                </Nav.Link>\r\n                                                            </div>\r\n\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                {this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n                                                this.props.Login.masterData.selectedDesignTemplateMapping.nformcode > 0 &&\r\n                                                <Row>\r\n                                                    <Col md={6}>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id=\"IDS_MODULENAME\" message=\"Module Name\" /></FormLabel>\r\n                                                        <ReadOnlyText>   { this.props.Login.masterData.selectedDesignTemplateMapping.smodulename}\r\n                                                        </ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                   \r\n                                                    </Col>\r\n                                                    <Col md={6}>\r\n                                                        <FormLabel><FormattedMessage id=\"IDS_FORMNAME\" message=\"Form Name\" /></FormLabel>\r\n                                                        <ReadOnlyText>   \r\n                                                                { this.props.Login.masterData.selectedDesignTemplateMapping.sformname}\r\n                                                        </ReadOnlyText>\r\n                                                   \r\n                                                    </Col>\r\n                                                </Row>}\r\n                                                <Card>\r\n                                                    <Card.Header><FormattedMessage id=\"IDS_TEMPLATE\" message=\"Template\"/></Card.Header>\r\n                                                    <Card.Body>   \r\n                                                    {\r\n                                                        Layout ?\r\n                                                            Layout.map((item) =>\r\n                                                                <Row>\r\n                                                                    {item.children.length > 0 ?\r\n                                                                        item.children.map((column) =>\r\n                                                                            <Col md={12 / item.children.length}>\r\n                                                                                {\r\n                                                                                    column.children.map((component) => {\r\n                                                                                        return (\r\n                                                                                            component.hasOwnProperty(\"children\") ?\r\n                                                                                                <Row>\r\n                                                                                                    {component.children.map(componentrow =>\r\n                                                                                                        <Col md={12 / componentrow.length}>\r\n                                                                                                            <FormGroup>\r\n                                                                                                                <FormLabel>{componentrow.label}</FormLabel>\r\n                                                                                                                <ReadOnlyText>{\"-\"}</ReadOnlyText>\r\n                                                                                                            </FormGroup>\r\n                                                                                                        </Col>\r\n                                                                                                    )\r\n                                                                                                    }\r\n                                                                                                </Row>\r\n                                                                                                :\r\n                                                                                                <FormGroup>\r\n                                                                                                    <FormLabel>{component.label}</FormLabel>\r\n                                                                                                    <ReadOnlyText> {\"-\"}</ReadOnlyText>\r\n                                                                                                </FormGroup>\r\n                                                                                        )\r\n                                                                                    })\r\n                                                                                }\r\n\r\n                                                                            </Col>\r\n                                                                        )\r\n                                                                        : \"\"}\r\n                                                                </Row>\r\n                                                            )\r\n                                                            :\r\n                                                            \"\"\r\n                                                    }\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                            </Card.Body>\r\n\r\n                                        </>\r\n                                        : \"\"\r\n                                    }\r\n                                </Card>\r\n                            </ContentPanel>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n\r\n\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        size={(this.props.Login.operation === 'configure' \r\n                                || this.props.Login.operation === 'configuresubsample' )? \"xl\" : \"lg\"}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={(this.props.Login.operation === 'configure' \r\n                                            || this.props.Login.operation === 'configuresubsample' \r\n                                            || this.props.Login.operation === 'configureedit') ? [] : mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' ?\r\n                                <ConfigureScreenFields\r\n                                    designData={this.props.Login.designData || {}}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === TemplateType.Masters ?\r\n                                        this.props.Login.dataResult ||  []:\r\n                                        this.props.Login.dataResult || {}}\r\n                                    onChangeToggle={this.onChangeToggle}\r\n                                    approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\r\n                                    selectedTemplateType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                />\r\n                                : this.props.Login.operation === 'configureedit' ?\r\n                                <ConfigureEditFields\r\n                                    designData={this.props.Login.editFieldDesignData || {}}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === TemplateType.Masters ?\r\n                                        this.props.Login.editFieldDataResult ||  []:\r\n                                        this.props.Login.editFieldDataResult || {}}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                   // onChangeToggle={this.onChangeToggle}\r\n                                    onComboChange={this.onConfigureComboChange}\r\n                                   // approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\r\n                                    selectedTemplateType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                />\r\n                                : \r\n                                this.state.showSynonym ?\r\n                                <AddSynonym\r\n                                    selectedFieldRecord={this.state.selectedRecord}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    languages={this.props.Login.languageList || []}\r\n                                    fieldName=\"nmodulecode\"\r\n                                />\r\n                                :<AddDesignTemplateMapping\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    handleDateChange={this.handleDateChange}\r\n                                    formatMessage={this.props.intl.formatMessage}\r\n                                    designtemplatemappingList={this.props.Login.designtemplatemappingList}\r\n                                    subSampleTemplateList={this.props.Login.subSampleTemplateList}\r\n                                    selectedDesignTemplateMapping={this.props.Login.masterData.selectedDesignTemplateMapping || {}}\r\n                                    operation={this.props.Login.operation}\r\n                                    userLogged={this.props.Login.userLogged}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    nformcode={this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1}\r\n                                    needSubSample={this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false}\r\n                                    designTemplateQualisModule={this.props.Login.designTemplateQualisModule}\r\n                                    language={this.props.Login.language}\r\n                                    moduleTypeArray={this.state.moduleTypeArray || []}\r\n                               \r\n                                 />}\r\n                    />\r\n                }\r\n\r\n            </>\r\n        );\r\n    }\r\n    // onFilterSubmit = () => {\r\n    //     this.reloadData()\r\n    // }\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\r\n            nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\r\n            nsampletypecode: this.props.Login.masterData.realSampleValue.value,\r\n            nformcode: this.props.Login.masterData.realFormValue ? this.props.Login.masterData[\"realFormValue\"].value : -1\r\n        };\r\n\r\n        let inputParam = { masterData: this.props.Login.masterData, inputData };\r\n        this.props.reloadDesignTemplateMapping(inputParam);\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false;\r\n\r\n        let { selectedRecord, userRoleControlRights, controlMap,\r\n            listSampletype, listRegistrationType, listRegistrationSubType, listForms } = this.state;\r\n\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]\r\n                    && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                updateState = true;\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord\r\n        }\r\n\r\n        const selectedInput = {};\r\n        let Taglstsampletype;\r\n        let TaglistRegistrationType;\r\n        let TaglistRegistrationSubType;\r\n        let ListFormsMap;\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            updateState = true;\r\n            if (this.props.Login.masterData.SampleTypes) {\r\n                Taglstsampletype = constructOptionList(this.props.Login.masterData.SampleTypes || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"undefined\", undefined);\r\n                listSampletype = Taglstsampletype.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.registrationTypes) {\r\n                TaglistRegistrationType = constructOptionList(this.props.Login.masterData.registrationTypes || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, undefined);\r\n                listRegistrationType = TaglistRegistrationType.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.registrationSubTypes) {\r\n                TaglistRegistrationSubType = constructOptionList(this.props.Login.masterData.registrationSubTypes || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", undefined);\r\n                listRegistrationSubType = TaglistRegistrationSubType.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.qualisforms) {\r\n                ListFormsMap = constructOptionList(this.props.Login.masterData.qualisforms || [], \"nformcode\", \"sdisplayname\", undefined, undefined, undefined);\r\n                listForms = ListFormsMap.get(\"OptionList\");\r\n            }          \r\n        }\r\n\r\n        if (updateState) {\r\n            this.setState({\r\n                selectedRecord, controlMap, userRoleControlRights,\r\n                listSampletype, listRegistrationType, listRegistrationSubType,\r\n                selectedInput, listForms\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: this.props.Login.masterData.defaultsampletype.value === TemplateType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value || -1 : -1),\r\n            nregsubtypecode: this.props.Login.masterData.defaultsampletype.value === TemplateType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value || -1 : -1),\r\n            nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\r\n            nformcode: this.props.Login.masterData.defaultform ? this.props.Login.masterData.defaultform.value || -1 : -1\r\n\r\n        };\r\n        let masterData = {\r\n            ...this.props.Login.masterData,\r\n            realSampleValue: this.props.Login.masterData.defaultsampletype,\r\n            realFormValue: this.props.Login.masterData.defaultform,\r\n            realRegTypeValue: this.props.Login.masterData.defaultregtype,\r\n            realRegSubTypeValue: this.props.Login.masterData.defaultregsubtype\r\n        }\r\n        let inputParam = { masterData, inputData };\r\n        this.props.getTMPFilterSubmit(inputParam);\r\n    }\r\n\r\n    onApproveClick = () => {\r\n        if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus !== transactionStatus.RETIRED) {\r\n\r\n            const ncontrolCode = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode\r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            let postParam = undefined;\r\n            inputData[\"designtemplatemapping\"] = { \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\" };\r\n            inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\r\n            postParam = { inputListName: \"DesignTemplateMapping\", selectedObject: \"selectedDesignTemplateMapping\", primaryKeyField: \"ndesigntemplatemappingcode\" };\r\n\r\n            const inputParam = {\r\n                inputData: {\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n\r\n                },\r\n                classUrl: 'designtemplatemapping',\r\n                methodUrl: \"DesignTemplateMapping\",\r\n                inputData: inputData,\r\n                operation: \"approve\", postParam\r\n            }\r\n            let saveType;\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n            if (esignNeeded) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"approve\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n\r\n        }\r\n        else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_TEMPLATERETIRED\" }));\r\n        }\r\n    }\r\n\r\n    ConfirmDelete = () => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteTemplate());\r\n    }\r\n\r\n    deleteTemplate = () => {\r\n        if ((this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT)) {\r\n            const ncontrolCode = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode\r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            let postParam = undefined;\r\n            inputData[\"designtemplatemapping\"] = { \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\" };\r\n            inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\r\n            postParam = { inputListName: \"DesignTemplateMapping\", selectedObject: \"selectedDesignTemplateMapping\", primaryKeyField: \"ndesigntemplatemappingcode\" };\r\n\r\n\r\n            const inputParam = {\r\n                inputData: {\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n\r\n                },\r\n                classUrl: 'designtemplatemapping',\r\n                methodUrl: \"DesignTemplateMapping\",\r\n                inputData: inputData,\r\n                operation: \"delete\", postParam\r\n            }\r\n            let saveType;\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n            if (esignNeeded) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"delete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n\r\n        }\r\n        else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTODELETE\" }));\r\n        }\r\n    }\r\n\r\n    openFieldConfiguration = (controlCode, operation) => {\r\n        let openModal = true;\r\n        //let operation = 'configure';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n         let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                userinfo: this.props.Login.userInfo,\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== TemplateType.Masters){\r\n            inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n         }\r\n        inputParam[\"TemplateType\"] =  this.props.Login.masterData.realSampleValue.value;\r\n             \r\n        this.props.getMappedFieldProps(inputParam)\r\n    }\r\n\r\n    editFieldConfiguration = (controlCode, operation) => {\r\n        \r\n        //console.log(\"edit config:\", this.props.Login);\r\n       // let operation = 'configureedit';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n         let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                nregtypecode: this.props.Login.masterData.defaultregtype.value,  \r\n                nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,                 \r\n                userinfo: this.props.Login.userInfo,\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        // if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== TemplateType.Masters){\r\n        //     inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n        //  }\r\n        inputParam[\"TemplateType\"] =  this.props.Login.masterData.realSampleValue.value;\r\n             \r\n        this.props.editFieldConfigService(inputParam)\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"approve\"\r\n                || this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;;\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onConfigureComboChange = (comboData, formCode,item) => {\r\n        const fieldName = item.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[formCode]={... selectedRecord[formCode],[fieldName] :comboData};\r\n\r\n        this.setState({ selectedRecord });\r\n\r\n        // let designData = this.props.Login.editFieldDesignData;\r\n        // let dataResult = this.props.Login.editFieldDataResult;\r\n        // if (formCode === undefined){\r\n        //     dataResult[dataIndex][field] = event.target.checked;\r\n        //     if (event.target.checked) {\r\n        //         designData[field].splice(dataIndex, 0, dataItem.realData)\r\n               \r\n        //     } else {\r\n        //         designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n        //     }\r\n        // }\r\n        // else{\r\n        //     dataResult[formCode][\"sampleeditable\"] = comboData;\r\n        //     if (event.target.checked) {\r\n        //         if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\r\n        //             return toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDS\" }))\r\n        //         } else {\r\n        //             designData[formCode][field].splice(dataIndex, 0, dataItem.realData)\r\n        //         }\r\n        //         if (field === 'sampledisplayfields') {\r\n        //             designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label)\r\n        //         }\r\n        //     } else {\r\n        //         if (field === 'sampledisplayfields') {\r\n        //             designData[formCode]['samplesearchfields'].splice(designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.label), 1)\r\n        //         }\r\n        //         designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n        //     }\r\n        // }\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { designData, dataResult }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    getGridJsondata = (templatedata) => {\r\n        let gridItem = [];\r\n        let gridMoreItem = [];\r\n        let masterdatefields = [];\r\n        let masterdateconstraints = [];\r\n        let masteruniquevalidation = [];\r\n        let editable = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n        let templatePrimaryKey = \"\";\r\n        let mastertemplatefields = [];\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map((component, index) => {\r\n                    //console.log(\"component2:\", component);\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n                           // console.log(\"component row2:\", componentRow);\r\n                            componentRow.unique && masteruniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\r\n                            \r\n                            let filterinputtype = \"text\";\r\n                            let comboDataInputObject =  {};\r\n                           \r\n                            if (componentRow.inputtype === 'combo') {\r\n\r\n                                comboDataInputObject =  { \"predefinedtablename\": componentRow.source,\r\n                                                        \"predefinedvaluemember\": componentRow.valuemember,\r\n                                                        \"predefineddisplaymember\": componentRow.displaymember,\r\n                                                        \"predefinedismultilingual\": true,\r\n                                                        \"predefinedconditionalString\": componentRow.valuemember + \" > 0 \"\r\n                                                        };\r\n                                jnumericcolumns.push({\r\n                                    \"columnname\": componentRow.displaymember,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"foriegntablePK\": componentRow.label,\r\n                                    // \"ismultilingual\": true,\r\n                                    // \"conditionstring\": \" and nformcode in (\"+componentRow.table.item.nformcode+\") \",\r\n                                    \"tablecolumnname\": componentRow.valuemember,\r\n                                    \"foriegntablename\": componentRow.source,\r\n                                     ...comboDataInputObject\r\n                                })\r\n                                filterinputtype=\"predefinednumeric\";\r\n                            }\r\n                            // samplesearchfields.push(componentRow.label)\r\n                            if (componentRow.inputtype === 'date') {\r\n                                filterinputtype =\"date\";\r\n                                masterdatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                masterdateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\r\n                            }\r\n                            if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\r\n                                filterinputtype =\"numeric\";\r\n                            }\r\n\r\n                            jdynamiccolumns.push({\r\n                                default: componentRow.unique ? true :false,\r\n                                filterinputtype,\r\n                                columnname: componentRow.label,\r\n                                displayname: componentRow.displayname,\r\n                                ...comboDataInputObject\r\n                            })\r\n                            // displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            // componentRow.templatemandatory && listItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            }\r\n                            else {\r\n                                gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            }\r\n                            mastertemplatefields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            if (componentRow.templatemandatory) {\r\n                                editable.push({ label: componentRow.label, editableuntill: [] })\r\n                            }\r\n                            else{\r\n                                editable.push({ label: componentRow.label, editableuntill: [transactionStatus.DRAFT] })\r\n                            }\r\n                            \r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        //console.log(\"component2:\", component);\r\n                        component.unique && masteruniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\r\n                      \r\n                         \r\n                        let filterinputtype = \"text\";\r\n                        let comboDataInputObject =  {};\r\n\r\n                        mastertemplatefields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                          \r\n                        if (component.inputtype === 'combo') {\r\n                            filterinputtype=\"predefinednumeric\";\r\n                            comboDataInputObject =  { \"predefinedtablename\": component.source,\r\n                                                    \"predefinedvaluemember\": component.valuemember,\r\n                                                    \"predefineddisplaymember\": component.displaymember,\r\n                                                    \"predefinedismultilingual\": true,\r\n                                                    \"predefinedconditionalString\":  component.valuemember + \" > 0\"\r\n                                                    };\r\n                            jnumericcolumns.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"foriegntablePK\": component.label,\r\n                                // \"ismultilingual\": true,\r\n                                \"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\r\n                                \"tablecolumnname\": component.column.value,\r\n                                \"foriegntablename\": \"dynamicmaster\",\r\n                                ...comboDataInputObject\r\n                            })\r\n                        }\r\n                        // samplesearchfields.push(component.label)\r\n                        if (component.inputtype === 'date') {\r\n                            filterinputtype =\"date\";\r\n                            masterdatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            masterdateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\r\n                        }\r\n                        if (component.inputtype === 'numeric' || component.inputtype === 'radio') {\r\n                            filterinputtype =\"numeric\";\r\n                        }\r\n\r\n                        jdynamiccolumns.push({\r\n                            default: component.unique ? true :false,\r\n                            columnname: component.label,\r\n                            displayname: component.displayname,\r\n                            filterinputtype,\r\n                            ...comboDataInputObject\r\n                        });\r\n                        // displayFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        // component.templatemandatory && listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        if (component.mandatory || component.templatemandatory) {\r\n                            gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        } else {\r\n                            gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n                        }\r\n                        if (component.templatemandatory) {\r\n                            editable.push({ label: component.label, editableuntill: [] })\r\n                        }\r\n                        else{\r\n                            editable.push({ label: component.label, editableuntill: [transactionStatus.DRAFT] })\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                })\r\n            })\r\n        );\r\n        let jsondata = {\r\n            griditem:gridItem,\r\n            gridmoreitem:gridMoreItem,\r\n            masterdatefields,\r\n            masterdateconstraints,\r\n            masteruniquevalidation,\r\n            editable,\r\n            mastertemplatefields\r\n        }\r\n\r\n       // console.log(\"dynamiccolumns:\", jdynamiccolumns);\r\n        return { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey };\r\n    }\r\n\r\n    getJsondata = (templatedata) => {\r\n        let displayFields = []\r\n        let listItem = []\r\n        let gridItem = []\r\n        let gridMoreItem = []\r\n        let editable = []\r\n        let subsampleeditable = [];\r\n        let subsamplelistitem = [];\r\n        let sampledatefields = [{ [designProperties.VALUE]: 'dregdate', dateonly: false }];\r\n        let sampledateconstraints = [];\r\n        let subsampledatefields = [];\r\n        let subsampledateconstraints = [];\r\n        let samplesearchfields = [\"dregdate\", \"sarno\", \"stransdisplaystatus\"];\r\n        let subsamplesearchfields = [\"sarno\", \"ssamplearno\", \"stransdisplaystatus\"];\r\n        let sampletemplatefields = [];\r\n        let subsampletemplatefields = [];\r\n        let sampleuniquevalidation = [];\r\n        let subsampleuniquevalidation = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n       // const staticSearchFields = [\"dregdate\", \"sarno\", \"stransdisplaystatus\"];\r\n        // const sampleStaticFields = [\r\n        //     { [designProperties.LABEL]: { \"en-US\": \"Reg Date\",\"Ko-KR\":\"Reg Date\",\"ru-RU\":\"Дата регистрации\",\"tg-TG\":\"Санаи бақайдгирӣ\" }, \r\n        //       [designProperties.VALUE]: 'dregdate' },\r\n        //     { [designProperties.LABEL]: { \"en-US\": \"Ar No.\",\"Ko-KR\":\"Reg Date\",\"ru-RU\":\"Ар №\",\"tg-TG\":\"Ар №\" }, \r\n        //       [designProperties.VALUE]: 'sarno' },\r\n        //     { [designProperties.LABEL]: { \"en-US\": \"Transaction Status\",\"Ko-KR\":\"Transaction Status\",\"ru-RU\":\"Статус транзакции\",\"tg-TG\":\"Ҳолати транзаксия\" }, \r\n        //       [designProperties.VALUE]: 'stransdisplaystatus' }\r\n        //     ]\r\n        let testdatefields = [{ [designProperties.VALUE]: 'dtransactiondate', dateonly: false }];\r\n        //console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\r\n        this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.item.jsondata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map(component => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n                            componentRow.unique && subsampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            subsamplesearchfields.push(componentRow.label);\r\n                            //subsampleeditable.push({ label: componentRow.label, editableuntill: [17] })\r\n                            subsampletemplatefields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            if(component.readonly)\r\n                                subsampleeditable.push({ label: componentRow.label, editableuntill: [] })\r\n                            else\r\n                                subsampleeditable.push({ label: componentRow.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n                       \r\n                            if (componentRow.inputtype === 'date') {\r\n                                subsampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                subsampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\r\n                            }\r\n                            subsamplelistitem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                        }\r\n                        )\r\n                    } else {\r\n                        \r\n                        component.unique && subsampleuniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        subsamplesearchfields.push(component.label);\r\n                       // subsampleeditable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n                        subsampletemplatefields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                            \r\n                        if(component.readonly)\r\n                            subsampleeditable.push({ label: component.label, editableuntill: [] })\r\n                        else\r\n                            subsampleeditable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n                       \r\n                       \r\n                       \r\n                        if (component.inputtype === 'date') {\r\n                            subsampledatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            subsampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\r\n                        }\r\n                        subsamplelistitem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n                    }\r\n                })\r\n            })\r\n        )\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map(component => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        // let combinedField = [];\r\n                        component.children.map(componentRow => {\r\n                            // combinedField.push(componentRow.label)\r\n                            jdynamiccolumns.push({\r\n                                columnname: componentRow.label,\r\n                                displayname: componentRow.displayname\r\n                            })\r\n                            if (componentRow.hasOwnProperty('child')) {\r\n                                componentRow.child.map(childData => {\r\n                                    jnumericcolumns.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"foriegntablePK\": componentRow.label,\r\n                                        // \"ismultilingual\": true,\r\n                                        // \"conditionstring\": \" and nformcode in (140) \",\r\n                                        \"tablecolumnname\": childData.tablecolumnname,\r\n                                        \"foriegntablename\": \"dynamicmaster\"\r\n                                    })\r\n                                })\r\n                            }\r\n                            componentRow.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            samplesearchfields.push(componentRow.label)\r\n                            sampletemplatefields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            if (componentRow.inputtype === 'date') {\r\n                                sampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                sampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\r\n                            }\r\n                            displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            componentRow.templatemandatory && listItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            }\r\n                            else {\r\n                                gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            }\r\n                            if (componentRow.templatemandatory) {\r\n                                editable.push({ label: componentRow.label, editableuntill: [] })\r\n                            }\r\n                            else{\r\n                                if(componentRow.readonly)\r\n                                    editable.push({ label: componentRow.label, editableuntill: [] })\r\n                                else\r\n                                    editable.push({ label: componentRow.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n                       \r\n                            }\r\n                            return null;\r\n                        })\r\n                        // let fieldSet = combinedField.join(\"&\")\r\n                        // displayFields.push(fieldSet);\r\n                        // componentRow.templatemandatory && listItem.push(fieldSet)\r\n                        // gridMoreItem.push(fieldSet);\r\n                    } else {\r\n                        jdynamiccolumns.push({\r\n                            columnname: component.label,\r\n                            displayname: component.displayname\r\n                        });\r\n                        if (component.hasOwnProperty('child')) {\r\n                            component.child.map(childData => {\r\n                                jnumericcolumns.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"foriegntablePK\": component.label,\r\n                                    // \"ismultilingual\": true,\r\n                                    // \"conditionstring\": \" and nformcode in (140) \",\r\n                                    \"tablecolumnname\": childData.tablecolumnname,\r\n                                    \"foriegntablename\": \"dynamicmaster\"\r\n                                })\r\n                            })\r\n                        }\r\n                        component.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        samplesearchfields.push(component.label)\r\n                        sampletemplatefields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        if (component.inputtype === 'date') {\r\n                            sampledatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            sampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\r\n                        }\r\n                        displayFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                       // component.templatemandatory \r\n                        //&& listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        if (component.mandatory || component.templatemandatory) {\r\n                            gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                            listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, mandatory:true })\r\n                       \r\n                        } else {\r\n                            gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n                        }\r\n                        if (component.templatemandatory) {                         \r\n                             editable.push({ label: component.label, editableuntill: [] })\r\n                        }\r\n                        else{\r\n                              // editable.push({ label: component.label, editableuntill: [17] })\r\n                            if(component.readonly)\r\n                                editable.push({ label: component.label, editableuntill: [] })\r\n                            else\r\n                                editable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n                         \r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                })\r\n            }\r\n            )\r\n        )\r\n        displayFields.push({ [designProperties.LABEL]: { \"en-US\": \"Reg Date\",\"Ko-KR\":\"Reg Date\",\"ru-RU\":\"Дата регистрации\",\"tg-TG\":\"Санаи бақайдгирӣ\" }, \r\n                             [designProperties.VALUE]: 'dregdate' });\r\n\r\n        //samplesearchfields.push(...staticSearchFields);\r\n\r\n        //console.log(\"reg sub type:\", this.props.Login);\r\n        let obj = {\r\n            sampledisplayfields: displayFields,\r\n            samplelistitem: listItem,\r\n            samplegriditem: gridItem,\r\n            samplegridmoreitem: gridMoreItem,\r\n            subsamplelistitem,\r\n            sampledatefields,\r\n            subsampledatefields,\r\n            samplesearchfields,\r\n            subsamplesearchfields,\r\n            testdatefields,\r\n            sampledateconstraints,\r\n            subsampledateconstraints,\r\n            sampleuniquevalidation,\r\n            subsampleuniquevalidation,\r\n            ...this.props.Login.testListFields\r\n        }\r\n\r\n       // console.log(\"Template mapping obj:\", obj);\r\n        let jsondata = {\r\n            sampletemplatefields,\r\n            subsampletemplatefields,//: subsamplesearchfields,\r\n            [formCode.SAMPLEREGISTRATION]: {\r\n                ...obj,\r\n                sampleeditable: editable,\r\n                subsampleeditable\r\n            },\r\n            [formCode.RESULTENTRY]: {\r\n                ...obj,\r\n            },\r\n            [formCode.APPROVAL]: {\r\n                ...obj,\r\n            },\r\n            [formCode.JOBALLOCATION]: {\r\n                ...obj,\r\n            },\r\n            [formCode.MYJOBS]: {\r\n                ...obj,\r\n            },\r\n            [formCode.TESTWISEMYJOBS]:{\r\n                ...obj,\r\n            }\r\n\r\n        }\r\n        return jsondata;\r\n    }\r\n\r\n    onChangeToggle = (event, dataItem, field, dataIndex, formCode) => {\r\n        let designData = this.props.Login.designData;\r\n        let dataResult = this.props.Login.dataResult;\r\n        if (formCode === undefined){\r\n            dataResult[dataIndex][field] = event.target.checked;\r\n            if (event.target.checked) {\r\n                designData[field].splice(dataIndex, 0, dataItem.realData)\r\n               \r\n            } else {\r\n                designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n            }\r\n        }\r\n        else{\r\n            //dataResult[formCode][dataIndex][field] = event.target.checked;\r\n            if (event.target.checked) {\r\n                if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDS\" }))\r\n                } else {\r\n                    dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                    designData[formCode][field].splice(dataIndex, 0, dataItem.realData)\r\n                }\r\n                if (field === 'sampledisplayfields') {\r\n                    dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                    designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label)\r\n                }\r\n            } else {\r\n                if (field === 'sampledisplayfields') {\r\n                    dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                    designData[formCode]['samplesearchfields'].splice(designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.label), 1)\r\n                }\r\n                dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n            }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { designData, dataResult }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        //console.log(\"save:\", this.state.selectedRecord);\r\n        //console.log(\"data:\", this.props.Login.editFieldDesignData)\r\n        let inputData = [];\r\n\r\n        let operation = this.props.Login.operation;\r\n\r\n       \r\n        if (operation === 'configure' || operation === 'configuresubsample') {\r\n            inputData = {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                    jsondataobj: this.props.Login.designData\r\n                },\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n            operation ='configure';\r\n        } \r\n        else  if (operation === 'configureedit') {\r\n\r\n            let designData = this.props.Login.editFieldDesignData;\r\n            let formCodeArray = Object.keys(this.state.selectedRecord);\r\n          \r\n            formCodeArray.forEach(formCode =>{\r\n                const data = this.state.selectedRecord[formCode];\r\n                const editableData =  designData[formCode]['sampleeditable'];;\r\n                Object.keys(data).map(label=>{                    \r\n                    const editableuntil = [];\r\n                    data[label].map(statusItem =>\r\n                        editableuntil.push(statusItem.value)\r\n                    )\r\n                    const index = editableData.findIndex(item=>item.label === label);\r\n                    if (index === -1){\r\n                        editableData.push({\"label\":label, \"editableuntill\":editableuntil});\r\n                    }\r\n                    else\r\n                    {\r\n                        editableData[index] = {\"label\":label, \"editableuntill\":editableuntil};\r\n                    }\r\n                    //designData[formCode]['sampleeditable'].push({\"label\":label, \"editableuntill\":editableuntil});\r\n                })\r\n              \r\n            })\r\n\r\n            inputData = {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                    jsondataobj: designData\r\n                },\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n\r\n            operation = 'configure';\r\n        } \r\n        else {\r\n            let { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey } = this.props.Login.masterData.realSampleValue.value === TemplateType.Masters ?\r\n                this.getGridJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata)\r\n                : {}\r\n            inputData = {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                \"ncontrolcode\": this.props.Login.ncontrolCode,\r\n                \"nreactregtemplatecode\": this.state.selectedRecord.nreactregtemplatecode.value,\r\n                \"nsampletypecode\": this.props.Login.masterData.realSampleValue.value,\r\n                \"nregtypecode\": this.props.Login.masterData.realSampleValue.value === TemplateType.Masters ? -1 : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\r\n                \"nregsubtypecode\": this.props.Login.masterData.realSampleValue.value === TemplateType.Masters ? -1 : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\r\n                \"nformcode\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\r\n                \"nsubsampletemplatecode\": this.state.selectedRecord.nsubsampletemplatecode ? this.state.selectedRecord.nsubsampletemplatecode.value : -1,\r\n                \"jsondataobj\": this.props.Login.masterData.realSampleValue.value === TemplateType.Masters ? jsondata\r\n                    : this.getJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata),\r\n            }\r\n            inputData[\"designtemplatemapping\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n            if (this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.value === -2) {\r\n                let qf_jsonData = {sdisplayname: {}};\r\n                let qbt_jsonData = {tablename: {} };\r\n               \r\n                this.props.Login.languageList.map(lang => {\r\n                    qf_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord.sformname;\r\n                    qbt_jsonData['tablename'][lang.value] = this.state.selectedRecord.sformname\r\n                })\r\n\r\n                let qm_jsonData = {sdisplayname: {}};\r\n               \r\n                let nmodulecode = 0;\r\n                let smoduledisplayname = \"\";\r\n                // if (typeof this.state.selectedRecord[\"nmodulecode\"].value === \"string\" )\r\n                // {\r\n                //     smoduledisplayname = this.state.selectedRecord[\"nmodulecode\"].value;\r\n                //     this.props.Login.languageList.map(lang => {\r\n                //         qm_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord[\"nmodulecode\"].value;\r\n                //     })\r\n                // }\r\n                // else{\r\n                //     nmodulecode = this.state.selectedRecord[\"nmodulecode\"].value;\r\n                // }\r\n                if (this.state.selectedRecord[\"nnewmodule\"].value === transactionStatus.YES){\r\n                    smoduledisplayname = this.state.selectedRecord[\"nmodulecode\"];\r\n                    this.props.Login.languageList.map(lang => {\r\n                        qm_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord[\"nmodulecode\"];\r\n                    })\r\n                }\r\n                else{\r\n                    nmodulecode = this.state.selectedRecord[\"nmodulecode\"].value;\r\n                }\r\n                inputData = {\r\n                    ...inputData,\r\n                    sformname: this.state.selectedRecord.sformname,\r\n                    nmodulecode ,\r\n                    smoduledisplayname,\r\n                    qm_jsonData,\r\n                    qf_jsonData,\r\n                    qbt_jsonData,\r\n                    sprimarykeyname: templatePrimaryKey,\r\n                    jdynamiccolumns,\r\n                    jnumericcolumns\r\n                }\r\n            }\r\n            // this.designtemplatemappingFieldList.map(item => {\r\n            //     return inputData[\"designtemplatemapping\"][item] = this.state.selectedRecord[item]\r\n            // });\r\n        }\r\n        let postParam = undefined;\r\n        const inputParam = {\r\n            classUrl: \"designtemplatemapping\",\r\n            methodUrl: \"DesignTemplateMapping\",\r\n            inputData: inputData,\r\n            operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (\r\n            showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential,editFieldConfigService,\r\n    updateStore, getDesignTemplateMappingDetail, getMappedFieldProps,\r\n    getDesignTemplateMappingComboService, filterColumnData, reloadDesignTemplateMapping, getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit\r\n})(injectIntl(DesignTemplateMapping));\r\n\r\n"]},"metadata":{},"sourceType":"module"}