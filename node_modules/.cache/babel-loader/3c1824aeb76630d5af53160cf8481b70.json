{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\competencemanagement\\\\trainingupdate\\\\TrainingUpdate.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { connect } from 'react-redux'; // import rsapi from '../../rsapi';\n\nimport { callService, crudMaster, getTrainingUpdate, addTest, updateStore, getTestDetails, formulaChangeFunction, filterColumnData, addParameter, validateEsignCredential, addCodedResult, addParameterSpecification, getAvailableData, addFormula, changeTechniqueFilter, addTestFile, viewAttachment } from '../../../actions';\nimport TechniqueFilter from './TechniqueFilter'; // import TestView from './TestView';\n\nimport { injectIntl } from 'react-intl';\nimport { toast } from 'react-toastify'; // import AddParameter from './AddParameter'\n// import AddTest from '../../pages/testmanagement/AddTest'\n// import SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\n\nimport { getControlMap, constructOptionList, convertDateValuetoString, showEsign, formatInputDate } from '../../../components/CommonScript';\nimport ListMaster from '../../../components/list-master/list-master.component'; // import { faTrashAlt, faPencilAlt, faCopy, faCheck } from '@fortawesome/free-solid-svg-icons';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';/\n\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../../components/App.styles';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes'; // import Esign from '../audittrail/Esign';\n// import { parameterType, transactionStatus } from '../../components/Enumeration';\n\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component'; // import BreadcrumbComponent from '../../components/Breadcrumb.Component';\n// import { Affix } from 'rsuite';\n\nimport ReactTooltip from 'react-tooltip';\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\nimport { Affix } from 'rsuite';\nimport TrainingUpdateChildTab from './TrainingUpdateChildTab';\nimport { ProductList } from '../../product/product.styled';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckCircle } from '@fortawesome/free-regular-svg-icons';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass TrainingUpdate extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.completeTraining = (version, ncontrolCode) => {\n      let inputData = [];\n      let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      let fromDate = obj.fromDate;\n      let toDate = obj.toDate;\n      inputData[\"fromDate\"] = fromDate;\n      inputData[\"toDate\"] = toDate;\n      inputData[\"userinfo\"] = this.props.Login.userInfo; //inputData[\"ntrainingcode\"]=  this.props.Login.masterData.TechniqueList[\"ntrainingcode\"];\n\n      inputData[\"ntechniquecode\"] = this.props.Login.masterData.SelectedTrainingUpdate[\"ntechniquecode\"];\n      inputData[\"trainingupdate\"] = {\n        //\"nusercode\": version.nusercode,\n        //\"nparticipantcode\": version.nparticipantcode,\n        \"ntrainingcode\": this.props.Login.masterData.SelectedTrainingUpdate.ntrainingcode,\n        \"ntechniquecode\": this.props.Login.masterData.selectedTechinque.ntechniquecode,\n        \"ntransactionstatus\": this.props.Login.masterData.SelectedTrainingUpdate.ntransactionstatus //\"ncertifiedstatus\" : version.ncertifiedstatus,\n        // \"ncompetencystatus\" : version.ncompetencystatus,\n        //\"ntransactionstatus\" : version.ntransactionstatus,\n        //ntechniquecode: this.props.Login.masterData.TechniqueList[\"ntechniquecode\"]\n\n      };\n      const postParam = {\n        inputListName: \"TechniqueList\",\n        selectedObject: \"SelectedTrainingUpdate\",\n        primaryKeyField: \"ntechniquecode\",\n        primaryKeyValue: this.props.Login.masterData.TechniqueList.ntechniquecode,\n        fetchUrl: \"trainingupdate/getTraningUpdateByTechnique\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        methodUrl: \"Training\",\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        postParam,\n        operation: \"complete\"\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            operation: \"complete\",\n            screenName: '',\n            id: 'TrainingUpdate'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData);\n      }\n    };\n\n    this.handlePageChange = event => {\n      this.setState({\n        skip: event.skip,\n        take: event.take\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        // case 1:\n        //     if (fieldName === \"sparametername\") {\n        //         selectedRecord[fieldName] = comboData;\n        //         selectedRecord[\"sparametersynonym\"] = comboData ? comboData.value : \"\";\n        //     } else {\n        //         selectedRecord[fieldName] = comboData;\n        //     }\n        //     this.setState({ selectedRecord });\n        //     break;\n        // case 2:\n        //     let item = comboData['item'];\n        //     let needUnit = true;\n        //     let needRoundingDigit = true;\n        //     let needCodedResult = true;\n        //     let needActualResult = true;\n        //     let npredefinedcode = transactionStatus.NO;\n        //     const parameterData = this.props.Login.parameterData;\n        //     if (item[\"nunit\"] === transactionStatus.YES) {\n        //         needUnit = false;\n        //         selectedRecord[\"nunitcode\"] = this.props.Login.parameterData.defaultUnit;\n        //     } else {\n        //         selectedRecord[\"nunitcode\"] = \"\";\n        //     }\n        //     if (item[\"nroundingdigit\"] === transactionStatus.YES) {\n        //         needRoundingDigit = false;\n        //     } else {\n        //         selectedRecord[\"nroundingdigits\"] = \"\";\n        //     }\n        //     if (item[\"npredefinedcode\"] === transactionStatus.YES) {\n        //         needCodedResult = false;\n        //         npredefinedcode = item[\"npredefinedcode\"];\n        //     } else {\n        //         selectedRecord[\"spredefinedname\"] = \"\";\n        //     }\n        //     if (item[\"ngrade\"] === transactionStatus.YES) {\n        //         needActualResult = false;\n        //         selectedRecord[\"ngradecode\"] = this.props.Login.parameterData.defaultGrade;\n        //     } else {\n        //         selectedRecord[\"ngradecode\"] = \"\";\n        //     }\n        //     selectedRecord[fieldName] = comboData;\n        //     const parameterInfo = {\n        //         typeName: DEFAULT_RETURN,\n        //         data: {\n        //             parameterData: {\n        //                 ...parameterData, needUnit, needRoundingDigit, needCodedResult, needActualResult, npredefinedcode\n        //             }, selectedRecord\n        //         }\n        //     }\n        //     this.props.updateStore(parameterInfo);\n        //     break;\n        case 3:\n          let nfilterTechnique = this.state.nfilterTechnique || {};\n          nfilterTechnique = comboData;\n          this.searchRef.current.value = \"\";\n          this.setState({\n            nfilterTechnique\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.reloadData1 = () => {\n      if (this.props.Login.masterData.selectedTechinque.ntechniquecode) {\n        let fromDate = this.props.Login.masterData.FromDate;\n        let toDate = this.props.Login.masterData.ToDate;\n        let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n        let inputParam = {\n          inputData: {\n            userinfo: this.props.Login.userInfo,\n            currentdate: formatInputDate(new Date(), true)\n          },\n          classUrl: \"trainingupdate\",\n          methodUrl: \"TrainingUpdate\",\n          userInfo: this.props.Login.userInfo,\n          displayName: \"IDS_TRAININGUPDATE\"\n        };\n        this.props.callService(inputParam); //, this.props.Login.masterData.filterTechnique,this.state.nfilterTechnique);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_TECHNIQUENOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.onFilterSubmit = () => {\n      this.reloadData(true);\n    };\n\n    this.reloadData = isFilterSubmit => {\n      this.searchRef.current.value = \"\"; // let obj = this.convertDatetoString(selectedRecord[\"fromdate\"] || (this.props.Login.masterData && this.props.Login.masterData.FromDate),\n      //     selectedRecord[\"todate\"] || (this.props.Login.masterData && this.props.Login.masterData.ToDate))\n\n      let fromDate = this.props.Login.masterData.FromDate;\n      let toDate = this.props.Login.masterData.ToDate;\n\n      if (isFilterSubmit) {\n        let selectedRecord = this.state.selectedRecord || {};\n\n        if (selectedRecord && selectedRecord[\"fromdate\"] !== undefined) {\n          fromDate = selectedRecord[\"fromdate\"];\n        }\n\n        if (selectedRecord && selectedRecord[\"todate\"] !== undefined) {\n          toDate = selectedRecord[\"todate\"];\n        }\n      } //let obj = this.convertDatetoString(fromDate, toDate); \n\n\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n\n      if (this.state.nfilterTechnique.value) {\n        let inputParam = {\n          inputData: {\n            \"userinfo\": this.props.Login.userInfo,\n            fromDate: obj.fromDate,\n            toDate: obj.toDate,\n            currentDate: null,\n            ntechniquecode: this.state.nfilterTechnique.value,\n            userinfo: this.props.Login.userInfo,\n            nfilterTechnique: this.state.nfilterTechnique //currentdate: isDateChange === true ? null : formatInputDate(new Date(), true)\n\n          },\n          classUrl: \"trainingupdate\",\n          methodUrl: \"TraningUpdateByTechnique\",\n          displayName: \"IDS_TRAININGCERTIFICATE\",\n          userInfo: this.props.Login.userInfo\n        };\n        this.props.changeTechniqueFilter(inputParam, this.props.Login.masterData.filterTechnique, this.state.nfilterTechnique);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_TECHNIQUENOTAVAILABLE\"\n        }));\n      } //this.props.callService(inputParam);\n      //this.props.changeTechniqueFilter(inputParam);\n\n    };\n\n    this.state = {\n      selectedRecord: {},\n      error: \"\",\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25\n    };\n    this.searchRef = React.createRef();\n    this.searchFieldList = [\"stechniquename\", \"strainingtopic\", \"strainername\"];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    this.confirmMessage = new ConfirmMessage();\n    const {\n      TechniqueList,\n      SelectedTrainingUpdate,\n      searchedData\n    } = this.props.Login.masterData;\n    const {\n      masterData,\n      userInfo,\n      testData,\n      parameterData,\n      otherTestData,\n      linkMaster,\n      editFiles\n    } = this.props.Login;\n    let obj = convertDateValuetoString(this.state.selectedRecord[\"fromdate\"] || this.props.Login.masterData && this.props.Login.masterData.FromDate, this.state.selectedRecord[\"todate\"] || this.props.Login.masterData && this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n    let fromDate = obj.fromDate;\n    let toDate = obj.toDate; // const addId = this.state.controlMap.has(\"AddTest\") && this.state.controlMap.get(\"AddTest\").ncontrolcode;\n    // const editId = this.state.controlMap.has(\"EditTest\") && this.state.controlMap.get(\"EditTest\").ncontrolcode;\n    // const deleteId = this.state.controlMap.has(\"DeleteTest\") && this.state.controlMap.get(\"DeleteTest\").ncontrolcode;\n    // const copyId = this.state.controlMap.has(\"CopyTest\") && this.state.controlMap.get(\"CopyTest\").ncontrolcode;\n\n    const filterParam = {\n      inputListName: \"TechniqueList\",\n      selectedObject: \"SelectedTrainingUpdate\",\n      primaryKeyField: \"ntrainingcode\",\n      fetchUrl: \"trainingupdate/getTrainingUpdateById\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      unchangeList: [\"FromDate\", \"ToDate\"],\n      searchFieldList: this.searchFieldList\n    }; // if (this.props.Login.openModal) {\n    //     this.mandatoryFields = this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord, this.props.Login.operation)\n    // }\n    // let breadCrumbData = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate, \n    //     this.props.Login.masterData && this.props.Login.masterData.ToDate,\n    //     this.props.Login.userInfo)       \n\n    this.props.Login.showAccordion = true;\n    let breadCrumbData = this.state.filterData || [];\n    const completeId = this.state.controlMap.has(\"CompleteTraining\") && this.state.controlMap.get(\"CompleteTraining\").ncontrolcode;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      masterData: masterData,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_TRAININGUPDATE\"\n      }),\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.TechniqueList,\n      getMasterDetail: TechniqueList => this.props.getTrainingUpdate(TechniqueList, userInfo, masterData),\n      selectedMaster: this.props.Login.masterData.SelectedTrainingUpdate,\n      primaryKeyField: \"ntrainingcode\",\n      mainField: \"stechniquename\",\n      firstField: \"strainingtopic\",\n      secondField: \"strainername\" //openModal={() => this.props.addTest(\"create\", SelectedTest, userInfo, addId, this.state.nfilterTestCategory)}\n      ,\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights //addId={addId}\n      ,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData1,\n      needAccordianFilter: false,\n      skip: this.state.skip,\n      take: this.state.take,\n      handlePageChange: this.handlePageChange,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      userInfo: this.props.Login.userInfo,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      filterComponent: [{\n        \"IDS_TRAININGUPDATEFILTER\": /*#__PURE__*/React.createElement(TechniqueFilter, {\n          selectedRecord: this.state.selectedRecord || {},\n          value: this.state.value || {},\n          handleDateChange: this.handleDateChange,\n          fromDate: fromDate,\n          toDate: toDate,\n          userInfo: this.props.Login.userInfo,\n          filterTechnique: this.state.filterTechnique || [],\n          nfilterTechnique: this.state.nfilterTechnique || {},\n          onComboChange: this.onComboChange,\n          onFilterChange: this.onFilterChange,\n          handleFilterDateChange: this.handleFilterDateChange,\n          FilterStatusValue: this.props.Login.masterData.FilterStatusValue || {},\n          FilterStatus: this.state.stateFilterStatus || [],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 25\n      }\n    }, SelectedTrainingUpdate && Object.values(SelectedTrainingUpdate).length > 0 ? /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 45\n      }\n    }, SelectedTrainingUpdate.stechniquename), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn btn-outlined ${SelectedTrainingUpdate.ntransactionstatus === 22 ? \"outline-success\" : \"outline-secondary\"} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 57\n      }\n    }, SelectedTrainingUpdate.ntransactionstatus === 22 && /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 114\n      }\n    }), SelectedTrainingUpdate.stransdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 52\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COMPLETETRAINING\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(completeId) === -1,\n      onClick: () => this.completeTraining(this.state.version, completeId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheckCircle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 65\n      }\n    }))))))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_VENUE\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 57\n      }\n    }, SelectedTrainingUpdate.strainingvenue))), /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TRAININGDATE\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 57\n      }\n    }, SelectedTrainingUpdate.strainingdate))), /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TRAININGTOPIC\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 57\n      }\n    }, SelectedTrainingUpdate.strainingtopic))), /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TRAINERNAME\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 57\n      }\n    }, SelectedTrainingUpdate.strainername)))), /*#__PURE__*/React.createElement(TrainingUpdateChildTab //formatMessage={this.props.intl.formatMessage}\n    , {\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      userInfo: this.props.Login.userInfo,\n      masterData: this.props.Login.masterData,\n      crudMaster: this.props.crudMaster,\n      errorCode: this.props.Login.errorCode,\n      masterStatus: this.props.Login.masterStatus,\n      openChildModal: this.props.Login.openChildModal //trainingDocument={this.props.Login.trainingDocument}\n      ,\n      participants: this.props.Login.participants,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.props.Login.selectedRecord //getSupplierCategoryComboDataService={this.props.getSupplierCategoryComboDataService}\n      //getMaterialCategoryComboDataService={this.props.getMaterialCategoryComboDataService}\n      //ncontrolCode={this.props.Login.ncontrolCode}\n      ,\n      userRoleControlRights: this.state.userRoleControlRights,\n      esignRights: this.props.Login.userRoleControlRights,\n      screenData: this.props.Login.screenData,\n      validateEsignCredential: this.props.validateEsignCredential,\n      loadEsign: this.props.Login.loadEsign,\n      controlMap: this.state.controlMap,\n      showAccordian: this.state.showAccordian,\n      dataState: this.props.Login.dataState,\n      onTabChange: this.onTabChange,\n      settings: this.props.Login.settings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 45\n      }\n    })))) : \"\"))));\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.filterTechnique && this.props.Login.masterData.FromDate) {\n      let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      breadCrumbData.push({\n        \"label\": \"IDS_FROM\",\n        \"value\": obj.breadCrumbFrom\n      }, {\n        \"label\": \"IDS_TO\",\n        \"value\": obj.breadCrumbto\n      }, {\n        \"label\": \"IDS_TECHNIQUE\",\n        \"value\": this.props.Login.masterData.selectedTechinque ? this.props.Login.masterData.selectedTechinque[\"stechniquename\"] : \"NA\"\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  componentDidUpdate(previousProps) {\n    let isComponentUpdated = false;\n    let selectedRecord = this.state.selectedRecord || {};\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      isComponentUpdated = true;\n    }\n\n    let userRoleControlRights = this.state.userRoleControlRights || [];\n    let controlMap = this.state.controlMap || new Map();\n\n    if (this.props.Login.userInfo && this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const nformCode = this.props.Login.userInfo.nformcode;\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[nformCode] && Object.values(this.props.Login.userRoleControlRights[nformCode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, nformCode);\n      isComponentUpdated = true;\n    }\n\n    let nfilterTechnique = this.state.nfilterTechnique || {};\n    let filterTechnique = this.state.filterTechnique || {};\n\n    if (this.props.Login.masterData.filterTechnique !== previousProps.Login.masterData.filterTechnique) {\n      const trainingupdateMap = constructOptionList(this.props.Login.masterData.filterTechnique || [], \"ntechniquecode\", \"stechniquename\", 'ntechniquecode', 'ascending', false);\n      filterTechnique = trainingupdateMap.get(\"OptionList\");\n\n      if (trainingupdateMap.get(\"DefaultValue\")) {\n        nfilterTechnique = trainingupdateMap.get(\"DefaultValue\");\n      } else if (filterTechnique && filterTechnique.length > 0) {\n        nfilterTechnique = filterTechnique[0];\n      }\n\n      isComponentUpdated = true;\n    } else if (this.props.Login.masterData.nfilterTechnique !== previousProps.Login.masterData.nfilterTechnique) {\n      nfilterTechnique = this.props.Login.masterData.nfilterTechnique;\n      isComponentUpdated = true;\n    }\n\n    if (isComponentUpdated) {\n      this.setState({\n        nfilterTechnique,\n        userRoleControlRights,\n        controlMap,\n        selectedRecord,\n        filterTechnique\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const filterData = this.generateBreadCrumData();\n      this.setState({\n        filterData\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  updateStore,\n  filterColumnData,\n  getTrainingUpdate,\n  changeTechniqueFilter\n})(injectIntl(TrainingUpdate));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/competencemanagement/trainingupdate/TrainingUpdate.jsx"],"names":["React","Component","Row","Col","Card","Nav","FormGroup","FormLabel","connect","callService","crudMaster","getTrainingUpdate","addTest","updateStore","getTestDetails","formulaChangeFunction","filterColumnData","addParameter","validateEsignCredential","addCodedResult","addParameterSpecification","getAvailableData","addFormula","changeTechniqueFilter","addTestFile","viewAttachment","TechniqueFilter","injectIntl","toast","getControlMap","constructOptionList","convertDateValuetoString","showEsign","formatInputDate","ListMaster","ReadOnlyText","ContentPanel","MediaLabel","DEFAULT_RETURN","ConfirmMessage","ReactTooltip","BreadcrumbComponent","Affix","TrainingUpdateChildTab","ProductList","FontAwesomeIcon","faCheckCircle","faCheck","mapStateToProps","state","Login","TrainingUpdate","constructor","props","completeTraining","version","ncontrolCode","inputData","obj","masterData","FromDate","ToDate","userInfo","fromDate","toDate","SelectedTrainingUpdate","ntrainingcode","selectedTechinque","ntechniquecode","ntransactionstatus","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","TechniqueList","fetchUrl","fecthInputObject","userinfo","inputParam","methodUrl","classUrl","operation","userRoleControlRights","nformcode","updateInfo","typeName","data","loadEsign","screenData","openModal","screenName","id","handlePageChange","event","setState","skip","take","handleDateChange","dateName","dateValue","selectedRecord","onComboChange","comboData","fieldName","caseNo","nfilterTechnique","searchRef","current","value","openFilter","showFilter","closeFilter","reloadData1","currentdate","Date","displayName","warn","intl","formatMessage","onFilterSubmit","reloadData","isFilterSubmit","undefined","currentDate","filterTechnique","error","controlMap","Map","settings","createRef","searchFieldList","getDerivedStateFromProps","masterStatus","errorCode","render","confirmMessage","searchedData","testData","parameterData","otherTestData","linkMaster","editFiles","filterParam","unchangeList","showAccordion","breadCrumbData","filterData","completeId","has","get","ncontrolcode","length","onFilterChange","handleFilterDateChange","FilterStatusValue","stateFilterStatus","Object","values","stechniquename","stransdisplaystatus","indexOf","strainingvenue","strainingdate","strainingtopic","strainername","openChildModal","participants","showAccordian","dataState","onTabChange","generateBreadCrumData","push","breadCrumbFrom","breadCrumbto","componentDidUpdate","previousProps","isComponentUpdated","nformCode","map","item","trainingupdateMap"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\n// import rsapi from '../../rsapi';\r\n\r\nimport {\r\n    callService, crudMaster, getTrainingUpdate, addTest, updateStore, getTestDetails, formulaChangeFunction, filterColumnData,\r\n    addParameter, validateEsignCredential, addCodedResult, addParameterSpecification, getAvailableData, addFormula,\r\n    changeTechniqueFilter, addTestFile, viewAttachment\r\n} from '../../../actions'\r\nimport TechniqueFilter from './TechniqueFilter';\r\n// import TestView from './TestView';\r\nimport { injectIntl } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\n// import AddParameter from './AddParameter'\r\n// import AddTest from '../../pages/testmanagement/AddTest'\r\n// import SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { getControlMap, constructOptionList, convertDateValuetoString, showEsign, formatInputDate } from '../../../components/CommonScript';\r\nimport ListMaster from '../../../components/list-master/list-master.component';\r\n// import { faTrashAlt, faPencilAlt, faCopy, faCheck } from '@fortawesome/free-solid-svg-icons';\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';/\r\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../../components/App.styles';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\n// import Esign from '../audittrail/Esign';\r\n// import { parameterType, transactionStatus } from '../../components/Enumeration';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\r\n// import BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\n// import { Affix } from 'rsuite';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\r\nimport { Affix } from 'rsuite';\r\nimport TrainingUpdateChildTab from './TrainingUpdateChildTab';\r\nimport { ProductList } from '../../product/product.styled';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheckCircle } from '@fortawesome/free-regular-svg-icons';\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass TrainingUpdate extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ({\r\n            selectedRecord: {},\r\n            error: \"\",\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            take: this.props.Login.settings ? this.props.Login.settings[3] : 25\r\n        });\r\n        this.searchRef = React.createRef();\r\n        this.searchFieldList = [\"stechniquename\", \"strainingtopic\", \"strainername\"]\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        const { TechniqueList, SelectedTrainingUpdate, searchedData } = this.props.Login.masterData;\r\n        const { masterData, userInfo, testData, parameterData, otherTestData, linkMaster, editFiles } = this.props.Login;\r\n\r\n        let obj = convertDateValuetoString(this.state.selectedRecord[\"fromdate\"] || (this.props.Login.masterData && this.props.Login.masterData.FromDate),\r\n            this.state.selectedRecord[\"todate\"] || (this.props.Login.masterData && this.props.Login.masterData.ToDate),\r\n            this.props.Login.userInfo)\r\n\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n\r\n        // const addId = this.state.controlMap.has(\"AddTest\") && this.state.controlMap.get(\"AddTest\").ncontrolcode;\r\n        // const editId = this.state.controlMap.has(\"EditTest\") && this.state.controlMap.get(\"EditTest\").ncontrolcode;\r\n        // const deleteId = this.state.controlMap.has(\"DeleteTest\") && this.state.controlMap.get(\"DeleteTest\").ncontrolcode;\r\n        // const copyId = this.state.controlMap.has(\"CopyTest\") && this.state.controlMap.get(\"CopyTest\").ncontrolcode;\r\n        const filterParam = {\r\n            inputListName: \"TechniqueList\", selectedObject: \"SelectedTrainingUpdate\", primaryKeyField: \"ntrainingcode\",\r\n            fetchUrl: \"trainingupdate/getTrainingUpdateById\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData, unchangeList: [\"FromDate\", \"ToDate\"],\r\n            searchFieldList: this.searchFieldList\r\n        };\r\n        // if (this.props.Login.openModal) {\r\n        //     this.mandatoryFields = this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord, this.props.Login.operation)\r\n        // }\r\n\r\n        // let breadCrumbData = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate, \r\n        //     this.props.Login.masterData && this.props.Login.masterData.ToDate,\r\n        //     this.props.Login.userInfo)       \r\n        this.props.Login.showAccordion = true;\r\n\r\n        let breadCrumbData = this.state.filterData || [];\r\n        const completeId = this.state.controlMap.has(\"CompleteTraining\") && this.state.controlMap.get(\"CompleteTraining\").ncontrolcode;\r\n\r\n\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n                            <ListMaster\r\n                                masterData={masterData}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_TRAININGUPDATE\" })}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.TechniqueList}\r\n                                getMasterDetail={(TechniqueList) => this.props.getTrainingUpdate(TechniqueList, userInfo, masterData)}\r\n                                selectedMaster={this.props.Login.masterData.SelectedTrainingUpdate}\r\n                                primaryKeyField=\"ntrainingcode\"\r\n                                mainField=\"stechniquename\"\r\n                                firstField=\"strainingtopic\"\r\n                                secondField=\"strainername\"\r\n                                //openModal={() => this.props.addTest(\"create\", SelectedTest, userInfo, addId, this.state.nfilterTestCategory)}\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                //addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData1}\r\n                                needAccordianFilter={false}\r\n                                skip={this.state.skip}\r\n                                take={this.state.take}\r\n                                handlePageChange={this.handlePageChange}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_TRAININGUPDATEFILTER\":\r\n                                            <TechniqueFilter\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                value={this.state.value || {}}\r\n                                                handleDateChange={this.handleDateChange}\r\n                                                fromDate={fromDate}\r\n                                                toDate={toDate}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                filterTechnique={this.state.filterTechnique || []}\r\n                                                nfilterTechnique={this.state.nfilterTechnique || {}}\r\n                                                onComboChange={this.onComboChange}\r\n                                                onFilterChange={this.onFilterChange}\r\n                                                handleFilterDateChange={this.handleFilterDateChange}\r\n                                                FilterStatusValue={this.props.Login.masterData.FilterStatusValue || {}}\r\n                                                FilterStatus={this.state.stateFilterStatus || []}\r\n                                            />\r\n                                    }\r\n\r\n                            \r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md={8}>\r\n                            {SelectedTrainingUpdate && Object.values(SelectedTrainingUpdate).length > 0 ?\r\n                                <ContentPanel className=\"panel-main-content\">\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Header>\r\n                                            <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                                            <Card.Title className=\"product-title-main\">\r\n                                                {SelectedTrainingUpdate.stechniquename}\r\n                                            </Card.Title>\r\n                                            <Card.Subtitle>\r\n                                            <div className=\"d-flex product-category\">\r\n                                                    <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                        <MediaLabel className={`btn btn-outlined ${SelectedTrainingUpdate.ntransactionstatus === 22 ? \"outline-success\" : \"outline-secondary\"} btn-sm ml-3`}>\r\n                                                            {SelectedTrainingUpdate.ntransactionstatus === 22 && <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>}\r\n                                                            {SelectedTrainingUpdate.stransdisplaystatus}\r\n                                                        </MediaLabel>\r\n                                                    </h2>\r\n                                                    <div className=\"d-inline\">\r\n                                                   <ProductList className=\"d-flex justify-content-end\">                                                            \r\n                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_COMPLETETRAINING\" })}\r\n                                                                data-for=\"tooltip_list_wrap\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(completeId) === -1}\r\n                                                                onClick={() => this.completeTraining(this.state.version,completeId)}\r\n                                                                >\r\n                                                                <FontAwesomeIcon icon={faCheckCircle} />                                                                \r\n                                                            </Nav.Link>\r\n                                                        </ProductList>     \r\n                                                         </div>                                           \r\n                                            </div>\r\n                                            </Card.Subtitle>\r\n                                        </Card.Header>\r\n                                        <Card.Body className=\"form-static-wrap\">\r\n                                            <Row>\r\n                                                <Col md=\"6\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_VENUE\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{SelectedTrainingUpdate.strainingvenue}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"6\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TRAININGDATE\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{SelectedTrainingUpdate.strainingdate}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n                                                {/* {this.props.Login.masterData.TestParameter && this.props.Login.masterData.TestParameter.length > 0 && this.props.Login.masterData.TestParameter[0].nparametertypecode === 1 && */}\r\n                                                {/* <Col md=\"6\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TRAININGSTATUS\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{SelectedTrainingUpdate.stransdisplaystatus}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col> */}\r\n                                                <Col md=\"6\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TRAININGTOPIC\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{SelectedTrainingUpdate.strainingtopic}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"6\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TRAINERNAME\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{SelectedTrainingUpdate.strainername}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                {/* } */}\r\n                                                {/* Don't delete these commented lines because additional info feature is needed for Agaram LIMS */}\r\n                                                {/* Start Here */}\r\n                                                {/* <Col md=\"6\">\r\n                                                <FormGroup>\r\n                                                    <FormLabel>{ this.props.intl.formatMessage({id: \"IDS_ADDITIONALINFO\"}) }</FormLabel>\r\n                                                    <ReadOnlyText>{ selectedTest.schecklistname }</ReadOnlyText>\r\n                                                </FormGroup>\r\n                                            </Col> */}\r\n                                                {/* End Here */}\r\n                                            </Row>\r\n                                            <TrainingUpdateChildTab //formatMessage={this.props.intl.formatMessage}\r\n                                                operation={this.props.Login.operation}\r\n                                                inputParam={this.props.Login.inputParam}\r\n                                                screenName={this.props.Login.screenName}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                masterData={this.props.Login.masterData}\r\n                                                crudMaster={this.props.crudMaster}\r\n                                                errorCode={this.props.Login.errorCode}\r\n                                                masterStatus={this.props.Login.masterStatus}\r\n                                                openChildModal={this.props.Login.openChildModal}\r\n                                                //trainingDocument={this.props.Login.trainingDocument}\r\n                                                participants={this.props.Login.participants}\r\n                                                updateStore={this.props.updateStore}\r\n                                                selectedRecord={this.props.Login.selectedRecord}\r\n                                                //getSupplierCategoryComboDataService={this.props.getSupplierCategoryComboDataService}\r\n                                                //getMaterialCategoryComboDataService={this.props.getMaterialCategoryComboDataService}\r\n                                                //ncontrolCode={this.props.Login.ncontrolCode}\r\n                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                esignRights={this.props.Login.userRoleControlRights}\r\n                                                screenData={this.props.Login.screenData}\r\n                                                validateEsignCredential={this.props.validateEsignCredential}\r\n                                                loadEsign={this.props.Login.loadEsign}\r\n                                                controlMap={this.state.controlMap}\r\n                                                showAccordian={this.state.showAccordian}\r\n                                                dataState={this.props.Login.dataState}\r\n                                                onTabChange={this.onTabChange}\r\n                                                settings={this.props.Login.settings}\r\n                                            />\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </ContentPanel>\r\n                                : \"\"\r\n                            }\r\n                        </Col>\r\n\r\n                    </Row>\r\n                </div>\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n    \r\n    completeTraining = (version,ncontrolCode) => {\r\n\r\n        let inputData = [];\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n        inputData[\"fromDate\"] = fromDate;\r\n        inputData[\"toDate\"] = toDate;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        //inputData[\"ntrainingcode\"]=  this.props.Login.masterData.TechniqueList[\"ntrainingcode\"];\r\n        inputData[\"ntechniquecode\"]=this.props.Login.masterData.SelectedTrainingUpdate[\"ntechniquecode\"];\r\n        inputData[\"trainingupdate\"] = {\r\n            //\"nusercode\": version.nusercode,\r\n            //\"nparticipantcode\": version.nparticipantcode,\r\n            \"ntrainingcode\": this.props.Login.masterData.SelectedTrainingUpdate.ntrainingcode,\r\n            \"ntechniquecode\":this.props.Login.masterData.selectedTechinque.ntechniquecode,\r\n            \"ntransactionstatus\":this.props.Login.masterData.SelectedTrainingUpdate.ntransactionstatus,\r\n            //\"ncertifiedstatus\" : version.ncertifiedstatus,\r\n           // \"ncompetencystatus\" : version.ncompetencystatus,\r\n            //\"ntransactionstatus\" : version.ntransactionstatus,\r\n            \r\n            \r\n            //ntechniquecode: this.props.Login.masterData.TechniqueList[\"ntechniquecode\"]\r\n        }\r\n        const postParam = {\r\n            inputListName: \"TechniqueList\", \r\n            selectedObject: \"SelectedTrainingUpdate\",\r\n            primaryKeyField: \"ntechniquecode\",\r\n            primaryKeyValue: this.props.Login.masterData.TechniqueList.ntechniquecode,\r\n            fetchUrl: \"trainingupdate/getTraningUpdateByTechnique\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        }\r\n        const inputParam = {\r\n            methodUrl: \"Training\",\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            inputData: inputData, postParam,\r\n            operation:\"complete\"\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, \r\n                    screenData: { inputParam, masterData }, \r\n                    openModal: true, \r\n                    operation:\"complete\", \r\n                    screenName: '', \r\n                    id: 'TrainingUpdate'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData);\r\n        }\r\n    }\r\n    handlePageChange = (event) => {\r\n        this.setState({\r\n            skip: event.skip,\r\n            take: event.take\r\n        });\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.filterTechnique && this.props.Login.masterData.FromDate) {\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate,\r\n                this.props.Login.masterData.ToDate,\r\n                this.props.Login.userInfo);\r\n            breadCrumbData.push(\r\n\r\n                {\r\n                    \"label\": \"IDS_FROM\",\r\n                    \"value\": obj.breadCrumbFrom\r\n                },\r\n                {\r\n                    \"label\": \"IDS_TO\",\r\n                    \"value\": obj.breadCrumbto\r\n                },\r\n                {\r\n                    \"label\": \"IDS_TECHNIQUE\",\r\n                    \"value\": this.props.Login.masterData.selectedTechinque ? this.props.Login.masterData.selectedTechinque[\"stechniquename\"]: \"NA\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, caseNo) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            // case 1:\r\n            //     if (fieldName === \"sparametername\") {\r\n            //         selectedRecord[fieldName] = comboData;\r\n            //         selectedRecord[\"sparametersynonym\"] = comboData ? comboData.value : \"\";\r\n            //     } else {\r\n            //         selectedRecord[fieldName] = comboData;\r\n            //     }\r\n            //     this.setState({ selectedRecord });\r\n            //     break;\r\n\r\n            // case 2:\r\n            //     let item = comboData['item'];\r\n            //     let needUnit = true;\r\n            //     let needRoundingDigit = true;\r\n            //     let needCodedResult = true;\r\n            //     let needActualResult = true;\r\n            //     let npredefinedcode = transactionStatus.NO;\r\n            //     const parameterData = this.props.Login.parameterData;\r\n            //     if (item[\"nunit\"] === transactionStatus.YES) {\r\n            //         needUnit = false;\r\n            //         selectedRecord[\"nunitcode\"] = this.props.Login.parameterData.defaultUnit;\r\n            //     } else {\r\n            //         selectedRecord[\"nunitcode\"] = \"\";\r\n            //     }\r\n            //     if (item[\"nroundingdigit\"] === transactionStatus.YES) {\r\n            //         needRoundingDigit = false;\r\n            //     } else {\r\n            //         selectedRecord[\"nroundingdigits\"] = \"\";\r\n            //     }\r\n            //     if (item[\"npredefinedcode\"] === transactionStatus.YES) {\r\n            //         needCodedResult = false;\r\n            //         npredefinedcode = item[\"npredefinedcode\"];\r\n            //     } else {\r\n            //         selectedRecord[\"spredefinedname\"] = \"\";\r\n            //     }\r\n            //     if (item[\"ngrade\"] === transactionStatus.YES) {\r\n            //         needActualResult = false;\r\n            //         selectedRecord[\"ngradecode\"] = this.props.Login.parameterData.defaultGrade;\r\n            //     } else {\r\n            //         selectedRecord[\"ngradecode\"] = \"\";\r\n            //     }\r\n            //     selectedRecord[fieldName] = comboData;\r\n            //     const parameterInfo = {\r\n            //         typeName: DEFAULT_RETURN,\r\n            //         data: {\r\n            //             parameterData: {\r\n            //                 ...parameterData, needUnit, needRoundingDigit, needCodedResult, needActualResult, npredefinedcode\r\n            //             }, selectedRecord\r\n            //         }\r\n            //     }\r\n            //     this.props.updateStore(parameterInfo);\r\n\r\n            //     break;\r\n\r\n            case 3:\r\n                let nfilterTechnique = this.state.nfilterTechnique || {}\r\n                nfilterTechnique = comboData;\r\n                this.searchRef.current.value = \"\";\r\n                this.setState({ nfilterTechnique })\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    reloadData1 = () => {\r\n       \r\n        if (this.props.Login.masterData.selectedTechinque.ntechniquecode) {\r\n            let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;\r\n            let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\r\n            let inputParam = {\r\n                inputData: {\r\n\r\n                    userinfo: this.props.Login.userInfo,\r\n                    currentdate: formatInputDate(new Date(), true)\r\n                },\r\n                classUrl: \"trainingupdate\",\r\n                methodUrl: \"TrainingUpdate\",\r\n                userInfo: this.props.Login.userInfo,\r\n                displayName: \"IDS_TRAININGUPDATE\"\r\n\r\n            };\r\n            this.props.callService(inputParam);\r\n           //, this.props.Login.masterData.filterTechnique,this.state.nfilterTechnique);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_TECHNIQUENOTAVAILABLE\" }));\r\n        }\r\n        \r\n    }\r\n    onFilterSubmit = () => {\r\n        this.reloadData(true);\r\n    }\r\n\r\n    reloadData = (isFilterSubmit) => {\r\n\r\n        this.searchRef.current.value = \"\";\r\n        // let obj = this.convertDatetoString(selectedRecord[\"fromdate\"] || (this.props.Login.masterData && this.props.Login.masterData.FromDate),\r\n        //     selectedRecord[\"todate\"] || (this.props.Login.masterData && this.props.Login.masterData.ToDate))\r\n\r\n        let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;\r\n        if (isFilterSubmit) {\r\n            let selectedRecord = this.state.selectedRecord || {};\r\n            if (selectedRecord && selectedRecord[\"fromdate\"] !== undefined) {\r\n                fromDate = selectedRecord[\"fromdate\"];\r\n            }\r\n            if (selectedRecord && selectedRecord[\"todate\"] !== undefined) {\r\n                toDate = selectedRecord[\"todate\"];\r\n            }\r\n        }\r\n        //let obj = this.convertDatetoString(fromDate, toDate); \r\n        let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\r\n        if (this.state.nfilterTechnique.value) {\r\n            let inputParam = {\r\n                inputData: {\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n                    fromDate: obj.fromDate,\r\n                    toDate: obj.toDate,\r\n                    currentDate: null,\r\n                    ntechniquecode: this.state.nfilterTechnique.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nfilterTechnique: this.state.nfilterTechnique\r\n                    //currentdate: isDateChange === true ? null : formatInputDate(new Date(), true)\r\n                },\r\n\r\n                classUrl: \"trainingupdate\",\r\n                methodUrl: \"TraningUpdateByTechnique\",\r\n                displayName: \"IDS_TRAININGCERTIFICATE\",\r\n                userInfo: this.props.Login.userInfo\r\n            };\r\n            this.props.changeTechniqueFilter(inputParam, this.props.Login.masterData.filterTechnique,this.state.nfilterTechnique);\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_TECHNIQUENOTAVAILABLE\" }));\r\n        }\r\n        //this.props.callService(inputParam);\r\n        //this.props.changeTechniqueFilter(inputParam);\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let isComponentUpdated = false;\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            isComponentUpdated = true;\r\n        }\r\n\r\n        let userRoleControlRights = this.state.userRoleControlRights || [];\r\n        let controlMap = this.state.controlMap || new Map();\r\n        if (this.props.Login.userInfo && this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const nformCode = this.props.Login.userInfo.nformcode;\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[nformCode] && Object.values(this.props.Login.userRoleControlRights[nformCode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode));\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, nformCode);\r\n            isComponentUpdated = true;\r\n        }\r\n        let nfilterTechnique = this.state.nfilterTechnique || {};\r\n        let filterTechnique = this.state.filterTechnique || {};\r\n\r\n        if (this.props.Login.masterData.filterTechnique !== previousProps.Login.masterData.filterTechnique) {\r\n            const trainingupdateMap = constructOptionList(this.props.Login.masterData.filterTechnique || [], \"ntechniquecode\",\r\n                \"stechniquename\", 'ntechniquecode', 'ascending', false);\r\n            filterTechnique = trainingupdateMap.get(\"OptionList\");\r\n            if (trainingupdateMap.get(\"DefaultValue\")) {\r\n                nfilterTechnique = trainingupdateMap.get(\"DefaultValue\");\r\n            } else if (filterTechnique && filterTechnique.length > 0) {\r\n                nfilterTechnique = filterTechnique[0];\r\n            }\r\n            isComponentUpdated = true;\r\n        } else if (this.props.Login.masterData.nfilterTechnique !== previousProps.Login.masterData.nfilterTechnique) {\r\n            nfilterTechnique = this.props.Login.masterData.nfilterTechnique;\r\n            isComponentUpdated = true;\r\n        }\r\n        if (isComponentUpdated) {\r\n            this.setState({ nfilterTechnique, userRoleControlRights, controlMap, selectedRecord, filterTechnique });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const filterData = this.generateBreadCrumData();\r\n            this.setState({ filterData });\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential,\r\n    updateStore, filterColumnData, getTrainingUpdate, changeTechniqueFilter\r\n})(injectIntl(TrainingUpdate));\r\n\r\n"]},"metadata":{},"sourceType":"module"}