{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\release\\\\ReleaseReportHistory.jsx\";\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport 'rc-tabs/assets/index.css';\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport Tabs, { TabPane } from \"rc-tabs\";\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\nimport { formCode } from '../../components/Enumeration';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { process } from '@progress/kendo-data-query';\n\nclass ReleaseReportHistory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTabChange = tab => {\n      let selectedScreen = this.state.screens.find(screen => screen.eventKey === tab);\n      let dataState = selectedScreen.eventKey === \"PreliminaryReportHistory\" ? this.state.preliminaryHistoryDataState : selectedScreen.eventKey === \"ReleaseReportHistory\" ? this.state.releaseyHistoryDataState : selectedScreen.eventKey === \"RegenerateReportHistory\" ? this.state.regenerateHistoryDataState : this.state.releaseHistoryTabDataState;\n      let dataResult = process(this.props.dataResult[selectedScreen.eventKey] || [], dataState);\n      let data = this.props.dataResult[selectedScreen.eventKey] || [];\n      this.setState({\n        selectedScreen,\n        dataResult,\n        data\n      });\n    };\n\n    this.preliminaryHistoryDataStateChange = event => {\n      this.setState({\n        preliminaryHistoryDataState: event.dataState,\n        dataResult: process(this.state.data ? this.state.data : [], event.dataState)\n      }); // this.expandNextData(event.dataState);\n    };\n\n    this.releaseHistoryDataStateChange = event => {\n      this.setState({\n        releaseyHistoryDataState: event.dataState,\n        dataResult: process(this.state.data ? this.state.data : [], event.dataState)\n      }); // this.expandNextData(event.dataState);\n    };\n\n    this.regenerateHistoryDataStateChange = event => {\n      this.setState({\n        regenerateHistoryDataState: event.dataState,\n        dataResult: process(this.state.data ? this.state.data : [], event.dataState)\n      }); // this.expandNextData(event.dataState);\n    };\n\n    this.releaseHistoryTabDataStateChange = event => {\n      this.setState({\n        releaseHistoryTabDataState: event.dataState,\n        dataResult: process(this.state.data ? this.state.data : [], event.dataState)\n      }); // this.expandNextData(event.dataState);\n    };\n\n    const preliminaryHistoryDataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    const releaseyHistoryDataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    const regenerateHistoryDataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    const releaseHistoryTabDataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    const screens = [];\n    screens.push({\n      eventKey: 'ReleaseHistoryTab',\n      name: \"IDS_RELEASEHISTORY\",\n      formcode: formCode.RELEASE\n    }, {\n      eventKey: 'PreliminaryReportHistory',\n      name: \"IDS_PRELIMINARYREPORTHISTORY\",\n      formcode: formCode.RESULTENTRY\n    }, {\n      eventKey: 'ReleaseReportHistory',\n      name: \"IDS_RELEASEREPORTHISTORY\",\n      formcode: formCode.APPROVAL\n    }, {\n      eventKey: 'RegenerateReportHistory',\n      name: \"IDS_REGENERATEREPORTHISTORY\",\n      formcode: formCode.RELEASE\n    });\n    this.state = {\n      screens,\n      preliminaryHistoryDataState: preliminaryHistoryDataState,\n      releaseyHistoryDataState: releaseyHistoryDataState,\n      regenerateHistoryDataState: regenerateHistoryDataState,\n      releaseHistoryTabDataState: releaseHistoryTabDataState,\n      selectedScreen: {\n        eventKey: 'ReleaseHistoryTab',\n        name: \"IDS_RELEASEHISTORY\",\n        formcode: 43\n      },\n      dataResult: process(this.props.dataResult[\"ReleaseHistoryTab\"] || [], preliminaryHistoryDataState),\n      data: this.props.dataResult[\"ReleaseHistoryTab\"]\n    };\n  }\n\n  render() {\n    const extractedColumnList = [];\n\n    if (this.state && this.state.selectedScreen && (this.state.selectedScreen.eventKey === \"ReleaseReportHistory\" || this.state.selectedScreen.eventKey === \"RegenerateReportHistory\")) {\n      extractedColumnList.push({\n        \"idsName\": \"IDS_REPORTREFERENCENO\",\n        \"dataField\": \"sreportno\",\n        \"width\": \"155px\"\n      }, {\n        \"idsName\": \"IDS_VERSION\",\n        \"dataField\": \"nversionno\",\n        \"width\": \"75px\"\n      }, {\n        \"idsName\": \"IDS_USER\",\n        \"dataField\": \"susername\",\n        \"width\": \"155px\"\n      }, {\n        \"idsName\": \"IDS_USERROLE\",\n        \"dataField\": \"suserrolename\",\n        \"width\": \"155px\"\n      }, {\n        \"idsName\": \"IDS_GENERATEDDATETIME\",\n        \"dataField\": \"sgenerateddate\",\n        \"width\": \"155px\"\n      });\n    } else if (this.state.selectedScreen.eventKey === \"ReleaseHistoryTab\") {\n      extractedColumnList.push({\n        \"idsName\": \"IDS_REPORTREFERENCENO\",\n        \"dataField\": \"sreportno\",\n        \"width\": \"155px\"\n      }, {\n        \"idsName\": \"IDS_VERSION\",\n        \"dataField\": \"nversionno\",\n        \"width\": \"75px\"\n      }, {\n        \"idsName\": \"IDS_USER\",\n        \"dataField\": \"susername\",\n        \"width\": \"155px\"\n      }, {\n        \"idsName\": \"IDS_USERROLE\",\n        \"dataField\": \"suserrolename\",\n        \"width\": \"155px\"\n      }, {\n        \"idsName\": \"IDS_TRANSACTIONSTATUS\",\n        \"dataField\": \"stransdisplaystatus\",\n        \"width\": \"155px\"\n      }, {\n        \"idsName\": \"IDS_GENERATEDDATETIME\",\n        \"dataField\": \"sgenerateddate\",\n        \"width\": \"155px\"\n      });\n    } else {\n      extractedColumnList.push({\n        \"idsName\": \"IDS_PRELIMINARYREFERENCENO\",\n        \"dataField\": \"ncoaparentcode\",\n        \"width\": \"155px\"\n      }, {\n        \"idsName\": \"IDS_USER\",\n        \"dataField\": \"susername\",\n        \"width\": \"155px\"\n      }, {\n        \"idsName\": \"IDS_USERROLE\",\n        \"dataField\": \"suserrolename\",\n        \"width\": \"155px\"\n      }, {\n        \"idsName\": \"IDS_GENERATEDDATETIME\",\n        \"dataField\": \"sgenerateddate\",\n        \"width\": \"155px\"\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AtTabs, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      activeKey: this.state.selectedScreen.eventKey,\n      moreIcon: \"...\",\n      onChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }\n    }, this.state.screens.map(screen => /*#__PURE__*/React.createElement(TabPane, {\n      name: screen.eventKey,\n      tab: this.props.intl.formatMessage({\n        id: screen.name\n      }),\n      key: screen.eventKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataGrid, {\n      key: \"ncoaparentcode\",\n      primaryKeyField: \"ncoaparentcode\",\n      data: this.props.dataResult[this.state.selectedScreen.eventKey] || [] // dataResult={process(this.props.dataResult[this.state.selectedScreen.eventKey], this.state.preliminaryHistoryDataState)}\n      ,\n      dataResult: this.state.dataResult,\n      dataState: this.state && this.state.selectedScreen && this.state.selectedScreen.eventKey === \"PreliminaryReportHistory\" ? this.state.preliminaryHistoryDataState : this.state && this.state.selectedScreen && this.state.selectedScreen.eventKey === \"ReleaseReportHistory\" ? this.state.releaseyHistoryDataState : this.state.selectedScreen.eventKey === \"RegenerateReportHistory\" ? this.state.regenerateHistoryDataState : this.state.releaseHistoryTabDataState //expandField=\"expanded\"\n      ,\n      isExportExcelRequired: false,\n      dataStateChange: this.state && this.state.selectedScreen && this.state.selectedScreen.eventKey === \"PreliminaryReportHistory\" ? this.preliminaryHistoryDataStateChange : this.state && this.state.selectedScreen && this.state.selectedScreen.eventKey === \"ReleaseReportHistory\" ? this.releaseHistoryDataStateChange : this.state.selectedScreen.eventKey === \"RegenerateReportHistory\" ? this.regenerateHistoryDataStateChange : this.releaseHistoryTabDataStateChange,\n      extractedColumnList: extractedColumnList,\n      controlMap: this.props.controlMap,\n      userRoleControlRights: this.props.userRoleControlRights // detailedFieldList={this.props.detailedFieldList}\n      // //editParam={editReportParam}\n      // selectedId={this.props.Login.selectedId}\n      // fetchRecord={this.props.fetchReportInfoReleaseById}\n      ,\n      pageable: true // dataStateChange={this.dataStateChange}\n      ,\n      scrollable: 'scrollable',\n      gridHeight: '350px',\n      isActionRequired: this.state && (this.state.selectedScreen.eventKey === \"RegenerateReportHistory\" || this.state.selectedScreen.eventKey === \"ReleaseHistoryTab\") ? false : true,\n      methodUrl: 'ReleaseVersion',\n      isDownload: this.state && (this.state.selectedScreen.eventKey === \"RegenerateReportHistory\" || this.state.selectedScreen.eventKey === \"ReleaseHistoryTab\") ? false : true,\n      viewDownloadFile: this.props.viewDownloadFile // actionIcons={[{\n      //     title: this.props.intl.formatMessage({ id: \"IDS_PREVIOUSRESULTVIEW\" }),\n      //     controlname: \"faEye\",\n      //     objectName: \"ExceptionLogs\",\n      //     hidden: -1 === -1,\n      //    onClick: (viewSample) => this.props.viewSample(viewSample)\n      // }]}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 53\n      }\n    }))))))))));\n  }\n\n}\n\nexport default injectIntl(ReleaseReportHistory);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/release/ReleaseReportHistory.jsx"],"names":["LocalizationProvider","React","injectIntl","AtTabs","PerfectScrollbar","Tabs","TabPane","AtTableWrap","formCode","DataGrid","process","ReleaseReportHistory","Component","constructor","props","onTabChange","tab","selectedScreen","state","screens","find","screen","eventKey","dataState","preliminaryHistoryDataState","releaseyHistoryDataState","regenerateHistoryDataState","releaseHistoryTabDataState","dataResult","data","setState","preliminaryHistoryDataStateChange","event","releaseHistoryDataStateChange","regenerateHistoryDataStateChange","releaseHistoryTabDataStateChange","skip","take","settings","parseInt","push","name","formcode","RELEASE","RESULTENTRY","APPROVAL","render","extractedColumnList","map","intl","formatMessage","id","controlMap","userRoleControlRights","viewDownloadFile"],"mappings":"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","sourcesContent":["import { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport React from 'react'\r\nimport { injectIntl } from 'react-intl'\r\nimport 'rc-tabs/assets/index.css';\r\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\r\n\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Tabs, { TabPane } from \"rc-tabs\";\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport { formCode } from '../../components/Enumeration';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { process } from '@progress/kendo-data-query';\r\n\r\nclass ReleaseReportHistory extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const preliminaryHistoryDataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\r\n        };\r\n        const releaseyHistoryDataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\r\n        };\r\n        const regenerateHistoryDataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\r\n        };\r\n        const releaseHistoryTabDataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\r\n        };\r\n\r\n        const screens = [];\r\n\r\n        screens.push({ eventKey: 'ReleaseHistoryTab', name: \"IDS_RELEASEHISTORY\", formcode: formCode.RELEASE },\r\n            { eventKey: 'PreliminaryReportHistory', name: \"IDS_PRELIMINARYREPORTHISTORY\", formcode: formCode.RESULTENTRY },\r\n            { eventKey: 'ReleaseReportHistory', name: \"IDS_RELEASEREPORTHISTORY\", formcode: formCode.APPROVAL },\r\n            { eventKey: 'RegenerateReportHistory', name: \"IDS_REGENERATEREPORTHISTORY\", formcode: formCode.RELEASE }\r\n        );\r\n\r\n        this.state = {\r\n            screens,\r\n            preliminaryHistoryDataState: preliminaryHistoryDataState,\r\n            releaseyHistoryDataState: releaseyHistoryDataState,\r\n            regenerateHistoryDataState: regenerateHistoryDataState,\r\n            releaseHistoryTabDataState: releaseHistoryTabDataState,\r\n            selectedScreen: { eventKey: 'ReleaseHistoryTab', name: \"IDS_RELEASEHISTORY\", formcode: 43 },\r\n            dataResult: process(this.props.dataResult[\"ReleaseHistoryTab\"] || [], preliminaryHistoryDataState),\r\n            data: this.props.dataResult[\"ReleaseHistoryTab\"]\r\n        }\r\n    }\r\n    onTabChange = (tab) => {\r\n        let selectedScreen = this.state.screens.find(screen => screen.eventKey === tab);\r\n        let dataState = selectedScreen.eventKey === \"PreliminaryReportHistory\" ? this.state.preliminaryHistoryDataState :\r\n            selectedScreen.eventKey === \"ReleaseReportHistory\" ? this.state.releaseyHistoryDataState :\r\n                selectedScreen.eventKey === \"RegenerateReportHistory\" ? this.state.regenerateHistoryDataState : this.state.releaseHistoryTabDataState;\r\n        let dataResult = process(this.props.dataResult[selectedScreen.eventKey] || [], dataState);\r\n        let data = this.props.dataResult[selectedScreen.eventKey] || [];\r\n        this.setState({\r\n            selectedScreen,\r\n            dataResult,\r\n            data\r\n        });\r\n    }\r\n    preliminaryHistoryDataStateChange = (event) => {\r\n        this.setState({\r\n            preliminaryHistoryDataState: event.dataState,\r\n            dataResult: process(this.state.data ? this.state.data : [], event.dataState)\r\n        })\r\n        // this.expandNextData(event.dataState);\r\n    }\r\n    releaseHistoryDataStateChange = (event) => {\r\n        this.setState({\r\n            releaseyHistoryDataState: event.dataState,\r\n            dataResult: process(this.state.data ? this.state.data : [], event.dataState)\r\n        })\r\n        // this.expandNextData(event.dataState);\r\n    }\r\n    regenerateHistoryDataStateChange = (event) => {\r\n        this.setState({\r\n            regenerateHistoryDataState: event.dataState,\r\n            dataResult: process(this.state.data ? this.state.data : [], event.dataState)\r\n        })\r\n        // this.expandNextData(event.dataState);\r\n    }\r\n    releaseHistoryTabDataStateChange = (event) => {\r\n        this.setState({\r\n            releaseHistoryTabDataState: event.dataState,\r\n            dataResult: process(this.state.data ? this.state.data : [], event.dataState)\r\n        })\r\n        // this.expandNextData(event.dataState);\r\n    }\r\n    render() {\r\n        const extractedColumnList = [];\r\n        if (this.state && this.state.selectedScreen &&\r\n            (this.state.selectedScreen.eventKey === \"ReleaseReportHistory\" || this.state.selectedScreen.eventKey === \"RegenerateReportHistory\")) {\r\n            extractedColumnList.push(\r\n                { \"idsName\": \"IDS_REPORTREFERENCENO\", \"dataField\": \"sreportno\", \"width\": \"155px\" },\r\n                { \"idsName\": \"IDS_VERSION\", \"dataField\": \"nversionno\", \"width\": \"75px\" },\r\n                { \"idsName\": \"IDS_USER\", \"dataField\": \"susername\", \"width\": \"155px\" },\r\n                { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"155px\" },\r\n                { \"idsName\": \"IDS_GENERATEDDATETIME\", \"dataField\": \"sgenerateddate\", \"width\": \"155px\" }\r\n            );\r\n        }\r\n        else if (this.state.selectedScreen.eventKey === \"ReleaseHistoryTab\") {\r\n            extractedColumnList.push(\r\n                { \"idsName\": \"IDS_REPORTREFERENCENO\", \"dataField\": \"sreportno\", \"width\": \"155px\" },\r\n                { \"idsName\": \"IDS_VERSION\", \"dataField\": \"nversionno\", \"width\": \"75px\" },\r\n                { \"idsName\": \"IDS_USER\", \"dataField\": \"susername\", \"width\": \"155px\" },\r\n                { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"155px\" },\r\n                { \"idsName\": \"IDS_TRANSACTIONSTATUS\", \"dataField\": \"stransdisplaystatus\", \"width\": \"155px\" },\r\n                { \"idsName\": \"IDS_GENERATEDDATETIME\", \"dataField\": \"sgenerateddate\", \"width\": \"155px\" }\r\n            );\r\n        }\r\n        else {\r\n            extractedColumnList.push(\r\n                { \"idsName\": \"IDS_PRELIMINARYREFERENCENO\", \"dataField\": \"ncoaparentcode\", \"width\": \"155px\" },\r\n                { \"idsName\": \"IDS_USER\", \"dataField\": \"susername\", \"width\": \"155px\" },\r\n                { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"155px\" },\r\n                { \"idsName\": \"IDS_GENERATEDDATETIME\", \"dataField\": \"sgenerateddate\", \"width\": \"155px\" }\r\n            );\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {\r\n                    <AtTabs>\r\n                        <Tabs activeKey={this.state.selectedScreen.eventKey} moreIcon=\"...\" onChange={this.onTabChange}>\r\n                            {this.state.screens.map(screen =>\r\n                                <TabPane name={screen.eventKey} tab={this.props.intl.formatMessage({ id: screen.name })} key={screen.eventKey}>\r\n                                    <PerfectScrollbar>\r\n                                        {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                                        <AtTableWrap className=\"at-list-table\">\r\n                                            <LocalizationProvider language=\"lang\">\r\n                                                <>\r\n                                                    <DataGrid\r\n                                                        key=\"ncoaparentcode\"\r\n                                                        primaryKeyField=\"ncoaparentcode\"\r\n                                                        data={this.props.dataResult[this.state.selectedScreen.eventKey] || []}\r\n                                                        // dataResult={process(this.props.dataResult[this.state.selectedScreen.eventKey], this.state.preliminaryHistoryDataState)}\r\n                                                        dataResult={this.state.dataResult}\r\n                                                        dataState={this.state && this.state.selectedScreen &&\r\n                                                            this.state.selectedScreen.eventKey === \"PreliminaryReportHistory\" ? this.state.preliminaryHistoryDataState :\r\n                                                            this.state && this.state.selectedScreen &&\r\n                                                                this.state.selectedScreen.eventKey === \"ReleaseReportHistory\" ? this.state.releaseyHistoryDataState :\r\n                                                                this.state.selectedScreen.eventKey === \"RegenerateReportHistory\" ? this.state.regenerateHistoryDataState : this.state.releaseHistoryTabDataState\r\n                                                        }\r\n                                                        //expandField=\"expanded\"\r\n                                                        isExportExcelRequired={false}\r\n                                                        dataStateChange={this.state && this.state.selectedScreen &&\r\n                                                            this.state.selectedScreen.eventKey === \"PreliminaryReportHistory\" ? this.preliminaryHistoryDataStateChange :\r\n                                                            this.state && this.state.selectedScreen &&\r\n                                                                this.state.selectedScreen.eventKey === \"ReleaseReportHistory\" ? this.releaseHistoryDataStateChange :\r\n                                                                this.state.selectedScreen.eventKey === \"RegenerateReportHistory\" ? this.regenerateHistoryDataStateChange :\r\n                                                                    this.releaseHistoryTabDataStateChange}\r\n                                                        extractedColumnList={extractedColumnList}\r\n                                                        controlMap={this.props.controlMap}\r\n                                                        userRoleControlRights={this.props.userRoleControlRights}\r\n                                                        // detailedFieldList={this.props.detailedFieldList}\r\n                                                        // //editParam={editReportParam}\r\n                                                        // selectedId={this.props.Login.selectedId}\r\n                                                        // fetchRecord={this.props.fetchReportInfoReleaseById}\r\n                                                        pageable={true}\r\n                                                        // dataStateChange={this.dataStateChange}\r\n                                                        scrollable={'scrollable'}\r\n                                                        gridHeight={'350px'}\r\n                                                        isActionRequired={this.state && (this.state.selectedScreen.eventKey === \"RegenerateReportHistory\" || this.state.selectedScreen.eventKey === \"ReleaseHistoryTab\") ? false : true}\r\n                                                        methodUrl={'ReleaseVersion'}\r\n                                                        isDownload={this.state && (this.state.selectedScreen.eventKey === \"RegenerateReportHistory\" || this.state.selectedScreen.eventKey === \"ReleaseHistoryTab\") ? false : true}\r\n                                                        viewDownloadFile={this.props.viewDownloadFile}\r\n                                                    // actionIcons={[{\r\n                                                    //     title: this.props.intl.formatMessage({ id: \"IDS_PREVIOUSRESULTVIEW\" }),\r\n                                                    //     controlname: \"faEye\",\r\n                                                    //     objectName: \"ExceptionLogs\",\r\n                                                    //     hidden: -1 === -1,\r\n                                                    //    onClick: (viewSample) => this.props.viewSample(viewSample)\r\n                                                    // }]}\r\n                                                    >\r\n                                                    </DataGrid>\r\n\r\n                                                </>\r\n                                            </LocalizationProvider>\r\n                                        </AtTableWrap>\r\n                                        {/* <ReactTooltip /> */}\r\n                                    </PerfectScrollbar>\r\n                                </TabPane>\r\n                            )}\r\n                        </Tabs>\r\n                    </AtTabs>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default injectIntl(ReleaseReportHistory)"]},"metadata":{},"sourceType":"module"}