{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\data-grid\\\\data-grid.component.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Button, Nav, Image } from 'react-bootstrap';\nimport { Grid, GridColumn, GridToolbar, GridColumnMenuFilter, GridNoRecords } from '@progress/kendo-react-grid';\nimport { GridPDFExport } from '@progress/kendo-react-pdf';\nimport { ExcelExport } from '@progress/kendo-react-excel-export';\nimport ConfirmDialog from '../confirm-alert/confirm-alert.component';\nimport SimpleGrid from './SimpleGrid';\nimport { Row, Col, Card, FormGroup, FormLabel } from 'react-bootstrap';\nimport { AtTableWrap, FormControlStatic, FontIconWrap } from '../data-grid/data-grid.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faTrashAlt, faPencilAlt, faThumbsUp, faCopy, faPlus, faSync, faFileExcel, faFilePdf, faCloudDownloadAlt, faRedo, faEye } from '@fortawesome/free-solid-svg-icons';\nimport ColumnMenu from './ColumnMenu'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport reject from \"../../assets/image/reject.svg\";\nimport CustomSwitch from '../custom-switch/custom-switch.component'; // import '../../assets/styles/unicode-font.css';\n\nimport parse from 'html-react-parser';\nimport { toast } from 'react-toastify';\nimport FormCheckbox from '../form-checkbox/form-checkbox.component';\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport { connect } from 'react-redux';\nimport { process } from '@progress/kendo-data-query';\nimport ReactTooltip from 'react-tooltip';\nimport { getActionIcon } from '../HoverIcons';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\n\nclass DataGrid extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.detailBand = props => {\n      return /*#__PURE__*/React.createElement(Row, {\n        bsPrefix: \"margin_class\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }\n      }, this.props.hasDynamicColSize ? /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_MOREINFO\",\n        message: \"More Info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 42\n        }\n      })), /*#__PURE__*/React.createElement(Card.Body, {\n        className: \"form-static-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        style: {\n          marginLeft: -18\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 33\n        }\n      }, this.props.detailedFieldList.map(item => {\n        return /*#__PURE__*/React.createElement(Col, {\n          md: item.columnSize,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: item.idsName,\n          message: item.idsName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 64\n          }\n        })), /*#__PURE__*/React.createElement(FormControlStatic, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 53\n          }\n        }, props.dataItem[item.dataField] === undefined || props.dataItem[item.dataField] === null || props.dataItem[item.dataField].length === 0 ? '-' : item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: props.dataItem[item.dataField],\n          message: props.dataItem[item.dataField],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 83\n          }\n        }) : item.isHTML ? parse(props.dataItem[item.dataField]) : props.dataItem[item.dataField])));\n      })))) : this.props.hasChild ? /*#__PURE__*/React.createElement(SimpleGrid, {\n        childList: this.props.childList.get(parseInt(props.dataItem[this.props.childMappingField])) || [],\n        extractedColumnList: this.props.childColumnList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_MOREINFO\",\n        message: \"More Info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 46\n        }\n      })), /*#__PURE__*/React.createElement(Card.Body, {\n        className: \"form-static-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 37\n        }\n      }, this.props.detailedFieldList.map(item => {\n        return /*#__PURE__*/React.createElement(Col, {\n          md: 6,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 57\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: item.idsName,\n          message: item.idsName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 68\n          }\n        })), /*#__PURE__*/React.createElement(FormControlStatic, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 57\n          }\n        }, props.dataItem[item.dataField] === undefined || props.dataItem[item.dataField] === null || props.dataItem[item.dataField].length === 0 ? '-' : item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: props.dataItem[item.dataField],\n          message: props.dataItem[item.dataField],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 83\n          }\n        }) : item.isHTML ? parse(props.dataItem[item.dataField]) : props.dataItem[item.dataField])));\n      }))))), \" \");\n    };\n\n    this.expandChange = event => {\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\n\n      if (this.props.hasChild && event.value === true) {\n        event.dataItem.expanded = !isExpanded;\n        this.props.handleExpandChange(event, this.props.dataState);\n      } else {\n        event.dataItem.expanded = !isExpanded;\n        this.setState({\n          isExpanded\n        });\n      }\n    };\n\n    this.exportExcel = () => {\n      if (this.props.dataResult.data.length > 0) {\n        this._excelExport.save();\n      } else toast.info(this.props.intl.formatMessage({\n        id: \"IDS_NODATATOEXPORT\"\n      }));\n    };\n\n    this.exportPDF = () => {\n      if (this.props.dataResult.data.length > 0) this._pdfExport.save();else toast.info(this.props.intl.formatMessage({\n        id: \"IDS_NODATATOEXPORT\"\n      }));\n    };\n\n    this.handleClickDelete = deleteParam => {\n      //this.props.deleteRecord(deleteParam);\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.props.deleteRecord(deleteParam));\n    };\n\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  columnProps(field) {\n    if (!this.props.hideColumnFilter) {\n      const returntype = {\n        field: field,\n        columnMenu: ColumnMenu,\n        headerClassName: this.isColumnActive(field, this.props.dataState) ? 'active' : ''\n      };\n      return returntype;\n    }\n  }\n\n  isColumnActive(field, dataState) {\n    return GridColumnMenuFilter.active(field, dataState.filter);\n  }\n\n  render() {\n    // console.log(\"controlMap:\", this.props.controlMap, this.props.userRoleControlRights, this.props.Login.userInfo.slanguagetypecode);\n    //  loadMessages(messages[this.props.Login.userInfo.slanguagetypecode], \"lang\");\n    const methodUrl = this.props.methodUrl ? this.props.methodUrl : this.props.inputParam && this.props.inputParam.methodUrl;\n    const addId = this.props.controlMap && this.props.controlMap.has(\"Add\".concat(methodUrl)) && this.props.controlMap.get(\"Add\".concat(methodUrl)).ncontrolcode;\n    const editId = this.props.controlMap && this.props.controlMap.has(\"Edit\".concat(methodUrl)) && this.props.controlMap.get(\"Edit\".concat(methodUrl)).ncontrolcode; // const viewId = this.props.controlMap.has(\"View\".concat(methodUrl))\n    //     && this.props.controlMap.get(\"View\".concat(methodUrl)).ncontrolcode;\n\n    const deleteId = this.props.controlMap && this.props.controlMap.has(\"Delete\".concat(methodUrl)) && this.props.controlMap.get(\"Delete\".concat(methodUrl)).ncontrolcode; // const defaultId = this.props.controlMap && this.props.controlMap.has(\"Default\".concat(methodUrl))\n    //     && this.props.controlMap.get(\"Default\".concat(methodUrl)).ncontrolcode;\n\n    const approveId = this.props.controlMap && this.props.controlMap.has(\"Approve\".concat(methodUrl)) && this.props.controlMap.get(\"Approve\".concat(methodUrl)).ncontrolcode;\n    const copyId = this.props.controlMap && this.props.inputParam && this.props.controlMap.has(\"Copy\".concat(methodUrl)) && this.props.controlMap.get(\"Copy\".concat(methodUrl)).ncontrolcode;\n    const completeId = this.props.controlMap && this.props.controlMap.has(\"Complete\".concat(methodUrl)) && this.props.controlMap.get(\"Complete\".concat(methodUrl)).ncontrolcode;\n    const switchId = this.props.controlMap && this.props.switchParam && this.props.controlMap.has(this.props.switchParam.operation.concat(methodUrl)) && this.props.controlMap.get(this.props.switchParam.operation.concat(methodUrl)).ncontrolcode;\n    const cancelId = this.props.controlMap && this.props.controlMap.has(\"Cancel\".concat(methodUrl)) && this.props.controlMap.get(\"Cancel\".concat(methodUrl)).ncontrolcode; // const receiveGoodsId = this.props.controlMap.has(\"Receive\".concat(methodUrl))\n    //     && this.props.controlMap.get(\"Receive\".concat(methodUrl)).ncontrolcode;\n\n    const downloadId = this.props.controlMap && this.props.controlMap.has(\"Download\".concat(methodUrl)) && this.props.controlMap.get(\"Download\".concat(methodUrl)).ncontrolcode;\n    const resentId = this.props.controlMap && this.props.controlMap.has(\"Resent\") && this.props.controlMap.get(\"Resent\").ncontrolcode;\n    const selectedId = this.props.selectedId; // const confirmMessage = new ConfirmMessage();\n    //console.log(\"props:\",this.props);\n\n    const pageSizes = this.props.pageSizes ? this.props.pageSizes : this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting));\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      id: \"tooltip-grid-wrap\",\n      globalEventOff: \"click\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      actionColWidth: this.props.actionColWidth ? this.props.actionColWidth : \"150px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: this.props.Login.userInfo.slanguagetypecode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ExcelExport, {\n      data: process(this.props.data || [], {\n        sort: this.props.dataState.sort,\n        filter: this.props.dataState.filter,\n        group: this.props.dataState.group\n      }).data,\n      filterable: true // fileName={this.props.inputParam && this.props.intl.formatMessage({ id: this.props.inputParam.displayName })}\n      ,\n      group: this.props.dataState.group,\n      ref: exporter => {\n        // console.log(exporter);\n        this._excelExport = exporter;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      className: this.props.dataResult && this.props.dataResult.length > 0 || this.props.extractedColumnList && this.props.extractedColumnList.length > 0 ? \"active-paging\" : \"no-paging\",\n      style: {\n        height: this.props.gridHeight,\n        width: this.props.gridWidth\n      },\n      sortable: true,\n      resizable: true,\n      reorderable: false,\n      scrollable: this.props.scrollable,\n      pageable: this.props.pageable ? {\n        buttonCount: 5,\n        pageSizes: pageSizes,\n        previousNext: false\n      } : \"\",\n      groupable: this.props.groupable ? true : false,\n      detail: this.props.hideDetailBand ? false : this.detailBand,\n      expandField: this.props.expandField ? this.props.expandField : false,\n      onExpandChange: this.expandChange,\n      data: this.props.dataResult,\n      total: this.props.total\n    }, this.props.dataState, {\n      selectedField: \"selected\",\n      onRowClick: this.props.handleRowClick,\n      onDataStateChange: this.props.dataStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 29\n      }\n    }), this.props.isToolBarRequired ? /*#__PURE__*/React.createElement(GridToolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 37\n      }\n    }, this.props.isAddRequired === false ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-icon-rounded btn-circle solid-blue\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_ADD\"\n      }),\n      \"data-for\": \"tooltip-grid-wrap\",\n      hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(addId) === -1,\n      onClick: () => this.props.addRecord(addId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 49\n      }\n    })), this.props.isRefreshRequired === false ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REFRESH\"\n      }),\n      \"data-for\": \"tooltip-grid-wrap\",\n      onClick: () => this.props.reloadData(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSync,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 49\n      }\n    })), this.props.isDownloadPDFRequired === false ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DOWNLOADPDF\"\n      }),\n      \"data-for\": \"tooltip-grid-wrap\",\n      onClick: this.exportPDF,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFilePdf,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DOWNLOADEXCEL\"\n      }),\n      \"data-for\": \"tooltip-grid-wrap\",\n      onClick: this.exportExcel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileExcel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 45\n      }\n    }))) : \"\", this.props.extractedColumnList.map((item, index) => item.idsName && /*#__PURE__*/React.createElement(GridColumn, Object.assign({\n      key: index // data-tip={this.props.intl.formatMessage({ id: item.idsName })}\n      ,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      })\n    }, this.columnProps(item.dataField), {\n      width: item.width,\n      cell: row => row.rowType === \"groupHeader\" ? null : item.componentName === \"switch\" ? /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        disabled: item.needRights ? this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(this.props.controlMap.has(item.controlName) && this.props.controlMap.get(item.controlName).ncontrolcode) === -1 : false,\n        onChange: event => this.props.onSwitchChange({ ...this.props.switchParam,\n          selectedRecord: row[\"dataItem\"],\n          ncontrolCode: switchId\n        }, event),\n        checked: row[\"dataItem\"][item.switchFieldName] === item.switchStatus ? true : false,\n        name: row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 57\n        }\n      })) : item.componentName === \"checkbox\" ? /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FormCheckbox, {\n        name: row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        type: \"checkbox\",\n        value: row[\"dataItem\"][item.checkBoxField] !== 0 ? true : false,\n        isMandatory: false,\n        required: false //checked={row[\"dataItem\"][item.checkBoxField] === item.switchStatus ? true : false}\n        ,\n        checked: row[\"dataItem\"][item.checkBoxField] !== 0 ? true : false,\n        onChange: event => this.props.onInputOnChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 61\n        }\n      })) : /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"][item.dataField],\n        \"data-for\": \"tooltip-grid-wrap\",\n        className: selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 57\n        }\n      }, item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: row[\"dataItem\"][item.dataField],\n        defaultMessage: row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 80\n        }\n      }) : row[\"dataItem\"][item.dataField] // : row[\"dataItem\"][item.dataField] ? row[\"dataItem\"][item.dataField] :\n      //     this.props.jsonField ? row[\"dataItem\"][this.props.jsonField] &&\n      //         row[\"dataItem\"][this.props.jsonField][item.dataField]&&\n      //         row[\"dataItem\"][this.props.jsonField][item.dataField]['label'] ||\n      //         row[\"dataItem\"][this.props.jsonField][item.dataField] : \"-\"\n      ),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 37\n      }\n    }))), this.props.isActionRequired ? /*#__PURE__*/React.createElement(GridColumn, {\n      locked: true,\n      headerClassName: \"text-center\",\n      title: this.props.intl.formatMessage({\n        id: 'IDS_ACTION'\n      }),\n      sort: false,\n      cell: row => row.rowType === \"groupHeader\" ? null : /*#__PURE__*/React.createElement(\"td\", {\n        className: `k-grid-content-sticky k-command-cell selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''`,\n        style: {\n          left: '0',\n          right: '0',\n          borderRightWidth: '1px',\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"action-icons-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        \"data-for\": \"tooltip-grid-wrap\",\n        \"data-place\": \"left\",\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(editId) === -1,\n        onClick: () => this.props.fetchRecord({ ...this.props.editParam,\n          primaryKeyValue: row[\"dataItem\"][this.props.editParam.primaryKeyField],\n          editRow: row[\"dataItem\"],\n          ncontrolCode: editId\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPencilAlt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 65\n        }\n      })), \"        \", /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        \"data-place\": \"left\",\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(deleteId) === -1,\n        onClick: () => this.handleClickDelete({ ...this.props.deleteParam,\n          selectedRecord: row[\"dataItem\"],\n          ncontrolCode: deleteId\n        }, row),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faTrashAlt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon\",\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(downloadId) === -1,\n        onClick: () => this.props.viewDownloadFile({ ...this.props.masterdata,\n          ...this.props.downloadParam,\n          inputData: { ...row[\"dataItem\"],\n            userinfo: this.props.Login.userInfo\n          },\n          userinfo: this.props.Login.userInfo,\n          ncontrolCode: downloadId\n        }, row),\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_DOWNLOADFILE\"\n        }),\n        \"data-place\": \"left\",\n        \"data-for\": \"tooltip-grid-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCloudDownloadAlt //title={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADFILE\" })}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 65\n        }\n      })), this.props.isreportview ? /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon\" //hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(viewreport) === -1}\n        ,\n        onClick: () => this.props.viewReportFile({ ...this.props.masterdata,\n          ...this.props.downloadParam,\n          inputData: { ...row[\"dataItem\"],\n            userinfo: this.props.Login.userInfo\n          },\n          userinfo: this.props.Login.userInfo,\n          ncontrolCode: downloadId\n        }, row),\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_VIEWREPORT\"\n        }),\n        \"data-place\": \"left\",\n        \"data-for\": \"tooltip-grid-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faEye //title={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADFILE\" })} \n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 69\n        }\n      })) : \"\", /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_APPROVE\"\n        }),\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(approveId) === -1,\n        onClick: () => this.props.approveRecord(row, \"Approve\", approveId),\n        \"data-place\": \"left\",\n        \"data-for\": \"tooltip-grid-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faThumbsUp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_COPY\"\n        }),\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(copyId) === -1,\n        onClick: () => this.props.copyRecord(row, \"Copy\", copyId),\n        \"data-place\": \"left\",\n        \"data-for\": \"tooltip-grid-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCopy,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_COMPLETE\"\n        }),\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(completeId) === -1,\n        onClick: () => this.props.completeRecord(row[\"dataItem\"], \"Complete\", completeId),\n        \"data-place\": \"left\",\n        \"data-for\": \"tooltip-grid-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCheck,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_RESENT\"\n        }),\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(resentId) === -1,\n        onClick: () => this.props.reSent(row[\"dataItem\"], \"Resent\", resentId),\n        \"data-place\": \"left\",\n        \"data-for\": \"tooltip-grid-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faRedo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }),\n        \"data-place\": \"left\",\n        \"data-for\": \"tooltip-grid-wrap\",\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(cancelId) === -1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Image, {\n        src: reject,\n        alt: \"filer-icon\",\n        width: \"20\",\n        height: \"20\",\n        className: \"ActionIconColor img-normalize\",\n        onClick: () => this.props.cancelRecord(row[\"dataItem\"], \"Cancel\", cancelId),\n        \"data-place\": \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 65\n        }\n      })), this.props.actionIcons && this.props.actionIcons.length > 0 && this.props.actionIcons.map(action => /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon\",\n        \"data-tip\": action.title,\n        hidden: action.hidden === undefined ? true : action.hidden,\n        onClick: () => action.onClick(row[\"dataItem\"], action),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 65\n        }\n      }, getActionIcon(action.controlname))), this.props.hasControlWithOutRights && /*#__PURE__*/React.createElement(React.Fragment, null, this.props.showeditRecordWORights && /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }) //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} \n        ,\n        \"data-place\": \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPencilAlt //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\n        ,\n        name: \"deleteworights\",\n        onClick: () => this.props.editRecordWORights(row[\"dataItem\"]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 77\n        }\n      })), this.props.showdeleteRecordWORights && /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        \"data-for\": \"tooltip-grid-wrap\",\n        onClick: () => this.props.deleteRecordWORights(row[\"dataItem\"]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faTrashAlt //title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\n        ,\n        name: \"deleteworights\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 77\n        }\n      })))))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 37\n      }\n    }) : \"\"))), this.props.isToolBarRequired ? /*#__PURE__*/React.createElement(GridPDFExport, {\n      ref: element => {\n        this._pdfExport = element;\n      },\n      margin: \"1cm\" // paperSize= \"A4\"\n      ,\n      scale: 0.75,\n      fileName: \"Export.pdf\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      data: process(this.props.data || [], {\n        sort: this.props.dataState.sort,\n        filter: this.props.dataState.filter,\n        group: this.props.dataState.group\n      }),\n      group: this.props.dataState.group,\n      groupable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 34\n      }\n    }, this.props.extractedColumnList.map((item, index) => /*#__PURE__*/React.createElement(GridColumn, {\n      key: index,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      }),\n      field: item.dataField,\n      width: item.width,\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 49\n        }\n      }, item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: row[\"dataItem\"][item.dataField],\n        defaultMessage: row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 72\n        }\n      }) : row[\"dataItem\"][item.dataField]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 41\n      }\n    })))) : \"\"));\n  }\n\n  componentDidUpdate() {\n    ReactTooltip.rebuild();\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, undefined)(injectIntl(DataGrid));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/data-grid/data-grid.component.jsx"],"names":["React","FormattedMessage","injectIntl","Button","Nav","Image","Grid","GridColumn","GridToolbar","GridColumnMenuFilter","GridNoRecords","GridPDFExport","ExcelExport","ConfirmDialog","SimpleGrid","Row","Col","Card","FormGroup","FormLabel","AtTableWrap","FormControlStatic","FontIconWrap","FontAwesomeIcon","faCheck","faTrashAlt","faPencilAlt","faThumbsUp","faCopy","faPlus","faSync","faFileExcel","faFilePdf","faCloudDownloadAlt","faRedo","faEye","ColumnMenu","CustomSwitch","parse","toast","FormCheckbox","LocalizationProvider","connect","process","ReactTooltip","getActionIcon","ConfirmMessage","DataGrid","Component","constructor","props","detailBand","hasDynamicColSize","marginLeft","detailedFieldList","map","item","columnSize","idsName","dataItem","dataField","undefined","length","isIdsField","isHTML","hasChild","childList","get","parseInt","childMappingField","childColumnList","expandChange","event","isExpanded","expanded","aggregates","value","handleExpandChange","dataState","setState","exportExcel","dataResult","data","_excelExport","save","info","intl","formatMessage","id","exportPDF","_pdfExport","handleClickDelete","deleteParam","confirmMessage","confirm","deleteRecord","columnProps","field","hideColumnFilter","returntype","columnMenu","headerClassName","isColumnActive","active","filter","render","methodUrl","inputParam","addId","controlMap","has","concat","ncontrolcode","editId","deleteId","approveId","copyId","completeId","switchId","switchParam","operation","cancelId","downloadId","resentId","selectedId","pageSizes","Login","settings","split","setting","actionColWidth","userInfo","slanguagetypecode","sort","group","exporter","extractedColumnList","height","gridHeight","width","gridWidth","scrollable","pageable","buttonCount","previousNext","groupable","hideDetailBand","expandField","total","handleRowClick","dataStateChange","isToolBarRequired","isAddRequired","userRoleControlRights","indexOf","addRecord","isRefreshRequired","reloadData","isDownloadPDFRequired","index","row","rowType","componentName","textAlign","primaryKeyField","dataIndex","columnIndex","needRights","controlName","onSwitchChange","selectedRecord","ncontrolCode","switchFieldName","switchStatus","checkBoxField","onInputOnChange","isActionRequired","left","right","borderRightWidth","fetchRecord","editParam","primaryKeyValue","editRow","viewDownloadFile","masterdata","downloadParam","inputData","userinfo","isreportview","viewReportFile","approveRecord","copyRecord","completeRecord","reSent","reject","cancelRecord","actionIcons","action","title","hidden","onClick","controlname","hasControlWithOutRights","showeditRecordWORights","editRecordWORights","showdeleteRecordWORights","deleteRecordWORights","element","componentDidUpdate","rebuild","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Button, Nav, Image } from 'react-bootstrap';\r\nimport { Grid, GridColumn, GridToolbar, GridColumnMenuFilter, GridNoRecords } from '@progress/kendo-react-grid';\r\nimport { GridPDFExport } from '@progress/kendo-react-pdf';\r\nimport { ExcelExport } from '@progress/kendo-react-excel-export';\r\nimport ConfirmDialog from '../confirm-alert/confirm-alert.component';\r\nimport SimpleGrid from './SimpleGrid';\r\nimport { Row, Col, Card, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { AtTableWrap, FormControlStatic, FontIconWrap } from '../data-grid/data-grid.styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faCheck, faTrashAlt, faPencilAlt, faThumbsUp,\r\n    faCopy, faPlus, faSync, faFileExcel, faFilePdf, faCloudDownloadAlt, faRedo, faEye\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport ColumnMenu from './ColumnMenu';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport reject from '../../assets/image/reject.svg'\r\nimport CustomSwitch from '../custom-switch/custom-switch.component';// import '../../assets/styles/unicode-font.css';\r\nimport parse from 'html-react-parser';\r\nimport { toast } from 'react-toastify';\r\nimport FormCheckbox from '../form-checkbox/form-checkbox.component';\r\nimport {  LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { getActionIcon } from '../HoverIcons';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\n\r\n\r\n\r\nclass DataGrid extends React.Component {\r\n\r\n    _pdfExport;\r\n    _excelExport;\r\n    constructor(props) {\r\n        super(props);\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n    }\r\n\r\n\r\n    detailBand = (props) => {\r\n\r\n        return (\r\n            <Row bsPrefix=\"margin_class\">\r\n                <Col md={12}>\r\n                    {this.props.hasDynamicColSize ?\r\n                        <Card>\r\n                            <Card.Header><FormattedMessage id=\"IDS_MOREINFO\" message=\"More Info\" /></Card.Header>\r\n                            <Card.Body className=\"form-static-wrap\">\r\n                                <Row style={{ marginLeft: -18 }}>\r\n                                    {this.props.detailedFieldList.map((item) => {\r\n                                        return (\r\n\r\n                                            <Col md={item.columnSize}>\r\n                                                <FormGroup>\r\n                                                    <FormLabel><FormattedMessage id={item.idsName} message={item.idsName} /></FormLabel>\r\n                                                    <FormControlStatic>\r\n                                                        {\r\n                                                            props.dataItem[item.dataField] === undefined ||\r\n                                                                props.dataItem[item.dataField] === null ||\r\n                                                                props.dataItem[item.dataField].length === 0 ? '-' :\r\n                                                                item.isIdsField ? <FormattedMessage id={props.dataItem[item.dataField]} message={props.dataItem[item.dataField]} /> :\r\n                                                                    item.isHTML ? parse(props.dataItem[item.dataField]) : props.dataItem[item.dataField]}\r\n                                                    </FormControlStatic>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                        )\r\n                                    })}\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                        : this.props.hasChild ?\r\n                            <SimpleGrid childList={this.props.childList.get(parseInt(props.dataItem[this.props.childMappingField])) || []}\r\n                                extractedColumnList={this.props.childColumnList} />\r\n                            :\r\n                            <Card>\r\n                                <Card.Header><FormattedMessage id=\"IDS_MOREINFO\" message=\"More Info\" /></Card.Header>\r\n                                <Card.Body className=\"form-static-wrap\">\r\n                                    <Row>\r\n                                        {this.props.detailedFieldList.map((item) => {\r\n                                            return (\r\n\r\n                                                <Col md={6}>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id={item.idsName} message={item.idsName} /></FormLabel>\r\n                                                        <FormControlStatic>\r\n                                                            {props.dataItem[item.dataField] === undefined || props.dataItem[item.dataField] === null || props.dataItem[item.dataField].length === 0 ? '-' :\r\n                                                                item.isIdsField ? <FormattedMessage id={props.dataItem[item.dataField]} message={props.dataItem[item.dataField]} /> : item.isHTML ? parse(props.dataItem[item.dataField]) : props.dataItem[item.dataField]}\r\n                                                        </FormControlStatic>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                            )\r\n                                        })}\r\n                                    </Row>\r\n                                </Card.Body>\r\n                            </Card>}\r\n                </Col> </Row>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    expandChange = (event) => {\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined ?\r\n                event.dataItem.aggregates : event.dataItem.expanded;\r\n\r\n        if (this.props.hasChild && event.value === true) {\r\n            event.dataItem.expanded = !isExpanded;\r\n            this.props.handleExpandChange(event, this.props.dataState)\r\n        }\r\n        else {\r\n            event.dataItem.expanded = !isExpanded;\r\n            this.setState({ isExpanded });\r\n        }\r\n    }\r\n\r\n    exportExcel = () => {\r\n        if (this.props.dataResult.data.length > 0) {\r\n            this._excelExport.save();\r\n        }\r\n        else\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_NODATATOEXPORT\" }));\r\n    }\r\n\r\n    exportPDF = () => {\r\n        if (this.props.dataResult.data.length > 0)\r\n            this._pdfExport.save();\r\n        else\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_NODATATOEXPORT\" }));\r\n    }\r\n\r\n    columnProps(field) {\r\n        if (!this.props.hideColumnFilter) {\r\n\r\n            const returntype = {\r\n                field: field,\r\n                columnMenu: ColumnMenu,\r\n                headerClassName: this.isColumnActive(field, this.props.dataState) ? 'active' : ''\r\n            }\r\n            return returntype;\r\n        }\r\n    }\r\n\r\n    isColumnActive(field, dataState) {\r\n        return GridColumnMenuFilter.active(field, dataState.filter)\r\n    }\r\n\r\n    handleClickDelete = (deleteParam) => {\r\n        //this.props.deleteRecord(deleteParam);\r\n\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.props.deleteRecord(deleteParam));\r\n    }\r\n\r\n    render() {\r\n\r\n        // console.log(\"controlMap:\", this.props.controlMap, this.props.userRoleControlRights, this.props.Login.userInfo.slanguagetypecode);\r\n        //  loadMessages(messages[this.props.Login.userInfo.slanguagetypecode], \"lang\");\r\n        const methodUrl = this.props.methodUrl ? this.props.methodUrl : (this.props.inputParam && this.props.inputParam.methodUrl);\r\n\r\n        const addId = this.props.controlMap && this.props.controlMap.has(\"Add\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Add\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const editId = this.props.controlMap && this.props.controlMap.has(\"Edit\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Edit\".concat(methodUrl)).ncontrolcode;\r\n\r\n        // const viewId = this.props.controlMap.has(\"View\".concat(methodUrl))\r\n        //     && this.props.controlMap.get(\"View\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const deleteId = this.props.controlMap && this.props.controlMap.has(\"Delete\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Delete\".concat(methodUrl)).ncontrolcode;\r\n\r\n        // const defaultId = this.props.controlMap && this.props.controlMap.has(\"Default\".concat(methodUrl))\r\n        //     && this.props.controlMap.get(\"Default\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const approveId = this.props.controlMap && this.props.controlMap.has(\"Approve\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Approve\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const copyId = this.props.controlMap && this.props.inputParam && this.props.controlMap.has(\"Copy\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Copy\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const completeId = this.props.controlMap && this.props.controlMap.has(\"Complete\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Complete\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const switchId = this.props.controlMap && this.props.switchParam && this.props.controlMap.has(this.props.switchParam.operation.concat(methodUrl))\r\n            && this.props.controlMap.get(this.props.switchParam.operation.concat(methodUrl)).ncontrolcode;\r\n\r\n        const cancelId = this.props.controlMap && this.props.controlMap.has(\"Cancel\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Cancel\".concat(methodUrl)).ncontrolcode;\r\n\r\n        // const receiveGoodsId = this.props.controlMap.has(\"Receive\".concat(methodUrl))\r\n        //     && this.props.controlMap.get(\"Receive\".concat(methodUrl)).ncontrolcode;\r\n        const downloadId = this.props.controlMap && this.props.controlMap.has(\"Download\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Download\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const resentId = this.props.controlMap && this.props.controlMap.has(\"Resent\")\r\n            && this.props.controlMap.get(\"Resent\").ncontrolcode;\r\n\r\n        const selectedId = this.props.selectedId;\r\n        // const confirmMessage = new ConfirmMessage();\r\n        //console.log(\"props:\",this.props);\r\n        const pageSizes = this.props.pageSizes ? this.props.pageSizes : this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting))\r\n        return (\r\n            <>\r\n                <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' />\r\n                <AtTableWrap className=\"at-list-table\" actionColWidth={this.props.actionColWidth ? this.props.actionColWidth : \"150px\"} >\r\n                    {/* <Tooltip openDelay={100} position=\"bottom\" tooltipClassName=\"ad-tooltip\" anchorElement=\"element\" parentTitle={true}> */}\r\n                    <LocalizationProvider language={this.props.Login.userInfo.slanguagetypecode}>\r\n                        <ExcelExport\r\n                            data={process(this.props.data || [], { sort: this.props.dataState.sort, filter: this.props.dataState.filter, group: this.props.dataState.group }).data}\r\n                            filterable={true}\r\n                            // fileName={this.props.inputParam && this.props.intl.formatMessage({ id: this.props.inputParam.displayName })}\r\n                            group={this.props.dataState.group}\r\n                            ref={(exporter) => {\r\n                                // console.log(exporter);\r\n                                this._excelExport = exporter;\r\n                            }}>\r\n\r\n\r\n                            <Grid\r\n                                className={((this.props.dataResult && this.props.dataResult.length > 0) || (this.props.extractedColumnList && this.props.extractedColumnList.length > 0)) ? \"active-paging\" : \"no-paging\"}\r\n                                style={{ height: this.props.gridHeight, width: this.props.gridWidth }}\r\n                                sortable\r\n                                resizable\r\n                                reorderable={false}\r\n                                scrollable={this.props.scrollable}\r\n                                pageable={this.props.pageable ? { buttonCount: 5, pageSizes: pageSizes, previousNext: false } : \"\"}\r\n                                groupable={this.props.groupable ? true : false}\r\n                                detail={this.props.hideDetailBand ? false : this.detailBand}\r\n                                expandField={this.props.expandField ? this.props.expandField : false}\r\n                                onExpandChange={this.expandChange}\r\n                                data={this.props.dataResult}\r\n                                total={this.props.total}\r\n                                {...this.props.dataState}\r\n                                selectedField=\"selected\"\r\n                                onRowClick={this.props.handleRowClick}\r\n                                onDataStateChange={this.props.dataStateChange}>\r\n                                {/* <GridNoRecords>\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_NORECORDSAVAILABLE\" })}\r\n                                </GridNoRecords> */}\r\n                                {this.props.isToolBarRequired ?\r\n                                    <GridToolbar>\r\n                                        {this.props.isAddRequired === false ? \"\" :\r\n                                            <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" variant=\"link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                data-for=\"tooltip-grid-wrap\"\r\n                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(addId) === -1}\r\n                                                onClick={() => this.props.addRecord(addId)}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        }\r\n                                        {this.props.isRefreshRequired === false ? \"\" :\r\n                                            <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}\r\n                                                data-for=\"tooltip-grid-wrap\"\r\n                                                onClick={() => this.props.reloadData()}>\r\n                                                <FontAwesomeIcon icon={faSync} />\r\n                                            </Button>\r\n                                        }\r\n                                        {this.props.isDownloadPDFRequired === false ? \"\" :\r\n                                            <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADPDF\" })}\r\n                                                data-for=\"tooltip-grid-wrap\"\r\n                                                onClick={this.exportPDF}>\r\n                                                <FontAwesomeIcon icon={faFilePdf} />\r\n                                            </Button>\r\n                                        }\r\n                                        {/* {this.props.isDownloadExcelRequired === false ? \"\" : */}\r\n                                        <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADEXCEL\" })}\r\n                                            data-for=\"tooltip-grid-wrap\"\r\n                                            onClick={this.exportExcel}>\r\n                                            <FontAwesomeIcon icon={faFileExcel} />\r\n                                        </Button>\r\n                                        {/* } */}\r\n                                        {/* {this.props.isExportExcelRequired === true ?\r\n                                            <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EXPORTPDF\" })}\r\n                                                data-for=\"tooltip-grid-wrap\"\r\n                                                onClick={() => this.props.exportExcelNew()}>\r\n                                                <FontAwesomeIcon icon={faFileExcel} />\r\n                                            </Button>\r\n                                            : \"\"\r\n                                        } */}\r\n                                        {/* <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                            title=\"Download Excel\"\r\n                                            onClick={this.exportExcel}>\r\n                                            <FontAwesomeIcon icon={faFileExcel} />\r\n                                        </Button> */}\r\n\r\n                                    </GridToolbar>\r\n                                    : \"\"}\r\n\r\n                                {this.props.extractedColumnList.map((item, index) =>\r\n                                    item.idsName &&\r\n                                    <GridColumn key={index}\r\n                                        // data-tip={this.props.intl.formatMessage({ id: item.idsName })}\r\n                                        title={this.props.intl.formatMessage({ id: item.idsName })}\r\n                                        {...this.columnProps(item.dataField)}\r\n                                        width={item.width}\r\n                                        cell={(row) => (\r\n                                            row.rowType === \"groupHeader\" ? null :\r\n                                                item.componentName === \"switch\" ?\r\n                                                    <td style={{ textAlign: \"center\" }}>\r\n                                                        <CustomSwitch type=\"switch\" id={row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex}\r\n                                                            disabled={item.needRights ? this.props.userRoleControlRights\r\n                                                                && this.props.userRoleControlRights.indexOf(\r\n                                                                    this.props.controlMap.has(item.controlName) && this.props.controlMap.get(item.controlName).ncontrolcode\r\n                                                                ) === -1 : false}\r\n                                                            onChange={(event) => this.props.onSwitchChange({ ...this.props.switchParam, selectedRecord: row[\"dataItem\"], ncontrolCode: switchId }, event)}\r\n                                                            checked={row[\"dataItem\"][item.switchFieldName] === item.switchStatus ? true : false}\r\n                                                            name={row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                    </td> :\r\n                                                    item.componentName === \"checkbox\" ?\r\n                                                        <td>\r\n                                                            <FormCheckbox\r\n                                                                name={row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex}\r\n                                                                type=\"checkbox\"\r\n                                                                value={row[\"dataItem\"][item.checkBoxField] !== 0 ? true : false}\r\n                                                                isMandatory={false}\r\n                                                                required={false}\r\n                                                                //checked={row[\"dataItem\"][item.checkBoxField] === item.switchStatus ? true : false}\r\n                                                                checked={row[\"dataItem\"][item.checkBoxField] !== 0 ? true : false}\r\n                                                                onChange={(event) => this.props.onInputOnChange(event)}\r\n                                                            />\r\n                                                        </td> :\r\n\r\n                                                        <td data-tip={row[\"dataItem\"][item.dataField]} data-for=\"tooltip-grid-wrap\"\r\n                                                            className={selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''}>\r\n\r\n                                                            {item.isIdsField ? <FormattedMessage id={row[\"dataItem\"][item.dataField]}\r\n                                                                defaultMessage={row[\"dataItem\"][item.dataField]} />\r\n                                                                : row[\"dataItem\"][item.dataField]\r\n\r\n                                                                // : row[\"dataItem\"][item.dataField] ? row[\"dataItem\"][item.dataField] :\r\n                                                                //     this.props.jsonField ? row[\"dataItem\"][this.props.jsonField] &&\r\n                                                                //         row[\"dataItem\"][this.props.jsonField][item.dataField]&&\r\n                                                                //         row[\"dataItem\"][this.props.jsonField][item.dataField]['label'] ||\r\n                                                                //         row[\"dataItem\"][this.props.jsonField][item.dataField] : \"-\"\r\n\r\n                                                            }\r\n\r\n                                                        </td>\r\n                                        )}\r\n                                    />\r\n                                )}\r\n\r\n                                {this.props.isActionRequired ?\r\n                                    <GridColumn\r\n                                        locked\r\n                                        headerClassName=\"text-center\"\r\n                                        title={this.props.intl.formatMessage({ id: 'IDS_ACTION' })}\r\n                                        sort={false}\r\n                                        cell={(row) => (\r\n\r\n                                            row.rowType === \"groupHeader\" ? null :\r\n                                                <td className={`k-grid-content-sticky k-command-cell selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''`} style={{ left: '0', right: '0', borderRightWidth: '1px', textAlign: 'center' }}>\r\n                                                    <>\r\n                                                        <Nav.Link className=\"action-icons-wrap\">\r\n                                                            <FontIconWrap className=\"d-font-icon\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                data-for=\"tooltip-grid-wrap\"\r\n                                                                data-place=\"left\"\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                onClick={() => this.props.fetchRecord({ ...this.props.editParam, primaryKeyValue: row[\"dataItem\"][this.props.editParam.primaryKeyField], editRow: row[\"dataItem\"], ncontrolCode: editId })}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                            </FontIconWrap>\r\n\r\n                                                            {/* <FontAwesomeIcon icon={faEye}\r\n                                                    title={this.props.intl.formatMessage({ id: \"IDS_VIEW\" })}\r\n                                                    hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(viewId) === -1}\r\n                                                    onClick={() => this.props.viewRecord({...this.props.viewParam, primaryKeyValue:row[\"dataItem\"][this.props.viewParam.primaryKeyField], viewRow:row[\"dataItem\"]})}/>\r\n                                                 */}        <FontIconWrap className=\"d-font-icon\" data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })} data-place=\"left\"\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                onClick={() => this.handleClickDelete({ ...this.props.deleteParam, selectedRecord: row[\"dataItem\"], ncontrolCode: deleteId }, row)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                {/* <ConfirmDialog\r\n                                                                    name=\"deleteMessage\"\r\n                                                                    cardTitle={this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" })}\r\n                                                                    title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    message={this.props.intl.formatMessage({ id: \"IDS_DELETECONFIRMMSG\" })}\r\n                                                                    doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                                    doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                    icon={faTrashAlt}\r\n                                                                    handleClickDelete={() => this.handleClickDelete({ ...this.props.deleteParam, selectedRecord: row[\"dataItem\"], ncontrolCode: deleteId }, row)}\r\n                                                                /> */}\r\n                                                            </FontIconWrap>\r\n\r\n                                                            <FontIconWrap className=\"d-font-icon\"\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(downloadId) === -1}\r\n                                                                onClick={() => this.props.viewDownloadFile({ ...this.props.masterdata, ...this.props.downloadParam, inputData: { ...row[\"dataItem\"], userinfo: this.props.Login.userInfo }, userinfo: this.props.Login.userInfo, ncontrolCode: downloadId }, row)}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADFILE\" })} data-place=\"left\"\r\n                                                                data-for=\"tooltip-grid-wrap\"\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faCloudDownloadAlt} //title={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADFILE\" })}\r\n                                                                />\r\n                                                            </FontIconWrap>\r\n                                                            {this.props.isreportview ?\r\n                                                                <FontIconWrap className=\"d-font-icon\"\r\n                                                                    //hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(viewreport) === -1}\r\n                                                                    onClick={() => this.props.viewReportFile({ ...this.props.masterdata, ...this.props.downloadParam, inputData: { ...row[\"dataItem\"], userinfo: this.props.Login.userInfo }, userinfo: this.props.Login.userInfo, ncontrolCode: downloadId }, row)}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_VIEWREPORT\" })} data-place=\"left\"\r\n                                                                    data-for=\"tooltip-grid-wrap\"\r\n                                                                >\r\n\r\n                                                                    <FontAwesomeIcon icon={faEye} //title={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADFILE\" })} \r\n                                                                    />\r\n                                                                </FontIconWrap>\r\n                                                                : \"\"}\r\n                                                            {/* <FontAwesomeIcon icon={faTrashAlt}\r\n                                                    title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                    hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                    onClick = {() => confirmMessage.confirm(\r\n                                                        \"deleteMessage\",\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                        () => this.handleClickDelete({ ...this.props.deleteParam, selectedRecord: row[\"dataItem\"], ncontrolCode: deleteId }, row)\r\n                                                    )}\r\n                                                /> */}\r\n\r\n                                                            {/* <FontAwesomeIcon icon={faThumbtack}\r\n                                                            title={this.props.intl.formatMessage({ id: \"IDS_SETDEFAULT\" })}\r\n                                                            hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(defaultId) === -1}\r\n                                                            onClick={() => this.props.defaultRecord({ ...this.props.defaultParam, selectedRecord: row[\"dataItem\"], ncontrolCode: defaultId }, row)} /> */}\r\n                                                            <FontIconWrap className=\"d-font-icon\" data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                onClick={() => this.props.approveRecord(row, \"Approve\", approveId)} data-place=\"left\" data-for=\"tooltip-grid-wrap\"\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faThumbsUp} />\r\n                                                            </FontIconWrap>\r\n                                                            <FontIconWrap className=\"d-font-icon\" data-tip={this.props.intl.formatMessage({ id: \"IDS_COPY\" })}\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(copyId) === -1}\r\n                                                                onClick={() => this.props.copyRecord(row, \"Copy\", copyId)} data-place=\"left\" data-for=\"tooltip-grid-wrap\">\r\n                                                                <FontAwesomeIcon icon={faCopy} />\r\n                                                            </FontIconWrap>\r\n\r\n                                                            <FontIconWrap className=\"d-font-icon\" data-tip={this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" })}\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(completeId) === -1}\r\n                                                                onClick={() => this.props.completeRecord(row[\"dataItem\"], \"Complete\", completeId)} data-place=\"left\" data-for=\"tooltip-grid-wrap\">\r\n                                                                <FontAwesomeIcon icon={faCheck} />\r\n                                                            </FontIconWrap>\r\n\r\n                                                            <FontIconWrap className=\"d-font-icon\" data-tip={this.props.intl.formatMessage({ id: \"IDS_RESENT\" })}\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(resentId) === -1}\r\n                                                                onClick={() => this.props.reSent(row[\"dataItem\"], \"Resent\", resentId)}\r\n                                                                data-place=\"left\" data-for=\"tooltip-grid-wrap\">\r\n                                                                <FontAwesomeIcon icon={faRedo} />\r\n                                                            </FontIconWrap>\r\n\r\n\r\n                                                            <Nav.Link data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })} data-place=\"left\" data-for=\"tooltip-grid-wrap\"\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(cancelId) === -1} >\r\n                                                                <Image src={reject} alt=\"filer-icon\" width=\"20\" height=\"20\" className=\"ActionIconColor img-normalize\"\r\n                                                                    onClick={() => this.props.cancelRecord(row[\"dataItem\"], \"Cancel\", cancelId)} data-place=\"left\" />\r\n                                                            </Nav.Link>\r\n                                                            {/* <Button variant=\"link\" title={this.props.intl.formatMessage({ id: \"IDS_RECEIVE\" })}\r\n                                                    className=\"mr-2 action-icons-wrap\"\r\n                                                    hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(receiveGoodsId) === -1}\r\n                                                    onClick={() => this.props.receiveRecord({ ...this.props.receiveParam, selectedRecord: row[\"dataItem\"], ncontrolCode: receiveGoodsId })}>\r\n                                                    <Image src={checkedIcon} alt=\"filer-icon\" width=\"20\" height=\"20\" />\r\n                                                </Button> */}\r\n                                                            {this.props.actionIcons && this.props.actionIcons.length > 0 && this.props.actionIcons.map(action =>\r\n                                                                <FontIconWrap\r\n                                                                    className=\"d-font-icon\"\r\n                                                                    data-tip={action.title}\r\n                                                                    hidden={action.hidden === undefined ? true : action.hidden}\r\n                                                                    onClick={() => action.onClick(row[\"dataItem\"], action)}>\r\n                                                                    {getActionIcon(action.controlname)}\r\n                                                                </FontIconWrap>\r\n                                                            )}\r\n                                                            {this.props.hasControlWithOutRights &&\r\n                                                                <>\r\n                                                                    {this.props.showeditRecordWORights &&\r\n                                                                        <FontIconWrap className=\"d-font-icon\" data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                            //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} \r\n                                                                            data-place=\"left\">\r\n                                                                            <FontAwesomeIcon icon={faPencilAlt}\r\n                                                                                //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                                name={\"deleteworights\"}\r\n                                                                                onClick={() => this.props.editRecordWORights(row[\"dataItem\"])}\r\n                                                                            />\r\n                                                                        </FontIconWrap>\r\n                                                                    }\r\n                                                                    {\r\n                                                                        this.props.showdeleteRecordWORights &&\r\n                                                                        <FontIconWrap className=\"d-font-icon\" data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                            data-for=\"tooltip-grid-wrap\"\r\n                                                                            onClick={() => this.props.deleteRecordWORights(row[\"dataItem\"])}>\r\n                                                                            <FontAwesomeIcon icon={faTrashAlt}\r\n                                                                                //title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                                name={\"deleteworights\"}\r\n\r\n                                                                            />\r\n                                                                        </FontIconWrap>\r\n                                                                    }\r\n\r\n                                                                </>\r\n                                                            }\r\n                                                        </Nav.Link>\r\n                                                    </>\r\n\r\n                                                </td>\r\n                                        )}\r\n                                    /> : \"\"}\r\n                            </Grid>\r\n                        </ExcelExport>\r\n                    </LocalizationProvider >\r\n                    {/* </Tooltip> */}\r\n                    {\r\n                        this.props.isToolBarRequired ?\r\n                            <GridPDFExport\r\n                                ref={(element) => { this._pdfExport = element; }}\r\n                                margin=\"1cm\"\r\n                                // paperSize= \"A4\"\r\n                                scale={0.75}\r\n                                fileName=\"Export.pdf\"\r\n\r\n                            >\r\n                                {<Grid data={process(this.props.data || [], { sort: this.props.dataState.sort, filter: this.props.dataState.filter, group: this.props.dataState.group })} group={this.props.dataState.group} groupable={true}>\r\n                                    {this.props.extractedColumnList.map((item, index) =>\r\n                                        <GridColumn key={index} title={this.props.intl.formatMessage({ id: item.idsName })}\r\n                                            field={item.dataField}\r\n                                            width={item.width}\r\n\r\n                                            cell={(row) => (\r\n                                                <td>\r\n                                                    {item.isIdsField ? <FormattedMessage id={row[\"dataItem\"][item.dataField]} defaultMessage={row[\"dataItem\"][item.dataField]} />\r\n                                                        : row[\"dataItem\"][item.dataField]}\r\n                                                </td>)}\r\n                                        />\r\n                                    )}\r\n\r\n                                </Grid>}\r\n                            </GridPDFExport>\r\n                            : \"\"\r\n                    }\r\n                </AtTableWrap >\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        ReactTooltip.rebuild();\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, undefined)(injectIntl(DataGrid));"]},"metadata":{},"sourceType":"module"}