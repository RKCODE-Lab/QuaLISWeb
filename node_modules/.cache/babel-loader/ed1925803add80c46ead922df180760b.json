{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, constructOptionList, rearrangeDateFormat, getFilterConditionsBasedonDataType, queryBuilderfillingColumns } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { designProperties, SampleType, formCode } from '../components/Enumeration';\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nconst {\n  checkTree,\n  loadTree\n} = QbUtils;\nexport function getDesignTemplateMappingDetail(designtemplatemapping, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"designtemplatemapping/getDesignTemplateMapping\", {\n      ndesigntemplatemappingcode: designtemplatemapping.ndesigntemplatemappingcode,\n      nsampletypecode: designtemplatemapping.nsampletypecode,\n      nregtypecode: designtemplatemapping.nregtypecode,\n      nregsubtypecode: designtemplatemapping.nregsubtypecode,\n      userinfo: userInfo,\n      nformcode: designtemplatemapping.nformcode\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getDesignTemplateMappingComboService(param) {\n  return function (dispatch) {\n    const screenName = param.screenName;\n    const operation = param.operation;\n    const userInfo = param.userInfo;\n    const nsampletypecode = param.realSampleValue;\n    const nregtypecode = param.realRegTypeValue;\n    const nregsubtypecode = param.realRegSubTypeValue;\n    const ncontrolCode = param.controlId;\n    const moduleTypeArray = param.moduleTypeArray; //if (//(operation === \"create\") && (nsampletypecode != -1) && (nregtypecode != -1) && (nregsubtypecode != -1)) {\n\n    let isValid = true; //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n\n    if (nsampletypecode !== SampleType.Masters && nsampletypecode !== SampleType.GOODSIN && nsampletypecode !== SampleType.PROTOCOL) {\n      if (nsampletypecode != -1 && nregtypecode != -1 && nregsubtypecode != -1) {\n        isValid = true;\n      } else {\n        isValid = false;\n      }\n    }\n\n    if (isValid) {\n      const designtemplatemappingService = rsapi.post(\"designtemplatemapping/getDynamicPreRegDesign\", {\n        userinfo: userInfo,\n        nsampletypecode,\n        nregtypecode,\n        nregsubtypecode\n      });\n      let urlArray = [designtemplatemappingService];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = {\n          nnewmodule: moduleTypeArray[0]\n        };\n        let designtemplatemappingMap = constructOptionList(response[0].data.DesignTemplateMapping || [], \"nreactregtemplatecode\", \"sregtemplatename\", undefined, undefined, true);\n        const designtemplatemappingList = designtemplatemappingMap.get(\"OptionList\");\n        let subSampleTemplateList = [];\n        let testListFields = {};\n        let qualisModuleList = []; //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n\n        if (nsampletypecode !== SampleType.Masters && nsampletypecode !== SampleType.GOODSIN && nsampletypecode !== SampleType.PROTOCOL) {\n          designtemplatemappingMap = constructOptionList(response[0].data.SubSampleTemplate || [], \"nreactregtemplatecode\", \"sregtemplatename\", undefined, undefined, true);\n          subSampleTemplateList = designtemplatemappingMap.get(\"OptionList\");\n          testListFields = response[0].data.TestListFields.jsondata;\n        }\n\n        if (nsampletypecode === SampleType.Masters) {\n          const qualisModuleMap = constructOptionList(response[0].data.DT_QualisModule || [], \"nmodulecode\", \"sdisplayname\", undefined, undefined, true);\n          qualisModuleList = qualisModuleMap.get(\"OptionList\");\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            designtemplatemappingList,\n            subSampleTemplateList,\n            testListFields,\n            operation,\n            screenName,\n            selectedRecord,\n            openModal: true,\n            ncontrolCode,\n            loading: false,\n            designTemplateQualisModule: qualisModuleList\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTALLVALUESINFILTER\"\n      }));\n    }\n  };\n}\nexport function reloadDesignTemplateMapping(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"designtemplatemapping/getDesignTemplateMapping\", { ...inputParam.inputData\n    }).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      }; //if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\n      //    inputParam.searchRef.current.value = \"\";\n\n      masterData['searchedData'] = undefined; //}\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTMPFilterRegType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"designtemplatemapping/getTemplateRegType\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getTMPFilterRegSubType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"designtemplatemapping/getTemplateRegSubType\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getTMPFilterSubmit(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"designtemplatemapping/getFilterSubmit\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      let listdesigntemplatemapping = sortData(response.data.DesignTemplateMapping);\n      masterData = { ...masterData,\n        listdesigntemplatemapping\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getMappedFieldProps(inputParam) {\n  return function (dispatch) {\n    const fieldService = rsapi.post('designtemplatemapping/getMappedFieldProps', {\n      designtemplatemapping: inputParam.inputData.designtemplatemapping,\n      userinfo: inputParam.inputData.userinfo\n    });\n    let urlArray = [fieldService];\n\n    if (inputParam.inputData[\"napprovalconfigcode\"]) {\n      const regSubTypeVersionService = rsapi.post(\"registrationsubtype/getApprovedVersion\", {\n        napprovalconfigcode: inputParam.inputData.napprovalconfigcode\n      });\n      urlArray.push(regSubTypeVersionService);\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let dataResult = {};\n      let designData = response[0].data.jsondataobj || {}; //console.log(\"design:\", designData);\n\n      if (inputParam[\"SampleType\"] === SampleType.Masters) {\n        // Object.keys(designData).map(formcode => {\n        dataResult = [];\n        designData.mastertemplatefields.map(field => field[designProperties.LISTITEM] !== \"label\" && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n        dataResult.push({\n          // label: field[designProperties.VALUE],\n          label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\n          griditem: designData.griditem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n          gridmoreitem: designData.gridmoreitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n          realData: field\n        })); // })                   \n      } else if (inputParam[\"SampleType\"] === SampleType.GOODSIN) {\n        dataResult = [];\n        designData.templatefields.map(field => field[designProperties.LISTITEM] !== \"label\" && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n        dataResult.push({\n          // label: field[designProperties.VALUE],\n          label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\n          griditem: designData.griditem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n          gridmoreitem: designData.gridmoreitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n          realData: field\n        }));\n      } //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n      else if (inputParam[\"SampleType\"] === SampleType.PROTOCOL) {\n        dataResult = [];\n        designData.templatefields.map(field => field[designProperties.LISTITEM] !== \"label\" && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n        dataResult.push({\n          // label: field[designProperties.VALUE],\n          label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\n          listItem: designData.listItem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n          displayFields: designData.displayFields.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n          realData: field\n        }));\n      } else {\n        // const regSubTypeVersionData = response[1].data;\n        //if(regSubTypeVersionData &&  regSubTypeVersionData.jsondata.nneedsubsample === true){\n        if (inputParam.operation === \"configuresubsample\") {\n          Object.keys(designData).map(formcode => {\n            dataResult[formcode] = [];\n            designData.subsampletemplatefields.map(field => !Array.isArray(designData[formcode]) && formcode !== \"senttostoragefields\" && field[designProperties.LISTITEM] !== \"label\" && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n            dataResult[formcode].push({\n              //label: field[designProperties.VALUE],\n              label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\n              subsamplelistitem: designData[formcode].subsamplelistitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n              realData: field\n            }));\n          });\n        } else {\n          Object.keys(designData).map(formcode => {\n            dataResult[formcode] = [];\n            designData.sampletemplatefields.map(field => !Array.isArray(designData[formcode]) && formcode !== \"senttostoragefields\" && (formcode !== \"143\" ? field[designProperties.VALUE] === \"sreportno\" ? false : true : true) && field[designProperties.LISTITEM] !== \"label\" && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n            dataResult[formcode].push({\n              // label: field[designProperties.VALUE],\n              label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\n              sampledisplayfields: designData[formcode].sampledisplayfields.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n              // samplelistitem: designData[formcode].samplelistitem.find(val => val[\"2\"] === field[designProperties.VALUE]) === undefined ? \"none\" : true,\n              samplelistitem: designData[formcode].samplelistitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n              samplelistmoreitems: designData[formcode].samplelistmoreitems ? designData[formcode].samplelistmoreitems.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined : false,\n              samplegriditem: designData[formcode].samplegriditem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n              samplegridmoreitem: designData[formcode].samplegridmoreitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n              samplefilteritem: designData[formcode].samplefilteritem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n              realData: field\n            }));\n          });\n        }\n      } // console.log(\"response[1].data:\", response[1].data);\n\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          loading: false,\n          designData: designData,\n          //response[0].data.jsondataobj,\n          approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data : undefined,\n          dataResult,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function combinationUniqueConfigService(inputParam) {\n  return function (dispatch) {\n    const fieldService = rsapi.post('designtemplatemapping/getMappedFieldProps', {\n      designtemplatemapping: inputParam.inputData.designtemplatemapping,\n      userinfo: inputParam.inputData.userinfo\n    });\n    let urlArray = [fieldService];\n\n    if (inputParam.inputData[\"napprovalconfigcode\"]) {\n      const regSubTypeVersionService = rsapi.post(\"registrationsubtype/getApprovedVersion\", {\n        napprovalconfigcode: inputParam.inputData.napprovalconfigcode\n      });\n      urlArray.push(regSubTypeVersionService);\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let dataList = [];\n      let dataListCount = [];\n      let designData = response[0].data.jsondataobj || {};\n      let dataListSubSample = [];\n      let dataListCountSubSample = [];\n\n      if (inputParam[\"SampleType\"] === SampleType.Masters) {\n        dataList = designData.mastercombinationunique && [...designData.mastercombinationunique] || [];\n        designData.mastercombinationunique && designData.mastercombinationunique.map((item, index) => {\n          dataListCount.push(index);\n        });\n      } //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n      else if (inputParam[\"SampleType\"] === SampleType.GOODSIN || inputParam[\"SampleType\"] === SampleType.PROTOCOL) {\n        dataList = designData.combinationunique && [...designData.combinationunique] || [];\n        designData.combinationunique && designData.combinationunique.map((item, index) => {\n          dataListCount.push(index);\n        });\n      } else {\n        dataList = designData.samplecombinationunique && [...designData.samplecombinationunique] || [];\n        designData.samplecombinationunique && designData.samplecombinationunique.map((item, index) => {\n          dataListCount.push(index);\n        });\n        dataListSubSample = designData.subsamplecombinationunique && [...designData.subsamplecombinationunique] || [];\n        designData.subsamplecombinationunique && designData.subsamplecombinationunique.map((item, index) => {\n          dataListCountSubSample.push(index);\n        });\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          loading: false,\n          designData: designData,\n          //response[0].data.jsondataobj,\n          approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data : undefined,\n          dataList,\n          dataListCount,\n          dataListSubSample,\n          dataListCountSubSample,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolcode: inputParam.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n} ////Modified the function by sonia on 11th NOV 2024 for jira id:ALPD-5025\n\nexport function editFieldConfigService(inputParam) {\n  return function (dispatch) {\n    let filterStatusService = [];\n    const fieldService = rsapi.post('designtemplatemapping/getMappedFieldProps', {\n      designtemplatemapping: inputParam.inputData.designtemplatemapping,\n      userinfo: inputParam.inputData.userinfo\n    });\n\n    if (inputParam[\"SampleType\"] !== SampleType.Masters && inputParam[\"SampleType\"] !== SampleType.GOODSIN && inputParam[\"SampleType\"] !== SampleType.PROTOCOL) {\n      filterStatusService = rsapi.post('registration/getRegistrationFilterStatus', {\n        nregtypecode: inputParam.inputData.nregtypecode,\n        nregsubtypecode: inputParam.inputData.nregsubtypecode,\n        userinfo: { ...inputParam.inputData.userinfo,\n          nformcode: 43\n        }\n      });\n    } else if (inputParam[\"SampleType\"] == SampleType.PROTOCOL) {\n      filterStatusService = rsapi.post('protocol/getEditFilterStatus', {\n        userinfo: { ...inputParam.inputData.userinfo,\n          nformcode: formCode.PROTOCOL\n        }\n      });\n    }\n\n    let urlArray = [fieldService, filterStatusService];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let dataResult = {};\n      let designData = response[0].data.jsondataobj || {};\n      let filterStatus = response[1].data || [];\n      const list = filterStatus.filter(item => item[\"ntransactionstatus\"] !== 0);\n      filterStatus = list;\n      let selectedRecord = {};\n\n      if (inputParam[\"SampleType\"] === SampleType.Masters) {\n        dataResult = [];\n        designData.mastertemplatefields.map(field => dataResult.push({\n          label: field[designProperties.VALUE],\n          editablestatus: filterStatus,\n          realData: field\n        }));\n      } else if (inputParam[\"SampleType\"] === SampleType.PROTOCOL) {\n        //Object.keys(designData).map(formcode => {\n        dataResult = [];\n        selectedRecord = {};\n        const editArray = designData[\"editable\"] || [];\n        designData.templatefields.map(field => {\n          //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n          if (!Array.isArray(designData) && field[designProperties.LISTITEM] !== \"label\") {\n            const index = editArray.findIndex(x => x.label === field[designProperties.VALUE]);\n\n            if (index !== -1) {\n              const fieldEditStatus = editArray[index];\n\n              if (fieldEditStatus.editableuntill.length > 0) {\n                const statusArray = [];\n                filterStatus.map(item1 => {\n                  const foundIndex = fieldEditStatus.editableuntill.findIndex(x => x === item1.ntransactionstatus);\n\n                  if (foundIndex !== -1) {\n                    statusArray.push({\n                      label: item1.stransdisplaystatus,\n                      value: item1.ntransactionstatus,\n                      item: item1\n                    });\n                  }\n                });\n                selectedRecord[field[designProperties.VALUE]] = statusArray;\n                dataResult.push({\n                  label: field[designProperties.VALUE],\n                  editablestatus: filterStatus,\n                  realData: field\n                });\n              } else {\n                dataResult.push({\n                  label: field[designProperties.VALUE],\n                  editablestatus: filterStatus,\n                  realData: field\n                });\n              }\n            }\n          }\n        }); //})\n      } else {\n        if (inputParam.operation === \"configuresubsampleedit\") {\n          Object.keys(designData).map(formcode => {\n            dataResult[formcode] = [];\n            selectedRecord[formcode] = {};\n            const editArray = designData[formcode][\"subsampleeditable\"] || [];\n            designData.subsampletemplatefields.map(field => {\n              //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n              if (!Array.isArray(designData[formcode]) && field[designProperties.LISTITEM] !== \"label\") {\n                const index = editArray.findIndex(x => x.label === field[designProperties.VALUE]);\n\n                if (index !== -1) {\n                  const fieldEditStatus = editArray[index];\n\n                  if (fieldEditStatus.editableuntill.length > 0) {\n                    const statusArray = [];\n                    filterStatus.map(item1 => {\n                      const foundIndex = fieldEditStatus.editableuntill.findIndex(x => x === item1.ntransactionstatus);\n\n                      if (foundIndex !== -1) {\n                        statusArray.push({\n                          label: item1.stransdisplaystatus,\n                          value: item1.ntransactionstatus,\n                          item: item1\n                        });\n                      }\n                    });\n                    selectedRecord[formcode][field[designProperties.VALUE]] = statusArray;\n                    dataResult[formcode].push({\n                      label: field[designProperties.VALUE],\n                      editablestatus: filterStatus,\n                      realData: field\n                    });\n                  } else {\n                    dataResult[formcode].push({\n                      label: field[designProperties.VALUE],\n                      editablestatus: filterStatus,\n                      realData: field\n                    });\n                  }\n                }\n              }\n            });\n          });\n        } else {\n          Object.keys(designData).map(formcode => {\n            dataResult[formcode] = [];\n            selectedRecord[formcode] = {};\n            const editArray = designData[formcode][\"sampleeditable\"] || [];\n            designData.sampletemplatefields.map(field => {\n              //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n              if (field[designProperties.LISTITEM] !== \"label\" && !Array.isArray(designData[formcode])) {\n                const index = editArray.findIndex(x => x.label === field[designProperties.VALUE]);\n\n                if (index !== -1) {\n                  const fieldEditStatus = editArray[index];\n\n                  if (fieldEditStatus.editableuntill.length > 0) {\n                    const statusArray = [];\n                    filterStatus.map(item1 => {\n                      const foundIndex = fieldEditStatus.editableuntill.findIndex(x => x === item1.ntransactionstatus);\n\n                      if (foundIndex !== -1) {\n                        statusArray.push({\n                          label: item1.stransdisplaystatus,\n                          value: item1.ntransactionstatus,\n                          item: item1\n                        });\n                      }\n                    });\n                    selectedRecord[formcode][field[designProperties.VALUE]] = statusArray;\n                    dataResult[formcode].push({\n                      label: field[designProperties.VALUE],\n                      editablestatus: filterStatus,\n                      realData: field\n                    });\n                  } else {\n                    dataResult[formcode].push({\n                      label: field[designProperties.VALUE],\n                      editablestatus: filterStatus,\n                      realData: field\n                    });\n                  }\n                }\n              }\n            });\n          });\n        }\n      } // console.log(\"selectedRecord:\", selectedRecord);\n\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          loading: false,\n          editFieldDesignData: designData,\n          //response[0].data.jsondataobj,\n          //approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data :undefined,\n          editFieldDataResult: dataResult,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolcode,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      //console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function mappingFieldConfigService(inputParam) {\n  return function (dispatch) {\n    let urlArray = [];\n    let regSubTypeVersionService;\n    let fieldService = [];\n    fieldService = rsapi.post(\"designtemplatemapping/getMappedfield\", {\n      \"ndesigntemplatemappingcode\": inputParam.inputData.designtemplatemapping.ndesigntemplatemappingcode.ndesigntemplatemappingcode,\n      \"userinfo\": inputParam.inputData.userinfo\n    });\n\n    if (inputParam.inputData[\"napprovalconfigcode\"]) {\n      regSubTypeVersionService = rsapi.post(\"registrationsubtype/getApprovedVersion\", {\n        napprovalconfigcode: inputParam.inputData.napprovalconfigcode\n      });\n    }\n\n    urlArray = [regSubTypeVersionService, fieldService];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let dateSubSamLablesNumber = [];\n      let dateSubSamLablesComboBox = [];\n      let selectedValue = [];\n      let data = {};\n      let count = 1;\n      let dateLablesnumber = [];\n      let dateLablescombobox = [];\n\n      if (response[1].data.mappedFields[0].jsondataobj !== null) {\n        response[1].data.mappedFields.map(row => {\n          let displaynameSampleqty = {\n            \"displayname\": row.jsondataobj.samplefields.nsampleqty['1']\n          };\n          let displaynameSubSampleqty = {\n            \"displayname\": row.jsondataobj.subsamplefields.nsampleqty['1']\n          };\n          let displaynameSampleunit = {\n            \"displayname\": row.jsondataobj.samplefields.nunitcode['1']\n          };\n          let displaynameSubSampleunit = {\n            \"displayname\": row.jsondataobj.subsamplefields.nunitcode['1']\n          };\n          const Quantity = {\n            \"label\": row.jsondataobj.samplefields.nsampleqty['2'],\n            \"value\": 1,\n            \"item\": displaynameSampleqty\n          };\n          const Unit = {\n            \"label\": row.jsondataobj.samplefields.nunitcode['2'],\n            \"value\": 2,\n            \"item\": displaynameSampleunit\n          };\n          const SubUnit = {\n            \"label\": row.jsondataobj.subsamplefields.nunitcode['2'],\n            \"value\": 3,\n            \"item\": displaynameSubSampleunit\n          };\n          const SubQuantity = {\n            \"label\": row.jsondataobj.subsamplefields.nsampleqty['2'],\n            \"value\": 4,\n            \"item\": displaynameSubSampleqty\n          };\n          const value = {\n            \"Quantity\": Quantity,\n            \"Unit\": Unit,\n            \"SubQuantity\": SubQuantity,\n            \"SubUnit\": SubUnit\n          };\n          selectedValue.push(value);\n        });\n      }\n\n      const needsubsample = response[0].data.jsondata.nneedsubsample !== undefined ? response[0].data.jsondata.nneedsubsample : false;\n      const samplename = inputParam.inputData.designtemplatemapping.ndesigntemplatemappingcode.sregtemplatename;\n      const mainSample = inputParam.inputData.designtemplatemapping.ndesigntemplatemappingcode.jsondata;\n      const subSample = inputParam.inputData.designtemplatemapping.ndesigntemplatemappingcode.subsamplejsondata;\n      mainSample.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.children) {\n              component.children.map(componentrow => {\n                if (componentrow.children) {\n                  if (componentrow.componentname === 'Number') {\n                    data = {\n                      \"LableName\": componentrow.label,\n                      \"displayvalue\": count++,\n                      \"displayname\": componentrow.displayname\n                    };\n                    dateLablesnumber.push(data);\n                  }\n\n                  if (componentrow.componentname === 'Combo Box' || componentrow.componentname === 'Drop Down') {\n                    data = {\n                      \"LableName\": componentrow.label,\n                      \"displayvalue\": count++,\n                      \"displayname\": componentrow.displayname\n                    };\n                    dateLablescombobox.push(data);\n                  }\n                } else {\n                  if (componentrow.componentname === 'Number') {\n                    data = {\n                      \"LableName\": componentrow.label,\n                      \"displayvalue\": count++,\n                      \"displayname\": componentrow.displayname\n                    };\n                    dateLablesnumber.push(data);\n                  }\n\n                  if (componentrow.componentname === 'Combo Box' || componentrow.componentname === 'Drop Down') {\n                    data = {\n                      \"LableName\": componentrow.label,\n                      \"displayvalue\": count++,\n                      \"displayname\": componentrow.displayname\n                    };\n                    dateLablescombobox.push(data);\n                  }\n                }\n              });\n            } else {\n              if (component.componentname === 'Number') {\n                data = {\n                  \"LableName\": component.label,\n                  \"displayvalue\": count++,\n                  \"displayname\": component.displayname\n                };\n                dateLablesnumber.push(data);\n              }\n\n              if (component.componentname === 'Combo Box' || component.componentname === 'Drop Down') {\n                data = {\n                  \"LableName\": component.label,\n                  \"displayvalue\": count++,\n                  \"displayname\": component.displayname\n                };\n                dateLablescombobox.push(data);\n              }\n            }\n          });\n        });\n      });\n      let countsubsample = 1;\n      subSample.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.children) {\n              component.children.map(componentrow => {\n                if (componentrow.children) {\n                  if (componentrow.componentname === 'Number') {\n                    data = {\n                      \"LableName\": componentrow.displayname[inputParam.inputData.userinfo.slanguagetypecode],\n                      \"displayvalue\": countsubsample++,\n                      \"displayname\": componentrow.displayname\n                    };\n                    dateSubSamLablesNumber.push(data);\n                  }\n\n                  if (componentrow.componentname === 'Combo Box' || componentrow.componentname === 'Drop Down') {\n                    data = {\n                      \"LableName\": componentrow.displayname[inputParam.inputData.userinfo.slanguagetypecode],\n                      \"displayvalue\": countsubsample++,\n                      \"displayname\": componentrow.displayname\n                    };\n                    dateSubSamLablesComboBox.push(data);\n                  }\n                } else {\n                  if (componentrow.componentname === 'Number') {\n                    data = {\n                      \"LableName\": componentrow.displayname[inputParam.inputData.userinfo.slanguagetypecode],\n                      \"displayvalue\": countsubsample++,\n                      \"displayname\": componentrow.displayname\n                    };\n                    dateSubSamLablesNumber.push(data);\n                  }\n\n                  if (componentrow.componentname === 'Combo Box' || componentrow.componentname === 'Drop Down') {\n                    data = {\n                      \"LableName\": componentrow.displayname[inputParam.inputData.userinfo.slanguagetypecode],\n                      \"displayvalue\": countsubsample++,\n                      \"displayname\": componentrow.displayname\n                    };\n                    dateSubSamLablesComboBox.push(data);\n                  }\n                }\n              });\n            } else {\n              if (component.componentname === 'Number') {\n                data = {\n                  \"LableName\": component.displayname[inputParam.inputData.userinfo.slanguagetypecode],\n                  \"displayvalue\": countsubsample++,\n                  \"displayname\": component.displayname\n                };\n                dateSubSamLablesNumber.push(data);\n              }\n\n              if (component.componentname === 'Combo Box' || component.componentname === 'Drop Down') {\n                data = {\n                  \"LableName\": component.displayname[inputParam.inputData.userinfo.slanguagetypecode],\n                  \"displayvalue\": countsubsample++,\n                  \"displayname\": component.displayname\n                };\n                dateSubSamLablesComboBox.push(data);\n              }\n            }\n          });\n        });\n      });\n      const sample = constructOptionList(dateLablesnumber || [], \"displayvalue\", \"LableName\", \"displayvalue\", undefined, true);\n      let SampleTemplateNumber = sample.get(\"OptionList\");\n      const sampleCombox = constructOptionList(dateLablescombobox || [], \"displayvalue\", \"LableName\", \"displayvalue\", undefined, true);\n      let SampleTemplatecombobox = sampleCombox.get(\"OptionList\");\n      const subSampleListNumber = constructOptionList(dateSubSamLablesNumber || [], \"displayvalue\", \"LableName\", \"displayvalue\", undefined, undefined);\n      let subSampleTemplateNumber = subSampleListNumber.get(\"OptionList\");\n      const subSampleListComboBox = constructOptionList(dateSubSamLablesComboBox || [], \"displayvalue\", \"LableName\", \"displayvalue\", undefined, undefined);\n      let subSampleTemplateCombobox = subSampleListComboBox.get(\"OptionList\");\n      const value = response[1].data.mappedFields[0].jsondataobj;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          loading: false,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolcode,\n          needsubsample,\n          SampleTemplateNumber,\n          SampleTemplatecombobox,\n          subSampleTemplateNumber,\n          subSampleTemplateCombobox,\n          samplename,\n          needsubsample,\n          selectedValue,\n          selectedRecord: value !== null ? selectedValue[0] : \"\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function auditFieldConfigService(inputParam) {\n  return function (dispatch) {\n    const fieldService = rsapi.post('designtemplatemapping/getAuditMappedFieldProps', {\n      designtemplatemapping: inputParam.inputData.designtemplatemapping,\n      userinfo: inputParam.inputData.userinfo,\n      nregtypecode: inputParam.inputData.nregtypecode,\n      nregsubtypecode: inputParam.inputData.nregsubtypecode\n    });\n    let urlArray = [fieldService];\n\n    if (inputParam.inputData[\"napprovalconfigcode\"]) {\n      const regSubTypeVersionService = rsapi.post(\"registrationsubtype/getApprovedVersion\", {\n        napprovalconfigcode: inputParam.inputData.napprovalconfigcode\n      });\n      urlArray.push(regSubTypeVersionService);\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let dataResult = {};\n      let designData = response[0].data[\"MappedTemplateFieldProps\"].jsondataobj || {};\n      const dynamicTable = response[0].data[\"DynamicAuditRecordTable\"] ? Object.keys(response[0].data[\"DynamicAuditRecordTable\"]) : {};\n      let auditData = response[0].data[\"DynamicAuditRecordTable\"] || {};\n      console.log(\"design:\", designData, inputParam.inputData.designtemplatemapping.ndesigntemplatemappingcode);\n      console.log(\"auditData:\", auditData);\n\n      if (inputParam[\"SampleType\"] === SampleType.Masters) {\n        const formcode = Object.keys(auditData)[0];\n        dataResult[formcode] = {\n          \"dynamicmaster\": []\n        }; //const tableArray = Object.keys(auditData[formcode]) || [];\n        // tableArray.map(item => dataResult[formcode][item] = []);\n\n        designData.mastertemplatefields.map(field => {\n          field[designProperties.LISTITEM] !== \"label\" && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n          //if(!Array.isArray(designData))\n          //  {    \n          dataResult[formcode][\"dynamicmaster\"].push({\n            //label: field[designProperties.VALUE],\n            label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\n            sampleauditfields: auditData[formcode][\"dynamicmaster\"].jsondataobj.auditcapturefields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\n            sampleauditeditfields: auditData[formcode][\"dynamicmaster\"].jsondataobj.editmandatoryfields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\n            realData: field\n          });\n        });\n        designData = {\n          [formcode]: { ...designData,\n            \"dynamicmaster\": {\n              sampleauditfields: auditData[formcode][\"dynamicmaster\"].jsondataobj.auditcapturefields,\n              sampleauditeditfields: auditData[formcode][\"dynamicmaster\"].jsondataobj.editmandatoryfields,\n              multilingualfields: auditData[formcode][\"dynamicmaster\"].jsondataobj.multilingualfields\n            }\n          }\n        }; // designData = {[formcode] : {\"dynamicmaster\": {...designData, \n        //                                                 sampleauditeditfields : auditData[formcode][\"dynamicmaster\"].jsondataobj.editmandatoryfields, \n        //                                                 multilingualfields:auditData[formcode][\"dynamicmaster\"].jsondataobj.multilingualfields\n        //                                             }\n        //                                         }};\n        // }\n        //})                                \n      } else if (inputParam[\"SampleType\"] === SampleType.GOODSIN) {\n        const formcode = Object.keys(auditData)[0];\n        dataResult[formcode] = {\n          \"goodsinsample\": []\n        };\n        designData.templatefields.map(field => {\n          field[designProperties.LISTITEM] !== \"label\" && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n          dataResult[formcode][\"goodsinsample\"].push({\n            label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\n            sampleauditfields: auditData[formcode][\"goodsinsample\"].jsondataobj.auditcapturefields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\n            sampleauditeditfields: auditData[formcode][\"goodsinsample\"].jsondataobj.editmandatoryfields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\n            realData: field\n          });\n        });\n        designData = {\n          [formcode]: { ...designData,\n            \"goodsinsample\": {\n              sampleauditfields: auditData[formcode][\"goodsinsample\"].jsondataobj.auditcapturefields,\n              sampleauditeditfields: auditData[formcode][\"goodsinsample\"].jsondataobj.editmandatoryfields,\n              multilingualfields: auditData[formcode][\"goodsinsample\"].jsondataobj.multilingualfields\n            }\n          }\n        };\n      } //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n      else if (inputParam[\"SampleType\"] === SampleType.PROTOCOL) {\n        const formcode = Object.keys(auditData)[0];\n        dataResult[formcode] = {\n          \"protocol\": []\n        };\n        designData.templatefields.map(field => {\n          field[designProperties.LISTITEM] !== \"label\" && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n          dataResult[formcode][\"protocol\"].push({\n            label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\n            sampleauditfields: auditData[formcode][\"protocol\"].jsondataobj.auditcapturefields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\n            sampleauditeditfields: auditData[formcode][\"protocol\"].jsondataobj.editmandatoryfields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\n            realData: field\n          });\n        });\n        designData = {\n          [formcode]: { ...designData,\n            \"protocol\": {\n              sampleauditfields: auditData[formcode][\"protocol\"].jsondataobj.auditcapturefields,\n              sampleauditeditfields: auditData[formcode][\"protocol\"].jsondataobj.editmandatoryfields,\n              multilingualfields: auditData[formcode][\"protocol\"].jsondataobj.multilingualfields\n            }\n          }\n        };\n      } else {\n        Object.keys(designData).map(formcode => {\n          if (parseInt(formcode) === formCode.SAMPLEREGISTRATION) {\n            dataResult[formcode] = [];\n            const tableArray = Object.keys(auditData[formcode]) || [];\n            tableArray.map(item => dataResult[formcode][item] = []);\n            designData.sampletemplatefields.map(field => {\n              if (!Array.isArray(designData[formcode]) && field[designProperties.VALUE] !== 'sreportno' && field[designProperties.VALUE] !== 'ntestcount' && field[designProperties.LISTITEM] !== \"label\") {\n                //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n                dataResult[formcode][\"registration\"].push({\n                  //label: field[designProperties.VALUE],\n                  label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\n                  sampleauditfields: auditData[formcode][\"registration\"].jsondataobj.auditcapturefields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\n                  sampleauditeditfields: auditData[formcode][\"registration\"].jsondataobj.editmandatoryfields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\n                  realData: field\n                });\n                designData[formcode][\"registration\"] = { ...designData[formcode][\"registration\"],\n                  sampleauditfields: auditData[formcode][\"registration\"].jsondataobj.auditcapturefields,\n                  multilingualfields: auditData[formcode][\"registration\"].jsondataobj.auditData\n                };\n                designData[formcode][\"registration\"] = { ...designData[formcode][\"registration\"],\n                  sampleauditeditfields: auditData[formcode][\"registration\"].jsondataobj.editmandatoryfields,\n                  multilingualfields: auditData[formcode][\"registration\"].jsondataobj.multilingualfields\n                };\n              }\n            });\n\n            if (inputParam.inputData.nneedsubsample) {\n              designData.subsampletemplatefields.map(field => {\n                if (!Array.isArray(designData[formcode])) {\n                  dataResult[formcode][\"registrationsample\"].push({\n                    //label: field[designProperties.VALUE],\n                    label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\n                    subsampleauditfields: auditData[formcode][\"registrationsample\"].jsondataobj.auditcapturefields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\n                    subsampleauditeditfields: auditData[formcode][\"registrationsample\"].jsondataobj.editmandatoryfields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\n                    realData: field\n                  });\n                  designData[formcode][\"registrationsample\"] = { ...designData[formcode][\"registrationsample\"],\n                    subsampleauditfields: auditData[formcode][\"registrationsample\"].jsondataobj.auditcapturefields,\n                    multilingualfields: auditData[formcode][\"registrationsample\"].jsondataobj.multilingualfields\n                  };\n                  designData[formcode][\"registrationsample\"] = { ...designData[formcode][\"registrationsample\"],\n                    subsampleauditeditfields: auditData[formcode][\"registrationsample\"].jsondataobj.editmandatoryfields,\n                    multilingualfields: auditData[formcode][\"registrationsample\"].jsondataobj.multilingualfields\n                  };\n                }\n              });\n            }\n          }\n        });\n      }\n\n      console.log(\"response[1].data:\", designData, \"dataResult:\", dataResult);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          loading: false,\n          auditFieldDesignData: designData,\n          //response[0].data.jsondataobj,\n          approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data : undefined,\n          auditFieldDataResult: dataResult,\n          auditData,\n          auditTable: dynamicTable,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function exportFieldConfigService(inputParam) {\n  return function (dispatch) {\n    const fieldService = rsapi.post('designtemplatemapping/getMappedFieldProps', {\n      designtemplatemapping: inputParam.inputData.designtemplatemapping,\n      userinfo: inputParam.inputData.userinfo\n    });\n    let urlArray = [fieldService];\n\n    if (inputParam.inputData[\"napprovalconfigcode\"]) {\n      const regSubTypeVersionService = rsapi.post(\"registrationsubtype/getApprovedVersion\", {\n        napprovalconfigcode: inputParam.inputData.napprovalconfigcode\n      });\n      urlArray.push(regSubTypeVersionService);\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let sampleexportdataResult = {};\n      let designData = response[0].data.jsondataobj[formCode.SAMPLEREGISTRATION] || {};\n\n      if (inputParam[\"SampleType\"] === SampleType.Masters) {\n        sampleexportdataResult['master'] = [];\n        response[0].data.jsondataobj.mastertemplatefields.map(field => {\n          field[designProperties.LISTITEM] !== \"label\" && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n          sampleexportdataResult['master'].push({\n            label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\n            sampleexportfields: response[0].data.jsondataobj.masterexportfields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\n            realData: field\n          });\n        });\n      } else if (inputParam[\"SampleType\"] === SampleType.GOODSIN) {\n        sampleexportdataResult['master'] = [];\n        response[0].data.jsondataobj.nonmandatoryExportFields.map(field => {\n          field[designProperties.LISTITEM] !== \"label\" && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n          sampleexportdataResult['master'].push({\n            label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\n            sampleexportfields: response[0].data.jsondataobj.exportFields.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n            //  sampleexportfields: response[0].data.jsondataobj.exportFields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\n            realData: field\n          });\n        });\n      } else {\n        sampleexportdataResult['sample'] = [];\n        response[0].data.jsondataobj.sampletemplatefields.map(field => {\n          //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n          if (field[designProperties.VALUE] !== \"sarno\" && field[designProperties.VALUE] !== \"sspecname\" && field[designProperties.VALUE] !== \"dregdate\" && field[designProperties.VALUE] !== \"stransdisplaystatus\" && field[designProperties.VALUE] !== \"sreportno\" && field[designProperties.VALUE] !== \"ntestcount\" && field[designProperties.LISTITEM] !== \"label\" && response[0].data.jsondataobj.sampletemplatemandatory.findIndex(x => x === field[designProperties.VALUE]) === -1) {\n            sampleexportdataResult[\"sample\"].push({\n              label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\n              sampleexportfields: designData.sampleExportFields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\n              realData: field\n            });\n          }\n        });\n\n        if (inputParam.inputData.nneedsubsample) {\n          sampleexportdataResult['subsample'] = [];\n          response[0].data.jsondataobj.subsampletemplatefields.map(field => {\n            if (field[designProperties.VALUE] !== \"sarno\" && field[designProperties.VALUE] !== \"ssamplearno\" && field[designProperties.VALUE] !== \"stransdisplaystatus\") {\n              sampleexportdataResult[\"subsample\"].push({\n                label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\n                sampleexportfields: designData.subSampleExportFields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\n                realData: field\n              });\n            }\n          });\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          loading: false,\n          designData: response[0].data.jsondataobj,\n          approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data : undefined,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolcode: inputParam.ncontrolcode,\n          sampleexportdataResult\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function configureCheckList(inputParam) {\n  return function (dispatch) {\n    const fieldService = rsapi.post('designtemplatemapping/getConfigureCheckList', {\n      ndesigntemplatemappingcode: inputParam.inputData.designtemplatemapping.ndesigntemplatemappingcode,\n      userinfo: inputParam.inputData.userinfo\n    });\n    let urlArray = [fieldService];\n    const fieldService1 = rsapi.post('designtemplatemapping/getMappedFieldProps', {\n      designtemplatemapping: inputParam.inputData.designtemplatemapping,\n      userinfo: inputParam.inputData.userinfo\n    });\n    urlArray.push(fieldService1);\n\n    if (inputParam.inputData[\"napprovalconfigcode\"]) {\n      const regSubTypeVersionService = rsapi.post(\"registrationsubtype/getApprovedVersion\", {\n        napprovalconfigcode: inputParam.inputData.napprovalconfigcode\n      });\n      urlArray.push(regSubTypeVersionService);\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const data = response[0].data.ChecklistVersion;\n      const dataQB = response[0].data.ChecklistVersionQB;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          loading: false,\n          approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[2].data : undefined,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolcode: inputParam.ncontrolcode,\n          checkListData: data,\n          checkListQB: dataQB,\n          designData: response[1].data.jsondataobj\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getConfigureCheckListLatestVersion(userinfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('designtemplatemapping/getConfigureCheckListLatestVersion', {\n      userinfo: userinfo\n    }).then(response => {\n      const data = constructOptionList(response.data || [], 'nchecklistversioncode', 'schecklistname').get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          loading: false,\n          checkList: data,\n          operation: \"configurechecklistadd\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function reportFilterType(inputParam) {\n  return function (dispatch) {\n    const fieldService = rsapi.post('designtemplatemapping/getMappedFieldProps', {\n      designtemplatemapping: inputParam.inputData.designtemplatemapping,\n      userinfo: inputParam.inputData.userinfo\n    });\n    const filterFields = rsapi.post('designtemplatemapping/getReleaseSampleFilterFields', {\n      userinfo: inputParam.inputData.userinfo\n    });\n    let urlArray = [fieldService, filterFields];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let sampleReportFilterTypeData = {};\n      let designData = response[0].data.jsondataobj[formCode.SAMPLEREGISTRATION] || {};\n      let designStructure = response[0].data.jsondataobj[formCode.RELEASE] || {};\n      let jsonParseList = response[1].data || {};\n      let sampleFilterFields = [];\n      jsonParseList.map(x => sampleFilterFields.push(JSON.parse(x.jsondata.value)));\n      sampleReportFilterTypeData['sample'] = [];\n      let comboValues = [];\n      response[0].data.jsondataobj.sampletemplatefields.map(field => {\n        //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n        if (field[designProperties.VALUE] !== \"sarno\" && field[designProperties.VALUE] !== \"sspecname\" && field[designProperties.VALUE] !== \"dregdate\" && field[designProperties.VALUE] !== \"stransdisplaystatus\" && field[designProperties.VALUE] !== \"sreportno\" && field[designProperties.VALUE] !== \"ntestcount\" && field[designProperties.LISTITEM] !== \"label\") {\n          sampleReportFilterTypeData[\"sample\"].push({\n            label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\n            samplefiltertypefields: designData.samplefiltertypefields && designData.samplefiltertypefields.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\n            ismandatory: designData.samplefiltertypefields && designData.samplefiltertypefields.find(val => val[\"2\"] === field[designProperties.VALUE] && val[\"ismandatory\"]) !== undefined,\n            //designData.samplefiltertypefields && designData.samplefiltertypefields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\n            realData: field\n          });\n          comboValues = field[designProperties.LISTITEM] === \"combo\" ? { ...comboValues,\n            [field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode]]: [{\n              \"value\": -1,\n              \"title\": 'NA'\n            }]\n          } : { ...comboValues\n          };\n        }\n      });\n      sampleFilterFields.map(x => {\n        sampleReportFilterTypeData[\"sample\"].push({ ...x,\n          samplefiltertypefields: designData.samplefiltertypefields && designData.samplefiltertypefields.find(val => val[\"2\"] === x.realData[designProperties.VALUE]) !== undefined,\n          ismandatory: designData.samplefiltertypefields && designData.samplefiltertypefields.find(val => val[\"2\"] === x.realData[designProperties.VALUE] && val[\"ismandatory\"]) !== undefined\n        });\n        comboValues = x.realData[designProperties.LISTITEM] === \"combo\" ? { ...comboValues,\n          [x.realData[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode]]: [{\n            \"value\": -1,\n            \"title\": 'NA'\n          }]\n        } : { ...comboValues\n        };\n      });\n      let extractedColumnList = queryBuilderfillingColumns(sampleReportFilterTypeData[\"sample\"], inputParam.inputData.userinfo.slanguagetypecode);\n      let fields = getFilterConditionsBasedonDataType(extractedColumnList, comboValues);\n      let awesomeTree = designStructure.defaultstructure && designStructure.defaultstructure.awesomeTree && checkTree(loadTree(designStructure.defaultstructure.awesomeTree), designStructure.defaultstructure.awesomeConfig);\n      let filterQueryTreeStr = designStructure.defaultstructure && designStructure.defaultstructure.filterQueryTreeStr;\n      let filterquery = designStructure.defaultstructure && designStructure.defaultstructure.filterquery;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          loading: false,\n          designData: response[0].data.jsondataobj,\n          approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data : undefined,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolcode: inputParam.ncontrolcode,\n          sampleReportFilterTypeData,\n          awesomeConfig: designStructure.defaultstructure && designStructure.defaultstructure.awesomeConfig,\n          awesomeTree: awesomeTree,\n          fields,\n          comboValues,\n          isInitialRender: true,\n          extractedColumnList,\n          filterQueryTreeStr,\n          filterquery\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/actions/DesignTemplateMappingAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","constructOptionList","rearrangeDateFormat","getFilterConditionsBasedonDataType","queryBuilderfillingColumns","toast","Axios","initRequest","intl","designProperties","SampleType","formCode","Utils","QbUtils","checkTree","loadTree","getDesignTemplateMappingDetail","designtemplatemapping","userInfo","masterData","dispatch","post","ndesigntemplatemappingcode","nsampletypecode","nregtypecode","nregsubtypecode","userinfo","nformcode","then","response","data","type","payload","loading","catch","error","status","formatMessage","id","message","warn","getDesignTemplateMappingComboService","param","screenName","operation","realSampleValue","realRegTypeValue","realRegSubTypeValue","ncontrolCode","controlId","moduleTypeArray","isValid","Masters","GOODSIN","PROTOCOL","designtemplatemappingService","urlArray","all","selectedRecord","nnewmodule","designtemplatemappingMap","DesignTemplateMapping","undefined","designtemplatemappingList","get","subSampleTemplateList","testListFields","qualisModuleList","SubSampleTemplate","TestListFields","jsondata","qualisModuleMap","DT_QualisModule","openModal","designTemplateQualisModule","reloadDesignTemplateMapping","inputParam","inputData","responseData","showFilter","getTMPFilterRegType","getTMPFilterRegSubType","getTMPFilterSubmit","listdesigntemplatemapping","getMappedFieldProps","fieldService","regSubTypeVersionService","napprovalconfigcode","push","dataResult","designData","jsondataobj","mastertemplatefields","map","field","LISTITEM","label","LABEL","slanguagetypecode","griditem","find","val","VALUE","gridmoreitem","realData","templatefields","listItem","displayFields","Object","keys","formcode","subsampletemplatefields","Array","isArray","subsamplelistitem","sampletemplatefields","sampledisplayfields","samplelistitem","samplelistmoreitems","samplegriditem","samplegridmoreitem","samplefilteritem","approvedRegSubTypeVersion","ncontrolcode","combinationUniqueConfigService","dataList","dataListCount","dataListSubSample","dataListCountSubSample","mastercombinationunique","item","index","combinationunique","samplecombinationunique","subsamplecombinationunique","editFieldConfigService","filterStatusService","filterStatus","list","filter","editablestatus","editArray","findIndex","x","fieldEditStatus","editableuntill","length","statusArray","item1","foundIndex","ntransactionstatus","stransdisplaystatus","value","editFieldDesignData","editFieldDataResult","mappingFieldConfigService","dateSubSamLablesNumber","dateSubSamLablesComboBox","selectedValue","count","dateLablesnumber","dateLablescombobox","mappedFields","row","displaynameSampleqty","samplefields","nsampleqty","displaynameSubSampleqty","subsamplefields","displaynameSampleunit","nunitcode","displaynameSubSampleunit","Quantity","Unit","SubUnit","SubQuantity","needsubsample","nneedsubsample","samplename","sregtemplatename","mainSample","subSample","subsamplejsondata","children","column","component","componentrow","componentname","displayname","countsubsample","sample","SampleTemplateNumber","sampleCombox","SampleTemplatecombobox","subSampleListNumber","subSampleTemplateNumber","subSampleListComboBox","subSampleTemplateCombobox","auditFieldConfigService","dynamicTable","auditData","console","log","sampleauditfields","auditcapturefields","sampleauditeditfields","editmandatoryfields","multilingualfields","parseInt","SAMPLEREGISTRATION","tableArray","subsampleauditfields","subsampleauditeditfields","auditFieldDesignData","auditFieldDataResult","auditTable","exportFieldConfigService","sampleexportdataResult","sampleexportfields","masterexportfields","nonmandatoryExportFields","exportFields","sampletemplatemandatory","sampleExportFields","subSampleExportFields","configureCheckList","fieldService1","ChecklistVersion","dataQB","ChecklistVersionQB","checkListData","checkListQB","getConfigureCheckListLatestVersion","checkList","reportFilterType","filterFields","sampleReportFilterTypeData","designStructure","RELEASE","jsonParseList","sampleFilterFields","JSON","parse","comboValues","samplefiltertypefields","ismandatory","extractedColumnList","fields","awesomeTree","defaultstructure","awesomeConfig","filterQueryTreeStr","filterquery","isInitialRender"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { sortData, constructOptionList, rearrangeDateFormat,getFilterConditionsBasedonDataType,queryBuilderfillingColumns } from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { designProperties, SampleType, formCode } from '../components/Enumeration';\r\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\r\n    const { checkTree, loadTree } = QbUtils;\r\n\r\nexport function getDesignTemplateMappingDetail(designtemplatemapping, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        return rsapi.post(\"designtemplatemapping/getDesignTemplateMapping\", {\r\n            ndesigntemplatemappingcode: designtemplatemapping.ndesigntemplatemappingcode,\r\n            nsampletypecode: designtemplatemapping.nsampletypecode,\r\n            nregtypecode: designtemplatemapping.nregtypecode,\r\n            nregsubtypecode: designtemplatemapping.nregsubtypecode,\r\n            userinfo: userInfo,\r\n            nformcode: designtemplatemapping.nformcode,\r\n        })\r\n            .then(response => {\r\n\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getDesignTemplateMappingComboService(param) {\r\n    return function (dispatch) {\r\n\r\n        const screenName = param.screenName;\r\n        const operation = param.operation;\r\n        const userInfo = param.userInfo;\r\n        const nsampletypecode = param.realSampleValue;\r\n        const nregtypecode = param.realRegTypeValue;\r\n        const nregsubtypecode = param.realRegSubTypeValue;\r\n        const ncontrolCode = param.controlId;\r\n        const moduleTypeArray = param.moduleTypeArray;\r\n        //if (//(operation === \"create\") && (nsampletypecode != -1) && (nregtypecode != -1) && (nregsubtypecode != -1)) {\r\n\r\n        let isValid = true;\r\n        //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n        if (nsampletypecode !== SampleType.Masters && nsampletypecode !== SampleType.GOODSIN && nsampletypecode !== SampleType.PROTOCOL) {\r\n            if ((nsampletypecode != -1) && (nregtypecode != -1) && (nregsubtypecode != -1)) {\r\n                isValid = true;\r\n            }\r\n            else {\r\n                isValid = false;\r\n            }\r\n        }\r\n\r\n        if (isValid) {\r\n            const designtemplatemappingService = rsapi.post(\"designtemplatemapping/getDynamicPreRegDesign\", { userinfo: userInfo, nsampletypecode, nregtypecode, nregsubtypecode });\r\n            let urlArray = [designtemplatemappingService];\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = { nnewmodule: moduleTypeArray[0] };\r\n                    let designtemplatemappingMap = constructOptionList(response[0].data.DesignTemplateMapping || [], \"nreactregtemplatecode\",\r\n                        \"sregtemplatename\", undefined, undefined, true);\r\n                    const designtemplatemappingList = designtemplatemappingMap.get(\"OptionList\");\r\n\r\n                    let subSampleTemplateList = [];\r\n                    let testListFields = {};\r\n                    let qualisModuleList = [];\r\n                    //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n                    if (nsampletypecode !== SampleType.Masters && nsampletypecode !== SampleType.GOODSIN \r\n                        && nsampletypecode !== SampleType.PROTOCOL) {\r\n\r\n                        designtemplatemappingMap = constructOptionList(response[0].data.SubSampleTemplate || [], \"nreactregtemplatecode\",\r\n                            \"sregtemplatename\", undefined, undefined, true);\r\n\r\n                        subSampleTemplateList = designtemplatemappingMap.get(\"OptionList\");\r\n\r\n                        testListFields = response[0].data.TestListFields.jsondata;\r\n                    }\r\n\r\n                    if (nsampletypecode === SampleType.Masters) {\r\n                        const qualisModuleMap = constructOptionList(response[0].data.DT_QualisModule || [], \"nmodulecode\",\r\n                            \"sdisplayname\", undefined, undefined, true);\r\n\r\n                        qualisModuleList = qualisModuleMap.get(\"OptionList\");\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n\r\n                            designtemplatemappingList,\r\n                            subSampleTemplateList,\r\n                            testListFields,\r\n                            operation, screenName, selectedRecord, openModal: true,\r\n                            ncontrolCode, loading: false,\r\n                            designTemplateQualisModule: qualisModuleList\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }));\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function reloadDesignTemplateMapping(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"designtemplatemapping/getDesignTemplateMapping\", { ...inputParam.inputData })\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                //if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\r\n                //    inputParam.searchRef.current.value = \"\";\r\n                masterData['searchedData'] = undefined\r\n                //}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTMPFilterRegType(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"designtemplatemapping/getTemplateRegType\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = { ...inputParam.masterData, ...response.data }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTMPFilterRegSubType(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"designtemplatemapping/getTemplateRegSubType\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = { ...inputParam.masterData, ...response.data }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTMPFilterSubmit(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"designtemplatemapping/getFilterSubmit\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = { ...inputParam.masterData, ...response.data }\r\n                let listdesigntemplatemapping = sortData(response.data.DesignTemplateMapping);\r\n                masterData = { ...masterData, listdesigntemplatemapping }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function getMappedFieldProps(inputParam) {\r\n    return function (dispatch) {\r\n        const fieldService = rsapi.post('designtemplatemapping/getMappedFieldProps',\r\n            {\r\n                designtemplatemapping: inputParam.inputData.designtemplatemapping,\r\n                userinfo: inputParam.inputData.userinfo\r\n            });\r\n        let urlArray = [fieldService];\r\n\r\n        if (inputParam.inputData[\"napprovalconfigcode\"]) {\r\n            const regSubTypeVersionService = rsapi.post(\"registrationsubtype/getApprovedVersion\",\r\n                { napprovalconfigcode: inputParam.inputData.napprovalconfigcode });\r\n\r\n            urlArray.push(regSubTypeVersionService);\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let dataResult = {};\r\n                let designData = response[0].data.jsondataobj || {};\r\n                //console.log(\"design:\", designData);\r\n\r\n                if (inputParam[\"SampleType\"] === SampleType.Masters) {\r\n                    // Object.keys(designData).map(formcode => {\r\n                    dataResult = [];\r\n                    designData.mastertemplatefields.map(field =>\r\n                        (field[designProperties.LISTITEM]!==\"label\") &&  //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                        dataResult.push({\r\n                            // label: field[designProperties.VALUE],\r\n                            label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\r\n                            griditem: designData.griditem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                            gridmoreitem: designData.gridmoreitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                            realData: field\r\n                        })\r\n                    )\r\n                    // })                   \r\n                } else if (inputParam[\"SampleType\"] === SampleType.GOODSIN) {\r\n                    dataResult = [];\r\n                    designData.templatefields.map(field =>\r\n                        (field[designProperties.LISTITEM]!==\"label\") && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                        dataResult.push({\r\n                            // label: field[designProperties.VALUE],\r\n                            label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\r\n                            griditem: designData.griditem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                            gridmoreitem: designData.gridmoreitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                            realData: field\r\n                        })\r\n                    )\r\n                }\r\n                //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n                else if (inputParam[\"SampleType\"] === SampleType.PROTOCOL) {\r\n                    dataResult = [];\r\n                    designData.templatefields.map(field =>\r\n                        (field[designProperties.LISTITEM]!==\"label\") && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                        dataResult.push({\r\n                            // label: field[designProperties.VALUE],\r\n                            label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\r\n                            listItem: designData.listItem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                            displayFields: designData.displayFields.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                            realData: field\r\n                        })\r\n                    )\r\n                }\r\n\r\n                else {\r\n                    // const regSubTypeVersionData = response[1].data;\r\n                    //if(regSubTypeVersionData &&  regSubTypeVersionData.jsondata.nneedsubsample === true){\r\n                    if (inputParam.operation === \"configuresubsample\") {\r\n                        Object.keys(designData).map(formcode => {\r\n                            dataResult[formcode] = [];\r\n                            designData.subsampletemplatefields.map(field =>\r\n                                !Array.isArray(designData[formcode]) && formcode !== \"senttostoragefields\" &&\r\n                                (field[designProperties.LISTITEM]!==\"label\") && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                                dataResult[formcode].push({\r\n                                    //label: field[designProperties.VALUE],\r\n                                    label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\r\n                                    subsamplelistitem: designData[formcode].subsamplelistitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                                    realData: field\r\n                                })\r\n                            )\r\n                        })\r\n                    }\r\n                    else {\r\n                        Object.keys(designData).map(formcode => {\r\n                            dataResult[formcode] = [];\r\n                            designData.sampletemplatefields.map(field =>\r\n                                 \r\n                                !Array.isArray(designData[formcode]) && formcode !== \"senttostoragefields\"\r\n                                 && (formcode !== \"143\" ? field[designProperties.VALUE] === \"sreportno\" ? false : true : true) &&\r\n                                 (field[designProperties.LISTITEM]!==\"label\") && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                                dataResult[formcode].push({\r\n                                    // label: field[designProperties.VALUE],\r\n                                    label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\r\n                                    sampledisplayfields: designData[formcode].sampledisplayfields.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                                    // samplelistitem: designData[formcode].samplelistitem.find(val => val[\"2\"] === field[designProperties.VALUE]) === undefined ? \"none\" : true,\r\n                                    samplelistitem: designData[formcode].samplelistitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                                    samplelistmoreitems: designData[formcode].samplelistmoreitems ? designData[formcode].samplelistmoreitems.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined : false,\r\n                                    samplegriditem: designData[formcode].samplegriditem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                                    samplegridmoreitem: designData[formcode].samplegridmoreitem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                                    samplefilteritem: designData[formcode].samplefilteritem.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                                    realData: field\r\n                                })\r\n                            )\r\n                        })\r\n                    }\r\n                }\r\n                // console.log(\"response[1].data:\", response[1].data);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        openModal: true,\r\n                        loading: false,\r\n                        designData: designData,//response[0].data.jsondataobj,\r\n                        approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data : undefined,\r\n                        dataResult,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolcode\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function combinationUniqueConfigService(inputParam) {\r\n    return function (dispatch) {\r\n        const fieldService = rsapi.post('designtemplatemapping/getMappedFieldProps',\r\n            {\r\n                designtemplatemapping: inputParam.inputData.designtemplatemapping,\r\n                userinfo: inputParam.inputData.userinfo\r\n            });\r\n        let urlArray = [fieldService];\r\n\r\n        if (inputParam.inputData[\"napprovalconfigcode\"]) {\r\n            const regSubTypeVersionService = rsapi.post(\"registrationsubtype/getApprovedVersion\",\r\n                { napprovalconfigcode: inputParam.inputData.napprovalconfigcode });\r\n\r\n            urlArray.push(regSubTypeVersionService);\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let dataList = [];\r\n                let dataListCount = [];\r\n                let designData = response[0].data.jsondataobj || {};\r\n\r\n                let dataListSubSample = []\r\n                let dataListCountSubSample = [];\r\n\r\n                if (inputParam[\"SampleType\"] === SampleType.Masters) {\r\n                    dataList = designData.mastercombinationunique && [...designData.mastercombinationunique] || []\r\n                    designData.mastercombinationunique && designData.mastercombinationunique.map((item, index) => { dataListCount.push(index) })\r\n                }\r\n                //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n                else if (inputParam[\"SampleType\"] === SampleType.GOODSIN || inputParam[\"SampleType\"] === SampleType.PROTOCOL) {\r\n                    dataList = designData.combinationunique && [...designData.combinationunique] || []\r\n                    designData.combinationunique && designData.combinationunique.map((item, index) => { dataListCount.push(index) })\r\n\r\n                }\r\n                else {\r\n                    dataList = designData.samplecombinationunique && [...designData.samplecombinationunique] || []\r\n                    designData.samplecombinationunique && designData.samplecombinationunique.map((item, index) => { dataListCount.push(index) })\r\n\r\n                    dataListSubSample = designData.subsamplecombinationunique && [...designData.subsamplecombinationunique] || []\r\n                    designData.subsamplecombinationunique && designData.subsamplecombinationunique.map((item, index) => { dataListCountSubSample.push(index) })\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        openModal: true,\r\n                        loading: false,\r\n                        designData: designData,//response[0].data.jsondataobj,\r\n                        approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data : undefined,\r\n                        dataList, dataListCount, dataListSubSample, dataListCountSubSample,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolcode: inputParam.ncontrolcode\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n////Modified the function by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\nexport function editFieldConfigService(inputParam) {\r\n    return function (dispatch) {\r\n        let filterStatusService =[];\r\n        const fieldService = rsapi.post('designtemplatemapping/getMappedFieldProps',\r\n            {\r\n                designtemplatemapping: inputParam.inputData.designtemplatemapping,\r\n                userinfo: inputParam.inputData.userinfo\r\n            });\r\n\r\n        if(inputParam[\"SampleType\"] !== SampleType.Masters && inputParam[\"SampleType\"] !== SampleType.GOODSIN && inputParam[\"SampleType\"] !== SampleType.PROTOCOL){\r\n            filterStatusService = rsapi.post('registration/getRegistrationFilterStatus',\r\n                {   \r\n                    nregtypecode: inputParam.inputData.nregtypecode,\r\n                    nregsubtypecode: inputParam.inputData.nregsubtypecode,\r\n                    userinfo: { ...inputParam.inputData.userinfo, nformcode: 43 }\r\n                });\r\n        }else if(inputParam[\"SampleType\"] == SampleType.PROTOCOL){\r\n            filterStatusService = rsapi.post('protocol/getEditFilterStatus',\r\n                {   \r\n                  \r\n                    userinfo: { ...inputParam.inputData.userinfo, nformcode: formCode.PROTOCOL}\r\n                });\r\n        }\r\n        \r\n        let urlArray = [fieldService, filterStatusService];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let dataResult = {};\r\n                let designData = response[0].data.jsondataobj || {};\r\n                let filterStatus = response[1].data || [];\r\n\r\n                const list = filterStatus.filter(item => item[\"ntransactionstatus\"] !== 0)\r\n                filterStatus = list;\r\n\r\n                let selectedRecord = {};\r\n                if (inputParam[\"SampleType\"] === SampleType.Masters) {\r\n                    dataResult = [];\r\n                    designData.mastertemplatefields.map(field =>\r\n                        dataResult.push({ label: field[designProperties.VALUE], editablestatus: filterStatus, realData: field })\r\n                    )\r\n                }else if(inputParam[\"SampleType\"] === SampleType.PROTOCOL) {\r\n                    //Object.keys(designData).map(formcode => {\r\n                        dataResult= [];\r\n                        selectedRecord = {};\r\n                        const editArray = designData[\"editable\"] || [];\r\n\r\n                        designData.templatefields.map(field => {\r\n                            //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                            if (!Array.isArray(designData) &&  (field[designProperties.LISTITEM]!==\"label\")) {\r\n\r\n                                const index = editArray.findIndex(x => x.label === field[designProperties.VALUE]);\r\n                                if (index !== -1) {\r\n                                    const fieldEditStatus = editArray[index];\r\n                                    if (fieldEditStatus.editableuntill.length > 0) {\r\n                                        const statusArray = [];\r\n                                        filterStatus.map(item1 => {\r\n\r\n                                            const foundIndex = fieldEditStatus.editableuntill.findIndex(x => x === item1.ntransactionstatus);\r\n\r\n                                            if (foundIndex !== -1) {\r\n                                                statusArray.push({ label: item1.stransdisplaystatus, value: item1.ntransactionstatus, item: item1 });\r\n                                            }\r\n                                        })\r\n                                        selectedRecord[field[designProperties.VALUE]] = statusArray;\r\n\r\n                                        dataResult.push({\r\n                                            label: field[designProperties.VALUE],\r\n                                            editablestatus: filterStatus,\r\n                                            realData: field\r\n                                        })\r\n                                    } else {\r\n\r\n                                        dataResult.push({\r\n                                            label: field[designProperties.VALUE],\r\n                                            editablestatus: filterStatus,\r\n                                            realData: field\r\n                                        })\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        })\r\n\r\n                    //})\r\n                }\r\n                \r\n                else {\r\n                    if (inputParam.operation === \"configuresubsampleedit\") {\r\n                        Object.keys(designData).map(formcode => {\r\n                            dataResult[formcode] = [];\r\n                            selectedRecord[formcode] = {};\r\n                            const editArray = designData[formcode][\"subsampleeditable\"] || [];\r\n\r\n                            designData.subsampletemplatefields.map(field => {\r\n                                //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                                if (!Array.isArray(designData[formcode]) &&  (field[designProperties.LISTITEM]!==\"label\")) {\r\n                                    const index = editArray.findIndex(x => x.label === field[designProperties.VALUE]);\r\n                                    if (index !== -1) {\r\n                                        const fieldEditStatus = editArray[index];\r\n                                        if (fieldEditStatus.editableuntill.length > 0) {\r\n                                            const statusArray = [];\r\n                                            filterStatus.map(item1 => {\r\n\r\n                                                const foundIndex = fieldEditStatus.editableuntill.findIndex(x => x === item1.ntransactionstatus);\r\n\r\n                                                if (foundIndex !== -1) {\r\n                                                    statusArray.push({ label: item1.stransdisplaystatus, value: item1.ntransactionstatus, item: item1 });\r\n                                                }\r\n                                            })\r\n                                            selectedRecord[formcode][field[designProperties.VALUE]] = statusArray;\r\n\r\n                                            dataResult[formcode].push({\r\n                                                label: field[designProperties.VALUE],\r\n                                                editablestatus: filterStatus,\r\n                                                realData: field\r\n                                            })\r\n                                        } else {\r\n\r\n                                            dataResult[formcode].push({\r\n                                                label: field[designProperties.VALUE],\r\n                                                editablestatus: filterStatus,\r\n                                                realData: field\r\n                                            })\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            })\r\n\r\n                        })\r\n                    }\r\n                    else {\r\n                        Object.keys(designData).map(formcode => {\r\n                            dataResult[formcode] = [];\r\n                            selectedRecord[formcode] = {};\r\n                            const editArray = designData[formcode][\"sampleeditable\"] || [];\r\n\r\n                            designData.sampletemplatefields.map(field => {\r\n                                //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                                if ((field[designProperties.LISTITEM]!==\"label\") && !Array.isArray(designData[formcode])) {\r\n\r\n                                    const index = editArray.findIndex(x => x.label === field[designProperties.VALUE]);\r\n                                    if (index !== -1) {\r\n                                        const fieldEditStatus = editArray[index];\r\n                                        if (fieldEditStatus.editableuntill.length > 0) {\r\n                                            const statusArray = [];\r\n                                            filterStatus.map(item1 => {\r\n\r\n                                                const foundIndex = fieldEditStatus.editableuntill.findIndex(x => x === item1.ntransactionstatus);\r\n\r\n                                                if (foundIndex !== -1) {\r\n                                                    statusArray.push({ label: item1.stransdisplaystatus, value: item1.ntransactionstatus, item: item1 });\r\n                                                }\r\n                                            })\r\n                                            selectedRecord[formcode][field[designProperties.VALUE]] = statusArray;\r\n\r\n                                            dataResult[formcode].push({\r\n                                                label: field[designProperties.VALUE],\r\n                                                editablestatus: filterStatus,\r\n                                                realData: field\r\n                                            })\r\n                                        } else {\r\n\r\n                                            dataResult[formcode].push({\r\n                                                label: field[designProperties.VALUE],\r\n                                                editablestatus: filterStatus,\r\n                                                realData: field\r\n                                            })\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            })\r\n\r\n                        })\r\n                    }\r\n                }\r\n\r\n                // console.log(\"selectedRecord:\", selectedRecord);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        openModal: true,\r\n                        loading: false,\r\n                        editFieldDesignData: designData,//response[0].data.jsondataobj,\r\n                        //approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data :undefined,\r\n                        editFieldDataResult: dataResult,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolcode,\r\n                        selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                //console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function mappingFieldConfigService(inputParam) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        let regSubTypeVersionService;\r\n        let fieldService = [];\r\n        fieldService = rsapi.post(\"designtemplatemapping/getMappedfield\",\r\n            { \"ndesigntemplatemappingcode\": inputParam.inputData.designtemplatemapping.ndesigntemplatemappingcode.ndesigntemplatemappingcode, \"userinfo\": inputParam.inputData.userinfo });\r\n        if (inputParam.inputData[\"napprovalconfigcode\"]) {\r\n\r\n            regSubTypeVersionService = rsapi.post(\"registrationsubtype/getApprovedVersion\",\r\n                { napprovalconfigcode: inputParam.inputData.napprovalconfigcode });\r\n\r\n        }\r\n        urlArray = [regSubTypeVersionService, fieldService];\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let dateSubSamLablesNumber = [];\r\n                let dateSubSamLablesComboBox = [];\r\n                let selectedValue = [];\r\n                let data = {};\r\n                let count = 1;\r\n                let dateLablesnumber = [];\r\n                let dateLablescombobox = [];\r\n                if (response[1].data.mappedFields[0].jsondataobj !== null) {\r\n                    response[1].data.mappedFields.map((row) => {\r\n                        let displaynameSampleqty = { \"displayname\": row.jsondataobj.samplefields.nsampleqty['1'] }\r\n                        let displaynameSubSampleqty = { \"displayname\": row.jsondataobj.subsamplefields.nsampleqty['1'] }\r\n                        let displaynameSampleunit = { \"displayname\": row.jsondataobj.samplefields.nunitcode['1'] }\r\n                        let displaynameSubSampleunit = { \"displayname\": row.jsondataobj.subsamplefields.nunitcode['1'] }\r\n                        const Quantity = { \"label\": row.jsondataobj.samplefields.nsampleqty['2'], \"value\": 1, \"item\": displaynameSampleqty };\r\n                        const Unit = { \"label\": row.jsondataobj.samplefields.nunitcode['2'], \"value\": 2, \"item\": displaynameSampleunit }\r\n                        const SubUnit = { \"label\": row.jsondataobj.subsamplefields.nunitcode['2'], \"value\": 3, \"item\": displaynameSubSampleunit }\r\n                        const SubQuantity = { \"label\": row.jsondataobj.subsamplefields.nsampleqty['2'], \"value\": 4, \"item\": displaynameSubSampleqty }\r\n                        const value = { \"Quantity\": Quantity, \"Unit\": Unit, \"SubQuantity\": SubQuantity, \"SubUnit\": SubUnit }\r\n                        selectedValue.push(value);\r\n                    });\r\n                }\r\n                const needsubsample = response[0].data.jsondata.nneedsubsample !== undefined ? response[0].data.jsondata.nneedsubsample : false;\r\n                const samplename = inputParam.inputData.designtemplatemapping.ndesigntemplatemappingcode.sregtemplatename;\r\n                const mainSample = inputParam.inputData.designtemplatemapping.ndesigntemplatemappingcode.jsondata;\r\n                const subSample = inputParam.inputData.designtemplatemapping.ndesigntemplatemappingcode.subsamplejsondata;\r\n                mainSample.map((row) => {\r\n                    row.children.map((column) => {\r\n                        column.children.map((component) => {\r\n                            if (component.children) {\r\n                                component.children.map((componentrow) => {\r\n                                    if (componentrow.children) {\r\n                                        if (componentrow.componentname === 'Number') {\r\n                                            data = { \"LableName\": componentrow.label, \"displayvalue\": count++, \"displayname\": componentrow.displayname }\r\n                                            dateLablesnumber.push(data)\r\n                                        }\r\n                                        if (componentrow.componentname === 'Combo Box' || componentrow.componentname === 'Drop Down') {\r\n                                            data = { \"LableName\": componentrow.label, \"displayvalue\": count++, \"displayname\": componentrow.displayname }\r\n                                            dateLablescombobox.push(data)\r\n\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        if (componentrow.componentname === 'Number') {\r\n                                            data = { \"LableName\": componentrow.label, \"displayvalue\": count++, \"displayname\": componentrow.displayname }\r\n                                            dateLablesnumber.push(data)\r\n                                        }\r\n                                        if (componentrow.componentname === 'Combo Box' || componentrow.componentname === 'Drop Down') {\r\n                                            data = { \"LableName\": componentrow.label, \"displayvalue\": count++, \"displayname\": componentrow.displayname }\r\n                                            dateLablescombobox.push(data)\r\n\r\n                                        }\r\n                                    }\r\n                                })\r\n                            } else {\r\n                                if (component.componentname === 'Number') {\r\n                                    data = { \"LableName\": component.label, \"displayvalue\": count++, \"displayname\": component.displayname }\r\n                                    dateLablesnumber.push(data)\r\n                                }\r\n                                if (component.componentname === 'Combo Box' || component.componentname === 'Drop Down') {\r\n                                    data = { \"LableName\": component.label, \"displayvalue\": count++, \"displayname\": component.displayname }\r\n                                    dateLablescombobox.push(data)\r\n\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n                })\r\n                let countsubsample = 1\r\n                subSample.map((row) => {\r\n                    row.children.map((column) => {\r\n                        column.children.map((component) => {\r\n                            if (component.children) {\r\n                                component.children.map((componentrow) => {\r\n                                    if (componentrow.children) {\r\n                                        if (componentrow.componentname === 'Number') {\r\n                                            data = { \"LableName\": componentrow.displayname[inputParam.inputData.userinfo.slanguagetypecode], \"displayvalue\": countsubsample++, \"displayname\": componentrow.displayname }\r\n                                            dateSubSamLablesNumber.push(data)\r\n\r\n                                        }\r\n                                        if (componentrow.componentname === 'Combo Box' || componentrow.componentname === 'Drop Down') {\r\n                                            data = { \"LableName\": componentrow.displayname[inputParam.inputData.userinfo.slanguagetypecode], \"displayvalue\": countsubsample++, \"displayname\": componentrow.displayname }\r\n                                            dateSubSamLablesComboBox.push(data)\r\n\r\n                                        }\r\n                                    } else {\r\n                                        if (componentrow.componentname === 'Number') {\r\n                                            data = { \"LableName\": componentrow.displayname[inputParam.inputData.userinfo.slanguagetypecode], \"displayvalue\": countsubsample++, \"displayname\": componentrow.displayname }\r\n                                            dateSubSamLablesNumber.push(data)\r\n\r\n                                        }\r\n                                        if (componentrow.componentname === 'Combo Box' || componentrow.componentname === 'Drop Down') {\r\n                                            data = { \"LableName\": componentrow.displayname[inputParam.inputData.userinfo.slanguagetypecode], \"displayvalue\": countsubsample++, \"displayname\": componentrow.displayname }\r\n                                            dateSubSamLablesComboBox.push(data)\r\n\r\n                                        }\r\n                                    }\r\n                                })\r\n                            } else {\r\n                                if (component.componentname === 'Number') {\r\n                                    data = { \"LableName\": component.displayname[inputParam.inputData.userinfo.slanguagetypecode], \"displayvalue\": countsubsample++, \"displayname\": component.displayname }\r\n                                    dateSubSamLablesNumber.push(data)\r\n                                }\r\n                                if (component.componentname === 'Combo Box' || component.componentname === 'Drop Down') {\r\n                                    data = { \"LableName\": component.displayname[inputParam.inputData.userinfo.slanguagetypecode], \"displayvalue\": countsubsample++, \"displayname\": component.displayname }\r\n                                    dateSubSamLablesComboBox.push(data)\r\n\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n                })\r\n                const sample = constructOptionList(dateLablesnumber || [], \"displayvalue\",\r\n                    \"LableName\", \"displayvalue\", undefined, true);\r\n                let SampleTemplateNumber = sample.get(\"OptionList\");\r\n                const sampleCombox = constructOptionList(dateLablescombobox || [], \"displayvalue\",\r\n                    \"LableName\", \"displayvalue\", undefined, true);\r\n                let SampleTemplatecombobox = sampleCombox.get(\"OptionList\");\r\n                const subSampleListNumber = constructOptionList(dateSubSamLablesNumber || [], \"displayvalue\",\r\n                    \"LableName\", \"displayvalue\", undefined, undefined);\r\n                let subSampleTemplateNumber = subSampleListNumber.get(\"OptionList\");\r\n                const subSampleListComboBox = constructOptionList(dateSubSamLablesComboBox || [], \"displayvalue\",\r\n                    \"LableName\", \"displayvalue\", undefined, undefined);\r\n                let subSampleTemplateCombobox = subSampleListComboBox.get(\"OptionList\");\r\n                const value = response[1].data.mappedFields[0].jsondataobj;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        openModal: true,\r\n                        loading: false,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolcode,\r\n                        needsubsample, SampleTemplateNumber, SampleTemplatecombobox,\r\n                        subSampleTemplateNumber, subSampleTemplateCombobox, samplename, needsubsample,\r\n                        selectedValue, selectedRecord: value !== null ? selectedValue[0] : \"\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function auditFieldConfigService(inputParam) {\r\n    return function (dispatch) {\r\n        const fieldService = rsapi.post('designtemplatemapping/getAuditMappedFieldProps',\r\n            {\r\n                designtemplatemapping: inputParam.inputData.designtemplatemapping,\r\n                userinfo: inputParam.inputData.userinfo,\r\n                nregtypecode:inputParam.inputData.nregtypecode,\r\n                nregsubtypecode:inputParam.inputData.nregsubtypecode\r\n            });\r\n        let urlArray = [fieldService];\r\n\r\n        if (inputParam.inputData[\"napprovalconfigcode\"]) {\r\n            const regSubTypeVersionService = rsapi.post(\"registrationsubtype/getApprovedVersion\",\r\n                { napprovalconfigcode: inputParam.inputData.napprovalconfigcode });\r\n\r\n            urlArray.push(regSubTypeVersionService);\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let dataResult = {};\r\n\r\n                let designData = response[0].data[\"MappedTemplateFieldProps\"].jsondataobj || {};\r\n\r\n                const dynamicTable = response[0].data[\"DynamicAuditRecordTable\"] ?\r\n                    Object.keys(response[0].data[\"DynamicAuditRecordTable\"]) : {};\r\n                let auditData = response[0].data[\"DynamicAuditRecordTable\"] || {};\r\n\r\n                console.log(\"design:\", designData, inputParam.inputData.designtemplatemapping.ndesigntemplatemappingcode);\r\n\r\n                console.log(\"auditData:\", auditData);\r\n                if (inputParam[\"SampleType\"] === SampleType.Masters) {\r\n\r\n                    const formcode = Object.keys(auditData)[0];\r\n\r\n                    dataResult[formcode] = { \"dynamicmaster\": [] };\r\n\r\n                    //const tableArray = Object.keys(auditData[formcode]) || [];\r\n                    // tableArray.map(item => dataResult[formcode][item] = []);\r\n\r\n                    designData.mastertemplatefields.map(field => {\r\n                        (field[designProperties.LISTITEM]!==\"label\") && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                        //if(!Array.isArray(designData))\r\n                        //  {    \r\n                        dataResult[formcode][\"dynamicmaster\"].push({\r\n                            //label: field[designProperties.VALUE],\r\n                            label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\r\n                            sampleauditfields: auditData[formcode][\"dynamicmaster\"].jsondataobj.auditcapturefields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\r\n                            sampleauditeditfields: auditData[formcode][\"dynamicmaster\"].jsondataobj.editmandatoryfields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\r\n                            realData: field\r\n                        })\r\n                    })\r\n                    designData = {\r\n                        [formcode]: {\r\n                            ...designData, \"dynamicmaster\": {\r\n                                sampleauditfields: auditData[formcode][\"dynamicmaster\"].jsondataobj.auditcapturefields,\r\n                                sampleauditeditfields: auditData[formcode][\"dynamicmaster\"].jsondataobj.editmandatoryfields,\r\n                                multilingualfields: auditData[formcode][\"dynamicmaster\"].jsondataobj.multilingualfields\r\n                            }\r\n                        }\r\n                    };\r\n                    // designData = {[formcode] : {\"dynamicmaster\": {...designData, \r\n                    //                                                 sampleauditeditfields : auditData[formcode][\"dynamicmaster\"].jsondataobj.editmandatoryfields, \r\n                    //                                                 multilingualfields:auditData[formcode][\"dynamicmaster\"].jsondataobj.multilingualfields\r\n                    //                                             }\r\n                    //                                         }};\r\n                    // }\r\n                    //})                                \r\n\r\n                }else if(inputParam[\"SampleType\"] === SampleType.GOODSIN){\r\n                    const formcode = Object.keys(auditData)[0];\r\n                    dataResult[formcode] = { \"goodsinsample\": [] };\r\n\r\n                    designData.templatefields.map(field => {\r\n                        (field[designProperties.LISTITEM]!==\"label\") && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                        dataResult[formcode][\"goodsinsample\"].push({\r\n                            label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\r\n                            sampleauditfields: auditData[formcode][\"goodsinsample\"].jsondataobj.auditcapturefields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\r\n                            sampleauditeditfields: auditData[formcode][\"goodsinsample\"].jsondataobj.editmandatoryfields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\r\n                            realData: field\r\n                        })\r\n                    })\r\n\r\n                    designData = {\r\n                        [formcode]: {\r\n                            ...designData, \"goodsinsample\": {\r\n                                sampleauditfields: auditData[formcode][\"goodsinsample\"].jsondataobj.auditcapturefields,\r\n                                sampleauditeditfields: auditData[formcode][\"goodsinsample\"].jsondataobj.editmandatoryfields,\r\n                                multilingualfields: auditData[formcode][\"goodsinsample\"].jsondataobj.multilingualfields\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                }\r\n                //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n                else if(inputParam[\"SampleType\"] === SampleType.PROTOCOL){\r\n                    const formcode = Object.keys(auditData)[0];\r\n                    dataResult[formcode] = { \"protocol\": [] };\r\n\r\n                    designData.templatefields.map(field => {\r\n                        (field[designProperties.LISTITEM]!==\"label\") && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                        dataResult[formcode][\"protocol\"].push({\r\n                            label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\r\n                            sampleauditfields: auditData[formcode][\"protocol\"].jsondataobj.auditcapturefields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\r\n                            sampleauditeditfields: auditData[formcode][\"protocol\"].jsondataobj.editmandatoryfields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\r\n                            realData: field\r\n                        })\r\n                    })\r\n\r\n                    designData = {\r\n                        [formcode]: {\r\n                            ...designData, \"protocol\": {\r\n                                sampleauditfields: auditData[formcode][\"protocol\"].jsondataobj.auditcapturefields,\r\n                                sampleauditeditfields: auditData[formcode][\"protocol\"].jsondataobj.editmandatoryfields,\r\n                                multilingualfields: auditData[formcode][\"protocol\"].jsondataobj.multilingualfields\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                }\r\n                else {\r\n                    Object.keys(designData).map(formcode => {\r\n                        if (parseInt(formcode) === formCode.SAMPLEREGISTRATION) {\r\n                            dataResult[formcode] = [];\r\n\r\n                            const tableArray = Object.keys(auditData[formcode]) || [];\r\n                            tableArray.map(item => dataResult[formcode][item] = []);\r\n\r\n                            designData.sampletemplatefields.map(field => {\r\n                                if (!Array.isArray(designData[formcode]) && field[designProperties.VALUE]!=='sreportno'\r\n                                 && field[designProperties.VALUE]!=='ntestcount'  && (field[designProperties.LISTITEM]!==\"label\") ) { //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                                    dataResult[formcode][\"registration\"].push({\r\n                                        //label: field[designProperties.VALUE],\r\n                                        label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\r\n                                        sampleauditfields: auditData[formcode][\"registration\"].jsondataobj.auditcapturefields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\r\n                                        sampleauditeditfields: auditData[formcode][\"registration\"].jsondataobj.editmandatoryfields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\r\n                                        realData: field\r\n                                    })\r\n\r\n                                    designData[formcode][\"registration\"] = { ...designData[formcode][\"registration\"], sampleauditfields: auditData[formcode][\"registration\"].jsondataobj.auditcapturefields, multilingualfields: auditData[formcode][\"registration\"].jsondataobj.auditData };\r\n                                    designData[formcode][\"registration\"] = { ...designData[formcode][\"registration\"], sampleauditeditfields: auditData[formcode][\"registration\"].jsondataobj.editmandatoryfields, multilingualfields: auditData[formcode][\"registration\"].jsondataobj.multilingualfields };\r\n                                }\r\n                            })\r\n\r\n                            if (inputParam.inputData.nneedsubsample) {\r\n                                designData.subsampletemplatefields.map(field => {\r\n                                    if (!Array.isArray(designData[formcode])) {\r\n                                        dataResult[formcode][\"registrationsample\"].push({\r\n                                            //label: field[designProperties.VALUE],\r\n                                            label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\r\n                                            subsampleauditfields: auditData[formcode][\"registrationsample\"].jsondataobj.auditcapturefields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\r\n                                            subsampleauditeditfields: auditData[formcode][\"registrationsample\"].jsondataobj.editmandatoryfields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\r\n                                            realData: field\r\n                                        })\r\n\r\n                                        designData[formcode][\"registrationsample\"] = { ...designData[formcode][\"registrationsample\"], subsampleauditfields: auditData[formcode][\"registrationsample\"].jsondataobj.auditcapturefields, multilingualfields: auditData[formcode][\"registrationsample\"].jsondataobj.multilingualfields };\r\n                                        designData[formcode][\"registrationsample\"] = { ...designData[formcode][\"registrationsample\"], subsampleauditeditfields: auditData[formcode][\"registrationsample\"].jsondataobj.editmandatoryfields, multilingualfields: auditData[formcode][\"registrationsample\"].jsondataobj.multilingualfields };\r\n                                    }\r\n                                }\r\n                                )\r\n                            }\r\n                        }\r\n\r\n                    })\r\n\r\n                }\r\n                console.log(\"response[1].data:\", designData, \"dataResult:\", dataResult);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        openModal: true,\r\n                        loading: false,\r\n                        auditFieldDesignData: designData,//response[0].data.jsondataobj,\r\n                        approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data : undefined,\r\n                        auditFieldDataResult: dataResult,\r\n                        auditData,\r\n                        auditTable: dynamicTable,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolcode\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function exportFieldConfigService(inputParam) {\r\n    return function (dispatch) {\r\n        const fieldService = rsapi.post('designtemplatemapping/getMappedFieldProps',\r\n            {\r\n                designtemplatemapping: inputParam.inputData.designtemplatemapping,\r\n                userinfo: inputParam.inputData.userinfo\r\n            });\r\n        let urlArray = [fieldService];\r\n\r\n        if (inputParam.inputData[\"napprovalconfigcode\"]) {\r\n            const regSubTypeVersionService = rsapi.post(\"registrationsubtype/getApprovedVersion\",\r\n                { napprovalconfigcode: inputParam.inputData.napprovalconfigcode });\r\n\r\n            urlArray.push(regSubTypeVersionService);\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let sampleexportdataResult = {};\r\n                let designData = response[0].data.jsondataobj[formCode.SAMPLEREGISTRATION] || {};\r\n\r\n                if (inputParam[\"SampleType\"] === SampleType.Masters) {\r\n                    sampleexportdataResult['master'] = []\r\n                    response[0].data.jsondataobj.mastertemplatefields.map(field => {\r\n                        (field[designProperties.LISTITEM]!==\"label\") && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                        sampleexportdataResult['master'].push({\r\n                            label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\r\n                            sampleexportfields: response[0].data.jsondataobj.masterexportfields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\r\n                            realData: field\r\n                        })\r\n                    })\r\n\r\n                }else if(inputParam[\"SampleType\"] === SampleType.GOODSIN){\r\n                    sampleexportdataResult['master'] = []\r\n                    response[0].data.jsondataobj.nonmandatoryExportFields.map(field => {\r\n                        (field[designProperties.LISTITEM]!==\"label\") && //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                        sampleexportdataResult['master'].push({\r\n                            label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\r\n                            sampleexportfields: response[0].data.jsondataobj.exportFields.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                          //  sampleexportfields: response[0].data.jsondataobj.exportFields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\r\n                            realData: field\r\n                        })\r\n                    })\r\n                } \r\n                else {\r\n                    sampleexportdataResult['sample'] = []\r\n                    response[0].data.jsondataobj.sampletemplatefields.map(field => {\r\n                        //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                        if (field[designProperties.VALUE] !== \"sarno\" && field[designProperties.VALUE] !== \"sspecname\" && field[designProperties.VALUE] !==\r\n                            \"dregdate\" && field[designProperties.VALUE] !== \"stransdisplaystatus\" && field[designProperties.VALUE]!==\"sreportno\" \r\n                            && field[designProperties.VALUE]!==\"ntestcount\" &&  (field[designProperties.LISTITEM]!==\"label\")  \r\n                            && response[0].data.jsondataobj.sampletemplatemandatory.findIndex(x => x === field[designProperties.VALUE]) === -1) {\r\n\r\n                            sampleexportdataResult[\"sample\"].push({\r\n                                label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\r\n                                sampleexportfields: designData.sampleExportFields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\r\n                                realData: field\r\n                            })\r\n                        }\r\n                    })\r\n\r\n                    if (inputParam.inputData.nneedsubsample) {\r\n                        sampleexportdataResult['subsample'] = []\r\n\r\n                        response[0].data.jsondataobj.subsampletemplatefields.map(field => {\r\n\r\n                            if (field[designProperties.VALUE] !== \"sarno\" && field[designProperties.VALUE] !== \"ssamplearno\" && field[designProperties.VALUE] !==\r\n                                \"stransdisplaystatus\") {\r\n                                sampleexportdataResult[\"subsample\"].push({\r\n                                    label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\r\n                                    sampleexportfields: designData.subSampleExportFields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\r\n                                    realData: field\r\n                                })\r\n                            }\r\n\r\n\r\n                        })\r\n\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        openModal: true,\r\n                        loading: false,\r\n                        designData: response[0].data.jsondataobj,\r\n                        approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data : undefined,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolcode: inputParam.ncontrolcode, sampleexportdataResult\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function configureCheckList(inputParam) {\r\n    return function (dispatch) {\r\n        const fieldService = rsapi.post('designtemplatemapping/getConfigureCheckList',\r\n            {\r\n                ndesigntemplatemappingcode: inputParam.inputData.designtemplatemapping.ndesigntemplatemappingcode,\r\n                userinfo: inputParam.inputData.userinfo\r\n            });\r\n        let urlArray = [fieldService];\r\n\r\n        const fieldService1 = rsapi.post('designtemplatemapping/getMappedFieldProps',\r\n            {\r\n                designtemplatemapping: inputParam.inputData.designtemplatemapping,\r\n                userinfo: inputParam.inputData.userinfo\r\n            });\r\n        urlArray.push(fieldService1);\r\n\r\n\r\n        if (inputParam.inputData[\"napprovalconfigcode\"]) {\r\n            const regSubTypeVersionService = rsapi.post(\"registrationsubtype/getApprovedVersion\",\r\n                { napprovalconfigcode: inputParam.inputData.napprovalconfigcode });\r\n\r\n            urlArray.push(regSubTypeVersionService);\r\n        }\r\n\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const data = response[0].data.ChecklistVersion\r\n                const dataQB = response[0].data.ChecklistVersionQB\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        openModal: true,\r\n                        loading: false,\r\n                        approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[2].data : undefined,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolcode: inputParam.ncontrolcode,\r\n                        checkListData: data,\r\n                        checkListQB: dataQB,\r\n                        designData: response[1].data.jsondataobj,\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function getConfigureCheckListLatestVersion(userinfo) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post('designtemplatemapping/getConfigureCheckListLatestVersion',\r\n            {\r\n                userinfo: userinfo\r\n            })\r\n            .then(response => {\r\n\r\n                const data = constructOptionList(response.data || [], 'nchecklistversioncode', 'schecklistname').get(\"OptionList\")\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        openModal: true,\r\n                        loading: false,\r\n                        checkList: data,\r\n                        operation: \"configurechecklistadd\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function reportFilterType(inputParam) {\r\n    return function (dispatch) {\r\n        const fieldService = rsapi.post('designtemplatemapping/getMappedFieldProps',\r\n            {\r\n                designtemplatemapping: inputParam.inputData.designtemplatemapping,\r\n                userinfo: inputParam.inputData.userinfo\r\n            });\r\n            const filterFields = rsapi.post('designtemplatemapping/getReleaseSampleFilterFields',\r\n            {\r\n                userinfo: inputParam.inputData.userinfo\r\n            });\r\n        let urlArray = [fieldService,filterFields];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let sampleReportFilterTypeData = {};\r\n                let designData = response[0].data.jsondataobj[formCode.SAMPLEREGISTRATION] || {};\r\n                let designStructure = response[0].data.jsondataobj[formCode.RELEASE] || {};\r\n                let jsonParseList=response[1].data||{};\r\n                let sampleFilterFields=[];\r\n\r\n                jsonParseList.map(x=>\r\n                    sampleFilterFields.push(JSON.parse(x.jsondata.value))\r\n                    )\r\n\r\n               \r\n                    sampleReportFilterTypeData['sample'] = []\r\n                    let comboValues = []\r\n                    response[0].data.jsondataobj.sampletemplatefields.map(field => {\r\n                    //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                         if (field[designProperties.VALUE] !== \"sarno\" && field[designProperties.VALUE] !== \"sspecname\" && field[designProperties.VALUE] !==\r\n                             \"dregdate\" && field[designProperties.VALUE] !== \"stransdisplaystatus\" && field[designProperties.VALUE]!==\"sreportno\" \r\n                             && field[designProperties.VALUE]!==\"ntestcount\" &&  (field[designProperties.LISTITEM]!==\"label\"))\r\n                         {\r\n\r\n                                sampleReportFilterTypeData[\"sample\"].push({\r\n                                label: field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode],\r\n                                samplefiltertypefields: designData.samplefiltertypefields && designData.samplefiltertypefields.find(val => val[\"2\"] === field[designProperties.VALUE]) !== undefined,\r\n                                ismandatory: designData.samplefiltertypefields && designData.samplefiltertypefields.find(val => val[\"2\"] === field[designProperties.VALUE] && val[\"ismandatory\"] ) !== undefined,\r\n                                //designData.samplefiltertypefields && designData.samplefiltertypefields.findIndex(x => x === field[designProperties.VALUE]) !== -1,\r\n                                realData: field\r\n                                                        })\r\n                                             \r\n                                    comboValues= field[designProperties.LISTITEM]===\"combo\" ? {...comboValues,\r\n                                    [field[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode]]:[{\"value\":-1,\"title\":'NA'}]}:{...comboValues}\r\n                                    \r\n                                \r\n                       }\r\n                    })\r\n                    sampleFilterFields.map(x=>{\r\n                        sampleReportFilterTypeData[\"sample\"].push({...x,\r\n                            samplefiltertypefields: designData.samplefiltertypefields && designData.samplefiltertypefields.find(val => val[\"2\"] === x.realData[designProperties.VALUE]) !== undefined,\r\n                            ismandatory: designData.samplefiltertypefields && designData.samplefiltertypefields.find(val => val[\"2\"] === x.realData[designProperties.VALUE] && val[\"ismandatory\"] ) !== undefined,\r\n                             })\r\n                             comboValues= x.realData[designProperties.LISTITEM]===\"combo\" ? {...comboValues,\r\n                                [x.realData[designProperties.LABEL][inputParam.inputData.userinfo.slanguagetypecode]]:[{\"value\":-1,\"title\":'NA'}]}:{...comboValues} } );\r\n\r\n                    let  extractedColumnList=queryBuilderfillingColumns(sampleReportFilterTypeData[\"sample\"],inputParam.inputData.userinfo.slanguagetypecode)\r\n                    let fields =getFilterConditionsBasedonDataType(extractedColumnList,comboValues);\r\n                    \r\n                    let awesomeTree=  designStructure.defaultstructure && designStructure.defaultstructure.awesomeTree && \r\n                     checkTree(loadTree(designStructure.defaultstructure.awesomeTree),designStructure.defaultstructure.awesomeConfig) \r\n                    let filterQueryTreeStr=  designStructure.defaultstructure && designStructure.defaultstructure.filterQueryTreeStr\r\n                    let filterquery=  designStructure.defaultstructure && designStructure.defaultstructure.filterquery\r\n                \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        openModal: true,\r\n                        loading: false,\r\n                        designData: response[0].data.jsondataobj,\r\n                        approvedRegSubTypeVersion: inputParam.inputData[\"napprovalconfigcode\"] ? response[1].data : undefined,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolcode: inputParam.ncontrolcode, sampleReportFilterTypeData,\r\n                        awesomeConfig: designStructure.defaultstructure && designStructure.defaultstructure.awesomeConfig,\r\n                        awesomeTree:awesomeTree,fields,comboValues,isInitialRender:true,extractedColumnList,filterQueryTreeStr,filterquery\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}