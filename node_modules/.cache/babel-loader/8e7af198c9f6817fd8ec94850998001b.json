{"ast":null,"code":"import _slicedToArray from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useCallback,useState}from'react';import ReactFlow,{addEdge,//MiniMap,\nControls,Background,useNodesState,useEdgesState}from'react-flow-renderer';//import { nodes as initialNodes, edges as initialEdges } from './initial-element';\nimport'./react-flow-style.css';var onInit=function onInit(reactFlowInstance){return console.log('flow loaded:',reactFlowInstance);};//const getNodeId = () => `randomnode_${+new Date()}`;\nvar FlowRenderer=function FlowRenderer(props){var _useNodesState=useNodesState(props.initialNodes),_useNodesState2=_slicedToArray(_useNodesState,3),nodes=_useNodesState2[0],setNodes=_useNodesState2[1],onNodesChange=_useNodesState2[2];var _useEdgesState=useEdgesState(props.initialEdges),_useEdgesState2=_slicedToArray(_useEdgesState,3),edges=_useEdgesState2[0],setEdges=_useEdgesState2[1],onEdgesChange=_useEdgesState2[2];// const [rfInstance, setRfInstance] = useState(null);\n// const { setViewport } = useReactFlow();\nvar onConnect=useCallback(function(params){return setEdges(function(eds){return addEdge(params,eds);});},[setEdges]);// const onSave = useCallback(() => {\n//   if (rfInstance) {\n//     const flow = rfInstance.toObject();\n//     localStorage.setItem(flowKey, JSON.stringify(flow));\n//   }\n// }, [rfInstance]);\n// const onRestore = useCallback(() => {\n//   const restoreFlow = async () => {\n//     const flow = JSON.parse(localStorage.getItem(flowKey));\n//     if (flow) {\n//       const { x = 0, y = 0, zoom = 1 } = flow.viewport;\n//       setNodes(flow.nodes || []);\n//       setEdges(flow.edges || []);\n//       setViewport({ x, y, zoom });\n//     }\n//   };\n//   restoreFlow();\n// }, [setNodes, setViewport]);\n// const onAdd = useCallback(() => {\n//     const newNode = {\n//     id: getNodeId(),\n//     data: { label: 'Added node' },\n//     position: {\n//         x: Math.random() * window.innerWidth - 100,\n//         y: Math.random() * window.innerHeight,\n//     },\n//     };\n//     setNodes((nds) => nds.concat(newNode));\n// }, [setNodes]);\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),zoomOnScroll=_useState2[0],setZoomOnScroll=_useState2[1];return/*#__PURE__*/React.createElement(\"div\",{style:{height:600}},/*#__PURE__*/React.createElement(ReactFlow,{nodes:nodes,edges:edges//onNodesChange={onNodesChange}\n//onEdgesChange={onEdgesChange}\n,zoomOnScroll:zoomOnScroll,onConnect:onConnect,onInit:onInit,fitView:true,attributionPosition:\"top-right\"},/*#__PURE__*/React.createElement(Controls,{showInteractive:false}),/*#__PURE__*/React.createElement(Background,{color:\"#aaa\",gap:16})));};export default FlowRenderer;// import * as React from 'react'\n// import { FlowChartWithState, Content, Page, Sidebar, SidebarItem } from 'react-work-flow'\n// // Initializes an empty panel\n// const chartSimple = {\n//     offset: {\n//         x: 0,\n//         y: 0\n//     },\n//     nodes: {\n//     },\n//     links: {\n//     },\n//     selected: {},\n//     hovered: {}\n// }\n// const RegistrationType = () => {\n//     let workFlowValue = {}\n//     let getWorkFlowChartValue = (newWorkFlowValue) => {\n//         workFlowValue = newWorkFlowValue\n//         console.log(\"work-flow :\", workFlowValue)\n//     }\n//     return (\n//         <Page>\n//             <Content>\n//                 <FlowChartWithState initialValue={chartSimple} getWorkFlowChartValue={getWorkFlowChartValue} />\n//             </Content>\n//             <Sidebar>\n//                 <div style={{ margin: \"50px\", padding: \"10px\", background: \"rgba(0,0,0,0.05)\" }}>\n//                     Drag and drop these items onto the canvas.\n//                 </div>\n//                 <SidebarItem type=\"start\" />\n//                 <SidebarItem type=\"process-queue\" />\n//                 <SidebarItem type=\"process-point\" />\n//                 <SidebarItem type=\"process-queue\" />\n//                 <SidebarItem type=\"process-point\" />\n//                 <SidebarItem type=\"end\" />\n//             </Sidebar>\n//         </Page>\n//     )\n// }\n// export default RegistrationType;","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/flow-renderer/flow-renderer.component.jsx"],"names":["React","useCallback","useState","ReactFlow","addEdge","Controls","Background","useNodesState","useEdgesState","onInit","reactFlowInstance","console","log","FlowRenderer","props","initialNodes","nodes","setNodes","onNodesChange","initialEdges","edges","setEdges","onEdgesChange","onConnect","params","eds","zoomOnScroll","setZoomOnScroll","height"],"mappings":"kKAAA,MAAOA,CAAAA,KAAP,EAAeC,WAAf,CAA4BC,QAA5B,KAA4C,OAA5C,CAEA,MAAOC,CAAAA,SAAP,EACEC,OADF,CAEE;AACAC,QAHF,CAIEC,UAJF,CAKEC,aALF,CAMEC,aANF,KAOO,qBAPP,CASA;AAEA,MAAO,wBAAP,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,iBAAD,QAAuBC,CAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,CAA4BF,iBAA5B,CAAvB,EAAf,CAEA;AAEA,GAAMG,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAW,CACxB,mBAAyCP,aAAa,CAACO,KAAK,CAACC,YAAP,CAAtD,kDAAOC,KAAP,oBAAcC,QAAd,oBAAwBC,aAAxB,oBACA,mBAAyCV,aAAa,CAACM,KAAK,CAACK,YAAP,CAAtD,kDAAOC,KAAP,oBAAcC,QAAd,oBAAwBC,aAAxB,oBAEA;AACA;AAEA,GAAMC,CAAAA,SAAS,CAAGtB,WAAW,CAAC,SAACuB,MAAD,QAAYH,CAAAA,QAAQ,CAAC,SAACI,GAAD,QAASrB,CAAAA,OAAO,CAACoB,MAAD,CAASC,GAAT,CAAhB,EAAD,CAApB,EAAD,CAAsD,CAACJ,QAAD,CAAtD,CAA7B,CACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,cAAwCnB,QAAQ,CAAC,KAAD,CAAhD,wCAAOwB,YAAP,eAAqBC,eAArB,eAEA,mBACI,2BAAK,KAAK,CAAE,CAAEC,MAAM,CAAE,GAAV,CAAZ,eACI,oBAAC,SAAD,EACI,KAAK,CAAEZ,KADX,CAEI,KAAK,CAAEI,KACP;AACA;AAJJ,CAKI,YAAY,CAAEM,YALlB,CAMI,SAAS,CAAEH,SANf,CAOI,MAAM,CAAEd,MAPZ,CAQI,OAAO,KARX,CASI,mBAAmB,CAAC,WATxB,eA2BI,oBAAC,QAAD,EAAU,eAAe,CAAE,KAA3B,EA3BJ,cA4BI,oBAAC,UAAD,EAAY,KAAK,CAAC,MAAlB,CAAyB,GAAG,CAAE,EAA9B,EA5BJ,CADJ,CADJ,CAwCP,CApFD,CAsFA,cAAeI,CAAAA,YAAf,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, {useCallback, useState } from 'react';\r\n\r\nimport ReactFlow, {\r\n  addEdge,\r\n  //MiniMap,\r\n  Controls,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n} from 'react-flow-renderer';\r\n\r\n//import { nodes as initialNodes, edges as initialEdges } from './initial-element';\r\n\r\nimport './react-flow-style.css';\r\n\r\nconst onInit = (reactFlowInstance) => console.log('flow loaded:', reactFlowInstance);\r\n\r\n//const getNodeId = () => `randomnode_${+new Date()}`;\r\n\r\nconst FlowRenderer = (props) => {\r\n        const [nodes, setNodes, onNodesChange] = useNodesState(props.initialNodes);\r\n        const [edges, setEdges, onEdgesChange] = useEdgesState(props.initialEdges);\r\n \r\n        // const [rfInstance, setRfInstance] = useState(null);\r\n        // const { setViewport } = useReactFlow();\r\n  \r\n        const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), [setEdges]);\r\n        // const onSave = useCallback(() => {\r\n        //   if (rfInstance) {\r\n        //     const flow = rfInstance.toObject();\r\n        //     localStorage.setItem(flowKey, JSON.stringify(flow));\r\n        //   }\r\n        // }, [rfInstance]);\r\n  \r\n        // const onRestore = useCallback(() => {\r\n        //   const restoreFlow = async () => {\r\n        //     const flow = JSON.parse(localStorage.getItem(flowKey));\r\n    \r\n        //     if (flow) {\r\n        //       const { x = 0, y = 0, zoom = 1 } = flow.viewport;\r\n        //       setNodes(flow.nodes || []);\r\n        //       setEdges(flow.edges || []);\r\n        //       setViewport({ x, y, zoom });\r\n        //     }\r\n        //   };\r\n  \r\n        //   restoreFlow();\r\n        // }, [setNodes, setViewport]);\r\n\r\n        // const onAdd = useCallback(() => {\r\n        //     const newNode = {\r\n        //     id: getNodeId(),\r\n        //     data: { label: 'Added node' },\r\n        //     position: {\r\n        //         x: Math.random() * window.innerWidth - 100,\r\n        //         y: Math.random() * window.innerHeight,\r\n        //     },\r\n        //     };\r\n        //     setNodes((nds) => nds.concat(newNode));\r\n        // }, [setNodes]);\r\n\r\n        const [zoomOnScroll, setZoomOnScroll] = useState(false);\r\n\r\n        return (\r\n            <div style={{ height: 600 }}>\r\n                <ReactFlow\r\n                    nodes={nodes}\r\n                    edges={edges}\r\n                    //onNodesChange={onNodesChange}\r\n                    //onEdgesChange={onEdgesChange}\r\n                    zoomOnScroll={zoomOnScroll}\r\n                    onConnect={onConnect}\r\n                    onInit={onInit}\r\n                    fitView\r\n                    attributionPosition=\"top-right\"\r\n                    \r\n                >\r\n                    {/* <MiniMap\r\n                        nodeStrokeColor={(n) => {\r\n                        if (n.style?.background) return n.style.background;\r\n                        if (n.type === 'input') return '#0041d0';\r\n                        if (n.type === 'output') return '#ff0072';\r\n                        if (n.type === 'default') return '#1a192b';\r\n                        return '#eee';\r\n                        }}\r\n                        nodeColor={(n) => {\r\n                        if (n.style?.background) return n.style.background;\r\n\r\n                        return '#fff';\r\n                        }}\r\n                        nodeBorderRadius={2}\r\n                    /> */}\r\n                    <Controls showInteractive={false}/>\r\n                    <Background color=\"#aaa\" gap={16} />\r\n                    \r\n                    {/* <div className=\"save__controls\">\r\n                        <button onClick={onSave}>save</button>\r\n                        <button onClick={onRestore}>restore</button>\r\n                        <button onClick={onAdd}>Add Node</button>\r\n                    </div> */}\r\n                </ReactFlow>\r\n            </div>\r\n        );\r\n};\r\n\r\nexport default FlowRenderer;\r\n\r\n// import * as React from 'react'\r\n// import { FlowChartWithState, Content, Page, Sidebar, SidebarItem } from 'react-work-flow'\r\n\r\n// // Initializes an empty panel\r\n// const chartSimple = {\r\n//     offset: {\r\n//         x: 0,\r\n//         y: 0\r\n//     },\r\n//     nodes: {\r\n//     },\r\n//     links: {\r\n//     },\r\n//     selected: {},\r\n//     hovered: {}\r\n// }\r\n\r\n// const RegistrationType = () => {\r\n//     let workFlowValue = {}\r\n\r\n//     let getWorkFlowChartValue = (newWorkFlowValue) => {\r\n//         workFlowValue = newWorkFlowValue\r\n//         console.log(\"work-flow :\", workFlowValue)\r\n//     }\r\n//     return (\r\n\r\n//         <Page>\r\n//             <Content>\r\n//                 <FlowChartWithState initialValue={chartSimple} getWorkFlowChartValue={getWorkFlowChartValue} />\r\n//             </Content>\r\n//             <Sidebar>\r\n//                 <div style={{ margin: \"50px\", padding: \"10px\", background: \"rgba(0,0,0,0.05)\" }}>\r\n//                     Drag and drop these items onto the canvas.\r\n//                 </div>\r\n//                 <SidebarItem type=\"start\" />\r\n//                 <SidebarItem type=\"process-queue\" />\r\n//                 <SidebarItem type=\"process-point\" />\r\n//                 <SidebarItem type=\"process-queue\" />\r\n//                 <SidebarItem type=\"process-point\" />\r\n//                 <SidebarItem type=\"end\" />\r\n//             </Sidebar>\r\n//         </Page>\r\n//     )\r\n// }\r\n\r\n// export default RegistrationType;"]},"metadata":{},"sourceType":"module"}