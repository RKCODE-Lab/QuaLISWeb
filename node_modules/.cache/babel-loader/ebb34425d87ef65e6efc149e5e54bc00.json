{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\QuaLISWeb\\\\src\\\\pages\\\\Login\\\\AddDigitalSignature.js\";\nimport React from 'react';\nimport { Col, Row, FormGroup, FormLabel, Image } from 'react-bootstrap';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport FormInput from '../../components/form-input/form-input.component';\nimport DropZone from '../../components/dropzone/dropzone.component';\nimport { attachmentType } from '../../components/Enumeration';\nimport { deleteAttachmentDropZone, onDropAttachFileList } from '../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { updateStore } from '../../actions';\nimport { connect } from 'react-redux';\n\nclass AddDigitalSignature extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onDropImage = (attachedFiles, fieldName, maxSize) => {\n      let selectedDigiSign = this.state.selectedDigiSign || {};\n      let mandatoryFields = true;\n      selectedDigiSign[fieldName] = onDropAttachFileList(selectedDigiSign[fieldName], attachedFiles, maxSize);\n\n      if (selectedDigiSign[fieldName].length === 0) {\n        selectedDigiSign[\"ssecuritykey\"] = \"\";\n      }\n\n      this.setState({\n        selectedDigiSign,\n        actionType: \"new\"\n      });\n      this.props.childDataChange(selectedDigiSign, mandatoryFields);\n    };\n\n    this.deleteDigitalSignFile = (event, file, fieldName) => {\n      let selectedDigiSign = this.state.selectedDigiSign || {};\n      let mandatoryFields = true;\n      selectedDigiSign[fieldName] = deleteAttachmentDropZone(selectedDigiSign[fieldName], file);\n      selectedDigiSign[\"ssecuritykey\"] = \"\";\n      this.props.childDataChange(selectedDigiSign, mandatoryFields);\n      this.setState({\n        selectedDigiSign,\n        actionType: \"delete\"\n      });\n    };\n\n    this.state = {\n      selectedDigiSign: this.props.selectedDigiSign,\n      loading: false\n    };\n  }\n\n  onInputChange(event) {\n    const selectedDigiSign = this.state.selectedDigiSign || {};\n\n    if (selectedDigiSign.sdigisignname !== \"\" && selectedDigiSign.sdigisignname.length > 0) {\n      selectedDigiSign[event.target.name] = event.target.value;\n      this.props.childDataChange(selectedDigiSign);\n      this.setState({\n        selectedDigiSign\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.selectedDigiSign !== prevProps.selectedDigiSign) {\n      this.setState({\n        selectedDigiSign: this.props.selectedDigiSign\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        isInitialRender: false\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  render() {\n    // const digitalSignImgPath = this.props.login.settings && this.state.selectedDigiSign && this.state.selectedDigiSign.sdigisignftp ? this.props.login.settings[6]+this.props.login.userInfo.sloginid+\"/\"+this.state.selectedDigiSign.sdigisignftp : null; \n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(DropZone, {\n      name: \"sdigisignname\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_DIGITALSIGNATURE\"\n      }),\n      maxFiles: 1,\n      accept: \".pfx\",\n      minSize: 0,\n      maxSize: 1,\n      onDrop: event => this.onDropImage(event, \"sdigisignname\", 1),\n      multiple: false,\n      editFiles: this.state.selectedDigiSign ? this.state.selectedDigiSign : {},\n      attachmentTypeCode: this.props.operation === \"update\" ? attachmentType.OTHERS : \"\",\n      fileName: \"sdigisignname\",\n      deleteAttachment: this.deleteDigitalSignFile,\n      actionType: this.props.actionType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"ssecuritykey\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_SECURITYKEY\"\n      }),\n      type: \"password\",\n      required: true,\n      isMandatory: this.state.selectedDigiSign && this.state.selectedDigiSign.sdigisignname && (this.state.selectedDigiSign.sdigisignname.hasOwnProperty(\"length\") ? this.state.selectedDigiSign.sdigisignname.length > 0 : this.state.selectedDigiSign.sdigisignname !== \"\") ? true : false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SECURITYKEY\"\n      }),\n      onChange: event => this.onInputChange(event),\n      value: this.state.selectedDigiSign && this.state.selectedDigiSign.ssecuritykey ? this.state.selectedDigiSign.ssecuritykey : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default connect(null, {\n  updateStore\n})(injectIntl(AddDigitalSignature));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/pages/Login/AddDigitalSignature.js"],"names":["React","Col","Row","FormGroup","FormLabel","Image","injectIntl","FormattedMessage","FormInput","DropZone","attachmentType","deleteAttachmentDropZone","onDropAttachFileList","DEFAULT_RETURN","updateStore","connect","AddDigitalSignature","Component","constructor","props","onDropImage","attachedFiles","fieldName","maxSize","selectedDigiSign","state","mandatoryFields","length","setState","actionType","childDataChange","deleteDigitalSignFile","event","file","loading","onInputChange","sdigisignname","target","name","value","componentDidUpdate","prevProps","componentWillUnmount","updateInfo","typeName","data","isInitialRender","render","intl","formatMessage","id","operation","OTHERS","hasOwnProperty","ssecuritykey"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Col, Row, FormGroup, FormLabel, Image} from 'react-bootstrap';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport DropZone from '../../components/dropzone/dropzone.component';\r\nimport { attachmentType } from '../../components/Enumeration';\r\nimport { deleteAttachmentDropZone, onDropAttachFileList } from '../../components/CommonScript';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { updateStore } from '../../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nclass AddDigitalSignature extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedDigiSign: this.props.selectedDigiSign,\r\n            loading: false\r\n        }\r\n    }\r\n\r\n    onDropImage = (attachedFiles, fieldName, maxSize) => {\r\n\r\n        let selectedDigiSign = this.state.selectedDigiSign || {};\r\n        let mandatoryFields = true;\r\n        selectedDigiSign[fieldName] = onDropAttachFileList(selectedDigiSign[fieldName], attachedFiles, maxSize);\r\n        if(selectedDigiSign[fieldName].length === 0){\r\n            selectedDigiSign[\"ssecuritykey\"] = \"\";\r\n        }\r\n        this.setState({ selectedDigiSign, actionType: \"new\" });\r\n        this.props.childDataChange(selectedDigiSign, mandatoryFields);\r\n    }\r\n\r\n    deleteDigitalSignFile = (event, file, fieldName) => {\r\n        let selectedDigiSign = this.state.selectedDigiSign || {};\r\n        let mandatoryFields = true;\r\n        selectedDigiSign[fieldName] = deleteAttachmentDropZone(selectedDigiSign[fieldName], file)\r\n        selectedDigiSign[\"ssecuritykey\"] = \"\"\r\n        this.props.childDataChange(selectedDigiSign, mandatoryFields);\r\n        this.setState({\r\n            selectedDigiSign, actionType: \"delete\"\r\n        });\r\n    }\r\n\r\n    onInputChange(event) {\r\n        const selectedDigiSign = this.state.selectedDigiSign || {};\r\n        if (selectedDigiSign.sdigisignname !== \"\" && selectedDigiSign.sdigisignname.length > 0) {\r\n            selectedDigiSign[event.target.name] = event.target.value;\r\n            this.props.childDataChange(selectedDigiSign);\r\n            this.setState({ selectedDigiSign });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.selectedDigiSign !== prevProps.selectedDigiSign) {\r\n            this.setState({ selectedDigiSign: this.props.selectedDigiSign })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() { \r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN, \r\n            data: { isInitialRender: false  } \r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    \r\n\r\n    render() {\r\n        // const digitalSignImgPath = this.props.login.settings && this.state.selectedDigiSign && this.state.selectedDigiSign.sdigisignftp ? this.props.login.settings[6]+this.props.login.userInfo.sloginid+\"/\"+this.state.selectedDigiSign.sdigisignftp : null; \r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <DropZone\r\n                            name={\"sdigisignname\"}\r\n                            label={this.props.intl.formatMessage({ id: \"IDS_DIGITALSIGNATURE\" })}\r\n                            maxFiles={1}\r\n                            accept=\".pfx\"\r\n                            minSize={0}\r\n                            maxSize={1}\r\n                            onDrop={(event) => this.onDropImage(event, \"sdigisignname\", 1)}\r\n                            multiple={false}\r\n                            editFiles={this.state.selectedDigiSign ? this.state.selectedDigiSign : {}}\r\n                            attachmentTypeCode={this.props.operation === \"update\" ? attachmentType.OTHERS : \"\"}\r\n                            fileName=\"sdigisignname\"\r\n                            deleteAttachment={this.deleteDigitalSignFile}\r\n                            actionType={this.props.actionType}\r\n                        />\r\n                        <FormInput\r\n                            name=\"ssecuritykey\"\r\n                            label={this.props.intl.formatMessage({ id: \"IDS_SECURITYKEY\" })}\r\n                            type=\"password\"\r\n                            required={true}\r\n                            isMandatory={this.state.selectedDigiSign && this.state.selectedDigiSign.sdigisignname && (this.state.selectedDigiSign.sdigisignname.hasOwnProperty(\"length\") ?\r\n                                this.state.selectedDigiSign.sdigisignname.length > 0 : this.state.selectedDigiSign.sdigisignname !== \"\") ? true : false}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SECURITYKEY\" })}\r\n                            onChange={(event) => this.onInputChange(event)}\r\n                            value={this.state.selectedDigiSign && this.state.selectedDigiSign.ssecuritykey ? this.state.selectedDigiSign.ssecuritykey : \"\"}\r\n                        />\r\n                    </Col>\r\n                    {/* <Col md={6}>\r\n                        <FormGroup> */}\r\n                            {/* <FormLabel><FormattedMessage id=\"IDS_DIGITALSIGNIMAGE\" message=\"Digital Signature Image\" /></FormLabel> */}\r\n                            {/* {digitalSignImgPath === null ? \"-\" :\r\n                                <a href={digitalSignImgPath} download>\r\n                                    <Image src={digitalSignImgPath}\r\n                                        width={200} height={200}\r\n                                        rounded\r\n                                        title={this.state.selectedDigiSign && this.state.selectedDigiSign.sdigisignname && this.state.selectedDigiSign.sdigisignname} />\r\n                                </a>\r\n                            } */}\r\n                        {/* </FormGroup>\r\n                    </Col> */}\r\n                </Row>\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nexport default connect(null, {updateStore})(injectIntl(AddDigitalSignature));"]},"metadata":{},"sourceType":"module"}