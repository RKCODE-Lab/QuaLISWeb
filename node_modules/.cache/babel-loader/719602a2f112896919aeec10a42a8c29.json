{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { constructOptionList, rearrangeDateFormat } from '../components/CommonScript';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nexport function getComboSampleProcessing(addParam) {\n  return function (dispatch) {\n    let urlArray = [];\n    const service1 = rsapi.post(\"projecttype/getProjectType\", {\n      userinfo: addParam.userInfo\n    });\n    const service2 = rsapi.post(\"storagesampleprocessing/getSampleType\", {\n      userinfo: addParam.userInfo,\n      nprojecttypecode: addParam.masterData.selectedProjectType.value\n    });\n    const service3 = rsapi.post(\"storagesampleprocessing/getCollectionTubeType\", {\n      userinfo: addParam.userInfo,\n      nprojecttypecode: addParam.masterData.selectedProjectType.value\n    });\n    let userInfo = addParam.userInfo;\n    const service4 = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: userInfo\n    });\n    urlArray = [service1, service2, service3, service4];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedId = null;\n      let sampletype;\n      let collectiontubetype;\n      const sampletypeMap = constructOptionList(response[1].data || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n      sampletype = sampletypeMap.get(\"OptionList\");\n      const collectiontubetypeMap = constructOptionList(response[2].data || [], \"ncollectiontubetypecode\", \"stubename\", undefined, undefined, true);\n      collectiontubetype = collectiontubetypeMap.get(\"OptionList\");\n      let currenttime = rearrangeDateFormat(userInfo, response[3].data);\n      let selectedRecord = { ...addParam.selectedRecord,\n        \"dprocessstartdate\": currenttime,\n        \"dprocessenddate\": \"\"\n      };\n      let masterData = { ...addParam.masterData,\n        \"sprocessstartdatesecondtime\": false,\n        \"barcodedata\": undefined\n      };\n      selectedId = addParam.primaryKeyField;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          sampletype,\n          currenttime,\n          collectiontubetype,\n          masterData,\n          operation: addParam.operation,\n          screenName: addParam.screenName,\n          selectedRecord: selectedRecord,\n          openModal: true,\n          //ALPD-4618--Vignesh R(01-08-2024)\n          ncontrolcode: addParam.ncontrolCode,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n/*export function getCollectionTubeType(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        const service1 = rsapi.post(\"storagesampleprocessing/getCollectionTubeType\", { userinfo: inputParam.inputData.userinfo, nprojecttypecode: inputParam.inputData.nprojecttypecode });\r\n\r\n\r\n\r\n        urlArray = [service1]\r\n\r\n        dispatch(initRequest(true));\r\n\r\n        Axios.all(urlArray).then(response => {\r\n\r\n\r\n            let collectiontubetype;\r\n\r\n\r\n            const collectiontubetypeMap = constructOptionList(response[0].data || [], \"ncollectiontubetypecode\",\r\n                \"stubename\", undefined, undefined, true);\r\n            collectiontubetype = collectiontubetypeMap.get(\"OptionList\");\r\n\r\n            let selectedRecord = { ...inputParam.selectedRecord }\r\n\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    collectiontubetype,\r\n                    selectedRecord: selectedRecord,\r\n                    loading: false\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}*/\n\nexport function getBarcodeDataDetails(inputParam) {\n  return function (dispatch) {\n    if (inputParam.selectedRecord[\"sbarcodeid\"] && inputParam.selectedRecord[\"sbarcodeid\"].length !== inputParam.nbarcodeLength) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_INVALIDBARCODEID\"\n      }));\n    } else {\n      dispatch(initRequest(true));\n      rsapi.post(\"storagesampleprocessing/getBarcodeConfigData\", {\n        userinfo: inputParam.userinfo,\n        nprojecttypecode: inputParam.nprojecttypecode,\n        spositionvalue: inputParam.spositionvalue,\n        nbarcodeLength: inputParam.nbarcodeLength,\n        jsondata: inputParam.jsondata,\n        nsampleprocesstypecode: inputParam.selectedRecord[\"nsampleprocesstypecode\"]\n      }).then(response => {\n        let barcodedata = response.data.jsondataBarcodeData && response.data.jsondataBarcodeData;\n        let sprocessstartdatesecondtime = response.data.sprocessstartdatesecondtime;\n        let sprocessenddate = \"\";\n\n        if (response.data['sprocessenddate'] !== undefined && response.data['sprocessenddate'] !== \"\") {\n          sprocessenddate = rearrangeDateFormat(inputParam.userinfo, response.data['sprocessenddate']);\n        }\n\n        let scomments = response.data.scomments && response.data.scomments || \"\";\n        let sdeviationcomments = response.data.sdeviationcomments && response.data.sdeviationcomments || \"\";\n        let selectedRecord = { ...inputParam.selectedRecord,\n          \"dprocessenddate\": sprocessenddate,\n          \"scomments\": scomments,\n          \"sdeviationcomments\": sdeviationcomments\n        };\n        let masterData = { ...inputParam.masterData,\n          \"barcodedata\": barcodedata,\n          \"jsondataBarcodeFields\": response.data.jsondataBarcodeFields,\n          \"sprocessstartdatesecondtime\": sprocessstartdatesecondtime\n        };\n\n        if (response.data['sprocessstartdate'] !== undefined && response.data['sprocessstartdate'] !== \"\") {\n          let sprocessstartdate = rearrangeDateFormat(inputParam.userinfo, response.data['sprocessstartdate']);\n          selectedRecord = { ...selectedRecord,\n            \"dprocessstartdate\": sprocessstartdate\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            selectedRecord,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n}\nexport function getSampleProcessType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"storagesampleprocessing/getSampleProcessType\", inputParam.inputData).then(response => {\n      let processtype;\n      const processtypeMap = constructOptionList(response.data || [], \"nprocesstypecode\", \"sprocesstypename\", undefined, undefined, false);\n      processtype = processtypeMap.get(\"OptionList\");\n      let selectedRecord = { ...inputParam.selectedRecord,\n        \"processtype\": processtype\n      };\n\n      if (!(response.data && response.data.length > 0)) {\n        selectedRecord = { ...selectedRecord,\n          \"nprocesstypecode\": \"\",\n          \"sprocessduration\": \"\",\n          \"sgraceduration\": \"\"\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getProcessduration(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"storagesampleprocessing/getProcessduration\", inputParam.inputData).then(response => {\n      let selectedRecord = { ...inputParam.selectedRecord,\n        \"nprocesstime\": response.data[0][\"nprocesstime\"],\n        \"ngracetime\": response.data[0][\"ngracetime\"],\n        \"sprocessduration\": response.data[0][\"sprocessduration\"],\n        \"nsampleprocesstypecode\": response.data[0][\"nsampleprocesstypecode\"],\n        \"sgraceduration\": response.data[0][\"sgraceduration\"]\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function saveSampleProcessing(inputParam, masterData) {\n  return function (dispatch) {\n    const service1 = rsapi.post(\"storagesampleprocessing/\" + inputParam.operation + \"SampleProcessing\", inputParam.inputData);\n    const service2 = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: inputParam.inputData.userinfo\n    });\n    let urlArray = [];\n    urlArray = [service1, service2];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let openModal = false;\n\n      if (inputParam.saveType === 2) {\n        openModal = true;\n      }\n\n      let date = rearrangeDateFormat(inputParam.inputData.userinfo, response[1].data);\n      masterData = { ...masterData,\n        \"SampleProcessing\": response[0].data.SampleProcessing,\n        \"barcodedata\": \"\",\n        \"iscommentsrequired\": false,\n        \"isdevaiationrequired\": false,\n        \"sprocessstartdatesecondtime\": false\n      };\n      let selectedRecord = { ...inputParam.selectedRecord,\n        \"sbarcodeid\": \"\",\n        \"nproductcode\": undefined,\n        \"ncollectiontubetypecode\": undefined,\n        \"nprocesstypecode\": \"\",\n        \"sprocessduration\": \"\",\n        \"dprocessenddate\": \"\",\n        \"sdeviationcomments\": \"\",\n        \"scomments\": \"\",\n        \"sgraceduration\": \"\",\n        \"processtype\": [],\n        \"dprocessstartdate\": date\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedRecord,\n          openModal: openModal,\n          loading: false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getActiveSampleProcessingById(editParam) {\n  return function (dispatch) {\n    let selectedId = null;\n    dispatch(initRequest(true));\n    rsapi.post(\"storagesampleprocessing/getActiveSampleProcessingById\", {\n      [editParam.primaryKeyField]: editParam.editRow.nsampleprocessingcode,\n      \"nprojecttypecode\": editParam.editRow.nprojecttypecode,\n      \"userinfo\": editParam.userInfo\n    }).then(response => {\n      selectedId = editParam.primaryKeyValue;\n      let sprocessstartdate = rearrangeDateFormat(editParam.userInfo, response.data.activeSampleProcessingByID['sprocessstartdate']); //let selectedRecord = response.data && response.data.activeSampleProcessingByID\n\n      let jsondataBarcodeFields = response.data.jsondataBarcodeFields;\n      let barcodedata = response.data && response.data.activeSampleProcessingByID.jsondata;\n      let masterData = { ...editParam.masterData,\n        \"barcodedata\": barcodedata,\n        \"sprocessstartdatesecondtime\": response.data.sprocessstartdatesecondtime,\n        \"jsondataBarcodeFields\": jsondataBarcodeFields\n      };\n      let selectedRecord = { ...editParam.selectedRecord,\n        \"sbarcodeid\": response.data.activeSampleProcessingByID['sbarcodeid'],\n        \"dprocessenddate\": response.data.activeSampleProcessingByID['sprocessenddate'] && rearrangeDateFormat(editParam.userInfo, response.data.activeSampleProcessingByID['sprocessenddate']) || \"\",\n        \"dprocessstartdate\": sprocessstartdate,\n        \"scomments\": response.data.activeSampleProcessingByID['scomments'],\n        \"sprocessduration\": response.data.activeSampleProcessingByID['sprocessduration'],\n        nsampleprocesstypecode: response.data.activeSampleProcessingByID[\"nsampleprocesstypecode\"],\n        \"sdeviationcomments\": response.data.activeSampleProcessingByID['sdeviationcomments'],\n        \"sgraceduration\": response.data.activeSampleProcessingByID['sgraceduration'],\n        \"ngracetime\": response.data.activeSampleProcessingByID && response.data.activeSampleProcessingByID['ngracetime'],\n        \"nprocesstime\": response.data.activeSampleProcessingByID && response.data.activeSampleProcessingByID['nprocesstime']\n      };\n      let SampleType = [];\n      let CollectionTubeType = [];\n      let SampleProcessType = [];\n      CollectionTubeType.push({\n        \"value\": response.data.activeSampleProcessingByID[\"ncollectiontubetypecode\"],\n        \"label\": response.data.activeSampleProcessingByID[\"stubename\"]\n      });\n      SampleType.push({\n        \"value\": response.data.activeSampleProcessingByID[\"nproductcode\"],\n        \"label\": response.data.activeSampleProcessingByID[\"sproductname\"]\n      });\n      SampleProcessType.push({\n        \"value\": response.data.activeSampleProcessingByID[\"nprocesstypecode\"],\n        \"label\": response.data.activeSampleProcessingByID[\"sprocesstypename\"]\n      });\n      selectedRecord[\"nproductcode\"] = SampleType[0];\n      selectedRecord[\"nprocesstypecode\"] = SampleProcessType[0];\n      selectedRecord[\"ncollectiontubetypecode\"] = CollectionTubeType[0];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedRecord,\n          operation: editParam.operation,\n          ncontrolcode: editParam.ncontrolCode,\n          openModal: true,\n          loading: false,\n          selectedId,\n          screenName: editParam.screenName,\n          dataState: editParam.dataState\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSampleProcessing(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"storagesampleprocessing/getSampleProcessing\", inputParam.inputData).then(response => {\n      let selectedId = null;\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId,\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n/*\r\nexport function getCommentsDeviation(inputParam) {\r\n    return function (dispatch) {\r\n  \r\n\r\n\r\n        rsapi.post(\"storagesampleprocessing/getCommentsDeviation\", {...inputParam.inputData})\r\n        .then(response => {\r\n\r\n            let masterData = { ...inputParam.masterData, ...response.data }\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData,\r\n                    selectedRecord: {...inputParam.selectedRecord},\r\n                    loading: false\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n    */\n\nexport function validateEsignCredentialSampleProcessing(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo; // if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\n        //     inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n        //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n        //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n        //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n        //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        // }\n\n        dispatch(saveSampleProcessing(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/actions/SampleProcessingActions.js"],"names":["rsapi","Axios","toast","constructOptionList","rearrangeDateFormat","DEFAULT_RETURN","initRequest","intl","getComboSampleProcessing","addParam","dispatch","urlArray","service1","post","userinfo","userInfo","service2","nprojecttypecode","masterData","selectedProjectType","value","service3","service4","all","then","response","selectedId","sampletype","collectiontubetype","sampletypeMap","data","undefined","get","collectiontubetypeMap","currenttime","selectedRecord","primaryKeyField","type","payload","operation","screenName","openModal","ncontrolcode","ncontrolCode","loading","catch","error","status","message","warn","getBarcodeDataDetails","inputParam","length","nbarcodeLength","formatMessage","id","spositionvalue","jsondata","nsampleprocesstypecode","barcodedata","jsondataBarcodeData","sprocessstartdatesecondtime","sprocessenddate","scomments","sdeviationcomments","jsondataBarcodeFields","sprocessstartdate","getSampleProcessType","inputData","processtype","processtypeMap","getProcessduration","saveSampleProcessing","saveType","date","SampleProcessing","loadEsign","getActiveSampleProcessingById","editParam","editRow","nsampleprocessingcode","primaryKeyValue","activeSampleProcessingByID","SampleType","CollectionTubeType","SampleProcessType","push","dataState","getSampleProcessing","validateEsignCredentialSampleProcessing"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,SACIC,mBADJ,EACyBC,mBADzB,QAEO,4BAFP;AAGA,SACIC,cADJ,QAEO,cAFP;AAGA,SAASC,WAAT,QAA4B,eAA5B;AACA,SACIC,IADJ,QAEO,mBAFP;AAIA,OAAO,SAASC,wBAAT,CAAkCC,QAAlC,EAA4C;AAC/C,SAAO,UAAUC,QAAV,EAAoB;AAEvB,QAAIC,QAAQ,GAAG,EAAf;AACA,UAAMC,QAAQ,GAAGZ,KAAK,CAACa,IAAN,CAAW,4BAAX,EAAyC;AAAEC,MAAAA,QAAQ,EAAEL,QAAQ,CAACM;AAArB,KAAzC,CAAjB;AACA,UAAMC,QAAQ,GAAGhB,KAAK,CAACa,IAAN,CAAW,uCAAX,EAAoD;AAAEC,MAAAA,QAAQ,EAAEL,QAAQ,CAACM,QAArB;AAA+BE,MAAAA,gBAAgB,EAAER,QAAQ,CAACS,UAAT,CAAoBC,mBAApB,CAAwCC;AAAzF,KAApD,CAAjB;AACD,UAAMC,QAAQ,GAAGrB,KAAK,CAACa,IAAN,CAAW,+CAAX,EAA4D;AAAEC,MAAAA,QAAQ,EAAEL,QAAQ,CAACM,QAArB;AAA+BE,MAAAA,gBAAgB,EAAER,QAAQ,CAACS,UAAT,CAAoBC,mBAApB,CAAwCC;AAAzF,KAA5D,CAAjB;AAEC,QAAIL,QAAQ,GAAGN,QAAQ,CAACM,QAAxB;AACA,UAAMO,QAAQ,GAAGtB,KAAK,CAACa,IAAN,CAAW,6BAAX,EAA0C;AACvDC,MAAAA,QAAQ,EAAEC;AAD6C,KAA1C,CAAjB;AAMAJ,IAAAA,QAAQ,GAAG,CAACC,QAAD,EAAWI,QAAX,EAAqBK,QAArB,EAA8BC,QAA9B,CAAX;AAEAZ,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AAEAL,IAAAA,KAAK,CAACsB,GAAN,CAAUZ,QAAV,EAAoBa,IAApB,CAAyBC,QAAQ,IAAI;AAGjC,UAAIC,UAAU,GAAG,IAAjB;AACA,UAAIC,UAAJ;AACD,UAAIC,kBAAJ;AAEC,YAAMC,aAAa,GAAG1B,mBAAmB,CAACsB,QAAQ,CAAC,CAAD,CAAR,CAAYK,IAAZ,IAAoB,EAArB,EAAyB,cAAzB,EACrC,cADqC,EACrBC,SADqB,EACVA,SADU,EACC,IADD,CAAzC;AAEAJ,MAAAA,UAAU,GAAGE,aAAa,CAACG,GAAd,CAAkB,YAAlB,CAAb;AAEA,YAAMC,qBAAqB,GAAG9B,mBAAmB,CAACsB,QAAQ,CAAC,CAAD,CAAR,CAAYK,IAAZ,IAAoB,EAArB,EAAyB,yBAAzB,EAC7C,WAD6C,EAChCC,SADgC,EACrBA,SADqB,EACV,IADU,CAAjD;AAEIH,MAAAA,kBAAkB,GAAGK,qBAAqB,CAACD,GAAtB,CAA0B,YAA1B,CAArB;AAEJ,UAAIE,WAAW,GAAG9B,mBAAmB,CAACW,QAAD,EAAWU,QAAQ,CAAC,CAAD,CAAR,CAAYK,IAAvB,CAArC;AAEA,UAAIK,cAAc,GAAG,EAAE,GAAG1B,QAAQ,CAAC0B,cAAd;AAA8B,6BAAqBD,WAAnD;AAA+D,2BAAkB;AAAjF,OAArB;AACA,UAAIhB,UAAU,GAAC,EAAC,GAAGT,QAAQ,CAACS,UAAb;AAAwB,uCAA8B,KAAtD;AAA4D,uBAAca;AAA1E,OAAf;AAEAL,MAAAA,UAAU,GAAGjB,QAAQ,CAAC2B,eAAtB;AACA1B,MAAAA,QAAQ,CAAC;AACL2B,QAAAA,IAAI,EAAEhC,cADD;AACiBiC,QAAAA,OAAO,EAAE;AAC3BX,UAAAA,UAD2B;AAE3BO,UAAAA,WAF2B;AAG5BN,UAAAA,kBAH4B;AAI5BV,UAAAA,UAJ4B;AAK3BqB,UAAAA,SAAS,EAAE9B,QAAQ,CAAC8B,SALO;AAKIC,UAAAA,UAAU,EAAE/B,QAAQ,CAAC+B,UALzB;AAM3BL,UAAAA,cAAc,EAAEA,cANW;AAO3BM,UAAAA,SAAS,EAAE,IAPgB;AAQ7C;AACkBC,UAAAA,YAAY,EAAEjC,QAAQ,CAACkC,YATI;AAU3BC,UAAAA,OAAO,EAAE,KAVkB;AAUXlB,UAAAA;AAVW;AAD1B,OAAD,CAAR;AAcH,KAnCD,EAoCKmB,KApCL,CAoCWC,KAAK,IAAI;AACZpC,MAAAA,QAAQ,CAAC;AAAE2B,QAAAA,IAAI,EAAEhC,cAAR;AAAwBiC,QAAAA,OAAO,EAAE;AAAEM,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACrB,QAAN,CAAesB,MAAf,KAA0B,GAA9B,EAAmC;AAC/B7C,QAAAA,KAAK,CAAC4C,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACD9C,QAAAA,KAAK,CAAC+C,IAAN,CAAWH,KAAK,CAACrB,QAAN,CAAeK,IAA1B;AACH;AACJ,KA5CL;AA6CH,GA/DD;AAiEH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,SAASoB,qBAAT,CAA+BC,UAA/B,EAA2C;AAC9C,SAAO,UAAUzC,QAAV,EAAoB;AACvB,QAAGyC,UAAU,CAAChB,cAAX,CAA0B,YAA1B,KAAyCgB,UAAU,CAAChB,cAAX,CAA0B,YAA1B,EAAwCiB,MAAxC,KAAiDD,UAAU,CAACE,cAAxG,EAAuH;AACjHnD,MAAAA,KAAK,CAAC+C,IAAN,CAAW1C,IAAI,CAAC+C,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAnB,CAAX;AAEL,KAHD,MAGK;AACD7C,MAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AAEJN,MAAAA,KAAK,CAACa,IAAN,CAAW,8CAAX,EAA2D;AAAEC,QAAAA,QAAQ,EAAEqC,UAAU,CAACrC,QAAvB;AAAiCG,QAAAA,gBAAgB,EAAEkC,UAAU,CAAClC,gBAA9D;AAAgFuC,QAAAA,cAAc,EAAEL,UAAU,CAACK,cAA3G;AAA2HH,QAAAA,cAAc,EAAEF,UAAU,CAACE,cAAtJ;AAAsKI,QAAAA,QAAQ,EAAEN,UAAU,CAACM,QAA3L;AAAoMC,QAAAA,sBAAsB,EAACP,UAAU,CAAChB,cAAX,CAA0B,wBAA1B;AAA3N,OAA3D,EAA6UX,IAA7U,CAAkVC,QAAQ,IAAI;AAE1V,YAAIkC,WAAW,GAAGlC,QAAQ,CAACK,IAAT,CAAc8B,mBAAd,IAAmCnC,QAAQ,CAACK,IAAT,CAAc8B,mBAAnE;AACA,YAAIC,2BAA2B,GAAGpC,QAAQ,CAACK,IAAT,CAAc+B,2BAAhD;AACA,YAAIC,eAAe,GAAC,EAApB;;AACA,YAAGrC,QAAQ,CAACK,IAAT,CAAc,iBAAd,MAAmCC,SAAnC,IAA8CN,QAAQ,CAACK,IAAT,CAAc,iBAAd,MAAmC,EAApF,EAAuF;AAClFgC,UAAAA,eAAe,GAAG1D,mBAAmB,CAAC+C,UAAU,CAACrC,QAAZ,EAAsBW,QAAQ,CAACK,IAAT,CAAc,iBAAd,CAAtB,CAArC;AAEJ;;AACD,YAAIiC,SAAS,GAACtC,QAAQ,CAACK,IAAT,CAAciC,SAAd,IAAyBtC,QAAQ,CAACK,IAAT,CAAciC,SAAvC,IAAoD,EAAlE;AACA,YAAIC,kBAAkB,GAACvC,QAAQ,CAACK,IAAT,CAAckC,kBAAd,IAAkCvC,QAAQ,CAACK,IAAT,CAAckC,kBAAhD,IAAqE,EAA5F;AAGA,YAAI7B,cAAc,GAAC,EAAC,GAAGgB,UAAU,CAAChB,cAAf;AAA8B,6BAAkB2B,eAAhD;AAAgE,uBAAYC,SAA5E;AAAsF,gCAAqBC;AAA3G,SAAnB;AACA,YAAI9C,UAAU,GAAG,EAAE,GAAGiC,UAAU,CAACjC,UAAhB;AAA4B,yBAAeyC,WAA3C;AAAuD,mCAAwBlC,QAAQ,CAACK,IAAT,CAAcmC,qBAA7F;AAAmH,yCAA8BJ;AAAjJ,SAAjB;;AAGA,YAAGpC,QAAQ,CAACK,IAAT,CAAc,mBAAd,MAAqCC,SAArC,IAAgDN,QAAQ,CAACK,IAAT,CAAc,mBAAd,MAAqC,EAAxF,EAA2F;AACxF,cAAIoC,iBAAiB,GAAG9D,mBAAmB,CAAC+C,UAAU,CAACrC,QAAZ,EAAsBW,QAAQ,CAACK,IAAT,CAAc,mBAAd,CAAtB,CAA3C;AACKK,UAAAA,cAAc,GAAC,EAAC,GAAGA,cAAJ;AAAmB,iCAAoB+B;AAAvC,WAAf;AACR;;AACWxD,QAAAA,QAAQ,CAAC;AAChB2B,UAAAA,IAAI,EAAEhC,cADU;AACMiC,UAAAA,OAAO,EAAE;AAC3BpB,YAAAA,UAD2B;AAE3BiB,YAAAA,cAF2B;AAG3BS,YAAAA,OAAO,EAAE;AAHkB;AADf,SAAD,CAAR;AAOd,OA5BD,EA8BKC,KA9BL,CA8BWC,KAAK,IAAI;AACZpC,QAAAA,QAAQ,CAAC;AAAE2B,UAAAA,IAAI,EAAEhC,cAAR;AAAwBiC,UAAAA,OAAO,EAAE;AAAEM,YAAAA,OAAO,EAAE;AAAX;AAAjC,SAAD,CAAR;;AACA,YAAIE,KAAK,CAACrB,QAAN,CAAesB,MAAf,KAA0B,GAA9B,EAAmC;AAC/B7C,UAAAA,KAAK,CAAC4C,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAGK;AACD9C,UAAAA,KAAK,CAAC+C,IAAN,CAAWH,KAAK,CAACrB,QAAN,CAAeK,IAA1B;AACH;AACJ,OAtCL;AAuCH;AACA,GA/CD;AAgDH;AAGD,OAAO,SAASqC,oBAAT,CAA8BhB,UAA9B,EAA0C;AAC7C,SAAO,UAAUzC,QAAV,EAAoB;AAEvBA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AAEAN,IAAAA,KAAK,CAACa,IAAN,CAAW,8CAAX,EAA2DsC,UAAU,CAACiB,SAAtE,EACC5C,IADD,CACMC,QAAQ,IAAI;AAEL,UAAI4C,WAAJ;AAEG,YAAMC,cAAc,GAAGnE,mBAAmB,CAACsB,QAAQ,CAACK,IAAT,IAAiB,EAAlB,EAAsB,kBAAtB,EACtC,kBADsC,EAClBC,SADkB,EACPA,SADO,EACI,KADJ,CAA1C;AAEIsC,MAAAA,WAAW,GAAGC,cAAc,CAACtC,GAAf,CAAmB,YAAnB,CAAd;AAGA,UAAIG,cAAc,GAAG,EAAE,GAAGgB,UAAU,CAAChB,cAAhB;AAA+B,uBAAckC;AAA7C,OAArB;;AACA,UAAG,EAAE5C,QAAQ,CAACK,IAAT,IAAeL,QAAQ,CAACK,IAAT,CAAcsB,MAAd,GAAqB,CAAtC,CAAH,EAA4C;AACxCjB,QAAAA,cAAc,GAAC,EAAC,GAAGA,cAAJ;AAAmB,8BAAmB,EAAtC;AAAyC,8BAAmB,EAA5D;AAA+D,4BAAiB;AAAhF,SAAf;AAEH;;AACjBzB,MAAAA,QAAQ,CAAC;AACL2B,QAAAA,IAAI,EAAEhC,cADD;AACiBiC,QAAAA,OAAO,EAAE;AAC3BH,UAAAA,cAAc,EAAEA,cADW;AAE3BS,UAAAA,OAAO,EAAE;AAFkB;AAD1B,OAAD,CAAR;AAMH,KArBD,EAsBKC,KAtBL,CAsBWC,KAAK,IAAI;AACZpC,MAAAA,QAAQ,CAAC;AAAE2B,QAAAA,IAAI,EAAEhC,cAAR;AAAwBiC,QAAAA,OAAO,EAAE;AAAEM,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACrB,QAAN,CAAesB,MAAf,KAA0B,GAA9B,EAAmC;AAC/B7C,QAAAA,KAAK,CAAC4C,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACD9C,QAAAA,KAAK,CAAC+C,IAAN,CAAWH,KAAK,CAACrB,QAAN,CAAeK,IAA1B;AACH;AACJ,KA9BL;AA+BH,GAnCD;AAqCH;AAED,OAAO,SAASyC,kBAAT,CAA4BpB,UAA5B,EAAwC;AAC3C,SAAO,UAAUzC,QAAV,EAAoB;AAEvBA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AAEAN,IAAAA,KAAK,CAACa,IAAN,CAAW,4CAAX,EAAyDsC,UAAU,CAACiB,SAApE,EACC5C,IADD,CACMC,QAAQ,IAAI;AAEd,UAAIU,cAAc,GAAG,EAAE,GAAGgB,UAAU,CAAChB,cAAhB;AAA+B,wBAAeV,QAAQ,CAACK,IAAT,CAAc,CAAd,EAAiB,cAAjB,CAA9C;AAA+E,sBAAaL,QAAQ,CAACK,IAAT,CAAc,CAAd,EAAiB,YAAjB,CAA5F;AAA2H,4BAAmBL,QAAQ,CAACK,IAAT,CAAc,CAAd,EAAiB,kBAAjB,CAA9I;AACjB,kCAAyBL,QAAQ,CAACK,IAAT,CAAc,CAAd,EAAiB,wBAAjB,CADR;AACmD,0BAAiBL,QAAQ,CAACK,IAAT,CAAc,CAAd,EAAiB,gBAAjB;AADpE,OAArB;AAGApB,MAAAA,QAAQ,CAAC;AACL2B,QAAAA,IAAI,EAAEhC,cADD;AACiBiC,QAAAA,OAAO,EAAE;AAC3BH,UAAAA,cAAc,EAAEA,cADW;AAE3BS,UAAAA,OAAO,EAAE;AAFkB;AAD1B,OAAD,CAAR;AAMH,KAZD,EAaKC,KAbL,CAaWC,KAAK,IAAI;AACZpC,MAAAA,QAAQ,CAAC;AAAE2B,QAAAA,IAAI,EAAEhC,cAAR;AAAwBiC,QAAAA,OAAO,EAAE;AAAEM,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACrB,QAAN,CAAesB,MAAf,KAA0B,GAA9B,EAAmC;AAC/B7C,QAAAA,KAAK,CAAC4C,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACD9C,QAAAA,KAAK,CAAC+C,IAAN,CAAWH,KAAK,CAACrB,QAAN,CAAeK,IAA1B;AACH;AACJ,KArBL;AAsBH,GA1BD;AA4BH;AAED,OAAO,SAAS0C,oBAAT,CAA8BrB,UAA9B,EAA0CjC,UAA1C,EAAsD;AACzD,SAAO,UAAUR,QAAV,EAAoB;AAEvB,UAAME,QAAQ,GAAGZ,KAAK,CAACa,IAAN,CAAW,6BAA6BsC,UAAU,CAACZ,SAAxC,GAAoD,kBAA/D,EAAmFY,UAAU,CAACiB,SAA9F,CAAjB;AACA,UAAMpD,QAAQ,GAAGhB,KAAK,CAACa,IAAN,CAAW,6BAAX,EAA0C;AACvDC,MAAAA,QAAQ,EAACqC,UAAU,CAACiB,SAAX,CAAqBtD;AADyB,KAA1C,CAAjB;AAGA,QAAIH,QAAQ,GAAC,EAAb;AACAA,IAAAA,QAAQ,GAAG,CAACC,QAAD,EAAWI,QAAX,CAAX;AAEAN,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAL,IAAAA,KAAK,CAACsB,GAAN,CAAUZ,QAAV,EAAoBa,IAApB,CAAyBC,QAAQ,IAAI;AAElC,UAAIgB,SAAS,GAAC,KAAd;;AAEA,UAAGU,UAAU,CAACsB,QAAX,KAAsB,CAAzB,EAA2B;AAC1BhC,QAAAA,SAAS,GAAC,IAAV;AACA;;AACD,UAAIiC,IAAI,GAAGtE,mBAAmB,CAAC+C,UAAU,CAACiB,SAAX,CAAqBtD,QAAtB,EAAgCW,QAAQ,CAAC,CAAD,CAAR,CAAYK,IAA5C,CAA9B;AAGCZ,MAAAA,UAAU,GAAG,EAAE,GAAGA,UAAL;AAAiB,4BAAoBO,QAAQ,CAAC,CAAD,CAAR,CAAYK,IAAZ,CAAiB6C,gBAAtD;AAAwE,uBAAc,EAAtF;AAAyF,8BAAqB,KAA9G;AAAoH,gCAAuB,KAA3I;AAAiJ,uCAA8B;AAA/K,OAAb;AAGA,UAAIxC,cAAc,GAAG,EAAE,GAAGgB,UAAU,CAAChB,cAAhB;AAAgC,sBAAc,EAA9C;AAAiD,wBAAeJ,SAAhE;AAA0E,mCAA0BA,SAApG;AAA8G,4BAAmB,EAAjI;AAAoI,4BAAmB,EAAvJ;AAA0J,2BAAkB,EAA5K;AACjB,8BAAqB,EADJ;AACS,qBAAa,EADtB;AACyB,0BAAiB,EAD1C;AAC8C,uBAAc,EAD5D;AAC+D,6BAAoB2C;AADnF,OAArB;AAIAhE,MAAAA,QAAQ,CAAC;AACL2B,QAAAA,IAAI,EAAEhC,cADD;AACiBiC,QAAAA,OAAO,EAAE;AAC3BpB,UAAAA,UAD2B;AAE3BiB,UAAAA,cAF2B;AAG3BM,UAAAA,SAAS,EAAEA,SAHgB;AAI3BG,UAAAA,OAAO,EAAE,KAJkB;AAK3BgC,UAAAA,SAAS,EAAC;AALiB;AAD1B,OAAD,CAAR;AASH,KA1BD,EA2BK/B,KA3BL,CA2BWC,KAAK,IAAI;AACZpC,MAAAA,QAAQ,CAAC;AAAE2B,QAAAA,IAAI,EAAEhC,cAAR;AAAwBiC,QAAAA,OAAO,EAAE;AAAEM,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACrB,QAAN,CAAesB,MAAf,KAA0B,GAA9B,EAAmC;AAC/B7C,QAAAA,KAAK,CAAC4C,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACD9C,QAAAA,KAAK,CAAC+C,IAAN,CAAWH,KAAK,CAACrB,QAAN,CAAeK,IAA1B;AACH;AACJ,KAnCL;AAoCH,GA9CD;AAgDH;AAED,OAAO,SAAS+C,6BAAT,CAAuCC,SAAvC,EAAkD;AACrD,SAAO,UAAUpE,QAAV,EAAoB;AAEvB,QAAIgB,UAAU,GAAG,IAAjB;AACAhB,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AAEAN,IAAAA,KAAK,CAACa,IAAN,CAAW,uDAAX,EAAoE;AAAE,OAACiE,SAAS,CAAC1C,eAAX,GAA6B0C,SAAS,CAACC,OAAV,CAAkBC,qBAAjD;AAAuE,0BAAmBF,SAAS,CAACC,OAAV,CAAkB9D,gBAA5G;AAA8H,kBAAY6D,SAAS,CAAC/D;AAApJ,KAApE,EAAoOS,IAApO,CAAyOC,QAAQ,IAAI;AACjPC,MAAAA,UAAU,GAAGoD,SAAS,CAACG,eAAvB;AAEA,UAAIf,iBAAiB,GAAG9D,mBAAmB,CAAC0E,SAAS,CAAC/D,QAAX,EAAqBU,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,CAAyC,mBAAzC,CAArB,CAA3C,CAHiP,CAMjP;;AACA,UAAIjB,qBAAqB,GAAGxC,QAAQ,CAACK,IAAT,CAAcmC,qBAA1C;AACA,UAAIN,WAAW,GAAGlC,QAAQ,CAACK,IAAT,IAAiBL,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,CAAyCzB,QAA5E;AACA,UAAIvC,UAAU,GAAG,EAAE,GAAG4D,SAAS,CAAC5D,UAAf;AAA2B,uBAAeyC,WAA1C;AACd,uCAA8BlC,QAAQ,CAACK,IAAT,CAAc+B,2BAD9B;AAC0D,iCAAwBI;AADlF,OAAjB;AAGD,UAAK9B,cAAc,GAAG,EACjB,GAAG2C,SAAS,CAAC3C,cADI;AACY,sBAAcV,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,CAAyC,YAAzC,CAD1B;AAErB,2BAAmBzD,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,CAAyC,iBAAzC,KAA8D9E,mBAAmB,CAAC0E,SAAS,CAAC/D,QAAX,EAAqBU,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,CAAyC,iBAAzC,CAArB,CAAjF,IAAqK,EAFnK;AAEsK,6BAAqBhB,iBAF3L;AAE8M,qBAAazC,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,CAAyC,WAAzC,CAF3N;AAEiR,4BAAmBzD,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,CAAyC,kBAAzC,CAFpS;AAGrBxB,QAAAA,sBAAsB,EAACjC,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,CAAyC,wBAAzC,CAHF;AAIrB,8BAAqBzD,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,CAAyC,oBAAzC,CAJA;AAKrB,0BAAiBzD,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,CAAyC,gBAAzC,CALI;AAMrB,sBAAazD,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,IAA0CzD,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,CAAyC,YAAzC,CANlC;AAOvB,wBAAezD,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,IAA0CzD,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,CAAyC,cAAzC;AAPlC,OAAtB;AAWC,UAAIC,UAAU,GAAG,EAAjB;AACA,UAAIC,kBAAkB,GAAG,EAAzB;AACA,UAAIC,iBAAiB,GAAG,EAAxB;AACAD,MAAAA,kBAAkB,CAACE,IAAnB,CAAwB;AACpB,iBAAS7D,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,CAAyC,yBAAzC,CADW;AAEpB,iBAASzD,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,CAAyC,WAAzC;AAFW,OAAxB;AAIAC,MAAAA,UAAU,CAACG,IAAX,CAAgB;AACZ,iBAAS7D,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,CAAyC,cAAzC,CADG;AAEZ,iBAASzD,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,CAAyC,cAAzC;AAFG,OAAhB;AAIAG,MAAAA,iBAAiB,CAACC,IAAlB,CAAuB;AACnB,iBAAS7D,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,CAAyC,kBAAzC,CADU;AAEnB,iBAASzD,QAAQ,CAACK,IAAT,CAAcoD,0BAAd,CAAyC,kBAAzC;AAFU,OAAvB;AAIA/C,MAAAA,cAAc,CAAC,cAAD,CAAd,GAAiCgD,UAAU,CAAC,CAAD,CAA3C;AACAhD,MAAAA,cAAc,CAAC,kBAAD,CAAd,GAAqCkD,iBAAiB,CAAC,CAAD,CAAtD;AACAlD,MAAAA,cAAc,CAAC,yBAAD,CAAd,GAA4CiD,kBAAkB,CAAC,CAAD,CAA9D;AAGA1E,MAAAA,QAAQ,CAAC;AACL2B,QAAAA,IAAI,EAAEhC,cADD;AACiBiC,QAAAA,OAAO,EAAE;AAC3BpB,UAAAA,UAD2B;AAE3BiB,UAAAA,cAF2B;AAG3BI,UAAAA,SAAS,EAAEuC,SAAS,CAACvC,SAHM;AAI3BG,UAAAA,YAAY,EAAEoC,SAAS,CAACnC,YAJG;AAK3BF,UAAAA,SAAS,EAAE,IALgB;AAM3BG,UAAAA,OAAO,EAAE,KANkB;AAO3BlB,UAAAA,UAP2B;AAQ3Bc,UAAAA,UAAU,EAAEsC,SAAS,CAACtC,UARK;AAS3B+C,UAAAA,SAAS,EAACT,SAAS,CAACS;AATO;AAD1B,OAAD,CAAR;AAcH,KAzDD,EA0DK1C,KA1DL,CA0DWC,KAAK,IAAI;AACZpC,MAAAA,QAAQ,CAAC;AAAE2B,QAAAA,IAAI,EAAEhC,cAAR;AAAwBiC,QAAAA,OAAO,EAAE;AAAEM,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACrB,QAAN,CAAesB,MAAf,KAA0B,GAA9B,EAAmC;AAC/B7C,QAAAA,KAAK,CAAC4C,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACD9C,QAAAA,KAAK,CAAC+C,IAAN,CAAWH,KAAK,CAACrB,QAAN,CAAeK,IAA1B;AACH;AACJ,KAlEL;AAmEH,GAxED;AA0EH;AAED,OAAO,SAAS0D,mBAAT,CAA6BrC,UAA7B,EAAyC;AAC5C,SAAO,UAAUzC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAON,KAAK,CAACa,IAAN,CAAW,6CAAX,EAA0DsC,UAAU,CAACiB,SAArE,EACF5C,IADE,CACGC,QAAQ,IAAI;AACd,UAAIC,UAAU,GAAC,IAAf;AACA,UAAIR,UAAU,GAAG,EAAE,GAAGiC,UAAU,CAACjC,UAAhB;AAA4B,WAAGO,QAAQ,CAACK;AAAxC,OAAjB;AACApB,MAAAA,QAAQ,CAAC;AACL2B,QAAAA,IAAI,EAAEhC,cADD;AAELiC,QAAAA,OAAO,EAAE;AACLZ,UAAAA,UADK;AAELR,UAAAA,UAFK;AAEO0B,UAAAA,OAAO,EAAE;AAFhB;AAFJ,OAAD,CAAR;AAOH,KAXE,EAYFC,KAZE,CAYIC,KAAK,IAAI;AACZpC,MAAAA,QAAQ,CAAC;AAAE2B,QAAAA,IAAI,EAAEhC,cAAR;AAAwBiC,QAAAA,OAAO,EAAE;AAAEM,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACrB,QAAN,CAAesB,MAAf,KAA0B,GAA9B,EAAmC;AAC/B7C,QAAAA,KAAK,CAAC4C,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACD9C,QAAAA,KAAK,CAAC+C,IAAN,CAAWH,KAAK,CAACrB,QAAN,CAAeK,IAA1B;AACH;AACJ,KApBE,CAAP;AAqBH,GAvBD;AAwBH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAAS2D,uCAAT,CAAiDtC,UAAjD,EAA6D;AAChE,SAAQzC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAON,KAAK,CAACa,IAAN,CAAW,+BAAX,EAA4CsC,UAAU,CAACiB,SAAvD,EACF5C,IADE,CACGC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACK,IAAT,KAAkB,SAAtB,EAAiC;AAI7BqB,QAAAA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoD,UAApD,IAAkEA,UAAU,CAACiB,SAAX,CAAqBtD,QAAvF,CAJ6B,CAM7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAGIJ,QAAAA,QAAQ,CAAC8D,oBAAoB,CAACrB,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,CAAD,EAAwCA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,CAAxC,CAArB,CAAR;AAGP;AACJ,KArBE,EAsBFN,KAtBE,CAsBIC,KAAK,IAAI;AACZpC,MAAAA,QAAQ,CAAC;AACL2B,QAAAA,IAAI,EAAEhC,cADD;AAELiC,QAAAA,OAAO,EAAE;AACLM,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAIE,KAAK,CAACrB,QAAN,CAAesB,MAAf,KAA0B,GAA9B,EAAmC;AAC/B7C,QAAAA,KAAK,CAAC4C,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH9C,QAAAA,KAAK,CAAC+C,IAAN,CAAWH,KAAK,CAACrB,QAAN,CAAeK,IAA1B;AACH;AACJ,KAlCE,CAAP;AAmCH,GArCD;AAsCH","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport {\r\n    constructOptionList, rearrangeDateFormat\r\n} from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\n\r\nexport function getComboSampleProcessing(addParam) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        const service1 = rsapi.post(\"projecttype/getProjectType\", { userinfo: addParam.userInfo });\r\n        const service2 = rsapi.post(\"storagesampleprocessing/getSampleType\", { userinfo: addParam.userInfo, nprojecttypecode: addParam.masterData.selectedProjectType.value });\r\n       const service3 = rsapi.post(\"storagesampleprocessing/getCollectionTubeType\", { userinfo: addParam.userInfo, nprojecttypecode: addParam.masterData.selectedProjectType.value });\r\n\r\n        let userInfo = addParam.userInfo;\r\n        const service4 = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo: userInfo\r\n        });\r\n\r\n\r\n\r\n        urlArray = [service1, service2, service3,service4]\r\n\r\n        dispatch(initRequest(true));\r\n\r\n        Axios.all(urlArray).then(response => {\r\n\r\n\r\n            let selectedId = null;\r\n            let sampletype;\r\n           let collectiontubetype;\r\n\r\n            const sampletypeMap = constructOptionList(response[1].data || [], \"nproductcode\",\r\n                \"sproductname\", undefined, undefined, true);\r\n            sampletype = sampletypeMap.get(\"OptionList\");\r\n\r\n            const collectiontubetypeMap = constructOptionList(response[2].data || [], \"ncollectiontubetypecode\",\r\n                \"stubename\", undefined, undefined, true);\r\n                collectiontubetype = collectiontubetypeMap.get(\"OptionList\");\r\n\r\n            let currenttime = rearrangeDateFormat(userInfo, response[3].data);\r\n\r\n            let selectedRecord = { ...addParam.selectedRecord, \"dprocessstartdate\": currenttime,\"dprocessenddate\":\"\"}\r\n            let masterData={...addParam.masterData,\"sprocessstartdatesecondtime\":false,\"barcodedata\":undefined }\r\n\r\n            selectedId = addParam.primaryKeyField;\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    sampletype,\r\n                    currenttime,\r\n                   collectiontubetype,\r\n                   masterData,\r\n                    operation: addParam.operation, screenName: addParam.screenName,\r\n                    selectedRecord: selectedRecord,\r\n                    openModal: true,\r\n\t\t//ALPD-4618--Vignesh R(01-08-2024)\r\n                    ncontrolcode: addParam.ncontrolCode,\r\n                    loading: false, selectedId\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\n/*export function getCollectionTubeType(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        const service1 = rsapi.post(\"storagesampleprocessing/getCollectionTubeType\", { userinfo: inputParam.inputData.userinfo, nprojecttypecode: inputParam.inputData.nprojecttypecode });\r\n\r\n\r\n\r\n        urlArray = [service1]\r\n\r\n        dispatch(initRequest(true));\r\n\r\n        Axios.all(urlArray).then(response => {\r\n\r\n\r\n            let collectiontubetype;\r\n\r\n\r\n            const collectiontubetypeMap = constructOptionList(response[0].data || [], \"ncollectiontubetypecode\",\r\n                \"stubename\", undefined, undefined, true);\r\n            collectiontubetype = collectiontubetypeMap.get(\"OptionList\");\r\n\r\n            let selectedRecord = { ...inputParam.selectedRecord }\r\n\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    collectiontubetype,\r\n                    selectedRecord: selectedRecord,\r\n                    loading: false\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}*/\r\n\r\n\r\nexport function getBarcodeDataDetails(inputParam) {\r\n    return function (dispatch) {\r\n        if(inputParam.selectedRecord[\"sbarcodeid\"]&&inputParam.selectedRecord[\"sbarcodeid\"].length!==inputParam.nbarcodeLength){\r\n              toast.warn(intl.formatMessage({ id: \"IDS_INVALIDBARCODEID\"}));\r\n\r\n        }else{\r\n            dispatch(initRequest(true));\r\n\r\n        rsapi.post(\"storagesampleprocessing/getBarcodeConfigData\", { userinfo: inputParam.userinfo, nprojecttypecode: inputParam.nprojecttypecode, spositionvalue: inputParam.spositionvalue, nbarcodeLength: inputParam.nbarcodeLength, jsondata: inputParam.jsondata,nsampleprocesstypecode:inputParam.selectedRecord[\"nsampleprocesstypecode\"] }).then(response => {\r\n\r\n            let barcodedata = response.data.jsondataBarcodeData&&response.data.jsondataBarcodeData;\r\n            let sprocessstartdatesecondtime = response.data.sprocessstartdatesecondtime;\r\n            let sprocessenddate=\"\";\r\n            if(response.data['sprocessenddate']!==undefined&&response.data['sprocessenddate']!==\"\"){\r\n                 sprocessenddate = rearrangeDateFormat(inputParam.userinfo, response.data['sprocessenddate']);\r\n\r\n            }\r\n            let scomments=response.data.scomments&&response.data.scomments || \"\";\r\n            let sdeviationcomments=response.data.sdeviationcomments&&response.data.sdeviationcomments ||\"\";\r\n          \r\n\r\n            let selectedRecord={...inputParam.selectedRecord,\"dprocessenddate\":sprocessenddate,\"scomments\":scomments,\"sdeviationcomments\":sdeviationcomments}\r\n            let masterData = { ...inputParam.masterData, \"barcodedata\": barcodedata,\"jsondataBarcodeFields\":response.data.jsondataBarcodeFields,\"sprocessstartdatesecondtime\":sprocessstartdatesecondtime}\r\n           \r\n           \r\n            if(response.data['sprocessstartdate']!==undefined&&response.data['sprocessstartdate']!==\"\"){\r\n               let sprocessstartdate = rearrangeDateFormat(inputParam.userinfo, response.data['sprocessstartdate']);\r\n                    selectedRecord={...selectedRecord,\"dprocessstartdate\":sprocessstartdate}\r\n           }\r\n                       dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData,\r\n                    selectedRecord,\r\n                    loading: false\r\n                }\r\n            });\r\n        }\r\n        )\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n    }\r\n}\r\n\r\n\r\nexport function getSampleProcessType(inputParam) {\r\n    return function (dispatch) {\r\n  \r\n        dispatch(initRequest(true));\r\n\r\n        rsapi.post(\"storagesampleprocessing/getSampleProcessType\", inputParam.inputData)\r\n        .then(response => {\r\n\r\n                     let processtype;\r\n                    \r\n                        const processtypeMap = constructOptionList(response.data || [], \"nprocesstypecode\",\r\n                            \"sprocesstypename\", undefined, undefined, false);\r\n                            processtype = processtypeMap.get(\"OptionList\");\r\n                    \r\n                     \r\n                            let selectedRecord = { ...inputParam.selectedRecord,\"processtype\":processtype}\r\n                            if(!(response.data&&response.data.length>0)){\r\n                                selectedRecord={...selectedRecord,\"nprocesstypecode\":\"\",\"sprocessduration\":\"\",\"sgraceduration\":\"\"}\r\n          \r\n                            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    selectedRecord: selectedRecord,\r\n                    loading: false\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function getProcessduration(inputParam) {\r\n    return function (dispatch) {\r\n  \r\n        dispatch(initRequest(true));\r\n\r\n        rsapi.post(\"storagesampleprocessing/getProcessduration\", inputParam.inputData)\r\n        .then(response => {\r\n\r\n            let selectedRecord = { ...inputParam.selectedRecord,\"nprocesstime\":response.data[0][\"nprocesstime\"],\"ngracetime\":response.data[0][\"ngracetime\"],\"sprocessduration\":response.data[0][\"sprocessduration\"],\r\n                \"nsampleprocesstypecode\":response.data[0][\"nsampleprocesstypecode\"],\"sgraceduration\":response.data[0][\"sgraceduration\"]}\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    selectedRecord: selectedRecord,\r\n                    loading: false\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function saveSampleProcessing(inputParam, masterData) {\r\n    return function (dispatch) {\r\n\r\n        const service1 = rsapi.post(\"storagesampleprocessing/\" + inputParam.operation + \"SampleProcessing\", inputParam.inputData);\r\n        const service2 = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo:inputParam.inputData.userinfo\r\n        });\r\n        let urlArray=[];\r\n        urlArray = [service1, service2];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray).then(response => {\r\n\r\n           let openModal=false;\r\n\r\n           if(inputParam.saveType===2){\r\n            openModal=true;\r\n           }\r\n           let date = rearrangeDateFormat(inputParam.inputData.userinfo, response[1].data);\r\n\r\n\r\n            masterData = { ...masterData, \"SampleProcessing\": response[0].data.SampleProcessing, \"barcodedata\":\"\",\"iscommentsrequired\":false,\"isdevaiationrequired\":false,\"sprocessstartdatesecondtime\":false }\r\n          \r\n\r\n            let selectedRecord = { ...inputParam.selectedRecord, \"sbarcodeid\": \"\",\"nproductcode\":undefined,\"ncollectiontubetypecode\":undefined,\"nprocesstypecode\":\"\",\"sprocessduration\":\"\",\"dprocessenddate\":\"\",\r\n                \"sdeviationcomments\":\"\",  \"scomments\": \"\",\"sgraceduration\":\"\" ,\"processtype\":[],\"dprocessstartdate\":date}\r\n            \r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData,\r\n                    selectedRecord,\r\n                    openModal: openModal,\r\n                    loading: false,\r\n                    loadEsign:false\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function getActiveSampleProcessingById(editParam) {\r\n    return function (dispatch) {\r\n\r\n        let selectedId = null;\r\n        dispatch(initRequest(true));\r\n\r\n        rsapi.post(\"storagesampleprocessing/getActiveSampleProcessingById\", { [editParam.primaryKeyField]: editParam.editRow.nsampleprocessingcode,\"nprojecttypecode\":editParam.editRow.nprojecttypecode, \"userinfo\": editParam.userInfo }).then(response => {\r\n            selectedId = editParam.primaryKeyValue;\r\n           \r\n            let sprocessstartdate = rearrangeDateFormat(editParam.userInfo, response.data.activeSampleProcessingByID['sprocessstartdate']);\r\n          \r\n\r\n            //let selectedRecord = response.data && response.data.activeSampleProcessingByID\r\n            let jsondataBarcodeFields = response.data.jsondataBarcodeFields;\r\n            let barcodedata = response.data && response.data.activeSampleProcessingByID.jsondata;\r\n            let masterData = { ...editParam.masterData, \"barcodedata\": barcodedata,\r\n               \"sprocessstartdatesecondtime\":response.data.sprocessstartdatesecondtime,\"jsondataBarcodeFields\":jsondataBarcodeFields\r\n            }\r\n           let  selectedRecord = {\r\n                ...editParam.selectedRecord, \"sbarcodeid\": response.data.activeSampleProcessingByID['sbarcodeid'],\r\n            \"dprocessenddate\": response.data.activeSampleProcessingByID['sprocessenddate']&& rearrangeDateFormat(editParam.userInfo, response.data.activeSampleProcessingByID['sprocessenddate'])|| \"\",\"dprocessstartdate\": sprocessstartdate, \"scomments\": response.data.activeSampleProcessingByID['scomments'],\"sprocessduration\":response.data.activeSampleProcessingByID['sprocessduration'],\r\n            nsampleprocesstypecode:response.data.activeSampleProcessingByID[\"nsampleprocesstypecode\"],\r\n            \"sdeviationcomments\":response.data.activeSampleProcessingByID['sdeviationcomments'],\r\n            \"sgraceduration\":response.data.activeSampleProcessingByID['sgraceduration'],\r\n            \"ngracetime\":response.data.activeSampleProcessingByID&&response.data.activeSampleProcessingByID['ngracetime'],\r\n          \"nprocesstime\":response.data.activeSampleProcessingByID&&response.data.activeSampleProcessingByID['nprocesstime']\r\n\r\n            }\r\n\r\n            let SampleType = [];\r\n            let CollectionTubeType = [];\r\n            let SampleProcessType = [];\r\n            CollectionTubeType.push({\r\n                \"value\": response.data.activeSampleProcessingByID[\"ncollectiontubetypecode\"],\r\n                \"label\": response.data.activeSampleProcessingByID[\"stubename\"]\r\n            });\r\n            SampleType.push({\r\n                \"value\": response.data.activeSampleProcessingByID[\"nproductcode\"],\r\n                \"label\": response.data.activeSampleProcessingByID[\"sproductname\"]\r\n            });\r\n            SampleProcessType.push({\r\n                \"value\": response.data.activeSampleProcessingByID[\"nprocesstypecode\"],\r\n                \"label\": response.data.activeSampleProcessingByID[\"sprocesstypename\"]\r\n            });\r\n            selectedRecord[\"nproductcode\"] = SampleType[0];\r\n            selectedRecord[\"nprocesstypecode\"] = SampleProcessType[0];\r\n            selectedRecord[\"ncollectiontubetypecode\"] = CollectionTubeType[0];\r\n\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData,\r\n                    selectedRecord,\r\n                    operation: editParam.operation,\r\n                    ncontrolcode: editParam.ncontrolCode,\r\n                    openModal: true,\r\n                    loading: false,\r\n                    selectedId,\r\n                    screenName: editParam.screenName,\r\n                    dataState:editParam.dataState\r\n\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function getSampleProcessing(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"storagesampleprocessing/getSampleProcessing\", inputParam.inputData)\r\n            .then(response => {\r\n                let selectedId=null;\r\n                let masterData = { ...inputParam.masterData, ...response.data }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId,\r\n                        masterData, loading: false,\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n/*\r\nexport function getCommentsDeviation(inputParam) {\r\n    return function (dispatch) {\r\n  \r\n\r\n\r\n        rsapi.post(\"storagesampleprocessing/getCommentsDeviation\", {...inputParam.inputData})\r\n        .then(response => {\r\n\r\n            let masterData = { ...inputParam.masterData, ...response.data }\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData,\r\n                    selectedRecord: {...inputParam.selectedRecord},\r\n                    loading: false\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n    */\r\n\r\nexport function validateEsignCredentialSampleProcessing(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n\r\n\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    // if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                    //     inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                    //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                    //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                    //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n                    //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n                    // }\r\n                    \r\n\t\r\n                        dispatch(saveSampleProcessing(inputParam[\"screenData\"][\"inputParam\"],inputParam[\"screenData\"][\"masterData\"]))\r\n \r\n                 \r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}