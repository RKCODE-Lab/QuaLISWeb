{"ast":null,"code":"import Axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { intl } from \"../components/App\";\nimport { constructOptionList, replaceUpdatedObject, sortData } from \"../components/CommonScript\";\nimport { reportCOAType, REPORTTYPE, SampleType } from \"../components/Enumeration\";\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\nimport rsapi from \"../rsapi\";\nimport { initRequest } from \"./LoginAction\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\"; // export function getReleasedSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\n//     return function (dispatch) {\n//       if (inputData !== undefined &&inputData.npreregno!==\"\") {\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"release/updateRelease\",\n//             inputData\n//         )\n//             .then(response => {\n//                 if (response.data.statusCodeValue !== 200) {\n//                     toast.warn(intl.formatMessage({\n//                         id: response.data.body\n//                     }));\n//                     dispatch({\n//                         type: DEFAULT_RETURN,\n//                         payload: {\n//                             loading: false\n//                         }\n//                     });\n//                 }\n//                 else {\n//                     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\n//                         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\n//                     }\n//                     let masterData = {\n//                         ...Data1, ...response.data.body,\n//                     };\n//                     console.log(\"ReleasedTest,\", masterData);\n//                      sortData(masterData.ReleaseHistory,\"\",'sreportno');\n//                   //  dispatch(generateReport(inputData,masterData))\n//                     dispatch({\n//                         type: DEFAULT_RETURN, payload: {\n//                             masterData,\n//                             change: inputData.change,\n//                             loading: false,\n//                             openModal:false\n//                         }\n//                     });\n//                 }\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                     console.log(\"ErrorRelease,\", error);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//         }\n//         else {\n//             toast.warn(intl.formatMessage({\n//                 id: \"IDS_SELECTANYONESAMPLE\"\n//             }));\n//         }\n//     }\n// }\n\nexport function getReleasedRegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getRegistrationType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            SampleTypeValue: inputData.SampleTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedRegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getRegistrationSubType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegTypeValue: inputData.RegTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedFilterBasedTest(inputData) {\n  return function (dispatch) {\n    if (inputData.napprovalversioncode) {\n      dispatch(initRequest(true));\n      rsapi.post(\"release/getFilterBasedTest\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...responseData,\n              RegSubTypeValue: inputData.RegSubTypeValue,\n              ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n              DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n            },\n            loading: false\n          }\n        });\n\n        if (response.data.rtn) {\n          toast.warn(response.data.rtn);\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_PLSSELECTALLVALUESINFILTER\"\n      }));\n    }\n  };\n}\nexport function getReleasedApprovalVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovalVersion\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData // fromDate: inputParam.inputData.dfrom,\n            // toDate: inputParam.inputData.dto,\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseSample\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = {};\n      let nsectioncode = {}; // if (response.data.ReleasedSampleDetails && response.data.ReleasedSampleDetails.length !== 0 ||\n      //     response.data.ReleaseSample && response.data.ReleaseSample.length === 0) {\n\n      masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (nsectioncode !== undefined) {\n        nsectioncode = inputParam.inputData.nsectioncode;\n      } // }\n      //     else {\n      //         responseData.ReleaseHistory = []\n      //         responseData.selectedReleaseHistory= []\n      //         masterData = {\n      //             ...inputParam.masterData,\n      //             ...responseData,\n      //         }\n      //     }\n\n\n      sortData(masterData, \"\", \"ncoaparentcode\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          nsectioncode: nsectioncode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    inputParam.inputData['isAddPopup'] = true;\n    const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n\n    const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n    const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\n\n    if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE || inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n      urlArray = [projectType];\n    } else if (inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n      urlArray = [sectionType];\n    } else {\n      urlArray = [releaseSample //,reportType\n      ];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\n      //     \"scoareporttypename\", undefined, undefined, false);\n      // const ReportTypeList = reportTypeMap.get(\"OptionList\");\n      let ProjectTypeList = [];\n      let sectionList = []; // let selectedRecord = {\"ncoareporttypecode\": {\n      //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\n      //      \"label\": response[1].data.ReportType[0].scoareporttypename\n      // }\n      // };\n\n      let masterData = {};\n      let openModal = true;\n      let selectedRecord = inputParam.inputData.selectedRecord;\n\n      if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE || inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n        const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\n        ProjectTypeList = projectTypeMap.get(\"OptionList\");\n        masterData = { ...inputParam.masterData,\n          ReleaseSubSample: [],\n          ReleaseTest: [],\n          ReleaseSample: []\n        };\n\n        if (inputParam.inputData.selectedRecord.nprojecttypecode) {\n          delete inputParam.inputData.selectedRecord.nprojecttypecode;\n        }\n\n        if (inputParam.inputData.selectedRecord.nprojectmastercode) {\n          delete inputParam.inputData.selectedRecord.nprojectmastercode;\n        }\n      } else if (inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n        const sectionTypeMap = constructOptionList(response[0].data.sectionList || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n        sectionList = sectionTypeMap.get(\"OptionList\");\n        masterData = { ...inputParam.masterData,\n          ReleaseSubSample: [],\n          ReleaseTest: [],\n          ReleaseSample: []\n        };\n\n        if (inputParam.inputData.selectedRecord.nsectioncode) {\n          delete inputParam.inputData.selectedRecord.nsectioncode;\n        }\n      } else {\n        if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\n          let responseData = { ...response[0].data\n          };\n          masterData = { ...inputParam.masterData,\n            ...responseData\n          };\n        } else {\n          let responseData = { ...response[0].data\n          };\n          masterData = { ...inputParam.masterData,\n            ...responseData\n          };\n          openModal = false;\n          toast.warn(intl.formatMessage({\n            id: \"IDS_NOSAMPLESAREAVAILABLE\"\n          }));\n        }\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          expandCheck: false,\n          ProjectTypeList,\n          ncontrolCode,\n          isDeletePopup: false,\n          isComboCheck: false,\n          isEditPopup: false,\n          screenName: inputParam.inputData.screenName,\n          sectionList,\n          loading: false,\n          showFilter: false,\n          openModal: openModal,\n          isAddPopup: true,\n          operation: \"save\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function generateReleasedReport(inputData, Data) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/updateRelease\", inputData).then(response => {\n      if (response.data[\"PortalStatus\"] && response.data[\"PortalStatus\"].length > 0) {\n        dispatch(UpdateExternalOrderStatus(response.data[\"PortalStatus\"], inputData));\n      }\n\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputData.change,\n          masterData,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseConfigVersionRegTemplateDesign\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedDataDetails(inputParam, coahistory) {\n  return function (dispatch) {\n    let inputParamData = {\n      dfrom: inputParam.inputData.dfrom,\n      dto: inputParam.inputData.dto,\n      nsampletypecode: inputParam.inputData.nsampletypecode,\n      nregtypecode: inputParam.inputData.nregtypecode,\n      nregsubtypecode: inputParam.inputData.nregsubtypecode,\n      ntransactionstatus: inputParam.inputData.ntransactionstatus,\n      nsectioncode: inputParam.inputData.nsectioncode,\n      ntestcode: inputParam.inputData.ntestcode,\n      napprovalversioncode: inputParam.inputData.napprovalversioncode,\n      napprovalconfigcode: inputParam.inputData.napprovalconfigcode,\n      userinfo: inputParam.inputData.userinfo,\n      nneedsubsample: inputParam.inputData.nneedsubsample,\n      ncoaparentcode: inputParam.ncoaparentcode,\n      npreregno: inputParam.npreregno,\n      ncoareporttypecode: inputParam.inputData.ncoareporttypecode,\n      ndesigntemplatemappingcode: inputParam.masterData.ndesigntemplatemappingcode,\n      isAddPopup: false\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseSample\", inputParamData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedProjectByProjectType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedProjectByProjectType\", inputData).then(response => {\n      const projectMasterMap = constructOptionList(response.data.projectMasterList || [], \"nprojectmastercode\", \"sprojectcode\", undefined, undefined, false);\n      const projectMasterList = projectMasterMap.get(\"OptionList\");\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          projectMasterList,\n          masterData: { ...inputData.masterData,\n            ...responseData\n          },\n          loading: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedProjectType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedProjectType\", inputData).then(response => {\n      const projectTypeMap = constructOptionList(response.data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\n      const ProjectTypeList = projectTypeMap.get(\"OptionList\"); //     const projectMasterMap = constructOptionList(response.data || [], \"nprojecttypecode\",\n      //     \"sprojecttypename\", undefined, undefined, false);\n      // const projectMasterList = projectMasterMap.get(\"OptionList\");\n\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ProjectTypeList,\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            ProjectTypeValue: inputData.ProjectTypeValue\n          },\n          loading: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSectionForSectionWise(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getSection\", inputData.inputData).then(response => {\n      const sectionMap = constructOptionList(response.data.sectionList || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n      const sectionList = sectionMap.get(\"OptionList\");\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          sectionList,\n          masterData: { ...inputData.masterData,\n            ...responseData\n          },\n          loading: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportForPortal(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/SendToPortalReport\", inputData).then(response => {\n      if (response.data[\"rtn\"]) {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function UpdateExternalOrderStatus(portallist, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(String(inputParam[\"url\"]) + \"/portal/UpdateMultiSampleStatus\", JSON.stringify(portallist), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedRecordsAsDraft(userInfo, Data1, inputData) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/saveRelease\", inputData).then(response => {\n        //  if (response.data.statusCodeValue !== 200) {\n        // toast.warn(intl.formatMessage({\n        //     id: response.data.body\n        // }));\n        // dispatch({\n        //     type: DEFAULT_RETURN,\n        //     payload: {\n        //         loading: false\n        //     }\n        // });\n        //   }\n        // else {\n        //     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\n        //         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\n        //     }\n        let masterData = { ...Data1,\n          ...response.data\n        };\n        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            change: inputData.change,\n            loading: false,\n            openModal: false,\n            expandCheck: false\n          }\n        }); // }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function previewAndFinalReport(inputParam, Data) {\n  return function (dispatch) {\n    dispatch(initRequest(true)); // const inputData = {\n    //     npreregno: inputParam.npreregno,\n    //  //   nsectioncode: inputParam.nsectioncode || -1,\n    //     userinfo: inputParam.userinfo,\n    //     nprimarykey: inputParam.npreregno,\n    //     nreporttypecode: REPORTTYPE.COAREPORT,\n    //     sprimarykeyname: \"npreregno\",\n    //     ncontrolcode: inputParam.ncontrolCode,\n    //     nregtypecode: inputParam.nregtypecode,\n    //     nregsubtypecode: inputParam.nregsubtypecode,\n    //     ntransactiontestcode:inputParam.ntransactiontestcode,\n    //     napproveconfversioncode: inputParam.napprovalversioncode,\n    //     ncoaparentcode: inputParam.ncoaparentcode,\n    //     ntransactionstatus:inputParam.ntransactionstatus\n    // }\n\n    rsapi.post(\"release/generateReleasedReport\", inputParam).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRemoveApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    inputParam.inputData['isPopup'] = true;\n    const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n    // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n    const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\n    urlArray = [releaseSample, statusService //,reportType\n    ];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      if (response[1].data.Status === \"Success\") {\n        let masterData = {};\n        let selectedRecord = inputParam.inputData.selectedRecord;\n        let responseData = { ...response[0].data\n        };\n        masterData = { ...inputParam.masterData,\n          ...responseData\n        }; // responseData = sortData(responseData)\n\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            // selectedRecord,\n            isDeletePopup: true,\n            isComboCheck: true,\n            isEditPopup: false,\n            ncontrolCode,\n            loading: false,\n            showFilter: false,\n            openModal: true,\n            isAddPopup: false,\n            operation: \"delete\",\n            ncontrolCode: inputParam.inputData.ncontrolCode,\n            expandCheck: false,\n            screenName: inputParam.inputData.screenName\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[1].data.ValidationStatus\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getDeleteApprovedSample(userInfo, Data1, inputData) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/deleteRelease\", inputData).then(response => {\n        let masterData = { ...Data1,\n          ...response.data\n        };\n        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            change: inputData.change,\n            loading: false,\n            openModal: false,\n            expandCheck: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function getEditApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    inputParam.inputData['isPopup'] = true;\n    const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n    //  const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n    const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData); // const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\n    // if (inputParam.inputData.ncoareporttypecode === 7) {\n    //     urlArray = [ projectType,statusService];\n    // }\n    // else if (inputParam.inputData.ncoareporttypecode === 8) {\n    //     urlArray = [ releaseSample,statusService];\n    // }\n    // else {\n\n    urlArray = [releaseSample, statusService //,reportType\n    ]; // }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\n      //     \"scoareporttypename\", undefined, undefined, false);\n      // const ReportTypeList = reportTypeMap.get(\"OptionList\");\n      if (response[1].data.Status === \"Success\") {\n        let ProjectTypeList = [];\n        let sectionList = []; // let selectedRecord = {\"ncoareporttypecode\": {\n        //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\n        //      \"label\": response[1].data.ReportType[0].scoareporttypename\n        // }\n        // };\n\n        let masterData = {};\n        let openModal = true;\n        let selectedRecord = inputParam.inputData.selectedRecord;\n\n        if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\n          let responseData = { ...response[0].data\n          };\n          masterData = { ...inputParam.masterData,\n            ...responseData\n          };\n        } else {\n          let responseData = { ...response[0].data\n          };\n          masterData = { ...inputParam.masterData,\n            ...responseData\n          };\n          openModal = false;\n          toast.warn(intl.formatMessage({\n            id: \"IDS_NOSAMPLESAREAVAILABLE\"\n          }));\n        } // responseData = sortData(responseData)\n\n\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            // selectedRecord,\n            sectionList,\n            ncontrolCode: inputParam.inputData.ncontrolCode,\n            isDeletePopup: false,\n            isComboCheck: true,\n            isEditPopup: true,\n            ProjectTypeList,\n            loading: false,\n            showFilter: false,\n            openModal: openModal,\n            isAddPopup: false,\n            operation: \"append\",\n            expandCheck: false,\n            screenName: inputParam.inputData.screenName\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[1].data.ValidationStatus\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function UpdateApprovedSample(userInfo, Data1, inputData) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/appendRelease\", inputData).then(response => {\n        let masterData = { ...Data1,\n          ...response.data\n        };\n        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            change: inputData.change,\n            loading: false,\n            openModal: false,\n            expandCheck: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); // console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ReleaseAction.js"],"names":["Axios","toast","intl","constructOptionList","replaceUpdatedObject","sortData","reportCOAType","REPORTTYPE","SampleType","TrainingUpdateChildTab","rsapi","initRequest","DEFAULT_RETURN","getReleasedRegistrationType","inputData","dispatch","post","then","response","responseData","data","type","payload","masterData","SampleTypeValue","loading","catch","error","status","message","warn","getReleasedRegistrationSubType","RegTypeValue","getReleasedFilterBasedTest","napprovalversioncode","RegSubTypeValue","ndesigntemplatemappingcode","DesignTemplateMappingValue","rtn","formatMessage","id","getReleasedApprovalVersion","inputParam","getReleasedSample","nsectioncode","undefined","showFilter","getApprovedSample","ncontrolCode","urlArray","releaseSample","projectType","sectionType","ncoareporttypecode","PROJECTWISE","nsampletypecode","PROJECTSAMPLETYPE","SECTIONWISEMULTIPLESAMPLE","SECTIONWISE","all","ProjectTypeList","sectionList","openModal","selectedRecord","projectTypeMap","get","ReleaseSubSample","ReleaseTest","ReleaseSample","nprojecttypecode","nprojectmastercode","sectionTypeMap","length","expandCheck","isDeletePopup","isComboCheck","isEditPopup","screenName","isAddPopup","operation","generateReleasedReport","Data","UpdateExternalOrderStatus","document","getElementById","setAttribute","filepath","click","ReleaseHistory","change","modalShow","loadEsign","getReleasedFilterStatus","getReleasedDataDetails","coahistory","inputParamData","dfrom","dto","nregtypecode","nregsubtypecode","ntransactionstatus","ntestcode","napprovalconfigcode","userinfo","nneedsubsample","ncoaparentcode","npreregno","getApprovedProjectByProjectType","projectMasterMap","projectMasterList","getApprovedProjectType","ProjectTypeValue","getSectionForSectionWise","sectionMap","getReportForPortal","portallist","String","JSON","stringify","headers","getApprovedRecordsAsDraft","userInfo","Data1","previewAndFinalReport","getRemoveApprovedSample","statusService","Status","ValidationStatus","getDeleteApprovedSample","getEditApprovedSample","UpdateApprovedSample"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { intl } from \"../components/App\";\r\nimport { constructOptionList, replaceUpdatedObject, sortData } from \"../components/CommonScript\";\r\nimport { reportCOAType, REPORTTYPE, SampleType } from \"../components/Enumeration\";\r\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\r\nimport rsapi from \"../rsapi\";\r\nimport { initRequest } from \"./LoginAction\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\n\r\n// export function getReleasedSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\r\n\r\n\r\n//     return function (dispatch) {\r\n//       if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n//         dispatch(initRequest(true));\r\n//         return rsapi.post(\"release/updateRelease\",\r\n\r\n//             inputData\r\n//         )\r\n//             .then(response => {\r\n//                 if (response.data.statusCodeValue !== 200) {\r\n//                     toast.warn(intl.formatMessage({\r\n//                         id: response.data.body\r\n//                     }));\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN,\r\n//                         payload: {\r\n//                             loading: false\r\n//                         }\r\n//                     });\r\n\r\n\r\n//                 }\r\n//                 else {\r\n         \r\n//                     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\r\n//                         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\r\n//                     }\r\n//                     let masterData = {\r\n\r\n//                         ...Data1, ...response.data.body,\r\n    \r\n\r\n//                     };\r\n\r\n//                     console.log(\"ReleasedTest,\", masterData);\r\n//                      sortData(masterData.ReleaseHistory,\"\",'sreportno');\r\n//                   //  dispatch(generateReport(inputData,masterData))\r\n\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN, payload: {\r\n//                             masterData,\r\n//                             change: inputData.change,\r\n//                             loading: false,\r\n//                             openModal:false\r\n//                         }\r\n//                     });\r\n//                 }\r\n//             })\r\n\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                     console.log(\"ErrorRelease,\", error);\r\n\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n\r\n\r\n//         }\r\n//         else {\r\n//             toast.warn(intl.formatMessage({\r\n//                 id: \"IDS_SELECTANYONESAMPLE\"\r\n//             }));\r\n//         }\r\n//     }\r\n// }\r\nexport function getReleasedRegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            SampleTypeValue: inputData.SampleTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedRegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getRegistrationSubType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegTypeValue: inputData.RegTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReleasedFilterBasedTest(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.napprovalversioncode) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"release/getFilterBasedTest\", inputData)\r\n                .then(response => {\r\n\r\n\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...responseData,\r\n                                RegSubTypeValue: inputData.RegSubTypeValue,\r\n                                ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                                DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                            },\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (response.data.rtn) {\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_PLSSELECTALLVALUESINFILTER\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function getReleasedApprovalVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovalVersion\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            // fromDate: inputParam.inputData.dfrom,\r\n                            // toDate: inputParam.inputData.dto,\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseSample\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {} \r\n                let nsectioncode = {};\r\n\r\n               // if (response.data.ReleasedSampleDetails && response.data.ReleasedSampleDetails.length !== 0 ||\r\n               //     response.data.ReleaseSample && response.data.ReleaseSample.length === 0) {\r\n                    masterData = {\r\n                        ...inputParam.masterData,\r\n                        ...responseData,\r\n                }\r\n                if (nsectioncode !== undefined) {\r\n                   nsectioncode = inputParam.inputData.nsectioncode;\r\n                }\r\n            // }\r\n            //     else {\r\n            //         responseData.ReleaseHistory = []\r\n            //         responseData.selectedReleaseHistory= []\r\n            //         masterData = {\r\n            //             ...inputParam.masterData,\r\n            //             ...responseData,\r\n            //         }\r\n            //     }\r\n               \r\n                sortData(masterData,\"\",\"ncoaparentcode\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        nsectioncode: nsectioncode,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n    export function getApprovedSample(inputParam,ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = []; \r\n        inputParam.inputData['isAddPopup']=true\r\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n      //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n        const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\r\n\r\n        if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE || \r\n            inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE ) {\r\n\r\n            urlArray = [ projectType];\r\n        }\r\n        else if (inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n            urlArray = [ sectionType];\r\n        }\r\n        else {\r\n            urlArray = [releaseSample\r\n                //,reportType\r\n            ];\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\r\n                //     \"scoareporttypename\", undefined, undefined, false);\r\n\r\n                // const ReportTypeList = reportTypeMap.get(\"OptionList\");\r\n                let ProjectTypeList = [];\r\n                let sectionList = [];\r\n\r\n                // let selectedRecord = {\"ncoareporttypecode\": {\r\n                //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\r\n                //      \"label\": response[1].data.ReportType[0].scoareporttypename\r\n                // }\r\n                // };\r\n                let masterData = {};\r\n                let openModal = true;\r\n                    let selectedRecord = inputParam.inputData.selectedRecord;\r\n                    if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE || \r\n                        inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n                        const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\",\r\n                            \"sprojecttypename\", undefined, undefined, false);\r\n                \r\n                        ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n                        masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                        if (inputParam.inputData.selectedRecord.nprojecttypecode) {\r\n                            delete inputParam.inputData.selectedRecord.nprojecttypecode\r\n                        }\r\n                        if (inputParam.inputData.selectedRecord.nprojectmastercode) {\r\n                            delete inputParam.inputData.selectedRecord.nprojectmastercode\r\n                        }\r\n                    }\r\n                    else if (inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n                        const sectionTypeMap = constructOptionList(response[0].data.sectionList || [], \"nsectioncode\",\r\n                        \"ssectionname\", undefined, undefined, false);\r\n            \r\n                    sectionList = sectionTypeMap.get(\"OptionList\");\r\n                    masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                    if (inputParam.inputData.selectedRecord.nsectioncode) {\r\n                        delete inputParam.inputData.selectedRecord.nsectioncode\r\n                    }\r\n                   \r\n                    }\r\n                    else {\r\n                        if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\r\n\r\n                            let responseData = { ...response[0].data }\r\n                            masterData = {\r\n                                ...inputParam.masterData, ...responseData\r\n                            }\r\n                        }\r\n                        else {\r\n                            let responseData = { ...response[0].data }\r\n                            masterData = {\r\n                                ...inputParam.masterData, ...responseData\r\n                            }\r\n                            openModal = false;\r\n                            toast.warn(intl.formatMessage({ id: \"IDS_NOSAMPLESAREAVAILABLE\" }));\r\n                            }\r\n\r\n                    }\r\n\r\n                \r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        expandCheck: false,\r\n                        ProjectTypeList,\r\n                        ncontrolCode,\r\n                        isDeletePopup: false,\r\n                        isComboCheck: false,\r\n                        isEditPopup: false,\r\n                        screenName: inputParam.inputData.screenName,\r\n                        sectionList,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openModal: openModal,\r\n                        isAddPopup: true,\r\n                        operation:\"save\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function generateReleasedReport(inputData,Data) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n\r\n        rsapi.post(\"release/updateRelease\", inputData)\r\n            .then(response => {\r\n         \r\n                    if (response.data[\"PortalStatus\"] && response.data[\"PortalStatus\"].length > 0) {\r\n                        dispatch(UpdateExternalOrderStatus(response.data[\"PortalStatus\"],inputData));\r\n                    }\r\n\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                \r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                }\r\n                else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                sortData(masterData.ReleaseHistory,\"\",'ncoaparentcode');\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false,change: inputData.change,masterData,\r\n                    modalShow: false, selectedRecord: {}, loadEsign: false\r\n                }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseConfigVersionRegTemplateDesign\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedDataDetails(inputParam,coahistory) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            dfrom: inputParam.inputData.dfrom,\r\n            dto: inputParam.inputData.dto,\r\n\r\n            nsampletypecode: inputParam.inputData.nsampletypecode,\r\n            nregtypecode: inputParam.inputData.nregtypecode,\r\n            nregsubtypecode: inputParam.inputData.nregsubtypecode,\r\n            ntransactionstatus: inputParam.inputData.ntransactionstatus,\r\n            nsectioncode: inputParam.inputData.nsectioncode,\r\n            ntestcode: inputParam.inputData.ntestcode,\r\n            napprovalversioncode: inputParam.inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputParam.inputData.napprovalconfigcode,          \r\n            userinfo: inputParam.inputData.userinfo,\r\n            nneedsubsample: inputParam.inputData.nneedsubsample,\r\n            ncoaparentcode:inputParam.ncoaparentcode,\r\n            npreregno: inputParam.npreregno,\r\n            ncoareporttypecode:inputParam.inputData.ncoareporttypecode,\r\n            ndesigntemplatemappingcode:inputParam.masterData.ndesigntemplatemappingcode,\r\n            isAddPopup:false\r\n            \r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseSample\", inputParamData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                \r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedProjectByProjectType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedProjectByProjectType\", inputData)\r\n            .then(response => {\r\n                     const projectMasterMap = constructOptionList(response.data.projectMasterList || [], \"nprojectmastercode\",\r\n                \"sprojectcode\", undefined, undefined, false);\r\n                \r\n            const projectMasterList = projectMasterMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        projectMasterList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                        },\r\n                        loading: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedProjectType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedProjectType\", inputData)\r\n            .then(response => {\r\n                const projectTypeMap = constructOptionList(response.data || [], \"nprojecttypecode\",\r\n                \"sprojecttypename\", undefined, undefined, false);\r\n                \r\n            const ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n\r\n            //     const projectMasterMap = constructOptionList(response.data || [], \"nprojecttypecode\",\r\n            //     \"sprojecttypename\", undefined, undefined, false);\r\n                \r\n            // const projectMasterList = projectMasterMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        ProjectTypeList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            ProjectTypeValue: inputData.ProjectTypeValue\r\n                        },\r\n                        loading: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getSectionForSectionWise(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getSection\", inputData.inputData)\r\n            .then(response => {\r\n                     const sectionMap = constructOptionList(response.data.sectionList || [], \"nsectioncode\",\r\n                \"ssectionname\", undefined, undefined, false);\r\n                \r\n            const sectionList = sectionMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        sectionList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                        },\r\n                        loading: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReportForPortal(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/SendToPortalReport\", inputData)\r\n            .then(response => {\r\n                \r\n                if (response.data[\"rtn\"]) {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function UpdateExternalOrderStatus(portallist,inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post((String)(inputParam[\"url\"])+\"/portal/UpdateMultiSampleStatus\",JSON.stringify(portallist),{\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => {\r\n                \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedRecordsAsDraft(userInfo, Data1, inputData) {\r\n\r\n\r\n    return function (dispatch) {\r\n      if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/saveRelease\",\r\n\r\n            inputData\r\n        )\r\n            .then(response => {\r\n              //  if (response.data.statusCodeValue !== 200) {\r\n                    // toast.warn(intl.formatMessage({\r\n                    //     id: response.data.body\r\n                    // }));\r\n                    // dispatch({\r\n                    //     type: DEFAULT_RETURN,\r\n                    //     payload: {\r\n                    //         loading: false\r\n                    //     }\r\n                    // });\r\n\r\n\r\n             //   }\r\n                // else {\r\n         \r\n                //     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\r\n                //         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\r\n                //     }\r\n                    let masterData = {\r\n\r\n                        ...Data1, ...response.data,\r\n    \r\n\r\n                    };\r\n\r\n                     sortData(masterData.ReleaseHistory,\"\",'ncoaparentcode');\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            change: inputData.change,\r\n                            loading: false,\r\n                            openModal: false,\r\n                            expandCheck: false,\r\n\r\n                        }\r\n                    });\r\n                // }\r\n            })\r\n\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                  //  console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n\r\n\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\nexport function previewAndFinalReport(inputParam,Data) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        // const inputData = {\r\n        //     npreregno: inputParam.npreregno,\r\n        //  //   nsectioncode: inputParam.nsectioncode || -1,\r\n        //     userinfo: inputParam.userinfo,\r\n        //     nprimarykey: inputParam.npreregno,\r\n        //     nreporttypecode: REPORTTYPE.COAREPORT,\r\n        //     sprimarykeyname: \"npreregno\",\r\n        //     ncontrolcode: inputParam.ncontrolCode,\r\n        //     nregtypecode: inputParam.nregtypecode,\r\n        //     nregsubtypecode: inputParam.nregsubtypecode,\r\n        //     ntransactiontestcode:inputParam.ntransactiontestcode,\r\n        //     napproveconfversioncode: inputParam.napprovalversioncode,\r\n        //     ncoaparentcode: inputParam.ncoaparentcode,\r\n        //     ntransactionstatus:inputParam.ntransactionstatus\r\n        // }\r\n        rsapi.post(\"release/generateReleasedReport\", inputParam)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n               \r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false,change: inputParam.change,masterData,\r\n                    modalShow: false, selectedRecord: {}, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRemoveApprovedSample(inputParam,ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = []; \r\n        inputParam.inputData['isPopup']=true\r\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n      //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n       // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n        \r\n            urlArray = [releaseSample,statusService\r\n                //,reportType\r\n            ];\r\n        \r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                if (response[1].data.Status === \"Success\") {\r\n\r\n                    let masterData = {};\r\n                    let selectedRecord = inputParam.inputData.selectedRecord;\r\n                    \r\n                        let responseData = { ...response[0].data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                    \r\n            \r\n                    // responseData = sortData(responseData)\r\n\r\n                \r\n                    sortData(masterData);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            // selectedRecord,\r\n                            isDeletePopup: true,\r\n                            isComboCheck: true,\r\n                            isEditPopup: false,\r\n                            ncontrolCode,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            openModal: true,\r\n                            isAddPopup: false,\r\n                            operation: \"delete\",\r\n                            ncontrolCode: inputParam.inputData.ncontrolCode,\r\n                            expandCheck: false,\r\n                            screenName: inputParam.inputData.screenName,\r\n\r\n\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[1].data.ValidationStatus\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getDeleteApprovedSample(userInfo, Data1, inputData) {\r\n\r\n\r\n    return function (dispatch) {\r\n      if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/deleteRelease\",\r\n\r\n            inputData\r\n        )\r\n            .then(response => {\r\n                    let masterData = {\r\n                        ...Data1, ...response.data,\r\n                    };\r\n                    sortData(masterData.ReleaseHistory,\"\",'ncoaparentcode');\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            change: inputData.change,\r\n                            loading: false,\r\n                            openModal: false,\r\n                            expandCheck: false,\r\n\r\n\r\n                        }\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                  //  console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\nexport function getEditApprovedSample(inputParam,ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = []; \r\n        inputParam.inputData['isPopup']=true\r\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n      //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n      //  const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n       // const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\r\n\r\n        // if (inputParam.inputData.ncoareporttypecode === 7) {\r\n\r\n        //     urlArray = [ projectType,statusService];\r\n        // }\r\n        // else if (inputParam.inputData.ncoareporttypecode === 8) {\r\n        //     urlArray = [ releaseSample,statusService];\r\n        // }\r\n        // else {\r\n            urlArray = [releaseSample,statusService\r\n                //,reportType\r\n            ];\r\n       // }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\r\n                //     \"scoareporttypename\", undefined, undefined, false);\r\n\r\n                // const ReportTypeList = reportTypeMap.get(\"OptionList\");\r\n                if (response[1].data.Status === \"Success\") {\r\n\r\n                let ProjectTypeList = [];\r\n                let sectionList = [];\r\n\r\n                // let selectedRecord = {\"ncoareporttypecode\": {\r\n                //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\r\n                //      \"label\": response[1].data.ReportType[0].scoareporttypename\r\n                // }\r\n                // };\r\n                    let masterData = {};\r\n                    let openModal = true;\r\n\r\n                let selectedRecord = inputParam.inputData.selectedRecord;\r\n                \r\n                   if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\r\n\r\n                    let responseData = { ...response[0].data }\r\n                    masterData = {\r\n                        ...inputParam.masterData, ...responseData\r\n                    }\r\n                }\r\n                else {\r\n                    let responseData = { ...response[0].data }\r\n                    masterData = {\r\n                        ...inputParam.masterData, ...responseData\r\n                    }\r\n                    openModal = false;\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_NOSAMPLESAREAVAILABLE\" }));\r\n                    }\r\n                // responseData = sortData(responseData)\r\n\r\n                \r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                       // selectedRecord,\r\n                       sectionList,\r\n                        ncontrolCode:inputParam.inputData.ncontrolCode,\r\n                        isDeletePopup: false,\r\n                        isComboCheck: true,\r\n                        isEditPopup:true,\r\n                        ProjectTypeList,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openModal: openModal,\r\n                        isAddPopup: false,\r\n                        operation: \"append\",\r\n                        expandCheck: false,\r\n                        screenName: inputParam.inputData.screenName,\r\n\r\n\r\n                    }\r\n                })\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: response[1].data.ValidationStatus\r\n                }));\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ncontrolCode: ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function UpdateApprovedSample (userInfo, Data1, inputData) {\r\n\r\n\r\n    return function (dispatch) {\r\n      if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/appendRelease\",\r\n\r\n            inputData\r\n        )\r\n            .then(response => {\r\n                    let masterData = {\r\n                        ...Data1, ...response.data,\r\n                    };\r\n                    sortData(masterData.ReleaseHistory,\"\",'ncoaparentcode');\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            change: inputData.change,\r\n                            loading: false,\r\n                            openModal: false,\r\n                            expandCheck:false\r\n\r\n                        }\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                   // console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}