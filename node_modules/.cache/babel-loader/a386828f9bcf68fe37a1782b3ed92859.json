{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\SampleStorageMaster.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faFileInvoice, faEye, faLink, faChevronRight, faComments, faLaptopHouse, faBoxOpen, faBoxTissue, faBox, faLocationArrow, faFolderMinus, faFolderOpen, faArrowRight } from '@fortawesome/free-solid-svg-icons';\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, getSampleMaster, openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, getContainerStorageCondition, getStorageConditionFromMaster, getSampleMasterDetails, getContainers, getselectedContainer, changeStorageCategoryFilterOnSampleMaster, openSampleStorageApprovedLocation, loadApprovedLocationOnCombo, filterColumnData, loadApprovedLocationOnTreeData, moveItems, saveSampleStorageMaster, getSelectedApprovedStorageVersion, validateEsignCredentialSampleStorageMaster } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\nimport { mapTree, removeItems } from \"@progress/kendo-react-treelist\";\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport AddSample from '../basemaster/AddSample';\nimport AddContainerStorageCondition from './AddContainerStorageCondition';\nimport { ProductList } from '../product/product.styled';\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport StorageCategoryFilter from './StorageCategoryFilter';\nimport MoveSampleOrContainers from './MoveSampleOrContainers';\nimport { faFolder } from '@fortawesome/free-regular-svg-icons';\nimport Esign from '../audittrail/Esign';\n\nclass SampleStorageMaster extends Component {\n  constructor(props) {\n    super(props);\n\n    this.openModal = addId => {\n      if (this.props.Login.selectedItem && this.props.Login.selectedItem.containerlastnode === true) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal: true,\n            selectedRecord: {},\n            operation: \"create\",\n            ncontrolcode: addId\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedId = this.props.Login.selectedId;\n      let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"discard\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          selectedId = null;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedId = null;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeChildModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openChildModal = this.props.Login.openChildModal;\n      let selectedId = this.props.Login.selectedId;\n      let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        loadEsign = false;\n      } else {\n        openChildModal = false;\n        selectedId = null;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         openChildModal: false, selectedRecord: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[event.target.name] = event.target.value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onKeyUp = event => {\n      if (event.keyCode === 13) {\n        this.onSaveClickSample(2);\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.state.activeTabIndex === 1) {\n        this.onSaveClickSample(saveType, formRef);\n      } else {\n        this.onSaveClickContainer(saveType, formRef);\n      }\n    };\n\n    this.onSaveClickSample = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n\n      if (this.props.Login.operation === \"update\") {\n        inputData[\"sampleStorageMaster\"] = {\n          \"nsamplecode\": this.state.selectedRecord.nsamplecode ? this.state.selectedRecord.nsamplecode : -1,\n          \"ssampletraycode\": this.props.Login.sampleTrayCode ? this.props.Login.sampleTrayCode : \"\",\n          \"ssamplearno\": this.state.selectedRecord.ssamplearno ? this.state.selectedRecord.ssamplearno : \"\",\n          \"nsamplestoragelocationcode\": this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\n          \"nstoragecategorycode\": this.props.Login.masterData.selectedSampleStorageVersion.nstoragecategorycode\n        };\n      } else {\n        //add               \n        inputData[\"sampleStorageMaster\"] = {\n          \"ssampletraycode\": this.props.Login.sampleTrayCode ? this.props.Login.sampleTrayCode : \"\",\n          \"ssamplearno\": this.state.selectedRecord.ssamplearno ? this.state.selectedRecord.ssamplearno : \"\",\n          \"nsamplestoragelocationcode\": this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\n          \"slocationhierarchy\": this.props.Login.sampleLocation ? this.props.Login.sampleLocation : \"\",\n          \"nstoragecategorycode\": this.props.Login.masterData.selectedSampleStorageVersion.nstoragecategorycode\n        };\n      }\n\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef\n      };\n      const masterData = this.props.Login.masterData;\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData,\n              selectedRecord\n            },\n            saveType,\n            openModal: true\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        // this.props.crudMaster(inputParam, masterData, \"openModal\");\n        this.props.saveSampleStorageMaster(this.props.Login.userInfo, this.props.Login.masterData, this.state.selectedRecord, inputParam);\n      }\n    };\n\n    this.onSaveClickContainer = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"containerStorageCondition\"] = {\n        \"nstatus\": 1\n      };\n\n      if (this.props.Login.operation === \"update\") {\n        inputData[\"containerStorageCondition\"][\"ncontainerstoragecode\"] = this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== null ? this.props.Login.masterData.storageContainer.ncontainerstoragecode : -1;\n        inputData[\"containerStorageCondition\"][\"scontainercode\"] = this.props.Login.containerCode && this.props.Login.containerCode !== undefined ? this.props.Login.containerCode : \"\";\n        inputData[\"containerStorageCondition\"][\"nstorageconditioncode\"] = this.state.selectedRecord.nstorageconditioncode && this.state.selectedRecord.nstorageconditioncode !== undefined ? this.state.selectedRecord.nstorageconditioncode.value : -1;\n      }\n\n      inputData[\"containerStorageCondition\"][\"scontainercode\"] = this.props.Login.containerCode && this.props.Login.containerCode !== undefined ? this.props.Login.containerCode : \"\";\n      inputData[\"containerStorageCondition\"][\"nstorageconditioncode\"] = this.state.selectedRecord.nstorageconditioncode && this.state.selectedRecord.nstorageconditioncode !== undefined ? this.state.selectedRecord.nstorageconditioncode.value : -1;\n      inputData[\"containerStorageCondition\"][\"slocationhierarchy\"] = this.props.Login.containerLocation ? this.props.Login.containerLocation : \"\";\n      inputData[\"containerStorageCondition\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode;\n      const inputParam = {\n        methodUrl: \"ContainerStorageCondition\",\n        classUrl: \"samplestoragemaster\",\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            openModal: true\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.itemRenderView = clickedItem => {\n      let item = clickedItem.item;\n\n      if (!this.state.toggleActionView) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, item ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: `normal-node\n                            ${item.selected ? \"active-node\" : \"\"}\n                            ${item.expanded ? \"expand-node\" : \"collapse-node\"}\n                            `,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 29\n          }\n        }, item.containerfirstnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBoxOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 60\n          }\n        }) : item.locationlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faLocationArrow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 61\n          }\n        }) : item.containerlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 66\n          }\n        }) : item.expanded ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolderOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 61\n          }\n        }) : /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolder,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 103\n          }\n        }), item.text)) : \"\");\n      }\n    };\n\n    this.onItemClickView = event => {\n      if (this.state.selectedItem) {\n        this.state.selectedItem.selected = false;\n      }\n\n      event.item.selected = true;\n      this.setState({\n        selectedItem: event.item\n      }); // let newData = mapTree(this.state.treeDataView, \"items\", (item) => {\n      //     if (item.editable === true) {\n      //         item.editable = false;\n      //     } else if (item.id === event.item.id) {\n      //         item.editable = true;\n      //     }\n      //     return item;\n      // });\n      // this.setState({ treeDataView: newData });\n\n      if (event.item && event.item.containerlastnode && event.item.containerlastnode === true) {\n        let result = this.state.treeDataView;\n        const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\n        let itemText = \"\";\n\n        for (let i = 0; i < indices.length; i++) {\n          if (i === 0) {\n            result = result[0];\n          } else {\n            result = result.items[indices[i]];\n          }\n\n          itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n        }\n\n        this.props.getSampleMaster(event.item, this.props.Login.userInfo, this.props.Login.masterData, itemText, event.itemHierarchicalIndex);\n\n        if (this.state.activeTabIndex && this.state.activeTabIndex === false) {\n          this.changePropertyView(1, undefined, false);\n        } else if (this.state.activeTabIndex === undefined) {\n          this.changePropertyView(1, undefined, false);\n        } else if (this.state.activeTabIndex !== 1) {\n          this.changePropertyView(1, undefined, false);\n        }\n      } else if (event.item && event.item.containerfirstnode && event.item.containerfirstnode === true) {\n        let result = this.state.treeDataView;\n        const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\n        let itemText = \"\";\n\n        for (let i = 0; i < indices.length; i++) {\n          if (i === 0) {\n            result = result[0];\n          } else {\n            result = result.items[indices[i]];\n          }\n\n          itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n        }\n\n        this.props.getContainerStorageCondition(event.item, this.props.Login.userInfo, this.props.Login.masterData, itemText);\n\n        if (this.state.activeTabIndex && this.state.activeTabIndex === false) {\n          this.changePropertyView(2, undefined, false);\n        } else if (this.state.activeTabIndex === undefined) {\n          this.changePropertyView(2, undefined, false);\n        } else if (this.state.activeTabIndex !== 2) {\n          this.changePropertyView(2, undefined, false);\n        }\n      } else if (event.item && event.item.locationlastnode && event.item.locationlastnode === true) {\n        let containers = [];\n\n        if (event.item.items && event.item.items.length > 0) {\n          event.item.items.forEach(element => {\n            if (element.containerfirstnode === true) {\n              containers.push(element);\n            }\n          });\n        }\n\n        let result = this.state.treeDataView;\n        const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\n        let itemText = \"\";\n\n        for (let i = 0; i < indices.length; i++) {\n          if (i === 0) {\n            result = result[0];\n          } else {\n            result = result.items[indices[i]];\n          }\n\n          itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n        }\n\n        this.props.getContainers(event.item, this.props.Login.masterData, containers, itemText);\n\n        if (this.state.activeTabIndex && this.state.activeTabIndex === false) {\n          this.changePropertyView(3, undefined, false);\n        } else if (this.state.activeTabIndex === undefined) {\n          this.changePropertyView(3, undefined, false);\n        } else if (this.state.activeTabIndex !== 3) {\n          this.changePropertyView(3, undefined, false);\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedItem: event.item,\n            activeTabIndex: undefined\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (caseNo === 3) {\n        let nfilterStorageCategory = this.state.nfilterStorageCategory || {};\n        nfilterStorageCategory = comboData;\n        this.searchRef.current.value = \"\";\n        this.setState({\n          nfilterStorageCategory\n        });\n      } else if (caseNo === 4) {\n        selectedRecord[fieldName] = comboData;\n        this.props.loadApprovedLocationOnCombo(this.props.Login.userInfo, this.props.Login.masterData, selectedRecord);\n      } else if (caseNo === 5) {\n        selectedRecord[fieldName] = comboData;\n        this.props.loadApprovedLocationOnTreeData(this.props.Login.userInfo, this.props.Login.masterData, selectedRecord);\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onExpandChangeView = event => {\n      event.item.expanded = !event.item.expanded;\n      this.forceUpdate();\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n      setTimeout(() => {\n        this._scrollBarRef.updateScroll();\n      });\n    };\n\n    this.moveItem = (userInfo, masterData, moveId) => {\n      // let sampleTrayID = [];\n      // mapTree([this.props.Login.selectedItem], \"items\", (item) => {\n      //     if (item.containerlastnode === true) {\n      //         sampleTrayID.push(item.id);\n      //     }\n      //     return null;\n      // });\n      if (this.state.activeTabIndex && this.state.activeTabIndex === 1) {\n        if (this.props.Login.masterData.sampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster[0] !== undefined) {\n          this.props.openSampleStorageApprovedLocation(userInfo, masterData, moveId);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTANYSAMPLE\"\n          }));\n        }\n      } else if (this.state.activeTabIndex && this.state.activeTabIndex === 3) {\n        if (this.props.Login.masterData.containers && this.props.Login.masterData.selectedContainer && this.props.Login.masterData.selectedContainer[0] !== undefined) {\n          this.props.openSampleStorageApprovedLocation(userInfo, masterData, moveId);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTANYCONTAINER\"\n          }));\n        }\n      }\n    };\n\n    this.confirmDelete = ncontrolCode => {\n      if (this.props.Login.masterData.sampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster[0] !== undefined) {\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.deleteSampleStorageMaster(ncontrolCode));\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYSAMPLE\"\n        }));\n      }\n    };\n\n    this.deleteSampleStorageMaster = ncontrolCode => {\n      let inputData = [];\n      let data = [];\n      this.props.Login.masterData.selectedSampleStorageMaster.forEach(item => {\n        data.push({\n          \"nsamplecode\": item.nsamplecode,\n          \"ssampletraycode\": item.ssampletraycode\n        });\n      });\n      inputData[\"sampleStorageMaster\"] = data;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      const inputParam = {\n        methodUrl: \"SampleStorageMaster\",\n        classUrl: \"samplestoragemaster\",\n        inputData: inputData,\n        operation: \"delete\",\n        searchRef: this.searchRef\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: \"delete\",\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.loadStorageCondition = editContainerID => {\n      let openStorage = false;\n\n      if (this.props.Login.masterData.storageContainer === null || this.props.Login.masterData.storageContainer === undefined) {\n        mapTree(this.state.treeDataView, \"items\", item => {\n          if (item.id === this.props.Login.selectedItem.id) {\n            openStorage = true;\n          }\n\n          return item;\n        });\n      } else if (this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== undefined) {\n        openStorage = true;\n      }\n\n      if (openStorage === true) {\n        if (this.props.Login.selectedItem && this.props.Login.selectedItem.containerfirstnode === true) {\n          this.props.getStorageConditionFromMaster(this.props.Login.userInfo, this.props.Login.masterData, editContainerID);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTANYCONTAINER\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYCONTAINER\"\n        }));\n      }\n    };\n\n    this.discardSampleStorageMaster = ncontrolCode => {\n      let inputData = [];\n      let data = [];\n\n      if (this.props.Login.masterData.sampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster[0] !== undefined) {\n        this.props.Login.masterData.selectedSampleStorageMaster.forEach(item => {\n          data.push({\n            \"nsamplecode\": item.nsamplecode,\n            \"ssampletraycode\": item.ssampletraycode,\n            \"ssamplearno\": item.ssamplearno\n          });\n        });\n        inputData[\"sampleStorageMaster\"] = data;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        const inputParam = {\n          methodUrl: \"SampleStorageMaster\",\n          classUrl: \"samplestoragemaster\",\n          inputData: inputData,\n          operation: \"discard\",\n          searchRef: this.searchRef\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              operation: \"discard\",\n              openModal: true,\n              screenName: this.props.Login.inputParam.displayName\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYSAMPLE\"\n        }));\n      }\n    };\n\n    this.sideNavDetail = screenName => {\n      const addId = this.state.controlMap.has(\"Add SampleStorageMaster\") && this.state.controlMap.get(\"Add SampleStorageMaster\").ncontrolcode;\n      const editId = this.state.controlMap.has(\"Edit SampleStorageMaster\") && this.state.controlMap.get(\"Edit SampleStorageMaster\").ncontrolcode;\n      const deleteId = this.state.controlMap.has(\"Delete SampleStorageMaster\") && this.state.controlMap.get(\"Delete SampleStorageMaster\").ncontrolcode;\n      const editContainerID = this.state.controlMap.has(\"Edit StorageContainer\") && this.state.controlMap.get(\"Edit StorageContainer\").ncontrolcode;\n      const moveId = this.state.controlMap.has(\"Move SampleStorageMaster\") && this.state.controlMap.get(\"Move SampleStorageMaster\").ncontrolcode;\n      const discardId = this.state.controlMap.has(\"Discard SampleStorageMaster\") && this.state.controlMap.get(\"Discard SampleStorageMaster\").ncontrolcode;\n\n      if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined) {\n        return screenName == \"IDS_SAMPLEDETAILS\" ? /*#__PURE__*/React.createElement(React.Fragment, null, this.props.Login.sampleTrayCode && this.props.Login.sampleTrayCode !== undefined ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"actions-stripe\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"d-flex justify-content-end\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 683,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Nav.Link, {\n          name: \"addsample\",\n          className: \"add-txt-btn\",\n          hidden: this.state.userRoleControlRights.indexOf(addId) === -1,\n          onClick: () => this.openModal(addId),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 684,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faPlus,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 688,\n            columnNumber: 45\n          }\n        }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"IDS_SAMPLE\",\n          defaultMessage: \"Sample\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 45\n          }\n        })), /*#__PURE__*/React.createElement(Nav.Link, {\n          name: \"deletesample\",\n          className: \"add-txt-btn\",\n          hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n          onClick: () => this.confirmDelete(deleteId),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 692,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faTrashAlt,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 45\n          }\n        }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"IDS_DELETE\",\n          defaultMessage: \"Delete\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 45\n          }\n        })), /*#__PURE__*/React.createElement(Nav.Link, {\n          name: \"movesample\",\n          className: \"add-txt-btn\",\n          hidden: this.state.userRoleControlRights.indexOf(moveId) === -1,\n          onClick: () => this.moveItem(this.props.Login.userInfo, this.props.Login.masterData, moveId),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faPlus,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 704,\n            columnNumber: 45\n          }\n        }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"IDS_MOVE\",\n          defaultMessage: \"Move\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 705,\n            columnNumber: 45\n          }\n        })), /*#__PURE__*/React.createElement(Nav.Link, {\n          name: \"discardsample\",\n          className: \"add-txt-btn\",\n          hidden: this.state.userRoleControlRights.indexOf(discardId) === -1,\n          onClick: () => this.discardSampleStorageMaster(discardId),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 708,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faArrowRight,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 712,\n            columnNumber: 45\n          }\n        }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"IDS_DISCARD\",\n          defaultMessage: \"Discard\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 713,\n            columnNumber: 45\n          }\n        })))), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"toolbar-top-inner\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 718,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n          listMasterShowIcon: 1,\n          clickIconGroup: false,\n          splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n          masterList: this.props.Login.masterData.sampleStorageMaster || [],\n          selectedMaster: this.props.Login.masterData.selectedSampleStorageMaster || [],\n          primaryKeyField: \"nsamplecode\",\n          filterColumnData: this.props.filterTransactionList,\n          getMasterDetail: this.props.getSampleMasterDetails,\n          inputParam: { ...this.props.Login.masterData\n          } // moreField={this.props.Login.masterData.sampleStorageMaster || []}\n          // selectionList={this.props.Login.masterData.RealFilterStatusValue\n          //     && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\n          ,\n          selectionColorField: \"scolorhexcode\",\n          mainField: \"ssamplearno\",\n          showStatusLink: true,\n          showStatusName: true // statusFieldName=\"stransdisplaystatus\"\n          // statusField=\"ntransactionstatus\"\n          ,\n          selectedListName: \"selectedSampleStorageMaster\" // searchListName=\"searchedSample\"\n          // searchRef={this.searchSampleRef}\n          // objectName=\"sample\"\n          ,\n          listName: \"IDS_SAMPLE\" // selectionField=\"ntransactionstatus\"\n          // selectionFieldName=\"stransdisplaystatus\"\n          // showFilter={this.props.Login.showFilter}\n          // openFilter={this.openFilter}\n          // closeFilter={this.closeFilter}\n          // onFilterSubmit={this.onFilterSubmit}\n          // subFields={this.state.DynamicSampleColumns}                                                 \n          ,\n          needMultiSelect: false,\n          needSingleSelect: true // subListName=\"columnlist\"\n          // jsonfield=\"jsondata\"\n          // showDynamicFields={true}\n          // showStatusBlink={true}\n          // filterParam={{\n          //     ...this.state.filterSampleParam,\n          //     childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" },\n          //     { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\n          // }}\n          // subFieldsLabel={false}\n          ,\n          handlePageChange: this.handlePageChange,\n          skip: this.state.skip,\n          take: this.state.take,\n          needFilter: false,\n          hidePaging: false,\n          hideSearch: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 719,\n            columnNumber: 37\n          }\n        }))) : /*#__PURE__*/React.createElement(React.Fragment, null)) : screenName == \"IDS_CONTAINERS\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"actions-stripe\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 778,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"d-flex justify-content-end\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 779,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(Nav.Link, {\n          name: \"addsample\",\n          className: \"add-txt-btn\",\n          hidden: this.state.userRoleControlRights.indexOf(moveId) === -1,\n          onClick: () => this.moveItem(this.props.Login.userInfo, this.props.Login.masterData, moveId),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 780,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faPlus,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 784,\n            columnNumber: 41\n          }\n        }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"IDS_MOVE\",\n          defaultMessage: \"Move\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 785,\n            columnNumber: 41\n          }\n        })))), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"toolbar-top-inner container-tab\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 789,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n          listMasterShowIcon: 1,\n          clickIconGroup: false,\n          splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n          masterList: this.props.Login.masterData.containers || [],\n          selectedMaster: this.props.Login.masterData.selectedContainer || [],\n          primaryKeyField: \"id\",\n          filterColumnData: this.props.filterTransactionList,\n          getMasterDetail: this.props.getselectedContainer,\n          inputParam: { ...this.props.Login.masterData\n          },\n          selectionColorField: \"scolorhexcode\",\n          mainField: \"text\",\n          showStatusLink: true,\n          showStatusName: true,\n          selectedListName: \"selectedContainer\",\n          listName: \"IDS_SAMPLE\",\n          needMultiSelect: false,\n          needSingleSelect: true,\n          subListName: \"columnlist\",\n          jsonfield: \"jsondata\",\n          showDynamicFields: true,\n          showStatusBlink: true,\n          handlePageChange: this.handlePageChange,\n          skip: this.state.skip,\n          take: this.state.take,\n          needFilter: false,\n          hidePaging: false,\n          hideSearch: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 790,\n            columnNumber: 33\n          }\n        }))) : screenName == \"IDS_STORAGECONDITION\" ? /*#__PURE__*/React.createElement(ProductList, {\n          className: \"panel-main-content storage-tab\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 825,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(Card, {\n          className: \"border-0\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 827,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(Card.Header, {\n          className: \"no-padding\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 828,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Card.Subtitle, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 829,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"actions-stripe\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 839,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"d-flex justify-content-end\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 840,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(Nav.Link, {\n          name: \"editContainer\",\n          className: \"add-txt-btn\",\n          hidden: this.state.userRoleControlRights.indexOf(editContainerID) === -1,\n          onClick: () => this.loadStorageCondition(editContainerID),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 841,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"IDS_STORAGECONDITION\",\n          defaultMessage: \"Storage Condition\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 846,\n            columnNumber: 57\n          }\n        })))))), /*#__PURE__*/React.createElement(Card.Body, {\n          className: \"form-static-wrap no-padding\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 852,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 853,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 854,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 855,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 856,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"IDS_STORAGECONDITIONNAME\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 857,\n            columnNumber: 57\n          }\n        })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 859,\n            columnNumber: 53\n          }\n        }, this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== null ? this.props.Login.masterData.storageContainer.sstorageconditionname === \"NA\" ? \"-\" : this.props.Login.masterData.storageContainer.sstorageconditionname : \"-\" || \"-\"))), /*#__PURE__*/React.createElement(Col, {\n          md: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 866,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 867,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 868,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"IDS_STORAGELOCATIONNAME\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 869,\n            columnNumber: 57\n          }\n        })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 871,\n            columnNumber: 53\n          }\n        }, this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== null ? this.props.Login.masterData.storageContainer.sstorageconditionname === \"NA\" ? \"-\" : this.props.Login.containerLocation && this.props.Login.containerLocation : \"-\"))))))) : \"\";\n      } else {\n        const masterData = { ...this.props.Login.masterData,\n          storageContainer: undefined,\n          containers: undefined,\n          sampleStorageMaster: undefined\n        };\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            activeTabIndex: undefined,\n            containerLocation: undefined,\n            sampleTrayCode: undefined,\n            containerCode: undefined,\n            locationCode: undefined,\n            masterData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.changePropertyView = (index, event, tabClick) => {\n      let check = false;\n\n      if (tabClick === true) {\n        if (index === 1 && this.state.selectedItem && this.state.selectedItem.containerlastnode === true || index === 2 && this.state.selectedItem && this.state.selectedItem.containerfirstnode === true || index === 3 && this.state.selectedItem && this.state.selectedItem.locationlastnode === true) {\n          check = false;\n        } else {\n          check = true;\n        }\n      }\n\n      if (check === false) {\n        if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              activeTabIndex: this.state.activeTabIndex !== index ? index : 0 ? index : false\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPROPERITEM\"\n        }));\n      }\n    };\n\n    this.changePropertyViewClose = id => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          activeTabIndex: undefined\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputSwitchOnChange = event => {\n      if (event.target.name == \"PopupNav\") {\n        this.setState({\n          enablePropertyPopup: !this.state.enablePropertyPopup\n        });\n      } else {\n        this.setState({\n          enableAutoClick: !this.state.enableAutoClick\n        });\n      }\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      if (this.state.nfilterStorageCategory.value) {\n        let inputParam = {\n          inputData: {\n            nstoragecategorycode: this.state.nfilterStorageCategory.value,\n            userinfo: this.props.Login.userInfo,\n            nfilterStorageCategory: this.state.nfilterStorageCategory\n          }\n        };\n        this.props.changeStorageCategoryFilterOnSampleMaster(inputParam, this.props.Login.masterData.filterStorageCategory);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_STORAGECATEGORYNOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.itemRender = clickedItem => {\n      let item = clickedItem.item;\n\n      if (!this.state.toggleAction) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, clickedItem.item ? /*#__PURE__*/React.createElement(\"span\", {\n          className: `normal-node\n                         ${clickedItem.item.editable ? \"active-node\" : \"\"}\n                         ${item.expanded ? \"expand-node\" : \"collapse-node\"}\n                         `,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1015,\n            columnNumber: 25\n          }\n        }, item.containerfirstnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBoxOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1019,\n            columnNumber: 56\n          }\n        }) : item.locationlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faLocationArrow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1020,\n            columnNumber: 57\n          }\n        }) : item.containerlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1021,\n            columnNumber: 62\n          }\n        }) : item.expanded ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolderOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1022,\n            columnNumber: 57\n          }\n        }) : /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolder,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1022,\n            columnNumber: 99\n          }\n        }), item.text) // <ul className=\"list-inline mb-0\">\n        // <li className=\"list-inline-item mr-3 \">{clickedItem.item.text}</li>\n        // {clickedItem.item.editable ? (\n        // <>\n        // <li className=\"list-inline-item \">\n        // <span\n        // className=\"action-icon\"\n        // onClick={(e) => this.setProperties(e, clickedItem)}\n        // ></span>\n        // </li>\n        // </>\n        // ) : null}\n        // </ul>\n        : \"\");\n      }\n    };\n\n    this.onItemClick = event => {\n      // if (this.state.selectedItemMove) {\n      //     this.state.selectedItemMove.selected = false;\n      // }\n      // event.item.selected = true;\n      // this.setState({\n      //     selectedItem: event.item\n      // })\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.editable === true) {\n          item.editable = false;\n        } else if (item.id === event.item.id) {\n          item.editable = true;\n        }\n\n        return item;\n      }); // newData.map((data) => {\n      //     this.clearSelected(data, event.item)\n      // })\n\n      let result = newData;\n      const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\n      let itemText = \"\";\n\n      for (let i = 0; i < indices.length; i++) {\n        if (i === 0) {\n          result = result[0];\n        } else {\n          result = result.items[indices[i]];\n        }\n\n        itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n      }\n\n      this.setState({\n        treeData: newData,\n        clickedItem: event.item,\n        targetLocationHierarchy: itemText\n      });\n    };\n\n    this.onExpandChange = event => {\n      event.item.expanded = !event.item.expanded;\n      this.forceUpdate();\n    };\n\n    this.onMoveClick = (saveType, formRef) => {\n      let inputParam = {};\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n\n      if (this.state.activeTabIndex === 1) {\n        if (this.state.clickedItem && this.state.clickedItem.containerlastnode === true) {\n          if (this.state.clickedItem.id !== this.props.Login.sampleTrayCode) {\n            let getSelectedSamples = \"\";\n            this.props.Login.masterData.selectedSampleStorageMaster.forEach(data => {\n              getSelectedSamples += \"'\" + data.ssamplearno + \"'\" + \",\"; //ssampletraycode\n            });\n\n            if (getSelectedSamples !== \"\") {\n              getSelectedSamples = getSelectedSamples.slice(0, getSelectedSamples.length - 1);\n            }\n\n            inputParam = {\n              selectedSamples: getSelectedSamples,\n              //this.props.Login.masterData.selectedSampleStorageMaster,\n              moveTargetTrayCode: this.state.clickedItem.id,\n              nsamplestoragelocationcode: this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\n              moveContainers: false,\n              storageCategory: this.state.selectedRecord[\"nstoragecategorycode\"] && this.state.selectedRecord[\"nstoragecategorycode\"].value,\n              methodUrl: \"SampleStorageMaster\",\n              inputData: inputData,\n              operation: \"move\",\n              userinfo: this.props.Login.userInfo,\n              sourceLocationHierarchy: this.props.Login.sampleLocation,\n              targetLocationHierarchy: this.state.targetLocationHierarchy\n            };\n            const masterData = this.props.Login.masterData;\n            const selectedRecord = this.state.selectedRecord || {};\n\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData,\n                    selectedRecord\n                  },\n                  operation: \"move\",\n                  openChildModal: true,\n                  screenName: this.props.Login.inputParam.displayName\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.moveItems(inputParam, this.props.Login.masterData);\n            }\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTPROPERITEM\"\n          }));\n        }\n      } else if (this.state.activeTabIndex === 3) {\n        if (this.state.clickedItem && this.state.clickedItem.locationlastnode === true) {\n          if (this.state.clickedItem.id !== this.props.Login.locationCode) {\n            let getSampleTray = \"\";\n            let getContainerCode = \"\";\n            let targetData = this.state.treeData || [];\n            let sourceData = this.state.treeDataView || [];\n            let newData = [];\n            let sameLocation = true;\n            let targetJsonData = {};\n            let SourceJsonData = {};\n            let selectedContainers = [];\n\n            if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode === this.state.selectedRecord[\"nsamplestoragelocationcode\"].value) {\n              this.props.Login.masterData.selectedContainer.forEach(data => {\n                targetData = removeItems(targetData, \"items\", item => {\n                  return item.id === data.id;\n                });\n              });\n              newData = mapTree(targetData, \"items\", item => {\n                if (item.id === this.state.clickedItem.id) {\n                  item.items = item.items || [];\n                  item.items.push(...this.props.Login.masterData.selectedContainer);\n                }\n\n                if (item.expanded === false) {\n                  item.expanded = true;\n                }\n\n                if (item.selected && item.selected === true) {\n                  item.selected = false;\n                }\n\n                return item;\n              });\n              targetJsonData[\"data\"] = newData;\n            } else {\n              this.props.Login.masterData.selectedContainer.forEach(data => {\n                sourceData = removeItems(sourceData, \"items\", item => {\n                  return item.id === data.id;\n                });\n\n                if (sourceData.length > 0) {\n                  sourceData = mapTree(sourceData, \"items\", item => {\n                    if (item.selected && item.selected === true) {\n                      item.selected = false;\n                    }\n\n                    return item;\n                  });\n                }\n              });\n              newData = mapTree(targetData, \"items\", item => {\n                if (item.id === this.state.clickedItem.id) {\n                  item.items = item.items || [];\n                  item.items.push(...this.props.Login.masterData.selectedContainer);\n                }\n\n                if (item.expanded === false) {\n                  item.expanded = true;\n                }\n\n                if (item.selected && item.selected === true) {\n                  item.selected = false;\n                }\n\n                return item;\n              });\n              SourceJsonData[\"data\"] = sourceData;\n              targetJsonData[\"data\"] = newData;\n              sameLocation = false;\n            }\n\n            this.props.Login.masterData.selectedContainer.forEach(data => {\n              mapTree([data], \"items\", item => {\n                if (item.containerlastnode === true) {\n                  getSampleTray += \"'\" + item.id + \"'\" + \",\";\n                }\n              });\n              getContainerCode += \"'\" + data.id + \"'\" + \",\";\n              selectedContainers.push({\n                scontainercode: data.id,\n                text: data.text\n              });\n            });\n\n            if (getSampleTray !== \"\") {\n              getSampleTray = getSampleTray.slice(0, getSampleTray.length - 1);\n            }\n\n            if (getContainerCode !== \"\") {\n              getContainerCode = getContainerCode.slice(0, getContainerCode.length - 1);\n            }\n\n            inputParam = {\n              selectedSamples: getSampleTray,\n              sourceLocationCode: this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\n              sourceVersionCode: this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode,\n              nsamplestoragelocationcode: this.state.selectedRecord[\"nsamplestoragelocationcode\"].item.nsamplestoragelocationcode,\n              nsamplestorageversioncode: this.state.selectedRecord[\"nsamplestoragelocationcode\"].item.nsamplestorageversioncode,\n              SourceJsonData: SourceJsonData,\n              targetJsonData: targetJsonData,\n              moveContainers: true,\n              storageCategory: this.props.Login.masterData.selectedSampleStorageVersion.nstoragecategorycode,\n              sameLocation,\n              methodUrl: \"SampleStorageMaster\",\n              inputData: inputData,\n              operation: \"move\",\n              userinfo: this.props.Login.userInfo,\n              sourceLocationHierarchy: this.props.Login.locationText,\n              targetLocationHierarchy: this.state.targetLocationHierarchy,\n              selectedContainer: selectedContainers,\n              getContainerCode: getContainerCode\n            }; // this.props.moveItems(inputParam, this.props.Login.masterData);\n\n            const masterData = this.props.Login.masterData;\n            const selectedRecord = this.state.selectedRecord || {};\n\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData,\n                    selectedRecord\n                  },\n                  operation: \"move\",\n                  openChildModal: true,\n                  screenName: this.props.Login.inputParam.displayName\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.moveItems(inputParam, this.props.Login.masterData);\n            }\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTPROPERITEM\"\n          }));\n        }\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\"; // let nfilterStorageCategory = this.state.nfilterStorageCategory && Object.keys(this.state.nfilterStorageCategory).length !== 0 ? this.state.nfilterStorageCategory.value : 0;\n\n      let nfilterStorageCategory = this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.nfilterStorageCategory;\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          \"nstoragecategorycode\": nfilterStorageCategory\n        },\n        classUrl: \"samplestoragemaster\",\n        methodUrl: \"SampleStorageMaster\",\n        displayName: \"IDS_SAMPLESTORAGEMASTER\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        }\n      } else if (event.target.type === 'select-one') {\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n\n      if (this.state.activeTabIndex === 1 && this.props.Login.operation === \"create\") {\n        this.props.validateEsignCredentialSampleStorageMaster(inputParam);\n      } else if (this.props.Login.operation === \"move\") {\n        this.props.validateEsignCredentialSampleStorageMaster(inputParam);\n      } else {\n        this.props.validateEsignCredential(inputParam, \"openModal\");\n      }\n    };\n\n    this.state = {\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      detailSkip: 0,\n      detailTake: 10,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      splitChangeWidthPercentage: 22,\n      enablePropertyPopup: false,\n      enableAutoClick: false,\n      treeDataView: undefined,\n      toggleActionView: false,\n      toggleAction: false,\n      propertyPopupWidth: \"60\",\n      splitChangeWidthPercentage: 28.6,\n      containers: [],\n      treeData: [],\n      selectedItem: undefined,\n      selectedItemMove: undefined\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps) {\n    let isComponentUpdated = false;\n    let {\n      filterData\n    } = this.state;\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          controlMap,\n          userRoleControlRights\n        });\n      }\n    }\n\n    if (this.props.Login.masterData.approvedTreeData !== previousProps.Login.masterData.approvedTreeData) {\n      if (this.props.Login.masterData.approvedTreeData && this.props.Login.masterData.approvedTreeData !== undefined) {\n        this.setState({\n          treeData: this.props.Login.masterData.approvedTreeData\n        });\n      } //JSON.parse(this.props.Login.masterData.approvedTreeData[\"jsondata\"].value).data\n\n    }\n\n    if (this.props.Login.masterData.selectedSampleStorageVersion !== previousProps.Login.masterData.selectedSampleStorageVersion) {\n      if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined) {\n        this.setState({\n          treeDataView: JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data\n        });\n      } else {\n        this.setState({\n          treeDataView: undefined\n        });\n      }\n    }\n\n    let nfilterStorageCategory = this.state.nStorageCategory || {};\n    let filterStorageCategory = this.state.filterStorageCategory || {};\n\n    if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\n      if (this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined) {\n        const filterStorageCategoryMap = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\", \"sstoragecategoryname\", 'nstoragecategorycode', 'ascending', false);\n        filterStorageCategory = filterStorageCategoryMap.get(\"OptionList\");\n\n        if (filterStorageCategory && filterStorageCategory.length > 0) {\n          const filterCategory = filterStorageCategory.filter(item => item.value === this.props.Login.masterData.nfilterStorageCategory); //filterStorageCategory[0];\n\n          nfilterStorageCategory = filterCategory[0];\n        }\n\n        isComponentUpdated = true;\n      }\n    } else if (this.props.Login.masterData.nfilterStorageCategory !== previousProps.Login.masterData.nfilterStorageCategory) {\n      if (this.props.Login.masterData.nfilterStorageCategory && this.props.Login.masterData.nfilterStorageCategory !== undefined) {\n        nfilterStorageCategory = this.props.Login.masterData.nfilterStorageCategory;\n        isComponentUpdated = true;\n      }\n    }\n\n    if (isComponentUpdated) {\n      this.setState({\n        nfilterStorageCategory,\n        filterStorageCategory\n      });\n    }\n\n    if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\n      this.setState({\n        activeTabIndex: this.props.Login.activeTabIndex\n      });\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const filterData = this.generateBreadCrumData();\n      this.setState({\n        filterData\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.filterStorageCategory) {\n      breadCrumbData.push({\n        \"label\": \"IDS_STORAGECATEGORY\",\n        \"value\": this.props.Login.masterData.selectedStorageCategoryName && this.props.Login.masterData.selectedStorageCategoryName !== null ? this.props.Login.masterData.selectedStorageCategoryName : \"NA\" // \"value\": this.props.Login.masterData.approvedSampleStorageLocation ? this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined ?\n        //     this.props.Login.masterData.selectedStorageCategoryName : \"NA\" : \"NA\"\n\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  clearSelected(innerObj, selectedItem) {\n    // console.log(innerObj, selectedItem, \"aasd\")\n    if (innerObj.id == selectedItem.id) {\n      innerObj.selected = true;\n    } else {\n      innerObj.selected = false;\n    }\n\n    if (innerObj.items && innerObj.items.length > 0) {\n      innerObj.items.map(childObj => {\n        this.clearSelected(childObj, selectedItem);\n      });\n    }\n\n    return innerObj;\n  }\n\n  render() {\n    let mandatoryFields = [];\n\n    if (this.state.activeTabIndex === 1) {\n      mandatoryFields.push({\n        \"idsName\": \"IDS_SAMPLE\",\n        \"dataField\": \"ssamplearno\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      });\n    } else if (this.state.activeTabIndex === 2) {\n      mandatoryFields.push({\n        \"idsName\": \"IDS_STORAGECONDITIONNAME\",\n        \"dataField\": \"nstorageconditioncode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      });\n    }\n\n    const filterParam = {\n      inputListName: \"approvedSampleStorageLocation\",\n      selectedObject: \"selectedSampleStorageVersion\",\n      primaryKeyField: \"nsamplestorageversioncode\",\n      fetchUrl: \"samplestoragelocation/getActiveSampleStorageVersion\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"ssamplestoragelocationname\"]\n    };\n    const breadCrumbData = this.state.filterData || [];\n    const confirmMessage = new ConfirmMessage();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1353,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1355,\n        columnNumber: 25\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      className: `toolbar-top ${this.state.activeTabIndex ? 'active-property-bar' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1357,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1358,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: `vertical-tab-top grid-master ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1359,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `tab-left-area ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1360,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_SAMPLESTORAGEMASTER\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.approvedSampleStorageLocation,\n      getMasterDetail: selectedItem => this.props.getSelectedApprovedStorageVersion(selectedItem, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedSampleStorageVersion,\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      mainField: \"ssamplestoragelocationname\" // firstField=\"sversionno\"\n      // secondField=\"stransdisplaystatus\"\n      ,\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      hideAddButton: true // addId={addId}\n      ,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: false // openModal={() => this.props.getDesignTemplateMappingComboService(addParam)}\n      ,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      filterComponent: [{\n        \"IDS_STORAGEFILTER\": /*#__PURE__*/React.createElement(StorageCategoryFilter, {\n          filterStorageCategory: this.state.filterStorageCategory || [],\n          nfilterStorageCategory: this.state.nfilterStorageCategory || {},\n          onComboChange: this.onComboChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1394,\n            columnNumber: 53\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1361,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tree-view-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1404,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined ? /*#__PURE__*/React.createElement(TreeViewEditable, {\n      id: \"samplestoragelocation\",\n      name: \"samplestoragelocation\" // label=\"Sample Storage Location\"\n      ,\n      data: this.state.treeDataView,\n      expandIcons: true,\n      item: this.itemRenderView,\n      selectField: 'active-node',\n      onExpandChange: this.onExpandChangeView,\n      onItemClick: this.onItemClickView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1406,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null)), /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.enablePropertyPopup ? 'active-popup' : \"\"} xs-grid-container vertical-tab ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1421,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      style: {\n        width: this.state.enablePropertyPopup ? this.state.propertyPopupWidth + '%' : \"\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1422,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: ` vertical-tab-close ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyViewClose(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1423,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faChevronRight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1423,\n        columnNumber: 178\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex === 1 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1424,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4 no-margin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1425,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEDETAILS\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex === 1 ? this.sideNavDetail(\"IDS_SAMPLEDETAILS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex === 2 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1430,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4 no-margin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1431,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_STORAGECONDITION\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex === 2 ? this.sideNavDetail(\"IDS_STORAGECONDITION\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex === 3 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1436,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4 no-margin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1437,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_CONTAINERS\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex === 3 ? this.sideNavDetail(\"IDS_CONTAINERS\") : \"\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tab-head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1445,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1446,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex === 1 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(1, undefined, true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1447,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1448,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1449,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEDETAILS\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex === 2 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(2, undefined, true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1453,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1454,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1455,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_STORAGECONDITION\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex === 3 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(3, undefined, true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1459,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1460,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1461,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_CONTAINERS\"\n    })))))))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.intl.formatMessage({\n        id: this.state.activeTabIndex && this.state.activeTabIndex === 1 ? \"IDS_SAMPLE\" : \"IDS_STORAGECONDITIONNAME\"\n      }),\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      showSaveContinue: this.props.Login.loadEsign ? false : this.state.activeTabIndex && this.state.activeTabIndex === 1 ? true : false,\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1512,\n          columnNumber: 29\n        }\n      }) : this.state.activeTabIndex && this.state.activeTabIndex === 1 ? /*#__PURE__*/React.createElement(AddSample, {\n        onInputChange: e => this.onInputChange(e),\n        selectedRecord: this.state.selectedRecord || {},\n        onKeyUp: e => this.onKeyUp(e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1520,\n          columnNumber: 33\n        }\n      }) : this.state.activeTabIndex && this.state.activeTabIndex === 2 ? /*#__PURE__*/React.createElement(AddContainerStorageCondition, {\n        selectedRecord: this.state.selectedRecord || {},\n        onComboChange: this.onComboChange,\n        storageCondition: this.props.Login.masterData.storageCondition || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1526,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(React.Fragment, null),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1498,\n        columnNumber: 21\n      }\n    }), this.props.Login.openChildModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openChildModal,\n      closeModal: this.closeChildModal,\n      operation: this.props.intl.formatMessage({\n        id: \"IDS_MOVE\"\n      }),\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.intl.formatMessage({\n        id: this.state.activeTabIndex && this.state.activeTabIndex == 1 ? \"IDS_SAMPLE\" : \"IDS_CONTAINERS\"\n      }),\n      onSaveClick: this.onMoveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1551,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(MoveSampleOrContainers, {\n        treeData: this.state.treeData,\n        selectedRecord: this.state.selectedRecord || {},\n        itemRender: this.itemRender,\n        onExpandChange: this.onExpandChange,\n        onItemClick: this.onItemClick,\n        onComboChange: this.onComboChange,\n        storageCategory: this.props.Login.masterData.storageCategory || [],\n        approvedLocation: this.props.Login.masterData.approvedLocation || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1558,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1539,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  getSampleMaster,\n  filterColumnData,\n  getSelectedSampleStorageLocation,\n  openPropertyModal,\n  editSampleStorageLocation,\n  approveSampleStorageLocation,\n  getSelectedSampleStorageVersion,\n  getContainerStorageCondition,\n  getStorageConditionFromMaster,\n  getSampleMasterDetails,\n  getContainers,\n  getselectedContainer,\n  changeStorageCategoryFilterOnSampleMaster,\n  openSampleStorageApprovedLocation,\n  loadApprovedLocationOnCombo,\n  loadApprovedLocationOnTreeData,\n  moveItems,\n  saveSampleStorageMaster,\n  getSelectedApprovedStorageVersion,\n  validateEsignCredentialSampleStorageMaster\n})(injectIntl(SampleStorageMaster));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/basemaster/SampleStorageMaster.jsx"],"names":["React","Component","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","Form","Button","FontAwesomeIcon","faTrashAlt","faCopy","faPencilAlt","faSync","faPlus","faThumbsUp","faFileInvoice","faEye","faLink","faChevronRight","faComments","faLaptopHouse","faBoxOpen","faBoxTissue","faBox","faLocationArrow","faFolderMinus","faFolderOpen","faArrowRight","toast","ListMaster","constructOptionList","getControlMap","showEsign","ReadOnlyText","ContentPanel","SlideOutModal","callService","crudMaster","validateEsignCredential","updateStore","getSelectedSampleStorageLocation","getSampleMaster","openPropertyModal","editSampleStorageLocation","approveSampleStorageLocation","getSelectedSampleStorageVersion","getContainerStorageCondition","getStorageConditionFromMaster","getSampleMasterDetails","getContainers","getselectedContainer","changeStorageCategoryFilterOnSampleMaster","openSampleStorageApprovedLocation","loadApprovedLocationOnCombo","filterColumnData","loadApprovedLocationOnTreeData","moveItems","saveSampleStorageMaster","getSelectedApprovedStorageVersion","validateEsignCredentialSampleStorageMaster","DEFAULT_RETURN","ListWrapper","TreeViewEditable","mapTree","removeItems","ConfirmMessage","CustomSwitch","AddSample","AddContainerStorageCondition","ProductList","TransactionListMasterJson","BreadcrumbComponent","StorageCategoryFilter","MoveSampleOrContainers","faFolder","Esign","SampleStorageMaster","constructor","props","openModal","addId","Login","selectedItem","containerlastnode","updateInfo","typeName","data","selectedRecord","operation","ncontrolcode","closeModal","loadEsign","selectedId","state","closeChildModal","openChildModal","onInputChange","event","target","name","value","setState","onKeyUp","keyCode","onSaveClickSample","onSaveClick","saveType","formRef","activeTabIndex","onSaveClickContainer","inputData","userInfo","nsamplecode","sampleTrayCode","ssamplearno","masterData","selectedSampleStorageVersion","nsamplestoragelocationcode","nstoragecategorycode","sampleLocation","inputParam","methodUrl","classUrl","displayName","userRoleControlRights","nformcode","screenData","storageContainer","ncontainerstoragecode","containerCode","undefined","nstorageconditioncode","containerLocation","itemRenderView","clickedItem","item","toggleActionView","selected","expanded","containerfirstnode","locationlastnode","text","onItemClickView","result","treeDataView","indices","itemHierarchicalIndex","split","map","index","Number","itemText","i","length","items","changePropertyView","containers","forEach","element","push","onComboChange","comboData","fieldName","caseNo","nfilterStorageCategory","searchRef","current","onExpandChangeView","forceUpdate","handlePageChange","e","skip","take","setTimeout","_scrollBarRef","updateScroll","moveItem","moveId","sampleStorageMaster","selectedSampleStorageMaster","warn","intl","formatMessage","id","selectedContainer","confirmDelete","ncontrolCode","confirmMessage","confirm","deleteSampleStorageMaster","ssampletraycode","screenName","loadStorageCondition","editContainerID","openStorage","discardSampleStorageMaster","sideNavDetail","controlMap","has","get","editId","deleteId","discardId","indexOf","splitChangeWidthPercentage","filterTransactionList","sstorageconditionname","locationCode","tabClick","check","window","innerWidth","enableAutoClick","changePropertyViewClose","onInputSwitchOnChange","enablePropertyPopup","openFilter","showFilter","closeFilter","onFilterSubmit","userinfo","filterStorageCategory","itemRender","toggleAction","editable","onItemClick","newData","treeData","targetLocationHierarchy","onExpandChange","onMoveClick","getSelectedSamples","slice","selectedSamples","moveTargetTrayCode","moveContainers","storageCategory","sourceLocationHierarchy","getSampleTray","getContainerCode","targetData","sourceData","sameLocation","targetJsonData","SourceJsonData","selectedContainers","scontainercode","sourceLocationCode","sourceVersionCode","nsamplestorageversioncode","locationText","reloadData","onInputOnChange","type","checked","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","Map","detailSkip","detailTake","settings","propertyPopupWidth","selectedItemMove","createRef","getDerivedStateFromProps","masterStatus","error","componentDidUpdate","previousProps","isComponentUpdated","filterData","Object","values","approvedTreeData","JSON","parse","nStorageCategory","filterStorageCategoryMap","filterCategory","filter","generateBreadCrumData","breadCrumbData","selectedStorageCategoryName","clearSelected","innerObj","childObj","render","mandatoryFields","filterParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","searchFieldList","searchedData","approvedSampleStorageLocation","width","storageCondition","approvedLocation","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faFileInvoice, faEye, faLink, faChevronRight, faComments, faLaptopHouse, faBoxOpen, faBoxTissue, faBox, faLocationArrow, faFolderMinus, faFolderOpen, faArrowRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, getSampleMaster,\r\n    openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, getContainerStorageCondition,\r\n    getStorageConditionFromMaster, getSampleMasterDetails, getContainers, getselectedContainer, changeStorageCategoryFilterOnSampleMaster,\r\n    openSampleStorageApprovedLocation, loadApprovedLocationOnCombo, filterColumnData,\r\n    loadApprovedLocationOnTreeData, moveItems, saveSampleStorageMaster, getSelectedApprovedStorageVersion, validateEsignCredentialSampleStorageMaster\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\r\nimport { mapTree, removeItems } from \"@progress/kendo-react-treelist\";\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport AddSample from '../basemaster/AddSample';\r\nimport AddContainerStorageCondition from './AddContainerStorageCondition';\r\nimport { ProductList } from '../product/product.styled';\r\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport StorageCategoryFilter from './StorageCategoryFilter';\r\nimport MoveSampleOrContainers from './MoveSampleOrContainers';\r\nimport { faFolder } from '@fortawesome/free-regular-svg-icons';\r\nimport Esign from '../audittrail/Esign';\r\n\r\nclass SampleStorageMaster extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedRecord: {},\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            detailSkip: 0,\r\n            detailTake: 10,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25,\r\n            splitChangeWidthPercentage: 22,\r\n            enablePropertyPopup: false,\r\n            enableAutoClick: false,\r\n            treeDataView: undefined,\r\n            toggleActionView: false,\r\n            toggleAction: false,\r\n            propertyPopupWidth: \"60\",\r\n            splitChangeWidthPercentage: 28.6,\r\n            containers: [],\r\n            treeData: [],\r\n            selectedItem: undefined,\r\n            selectedItemMove: undefined\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    openModal = (addId) => {\r\n        if (this.props.Login.selectedItem && this.props.Login.selectedItem.containerlastnode === true) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModal: true, selectedRecord: {},\r\n                    operation: \"create\", ncontrolcode: addId\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"discard\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                selectedId = null;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedId = null;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeChildModal = () => {\r\n\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openChildModal = this.props.Login.openChildModal;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            loadEsign = false;\r\n        }\r\n        else {\r\n            openChildModal = false;\r\n            selectedId = null;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         openChildModal: false, selectedRecord: {}\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n    onInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[event.target.name] = event.target.value;\r\n        this.setState({ selectedRecord });\r\n    };\r\n    onKeyUp = (event) => {\r\n        if (event.keyCode === 13) {\r\n            this.onSaveClickSample(2);\r\n        }\r\n    };\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.state.activeTabIndex === 1) {\r\n            this.onSaveClickSample(saveType, formRef);\r\n        } else {\r\n            this.onSaveClickContainer(saveType, formRef);\r\n        }\r\n    }\r\n    onSaveClickSample = (saveType, formRef) => {\r\n        let inputData = [];\r\n\r\n\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        if (this.props.Login.operation === \"update\") {\r\n            inputData[\"sampleStorageMaster\"] = {\r\n                \"nsamplecode\": this.state.selectedRecord.nsamplecode ? this.state.selectedRecord.nsamplecode : -1,\r\n                \"ssampletraycode\": this.props.Login.sampleTrayCode ? this.props.Login.sampleTrayCode : \"\",\r\n                \"ssamplearno\": this.state.selectedRecord.ssamplearno ? this.state.selectedRecord.ssamplearno : \"\",\r\n                \"nsamplestoragelocationcode\": this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\r\n                \"nstoragecategorycode\": this.props.Login.masterData.selectedSampleStorageVersion.nstoragecategorycode\r\n            }\r\n        }\r\n        else {\r\n            //add               \r\n            inputData[\"sampleStorageMaster\"] = {\r\n                \"ssampletraycode\": this.props.Login.sampleTrayCode ? this.props.Login.sampleTrayCode : \"\",\r\n                \"ssamplearno\": this.state.selectedRecord.ssamplearno ? this.state.selectedRecord.ssamplearno : \"\",\r\n                \"nsamplestoragelocationcode\": this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\r\n                \"slocationhierarchy\": this.props.Login.sampleLocation ? this.props.Login.sampleLocation : \"\",\r\n                \"nstoragecategorycode\": this.props.Login.masterData.selectedSampleStorageVersion.nstoragecategorycode\r\n            }\r\n        }\r\n\r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData, selectedRecord }, saveType, openModal: true\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            // this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            this.props.saveSampleStorageMaster(this.props.Login.userInfo, this.props.Login.masterData, this.state.selectedRecord, inputParam);\r\n        }\r\n\r\n    }\r\n\r\n    onSaveClickContainer = (saveType, formRef) => {\r\n        let inputData = [];\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        inputData[\"containerStorageCondition\"] = { \"nstatus\": 1 };\r\n        if (this.props.Login.operation === \"update\") {\r\n            inputData[\"containerStorageCondition\"][\"ncontainerstoragecode\"] = this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== null ?\r\n                this.props.Login.masterData.storageContainer.ncontainerstoragecode : -1\r\n            inputData[\"containerStorageCondition\"][\"scontainercode\"] = this.props.Login.containerCode && this.props.Login.containerCode !== undefined ? this.props.Login.containerCode : \"\"\r\n            inputData[\"containerStorageCondition\"][\"nstorageconditioncode\"] = this.state.selectedRecord.nstorageconditioncode && this.state.selectedRecord.nstorageconditioncode !== undefined ? this.state.selectedRecord.nstorageconditioncode.value : -1\r\n\r\n\r\n        }\r\n        inputData[\"containerStorageCondition\"][\"scontainercode\"] = this.props.Login.containerCode && this.props.Login.containerCode !== undefined ? this.props.Login.containerCode : \"\"\r\n        inputData[\"containerStorageCondition\"][\"nstorageconditioncode\"] = this.state.selectedRecord.nstorageconditioncode && this.state.selectedRecord.nstorageconditioncode !== undefined ? this.state.selectedRecord.nstorageconditioncode.value : -1\r\n        inputData[\"containerStorageCondition\"][\"slocationhierarchy\"] = this.props.Login.containerLocation ? this.props.Login.containerLocation : \"\";\r\n        inputData[\"containerStorageCondition\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode;\r\n\r\n        const inputParam = {\r\n            methodUrl: \"ContainerStorageCondition\",\r\n            classUrl: \"samplestoragemaster\",\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    itemRenderView = (clickedItem) => {\r\n        let item = clickedItem.item;\r\n        if (!this.state.toggleActionView) {\r\n            return (\r\n                <>\r\n                    {item ? (\r\n                        <>\r\n                            <span className={`normal-node\r\n                            ${item.selected ? \"active-node\" : \"\"}\r\n                            ${item.expanded ? \"expand-node\" : \"collapse-node\"}\r\n                            `}>\r\n                                {item.containerfirstnode ? <FontAwesomeIcon icon={faBoxOpen} /> :\r\n                                    item.locationlastnode ? <FontAwesomeIcon icon={faLocationArrow} /> :\r\n                                        item.containerlastnode ? <FontAwesomeIcon icon={faBox} /> :\r\n                                            item.expanded ? <FontAwesomeIcon icon={faFolderOpen} /> : <FontAwesomeIcon icon={faFolder} />}\r\n                                {item.text}\r\n                            </span>\r\n                            {/* <ul className=\"list-inline mb-0\"> */}\r\n                            {/* {console.log(clickedItem,'===>')} */}\r\n                            {/* {clickedItem.item.editable ? (\r\n                                <>\r\n                                    <li className=\"list-inline-item\"> */}\r\n                            {/* <span\r\n                                            className=\"action-icon tree-toggle\"\r\n                                            onClick={(e) => this.setProperties(e, clickedItem)}\r\n                                        ></span> */}\r\n                            {/* </li> */}\r\n                            {/* </> */}\r\n                            {/* ) : null} */}\r\n                            {/* </ul> */}\r\n                        </>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    };\r\n\r\n    onItemClickView = (event) => {\r\n        if (this.state.selectedItem) {\r\n            this.state.selectedItem.selected = false;\r\n        }\r\n\r\n        event.item.selected = true;\r\n        this.setState({\r\n            selectedItem: event.item\r\n        })\r\n        // let newData = mapTree(this.state.treeDataView, \"items\", (item) => {\r\n        //     if (item.editable === true) {\r\n        //         item.editable = false;\r\n        //     } else if (item.id === event.item.id) {\r\n        //         item.editable = true;\r\n        //     }\r\n        //     return item;\r\n        // });\r\n\r\n        // this.setState({ treeDataView: newData });\r\n\r\n        if (event.item && event.item.containerlastnode && event.item.containerlastnode === true) {\r\n\r\n            let result = this.state.treeDataView;\r\n            const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n            let itemText = \"\";\r\n\r\n            for (let i = 0; i < indices.length; i++) {\r\n                if (i === 0) {\r\n                    result = result[0];\r\n                } else {\r\n                    result = result.items[indices[i]];\r\n                }\r\n                itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n            }\r\n\r\n            this.props.getSampleMaster(event.item, this.props.Login.userInfo, this.props.Login.masterData, itemText, event.itemHierarchicalIndex);\r\n\r\n            if (this.state.activeTabIndex && this.state.activeTabIndex === false) {\r\n                this.changePropertyView(1, undefined, false);\r\n            } else if (this.state.activeTabIndex === undefined) {\r\n                this.changePropertyView(1, undefined, false);\r\n            } else if (this.state.activeTabIndex !== 1) {\r\n                this.changePropertyView(1, undefined, false);\r\n            }\r\n\r\n\r\n        } else if (event.item && event.item.containerfirstnode && event.item.containerfirstnode === true) {\r\n\r\n            let result = this.state.treeDataView;\r\n\r\n            const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n            let itemText = \"\";\r\n            for (let i = 0; i < indices.length; i++) {\r\n                if (i === 0) {\r\n                    result = result[0];\r\n                } else {\r\n                    result = result.items[indices[i]];\r\n                }\r\n                itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n            }\r\n\r\n            this.props.getContainerStorageCondition(event.item, this.props.Login.userInfo, this.props.Login.masterData, itemText);\r\n\r\n            if (this.state.activeTabIndex && this.state.activeTabIndex === false) {\r\n                this.changePropertyView(2, undefined, false);\r\n            } else if (this.state.activeTabIndex === undefined) {\r\n                this.changePropertyView(2, undefined, false);\r\n            } else if (this.state.activeTabIndex !== 2) {\r\n                this.changePropertyView(2, undefined, false);\r\n            }\r\n\r\n        } else if (event.item && event.item.locationlastnode && event.item.locationlastnode === true) {\r\n\r\n            let containers = [];\r\n            if (event.item.items && event.item.items.length > 0) {\r\n                event.item.items.forEach(element => {\r\n                    if (element.containerfirstnode === true) {\r\n                        containers.push(element);\r\n                    }\r\n                });\r\n            }\r\n\r\n            let result = this.state.treeDataView;\r\n            const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n            let itemText = \"\";\r\n            for (let i = 0; i < indices.length; i++) {\r\n                if (i === 0) {\r\n                    result = result[0];\r\n                } else {\r\n                    result = result.items[indices[i]];\r\n                }\r\n                itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n            }\r\n\r\n            this.props.getContainers(event.item, this.props.Login.masterData, containers, itemText);\r\n            if (this.state.activeTabIndex && this.state.activeTabIndex === false) {\r\n                this.changePropertyView(3, undefined, false);\r\n            } else if (this.state.activeTabIndex === undefined) {\r\n                this.changePropertyView(3, undefined, false);\r\n            } else if (this.state.activeTabIndex !== 3) {\r\n                this.changePropertyView(3, undefined, false);\r\n            }\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedItem: event.item,\r\n                    activeTabIndex: undefined\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n\r\n\r\n    };\r\n    onComboChange = (comboData, fieldName, caseNo) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (caseNo === 3) {\r\n\r\n            let nfilterStorageCategory = this.state.nfilterStorageCategory || {}\r\n            nfilterStorageCategory = comboData;\r\n            this.searchRef.current.value = \"\";\r\n            this.setState({ nfilterStorageCategory })\r\n\r\n        } else if (caseNo === 4) {\r\n\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.loadApprovedLocationOnCombo(this.props.Login.userInfo, this.props.Login.masterData, selectedRecord);\r\n\r\n        } else if (caseNo === 5) {\r\n\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.loadApprovedLocationOnTreeData(this.props.Login.userInfo, this.props.Login.masterData, selectedRecord);\r\n        } else {\r\n\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n    onExpandChangeView = (event) => {\r\n        event.item.expanded = !event.item.expanded;\r\n        this.forceUpdate();\r\n    };\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        let isComponentUpdated = false;\r\n        let { filterData } = this.state;\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({ controlMap, userRoleControlRights });\r\n            }\r\n        }\r\n        if (this.props.Login.masterData.approvedTreeData !== previousProps.Login.masterData.approvedTreeData) {\r\n            if (this.props.Login.masterData.approvedTreeData && this.props.Login.masterData.approvedTreeData !== undefined) {\r\n                this.setState({\r\n                    treeData:\r\n                        this.props.Login.masterData.approvedTreeData\r\n                });\r\n            } //JSON.parse(this.props.Login.masterData.approvedTreeData[\"jsondata\"].value).data\r\n        }\r\n\r\n        if (this.props.Login.masterData.selectedSampleStorageVersion !== previousProps.Login.masterData.selectedSampleStorageVersion) {\r\n            if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined) {\r\n                this.setState({\r\n                    treeDataView:\r\n                        JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data                        \r\n                });\r\n            } else {\r\n                this.setState({\r\n                    treeDataView: undefined\r\n                });\r\n            }\r\n        }\r\n\r\n        let nfilterStorageCategory = this.state.nStorageCategory || {};\r\n        let filterStorageCategory = this.state.filterStorageCategory || {};\r\n\r\n        if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\r\n            if (this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined) {\r\n                const filterStorageCategoryMap = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\",\r\n                    \"sstoragecategoryname\", 'nstoragecategorycode', 'ascending', false);\r\n                filterStorageCategory = filterStorageCategoryMap.get(\"OptionList\");\r\n                if (filterStorageCategory && filterStorageCategory.length > 0) {\r\n                    const filterCategory = filterStorageCategory.filter(item => item.value === this.props.Login.masterData.nfilterStorageCategory);//filterStorageCategory[0];\r\n                    nfilterStorageCategory = filterCategory[0];\r\n                }\r\n                isComponentUpdated = true;\r\n            }\r\n        } else if (this.props.Login.masterData.nfilterStorageCategory !== previousProps.Login.masterData.nfilterStorageCategory) {\r\n            if (this.props.Login.masterData.nfilterStorageCategory && this.props.Login.masterData.nfilterStorageCategory !== undefined) {\r\n                nfilterStorageCategory = this.props.Login.masterData.nfilterStorageCategory;\r\n                isComponentUpdated = true;\r\n            }\r\n        }\r\n        if (isComponentUpdated) {\r\n            this.setState({ nfilterStorageCategory, filterStorageCategory });\r\n        }\r\n\r\n        if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\r\n            this.setState({ activeTabIndex: this.props.Login.activeTabIndex });\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({\r\n                selectedRecord: this.props.Login.selectedRecord\r\n            });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const filterData = this.generateBreadCrumData();\r\n            this.setState({ filterData });\r\n        }\r\n\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    };\r\n\r\n    moveItem = (userInfo, masterData, moveId) => {\r\n\r\n        // let sampleTrayID = [];\r\n        // mapTree([this.props.Login.selectedItem], \"items\", (item) => {\r\n        //     if (item.containerlastnode === true) {\r\n        //         sampleTrayID.push(item.id);\r\n        //     }\r\n        //     return null;\r\n        // });\r\n\r\n        if (this.state.activeTabIndex && this.state.activeTabIndex === 1) {\r\n            if (this.props.Login.masterData.sampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster[0] !== undefined) {\r\n                this.props.openSampleStorageApprovedLocation(userInfo, masterData, moveId);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYSAMPLE\" }));\r\n            }\r\n        } else if (this.state.activeTabIndex && this.state.activeTabIndex === 3) {\r\n            if (this.props.Login.masterData.containers && this.props.Login.masterData.selectedContainer && this.props.Login.masterData.selectedContainer[0] !== undefined) {\r\n                this.props.openSampleStorageApprovedLocation(userInfo, masterData, moveId);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYCONTAINER\" }));\r\n            }\r\n        }\r\n\r\n    }\r\n    confirmDelete = (ncontrolCode) => {\r\n        if (this.props.Login.masterData.sampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster[0] !== undefined) {\r\n            this.confirmMessage.confirm(\"deleteMessage\",\r\n                this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                () => this.deleteSampleStorageMaster(ncontrolCode));\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYSAMPLE\" }));\r\n        }\r\n    };\r\n    deleteSampleStorageMaster = (ncontrolCode) => {\r\n        let inputData = [];\r\n\r\n        let data = [];\r\n\r\n        this.props.Login.masterData.selectedSampleStorageMaster.forEach(item => {\r\n            data.push({ \"nsamplecode\": item.nsamplecode, \"ssampletraycode\": item.ssampletraycode });\r\n        })\r\n\r\n        inputData[\"sampleStorageMaster\"] = data;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        const inputParam = {\r\n            methodUrl: \"SampleStorageMaster\",\r\n            classUrl: \"samplestoragemaster\",\r\n            inputData: inputData,\r\n            operation: \"delete\", searchRef: this.searchRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, operation: \"delete\", openModal: true,\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n    loadStorageCondition = (editContainerID) => {\r\n        let openStorage = false;\r\n        if (this.props.Login.masterData.storageContainer === null || this.props.Login.masterData.storageContainer === undefined) {\r\n            mapTree(this.state.treeDataView, \"items\", (item) => {\r\n                if (item.id === this.props.Login.selectedItem.id) {\r\n                    openStorage = true;\r\n                }\r\n                return item;\r\n            });\r\n        } else if (this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== undefined) {\r\n            openStorage = true;\r\n        }\r\n        if (openStorage === true) {\r\n            if (this.props.Login.selectedItem && this.props.Login.selectedItem.containerfirstnode === true) {\r\n                this.props.getStorageConditionFromMaster(this.props.Login.userInfo, this.props.Login.masterData, editContainerID)\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYCONTAINER\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYCONTAINER\" }));\r\n        }\r\n\r\n    }\r\n    discardSampleStorageMaster = (ncontrolCode) => {\r\n        let inputData = [];\r\n\r\n        let data = [];\r\n        if (this.props.Login.masterData.sampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster[0] !== undefined) {\r\n            this.props.Login.masterData.selectedSampleStorageMaster.forEach(item => {\r\n                data.push({\r\n                    \"nsamplecode\": item.nsamplecode, \"ssampletraycode\": item.ssampletraycode, \"ssamplearno\": item.ssamplearno\r\n                });\r\n            })\r\n\r\n            inputData[\"sampleStorageMaster\"] = data;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            const inputParam = {\r\n                methodUrl: \"SampleStorageMaster\",\r\n                classUrl: \"samplestoragemaster\",\r\n                inputData: inputData,\r\n                operation: \"discard\", searchRef: this.searchRef\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, operation: \"discard\", openModal: true,\r\n                        screenName: this.props.Login.inputParam.displayName\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYSAMPLE\" }));\r\n        }\r\n    }\r\n    sideNavDetail = (screenName) => {\r\n\r\n        const addId = this.state.controlMap.has(\"Add SampleStorageMaster\") && this.state.controlMap.get(\"Add SampleStorageMaster\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"Edit SampleStorageMaster\") && this.state.controlMap.get(\"Edit SampleStorageMaster\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"Delete SampleStorageMaster\") && this.state.controlMap.get(\"Delete SampleStorageMaster\").ncontrolcode;\r\n        const editContainerID = this.state.controlMap.has(\"Edit StorageContainer\") && this.state.controlMap.get(\"Edit StorageContainer\").ncontrolcode;\r\n        const moveId = this.state.controlMap.has(\"Move SampleStorageMaster\") && this.state.controlMap.get(\"Move SampleStorageMaster\").ncontrolcode;\r\n        const discardId = this.state.controlMap.has(\"Discard SampleStorageMaster\") && this.state.controlMap.get(\"Discard SampleStorageMaster\").ncontrolcode;\r\n\r\n        if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined) {\r\n            return (\r\n                screenName == \"IDS_SAMPLEDETAILS\" ?\r\n                    <>\r\n                        {this.props.Login.sampleTrayCode && this.props.Login.sampleTrayCode !== undefined ?\r\n                            <>\r\n                                <div className=\"actions-stripe\">\r\n                                    <div className=\"d-flex justify-content-end\">\r\n                                        <Nav.Link name=\"addsample\" className=\"add-txt-btn\"\r\n                                            hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                            onClick={() => this.openModal(addId)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faPlus} /> { }\r\n                                            <FormattedMessage id=\"IDS_SAMPLE\" defaultMessage=\"Sample\" />\r\n                                        </Nav.Link>\r\n\r\n                                        <Nav.Link name=\"deletesample\" className=\"add-txt-btn\"\r\n                                            hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                            onClick={() => this.confirmDelete(deleteId)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faTrashAlt} /> { }\r\n                                            <FormattedMessage id=\"IDS_DELETE\" defaultMessage=\"Delete\" />\r\n                                        </Nav.Link>\r\n\r\n                                        <Nav.Link name=\"movesample\" className=\"add-txt-btn\"\r\n                                            hidden={this.state.userRoleControlRights.indexOf(moveId) === -1}\r\n                                            onClick={() => this.moveItem(this.props.Login.userInfo, this.props.Login.masterData, moveId)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faPlus} /> { }\r\n                                            <FormattedMessage id=\"IDS_MOVE\" defaultMessage=\"Move\" />\r\n                                        </Nav.Link>\r\n\r\n                                        <Nav.Link name=\"discardsample\" className=\"add-txt-btn\"\r\n                                            hidden={this.state.userRoleControlRights.indexOf(discardId) === -1}\r\n                                            onClick={() => this.discardSampleStorageMaster(discardId)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faArrowRight} /> { }\r\n                                            <FormattedMessage id=\"IDS_DISCARD\" defaultMessage=\"Discard\" />\r\n                                        </Nav.Link>\r\n\r\n                                    </div>\r\n                                </div>\r\n                                <div className='toolbar-top-inner'>\r\n                                    <TransactionListMasterJson\r\n                                        listMasterShowIcon={1}\r\n                                        clickIconGroup={false}\r\n                                        splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                        masterList={this.props.Login.masterData.sampleStorageMaster || []}\r\n                                        selectedMaster={this.props.Login.masterData.selectedSampleStorageMaster || []}\r\n                                        primaryKeyField=\"nsamplecode\"\r\n                                        filterColumnData={this.props.filterTransactionList}\r\n                                        getMasterDetail={this.props.getSampleMasterDetails}\r\n                                        inputParam={{\r\n                                            ...this.props.Login.masterData\r\n                                        }}\r\n                                        // moreField={this.props.Login.masterData.sampleStorageMaster || []}\r\n                                        // selectionList={this.props.Login.masterData.RealFilterStatusValue\r\n                                        //     && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                        selectionColorField=\"scolorhexcode\"\r\n                                        mainField={\"ssamplearno\"}\r\n                                        showStatusLink={true}\r\n                                        showStatusName={true}\r\n                                        // statusFieldName=\"stransdisplaystatus\"\r\n                                        // statusField=\"ntransactionstatus\"\r\n                                        selectedListName=\"selectedSampleStorageMaster\"\r\n                                        // searchListName=\"searchedSample\"\r\n                                        // searchRef={this.searchSampleRef}\r\n                                        // objectName=\"sample\"\r\n                                        listName=\"IDS_SAMPLE\"\r\n                                        // selectionField=\"ntransactionstatus\"\r\n                                        // selectionFieldName=\"stransdisplaystatus\"\r\n                                        // showFilter={this.props.Login.showFilter}\r\n                                        // openFilter={this.openFilter}\r\n                                        // closeFilter={this.closeFilter}\r\n                                        // onFilterSubmit={this.onFilterSubmit}\r\n                                        // subFields={this.state.DynamicSampleColumns}                                                 \r\n                                        needMultiSelect={false}\r\n                                        needSingleSelect={true}\r\n                                        // subListName=\"columnlist\"\r\n                                        // jsonfield=\"jsondata\"\r\n                                        // showDynamicFields={true}\r\n                                        // showStatusBlink={true}\r\n                                        // filterParam={{\r\n                                        //     ...this.state.filterSampleParam,\r\n                                        //     childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" },\r\n                                        //     { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                                        // }}\r\n                                        // subFieldsLabel={false}\r\n                                        handlePageChange={this.handlePageChange}\r\n                                        skip={this.state.skip}\r\n                                        take={this.state.take}\r\n                                        needFilter={false}\r\n                                        hidePaging={false}\r\n                                        hideSearch={true}\r\n                                    />\r\n                                </div>\r\n                            </>\r\n                            : <></>\r\n                        }\r\n                    </>\r\n                    : screenName == \"IDS_CONTAINERS\" ?\r\n                        <>\r\n                            <div className=\"actions-stripe\">\r\n                                <div className=\"d-flex justify-content-end\">\r\n                                    <Nav.Link name=\"addsample\" className=\"add-txt-btn\"\r\n                                        hidden={this.state.userRoleControlRights.indexOf(moveId) === -1}\r\n                                        onClick={() => this.moveItem(this.props.Login.userInfo, this.props.Login.masterData, moveId)}\r\n                                    >\r\n                                        <FontAwesomeIcon icon={faPlus} /> { }\r\n                                        <FormattedMessage id=\"IDS_MOVE\" defaultMessage=\"Move\" />\r\n                                    </Nav.Link>\r\n                                </div>\r\n                            </div>\r\n                            <div className='toolbar-top-inner container-tab'>\r\n                                <TransactionListMasterJson\r\n                                    listMasterShowIcon={1}\r\n                                    clickIconGroup={false}\r\n                                    splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                    masterList={this.props.Login.masterData.containers || []}\r\n                                    selectedMaster={this.props.Login.masterData.selectedContainer || []}\r\n                                    primaryKeyField=\"id\"\r\n                                    filterColumnData={this.props.filterTransactionList}\r\n                                    getMasterDetail={this.props.getselectedContainer}\r\n                                    inputParam={{\r\n                                        ...this.props.Login.masterData\r\n                                    }}\r\n                                    selectionColorField=\"scolorhexcode\"\r\n                                    mainField={\"text\"}\r\n                                    showStatusLink={true}\r\n                                    showStatusName={true}\r\n                                    selectedListName=\"selectedContainer\"\r\n                                    listName=\"IDS_SAMPLE\"\r\n                                    needMultiSelect={false}\r\n                                    needSingleSelect={true}\r\n                                    subListName=\"columnlist\"\r\n                                    jsonfield=\"jsondata\"\r\n                                    showDynamicFields={true}\r\n                                    showStatusBlink={true}\r\n                                    handlePageChange={this.handlePageChange}\r\n                                    skip={this.state.skip}\r\n                                    take={this.state.take}\r\n                                    needFilter={false}\r\n                                    hidePaging={false}\r\n                                    hideSearch={true}\r\n\r\n                                />\r\n                            </div>\r\n                        </>\r\n                        : screenName == \"IDS_STORAGECONDITION\" ?\r\n                            <ProductList className=\"panel-main-content storage-tab\">\r\n                                {/* {this.props.Login.masterData.storageContainerCondition && this.props.Login.masterData.storageContainerCondition !== undefined ? */}\r\n                                <Card className=\"border-0\">\r\n                                    <Card.Header className=\"no-padding\">\r\n                                        <Card.Subtitle>\r\n                                            {/* <div className=\"d-inline\">\r\n                                                <Nav.Link name=\"editUser\" hidden={this.state.userRoleControlRights.indexOf(editContainerID) === -1}\r\n                                                    className=\"btn btn-circle outline-grey mr-2\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                    onClick={() => this.loadStorageCondition()}\r\n                                                >\r\n                                                    <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                </Nav.Link>\r\n                                            </div> */}\r\n                                            <div className=\"actions-stripe\">\r\n                                                <div className=\"d-flex justify-content-end\">\r\n                                                    <Nav.Link name=\"editContainer\" className=\"add-txt-btn\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(editContainerID) === -1}\r\n                                                        onClick={() => this.loadStorageCondition(editContainerID)}\r\n                                                    >\r\n                                                        {/* <FontAwesomeIcon icon={faPlus} /> { } */}\r\n                                                        <FormattedMessage id=\"IDS_STORAGECONDITION\" defaultMessage=\"Storage Condition\" />\r\n                                                    </Nav.Link>\r\n                                                </div>\r\n                                            </div>\r\n                                        </Card.Subtitle>\r\n                                    </Card.Header>\r\n                                    <Card.Body className=\"form-static-wrap no-padding\">\r\n                                        <Row>\r\n                                            <Col md={12}>\r\n                                                <FormGroup>\r\n                                                    <FormLabel>\r\n                                                        <FormattedMessage id=\"IDS_STORAGECONDITIONNAME\" />\r\n                                                    </FormLabel>\r\n                                                    <ReadOnlyText>\r\n                                                        {this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== null ?\r\n                                                            this.props.Login.masterData.storageContainer.sstorageconditionname === \"NA\" ? \"-\" : this.props.Login.masterData.storageContainer.sstorageconditionname\r\n                                                            : \"-\" || \"-\"}\r\n                                                    </ReadOnlyText>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col md={12}>\r\n                                                <FormGroup>\r\n                                                    <FormLabel>\r\n                                                        <FormattedMessage id=\"IDS_STORAGELOCATIONNAME\" />\r\n                                                    </FormLabel>\r\n                                                    <ReadOnlyText>\r\n                                                        {this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== null ?\r\n                                                            this.props.Login.masterData.storageContainer.sstorageconditionname === \"NA\" ? \"-\" : (this.props.Login.containerLocation && this.props.Login.containerLocation) : \"-\"}\r\n                                                    </ReadOnlyText>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                                {/* : \"\"} */}\r\n\r\n                            </ProductList>\r\n                            : \"\"\r\n            )\r\n        } else {\r\n            const masterData = {\r\n                ...this.props.Login.masterData, storageContainer: undefined,\r\n                containers: undefined, sampleStorageMaster: undefined\r\n            };\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    activeTabIndex: undefined,\r\n                    containerLocation: undefined,\r\n                    sampleTrayCode: undefined,\r\n                    containerCode: undefined,\r\n                    locationCode: undefined,\r\n                    masterData\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    changePropertyView = (index, event, tabClick) => {\r\n\r\n\r\n        let check = false;\r\n        if (tabClick === true) {\r\n            if ((index === 1 && this.state.selectedItem && this.state.selectedItem.containerlastnode === true) ||\r\n                (index === 2 && this.state.selectedItem && this.state.selectedItem.containerfirstnode === true) ||\r\n                (index === 3 && this.state.selectedItem && this.state.selectedItem.locationlastnode === true)) {\r\n                check = false;\r\n            } else {\r\n                check = true;\r\n            }           \r\n        }\r\n        \r\n        if (check === false) {\r\n            if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        activeTabIndex: this.state.activeTabIndex !== index ? index : 0 ? index : false\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPROPERITEM\" }));\r\n        }\r\n    }\r\n\r\n    changePropertyViewClose = (id) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                activeTabIndex: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onInputSwitchOnChange = (event) => {\r\n        if (event.target.name == \"PopupNav\") {\r\n            this.setState({\r\n                enablePropertyPopup: !this.state.enablePropertyPopup\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                enableAutoClick: !this.state.enableAutoClick\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.filterStorageCategory) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_STORAGECATEGORY\",\r\n                    \"value\": this.props.Login.masterData.selectedStorageCategoryName && this.props.Login.masterData.selectedStorageCategoryName !== null ? this.props.Login.masterData.selectedStorageCategoryName : \"NA\"\r\n                    // \"value\": this.props.Login.masterData.approvedSampleStorageLocation ? this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined ?\r\n                    //     this.props.Login.masterData.selectedStorageCategoryName : \"NA\" : \"NA\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        if (this.state.nfilterStorageCategory.value) {\r\n            let inputParam = {\r\n                inputData: {\r\n                    nstoragecategorycode: this.state.nfilterStorageCategory.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nfilterStorageCategory: this.state.nfilterStorageCategory\r\n\r\n                }\r\n            }\r\n            this.props.changeStorageCategoryFilterOnSampleMaster(inputParam, this.props.Login.masterData.filterStorageCategory);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_STORAGECATEGORYNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n\r\n    itemRender = (clickedItem) => {\r\n        let item = clickedItem.item;\r\n        if (!this.state.toggleAction) {\r\n            return (\r\n                <>\r\n                    {clickedItem.item ? (\r\n                        <span className={`normal-node\r\n                         ${clickedItem.item.editable ? \"active-node\" : \"\"}\r\n                         ${item.expanded ? \"expand-node\" : \"collapse-node\"}\r\n                         `}>\r\n                            {item.containerfirstnode ? <FontAwesomeIcon icon={faBoxOpen} /> :\r\n                                item.locationlastnode ? <FontAwesomeIcon icon={faLocationArrow} /> :\r\n                                    item.containerlastnode ? <FontAwesomeIcon icon={faBox} /> :\r\n                                        item.expanded ? <FontAwesomeIcon icon={faFolderOpen} /> : <FontAwesomeIcon icon={faFolder} />}\r\n                            {item.text}\r\n                        </span>\r\n                        // <ul className=\"list-inline mb-0\">\r\n                        // <li className=\"list-inline-item mr-3 \">{clickedItem.item.text}</li>\r\n                        // {clickedItem.item.editable ? (\r\n                        // <>\r\n                        // <li className=\"list-inline-item \">\r\n                        // <span\r\n                        // className=\"action-icon\"\r\n                        // onClick={(e) => this.setProperties(e, clickedItem)}\r\n                        // ></span>\r\n                        // </li>\r\n                        // </>\r\n                        // ) : null}\r\n                        // </ul>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    };\r\n\r\n    onItemClick = (event) => {\r\n        // if (this.state.selectedItemMove) {\r\n        //     this.state.selectedItemMove.selected = false;\r\n        // }\r\n\r\n        // event.item.selected = true;\r\n        // this.setState({\r\n        //     selectedItem: event.item\r\n        // })\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.editable === true) {\r\n                item.editable = false;\r\n            } else if (item.id === event.item.id) {\r\n                item.editable = true;\r\n            }\r\n            return item;\r\n        });\r\n        // newData.map((data) => {\r\n        //     this.clearSelected(data, event.item)\r\n        // })\r\n\r\n        let result = newData;\r\n        const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n        let itemText = \"\";\r\n        for (let i = 0; i < indices.length; i++) {\r\n            if (i === 0) {\r\n                result = result[0];\r\n            } else {\r\n                result = result.items[indices[i]];\r\n            }\r\n            itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n        }\r\n\r\n        this.setState({ treeData: newData, clickedItem: event.item, targetLocationHierarchy: itemText });\r\n    };\r\n    clearSelected(innerObj, selectedItem) {\r\n        // console.log(innerObj, selectedItem, \"aasd\")\r\n        if (innerObj.id == selectedItem.id) {\r\n            innerObj.selected = true;\r\n        } else {\r\n            innerObj.selected = false;\r\n        }\r\n        if (innerObj.items && innerObj.items.length > 0) {\r\n            innerObj.items.map((childObj) => {\r\n                this.clearSelected(childObj, selectedItem)\r\n            })\r\n        }\r\n        return innerObj\r\n    }\r\n    onExpandChange = (event) => {\r\n        event.item.expanded = !event.item.expanded;\r\n        this.forceUpdate();\r\n    };\r\n\r\n    onMoveClick = (saveType, formRef) => {\r\n        let inputParam = {};\r\n        let inputData = [];\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        if (this.state.activeTabIndex === 1) {\r\n\r\n            if (this.state.clickedItem && this.state.clickedItem.containerlastnode === true) {\r\n                if (this.state.clickedItem.id !== this.props.Login.sampleTrayCode) {\r\n\r\n                    let getSelectedSamples = \"\";\r\n\r\n                    this.props.Login.masterData.selectedSampleStorageMaster.forEach(data => {\r\n                        getSelectedSamples += \"'\" + data.ssamplearno + \"'\" + \",\"; //ssampletraycode\r\n                    });\r\n                    if (getSelectedSamples !== \"\") {\r\n                        getSelectedSamples = getSelectedSamples.slice(0, getSelectedSamples.length - 1);\r\n                    }\r\n                    inputParam = {\r\n                        selectedSamples: getSelectedSamples,//this.props.Login.masterData.selectedSampleStorageMaster,\r\n                        moveTargetTrayCode: this.state.clickedItem.id,\r\n                        nsamplestoragelocationcode: this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\r\n                        moveContainers: false,\r\n                        storageCategory: this.state.selectedRecord[\"nstoragecategorycode\"] && this.state.selectedRecord[\"nstoragecategorycode\"].value,\r\n                        methodUrl: \"SampleStorageMaster\",\r\n                        inputData: inputData,\r\n                        operation: \"move\",\r\n                        userinfo: this.props.Login.userInfo,\r\n                        sourceLocationHierarchy: this.props.Login.sampleLocation,\r\n                        targetLocationHierarchy: this.state.targetLocationHierarchy,\r\n                    }\r\n                    const masterData = this.props.Login.masterData;\r\n                    const selectedRecord = this.state.selectedRecord || {};\r\n\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, masterData, selectedRecord }, operation: \"move\", openChildModal: true,\r\n                                screenName: this.props.Login.inputParam.displayName\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    } else {\r\n                        this.props.moveItems(inputParam, this.props.Login.masterData);\r\n                    }\r\n                }\r\n            }else{\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPROPERITEM\" }));\r\n            }\r\n\r\n\r\n        } else if (this.state.activeTabIndex === 3) {\r\n\r\n            if (this.state.clickedItem && this.state.clickedItem.locationlastnode === true) {\r\n                if (this.state.clickedItem.id !== this.props.Login.locationCode) {\r\n\r\n                    let getSampleTray = \"\";\r\n                    let getContainerCode = \"\";\r\n                    let targetData = this.state.treeData || [];\r\n                    let sourceData = this.state.treeDataView || [];\r\n                    let newData = [];\r\n                    let sameLocation = true;\r\n                    let targetJsonData = {};\r\n                    let SourceJsonData = {};\r\n                    let selectedContainers = [];\r\n\r\n\r\n\r\n                    if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode === this.state.selectedRecord[\"nsamplestoragelocationcode\"].value) {\r\n                        this.props.Login.masterData.selectedContainer.forEach(data => {\r\n                            targetData = removeItems(targetData, \"items\", (item) => {\r\n                                return item.id === data.id;\r\n                            });\r\n                        })\r\n\r\n\r\n                        newData = mapTree(targetData, \"items\", (item) => {\r\n                            if (item.id === this.state.clickedItem.id) {\r\n                                item.items = item.items || [];\r\n                                item.items.push(...this.props.Login.masterData.selectedContainer);\r\n                            }\r\n                            if (item.expanded === false) {\r\n                                item.expanded = true;\r\n                            }\r\n                            if (item.selected && item.selected === true) {\r\n                                item.selected = false;\r\n                            }\r\n                            return item;\r\n                        });\r\n                        targetJsonData[\"data\"] = newData;\r\n                    } else {\r\n\r\n\r\n                        this.props.Login.masterData.selectedContainer.forEach(data => {\r\n                            sourceData = removeItems(sourceData, \"items\", (item) => {\r\n                                return item.id === data.id;\r\n                            });\r\n\r\n                            if (sourceData.length > 0) {\r\n                                sourceData = mapTree(sourceData, \"items\", (item) => {\r\n                                    if (item.selected && item.selected === true) {\r\n                                        item.selected = false;\r\n                                    }\r\n                                    return item;\r\n                                });\r\n                            }\r\n                        })\r\n\r\n\r\n                        newData = mapTree(targetData, \"items\", (item) => {\r\n                            if (item.id === this.state.clickedItem.id) {\r\n                                item.items = item.items || [];\r\n                                item.items.push(...this.props.Login.masterData.selectedContainer);\r\n                            }\r\n                            if (item.expanded === false) {\r\n                                item.expanded = true;\r\n                            }\r\n                            if (item.selected && item.selected === true) {\r\n                                item.selected = false;\r\n                            }\r\n                            return item;\r\n                        });\r\n                        SourceJsonData[\"data\"] = sourceData;\r\n                        targetJsonData[\"data\"] = newData;\r\n\r\n                        sameLocation = false;\r\n                    }\r\n\r\n                    this.props.Login.masterData.selectedContainer.forEach(data => {\r\n\r\n                        mapTree([data], \"items\", (item) => {\r\n                            if (item.containerlastnode === true) {\r\n                                getSampleTray += \"'\" + item.id + \"'\" + \",\";\r\n                            }\r\n                        });\r\n\r\n                        getContainerCode += \"'\" + data.id + \"'\" + \",\";\r\n                        selectedContainers.push({ scontainercode: data.id, text: data.text })\r\n                    })\r\n                    if (getSampleTray !== \"\") {\r\n                        getSampleTray = getSampleTray.slice(0, getSampleTray.length - 1);\r\n                    }\r\n                    if (getContainerCode !== \"\") {\r\n                        getContainerCode = getContainerCode.slice(0, getContainerCode.length - 1);\r\n                    }\r\n\r\n                    inputParam = {\r\n                        selectedSamples: getSampleTray,\r\n                        sourceLocationCode: this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\r\n                        sourceVersionCode: this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode,\r\n                        nsamplestoragelocationcode: this.state.selectedRecord[\"nsamplestoragelocationcode\"].item.nsamplestoragelocationcode,\r\n                        nsamplestorageversioncode: this.state.selectedRecord[\"nsamplestoragelocationcode\"].item.nsamplestorageversioncode,\r\n                        SourceJsonData: SourceJsonData,\r\n                        targetJsonData: targetJsonData,\r\n                        moveContainers: true,\r\n                        storageCategory: this.props.Login.masterData.selectedSampleStorageVersion.nstoragecategorycode,\r\n                        sameLocation,\r\n                        methodUrl: \"SampleStorageMaster\",\r\n                        inputData: inputData,\r\n                        operation: \"move\",\r\n                        userinfo: this.props.Login.userInfo,\r\n                        sourceLocationHierarchy: this.props.Login.locationText,\r\n                        targetLocationHierarchy: this.state.targetLocationHierarchy,\r\n                        selectedContainer: selectedContainers,\r\n                        getContainerCode: getContainerCode\r\n                    }\r\n                    // this.props.moveItems(inputParam, this.props.Login.masterData);\r\n\r\n                    const masterData = this.props.Login.masterData;\r\n                    const selectedRecord = this.state.selectedRecord || {};\r\n\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, masterData, selectedRecord }, operation: \"move\", openChildModal: true,\r\n                                screenName: this.props.Login.inputParam.displayName\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    } else {\r\n                        this.props.moveItems(inputParam, this.props.Login.masterData);\r\n                    }\r\n                }\r\n            }else{\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPROPERITEM\" }));\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        // let nfilterStorageCategory = this.state.nfilterStorageCategory && Object.keys(this.state.nfilterStorageCategory).length !== 0 ? this.state.nfilterStorageCategory.value : 0;\r\n        let nfilterStorageCategory = this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.nfilterStorageCategory;\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo, \"nstoragecategorycode\": nfilterStorageCategory },\r\n            classUrl: \"samplestoragemaster\",\r\n            methodUrl: \"SampleStorageMaster\",\r\n            displayName: \"IDS_SAMPLESTORAGEMASTER\",\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n        }\r\n        else if (event.target.type === 'select-one') {\r\n\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n\r\n\r\n    }\r\n    render() {\r\n\r\n        let mandatoryFields = [];\r\n\r\n        if (this.state.activeTabIndex === 1) {\r\n            mandatoryFields.push({ \"idsName\": \"IDS_SAMPLE\", \"dataField\": \"ssamplearno\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" });\r\n        } else if (this.state.activeTabIndex === 2) {\r\n            mandatoryFields.push({ \"idsName\": \"IDS_STORAGECONDITIONNAME\", \"dataField\": \"nstorageconditioncode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n        }\r\n\r\n        const filterParam = {\r\n            inputListName: \"approvedSampleStorageLocation\", selectedObject: \"selectedSampleStorageVersion\", primaryKeyField: \"nsamplestorageversioncode\",\r\n            fetchUrl: \"samplestoragelocation/getActiveSampleStorageVersion\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"ssamplestoragelocationname\"]\r\n        };\r\n\r\n        const breadCrumbData = this.state.filterData || [];\r\n\r\n        const confirmMessage = new ConfirmMessage();\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        : \"\"}\r\n                    <Row noGutters={true} className={`toolbar-top ${this.state.activeTabIndex ? 'active-property-bar' : \"\"}`}>\r\n                        <Col md={12}>\r\n                            <ListWrapper className={`vertical-tab-top grid-master ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`}>\r\n                                <div className={`tab-left-area ${this.state.activeTabIndex ? 'active' : \"\"}`}>\r\n                                    <ListMaster\r\n                                        formatMessage={this.props.intl.formatMessage}\r\n                                        screenName={this.props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGEMASTER\" })}\r\n                                        masterData={this.props.Login.masterData}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.approvedSampleStorageLocation}\r\n                                        getMasterDetail={(selectedItem) =>\r\n                                            this.props.getSelectedApprovedStorageVersion(\r\n                                                selectedItem, this.props.Login.userInfo,\r\n                                                this.props.Login.masterData\r\n                                            )}\r\n                                        selectedMaster={this.props.Login.masterData.selectedSampleStorageVersion}\r\n                                        primaryKeyField=\"nsamplestoragelocationcode\"\r\n                                        mainField=\"ssamplestoragelocationname\"\r\n                                        // firstField=\"sversionno\"\r\n                                        // secondField=\"stransdisplaystatus\"\r\n                                        filterColumnData={this.props.filterColumnData}\r\n                                        filterParam={filterParam}\r\n                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                        hideAddButton={true}\r\n                                        // addId={addId}\r\n                                        searchRef={this.searchRef}\r\n                                        reloadData={this.reloadData}\r\n                                        hidePaging={false}\r\n                                        // openModal={() => this.props.getDesignTemplateMappingComboService(addParam)}\r\n                                        showFilterIcon={true}\r\n                                        showFilter={this.props.Login.showFilter}\r\n                                        openFilter={this.openFilter}\r\n                                        closeFilter={this.closeFilter}\r\n                                        onFilterSubmit={this.onFilterSubmit}\r\n                                        filterComponent={[\r\n                                            {\r\n                                                \"IDS_STORAGEFILTER\":\r\n                                                    <StorageCategoryFilter\r\n                                                        filterStorageCategory={this.state.filterStorageCategory || []}\r\n                                                        nfilterStorageCategory={this.state.nfilterStorageCategory || {}}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                    />\r\n                                            }\r\n                                        ]}\r\n                                    />\r\n\r\n                                </div>\r\n                                <div className='tree-view-container'>\r\n                                    {this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined ?\r\n                                        <TreeViewEditable\r\n                                            id=\"samplestoragelocation\"\r\n                                            name=\"samplestoragelocation\"\r\n                                            // label=\"Sample Storage Location\"\r\n                                            data={this.state.treeDataView}\r\n                                            expandIcons={true}\r\n                                            item={this.itemRenderView}\r\n                                            selectField={'active-node'}\r\n                                            onExpandChange={this.onExpandChangeView}\r\n                                            onItemClick={this.onItemClickView}\r\n                                        />\r\n                                        :\r\n                                        <></>\r\n                                    }\r\n                                </div>\r\n                                <div className={`${this.state.enablePropertyPopup ? 'active-popup' : \"\"} xs-grid-container vertical-tab ${this.state.activeTabIndex ? 'active' : \"\"}`} >\r\n                                    <div className={`${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${this.state.activeTabIndex ? 'active' : \"\"}`} style={{ width: this.state.enablePropertyPopup ? this.state.propertyPopupWidth + '%' : \"\" }}>\r\n                                        <span className={` vertical-tab-close ${this.state.activeTabIndex ? 'active' : \"\"}`} onClick={() => this.changePropertyViewClose(false)}><FontAwesomeIcon icon={faChevronRight} /> </span>\r\n                                        <div className={` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex === 1 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4 no-margin'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_SAMPLEDETAILS\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex === 1 ? this.sideNavDetail(\"IDS_SAMPLEDETAILS\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex === 2 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4 no-margin'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_STORAGECONDITION\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex === 2 ? this.sideNavDetail(\"IDS_STORAGECONDITION\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex === 3 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4 no-margin'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_CONTAINERS\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex === 3 ? this.sideNavDetail(\"IDS_CONTAINERS\") : \"\"}\r\n                                        </div>\r\n\r\n\r\n                                    </div>\r\n                                    <div className='tab-head'>\r\n                                        <ul>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex === 1 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(1, undefined, true)}>\r\n                                                <FontAwesomeIcon icon={faEye} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_SAMPLEDETAILS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex === 2 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(2, undefined, true)}>\r\n                                                <FontAwesomeIcon icon={faLink} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_STORAGECONDITION\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex === 3 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(3, undefined, true)}>\r\n                                                <FontAwesomeIcon icon={faComments} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_CONTAINERS\" })}\r\n                                                </span>\r\n                                            </li>\r\n\r\n                                        </ul>\r\n                                        {/* <span className='tab-click-toggle-btn'>\r\n                                            <CustomSwitch\r\n                                                label={\"Auto Show\"}\r\n                                                type=\"switch\"\r\n                                                name={\"Auto Click\"}\r\n                                                onChange={(event) => this.onInputSwitchOnChange(event)}\r\n                                                defaultValue={this.state.enableAutoClick}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                checked={this.state.enableAutoClick}\r\n                                            />\r\n                                        </span> */}\r\n                                        {/* <span className='tab-click-toggle-btn'>\r\n                                            <CustomSwitch\r\n                                                label={\"Popup Nav\"}\r\n                                                type=\"switch\"\r\n                                                name={\"PopupNav\"}\r\n                                                onChange={(event) => this.onInputSwitchOnChange(event)}\r\n                                                defaultValue={this.state.enablePropertyPopup}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                checked={this.state.enablePropertyPopup}\r\n                                            />\r\n                                        </span> */}\r\n                                    </div>\r\n                                </div>\r\n                            </ListWrapper>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.intl.formatMessage({ id: this.state.activeTabIndex && this.state.activeTabIndex === 1 ? \"IDS_SAMPLE\" : \"IDS_STORAGECONDITIONNAME\" })}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        showSaveContinue={this.props.Login.loadEsign ? false : this.state.activeTabIndex && this.state.activeTabIndex === 1 ? true : false}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            this.state.activeTabIndex && this.state.activeTabIndex === 1 ? (\r\n                                <AddSample\r\n                                    onInputChange={(e) => this.onInputChange(e)}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onKeyUp={(e) => this.onKeyUp(e)}\r\n                                />\r\n                            ) : this.state.activeTabIndex && this.state.activeTabIndex === 2 ? (\r\n                                <AddContainerStorageCondition\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onComboChange={this.onComboChange}\r\n                                    storageCondition={this.props.Login.masterData.storageCondition || []}\r\n                                />\r\n                            ) : (\r\n                                <></>\r\n                            )\r\n                        }\r\n                    />\r\n                }\r\n\r\n                {this.props.Login.openChildModal &&\r\n                    <SlideOutModal show={this.props.Login.openChildModal}\r\n                        closeModal={this.closeChildModal}\r\n                        operation={this.props.intl.formatMessage({ id: \"IDS_MOVE\" })}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.intl.formatMessage({ id: this.state.activeTabIndex && this.state.activeTabIndex == 1 ? \"IDS_SAMPLE\" : \"IDS_CONTAINERS\" })}\r\n                        onSaveClick={this.onMoveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            <MoveSampleOrContainers\r\n                                treeData={this.state.treeData}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                itemRender={this.itemRender}\r\n                                onExpandChange={this.onExpandChange}\r\n                                onItemClick={this.onItemClick}\r\n                                onComboChange={this.onComboChange}\r\n                                storageCategory={this.props.Login.masterData.storageCategory || []}\r\n                                approvedLocation={this.props.Login.masterData.approvedLocation || []}\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n\r\n        }\r\n        if (this.state.activeTabIndex === 1 && this.props.Login.operation === \"create\") {\r\n\r\n            this.props.validateEsignCredentialSampleStorageMaster(inputParam);\r\n        } else if (this.props.Login.operation === \"move\") {\r\n            this.props.validateEsignCredentialSampleStorageMaster(inputParam);\r\n        } else {\r\n            this.props.validateEsignCredential(inputParam, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential, getSampleMaster, filterColumnData,\r\n    getSelectedSampleStorageLocation, openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation,\r\n    getSelectedSampleStorageVersion, getContainerStorageCondition, getStorageConditionFromMaster, getSampleMasterDetails,\r\n    getContainers, getselectedContainer, changeStorageCategoryFilterOnSampleMaster, openSampleStorageApprovedLocation,\r\n    loadApprovedLocationOnCombo, loadApprovedLocationOnTreeData, moveItems, saveSampleStorageMaster, getSelectedApprovedStorageVersion,\r\n    validateEsignCredentialSampleStorageMaster\r\n})(injectIntl(SampleStorageMaster));"]},"metadata":{},"sourceType":"module"}