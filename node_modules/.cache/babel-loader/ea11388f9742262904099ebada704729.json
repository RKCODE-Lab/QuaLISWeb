{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\flextransaction\\\\FlexTransaction.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col, Button, Card } from 'react-bootstrap';\nimport { callService, filterTransactionList, getTransactionDetail, getFilterTransactionDetailsRecords, updateStore, ViewTransactionDetails, getexportdata } from '../../actions';\nimport { constructOptionList, convertDateValuetoString, getControlMap, rearrangeDateFormat, getStartOfDay, getEndOfDay } from '../../components/CommonScript';\nimport FlexTransactionFilter from './FlexTransactionFilter';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport SplitterLayout from 'react-splitter-layout';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { ContentPanel } from '../../components/App.styles';\nimport TransactionListMaster from '../../components/TransactionListMaster';\nimport { ReactComponent as RefreshIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/refresh.svg\";\nimport { ProductList } from '../product/product.styled';\nimport { process } from '@progress/kendo-data-query';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { toast } from 'react-toastify';\n\nclass FlexTransaction extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      if (this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1) {\n        this.setState({\n          dataResult: process(this.props.Login.masterData.TransactionDetails || [], event.dataState),\n          dataStateAll: event.dataState,\n          kendoSkip: event.dataState.skip,\n          kendoTake: event.dataState.skip\n        });\n      } else {\n        let data = [];\n\n        if (event.dataState.filter === null && event.dataState.sort === null) {\n          let auditdata = this.props.Login.masterData.TransactionDetails && this.props.Login.masterData.TransactionDetails.slice(0, event.dataState.take + event.dataState.skip) || [];\n          data = process(auditdata || [], event.dataState);\n        } else {\n          data = process(this.props.Login.masterData.TransactionDetails || [], event.dataState);\n        }\n\n        this.setState({\n          dataResult: data,\n          dataState: event.dataState\n        });\n      }\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.dataStateAuditView = event => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          viewTransDetailsDataState: event.dataState\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let openModal = this.props.Login.openModal;\n      openModal = false;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          viewTransDetailsDataState: {\n            skip: 0,\n            take: 50\n          },\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.ViewTransactionDetails = details => {\n      const screenName = this.props.intl.formatMessage({\n        id: 'IDS_TRANSACTIONVIEWDETAILS'\n      });\n      this.props.ViewTransactionDetails(this.props.Login.masterData, this.props.Login.userInfo, details, screenName);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData != null) {\n        if (fieldName === \"ntransfiltercode\" || fieldName === \"nauditactionfiltercode\") {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        }\n      } else {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.expandChange = event => {\n      event.dataItem[event.target.props.expandField] = event.value;\n      this.setState({\n        dataResult: process(this.props.Login.masterData.TransactionDetails || [], this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll : this.state.dataState),\n        dataState: this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll : this.state.dataState\n      });\n    };\n\n    this.exportExcelNew = () => {\n      let fromDate = this.props.Login.masterData.FromDate;\n      let toDate = this.props.Login.masterData.ToDate;\n      let dataField = {};\n      [...this.extractedColumnList].map(item => {\n        dataField[item.dataField] = this.props.intl.formatMessage({\n          id: item.idsName\n        });\n      });\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n      let inputData = {\n        fromDate: obj.fromDate,\n        toDate: obj.toDate,\n        viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : 0,\n        userinfo: this.props.Login.userInfo,\n        sregistereddate: this.props.Login.masterData.SelectedTransactionDate.sregistereddate,\n        nformcode: this.props.Login.userInfo.nformcode,\n        dataField\n      };\n      let inputParam = {\n        inputData\n      };\n      this.props.getexportdata(inputParam);\n    };\n\n    this.onFilterSubmit = () => {\n      let breadCrumbFrom = this.state.selectedRecord[\"fromdate\"] ? getStartOfDay(this.state.selectedRecord[\"fromdate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      let breadCrumbTo = this.state.selectedRecord[\"todate\"] ? getEndOfDay(this.state.selectedRecord[\"todate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n      let validateFromDate = this.state.selectedRecord[\"fromdate\"] ? this.state.selectedRecord[\"fromdate\"] : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      let validateToDate = this.state.selectedRecord[\"todate\"] ? this.state.selectedRecord[\"todate\"] : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n      let breadCrumbTransaDetails = this.state.selectedRecord['ntransfiltercode'];\n      let breadCrumbViewType = this.state.selectedRecord['nauditactionfiltercode'];\n      const diffInMilliseconds = Math.abs(validateToDate - validateFromDate);\n      const days = Math.ceil(diffInMilliseconds / (1000 * 60 * 60 * 24));\n      const diffYear = validateToDate.getFullYear() - validateFromDate.getFullYear();\n      const diffMonth = validateToDate.getMonth() - validateFromDate.getMonth();\n      const monthss = diffYear * 12 + diffMonth;\n\n      if (this.state.selectedRecord[\"nauditactionfiltercode\"].value !== 1 || this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 && monthss <= 12 && (days <= 365 || days <= 366)) {\n        let masterData = { ...this.props.Login.masterData,\n          breadCrumbFrom,\n          breadCrumbTo,\n          breadCrumbTransaDetails,\n          breadCrumbViewType\n        };\n        let fromDate = this.state.selectedRecord[\"fromdate\"] ? this.state.selectedRecord[\"fromdate\"] : this.props.Login.masterData.FromDate;\n        let toDate = this.state.selectedRecord[\"todate\"] ? this.state.selectedRecord[\"todate\"] : this.props.Login.masterData.ToDate;\n        let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n        let inputData = {\n          fromDate: obj.fromDate,\n          toDate: obj.toDate,\n          transFilterType: this.state.selectedRecord[\"ntransfiltercode\"] ? this.state.selectedRecord[\"ntransfiltercode\"].value : 0,\n          viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : -1,\n          userinfo: this.props.Login.userInfo,\n          postParamList: this.filterParam\n        };\n        let inputParam = {\n          masterData,\n          inputData,\n          searchRef: this.searchRef,\n          detailSkip: this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll.skip : this.state.dataState.skip\n        };\n        this.props.getFilterTransactionDetailsRecords(inputParam);\n      } else {\n        let selectedRecord = this.state.selectedRecord;\n        selectedRecord['fromdate'] = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n        selectedRecord['toDate'] = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n        selectedRecord['nauditactionfiltercode'] = this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType : {\n          item: this.props.Login.masterData.viewFilterType,\n          label: this.props.Login.masterData.viewFilterType.sauditactionfiltername,\n          value: this.props.Login.masterData.viewFilterType.nauditactionfiltercode\n        };\n        selectedRecord['ntransfiltercode'] = this.props.Login.masterData.breadCrumbTransaDetails ? this.props.Login.masterData.breadCrumbTransaDetails : {\n          item: this.props.Login.masterData.transFilterType,\n          label: this.props.Login.masterData.transFilterType.sdisplayname,\n          value: this.props.Login.masterData.transFilterType.ntransfiltertypecode\n        };\n        this.setState({\n          selectedRecord\n        });\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_DATERANGESHOULDEMAXONEYEAR\"\n        }));\n      }\n    };\n\n    this.onReload = () => {\n      let breadCrumbFrom = this.state.selectedRecord[\"fromdate\"] ? getStartOfDay(this.state.selectedRecord[\"fromdate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      let breadCrumbTo = this.state.selectedRecord[\"todate\"] ? getEndOfDay(this.state.selectedRecord[\"todate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n      let breadCrumbTransaDetails = this.state.selectedRecord['ntransfiltercode'];\n      let breadCrumbViewType = this.state.selectedRecord['nauditactionfiltercode'];\n      let fromDate = this.props.Login.masterData.FromDate;\n      let toDate = this.props.Login.masterData.ToDate;\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n      let inputData = {\n        fromDate: obj.fromDate,\n        toDate: obj.toDate,\n        transFilterType: this.state.selectedRecord[\"ntransfiltercode\"] ? this.state.selectedRecord[\"ntransfiltercode\"].value : 0,\n        viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : -1,\n        userinfo: this.props.Login.userInfo,\n        postParamList: this.filterParam\n      };\n      let masterData = { ...this.props.Login.masterData,\n        breadCrumbFrom,\n        breadCrumbTo,\n        breadCrumbTransaDetails,\n        breadCrumbViewType\n      };\n      let inputParam = {\n        masterData,\n        inputData,\n        searchRef: this.searchRef,\n        detailSkip: this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll.skip : this.state.dataState.skip\n      };\n      this.props.getFilterTransactionDetailsRecords(inputParam);\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.paneSizeChange = eve => {\n      this.setState({\n        splitChangeWidthPercentage: eve\n      });\n    };\n\n    this.breadcrumbList = () => {\n      let breadCrumbArray = [];\n      let fromDate = this.props.Login.masterData.FromDate ? this.props.Login.masterData.FromDate : this.props.Login.masterData.breadCrumbFrom;\n      let toDate = this.props.Login.masterData.ToDate ? this.props.Login.masterData.ToDate : this.props.Login.masterData.breadCrumbTo;\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n      breadCrumbArray.push({\n        \"label\": \"IDS_FROM\",\n        \"value\": obj.breadCrumbFrom\n      }, {\n        \"label\": \"IDS_TO\",\n        \"value\": obj.breadCrumbto\n      }); // breadCrumbArray.push(\n      //     {\n      //         \"label\": \"IDS_RECORDTODISPLAY\",\n      //         \"value\": this.props.Login.masterData.breadCrumbTransaDetails ? this.props.Login.masterData.breadCrumbTransaDetails.label :\n      //             this.props.Login.masterData.transFilterType ? this.props.Login.masterData.transFilterType.sdisplayname : \"\"\n      //     });\n\n      breadCrumbArray.push({\n        \"label\": \"IDS_VIEWPERIOD\",\n        \"value\": this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType.label : this.props.Login.masterData.viewFilterType ? this.props.Login.masterData.viewFilterType.sauditactionfiltername : \"\"\n      });\n      return breadCrumbArray;\n    };\n\n    this.myRef = React.createRef();\n    this.searchFieldList = [\"sregisteredtransactiondate\"];\n    this.searchTransactionRef = React.createRef();\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[16]) : 5\n    };\n    const dataStateAll = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[16]) : 5\n    };\n    this.state = {\n      viewTransDetailsDataState: {\n        skip: 0,\n        take: 10\n      },\n      splitChangeWidthPercentage: 30,\n      dataState: dataState,\n      dataStateAll: dataStateAll,\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      kendoSkip: 0,\n      kendoTake: this.props.Login.settings ? parseInt(this.props.Login.settings[16]) : 5,\n      controlMap: new Map(),\n      userRoleControlRights: [],\n      gridHeight: 'auto'\n    };\n    this.searchRef = React.createRef();\n  }\n\n  render() {\n    //const ViewTransactionDetails = this.state.controlMap.has(\"ViewTansactionDetails\") && this.state.controlMap.get(\"ViewTansactionDetails\").ncontrolcode;\n    this.breadCrumbData = this.breadcrumbList();\n    let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n    let fromDate = \"\";\n    let toDate = \"\";\n\n    if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\n      fromDate = this.state.selectedRecord && this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      toDate = this.state.selectedRecord && this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n    }\n\n    let inputParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      skip: this.state.skip,\n      take: this.state.take,\n      fromDate: obj.fromDate,\n      toDate: obj.toDate,\n      viewTypecode: this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType.value : this.props.Login.masterData.viewFilterType ? this.props.Login.masterData.viewFilterType.nauditactionfiltercode : 0,\n      transFilterType: this.props.Login.masterData.breadCrumbTransaDetails ? this.props.Login.masterData.breadCrumbTransaDetails.value : this.props.Login.masterData.transFilterType ? this.props.Login.masterData.transFilterType.ntransdetailsfiltercode : 0\n    };\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_LABREGDATE\",\n      \"dataField\": \"sregistereddate\",\n      \"width\": \"200px\",\n      \"componentName\": \"date\"\n    }, {\n      \"idsName\": \"IDS_LAB\",\n      \"dataField\": \"slabname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PLANT\",\n      \"dataField\": \"splantname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_LABREGNO\",\n      \"dataField\": \"slabregno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_EXTERNALREFNO\",\n      \"dataField\": \"sexternalrefcode\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SAMPLE\",\n      \"dataField\": \"ssamplename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_BATCHNO\",\n      \"dataField\": \"sbatchno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_LOTNO\",\n      \"dataField\": \"slotno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_TEST\",\n      \"dataField\": \"stestname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PARAMETER\",\n      \"dataField\": \"sparametername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_RESULTVALUE\",\n      \"dataField\": \"sfinal\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_RESULTSTATUS\",\n      \"dataField\": \"resultstatus\",\n      \"width\": \"200px\"\n    }];\n    this.feildsForGrid = [{\n      \"idsName\": \"IDS_FIELDNAME\",\n      \"dataField\": \"sfieldname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_VALUE\",\n      \"dataField\": \"svalue\",\n      \"width\": \"100px\"\n    }];\n    this.filterParam = {\n      inputListName: \"TransactionDate\",\n      selectedObject: \"SelectedTransactionDate\",\n      primaryKeyField: \"sregistereddate\",\n      fetchUrl: \"flextransaction/getTrendChartDate\",\n      masterData: this.props.Login.masterData,\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        fromDate: obj.fromDate,\n        toDate: obj.toDate,\n        viewTypecode: this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType.value : this.props.Login.masterData.viewFilterType ? this.props.Login.masterData.viewFilterType.nauditactionfiltercode : 0,\n        transFilterType: this.props.Login.masterData.breadCrumbTransaDetails ? this.props.Login.masterData.breadCrumbTransaDetails.value : this.props.Login.masterData.transFilterType ? this.props.Login.masterData.transFilterType.ntransdetailsfiltercode : 0\n      },\n      filteredListName: \"searchedTransactionDate\",\n      clearFilter: \"no\",\n      updatedListname: \"SelectedTransactionDate\",\n      searchRef: this.searchTransactionRef,\n      searchFieldList: this.searchFieldList,\n      unchangeList: [\"viewFilterTypeList\", \"transFilterTypeList\"],\n      changeList: [\"TransactionDetails\"]\n    };\n    this.postParamList = [{\n      filteredListName: \"searchedTransactionDate\",\n      clearFilter: \"no\",\n      searchRef: this.searchRef,\n      primaryKeyField: \"sregistereddate\",\n      fetchUrl: \"audittrail/getFilterTransactionDetailsRecords\",\n      fecthInputObject: this.filterParam,\n      selectedObject: \"SelectedTransactionDate\",\n      inputListName: \"TransactionDate\",\n      updatedListname: \"SelectedTransactionDate\",\n      unchangeList: [\"viewFilterTypeList\", \"transFilterTypeList\"]\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mtop-fixed-breadcrumb client-listing-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height sticky_head_parent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster, {\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      masterList: this.props.Login.masterData.searchedTransactionDetails || this.props.Login.masterData.TransactionDate || [],\n      selectedMaster: [this.props.Login.masterData.SelectedTransactionDate],\n      primaryKeyField: \"sregistereddate\",\n      inputParam: inputParam,\n      mainField: \"sregisteredtransactiondate\",\n      selectedListName: \"SelectedTransactionDate\",\n      filterColumnData: this.props.filterTransactionList,\n      getMasterDetail: this.props.getTransactionDetail,\n      searchListName: \"searchedTransactionDetails\",\n      searchRef: this.searchRef,\n      filterParam: this.filterParam,\n      objectName: \"transactionDetails\",\n      listName: \"IDS_TRANSACTIONDETAILS\",\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take,\n      needFilter: true,\n      needAccordianFilter: false,\n      filterComponent: [{\n        \"IDS_TRANSACTIONDETAILS\": /*#__PURE__*/React.createElement(FlexTransactionFilter, {\n          selectedRecord: this.state.selectedRecord || {},\n          filterViewType: this.state.viewFilterTypeList,\n          transfilterViewType: this.state.transFilterTypeList,\n          handleDateChange: this.handleDateChange,\n          fromDate: fromDate,\n          toDate: toDate,\n          userInfo: this.props.Login.userInfo,\n          onComboChange: this.onComboChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 49\n          }\n        })\n      }],\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2 p-0\",\n        variant: \"link\",\n        onClick: () => this.onReload(),\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(RefreshIcon, {\n        className: \"custom_icons\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 49\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.myRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 37\n      }\n    }, this.props.Login.masterData.SelectedTransactionDate && this.props.Login.masterData.SelectedTransactionDate !== undefined ? /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap padding-class\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      selectedId: this.props.Login.selectedId,\n      gridHeight: this.state.gridHeight + 'px',\n      expandField: \"expanded\",\n      userRoleControlRights: this.state.userRoleControlRights && this.state.userRoleControlRights,\n      pageable: true,\n      pageSizes: this.props.Login.settings && this.props.Login.settings[17].split(\",\").map(setting => parseInt(setting)),\n      scrollable: \"scrollable\",\n      primaryKeyField: \"ntransactionsampleresultno\",\n      data: this.props.Login.masterData.TransactionDetails || [],\n      dataResult: this.state.dataResult,\n      dataState: this.state.selectedRecord && this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll : this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList || [],\n      controlMap: this.state.controlMap,\n      methodUrl: \"AuditTrail\",\n      groupable: this.state.selectedRecord && this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? true : false : false //isActionRequired={false}\n      ,\n      isToolBarRequired: true,\n      isAddRequired: false,\n      isRefreshRequired: false,\n      isDownloadPDFRequired: false,\n      isDownloadExcelRequired: true,\n      isExportExcelRequired: true,\n      isIdsField: \"yes\",\n      isActionRequired: false // actionIcons={[{\n      //     title: this.props.intl.formatMessage({ id: \"IDS_VIEWCHANGES\" }),\n      //     controlname: \"faEye\",\n      //     objectName: \"TransactionDetails\",\n      //     hidden: this.state.userRoleControlRights.indexOf(ViewTransactionDetails) === -1,\n      //     onClick: (TransactionDetails) => this.ViewTransactionDetails(TransactionDetails)\n      // }]}\n      ,\n      exportExcelNew: this.exportExcelNew,\n      onExpandChange: this.expandChange,\n      hideDetailBand: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 57\n      }\n    })))) : \"\")))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      hideSave: true,\n      addComponent: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"ntransactionsampleresultno\",\n        detailedFieldList: this.feildsForGrid,\n        extractedColumnList: this.feildsForGrid,\n        dataResult: this.props.Login.masterData[\"ViewTransactionDetails\"] && this.props.Login.masterData[\"ViewTransactionDetails\"].length > 0 && process(this.props.Login.masterData[\"ViewTransactionDetails\"], this.props.Login.viewTransDetailsDataState ? this.props.Login.viewTransDetailsDataState : {\n          skip: 0,\n          take: 50\n        }),\n        dataState: this.props.Login.screenName === undefined || this.props.Login.screenName === this.props.intl.formatMessage({\n          id: 'IDS_TRANSACTIONVIEWDETAILS'\n        }) ? this.props.Login.viewTransDetailsDataState ? this.props.Login.viewTransDetailsDataState : {\n          skip: 0,\n          take: 50\n        } : {\n          skip: 0,\n          take: 50\n        },\n        dataStateChange: event => this.dataStateAuditView(event),\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        pageable: true,\n        pageSizes: this.props.Login.settings && this.props.Login.settings[17].split(\",\").map(setting => parseInt(setting)),\n        scrollable: 'scrollable',\n        gridHeight: '600px',\n        hideColumnFilter: true,\n        selectedId: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 33\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidMount() {\n    if (this.myRef.current.offsetParent.clientHeight !== this.state.gridHeight) {\n      this.setState({\n        gridHeight: this.myRef.current.offsetParent.clientHeight\n      });\n    }\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      selectedRecord,\n      viewFilterTypeList,\n      dataStateAll,\n      dataState,\n      dataResult,\n      skip,\n      take,\n      transFilterTypeList\n    } = this.state;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      updateState = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.masterData.viewFilterType !== previousProps.Login.masterData.viewFilterType) {\n      updateState = true;\n      const viewTypeAMap = constructOptionList(this.props.Login.masterData.viewFilterTypeList || [], \"nauditactionfiltercode\", \"sauditactionfiltername\", \"nsorter\", \"ascending\", false);\n      const viewFilterTypeLists = viewTypeAMap.get(\"OptionList\");\n      viewFilterTypeList = viewFilterTypeLists;\n      selectedRecord = {\n        nauditactionfiltercode: viewFilterTypeLists.length > 0 ? {\n          \"value\": viewFilterTypeLists[0].item.nauditactionfiltercode,\n          \"label\": viewFilterTypeLists[0].item.sauditactionfiltername\n        } : this.state.selectedRecord[\"nauditactionfiltercode\"]\n      };\n    }\n\n    if (this.props.Login.masterData.transFilterTypeList !== previousProps.Login.masterData.transFilterTypeList) {\n      updateState = true;\n      const transTypeAMap = constructOptionList(this.props.Login.masterData.transFilterTypeList || [], \"ntransdetailsfiltercode\", \"sdisplayname\", \"nsorter\", \"ascending\", false);\n      const transFilterTypeLists = transTypeAMap.get(\"OptionList\");\n      transFilterTypeList = transFilterTypeLists;\n      selectedRecord = { ...selectedRecord,\n        ntransfiltercode: transFilterTypeLists.length > 0 ? {\n          \"value\": transFilterTypeLists[0].item.ntransdetailsfiltercode,\n          \"label\": transFilterTypeLists[0].item.sdisplayname\n        } : this.state.selectedRecord[\"ntransfiltercode\"]\n      };\n    }\n\n    if (this.props.Login.resetDataGridPage && this.props.Login.resetDataGridPage !== previousProps.Login.resetDataGridPage) {\n      if (this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1) {\n        dataStateAll.skip = 0;\n        updateState = true;\n      } else {\n        dataState.skip = 0;\n        updateState = true;\n      }\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      updateState = true;\n\n      if (this.state.selectedRecord && this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1) {\n        dataStateAll = {\n          skip: 0,\n          take: dataStateAll.take\n        };\n        updateState = true;\n      } else {\n        dataState = {\n          skip: 0,\n          take: dataState.take\n        };\n        updateState = true;\n      }\n\n      const transactionDetailsDate = this.props.Login.masterData.TransactionDetails && this.props.Login.masterData.TransactionDetails.slice(dataState.skip, this.props.Login.masterData.TransactionDetails.length) || [];\n      dataResult = process(transactionDetailsDate || [], dataState);\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      updateState = true;\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        data: this.props.Login.masterData.ControlRights\n      });\n    }\n\n    if (updateState) {\n      this.setState({\n        selectedRecord,\n        viewFilterTypeList,\n        dataStateAll,\n        dataState,\n        dataResult,\n        skip,\n        take,\n        transFilterTypeList\n      });\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  filterTransactionList,\n  getTransactionDetail,\n  getFilterTransactionDetailsRecords,\n  updateStore,\n  ViewTransactionDetails,\n  getexportdata\n})(injectIntl(FlexTransaction));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/flextransaction/FlexTransaction.jsx"],"names":["React","connect","injectIntl","Row","Col","Button","Card","callService","filterTransactionList","getTransactionDetail","getFilterTransactionDetailsRecords","updateStore","ViewTransactionDetails","getexportdata","constructOptionList","convertDateValuetoString","getControlMap","rearrangeDateFormat","getStartOfDay","getEndOfDay","FlexTransactionFilter","BreadcrumbComponent","SplitterLayout","DataGrid","SlideOutModal","PerfectScrollbar","ContentPanel","TransactionListMaster","ProductList","process","DEFAULT_RETURN","toast","FlexTransaction","Component","constructor","props","dataStateChange","event","state","selectedRecord","value","setState","dataResult","Login","masterData","TransactionDetails","dataState","dataStateAll","kendoSkip","skip","kendoTake","data","filter","sort","auditdata","slice","take","handlePageChange","e","dataStateAuditView","updateInfo","typeName","viewTransDetailsDataState","closeModal","openModal","selectedId","details","screenName","intl","formatMessage","id","userInfo","onComboChange","comboData","fieldName","expandChange","dataItem","target","expandField","exportExcelNew","fromDate","FromDate","toDate","ToDate","dataField","extractedColumnList","map","item","idsName","obj","inputData","viewtypecode","userinfo","sregistereddate","SelectedTransactionDate","nformcode","inputParam","onFilterSubmit","breadCrumbFrom","breadCrumbTo","validateFromDate","validateToDate","breadCrumbTransaDetails","breadCrumbViewType","diffInMilliseconds","Math","abs","days","ceil","diffYear","getFullYear","diffMonth","getMonth","monthss","transFilterType","postParamList","filterParam","searchRef","detailSkip","viewFilterType","label","sauditactionfiltername","nauditactionfiltercode","sdisplayname","ntransfiltertypecode","warn","onReload","handleDateChange","dateName","dateValue","paneSizeChange","eve","splitChangeWidthPercentage","breadcrumbList","breadCrumbArray","push","breadCrumbto","myRef","createRef","searchFieldList","searchTransactionRef","settings","parseInt","controlMap","Map","userRoleControlRights","gridHeight","render","breadCrumbData","viewTypecode","ntransdetailsfiltercode","feildsForGrid","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","filteredListName","clearFilter","updatedListname","unchangeList","changeList","searchedTransactionDetails","TransactionDate","showFilter","openFilter","closeFilter","viewFilterTypeList","transFilterTypeList","undefined","split","setting","length","componentDidMount","current","offsetParent","clientHeight","componentDidUpdate","previousProps","updateState","viewTypeAMap","viewFilterTypeLists","get","transTypeAMap","transFilterTypeLists","ntransfiltercode","resetDataGridPage","transactionDetailsDate","Object","values","ncontrolcode","ControlRights","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col, Button, Card } from 'react-bootstrap';\r\nimport { callService, filterTransactionList, getTransactionDetail, getFilterTransactionDetailsRecords, updateStore, ViewTransactionDetails, getexportdata } from '../../actions';\r\nimport { constructOptionList, convertDateValuetoString, getControlMap, rearrangeDateFormat, getStartOfDay, getEndOfDay } from '../../components/CommonScript';\r\nimport FlexTransactionFilter from './FlexTransactionFilter';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { ContentPanel } from '../../components/App.styles';\r\nimport TransactionListMaster from '../../components/TransactionListMaster';\r\nimport { ReactComponent as RefreshIcon } from '../../assets/image/refresh.svg';\r\nimport { ProductList } from '../product/product.styled';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { toast } from 'react-toastify';\r\n\r\nclass FlexTransaction extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.myRef = React.createRef();\r\n        this.searchFieldList = [\"sregisteredtransactiondate\"]\r\n        this.searchTransactionRef = React.createRef();\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[16]) : 5,\r\n        };\r\n        const dataStateAll = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[16]) : 5\r\n        };\r\n\r\n        this.state = {\r\n            viewTransDetailsDataState: { skip: 0, take: 10 },\r\n            splitChangeWidthPercentage: 30,\r\n            dataState: dataState,\r\n            dataStateAll: dataStateAll,\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            kendoSkip: 0,\r\n            kendoTake: this.props.Login.settings ? parseInt(this.props.Login.settings[16]) : 5,\r\n            controlMap: new Map(),\r\n            userRoleControlRights: [],\r\n            gridHeight: 'auto',\r\n        }\r\n        this.searchRef = React.createRef();\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        if (this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1) {\r\n            this.setState({\r\n                dataResult: process(this.props.Login.masterData.TransactionDetails || [], event.dataState),\r\n                dataStateAll: event.dataState, kendoSkip: event.dataState.skip, kendoTake: event.dataState.skip\r\n            });\r\n        }\r\n        else {\r\n            let data = [];\r\n            if (event.dataState.filter === null && event.dataState.sort === null) {\r\n                let auditdata = (this.props.Login.masterData.TransactionDetails &&\r\n                    this.props.Login.masterData.TransactionDetails.slice(0,\r\n                        event.dataState.take + event.dataState.skip)) || []\r\n                data = process(auditdata || [], event.dataState)\r\n            } else {\r\n\r\n                data = process(this.props.Login.masterData.TransactionDetails || [], event.dataState)\r\n\r\n            }\r\n            this.setState({\r\n                dataResult: data,\r\n                dataState: event.dataState,\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        //const ViewTransactionDetails = this.state.controlMap.has(\"ViewTansactionDetails\") && this.state.controlMap.get(\"ViewTansactionDetails\").ncontrolcode;\r\n        this.breadCrumbData = this.breadcrumbList();\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate,\r\n            this.props.Login.masterData.ToDate,\r\n            this.props.Login.userInfo);\r\n        let fromDate = \"\";\r\n        let toDate = \"\";\r\n\r\n        if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\r\n            fromDate = (this.state.selectedRecord && this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"])) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n            toDate = (this.state.selectedRecord && this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"])) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        }\r\n        let inputParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            skip: this.state.skip,\r\n            take: this.state.take,\r\n            fromDate: obj.fromDate,\r\n            toDate: obj.toDate,\r\n            viewTypecode: this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType.value :\r\n                this.props.Login.masterData.viewFilterType ? this.props.Login.masterData.viewFilterType.nauditactionfiltercode : 0,\r\n            transFilterType: this.props.Login.masterData.breadCrumbTransaDetails ? this.props.Login.masterData.breadCrumbTransaDetails.value :\r\n                this.props.Login.masterData.transFilterType ? this.props.Login.masterData.transFilterType.ntransdetailsfiltercode : 0,\r\n        }\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_LABREGDATE\", \"dataField\": \"sregistereddate\", \"width\": \"200px\", \"componentName\": \"date\" },\r\n            { \"idsName\": \"IDS_LAB\", \"dataField\": \"slabname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_PLANT\", \"dataField\": \"splantname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_LABREGNO\", \"dataField\": \"slabregno\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_EXTERNALREFNO\", \"dataField\": \"sexternalrefcode\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_SAMPLE\", \"dataField\": \"ssamplename\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_BATCHNO\", \"dataField\": \"sbatchno\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_LOTNO\", \"dataField\": \"slotno\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_PARAMETER\", \"dataField\": \"sparametername\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_RESULTVALUE\", \"dataField\": \"sfinal\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_RESULTSTATUS\", \"dataField\": \"resultstatus\", \"width\": \"200px\" },\r\n        ]\r\n\r\n        this.feildsForGrid =\r\n            [\r\n                { \"idsName\": \"IDS_FIELDNAME\", \"dataField\": \"sfieldname\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_VALUE\", \"dataField\": \"svalue\", \"width\": \"100px\" }\r\n            ];\r\n        this.filterParam = {\r\n            inputListName: \"TransactionDate\", selectedObject: \"SelectedTransactionDate\", primaryKeyField: \"sregistereddate\",\r\n            fetchUrl: \"flextransaction/getTrendChartDate\", masterData: this.props.Login.masterData,\r\n\r\n            fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo,\r\n                fromDate: obj.fromDate,\r\n                toDate: obj.toDate,\r\n                viewTypecode: this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType.value :\r\n                    this.props.Login.masterData.viewFilterType ? this.props.Login.masterData.viewFilterType.nauditactionfiltercode : 0,\r\n                transFilterType: this.props.Login.masterData.breadCrumbTransaDetails ? this.props.Login.masterData.breadCrumbTransaDetails.value :\r\n                    this.props.Login.masterData.transFilterType ? this.props.Login.masterData.transFilterType.ntransdetailsfiltercode : 0,\r\n\r\n\r\n            },\r\n            filteredListName: \"searchedTransactionDate\",\r\n            clearFilter: \"no\",\r\n            updatedListname: \"SelectedTransactionDate\",\r\n            searchRef: this.searchTransactionRef,\r\n            searchFieldList: this.searchFieldList,\r\n            unchangeList: [\"viewFilterTypeList\", \"transFilterTypeList\"],\r\n            changeList: [\"TransactionDetails\"]\r\n\r\n        };\r\n\r\n        this.postParamList = [\r\n            {\r\n                filteredListName: \"searchedTransactionDate\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchRef,\r\n                primaryKeyField: \"sregistereddate\",\r\n                fetchUrl: \"audittrail/getFilterTransactionDetailsRecords\",\r\n                fecthInputObject: this.filterParam,\r\n                selectedObject: \"SelectedTransactionDate\",\r\n                inputListName: \"TransactionDate\",\r\n                updatedListname: \"SelectedTransactionDate\",\r\n                unchangeList: [\"viewFilterTypeList\", \"transFilterTypeList\"]\r\n            }];\r\n\r\n        return (\r\n            <>\r\n                <div className=\"mtop-fixed-breadcrumb client-listing-wrap\">\r\n                    <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n                    <Row noGutters>\r\n                        <Col md={12} className=\"parent-port-height sticky_head_parent\" >\r\n                            <SplitterLayout borderColor=\"#999\"\r\n                                primaryIndex={1}\r\n                                percentage={true}\r\n                                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                primaryMinSize={40}\r\n                                secondaryMinSize={20}\r\n                            >\r\n                                <TransactionListMaster\r\n                                    splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                    masterList={this.props.Login.masterData.searchedTransactionDetails ||\r\n                                        (this.props.Login.masterData.TransactionDate || [])}\r\n                                    selectedMaster={[this.props.Login.masterData.SelectedTransactionDate]}\r\n                                    primaryKeyField=\"sregistereddate\"\r\n                                    inputParam={inputParam}\r\n                                    mainField=\"sregisteredtransactiondate\"\r\n                                    selectedListName=\"SelectedTransactionDate\"\r\n                                    filterColumnData={this.props.filterTransactionList}\r\n                                    getMasterDetail={this.props.getTransactionDetail}\r\n                                    searchListName=\"searchedTransactionDetails\"\r\n                                    searchRef={this.searchRef}\r\n                                    filterParam={this.filterParam}\r\n                                    objectName=\"transactionDetails\"\r\n                                    listName=\"IDS_TRANSACTIONDETAILS\"\r\n                                    showFilter={this.props.Login.showFilter}\r\n                                    openFilter={this.openFilter}\r\n                                    closeFilter={this.closeFilter}\r\n                                    onFilterSubmit={this.onFilterSubmit}\r\n                                    handlePageChange={this.handlePageChange}\r\n                                    skip={this.state.skip}\r\n                                    take={this.state.take}\r\n                                    needFilter={true}\r\n                                    needAccordianFilter={false}\r\n                                    filterComponent={[\r\n                                        {\r\n                                            \"IDS_TRANSACTIONDETAILS\":\r\n                                                <FlexTransactionFilter\r\n                                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                                    filterViewType={this.state.viewFilterTypeList}\r\n                                                    transfilterViewType={this.state.transFilterTypeList}\r\n                                                    handleDateChange={this.handleDateChange}\r\n                                                    fromDate={fromDate}\r\n                                                    toDate={toDate}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    onComboChange={this.onComboChange}\r\n                                                />\r\n                                        }\r\n                                    ]}\r\n                                    commonActions={\r\n                                        <ProductList className=\"d-flex product-category float-right\">\r\n                                            <Button className=\"btn btn-circle outline-grey ml-2 p-0\" variant=\"link\"\r\n                                                onClick={() => this.onReload()}\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                <RefreshIcon className='custom_icons' />\r\n                                            </Button>\r\n                                        </ProductList>\r\n                                    }\r\n                                />\r\n                                <PerfectScrollbar>\r\n                                    <div ref={this.myRef}>\r\n                                        {this.props.Login.masterData.SelectedTransactionDate && this.props.Login.masterData.SelectedTransactionDate !== undefined ?\r\n                                            <ContentPanel className=\"panel-main-content\">\r\n                                                <Card className=\"border-0\">\r\n                                                    <Card.Body className='form-static-wrap padding-class'>\r\n                                                        <DataGrid\r\n                                                            selectedId={this.props.Login.selectedId}\r\n                                                            gridHeight={this.state.gridHeight + 'px'}\r\n                                                            expandField=\"expanded\"\r\n                                                            userRoleControlRights={this.state.userRoleControlRights && this.state.userRoleControlRights}\r\n                                                            pageable={true}\r\n                                                            pageSizes={this.props.Login.settings && this.props.Login.settings[17].split(\",\").map(setting => parseInt(setting))}\r\n                                                            scrollable={\"scrollable\"}\r\n                                                            primaryKeyField=\"ntransactionsampleresultno\"\r\n                                                            data={this.props.Login.masterData.TransactionDetails || []}\r\n                                                            dataResult={this.state.dataResult}\r\n                                                            dataState={this.state.selectedRecord && this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll\r\n                                                                : this.state.dataState}\r\n                                                            dataStateChange={this.dataStateChange}\r\n                                                            extractedColumnList={this.extractedColumnList || []}\r\n                                                            controlMap={this.state.controlMap}\r\n                                                            methodUrl=\"AuditTrail\"\r\n                                                            groupable={this.state.selectedRecord && this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? true : false : false}\r\n                                                            //isActionRequired={false}\r\n                                                            isToolBarRequired={true}\r\n                                                            isAddRequired={false}\r\n                                                            isRefreshRequired={false}\r\n                                                            isDownloadPDFRequired={false}\r\n                                                            isDownloadExcelRequired={true}\r\n                                                            isExportExcelRequired={true}\r\n                                                            isIdsField=\"yes\"\r\n                                                            isActionRequired={false}\r\n                                                            // actionIcons={[{\r\n                                                            //     title: this.props.intl.formatMessage({ id: \"IDS_VIEWCHANGES\" }),\r\n                                                            //     controlname: \"faEye\",\r\n                                                            //     objectName: \"TransactionDetails\",\r\n                                                            //     hidden: this.state.userRoleControlRights.indexOf(ViewTransactionDetails) === -1,\r\n                                                            //     onClick: (TransactionDetails) => this.ViewTransactionDetails(TransactionDetails)\r\n                                                            // }]}\r\n                                                            exportExcelNew={this.exportExcelNew}\r\n                                                            onExpandChange={this.expandChange}\r\n                                                            hideDetailBand={true}\r\n                                                        />\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                            </ContentPanel>\r\n\r\n                                            : \"\"\r\n                                        }\r\n                                    </div>\r\n                                </PerfectScrollbar>\r\n                            </SplitterLayout>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {\r\n                    this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        hideSave={true}\r\n                        addComponent={\r\n                            <>\r\n                                <DataGrid\r\n                                    primaryKeyField=\"ntransactionsampleresultno\"\r\n                                    detailedFieldList={this.feildsForGrid}\r\n                                    extractedColumnList={this.feildsForGrid}\r\n                                    dataResult={this.props.Login.masterData[\"ViewTransactionDetails\"] && this.props.Login.masterData[\"ViewTransactionDetails\"].length > 0\r\n                                        && process(this.props.Login.masterData[\"ViewTransactionDetails\"],\r\n                                            this.props.Login.viewTransDetailsDataState ? this.props.Login.viewTransDetailsDataState : { skip: 0, take: 50 })}\r\n                                    dataState={(this.props.Login.screenName === undefined || this.props.Login.screenName === this.props.intl.formatMessage({ id: 'IDS_TRANSACTIONVIEWDETAILS' }))\r\n                                        ? this.props.Login.viewTransDetailsDataState ? this.props.Login.viewTransDetailsDataState : { skip: 0, take: 50 } : { skip: 0, take: 50 }}\r\n                                    dataStateChange={(event) => this.dataStateAuditView(event)}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    pageable={true}\r\n                                    pageSizes={this.props.Login.settings && this.props.Login.settings[17].split(\",\").map(setting => parseInt(setting))} scrollable={'scrollable'}\r\n                                    gridHeight={'600px'}\r\n                                    hideColumnFilter={true}\r\n                                    selectedId={0}\r\n                                >\r\n                                </DataGrid>\r\n                            </>\r\n                        }\r\n                    />\r\n\r\n\r\n\r\n                }\r\n            </>\r\n\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.myRef.current.offsetParent.clientHeight !== this.state.gridHeight) {\r\n            this.setState({\r\n                gridHeight: this.myRef.current.offsetParent.clientHeight\r\n            })\r\n\r\n        }\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n\r\n    dataStateAuditView = (event) => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { viewTransDetailsDataState: event.dataState }\r\n        }\r\n\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let openModal = this.props.Login.openModal;\r\n        openModal = false;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, viewTransDetailsDataState: { skip: 0, take: 50 }, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    ViewTransactionDetails = (details) => {\r\n        const screenName = this.props.intl.formatMessage({ id: 'IDS_TRANSACTIONVIEWDETAILS' });\r\n        this.props.ViewTransactionDetails(this.props.Login.masterData, this.props.Login.userInfo, details, screenName);\r\n    };\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData != null) {\r\n            if (fieldName === \"ntransfiltercode\" || fieldName === \"nauditactionfiltercode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n            }\r\n        }\r\n        else {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n    expandChange = (event) => {\r\n        event.dataItem[event.target.props.expandField] = event.value;\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.TransactionDetails || [], this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll :\r\n                this.state.dataState),\r\n            dataState: this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll\r\n                : this.state.dataState,\r\n        });\r\n    };\r\n\r\n    // openFilter = () => {\r\n    //     let showFilter = !this.props.Login.showFilter\r\n    //     const updateInfo = {\r\n    //         typeName: DEFAULT_RETURN,\r\n    //         data: { showFilter }\r\n    //     }\r\n    //     this.props.updateStore(updateInfo);\r\n    // }\r\n\r\n    // closeFilter = () => {\r\n\r\n    //     const updateInfo = {\r\n    //         typeName: DEFAULT_RETURN,\r\n    //         data: { showFilter: false }\r\n    //     }\r\n    //     this.props.updateStore(updateInfo);\r\n    // }\r\n\r\n    exportExcelNew = () => {\r\n        let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;\r\n        let dataField = {};\r\n        [...this.extractedColumnList].map((item) => {\r\n            dataField[item.dataField] = this.props.intl.formatMessage({ id: item.idsName })\r\n        })\r\n\r\n        let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\r\n        let inputData = {\r\n            fromDate: obj.fromDate,\r\n            toDate: obj.toDate,\r\n            viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : 0,\r\n            userinfo: this.props.Login.userInfo,\r\n            sregistereddate: this.props.Login.masterData.SelectedTransactionDate.sregistereddate,\r\n            nformcode: this.props.Login.userInfo.nformcode,\r\n            dataField\r\n\r\n        }\r\n\r\n        let inputParam = { inputData }\r\n        this.props.getexportdata(inputParam);\r\n    }\r\n    onFilterSubmit = () => {\r\n\r\n        let breadCrumbFrom = this.state.selectedRecord[\"fromdate\"] ? getStartOfDay(this.state.selectedRecord[\"fromdate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n        let breadCrumbTo = this.state.selectedRecord[\"todate\"] ? getEndOfDay(this.state.selectedRecord[\"todate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        let validateFromDate = this.state.selectedRecord[\"fromdate\"] ? this.state.selectedRecord[\"fromdate\"] : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n        let validateToDate = this.state.selectedRecord[\"todate\"] ? this.state.selectedRecord[\"todate\"] : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        let breadCrumbTransaDetails = this.state.selectedRecord['ntransfiltercode']\r\n        let breadCrumbViewType = this.state.selectedRecord['nauditactionfiltercode']\r\n\r\n        const diffInMilliseconds = Math.abs(validateToDate - validateFromDate);\r\n        const days = Math.ceil(diffInMilliseconds / (1000 * 60 * 60 * 24));\r\n\r\n        const diffYear = validateToDate.getFullYear() - validateFromDate.getFullYear();\r\n        const diffMonth = validateToDate.getMonth() - validateFromDate.getMonth();\r\n        const monthss = diffYear * 12 + diffMonth;\r\n\r\n        if (this.state.selectedRecord[\"nauditactionfiltercode\"].value !== 1 || (this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 && (monthss <= 12 && (days <= 365 || days <= 366)))) {\r\n            let masterData = {\r\n                ...this.props.Login.masterData, breadCrumbFrom, breadCrumbTo, breadCrumbTransaDetails, breadCrumbViewType\r\n            }\r\n            let fromDate = this.state.selectedRecord[\"fromdate\"] ? this.state.selectedRecord[\"fromdate\"] : this.props.Login.masterData.FromDate;\r\n            let toDate = this.state.selectedRecord[\"todate\"] ? this.state.selectedRecord[\"todate\"] : this.props.Login.masterData.ToDate;\r\n\r\n            let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\r\n            let inputData = {\r\n                fromDate: obj.fromDate,\r\n                toDate: obj.toDate,\r\n                transFilterType: this.state.selectedRecord[\"ntransfiltercode\"] ? this.state.selectedRecord[\"ntransfiltercode\"].value : 0,\r\n                viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : -1,\r\n                userinfo: this.props.Login.userInfo,\r\n                postParamList: this.filterParam,\r\n            }\r\n\r\n            let inputParam = {\r\n                masterData, inputData, searchRef: this.searchRef,\r\n                detailSkip: this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll.skip : this.state.dataState.skip\r\n            }\r\n            this.props.getFilterTransactionDetailsRecords(inputParam)\r\n        } else {\r\n            let selectedRecord = this.state.selectedRecord;\r\n            selectedRecord['fromdate'] = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate)\r\n            selectedRecord['toDate'] = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate)\r\n            selectedRecord['nauditactionfiltercode'] = this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType :\r\n                {\r\n                    item: this.props.Login.masterData.viewFilterType,\r\n                    label: this.props.Login.masterData.viewFilterType.sauditactionfiltername, value: this.props.Login.masterData.viewFilterType.nauditactionfiltercode\r\n                }\r\n            selectedRecord['ntransfiltercode'] = this.props.Login.masterData.breadCrumbTransaDetails ? this.props.Login.masterData.breadCrumbTransaDetails :\r\n                {\r\n                    item: this.props.Login.masterData.transFilterType,\r\n                    label: this.props.Login.masterData.transFilterType.sdisplayname, value: this.props.Login.masterData.transFilterType.ntransfiltertypecode\r\n                }\r\n            this.setState({ selectedRecord });\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_DATERANGESHOULDEMAXONEYEAR\" }));\r\n        }\r\n    }\r\n\r\n    onReload = () => {\r\n        let breadCrumbFrom = this.state.selectedRecord[\"fromdate\"] ? getStartOfDay(this.state.selectedRecord[\"fromdate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n        let breadCrumbTo = this.state.selectedRecord[\"todate\"] ? getEndOfDay(this.state.selectedRecord[\"todate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        let breadCrumbTransaDetails = this.state.selectedRecord['ntransfiltercode']\r\n        let breadCrumbViewType = this.state.selectedRecord['nauditactionfiltercode'];\r\n\r\n        let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;\r\n\r\n        let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\r\n        let inputData = {\r\n            fromDate: obj.fromDate,\r\n            toDate: obj.toDate,\r\n            transFilterType: this.state.selectedRecord[\"ntransfiltercode\"] ? this.state.selectedRecord[\"ntransfiltercode\"].value : 0,\r\n            viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : -1,\r\n            userinfo: this.props.Login.userInfo,\r\n            postParamList: this.filterParam,\r\n        }\r\n\r\n        let masterData = {\r\n            ...this.props.Login.masterData, breadCrumbFrom, breadCrumbTo, breadCrumbTransaDetails, breadCrumbViewType\r\n        }\r\n\r\n        let inputParam = { masterData, inputData, searchRef: this.searchRef, detailSkip: this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll.skip : this.state.dataState.skip }\r\n        this.props.getFilterTransactionDetailsRecords(inputParam)\r\n    }\r\n    handleDateChange = (dateName, dateValue) => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        selectedRecord[dateName] = dateValue;\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n    paneSizeChange = (eve) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: eve\r\n        })\r\n    }\r\n\r\n    breadcrumbList = () => {\r\n        let breadCrumbArray = [];\r\n        let fromDate = this.props.Login.masterData.FromDate ? this.props.Login.masterData.FromDate : this.props.Login.masterData.breadCrumbFrom;\r\n        let toDate = this.props.Login.masterData.ToDate ? this.props.Login.masterData.ToDate : this.props.Login.masterData.breadCrumbTo;\r\n\r\n        let obj = convertDateValuetoString(fromDate,\r\n            toDate,\r\n            this.props.Login.userInfo);\r\n        breadCrumbArray.push({\r\n            \"label\": \"IDS_FROM\",\r\n            \"value\": obj.breadCrumbFrom\r\n        }, {\r\n            \"label\": \"IDS_TO\",\r\n            \"value\": obj.breadCrumbto\r\n        });\r\n\r\n        // breadCrumbArray.push(\r\n        //     {\r\n        //         \"label\": \"IDS_RECORDTODISPLAY\",\r\n        //         \"value\": this.props.Login.masterData.breadCrumbTransaDetails ? this.props.Login.masterData.breadCrumbTransaDetails.label :\r\n        //             this.props.Login.masterData.transFilterType ? this.props.Login.masterData.transFilterType.sdisplayname : \"\"\r\n        //     });\r\n\r\n        breadCrumbArray.push(\r\n            {\r\n                \"label\": \"IDS_VIEWPERIOD\",\r\n                \"value\": this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType.label :\r\n                    this.props.Login.masterData.viewFilterType ? this.props.Login.masterData.viewFilterType.sauditactionfiltername : \"\"\r\n            });\r\n\r\n\r\n        return breadCrumbArray;\r\n    };\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        let updateState = false;\r\n        let { selectedRecord, viewFilterTypeList, dataStateAll, dataState, dataResult, skip, take, transFilterTypeList } = this.state\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n        }\r\n        if (this.props.Login.masterData.viewFilterType !== previousProps.Login.masterData.viewFilterType) {\r\n            updateState = true;\r\n            const viewTypeAMap = constructOptionList(this.props.Login.masterData.viewFilterTypeList || [], \"nauditactionfiltercode\",\r\n                \"sauditactionfiltername\", \"nsorter\", \"ascending\", false);\r\n            const viewFilterTypeLists = viewTypeAMap.get(\"OptionList\");\r\n            viewFilterTypeList = viewFilterTypeLists\r\n            selectedRecord = {\r\n                nauditactionfiltercode: viewFilterTypeLists.length > 0 ? {\r\n                    \"value\": viewFilterTypeLists[0].item.nauditactionfiltercode,\r\n                    \"label\": viewFilterTypeLists[0].item.sauditactionfiltername\r\n                } : this.state.selectedRecord[\"nauditactionfiltercode\"]\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.masterData.transFilterTypeList !== previousProps.Login.masterData.transFilterTypeList) {\r\n            updateState = true;\r\n            const transTypeAMap = constructOptionList(this.props.Login.masterData.transFilterTypeList || [], \"ntransdetailsfiltercode\",\r\n                \"sdisplayname\", \"nsorter\", \"ascending\", false);\r\n            const transFilterTypeLists = transTypeAMap.get(\"OptionList\");\r\n            transFilterTypeList = transFilterTypeLists\r\n            selectedRecord = {\r\n                ...selectedRecord,\r\n                ntransfiltercode: transFilterTypeLists.length > 0 ? {\r\n                    \"value\": transFilterTypeLists[0].item.ntransdetailsfiltercode,\r\n                    \"label\": transFilterTypeLists[0].item.sdisplayname\r\n                } : this.state.selectedRecord[\"ntransfiltercode\"],\r\n            }\r\n        }\r\n\r\n        if (this.props.Login.resetDataGridPage && this.props.Login.resetDataGridPage !== previousProps.Login.resetDataGridPage) {\r\n            if (this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1) {\r\n\r\n                dataStateAll.skip = 0\r\n                updateState = true;\r\n            }\r\n            else {\r\n\r\n                dataState.skip = 0\r\n                updateState = true;\r\n            }\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            updateState = true;\r\n            if (this.state.selectedRecord && this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1) {\r\n\r\n                dataStateAll = { skip: 0, take: dataStateAll.take }\r\n                updateState = true;\r\n            }\r\n            else {\r\n\r\n                dataState = { skip: 0, take: dataState.take }\r\n                updateState = true;\r\n            }\r\n            const transactionDetailsDate = (this.props.Login.masterData.TransactionDetails && this.props.Login.masterData.TransactionDetails.slice(dataState.skip, this.props.Login.masterData.TransactionDetails.length)) || []\r\n            dataResult = process(transactionDetailsDate || [], dataState)\r\n\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            updateState = true;\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({\r\n                userRoleControlRights, controlMap, data: this.props.Login.masterData.ControlRights\r\n            });\r\n        }\r\n        if (updateState) {\r\n            this.setState({\r\n                selectedRecord, viewFilterTypeList, dataStateAll, dataState, dataResult, skip, take, transFilterTypeList\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, filterTransactionList, getTransactionDetail, getFilterTransactionDetailsRecords, updateStore, ViewTransactionDetails, getexportdata\r\n})(injectIntl(FlexTransaction));"]},"metadata":{},"sourceType":"module"}