{"ast":null,"code":"import React from'react';import FormSelectSearch from'../../components/form-select-search/form-select-search.component';import FormInput from'../../components/form-input/form-input.component';import{Col,Form,Row}from'react-bootstrap';import{injectIntl}from'react-intl';import{CONTAINERTYPE,transactionStatus}from'../../components/Enumeration';import FormNumericInput from'../../components/form-numeric-input/form-numeric-input.component';var AddTestContainerType=function AddTestContainerType(props){//   const { nresourecode,disabled } = props.selectedRecord;\nvar unit=props.unit;return/*#__PURE__*/React.createElement(Col,{md:\"12\"},/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage({id:\"IDS_CONTAINERTYPE\"}),name:\"ncontainertypecode\",isDisabled:false,placeholder:props.intl.formatMessage({id:\"IDS_SELECTRECORD\"}),isMandatory:true,showOption:props.isMulti,options:props.containertype,optionId:\"ncontainertypecode\",optionValue:\"scontainertype\",defaultValue:props.selectedRecord[\"ncontainertypecode\"],onChange:function onChange(value){return props.onComboChange(value,props.isMulti?\"availableData\":\"ncontainertypecode\",1);},value:props.selectedRecord[\"ncontainertypecode\"]?props.selectedRecord[\"ncontainertypecode\"]||[]:[],isMulti:props.isMulti,isSearchable:true,closeMenuOnSelect:!props.isMulti,alphabeticalSort:true,isClearable:false}),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:\"6\"},/*#__PURE__*/React.createElement(FormNumericInput,{name:\"nquantity\",label:props.intl.formatMessage({id:\"IDS_QUANTITY\"}),type:\"number\",value:props.selectedRecord[\"nquantity\"],placeholder:props.intl.formatMessage({id:\"IDS_QUANTITY\"}),strict:true,min:0//max={9999999.99}\n,maxLength:6,onChange:function onChange(value){return props.onNumericInputChange(value,\"nquantity\",\"nunitcode\");},noStyle:true,precision:2,className:\"form-control\",errors:\"Please provide a valid number.\"})),/*#__PURE__*/React.createElement(Col,{md:\"6\"},/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage({id:\"IDS_UNIT\"}),isSearchable:true,name:\"nunitcode\",placeholder:props.intl.formatMessage({id:\"IDS_SELECTRECORD\"}),options:unit||[],optionId:\"nunitcode\",optionValue:\"sunitname\"// value={props.selectedRecord ? props.selectedRecord[\"nunitcode\"] : \"\"}\n,value:props.selectedRecord[\"ncontainertypecode\"]?props.selectedRecord[\"nunitcode\"]||[]:[],onChange:function onChange(value){return props.onComboChange(value,\"nunitcode\",1);},alphabeticalSort:true,isMandatory:props.selectedRecord.unitMandatory?props.selectedRecord.unitMandatory===true?true:false:false,isClearable:props.selectedRecord.unitMandatory?props.selectedRecord.unitMandatory===true?false:true:true,isDisabled:props.selectedRecord[\"nquantity\"]===0||props.selectedRecord[\"nquantity\"]===undefined?true:false}))));};export default injectIntl(AddTestContainerType);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/testmanagement/AddTestContainerType.jsx"],"names":["React","FormSelectSearch","FormInput","Col","Form","Row","injectIntl","CONTAINERTYPE","transactionStatus","FormNumericInput","AddTestContainerType","props","unit","intl","formatMessage","id","isMulti","containertype","selectedRecord","value","onComboChange","onNumericInputChange","unitMandatory","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { Col, Form, Row } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { CONTAINERTYPE,transactionStatus } from '../../components/Enumeration';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\n\r\n\r\n\r\nconst AddTestContainerType = (props) => {\r\n //   const { nresourecode,disabled } = props.selectedRecord;\r\n const { unit} = props\r\n    return (\r\n        <Col md=\"12\">\r\n            <FormSelectSearch\r\n                formLabel={props.intl.formatMessage({ id: \"IDS_CONTAINERTYPE\" })}\r\n                name={\"ncontainertypecode\"}\r\n                isDisabled={false}\r\n                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                isMandatory={true}\r\n                showOption={props.isMulti}\r\n                options={props.containertype}\r\n                optionId='ncontainertypecode'\r\n                optionValue='scontainertype'\r\n                defaultValue={props.selectedRecord[\"ncontainertypecode\"]}\r\n                onChange={value => props.onComboChange(value, props.isMulti?\"availableData\":\"ncontainertypecode\", 1)}\r\n                value={props.selectedRecord[\"ncontainertypecode\"] ? props.selectedRecord[\"ncontainertypecode\"] || [] : []}\r\n                isMulti={props.isMulti}\r\n                isSearchable={true}\r\n                closeMenuOnSelect={!props.isMulti}\r\n                alphabeticalSort={true}\r\n                isClearable={false}\r\n            >\r\n            </FormSelectSearch>\r\n\r\n            {/* <FormInput\r\n                    name={\"nquantity\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_QUANTITY\" })}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event, 4)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_QUANTITY\" })}\r\n                    value={props.selectedRecord && props.selectedRecord[\"nquantity\"] ? props.selectedRecord[\"nquantity\"] : \"\"}\r\n                    isMandatory=\"*\"\r\n                    required={true}\r\n                    maxLength={6}\r\n                    precision={2}\r\n                /> */}\r\n                 <Row>\r\n                <Col md=\"6\">\r\n                <FormNumericInput\r\n                    name={\"nquantity\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_QUANTITY\" })}\r\n                    type=\"number\"\r\n                    value={props.selectedRecord[\"nquantity\"]}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_QUANTITY\" })}\r\n                    strict={true}\r\n                    min={0}\r\n                    //max={9999999.99}\r\n                    maxLength={6}\r\n                    onChange={(value) => props.onNumericInputChange(value, \"nquantity\", \"nunitcode\")}\r\n                    noStyle={true}\r\n                    precision={2}\r\n                    className=\"form-control\"\r\n                    errors=\"Please provide a valid number.\"\r\n                /> \r\n                </Col>\r\n                 <Col md=\"6\">\r\n                 <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_UNIT\" })}\r\n                    isSearchable={true}\r\n                    name={\"nunitcode\"}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    options={unit || []}\r\n                    optionId='nunitcode'\r\n                    optionValue='sunitname'\r\n                   // value={props.selectedRecord ? props.selectedRecord[\"nunitcode\"] : \"\"}\r\n                   value={props.selectedRecord[\"ncontainertypecode\"] ? props.selectedRecord[\"nunitcode\"] || [] : []}\r\n\r\n                    onChange={value => props.onComboChange(value, \"nunitcode\", 1)}\r\n                    alphabeticalSort={true}\r\n                    isMandatory={props.selectedRecord.unitMandatory ? props.selectedRecord.unitMandatory === true ? true : false : false}\r\n                    isClearable={props.selectedRecord.unitMandatory ? props.selectedRecord.unitMandatory === true ? false : true : true}\r\n                    isDisabled={(props.selectedRecord[\"nquantity\"] === 0 || props.selectedRecord[\"nquantity\"] === undefined) ? true : false}\r\n                >\r\n                </FormSelectSearch>\r\n                </Col>\r\n                </Row>\r\n{/* <Form.Check \r\n                        name=\"noutsourcecode\" \r\n                        type=\"checkbox\"\r\n                        id=\"AddFiles\"\r\n                        label={props.intl.formatMessage({ id: \"IDS_OUTSOURCE\" })}\r\n                        inline={true}\r\n                        onChange={(event)=>props.onInputOnChange(event, 1,CONTAINERTYPE)}\r\n                        checked={props.selectedRecord ? props.selectedRecord[\"noutsourcecode\"] === CONTAINERTYPE.YES ? true : false : false}\r\n                       // disabled={disabled}\r\n                    >\r\n                    </Form.Check> */}\r\n        </Col>\r\n    );\r\n};\r\n\r\nexport default injectIntl(AddTestContainerType);"]},"metadata":{},"sourceType":"module"}