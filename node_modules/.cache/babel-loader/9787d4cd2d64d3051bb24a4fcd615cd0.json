{"ast":null,"code":"import React from'react';import{Row,Col}from'react-bootstrap';import FormInput from'../../components/form-input/form-input.component';import FormSelectSearch from'../../components/form-select-search/form-select-search.component';import FormNumericInput from'../../components/form-numeric-input/form-numeric-input.component';import{injectIntl}from'react-intl';var EditTestGroupTest=function EditTestGroupTest(props){return/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(FormInput,{name:\"stestsynonym\",label:props.intl.formatMessage({id:\"IDS_TESTSYNONYM\"}),type:\"text\",onChange:function onChange(event){return props.onInputOnChange(event,1);},placeholder:props.intl.formatMessage({id:\"IDS_TESTSYNONYM\"}),value:props.selectedRecord?props.selectedRecord[\"stestsynonym\"]:\"\",isMandatory:\"*\",required:true,maxLength:100}),/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage({id:\"IDS_SECTION\"}),name:\"nsectioncode\",placeholder:props.intl.formatMessage({id:\"IDS_PLEASESELECT\"}),isMandatory:true,options:props.testGroupInputData.section,optionId:\"nsectioncode\",optionValue:\"ssectionname\",onChange:function onChange(value){return props.onComboChange(value,\"nsectioncode\",1);},value:props.selectedRecord?props.selectedRecord[\"nsectioncode\"]:-1,isSearchable:true,alphabeticalSort:true}),/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage({id:\"IDS_METHOD\"}),name:\"nmethodcode\",placeholder:props.intl.formatMessage({id:\"IDS_PLEASESELECT\"}),isMandatory:false,options:props.testGroupInputData.method,optionId:\"nmethodcode\",optionValue:\"smethodname\",onChange:function onChange(value){return props.onComboChange(value,\"nmethodcode\",1);},value:props.selectedRecord?props.selectedRecord[\"nmethodcode\"]:\"\",isSearchable:true,alphabeticalSort:true,isClearable:true}),/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage({id:\"IDS_INSTRUMENTCATEGORY\"}),name:\"ninstrumentcatcode\",placeholder:props.intl.formatMessage({id:\"IDS_PLEASESELECT\"}),isMandatory:false,options:props.testGroupInputData.instrumentCategory,optionId:\"ninstrumentcatcode\",optionValue:\"sinstrumentcatname\",onChange:function onChange(value){return props.onComboChange(value,\"ninstrumentcatcode\",1);},value:props.selectedRecord?props.selectedRecord[\"ninstrumentcatcode\"]:\"\",isSearchable:true,alphabeticalSort:true,isClearable:true}),/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage({id:\"IDS_CONTAINERTYPE\"}),name:\"ncontainertypecode\",placeholder:props.intl.formatMessage({id:\"IDS_PLEASESELECT\"}),isMandatory:false,options:props.testGroupInputData.containerType,optionId:\"ncontainertypecode\",optionValue:\"scontainertype\",onChange:function onChange(value){return props.onComboChange(value,\"ncontainertypecode\",1);},value:props.selectedRecord?props.selectedRecord[\"ncontainertypecode\"]:\"\",isSearchable:true,alphabeticalSort:true,isClearable:true}),/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage({id:\"IDS_ATTACHMENT\"}),name:\"ntestfilecode\",isDisabled:false,placeholder:props.intl.formatMessage({id:\"IDS_PLEASESELECT\"}),isMandatory:false,options:props.testGroupInputData.testFile,optionId:\"ntestfilecode\",optionValue:\"sfilename\",onChange:function onChange(value){return props.onComboChange(value,\"ntestfilecode\",1);},value:props.selectedRecord?props.selectedRecord[\"ntestfilecode\"]:\"\",isSearchable:true,alphabeticalSort:true,isClearable:true}),/*#__PURE__*/React.createElement(FormNumericInput,{name:\"nsorter\",label:props.intl.formatMessage({id:\"IDS_SORTER\"}),type:\"number\",value:props.selectedRecord[\"nsorter\"],placeholder:props.intl.formatMessage({id:\"IDS_SORTER\"}),strict:true,maxLength:3,onChange:function onChange(value){return props.onNumericInputChange(value,\"nsorter\");},noStyle:true,precision:0,className:\"form-control\",errors:\"Please provide a valid number.\"}),/*#__PURE__*/React.createElement(FormNumericInput,{name:\"nrepeatcountno\",label:props.intl.formatMessage({id:\"IDS_REPLICATECOUNT\"}),type:\"number\",value:props.selectedRecord[\"nrepeatcountno\"],placeholder:props.intl.formatMessage({id:\"IDS_REPEATCOUNTNO\"}),strict:true,maxLength:3,onChange:function onChange(value){return props.onNumericInputChange(value,\"nrepeatcountno\");},noStyle:true,precision:0,className:\"form-control\",errors:\"Please provide a valid number.\"})));};export default injectIntl(EditTestGroupTest);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testgroup/EditTestGroupTest.jsx"],"names":["React","Row","Col","FormInput","FormSelectSearch","FormNumericInput","injectIntl","EditTestGroupTest","props","intl","formatMessage","id","event","onInputOnChange","selectedRecord","testGroupInputData","section","value","onComboChange","method","instrumentCategory","containerType","testFile","onNumericInputChange"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport { injectIntl } from 'react-intl';\r\n\r\nconst EditTestGroupTest = (props) => {\r\n    return (\r\n        <Row>\r\n            <Col md={12}>\r\n                <FormInput\r\n                    name={\"stestsynonym\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_TESTSYNONYM\" })}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event, 1)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_TESTSYNONYM\" })}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"stestsynonym\"] : \"\"}\r\n                    isMandatory=\"*\"\r\n                    required={true}\r\n                    maxLength={100}\r\n                />\r\n                {/* <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_SOURCE\" })}\r\n                    name={\"nsourcecode\"}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PLEASESELECT\" })}\r\n                    isMandatory={true}\r\n                    options={props.testGroupInputData.source}\r\n                    optionId='nsourcecode'\r\n                    optionValue='ssourcename'\r\n                    onChange={value => props.onComboChange(value, \"nsourcecode\", 1)}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"nsourcecode\"] : -1}\r\n                    isSearchable={true}\r\n                    alphabeticalSort={true}\r\n                >\r\n                </FormSelectSearch> */}\r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_SECTION\" })}\r\n                    name={\"nsectioncode\"}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PLEASESELECT\" })}\r\n                    isMandatory={true}\r\n                    options={props.testGroupInputData.section}\r\n                    optionId='nsectioncode'\r\n                    optionValue='ssectionname'\r\n                    onChange={value => props.onComboChange(value, \"nsectioncode\", 1)}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"nsectioncode\"] : -1}\r\n                    isSearchable={true}\r\n                    alphabeticalSort={true}\r\n                >\r\n                </FormSelectSearch>\r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_METHOD\" })}\r\n                    name={\"nmethodcode\"}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PLEASESELECT\" })}\r\n                    isMandatory={false}\r\n                    options={props.testGroupInputData.method}\r\n                    optionId='nmethodcode'\r\n                    optionValue='smethodname'\r\n                    onChange={value => props.onComboChange(value, \"nmethodcode\", 1)}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"nmethodcode\"] : \"\"}\r\n                    isSearchable={true}\r\n                    alphabeticalSort={true}\r\n                    isClearable={true}\r\n                >\r\n                </FormSelectSearch>\r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_INSTRUMENTCATEGORY\" })}\r\n                    name={\"ninstrumentcatcode\"}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PLEASESELECT\" })}\r\n                    isMandatory={false}\r\n                    options={props.testGroupInputData.instrumentCategory}\r\n                    optionId='ninstrumentcatcode'\r\n                    optionValue='sinstrumentcatname'\r\n                    onChange={value => props.onComboChange(value, \"ninstrumentcatcode\", 1)}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"ninstrumentcatcode\"] : \"\"}\r\n                    isSearchable={true}\r\n                    alphabeticalSort={true}\r\n                    isClearable={true}\r\n                >\r\n                </FormSelectSearch>\r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_CONTAINERTYPE\" })}\r\n                    name={\"ncontainertypecode\"}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PLEASESELECT\" })}\r\n                    isMandatory={false}\r\n                    options={props.testGroupInputData.containerType}\r\n                    optionId='ncontainertypecode'\r\n                    optionValue='scontainertype'\r\n                    onChange={value => props.onComboChange(value, \"ncontainertypecode\", 1)}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"ncontainertypecode\"] : \"\"}\r\n                    isSearchable={true}\r\n                    alphabeticalSort={true}\r\n                    isClearable={true}\r\n                >\r\n                </FormSelectSearch>\r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_ATTACHMENT\" })}\r\n                    name={\"ntestfilecode\"}\r\n                    isDisabled={false}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PLEASESELECT\" })}\r\n                    isMandatory={false}\r\n                    options={props.testGroupInputData.testFile}\r\n                    optionId='ntestfilecode'\r\n                    optionValue='sfilename'\r\n                    onChange={value => props.onComboChange(value, \"ntestfilecode\", 1)}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"ntestfilecode\"] : \"\"}\r\n                    isSearchable={true}\r\n                    alphabeticalSort={true}\r\n                    isClearable={true}\r\n                >\r\n                </FormSelectSearch>\r\n                {/* Hided test group test's cost as we have test price screen as per Common FRS */}\r\n                {/* <FormNumericInput\r\n                    name={\"ncost\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_PRICE\" })}\r\n                    type=\"number\"\r\n                    value={props.selectedRecord[\"ncost\"]}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PRICE\" })}\r\n                    strict={true}\r\n                    maxLength={10}\r\n                    onChange={(value) => props.onNumericInputChange(value, \"ncost\")}\r\n                    noStyle={true}\r\n                    precision={2}\r\n                    className=\"form-control\"\r\n                    errors=\"Please provide a valid number.\"\r\n                /> */}\r\n                <FormNumericInput\r\n                    name={\"nsorter\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_SORTER\" })}\r\n                    type=\"number\"\r\n                    value={props.selectedRecord[\"nsorter\"]}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_SORTER\" })}\r\n                    strict={true}\r\n                    maxLength={3}\r\n                    onChange={(value) => props.onNumericInputChange(value, \"nsorter\")}\r\n                    noStyle={true}\r\n                    precision={0}\r\n                    className=\"form-control\"\r\n                    errors=\"Please provide a valid number.\"\r\n                />\r\n                <FormNumericInput\r\n                    name={\"nrepeatcountno\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_REPLICATECOUNT\" })}\r\n                    type=\"number\"\r\n                    value={props.selectedRecord[\"nrepeatcountno\"]}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_REPEATCOUNTNO\" })}\r\n                    strict={true}\r\n                    maxLength={3}\r\n                    onChange={(value) => props.onNumericInputChange(value, \"nrepeatcountno\")}\r\n                    noStyle={true}\r\n                    precision={0}\r\n                    className=\"form-control\"\r\n                    errors=\"Please provide a valid number.\"\r\n                />\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default injectIntl(EditTestGroupTest);"]},"metadata":{},"sourceType":"module"}