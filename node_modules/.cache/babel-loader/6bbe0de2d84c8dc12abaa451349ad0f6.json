{"ast":null,"code":"import _objectSpread from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _defineProperty from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import rsapi from'../rsapi';import{intl}from'../components/App';import Axios from'axios';import{toast}from'react-toastify';import{DEFAULT_RETURN}from'./LoginTypes';import{initRequest}from'./LoginAction';import{constructOptionList,sortData}from'../components/CommonScript';// export function fetchRecordCertificateType1(fetchRecordParam) {\n//     //export function fetchRecordCertificateType (screenName, primaryKeyName, primaryKeyValue, operation, inputParam, userInfo, ncontrolCode){\n//     return function (dispatch) {\n//         let urlArray = [];\n//         let selectedId = null; \n//         if (fetchRecordParam.operation === \"update\") {\n//             const certificateType = rsapi.post(fetchRecordParam.inputParam.classUrl + \"/getActiveCertificateTypeById\", { [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo });\n//             urlArray = [certificateType];\n//             selectedId = fetchRecordParam.primaryKeyValue;\n//             dispatch(initRequest(true));\n//             Axios.all(urlArray)\n//                 .then(Axios.spread((...response) => {\n//                     dispatch({\n//                         type: DEFAULT_RETURN,\n//                         payload: {\n//                             selectedRecord:\n//                                 fetchRecordParam.operation === \"update\" ? response[0].data : undefined, operation: fetchRecordParam.operation,\n//                             screenName: \"IDS_CERTIFICATETYPE\",\n//                             openModal: true, ncontrolCode: fetchRecordParam.ncontrolCode,\n//                             loading: false, selectedId\n//                         }\n//                     });\n//                 }))\n//                 .catch(error => {\n//                     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                     if (error.response.status === 500) {\n//                         toast.error(intl.formatMessage({ id: error.message }));\n//                     }\n//                     else {\n//                         toast.warn(intl.formatMessage({ id: error.response.data }));\n//                     }\n//                 })\n//         } else {\n//             dispatch({\n//                 type: DEFAULT_RETURN,\n//                 payload: {\n//                     selectedRecord: {}, operation: fetchRecordParam.operation,\n//                     screenName: \"IDS_CERTIFICATETYPE\",\n//                     openModal: true, ncontrolCode: fetchRecordParam.ncontrolCode,\n//                     loading: false\n//                 }\n//             });\n//         }\n//     }\n// }\nexport function fetchRecordCertificateType(fetchRecordParam){return function(dispatch){var reportBatchService=rsapi.post(\"certificatetype/getCertificateTypeComboData\",{userinfo:fetchRecordParam.userInfo});var urlArray=[];// let selectedId = null;\nif(fetchRecordParam.operation===\"update\"){var _rsapi$post;var certificateType=rsapi.post(fetchRecordParam.inputParam.classUrl+\"/getActiveCertificateTypeById\",(_rsapi$post={},_defineProperty(_rsapi$post,fetchRecordParam.primaryKeyField,fetchRecordParam.primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",fetchRecordParam.userInfo),_rsapi$post));urlArray=[reportBatchService,certificateType];// selectedId = fetchRecordParam.primaryKeyValue;\n}else{urlArray=[reportBatchService];}dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var reportBatchMap=constructOptionList(response[0].data||[],\"ncertificatereporttypecode\",\"sdisplayname\",undefined,undefined,true);var reportBatchList=reportBatchMap.get(\"OptionList\");var selectedRecord={};if(fetchRecordParam.operation===\"update\"){selectedRecord=response[1].data;reportBatchList.map(function(item){return item.value===selectedRecord.ncertificatereporttypecode?selectedRecord[\"ncertificatereporttypecode\"]={\"label\":item.label,\"value\":item.value,\"item\":item}:\"\";});}dispatch({type:DEFAULT_RETURN,payload:{reportBatchTypeList:reportBatchList,selectedRecord:selectedRecord,operation:fetchRecordParam.operation,screenName:\"IDS_CERTIFICATETYPE\",openModal:true,ncontrolCode:fetchRecordParam.ncontrolCode,loading:false//  selectedId\n}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response.data}));}});};}export function getCertificateTypeVersion(certificatetype,userInfo,masterData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"certificatetype/getCertificateTypeByClick\",{ncertificatetypecode:certificatetype.ncertificatetypecode,userinfo:userInfo}).then(function(response){var responseData=sortData(response.data);masterData=_objectSpread(_objectSpread({},masterData),responseData);dispatch({type:DEFAULT_RETURN,payload:{loading:false,masterData:masterData}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getReportMasterByCertificateType(ncertificatetypecode,userInfo){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"certificatetype/getReportMasterByCertificateType\",{ncertificatetypecode:ncertificatetypecode,userinfo:userInfo}).then(function(response){var reportmasterMap=constructOptionList(response.data.reportmaster||[],\"nreportcode\",\"sreportname\",undefined,undefined,true);var reportmaster=reportmasterMap.get(\"OptionList\");var previewReportmasterMap=constructOptionList(response.data.previewreportmaster||[],\"nreportcode\",\"sreportname\",undefined,undefined,true);var previewReportmaster=previewReportmasterMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{loading:false,reportMasterList:reportmaster,previewReportMasterList:previewReportmaster,openChildModal:true,screenName:\"IDS_CERTIFICATETYPEVERSION\",operation:\"create\",id:'certificatetypeversion',selectedRecord:{},reportDetailsList:[]}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getReportDetailByReport(nreportcode,ncertificatetypecode,selectedRecord,userInfo,fieldName){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"certificatetype/getReportDetailByReport\",{nreportcode:nreportcode,ncertificatetypecode:ncertificatetypecode,userinfo:userInfo}).then(function(response){var reportdetailMap=constructOptionList(response.data.reportDetails||[],\"nreportdetailcode\",\"nversionno\",undefined,undefined,true);var reportDetail=reportdetailMap.get(\"OptionList\");if(fieldName===\"npreviewreportcode\"){selectedRecord['npreviewreportdetailcode']=[];selectedRecord['spreviewdisplaystatus']='';dispatch({type:DEFAULT_RETURN,payload:{loading:false,previewReportDetailsList:reportDetail,selectedRecord:selectedRecord}});}else{selectedRecord['nreportdetailcode']=[];selectedRecord['sdisplaystatus']='';dispatch({type:DEFAULT_RETURN,payload:{loading:false,reportDetailsList:reportDetail,selectedRecord:selectedRecord}});}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function fetchCertificateTypeVersionById(editParam){return function(dispatch){dispatch(initRequest(true));rsapi.post('certificatetype/fetchCertificateTypeVersionById',{ncertificatetypeversioncode:editParam.primaryKeyValue,userinfo:editParam.userInfo}).then(function(response){var responseData=response.data.selectedRecord;var reportMasterMap=constructOptionList(response.data.reportmaster||[],\"nreportcode\",\"sreportname\",undefined,undefined,true);var reportMaster=reportMasterMap.get(\"OptionList\");var reportdetailMap=constructOptionList(response.data.ReportDetails||[],\"nreportdetailcode\",\"nversionno\",undefined,undefined,true);var reportDetail=reportdetailMap.get(\"OptionList\");var previewReportMasterMap=constructOptionList(response.data.previewreportmaster||[],\"nreportcode\",\"sreportname\",undefined,undefined,true);var previewReportMaster=previewReportMasterMap.get(\"OptionList\");var previewReportdetailMap=constructOptionList(response.data.PreviewReportDetails||[],\"nreportdetailcode\",\"nversionno\",undefined,undefined,true);var previewReportDetail=previewReportdetailMap.get(\"OptionList\");var selectedReportDetail=undefined;reportDetail.forEach(function(report){if(report.value===responseData.nreportdetailcode){selectedReportDetail=report;}});var selectedPreviewReportDetail=undefined;previewReportDetail.forEach(function(report){if(report.value===responseData.npreviewreportdetailcode){selectedPreviewReportDetail=report;}});var selectedRecord={};if(selectedReportDetail){reportMaster.forEach(function(master){if(master.value===selectedReportDetail.item.nreportcode){selectedRecord['nreportcode']=master;}});}else{selectedReportDetail={label:\"NA\",value:-1,item:{sreportname:\"NA\",nreportcode:-1}};}if(selectedPreviewReportDetail){previewReportMaster.forEach(function(master){if(master.value===selectedPreviewReportDetail.item.nreportcode){selectedRecord['npreviewreportcode']=master;}});}else{selectedPreviewReportDetail={label:\"NA\",value:-1,item:{sreportname:\"NA\",nreportcode:-1}};}selectedRecord['nreportcode']=selectedRecord['nreportcode']?selectedRecord['nreportcode']:{label:\"NA\",value:-1,item:{}};selectedRecord['nreportdetailcode']=selectedReportDetail;selectedRecord['sdisplaystatus']=selectedReportDetail.item.sdisplaystatus;selectedRecord['npreviewreportcode']=selectedRecord['npreviewreportcode']?selectedRecord['npreviewreportcode']:{label:\"NA\",value:-1,item:{}};selectedRecord['npreviewreportdetailcode']=selectedPreviewReportDetail;selectedRecord['spreviewdisplaystatus']=selectedPreviewReportDetail.item.sdisplaystatus;selectedRecord['ntransactionstatus']=responseData.ntransactionstatus;selectedRecord['ncertificatetypeversionno']=responseData.ncertificatetypeversionno;selectedRecord['nversionno']=responseData.nversionno;dispatch({type:DEFAULT_RETURN,payload:{loading:false,openChildModal:true,operation:\"update\",screenName:\"IDS_CERTIFICATETYPEVERSION\",id:'certificatetypeversion',reportMasterList:reportMaster,reportDetailsList:reportDetail,previewReportMasterList:previewReportMaster,previewReportDetailsList:previewReportDetail,selectedId:editParam.primaryKeyValue,selectedRecord:selectedRecord,ncontrolCode:editParam.ncontrolCode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/actions/CertificateTypeAction.js"],"names":["rsapi","intl","Axios","toast","DEFAULT_RETURN","initRequest","constructOptionList","sortData","fetchRecordCertificateType","fetchRecordParam","dispatch","reportBatchService","post","userinfo","userInfo","urlArray","operation","certificateType","inputParam","classUrl","primaryKeyField","primaryKeyValue","all","then","response","reportBatchMap","data","undefined","reportBatchList","get","selectedRecord","map","item","value","ncertificatereporttypecode","label","type","payload","reportBatchTypeList","screenName","openModal","ncontrolCode","loading","catch","error","status","formatMessage","id","message","warn","getCertificateTypeVersion","certificatetype","masterData","ncertificatetypecode","responseData","getReportMasterByCertificateType","reportmasterMap","reportmaster","previewReportmasterMap","previewreportmaster","previewReportmaster","reportMasterList","previewReportMasterList","openChildModal","reportDetailsList","getReportDetailByReport","nreportcode","fieldName","reportdetailMap","reportDetails","reportDetail","previewReportDetailsList","fetchCertificateTypeVersionById","editParam","ncertificatetypeversioncode","reportMasterMap","reportMaster","ReportDetails","previewReportMasterMap","previewReportMaster","previewReportdetailMap","PreviewReportDetails","previewReportDetail","selectedReportDetail","forEach","report","nreportdetailcode","selectedPreviewReportDetail","npreviewreportdetailcode","master","sreportname","sdisplaystatus","ntransactionstatus","ncertificatetypeversionno","nversionno","selectedId"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { intl } from '../components/App';\r\nimport Axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, sortData } from '../components/CommonScript';\r\n\r\n\r\n// export function fetchRecordCertificateType1(fetchRecordParam) {\r\n//     //export function fetchRecordCertificateType (screenName, primaryKeyName, primaryKeyValue, operation, inputParam, userInfo, ncontrolCode){\r\n//     return function (dispatch) {\r\n\r\n//         let urlArray = [];\r\n//         let selectedId = null; \r\n//         if (fetchRecordParam.operation === \"update\") {\r\n//             const certificateType = rsapi.post(fetchRecordParam.inputParam.classUrl + \"/getActiveCertificateTypeById\", { [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo });\r\n\r\n//             urlArray = [certificateType];\r\n//             selectedId = fetchRecordParam.primaryKeyValue;\r\n\r\n//             dispatch(initRequest(true));\r\n//             Axios.all(urlArray)\r\n//                 .then(Axios.spread((...response) => {\r\n\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN,\r\n//                         payload: {\r\n//                             selectedRecord:\r\n//                                 fetchRecordParam.operation === \"update\" ? response[0].data : undefined, operation: fetchRecordParam.operation,\r\n//                             screenName: \"IDS_CERTIFICATETYPE\",\r\n//                             openModal: true, ncontrolCode: fetchRecordParam.ncontrolCode,\r\n//                             loading: false, selectedId\r\n//                         }\r\n//                     });\r\n//                 }))\r\n\r\n//                 .catch(error => {\r\n//                     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                     if (error.response.status === 500) {\r\n//                         toast.error(intl.formatMessage({ id: error.message }));\r\n//                     }\r\n//                     else {\r\n//                         toast.warn(intl.formatMessage({ id: error.response.data }));\r\n//                     }\r\n//                 })\r\n//         } else {\r\n//             dispatch({\r\n//                 type: DEFAULT_RETURN,\r\n//                 payload: {\r\n//                     selectedRecord: {}, operation: fetchRecordParam.operation,\r\n//                     screenName: \"IDS_CERTIFICATETYPE\",\r\n//                     openModal: true, ncontrolCode: fetchRecordParam.ncontrolCode,\r\n//                     loading: false\r\n//                 }\r\n//             });\r\n//         }\r\n\r\n//     }\r\n// }\r\n\r\nexport function fetchRecordCertificateType(fetchRecordParam) {\r\n    return function (dispatch) {\r\n\r\n        const reportBatchService = rsapi.post(\"certificatetype/getCertificateTypeComboData\",\r\n            { userinfo: fetchRecordParam.userInfo });\r\n\r\n        let urlArray = [];\r\n        // let selectedId = null;\r\n\r\n        if (fetchRecordParam.operation === \"update\") {\r\n            const certificateType = rsapi.post(fetchRecordParam.inputParam.classUrl + \"/getActiveCertificateTypeById\", { [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo });\r\n\r\n            urlArray = [reportBatchService, certificateType];\r\n            // selectedId = fetchRecordParam.primaryKeyValue;\r\n        }\r\n        else {\r\n            urlArray = [reportBatchService];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const reportBatchMap = constructOptionList(response[0].data || [], \"ncertificatereporttypecode\",\r\n                    \"sdisplayname\", undefined, undefined, true);\r\n\r\n                const reportBatchList = reportBatchMap.get(\"OptionList\");\r\n                let selectedRecord = {};\r\n                if (fetchRecordParam.operation === \"update\") {\r\n                    selectedRecord = response[1].data;\r\n                    reportBatchList.map(item => item.value === selectedRecord.ncertificatereporttypecode ?\r\n                        selectedRecord[\"ncertificatereporttypecode\"] = {\r\n                            \"label\": item.label,\r\n                            \"value\": item.value,\r\n                            \"item\": item\r\n                        }\r\n                        : \"\");\r\n\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        reportBatchTypeList: reportBatchList,\r\n                        selectedRecord,\r\n                        operation: fetchRecordParam.operation,\r\n                        screenName: \"IDS_CERTIFICATETYPE\",\r\n                        openModal: true,\r\n                        ncontrolCode: fetchRecordParam.ncontrolCode,\r\n                        loading: false,\r\n                        //  selectedId\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getCertificateTypeVersion(certificatetype, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"certificatetype/getCertificateTypeByClick\", { ncertificatetypecode: certificatetype.ncertificatetypecode, userinfo: userInfo })\r\n            .then(response => {\r\n                let responseData = sortData(response.data)\r\n                masterData = { ...masterData, ...responseData }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData\r\n                    }\r\n                })\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data)\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReportMasterByCertificateType(ncertificatetypecode, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"certificatetype/getReportMasterByCertificateType\", { ncertificatetypecode, userinfo: userInfo })\r\n            .then(response => {\r\n                const reportmasterMap = constructOptionList(response.data.reportmaster || [], \"nreportcode\", \"sreportname\", undefined, undefined, true);\r\n                const reportmaster = reportmasterMap.get(\"OptionList\");\r\n\r\n                const previewReportmasterMap = constructOptionList(response.data.previewreportmaster || [], \"nreportcode\", \"sreportname\", undefined, undefined, true);\r\n                const previewReportmaster = previewReportmasterMap.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        reportMasterList: reportmaster,\r\n                        previewReportMasterList: previewReportmaster,\r\n                        openChildModal: true,\r\n                        screenName: \"IDS_CERTIFICATETYPEVERSION\",\r\n                        operation: \"create\",\r\n                        id: 'certificatetypeversion',\r\n                        selectedRecord:{},\r\n                        reportDetailsList:[]\r\n                    }\r\n                })\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data)\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReportDetailByReport(nreportcode,ncertificatetypecode, selectedRecord, userInfo, fieldName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"certificatetype/getReportDetailByReport\", { nreportcode,ncertificatetypecode, userinfo: userInfo })\r\n            .then(response => {\r\n                const reportdetailMap = constructOptionList(response.data.reportDetails || [], \r\n                                \"nreportdetailcode\", \"nversionno\", undefined, undefined, true);\r\n                let reportDetail = reportdetailMap.get(\"OptionList\");\r\n               \r\n                if (fieldName === \"npreviewreportcode\"){\r\n                    selectedRecord['npreviewreportdetailcode'] = [];\r\n                    selectedRecord['spreviewdisplaystatus'] = '';\r\n                    dispatch({ type: DEFAULT_RETURN,payload: {  loading: false,\r\n                                                                previewReportDetailsList: reportDetail,\r\n                                                                selectedRecord\r\n                                                            }\r\n                            })\r\n                }\r\n                else{\r\n                    selectedRecord['nreportdetailcode'] = [];\r\n                    selectedRecord['sdisplaystatus'] = '';\r\n                    dispatch({ type: DEFAULT_RETURN,payload: {  loading: false,\r\n                                                                reportDetailsList: reportDetail,\r\n                                                                selectedRecord\r\n                                                            }\r\n                                        })\r\n                }         \r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data)\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function fetchCertificateTypeVersionById(editParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('certificatetype/fetchCertificateTypeVersionById', { ncertificatetypeversioncode: editParam.primaryKeyValue, userinfo: editParam.userInfo })\r\n            .then(response => {\r\n                const responseData = response.data.selectedRecord;\r\n                \r\n                const reportMasterMap = constructOptionList(response.data.reportmaster || [], \"nreportcode\", \"sreportname\", undefined, undefined, true);\r\n                const reportMaster = reportMasterMap.get(\"OptionList\");\r\n                \r\n                const reportdetailMap = constructOptionList(response.data.ReportDetails || [], \"nreportdetailcode\", \"nversionno\", undefined, undefined, true);\r\n                const reportDetail = reportdetailMap.get(\"OptionList\");\r\n\r\n                const previewReportMasterMap = constructOptionList(response.data.previewreportmaster || [], \"nreportcode\", \"sreportname\", undefined, undefined, true);\r\n                const previewReportMaster = previewReportMasterMap.get(\"OptionList\");\r\n                \r\n                const previewReportdetailMap = constructOptionList(response.data.PreviewReportDetails || [], \"nreportdetailcode\", \"nversionno\", undefined, undefined, true);\r\n                const previewReportDetail = previewReportdetailMap.get(\"OptionList\");\r\n              \r\n                let selectedReportDetail = undefined;\r\n                reportDetail.forEach(report =>{\r\n                    if (report.value === responseData.nreportdetailcode) {\r\n                        selectedReportDetail = report\r\n                    }\r\n                })\r\n\r\n                let selectedPreviewReportDetail = undefined;\r\n                previewReportDetail.forEach(report =>{\r\n                    if (report.value === responseData.npreviewreportdetailcode) {\r\n                        selectedPreviewReportDetail = report\r\n                    }\r\n                })\r\n\r\n                let selectedRecord = {};\r\n                if(selectedReportDetail){\r\n                    reportMaster.forEach(master => {\r\n                        if (master.value === selectedReportDetail.item.nreportcode) {\r\n                            selectedRecord['nreportcode'] = master\r\n                        }\r\n                    })\r\n                }else{\r\n                    selectedReportDetail = {label:\"NA\",value:-1,item:{sreportname:\"NA\",nreportcode:-1}}\r\n                }\r\n\r\n                if(selectedPreviewReportDetail){\r\n                    previewReportMaster.forEach(master => {\r\n                        if (master.value === selectedPreviewReportDetail.item.nreportcode) {\r\n                            selectedRecord['npreviewreportcode'] = master\r\n                        }\r\n                    })\r\n                }else{\r\n                    selectedPreviewReportDetail = {label:\"NA\",value:-1,item:{sreportname:\"NA\",nreportcode:-1}}\r\n                }\r\n\r\n                selectedRecord['nreportcode'] = selectedRecord['nreportcode']?selectedRecord['nreportcode'] :{label:\"NA\",value:-1,item:{}}\r\n                selectedRecord['nreportdetailcode'] = selectedReportDetail;\r\n                selectedRecord['sdisplaystatus'] =  selectedReportDetail.item.sdisplaystatus;\r\n\r\n                selectedRecord['npreviewreportcode'] = selectedRecord['npreviewreportcode']?selectedRecord['npreviewreportcode'] :{label:\"NA\",value:-1,item:{}}\r\n                selectedRecord['npreviewreportdetailcode'] = selectedPreviewReportDetail;\r\n                selectedRecord['spreviewdisplaystatus'] =  selectedPreviewReportDetail.item.sdisplaystatus;\r\n\r\n                selectedRecord['ntransactionstatus'] = responseData.ntransactionstatus\r\n                selectedRecord['ncertificatetypeversionno'] = responseData.ncertificatetypeversionno\r\n                selectedRecord['nversionno'] = responseData.nversionno\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        openChildModal:true,\r\n                        operation:\"update\",\r\n                        screenName:\"IDS_CERTIFICATETYPEVERSION\",\r\n                        id: 'certificatetypeversion',\r\n                        reportMasterList: reportMaster,\r\n                        reportDetailsList: reportDetail,\r\n                        previewReportMasterList: previewReportMaster,\r\n                        previewReportDetailsList: previewReportDetail,\r\n                        selectedId:editParam.primaryKeyValue,\r\n                        selectedRecord,\r\n                        ncontrolCode : editParam.ncontrolCode\r\n                    }\r\n                })\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data)\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}