{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\designtemplatemapping\\\\DesignTemplateMapping.jsx\";\nimport React from 'react';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faThumbsUp, faChevronCircleDown } from '@fortawesome/free-solid-svg-icons'; //,faUserTimes, faTrash\n//import { falistUl } from '@fortawesome/free-regular-svg-icons';\n\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getDesignTemplateMappingDetail, getMappedFieldProps, editFieldConfigService, auditFieldConfigService, mappingFieldConfigService, getDesignTemplateMappingComboService, filterColumnData, reloadDesignTemplateMapping, getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit, combinationUniqueConfigService } from '../../actions';\nimport TemplateFilter from './TemplateFilter';\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\nimport { getControlMap, showEsign, constructOptionList, validateCreateView } from '../../components/CommonScript'; //searchData, sortData,\n\nimport ListMaster from '../../components/list-master/list-master.component'; // import DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\n\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddDesignTemplateMapping from './AddDesignTemplateMapping';\nimport Esign from '../../pages/audittrail/Esign';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { designProperties, formCode, SampleType, transactionStatus, templateMappingAction, //SAMPLEAUDITFIELDS, SAMPLEAUDITEDITABLE, SAMPLEAUDITMULTILINGUALFIELDS,\n// SUBSAMPLEAUDITFIELDS, SUBSAMPLEAUDITEDITABLE, SUBSAMPLEAUDITMULTILINGUALFIELDS,\n//SAMPLETEMPLATEFIELDS, \n//SUBSAMPLETEMPLATEFIELDS, \ndesignComponents //ARNOMULTILINGUAL, SUBARNOMULTILINGUAL\n} from '../../components/Enumeration';\nimport AddSynonym from '../../components/droparea/AddSynonym';\nimport { Affix } from 'rsuite';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component'; // import ReactTooltip from 'react-tooltip';\n\nimport ConfigureScreenFields from './ConfigureScreenFields';\nimport ConfigureEditFields from './ConfigureEditFields';\nimport ConfigureUniqueFields from './ConfigureUniqueFields.jsx';\nimport ConfigureAuditFields from './ConfigureAuditFields';\nimport CustomPopover from '../../components/customPopover';\nimport ConfigureSendToStoreFields from './configureSendToStoreFields'; //import { faCaretDown } from '@fortawesome/free-solid-svg-icons';\n\nimport FormInput from '../../components/form-input/form-input.component';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass DesignTemplateMapping extends React.Component {\n  constructor(props) {\n    super(props); // const dataState = {\n    //     skip: 0,\n    //     take: 10,\n    // };\n\n    this.sidebarExpandCollapse = () => {\n      this.setState({\n        sidebarview: true\n      });\n    };\n\n    this.filterComboChange = (event, fieldname) => {\n      if (event !== null) {\n        // let uRL = \"\";\n        let inputData = [];\n\n        if (fieldname === \"sampleType\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 1,\n            nsampletypecode: parseInt(event.value)\n          };\n          let masterData = { ...this.props.Login.masterData,\n            defaultsampletype: event\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n\n          if (event.value === SampleType.Masters) {\n            const masterTypeArray = this.state.masterTypeArray;\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData: { ...masterData,\n                  masterTypeArray,\n                  defaultMasterType: masterTypeArray[0],\n                  qualisforms: [],\n                  defaultform: this.state.newMasterForm,\n                  nregtypecode: -1,\n                  nregsubtypecode: -1\n                }\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            inputParam[\"masterData\"][\"defaultform\"] = {\n              value: -1,\n              label: \"-\"\n            };\n            this.props.getTMPFilterRegType(inputParam);\n          }\n        } else if (fieldname === \"registrationType\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nregtypecode: parseInt(event.value),\n            nsampletypecode: this.props.Login.masterData.defaultsampletype.value\n          };\n          let masterData = { ...this.props.Login.masterData,\n            defaultregtype: event\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n          this.props.getTMPFilterRegSubType(inputParam);\n        } else if (fieldname === \"registrationSubType\") {\n          let masterData = { ...this.props.Login.masterData,\n            defaultregsubtype: event\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else if (fieldname === \"masterType\") {\n          let masterData = { ...this.props.Login.masterData,\n            defaultMasterType: event\n          };\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 1,\n            nsampletypecode: SampleType.Masters\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n\n          if (event.value === 1) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData: { ...masterData,\n                  qualisforms: [],\n                  defaultform: this.state.newMasterForm\n                }\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.getTMPFilterRegType(inputParam);\n          }\n        } else {\n          let masterData = { ...this.props.Login.masterData,\n            defaultform: event\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.openModal = (ncontrolcode, operation) => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: {},\n          operation: operation,\n          ncontrolcode,\n          selectedId: null,\n          openModal: true,\n          screenName: this.props.Login.inputParam.displayName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.tabDetail = () => {\n      console.log(\"this.props.Login.masterData:\", this.props.Login.masterData);\n      const Layout = this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata;\n      const subSampleLayout = this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\n      const sampleType = this.props.Login.masterData.realSampleValue.value;\n      const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\n      const tabMap = new Map();\n      tabMap.set(\"IDS_TEMPLATE\", /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 39\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 780,\n          columnNumber: 37\n        }\n      }, Layout ? Layout.map(item => /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 784,\n          columnNumber: 53\n        }\n      }, item.children.length > 0 ? item.children.map(column => /*#__PURE__*/React.createElement(Col, {\n        md: 12 / item.children.length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 787,\n          columnNumber: 65\n        }\n      }, column.children.map(component => {\n        return component.hasOwnProperty(\"children\") ? /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 85\n          }\n        }, component.children.map(componentrow => componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(Col, {\n          md: componentrow && componentrow.length || 4,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 795,\n            columnNumber: 97\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 796,\n            columnNumber: 97\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 797,\n            columnNumber: 97\n          }\n        }, componentrow.displayname ? componentrow.displayname[this.props.Login.userInfo.slanguagetypecode] || componentrow.label : componentrow.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 798,\n            columnNumber: 101\n          }\n        }, \"-\"))))) : component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 806,\n            columnNumber: 85\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 807,\n            columnNumber: 89\n          }\n        }, component.displayname ? component.displayname[this.props.Login.userInfo.slanguagetypecode] || component.label : component.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 808,\n            columnNumber: 89\n          }\n        }, \" \", \"-\"));\n      }))) : \"\")) : \"\")));\n\n      if (sampleType !== SampleType.Masters && needsubsample) {\n        tabMap.set(\"IDS_SUBSAMPLETEMPLATE\", /*#__PURE__*/React.createElement(Card, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 825,\n            columnNumber: 51\n          }\n        }, /*#__PURE__*/React.createElement(Card.Body, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 827,\n            columnNumber: 41\n          }\n        }, subSampleLayout ? subSampleLayout.map(item => /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 831,\n            columnNumber: 57\n          }\n        }, item.children.length > 0 ? item.children.map(column => /*#__PURE__*/React.createElement(Col, {\n          md: 12 / item.children.length,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 834,\n            columnNumber: 69\n          }\n        }, column.children.map(component => {\n          return component.hasOwnProperty(\"children\") ? /*#__PURE__*/React.createElement(Row, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 839,\n              columnNumber: 89\n            }\n          }, component.children.map(componentrow => componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(Col, {\n            md: componentrow && componentrow.length || 4,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 842,\n              columnNumber: 97\n            }\n          }, /*#__PURE__*/React.createElement(FormGroup, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 843,\n              columnNumber: 101\n            }\n          }, /*#__PURE__*/React.createElement(FormLabel, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 844,\n              columnNumber: 101\n            }\n          }, componentrow.displayname ? componentrow.displayname[this.props.Login.userInfo.slanguagetypecode] || componentrow.label : componentrow.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 845,\n              columnNumber: 105\n            }\n          }, \"-\"))))) : component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(FormGroup, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 853,\n              columnNumber: 89\n            }\n          }, /*#__PURE__*/React.createElement(FormLabel, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 854,\n              columnNumber: 93\n            }\n          }, component.displayname ? component.displayname[this.props.Login.userInfo.slanguagetypecode] || component.label : component.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 855,\n              columnNumber: 93\n            }\n          }, \" \", \"-\"));\n        }))) : \"\")) : \"\")));\n      }\n\n      return tabMap;\n    };\n\n    this.actionMethod = value => {\n      if (value.method === templateMappingAction.CONFIGSAMPLEDISPLAY) {\n        this.openFieldConfiguration(value.controlId, \"configure\");\n      } else if (value.method === templateMappingAction.CONFIGSAMPLEEDIT) {\n        this.editFieldConfiguration(value.controlId, 'configureedit');\n      } else if (value.method === templateMappingAction.CONFIGSUBSAMPLEDISPLAY) {\n        this.openFieldConfiguration(value.controlId, 'configuresubsample');\n      } else if (value.method === templateMappingAction.CONFIGSUBSAMPLEEDIT) {\n        this.editFieldConfiguration(value.controlId, 'configuresubsampleedit');\n      } else if (value.method === templateMappingAction.CONFIGUNIQUE) {\n        this.openCombinationUniqueFieldConfiguration(value.controlId);\n      } else if (value.method === templateMappingAction.CONFIGSAMPLEAUDIT) {\n        this.auditFieldConfiguration(value.controlId, 'configureaudit');\n      } else if (value.method === templateMappingAction.CONFIGSENDTOSTORE) {\n        this.mappingFieldConfiguration(value.controlId, 'configuresendtostore');\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      let inputData = {\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\n        nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\n        // nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\n        //nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\n        nsampletypecode: this.props.Login.masterData.realSampleValue.value,\n        nformcode: this.props.Login.masterData.realFormValue ? this.props.Login.masterData[\"realFormValue\"].value : -1\n      };\n      let inputParam = {\n        masterData: this.props.Login.masterData,\n        inputData\n      };\n      this.props.reloadDesignTemplateMapping(inputParam);\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      let inputData = {\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: this.props.Login.masterData.defaultsampletype.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value || -1 : -1),\n        nregsubtypecode: this.props.Login.masterData.defaultsampletype.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value || -1 : -1),\n        nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\n        nformcode: this.props.Login.masterData.defaultform ? this.props.Login.masterData.defaultform.value || -1 : -1\n      };\n      let masterData = { ...this.props.Login.masterData,\n        realSampleValue: this.props.Login.masterData.defaultsampletype,\n        realFormValue: this.props.Login.masterData.defaultform,\n        realRegTypeValue: this.props.Login.masterData.defaultregtype,\n        realRegSubTypeValue: this.props.Login.masterData.defaultregsubtype\n      };\n      let inputParam = {\n        masterData,\n        inputData\n      };\n      this.props.getTMPFilterSubmit(inputParam);\n    };\n\n    this.onApproveClick = () => {\n      if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus !== transactionStatus.RETIRED) {\n        const ncontrolCode = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode; // if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\n        //     const updateInfo = {\n        //         typeName: DEFAULT_RETURN,\n        //         data: {\n        //              openModal: true,\n        //             operation: \"approve\", ncontrolCode: ncontrolCode\n        //         }\n        //     }\n        //     this.props.updateStore(updateInfo);\n        // } else {\n\n        let {\n          jsondata,\n          jdynamiccolumns,\n          jnumericcolumns,\n          templatePrimaryKey,\n          deleteValidation,\n          jsqlquerycolumns,\n          sampleQuerybuilderViewCondition,\n          sampleQuerybuilderViewSelect\n        } = this.getGridJsondata(this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\"); // console.log(\"deleteValidation 2:\", deleteValidation);\n\n        let inputData = {\n          jdynamiccolumns,\n          jnumericcolumns,\n          jsqlquerycolumns,\n          sprimarykeyname: templatePrimaryKey,\n          sampleQuerybuilderViewCondition,\n          sampleQuerybuilderViewSelect\n        };\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = undefined;\n        inputData[\"designtemplatemapping\"] = {\n          \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\"\n        };\n        inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\n        inputData[\"deletevalidationlist\"] = deleteValidation;\n        inputData[\"sviewname\"] = this.state.selectedRecord.sviewname;\n        postParam = {\n          inputListName: \"DesignTemplateMapping\",\n          selectedObject: \"selectedDesignTemplateMapping\",\n          primaryKeyField: \"ndesigntemplatemappingcode\"\n        };\n        const inputParam = {\n          inputData: { ...inputData\n          },\n          classUrl: 'designtemplatemapping',\n          methodUrl: \"DesignTemplateMapping\",\n          inputData: inputData,\n          screenName: 'Template Mapping',\n          operation: \"Approve\",\n          postParam,\n          selectedRecord: { ...this.state.selectedRecord\n          }\n        };\n        let saveType; // console.log(\"approve:\", inputParam);\n\n        const masterData = this.props.Login.masterData;\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              openModal: true,\n              operation: \"Approve\",\n              screenName: 'Template Mapping'\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } //  }\n      else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATERETIRED\"\n        }));\n      }\n    };\n\n    this.ConfirmDelete = () => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteTemplate());\n    };\n\n    this.deleteTemplate = () => {\n      if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT) {\n        const ncontrolCode = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = undefined;\n        inputData[\"designtemplatemapping\"] = {\n          \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\"\n        };\n        inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\n        postParam = {\n          inputListName: \"DesignTemplateMapping\",\n          selectedObject: \"selectedDesignTemplateMapping\",\n          primaryKeyField: \"ndesigntemplatemappingcode\",\n          primaryKeyValue: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n          fetchUrl: \"designtemplatemapping/getDesignTemplateMappingById\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        const inputParam = {\n          inputData: { ...inputData,\n            \"userinfo\": this.props.Login.userInfo\n          },\n          classUrl: 'designtemplatemapping',\n          methodUrl: \"DesignTemplateMapping\",\n          inputData: inputData,\n          screenName: 'Template Mapping',\n          operation: \"delete\",\n          postParam,\n          selectedRecord: { ...this.state.selectedRecord\n          }\n        };\n        let saveType;\n        const masterData = this.props.Login.masterData;\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              openModal: true,\n              operation: \"delete\",\n              screenName: 'Template Mapping'\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTRECORDTODELETE\"\n        }));\n      }\n    };\n\n    this.deleteCombinationUnique = (index, eventKey) => {\n      if (eventKey === \"subsample\") {\n        let dataList = this.props.Login.subsampledataList || [];\n        let dataListCount = this.props.Login.subsampledataListCount || [];\n        dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]; //   delete dataListCount[index]\n\n        if (dataList[index] || dataList[index] === null) {\n          dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]; // delete dataList[index]\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            subsampledataListCount: dataListCount,\n            subsampledataList: dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        let dataList = this.props.Login.dataList || [];\n        let dataListCount = this.props.Login.dataListCount || [];\n        dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]; //   delete dataListCount[index]\n\n        if (dataList[index] || dataList[index] === null) {\n          dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]; // delete dataList[index]\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListCount,\n            dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.addCombinatonUnique = (designData, eventKey) => {\n      if (eventKey === \"subsample\") {\n        const dataList = this.props.Login.dataListSubSample || []; //    const obj={}\n        //     designData.map(item=>{\n        //         obj[item[\"2\"]]={...item}\n        //     })\n        //dataList.push({})\n\n        const dataListCount = this.props.Login.dataListCountSubSample || [];\n        dataListCount.push(dataListCount.length + 1);\n        dataList.push({});\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListCountSubSample: dataListCount,\n            dataListSubSample: dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        const dataList = this.props.Login.dataList || []; //    const obj={}\n        //     designData.map(item=>{\n        //         obj[item[\"2\"]]={...item}\n        //     })\n        //dataList.push({})\n\n        const dataListCount = this.props.Login.dataListCount || [];\n        dataListCount.push(dataListCount.length + 1);\n        dataList.push({});\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListCount,\n            dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.openCombinationUniqueFieldConfiguration = controlCode => {\n      let openModal = true;\n      let operation = 'configureunique';\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          userinfo: this.props.Login.userInfo\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n\n      if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\n        inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      }\n\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.combinationUniqueConfigService(inputParam);\n    };\n\n    this.openFieldConfiguration = (controlCode, operation) => {\n      let openModal = true; //let operation = 'configure';\n\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          userinfo: this.props.Login.userInfo\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n\n      if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\n        inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      }\n\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.getMappedFieldProps(inputParam);\n    };\n\n    this.editFieldConfiguration = (controlCode, operation) => {\n      //console.log(\"edit config:\", this.props.Login);\n      // let operation = 'configureedit';\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          nregtypecode: this.props.Login.masterData.defaultregtype.value,\n          nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,\n          userinfo: this.props.Login.userInfo\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      }; // if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){\n      //     inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      //  }\n\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.editFieldConfigService(inputParam);\n    };\n\n    this.mappingFieldConfiguration = (controlCode, operation) => {\n      //console.log(\"edit config:\", this.props.Login);\n      // let operation = 'configureedit';\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let displayname = \"ConfigSendTOStore\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping\n          },\n          userinfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData\n        },\n        operation,\n        ncontrolcode,\n        screenName,\n        displayname\n      };\n\n      if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\n        inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      }\n\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.mappingFieldConfigService(inputParam);\n    };\n\n    this.auditFieldConfiguration = (controlCode, operation) => {\n      //console.log(\"edit config:\", this.props.Login);\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value : -1,\n          nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value : -1,\n          //nregtypecode: this.props.Login.masterData.defaultregtype.value,\n          //nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,\n          userinfo: this.props.Login.userInfo,\n          nneedsubsample: this.props.Login.masterData.defaultregsubtype && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.auditFieldConfigService(inputParam);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"Approve\" || this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? true : false;\n          selectedRecord = this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? this.state.selectedRecord : {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null,\n          dataList: [],\n          dataListCount: [],\n          dataListSubSample: [],\n          dataListCountSubSample: []\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName, screenName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (screenName === \"Sample\") {\n        if (fieldName == \"Quantity\") {\n          selectedRecord[\"Quantity\"] = comboData;\n        } else {\n          selectedRecord[\"Unit\"] = comboData;\n        }\n      } else if (screenName === \"SubSample\") {\n        if (fieldName == \"Quantity\") {\n          selectedRecord[\"SubQuantity\"] = comboData;\n        } else {\n          selectedRecord[\"SubUnit\"] = comboData;\n        }\n      } else {\n        selectedRecord[fieldName] = comboData;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onConfigureComboChange = (comboData, formCode, item) => {\n      if (item === \"Quantity\") {\n        const fieldName = item;\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      } else if (item === \"Unit\") {\n        const fieldName = item;\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        const fieldName = item.label;\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[formCode] = { ...selectedRecord[formCode],\n          [fieldName]: comboData\n        };\n        this.setState({\n          selectedRecord\n        });\n      } // let designData = this.props.Login.editFieldDesignData;\n      // let dataResult = this.props.Login.editFieldDataResult;\n      // if (formCode === undefined){\n      //     dataResult[dataIndex][field] = event.target.checked;\n      //     if (event.target.checked) {\n      //         designData[field].splice(dataIndex, 0, dataItem.realData)\n      //     } else {\n      //         designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\n      //     }\n      // }\n      // else{\n      //     dataResult[formCode][\"sampleeditable\"] = comboData;\n      //     if (event.target.checked) {\n      //         if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\n      //             return toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDS\" }))\n      //         } else {\n      //             designData[formCode][field].splice(dataIndex, 0, dataItem.realData)\n      //         }\n      //         if (field === 'sampledisplayfields') {\n      //             designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label)\n      //         }\n      //     } else {\n      //         if (field === 'sampledisplayfields') {\n      //             designData[formCode]['samplesearchfields'].splice(designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.label), 1)\n      //         }\n      //         designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\n      //     }\n      // }\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { designData, dataResult }\n      // }\n      // this.props.updateStore(updateInfo);\n\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        if (event.target.name === \"sviewname\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validateCreateView(event.target.value);\n            selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          } //  selectedRecord[event.target.name] =  event.target.value.replace(/[^a-z]/g, '');\n\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChangeForUnique = (event, radiotext, index, multilinguallabel, eventKey) => {\n      if (eventKey === \"subsample\") {\n        const dataList = this.props.Login.dataListSubSample || [];\n\n        if (dataList[index]) {\n          const value = dataList[index] && dataList[index][event.target.name];\n\n          if (value !== '' && value !== undefined) {\n            delete dataList[index][event.target.name];\n          } else {\n            dataList[index][event.target.name] = {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            };\n          }\n        } else {\n          dataList[index] = {\n            [event.target.name]: {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            }\n          };\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListSubSample: dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        const dataList = this.props.Login.dataList || [];\n\n        if (dataList[index]) {\n          const value = dataList[index] && dataList[index][event.target.name];\n\n          if (value !== '' && value !== undefined) {\n            delete dataList[index][event.target.name];\n          } else {\n            dataList[index][event.target.name] = {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            };\n          }\n        } else {\n          dataList[index] = {\n            [event.target.name]: {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            }\n          };\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.getGridJsondata = (templatedata, task) => {\n      let gridItem = [];\n      let gridMoreItem = [];\n      let masterdatefields = [];\n      let masterdateconstraints = [];\n      let masteruniquevalidation = [];\n      let mastercombinationunique = [];\n      let editable = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = [];\n      let templatePrimaryKey = \"\";\n      let mastertemplatefields = [];\n      let sampleAuditFields = [];\n      let sampleAuditEditable = [];\n      let sampleAuditMultilingualFields = [];\n      let sampleQuerybuilderViewCondition = [];\n      let sampleQuerybuilderViewSelect = [];\n      let deleteValidation = [];\n      let jsqlquerycolumns = [{\n        \"columnname\": \"ndynamicmastercode\",\n        \"displayname\": {\n          \"en-US\": \"DynamicMaster Code PK\",\n          \"ru-RU\": \"Код DynamicMaster ПК\",\n          \"tg-TG\": \"Рамзи DynamicMaster PK\"\n        },\n        \"columndatatype\": \"numeric\"\n      }, {\n        \"columnname\": \"nstatus\",\n        \"displayname\": {\n          \"en-US\": \"Status\",\n          \"ru-RU\": \"Статус\",\n          \"tg-TG\": \"Статус\"\n        },\n        \"columndatatype\": \"numeric\"\n      }];\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map((component, index) => {\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              jsqlquerycolumns.push({\n                \"columnname\": componentRow.label,\n                \"displayname\": componentRow.displayname,\n                \"isjsoncolumn\": true,\n                \"columndatatype\": \"string\",\n                \"jsoncolumnname\": \"jsonuidata\"\n              });\n              componentRow.unique && masteruniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              componentRow.unique && mastercombinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                }\n              });\n              templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\n              let filterinputtype = \"text\";\n              let comboDataInputObject = {};\n\n              if (componentRow.componentcode === designComponents.COMBOBOX) {\n                deleteValidation.push({\n                  \"smastertablename\": componentRow.table.item.stablename,\n                  \"smasterprimarykeyname\": componentRow.valuemember,\n                  \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\n                  \"stranstableforeignkeyname\": componentRow.valuemember,\n                  \"sjsonfieldname\": \"jsondata\",\n                  \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                  \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\n                });\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 1,\n                  \"viewvaluemember\": componentRow.label,\n                  \"valuemember\": componentRow.valuemember,\n                  \"displaymember\": componentRow.displaymember,\n                  \"mastertablename\": componentRow.source,\n                  \"needmasterdata\": true,\n                  \"columntypedesc\": \"textinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              if (componentRow.inputtype === 'combo') {\n                comboDataInputObject = {\n                  \"predefinedtablename\": componentRow.source,\n                  \"predefinedvaluemember\": componentRow.valuemember,\n                  \"predefineddisplaymember\": componentRow.displaymember,\n                  \"predefinedismultilingual\": componentRow.isMultiLingual ? componentRow.isMultiLingual : false,\n                  \"predefinedconditionalString\": \"\\\"\" + componentRow.valuemember + \"\\\"\" + \" > '0' \"\n                };\n                jnumericcolumns.push({\n                  \"columnname\": componentRow.displaymember,\n                  \"foreigntableformcode\": componentRow.table.item.nformcode,\n                  \"displayname\": componentRow.displayname,\n                  \"foriegntablePK\": componentRow.valuemember,\n                  \"tablecolumnname\": componentRow.label,\n                  \"foriegntablename\": componentRow.source,\n                  \"parentforeignPK\": componentRow.displaymember,\n                  ...comboDataInputObject\n                });\n                filterinputtype = \"predefinednumeric\";\n              }\n\n              if (componentRow.inputtype === 'date') {\n                filterinputtype = \"date\";\n                masterdatefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                masterdateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 2,\n                  \"columntypedesc\": \"datetime\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\n                filterinputtype = \"numeric\";\n\n                if (componentRow.inputtype === 'Numeric') {\n                  sampleQuerybuilderViewCondition.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"columntype\": 5,\n                    \"columntypedesc\": \"numericinput\"\n                  });\n                  sampleQuerybuilderViewSelect.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"languagecode\": false\n                  });\n                }\n              }\n\n              if (componentRow.inputtype === 'textinput' || componentRow.inputtype === 'email' || componentRow.inputtype === 'textarea' || componentRow.inputtype === 'radio') {\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 1,\n                  \"columntypedesc\": \"textinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              jdynamiccolumns.push({\n                default: componentRow.unique ? true : false,\n                filterinputtype,\n                columnname: componentRow.label,\n                displayname: componentRow.displayname,\n                ...comboDataInputObject\n              });\n\n              if (componentRow.mandatory || componentRow.templatemandatory) {\n                gridItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n                sampleAuditEditable.push(componentRow.label);\n              } else {\n                gridMoreItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              }\n\n              mastertemplatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n              sampleAuditFields.push(componentRow.label);\n              sampleAuditMultilingualFields.push({\n                [componentRow.label]: componentRow.displayname\n              });\n\n              if (componentRow.templatemandatory) {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: []\n                });\n              } else {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: [transactionStatus.DRAFT]\n                });\n              }\n\n              return null;\n            });\n          } else {\n            component.unique && masteruniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            component.unique && mastercombinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              }\n            });\n            templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\n            jsqlquerycolumns.push({\n              \"columnname\": component.label,\n              \"displayname\": component.displayname,\n              \"isjsoncolumn\": true,\n              \"columndatatype\": \"string\",\n              \"jsoncolumnname\": \"jsonuidata\"\n            });\n            let filterinputtype = \"text\";\n            let comboDataInputObject = {};\n            mastertemplatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            });\n            sampleAuditFields.push(component.label);\n            sampleAuditMultilingualFields.push({\n              [component.label]: component.displayname\n            });\n\n            if (component.componentcode === designComponents.COMBOBOX) {\n              deleteValidation.push({\n                \"smastertablename\": component.table.item.stablename,\n                \"smasterprimarykeyname\": component.valuemember,\n                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\n                \"stranstableforeignkeyname\": component.valuemember,\n                \"sjsonfieldname\": \"jsondata\",\n                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                \"nquerybuildertablecode\": component.nquerybuildertablecode\n              });\n            }\n\n            if (component.inputtype === 'combo') {\n              filterinputtype = \"predefinednumeric\";\n              comboDataInputObject = {\n                \"predefinedtablename\": component.source,\n                \"predefinedvaluemember\": component.valuemember,\n                \"predefineddisplaymember\": component.displaymember,\n                \"predefinedismultilingual\": component.isMultiLingual ? component.isMultiLingual : false,\n                \"predefinedconditionalString\": \"\\\"\" + component.valuemember + \"\\\"\" + \" > '0'\"\n              };\n              jnumericcolumns.push({\n                \"columnname\": component.label,\n                \"foreigntableformcode\": component.table.item.nformcode,\n                \"displayname\": component.displayname,\n                \"foriegntablePK\": component.valuemember,\n                // \"ismultilingual\": true,\n                //\"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\n                \"tablecolumnname\": component.label,\n                \"foriegntablename\": component.source,\n                \"parentforeignPK\": component.displaymember,\n                ...comboDataInputObject\n              });\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 1,\n                \"viewvaluemember\": component.label,\n                \"valuemember\": component.valuemember,\n                \"displaymember\": component.displaymember,\n                \"mastertablename\": component.source,\n                \"needmasterdata\": true,\n                \"columntypedesc\": \"textinput\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            if (component.inputtype === 'date') {\n              filterinputtype = \"date\";\n              masterdatefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              masterdateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 2,\n                \"columntypedesc\": \"datetime\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            if (component.inputtype === 'Numeric' || component.inputtype === 'radio') {\n              filterinputtype = \"numeric\";\n\n              if (component.inputtype === 'Numeric') {\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"columntype\": 5,\n                  \"columntypedesc\": \"numericinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"languagecode\": false\n                });\n              }\n            }\n\n            if (component.inputtype === 'textinput' || component.inputtype === 'email' || component.inputtype === 'textarea' || component.inputtype === 'radio') {\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 1,\n                \"columntypedesc\": \"textinput\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            jdynamiccolumns.push({\n              default: component.unique ? true : false,\n              columnname: component.label,\n              displayname: component.displayname,\n              filterinputtype,\n              ...comboDataInputObject\n            });\n\n            if (component.mandatory || component.templatemandatory) {\n              gridItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n              sampleAuditEditable.push(component.label);\n            } else {\n              gridMoreItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            }\n\n            if (component.templatemandatory) {\n              editable.push({\n                label: component.label,\n                editableuntill: []\n              });\n            } else {\n              editable.push({\n                label: component.label,\n                editableuntill: [transactionStatus.DRAFT]\n              });\n            }\n\n            return null;\n          }\n        });\n      }));\n\n      if (task === \"DeleteValidation\" && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\n        const selectedSubSampleTemplate = this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\n        const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\n\n        if (needsubsample) {\n          selectedSubSampleTemplate.map(row => row.children && row.children.map(column => {\n            column.children && column.children.map(component => {\n              if (component.hasOwnProperty('children')) {\n                component.children.map(componentRow => {\n                  if (componentRow.componentcode === designComponents.COMBOBOX) {\n                    deleteValidation.push({\n                      \"smastertablename\": componentRow.table.item.stablename,\n                      \"smasterprimarykeyname\": componentRow.valuemember,\n                      \"stranstablename\": \"registrationsample\",\n                      \"stranstableforeignkeyname\": componentRow.valuemember,\n                      // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\n                      \"sjsonfieldname\": \"jsondata\",\n                      \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                      \"nquerybuildertablecode\": componentRow.nquerybuildertablecode //\"nformcode\":componentRow.table.item.nformcode\n\n                    });\n                  }\n                });\n              } else {\n                if (component.componentcode === designComponents.COMBOBOX) {\n                  deleteValidation.push({\n                    \"smastertablename\": component.table.item.stablename,\n                    \"smasterprimarykeyname\": component.valuemember,\n                    \"stranstablename\": \"registrationsample\",\n                    \"stranstableforeignkeyname\": component.valuemember,\n                    //\"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\n                    \"sjsonfieldname\": \"jsondata\",\n                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                    //\"nformcode\":component.table.item.nformcode,\n                    \"nquerybuildertablecode\": component.nquerybuildertablecode\n                  });\n                }\n              }\n            });\n          }));\n        }\n      }\n\n      let jsondata = {\n        griditem: gridItem,\n        gridmoreitem: gridMoreItem,\n        masterdatefields,\n        masterdateconstraints,\n        masteruniquevalidation,\n        editable,\n        mastertemplatefields,\n        mastercombinationunique,\n        sampleAuditFields,\n        sampleAuditEditable,\n        sampleAuditMultilingualFields\n      };\n      return {\n        jsondata,\n        jdynamiccolumns,\n        jnumericcolumns,\n        templatePrimaryKey: \"ndynamicmastercode\",\n        deleteValidation,\n        jsqlquerycolumns,\n        sampleQuerybuilderViewCondition,\n        sampleQuerybuilderViewSelect\n      };\n    };\n\n    this.getJsondata = templatedata => {\n      //let displayFields = [];\n      //ALPD-533\n      let displayFields = [{\n        [designProperties.LABEL]: this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\n        //{ ...ARNOMULTILINGUAL },\n        [designProperties.VALUE]: 'sarno'\n      }];\n      let listItem = []; // let gridItem = [];\n\n      let gridItem = [{\n        [designProperties.LABEL]: this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\n        //{ ...ARNOMULTILINGUAL }, \n        [designProperties.VALUE]: \"sarno\"\n      }];\n      let gridMoreItem = [];\n      let editable = [];\n      let subsampleeditable = [];\n      let subsamplelistitem = [];\n      let sampledatefields = [{\n        [designProperties.VALUE]: 'dregdate',\n        dateonly: false\n      }];\n      let sampledateconstraints = [];\n      let subsampledatefields = [];\n      let subsampledateconstraints = [];\n      let samplesearchfields = [\"dregdate\", \"sarno\", \"stransdisplaystatus\", \"sspecname\"];\n      let subsamplesearchfields = [\"sarno\", \"ssamplearno\", \"stransdisplaystatus\"];\n      let sampletemplatefields = [];\n      let subsampletemplatefields = [];\n      let sampleuniquevalidation = [];\n      let subsampleuniquevalidation = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = [];\n      let samplecombinationunique = [];\n      let subsamplecombinationunique = [];\n      let sampleAuditFields = [];\n      let sampleAuditEditable = [];\n      let sampleAuditMultilingualFields = [];\n      let subSampleAuditFields = [];\n      let subSampleAuditEditable = [];\n      let subSampleAuditMultilingualFields = [];\n      let deleteValidation = []; //if(this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){        \n\n      sampleAuditFields = [\"sarno\"];\n      sampleAuditEditable = [\"sarno\"];\n      sampleAuditMultilingualFields = [{\n        \"sarno\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"] //{ ...ARNOMULTILINGUAL } \n\n      }];\n      subSampleAuditFields = [\"sarno\", \"ssamplearno\"];\n      subSampleAuditEditable = [\"sarno\", \"ssamplearno\"];\n      subSampleAuditMultilingualFields = [{\n        \"sarno\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"] //{ ...ARNOMULTILINGUAL } \n\n      }, {\n        \"ssamplearno\": this.props.Login.genericLabel[\"SubARNo\"] && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"] //{ ...SUBARNOMULTILINGUAL } \n\n      }]; //}\n      ////////////////////////////////////////////\n      // let sampleAuditFields = SAMPLEAUDITFIELDS;\n      // let sampleAuditEditable = SAMPLEAUDITEDITABLE\n      // let sampleAuditMultilingualFields = SAMPLEAUDITMULTILINGUALFIELDS\n      // let subSampleAuditFields = SUBSAMPLEAUDITFIELDS\n      // let subSampleAuditEditable = SUBSAMPLEAUDITEDITABLE\n      // let subSampleAuditMultilingualFields = SUBSAMPLEAUDITMULTILINGUALFIELDS;\n\n      let testdatefields = [{\n        [designProperties.VALUE]: 'dtransactiondate',\n        dateonly: false\n      }, {\n        [designProperties.VALUE]: 'dregdate',\n        dateonly: false\n      }]; //console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\n\n      this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.item.jsondata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map(component => {\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              componentRow.unique && subsampleuniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              componentRow.unique && subsamplecombinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                }\n              });\n              subsamplesearchfields.push(componentRow.label);\n              subsampletemplatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label,\n                [designProperties.PRIMARYKEY]: componentRow.valuemember,\n                [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode\n              });\n\n              if (componentRow.componentcode === designComponents.COMBOBOX) {\n                deleteValidation.push({\n                  \"smastertablename\": componentRow.table.item.stablename,\n                  \"smasterprimarykeyname\": componentRow.table.valuemember,\n                  \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registrationsample\",\n                  \"stranstableforeignkeyname\": componentRow.table.valuemember,\n                  \"sjsonfieldname\": \"jsondata\",\n                  \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                  \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\n                });\n              }\n\n              subSampleAuditFields.push(componentRow.label);\n              subSampleAuditMultilingualFields.push({\n                [componentRow.label]: componentRow.displayname\n              });\n\n              if (componentRow.mandatory) {\n                subSampleAuditEditable.push(componentRow.label);\n              }\n\n              if (componentRow.readonly) subsampleeditable.push({\n                label: componentRow.label,\n                editableuntill: []\n              });else subsampleeditable.push({\n                label: componentRow.label,\n                editableuntill: [transactionStatus.PREREGISTER]\n              });\n\n              if (componentRow.inputtype === 'date') {\n                subsampledatefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                subsampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\n              }\n\n              subsamplelistitem.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label,\n                [designProperties.LISTITEM]: componentRow.inputtype\n              });\n            });\n          } else {\n            component.unique && subsampleuniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            component.unique && subsamplecombinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              }\n            });\n            subsamplesearchfields.push(component.label);\n            subsampletemplatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label,\n              [designProperties.PRIMARYKEY]: component.valuemember,\n              [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode\n            });\n\n            if (component.componentcode === designComponents.COMBOBOX) {\n              deleteValidation.push({\n                \"smastertablename\": component.table.item.stablename,\n                \"smasterprimarykeyname\": component.table.valuemember,\n                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registrationsample\",\n                \"stranstableforeignkeyname\": component.table.valuemember,\n                // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\n                \"sjsonfieldname\": \"jsondata\",\n                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                //\"nformcode\":component.table.item.nformcode,\n                \"nquerybuildertablecode\": component.nquerybuildertablecode\n              });\n            }\n\n            subSampleAuditFields.push(component.label);\n            subSampleAuditMultilingualFields.push({\n              [component.label]: component.displayname\n            });\n\n            if (component.mandatory) {\n              subSampleAuditEditable.push(component.label);\n            }\n\n            if (component.readonly) subsampleeditable.push({\n              label: component.label,\n              editableuntill: []\n            });else subsampleeditable.push({\n              label: component.label,\n              editableuntill: [transactionStatus.PREREGISTER]\n            });\n\n            if (component.inputtype === 'date') {\n              subsampledatefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              subsampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\n            }\n\n            subsamplelistitem.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label,\n              [designProperties.LISTITEM]: component.inputtype\n            });\n          }\n        });\n      }));\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map(component => {\n          if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\n            if (component.hasOwnProperty('children')) {\n              if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\n                // let combinedField = [];\n                component.children.map(componentRow => {\n                  // combinedField.push(componentRow.label)\n                  jdynamiccolumns.push({\n                    columnname: componentRow.label,\n                    displayname: componentRow.displayname\n                  });\n\n                  if (componentRow.hasOwnProperty('child')) {\n                    componentRow.child.map(childData => {\n                      jnumericcolumns.push({\n                        \"columnname\": componentRow.label,\n                        \"displayname\": componentRow.displayname,\n                        \"foriegntablePK\": componentRow.label,\n                        // \"ismultilingual\": true,\n                        // \"conditionstring\": \" and nformcode in (140) \",\n                        \"tablecolumnname\": childData.tablecolumnname,\n                        \"foriegntablename\": \"dynamicmaster\"\n                      });\n                    });\n                  }\n\n                  if (componentRow.componentcode === designComponents.COMBOBOX) {\n                    deleteValidation.push({\n                      \"smastertablename\": componentRow.table.item.stablename,\n                      \"smasterprimarykeyname\": componentRow.table.valuemember,\n                      \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\n                      \"stranstableforeignkeyname\": componentRow.table.valuemember,\n                      //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\n                      \"sjsonfieldname\": \"jsondata\",\n                      \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                      //\"nformcode\":componentRow.table.item.nformcode,\n                      \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\n                    });\n                  }\n\n                  componentRow.unique && sampleuniquevalidation.push({\n                    [designProperties.LABEL]: componentRow.label\n                  });\n                  componentRow.unique && samplecombinationunique.push({\n                    [componentRow.label]: {\n                      [designProperties.LABEL]: componentRow.displayname,\n                      [designProperties.VALUE]: componentRow.label\n                    }\n                  });\n                  samplesearchfields.push(componentRow.label);\n                  sampletemplatefields.push({\n                    [designProperties.LABEL]: componentRow.displayname,\n                    [designProperties.VALUE]: componentRow.label,\n                    [designProperties.PRIMARYKEY]: componentRow.valuemember,\n                    [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode\n                  });\n                  sampleAuditFields.push(componentRow.label);\n                  sampleAuditMultilingualFields.push({\n                    [componentRow.label]: componentRow.displayname\n                  });\n\n                  if (componentRow.inputtype === 'date') {\n                    sampledatefields.push({\n                      [designProperties.VALUE]: componentRow.label,\n                      dateonly: componentRow.dateonly || false\n                    });\n                    sampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\n                  }\n\n                  displayFields.push({\n                    [designProperties.LABEL]: componentRow.displayname,\n                    [designProperties.VALUE]: componentRow.label,\n                    [designProperties.LISTITEM]: componentRow.inputtype\n                  });\n                  componentRow.templatemandatory && listItem.push({\n                    [designProperties.LABEL]: componentRow.displayname,\n                    [designProperties.VALUE]: componentRow.label,\n                    [designProperties.LISTITEM]: componentRow.inputtype\n                  });\n\n                  if (componentRow.mandatory || componentRow.templatemandatory) {\n                    gridItem.push({\n                      [designProperties.LABEL]: componentRow.displayname,\n                      [designProperties.VALUE]: componentRow.label\n                    });\n                    sampleAuditEditable.push(componentRow.label);\n                  } else {\n                    gridMoreItem.push({\n                      [designProperties.LABEL]: componentRow.displayname,\n                      [designProperties.VALUE]: componentRow.label,\n                      [designProperties.LISTITEM]: componentRow.inputtype\n                    });\n                  }\n\n                  if (componentRow.templatemandatory) {\n                    editable.push({\n                      label: componentRow.label,\n                      editableuntill: []\n                    });\n                  } else {\n                    if (componentRow.readonly) editable.push({\n                      label: componentRow.label,\n                      editableuntill: []\n                    });else editable.push({\n                      label: componentRow.label,\n                      editableuntill: [transactionStatus.PREREGISTER]\n                    });\n                  }\n\n                  return null;\n                }); // let fieldSet = combinedField.join(\"&\")\n                // displayFields.push(fieldSet);\n                // componentRow.templatemandatory && listItem.push(fieldSet)\n                // gridMoreItem.push(fieldSet);\n              }\n            } else {\n              if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\n                //console.log(\"componentRow main:\", component);\n                jdynamiccolumns.push({\n                  columnname: component.label,\n                  displayname: component.displayname\n                });\n\n                if (component.componentcode === designComponents.COMBOBOX) {\n                  deleteValidation.push({\n                    \"smastertablename\": component.table.item.stablename,\n                    \"smasterprimarykeyname\": component.table.valuemember,\n                    \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\n                    \"stranstableforeignkeyname\": component.table.valuemember,\n                    //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\n                    \"sjsonfieldname\": \"jsondata\",\n                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                    //\"nformcode\":component.table.item.nformcode,\n                    \"nquerybuildertablecode\": component.nquerybuildertablecode\n                  });\n                }\n\n                if (component.hasOwnProperty('child')) {\n                  component.child.map(childData => {\n                    jnumericcolumns.push({\n                      \"columnname\": component.label,\n                      \"displayname\": component.displayname,\n                      \"foriegntablePK\": component.label,\n                      // \"ismultilingual\": true,\n                      // \"conditionstring\": \" and nformcode in (140) \",\n                      \"tablecolumnname\": childData.tablecolumnname,\n                      \"foriegntablename\": \"dynamicmaster\"\n                    });\n                  });\n                }\n\n                component.unique && sampleuniquevalidation.push({\n                  [designProperties.LABEL]: component.label\n                });\n                component.unique && samplecombinationunique.push({\n                  [component.label]: {\n                    [designProperties.LABEL]: component.displayname,\n                    [designProperties.VALUE]: component.label\n                  }\n                });\n                samplesearchfields.push(component.label);\n                sampletemplatefields.push({\n                  [designProperties.LABEL]: component.displayname,\n                  [designProperties.VALUE]: component.label,\n                  [designProperties.PRIMARYKEY]: component.valuemember,\n                  [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode\n                });\n                sampleAuditFields.push(component.label);\n                sampleAuditMultilingualFields.push({\n                  [component.label]: component.displayname\n                });\n\n                if (component.inputtype === 'date') {\n                  sampledatefields.push({\n                    [designProperties.VALUE]: component.label,\n                    dateonly: component.dateonly || false\n                  });\n                  sampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\n                }\n\n                displayFields.push({\n                  [designProperties.LABEL]: component.displayname,\n                  [designProperties.VALUE]: component.label,\n                  [designProperties.LISTITEM]: component.inputtype\n                }); // component.templatemandatory \n                //&& listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\n\n                if (component.mandatory || component.templatemandatory) {\n                  gridItem.push({\n                    [designProperties.LABEL]: component.displayname,\n                    [designProperties.VALUE]: component.label,\n                    [designProperties.LISTITEM]: component.inputtype\n                  });\n                  listItem.push({\n                    [designProperties.LABEL]: component.displayname,\n                    [designProperties.VALUE]: component.label,\n                    [designProperties.LISTITEM]: component.inputtype,\n                    mandatory: true\n                  });\n                  sampleAuditEditable.push(component.label);\n                } else {\n                  gridMoreItem.push({\n                    [designProperties.LABEL]: component.displayname,\n                    [designProperties.VALUE]: component.label,\n                    [designProperties.LISTITEM]: component.inputtype\n                  });\n                }\n\n                if (component.templatemandatory) {\n                  editable.push({\n                    label: component.label,\n                    editableuntill: []\n                  });\n                } else {\n                  // editable.push({ label: component.label, editableuntill: [17] })\n                  if (component.readonly) editable.push({\n                    label: component.label,\n                    editableuntill: []\n                  });else editable.push({\n                    label: component.label,\n                    editableuntill: [transactionStatus.PREREGISTER]\n                  });\n                }\n\n                return null;\n              }\n            }\n          }\n        });\n      })); // if(this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){ \n      // displayFields.push({\n      //         [designProperties.LABEL]: { \"en-US\": \"Specification\", \"ru-RU\": \"Спецификация\", \"tg-TG\": \"Мушаххасот\" },\n      //         [designProperties.VALUE]: 'sspecname'\n      //     });       \n\n      displayFields.push({\n        //[designProperties.LABEL]: { \"en-US\": \"Reg. Date\", \"ru-RU\": \"Рег. Дата\", \"tg-TG\": \"Рег. Сана\" },\n        [designProperties.LABEL]: this.props.Login.genericLabel[\"RegistrationDate\"] && this.props.Login.genericLabel[\"RegistrationDate\"][\"jsondata\"][\"sdisplayname\"],\n        [designProperties.VALUE]: 'dregdate'\n      }); // }\n      //samplesearchfields.push(...staticSearchFields);\n      //console.log(\"reg sub type:\", this.props.Login);\n\n      const testListFields = { ...this.props.Login.testListFields\n      };\n      let obj = {\n        sampledisplayfields: displayFields,\n        samplelistitem: listItem,\n        samplegriditem: gridItem,\n        samplegridmoreitem: gridMoreItem,\n        subsamplelistitem,\n        sampledatefields,\n        subsampledatefields,\n        samplesearchfields,\n        subsamplesearchfields,\n        testdatefields,\n        sampledateconstraints,\n        subsampledateconstraints,\n        // sampleuniquevalidation,\n        //  subsamplecombinationunique,\n        samplecombinationunique,\n        testListFields,\n        deleteValidation //combinedsearchfields:[...samplesearchfields,...subsamplesearchfields,...testListFields[\"testsearchfields\"] ]\n\n      };\n      sampleAuditFields.push(\"dregdate\", \"stransdisplaystatus\");\n      sampleAuditEditable.push(\"stransdisplaystatus\");\n      subSampleAuditFields.push(\"stransdisplaystatus\");\n      subSampleAuditEditable.push(\"stransdisplaystatus\");\n      sampleAuditMultilingualFields.push({\n        \"dregdate\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"RegistrationDate\"][\"jsondata\"][\"sdisplayname\"]\n      }, //{ \"en-US\": \"Reg. Date\", \"ru-RU\": \"Рег. Дата\", \"tg-TG\": \"Рег. Сана\" } },\n      {\n        \"stransdisplaystatus\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"]\n      }); //{ \"en-US\": \"Transaction Status\", \"ru-RU\": \"Статус транзакции\", \"tg-TG\": \"Ҳолати транзаксия\" } });\n\n      subSampleAuditMultilingualFields.push({\n        \"stransdisplaystatus\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"] //{ \"en-US\": \"Transaction Status\", \"ru-RU\": \"Статус транзакции\", \"tg-TG\": \"Ҳолати транзаксия\" } \n\n      });\n      const SAMPLETEMPLATEFIELDS = [{\n        \"1\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"sarno\"\n      }, {\n        \"1\": this.props.Login.genericLabel[\"Specification\"] && this.props.Login.genericLabel[\"Specification\"][\"jsondata\"][\"sdisplayname\"],\n        // \"1\": {\n        //     \"en-US\": \"Specification\", \n        //     \"ru-RU\": \"Спецификация\", \n        //     \"tg-TG\": \"Мушаххасот\" \n        //     },\n        \"2\": \"sspecname\"\n      }, {\n        \"1\": this.props.Login.genericLabel[\"RegistrationDate\"] && this.props.Login.genericLabel[\"RegistrationDate\"][\"jsondata\"][\"sdisplayname\"],\n        // \"1\": {\n        //     \"en-US\": \"Reg. Date\",\n        //     \"ru-RU\": \"Рег. Датировать\",\n        //     \"tg-TG\": \"Рег. Сана\"\n        //     },\n        \"2\": \"dregdate\"\n      }, {\n        \"1\": this.props.Login.genericLabel[\"TransactionStatus\"] && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"],\n        // \"1\": {\n        //     \"en-US\": \"Transaction Status\",\n        //     \"ru-RU\": \"Статус транзакции\",\n        //     \"tg-TG\": \"Ҳолати транзаксия\"\n        //     },\n        \"2\": \"stransdisplaystatus\"\n      }];\n      const SUBSAMPLETEMPLATEFIELDS = [{\n        // \"1\": {\n        //     \"en-US\": \"AR.No.\",\n        //     \"ru-RU\": \"AR.No.\",\n        //     \"tg-TG\": \"AR.No.\"\n        //     },\n        \"1\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"sarno\"\n      }, {\n        // \"1\": {\n        //     \"en-US\": \"Sub AR.No.\",\n        //     \"ru-RU\": \"Sub AR.No.\",\n        //     \"tg-TG\": \"Зер AR.№\"\n        //     },\n        \"1\": this.props.Login.genericLabel[\"SubARNo\"] && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"ssamplearno\"\n      }, {\n        // \"1\": {\n        //     \"en-US\": \"Transaction Status\",\n        //     \"ru-RU\": \"Статус транзакции\",\n        //     \"tg-TG\": \"Ҳолати транзаксия\"\n        //     },\n        \"1\": this.props.Login.genericLabel[\"TransactionStatus\"] && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"stransdisplaystatus\"\n      }];\n      let jsondata = {\n        subsamplecombinationunique,\n        samplecombinationunique,\n        sampletemplatefields: [...SAMPLETEMPLATEFIELDS, ...sampletemplatefields],\n        subsampletemplatefields: [...SUBSAMPLETEMPLATEFIELDS, ...subsampletemplatefields],\n        //: subsamplesearchfields,\n        [formCode.SAMPLEREGISTRATION]: { ...obj,\n          sampleeditable: editable,\n          subsampleeditable,\n          samplecombinationunique,\n          subsamplecombinationunique\n        },\n        [formCode.RESULTENTRY]: { ...obj\n        },\n        [formCode.APPROVAL]: { ...obj\n        },\n        [formCode.JOBALLOCATION]: { ...obj,\n          samplegriditem: [...obj.samplegriditem, {\n            // \"1\": {\n            //     \"en-US\": \"Section\",\n            //     \"ru-RU\": \"Раздел\",\n            //     \"tg-TG\": \"Ҷудокунӣ\"\n            // },\n            \"1\": this.props.Login.genericLabel[\"Section\"] && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Section\"\n          } //...obj.samplegriditem,   \n          ],\n          samplesearchfields: [...obj.samplesearchfields, //{\n          \"Section\" //},\n          ],\n          testgriditem: [{\n            // \"1\": {\n            //     \"en-US\": \"Test Synonym\",\n            //     \"ru-RU\": \"Тестовый синоним\",\n            //     \"tg-TG\": \"Синоними санҷиш\"\n            // },\n            \"1\": this.props.Login.genericLabel[\"TestSynonym\"] && this.props.Login.genericLabel[\"TestSynonym\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"stestsynonym\"\n          }, {\n            // \"1\": {\n            //     \"en-US\": \"Section\",\n            //     \"ru-RU\": \"Раздел\",\n            //     \"tg-TG\": \"Ҷудокунӣ\"\n            // },\n            \"1\": this.props.Login.genericLabel[\"Section\"] && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"ssectionname\"\n          }, {\n            // \"1\": {\n            //     \"en-US\": \"Technique\",\n            //     \"ru-RU\": \"Техника\",\n            //     \"tg-TG\": \"Техника\"\n            // },\n            \"1\": this.props.Login.genericLabel[\"Technique\"] && this.props.Login.genericLabel[\"Technique\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Technique\"\n          }, {\n            // \"1\": {\n            //     \"en-US\": \"Users\",\n            //     \"ru-RU\": \"Пользователи\",\n            //     \"tg-TG\": \"Истифодабарандагон\"\n            // },\n            \"1\": this.props.Login.genericLabel[\"Users\"] && this.props.Login.genericLabel[\"Users\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Users\"\n          }, {\n            // \"1\": {\n            //     \"en-US\": \"Instrument Category\",\n            //     \"ru-RU\": \"Категория инструмента\",\n            //     \"tg-TG\": \"Категорияи асбобҳо\"\n            // },\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentCategory\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"InstrumentCategory\"\n          }, {\n            // \"1\": {\n            //     \"en-US\": \"Instrument\",\n            //     \"ru-RU\": \"Инструмент\",\n            //     \"tg-TG\": \"Асбоб\"\n            // },\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Instrument\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Instrument\"\n          }],\n          samplelistitem: [...obj.samplelistitem, // {\n          //     \"1\": this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"],\n          //     \"2\": \"Sample Category\"\n          // },\n          {// \"1\": {\n            //     \"en-US\": \"Sample Category\",\n            //     \"ru-RU\": \"Sample Category\",\n            //     \"tg-TG\": \"Sample Category\"\n            // },\n            //\"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"],\n            //\"2\": \"Sample Category\"\n          }, {\n            // \"1\": {\n            //     \"en-US\": \"Section\",\n            //     \"ru-RU\": \"Раздел\",\n            //     \"tg-TG\": \"Ҷудокунӣ\"\n            // },\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Section\"\n          }],\n          subsamplelistitem: [...obj.subsamplelistitem, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"ssectionname\"\n          }],\n          testdisplayfields: [{\n            // \"1\": {\n            //     \"en-US\": \"Test Synonym\",\n            //     \"ru-RU\": \"Тестовый синоним\",\n            //     \"tg-TG\": \"Синоними санҷиш\"\n            // },\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"TestSynonym\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"stestsynonym\"\n          }, {\n            // \"1\": {\n            //     \"en-US\": \"Section\",\n            //     \"ru-RU\": \"Раздел\",\n            //     \"tg-TG\": \"Ҷудокунӣ\"\n            //},\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"ssectionname\"\n          }, {\n            // \"1\": {\n            //     \"en-US\": \"Technique\",\n            //     \"ru-RU\": \"Техника\",\n            //     \"tg-TG\": \"Техника\"\n            // },\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Technique\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Technique\"\n          }, {\n            // \"1\": {\n            //     \"en-US\": \"Users\",\n            //     \"ru-RU\": \"Пользователи\",\n            //     \"tg-TG\": \"Истифодабарандагон\"\n            // },\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Users\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Users\"\n          }, {\n            // \"1\": {\n            //     \"en-US\": \"Instrument Category\",\n            //     \"ru-RU\": \"Категория инструмента\",\n            //     \"tg-TG\": \"Категорияи асбобҳо\"\n            // },\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentCategory\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"InstrumentCategory\"\n          }, {\n            // \"1\": {\n            //     \"en-US\": \"Instrument\",\n            //     \"ru-RU\": \"Инструмент\",\n            //     \"tg-TG\": \"Асбоб\"\n            // },\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Instrument\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Instrument\"\n          }],\n          testgridmoreitem: [{\n            // \"1\": {\n            //     \"en-US\": \"User Start Date\",\n            //     \"ru-RU\": \"Дата начала работы пользователя\",\n            //     \"tg-TG\": \"Санаи оғози корбар\"\n            // },\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"UserStartDate\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"UserStartDate\"\n          }, {\n            // \"1\": {\n            //     \"en-US\": \"User End Date\",\n            //     \"ru-RU\": \"Дата окончания пользователя\",\n            //     \"tg-TG\": \"Санаи анҷоми корбар\"\n            // },\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"UserEndDate\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"UserEndDate\"\n          }, {\n            // \"1\": {\n            //     \"en-US\": \"User Duration\",\n            //     \"ru-RU\": \"Продолжительность пользователя\",\n            //     \"tg-TG\": \"Давомнокии корбар\"\n            // },\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"UserDuration\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"UserDuration\"\n          }, {\n            // \"1\": {\n            //     \"en-US\": \"Instrument Start Date\",\n            //     \"ru-RU\": \"Дата запуска инструмента\",\n            //     \"tg-TG\": \"Санаи оғози асбоб\"\n            // },\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentStartDate\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"InstrumentStartDate\"\n          }, {\n            // \"1\": {\n            //     \"en-US\": \"Instrument End Date\",\n            //     \"ru-RU\": \"Дата окончания инструмента\",\n            //     \"tg-TG\": \"Санаи анҷоми асбоб\"\n            // },\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentEndDate\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"InstrumentEndDate\"\n          }, {\n            // \"1\": {\n            //     \"en-US\": \"Instrument Duration\",\n            //     \"ru-RU\": \"Продолжительность инструмента\",\n            //     \"tg-TG\": \"Давомнокии асбоб\"\n            // },\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentDuration\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"InstrumentDuration\"\n          }, {\n            // \"1\": {\n            //     \"en-US\": \"Comments\",\n            //     \"ru-RU\": \"Комментарии\",\n            //     \"tg-TG\": \"Шарҳҳо\"\n            // },\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Comments\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Comments\"\n          }] //...obj, \n\n        },\n        //[formCode.JOBALLOCATION]: {...obj,},\n        [formCode.MYJOBS]: { ...obj\n        },\n        [formCode.WORKLIST]: { ...obj\n        },\n        [formCode.BATCHCREATION]: {\n          samplegriditem: [{\n            //\"1\": { ...ARNOMULTILINGUAL },\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"sarno\"\n          }, ...obj.samplegriditem],\n          subsamplelistitem: [{\n            // \"1\": { ...SUBARNOMULTILINGUAL },\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"ssamplearno\"\n          }, ...obj.subsamplelistitem],\n          ...obj\n        },\n        [formCode.TESTWISEMYJOBS]: { ...obj\n        },\n        [formCode.RELEASE]: { ...obj,\n          // sampledisplayfields: [\n          //     {  \"1\":  {...ARNOMULTILINGUAL},\n          //     \"2\": \"sarno\"\n          // },\n          // ...obj.sampledisplayfields\n          // ],\n          // samplegriditem: [\n          //     {\n          //         \"1\":  {...ARNOMULTILINGUAL},\n          //         \"2\": \"sarno\"\n          //     },\n          //     ...obj.samplegriditem\n          // ],\n          subsamplelistitem: [{\n            //\"1\": { ...SUBARNOMULTILINGUAL },\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"ssamplearno\"\n          }, ...obj.subsamplelistitem] // },\n\n        },\n        sampleAuditEditable,\n        sampleAuditFields,\n        sampleAuditMultilingualFields,\n        subSampleAuditEditable,\n        subSampleAuditFields,\n        subSampleAuditMultilingualFields,\n        deleteValidation\n      }; //console.log(\"jsondata:\", jsondata);\n\n      return jsondata;\n    };\n\n    this.onChangeToggle = (event, dataItem, field, dataIndex, formCode, operation) => {\n      let designData = this.props.Login.designData;\n      let dataResult = this.props.Login.dataResult;\n\n      if (operation === 'configureaudit') {\n        designData = this.props.Login.auditFieldDesignData;\n        dataResult = this.props.Login.auditFieldDataResult;\n      }\n\n      let tableName = \"registration\";\n\n      if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\n        tableName = \"dynamicmaster\";\n      }\n\n      if (formCode === undefined) {\n        dataResult[dataIndex][field] = event.target.checked;\n\n        if (event.target.checked) {\n          designData[field].splice(dataIndex, 0, dataItem.realData);\n        } else {\n          designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1);\n        }\n      } else {\n        //dataResult[formCode][dataIndex][field] = event.target.checked;\n        if (event.target.checked) {\n          if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_MAXIMUMSELECTIONEXCEEDS\"\n            }));\n          } else {\n            if (field === 'sampledisplayfields') {\n              dataResult[formCode][dataIndex][field] = event.target.checked;\n              designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label);\n              designData[formCode][field].splice(dataIndex, 0, dataItem.realData);\n            } else if (field === 'sampleauditfields') {\n              dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\n\n              if (designData[formCode][tableName]['sampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                designData[formCode][tableName]['sampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n                designData[formCode][tableName]['multilingualfields'].splice(dataIndex, 0, {\n                  [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL]\n                });\n              }\n            } else if (field === 'sampleauditeditfields') {\n              dataResult[formCode][tableName][dataIndex][\"sampleauditfields\"] = event.target.checked;\n              dataResult[formCode][tableName][dataIndex][\"sampleauditeditfields\"] = event.target.checked;\n\n              if (designData[formCode][tableName]['sampleauditeditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                designData[formCode][tableName][field].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n\n                if (designData[formCode][tableName]['sampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                  designData[formCode][tableName]['sampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n                  designData[formCode][tableName]['multilingualfields'].splice(dataIndex, 0, {\n                    [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL]\n                  });\n                }\n              }\n            } else if (field === 'subsampleauditfields') {\n              dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\n\n              if (designData[formCode]['registrationsample']['subsampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                designData[formCode]['registrationsample']['subsampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n                designData[formCode]['registrationsample']['multilingualfields'].splice(dataIndex, 0, {\n                  [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL]\n                });\n              }\n            } else if (field === 'subsampleauditeditfields') {\n              dataResult[formCode]['registrationsample'][dataIndex][\"subsampleauditfields\"] = event.target.checked;\n              dataResult[formCode]['registrationsample'][dataIndex][\"subsampleauditeditfields\"] = event.target.checked;\n\n              if (designData[formCode]['registrationsample']['subsampleauditeditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                designData[formCode]['registrationsample'][field].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n\n                if (designData[formCode]['registrationsample']['subsampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                  designData[formCode]['registrationsample']['subsampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n                  designData[formCode]['registrationsample']['multilingualfields'].splice(dataIndex, 0, {\n                    [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL]\n                  });\n                }\n              }\n            } else {\n              dataResult[formCode][dataIndex][field] = event.target.checked;\n              designData[formCode][field].splice(dataIndex, 0, dataItem.realData);\n            }\n          }\n        } else {\n          if (field === 'sampledisplayfields') {\n            dataResult[formCode][dataIndex][field] = event.target.checked;\n            designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1);\n            const index = designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index !== -1) {\n              designData[formCode]['samplesearchfields'].splice(index, 1);\n            }\n          } else if (field === 'sampleauditfields') {\n            dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\n            const index = designData[formCode][tableName][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index !== -1) {\n              designData[formCode][tableName][field].splice(index, 1);\n            }\n\n            const index1 = designData[formCode][tableName]['multilingualfields'].map(object => Object.keys(object)[0]).indexOf(dataItem.label);\n\n            if (index1 !== -1) {\n              designData[formCode][tableName]['multilingualfields'].splice(index1, 1);\n            }\n\n            const index3 = designData[formCode][tableName][\"sampleauditeditfields\"].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index3 !== -1) {\n              designData[formCode][tableName][\"sampleauditeditfields\"].splice(index3, 1);\n            }\n\n            dataResult[formCode][tableName][dataIndex][\"sampleauditeditfields\"] = event.target.checked;\n          } else if (field === 'sampleauditeditfields') {\n            dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\n            const index4 = designData[formCode][tableName][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index4 !== -1) {\n              designData[formCode][tableName][field].splice(index4, 1);\n            }\n          } else if (field === 'subsampleauditfields') {\n            dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\n            const index1 = designData[formCode]['registrationsample'][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index1 !== -1) {\n              designData[formCode][\"registrationsample\"][field].splice(index1, 1);\n            }\n\n            const index2 = designData[formCode][\"registrationsample\"]['multilingualfields'].map(object => Object.keys(object)[0]).indexOf(dataItem.label);\n\n            if (index2 !== -1) {\n              designData[formCode][\"registrationsample\"]['multilingualfields'].splice(index2, 1);\n            }\n\n            const index3 = designData[formCode]['registrationsample'][\"subsampleauditeditfields\"].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index3 !== -1) {\n              designData[formCode][\"registrationsample\"][\"subsampleauditeditfields\"].splice(index3, 1);\n            }\n\n            dataResult[formCode][\"registrationsample\"][dataIndex][\"subsampleauditeditfields\"] = event.target.checked;\n          } else if (field === 'subsampleauditeditfields') {\n            dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\n            const index1 = designData[formCode]['registrationsample'][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index1 !== -1) {\n              designData[formCode][\"registrationsample\"][field].splice(index1, 1);\n            }\n          } else {\n            dataResult[formCode][dataIndex][field] = event.target.checked;\n            designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.realData[designProperties.VALUE]), 1);\n          }\n        }\n      }\n\n      let data = {\n        designData,\n        dataResult\n      };\n\n      if (operation === 'configureaudit') {\n        data = {\n          auditFieldDesignData: designData,\n          auditFieldDataResult: dataResult\n        };\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: { ...data\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onApproveSaveClick = () => {\n      this.onApproveClick();\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      // console.log(\"save:\", this.props.Login.masterData.realRegSubTypeValue);\n      //console.log(\"data:\", this.props.Login.editFieldDesignData)\n      let inputData = [];\n      let operation = this.props.Login.operation;\n      const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\n\n      if (operation === 'Approve') {\n        this.onApproveClick();\n      } else {\n        if (operation === 'configure' || operation === 'configuresubsample') {\n          inputData = {\n            designtemplatemapping: {\n              ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n              jsondataobj: this.props.Login.designData\n            },\n            userinfo: this.props.Login.userInfo\n          };\n          operation = 'configure';\n        } else if (operation === 'configureedit' || operation === 'configuresubsampleedit') {\n          let designData = this.props.Login.editFieldDesignData;\n          let formCodeArray = Object.keys(this.state.selectedRecord);\n          formCodeArray.forEach(formCode => {\n            const data = this.state.selectedRecord[formCode];\n            let editableData = designData[formCode]['sampleeditable'];\n            ;\n\n            if (operation === 'configuresubsampleedit') {\n              editableData = designData[formCode]['subsampleeditable'];\n              ;\n            }\n\n            Object.keys(data).map(label => {\n              const editableuntil = [];\n              data[label].map(statusItem => editableuntil.push(statusItem.value));\n              const index = editableData.findIndex(item => item.label === label);\n\n              if (index === -1) {\n                editableData.push({\n                  \"label\": label,\n                  \"editableuntill\": editableuntil\n                });\n              } else {\n                editableData[index] = {\n                  \"label\": label,\n                  \"editableuntill\": editableuntil\n                };\n              } //designData[formCode]['sampleeditable'].push({\"label\":label, \"editableuntill\":editableuntil});\n\n            });\n          });\n          inputData = {\n            designtemplatemapping: {\n              ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n              jsondataobj: designData\n            },\n            userinfo: this.props.Login.userInfo\n          };\n          operation = 'configure';\n        } else if (operation === 'configureunique') {\n          let designData = this.props.Login.designData; //  let formCodeArray = Object.keys(this.state.selectedRecord);\n\n          const dataList = [];\n          const dataListsubsample = [];\n          this.props.Login.dataList.map(x => {\n            if (Object.keys(x).length !== 0) {\n              dataList.push(x);\n            }\n          });\n\n          if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\n            designData['mastercombinationunique'] = dataList;\n          } else {\n            designData['samplecombinationunique'] = dataList;\n            designData[formCode.SAMPLEREGISTRATION]['samplecombinationunique'] = dataList;\n            this.props.Login.dataListSubSample.map(x => {\n              if (Object.keys(x).length !== 0) {\n                dataListsubsample.push(x);\n              }\n            });\n            designData['subsamplecombinationunique'] = dataListsubsample;\n            designData[formCode.SAMPLEREGISTRATION]['subsamplecombinationunique'] = dataListsubsample;\n          }\n\n          inputData = {\n            designtemplatemapping: {\n              ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n              jsondataobj: designData\n            },\n            userinfo: this.props.Login.userInfo\n          };\n          operation = 'configure';\n        } else if (operation === 'configureaudit') {\n          //console.log(\"auditFieldDesignData:\", this.props.Login);\n          inputData = {\n            //dynamicaudit: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n            auditdata: this.props.Login.auditData,\n            //nregtypecode:this.props.Login.masterData.realRegTypeValue.value, \n            //nregsubtypecode:this.props.Login.masterData.realRegSubTypeValue.value, \n            //nformcode:43, stablename:'registration',\n            // },\n            userinfo: this.props.Login.userInfo\n          }; //operation = 'configure';\n        } else if (operation === 'configuresendtostore') {\n          // const sampleQty = new Map();\n          //  const sampleUnit = new Map();\n          // let inputData=[];\n          //  let subsamplefields = [];\n          //  let senttostoragefields=[];\n          let samqty = {\n            \"1\": this.state.selectedRecord.Quantity !== undefined && this.state.selectedRecord.Quantity !== null ? this.state.selectedRecord.Quantity.item.displayname : \"\",\n            \"2\": this.state.selectedRecord.Quantity !== undefined && this.state.selectedRecord.Quantity !== null ? this.state.selectedRecord.Quantity.label : \"\"\n          };\n          let samunit = {\n            \"1\": this.state.selectedRecord.Unit !== undefined && this.state.selectedRecord.Unit !== null ? this.state.selectedRecord.Unit.item.displayname : \"\",\n            \"2\": this.state.selectedRecord.Unit !== undefined && this.state.selectedRecord.Unit !== null ? this.state.selectedRecord.Unit.label : \"\"\n          };\n          let subsamqty = {\n            \"1\": this.state.selectedRecord.SubQuantity !== undefined && this.state.selectedRecord.SubQuantity !== null ? this.state.selectedRecord.SubQuantity.item.displayname : \"\",\n            \"2\": this.state.selectedRecord.SubQuantity !== undefined && this.state.selectedRecord.SubQuantity !== null ? this.state.selectedRecord.SubQuantity.label : \"\"\n          };\n          let subsamunit = {\n            \"1\": this.state.selectedRecord.SubUnit !== undefined && this.state.selectedRecord.SubUnit !== null ? this.state.selectedRecord.SubUnit.item.displayname : \"\",\n            \"2\": this.state.selectedRecord.SubUnit !== undefined && this.state.selectedRecord.SubUnit !== null ? this.state.selectedRecord.SubUnit.label : \"\"\n          };\n          let sample = {\n            \"nsampleqty\": samqty,\n            \"nunitcode\": samunit\n          };\n          let subsample = {\n            \"nsampleqty\": subsamqty,\n            \"nunitcode\": subsamunit\n          };\n          let str = {\n            \"samplefields\": sample,\n            \"subsamplefields\": subsample\n          };\n          let senttostoragefields = {\n            \"senttostoragefields\": str\n          }; // console.log(JSON.stringify(senttostoragefields));\n\n          inputData = {\n            \"userinfo\": this.props.Login.userInfo,\n            \"senttostoragefields\": senttostoragefields,\n            \"updatesendtostore\": senttostoragefields.senttostoragefields,\n            \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          };\n        } else if (operation === 'approve') {\n          let {\n            jsondata,\n            jdynamiccolumns,\n            jnumericcolumns,\n            templatePrimaryKey,\n            deleteValidation,\n            jsqlquerycolumns,\n            sampleQuerybuilderViewCondition,\n            sampleQuerybuilderViewSelect\n          } = this.getGridJsondata(this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\"); // console.log(\"deleteValidation 2:\", deleteValidation);\n\n          inputData = {\n            jdynamiccolumns,\n            jnumericcolumns,\n            jsqlquerycolumns,\n            sprimarykeyname: templatePrimaryKey,\n            sampleQuerybuilderViewCondition,\n            sampleQuerybuilderViewSelect\n          };\n          inputData[\"userinfo\"] = this.props.Login.userInfo;\n          inputData[\"designtemplatemapping\"] = {\n            \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\"\n          };\n          inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\n          inputData[\"deletevalidationlist\"] = deleteValidation;\n          inputData[\"sviewname\"] = this.state.selectedRecord.sviewname;\n        } else {\n          // console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\n          let {\n            jsondata,\n            jdynamiccolumns,\n            jnumericcolumns,\n            templatePrimaryKey\n          } = this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? this.getGridJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata) : {};\n          let auditData = {};\n          let dataObject = {};\n\n          if (this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\n            dataObject = this.getJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata); // console.log(\"json:\",dataObject);\n\n            auditData = {\n              \"registration\": {\n                editmandatoryfields: dataObject[\"sampleAuditEditable\"],\n                auditcapturefields: dataObject[\"sampleAuditFields\"],\n                multilingualfields: dataObject[\"sampleAuditMultilingualFields\"]\n              }\n            };\n\n            if (needsubsample) {\n              auditData = { ...auditData,\n                registrationsample: {\n                  editmandatoryfields: dataObject[\"subSampleAuditEditable\"],\n                  auditcapturefields: dataObject[\"subSampleAuditFields\"],\n                  multilingualfields: dataObject[\"subSampleAuditMultilingualFields\"]\n                }\n              };\n              delete dataObject[\"subSampleAuditEditable\"];\n              delete dataObject[\"subSampleAuditFields\"];\n              delete dataObject[\"subSampleAuditMultilingualFields\"];\n            }\n\n            delete dataObject[\"sampleAuditEditable\"];\n            delete dataObject[\"sampleAuditFields\"];\n            delete dataObject[\"sampleAuditMultilingualFields\"];\n          } else {\n            // if(this.props.Login.masterData.realSampleValue.value === SampleType.Masters){\n            auditData = {\n              \"dynamicmaster\": {\n                editmandatoryfields: jsondata[\"sampleAuditEditable\"],\n                auditcapturefields: jsondata[\"sampleAuditFields\"],\n                multilingualfields: jsondata[\"sampleAuditMultilingualFields\"]\n              }\n            };\n          }\n\n          inputData = {\n            \"userinfo\": this.props.Login.userInfo,\n            \"ncontrolcode\": this.props.Login.ncontrolCode,\n            \"nreactregtemplatecode\": this.state.selectedRecord.nreactregtemplatecode.value,\n            \"nsampletypecode\": this.props.Login.masterData.realSampleValue.value,\n            \"nregtypecode\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\n            \"nregsubtypecode\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\n            \"sregsubtypename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"\",\n            \"nformcode\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\n            \"nsubsampletemplatecode\": this.state.selectedRecord.nsubsampletemplatecode ? this.state.selectedRecord.nsubsampletemplatecode.value : -1,\n            \"jsondataobj\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? jsondata : dataObject,\n            auditdata: auditData,\n            needsubsample: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false\n          };\n          inputData[\"designtemplatemapping\"] = {\n            \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n          };\n\n          if (this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.value === -2) {\n            let qf_jsonData = {\n              sdisplayname: {}\n            };\n            let qbt_jsonData = {\n              tablename: {}\n            };\n            this.props.Login.languageList.map(lang => {\n              qf_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord.sformname;\n              qbt_jsonData['tablename'][lang.value] = this.state.selectedRecord.sformname;\n            });\n            let qm_jsonData = {\n              sdisplayname: {}\n            };\n            let nmodulecode = 0;\n            let smoduledisplayname = \"\";\n\n            if (this.state.selectedRecord[\"nnewmodule\"].value === transactionStatus.YES) {\n              smoduledisplayname = this.state.selectedRecord[\"nmodulecode\"];\n              this.props.Login.languageList.map(lang => {\n                qm_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord[\"nmodulecode\"];\n              });\n            } else {\n              nmodulecode = this.state.selectedRecord[\"nmodulecode\"].value;\n            }\n\n            inputData = { ...inputData,\n              sformname: this.state.selectedRecord.sformname,\n              sregtemplatename: this.state.selectedRecord.nreactregtemplatecode.label,\n              nmodulecode,\n              smoduledisplayname,\n              qm_jsonData,\n              qf_jsonData,\n              qbt_jsonData,\n              sprimarykeyname: templatePrimaryKey,\n              jdynamiccolumns,\n              jnumericcolumns\n            };\n          } else {\n            inputData = { ...inputData,\n              sformname: this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label,\n              sregtemplatename: this.state.selectedRecord.nreactregtemplatecode.label,\n              ssubregtemplatename: this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.label,\n              sprimarykeyname: templatePrimaryKey,\n              jdynamiccolumns,\n              jnumericcolumns\n            };\n          } // this.designtemplatemappingFieldList.map(item => {\n          //     return inputData[\"designtemplatemapping\"][item] = this.state.selectedRecord[item]\n          // });\n\n        } //console.log(\"input:\", inputData);\n\n\n        let postParam = undefined;\n        const inputParam = {\n          classUrl: \"designtemplatemapping\",\n          methodUrl: \"DesignTemplateMapping\",\n          inputData: inputData,\n          operation,\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef,\n          dataList: [],\n          dataListCount: [],\n          dataListCountSubSample: [],\n          dataListSubSample: []\n        };\n\n        if (operation === 'configureaudit') {\n          inputParam[\"methodUrl\"] = \"DynamicAudit\";\n          inputParam[\"operation\"] = \"configure\"; //operation = 'configure';\n        }\n\n        if (operation === 'configuresendtostore') {\n          inputParam[\"methodUrl\"] = \"ConfigureSendToStore\";\n          inputParam[\"operation\"] = \"update\"; //operation = 'configure';\n        }\n\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              dataList: [],\n              dataListCount: [],\n              dataListCountSubSample: [],\n              dataListSubSample: []\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.state = {\n      isOpen: false,\n      designtemplatemappingData: [],\n      masterStatus: \"\",\n      error: \"\",\n      //selectedRecord: {},\n      operation: \"\",\n      screenName: undefined,\n      userLogged: true,\n      selectedDesignTemplateMapping: undefined,\n      sidebarview: false,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showAccordian: true,\n      selectedInput: \"\",\n      masterTypeArray: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_NEWMASTER\"\n        }),\n        value: 1,\n        item: {\n          nmastertypecode: 1,\n          smastertype: this.props.intl.formatMessage({\n            id: \"IDS_NEWMASTER\"\n          })\n        }\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EXISTINGMASTER\"\n        }),\n        value: 2,\n        item: {\n          nmastertypecode: 2,\n          smastertype: this.props.intl.formatMessage({\n            id: \"IDS_EXISTINGMASTER\"\n          })\n        }\n      }],\n      newMasterForm: {\n        value: -2,\n        label: \"-\"\n      },\n      moduleTypeArray: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_NEWMODULE\"\n        }),\n        value: 3\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EXISTINGMODULE\"\n        }),\n        value: 4\n      }]\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.searchFieldList = [\"sregtemplatename\", \"sversionno\", \"stransdisplaystatus\"];\n    this.designtemplatemappingFieldList = ['ndesigntemplatemappingcode', 'nsampletypecode', 'nformcode', 'nregtypecode', 'nregsubtypecode', 'nformwisetypecode', 'nreactregtemplatecode', 'ntransactionstatus', 'nversionno']; //'nmahcode',\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    console.log(\"this.props.Login:\", this.props.Login);\n    const Layout = this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata;\n    const subSampleLayout = this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata; // let userStatusCSS = \"outline-secondary\";\n    // if (this.props.Login.masterData.selectedDesignTemplateMapping ? this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.ACTIVE\n    //     || this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED : false) {\n    //     userStatusCSS = \"outline-success\";\n    // }\n    // else if (this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.RETIRED) {\n    //     userStatusCSS = \"outline-danger\";\n    // }\n\n    const addId = this.state.controlMap.has(\"AddDesignTemplateMapping\") && this.state.controlMap.get(\"AddDesignTemplateMapping\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode;\n    const sampleFieldId = this.state.controlMap.has(\"ConfigureSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSampleDisplayFields\").ncontrolcode;\n    const sampleEditFieldId = this.state.controlMap.has(\"ConfigureSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSampleEditableFields\").ncontrolcode;\n    const subSampleFieldId = this.state.controlMap.has(\"ConfigureSubSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSubSampleDisplayFields\").ncontrolcode;\n    const subSampleEditFieldId = this.state.controlMap.has(\"ConfigureSubSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSubSampleEditableFields\").ncontrolcode;\n    const combinationUniqueFieldId = this.state.controlMap.has(\"ConfigureCombinationUniqueFields\") && this.state.controlMap.get(\"ConfigureCombinationUniqueFields\").ncontrolcode;\n    const sendToStoreId = this.state.controlMap.has(\"ConfigureSendToStore\") && this.state.controlMap.get(\"ConfigureSendToStore\").ncontrolcode; //const sampleAuditConfigId = this.state.controlMap.has(\"ConfigureSampleAuditFields\") && this.state.controlMap.get(\"ConfigureSampleAuditFields\").ncontrolcode;\n\n    const actionList = [];\n\n    if (this.state.userRoleControlRights.indexOf(sampleFieldId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGSAMPLEDISPLAY,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGUREDISPLAYFIELDS\"\n        }),\n        \"controlId\": sampleFieldId\n      });\n    }\n\n    if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.state.userRoleControlRights.indexOf(sampleEditFieldId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGSAMPLEEDIT,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGUREEDITFIELDS\"\n        }),\n        \"controlId\": sampleEditFieldId\n      });\n\n      if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true) {\n        if (this.state.userRoleControlRights.indexOf(subSampleFieldId) !== -1) {\n          actionList.push({\n            \"method\": templateMappingAction.CONFIGSUBSAMPLEDISPLAY,\n            \"value\": this.props.intl.formatMessage({\n              id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\"\n            }),\n            \"controlId\": subSampleFieldId\n          });\n        }\n\n        if (this.state.userRoleControlRights.indexOf(subSampleEditFieldId) !== -1) {\n          actionList.push({\n            \"method\": templateMappingAction.CONFIGSUBSAMPLEEDIT,\n            \"value\": this.props.intl.formatMessage({\n              id: \"IDS_CONFIGURSUBSAMPLEEEDITFIELDS\"\n            }),\n            \"controlId\": subSampleEditFieldId\n          });\n        }\n      }\n    }\n\n    if (this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGUNIQUE,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGURECOMBINATIONUNIQUEFIELDS\"\n        }),\n        \"controlId\": combinationUniqueFieldId\n      });\n    }\n\n    if (this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) !== -1) {\n      //sampleAuditConfigId\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGSAMPLEAUDIT,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGUREAUDITFIELDS\"\n        }),\n        \"controlId\": combinationUniqueFieldId\n      });\n    }\n\n    if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.state.userRoleControlRights.indexOf(sendToStoreId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGSENDTOSTORE,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGURESENDTOSTORE\"\n        }),\n        \"controlId\": sendToStoreId\n      });\n    }\n\n    const filterParam = {\n      inputListName: \"DesignTemplateMapping\",\n      selectedObject: \"selectedDesignTemplateMapping\",\n      primaryKeyField: \"ndesigntemplatemappingcode\",\n      fetchUrl: \"designtemplatemapping/getDesignTemplateMapping\",\n      fecthInputObject: {\n        nregtypecode: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1) : -1,\n        nregsubtypecode: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1) : -1,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData[\"realSampleValue\"] ? this.props.Login.masterData[\"realSampleValue\"].value : -1,\n        //nregtypecode: this.props.Login.masterData[\"realRegTypeValue\"] ? this.props.Login.masterData[\"realRegTypeValue\"].value : -1,\n        //nregsubtypecode: this.props.Login.masterData[\"realRegSubTypeValue\"] ? this.props.Login.masterData[\"realRegSubTypeValue\"].value : -1,\n        nformcode: this.props.Login.masterData[\"realFormValue\"] ? this.props.Login.masterData[\"realFormValue\"].value : -1\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    this.validationColumnList = [{\n      \"idsName\": \"IDS_TEMPLATENAME\",\n      \"dataField\": \"nreactregtemplatecode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }]; //ALPD-903\n\n    if (this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value !== SampleType.Masters && this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true) {\n      this.validationColumnList.push({\n        \"idsName\": \"IDS_SUBSAMPLETEMPLATE\",\n        \"dataField\": \"nsubsampletemplatecode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      });\n    }\n\n    const mandatoryFields = [];\n    this.validationColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\"); // let breadCrumbDataDate = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate,\n    //     this.props.Login.masterData && this.props.Login.masterData.ToDate,\n    //     this.props.Login.userInfo)\n    // const breadCrumbData = [\n\n    let breadCrumbData = [];\n    this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value === 4 ? breadCrumbData = [{\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\n    }, //defaultMasterType\n    // {\n    //     \"label\": \"IDS_MASTERTYPE\",\n    //     \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\n    // },\n    {\n      \"label\": \"IDS_SCREEN\",\n      \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\n    }] : breadCrumbData = [{\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\n    }, {\n      \"label\": \"IDS_REGTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.label : \"-\"\n    }, {\n      \"label\": \"IDS_REGSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"-\"\n    }];\n    const addParam = {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_DESIGNTEMPLATEMAPPING\"\n      }),\n      operation: \"create\",\n      userInfo: this.props.Login.userInfo,\n      realSampleValue: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value : -1,\n      realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\n      realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\n      controlId: addId,\n      moduleTypeArray: this.state.moduleTypeArray\n    }; // console.log(\"render, props, state:\", this.props.Login);\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.state.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      onClick: () => this.setState({\n        sidebarview: !this.state.sidebarview\n      }),\n      className: \"sidebar-view-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 29\n      }\n    }, !this.state.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 37\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_DESIGNTEMPLATEMAPPING\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.DesignTemplateMapping,\n      getMasterDetail: designtemplatemapping => this.props.getDesignTemplateMappingDetail(designtemplatemapping, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedDesignTemplateMapping,\n      primaryKeyField: \"ndesigntemplatemappingcode\",\n      mainField: \"sregtemplatename\",\n      firstField: \"sversionno\",\n      secondField: \"stransdisplaystatus\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: true,\n      openModal: () => this.props.getDesignTemplateMappingComboService(addParam),\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      filterComponent: [{\n        \"IDS_TEMPLATEFILTER\": /*#__PURE__*/React.createElement(TemplateFilter, {\n          formatMessage: this.props.intl.formatMessage,\n          filterSampletype: this.state.listSampletype || [],\n          filterRegistrationType: this.state.listRegistrationType || [],\n          filterRegistrationSubType: this.state.listRegistrationSubType || [],\n          filterForms: this.state.listForms || [],\n          defaultsampletype: this.props.Login.masterData[\"defaultsampletype\"] || {},\n          defaultregsubtype: this.props.Login.masterData[\"defaultregsubtype\"] || [],\n          defaultregtype: this.props.Login.masterData[\"defaultregtype\"] || [],\n          defaultform: this.props.Login.masterData.defaultform || [],\n          filterComboChange: this.filterComboChange,\n          masterTypeArray: this.props.Login.masterData.masterTypeArray || [],\n          defaultMasterType: this.props.Login.masterData.defaultMasterType || {},\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.state.sidebarview ? '8' : \"10\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping.length > 0 && this.props.Login.masterData.selectedDesignTemplateMapping ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.sregtemplatename)), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      className: \"text-muted font-weight-normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 10,\n      className: \"d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 61\n      }\n    }, `${this.props.intl.formatMessage({\n      id: \"IDS_VERSION\"\n    })} : ${this.props.Login.masterData.selectedDesignTemplateMapping.sversionno}`, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT ? \"outline-secondary\" : this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-danger\"} btn-sm mx-md-3 mx-sm-2`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.stransdisplaystatus))), /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category float-right icon-group-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }) // data-for=\"tooltip_list_wrap\"\n      // onClick={() => this.onApproveClick()}\n      ,\n      onClick: e => this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? this.openModal(approveId, 'Approve') : this.onApproveClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \" btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //    data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1 // onClick={() => this.ConfirmDelete(this.state.approveId)}>\n      ,\n      onClick: () => this.ConfirmDelete(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 69\n      }\n    })), actionList.length > 0 ? /*#__PURE__*/React.createElement(CustomPopover, {\n      nav: true,\n      data: actionList,\n      Button: false,\n      hideIcon: true,\n      btnClasses: \"btn-circle btn_grey ml-2\",\n      textKey: \"value\",\n      icon: faChevronCircleDown // toolTip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURE\" })}\n      ,\n      dynamicButton: value => this.actionMethod(value),\n      userRoleControlRights: this.state.userRoleControlRights,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 69\n      }\n    }) : \"\"))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.nformcode > 0 && /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_MODULENAME\",\n      message: \"Module Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 76\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 65\n      }\n    }, \"   \", this.props.Login.masterData.selectedDesignTemplateMapping.smodulename))), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_FORMNAME\",\n      message: \"Form Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.sformname))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(CustomTabs, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 61\n      }\n    }))))) : \"\"))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal // size={(this.props.Login.operation === 'configure'\n      //     || this.props.Login.operation === 'configuresubsample'\n      //     || this.props.Login.operation === 'configureaudit') ? \"xl\" : \"lg\"}\n      ,\n      size: this.props.Login.screenName === \"\" || this.props.Login.screenName === 'Template Mapping' || this.props.Login.operation === 'Approve' ? 'lg' : \"xl\" //\"xl\"\n      ,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.operation === 'Approve' ? [{\n        \"idsName\": \"IDS_VIEWNAME\",\n        \"dataField\": \"sviewname\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }] : this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' || this.props.Login.operation === 'configureedit' || this.props.Login.operation === 'configuresubsampleedit' || this.props.Login.operation === 'configureunique' || this.props.Login.operation === 'configureaudit' || this.props.Login.operation === 'configuresendtostore' ? [] : mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === 'Approve' ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_VIEWNAME\"\n        }),\n        name: \"sviewname\",\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_VIEWNAME\"\n        }),\n        value: this.state.selectedRecord[\"sviewname\"],\n        isMandatory: true,\n        maxLength: 30,\n        onPaste: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 33\n        }\n      }))) : this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' ? /*#__PURE__*/React.createElement(ConfigureScreenFields, {\n        operation: this.props.Login.operation,\n        designData: this.props.Login.designData || {},\n        inputParam: this.props.Login.inputParam,\n        dataResult: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ? this.props.Login.dataResult || [] : this.props.Login.dataResult || {},\n        onChangeToggle: this.onChangeToggle,\n        approvedRegSubTypeVersion: this.props.Login.approvedRegSubTypeVersion,\n        selectedSampleType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 33\n        }\n      }) : this.props.Login.operation === 'configureedit' || this.props.Login.operation === 'configuresubsampleedit' ? /*#__PURE__*/React.createElement(ConfigureEditFields, {\n        operation: this.props.Login.operation,\n        designData: this.props.Login.editFieldDesignData || {},\n        inputParam: this.props.Login.inputParam,\n        dataResult: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ? this.props.Login.editFieldDataResult || [] : this.props.Login.editFieldDataResult || {},\n        selectedRecord: this.state.selectedRecord || {} // onChangeToggle={this.onChangeToggle}\n        ,\n        onComboChange: this.onConfigureComboChange // approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\n        ,\n        selectedSampleType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 37\n        }\n      }) : this.props.Login.operation === 'configureaudit' ? /*#__PURE__*/React.createElement(ConfigureAuditFields, {\n        operation: this.props.Login.operation,\n        needSubSample: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false,\n        designData: this.props.Login.auditFieldDesignData || {},\n        auditTable: this.props.Login.auditTable || {},\n        auditData: this.props.Login.auditData || {},\n        inputParam: this.props.Login.inputParam,\n        formName: this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label,\n        dataResult: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ? this.props.Login.auditFieldDataResult || [] : this.props.Login.auditFieldDataResult || {},\n        selectedRecord: this.state.selectedRecord || {},\n        onChangeToggle: this.onChangeToggle,\n        selectedSampleType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 41\n        }\n      }) : this.props.Login.operation === 'configureunique' ? /*#__PURE__*/React.createElement(ConfigureUniqueFields, {\n        designData: this.props.Login.designData || {},\n        inputParam: this.props.Login.inputParam // dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\n        //     this.props.Login.dataResult || [] :\n        //     this.props.Login.dataResult || {}}\n        ,\n        dataList: this.props.Login.dataList || [],\n        dataListCount: this.props.Login.dataListCount || [],\n        dataListsubsample: this.props.Login.dataListSubSample || [],\n        dataListCountsubsample: this.props.Login.dataListCountSubSample || [],\n        onInputOnChange: this.onInputOnChangeForUnique,\n        addCombinatonUnique: this.addCombinatonUnique,\n        deleteCombinationUnique: this.deleteCombinationUnique,\n        slanguagetypecode: this.props.Login.userInfo.slanguagetypecode,\n        approvedRegSubTypeVersion: this.props.Login.approvedRegSubTypeVersion,\n        selectedTemplateType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 45\n        }\n      }) : this.props.Login.operation === 'configuresendtostore' ? /*#__PURE__*/React.createElement(ConfigureSendToStoreFields, {\n        operation: this.props.Login.operation,\n        SampleName: this.props.Login.samplename || {},\n        needSubSample: this.props.Login.needsubsample || {},\n        MainSampleList: this.props.Login.SampleTemplateNumber || [],\n        MainSubSampleList: this.props.Login.SampleTemplatecombobox,\n        SampleList: this.props.Login.subSampleTemplateNumber || [],\n        SubSampleList: this.props.Login.subSampleTemplateCombobox,\n        selectedRecord: this.state.selectedRecord || {} // onChangeToggle={this.onChangeToggle}\n        ,\n        onComboChange: this.onComboChange,\n        selectedValue: this.props.Login.selectedValue[0],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 49\n        }\n      }) : this.state.showSynonym ? /*#__PURE__*/React.createElement(AddSynonym, {\n        selectedFieldRecord: this.state.selectedRecord,\n        onInputOnChange: this.onInputOnChange,\n        languages: this.props.Login.languageList || [],\n        fieldName: \"nmodulecode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 53\n        }\n      }) : /*#__PURE__*/React.createElement(AddDesignTemplateMapping, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        formatMessage: this.props.intl.formatMessage,\n        designtemplatemappingList: this.props.Login.designtemplatemappingList,\n        subSampleTemplateList: this.props.Login.subSampleTemplateList,\n        selectedDesignTemplateMapping: this.props.Login.masterData.selectedDesignTemplateMapping || {},\n        operation: this.props.Login.operation,\n        userLogged: this.props.Login.userLogged,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        nformcode: this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\n        needSubSample: this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? false : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false,\n        designTemplateQualisModule: this.props.Login.designTemplateQualisModule,\n        language: this.props.Login.language,\n        moduleTypeArray: this.state.moduleTypeArray || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 55\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      selectedRecord,\n      userRoleControlRights,\n      controlMap,\n      listSampletype,\n      listRegistrationType,\n      listRegistrationSubType,\n      listForms\n    } = this.state;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        updateState = true;\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      updateState = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    const selectedInput = {};\n    let Taglstsampletype;\n    let TaglistRegistrationType;\n    let TaglistRegistrationSubType;\n    let ListFormsMap;\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      updateState = true;\n\n      if (this.props.Login.masterData.SampleTypes) {\n        Taglstsampletype = constructOptionList(this.props.Login.masterData.SampleTypes || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", undefined);\n        listSampletype = Taglstsampletype.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.registrationTypes) {\n        TaglistRegistrationType = constructOptionList(this.props.Login.masterData.registrationTypes || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, undefined);\n        listRegistrationType = TaglistRegistrationType.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.registrationSubTypes) {\n        TaglistRegistrationSubType = constructOptionList(this.props.Login.masterData.registrationSubTypes || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", undefined);\n        listRegistrationSubType = TaglistRegistrationSubType.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.qualisforms) {\n        ListFormsMap = constructOptionList(this.props.Login.masterData.qualisforms || [], \"nformcode\", \"sdisplayname\", undefined, undefined, undefined);\n        listForms = ListFormsMap.get(\"OptionList\");\n      }\n    }\n\n    if (updateState) {\n      this.setState({\n        selectedRecord,\n        controlMap,\n        userRoleControlRights,\n        listSampletype,\n        listRegistrationType,\n        listRegistrationSubType,\n        selectedInput,\n        listForms\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  editFieldConfigService,\n  updateStore,\n  getDesignTemplateMappingDetail,\n  getMappedFieldProps,\n  getDesignTemplateMappingComboService,\n  filterColumnData,\n  auditFieldConfigService,\n  reloadDesignTemplateMapping,\n  getTMPFilterRegType,\n  getTMPFilterRegSubType,\n  getTMPFilterSubmit,\n  combinationUniqueConfigService,\n  mappingFieldConfigService\n})(injectIntl(DesignTemplateMapping));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/designtemplatemapping/DesignTemplateMapping.jsx"],"names":["React","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faTrashAlt","faThumbsUp","faChevronCircleDown","connect","injectIntl","FormattedMessage","toast","callService","crudMaster","validateEsignCredential","updateStore","getDesignTemplateMappingDetail","getMappedFieldProps","editFieldConfigService","auditFieldConfigService","mappingFieldConfigService","getDesignTemplateMappingComboService","filterColumnData","reloadDesignTemplateMapping","getTMPFilterRegType","getTMPFilterRegSubType","getTMPFilterSubmit","combinationUniqueConfigService","TemplateFilter","ContentPanel","ReadOnlyText","getControlMap","showEsign","constructOptionList","validateCreateView","ListMaster","SlideOutModal","AddDesignTemplateMapping","Esign","DEFAULT_RETURN","BreadcrumbComponent","ListWrapper","designProperties","formCode","SampleType","transactionStatus","templateMappingAction","designComponents","AddSynonym","Affix","ConfirmMessage","ConfigureScreenFields","ConfigureEditFields","ConfigureUniqueFields","ConfigureAuditFields","CustomPopover","ConfigureSendToStoreFields","FormInput","CustomTabs","mapStateToProps","state","Login","DesignTemplateMapping","Component","constructor","props","sidebarExpandCollapse","setState","sidebarview","filterComboChange","event","fieldname","inputData","userinfo","userInfo","nflag","nsampletypecode","parseInt","value","masterData","defaultsampletype","inputParam","Masters","masterTypeArray","updateInfo","typeName","data","defaultMasterType","qualisforms","defaultform","newMasterForm","nregtypecode","nregsubtypecode","label","defaultregtype","defaultregsubtype","openModal","ncontrolcode","operation","selectedRecord","selectedId","screenName","displayName","onTabChange","tabProps","tabDetail","console","log","Layout","selectedDesignTemplateMapping","jsondata","subSampleLayout","subsamplejsondata","sampleType","realSampleValue","needsubsample","realRegSubTypeValue","item","nneedsubsample","tabMap","Map","set","map","children","length","column","component","hasOwnProperty","componentrow","inputtype","displayname","slanguagetypecode","actionMethod","method","CONFIGSAMPLEDISPLAY","openFieldConfiguration","controlId","CONFIGSAMPLEEDIT","editFieldConfiguration","CONFIGSUBSAMPLEDISPLAY","CONFIGSUBSAMPLEEDIT","CONFIGUNIQUE","openCombinationUniqueFieldConfiguration","CONFIGSAMPLEAUDIT","auditFieldConfiguration","CONFIGSENDTOSTORE","mappingFieldConfiguration","reloadData","searchRef","current","NA","realRegTypeValue","nformcode","realFormValue","openFilter","showFilter","closeFilter","onFilterSubmit","onApproveClick","ntransactionstatus","RETIRED","ncontrolCode","controlMap","has","get","jdynamiccolumns","jnumericcolumns","templatePrimaryKey","deleteValidation","jsqlquerycolumns","sampleQuerybuilderViewCondition","sampleQuerybuilderViewSelect","getGridJsondata","sprimarykeyname","postParam","undefined","Value","sviewname","inputListName","selectedObject","primaryKeyField","classUrl","methodUrl","saveType","esignNeeded","userRoleControlRights","loadEsign","screenData","warn","intl","formatMessage","id","ConfirmDelete","confirmMessage","confirm","deleteTemplate","DRAFT","primaryKeyValue","ndesigntemplatemappingcode","fetchUrl","fecthInputObject","deleteCombinationUnique","index","eventKey","dataList","subsampledataList","dataListCount","subsampledataListCount","slice","addCombinatonUnique","designData","dataListSubSample","dataListCountSubSample","push","controlCode","designtemplatemapping","napprovalconfigcode","validateEsign","sreason","nreasoncode","spredefinedreason","password","closeModal","onComboChange","comboData","fieldName","onConfigureComboChange","onInputOnChange","target","type","name","checked","YES","NO","onInputOnChangeForUnique","radiotext","multilinguallabel","LABEL","VALUE","handleDateChange","dateName","dateValue","templatedata","task","gridItem","gridMoreItem","masterdatefields","masterdateconstraints","masteruniquevalidation","mastercombinationunique","editable","mastertemplatefields","sampleAuditFields","sampleAuditEditable","sampleAuditMultilingualFields","row","componentRow","unique","filterinputtype","comboDataInputObject","componentcode","COMBOBOX","table","stablename","valuemember","nquerybuildertablecode","displaymember","source","isMultiLingual","dateonly","dateConstraintArraySQL","default","columnname","mandatory","templatemandatory","editableuntill","selectedSubSampleTemplate","griditem","gridmoreitem","getJsondata","displayFields","genericLabel","listItem","subsampleeditable","subsamplelistitem","sampledatefields","sampledateconstraints","subsampledatefields","subsampledateconstraints","samplesearchfields","subsamplesearchfields","sampletemplatefields","subsampletemplatefields","sampleuniquevalidation","subsampleuniquevalidation","samplecombinationunique","subsamplecombinationunique","subSampleAuditFields","subSampleAuditEditable","subSampleAuditMultilingualFields","testdatefields","nsubsampletemplatecode","PRIMARYKEY","QUERYBUILDERTABLECODE","readonly","PREREGISTER","LISTITEM","child","childData","tablecolumnname","testListFields","obj","sampledisplayfields","samplelistitem","samplegriditem","samplegridmoreitem","SAMPLETEMPLATEFIELDS","SUBSAMPLETEMPLATEFIELDS","SAMPLEREGISTRATION","sampleeditable","RESULTENTRY","APPROVAL","JOBALLOCATION","testgriditem","testdisplayfields","testgridmoreitem","MYJOBS","WORKLIST","BATCHCREATION","TESTWISEMYJOBS","RELEASE","onChangeToggle","dataItem","field","dataIndex","dataResult","auditFieldDesignData","auditFieldDataResult","tableName","splice","realData","findIndex","x","indexOf","index1","object","Object","keys","index3","index4","index2","onApproveSaveClick","onSaveClick","formRef","jsondataobj","editFieldDesignData","formCodeArray","forEach","editableData","editableuntil","statusItem","dataListsubsample","auditdata","auditData","samqty","Quantity","samunit","Unit","subsamqty","SubQuantity","subsamunit","SubUnit","sample","subsample","str","senttostoragefields","nreactregtemplatecode","dataObject","editmandatoryfields","auditcapturefields","multilingualfields","registrationsample","nmastersitecode","qf_jsonData","sdisplayname","qbt_jsonData","tablename","languageList","lang","sformname","qm_jsonData","nmodulecode","smoduledisplayname","sregtemplatename","ssubregtemplatename","isOpen","designtemplatemappingData","masterStatus","error","userLogged","showAccordian","selectedInput","nmastertypecode","smastertype","moduleTypeArray","createRef","searchFieldList","designtemplatemappingFieldList","getDerivedStateFromProps","render","addId","deleteId","approveId","sampleFieldId","sampleEditFieldId","subSampleFieldId","subSampleEditFieldId","combinationUniqueFieldId","sendToStoreId","actionList","filterParam","validationColumnList","mandatoryFields","breadCrumbData","addParam","searchedData","listSampletype","listRegistrationType","listRegistrationSubType","listForms","sversionno","APPROVED","stransdisplaystatus","e","smodulename","approvedRegSubTypeVersion","editFieldDataResult","auditTable","samplename","SampleTemplateNumber","SampleTemplatecombobox","subSampleTemplateNumber","subSampleTemplateCombobox","selectedValue","showSynonym","designtemplatemappingList","subSampleTemplateList","designTemplateQualisModule","language","componentDidUpdate","previousProps","updateState","values","Taglstsampletype","TaglistRegistrationType","TaglistRegistrationSubType","ListFormsMap","SampleTypes","registrationTypes","registrationSubTypes","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faThumbsUp, faChevronCircleDown } from '@fortawesome/free-solid-svg-icons';//,faUserTimes, faTrash\r\n//import { falistUl } from '@fortawesome/free-regular-svg-icons';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getDesignTemplateMappingDetail,\r\n    getMappedFieldProps, editFieldConfigService, auditFieldConfigService, mappingFieldConfigService,\r\n    getDesignTemplateMappingComboService, filterColumnData, reloadDesignTemplateMapping,\r\n    getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit, combinationUniqueConfigService\r\n} from '../../actions';\r\nimport TemplateFilter from './TemplateFilter';\r\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\r\nimport { getControlMap, showEsign, constructOptionList,validateCreateView } from '../../components/CommonScript';//searchData, sortData,\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\n// import DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddDesignTemplateMapping from './AddDesignTemplateMapping'\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport {\r\n    designProperties, formCode, SampleType, transactionStatus,\r\n    templateMappingAction, //SAMPLEAUDITFIELDS, SAMPLEAUDITEDITABLE, SAMPLEAUDITMULTILINGUALFIELDS,\r\n    // SUBSAMPLEAUDITFIELDS, SUBSAMPLEAUDITEDITABLE, SUBSAMPLEAUDITMULTILINGUALFIELDS,\r\n    //SAMPLETEMPLATEFIELDS, \r\n    //SUBSAMPLETEMPLATEFIELDS, \r\n    designComponents,\r\n    //ARNOMULTILINGUAL, SUBARNOMULTILINGUAL\r\n} from '../../components/Enumeration';\r\n\r\nimport AddSynonym from '../../components/droparea/AddSynonym';\r\nimport { Affix } from 'rsuite';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport ConfigureScreenFields from './ConfigureScreenFields';\r\nimport ConfigureEditFields from './ConfigureEditFields';\r\nimport ConfigureUniqueFields from './ConfigureUniqueFields.jsx';\r\nimport ConfigureAuditFields from './ConfigureAuditFields';\r\nimport CustomPopover from '../../components/customPopover';\r\nimport ConfigureSendToStoreFields from './configureSendToStoreFields'\r\n//import { faCaretDown } from '@fortawesome/free-solid-svg-icons';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass DesignTemplateMapping extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // const dataState = {\r\n        //     skip: 0,\r\n        //     take: 10,\r\n        // };\r\n\r\n        this.state = {\r\n            isOpen: false,\r\n            designtemplatemappingData: [],\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            //selectedRecord: {},\r\n            operation: \"\",\r\n\r\n            screenName: undefined,\r\n            userLogged: true,\r\n            selectedDesignTemplateMapping: undefined,\r\n            sidebarview:false,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            selectedInput: \"\",\r\n            masterTypeArray: [{ label: this.props.intl.formatMessage({ id: \"IDS_NEWMASTER\" }), value: 1, item: { nmastertypecode: 1, smastertype: this.props.intl.formatMessage({ id: \"IDS_NEWMASTER\" }) } },\r\n            { label: this.props.intl.formatMessage({ id: \"IDS_EXISTINGMASTER\" }), value: 2, item: { nmastertypecode: 2, smastertype: this.props.intl.formatMessage({ id: \"IDS_EXISTINGMASTER\" }) } }],\r\n            newMasterForm: { value: -2, label: \"-\" },\r\n            moduleTypeArray: [{ label: this.props.intl.formatMessage({ id: \"IDS_NEWMODULE\" }), value: 3 },\r\n            { label: this.props.intl.formatMessage({ id: \"IDS_EXISTINGMODULE\" }), value: 4 }]\r\n\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.searchFieldList = [\"sregtemplatename\", \"sversionno\", \"stransdisplaystatus\"];\r\n\r\n        this.designtemplatemappingFieldList = ['ndesigntemplatemappingcode', 'nsampletypecode', 'nformcode',\r\n            'nregtypecode', 'nregsubtypecode', 'nformwisetypecode', 'nreactregtemplatecode', 'ntransactionstatus', 'nversionno'];//'nmahcode',\r\n    }\r\n    sidebarExpandCollapse = () => {\r\n        this.setState({\r\n            sidebarview: true\r\n        })          \r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    filterComboChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            // let uRL = \"\";\r\n            let inputData = [];\r\n            if (fieldname === \"sampleType\") {\r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 1,\r\n                    nsampletypecode: parseInt(event.value),\r\n\r\n                }\r\n                let masterData = { ...this.props.Login.masterData, defaultsampletype: event }\r\n                let inputParam = { masterData, inputData }\r\n                if (event.value === SampleType.Masters) {\r\n                    const masterTypeArray = this.state.masterTypeArray\r\n\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                masterTypeArray,\r\n                                defaultMasterType: masterTypeArray[0],\r\n                                qualisforms: [], defaultform: this.state.newMasterForm,\r\n                                nregtypecode: -1, nregsubtypecode: -1\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    inputParam[\"masterData\"][\"defaultform\"] = { value: -1, label: \"-\" };\r\n                    this.props.getTMPFilterRegType(inputParam)\r\n                }\r\n            }\r\n            else if (fieldname === \"registrationType\") {\r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n\r\n                    nregtypecode: parseInt(event.value),\r\n                    nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\r\n\r\n                }\r\n                let masterData = { ...this.props.Login.masterData, defaultregtype: event }\r\n                let inputParam = { masterData, inputData }\r\n                this.props.getTMPFilterRegSubType(inputParam)\r\n\r\n            } else if (fieldname === \"registrationSubType\") {\r\n\r\n                let masterData = { ...this.props.Login.masterData, defaultregsubtype: event }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData }\r\n                }\r\n\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else if (fieldname === \"masterType\") {\r\n\r\n                let masterData = { ...this.props.Login.masterData, defaultMasterType: event }\r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 1,\r\n                    nsampletypecode: SampleType.Masters,\r\n                }\r\n\r\n                let inputParam = { masterData, inputData }\r\n                if (event.value === 1) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { masterData: { ...masterData, qualisforms: [], defaultform: this.state.newMasterForm } }\r\n                    }\r\n\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.getTMPFilterRegType(inputParam)\r\n                }\r\n\r\n            } else {\r\n                let masterData = { ...this.props.Login.masterData, defaultform: event }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData }\r\n                }\r\n\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        console.log(\"this.props.Login:\",this.props.Login);\r\n        const Layout = this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n            this.props.Login.masterData.selectedDesignTemplateMapping.jsondata;\r\n\r\n        const subSampleLayout = this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n            this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata\r\n\r\n        // let userStatusCSS = \"outline-secondary\";\r\n        // if (this.props.Login.masterData.selectedDesignTemplateMapping ? this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.ACTIVE\r\n        //     || this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED : false) {\r\n        //     userStatusCSS = \"outline-success\";\r\n        // }\r\n        // else if (this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.RETIRED) {\r\n        //     userStatusCSS = \"outline-danger\";\r\n        // }\r\n\r\n        const addId = this.state.controlMap.has(\"AddDesignTemplateMapping\") && this.state.controlMap.get(\"AddDesignTemplateMapping\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode;\r\n        const sampleFieldId = this.state.controlMap.has(\"ConfigureSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSampleDisplayFields\").ncontrolcode;\r\n        const sampleEditFieldId = this.state.controlMap.has(\"ConfigureSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSampleEditableFields\").ncontrolcode;\r\n        const subSampleFieldId = this.state.controlMap.has(\"ConfigureSubSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSubSampleDisplayFields\").ncontrolcode;\r\n        const subSampleEditFieldId = this.state.controlMap.has(\"ConfigureSubSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSubSampleEditableFields\").ncontrolcode;\r\n        const combinationUniqueFieldId = this.state.controlMap.has(\"ConfigureCombinationUniqueFields\") && this.state.controlMap.get(\"ConfigureCombinationUniqueFields\").ncontrolcode;\r\n        const sendToStoreId = this.state.controlMap.has(\"ConfigureSendToStore\") && this.state.controlMap.get(\"ConfigureSendToStore\").ncontrolcode;\r\n        //const sampleAuditConfigId = this.state.controlMap.has(\"ConfigureSampleAuditFields\") && this.state.controlMap.get(\"ConfigureSampleAuditFields\").ncontrolcode;\r\n\r\n\r\n        const actionList = [];\r\n        if (this.state.userRoleControlRights.indexOf(sampleFieldId) !== -1) {\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGSAMPLEDISPLAY, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGUREDISPLAYFIELDS\" }), \"controlId\": sampleFieldId })\r\n        }\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters &&\r\n            this.state.userRoleControlRights.indexOf(sampleEditFieldId) !== -1) {\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGSAMPLEEDIT, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGUREEDITFIELDS\" }), \"controlId\": sampleEditFieldId })\r\n\r\n            if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true) {\r\n                if (this.state.userRoleControlRights.indexOf(subSampleFieldId) !== -1) {\r\n                    actionList.push({ \"method\": templateMappingAction.CONFIGSUBSAMPLEDISPLAY, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\" }), \"controlId\": subSampleFieldId })\r\n                }\r\n\r\n                if (this.state.userRoleControlRights.indexOf(subSampleEditFieldId) !== -1) {\r\n                    actionList.push({ \"method\": templateMappingAction.CONFIGSUBSAMPLEEDIT, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURSUBSAMPLEEEDITFIELDS\" }), \"controlId\": subSampleEditFieldId })\r\n                }\r\n            }\r\n        }\r\n        if (this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) !== -1) {\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGUNIQUE, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURECOMBINATIONUNIQUEFIELDS\" }), \"controlId\": combinationUniqueFieldId })\r\n        }\r\n        if (this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) !== -1) {//sampleAuditConfigId\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGSAMPLEAUDIT, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGUREAUDITFIELDS\" }), \"controlId\": combinationUniqueFieldId })\r\n        }\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters &&\r\n            this.state.userRoleControlRights.indexOf(sendToStoreId) !== -1) {\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGSENDTOSTORE, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURESENDTOSTORE\" }), \"controlId\": sendToStoreId })\r\n        }\r\n\r\n\r\n        const filterParam = {\r\n            inputListName: \"DesignTemplateMapping\",\r\n            selectedObject: \"selectedDesignTemplateMapping\",\r\n            primaryKeyField: \"ndesigntemplatemappingcode\",\r\n            fetchUrl: \"designtemplatemapping/getDesignTemplateMapping\",\r\n            fecthInputObject: {\r\n                nregtypecode: this.props.Login.masterData.realSampleValue ?\r\n                    this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1) : -1,\r\n                nregsubtypecode: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1) : -1,\r\n\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData[\"realSampleValue\"] ? this.props.Login.masterData[\"realSampleValue\"].value : -1,\r\n                //nregtypecode: this.props.Login.masterData[\"realRegTypeValue\"] ? this.props.Login.masterData[\"realRegTypeValue\"].value : -1,\r\n                //nregsubtypecode: this.props.Login.masterData[\"realRegSubTypeValue\"] ? this.props.Login.masterData[\"realRegSubTypeValue\"].value : -1,\r\n                nformcode: this.props.Login.masterData[\"realFormValue\"] ? this.props.Login.masterData[\"realFormValue\"].value : -1,\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: this.searchFieldList\r\n\r\n        };\r\n        this.validationColumnList = [\r\n            { \"idsName\": \"IDS_TEMPLATENAME\", \"dataField\": \"nreactregtemplatecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        ]\r\n        //ALPD-903\r\n        if (this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value !== SampleType.Masters\r\n            && this.props.Login.masterData.realRegSubTypeValue &&\r\n            this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true) {\r\n            this.validationColumnList.push({ \"idsName\": \"IDS_SUBSAMPLETEMPLATE\", \"dataField\": \"nsubsampletemplatecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },);\r\n        }\r\n\r\n        const mandatoryFields = [];\r\n        this.validationColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n        // let breadCrumbDataDate = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate,\r\n        //     this.props.Login.masterData && this.props.Login.masterData.ToDate,\r\n        //     this.props.Login.userInfo)\r\n\r\n        // const breadCrumbData = [\r\n\r\n        let breadCrumbData = [];\r\n        this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value === 4 ?\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\r\n                },\r\n                //defaultMasterType\r\n                // {\r\n                //     \"label\": \"IDS_MASTERTYPE\",\r\n                //     \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\r\n                // },\r\n                {\r\n                    \"label\": \"IDS_SCREEN\",\r\n                    \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\r\n                }\r\n            ] :\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\r\n                }, {\r\n                    \"label\": \"IDS_REGTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.label : \"-\"\r\n                }, {\r\n                    \"label\": \"IDS_REGSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"-\"\r\n                }\r\n            ];\r\n\r\n        const addParam = {\r\n            screenName: this.props.intl.formatMessage({ id: \"IDS_DESIGNTEMPLATEMAPPING\" }),\r\n            operation: \"create\",\r\n            userInfo: this.props.Login.userInfo,\r\n            realSampleValue: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value : -1,\r\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\r\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\r\n            controlId: addId,\r\n            moduleTypeArray: this.state.moduleTypeArray\r\n        }\r\n\r\n        // console.log(\"render, props, state:\", this.props.Login);\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    {/* Start of get display*/}\r\n                    {/* <div className=\"client-listing-wrap mtop-4\"> */}\r\n                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                    <Row noGutters={true}>\r\n                        <Col md={`${!this.state.sidebarview ? '4' : \"2\"}`}>\r\n                            <span onClick= {()=>this.setState({sidebarview:!this.state.sidebarview})} className='sidebar-view-btn'>\r\n                                {!this.state.sidebarview ?\r\n                                    <i class=\"fa fa-less-than\"></i> :\r\n                                    <i class=\"fa fa-greater-than\"></i> \r\n                                }\r\n                            </span>\r\n                            <ListMaster\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_DESIGNTEMPLATEMAPPING\" })}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.DesignTemplateMapping}\r\n                                getMasterDetail={(designtemplatemapping) => this.props.getDesignTemplateMappingDetail(designtemplatemapping, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.selectedDesignTemplateMapping}\r\n                                primaryKeyField=\"ndesigntemplatemappingcode\"\r\n                                mainField=\"sregtemplatename\"\r\n                                firstField=\"sversionno\"\r\n                                secondField=\"stransdisplaystatus\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={true}\r\n                                openModal={() => this.props.getDesignTemplateMappingComboService(addParam)}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_TEMPLATEFILTER\":\r\n                                            <TemplateFilter\r\n                                                formatMessage={this.props.intl.formatMessage}\r\n                                                filterSampletype={this.state.listSampletype || []}\r\n                                                filterRegistrationType={this.state.listRegistrationType || []}\r\n                                                filterRegistrationSubType={this.state.listRegistrationSubType || []}\r\n                                                filterForms={this.state.listForms || []}\r\n                                                defaultsampletype={this.props.Login.masterData[\"defaultsampletype\"] || {}}\r\n                                                defaultregsubtype={this.props.Login.masterData[\"defaultregsubtype\"] || []}\r\n                                                defaultregtype={this.props.Login.masterData[\"defaultregtype\"] || []}\r\n                                                defaultform={this.props.Login.masterData.defaultform || []}\r\n                                                filterComboChange={this.filterComboChange}\r\n                                                masterTypeArray={this.props.Login.masterData.masterTypeArray || []}\r\n                                                defaultMasterType={this.props.Login.masterData.defaultMasterType || {}}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md={`${!this.state.sidebarview ? '8' : \"10\"}`}>\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Card className=\"border-0\">\r\n                                    {this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping.length > 0 && this.props.Login.masterData.selectedDesignTemplateMapping ?\r\n                                        <>\r\n                                            <Card.Header>\r\n                                                <Card.Title>\r\n                                                    <h1 className=\"product-title-main\">{this.props.Login.masterData.selectedDesignTemplateMapping.sregtemplatename}</h1>\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle className=\"text-muted font-weight-normal\">\r\n                                                    <Row>\r\n                                                        <Col md={10} className=\"d-flex\">\r\n                                                            <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                {`${this.props.intl.formatMessage({ id: \"IDS_VERSION\" })} : ${this.props.Login.masterData.selectedDesignTemplateMapping.sversionno}`}\r\n                                                                <span className={`btn btn-outlined ${this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT ? \"outline-secondary\" : this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-danger\"} btn-sm mx-md-3 mx-sm-2`}>\r\n                                                                    {this.props.Login.masterData.selectedDesignTemplateMapping.stransdisplaystatus}\r\n                                                                </span>\r\n\r\n                                                            </h2>\r\n                                                        </Col>\r\n                                                        <Col md={2}>\r\n                                                            <div className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                    // data-for=\"tooltip_list_wrap\"\r\n                                                                    // onClick={() => this.onApproveClick()}\r\n                                                                    onClick={(e) => this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value===SampleType.Masters?  this.openModal(approveId,'Approve'):this.onApproveClick()}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faThumbsUp} title={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })} />\r\n                                                                </Nav.Link>\r\n                                                                {/* <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURECOMBINATIONUNIQUEFIELDS\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={() => this.openCombinationUniqueFieldConfiguration(combinationUniqueFieldId)}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGURECOMBINATIONUNIQUEFIELDS\" })} />\r\n                                                                </Nav.Link>\r\n                                                                                                                          \r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(sampleFieldId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREDISPLAYFIELDS\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={() => this.openFieldConfiguration(sampleFieldId, \"configure\")}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREDISPLAYFIELDS\" })} />\r\n                                                                </Nav.Link>\r\n                                                             \r\n                                                                {this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters ?\r\n                                                                    <><Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(sampleEditFieldId) === -1}\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREEDITFIELDS\" })}\r\n\r\n                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                        onClick={() => this.editFieldConfiguration(sampleEditFieldId, 'configureedit')}\r\n                                                                    >\r\n                                                                        <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREEDITFIELDS\" })} />\r\n                                                                    </Nav.Link>\r\n\r\n\r\n                                                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(sampleFieldId) === -1}\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREAUDITFIELDS\" })}\r\n                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                        onClick={() => this.auditFieldConfiguration(sampleFieldId, \"configureaudit\")}\r\n                                                                    >\r\n                                                                        <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREAUDITFIELDS\" })} />\r\n                                                                    </Nav.Link>\r\n                                                                    {this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true ?\r\n                                                                        <>\r\n                                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                                        hidden={this.state.userRoleControlRights.indexOf(subSampleFieldId) === -1}\r\n                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\" })}\r\n                                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                                        onClick={() => this.openFieldConfiguration(subSampleFieldId, 'configuresubsample')}\r\n                                                                                    > \r\n                                                                                        <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\" })} />\r\n                                                                            </Nav.Link>\r\n                                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                                    hidden={this.state.userRoleControlRights.indexOf(subSampleEditFieldId) === -1}\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURSUBSAMPLEEEDITFIELDS\" })}\r\n                                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                                    onClick={() => this.editFieldConfiguration(subSampleEditFieldId, 'configuresubsampleedit')}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGURSUBSAMPLEEEDITFIELDS\" })} />\r\n                                                                                </Nav.Link>\r\n                                                                            </>\r\n                                                                            : \"\"}\r\n                                                                    </>\r\n                                                                    : \"\"} */}\r\n                                                                <Nav.Link className=\" btn btn-circle outline-grey mr-2\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    //    data-for=\"tooltip_list_wrap\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                    // onClick={() => this.ConfirmDelete(this.state.approveId)}>\r\n                                                                    onClick={() => this.ConfirmDelete()}>\r\n                                                                    <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                </Nav.Link>\r\n\r\n                                                                {actionList.length > 0 ?\r\n                                                                    <CustomPopover\r\n                                                                        nav={true}\r\n                                                                        data={actionList}\r\n                                                                        Button={false}\r\n                                                                        hideIcon={true}\r\n                                                                        btnClasses=\"btn-circle btn_grey ml-2\"\r\n                                                                        textKey=\"value\"\r\n                                                                        icon={faChevronCircleDown}\r\n                                                                        // toolTip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURE\" })}\r\n                                                                        dynamicButton={(value) => this.actionMethod(value)}\r\n                                                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                                                    />\r\n                                                                    :\r\n                                                                    \"\"}\r\n\r\n                                                            </div>\r\n\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                {this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n                                                    this.props.Login.masterData.selectedDesignTemplateMapping.nformcode > 0 &&\r\n                                                    <Row>\r\n                                                        <Col md={6}>\r\n                                                            <FormGroup>\r\n                                                                <FormLabel><FormattedMessage id=\"IDS_MODULENAME\" message=\"Module Name\" /></FormLabel>\r\n                                                                <ReadOnlyText>   {this.props.Login.masterData.selectedDesignTemplateMapping.smodulename}\r\n                                                                </ReadOnlyText>\r\n                                                            </FormGroup>\r\n\r\n                                                        </Col>\r\n                                                        <Col md={6}>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_FORMNAME\" message=\"Form Name\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.selectedDesignTemplateMapping.sformname}\r\n                                                            </ReadOnlyText>\r\n\r\n                                                        </Col>\r\n                                                    </Row>}\r\n\r\n                                                    <Row>\r\n                                                        <Col md={12} >\r\n                                                            <CustomTabs tabDetail={this.tabDetail()} onTabChange={this.onTabChange}/> \r\n                                                        </Col>\r\n                                                    </Row>\r\n                                               \r\n                                            </Card.Body>\r\n\r\n                                        </>\r\n                                        : \"\"\r\n                                    }\r\n                                </Card>\r\n                            </ContentPanel>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n\r\n\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        // size={(this.props.Login.operation === 'configure'\r\n                        //     || this.props.Login.operation === 'configuresubsample'\r\n                        //     || this.props.Login.operation === 'configureaudit') ? \"xl\" : \"lg\"}\r\n                        size={this.props.Login.screenName ===\"\" || this.props.Login.screenName === 'Template Mapping' ||this.props.Login.operation === 'Approve' ? 'lg' : \"xl\"}//\"xl\"\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n\r\n                        mandatoryFields={this.props.Login.operation === 'Approve' ? [{ \"idsName\": \"IDS_VIEWNAME\", \"dataField\": \"sviewname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n                        ]:(this.props.Login.operation === 'configure'\r\n                            || this.props.Login.operation === 'configuresubsample'\r\n                            || this.props.Login.operation === 'configureedit'\r\n                            || this.props.Login.operation === 'configuresubsampleedit'\r\n                            || this.props.Login.operation === 'configureunique'\r\n                            || this.props.Login.operation === 'configureaudit'\r\n                            || this.props.Login.operation === 'configuresendtostore') ? [] : mandatoryFields}\r\n\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :this.props.Login.operation==='Approve'?\r\n                            <Row>\r\n                            <Col md={12}>\r\n                                <FormInput\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_VIEWNAME\" })}\r\n                                    name={\"sviewname\"}\r\n                                    type=\"text\"\r\n                                    onChange={(event) => this.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_VIEWNAME\" })}\r\n                                    value={this.state.selectedRecord[\"sviewname\"]}\r\n                                    isMandatory={true}\r\n                                    maxLength={30}\r\n                                    onPaste={true}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                            \r\n                            : this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' ?\r\n                                <ConfigureScreenFields\r\n                                    operation={this.props.Login.operation}\r\n                                    designData={this.props.Login.designData || {}}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\r\n                                        this.props.Login.dataResult || [] :\r\n                                        this.props.Login.dataResult || {}}\r\n                                    onChangeToggle={this.onChangeToggle}\r\n                                    approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\r\n                                    selectedSampleType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                />\r\n                                : (this.props.Login.operation === 'configureedit'\r\n                                    || this.props.Login.operation === 'configuresubsampleedit') ?\r\n                                    <ConfigureEditFields\r\n                                        operation={this.props.Login.operation}\r\n                                        designData={this.props.Login.editFieldDesignData || {}}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\r\n                                            this.props.Login.editFieldDataResult || [] :\r\n                                            this.props.Login.editFieldDataResult || {}}\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        // onChangeToggle={this.onChangeToggle}\r\n                                        onComboChange={this.onConfigureComboChange}\r\n                                        // approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\r\n                                        selectedSampleType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                    />\r\n                                    : (this.props.Login.operation === 'configureaudit') ?\r\n                                        <ConfigureAuditFields\r\n                                            operation={this.props.Login.operation}\r\n                                            needSubSample={this.props.Login.masterData.realRegSubTypeValue ?\r\n                                                this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false}\r\n                                            designData={this.props.Login.auditFieldDesignData || {}}\r\n                                            auditTable={this.props.Login.auditTable || {}}\r\n                                            auditData={this.props.Login.auditData || {}}\r\n                                            inputParam={this.props.Login.inputParam}\r\n                                            formName={this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label}\r\n                                            dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\r\n                                                this.props.Login.auditFieldDataResult || [] :\r\n                                                this.props.Login.auditFieldDataResult || {}}\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onChangeToggle={this.onChangeToggle}\r\n                                            selectedSampleType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                        />\r\n                                        : this.props.Login.operation === 'configureunique' ?\r\n                                            <ConfigureUniqueFields\r\n                                                designData={this.props.Login.designData || {}}\r\n                                                inputParam={this.props.Login.inputParam}\r\n                                                // dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\r\n                                                //     this.props.Login.dataResult || [] :\r\n                                                //     this.props.Login.dataResult || {}}\r\n                                                dataList={this.props.Login.dataList || []}\r\n                                                dataListCount={this.props.Login.dataListCount || []}\r\n                                                dataListsubsample={this.props.Login.dataListSubSample || []}\r\n                                                dataListCountsubsample={this.props.Login.dataListCountSubSample || []}\r\n                                                onInputOnChange={this.onInputOnChangeForUnique}\r\n                                                addCombinatonUnique={this.addCombinatonUnique}\r\n                                                deleteCombinationUnique={this.deleteCombinationUnique}\r\n                                                slanguagetypecode={this.props.Login.userInfo.slanguagetypecode}\r\n                                                approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\r\n                                                selectedTemplateType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                            /> :\r\n                                            this.props.Login.operation === 'configuresendtostore' ?\r\n                                                <ConfigureSendToStoreFields\r\n                                                    operation={this.props.Login.operation}\r\n                                                    SampleName={this.props.Login.samplename || {}}\r\n                                                    needSubSample={this.props.Login.needsubsample || {}}\r\n                                                    MainSampleList={this.props.Login.SampleTemplateNumber || []}\r\n                                                    MainSubSampleList={this.props.Login.SampleTemplatecombobox}\r\n                                                    SampleList={this.props.Login.subSampleTemplateNumber || []}\r\n                                                    SubSampleList={this.props.Login.subSampleTemplateCombobox}\r\n                                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                                    // onChangeToggle={this.onChangeToggle}\r\n                                                    onComboChange={this.onComboChange}\r\n                                                    selectedValue={this.props.Login.selectedValue[0]}\r\n                                                />\r\n                                                :\r\n                                                this.state.showSynonym ?\r\n                                                    <AddSynonym\r\n                                                        selectedFieldRecord={this.state.selectedRecord}\r\n                                                        onInputOnChange={this.onInputOnChange}\r\n                                                        languages={this.props.Login.languageList || []}\r\n                                                        fieldName=\"nmodulecode\"\r\n                                                    />\r\n                                                    : <AddDesignTemplateMapping\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                        onInputOnChange={this.onInputOnChange}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        handleDateChange={this.handleDateChange}\r\n                                                        formatMessage={this.props.intl.formatMessage}\r\n                                                        designtemplatemappingList={this.props.Login.designtemplatemappingList}\r\n                                                        subSampleTemplateList={this.props.Login.subSampleTemplateList}\r\n                                                        selectedDesignTemplateMapping={this.props.Login.masterData.selectedDesignTemplateMapping || {}}\r\n                                                        operation={this.props.Login.operation}\r\n                                                        userLogged={this.props.Login.userLogged}\r\n                                                        inputParam={this.props.Login.inputParam}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        nformcode={this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1}\r\n                                                        needSubSample={this.props.Login.masterData.realSampleValue.value===SampleType.Masters ?false:this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false}\r\n                                                        designTemplateQualisModule={this.props.Login.designTemplateQualisModule}\r\n                                                        language={this.props.Login.language}\r\n                                                        moduleTypeArray={this.state.moduleTypeArray || []}\r\n\r\n                                                    />}\r\n                    />\r\n                }\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n    openModal = (ncontrolcode,operation) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: {}, operation:operation, ncontrolcode, selectedId: null,\r\n                openModal: true, screenName: this.props.Login.inputParam.displayName\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onTabChange = (tabProps) =>{\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {screenName}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    tabDetail = () => {\r\n        \r\n        console.log(\"this.props.Login.masterData:\",this.props.Login.masterData);\r\n        const Layout = this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n            this.props.Login.masterData.selectedDesignTemplateMapping.jsondata;\r\n\r\n        const subSampleLayout = this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n            this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\r\n\r\n        const sampleType = this.props.Login.masterData.realSampleValue.value ;\r\n\r\n        const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\r\n\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_TEMPLATE\",    <Card>\r\n                                    {/* <Card.Header><FormattedMessage id=\"IDS_TEMPLATE\" message=\"Template\" /></Card.Header> */}\r\n                                    <Card.Body>\r\n                                        {\r\n                                            Layout ?\r\n                                                Layout.map((item) =>\r\n                                                    <Row>\r\n                                                        {item.children.length > 0 ?\r\n                                                            item.children.map((column) =>\r\n                                                                <Col md={12 / item.children.length}>\r\n                                                                    {\r\n                                                                        column.children.map((component) => {\r\n                                                                            return (\r\n                                                                                component.hasOwnProperty(\"children\") ?\r\n                                                                                    <Row>\r\n                                                                                        {component.children.map(componentrow =>\r\n                                                                                            componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" &&\r\n                                                                                                <Col md={componentrow && componentrow.length || 4}>\r\n                                                                                                <FormGroup>\r\n                                                                                                <FormLabel>{componentrow.displayname ? componentrow.displayname[this.props.Login.userInfo.slanguagetypecode] || componentrow.label : componentrow.label}</FormLabel>\r\n                                                                                                    <ReadOnlyText>{\"-\"}</ReadOnlyText>\r\n                                                                                                </FormGroup>\r\n                                                                                            </Col>\r\n                                                                                        )\r\n                                                                                        }\r\n                                                                                    </Row>\r\n                                                                                    :\r\n                                                                                    component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" &&\r\n                                                                                    <FormGroup>\r\n                                                                                        <FormLabel>{component.displayname ? component.displayname[this.props.Login.userInfo.slanguagetypecode] || component.label : component.label}</FormLabel>\r\n                                                                                        <ReadOnlyText> {\"-\"}</ReadOnlyText>\r\n                                                                                    </FormGroup>\r\n                                                                            )\r\n                                                                        })\r\n                                                                    }\r\n\r\n                                                                </Col>\r\n                                                            )\r\n                                                            : \"\"}\r\n                                                    </Row>\r\n                                                )\r\n                                                :\r\n                                                \"\"\r\n                                        }\r\n                                    </Card.Body>\r\n                                </Card>);\r\n        if(sampleType !== SampleType.Masters && needsubsample){\r\n            tabMap.set(\"IDS_SUBSAMPLETEMPLATE\",   <Card>\r\n                                        {/* <Card.Header><FormattedMessage id=\"IDS_SUBSAMPLETEMPLATE\" message=\"Sub Sample Template\" /></Card.Header> */}\r\n                                        <Card.Body>\r\n                                            {\r\n                                                subSampleLayout ?\r\n                                                    subSampleLayout.map((item) =>\r\n                                                        <Row>\r\n                                                            {item.children.length > 0 ?\r\n                                                                item.children.map((column) =>\r\n                                                                    <Col md={12 / item.children.length}>\r\n                                                                        {\r\n                                                                            column.children.map((component) => {\r\n                                                                                return (\r\n                                                                                    component.hasOwnProperty(\"children\") ?\r\n                                                                                        <Row>\r\n                                                                                            {component.children.map(componentrow =>\r\n                                                                                                componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" &&\r\n                                                                                                <Col md={componentrow && componentrow.length || 4}>\r\n                                                                                                    <FormGroup>\r\n                                                                                                    <FormLabel>{componentrow.displayname ? componentrow.displayname[this.props.Login.userInfo.slanguagetypecode] || componentrow.label : componentrow.label}</FormLabel>\r\n                                                                                                        <ReadOnlyText>{\"-\"}</ReadOnlyText>\r\n                                                                                                    </FormGroup>\r\n                                                                                                </Col>\r\n                                                                                            )\r\n                                                                                            }\r\n                                                                                        </Row>\r\n                                                                                        :\r\n                                                                                        component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" &&\r\n                                                                                        <FormGroup>\r\n                                                                                            <FormLabel>{component.displayname ? component.displayname[this.props.Login.userInfo.slanguagetypecode] || component.label : component.label}</FormLabel>\r\n                                                                                            <ReadOnlyText> {\"-\"}</ReadOnlyText>\r\n                                                                                        </FormGroup>\r\n                                                                                )\r\n                                                                            })\r\n                                                                        }\r\n\r\n                                                                    </Col>\r\n                                                                )\r\n                                                                : \"\"}\r\n                                                        </Row>\r\n                                                    )\r\n                                                    :\r\n                                                    \"\"\r\n                                            }\r\n                                        </Card.Body>\r\n                                    </Card>);    \r\n        }\r\n                                    \r\n        return tabMap;\r\n    }\r\n   \r\n\r\n    actionMethod = (value) => {\r\n        if (value.method === templateMappingAction.CONFIGSAMPLEDISPLAY) {\r\n            this.openFieldConfiguration(value.controlId, \"configure\");\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSAMPLEEDIT) {\r\n            this.editFieldConfiguration(value.controlId, 'configureedit')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSUBSAMPLEDISPLAY) {\r\n            this.openFieldConfiguration(value.controlId, 'configuresubsample')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSUBSAMPLEEDIT) {\r\n            this.editFieldConfiguration(value.controlId, 'configuresubsampleedit')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGUNIQUE) {\r\n            this.openCombinationUniqueFieldConfiguration(value.controlId)\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSAMPLEAUDIT) {\r\n            this.auditFieldConfiguration(value.controlId, 'configureaudit')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSENDTOSTORE) {\r\n            this.mappingFieldConfiguration(value.controlId, 'configuresendtostore')\r\n        }\r\n    }\r\n\r\n    // onFilterSubmit = () => {\r\n    //     this.reloadData()\r\n    // }\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\r\n            nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\r\n\r\n            // nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\r\n            //nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\r\n            nsampletypecode: this.props.Login.masterData.realSampleValue.value,\r\n            nformcode: this.props.Login.masterData.realFormValue ? this.props.Login.masterData[\"realFormValue\"].value : -1\r\n        };\r\n\r\n        let inputParam = { masterData: this.props.Login.masterData, inputData };\r\n        this.props.reloadDesignTemplateMapping(inputParam);\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false;\r\n\r\n        let { selectedRecord, userRoleControlRights, controlMap,\r\n            listSampletype, listRegistrationType, listRegistrationSubType, listForms } = this.state;\r\n\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]\r\n                    && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                updateState = true;\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord\r\n        }\r\n\r\n        const selectedInput = {};\r\n        let Taglstsampletype;\r\n        let TaglistRegistrationType;\r\n        let TaglistRegistrationSubType;\r\n        let ListFormsMap;\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            updateState = true;\r\n            if (this.props.Login.masterData.SampleTypes) {\r\n                Taglstsampletype = constructOptionList(this.props.Login.masterData.SampleTypes || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", undefined);\r\n                listSampletype = Taglstsampletype.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.registrationTypes) {\r\n                TaglistRegistrationType = constructOptionList(this.props.Login.masterData.registrationTypes || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, undefined);\r\n                listRegistrationType = TaglistRegistrationType.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.registrationSubTypes) {\r\n                TaglistRegistrationSubType = constructOptionList(this.props.Login.masterData.registrationSubTypes || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", undefined);\r\n                listRegistrationSubType = TaglistRegistrationSubType.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.qualisforms) {\r\n                ListFormsMap = constructOptionList(this.props.Login.masterData.qualisforms || [], \"nformcode\", \"sdisplayname\", undefined, undefined, undefined);\r\n                listForms = ListFormsMap.get(\"OptionList\");\r\n            }\r\n        }\r\n\r\n        if (updateState) {\r\n            this.setState({\r\n                selectedRecord, controlMap, userRoleControlRights,\r\n                listSampletype, listRegistrationType, listRegistrationSubType,\r\n                selectedInput, listForms\r\n            })\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: this.props.Login.masterData.defaultsampletype.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value || -1 : -1),\r\n            nregsubtypecode: this.props.Login.masterData.defaultsampletype.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value || -1 : -1),\r\n            nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\r\n            nformcode: this.props.Login.masterData.defaultform ? this.props.Login.masterData.defaultform.value || -1 : -1\r\n\r\n        };\r\n        let masterData = {\r\n            ...this.props.Login.masterData,\r\n            realSampleValue: this.props.Login.masterData.defaultsampletype,\r\n            realFormValue: this.props.Login.masterData.defaultform,\r\n            realRegTypeValue: this.props.Login.masterData.defaultregtype,\r\n            realRegSubTypeValue: this.props.Login.masterData.defaultregsubtype\r\n        }\r\n        let inputParam = { masterData, inputData };\r\n        this.props.getTMPFilterSubmit(inputParam);\r\n    }\r\n\r\n    onApproveClick = () => {\r\n        if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus !== transactionStatus.RETIRED) {\r\n            const ncontrolCode = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode\r\n            // if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\r\n            //     const updateInfo = {\r\n            //         typeName: DEFAULT_RETURN,\r\n            //         data: {\r\n            //              openModal: true,\r\n            //             operation: \"approve\", ncontrolCode: ncontrolCode\r\n            //         }\r\n            //     }\r\n            //     this.props.updateStore(updateInfo);\r\n\r\n            // } else {\r\n                let { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey, deleteValidation, jsqlquerycolumns,sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect } = this.getGridJsondata(this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n                    this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\");\r\n\r\n                // console.log(\"deleteValidation 2:\", deleteValidation);\r\n\r\n                let inputData = { jdynamiccolumns, jnumericcolumns, jsqlquerycolumns, sprimarykeyname: templatePrimaryKey,sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect };\r\n                inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n                let postParam = undefined;\r\n                inputData[\"designtemplatemapping\"] = { \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\" };\r\n                inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\r\n                inputData[\"deletevalidationlist\"] = deleteValidation;\r\n                inputData[\"sviewname\"] =this.state.selectedRecord.sviewname;\r\n                postParam = {\r\n                    inputListName: \"DesignTemplateMapping\",\r\n                    selectedObject: \"selectedDesignTemplateMapping\",\r\n                    primaryKeyField: \"ndesigntemplatemappingcode\"\r\n                };\r\n\r\n                const inputParam = {\r\n                    inputData: {\r\n                        ...inputData\r\n                    },\r\n                    classUrl: 'designtemplatemapping',\r\n                    methodUrl: \"DesignTemplateMapping\",\r\n                    inputData: inputData,\r\n                    screenName:'Template Mapping',\r\n                    operation: \"Approve\", postParam,\r\n                    selectedRecord : {...this.state.selectedRecord}\r\n                }\r\n                let saveType;\r\n\r\n                // console.log(\"approve:\", inputParam);\r\n                const masterData = this.props.Login.masterData;\r\n\r\n                const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n                if (esignNeeded) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"Approve\",screenName:'Template Mapping'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n                }\r\n\r\n            }\r\n\r\n      //  }\r\n        else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_TEMPLATERETIRED\" }));\r\n        }\r\n    }\r\n\r\n    ConfirmDelete = () => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteTemplate());\r\n    }\r\n\r\n    deleteTemplate = () => {\r\n        if ((this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT)) {\r\n            const ncontrolCode = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode\r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            let postParam = undefined;\r\n            inputData[\"designtemplatemapping\"] = { \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\" };\r\n            inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\r\n            postParam = {\r\n                inputListName: \"DesignTemplateMapping\",\r\n                selectedObject: \"selectedDesignTemplateMapping\",\r\n                primaryKeyField: \"ndesigntemplatemappingcode\",\r\n                primaryKeyValue: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                fetchUrl: \"designtemplatemapping/getDesignTemplateMappingById\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            };\r\n\r\n\r\n            const inputParam = {\r\n                inputData: {\r\n                    ...inputData,\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n\r\n                },\r\n                classUrl: 'designtemplatemapping',\r\n                methodUrl: \"DesignTemplateMapping\",\r\n                inputData: inputData,\r\n                screenName:'Template Mapping',\r\n                operation: \"delete\", postParam,\r\n                selectedRecord : {...this.state.selectedRecord}\r\n            }\r\n            let saveType;\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n            if (esignNeeded) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"delete\",screenName:'Template Mapping'\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n\r\n        }\r\n        else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTODELETE\" }));\r\n        }\r\n    }\r\n\r\n    deleteCombinationUnique = (index, eventKey) => {\r\n        if (eventKey === \"subsample\") {\r\n            let dataList = this.props.Login.subsampledataList || []\r\n            let dataListCount = this.props.Login.subsampledataListCount || []\r\n            dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]\r\n            //   delete dataListCount[index]\r\n            if (dataList[index] || dataList[index] === null) {\r\n                dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]\r\n\r\n                // delete dataList[index]\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { subsampledataListCount: dataListCount, subsampledataList: dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            let dataList = this.props.Login.dataList || []\r\n            let dataListCount = this.props.Login.dataListCount || []\r\n            dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]\r\n            //   delete dataListCount[index]\r\n            if (dataList[index] || dataList[index] === null) {\r\n                dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]\r\n\r\n                // delete dataList[index]\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListCount, dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    addCombinatonUnique = (designData, eventKey) => {\r\n        if (eventKey === \"subsample\") {\r\n            const dataList = this.props.Login.dataListSubSample || []\r\n            //    const obj={}\r\n            //     designData.map(item=>{\r\n            //         obj[item[\"2\"]]={...item}\r\n            //     })\r\n            //dataList.push({})\r\n            const dataListCount = this.props.Login.dataListCountSubSample || []\r\n            dataListCount.push(dataListCount.length + 1)\r\n            dataList.push({})\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListCountSubSample: dataListCount, dataListSubSample: dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            const dataList = this.props.Login.dataList || []\r\n            //    const obj={}\r\n            //     designData.map(item=>{\r\n            //         obj[item[\"2\"]]={...item}\r\n            //     })\r\n            //dataList.push({})\r\n            const dataListCount = this.props.Login.dataListCount || []\r\n            dataListCount.push(dataListCount.length + 1)\r\n            dataList.push({})\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListCount, dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    openCombinationUniqueFieldConfiguration = (controlCode) => {\r\n        let openModal = true;\r\n        let operation = 'configureunique';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                userinfo: this.props.Login.userInfo,\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\r\n            inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.combinationUniqueConfigService(inputParam)\r\n    }\r\n\r\n    openFieldConfiguration = (controlCode, operation) => {\r\n        let openModal = true;\r\n        //let operation = 'configure';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                userinfo: this.props.Login.userInfo,\r\n\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\r\n            inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.getMappedFieldProps(inputParam)\r\n    }\r\n\r\n    editFieldConfiguration = (controlCode, operation) => {\r\n\r\n        //console.log(\"edit config:\", this.props.Login);\r\n        // let operation = 'configureedit';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                nregtypecode: this.props.Login.masterData.defaultregtype.value,\r\n                nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,\r\n                userinfo: this.props.Login.userInfo,\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        // if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){\r\n        //     inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n        //  }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.editFieldConfigService(inputParam)\r\n    }\r\n\r\n    mappingFieldConfiguration = (controlCode, operation) => {\r\n\r\n        //console.log(\"edit config:\", this.props.Login);\r\n        // let operation = 'configureedit';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let displayname = \"ConfigSendTOStore\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping\r\n                },\r\n                userinfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName, displayname\r\n        }\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\r\n            inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n        this.props.mappingFieldConfigService(inputParam)\r\n    }\r\n\r\n    auditFieldConfiguration = (controlCode, operation) => {\r\n\r\n        //console.log(\"edit config:\", this.props.Login);\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters\r\n                    ? -1 : this.props.Login.masterData.defaultregtype\r\n                        ? this.props.Login.masterData.defaultregtype.value : -1,\r\n                nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters\r\n                    ? -1 : this.props.Login.masterData.defaultregsubtype\r\n                        ? this.props.Login.masterData.defaultregsubtype.value : -1,\r\n                //nregtypecode: this.props.Login.masterData.defaultregtype.value,\r\n                //nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,\r\n                userinfo: this.props.Login.userInfo,\r\n                nneedsubsample: this.props.Login.masterData.defaultregsubtype && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.auditFieldConfigService(inputParam)\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"Approve\"\r\n                || this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value===SampleType.Masters?true:false;\r\n                selectedRecord = this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value===SampleType.Masters?this.state.selectedRecord:{};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null, dataList: [], dataListCount: [], dataListSubSample: [], dataListCountSubSample: [] }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, screenName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (screenName === \"Sample\") {\r\n            if (fieldName == \"Quantity\") {\r\n                selectedRecord[\"Quantity\"] = comboData;\r\n            } else {\r\n                selectedRecord[\"Unit\"] = comboData;\r\n            }\r\n        }\r\n        else if (screenName === \"SubSample\") {\r\n            if (fieldName == \"Quantity\") {\r\n                selectedRecord[\"SubQuantity\"] = comboData;\r\n            } else {\r\n                selectedRecord[\"SubUnit\"] = comboData;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[fieldName] = comboData;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onConfigureComboChange = (comboData, formCode, item) => {\r\n        if (item === \"Quantity\") {\r\n            const fieldName = item;\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        } else if (item === \"Unit\") {\r\n            const fieldName = item;\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        } else {\r\n            const fieldName = item.label;\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[formCode] = { ...selectedRecord[formCode], [fieldName]: comboData };\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n        // let designData = this.props.Login.editFieldDesignData;\r\n        // let dataResult = this.props.Login.editFieldDataResult;\r\n        // if (formCode === undefined){\r\n        //     dataResult[dataIndex][field] = event.target.checked;\r\n        //     if (event.target.checked) {\r\n        //         designData[field].splice(dataIndex, 0, dataItem.realData)\r\n\r\n        //     } else {\r\n        //         designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n        //     }\r\n        // }\r\n        // else{\r\n        //     dataResult[formCode][\"sampleeditable\"] = comboData;\r\n        //     if (event.target.checked) {\r\n        //         if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\r\n        //             return toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDS\" }))\r\n        //         } else {\r\n        //             designData[formCode][field].splice(dataIndex, 0, dataItem.realData)\r\n        //         }\r\n        //         if (field === 'sampledisplayfields') {\r\n        //             designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label)\r\n        //         }\r\n        //     } else {\r\n        //         if (field === 'sampledisplayfields') {\r\n        //             designData[formCode]['samplesearchfields'].splice(designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.label), 1)\r\n        //         }\r\n        //         designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n        //     }\r\n        // }\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { designData, dataResult }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            if(event.target.name===\"sviewname\"){\r\n\r\n                if (event.target.value !== \"\") {\r\n                    event.target.value = validateCreateView(event.target.value);\r\n                    selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n              //  selectedRecord[event.target.name] =  event.target.value.replace(/[^a-z]/g, '');\r\n            }else{\r\n                selectedRecord[event.target.name] =  event.target.value;\r\n            }\r\n         \r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChangeForUnique = (event, radiotext, index, multilinguallabel, eventKey) => {\r\n        if (eventKey === \"subsample\") {\r\n            const dataList = this.props.Login.dataListSubSample || []\r\n            if (dataList[index]) {\r\n                const value = dataList[index] && dataList[index][event.target.name];\r\n                if (value !== '' && value !== undefined) {\r\n                    delete dataList[index][event.target.name]\r\n                } else {\r\n\r\n                    dataList[index][event.target.name] = {\r\n                        [designProperties.LABEL]: { ...multilinguallabel },\r\n                        [designProperties.VALUE]: radiotext\r\n                    };\r\n                }\r\n            } else {\r\n                dataList[index] = {\r\n                    [event.target.name]: { [designProperties.LABEL]: { ...multilinguallabel }, [designProperties.VALUE]: radiotext }\r\n                }\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListSubSample: dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            const dataList = this.props.Login.dataList || []\r\n            if (dataList[index]) {\r\n                const value = dataList[index] && dataList[index][event.target.name];\r\n                if (value !== '' && value !== undefined) {\r\n                    delete dataList[index][event.target.name]\r\n                } else {\r\n\r\n                    dataList[index][event.target.name] = {\r\n                        [designProperties.LABEL]: { ...multilinguallabel },\r\n                        [designProperties.VALUE]: radiotext\r\n                    };\r\n                }\r\n            } else {\r\n                dataList[index] = {\r\n                    [event.target.name]: { [designProperties.LABEL]: { ...multilinguallabel }, [designProperties.VALUE]: radiotext }\r\n                }\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    getGridJsondata = (templatedata, task) => {\r\n        let gridItem = [];\r\n        let gridMoreItem = [];\r\n        let masterdatefields = [];\r\n        let masterdateconstraints = [];\r\n        let masteruniquevalidation = [];\r\n        let mastercombinationunique = [];\r\n        let editable = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n        let templatePrimaryKey = \"\";\r\n        let mastertemplatefields = [];\r\n        let sampleAuditFields = [];\r\n        let sampleAuditEditable = [];\r\n        let sampleAuditMultilingualFields = [];\r\n        let sampleQuerybuilderViewCondition = [];\r\n        let sampleQuerybuilderViewSelect = [];\r\n        let deleteValidation = [];\r\n        let jsqlquerycolumns = [{\r\n            \"columnname\": \"ndynamicmastercode\",\r\n            \"displayname\": {\r\n                \"en-US\": \"DynamicMaster Code PK\",\r\n                \"ru-RU\": \"Код DynamicMaster ПК\",\r\n                \"tg-TG\": \"Рамзи DynamicMaster PK\"\r\n            },\r\n            \"columndatatype\": \"numeric\"\r\n        },\r\n        {\r\n            \"columnname\": \"nstatus\",\r\n            \"displayname\": {\r\n                \"en-US\": \"Status\",\r\n                \"ru-RU\": \"Статус\",\r\n                \"tg-TG\": \"Статус\"\r\n            },\r\n            \"columndatatype\": \"numeric\"\r\n        }];\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map((component, index) => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n                            jsqlquerycolumns.push({\r\n                                \"columnname\": componentRow.label,\r\n                                \"displayname\": componentRow.displayname,\r\n                                \"isjsoncolumn\": true,\r\n                                \"columndatatype\": \"string\",\r\n                                \"jsoncolumnname\": \"jsonuidata\"\r\n                            })\r\n                            componentRow.unique && masteruniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && mastercombinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n\r\n                            templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\r\n\r\n                            let filterinputtype = \"text\";\r\n                            let comboDataInputObject = {};\r\n\r\n                            if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                deleteValidation.push({\r\n                                    \"smastertablename\": componentRow.table.item.stablename,\r\n                                    \"smasterprimarykeyname\": componentRow.valuemember,\r\n                                    \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\r\n                                    \"stranstableforeignkeyname\": componentRow.valuemember,\r\n                                    \"sjsonfieldname\": \"jsondata\",\r\n                                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                    \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                });\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 1,\r\n                                    \"viewvaluemember\": componentRow.label,\r\n                                    \"valuemember\": componentRow.valuemember,\r\n                                    \"displaymember\": componentRow.displaymember,\r\n                                    \"mastertablename\": componentRow.source,\r\n                                    \"needmasterdata\": true,\r\n                                    \"columntypedesc\": \"textinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n                            }\r\n\r\n                            if (componentRow.inputtype === 'combo') {\r\n\r\n                                comboDataInputObject = {\r\n                                    \"predefinedtablename\": componentRow.source,\r\n                                    \"predefinedvaluemember\": componentRow.valuemember,\r\n                                    \"predefineddisplaymember\": componentRow.displaymember,\r\n                                    \"predefinedismultilingual\": componentRow.isMultiLingual?componentRow.isMultiLingual:false,\r\n                                    \"predefinedconditionalString\": \"\\\"\" + componentRow.valuemember + \"\\\"\" + \" > '0' \"\r\n                                };\r\n                                jnumericcolumns.push({\r\n                                    \"columnname\": componentRow.displaymember,\r\n                                    \"foreigntableformcode\":componentRow.table.item.nformcode,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"foriegntablePK\": componentRow.valuemember,\r\n                                    \"tablecolumnname\": componentRow.label,\r\n                                    \"foriegntablename\": componentRow.source,\r\n                                    \"parentforeignPK\":componentRow.displaymember,\r\n                                    ...comboDataInputObject\r\n                                })\r\n                                filterinputtype = \"predefinednumeric\";\r\n                            }\r\n                            if (componentRow.inputtype === 'date') {\r\n                                filterinputtype = \"date\";\r\n                                masterdatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                masterdateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\r\n                          \r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 2,\r\n                                    \"columntypedesc\": \"datetime\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n\r\n                            }\r\n                            if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\r\n                                filterinputtype = \"numeric\";\r\n\r\n                                if (componentRow.inputtype === 'Numeric') {\r\n                                    sampleQuerybuilderViewCondition.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"columntype\": 5,\r\n                                        \"columntypedesc\": \"numericinput\",\r\n                                    })\r\n\r\n                                    sampleQuerybuilderViewSelect.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"languagecode\": false\r\n                                    })\r\n                                }\r\n                            }\r\n\r\n                            if (componentRow.inputtype === 'textinput' || componentRow.inputtype === 'email'\r\n                            || componentRow.inputtype === 'textarea' || componentRow.inputtype === 'radio') {\r\n\r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": componentRow.label,\r\n                                \"displayname\": componentRow.displayname,\r\n                                \"columntype\": 1,\r\n                                \"columntypedesc\": \"textinput\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": componentRow.label,\r\n                                \"displayname\": componentRow.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n\r\n                        }\r\n\r\n                            jdynamiccolumns.push({\r\n                                default: componentRow.unique ? true : false,\r\n                                filterinputtype,\r\n                                columnname: componentRow.label,\r\n                                displayname: componentRow.displayname,\r\n                                ...comboDataInputObject\r\n                            })\r\n                            if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                                sampleAuditEditable.push(componentRow.label);\r\n                            }\r\n                            else {\r\n                                gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            }\r\n                            mastertemplatefields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            sampleAuditFields.push(componentRow.label);\r\n                            sampleAuditMultilingualFields.push({ [componentRow.label]: componentRow.displayname });\r\n\r\n\r\n                            if (componentRow.templatemandatory) {\r\n                                editable.push({ label: componentRow.label, editableuntill: [] })\r\n                            }\r\n                            else {\r\n                                editable.push({ label: componentRow.label, editableuntill: [transactionStatus.DRAFT] })\r\n                            }\r\n\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        component.unique && masteruniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        component.unique && mastercombinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n                        templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\r\n                        jsqlquerycolumns.push({\r\n                            \"columnname\": component.label,\r\n                            \"displayname\": component.displayname,\r\n                            \"isjsoncolumn\": true,\r\n                            \"columndatatype\": \"string\",\r\n                            \"jsoncolumnname\": \"jsonuidata\"\r\n                        })\r\n\r\n                        let filterinputtype = \"text\";\r\n                        let comboDataInputObject = {};\r\n\r\n                        mastertemplatefields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        sampleAuditFields.push(component.label);\r\n                        sampleAuditMultilingualFields.push({ [component.label]: component.displayname });\r\n\r\n                        if (component.componentcode === designComponents.COMBOBOX) {\r\n                            deleteValidation.push({\r\n                                \"smastertablename\": component.table.item.stablename,\r\n                                \"smasterprimarykeyname\": component.valuemember,\r\n                                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\r\n                                \"stranstableforeignkeyname\": component.valuemember,\r\n                                \"sjsonfieldname\": \"jsondata\",\r\n                                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                            });\r\n                        }\r\n\r\n                        if (component.inputtype === 'combo') {\r\n                            filterinputtype = \"predefinednumeric\";\r\n                            comboDataInputObject = {\r\n                                \"predefinedtablename\": component.source,\r\n                                \"predefinedvaluemember\": component.valuemember,\r\n                                \"predefineddisplaymember\": component.displaymember,\r\n                                \"predefinedismultilingual\":component.isMultiLingual?component.isMultiLingual:false,\r\n                                \"predefinedconditionalString\": \"\\\"\" + component.valuemember + \"\\\"\" + \" > '0'\"\r\n                            };\r\n                            jnumericcolumns.push({\r\n                                \"columnname\": component.label,\r\n                                \"foreigntableformcode\":component.table.item.nformcode,\r\n                                \"displayname\": component.displayname,\r\n                                \"foriegntablePK\": component.valuemember,\r\n                                // \"ismultilingual\": true,\r\n                                //\"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\r\n                                \"tablecolumnname\": component.label,\r\n                                \"foriegntablename\": component.source,\r\n                                \"parentforeignPK\":component.displaymember,\r\n                                ...comboDataInputObject\r\n                            })\r\n\r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"columntype\": 1,\r\n                                \"viewvaluemember\": component.label,\r\n                                \"valuemember\": component.valuemember,\r\n                                \"displaymember\": component.displaymember,\r\n                                \"mastertablename\": component.source,\r\n                                \"needmasterdata\": true,\r\n                                \"columntypedesc\": \"textinput\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n                        }\r\n                        if (component.inputtype === 'date') {\r\n                            filterinputtype = \"date\";\r\n                            masterdatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            masterdateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\r\n                      \r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"columntype\": 2,\r\n                                \"columntypedesc\": \"datetime\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n                        }\r\n                        if (component.inputtype === 'Numeric' || component.inputtype === 'radio') {\r\n                            filterinputtype = \"numeric\";\r\n\r\n                            if (component.inputtype === 'Numeric') {\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"columntype\": 5,\r\n                                    \"columntypedesc\": \"numericinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n                            }\r\n                        }\r\n\r\n                        if (component.inputtype === 'textinput' || component.inputtype === 'email'\r\n                        || component.inputtype === 'textarea' || component.inputtype === 'radio') {\r\n\r\n                        sampleQuerybuilderViewCondition.push({\r\n                            \"columnname\": component.label,\r\n                            \"displayname\": component.displayname,\r\n                            \"columntype\": 1,\r\n                            \"columntypedesc\": \"textinput\",\r\n                        })\r\n\r\n                        sampleQuerybuilderViewSelect.push({\r\n                            \"columnname\": component.label,\r\n                            \"displayname\": component.displayname,\r\n                            \"languagecode\": false\r\n                        })\r\n\r\n                    }\r\n\r\n                        jdynamiccolumns.push({\r\n                            default: component.unique ? true : false,\r\n                            columnname: component.label,\r\n                            displayname: component.displayname,\r\n                            filterinputtype,\r\n                            ...comboDataInputObject\r\n                        });\r\n\r\n                        if (component.mandatory || component.templatemandatory) {\r\n                            gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                            sampleAuditEditable.push(component.label);\r\n                        } else {\r\n                            gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n                        }\r\n                        if (component.templatemandatory) {\r\n                            editable.push({ label: component.label, editableuntill: [] });\r\n\r\n                        }\r\n                        else {\r\n                            editable.push({ label: component.label, editableuntill: [transactionStatus.DRAFT] })\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                })\r\n            })\r\n        );\r\n\r\n        if (task === \"DeleteValidation\" && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\r\n\r\n            const selectedSubSampleTemplate = this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\r\n\r\n            const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\r\n\r\n            if (needsubsample) {\r\n                selectedSubSampleTemplate.map(row =>\r\n                    row.children && row.children.map(column => {\r\n                        column.children && column.children.map(component => {\r\n                            if (component.hasOwnProperty('children')) {\r\n                                component.children.map(componentRow => {\r\n\r\n                                    if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                        deleteValidation.push({\r\n                                            \"smastertablename\": componentRow.table.item.stablename,\r\n                                            \"smasterprimarykeyname\": componentRow.valuemember,\r\n                                            \"stranstablename\": \"registrationsample\",\r\n                                            \"stranstableforeignkeyname\": componentRow.valuemember,\r\n                                            // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\r\n                                            \"sjsonfieldname\": \"jsondata\",\r\n                                            \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                            \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                            //\"nformcode\":componentRow.table.item.nformcode\r\n                                        });\r\n                                    }\r\n                                }\r\n                                )\r\n                            } else {                   \r\n\r\n                                if (component.componentcode === designComponents.COMBOBOX) {\r\n                                    deleteValidation.push({\r\n                                        \"smastertablename\": component.table.item.stablename,\r\n                                        \"smasterprimarykeyname\": component.valuemember,\r\n                                        \"stranstablename\": \"registrationsample\",\r\n                                        \"stranstableforeignkeyname\": component.valuemember,\r\n                                        //\"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\r\n                                        \"sjsonfieldname\": \"jsondata\",\r\n                                        \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                        //\"nformcode\":component.table.item.nformcode,\r\n                                        \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                                    });\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n                )\r\n            }\r\n        }\r\n\r\n\r\n        let jsondata = {\r\n            griditem: gridItem,\r\n            gridmoreitem: gridMoreItem,\r\n            masterdatefields,\r\n            masterdateconstraints,\r\n            masteruniquevalidation,\r\n            editable,\r\n            mastertemplatefields,\r\n            mastercombinationunique,\r\n            sampleAuditFields,\r\n            sampleAuditEditable,\r\n            sampleAuditMultilingualFields\r\n        }\r\n        return { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey:\"ndynamicmastercode\", deleteValidation, jsqlquerycolumns,sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect  };\r\n    }\r\n\r\n    getJsondata = (templatedata) => {\r\n        //let displayFields = [];\r\n        //ALPD-533\r\n        let displayFields = [{ [designProperties.LABEL]: this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                                                        //{ ...ARNOMULTILINGUAL },\r\n                                [designProperties.VALUE]: 'sarno' }];\r\n        let listItem = []\r\n        // let gridItem = [];\r\n        let gridItem = [{ [designProperties.LABEL]: this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                            //{ ...ARNOMULTILINGUAL }, \r\n                            [designProperties.VALUE]: \"sarno\" }];\r\n        let gridMoreItem = []\r\n        let editable = []\r\n        let subsampleeditable = [];\r\n        let subsamplelistitem = [];\r\n        let sampledatefields = [{ [designProperties.VALUE]: 'dregdate', dateonly: false }];\r\n        let sampledateconstraints = [];\r\n        let subsampledatefields = [];\r\n        let subsampledateconstraints = [];\r\n        let samplesearchfields = [\"dregdate\", \"sarno\", \"stransdisplaystatus\", \"sspecname\"];\r\n        let subsamplesearchfields = [\"sarno\", \"ssamplearno\", \"stransdisplaystatus\"];\r\n        let sampletemplatefields = [];\r\n        let subsampletemplatefields = [];\r\n        let sampleuniquevalidation = [];\r\n        let subsampleuniquevalidation = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n        let samplecombinationunique = [];\r\n        let subsamplecombinationunique = [];\r\n\r\n        let sampleAuditFields = [];\r\n        let sampleAuditEditable = [];\r\n        let sampleAuditMultilingualFields = [];\r\n        let subSampleAuditFields = [];\r\n        let subSampleAuditEditable = [];\r\n        let subSampleAuditMultilingualFields = [];\r\n        let deleteValidation = [];\r\n\r\n        //if(this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){        \r\n\r\n        sampleAuditFields = [\"sarno\"];\r\n        sampleAuditEditable = [\"sarno\"];\r\n        sampleAuditMultilingualFields = [{ \"sarno\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                                        //{ ...ARNOMULTILINGUAL } \r\n                                        }];\r\n        subSampleAuditFields = [\"sarno\", \"ssamplearno\"];\r\n        subSampleAuditEditable = [\"sarno\", \"ssamplearno\"];\r\n        subSampleAuditMultilingualFields = [{ \"sarno\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                                            //{ ...ARNOMULTILINGUAL } \r\n                                            },\r\n        { \"ssamplearno\": this.props.Login.genericLabel[\"SubARNo\"] && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"]//{ ...SUBARNOMULTILINGUAL } \r\n            }];\r\n        //}\r\n\r\n        ////////////////////////////////////////////\r\n        // let sampleAuditFields = SAMPLEAUDITFIELDS;\r\n        // let sampleAuditEditable = SAMPLEAUDITEDITABLE\r\n        // let sampleAuditMultilingualFields = SAMPLEAUDITMULTILINGUALFIELDS\r\n        // let subSampleAuditFields = SUBSAMPLEAUDITFIELDS\r\n        // let subSampleAuditEditable = SUBSAMPLEAUDITEDITABLE\r\n        // let subSampleAuditMultilingualFields = SUBSAMPLEAUDITMULTILINGUALFIELDS;\r\n\r\n        let testdatefields = [{ [designProperties.VALUE]: 'dtransactiondate', dateonly: false },\r\n                                { [designProperties.VALUE]: 'dregdate', dateonly: false }];\r\n        //console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\r\n        this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.item.jsondata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map(component => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n                            componentRow.unique && subsampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && subsamplecombinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n                            subsamplesearchfields.push(componentRow.label);\r\n\r\n                            subsampletemplatefields.push({\r\n                                [designProperties.LABEL]: componentRow.displayname,\r\n                                [designProperties.VALUE]: componentRow.label,\r\n                                [designProperties.PRIMARYKEY]: componentRow.valuemember,\r\n                                [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode\r\n                            })\r\n                            if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                deleteValidation.push({\r\n                                    \"smastertablename\": componentRow.table.item.stablename,\r\n                                    \"smasterprimarykeyname\": componentRow.table.valuemember,\r\n                                    \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registrationsample\",\r\n                                    \"stranstableforeignkeyname\": componentRow.table.valuemember,\r\n                                    \"sjsonfieldname\": \"jsondata\",\r\n                                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                    \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                });\r\n                            }\r\n                            subSampleAuditFields.push(componentRow.label);\r\n                            subSampleAuditMultilingualFields.push({ [componentRow.label]: componentRow.displayname });\r\n\r\n                            if (componentRow.mandatory) {\r\n                                subSampleAuditEditable.push(componentRow.label);\r\n                            }\r\n\r\n                            if (componentRow.readonly)\r\n                                subsampleeditable.push({ label: componentRow.label, editableuntill: [] })\r\n                            else\r\n                                subsampleeditable.push({ label: componentRow.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                            if (componentRow.inputtype === 'date') {\r\n                                subsampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                subsampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\r\n                            }\r\n                            subsamplelistitem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label ,[designProperties.LISTITEM]:componentRow.inputtype})\r\n                        }\r\n                        )\r\n                    } else {\r\n                        component.unique && subsampleuniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        component.unique && subsamplecombinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n                        subsamplesearchfields.push(component.label);\r\n\r\n                        subsampletemplatefields.push({\r\n                            [designProperties.LABEL]: component.displayname,\r\n                            [designProperties.VALUE]: component.label,\r\n                            [designProperties.PRIMARYKEY]: component.valuemember,\r\n                            [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode\r\n                        })\r\n\r\n                        if (component.componentcode === designComponents.COMBOBOX) {\r\n                            deleteValidation.push({\r\n                                \"smastertablename\": component.table.item.stablename,\r\n                                \"smasterprimarykeyname\": component.table.valuemember,\r\n                                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registrationsample\",\r\n                                \"stranstableforeignkeyname\": component.table.valuemember,\r\n                                // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\r\n                                \"sjsonfieldname\": \"jsondata\",\r\n                                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                //\"nformcode\":component.table.item.nformcode,\r\n                                \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                            });\r\n                        }\r\n                        subSampleAuditFields.push(component.label);\r\n                        subSampleAuditMultilingualFields.push({ [component.label]: component.displayname });\r\n\r\n                        if (component.mandatory) {\r\n                            subSampleAuditEditable.push(component.label);\r\n                        }\r\n                        if (component.readonly)\r\n                            subsampleeditable.push({ label: component.label, editableuntill: [] })\r\n                        else\r\n                            subsampleeditable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                        if (component.inputtype === 'date') {\r\n                            subsampledatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            subsampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\r\n                        }\r\n                        subsamplelistitem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]:component.inputtype });\r\n                    }\r\n                })\r\n            })\r\n        )\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map(component => {\r\n                    if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\r\n                        if (component.hasOwnProperty('children')) {\r\n                            if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\r\n                                // let combinedField = [];\r\n                                component.children.map(componentRow => {\r\n                                    // combinedField.push(componentRow.label)\r\n                                    jdynamiccolumns.push({\r\n                                        columnname: componentRow.label,\r\n                                        displayname: componentRow.displayname\r\n                                    })\r\n                                    if (componentRow.hasOwnProperty('child')) {\r\n                                        componentRow.child.map(childData => {\r\n                                            jnumericcolumns.push({\r\n                                                \"columnname\": componentRow.label,\r\n                                                \"displayname\": componentRow.displayname,\r\n                                                \"foriegntablePK\": componentRow.label,\r\n                                                // \"ismultilingual\": true,\r\n                                                // \"conditionstring\": \" and nformcode in (140) \",\r\n                                                \"tablecolumnname\": childData.tablecolumnname,\r\n                                                \"foriegntablename\": \"dynamicmaster\"\r\n                                            })\r\n                                        })\r\n                                    }\r\n                                    if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                        deleteValidation.push({\r\n                                            \"smastertablename\": componentRow.table.item.stablename,\r\n                                            \"smasterprimarykeyname\": componentRow.table.valuemember,\r\n                                            \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\r\n                                            \"stranstableforeignkeyname\": componentRow.table.valuemember,\r\n                                            //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\r\n                                            \"sjsonfieldname\": \"jsondata\",\r\n                                            \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                            //\"nformcode\":componentRow.table.item.nformcode,\r\n                                            \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                        });\r\n                                    }\r\n                                    componentRow.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                                    componentRow.unique && samplecombinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n                                    samplesearchfields.push(componentRow.label)\r\n                                    sampletemplatefields.push({\r\n                                        [designProperties.LABEL]: componentRow.displayname,\r\n                                        [designProperties.VALUE]: componentRow.label,\r\n                                        [designProperties.PRIMARYKEY]: componentRow.valuemember,\r\n                                        [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode\r\n                                    })\r\n                                    sampleAuditFields.push(componentRow.label);\r\n                                    sampleAuditMultilingualFields.push({ [componentRow.label]: componentRow.displayname });\r\n                                    if (componentRow.inputtype === 'date') {\r\n                                        sampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                        sampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\r\n                                    }\r\n                                    displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]:componentRow.inputtype });\r\n                                    componentRow.templatemandatory && listItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]:componentRow.inputtype  })\r\n                                    if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                        gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                                        sampleAuditEditable.push(componentRow.label);\r\n                                    }\r\n                                    else {\r\n                                        gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]:componentRow.inputtype });\r\n                                    }\r\n                                    if (componentRow.templatemandatory) {\r\n                                        editable.push({ label: componentRow.label, editableuntill: [] })\r\n                                    }\r\n                                    else {\r\n                                        if (componentRow.readonly)\r\n                                            editable.push({ label: componentRow.label, editableuntill: [] })\r\n                                        else\r\n                                            editable.push({ label: componentRow.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                // let fieldSet = combinedField.join(\"&\")\r\n                                // displayFields.push(fieldSet);\r\n                                // componentRow.templatemandatory && listItem.push(fieldSet)\r\n                                // gridMoreItem.push(fieldSet);\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\r\n                                //console.log(\"componentRow main:\", component);\r\n                                jdynamiccolumns.push({\r\n                                    columnname: component.label,\r\n                                    displayname: component.displayname\r\n                                });\r\n                                if (component.componentcode === designComponents.COMBOBOX) {\r\n                                    deleteValidation.push({\r\n                                        \"smastertablename\": component.table.item.stablename,\r\n                                        \"smasterprimarykeyname\": component.table.valuemember,\r\n                                        \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\r\n                                        \"stranstableforeignkeyname\": component.table.valuemember,\r\n                                        //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\r\n                                        \"sjsonfieldname\": \"jsondata\",\r\n                                        \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                        //\"nformcode\":component.table.item.nformcode,\r\n                                        \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                                    });\r\n                                }\r\n                                if (component.hasOwnProperty('child')) {\r\n                                    component.child.map(childData => {\r\n                                        jnumericcolumns.push({\r\n                                            \"columnname\": component.label,\r\n                                            \"displayname\": component.displayname,\r\n                                            \"foriegntablePK\": component.label,\r\n                                            // \"ismultilingual\": true,\r\n                                            // \"conditionstring\": \" and nformcode in (140) \",\r\n                                            \"tablecolumnname\": childData.tablecolumnname,\r\n                                            \"foriegntablename\": \"dynamicmaster\"\r\n                                        })\r\n                                    })\r\n                                }\r\n                                component.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                                component.unique && samplecombinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n                                samplesearchfields.push(component.label)\r\n                                sampletemplatefields.push({\r\n                                    [designProperties.LABEL]: component.displayname,\r\n                                    [designProperties.VALUE]: component.label,\r\n                                    [designProperties.PRIMARYKEY]: component.valuemember,\r\n                                    [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode\r\n                                })\r\n                                sampleAuditFields.push(component.label);\r\n                                sampleAuditMultilingualFields.push({ [component.label]: component.displayname })\r\n                                if (component.inputtype === 'date') {\r\n                                    sampledatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                                    sampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\r\n                                }\r\n                                displayFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]:component.inputtype })\r\n                                // component.templatemandatory \r\n                                //&& listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                                if (component.mandatory || component.templatemandatory) {\r\n                                    gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]:component.inputtype  })\r\n                                    listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]:component.inputtype , mandatory: true })\r\n                                    sampleAuditEditable.push(component.label);\r\n                                } else {\r\n                                    gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]:component.inputtype });\r\n                                }\r\n                                if (component.templatemandatory) {\r\n                                    editable.push({ label: component.label, editableuntill: [] })\r\n                                }\r\n                                else {\r\n                                    // editable.push({ label: component.label, editableuntill: [17] })\r\n                                    if (component.readonly)\r\n                                        editable.push({ label: component.label, editableuntill: [] })\r\n                                    else\r\n                                        editable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                                }\r\n                                return null;\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n            )\r\n        )\r\n        // if(this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){ \r\n        // displayFields.push({\r\n        //         [designProperties.LABEL]: { \"en-US\": \"Specification\", \"ru-RU\": \"Спецификация\", \"tg-TG\": \"Мушаххасот\" },\r\n        //         [designProperties.VALUE]: 'sspecname'\r\n        //     });       \r\n        displayFields.push({\r\n            //[designProperties.LABEL]: { \"en-US\": \"Reg. Date\", \"ru-RU\": \"Рег. Дата\", \"tg-TG\": \"Рег. Сана\" },\r\n            [designProperties.LABEL]: this.props.Login.genericLabel[\"RegistrationDate\"] && this.props.Login.genericLabel[\"RegistrationDate\"][\"jsondata\"][\"sdisplayname\"],\r\n            [designProperties.VALUE]: 'dregdate'\r\n        });\r\n\r\n        // }\r\n        //samplesearchfields.push(...staticSearchFields);\r\n\r\n        //console.log(\"reg sub type:\", this.props.Login);\r\n        const testListFields = { ...this.props.Login.testListFields };\r\n\r\n        let obj = {\r\n            sampledisplayfields: displayFields,\r\n            samplelistitem: listItem,\r\n            samplegriditem: gridItem,\r\n            samplegridmoreitem: gridMoreItem,\r\n            subsamplelistitem,\r\n            sampledatefields,\r\n            subsampledatefields,\r\n            samplesearchfields,\r\n            subsamplesearchfields,\r\n            testdatefields,\r\n            sampledateconstraints,\r\n            subsampledateconstraints,\r\n            // sampleuniquevalidation,\r\n            //  subsamplecombinationunique,\r\n            samplecombinationunique,\r\n            testListFields,\r\n            deleteValidation\r\n            //combinedsearchfields:[...samplesearchfields,...subsamplesearchfields,...testListFields[\"testsearchfields\"] ]\r\n        }\r\n\r\n\r\n        sampleAuditFields.push(\"dregdate\", \"stransdisplaystatus\");\r\n        sampleAuditEditable.push(\"stransdisplaystatus\");\r\n        subSampleAuditFields.push(\"stransdisplaystatus\");\r\n        subSampleAuditEditable.push(\"stransdisplaystatus\");\r\n        sampleAuditMultilingualFields.push({ \"dregdate\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"RegistrationDate\"][\"jsondata\"][\"sdisplayname\"]},\r\n                //{ \"en-US\": \"Reg. Date\", \"ru-RU\": \"Рег. Дата\", \"tg-TG\": \"Рег. Сана\" } },\r\n            { \"stransdisplaystatus\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"]});\r\n            //{ \"en-US\": \"Transaction Status\", \"ru-RU\": \"Статус транзакции\", \"tg-TG\": \"Ҳолати транзаксия\" } });\r\n        subSampleAuditMultilingualFields.push({ \"stransdisplaystatus\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"]//{ \"en-US\": \"Transaction Status\", \"ru-RU\": \"Статус транзакции\", \"tg-TG\": \"Ҳолати транзаксия\" } \r\n    });\r\n\r\n\r\n       const SAMPLETEMPLATEFIELDS= [\r\n            {\r\n            \"1\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n            \"2\": \"sarno\"\r\n            },\r\n            {\r\n                \"1\":this.props.Login.genericLabel[\"Specification\"] && this.props.Login.genericLabel[\"Specification\"][\"jsondata\"][\"sdisplayname\"],\r\n                // \"1\": {\r\n                //     \"en-US\": \"Specification\", \r\n                //     \"ru-RU\": \"Спецификация\", \r\n                //     \"tg-TG\": \"Мушаххасот\" \r\n                //     },\r\n                \"2\": \"sspecname\"\r\n            },\r\n            {\r\n                \"1\":this.props.Login.genericLabel[\"RegistrationDate\"] && this.props.Login.genericLabel[\"RegistrationDate\"][\"jsondata\"][\"sdisplayname\"],\r\n                // \"1\": {\r\n                //     \"en-US\": \"Reg. Date\",\r\n                //     \"ru-RU\": \"Рег. Датировать\",\r\n                //     \"tg-TG\": \"Рег. Сана\"\r\n                //     },\r\n                \"2\": \"dregdate\"\r\n            },\r\n            {\r\n                \"1\":this.props.Login.genericLabel[\"TransactionStatus\"] && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"],\r\n                // \"1\": {\r\n                //     \"en-US\": \"Transaction Status\",\r\n                //     \"ru-RU\": \"Статус транзакции\",\r\n                //     \"tg-TG\": \"Ҳолати транзаксия\"\r\n                //     },\r\n                \"2\": \"stransdisplaystatus\"\r\n            }\r\n        ];\r\n\r\n        const SUBSAMPLETEMPLATEFIELDS= [\r\n            {\r\n            // \"1\": {\r\n            //     \"en-US\": \"AR.No.\",\r\n            //     \"ru-RU\": \"AR.No.\",\r\n            //     \"tg-TG\": \"AR.No.\"\r\n            //     },\r\n            \"1\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n            \"2\": \"sarno\"\r\n            },\r\n            {\r\n                // \"1\": {\r\n                //     \"en-US\": \"Sub AR.No.\",\r\n                //     \"ru-RU\": \"Sub AR.No.\",\r\n                //     \"tg-TG\": \"Зер AR.№\"\r\n                //     },\r\n                \"1\": this.props.Login.genericLabel[\"SubARNo\"] && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                \"2\": \"ssamplearno\"\r\n            },\r\n            {\r\n                // \"1\": {\r\n                //     \"en-US\": \"Transaction Status\",\r\n                //     \"ru-RU\": \"Статус транзакции\",\r\n                //     \"tg-TG\": \"Ҳолати транзаксия\"\r\n                //     },\r\n                \"1\": this.props.Login.genericLabel[\"TransactionStatus\"] && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"],\r\n                \"2\": \"stransdisplaystatus\"\r\n            },\r\n        ];\r\n\r\n        let jsondata = {\r\n\r\n            subsamplecombinationunique,\r\n            samplecombinationunique,\r\n            sampletemplatefields: [...SAMPLETEMPLATEFIELDS, ...sampletemplatefields],\r\n            subsampletemplatefields: [...SUBSAMPLETEMPLATEFIELDS, ...subsampletemplatefields],//: subsamplesearchfields,\r\n            [formCode.SAMPLEREGISTRATION]: {\r\n                ...obj,\r\n                sampleeditable: editable,\r\n                subsampleeditable,\r\n                samplecombinationunique,\r\n                subsamplecombinationunique\r\n            },\r\n            [formCode.RESULTENTRY]: { ...obj, },\r\n            [formCode.APPROVAL]: { ...obj, },\r\n            [formCode.JOBALLOCATION]: {\r\n                ...obj,\r\n                samplegriditem: [\r\n                    ...obj.samplegriditem,\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"Section\",\r\n                        //     \"ru-RU\": \"Раздел\",\r\n                        //     \"tg-TG\": \"Ҷудокунӣ\"\r\n                        // },\r\n                        \"1\":this.props.Login.genericLabel[\"Section\"] && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Section\"\r\n                    },\r\n                    //...obj.samplegriditem,   \r\n                ],\r\n                samplesearchfields: [\r\n                    ...obj.samplesearchfields,\r\n                    //{\r\n                    \"Section\"\r\n                    //},\r\n                ],\r\n\r\n                testgriditem: [\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"Test Synonym\",\r\n                        //     \"ru-RU\": \"Тестовый синоним\",\r\n                        //     \"tg-TG\": \"Синоними санҷиш\"\r\n                        // },\r\n                        \"1\": this.props.Login.genericLabel[\"TestSynonym\"] && this.props.Login.genericLabel[\"TestSynonym\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"stestsynonym\"\r\n                    },\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"Section\",\r\n                        //     \"ru-RU\": \"Раздел\",\r\n                        //     \"tg-TG\": \"Ҷудокунӣ\"\r\n                        // },\r\n                        \"1\": this.props.Login.genericLabel[\"Section\"] && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"ssectionname\"\r\n                    },\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"Technique\",\r\n                        //     \"ru-RU\": \"Техника\",\r\n                        //     \"tg-TG\": \"Техника\"\r\n                        // },\r\n                        \"1\": this.props.Login.genericLabel[\"Technique\"] && this.props.Login.genericLabel[\"Technique\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Technique\"\r\n                    },\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"Users\",\r\n                        //     \"ru-RU\": \"Пользователи\",\r\n                        //     \"tg-TG\": \"Истифодабарандагон\"\r\n                        // },\r\n                        \"1\": this.props.Login.genericLabel[\"Users\"] && this.props.Login.genericLabel[\"Users\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Users\"\r\n                    },\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"Instrument Category\",\r\n                        //     \"ru-RU\": \"Категория инструмента\",\r\n                        //     \"tg-TG\": \"Категорияи асбобҳо\"\r\n                        // },\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentCategory\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"InstrumentCategory\"\r\n                    },\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"Instrument\",\r\n                        //     \"ru-RU\": \"Инструмент\",\r\n                        //     \"tg-TG\": \"Асбоб\"\r\n                        // },\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Instrument\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Instrument\"\r\n                    }\r\n                ],\r\n                samplelistitem: [\r\n                    ...obj.samplelistitem,                    \r\n                    // {\r\n                       \r\n                    //     \"1\": this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"],\r\n                    //     \"2\": \"Sample Category\"\r\n                    // },\r\n                    {\r\n                        // \"1\": {\r\n\r\n                        //     \"en-US\": \"Sample Category\",\r\n                        //     \"ru-RU\": \"Sample Category\",\r\n                        //     \"tg-TG\": \"Sample Category\"\r\n                        // },\r\n                        //\"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"],\r\n                        //\"2\": \"Sample Category\"\r\n                    },\r\n                    {\r\n                        // \"1\": {\r\n\r\n                        //     \"en-US\": \"Section\",\r\n                        //     \"ru-RU\": \"Раздел\",\r\n                        //     \"tg-TG\": \"Ҷудокунӣ\"\r\n                        // },\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Section\"\r\n                    },\r\n                ],\r\n                subsamplelistitem: [\r\n                    ...obj.subsamplelistitem,                   \r\n                    {\r\n                       \r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"ssectionname\"\r\n                    },\r\n                ],\r\n                testdisplayfields: [\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"Test Synonym\",\r\n                        //     \"ru-RU\": \"Тестовый синоним\",\r\n                        //     \"tg-TG\": \"Синоними санҷиш\"\r\n                        // },\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"TestSynonym\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"stestsynonym\"\r\n                    },\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"Section\",\r\n                        //     \"ru-RU\": \"Раздел\",\r\n                        //     \"tg-TG\": \"Ҷудокунӣ\"\r\n                        //},\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"ssectionname\"\r\n                    },\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"Technique\",\r\n                        //     \"ru-RU\": \"Техника\",\r\n                        //     \"tg-TG\": \"Техника\"\r\n                        // },\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Technique\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Technique\"\r\n                    },\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"Users\",\r\n                        //     \"ru-RU\": \"Пользователи\",\r\n                        //     \"tg-TG\": \"Истифодабарандагон\"\r\n                        // },\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Users\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Users\"\r\n                    },\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"Instrument Category\",\r\n                        //     \"ru-RU\": \"Категория инструмента\",\r\n                        //     \"tg-TG\": \"Категорияи асбобҳо\"\r\n                        // },\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentCategory\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"InstrumentCategory\"\r\n                    },\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"Instrument\",\r\n                        //     \"ru-RU\": \"Инструмент\",\r\n                        //     \"tg-TG\": \"Асбоб\"\r\n                        // },\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Instrument\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Instrument\"\r\n                    }\r\n                ],\r\n                testgridmoreitem: [\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"User Start Date\",\r\n                        //     \"ru-RU\": \"Дата начала работы пользователя\",\r\n                        //     \"tg-TG\": \"Санаи оғози корбар\"\r\n                        // },\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"UserStartDate\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"UserStartDate\"\r\n                    },\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"User End Date\",\r\n                        //     \"ru-RU\": \"Дата окончания пользователя\",\r\n                        //     \"tg-TG\": \"Санаи анҷоми корбар\"\r\n                        // },\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"UserEndDate\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"UserEndDate\"\r\n                    },\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"User Duration\",\r\n                        //     \"ru-RU\": \"Продолжительность пользователя\",\r\n                        //     \"tg-TG\": \"Давомнокии корбар\"\r\n                        // },\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"UserDuration\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"UserDuration\"\r\n                    },\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"Instrument Start Date\",\r\n                        //     \"ru-RU\": \"Дата запуска инструмента\",\r\n                        //     \"tg-TG\": \"Санаи оғози асбоб\"\r\n                        // },\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentStartDate\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"InstrumentStartDate\"\r\n                    },\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"Instrument End Date\",\r\n                        //     \"ru-RU\": \"Дата окончания инструмента\",\r\n                        //     \"tg-TG\": \"Санаи анҷоми асбоб\"\r\n                        // },\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentEndDate\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"InstrumentEndDate\"\r\n                    },\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"Instrument Duration\",\r\n                        //     \"ru-RU\": \"Продолжительность инструмента\",\r\n                        //     \"tg-TG\": \"Давомнокии асбоб\"\r\n                        // },\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentDuration\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"InstrumentDuration\"\r\n                    },\r\n                    {\r\n                        // \"1\": {\r\n                        //     \"en-US\": \"Comments\",\r\n                        //     \"ru-RU\": \"Комментарии\",\r\n                        //     \"tg-TG\": \"Шарҳҳо\"\r\n                        // },\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Comments\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Comments\"\r\n                    }\r\n                ]\r\n                //...obj, \r\n\r\n            },\r\n            //[formCode.JOBALLOCATION]: {...obj,},\r\n            [formCode.MYJOBS]: { ...obj, },\r\n            [formCode.WORKLIST]: { ...obj, },\r\n            [formCode.BATCHCREATION]: {\r\n\r\n                samplegriditem: [\r\n                    {\r\n                        //\"1\": { ...ARNOMULTILINGUAL },\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"sarno\"\r\n                    },\r\n                    ...obj.samplegriditem,\r\n\r\n                ],\r\n\r\n                subsamplelistitem: [{\r\n\r\n                   // \"1\": { ...SUBARNOMULTILINGUAL },\r\n                    \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                    \"2\": \"ssamplearno\"\r\n                },\r\n                ...obj.subsamplelistitem,\r\n                ],\r\n                ...obj,\r\n            },\r\n            [formCode.TESTWISEMYJOBS]: { ...obj, },\r\n            [formCode.RELEASE]: {\r\n                ...obj,\r\n                // sampledisplayfields: [\r\n                //     {  \"1\":  {...ARNOMULTILINGUAL},\r\n                //     \"2\": \"sarno\"\r\n                // },\r\n                // ...obj.sampledisplayfields\r\n                // ],\r\n                // samplegriditem: [\r\n                //     {\r\n                //         \"1\":  {...ARNOMULTILINGUAL},\r\n                //         \"2\": \"sarno\"\r\n                //     },\r\n                //     ...obj.samplegriditem\r\n                // ],\r\n                subsamplelistitem: [{\r\n                    //\"1\": { ...SUBARNOMULTILINGUAL },\r\n                    \"1\":this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                    \"2\": \"ssamplearno\"\r\n                },\r\n                ...obj.subsamplelistitem]\r\n\r\n                // },\r\n            },\r\n            sampleAuditEditable,\r\n            sampleAuditFields,\r\n            sampleAuditMultilingualFields,\r\n            subSampleAuditEditable,\r\n            subSampleAuditFields,\r\n            subSampleAuditMultilingualFields,\r\n            deleteValidation,\r\n\r\n        }\r\n        //console.log(\"jsondata:\", jsondata);\r\n        return jsondata;\r\n    }\r\n\r\n    onChangeToggle = (event, dataItem, field, dataIndex, formCode, operation) => {\r\n\r\n        let designData = this.props.Login.designData;\r\n        let dataResult = this.props.Login.dataResult;\r\n        if (operation === 'configureaudit') {\r\n            designData = this.props.Login.auditFieldDesignData;\r\n            dataResult = this.props.Login.auditFieldDataResult;\r\n        }\r\n\r\n        let tableName = \"registration\";\r\n        if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\r\n            tableName = \"dynamicmaster\";\r\n        }\r\n        if (formCode === undefined) {\r\n            dataResult[dataIndex][field] = event.target.checked;\r\n            if (event.target.checked) {\r\n                designData[field].splice(dataIndex, 0, dataItem.realData)\r\n\r\n            } else {\r\n                designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n            }\r\n        }\r\n        else {\r\n            //dataResult[formCode][dataIndex][field] = event.target.checked;\r\n            if (event.target.checked) {\r\n                if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDS\" }))\r\n                }\r\n                else {\r\n\r\n                    if (field === 'sampledisplayfields') {\r\n                        dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                        designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label);\r\n                        designData[formCode][field].splice(dataIndex, 0, dataItem.realData);\r\n                    }\r\n                    else if (field === 'sampleauditfields') {\r\n                        dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\r\n                        if (designData[formCode][tableName]['sampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n                            designData[formCode][tableName]['sampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                            designData[formCode][tableName]['multilingualfields'].splice(dataIndex, 0, { [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL] });\r\n                        }\r\n                    }\r\n                    else if (field === 'sampleauditeditfields') {\r\n                        dataResult[formCode][tableName][dataIndex][\"sampleauditfields\"] = event.target.checked;\r\n                        dataResult[formCode][tableName][dataIndex][\"sampleauditeditfields\"] = event.target.checked;\r\n                        if (designData[formCode][tableName]['sampleauditeditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n\r\n                            designData[formCode][tableName][field].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                            if (designData[formCode][tableName]['sampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n                                designData[formCode][tableName]['sampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                                designData[formCode][tableName]['multilingualfields'].splice(dataIndex, 0, { [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL] });\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (field === 'subsampleauditfields') {\r\n                        dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\r\n                        if (designData[formCode]['registrationsample']['subsampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n                            designData[formCode]['registrationsample']['subsampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                            designData[formCode]['registrationsample']['multilingualfields'].splice(dataIndex, 0, { [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL] });\r\n                        }\r\n                    }\r\n                    else if (field === 'subsampleauditeditfields') {\r\n                        dataResult[formCode]['registrationsample'][dataIndex][\"subsampleauditfields\"] = event.target.checked;\r\n                        dataResult[formCode]['registrationsample'][dataIndex][\"subsampleauditeditfields\"] = event.target.checked;\r\n                        if (designData[formCode]['registrationsample']['subsampleauditeditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n\r\n                            designData[formCode]['registrationsample'][field].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                            if (designData[formCode]['registrationsample']['subsampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n                                designData[formCode]['registrationsample']['subsampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                                designData[formCode]['registrationsample']['multilingualfields'].splice(dataIndex, 0, { [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL] });\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                        designData[formCode][field].splice(dataIndex, 0, dataItem.realData);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n\r\n                if (field === 'sampledisplayfields') {\r\n                    dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                    designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n\r\n                    const index = designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index !== -1) {\r\n                        designData[formCode]['samplesearchfields'].splice(index, 1)\r\n                    }\r\n                }\r\n                else if (field === 'sampleauditfields') {\r\n                    dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\r\n                    const index = designData[formCode][tableName][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index !== -1) {\r\n                        designData[formCode][tableName][field].splice(index, 1);\r\n                    }\r\n\r\n                    const index1 = designData[formCode][tableName]['multilingualfields'].map(object => Object.keys(object)[0]).indexOf(dataItem.label);\r\n                    if (index1 !== -1) {\r\n                        designData[formCode][tableName]['multilingualfields'].splice(index1, 1);\r\n                    }\r\n\r\n                    const index3 = designData[formCode][tableName][\"sampleauditeditfields\"].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index3 !== -1) {\r\n                        designData[formCode][tableName][\"sampleauditeditfields\"].splice(index3, 1)\r\n                    }\r\n                    dataResult[formCode][tableName][dataIndex][\"sampleauditeditfields\"] = event.target.checked;\r\n                }\r\n                else if (field === 'sampleauditeditfields') {\r\n                    dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\r\n                    const index4 = designData[formCode][tableName][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index4 !== -1) {\r\n                        designData[formCode][tableName][field].splice(index4, 1);\r\n                    }\r\n                }\r\n                else if (field === 'subsampleauditfields') {\r\n                    dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\r\n                    const index1 = designData[formCode]['registrationsample'][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index1 !== -1) {\r\n                        designData[formCode][\"registrationsample\"][field].splice(index1, 1)\r\n                    }\r\n\r\n                    const index2 = designData[formCode][\"registrationsample\"]['multilingualfields'].map(object => Object.keys(object)[0]).indexOf(dataItem.label);\r\n                    if (index2 !== -1) {\r\n                        designData[formCode][\"registrationsample\"]['multilingualfields'].splice(index2, 1);\r\n                    }\r\n                    const index3 = designData[formCode]['registrationsample'][\"subsampleauditeditfields\"].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index3 !== -1) {\r\n                        designData[formCode][\"registrationsample\"][\"subsampleauditeditfields\"].splice(index3, 1)\r\n                    }\r\n                    dataResult[formCode][\"registrationsample\"][dataIndex][\"subsampleauditeditfields\"] = event.target.checked;\r\n                }\r\n                else if (field === 'subsampleauditeditfields') {\r\n                    dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\r\n                    const index1 = designData[formCode]['registrationsample'][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index1 !== -1) {\r\n                        designData[formCode][\"registrationsample\"][field].splice(index1, 1);\r\n                    }\r\n                }\r\n                else {\r\n                    dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                    designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.realData[designProperties.VALUE]), 1)\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        let data = { designData, dataResult };\r\n        if (operation === 'configureaudit') {\r\n            data = {\r\n                auditFieldDesignData: designData,\r\n                auditFieldDataResult: dataResult\r\n            };\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { ...data }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n    onApproveSaveClick=()=>{\r\n        this.onApproveClick()\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        // console.log(\"save:\", this.props.Login.masterData.realRegSubTypeValue);\r\n        //console.log(\"data:\", this.props.Login.editFieldDesignData)\r\n        let inputData = [];\r\n\r\n        let operation = this.props.Login.operation;\r\n        const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\r\nif(operation==='Approve'){\r\n    this.onApproveClick()\r\n}else{\r\n        if (operation === 'configure' || operation === 'configuresubsample') {\r\n            inputData = {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                    jsondataobj: this.props.Login.designData\r\n                },\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n            operation = 'configure'\r\n        }\r\n        else if (operation === 'configureedit' || operation === 'configuresubsampleedit') {\r\n\r\n            let designData = this.props.Login.editFieldDesignData;\r\n            let formCodeArray = Object.keys(this.state.selectedRecord);\r\n\r\n            formCodeArray.forEach(formCode => {\r\n                const data = this.state.selectedRecord[formCode];\r\n\r\n                let editableData = designData[formCode]['sampleeditable'];;\r\n                if (operation === 'configuresubsampleedit') {\r\n                    editableData = designData[formCode]['subsampleeditable'];;\r\n                }\r\n\r\n                Object.keys(data).map(label => {\r\n                    const editableuntil = [];\r\n                    data[label].map(statusItem =>\r\n                        editableuntil.push(statusItem.value)\r\n                    )\r\n                    const index = editableData.findIndex(item => item.label === label);\r\n                    if (index === -1) {\r\n                        editableData.push({ \"label\": label, \"editableuntill\": editableuntil });\r\n                    }\r\n                    else {\r\n                        editableData[index] = { \"label\": label, \"editableuntill\": editableuntil };\r\n                    }\r\n                    //designData[formCode]['sampleeditable'].push({\"label\":label, \"editableuntill\":editableuntil});\r\n                })\r\n\r\n            })\r\n            inputData = {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                    jsondataobj: designData\r\n                },\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n\r\n            operation = 'configure';\r\n        }\r\n        else if (operation === 'configureunique') {\r\n            let designData = this.props.Login.designData;\r\n            //  let formCodeArray = Object.keys(this.state.selectedRecord);\r\n            const dataList = []\r\n            const dataListsubsample = []\r\n            this.props.Login.dataList.map(x => {\r\n                if (Object.keys(x).length !== 0) {\r\n                    dataList.push(x);\r\n                }\r\n            })\r\n            if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\r\n                designData['mastercombinationunique'] = dataList\r\n            } else {\r\n                designData['samplecombinationunique'] = dataList\r\n                designData[formCode.SAMPLEREGISTRATION]['samplecombinationunique'] = dataList\r\n                this.props.Login.dataListSubSample.map(x => {\r\n                    if (Object.keys(x).length !== 0) {\r\n                        dataListsubsample.push(x);\r\n                    }\r\n                })\r\n                designData['subsamplecombinationunique'] = dataListsubsample\r\n                designData[formCode.SAMPLEREGISTRATION]['subsamplecombinationunique'] = dataListsubsample\r\n            }\r\n\r\n\r\n            inputData = {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                    jsondataobj: designData\r\n                },\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n\r\n            operation = 'configure';\r\n        }\r\n        else if (operation === 'configureaudit') {\r\n            //console.log(\"auditFieldDesignData:\", this.props.Login);\r\n\r\n            inputData = {\r\n                //dynamicaudit: {\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                auditdata: this.props.Login.auditData,\r\n                //nregtypecode:this.props.Login.masterData.realRegTypeValue.value, \r\n                //nregsubtypecode:this.props.Login.masterData.realRegSubTypeValue.value, \r\n                //nformcode:43, stablename:'registration',\r\n\r\n                // },\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n\r\n            //operation = 'configure';\r\n        } else if (operation === 'configuresendtostore') {\r\n            // const sampleQty = new Map();\r\n            //  const sampleUnit = new Map();\r\n            // let inputData=[];\r\n            //  let subsamplefields = [];\r\n            //  let senttostoragefields=[];\r\n\r\n            let samqty = {\r\n                \"1\": this.state.selectedRecord.Quantity !== undefined && this.state.selectedRecord.Quantity !== null ? this.state.selectedRecord.Quantity.item.displayname : \"\",\r\n                \"2\": this.state.selectedRecord.Quantity !== undefined && this.state.selectedRecord.Quantity !== null ? this.state.selectedRecord.Quantity.label : \"\"\r\n            }\r\n            let samunit = {\r\n                \"1\": this.state.selectedRecord.Unit !== undefined && this.state.selectedRecord.Unit !== null ? this.state.selectedRecord.Unit.item.displayname : \"\",\r\n                \"2\": this.state.selectedRecord.Unit !== undefined && this.state.selectedRecord.Unit !== null ? this.state.selectedRecord.Unit.label : \"\"\r\n            }\r\n            let subsamqty = {\r\n                \"1\": this.state.selectedRecord.SubQuantity !== undefined && this.state.selectedRecord.SubQuantity !== null ? this.state.selectedRecord.SubQuantity.item.displayname : \"\",\r\n                \"2\": this.state.selectedRecord.SubQuantity !== undefined && this.state.selectedRecord.SubQuantity !== null ? this.state.selectedRecord.SubQuantity.label : \"\"\r\n            }\r\n            let subsamunit = {\r\n                \"1\": this.state.selectedRecord.SubUnit !== undefined && this.state.selectedRecord.SubUnit !== null ? this.state.selectedRecord.SubUnit.item.displayname : \"\",\r\n                \"2\": this.state.selectedRecord.SubUnit !== undefined && this.state.selectedRecord.SubUnit !== null ? this.state.selectedRecord.SubUnit.label : \"\"\r\n            }\r\n            let sample = { \"nsampleqty\": samqty, \"nunitcode\": samunit };\r\n            let subsample = { \"nsampleqty\": subsamqty, \"nunitcode\": subsamunit };\r\n            let str = { \"samplefields\": sample, \"subsamplefields\": subsample };\r\n            let senttostoragefields = { \"senttostoragefields\": str };\r\n            // console.log(JSON.stringify(senttostoragefields));\r\n            inputData = {\r\n                \"userinfo\": this.props.Login.userInfo, \"senttostoragefields\": senttostoragefields, \"updatesendtostore\": senttostoragefields.senttostoragefields,\r\n                \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n            };\r\n        }\r\n        else if(operation === 'approve'){\r\n            let { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey, deleteValidation, jsqlquerycolumns,sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect } = this.getGridJsondata(this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n                this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\");\r\n\r\n            // console.log(\"deleteValidation 2:\", deleteValidation);\r\n\r\n             inputData = { jdynamiccolumns, jnumericcolumns, jsqlquerycolumns, sprimarykeyname: templatePrimaryKey,sampleQuerybuilderViewCondition,sampleQuerybuilderViewSelect };\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData[\"designtemplatemapping\"] = { \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\" };\r\n            inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\r\n            inputData[\"deletevalidationlist\"] = deleteValidation;\r\n            inputData[\"sviewname\"] = this.state.selectedRecord.sviewname;\r\n        }\r\n        else {\r\n            // console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\r\n            let { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey } = this.props.Login.masterData.realSampleValue.value === SampleType.Masters ?\r\n                this.getGridJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata)\r\n                : {};\r\n\r\n            let auditData = {};\r\n\r\n            let dataObject = {};\r\n            if (this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\r\n                dataObject = this.getJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata);\r\n                // console.log(\"json:\",dataObject);\r\n\r\n                auditData = {\r\n                    \"registration\": {\r\n                        editmandatoryfields: dataObject[\"sampleAuditEditable\"],\r\n                        auditcapturefields: dataObject[\"sampleAuditFields\"],\r\n                        multilingualfields: dataObject[\"sampleAuditMultilingualFields\"]\r\n                    },\r\n                };\r\n\r\n                if (needsubsample) {\r\n                    auditData = {\r\n                        ...auditData,\r\n                        registrationsample: {\r\n                            editmandatoryfields: dataObject[\"subSampleAuditEditable\"],\r\n                            auditcapturefields: dataObject[\"subSampleAuditFields\"],\r\n                            multilingualfields: dataObject[\"subSampleAuditMultilingualFields\"]\r\n                        },\r\n                    }\r\n                    delete dataObject[\"subSampleAuditEditable\"];\r\n                    delete dataObject[\"subSampleAuditFields\"];\r\n                    delete dataObject[\"subSampleAuditMultilingualFields\"];\r\n                }\r\n                delete dataObject[\"sampleAuditEditable\"];\r\n                delete dataObject[\"sampleAuditFields\"];\r\n                delete dataObject[\"sampleAuditMultilingualFields\"];\r\n            }\r\n            else {\r\n                // if(this.props.Login.masterData.realSampleValue.value === SampleType.Masters){\r\n                auditData = {\r\n                    \"dynamicmaster\": {\r\n                        editmandatoryfields: jsondata[\"sampleAuditEditable\"],\r\n                        auditcapturefields: jsondata[\"sampleAuditFields\"],\r\n                        multilingualfields: jsondata[\"sampleAuditMultilingualFields\"]\r\n                    },\r\n                };\r\n            }\r\n\r\n            inputData = {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                \"ncontrolcode\": this.props.Login.ncontrolCode,\r\n                \"nreactregtemplatecode\": this.state.selectedRecord.nreactregtemplatecode.value,\r\n                \"nsampletypecode\": this.props.Login.masterData.realSampleValue.value,\r\n                \"nregtypecode\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\r\n                \"nregsubtypecode\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\r\n                \"sregsubtypename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"\",\r\n                \"nformcode\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\r\n                \"nsubsampletemplatecode\": this.state.selectedRecord.nsubsampletemplatecode ? this.state.selectedRecord.nsubsampletemplatecode.value : -1,\r\n                \"jsondataobj\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? jsondata\r\n                    : dataObject,\r\n                auditdata: auditData,\r\n                needsubsample: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false\r\n            }\r\n\r\n            inputData[\"designtemplatemapping\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n            if (this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.value === -2) {\r\n                let qf_jsonData = { sdisplayname: {} };\r\n                let qbt_jsonData = { tablename: {} };\r\n\r\n                this.props.Login.languageList.map(lang => {\r\n                    qf_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord.sformname;\r\n                    qbt_jsonData['tablename'][lang.value] = this.state.selectedRecord.sformname\r\n                })\r\n\r\n                let qm_jsonData = { sdisplayname: {} };\r\n\r\n                let nmodulecode = 0;\r\n                let smoduledisplayname = \"\";\r\n\r\n                if (this.state.selectedRecord[\"nnewmodule\"].value === transactionStatus.YES) {\r\n                    smoduledisplayname = this.state.selectedRecord[\"nmodulecode\"];\r\n                    this.props.Login.languageList.map(lang => {\r\n                        qm_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord[\"nmodulecode\"];\r\n                    })\r\n                }\r\n                else {\r\n                    nmodulecode = this.state.selectedRecord[\"nmodulecode\"].value;\r\n                }\r\n                inputData = {\r\n                    ...inputData,\r\n                    sformname: this.state.selectedRecord.sformname,\r\n                    sregtemplatename: this.state.selectedRecord.nreactregtemplatecode.label,\r\n                    nmodulecode,\r\n                    smoduledisplayname,\r\n                    qm_jsonData,\r\n                    qf_jsonData,\r\n                    qbt_jsonData,\r\n                    sprimarykeyname: templatePrimaryKey,\r\n                    jdynamiccolumns,\r\n                    jnumericcolumns\r\n                }\r\n            } else {\r\n                inputData = {\r\n                    ...inputData,\r\n                    sformname: this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label,\r\n                    sregtemplatename: this.state.selectedRecord.nreactregtemplatecode.label,\r\n                    ssubregtemplatename: this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.label,\r\n                    sprimarykeyname: templatePrimaryKey,\r\n                    jdynamiccolumns,\r\n                    jnumericcolumns\r\n\r\n                }\r\n            }\r\n            // this.designtemplatemappingFieldList.map(item => {\r\n            //     return inputData[\"designtemplatemapping\"][item] = this.state.selectedRecord[item]\r\n            // });\r\n        }\r\n\r\n        //console.log(\"input:\", inputData);\r\n        let postParam = undefined;\r\n        const inputParam = {\r\n            classUrl: \"designtemplatemapping\",\r\n            methodUrl: \"DesignTemplateMapping\",\r\n            inputData: inputData,\r\n            operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef, dataList: [], dataListCount: [], dataListCountSubSample: [], dataListSubSample: []\r\n        }\r\n        if (operation === 'configureaudit') {\r\n            inputParam[\"methodUrl\"] = \"DynamicAudit\";\r\n            inputParam[\"operation\"] = \"configure\";\r\n            //operation = 'configure';\r\n        }\r\n        if (operation === 'configuresendtostore') {\r\n            inputParam[\"methodUrl\"] = \"ConfigureSendToStore\";\r\n            inputParam[\"operation\"] = \"update\";\r\n            //operation = 'configure';\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (\r\n            showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType, dataList: [], dataListCount: [], dataListCountSubSample: [], dataListSubSample: []\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential, editFieldConfigService,\r\n    updateStore, getDesignTemplateMappingDetail, getMappedFieldProps,\r\n    getDesignTemplateMappingComboService, filterColumnData, auditFieldConfigService,\r\n    reloadDesignTemplateMapping, getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit, combinationUniqueConfigService, mappingFieldConfigService\r\n})(injectIntl(DesignTemplateMapping));\r\n\r\n"]},"metadata":{},"sourceType":"module"}