{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5294\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\AddTest.jsx\";\nimport React, { Component } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { formCode } from '../../components/Enumeration';\n\nclass AddTest extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }\n    }, this.props.hideQualisForms && this.props.hideQualisForms.findIndex(item => item.nformcode === formCode.TESTPACKAGE) === -1 && /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"ntestpackagecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_TESTPACKAGE\"\n      }),\n      options: this.props.TestPackage || [],\n      optionId: \"ntestpackagecode\",\n      optionValue: \"stestpackagename\",\n      isSearchable: true,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: false,\n      alphabeticalSort: \"true\",\n      value: this.props.selectPackage && this.props.selectPackage[\"ntestpackagecode\"] ? this.props.selectPackage[\"ntestpackagecode\"] : [],\n      isClearable: true,\n      defaultValue: this.props.selectPackage ? this.props.selectPackage[\"ntestpackagecode\"] : \"\",\n      closeMenuOnSelect: true,\n      onChange: event => this.props.onTestPackageChange(event, \"ntestpackagecode\", \"\", true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nsectioncode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_TESTSELECTION\"\n      }),\n      options: this.props.TestSection || [],\n      optionId: \"nsectioncode\",\n      optionValue: \"ssectionname\",\n      isSearchable: true,\n      isClearable: true,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: false,\n      alphabeticalSort: \"true\",\n      value: this.props.selectSection && this.props.selectSection[\"nsectioncode\"] ? this.props.selectSection[\"nsectioncode\"] : [],\n      defaultValue: this.props.selectSection ? this.props.selectSection[\"nsectioncode\"] : \"\",\n      closeMenuOnSelect: true,\n      onChange: event => this.props.onTestSectionChange(event, \"nsectioncode\", \"\", true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(FormMultiSelect, {\n      name: \"ntestgrouptestcode\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_TESTNAME\"\n      }),\n      options: this.props.TestCombined || [],\n      optionId: \"ntestgrouptestcode\",\n      optionValue: \"stestsynonym\",\n      value: this.props.selectedTestData && this.props.selectedTestData[\"ntestgrouptestcode\"] ? this.props.selectedTestData[\"ntestgrouptestcode\"] : [],\n      isMandatory: true,\n      isClearable: true,\n      disableSearch: false,\n      disabled: false,\n      closeMenuOnSelect: false,\n      alphabeticalSort: true,\n      onChange: event => this.props.TestChange(event, \"ntestgrouptestcode\"),\n      customArrow: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default injectIntl(AddTest);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/pages/registration/AddTest.jsx"],"names":["React","Component","Col","Row","injectIntl","FormMultiSelect","FormSelectSearch","formCode","AddTest","render","props","hideQualisForms","findIndex","item","nformcode","TESTPACKAGE","intl","formatMessage","id","TestPackage","selectPackage","event","onTestPackageChange","TestSection","selectSection","onTestSectionChange","TestCombined","selectedTestData","TestChange"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,OAAOC,eAAP,MAA4B,gEAA5B;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AACA,SAASC,QAAT,QAAyB,8BAAzB;;AAEA,MAAMC,OAAN,SAAsBP,SAAtB,CAAgC;AAC5BQ,EAAAA,MAAM,GAAG;AACL,wBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,KAAKC,KAAL,CAAWC,eAAX,IACE,KAAKD,KAAL,CAAWC,eAAX,CAA2BC,SAA3B,CAAqCC,IAAI,IAAIA,IAAI,CAACC,SAAL,KAAmBP,QAAQ,CAACQ,WAAzE,MAA0F,CAAC,CAD9F,iBAGG,oBAAC,gBAAD;AACI,MAAA,IAAI,EAAE,kBADV;AAEI,MAAA,SAAS,EAAE,KAAKL,KAAL,CAAWM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFf;AAGI,MAAA,OAAO,EAAE,KAAKR,KAAL,CAAWS,WAAX,IAA0B,EAHvC;AAII,MAAA,QAAQ,EAAE,kBAJd;AAKI,MAAA,WAAW,EAAC,kBALhB;AAMI,MAAA,YAAY,EAAE,IANlB;AAOI,MAAA,WAAW,EAAE,KAAKT,KAAL,CAAWM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAPjB;AAQI,MAAA,WAAW,EAAE,KARjB;AASI,MAAA,gBAAgB,EAAC,MATrB;AAUI,MAAA,KAAK,EAAE,KAAKR,KAAL,CAAWU,aAAX,IAA4B,KAAKV,KAAL,CAAWU,aAAX,CAAyB,kBAAzB,CAA5B,GACH,KAAKV,KAAL,CAAWU,aAAX,CAAyB,kBAAzB,CADG,GAC4C,EAXvD;AAYI,MAAA,WAAW,EAAE,IAZjB;AAaI,MAAA,YAAY,EAAE,KAAKV,KAAL,CAAWU,aAAX,GAA2B,KAAKV,KAAL,CAAWU,aAAX,CAAyB,kBAAzB,CAA3B,GAA0E,EAb5F;AAcI,MAAA,iBAAiB,EAAE,IAdvB;AAeI,MAAA,QAAQ,EAAGC,KAAD,IAAW,KAAKX,KAAL,CAAWY,mBAAX,CAA+BD,KAA/B,EAAsC,kBAAtC,EAA0D,EAA1D,EAA8D,IAA9D,CAfzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJR,eAuBI,oBAAC,gBAAD;AACI,MAAA,IAAI,EAAE,cADV;AAEI,MAAA,SAAS,EAAE,KAAKX,KAAL,CAAWM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFf;AAGI,MAAA,OAAO,EAAE,KAAKR,KAAL,CAAWa,WAAX,IAA0B,EAHvC;AAII,MAAA,QAAQ,EAAE,cAJd;AAKI,MAAA,WAAW,EAAC,cALhB;AAMI,MAAA,YAAY,EAAE,IANlB;AAOI,MAAA,WAAW,EAAE,IAPjB;AAQI,MAAA,WAAW,EAAE,KAAKb,KAAL,CAAWM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CARjB;AASI,MAAA,WAAW,EAAE,KATjB;AAUI,MAAA,gBAAgB,EAAC,MAVrB;AAWI,MAAA,KAAK,EAAE,KAAKR,KAAL,CAAWc,aAAX,IAA4B,KAAKd,KAAL,CAAWc,aAAX,CAAyB,cAAzB,CAA5B,GACH,KAAKd,KAAL,CAAWc,aAAX,CAAyB,cAAzB,CADG,GACwC,EAZnD;AAcI,MAAA,YAAY,EAAE,KAAKd,KAAL,CAAWc,aAAX,GAA2B,KAAKd,KAAL,CAAWc,aAAX,CAAyB,cAAzB,CAA3B,GAAsE,EAdxF;AAeI,MAAA,iBAAiB,EAAE,IAfvB;AAgBI,MAAA,QAAQ,EAAGH,KAAD,IAAW,KAAKX,KAAL,CAAWe,mBAAX,CAA+BJ,KAA/B,EAAsC,cAAtC,EAAsD,EAAtD,EAA0D,IAA1D,CAhBzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvBJ,eA0CI,oBAAC,eAAD;AACI,MAAA,IAAI,EAAE,oBADV;AAEI,MAAA,KAAK,EAAE,KAAKX,KAAL,CAAWM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFX;AAGI,MAAA,OAAO,EAAE,KAAKR,KAAL,CAAWgB,YAAX,IAA2B,EAHxC;AAII,MAAA,QAAQ,EAAE,oBAJd;AAKI,MAAA,WAAW,EAAC,cALhB;AAMI,MAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWiB,gBAAX,IAA+B,KAAKjB,KAAL,CAAWiB,gBAAX,CAA4B,oBAA5B,CAA/B,GAAmF,KAAKjB,KAAL,CAAWiB,gBAAX,CAA4B,oBAA5B,CAAnF,GAAuI,EANlJ;AAOI,MAAA,WAAW,EAAE,IAPjB;AAQI,MAAA,WAAW,EAAE,IARjB;AASI,MAAA,aAAa,EAAE,KATnB;AAUI,MAAA,QAAQ,EAAE,KAVd;AAWI,MAAA,iBAAiB,EAAE,KAXvB;AAYI,MAAA,gBAAgB,EAAE,IAZtB;AAaI,MAAA,QAAQ,EAAGN,KAAD,IAAW,KAAKX,KAAL,CAAWkB,UAAX,CAAsBP,KAAtB,EAA6B,oBAA7B,CAbzB;AAcI,MAAA,WAAW,EAAE,IAdjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1CJ,CADJ,CADJ;AAiEH;;AAnE2B;;AAsEhC,eAAejB,UAAU,CAACI,OAAD,CAAzB","sourcesContent":["import React, { Component } from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { formCode } from '../../components/Enumeration';\r\n\r\nclass AddTest extends Component {\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col md={12}>\r\n                    {(this.props.hideQualisForms &&\r\n                        this.props.hideQualisForms.findIndex(item => item.nformcode === formCode.TESTPACKAGE) === -1)\r\n                        &&\r\n                        <FormSelectSearch\r\n                            name={\"ntestpackagecode\"}\r\n                            formLabel={this.props.intl.formatMessage({ id: \"IDS_TESTPACKAGE\" })}\r\n                            options={this.props.TestPackage || []}\r\n                            optionId={\"ntestpackagecode\"}\r\n                            optionValue=\"stestpackagename\"\r\n                            isSearchable={true}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            isMandatory={false}\r\n                            alphabeticalSort=\"true\"\r\n                            value={this.props.selectPackage && this.props.selectPackage[\"ntestpackagecode\"] ?\r\n                                this.props.selectPackage[\"ntestpackagecode\"] : []}\r\n                            isClearable={true}\r\n                            defaultValue={this.props.selectPackage ? this.props.selectPackage[\"ntestpackagecode\"] : \"\"}\r\n                            closeMenuOnSelect={true}\r\n                            onChange={(event) => this.props.onTestPackageChange(event, \"ntestpackagecode\", \"\", true)}\r\n                        />\r\n                    }\r\n                    {/* ALPD-3404 */}\r\n                    <FormSelectSearch\r\n                        name={\"nsectioncode\"}\r\n                        formLabel={this.props.intl.formatMessage({ id: \"IDS_TESTSELECTION\" })}\r\n                        options={this.props.TestSection || []}\r\n                        optionId={\"nsectioncode\"}\r\n                        optionValue=\"ssectionname\"\r\n                        isSearchable={true}\r\n                        isClearable={true}\r\n                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                        isMandatory={false}\r\n                        alphabeticalSort=\"true\"\r\n                        value={this.props.selectSection && this.props.selectSection[\"nsectioncode\"] ?\r\n                            this.props.selectSection[\"nsectioncode\"] : []}\r\n\r\n                        defaultValue={this.props.selectSection ? this.props.selectSection[\"nsectioncode\"] : \"\"}\r\n                        closeMenuOnSelect={true}\r\n                        onChange={(event) => this.props.onTestSectionChange(event, \"nsectioncode\", \"\", true)}\r\n                    />\r\n\r\n                    <FormMultiSelect\r\n                        name={\"ntestgrouptestcode\"}\r\n                        label={this.props.intl.formatMessage({ id: \"IDS_TESTNAME\" })}\r\n                        options={this.props.TestCombined || []}\r\n                        optionId={\"ntestgrouptestcode\"}\r\n                        optionValue=\"stestsynonym\"\r\n                        value={this.props.selectedTestData && this.props.selectedTestData[\"ntestgrouptestcode\"] ? this.props.selectedTestData[\"ntestgrouptestcode\"] : []}\r\n                        isMandatory={true}\r\n                        isClearable={true}\r\n                        disableSearch={false}\r\n                        disabled={false}\r\n                        closeMenuOnSelect={false}\r\n                        alphabeticalSort={true}\r\n                        onChange={(event) => this.props.TestChange(event, \"ntestgrouptestcode\")}\r\n                        customArrow={true}\r\n\r\n                    />\r\n                </Col>\r\n\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default injectIntl(AddTest);"]},"metadata":{},"sourceType":"module"}