{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\mail\\\\emailalerttransaction\\\\EmailAlertTransaction.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../../components/data-grid/data-grid.component';\nimport DateTimePicker from '../../../components/date-time-picker/date-time-picker.component';\nimport { ListWrapper } from '../../../components/client-group.styles';\nimport { callService, crudMaster, updateStore, validateEsignCredential } from '../../../actions'; // import { DEFAULT_RETURN } from '../../../actions/LoginTypes';\n\nimport { getControlMap, getStartOfDay, getEndOfDay, convertDateValuetoString, rearrangeDateFormat } from '../../../components/CommonScript';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass EmailAlertTransaction extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue; // this.setState({ selectedRecord });\n      // this.reloadData(selectedRecord, true);\n\n      let dateObj = {};\n\n      if (dateName === \"fromdate\") {\n        dateObj = convertDateValuetoString(dateValue, this.props.Login.masterData.toDate, this.props.Login.userInfo, true);\n      } else {\n        dateObj = convertDateValuetoString(this.props.Login.masterData.toDate, dateValue, this.props.Login.userInfo, true);\n      }\n\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate: dateObj.fromDate,\n          toDate: dateObj.toDate\n        },\n        classUrl: 'emailalerttransaction',\n        methodUrl: \"EmailAlertTransaction\",\n        displayName: \"IDS_MAILALERTTRANSACTION\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.reloadData = (selectedRecord, isDateChange) => {\n      //this.searchRef.current.value = \"\";\n      let fromDate = this.props.Login.masterData.FromDate;\n      let toDate = this.props.Login.masterData.ToDate; // if (selectedRecord && selectedRecord[\"fromdate\"] !== undefined) {\n      //     fromDate = getStartOfDay(selectedRecord[\"fromdate\"]);\n      //  }\n      // if (selectedRecord && selectedRecord[\"todate\"] !== undefined) {\n      //     toDate = getEndOfDay(selectedRecord[\"todate\"]);\n      //  }\n\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo, true);\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate: obj.fromDate,\n          toDate: obj.toDate // currentdate: isDateChange === true ? null : formatInputDate(new Date(), true)\n\n        },\n        classUrl: 'emailalerttransaction',\n        methodUrl: \"EmailAlertTransaction\",\n        displayName: \"IDS_MAILALERTTRANSACTION\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.searchRef = React.createRef();\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showSaveContinue: true\n    };\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_DISPLAYNAME\",\n      \"dataField\": \"sdisplayname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SUBJECT\",\n      \"dataField\": \"ssubject\",\n      \"width\": \"300px\"\n    }, {\n      \"idsName\": \"IDS_SCREENNAME\",\n      \"dataField\": \"sscreenname\",\n      \"width\": \"250px\"\n    }, {\n      \"idsName\": \"IDS_CONTROLNAME\",\n      \"dataField\": \"scontrolname\",\n      \"width\": \"250px\"\n    }, {\n      \"idsName\": \"IDS_REFERENCEID\",\n      \"dataField\": \"ssystemid\",\n      \"width\": \"250px\"\n    }, {\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"width\": \"250px\"\n    }, {\n      \"idsName\": \"IDS_CREATEDDATE\",\n      \"dataField\": \"screateddate\",\n      \"width\": \"250px\"\n    }, // { \"idsName\": \"IDS_TRANSACTIONDATE\", \"dataField\": \"stransdate\", \"width\": \"250px\" },\n    // { \"idsName\": \"IDS_REASON\", \"dataField\": \"sreason\", \"width\": \"250px\" },\n    {\n      \"idsName\": \"IDS_MAILSTATUS\",\n      \"dataField\": \"ssentstatus\",\n      \"width\": \"200px\"\n    }];\n    this.detailedFieldList = [{\n      \"idsName\": \"IDS_TEMPLATEBODY\",\n      \"dataField\": \"stemplatebody\",\n      \"width\": \"300px\",\n      \"isHTML\": true\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let fromDate = \"\";\n    let toDate = \"\";\n\n    if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\n      fromDate = this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      toDate = this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DateTimePicker, {\n      name: \"fromdate\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_FROM\"\n      }),\n      className: \"form-control\",\n      placeholderText: \"Select date..\",\n      selected: this.state.selectedRecord[\"fromdate\"] || fromDate,\n      dateFormat: this.props.Login.userInfo.ssitedate,\n      isClearable: false,\n      onChange: date => this.handleDateChange(\"fromdate\", date),\n      value: this.state.selectedRecord[\"fromdate\"] || fromDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DateTimePicker, {\n      name: \"todate\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_TO\"\n      }),\n      className: \"form-control\",\n      placeholderText: \"Select date..\",\n      selected: this.state.selectedRecord[\"todate\"] || toDate,\n      dateFormat: this.props.Login.userInfo.ssitedate,\n      isClearable: false,\n      onChange: date => this.handleDateChange(\"todate\", date),\n      value: this.state.selectedRecord[\"todate\"] || toDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 37\n      }\n    }))), this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nrunningno\",\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      scrollable: \"scrollable\",\n      pageable: true,\n      isComponent: true,\n      gridHeight: '600px',\n      isToolBarRequired: true,\n      expandField: \"expanded\",\n      detailedFieldList: this.detailedFieldList,\n      selectedId: 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 33\n      }\n    }) : \"\"))));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData.EmailAlertTransaction,\n          dataResult: process(this.props.Login.masterData.EmailAlertTransaction || [], this.state.dataState)\n        });\n      } else {\n        if (this.props.Login.masterData.EmailAlertTransaction) {\n          this.setState({\n            data: this.props.Login.masterData.EmailAlertTransaction,\n            dataState: {\n              skip: 0,\n              take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n            },\n            dataResult: process(this.props.Login.masterData.EmailAlertTransaction || [], {\n              skip: 0,\n              take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n            })\n          });\n        }\n      }\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(EmailAlertTransaction));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/mail/emailalerttransaction/EmailAlertTransaction.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DataGrid","DateTimePicker","ListWrapper","callService","crudMaster","updateStore","validateEsignCredential","getControlMap","getStartOfDay","getEndOfDay","convertDateValuetoString","rearrangeDateFormat","mapStateToProps","state","Login","EmailAlertTransaction","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","handleDateChange","dateName","dateValue","selectedRecord","Date","dateObj","masterData","toDate","userInfo","inputParam","inputData","fromDate","classUrl","methodUrl","displayName","reloadData","isDateChange","FromDate","ToDate","obj","searchRef","createRef","skip","take","settings","parseInt","masterStatus","error","userRoleControlRights","controlMap","Map","showSaveContinue","extractedColumnList","detailedFieldList","getDerivedStateFromProps","warn","render","intl","formatMessage","id","ssitedate","date","componentDidUpdate","previousProps","nformcode","Object","values","map","item","push","ncontrolcode"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,OAAOC,QAAP,MAAqB,mDAArB;AACA,OAAOC,cAAP,MAA2B,iEAA3B;AACA,SAASC,WAAT,QAA4B,yCAA5B;AACA,SACIC,WADJ,EACiBC,UADjB,EAEIC,WAFJ,EAEiBC,uBAFjB,QAGO,kBAHP,C,CAIA;;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,WAAvC,EAAoDC,wBAApD,EAA8EC,mBAA9E,QAAyG,kCAAzG;;AAGA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAQ;AAAEC,IAAAA,KAAK,EAAED,KAAK,CAACC;AAAf,GAAR;AACH,CAFD;;AAIA,MAAMC,qBAAN,SAAoCtB,KAAK,CAACuB,SAA1C,CAAoD;AAChDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAqCnBC,eArCmB,GAqCAC,KAAD,IAAW;AACzB,WAAKC,QAAL,CAAc;AACVC,QAAAA,UAAU,EAAEvB,OAAO,CAAC,KAAKc,KAAL,CAAWU,IAAZ,EAAkBH,KAAK,CAACI,SAAxB,CADT;AAEVA,QAAAA,SAAS,EAAEJ,KAAK,CAACI;AAFP,OAAd;AAIH,KA1CkB;;AAAA,SAyKnBC,gBAzKmB,GAyKA,CAACC,QAAD,EAAWC,SAAX,KAAyB;AACxC,YAAM;AAAEC,QAAAA;AAAF,UAAqB,KAAKf,KAAhC;;AACA,UAAIc,SAAS,KAAK,IAAlB,EAAwB;AACpBA,QAAAA,SAAS,GAAG,IAAIE,IAAJ,EAAZ;AACH;;AACDD,MAAAA,cAAc,CAACF,QAAD,CAAd,GAA2BC,SAA3B,CALwC,CAMzC;AACA;;AAEA,UAAIG,OAAO,GAAG,EAAd;;AACA,UAAIJ,QAAQ,KAAK,UAAjB,EAA6B;AACxBI,QAAAA,OAAO,GAAGpB,wBAAwB,CAACiB,SAAD,EAAY,KAAKT,KAAL,CAAWJ,KAAX,CAAiBiB,UAAjB,CAA4BC,MAAxC,EAAgD,KAAKd,KAAL,CAAWJ,KAAX,CAAiBmB,QAAjE,EAA2E,IAA3E,CAAlC;AACJ,OAFD,MAGI;AACCH,QAAAA,OAAO,GAAGpB,wBAAwB,CAAC,KAAKQ,KAAL,CAAWJ,KAAX,CAAiBiB,UAAjB,CAA4BC,MAA7B,EAAqCL,SAArC,EAAgD,KAAKT,KAAL,CAAWJ,KAAX,CAAiBmB,QAAjE,EAA2E,IAA3E,CAAlC;AACJ;;AAED,YAAMC,UAAU,GAAG;AACMC,QAAAA,SAAS,EAAE;AACP,sBAAY,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBmB,QADtB;AAEPG,UAAAA,QAAQ,EAACN,OAAO,CAACM,QAFV;AAGPJ,UAAAA,MAAM,EAACF,OAAO,CAACE;AAHR,SADjB;AAMMK,QAAAA,QAAQ,EAAE,uBANhB;AAOMC,QAAAA,SAAS,EAAE,uBAPjB;AAQMC,QAAAA,WAAW,EAAE,0BARnB;AASMN,QAAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWJ,KAAX,CAAiBmB;AATjC,OAAnB;AAWC,WAAKf,KAAL,CAAWf,WAAX,CAAuB+B,UAAvB;AACH,KAtMkB;;AAAA,SAwMnBM,UAxMmB,GAwMN,CAACZ,cAAD,EAAiBa,YAAjB,KAAkC;AAC3C;AACA,UAAIL,QAAQ,GAAG,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBiB,UAAjB,CAA4BW,QAA3C;AACA,UAAIV,MAAM,GAAG,KAAKd,KAAL,CAAWJ,KAAX,CAAiBiB,UAAjB,CAA4BY,MAAzC,CAH2C,CAK3C;AACA;AACA;AACA;AACA;AACA;;AACA,UAAIC,GAAG,GAAGlC,wBAAwB,CAAC0B,QAAD,EAAUJ,MAAV,EAAkB,KAAKd,KAAL,CAAWJ,KAAX,CAAiBmB,QAAnC,EAA6C,IAA7C,CAAlC;AACA,YAAMC,UAAU,GAAG;AACfC,QAAAA,SAAS,EAAE;AACP,sBAAY,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBmB,QADtB;AAEPG,UAAAA,QAAQ,EAACQ,GAAG,CAACR,QAFN;AAGPJ,UAAAA,MAAM,EAACY,GAAG,CAACZ,MAHJ,CAIP;;AAJO,SADI;AAOfK,QAAAA,QAAQ,EAAE,uBAPK;AAQfC,QAAAA,SAAS,EAAE,uBARI;AASfC,QAAAA,WAAW,EAAE,0BATE;AAUfN,QAAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWJ,KAAX,CAAiBmB;AAVZ,OAAnB;AAYA,WAAKf,KAAL,CAAWf,WAAX,CAAuB+B,UAAvB;AACH,KAjOkB;;AAEf,SAAKW,SAAL,GAAiBpD,KAAK,CAACqD,SAAN,EAAjB;AAEA,UAAMtB,SAAS,GAAG;AACduB,MAAAA,IAAI,EAAE,CADQ;AAEdC,MAAAA,IAAI,EAAE,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBmC,QAAjB,GAA4BC,QAAQ,CAAC,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBmC,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAF9D,KAAlB;AAIA,SAAKpC,KAAL,GAAa;AACTU,MAAAA,IAAI,EAAE,EADG;AACC4B,MAAAA,YAAY,EAAE,EADf;AACmBC,MAAAA,KAAK,EAAE,EAD1B;AAC8BxB,MAAAA,cAAc,EAAE,EAD9C;AAETN,MAAAA,UAAU,EAAE,EAFH;AAGTE,MAAAA,SAAS,EAAEA,SAHF;AAIT6B,MAAAA,qBAAqB,EAAE,EAJd;AAKTC,MAAAA,UAAU,EAAE,IAAIC,GAAJ,EALH;AAMTC,MAAAA,gBAAgB,EAAE;AANT,KAAb;AASA,SAAKC,mBAAL,GAA2B,CACvB;AAAE,iBAAW,iBAAb;AAAgC,mBAAa,cAA7C;AAA6D,eAAS;AAAtE,KADuB,EAEvB;AAAE,iBAAW,aAAb;AAA4B,mBAAa,UAAzC;AAAqD,eAAS;AAA9D,KAFuB,EAGvB;AAAE,iBAAW,gBAAb;AAA+B,mBAAa,aAA5C;AAA2D,eAAS;AAApE,KAHuB,EAIvB;AAAE,iBAAW,iBAAb;AAAgC,mBAAa,cAA7C;AAA6D,eAAS;AAAtE,KAJuB,EAKvB;AAAE,iBAAW,iBAAb;AAAgC,mBAAa,WAA7C;AAA0D,eAAS;AAAnE,KALuB,EAMvB;AAAE,iBAAW,cAAb;AAA6B,mBAAa,WAA1C;AAAuD,eAAS;AAAhE,KANuB,EAOvB;AAAE,iBAAW,iBAAb;AAAgC,mBAAa,cAA7C;AAA6D,eAAS;AAAtE,KAPuB,EAQvB;AACA;AACA;AAAE,iBAAW,gBAAb;AAA+B,mBAAa,aAA5C;AAA2D,eAAS;AAApE,KAVuB,CAA3B;AAaA,SAAKC,iBAAL,GAAyB,CACrB;AAAE,iBAAW,kBAAb;AAAiC,mBAAa,eAA9C;AAA+D,eAAS,OAAxE;AAAiF,gBAAU;AAA3F,KADqB,CAAzB;AAKH;;AAS8B,SAAxBC,wBAAwB,CAACzC,KAAD,EAAQL,KAAR,EAAe;AAE1C,QAAIK,KAAK,CAACJ,KAAN,CAAYqC,YAAZ,KAA6B,EAA7B,IAAmCjC,KAAK,CAACJ,KAAN,CAAYqC,YAAZ,KAA6BtC,KAAK,CAACsC,YAA1E,EAAwF;AACpFrD,MAAAA,KAAK,CAAC8D,IAAN,CAAW1C,KAAK,CAACJ,KAAN,CAAYqC,YAAvB;AACAjC,MAAAA,KAAK,CAACJ,KAAN,CAAYqC,YAAZ,GAA2B,EAA3B;AACH;;AAED,QAAIjC,KAAK,CAACJ,KAAN,CAAYsC,KAAZ,KAAsBvC,KAAK,CAACuC,KAAhC,EAAuC;AACnCtD,MAAAA,KAAK,CAACsD,KAAN,CAAYlC,KAAK,CAACJ,KAAN,CAAYsC,KAAxB;AACAlC,MAAAA,KAAK,CAACJ,KAAN,CAAYsC,KAAZ,GAAoB,EAApB;AACH;;AACD,WAAO,IAAP;AACH;;AAGDS,EAAAA,MAAM,GAAG;AAEL,QAAIzB,QAAQ,GAAG,EAAf;AACA,QAAIJ,MAAM,GAAG,EAAb;;AAEA,QAAI,KAAKd,KAAL,CAAWJ,KAAX,CAAiBiB,UAAjB,IAA+B,KAAKb,KAAL,CAAWJ,KAAX,CAAiBiB,UAAjB,CAA4BW,QAA/D,EAAyE;AACrEN,MAAAA,QAAQ,GAAI,KAAKvB,KAAL,CAAWe,cAAX,CAA0B,UAA1B,KAAyCpB,aAAa,CAAC,KAAKK,KAAL,CAAWe,cAAX,CAA0B,UAA1B,CAAD,CAAvD,IAAmGjB,mBAAmB,CAAC,KAAKO,KAAL,CAAWJ,KAAX,CAAiBmB,QAAlB,EAA4B,KAAKf,KAAL,CAAWJ,KAAX,CAAiBiB,UAAjB,CAA4BW,QAAxD,CAAjI;AACAV,MAAAA,MAAM,GAAI,KAAKnB,KAAL,CAAWe,cAAX,CAA0B,QAA1B,KAAuCnB,WAAW,CAAC,KAAKI,KAAL,CAAWe,cAAX,CAA0B,QAA1B,CAAD,CAAnD,IAA6FjB,mBAAmB,CAAC,KAAKO,KAAL,CAAWJ,KAAX,CAAiBmB,QAAlB,EAA2B,KAAKf,KAAL,CAAWJ,KAAX,CAAiBiB,UAAjB,CAA4BY,MAAvD,CAAzH;AACH;;AACD,wBACI,uDAEI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,qBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AACI,MAAA,IAAI,EAAE,UADV;AAEI,MAAA,KAAK,EAAE,KAAKzB,KAAL,CAAW4C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFX;AAGI,MAAA,SAAS,EAAC,cAHd;AAII,MAAA,eAAe,EAAC,eAJpB;AAKI,MAAA,QAAQ,EAAE,KAAKnD,KAAL,CAAWe,cAAX,CAA0B,UAA1B,KAAyCQ,QALvD;AAMI,MAAA,UAAU,EAAE,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBmB,QAAjB,CAA0BgC,SAN1C;AAOI,MAAA,WAAW,EAAE,KAPjB;AAQI,MAAA,QAAQ,EAAEC,IAAI,IAAI,KAAKzC,gBAAL,CAAsB,UAAtB,EAAkCyC,IAAlC,CARtB;AASI,MAAA,KAAK,EAAE,KAAKrD,KAAL,CAAWe,cAAX,CAA0B,UAA1B,KAAyCQ,QATpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,eAeI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AACI,MAAA,IAAI,EAAE,QADV;AAEI,MAAA,KAAK,EAAE,KAAKlB,KAAL,CAAW4C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFX;AAGI,MAAA,SAAS,EAAC,cAHd;AAII,MAAA,eAAe,EAAC,eAJpB;AAKI,MAAA,QAAQ,EAAE,KAAKnD,KAAL,CAAWe,cAAX,CAA0B,QAA1B,KAAuCI,MALrD;AAMI,MAAA,UAAU,EAAE,KAAKd,KAAL,CAAWJ,KAAX,CAAiBmB,QAAjB,CAA0BgC,SAN1C;AAOI,MAAA,WAAW,EAAE,KAPjB;AAQI,MAAA,QAAQ,EAAEC,IAAI,IAAI,KAAKzC,gBAAL,CAAsB,QAAtB,EAAgCyC,IAAhC,CARtB;AASI,MAAA,KAAK,EAAE,KAAKrD,KAAL,CAAWe,cAAX,CAA0B,QAA1B,KAAuCI,MATlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAfJ,CADJ,EAiCK,KAAKnB,KAAL,CAAWU,IAAX,gBACG,oBAAC,QAAD;AACI,MAAA,eAAe,EAAE,YADrB;AAEI,MAAA,IAAI,EAAE,KAAKV,KAAL,CAAWU,IAFrB;AAGI,MAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,UAH3B;AAII,MAAA,SAAS,EAAE,KAAKT,KAAL,CAAWW,SAJ1B;AAKI,MAAA,eAAe,EAAE,KAAKL,eAL1B;AAMI,MAAA,mBAAmB,EAAE,KAAKsC,mBAN9B;AAOI,MAAA,UAAU,EAAE,KAAKjB,UAPrB;AAQI,MAAA,UAAU,EAAE,KAAK3B,KAAL,CAAWyC,UAR3B;AASI,MAAA,qBAAqB,EAAE,KAAKzC,KAAL,CAAWwC,qBATtC;AAUI,MAAA,UAAU,EAAE,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBoB,UAVjC;AAWI,MAAA,QAAQ,EAAE,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBmB,QAX/B;AAYI,MAAA,UAAU,EAAE,YAZhB;AAaI,MAAA,QAAQ,EAAE,IAbd;AAcI,MAAA,WAAW,EAAE,IAdjB;AAeI,MAAA,UAAU,EAAE,OAfhB;AAgBI,MAAA,iBAAiB,EAAE,IAhBvB;AAiBI,MAAA,WAAW,EAAC,UAjBhB;AAkBI,MAAA,iBAAiB,EAAE,KAAKyB,iBAlB5B;AAmBI,MAAA,UAAU,EAAE,CAnBhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAsBK,EAvDV,CADJ,CADJ,CAFJ,CADJ;AAkEH;;AAEDS,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAC9B,QAAI,KAAKlD,KAAL,CAAWJ,KAAX,CAAiBc,cAAjB,KAAoCwC,aAAa,CAACtD,KAAd,CAAoBc,cAA5D,EAA4E;AACxE,WAAKP,QAAL,CAAc;AAAEO,QAAAA,cAAc,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc;AAAnC,OAAd;AACH;;AACD,QAAI,KAAKV,KAAL,CAAWJ,KAAX,CAAiBiB,UAAjB,KAAgCqC,aAAa,CAACtD,KAAd,CAAoBiB,UAAxD,EAAoE;AAEhE,UAAI,KAAKb,KAAL,CAAWJ,KAAX,CAAiBmB,QAAjB,CAA0BoC,SAA1B,KAAwCD,aAAa,CAACtD,KAAd,CAAoBmB,QAApB,CAA6BoC,SAAzE,EAAoF;AAChF,cAAMhB,qBAAqB,GAAG,EAA9B;;AACA,YAAI,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBuC,qBAArB,EAA4C;AACxC,eAAKnC,KAAL,CAAWJ,KAAX,CAAiBuC,qBAAjB,CAAuC,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBmB,QAAjB,CAA0BoC,SAAjE,KAA+EC,MAAM,CAACC,MAAP,CAAc,KAAKrD,KAAL,CAAWJ,KAAX,CAAiBuC,qBAAjB,CAAuC,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBmB,QAAjB,CAA0BoC,SAAjE,CAAd,EAA2FG,GAA3F,CAA+FC,IAAI,IAC9KpB,qBAAqB,CAACqB,IAAtB,CAA2BD,IAAI,CAACE,YAAhC,CAD2E,CAA/E;AAEH;;AACD,cAAMrB,UAAU,GAAG/C,aAAa,CAAC,KAAKW,KAAL,CAAWJ,KAAX,CAAiBuC,qBAAlB,EAAyC,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBmB,QAAjB,CAA0BoC,SAAnE,CAAhC;AACA,aAAKhD,QAAL,CAAc;AACVgC,UAAAA,qBADU;AACaC,UAAAA,UADb;AACyB/B,UAAAA,IAAI,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBiB,UAAjB,CAA4BhB,qBAD3D;AAEVO,UAAAA,UAAU,EAAEvB,OAAO,CAAC,KAAKmB,KAAL,CAAWJ,KAAX,CAAiBiB,UAAjB,CAA4BhB,qBAA5B,IAAqD,EAAtD,EAA0D,KAAKF,KAAL,CAAWW,SAArE;AAFT,SAAd;AAIH,OAXD,MAYK;AACD,YAAI,KAAKN,KAAL,CAAWJ,KAAX,CAAiBiB,UAAjB,CAA4BhB,qBAAhC,EAAuD;AACnD,eAAKM,QAAL,CAAc;AACVE,YAAAA,IAAI,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBiB,UAAjB,CAA4BhB,qBADxB;AAEVS,YAAAA,SAAS,EAAG;AAACuB,cAAAA,IAAI,EAAC,CAAN;AAAQC,cAAAA,IAAI,EAAC,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBmC,QAAjB,GAA4BC,QAAQ,CAAC,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBmC,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAnF,aAFF;AAGV3B,YAAAA,UAAU,EAAEvB,OAAO,CAAC,KAAKmB,KAAL,CAAWJ,KAAX,CAAiBiB,UAAjB,CAA4BhB,qBAA5B,IAAqD,EAAtD,EAA0D;AAACgC,cAAAA,IAAI,EAAC,CAAN;AAAQC,cAAAA,IAAI,EAAC,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBmC,QAAjB,GAA4BC,QAAQ,CAAC,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBmC,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAnF,aAA1D;AAHT,WAAd;AAKH;AACJ;AACJ;AAIJ;;AAxK+C;;AAsOpD,eAAevD,OAAO,CAACkB,eAAD,EAAkB;AACpCT,EAAAA,WADoC;AACvBC,EAAAA,UADuB;AAEpCC,EAAAA,WAFoC;AAEvBC,EAAAA;AAFuB,CAAlB,CAAP,CAGZX,UAAU,CAACoB,qBAAD,CAHE,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../../components/data-grid/data-grid.component';\r\nimport DateTimePicker from '../../../components/date-time-picker/date-time-picker.component';\r\nimport { ListWrapper } from '../../../components/client-group.styles';\r\nimport {\r\n    callService, crudMaster,\r\n    updateStore, validateEsignCredential,\r\n} from '../../../actions';\r\n// import { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport { getControlMap, getStartOfDay, getEndOfDay, convertDateValuetoString, rearrangeDateFormat } from '../../../components/CommonScript';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass EmailAlertTransaction extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchRef = React.createRef();\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showSaveContinue: true\r\n        };\r\n\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_DISPLAYNAME\", \"dataField\": \"sdisplayname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_SUBJECT\", \"dataField\": \"ssubject\", \"width\": \"300px\" },\r\n            { \"idsName\": \"IDS_SCREENNAME\", \"dataField\": \"sscreenname\", \"width\": \"250px\" },\r\n            { \"idsName\": \"IDS_CONTROLNAME\", \"dataField\": \"scontrolname\", \"width\": \"250px\" },\r\n            { \"idsName\": \"IDS_REFERENCEID\", \"dataField\": \"ssystemid\", \"width\": \"250px\" },\r\n            { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"250px\" },\r\n            { \"idsName\": \"IDS_CREATEDDATE\", \"dataField\": \"screateddate\", \"width\": \"250px\" },\r\n            // { \"idsName\": \"IDS_TRANSACTIONDATE\", \"dataField\": \"stransdate\", \"width\": \"250px\" },\r\n            // { \"idsName\": \"IDS_REASON\", \"dataField\": \"sreason\", \"width\": \"250px\" },\r\n            { \"idsName\": \"IDS_MAILSTATUS\", \"dataField\": \"ssentstatus\", \"width\": \"200px\" },\r\n\r\n        ];\r\n        this.detailedFieldList = [\r\n            { \"idsName\": \"IDS_TEMPLATEBODY\", \"dataField\": \"stemplatebody\", \"width\": \"300px\", \"isHTML\": true }\r\n        ];\r\n\r\n\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let fromDate = \"\";\r\n        let toDate = \"\";\r\n\r\n        if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\r\n            fromDate = (this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"])) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n            toDate = (this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"])) || rearrangeDateFormat(this.props.Login.userInfo,this.props.Login.masterData.ToDate);\r\n        }\r\n        return (\r\n            <>\r\n                {/* <Preloader loadng={this.props.Login.loading}/> */}\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            <Row>\r\n                                <Col md={3}>\r\n                                    <DateTimePicker\r\n                                        name={\"fromdate\"}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_FROM\" })}\r\n                                        className='form-control'\r\n                                        placeholderText=\"Select date..\"\r\n                                        selected={this.state.selectedRecord[\"fromdate\"] || fromDate}\r\n                                        dateFormat={this.props.Login.userInfo.ssitedate}\r\n                                        isClearable={false}\r\n                                        onChange={date => this.handleDateChange(\"fromdate\", date)}\r\n                                        value={this.state.selectedRecord[\"fromdate\"] || fromDate}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col md={3}>\r\n                                    <DateTimePicker\r\n                                        name={\"todate\"}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_TO\" })}\r\n                                        className='form-control'\r\n                                        placeholderText=\"Select date..\"\r\n                                        selected={this.state.selectedRecord[\"todate\"] || toDate}\r\n                                        dateFormat={this.props.Login.userInfo.ssitedate}\r\n                                        isClearable={false}\r\n                                        onChange={date => this.handleDateChange(\"todate\", date)}\r\n                                        value={this.state.selectedRecord[\"todate\"] || toDate}\r\n\r\n                                    />\r\n                                </Col>\r\n                                {/* <Col></Col> */}\r\n                            </Row>\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={\"nrunningno\"}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    reloadData={this.reloadData}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    scrollable={\"scrollable\"}\r\n                                    pageable={true}\r\n                                    isComponent={true}\r\n                                    gridHeight={'600px'}\r\n                                    isToolBarRequired={true}\r\n                                    expandField=\"expanded\"\r\n                                    detailedFieldList={this.detailedFieldList}\r\n                                    selectedId={0}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData.EmailAlertTransaction,\r\n                    dataResult: process(this.props.Login.masterData.EmailAlertTransaction || [], this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                if (this.props.Login.masterData.EmailAlertTransaction) {\r\n                    this.setState({\r\n                        data: this.props.Login.masterData.EmailAlertTransaction,\r\n                        dataState : {skip:0,take:this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5},\r\n                        dataResult: process(this.props.Login.masterData.EmailAlertTransaction || [], {skip:0,take:this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}),\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n       // this.setState({ selectedRecord });\r\n       // this.reloadData(selectedRecord, true);\r\n\r\n       let dateObj = {};\r\n       if (dateName === \"fromdate\") {\r\n            dateObj = convertDateValuetoString(dateValue, this.props.Login.masterData.toDate, this.props.Login.userInfo, true);\r\n       }\r\n       else{\r\n            dateObj = convertDateValuetoString(this.props.Login.masterData.toDate, dateValue, this.props.Login.userInfo, true);\r\n       }\r\n\r\n       const inputParam = {\r\n                                inputData: {\r\n                                    \"userinfo\": this.props.Login.userInfo,\r\n                                    fromDate:dateObj.fromDate, \r\n                                    toDate:dateObj.toDate,\r\n                                },\r\n                                classUrl: 'emailalerttransaction',\r\n                                methodUrl: \"EmailAlertTransaction\",\r\n                                displayName: \"IDS_MAILALERTTRANSACTION\",\r\n                                userInfo: this.props.Login.userInfo\r\n                            };\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    reloadData = (selectedRecord, isDateChange) => {\r\n        //this.searchRef.current.value = \"\";\r\n        let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;\r\n       \r\n        // if (selectedRecord && selectedRecord[\"fromdate\"] !== undefined) {\r\n        //     fromDate = getStartOfDay(selectedRecord[\"fromdate\"]);\r\n        //  }\r\n        // if (selectedRecord && selectedRecord[\"todate\"] !== undefined) {\r\n        //     toDate = getEndOfDay(selectedRecord[\"todate\"]);\r\n        //  }\r\n        let obj = convertDateValuetoString(fromDate,toDate, this.props.Login.userInfo, true);\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                fromDate:obj.fromDate, \r\n                toDate:obj.toDate,\r\n                // currentdate: isDateChange === true ? null : formatInputDate(new Date(), true)\r\n            },\r\n            classUrl: 'emailalerttransaction',\r\n            methodUrl: \"EmailAlertTransaction\",\r\n            displayName: \"IDS_MAILALERTTRANSACTION\",\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster,\r\n    updateStore, validateEsignCredential\r\n})(injectIntl(EmailAlertTransaction));"]},"metadata":{},"sourceType":"module"}