{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\configurationmaster\\\\APIService.jsx\";\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { getControlMap, constructOptionList, copyText, convertDateTimetoStringDBFormat } from '../../components/CommonScript';\nimport { connect } from 'react-redux';\nimport { Alert, Button, Card, Col, Form, Row } from 'react-bootstrap';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport { stringOperatorData, numericOperatorData, dateConditionData } from '../dashboard/SqlBuilderFilterType';\nimport FormInput from '../../components/form-input/form-input.component';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCopy, faMinus, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { toast } from 'react-toastify';\nimport ReactJson from \"react-json-view\";\nimport { sendRequest, getQualisFormsFields, getQualisForms, getCustomQuery, getCustomQueryName, updateStore } from \"../../actions\";\nimport { ContentPanel } from '../../components/App.styles';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes'; //import APIConsole from \"./APIConsole\"\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass APIService extends React.Component {\n  constructor(props) {\n    super(props); //  this.console = React.createRef();\n\n    this.onInputOnChange = (event, value, variant) => {\n      if (event.target.type === \"checkbox\") {\n        let constructApiData = this.state.constructApiData;\n        const selectedRecord = this.state.selectedRecord; // selectedRecord['check'] = label\n        // constructApiData={...constructApiData,[variant.item.scolumn]:\"\"}\n\n        const value1 = selectedRecord[event.target.name];\n\n        if (value1 !== '' && value1 !== undefined) {\n          if (value1.toLowerCase().includes(value.toLowerCase())) {\n            const index = value1.toLowerCase().indexOf(value.toLowerCase());\n            delete constructApiData[variant.item.scolumn];\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value1.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedRecord[event.target.name] = value1.slice(indexcomma + 1);\n                } else {\n                  selectedRecord[event.target.name] = \"\";\n                }\n              } else {\n                if (value1.slice(index).indexOf(\",\") !== -1) {\n                  selectedRecord[event.target.name] = value1.slice(0, index) + value1.slice(index + value1.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedRecord[event.target.name] = value1.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedRecord[event.target.name] = value1 + ',' + value;\n            constructApiData = [...constructApiData, {\n              [variant.item.scolumn]: \"\"\n            }];\n          }\n        } else {\n          selectedRecord[event.target.name] = value1 + ',' + value;\n          constructApiData = [...constructApiData, {\n            [variant.item.scolumn]: \"\"\n          }];\n        }\n\n        this.setState({\n          selectedRecord,\n          constructApiData,\n          constructApiDataString: constructApiData.map(e => JSON.stringify(e).replace(/{|}/g, '')).join(',\\n')\n        });\n      } else {\n        // const selectedRecord = this.state.selectedRecord;\n        let text = event.target.value.replaceAll('\\n', '');\n        text = text.replace(/\\s+/g, '');\n        let constructApiData1 = JSON.parse(text);\n        let constructApiData = Object.keys(constructApiData1).map(x => {\n          return {\n            [x]: constructApiData1[x]\n          };\n        });\n        this.setState({\n          constructApiData,\n          constructApiDataString: constructApiData.map(e => JSON.stringify(e).replace(/{|}/g, '')).join(',\\n')\n        });\n      }\n    };\n\n    this.onComboChange = (event, colunName) => {\n      const selectedRecord = this.state.selectedRecord;\n      const oldValue = { ...selectedRecord[colunName]\n      };\n      selectedRecord[colunName] = event;\n      const map1 = new Map();\n      map1['userinfo'] = this.props.Login.userInfo;\n      map1['selectedRecord'] = selectedRecord;\n      map1['masterData'] = this.props.Login.masterData;\n      map1['constructApiData'] = this.state.constructApiData;\n\n      if (colunName === 'napiservicecode') {\n        if (selectedRecord.napiservicecode.value === 24) {\n          this.props.getCustomQuery(map1);\n        } else {\n          this.props.getQualisForms(map1);\n        } // }\n        // this.setState({ selectedRecord })\n\n      } else if (colunName === 'nsqlquerycode') {\n        this.props.getCustomQueryName(map1);\n      } else {\n        if (oldValue && oldValue.value !== event.value) {\n          this.props.getQualisFormsFields(map1);\n        }\n      } //  this.setState({ selectedRecord })\n\n    };\n\n    this.checkFilter = filterList => {\n      let check = [];\n      filterList.map((item, index) => {\n        if (item.filterColumn) {\n          if (item.filterCondition) {\n            if (item.filterColumn.item.columndatatype === 'string' || item.filterColumn.item.columndatatype === 'character varying' || item.filterColumn.item.columndatatype === 'character') {\n              if (item.filterCondition.value === '=' || item.filterCondition.value === 'IN' || item.filterCondition.value === 'NOT') {\n                if (item.filterValue && item.filterValue !== \"\") {\n                  check.push(true);\n                }\n              } else {\n                if (item.filterCondition) {\n                  check.push(true);\n                }\n              }\n            } else if (item.filterColumn.item.columndatatype === 'numeric' || item.filterColumn.item.columndatatype === 'integer' || item.filterColumn.item.columndatatype === 'smallint' || item.filterColumn.item.columndatatype === 'bigint') {\n              if (item.filterCondition.value === '=' || item.filterCondition.value === '!=' || item.filterCondition.value === '>' || item.filterCondition.value === '<' || item.filterCondition.value === '>=' || item.filterCondition.value === '<=') {\n                if (item.filterValue && item.filterValue !== \"\") {\n                  check.push(true);\n                }\n              } else {\n                if (item.filterCondition) {\n                  check.push(true);\n                }\n              }\n            } else if (item.filterColumn.item.columndatatype === 'date' || item.filterColumn.item.columndatatype === 'timestamp without time zone') {\n              if (item.filterCondition.value === '=' || item.filterCondition.value === 'NOT') {\n                if (item.filterValue && item.filterValue !== \"\") {\n                  check.push(true);\n                }\n              } else {\n                if (item.filterCondition) {\n                  check.push(true);\n                }\n              }\n            }\n          }\n        }\n      });\n      return check.length === filterList.length ? true : false;\n    };\n\n    this.onMoreClick = e => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (this.checkFilter(selectedRecord['filterNew'] || [])) {\n        if (this.props.Login.masterData.SelectedForm) {\n          if (selectedRecord['filterNew'] === undefined) {\n            selectedRecord['filterNew'] = [];\n          }\n\n          selectedRecord['filterNew'][selectedRecord['filterNew'].length] = {};\n          const lstQryColumn = this.removeSameRecordFromTwoDifferentArrays(this.state.lstQueryBuilder, selectedRecord['filterNew']);\n\n          if (lstQryColumn.length > 0) {\n            this.setState({\n              selectedRecord,\n              lstQryColumn\n            });\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_COLUMNSNOTAVALIABLE\"\n            }));\n          }\n        } else if (this.props.Login.masterData.Columns) {\n          if (selectedRecord['filterNew'] === undefined) {\n            selectedRecord['filterNew'] = [];\n          }\n\n          selectedRecord['filterNew'][selectedRecord['filterNew'].length] = {};\n          const lstQryColumn = this.removeSameRecordFromTwoDifferentArrays(this.state.lstQueryBuilder, selectedRecord['filterNew']);\n\n          if (lstQryColumn.length > 0) {\n            this.setState({\n              selectedRecord,\n              lstQryColumn\n            });\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_COLUMNSNOTAVALIABLE\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTHEFORM\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLEASEFILLTHEVALUE\"\n        }));\n      }\n    };\n\n    this.onFilterInputOnChange = (event, index) => {\n      const selectedRecord = this.state.selectedRecord || {}; //  const constructApiData = this.state.constructApiData\n\n      const filterTableNewAddedList = [...selectedRecord['filterNew']];\n      const change = { ...filterTableNewAddedList[index],\n        [event.target.name]: event.target.value\n      };\n      const changeData = [...filterTableNewAddedList.splice(0, index), { ...change\n      }, ...filterTableNewAddedList.splice(index + 1)]; // const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\n      // if (index1 === -1) {\n      //     constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue })\n      // } else {\n      //     constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue }\n      // }\n\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          filterNew: changeData\n        }\n      });\n    };\n\n    this.onFilterNumericInputChange = (value, name, index) => {\n      const selectedRecord = this.state.selectedRecord || {}; //   const constructApiData = this.state.constructApiData\n\n      const filterTableNewAddedList = [...selectedRecord['filterNew']];\n      const change = { ...filterTableNewAddedList[index],\n        [name]: value\n      }; // constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterValue })\n      // const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\n      // if (index1 === -1) {\n      //     constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue })\n      // } else {\n      //     constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue }\n      // }\n\n      const changeData = [...filterTableNewAddedList.splice(0, index), { ...change\n      }, ...filterTableNewAddedList.splice(index + 1)];\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          filterNew: changeData\n        }\n      });\n    };\n\n    this.handleDateChange = (columnLabel, value, index) => {\n      const selectedRecord = this.state.selectedRecord || {}; // const constructApiData = this.state.constructApiData\n\n      const filterTableNewAddedList = [...selectedRecord['filterNew']];\n      const change = { ...filterTableNewAddedList[index],\n        [columnLabel]: value\n      }; // const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\n      // if (index1 === -1) {\n      //     constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue })\n      // } else {\n      //     constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue }\n      // }\n\n      const changeData = [...filterTableNewAddedList.splice(0, index), { ...change\n      }, ...filterTableNewAddedList.splice(index + 1)];\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          filterNew: changeData\n        }\n      });\n    };\n\n    this.onfilterChange = (comboValue, columnLabel, conditionType, index) => {\n      const selectedRecord = this.state.selectedRecord;\n\n      if (conditionType === 'column') {\n        const filterTableNewAddedList = [...selectedRecord['filterNew']];\n        const change = { ...filterTableNewAddedList[index],\n          [columnLabel]: comboValue,\n          filterCondition: undefined,\n          filterValueType: undefined,\n          filterValue: undefined\n        };\n        const changeData = [...filterTableNewAddedList.splice(0, index), { ...change\n        }, ...filterTableNewAddedList.splice(index + 1)];\n        this.setState({\n          selectedRecord: { ...selectedRecord,\n            filterNew: changeData\n          }\n        });\n      } else if (conditionType === 'condition') {\n        const filterTableNewAddedList = [...selectedRecord['filterNew']];\n        const change = { ...filterTableNewAddedList[index],\n          [columnLabel]: comboValue\n        };\n        const changeData = [...filterTableNewAddedList.splice(0, index), { ...change,\n          filterValue: undefined\n        }, ...filterTableNewAddedList.splice(index + 1)]; // let constructApiData = this.state.constructApiData\n        // if (change[\"filterCondition\"].value === 'IS NULL' ||\n        //     change[\"filterCondition\"].value === 'IS NOT NULL' ||\n        //     change[\"filterCondition\"].value === 'PRESENT' ||\n        //     change[\"filterCondition\"].value === 'BLANK' ||\n        //     change[\"filterCondition\"].value !== 'NULL' ||\n        //     change[\"filterCondition\"].value !== 'NOT NULL' ||\n        //     change[\"filterCondition\"].value === 'IN') {\n        //     // constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value })\n        //     const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\n        //     if (index1 === -1) {\n        //         constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value })\n        //     } else {\n        //         constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value }\n        //     }\n        // }\n        // else if(change[\"filterColumn\"].item.columndatatype === 'date'&& \n        // (change.filterCondition.value === '=' || change.filterCondition.value === '<' \n        // || change.filterCondition.value === '>')){\n        //     const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\n        //     if (index1 === -1) {\n        //         constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\" })\n        //     } else {\n        //         constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\"  }\n        //     }\n        // }\n        // else if(change[\"filterColumn\"].item.columndatatype === 'date'&& \n        //  (item.filterCondition.value === 'NOT')){\n        //     const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\n        //     if (index1 === -1) {\n        //         constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\" })\n        //     } else {\n        //         constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\"  }\n        //     }\n        // }\n\n        this.setState({\n          selectedRecord: { ...selectedRecord,\n            filterNew: changeData\n          }\n        });\n      }\n    };\n\n    this.onFilterModalDelete = childIndex => {\n      // let constructApiData1 = [{ ...this.state.constructApiData[0] }, { ...this.state.constructApiData[1] }]\n      // let constructApiData2 = [...this.state.constructApiData]\n      // constructApiData2 = constructApiData2.splice(2)\n      // constructApiData2 = constructApiData2.splice(0, childIndex)\n      // let constructApiData3 = [...this.state.constructApiData]\n      // constructApiData3 = constructApiData3.splice(2)\n      // constructApiData3 = constructApiData3.splice(childIndex + 1)\n      const selectedRecord = this.state.selectedRecord;\n      selectedRecord['filterNew'] = [...selectedRecord['filterNew'].slice(0, childIndex), ...selectedRecord['filterNew'].slice(childIndex + 1)]; // constructApiData1 = [...constructApiData1, ...constructApiData2, ...constructApiData3]\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.filterQueryFormation = selectedRecord => {\n      let str = \"\";\n      let strform = \"\";\n      selectedRecord['filterNew'] && selectedRecord['filterNew'].length > 0 && selectedRecord['filterNew'].map((item, index) => {\n        if (item.filterCondition) {\n          if (item.filterCondition.value === 'IN') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + \" ('\" + (item.filterValue ? item.filterValue : \"\") + \"') \";\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" + item.filterCondition.value + \" ('\" + (item.filterValue ? item.filterValue : \"\") + \"')\";\n            }\n          } else if (item.filterCondition.value === 'PRESENT') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + \" NOT \" + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" ='' \";\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ='' \";\n            }\n          } else if (item.filterCondition.value === 'BLANK') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" ='' \";\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ='' \";\n            }\n          } else if (item.filterCondition.value === 'NULL' || item.filterCondition.value === 'NOT NULL') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" IS \" + item.filterCondition.value + \" \";\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" IS \" + item.filterCondition.value + \" \";\n            }\n          } else if (item.filterCondition.value === 'IS NULL') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + \" \";\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" + item.filterCondition.value + \" \";\n            }\n          } else if (item.filterCondition.value === 'IS NOT NULL') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + \" \";\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" + item.filterCondition.value + \" \";\n            }\n          } else if (item.filterCondition.value === 'STARTS WITH') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \"ILIKE\" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\";\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ILIKE \" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\";\n            }\n          } else if (item.filterCondition.value === 'ENDS WITH') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \"ILIKE\" + \" '%\" + (item.filterValue ? item.filterValue : \"\") + \"' collate \\\"default\\\"\";\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ILIKE\" + \" '%\" + (item.filterValue ? item.filterValue : \"\") + \"' collate \\\"default\\\"\";\n            }\n          } else if (item.filterCondition.value === 'CONTAINS') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \"ILIKE\" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\";\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ILIKE\" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\";\n            }\n          } else if ((item.filterColumn.item.columndatatype === 'date' || item.filterColumn.item.columndatatype === 'timestamp without time zone') && (item.filterCondition.value === '=' || item.filterCondition.value === '<' || item.filterCondition.value === '>')) {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"' \");\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" + item.filterCondition.value + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"' \");\n            }\n          } else if (item.filterColumn.item.columndatatype === 'date' && item.filterCondition.value === 'NOT' || item.filterColumn.item.columndatatype === 'timestamp without time zone' && item.filterCondition.value === 'NOT') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + \"(NOT \" + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" = \" + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"')\");\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" = \" + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"')\");\n            }\n          } else if ((item.filterColumn.item.columndatatype === 'string' || item.filterColumn.item.columndatatype === 'character varying') && item.filterCondition.value === 'NOT') {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + \"(NOT \" + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" = \" + (\"'\" + item.filterValue ? item.filterValue : \"\" + \"')\");\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" = \" + (\"'\" + item.filterValue ? item.filterValue : \"\" + \"')\");\n            }\n          } else if (item.filterColumn.item.columndatatype === 'character varying' && (item.filterCondition.value === 'LIKE' || item.filterCondition.value === 'NOT LIKE')) {\n            str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" + item.filterCondition.value + \" \" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\";\n          } else {\n            if (item.filterColumn.item.scolumn != undefined) {\n              str = str + \" \" + (item.filterColumn.item.isjsoncolumn ? item.filterColumn.item.ismultilingual ? item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\" : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\" : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + (\"'\" + (item.filterValue ? item.filterValue : \"\") + \"' \");\n            } else if (item.filterColumn.item.scolumndisplayname != undefined) {\n              str = str + (\"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" + item.filterCondition.value + (\"'\" + (item.filterValue ? item.filterValue : \"\") + \"' \");\n            }\n          }\n\n          if (index !== selectedRecord['filterNew'].length - 1) {\n            str = str + \" and \";\n          }\n        } //   })\n\n      });\n      strform = strform + \" \" + str;\n      return strform;\n    };\n\n    this.copyToClipboard = () => {\n      copyText(this.copyParameter()); // toast.info(this.props.intl.formatMessage({ id: \"IDS_COPIEDSUCCESSFULLY\" }))\n    };\n\n    this.sendRequest = () => {\n      const selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.masterData.SelectedApi) {\n        if (this.props.Login.masterData.SelectedApi.value > 2 && this.props.Login.masterData.SelectedApi.value < 24) {\n          const url = this.props.Login.masterData.SelectedApi.item.sapiservice;\n          let obj = this.sendObject();\n          let obj1 = {\n            \"inputData\": obj,\n            url,\n            masterData: this.props.Login.masterData,\n            \"userinfo\": this.props.Login.userInfo,\n            selectedRecord\n          };\n          this.props.sendRequest(obj1);\n        } else if (this.props.Login.masterData.SelectedForm) {\n          const url = this.props.Login.masterData.SelectedApi.item.sapiservice;\n          let obj = this.sendObject();\n          let obj1 = {\n            \"inputData\": obj,\n            url,\n            masterData: this.props.Login.masterData,\n            \"userinfo\": this.props.Login.userInfo,\n            selectedRecord\n          };\n          this.props.sendRequest(obj1);\n        } else if (this.props.Login.masterData.SelectedApi.value === 24 && this.props.Login.masterData.SelectedSQLQuery) {\n          if (selectedRecord.nsqlquerycode != undefined) {\n            const url = \"apiservice/getSQLQueryData\";\n            let sqlquery = selectedRecord.nsqlquerycode.item.ssqlquery.trim();\n            let obj = this.sendObject();\n            let obj1 = {\n              \"inputData\": obj,\n              url,\n              masterData: this.props.Login.masterData,\n              \"userinfo\": this.props.Login.userInfo,\n              selectedRecord,\n              sqlquery\n            };\n            this.props.sendRequest(obj1);\n          } else {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_SELECTTHEQUERYNAME\"\n            }));\n          }\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTHEFORM\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTHEAPI\"\n        }));\n      }\n    };\n\n    this.removeSameRecordFromTwoDifferentArrays = (firstArray, secondArray) => {\n      let filterArray = [];\n\n      if (Array.isArray(secondArray) && secondArray.length > 0) {\n        secondArray.map((x, index1) => {\n          firstArray.map(y => {\n            if (x.filterColumn) {\n              if (x.filterColumn.item.scolumn === y.item.scolumn) {\n                const index = firstArray.findIndex(x1 => x1.item.scolumn === y.item.scolumn);\n                let firstArray1 = [...firstArray];\n                firstArray1 = [...firstArray1.splice(0, index)];\n                let firstArray2 = [...firstArray];\n                firstArray2 = [...firstArray2.splice(index + 1)];\n                filterArray = [...firstArray1, ...firstArray2];\n                firstArray = [...filterArray];\n              } else if (x.filterColumn.item.scolumndisplayname === y.item.scolumndisplayname) {\n                const index = firstArray.findIndex(x1 => x1.item.scolumndisplayname === y.item.scolumndisplayname);\n                let firstArray1 = [...firstArray];\n                firstArray1 = [...firstArray1.splice(0, index)];\n                let firstArray2 = [...firstArray];\n                firstArray2 = [...firstArray2.splice(index + 1)];\n                filterArray = [...firstArray1, ...firstArray2];\n                firstArray = [...filterArray];\n              }\n            } else {\n              if (index1 === 0) {\n                filterArray = [...firstArray];\n              }\n            }\n          });\n        });\n      } else {\n        filterArray = [...firstArray];\n      }\n\n      return filterArray;\n    };\n\n    this.showQueryParameter = () => {\n      //   let newObject = {}\n      let returnString = \"{\";\n\n      if (this.state && this.state.selectedRecord && this.state.selectedRecord.napiservicecode && this.state.selectedRecord.napiservicecode.value < 3) {\n        if (this.state && this.state.constructApiData.length > 0) {\n          this.state.constructApiData.map((e, index) => {\n            if (index < 2) {\n              returnString = returnString + \" \\n \\\"\" + Object.keys(e) + \"\\\":\\\"\" + Object.values(e) + \"\\\"\";\n            }\n          });\n          let text = this.filterQueryFormation(this.state.selectedRecord);\n          returnString = returnString + \"\\n\" + \" \\\"whereCondition\\\":\\\"\" + text + \"\\\"\\n}\";\n        } else {\n          returnString = returnString + \"\\n}\";\n        }\n      } else if (this.state && this.state.selectedRecord && this.state.selectedRecord.napiservicecode && this.state.selectedRecord.napiservicecode.value == 24) {\n        if (this.state && this.state.constructApiData.length > 0) {\n          this.state.constructApiData.map((e, index) => {\n            if (index < 3) {\n              returnString = returnString + \"\\n \\\"\" + Object.keys(e) + \"\\\":\\\"\" + Object.values(e) + \"\\\"\";\n            }\n          });\n          let text = this.filterQueryFormation(this.state.selectedRecord);\n          returnString = returnString + \"\\n\" + \" \\\"whereCondition\\\":\\\"\" + text + \"\\\"\\n}\";\n        } else {\n          returnString = returnString + \"\\n}\";\n        }\n      } else if (this.props.Login) {\n        returnString = returnString + \"\\\"userinfo\\\":\";\n        let userinfo = JSON.stringify(this.props.Login.userInfo);\n        returnString = returnString + userinfo + \"}\";\n      }\n\n      return returnString;\n    };\n\n    this.copyParameter = () => {\n      let newObject = {};\n\n      if (this.state && this.state.selectedRecord && this.state.selectedRecord.napiservicecode && this.state.selectedRecord.napiservicecode.value < 3) {\n        if (this.state && this.state.constructApiData.length > 0) {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_COPIEDSUCCESSFULLY\"\n          }));\n          this.state.constructApiData.map((e, index) => {\n            if (index < 2) {\n              newObject = { ...newObject,\n                ...e\n              };\n            }\n          });\n          let text = this.filterQueryFormation(this.state.selectedRecord);\n          const object = { ...newObject,\n            \"whereCondition\": text\n          };\n          return JSON.stringify(object);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_QUERYISEMPTY\"\n          }));\n        }\n      } else if (this.props.Login && this.props.Login.userInfo) {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_COPIEDSUCCESSFULLY\"\n        }));\n        const object = {\n          \"userinfo\": this.props.Login.userInfo\n        };\n        return JSON.stringify(object);\n      }\n    };\n\n    this.sendObject = () => {\n      let newObject = {};\n      this.state.constructApiData.map(e => {\n        newObject = { ...newObject,\n          ...e\n        };\n      });\n      let text = this.filterQueryFormation(this.state.selectedRecord);\n      const object = { ...newObject,\n        \"whereCondition\": text\n      };\n      return object;\n    };\n\n    this.state = {\n      selectedRecord: {},\n      constructApiData: [],\n      consoleData: [],\n      controlMap: {},\n      userRoleControlRights: [],\n      masterStatus: \"\",\n      error: \"\"\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content pb-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 5,\n      className: \"pr-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"napiservicecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_API\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.apiServiceList || [],\n      value: this.props.Login.masterData.SelectedApi && this.props.Login.masterData.SelectedApi,\n      isMandatory: true,\n      isClearable: false,\n      isMulti: false,\n      isSearchable: false,\n      closeMenuOnSelect: true,\n      onChange: event => this.onComboChange(event, 'napiservicecode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: e => this.sendRequest(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 33\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SEND\"\n    })))), this.props.Login.masterData && this.props.Login.masterData.SelectedApi && (this.props.Login.masterData.SelectedApi.value < 3 || this.props.Login.masterData.SelectedApi.value > 24) ? /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nformcode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_FORMS\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.qualisList || [],\n      value: this.props.Login.masterData.SelectedForm && this.props.Login.masterData.SelectedForm,\n      isMandatory: true,\n      isClearable: false,\n      isMulti: false,\n      isSearchable: false,\n      closeMenuOnSelect: true,\n      onChange: event => this.onComboChange(event, 'nformcode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 33\n      }\n    }))) : \"\", this.props.Login.masterData && this.props.Login.masterData.SelectedApi && this.props.Login.masterData.SelectedApi.value === 24 ? /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nsqlquerycode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_QUERYNAME\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.queryList || [],\n      value: this.props.Login.masterData.SelectedSQLQuery && this.props.Login.masterData.SelectedSQLQuery,\n      isMandatory: true,\n      isClearable: false,\n      isMulti: false,\n      isSearchable: false,\n      closeMenuOnSelect: true,\n      onChange: event => this.onComboChange(event, 'nsqlquerycode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692,\n        columnNumber: 33\n      }\n    }))) : \"\", /*#__PURE__*/React.createElement(Card, {\n      className: \"api-filter-condition-card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708,\n        columnNumber: 29\n      }\n    }, this.props.Login.masterData && this.props.Login.masterData.SelectedApi && (this.props.Login.masterData.SelectedApi.value < 3 || this.props.Login.masterData.SelectedApi.value > 23) ? /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 46\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"Parameters\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_PARAMETERS\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.paramList || [],\n      value: this.props.Login.masterData.Parameters && this.props.Login.masterData.Parameters,\n      isMandatory: true,\n      isClearable: false,\n      isMulti: false,\n      isSearchable: false,\n      closeMenuOnSelect: true,\n      onChange: event => this.onComboChange(event, 'Parameters'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_VALUE\"\n      }),\n      name: \"filterValue\",\n      type: \"text\" // onChange={(event) => this.onFilterInputOnChange(event, index)}\n      ,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_VALUE\"\n      }) // value={item[\"filterValue\"] ? item[\"filterValue\"] : \"\"}\n      ,\n      isMandatory: true,\n      required: true,\n      maxLength: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 45\n      }\n    }), \" :\", /*#__PURE__*/React.createElement(FormNumericInput, {\n      name: \"filterValue\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_VALUE\"\n      }),\n      type: \"number\" // value={item[\"filterValue\"]}\n      ,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_VALUE\"\n      }),\n      strict: true,\n      maxLength: 10 // onChange={(value) => this.onFilterNumericInputChange(value, \"filterValue\", index)}\n      ,\n      noStyle: true,\n      className: \"form-control\",\n      errors: \"Please provide a valid number.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 741,\n        columnNumber: 45\n      }\n    }))))), /*#__PURE__*/React.createElement(\"section\", {\n      className: 'modal-card-body',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760,\n        columnNumber: 37\n      }\n    }, this.state.selectedRecord['filterNew'] && this.state.selectedRecord['filterNew'].map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: 'field has-addons filterheight',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 762,\n          columnNumber: 52\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"control is-expanded\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 763,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"select is-fullwidth\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 764,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_FIELDS\"\n        }),\n        isSearchable: true,\n        name: \"filterColumn\",\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_FIELDS\"\n        }),\n        showOption: true,\n        options: this.state.lstQryColumn || [],\n        value: item[\"filterColumn\"] && item[\"filterColumn\"] || \"\",\n        onChange: value => this.onfilterChange(value, \"filterColumn\", 'column', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 57\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"control is-expanded\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"select is-fullwidth\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 779,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_CONDITION\"\n        }),\n        isSearchable: true,\n        name: \"sviewname\",\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_CONDITION\"\n        }),\n        showOption: true,\n        options: item[\"filterColumn\"] && item[\"filterColumn\"].item ? item[\"filterColumn\"].item.columndatatype === 'string' || item.filterColumn.item.columndatatype === 'character varying' || item.filterColumn.item.columndatatype === 'character' ? stringOperatorData : item[\"filterColumn\"].item.columndatatype === 'numeric' || item.filterColumn.item.columndatatype === 'integer' || item.filterColumn.item.columndatatype === 'smallint' || item.filterColumn.item.columndatatype === 'bigint' ? numericOperatorData : item[\"filterColumn\"].item.columndatatype === 'date' || item[\"filterColumn\"].item.columndatatype === 'timestamp without time zone' ? dateConditionData : stringOperatorData : \"\",\n        value: item[\"filterCondition\"] !== undefined ? item[\"filterCondition\"] : \"\",\n        onChange: value => this.onfilterChange(value, \"filterCondition\", 'condition', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 780,\n          columnNumber: 57\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"control \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 802,\n          columnNumber: 49\n        }\n      }, item[\"filterCondition\"] && item[\"filterCondition\"].value && item[\"filterColumn\"] ? item[\"filterColumn\"].item.columndatatype === 'string' || item.filterColumn.item.columndatatype === 'character varying' || item.filterColumn.item.columndatatype === 'character' ? item[\"filterCondition\"].value !== 'IS NULL' && item[\"filterCondition\"].value !== 'IS NOT NULL' && item[\"filterCondition\"].value !== 'PRESENT' && item[\"filterCondition\"].value !== 'BLANK' ? /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        name: \"filterValue\",\n        type: \"text\",\n        onChange: event => this.onFilterInputOnChange(event, index),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        value: item[\"filterValue\"] ? item[\"filterValue\"] : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 810,\n          columnNumber: 65\n        }\n      }) : \"\" : item[\"filterColumn\"].item.columndatatype === 'numeric' || item.filterColumn.item.columndatatype === 'integer' || item.filterColumn.item.columndatatype === 'smallint' || item.filterColumn.item.columndatatype === 'bigint' ? item[\"filterCondition\"].value !== 'NULL' && item[\"filterCondition\"].value !== 'NOT NULL' ? item[\"filterCondition\"].value === 'IN' ? /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        name: \"filterValue\",\n        type: \"text\",\n        onChange: event => this.onFilterInputOnChange(event, index),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        value: item[\"filterValue\"] ? item[\"filterValue\"] : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 826,\n          columnNumber: 73\n        }\n      }) : /*#__PURE__*/React.createElement(FormNumericInput, {\n        name: \"filterValue\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        type: \"number\",\n        value: item[\"filterValue\"],\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        strict: true //min={0}\n        //max={99999999.99}\n        ,\n        maxLength: 10,\n        onChange: value => this.onFilterNumericInputChange(value, \"filterValue\", index),\n        noStyle: true //precision={2}\n        //isMandatory={true}\n        ,\n        className: \"form-control\",\n        errors: \"Please provide a valid number.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 838,\n          columnNumber: 73\n        }\n      }) : \"\" : item[\"filterColumn\"].item.columndatatype === 'date' || item[\"filterColumn\"].item.columndatatype === 'timestamp without time zone' ? item[\"filterCondition\"].value === '=' || item[\"filterCondition\"].value === '<' || item[\"filterCondition\"].value === '>' || item[\"filterCondition\"].value === 'NOT' ? /*#__PURE__*/React.createElement(DateTimePicker, {\n        name: \"filterValue\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_VALUE\"\n        }),\n        className: \"form-control\",\n        placeholderText: this.props.intl.formatMessage({\n          id: \"IDS_SELECTDATE\"\n        }),\n        selected: item[\"filterValue\"] ? item[\"filterValue\"] : new Date(),\n        dateFormat: this.props.Login.userInfo[\"ssitedatetime\"],\n        timeInputLabel: this.props.intl.formatMessage({\n          id: \"IDS_TIME\"\n        }),\n        showTimeInput: true,\n        onChange: date => this.handleDateChange(\"filterValue\", date, index),\n        value: item[\"filterValue\"] ? item[\"filterValue\"] : \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 863,\n          columnNumber: 73\n        }\n      }) : \"\" : \"\" : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"control\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 882,\n          columnNumber: 49\n        }\n      }, this.state.selectedRecord['filterNew'].length > 0 && /*#__PURE__*/React.createElement(Button, {\n        className: \"button is-light is-danger\",\n        onClick: () => this.onFilterModalDelete(index),\n        type: \"button\",\n        tabindex: \"0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 884,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 887,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faMinus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 888,\n          columnNumber: 65\n        }\n      })))));\n    }), this.props.Login.masterData && this.props.Login.masterData.SelectedApi && (this.props.Login.masterData.SelectedApi.value < 3 || this.props.Login.masterData.SelectedApi.value > 23) ? /*#__PURE__*/React.createElement(\"div\", {\n      className: 'buttons is-right',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 896,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: 'button is-light is-info is-small',\n      onClick: e => this.onMoreClick(e),\n      type: \"button\",\n      tabindex: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 897,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 900,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 901,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 903,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_MORE\"\n    })))) : \"\")) : \"\"))), /*#__PURE__*/React.createElement(Col, {\n      md: 7,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 913,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 914,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"my-2 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 915,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 916,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 917,\n        columnNumber: 37\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_QUERYPARAMS\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"api-card-body-scrollable-element\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 921,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"pre\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 923,\n        columnNumber: 37\n      }\n    }, this.showQueryParameter()), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons is-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 924,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: e => this.copyToClipboard(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 925,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      className: \"\",\n      icon: faCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 926,\n        columnNumber: 45\n      }\n    }), '  ', this.props.intl.formatMessage({\n      id: \"IDS_COPYQUERYPARAMS\"\n    })))))), /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 933,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 934,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 935,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 936,\n        columnNumber: 37\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_RESPONSE\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"api-card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 940,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ReactJson, {\n      src: this.props.Login.masterData.consoleData && this.props.Login.masterData.consoleData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 941,\n        columnNumber: 37\n      }\n    }))))))));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      console.log(this.props.Login.masterData !== previousProps.Login.masterData);\n      let {\n        userRoleControlRights,\n        controlMap,\n        apiServiceList,\n        selectedRecord,\n        constructApiData,\n        lstQueryBuilder,\n        qualisList,\n        queryList,\n        paramList\n      } = { ...this.state\n      };\n\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      }\n\n      if (this.props.Login && this.props.Login.masterData && this.props.Login.masterData.SelectedApi && this.props.Login.masterData.SelectedApi.value < 3) {\n        selectedRecord = {\n          \"napiservicecode\": this.props.Login.masterData.SelectedApi,\n          ...this.state.selectedRecord\n        };\n      }\n\n      if (this.props.Login.masterData.lstApiService !== previousProps.Login.masterData.lstApiService) {\n        const apiServiceMap = constructOptionList(this.props.Login.masterData.lstApiService || [], \"napiservicecode\", \"sapiservicename\", \"nsorter\", \"ascending\", false);\n        apiServiceList = apiServiceMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.lstqueryForm !== previousProps.Login.masterData.lstqueryForm) {\n        const qualisMap = constructOptionList(this.props.Login.masterData.lstqueryForm || [], \"nformcode\", \"sdisplayname\", \"nsorter\", \"ascending\", false);\n        qualisList = qualisMap.get(\"OptionList\"); // this.setState({\n        //     qualisList\n        // });\n      }\n\n      if (this.props.Login.masterData.lstSQLQuery !== previousProps.Login.masterData.lstSQLQuery) {\n        const queryMap = constructOptionList(this.props.Login.masterData.lstSQLQuery || [], \"nsqlquerycode\", \"ssqlqueryname\", \"ssqlquery\", \"nsorter\", \"ascending\", false);\n        queryList = queryMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.Parameters !== previousProps.Login.masterData.Parameters) {\n        const paramMap = constructOptionList(this.props.Login.masterData.Parameters || [], this.props.Login.masterData.Parameters, \"ascending\", false);\n        paramList = paramMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.SelectedForm !== previousProps.Login.masterData.SelectedForm) {\n        if (this.props.Login.masterData.SelectedForm && this.props.Login.masterData.SelectedForm.value) {\n          constructApiData = [{\n            \"nformcode\": this.props.Login.masterData.SelectedForm.value\n          }, {\n            \"sformname\": this.props.Login.masterData.SelectedForm.label\n          }];\n        } else {\n          constructApiData = [];\n        }\n\n        let constructData = this.props.Login.masterData.lstquerybilderColumns.map((item, index) => {\n          return {\n            label: item.scolumndisplayname,\n            value: index,\n            item: { ...item\n            }\n          };\n        });\n        lstQueryBuilder = constructData;\n        selectedRecord['filterNew'] = [];\n      }\n\n      if (this.props.Login.masterData.SelectedApi !== previousProps.Login.masterData.SelectedApi) {\n        if (this.props.Login.masterData.SelectedApi && this.props.Login.masterData.SelectedApi.value && this.props.Login.masterData.SelectedApi.value === 24) {\n          let constructQuery = this.props.Login.masterData.lstSQLQuery.map((item, index) => {\n            return {\n              label: item.ssqlqueryname,\n              value: index,\n              item: { ...item\n              }\n            };\n          });\n          lstQueryBuilder = constructQuery;\n        }\n      }\n\n      if (this.props.Login.masterData.SelectedSQLQuery !== previousProps.Login.masterData.SelectedSQLQuery) {\n        if (this.props.Login.masterData.SelectedSQLQuery && this.props.Login.masterData.SelectedSQLQuery.value && this.props.Login.masterData.SelectedApi.value === 24) {\n          constructApiData = [{\n            \"nsqlquerycode\": this.props.Login.masterData.SelectedSQLQuery.value\n          }, {\n            \"ssqlqueryname\": this.props.Login.masterData.SelectedSQLQuery.label\n          }];\n        } else {\n          constructApiData = [];\n        }\n\n        let constructData = [];\n\n        if (this.props.Login.masterData && this.props.Login.masterData.Columns) {\n          constructData = this.props.Login.masterData.Columns.map((item, index) => {\n            return {\n              label: item.scolumndisplayname,\n              value: index,\n              item: { ...item\n              }\n            };\n          });\n        } else {\n          constructData = [];\n        }\n\n        lstQueryBuilder = constructData;\n        selectedRecord['filterNew'] = [];\n      }\n\n      if (this.props.Login && this.props.Login.newMap) {\n        selectedRecord['filterNew'] = {\n          \"whereCondition\": this.props.Login.newMap.whereCondition\n        };\n      }\n\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        apiServiceList,\n        selectedRecord,\n        constructApiData,\n        lstQueryBuilder,\n        qualisList,\n        queryList,\n        paramList\n      });\n    } else {\n      if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n        this.setState({\n          selectedRecord: this.props.Login.selectedRecord,\n          data: this.props.Login.masterData\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  sendRequest,\n  getQualisFormsFields,\n  getQualisForms,\n  getCustomQuery,\n  getCustomQueryName,\n  updateStore\n})(injectIntl(APIService));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/configurationmaster/APIService.jsx"],"names":["React","injectIntl","FormSelectSearch","getControlMap","constructOptionList","copyText","convertDateTimetoStringDBFormat","connect","Alert","Button","Card","Col","Form","Row","ListWrapper","FormTextarea","stringOperatorData","numericOperatorData","dateConditionData","FormInput","FormNumericInput","DateTimePicker","FontAwesomeIcon","faCopy","faMinus","faPlus","toast","ReactJson","sendRequest","getQualisFormsFields","getQualisForms","getCustomQuery","getCustomQueryName","updateStore","ContentPanel","DEFAULT_RETURN","mapStateToProps","state","Login","APIService","Component","constructor","props","onInputOnChange","event","value","variant","target","type","constructApiData","selectedRecord","value1","name","undefined","toLowerCase","includes","index","indexOf","item","scolumn","indexcomma","slice","setState","constructApiDataString","map","e","JSON","stringify","replace","join","text","replaceAll","constructApiData1","parse","Object","keys","x","onComboChange","colunName","oldValue","map1","Map","userInfo","masterData","napiservicecode","checkFilter","filterList","check","filterColumn","filterCondition","columndatatype","filterValue","push","length","onMoreClick","SelectedForm","lstQryColumn","removeSameRecordFromTwoDifferentArrays","lstQueryBuilder","warn","intl","formatMessage","id","Columns","onFilterInputOnChange","filterTableNewAddedList","change","changeData","splice","filterNew","onFilterNumericInputChange","handleDateChange","columnLabel","onfilterChange","comboValue","conditionType","filterValueType","onFilterModalDelete","childIndex","filterQueryFormation","str","strform","isjsoncolumn","ismultilingual","jsoncolumnname","slanguagetypecode","scolumndisplayname","Date","copyToClipboard","copyParameter","SelectedApi","url","sapiservice","obj","sendObject","obj1","SelectedSQLQuery","nsqlquerycode","sqlquery","ssqlquery","trim","info","firstArray","secondArray","filterArray","Array","isArray","index1","y","findIndex","x1","firstArray1","firstArray2","showQueryParameter","returnString","values","userinfo","newObject","object","consoleData","controlMap","userRoleControlRights","masterStatus","error","getDerivedStateFromProps","render","apiServiceList","qualisList","queryList","paramList","Parameters","date","componentDidUpdate","previousProps","console","log","nformcode","ncontrolcode","lstApiService","apiServiceMap","get","lstqueryForm","qualisMap","lstSQLQuery","queryMap","paramMap","label","constructData","lstquerybilderColumns","constructQuery","ssqlqueryname","newMap","whereCondition","data","componentWillUnmount","updateInfo","typeName","inputParam","operation","modalName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport {\r\n    getControlMap, constructOptionList, copyText, convertDateTimetoStringDBFormat\r\n} from '../../components/CommonScript';\r\nimport { connect } from 'react-redux';\r\nimport { Alert, Button, Card, Col, Form, Row } from 'react-bootstrap';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport {\r\n    stringOperatorData, numericOperatorData\r\n    , dateConditionData\r\n} from '../dashboard/SqlBuilderFilterType'\r\n\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCopy, faMinus, faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport ReactJson from \"react-json-view\";\r\nimport { sendRequest, getQualisFormsFields, getQualisForms,getCustomQuery,getCustomQueryName, updateStore } from \"../../actions\";\r\nimport { ContentPanel } from '../../components/App.styles';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\n//import APIConsole from \"./APIConsole\"\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { Login: state.Login };\r\n};\r\nclass APIService extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        //  this.console = React.createRef();\r\n        this.state = {\r\n            selectedRecord: {},\r\n            constructApiData: [],\r\n            consoleData: [],\r\n            controlMap: {},\r\n            userRoleControlRights: [],\r\n            masterStatus: \"\", error: \"\"\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    onInputOnChange = (event, value, variant) => {\r\n        if (event.target.type === \"checkbox\") {\r\n            let constructApiData = this.state.constructApiData\r\n            const selectedRecord = this.state.selectedRecord;\r\n            // selectedRecord['check'] = label\r\n\r\n            // constructApiData={...constructApiData,[variant.item.scolumn]:\"\"}\r\n\r\n            const value1 = selectedRecord[event.target.name];\r\n            if (value1 !== '' && value1 !== undefined) {\r\n                if (value1.toLowerCase().includes(value.toLowerCase())) {\r\n                    const index = value1.toLowerCase().indexOf(value.toLowerCase());\r\n                    delete constructApiData[variant.item.scolumn]\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value1.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedRecord[event.target.name] = value1.slice(indexcomma + 1)\r\n                            } else {\r\n                                selectedRecord[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value1.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedRecord[event.target.name] = value1.slice(0, index) + value1.slice(index + value1.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedRecord[event.target.name] = value1.slice(0, index - 1)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedRecord[event.target.name] = value1 + ',' + value;\r\n                    constructApiData = [...constructApiData, { [variant.item.scolumn]: \"\" }]\r\n                }\r\n            } else {\r\n                selectedRecord[event.target.name] = value1 + ',' + value;\r\n                constructApiData = [...constructApiData, { [variant.item.scolumn]: \"\" }]\r\n            }\r\n            this.setState({\r\n                selectedRecord, constructApiData,\r\n                constructApiDataString: constructApiData.map(e => JSON.stringify(e).replace(/{|}/g, '')).join(',\\n')\r\n            })\r\n        } else {\r\n            // const selectedRecord = this.state.selectedRecord;\r\n            let text = event.target.value.replaceAll('\\n', '')\r\n            text = text.replace(/\\s+/g, '');\r\n            let constructApiData1 = JSON.parse(text)\r\n            let constructApiData = Object.keys(constructApiData1).map(x => {\r\n                return { [x]: constructApiData1[x] }\r\n            })\r\n            this.setState({\r\n                constructApiData,\r\n                constructApiDataString: constructApiData.map(e => JSON.stringify(e).replace(/{|}/g, '')).join(',\\n'),\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    onComboChange = (event, colunName) => {\r\n        const selectedRecord = this.state.selectedRecord\r\n        const oldValue = { ...selectedRecord[colunName] }\r\n        selectedRecord[colunName] = event\r\n        const map1 = new Map();\r\n        map1['userinfo'] = this.props.Login.userInfo;\r\n        map1['selectedRecord'] = selectedRecord\r\n        map1['masterData'] = this.props.Login.masterData\r\n        map1['constructApiData'] = this.state.constructApiData\r\n        if (colunName === 'napiservicecode') {\r\n            if(selectedRecord.napiservicecode.value === 24){\r\n                this.props.getCustomQuery(map1)\r\n            }else{\r\n                this.props.getQualisForms(map1)\r\n            }\r\n            // }\r\n            // this.setState({ selectedRecord })\r\n        }else if(colunName === 'nsqlquerycode'){\r\n            this.props.getCustomQueryName(map1)\r\n        }else {\r\n            if (oldValue && oldValue.value !== event.value) {\r\n                this.props.getQualisFormsFields(map1)\r\n            }\r\n        }\r\n        //  this.setState({ selectedRecord })\r\n    }\r\n    checkFilter = (filterList) => {\r\n        let check = [];\r\n        filterList.map((item, index) => {\r\n            if (item.filterColumn) {\r\n                if (item.filterCondition) {\r\n                    if (item.filterColumn.item.columndatatype === 'string' || item.filterColumn.item.columndatatype === 'character varying' || item.filterColumn.item.columndatatype === 'character') {\r\n                        if (item.filterCondition.value === '='\r\n                            || item.filterCondition.value === 'IN'\r\n                            || item.filterCondition.value === 'NOT') {\r\n\r\n                            if (item.filterValue && item.filterValue !== \"\") {\r\n                                check.push(true)\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            if (item.filterCondition) {\r\n                                check.push(true)\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (item.filterColumn.item.columndatatype === 'numeric' || item.filterColumn.item.columndatatype === 'integer' || item.filterColumn.item.columndatatype === 'smallint' || item.filterColumn.item.columndatatype === 'bigint') {\r\n                        if (item.filterCondition.value === '='\r\n                            || item.filterCondition.value === '!=' ||\r\n                            item.filterCondition.value === '>' ||\r\n                            item.filterCondition.value === '<' ||\r\n                            item.filterCondition.value === '>=' ||\r\n                            item.filterCondition.value === '<='\r\n                        ) {\r\n                            if (item.filterValue && item.filterValue !== \"\") {\r\n                                check.push(true)\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            if (item.filterCondition) {\r\n                                check.push(true)\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (item.filterColumn.item.columndatatype === 'date' || item.filterColumn.item.columndatatype === 'timestamp without time zone') {\r\n                        if (item.filterCondition.value === '='\r\n                            || item.filterCondition.value === 'NOT'\r\n                        ) {\r\n\r\n                            if (item.filterValue && item.filterValue !== \"\") {\r\n                                check.push(true)\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            if (item.filterCondition) {\r\n                                check.push(true)\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                }\r\n            }\r\n\r\n        })\r\n        return check.length === filterList.length ? true : false;\r\n    }\r\n\r\n\r\n    onMoreClick = (e) => {\r\n        const selectedRecord = this.state.selectedRecord || {}\r\n        if (this.checkFilter(selectedRecord['filterNew'] || [])) {\r\n            if (this.props.Login.masterData.SelectedForm ) {\r\n                if (selectedRecord['filterNew'] === undefined) {\r\n                    selectedRecord['filterNew'] = []\r\n                }\r\n                selectedRecord['filterNew'][selectedRecord['filterNew'].length] = {}\r\n\r\n                const lstQryColumn = this.removeSameRecordFromTwoDifferentArrays(this.state.lstQueryBuilder, selectedRecord['filterNew'])\r\n\r\n                if (lstQryColumn.length > 0 ) {\r\n                    this.setState({\r\n                        selectedRecord, lstQryColumn\r\n                    })\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_COLUMNSNOTAVALIABLE\" }))\r\n                }\r\n            }else if(this.props.Login.masterData.Columns){\r\n                if (selectedRecord['filterNew'] === undefined) {\r\n                    selectedRecord['filterNew'] = []\r\n                }\r\n                selectedRecord['filterNew'][selectedRecord['filterNew'].length] = {}\r\n                const lstQryColumn = this.removeSameRecordFromTwoDifferentArrays(this.state.lstQueryBuilder, selectedRecord['filterNew'])\r\n\r\n                if (lstQryColumn.length > 0 ) {\r\n                    this.setState({\r\n                        selectedRecord, lstQryColumn\r\n                    })\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_COLUMNSNOTAVALIABLE\" }))\r\n                }\r\n\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTHEFORM\" }))\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASEFILLTHEVALUE\" }))\r\n        }\r\n    }\r\n\r\n    onFilterInputOnChange = (event, index) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n      //  const constructApiData = this.state.constructApiData\r\n\r\n        const filterTableNewAddedList = [...selectedRecord['filterNew']]\r\n        const change = { ...filterTableNewAddedList[index], [event.target.name]: event.target.value }\r\n        const changeData = [...filterTableNewAddedList.splice(0, index), { ...change }, ...filterTableNewAddedList.splice(index + 1)]\r\n\r\n        // const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\r\n\r\n        // if (index1 === -1) {\r\n        //     constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue })\r\n        // } else {\r\n        //     constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue }\r\n        // }\r\n\r\n\r\n        this.setState({ selectedRecord: { ...selectedRecord, filterNew: changeData } });\r\n    }\r\n\r\n    onFilterNumericInputChange = (value, name, index) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n     //   const constructApiData = this.state.constructApiData\r\n        const filterTableNewAddedList = [...selectedRecord['filterNew']]\r\n        const change = { ...filterTableNewAddedList[index], [name]: value }\r\n        // constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterValue })\r\n        // const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\r\n        // if (index1 === -1) {\r\n        //     constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue })\r\n        // } else {\r\n        //     constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue }\r\n        // }\r\n        const changeData = [...filterTableNewAddedList.splice(0, index), { ...change }, ...filterTableNewAddedList.splice(index + 1)]\r\n        this.setState({ selectedRecord: { ...selectedRecord, filterNew: changeData } });\r\n\r\n    }\r\n\r\n    handleDateChange = (columnLabel, value, index) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n       // const constructApiData = this.state.constructApiData\r\n        const filterTableNewAddedList = [...selectedRecord['filterNew']]\r\n        const change = { ...filterTableNewAddedList[index], [columnLabel]: value }\r\n       // const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\r\n        // if (index1 === -1) {\r\n        //     constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue })\r\n        // } else {\r\n        //     constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value + \" \" + change.filterValue }\r\n        // }\r\n        const changeData = [...filterTableNewAddedList.splice(0, index), { ...change }, ...filterTableNewAddedList.splice(index + 1)]\r\n        this.setState({ selectedRecord: { ...selectedRecord, filterNew: changeData } });\r\n    }\r\n\r\n    onfilterChange = (comboValue, columnLabel, conditionType, index) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n\r\n        if (conditionType === 'column') {\r\n            const filterTableNewAddedList = [...selectedRecord['filterNew']]\r\n            const change = {\r\n                ...filterTableNewAddedList[index], [columnLabel]: comboValue,\r\n                filterCondition: undefined, filterValueType: undefined, filterValue: undefined\r\n            }\r\n            const changeData = [...filterTableNewAddedList.splice(0, index), { ...change }, ...filterTableNewAddedList.splice(index + 1)]\r\n            this.setState({ selectedRecord: { ...selectedRecord, filterNew: changeData } })\r\n        }\r\n        else if (conditionType === 'condition') {\r\n            const filterTableNewAddedList = [...selectedRecord['filterNew']]\r\n            const change = { ...filterTableNewAddedList[index], [columnLabel]: comboValue }\r\n            const changeData = [...filterTableNewAddedList.splice(0, index), { ...change, filterValue: undefined }, ...filterTableNewAddedList.splice(index + 1)]\r\n            // let constructApiData = this.state.constructApiData\r\n            // if (change[\"filterCondition\"].value === 'IS NULL' ||\r\n            //     change[\"filterCondition\"].value === 'IS NOT NULL' ||\r\n            //     change[\"filterCondition\"].value === 'PRESENT' ||\r\n            //     change[\"filterCondition\"].value === 'BLANK' ||\r\n            //     change[\"filterCondition\"].value !== 'NULL' ||\r\n            //     change[\"filterCondition\"].value !== 'NOT NULL' ||\r\n            //     change[\"filterCondition\"].value === 'IN') {\r\n            //     // constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value })\r\n\r\n            //     const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\r\n            //     if (index1 === -1) {\r\n            //         constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value })\r\n            //     } else {\r\n            //         constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value }\r\n            //     }\r\n\r\n            // }\r\n            // else if(change[\"filterColumn\"].item.columndatatype === 'date'&& \r\n            // (change.filterCondition.value === '=' || change.filterCondition.value === '<' \r\n            // || change.filterCondition.value === '>')){\r\n\r\n            //     const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\r\n            //     if (index1 === -1) {\r\n            //         constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\" })\r\n            //     } else {\r\n            //         constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\"  }\r\n            //     }\r\n\r\n            // }\r\n            // else if(change[\"filterColumn\"].item.columndatatype === 'date'&& \r\n            //  (item.filterCondition.value === 'NOT')){\r\n\r\n\r\n            //     const index1 = constructApiData.findIndex(x => Object.keys(x).toString() === change.filterColumn.item.scolumn)\r\n            //     if (index1 === -1) {\r\n            //         constructApiData.push({ [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\" })\r\n            //     } else {\r\n            //         constructApiData[index1] = { [change.filterColumn.item.scolumn]: change.filterCondition.value+\" '\"+convertDateTimetoStringDBFormat(new Date(),this.props.Login.userInfo)+\"'\"  }\r\n            //     }\r\n            // }\r\n\r\n\r\n            this.setState({ selectedRecord: { ...selectedRecord, filterNew: changeData } })\r\n        }\r\n\r\n    }\r\n\r\n    onFilterModalDelete = (childIndex) => {\r\n        // let constructApiData1 = [{ ...this.state.constructApiData[0] }, { ...this.state.constructApiData[1] }]\r\n        // let constructApiData2 = [...this.state.constructApiData]\r\n        // constructApiData2 = constructApiData2.splice(2)\r\n        // constructApiData2 = constructApiData2.splice(0, childIndex)\r\n        // let constructApiData3 = [...this.state.constructApiData]\r\n        // constructApiData3 = constructApiData3.splice(2)\r\n        // constructApiData3 = constructApiData3.splice(childIndex + 1)\r\n        const selectedRecord = this.state.selectedRecord;\r\n        selectedRecord['filterNew'] = [...selectedRecord['filterNew'].slice(0, childIndex), ...selectedRecord['filterNew'].slice(childIndex + 1)]\r\n       // constructApiData1 = [...constructApiData1, ...constructApiData2, ...constructApiData3]\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    filterQueryFormation = (selectedRecord) => {\r\n        let str = \"\";\r\n        let strform = \"\";\r\n        selectedRecord['filterNew'] && selectedRecord['filterNew'].length > 0 && selectedRecord['filterNew'].map((item, index) => {\r\n            if (item.filterCondition) {\r\n                if (item.filterCondition.value === 'IN') {\r\n                    if(item.filterColumn.item.scolumn != undefined){\r\n                    str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + \" ('\" + (item.filterValue ? item.filterValue : \"\") + \"') \"\r\n                    }else if(item.filterColumn.item.scolumndisplayname != undefined){\r\n                        str = str +( \"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" +item.filterCondition.value + \" ('\" +(item.filterValue ? item.filterValue : \"\")+\"')\"\r\n                    }\r\n                }\r\n                else if (item.filterCondition.value === 'PRESENT') {\r\n                    if(item.filterColumn.item.scolumn != undefined){\r\n                    str = str + \" NOT \" + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" ='' \"\r\n                    }else if(item.filterColumn.item.scolumndisplayname != undefined){\r\n                        str = str +( \"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ='' \"\r\n                    }\r\n\r\n                }\r\n                else if (item.filterCondition.value === 'BLANK') {\r\n                    if(item.filterColumn.item.scolumn != undefined){\r\n\r\n                    str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" ='' \"\r\n                    }else if(item.filterColumn.item.scolumndisplayname != undefined){\r\n                        str = str +( \"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ='' \" \r\n                    }\r\n\r\n                }\r\n                else if (item.filterCondition.value === 'NULL'\r\n                    || item.filterCondition.value === 'NOT NULL') {\r\n                        if(item.filterColumn.item.scolumn != undefined){\r\n\r\n                    str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" IS \" + item.filterCondition.value + \" \"\r\n                    }else if(item.filterColumn.item.scolumndisplayname != undefined){\r\n                        str = str +( \"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" IS \" +item.filterCondition.value + \" \"\r\n                    }\r\n\r\n                }\r\n                else if (item.filterCondition.value === 'IS NULL') {\r\n                    if(item.filterColumn.item.scolumn != undefined){\r\n\r\n                    str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + \" \"\r\n                    }else if(item.filterColumn.item.scolumndisplayname != undefined){\r\n                        str = str +( \"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" +item.filterCondition.value + \" \"\r\n                    }\r\n\r\n                }\r\n                else if (item.filterCondition.value === 'IS NOT NULL') {\r\n                    if(item.filterColumn.item.scolumn != undefined){\r\n\r\n\r\n                    str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + \" \"\r\n                    }else if(item.filterColumn.item.scolumndisplayname != undefined){\r\n                        str = str +( \"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" +item.filterCondition.value + \" \"\r\n                    }\r\n\r\n                }\r\n                else if (item.filterCondition.value === 'STARTS WITH' ) {\r\n                    if(item.filterColumn.item.scolumn != undefined){\r\n\r\n                    str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \"ILIKE\" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\"\r\n                    }else if(item.filterColumn.item.scolumndisplayname != undefined){\r\n                        str = str +( \"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ILIKE \" +\" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\"\r\n                    }\r\n                }\r\n                else if (item.filterCondition.value === 'ENDS WITH') {\r\n                    if(item.filterColumn.item.scolumn != undefined){\r\n\r\n                    str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \"ILIKE\" + \" '%\" + (item.filterValue ? item.filterValue : \"\") + \"' collate \\\"default\\\"\"\r\n                    }else if(item.filterColumn.item.scolumndisplayname != undefined){\r\n                        str = str +( \"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ILIKE\" +\" '%\" + (item.filterValue ? item.filterValue : \"\") + \"' collate \\\"default\\\"\"\r\n                    }\r\n                }\r\n                else if (item.filterCondition.value === 'CONTAINS') {\r\n                    if(item.filterColumn.item.scolumn != undefined){\r\n\r\n                    str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \"ILIKE\" + \" '\" + (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\"\r\n                    }else if(item.filterColumn.item.scolumndisplayname != undefined){\r\n                        str = str +( \"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" ILIKE\" +\" '\"+ (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\"\r\n                    }\r\n                }\r\n                else if ((item.filterColumn.item.columndatatype === 'date'|| item.filterColumn.item.columndatatype === 'timestamp without time zone' ) && (item.filterCondition.value === '=' || item.filterCondition.value === '<' || item.filterCondition.value === '>')) {\r\n                    if(item.filterColumn.item.scolumn != undefined){\r\n\r\n                    str = str + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"' \")\r\n                    }else if(item.filterColumn.item.scolumndisplayname != undefined){\r\n                        str = str +( \"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" +item.filterCondition.value + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"' \")\r\n                    }\r\n                }\r\n\r\n                else if ((item.filterColumn.item.columndatatype === 'date' && (item.filterCondition.value === 'NOT')) ||  (item.filterColumn.item.columndatatype === 'timestamp without time zone' && (item.filterCondition.value === 'NOT'))){\r\n                    if(item.filterColumn.item.scolumn != undefined){\r\n\r\n                    str = str + \"(NOT \" + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" = \" + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"')\")\r\n                    }else if(item.filterColumn.item.scolumndisplayname != undefined){\r\n                        str = str +( \"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" = \" + (\"'\" + (item.filterValue ? convertDateTimetoStringDBFormat(item.filterValue, this.props.Login.userInfo) : convertDateTimetoStringDBFormat(new Date(), this.props.Login.userInfo)) + \"')\")\r\n                    }\r\n                }\r\n                else if ((item.filterColumn.item.columndatatype === 'string' || item.filterColumn.item.columndatatype === 'character varying') && (item.filterCondition.value === 'NOT')) {\r\n                    if(item.filterColumn.item.scolumn != undefined){\r\n\r\n                    str = str + \"(NOT \" + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" = \" + (\"'\" + item.filterValue ? item.filterValue : \"\" + \"')\")\r\n                    }else if(item.filterColumn.item.scolumndisplayname != undefined){\r\n                        str = str +( \"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") +  \" = \" + (\"'\" + item.filterValue ? item.filterValue : \"\" + \"')\")\r\n                    }    \r\n                }\r\n                else if(item.filterColumn.item.columndatatype === 'character varying' && (item.filterCondition.value === 'LIKE' || item.filterCondition.value === 'NOT LIKE')){\r\n                    str = str +( \"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \"+ item.filterCondition.value+\" \" +\" '\"+ (item.filterValue ? item.filterValue : \"\") + \"%' collate \\\"default\\\"\"\r\n                }\r\n                else {\r\n                    if(item.filterColumn.item.scolumn != undefined){\r\n\r\n                    str = str + \" \" + (item.filterColumn.item.isjsoncolumn ?\r\n                        item.filterColumn.item.ismultilingual ?\r\n                            item.filterColumn.item.jsoncolumnname + \"->'\" + item.filterColumn.item.scolumn + \"'->>'\" + this.props.Login.userInfo.slanguagetypecode + \"'\"\r\n                            : item.filterColumn.item.jsoncolumnname + \"->>'\" + item.filterColumn.item.scolumn + \"'\"\r\n                        : \"\\\"\" + item.filterColumn.item.scolumn + \"\\\"\") + \" \" + item.filterCondition.value + (\"'\" + (item.filterValue ? item.filterValue : \"\") + \"' \")\r\n                    }else if(item.filterColumn.item.scolumndisplayname != undefined){\r\n                        str = str +( \"\\\"\" + item.filterColumn.item.scolumndisplayname + \"\\\"\") + \" \" +item.filterCondition.value +  (\"'\" + (item.filterValue ? item.filterValue : \"\") + \"' \")\r\n                    }\r\n                }\r\n\r\n                if (index !== selectedRecord['filterNew'].length - 1) {\r\n                    str = str + \" and \";\r\n                }\r\n            }\r\n            //   })\r\n        })\r\n        strform = strform + \" \" + str\r\n        return strform;\r\n    }\r\n\r\n\r\n\r\n    copyToClipboard = () => {\r\n        copyText(this.copyParameter())\r\n        // toast.info(this.props.intl.formatMessage({ id: \"IDS_COPIEDSUCCESSFULLY\" }))\r\n    }\r\n\r\n\r\n    sendRequest = () => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        if (this.props.Login.masterData.SelectedApi) {\r\n            if(this.props.Login.masterData.SelectedApi.value > 2 && this.props.Login.masterData.SelectedApi.value < 24){\r\n                const url = this.props.Login.masterData.SelectedApi.item.sapiservice\r\n                let obj = this.sendObject()\r\n                let obj1 = { \"inputData\": obj, url, masterData: this.props.Login.masterData, \"userinfo\" :  this.props.Login.userInfo, selectedRecord}\r\n                this.props.sendRequest(obj1)\r\n\r\n            }\r\n            else if (this.props.Login.masterData.SelectedForm) {\r\n                const url = this.props.Login.masterData.SelectedApi.item.sapiservice\r\n                let obj = this.sendObject()\r\n                let obj1 = { \"inputData\": obj, url, masterData: this.props.Login.masterData, \"userinfo\" :  this.props.Login.userInfo,selectedRecord}\r\n                this.props.sendRequest(obj1)\r\n            }\r\n            else if ( this.props.Login.masterData.SelectedApi.value === 24 && this.props.Login.masterData.SelectedSQLQuery) {\r\n                if(selectedRecord.nsqlquerycode != undefined){\r\n                    const url = \"apiservice/getSQLQueryData\"\r\n                    let sqlquery = selectedRecord.nsqlquerycode.item.ssqlquery.trim()\r\n                    let obj = this.sendObject()\r\n                    let obj1 = { \"inputData\": obj, url, masterData: this.props.Login.masterData, \"userinfo\" :  this.props.Login.userInfo,selectedRecord,sqlquery}\r\n                    this.props.sendRequest(obj1)\r\n                }else{\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTTHEQUERYNAME\" }))\r\n                }\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTTHEFORM\" }))\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTTHEAPI\" }))\r\n        }\r\n    }\r\n\r\n\r\n    removeSameRecordFromTwoDifferentArrays = (firstArray, secondArray) => {\r\n        let filterArray = []\r\n        if (Array.isArray(secondArray) && secondArray.length > 0) {\r\n            secondArray.map((x, index1) => {\r\n                firstArray.map(y => {\r\n                    if (x.filterColumn) {\r\n                        if (x.filterColumn.item.scolumn === y.item.scolumn) {\r\n                            const index = firstArray.findIndex(x1 => x1.item.scolumn === y.item.scolumn)\r\n                            let firstArray1 = [...firstArray];\r\n                            firstArray1 = [...firstArray1.splice(0, index)];\r\n\r\n                            let firstArray2 = [...firstArray];\r\n                            firstArray2 = [...firstArray2.splice(index + 1)];\r\n                            filterArray = [...firstArray1, ...firstArray2]\r\n                            firstArray = [...filterArray]\r\n                        }\r\n                        else if(x.filterColumn.item.scolumndisplayname === y.item.scolumndisplayname){\r\n                            const index = firstArray.findIndex(x1 => x1.item.scolumndisplayname === y.item.scolumndisplayname)\r\n                            let firstArray1 = [...firstArray];\r\n                            firstArray1 = [...firstArray1.splice(0, index)];\r\n\r\n                            let firstArray2 = [...firstArray];\r\n                            firstArray2 = [...firstArray2.splice(index + 1)];\r\n                            filterArray = [...firstArray1, ...firstArray2]\r\n                            firstArray = [...filterArray]\r\n                        }\r\n                    } else {\r\n                        if (index1 === 0) {\r\n                            filterArray = [...firstArray]\r\n                        }\r\n\r\n                    }\r\n                })\r\n            })\r\n        } else {\r\n            filterArray = [...firstArray];\r\n        }\r\n        return filterArray;\r\n\r\n    }\r\n\r\n    render() {\r\n        return (<>\r\n            <ListWrapper className=\"client-list-content pb-0\">\r\n                <Row noGutters>\r\n                    <Col md={5} className=\"pr-3\">\r\n                        <Row>\r\n                            <Col md={9}>\r\n                                <FormSelectSearch\r\n                                    name={\"napiservicecode\"}\r\n                                    formLabel={this.props.intl.formatMessage({ id: \"IDS_API\" })}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                    options={this.state.apiServiceList || []}\r\n                                    value={this.props.Login.masterData.SelectedApi && this.props.Login.masterData.SelectedApi}\r\n                                    isMandatory={true}\r\n                                    isClearable={false}\r\n                                    isMulti={false}\r\n                                    isSearchable={false}\r\n                                    closeMenuOnSelect={true}\r\n                                    onChange={(event) => this.onComboChange(event, 'napiservicecode')}\r\n                                />\r\n                            </Col>\r\n                            <Col md={1}>\r\n                                <Button className='btn-user btn-primary-blue' onClick={(e) => this.sendRequest()}>\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_SEND\" })}\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                        {this.props.Login.masterData && this.props.Login.masterData.SelectedApi && (this.props.Login.masterData.SelectedApi.value < 3 || this.props.Login.masterData.SelectedApi.value > 24) ?\r\n                        <Row noGutters>\r\n                            <Col md={9}>\r\n                                <FormSelectSearch\r\n                                    name={\"nformcode\"}\r\n                                    formLabel={this.props.intl.formatMessage({ id: \"IDS_FORMS\" })}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                    options={this.state.qualisList || []}\r\n                                    value={this.props.Login.masterData.SelectedForm && this.props.Login.masterData.SelectedForm}\r\n                                    isMandatory={true}\r\n                                    isClearable={false}\r\n                                    isMulti={false}\r\n                                    isSearchable={false}\r\n                                    closeMenuOnSelect={true}\r\n                                    onChange={(event) => this.onComboChange(event, 'nformcode')}\r\n                                />\r\n                            </Col>\r\n                        </Row> : \"\"}\r\n                        {this.props.Login.masterData && this.props.Login.masterData.SelectedApi && (this.props.Login.masterData.SelectedApi.value === 24) ?\r\n                        <Row noGutters>\r\n                            <Col md={9}>\r\n                                <FormSelectSearch\r\n                                    name={\"nsqlquerycode\"}\r\n                                    formLabel={this.props.intl.formatMessage({ id: \"IDS_QUERYNAME\" })}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                    options={this.state.queryList || []}\r\n                                    value={this.props.Login.masterData.SelectedSQLQuery && this.props.Login.masterData.SelectedSQLQuery}\r\n                                    isMandatory={true}\r\n                                    isClearable={false}\r\n                                    isMulti={false}\r\n                                    isSearchable={false}\r\n                                    closeMenuOnSelect={true}\r\n                                    onChange={(event) => this.onComboChange(event, 'nsqlquerycode')}\r\n                                />\r\n                            </Col>\r\n                        </Row> : \"\"}\r\n                        <Card className='api-filter-condition-card'>\r\n                            <Card.Body>\r\n                            {this.props.Login.masterData && this.props.Login.masterData.SelectedApi && (this.props.Login.masterData.SelectedApi.value < 3 || this.props.Login.masterData.SelectedApi.value > 23) ?\r\n                                <form> \r\n                                    <section>\r\n                                    {/* {this.state.selectedRecord['filterNew'] && this.state.selectedRecord['filterNew'].map((item, index) => { */}\r\n                                        <div><Row>\r\n                                            <Col md ={6}>\r\n                                            <FormSelectSearch\r\n                                                name={\"Parameters\"}\r\n                                                formLabel={this.props.intl.formatMessage({ id: \"IDS_PARAMETERS\" })}\r\n                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                options={this.state.paramList || []}\r\n                                                value={this.props.Login.masterData.Parameters && this.props.Login.masterData.Parameters}\r\n                                                isMandatory={true}\r\n                                                isClearable={false}\r\n                                                isMulti={false}\r\n                                                isSearchable={false}\r\n                                                closeMenuOnSelect={true}\r\n                                                onChange={(event) => this.onComboChange(event, 'Parameters')}\r\n                                            ></FormSelectSearch>\r\n                                            </Col>\r\n                                            <Col md= {6}>\r\n                                            <FormInput\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                name=\"filterValue\"\r\n                                                type=\"text\"\r\n                                                // onChange={(event) => this.onFilterInputOnChange(event, index)}\r\n                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                // value={item[\"filterValue\"] ? item[\"filterValue\"] : \"\"}\r\n                                                isMandatory={true}\r\n                                                required={true}\r\n                                                maxLength={100}\r\n                                            /> :\r\n                                            <FormNumericInput\r\n                                                name={\"filterValue\"}\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                type=\"number\"\r\n                                                // value={item[\"filterValue\"]}\r\n                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                strict={true}\r\n                                                maxLength={10}\r\n                                                // onChange={(value) => this.onFilterNumericInputChange(value, \"filterValue\", index)}\r\n                                                noStyle={true}\r\n                                                className=\"form-control\"\r\n                                                errors=\"Please provide a valid number.\"\r\n                                            />\r\n                                            </Col>\r\n                                            </Row>\r\n                                        </div>\r\n                                    {/* })} */}\r\n                                    </section>\r\n                                    \r\n                                    <section className={'modal-card-body'}>\r\n                                        {this.state.selectedRecord['filterNew'] && this.state.selectedRecord['filterNew'].map((item, index) => {\r\n                                            return <div className={'field has-addons filterheight'}>\r\n                                                <div class=\"control is-expanded\">\r\n                                                    <div class=\"select is-fullwidth\">\r\n                                                        <FormSelectSearch\r\n                                                            formGroupClassName=\"remove-floating-label-margin\"\r\n                                                            formLabel={this.props.intl.formatMessage({ id: \"IDS_FIELDS\" })}\r\n                                                            isSearchable={true}\r\n                                                            name={\"filterColumn\"}\r\n                                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_FIELDS\" })}\r\n                                                            showOption={true}\r\n                                                            options={this.state.lstQryColumn || []}\r\n                                                            value={item[\"filterColumn\"] && item[\"filterColumn\"] || \"\"}\r\n                                                            onChange={value => this.onfilterChange(value, \"filterColumn\", 'column', index)}\r\n                                                        ></FormSelectSearch>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div class=\"control is-expanded\">\r\n                                                    <div class=\"select is-fullwidth\">\r\n                                                        <FormSelectSearch\r\n                                                            formGroupClassName=\"remove-floating-label-margin\"\r\n                                                            formLabel={this.props.intl.formatMessage({ id: \"IDS_CONDITION\" })}\r\n                                                            isSearchable={true}\r\n                                                            name={\"sviewname\"}\r\n                                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_CONDITION\" })}\r\n                                                            showOption={true}\r\n                                                            options={item[\"filterColumn\"] && item[\"filterColumn\"].item ?\r\n                                                                (item[\"filterColumn\"].item.columndatatype === 'string' || item.filterColumn.item.columndatatype === 'character varying'|| item.filterColumn.item.columndatatype === 'character')?\r\n                                                                    stringOperatorData :\r\n                                                                    (item[\"filterColumn\"].item.columndatatype === 'numeric' || item.filterColumn.item.columndatatype === 'integer'|| item.filterColumn.item.columndatatype === 'smallint' || item.filterColumn.item.columndatatype === 'bigint') ?\r\n                                                                        numericOperatorData\r\n                                                                        : (item[\"filterColumn\"].item.columndatatype === 'date' || item[\"filterColumn\"].item.columndatatype === 'timestamp without time zone') ?\r\n                                                                            dateConditionData\r\n                                                                            : stringOperatorData : \"\"}\r\n\r\n                                                            value={item[\"filterCondition\"] !== undefined ? item[\"filterCondition\"] : \"\"}\r\n                                                            onChange={value => this.onfilterChange(value, \"filterCondition\", 'condition', index)}\r\n                                                        ></FormSelectSearch>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                <div className={\"control \"}>\r\n                                                    {(item[\"filterCondition\"] && item[\"filterCondition\"].value\r\n                                                        && item[\"filterColumn\"]) ?\r\n                                                        (item[\"filterColumn\"].item.columndatatype === 'string' || item.filterColumn.item.columndatatype === 'character varying' || item.filterColumn.item.columndatatype === 'character')?\r\n                                                            (item[\"filterCondition\"].value !== 'IS NULL' &&\r\n                                                                item[\"filterCondition\"].value !== 'IS NOT NULL' &&\r\n                                                                item[\"filterCondition\"].value !== 'PRESENT' &&\r\n                                                                item[\"filterCondition\"].value !== 'BLANK') ?\r\n                                                                <FormInput\r\n                                                                    label={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                    name=\"filterValue\"\r\n                                                                    type=\"text\"\r\n                                                                    onChange={(event) => this.onFilterInputOnChange(event, index)}\r\n                                                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                    value={item[\"filterValue\"] ? item[\"filterValue\"] : \"\"}\r\n                                                                    isMandatory={true}\r\n                                                                    required={true}\r\n                                                                    maxLength={100}\r\n                                                                /> : \"\"\r\n                                                            :\r\n                                                            (item[\"filterColumn\"].item.columndatatype === 'numeric' || item.filterColumn.item.columndatatype === 'integer' || item.filterColumn.item.columndatatype === 'smallint'|| item.filterColumn.item.columndatatype === 'bigint')?\r\n                                                                (item[\"filterCondition\"].value !== 'NULL' &&\r\n                                                                    item[\"filterCondition\"].value !== 'NOT NULL') ?\r\n                                                                    item[\"filterCondition\"].value === 'IN' ?\r\n                                                                        <FormInput\r\n                                                                            label={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                            name=\"filterValue\"\r\n                                                                            type=\"text\"\r\n                                                                            onChange={(event) => this.onFilterInputOnChange(event, index)}\r\n                                                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                            value={item[\"filterValue\"] ? item[\"filterValue\"] : \"\"}\r\n                                                                            isMandatory={true}\r\n                                                                            required={true}\r\n                                                                            maxLength={100}\r\n                                                                        />\r\n                                                                        :\r\n                                                                        <FormNumericInput\r\n                                                                            name={\"filterValue\"}\r\n                                                                            label={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                            type=\"number\"\r\n                                                                            value={item[\"filterValue\"]}\r\n                                                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                            strict={true}\r\n                                                                            //min={0}\r\n                                                                            //max={99999999.99}\r\n                                                                            maxLength={10}\r\n                                                                            onChange={(value) => this.onFilterNumericInputChange(value, \"filterValue\", index)}\r\n                                                                            noStyle={true}\r\n                                                                            //precision={2}\r\n                                                                            //isMandatory={true}\r\n                                                                            className=\"form-control\"\r\n                                                                            errors=\"Please provide a valid number.\"\r\n                                                                        />\r\n\r\n                                                                    : \"\"\r\n                                                                : (item[\"filterColumn\"].item.columndatatype === 'date' || item[\"filterColumn\"].item.columndatatype === 'timestamp without time zone') ?\r\n                                                                    (item[\"filterCondition\"].value === '=' ||\r\n                                                                        item[\"filterCondition\"].value === '<'\r\n                                                                        || item[\"filterCondition\"].value === '>'\r\n                                                                        || item[\"filterCondition\"].value === 'NOT'\r\n                                                                    ) ?\r\n                                                                        <DateTimePicker\r\n                                                                            name={\"filterValue\"}\r\n                                                                            label={this.props.intl.formatMessage({ id: \"IDS_VALUE\" })}\r\n                                                                            className='form-control'\r\n                                                                            placeholderText={this.props.intl.formatMessage({ id: \"IDS_SELECTDATE\" })}\r\n                                                                            selected={item[\"filterValue\"] ? item[\"filterValue\"] : new Date()}\r\n                                                                            dateFormat={this.props.Login.userInfo[\"ssitedatetime\"]}\r\n                                                                            timeInputLabel={this.props.intl.formatMessage({ id: \"IDS_TIME\" })}\r\n                                                                            showTimeInput={true}\r\n                                                                            onChange={date => this.handleDateChange(\"filterValue\", date, index)}\r\n                                                                            value={item[\"filterValue\"] ? item[\"filterValue\"] : \"\"}\r\n                                                                        />\r\n                                                                        : \"\"\r\n                                                                    : \"\"\r\n                                                        : \"\"\r\n\r\n\r\n                                                    }\r\n                                                </div>\r\n                                                <div className={\"control\"}>\r\n                                                    {this.state.selectedRecord['filterNew'].length > 0 &&\r\n                                                        <Button className={\"button is-light is-danger\"}\r\n                                                            onClick={() => this.onFilterModalDelete(index)}\r\n                                                            type=\"button\" tabindex=\"0\">\r\n                                                            <span className={\"icon\"}>\r\n                                                                <FontAwesomeIcon icon={faMinus} />\r\n                                                            </span>\r\n                                                        </Button>\r\n                                                    }\r\n                                                </div>\r\n                                            </div>\r\n                                        })}\r\n                                        {this.props.Login.masterData && this.props.Login.masterData.SelectedApi && (this.props.Login.masterData.SelectedApi.value < 3 || this.props.Login.masterData.SelectedApi.value > 23) ?\r\n                                        <div className={'buttons is-right'}>\r\n                                            <Button className={'button is-light is-info is-small'}\r\n                                                onClick={(e) => this.onMoreClick(e)} type=\"button\" tabindex=\"0\">\r\n\r\n                                                <span className={\"icon\"}>\r\n                                                    <FontAwesomeIcon icon={faPlus} />\r\n                                                </span>\r\n                                                <span>{this.props.intl.formatMessage({ id: \"IDS_MORE\" })}</span>\r\n                                            </Button>\r\n                                        </div>: \"\"}\r\n\r\n                                    </section>\r\n                                </form >\r\n                                : \"\"}\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col md={7}>\r\n                        <ContentPanel className=\"panel-main-content\" >\r\n                            <Card className='my-2 ' >\r\n                                <Card.Header className=\"product-title-main\">\r\n                                    <Card.Title>\r\n                                        {this.props.intl.formatMessage({ id: \"IDS_QUERYPARAMS\" })}\r\n                                    </Card.Title>\r\n                                </Card.Header>\r\n                                <Card.Body className='api-card-body-scrollable-element'>\r\n                                    {/* <pre style={{ \"height\": \"200px\", \"overflow\": \"scroll\" }}>{\"{\\n\"}{this.state.constructApiData.map(e => JSON.stringify(e, null, 2).replace(/{|}/g, ''))}{\"\\n}\"}</pre> */}\r\n                                    <pre>{this.showQueryParameter()}</pre>\r\n                                    <div className='buttons is-right'>\r\n                                        <Button className='btn-user btn-primary-blue' onClick={(e) => this.copyToClipboard()}>\r\n                                            <FontAwesomeIcon className='' icon={faCopy}></FontAwesomeIcon>{'  '}\r\n                                            {this.props.intl.formatMessage({ id: \"IDS_COPYQUERYPARAMS\" })}\r\n                                        </Button>\r\n                                    </div>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </ContentPanel>\r\n                        <ContentPanel className=\"panel-main-content\" >\r\n                            <Card >\r\n                                <Card.Header className=\"product-title-main\">\r\n                                    <Card.Title>\r\n                                        {this.props.intl.formatMessage({ id: \"IDS_RESPONSE\" })}\r\n                                    </Card.Title>\r\n                                </Card.Header>\r\n                                <Card.Body className='api-card-body'>\r\n                                    <ReactJson src={this.props.Login.masterData.consoleData && this.props.Login.masterData.consoleData} />\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </ContentPanel>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </ListWrapper>\r\n        </>)\r\n    }\r\n\r\n    showQueryParameter = () => {\r\n     //   let newObject = {}\r\n        let returnString = \"{\";\r\n        if(this.state && this.state.selectedRecord && this.state.selectedRecord.napiservicecode && this.state.selectedRecord.napiservicecode.value < 3 ){\r\n            if(this.state && this.state.constructApiData.length > 0 ){\r\n                this.state.constructApiData.map((e, index) => {\r\n                if (index < 2) {\r\n                    returnString = returnString + \" \\n \\\"\" + Object.keys(e) + \"\\\":\\\"\" + Object.values(e)+\"\\\"\"\r\n                }\r\n\r\n            })\r\n            let text = this.filterQueryFormation(this.state.selectedRecord)\r\n\r\n            returnString = returnString + \"\\n\" + \" \\\"whereCondition\\\":\\\"\" + text+\"\\\"\\n}\"\r\n            }\r\n            else{\r\n                returnString = returnString +\"\\n}\"\r\n            }\r\n        }else if(this.state && this.state.selectedRecord && this.state.selectedRecord.napiservicecode && this.state.selectedRecord.napiservicecode.value == 24){\r\n            if(this.state && this.state.constructApiData.length > 0){\r\n                this.state.constructApiData.map((e, index) =>{\r\n                    if(index < 3){\r\n                        returnString = returnString + \"\\n \\\"\"+ Object.keys(e) +\"\\\":\\\"\" + Object.values(e)+\"\\\"\"\r\n                    }\r\n                })\r\n                let text = this.filterQueryFormation(this.state.selectedRecord)\r\n                returnString = returnString + \"\\n\" + \" \\\"whereCondition\\\":\\\"\" + text+\"\\\"\\n}\"\r\n            }else{\r\n                returnString = returnString +\"\\n}\"\r\n            }\r\n        }else if(this.props.Login){\r\n            returnString = returnString + \"\\\"userinfo\\\":\"\r\n            let userinfo = JSON.stringify(this.props.Login.userInfo);\r\n            returnString = returnString + userinfo +\"}\"\r\n        }\r\n\r\n        return returnString;\r\n    }\r\n\r\n    copyParameter = () => {\r\n        let newObject = {}\r\n        if(this.state && this.state.selectedRecord && this.state.selectedRecord.napiservicecode && this.state.selectedRecord.napiservicecode.value < 3){\r\n            if(this.state && this.state.constructApiData.length > 0 ){\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_COPIEDSUCCESSFULLY\" }))\r\n\r\n            this.state.constructApiData.map((e, index) => {\r\n                if (index < 2) {\r\n                    newObject = {\r\n                        ...newObject,\r\n                        ...e\r\n                    }\r\n                }\r\n    \r\n            })\r\n            let text = this.filterQueryFormation(this.state.selectedRecord)\r\n            const object = {\r\n                ...newObject,\r\n                \"whereCondition\": text\r\n            }\r\n            return JSON.stringify(object);\r\n            \r\n            }else{\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_QUERYISEMPTY\" }))\r\n            }\r\n        }else if(this.props.Login && this.props.Login.userInfo){\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_COPIEDSUCCESSFULLY\" }))\r\n\r\n            const object ={\r\n                \"userinfo\": this.props.Login.userInfo\r\n            }\r\n            return JSON.stringify(object);\r\n            \r\n        }\r\n    }\r\n\r\n    sendObject = () => {\r\n        let newObject = {}\r\n        this.state.constructApiData.map(e => {\r\n            newObject = {\r\n                ...newObject,\r\n                ...e\r\n            }\r\n        })\r\n        let text = this.filterQueryFormation(this.state.selectedRecord)\r\n        const object = {\r\n            ...newObject,\r\n            \"whereCondition\": text\r\n        }\r\n\r\n        return object;\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            console.log(this.props.Login.masterData !== previousProps.Login.masterData)\r\n            let { userRoleControlRights, controlMap, apiServiceList,\r\n                selectedRecord, constructApiData, lstQueryBuilder, qualisList,queryList,paramList\r\n            } = { ...this.state }\r\n\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            }\r\n            if(this.props.Login && this.props.Login.masterData && this.props.Login.masterData.SelectedApi && this.props.Login.masterData.SelectedApi.value < 3){\r\n                selectedRecord = \r\n                    {\"napiservicecode\":this.props.Login.masterData.SelectedApi,...this.state.selectedRecord}\r\n            }\r\n\r\n            if (this.props.Login.masterData.lstApiService !== previousProps.Login.masterData.lstApiService) {\r\n                const apiServiceMap = constructOptionList(this.props.Login.masterData.lstApiService || [], \"napiservicecode\",\r\n                    \"sapiservicename\", \"nsorter\", \"ascending\", false);\r\n                apiServiceList = apiServiceMap.get(\"OptionList\")\r\n            }\r\n\r\n            if (this.props.Login.masterData.lstqueryForm !== previousProps.Login.masterData.lstqueryForm) {\r\n                const qualisMap = constructOptionList(this.props.Login.masterData.lstqueryForm || [], \"nformcode\",\r\n                    \"sdisplayname\", \"nsorter\", \"ascending\", false);\r\n                qualisList = qualisMap.get(\"OptionList\")\r\n                // this.setState({\r\n                //     qualisList\r\n                // });\r\n            }\r\n\r\n            if(this.props.Login.masterData.lstSQLQuery !== previousProps.Login.masterData.lstSQLQuery){\r\n                const queryMap = constructOptionList(this.props.Login.masterData.lstSQLQuery || [], \"nsqlquerycode\",\r\n                    \"ssqlqueryname\", \"ssqlquery\", \"nsorter\", \"ascending\", false);\r\n                    queryList = queryMap.get(\"OptionList\")\r\n\r\n            }\r\n            if(this.props.Login.masterData.Parameters !== previousProps.Login.masterData.Parameters){\r\n                const paramMap = constructOptionList(this.props.Login.masterData.Parameters || [] , this.props.Login.masterData.Parameters , \"ascending\", false);\r\n                paramList = paramMap.get(\"OptionList\")\r\n            }\r\n                if (this.props.Login.masterData.SelectedForm !== previousProps.Login.masterData.SelectedForm) {\r\n\r\n                    if(this.props.Login.masterData.SelectedForm && this.props.Login.masterData.SelectedForm.value){\r\n                        constructApiData = [\r\n                            { \"nformcode\": this.props.Login.masterData.SelectedForm.value },\r\n                            { \"sformname\": this.props.Login.masterData.SelectedForm.label }\r\n                        ]\r\n                    }\r\n                    else {\r\n                        constructApiData = []\r\n                    }\r\n                   \r\n                    let constructData = this.props.Login.masterData.lstquerybilderColumns.map((item, index) => {\r\n                        return { label: item.scolumndisplayname, value: index, item: { ...item } }\r\n    \r\n                    })\r\n                    lstQueryBuilder = constructData;\r\n                    selectedRecord['filterNew'] = []\r\n                }\r\n                if(this.props.Login.masterData.SelectedApi !== previousProps.Login.masterData.SelectedApi){\r\n                    if(this.props.Login.masterData.SelectedApi && this.props.Login.masterData.SelectedApi.value && this.props.Login.masterData.SelectedApi.value === 24){\r\n\r\n                        let constructQuery = this.props.Login.masterData.lstSQLQuery.map((item, index) => {\r\n                            return {label: item.ssqlqueryname, value: index, item: { ...item }}\r\n                        })\r\n                        lstQueryBuilder = constructQuery;\r\n                    }\r\n                }\r\n                if (this.props.Login.masterData.SelectedSQLQuery !== previousProps.Login.masterData.SelectedSQLQuery) {\r\n\r\n                    if(this.props.Login.masterData.SelectedSQLQuery && this.props.Login.masterData.SelectedSQLQuery.value && this.props.Login.masterData.SelectedApi.value === 24){\r\n                        constructApiData = [\r\n                            { \"nsqlquerycode\": this.props.Login.masterData.SelectedSQLQuery.value },\r\n                            { \"ssqlqueryname\": this.props.Login.masterData.SelectedSQLQuery.label }\r\n                        ]\r\n                    }\r\n                    else {\r\n                        constructApiData = []\r\n                    }                  \r\n                         \r\n                    let constructData = [];\r\n                    if(this.props.Login.masterData && this.props.Login.masterData.Columns){\r\n                        constructData = this.props.Login.masterData.Columns.map((item, index) => {\r\n                            return { label: item.scolumndisplayname, value: index, item: { ...item } }\r\n    \r\n                        })     \r\n                    }else{\r\n                        constructData = [];\r\n                    }              \r\n                    lstQueryBuilder = constructData;\r\n                    selectedRecord['filterNew'] = []\r\n                    \r\n                }\r\n                if(this.props.Login && this.props.Login.newMap){\r\n                    selectedRecord['filterNew'] = {\"whereCondition\" : this.props.Login.newMap.whereCondition}\r\n                }\r\n                \r\n\r\n            this.setState({\r\n                userRoleControlRights,\r\n                controlMap, apiServiceList,\r\n                selectedRecord, constructApiData,\r\n                lstQueryBuilder, qualisList,queryList,paramList\r\n            });\r\n        }\r\n        else{\r\n            \r\n            if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n                this.setState({\r\n                    selectedRecord: this.props.Login.selectedRecord,\r\n                    data: this.props.Login.masterData\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    sendRequest,\r\n    getQualisFormsFields, getQualisForms,getCustomQuery,getCustomQueryName, updateStore\r\n})(injectIntl(APIService));"]},"metadata":{},"sourceType":"module"}