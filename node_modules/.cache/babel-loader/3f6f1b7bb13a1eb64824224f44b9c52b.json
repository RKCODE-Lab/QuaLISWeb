{"ast":null,"code":"import _slicedToArray from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React from'react';import{injectIntl}from'react-intl';import{Row,Col,Card,FormGroup,FormLabel}from'react-bootstrap';import FormInput from'../../components/form-input/form-input.component';import DateTimePicker from'../../components/date-time-picker/date-time-picker.component';import FormSelectSearch from'../../components/form-select-search/form-select-search.component';import{transactionStatus}from'../../components/Enumeration';import{ReadOnlyText}from'../../components/App.styles';import FormTextarea from'../../components/form-textarea/form-textarea.component';var AddSampleCollection=function AddSampleCollection(props){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:6},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(FormInput,{label:props.formatMessage({id:\"IDS_BARCODEID\"}),name:\"sbarcodeid\",type:\"text\"//onBlur={(event) => props.autoSaveGetData(event)}\n,placeholder:props.formatMessage({id:\"IDS_BARCODEID\"}),onChange:function onChange(event){return props.onInputOnChange(event,\"sbarcodeid\");},onKeyUp:function onKeyUp(event){return props.barcodeEnter(event,\"sbarcodeid\");},isDisabled:props.operation==\"update\"?true:false,value:props.selectedRecord[\"sbarcodeid\"],isMandatory:true,required:true,maxLength:20})),/*#__PURE__*/React.createElement(Col,{md:props.userInfo.istimezoneshow===transactionStatus.YES?12:12},/*#__PURE__*/React.createElement(DateTimePicker,{name:\"dcollectiondate\",label:props.intl.formatMessage({id:\"IDS_SAMPLERECEIVINGDATE\"}),className:\"form-control\",placeholderText:props.intl.formatMessage({id:\"IDS_SELECTDATE\"}),dateFormat:props.userInfo.ssitedatetime,timeInputLabel:props.intl.formatMessage({id:\"IDS_STORAGEDATETIME\"}),showTimeInput:true,timeFormat:true,isClearable:false,isMandatory:true,required:true,minDate:props.currentTime,minTime:props.currentTime,onChange:function onChange(date){return props.handleDateChangeSlidout(\"dcollectiondate\",date);},selected:props.selectedRecord?props.selectedRecord[\"dcollectiondate\"]:new Date()})),/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(FormTextarea,{label:props.intl.formatMessage({id:\"IDS_COMMENTS\"}),name:\"scomments\",onChange:function onChange(event){return props.onInputOnChange(event,\"scomments\");},placeholder:props.intl.formatMessage({id:\"IDS_COMMENTS\"}),value:props.selectedRecord?props.selectedRecord[\"scomments\"]:\"\",rows:\"2\",isMandatory:false,required:false,maxLength:\"255\"}))))),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:12,className:\" mb-2\"},props.barcodedata&&Object.entries(props.barcodedata).length!==0&&/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(Card.Header,null,/*#__PURE__*/React.createElement(\"span\",{style:{display:\"inline-block\",marginTop:\"1%\"}},/*#__PURE__*/React.createElement(\"h4\",null,props.intl.formatMessage({id:\"IDS_SAMPLEINFO\"})))),/*#__PURE__*/React.createElement(Card.Body,null,/*#__PURE__*/React.createElement(Row,null,props.barcodeFields&&props.barcodeFields.map(function(item){return props.barcodedata&&Object.entries(props.barcodedata).map(function(_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1];if(item.sfieldname===key){return/*#__PURE__*/React.createElement(Col,{md:6,key:\"specInfo_\".concat(key)},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,key),/*#__PURE__*/React.createElement(ReadOnlyText,null,value)));}else{return null;}});})))))));};export default injectIntl(AddSampleCollection);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/storagemanagement/AddSampleReceiving.js"],"names":["React","injectIntl","Row","Col","Card","FormGroup","FormLabel","FormInput","DateTimePicker","FormSelectSearch","transactionStatus","ReadOnlyText","FormTextarea","AddSampleCollection","props","formatMessage","id","event","onInputOnChange","barcodeEnter","operation","selectedRecord","userInfo","istimezoneshow","YES","intl","ssitedatetime","currentTime","date","handleDateChangeSlidout","Date","barcodedata","Object","entries","length","display","marginTop","barcodeFields","map","item","key","value","sfieldname"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col, Card, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { ReadOnlyText } from '../../components/App.styles';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\n\r\nconst AddSampleCollection = (props) => {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col md={6}>\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <FormInput\r\n                                label={props.formatMessage({ id: \"IDS_BARCODEID\" })}\r\n                                name={\"sbarcodeid\"}\r\n                                type=\"text\"\r\n                                //onBlur={(event) => props.autoSaveGetData(event)}\r\n                                placeholder={props.formatMessage({ id: \"IDS_BARCODEID\" })}\r\n                                onChange={(event) => props.onInputOnChange(event, \"sbarcodeid\")}\r\n                                onKeyUp={(event) => props.barcodeEnter(event, \"sbarcodeid\")}\r\n                                isDisabled={props.operation == \"update\" ? true : false}\r\n                                value={props.selectedRecord[\"sbarcodeid\"]}\r\n                                isMandatory={true}\r\n                                required={true}\r\n                                maxLength={20}\r\n\r\n                            />\r\n                        </Col>\r\n\r\n                        <Col md={props.userInfo.istimezoneshow === transactionStatus.YES ? 12 : 12}>\r\n                            {/* <DateTimePicker\r\n                            name={\"dcollectiondate\"}\r\n                            label={props.intl.formatMessage({ id: \"IDS_SAMPLERECEIVINGDATE\" })}\r\n                            className='form-control'\r\n                            placeholderText={props.intl.formatMessage({ id: \"IDS_SELECTDATE\" })}\r\n                            selected={props.selectedRecord[\"dcollectiondate\"]}\r\n                            //dateFormat={props.userInfo.ssitedate}\r\n                            dateFormat={props.userInfo ? props.userInfo.ssitedate || [] : []}\r\n                            timeInputLabel={props.intl.formatMessage({ id: \"IDS_TIME\" })}\r\n                            showTimeInput={true}\r\n                            timeFormat={true}\r\n                            isMandatory={true}\r\n                            required={true}\r\n                            maxTime={props.currentTime}\r\n                            //timeInputLabel={props.intl.formatMessage({ id: \"IDS_STORAGEDATETIME\" })}\r\n                            isClearable={false}\r\n                            // isDisabled={diableAllStatus === recordStatus}\r\n                            minDate={props.currentTime}\r\n                            minTime={props.currentTime}\r\n                            onChange={date => props.handleDateChangeSlidout(\"dcollectiondate\", date)} /> */}\r\n\r\n                            <DateTimePicker\r\n                                name={\"dcollectiondate\"}\r\n                                label={props.intl.formatMessage({ id: \"IDS_SAMPLERECEIVINGDATE\" })}\r\n                                className='form-control'\r\n                                placeholderText={props.intl.formatMessage({ id: \"IDS_SELECTDATE\" })}\r\n                                dateFormat={props.userInfo.ssitedatetime}\r\n                                timeInputLabel={props.intl.formatMessage({ id: \"IDS_STORAGEDATETIME\" })}\r\n                                showTimeInput={true}\r\n                                timeFormat={true}\r\n                                isClearable={false}\r\n                                isMandatory={true}\r\n                                required={true}\r\n                                minDate={props.currentTime}\r\n                                minTime={props.currentTime}\r\n                                onChange={date => props.handleDateChangeSlidout(\"dcollectiondate\", date)}\r\n                                selected={props.selectedRecord ? props.selectedRecord[\"dcollectiondate\"] : new Date()} />\r\n\r\n                        </Col>\r\n                        <Col md={12}>\r\n                            <FormTextarea\r\n                                label={props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                                name={\"scomments\"}\r\n                                onChange={(event) => props.onInputOnChange(event, \"scomments\")}\r\n                                placeholder={props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                                value={props.selectedRecord ? props.selectedRecord[\"scomments\"] : \"\"}\r\n                                rows=\"2\"\r\n                                isMandatory={false}\r\n                                required={false}\r\n                                maxLength={\"255\"}\r\n                            >\r\n                            </FormTextarea>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col md={12} className=' mb-2'>\r\n\r\n                    {/*<Row>   //janakumar ALPD-4609  Storage Sample Receiving-->Can't able to submit the E-sign popup in Edit popup screen\r\n                     {props.barcodenorecord === true &&\r\n                        <div className=' mb-2'>\r\n                            <Col md={12} >\r\n                                <span style={{ display: \"inline-block\", marginTop: \"10%\" }} >\r\n                                    <font size=\"5\" face=\"verdana\">\r\n                                        {props.intl.formatMessage({ id: \"IDS_BARCODENOTFOUND\" })}\r\n                                    </font>\r\n                                </span>\r\n                            </Col>\r\n                        </div>}\r\n\r\n                    </Row> && props.barcodenorecord === false   */}\r\n\r\n                    {props.barcodedata && Object.entries(props.barcodedata).length !== 0 &&\r\n\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                    <h4>{props.intl.formatMessage({ id: \"IDS_SAMPLEINFO\" })}</h4>\r\n                                </span>\r\n                            </Card.Header>\r\n\r\n                            <Card.Body>\r\n                                <Row>\r\n                                    {\r\n                                        props.barcodeFields && props.barcodeFields.map(item => {\r\n                                            return (\r\n                                                props.barcodedata && Object.entries(props.barcodedata).map(([key, value]) => {\r\n                                                    if (item.sfieldname === key) {\r\n                                                        return (\r\n                                                            <Col md={6} key={`specInfo_${key}`}>\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel>\r\n                                                                        {key}\r\n                                                                    </FormLabel>\r\n                                                                    <ReadOnlyText>{value}</ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        );\r\n                                                    } else {\r\n                                                        return null;\r\n                                                    }\r\n                                                })\r\n                                            );\r\n                                        })\r\n                                    }\r\n\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    }\r\n                </Col>\r\n            </Row >\r\n        </>\r\n    )\r\n}\r\nexport default injectIntl(AddSampleCollection);\r\n"]},"metadata":{},"sourceType":"module"}