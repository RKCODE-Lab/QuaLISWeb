{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\data-grid\\\\DataGridWithMultipleGrid.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Button, Nav, Image, InputGroup } from 'react-bootstrap';\nimport { Grid, GridColumn as Column, GridToolbar, GridColumnMenuFilter, GridNoRecords, getSelectedState, GridColumn } from '@progress/kendo-react-grid';\nimport { GridPDFExport } from '@progress/kendo-react-pdf';\nimport { ExcelExport } from '@progress/kendo-react-excel-export';\nimport ConfirmDialog from '../confirm-alert/confirm-alert.component';\nimport SimpleGrid from './SimpleGrid';\nimport { Row, Col, Card, FormGroup, FormLabel } from 'react-bootstrap';\nimport { AtTableWrap, FormControlStatic, FontIconWrap } from '../data-grid/data-grid.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { updateStore, viewAttachment } from '../../actions';\nimport { faCheck, faTrashAlt, faPencilAlt, faThumbsUp, faCopy, faPlus, faSync, faFileExcel, faFilePdf, faCloudDownloadAlt, faRedo, faEye, faRocket, faExpand, faMinus, faRecycle } from '@fortawesome/free-solid-svg-icons';\nimport ColumnMenu from './ColumnMenu'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport reject from \"../../assets/image/reject.svg\";\nimport CustomSwitch from '../custom-switch/custom-switch.component'; // import '../../assets/styles/unicode-font.css';\n\nimport parse from 'html-react-parser';\nimport { toast } from 'react-toastify';\nimport FormCheckbox from '../form-checkbox/form-checkbox.component';\nimport messages_en from '../../assets/translations/en.json';\nimport messages_de from '../../assets/translations/de.json';\nimport { loadMessages, LocalizationProvider } from '@progress/kendo-react-intl';\nimport { connect } from 'react-redux';\nimport { process } from '@progress/kendo-data-query';\nimport ReactTooltip from 'react-tooltip';\nimport { getActionIcon } from '../HoverIcons';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport messages_ru from '../../assets/translations/ru.json';\nimport messages_tg from '../../assets/translations/tg.json';\nimport SimpleGridWithSelection from './SimpleGridWithSelection';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport SingleSelectionDataGrid from './SingleSelectionDataGrid';\nimport { fileViewUrl } from '../../rsapi';\nimport Axios from 'axios';\nconst messages = {\n  'en-US': messages_en,\n  'ko-KR': messages_de,\n  'ru-RU': messages_ru,\n  'tg-TG': messages_tg\n};\n\nclass DataGridWithMultipleGrid extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.detailBand = props => {\n      return /*#__PURE__*/React.createElement(Row, {\n        bsPrefix: \"margin_class\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }\n      }, this.props.hasChild && this.props.needSubSample ? /*#__PURE__*/React.createElement(SimpleGridWithSelection, {\n        ref: foo1 => this.foo1 = foo1 //handleChange={this.expandData.bind(this)}\n        ,\n        extractedColumnList: this.props.childColumnList,\n        dataState: this.props.dataState,\n        childList: props.dataItem ? this.props.childList[props.dataItem[this.props.childMappingField]] || [] : this.props.childList[props[this.props.childMappingField]] || [],\n        childDataResult: this.props.childDataResult,\n        childSelectionChange: this.props.childSelectionChange,\n        headerSelectionChange: this.props.childHeaderSelectionChange,\n        selectAll: this.props.childSelectAll,\n        hasSubChild: this.props.hasSubChild,\n        subChildDataResult: this.props.subChildDataResult && this.props.subChildDataResult || [],\n        subChildColumnList: this.props.subChildColumnList,\n        expandField: \"expanded\",\n        childHandleExpandChange: this.props.childHandleExpandChange,\n        subChildSelectionChange: this.props.subChildSelectionChange,\n        subChildList: this.props.subChildList || [],\n        subChildMappingField: this.props.subChildMappingField,\n        subChildHeaderSelectionChange: this.props.subChildHeaderSelectionChange,\n        subChildSelectAll: this.props.subChildSelectAll,\n        selectedsubcild: this.props.selectedsubcild,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }\n      }) : this.props.hasSubChild ? /*#__PURE__*/React.createElement(SingleSelectionDataGrid, {\n        hasSubChild: this.props.hasSubChild,\n        subChildDataResult: this.props.subChildDataResult && this.props.subChildDataResult || [],\n        subChildColumnList: this.props.subChildColumnList,\n        subChildSelectionChange: this.props.subChildSelectionChange,\n        subChildList: props.dataItem ? this.props.subChildList[props.dataItem[this.props.subChildMappingField]] || [] : this.props.subChildList[props[this.props.subChildMappingField]] || [],\n        subChildHeaderSelectionChange: this.props.subChildHeaderSelectionChange,\n        subChildSelectAll: this.props.subChildSelectAll,\n        selectedsubcild: this.props.selectedsubcild,\n        subChildMappingField: this.props.subChildMappingField,\n        extractedColumnList: this.props.subChildColumnList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }\n      }) : \"\"), \" \");\n    };\n\n    this.expandChange = event => {\n      let arrayfalse = [];\n      let change = [];\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\n\n      if (this.props.hasChild && event.value === true) {\n        event.dataItem.expanded = !isExpanded;\n        Object.values(this.props.childList).forEach(item => {\n          item.map(item1 => {\n            item1['expanded'] = true;\n          });\n        });\n      } else {\n        event.dataItem.expanded = !isExpanded;\n        arrayfalse.push(event.dataItem);\n        change = false;\n        this.setState({\n          isExpanded,\n          arrayfalse\n        });\n      }\n\n      let parentData = this.props.dataResult.data ? this.props.dataResult.data.every(item => {\n        return item.expanded === true;\n      }) : this.props.dataResult.every(item => {\n        return item.expanded === true;\n      });\n\n      if (parentData === true) {\n        change = true;\n      } else {\n        change = false;\n      }\n\n      this.props.expandFunc({\n        change: change\n      });\n    };\n\n    this.allData = props => {\n      props.map(item => {});\n    };\n\n    this.viewCOAHistoryFile = filedata => {\n      const inputParam = {\n        inputData: {\n          COAHistoryFile: filedata,\n          userinfo: this.props.userInfo\n        },\n        classUrl: \"coarelease\",\n        operation: \"view\",\n        methodUrl: \"AttachedCOAHistoryFile\",\n        screenName: \"IDS_TEST\"\n      };\n      this.props.viewAttachment(inputParam);\n    };\n\n    this.myRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage(); // this.state = { status: false }\n\n    this.state = {\n      showChild: true,\n      arr: [],\n      change: false,\n      check: false,\n      status: false,\n      count: 0\n    };\n  }\n\n  columnProps(field) {\n    if (!this.props.hideColumnFilter) {\n      return {\n        field: field,\n        columnMenu: ColumnMenu,\n        headerClassName: this.isColumnActive(field, this.props.dataState) ? 'active' : ''\n      };\n    }\n  }\n\n  isColumnActive(field, dataState) {\n    return GridColumnMenuFilter.active(field, dataState.filter);\n  }\n\n  expandData() {\n    let change = [];\n\n    if (this.props.Login.checkFlag === undefined || this.props.Login.checkFlag === \"1\" //|| this.props.Login.count === 0\n    ) {\n      let data = this.props.dataResult.data.every(item => {\n        return item.expanded === true;\n      });\n\n      if (data === false) {\n        this.props.dataResult.data.map((item, i) => {\n          if (item['expanded'] === undefined || item['expanded'] !== true) {\n            item['expanded'] = true;\n\n            if (this.props.childList[item[this.props.childMappingField]] != undefined) {\n              this.props.childList[item[this.props.childMappingField]].map((item1, x) => {\n                this.props.childList[item[this.props.childMappingField]][x]['expanded'] = true;\n              });\n            }\n\n            change = true;\n          }\n        });\n      } else {\n        if (this.state.arrayfalse && this.state.arrayfalse.length !== 0 && this.props.Login.change === false) {\n          this.state.arrayfalse.map(item => {\n            item['expanded'] = true;\n            change = true;\n          });\n        } else {\n          this.props.dataResult.data.map((item, i) => {\n            item['expanded'] = false;\n\n            if (this.props.childList[item[this.props.childMappingField]] != undefined) {\n              this.props.childList[item[this.props.childMappingField]].map((item1, x) => {\n                this.props.childList[item[this.props.childMappingField]][x]['expanded'] = false;\n              });\n            }\n\n            change = false;\n          });\n        }\n      }\n    } else {\n      if (this.props.Login.childfalsearray && this.props.Login.childfalsearray !== 0) {\n        this.props.Login.childfalsearray.map(item => item['expanded'] = true);\n        change = true;\n      }\n\n      if (this.state.arrayfalse && this.state.arrayfalse.length !== 0 && this.props.Login.change === false) {\n        this.state.arrayfalse.map(item => {\n          item['expanded'] = true;\n          change = true;\n        });\n      }\n    } // if (this.props.Login.count === 0) {\n    //  change=true        }\n\n\n    this.props.expandFunc({\n      change: change\n    });\n  }\n\n  render() {\n    console.log(\"selectiongrid\", this.props.subChildList);\n    console.log(\"selectiongrid1\", this.props);\n    const methodUrl = this.props.methodUrl ? this.props.methodUrl : this.props.inputParam && this.props.inputParam.methodUrl;\n    const regenerateId = this.props.controlMap && this.props.controlMap.has(\"RegenerateReleaseFile\") && this.props.controlMap.get(\"RegenerateReleaseFile\").ncontrolcode;\n    const downloadId = this.props.controlMap && this.props.controlMap.has(\"DownloadReleaseFile\") && this.props.controlMap.get(\"DownloadReleaseFile\").ncontrolcode;\n    const releaseId = this.props.controlMap && this.props.controlMap.has(\"COA\".concat(methodUrl)) && this.props.controlMap.get(\"COA\".concat(methodUrl)).ncontrolcode;\n    const expandId = this.props.controlMap && this.props.controlMap.has(\"ReleaseExpand\") && this.props.controlMap.get(\"ReleaseExpand\").ncontrolcode;\n    const collapseId = this.props.controlMap && this.props.controlMap.has(\"ReleaseCollapse\") && this.props.controlMap.get(\"ReleaseCollapse\").ncontrolcode;\n    const pageSizes = this.props.pageSizes ? this.props.pageSizes : this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting));\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      actionColWidth: this.props.actionColWidth ? this.props.actionColWidth : \"150px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      ref: foo => this.foo = foo,\n      className: this.props.dataResult && this.props.dataResult.length > 0 || this.props.extractedColumnList && this.props.extractedColumnList.length > 0 ? \"active-paging\" : \"no-paging\",\n      style: {\n        height: this.props.gridHeight,\n        width: this.props.gridWidth\n      },\n      sortable: true,\n      resizable: true,\n      reorderable: false,\n      scrollable: this.props.scrollable,\n      pageable: this.props.pageable ? {\n        buttonCount: 5,\n        pageSizes: pageSizes,\n        previousNext: false\n      } : \"\",\n      groupable: this.props.groupable ? true : false,\n      detail: this.props.hideDetailBand ? false : this.detailBand,\n      expandField: this.props.expandField,\n      onExpandChange: this.expandChange,\n      data: this.props.dataResult,\n      total: this.props.total\n    }, this.props.dataState, {\n      selectedField: \"selected\",\n      onRowClick: this.props.handleRowClick,\n      onSelectionChange: this.props.selectionChange,\n      onHeaderSelectionChange: this.props.headerSelectionChange,\n      onDataStateChange: this.props.dataStateChange,\n      selectable: {\n        enabled: true,\n        drag: false,\n        cell: false,\n        mode: 'multiple'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(GridNoRecords, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 29\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_NORECORDSAVAILABLE\"\n    })), this.props.isToolBarRequired ? /*#__PURE__*/React.createElement(GridToolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 33\n      }\n    }, this.props.isExpandRequired === true ? /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      href: \"#\",\n      style: {\n        marginRight: \"8px\"\n      } //    data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.expandData(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 41\n      }\n    }, this.props.intl.formatMessage({\n      id: this.props.Login.change ? \"IDS_COLLAPSE\" : \"IDS_EXPAND\"\n    }), \"                                                                \") : \"\", this.props.isDownloadRequired === true ? /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      href: \"#\",\n      style: {\n        marginRight: \"8px\"\n      } //    data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.downloadData(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 41\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_DOWNLOADFILE\"\n    }), \"                                                                \") : \"\", this.props.isReleaseRequired === false ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-icon-rounded btn-circle solid-blue\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RELEASE\"\n      }),\n      \"data-for\": \"tooltip-grid-wrap\",\n      hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(releaseId) === -1,\n      onClick: () => this.props.releaseRecord({\n        userInfo: this.props.userInfo\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faRocket,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 45\n      }\n    })), this.props.isRefreshRequired === false ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REFRESH\"\n      }),\n      \"data-for\": \"tooltip-grid-wrap\",\n      onClick: () => this.props.reloadData(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSync,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 45\n      }\n    }))) : \"\", this.props.isCheckBoxRequired === true ? /*#__PURE__*/React.createElement(Column, {\n      field: \"selected\" //    width=\"45px\"\n      ,\n      title: this.props.title //    headerSelectionValue={false}\n      ,\n      headerSelectionValue: this.props.dataResult.data && this.props.dataResult.data.length === 0 ? false : this.props.dataResult.data && this.props.dataResult.data.every(data => {\n        return data.selected === true;\n      }) ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 33\n      }\n    }) : \"\", this.props.extractedColumnList.map((item, index) => /*#__PURE__*/React.createElement(Column, {\n      key: index,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      }) //  {...this.columnProps(item.dataField)}\n      ,\n      width: item.width,\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 41\n        }\n      }, item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: row[\"dataItem\"][item.dataField],\n        defaultMessage: row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 49\n        }\n      }) : row[\"dataItem\"][item.dataField]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 33\n      }\n    })), this.props.isActionRequired ? /*#__PURE__*/React.createElement(GridColumn, {\n      locked: true,\n      headerClassName: \"text-center\",\n      title: this.props.intl.formatMessage({\n        id: 'IDS_ACTION'\n      }),\n      sort: false,\n      cell: row => row.rowType === \"groupHeader\" ? null : /*#__PURE__*/React.createElement(\"td\", {\n        className: `k-grid-content-sticky k-command-cell selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''`,\n        style: {\n          left: '0',\n          right: '0',\n          borderRightWidth: '1px',\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Nav.Link, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\" //hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(downloadId) === -1}\n        ,\n        onClick: () => this.props.viewDownloadFile({ ...this.props.masterdata,\n          ...this.props.downloadParam,\n          inputData: { ...row[\"dataItem\"],\n            userinfo: this.props.Login.userInfo\n          },\n          userinfo: this.props.Login.userInfo,\n          ncontrolCode: downloadId\n        }, row),\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_PREVIEW\"\n        }),\n        \"data-place\": \"left\" //  data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCloudDownloadAlt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(regenerateId) === -1,\n        onClick: () => this.props.regnerateFile({ ...this.props.masterdata,\n          ...this.props.downloadParam,\n          inputData: { ...row[\"dataItem\"],\n            userinfo: this.props.Login.userInfo\n          },\n          userinfo: this.props.Login.userInfo,\n          ncontrolCode: downloadId\n        }, row),\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REGENERATEFILE\"\n        }),\n        \"data-place\": \"left\" //  data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faRecycle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 65\n        }\n      }))))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 37\n      }\n    }) : \"\"))));\n  }\n\n  componentDidUpdate() {\n    ReactTooltip.rebuild();\n  }\n\n  downloadData() {\n    let sfileurl = fileViewUrl() + this.props.Login.sfilepath;\n    console.log(sfileurl); //ncoahistorycode, \n\n    let filedata = {\n      ncoahistorycode: this.props.Login.ncoahistorycode,\n      ssystemfilename: this.props.Login.ssystemfilename\n    };\n    this.viewCOAHistoryFile(filedata); //this.handleDownload(sfileurl, this.props.Login.sfilepath)\n    //this.pdfDownload(sfileurl)\n  }\n  /*pdfDownload = (id) => {\r\n      axios({\r\n          url: id,\r\n          method: 'GET',\r\n          responseType: 'blob', // important\r\n        }).then((response) => {\r\n          const url = window.URL.createObjectURL(response.data));\r\n          const link = document.createElement('a');\r\n          link.href = url;\r\n          link.setAttribute('download', 'file.pdf');\r\n          document.body.appendChild(link);\r\n          link.click();\r\n        });\r\n  };*/\n\n  /*\r\n      handleDownload = (url, filename) => {\r\n          Axios.get(url, {\r\n            responseType: 'blob',\r\n          })\r\n          .then((res) => {\r\n            js-file-downloa(res.data, filename)\r\n          })\r\n        }*/\n\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updateStore,\n  viewAttachment\n})(injectIntl(DataGridWithMultipleGrid));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/data-grid/DataGridWithMultipleGrid.jsx"],"names":["React","FormattedMessage","injectIntl","Button","Nav","Image","InputGroup","Grid","GridColumn","Column","GridToolbar","GridColumnMenuFilter","GridNoRecords","getSelectedState","GridPDFExport","ExcelExport","ConfirmDialog","SimpleGrid","Row","Col","Card","FormGroup","FormLabel","AtTableWrap","FormControlStatic","FontIconWrap","FontAwesomeIcon","updateStore","viewAttachment","faCheck","faTrashAlt","faPencilAlt","faThumbsUp","faCopy","faPlus","faSync","faFileExcel","faFilePdf","faCloudDownloadAlt","faRedo","faEye","faRocket","faExpand","faMinus","faRecycle","ColumnMenu","CustomSwitch","parse","toast","FormCheckbox","messages_en","messages_de","loadMessages","LocalizationProvider","connect","process","ReactTooltip","getActionIcon","ConfirmMessage","messages_ru","messages_tg","SimpleGridWithSelection","DEFAULT_RETURN","SingleSelectionDataGrid","fileViewUrl","Axios","messages","DataGridWithMultipleGrid","Component","constructor","props","detailBand","hasChild","needSubSample","foo1","childColumnList","dataState","dataItem","childList","childMappingField","childDataResult","childSelectionChange","childHeaderSelectionChange","childSelectAll","hasSubChild","subChildDataResult","subChildColumnList","childHandleExpandChange","subChildSelectionChange","subChildList","subChildMappingField","subChildHeaderSelectionChange","subChildSelectAll","selectedsubcild","expandChange","event","arrayfalse","change","isExpanded","expanded","undefined","aggregates","value","Object","values","forEach","item","map","item1","push","setState","parentData","dataResult","data","every","expandFunc","allData","viewCOAHistoryFile","filedata","inputParam","inputData","COAHistoryFile","userinfo","userInfo","classUrl","operation","methodUrl","screenName","myRef","createRef","confirmMessage","state","showChild","arr","check","status","count","columnProps","field","hideColumnFilter","columnMenu","headerClassName","isColumnActive","active","filter","expandData","Login","checkFlag","i","x","length","childfalsearray","render","console","log","regenerateId","controlMap","has","get","ncontrolcode","downloadId","releaseId","concat","expandId","collapseId","pageSizes","settings","split","setting","parseInt","actionColWidth","foo","extractedColumnList","height","gridHeight","width","gridWidth","scrollable","pageable","buttonCount","previousNext","groupable","hideDetailBand","expandField","total","handleRowClick","selectionChange","headerSelectionChange","dataStateChange","enabled","drag","cell","mode","intl","formatMessage","id","isToolBarRequired","isExpandRequired","marginRight","isDownloadRequired","downloadData","isReleaseRequired","userRoleControlRights","indexOf","releaseRecord","isRefreshRequired","reloadData","isCheckBoxRequired","title","selected","index","idsName","row","dataField","isIdsField","isActionRequired","rowType","left","right","borderRightWidth","textAlign","viewDownloadFile","masterdata","downloadParam","ncontrolCode","regnerateFile","componentDidUpdate","rebuild","sfileurl","sfilepath","ncoahistorycode","ssystemfilename","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Button, Nav, Image, InputGroup } from 'react-bootstrap';\r\nimport { Grid, GridColumn as Column, GridToolbar, GridColumnMenuFilter, GridNoRecords, getSelectedState, GridColumn } from '@progress/kendo-react-grid';\r\nimport { GridPDFExport } from '@progress/kendo-react-pdf';\r\nimport { ExcelExport } from '@progress/kendo-react-excel-export';\r\nimport ConfirmDialog from '../confirm-alert/confirm-alert.component';\r\nimport SimpleGrid from './SimpleGrid';\r\nimport { Row, Col, Card, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { AtTableWrap, FormControlStatic, FontIconWrap } from '../data-grid/data-grid.styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    updateStore,viewAttachment\r\n} from '../../actions';\r\n\r\nimport {\r\n    faCheck, faTrashAlt, faPencilAlt, faThumbsUp,\r\n    faCopy, faPlus, faSync, faFileExcel, faFilePdf, faCloudDownloadAlt, faRedo, faEye, faRocket, faExpand, faMinus, faRecycle\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport ColumnMenu from './ColumnMenu';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport reject from '../../assets/image/reject.svg'\r\nimport CustomSwitch from '../custom-switch/custom-switch.component';// import '../../assets/styles/unicode-font.css';\r\nimport parse from 'html-react-parser';\r\nimport { toast } from 'react-toastify';\r\nimport FormCheckbox from '../form-checkbox/form-checkbox.component';\r\nimport messages_en from '../../assets/translations/en.json';\r\nimport messages_de from '../../assets/translations/de.json';\r\nimport { loadMessages, LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { getActionIcon } from '../HoverIcons';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport messages_ru from '../../assets/translations/ru.json';\r\nimport messages_tg from '../../assets/translations/tg.json';\r\nimport SimpleGridWithSelection from './SimpleGridWithSelection';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport SingleSelectionDataGrid from './SingleSelectionDataGrid';\r\nimport { fileViewUrl } from '../../rsapi';\r\nimport Axios from 'axios';\r\n\r\nconst messages = {\r\n    'en-US': messages_en,\r\n    'ko-KR': messages_de,\r\n    'ru-RU': messages_ru,\r\n    'tg-TG': messages_tg\r\n}\r\n\r\nclass DataGridWithMultipleGrid extends React.Component {\r\n\r\n    _pdfExport;\r\n    _excelExport;\r\n    constructor(props) {\r\n        super(props);\r\n        this.myRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        // this.state = { status: false }\r\n        this.state = {\r\n            showChild: true,\r\n            arr: [],\r\n            change: false,\r\n            check: false,\r\n            status: false,\r\n            count: 0\r\n        }\r\n\r\n    }\r\n    detailBand = (props) => {\r\n        return (\r\n            <Row bsPrefix=\"margin_class\">\r\n                <Col md={12}>\r\n                    {this.props.hasChild && this.props.needSubSample ?\r\n                        <SimpleGridWithSelection\r\n                            ref={foo1 => this.foo1 = foo1}\r\n                            //handleChange={this.expandData.bind(this)}\r\n                            extractedColumnList={this.props.childColumnList}\r\n                            dataState={this.props.dataState}\r\n                            childList={props.dataItem ? this.props.childList[(props.dataItem[this.props.childMappingField])] || []\r\n                                : this.props.childList[(props[this.props.childMappingField])] || []}\r\n                            childDataResult={this.props.childDataResult}\r\n                            childSelectionChange={this.props.childSelectionChange}\r\n                            headerSelectionChange={this.props.childHeaderSelectionChange}\r\n                            selectAll={this.props.childSelectAll}\r\n                            hasSubChild={this.props.hasSubChild}\r\n                            subChildDataResult={this.props.subChildDataResult && this.props.subChildDataResult || []}\r\n                            subChildColumnList={this.props.subChildColumnList}\r\n                            expandField=\"expanded\"\r\n                            childHandleExpandChange={this.props.childHandleExpandChange}\r\n                            subChildSelectionChange={this.props.subChildSelectionChange}\r\n                            subChildList={this.props.subChildList || []}\r\n                            subChildMappingField={this.props.subChildMappingField}\r\n                            subChildHeaderSelectionChange={this.props.subChildHeaderSelectionChange}\r\n                            subChildSelectAll={this.props.subChildSelectAll}\r\n                            selectedsubcild={this.props.selectedsubcild}\r\n                        />\r\n                        : this.props.hasSubChild?\r\n                        <SingleSelectionDataGrid\r\n                            hasSubChild={this.props.hasSubChild}\r\n                            subChildDataResult={this.props.subChildDataResult && this.props.subChildDataResult || []}\r\n                            subChildColumnList={this.props.subChildColumnList}\r\n                            subChildSelectionChange={this.props.subChildSelectionChange}\r\n                            subChildList={props.dataItem ? this.props.subChildList[(props.dataItem[this.props.subChildMappingField])] || []\r\n                                : this.props.subChildList[(props[this.props.subChildMappingField])] || []}\r\n                            subChildHeaderSelectionChange={this.props.subChildHeaderSelectionChange}\r\n                            subChildSelectAll={this.props.subChildSelectAll}\r\n                            selectedsubcild={this.props.selectedsubcild}\r\n                            subChildMappingField={this.props.subChildMappingField}\r\n                            extractedColumnList={this.props.subChildColumnList}\r\n\r\n\r\n\r\n                        />:\"\"}\r\n                </Col> </Row>\r\n        )\r\n    }\r\n    expandChange = (event) => {\r\n        let arrayfalse = []\r\n        let change = []\r\n\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined ?\r\n                event.dataItem.aggregates : event.dataItem.expanded;\r\n\r\n        if (this.props.hasChild && event.value === true) {\r\n            event.dataItem.expanded = !isExpanded;\r\n\r\n            Object.values(this.props.childList).forEach(item => {\r\n                item.map(item1 => {\r\n                    item1['expanded'] = true\r\n                })\r\n            })\r\n        }\r\n        else {\r\n            event.dataItem.expanded = !isExpanded;\r\n            arrayfalse.push(event.dataItem)\r\n            change = false\r\n            this.setState({ isExpanded, arrayfalse });\r\n        }\r\n        let parentData =\r\n            this.props.dataResult.data ? this.props.dataResult.data.every(item => {\r\n                return item.expanded === true\r\n            }) : this.props.dataResult.every(item => {\r\n                return item.expanded === true\r\n            })\r\n\r\n        if (parentData === true) {\r\n            change = true\r\n        }\r\n        else {\r\n            change = false\r\n        }\r\n        this.props.expandFunc({ change: change });\r\n\r\n\r\n    }\r\n\r\n    columnProps(field) {\r\n        if (!this.props.hideColumnFilter) {\r\n            return {\r\n                field: field,\r\n                columnMenu: ColumnMenu,\r\n                headerClassName: this.isColumnActive(field, this.props.dataState) ? 'active' : ''\r\n            };\r\n        }\r\n    }\r\n\r\n    isColumnActive(field, dataState) {\r\n        return GridColumnMenuFilter.active(field, dataState.filter)\r\n    }\r\n    expandData() {\r\n        let change = []\r\n        if (this.props.Login.checkFlag === undefined || this.props.Login.checkFlag === \"1\"\r\n            //|| this.props.Login.count === 0\r\n        ) {\r\n\r\n            let data = this.props.dataResult.data.every(item => {\r\n                return item.expanded === true\r\n            })\r\n            if (data === false) {\r\n                this.props.dataResult.data.map((item, i) => {\r\n                    if ((item['expanded'] === undefined) || (item['expanded'] !== true)) {\r\n                        item['expanded'] = true\r\n                        if (this.props.childList[(item[this.props.childMappingField])] != undefined) {\r\n                            this.props.childList[(item[this.props.childMappingField])].map((item1, x) => {\r\n                                this.props.childList[(item[this.props.childMappingField])][x]['expanded'] = true\r\n                            })\r\n                        }\r\n                        change = true\r\n                    }\r\n                })\r\n            }\r\n            else {\r\n                if (this.state.arrayfalse && this.state.arrayfalse.length !== 0 && this.props.Login.change === false) {\r\n                    this.state.arrayfalse.map(item => {\r\n                        item['expanded'] = true\r\n\r\n                        change = true\r\n\r\n                    })\r\n                }\r\n                else {\r\n                    this.props.dataResult.data.map((item, i) => {\r\n                        item['expanded'] = false\r\n                        if (this.props.childList[(item[this.props.childMappingField])] != undefined) {\r\n\r\n                            this.props.childList[(item[this.props.childMappingField])].map((item1, x) => {\r\n                                this.props.childList[(item[this.props.childMappingField])][x]['expanded'] = false\r\n                            })\r\n                        }\r\n                        change = false\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.Login.childfalsearray && this.props.Login.childfalsearray !== 0) {\r\n                this.props.Login.childfalsearray.map(item =>\r\n                    item['expanded'] = true\r\n\r\n                )\r\n                change = true\r\n\r\n            }\r\n            if (this.state.arrayfalse && this.state.arrayfalse.length !== 0 && this.props.Login.change === false) {\r\n                this.state.arrayfalse.map(item => {\r\n                    item['expanded'] = true\r\n                    change = true\r\n\r\n                })\r\n            }\r\n        }\r\n        // if (this.props.Login.count === 0) {\r\n        //  change=true        }\r\n        this.props.expandFunc({ change: change })\r\n    }\r\n\r\n    allData = (props) => {\r\n        props.map(item => {\r\n\r\n        })\r\n    }\r\n    render() {\r\n        console.log(\"selectiongrid\", this.props.subChildList)\r\n        console.log(\"selectiongrid1\", this.props)\r\n\r\n\r\n        const methodUrl = this.props.methodUrl ? this.props.methodUrl : (this.props.inputParam && this.props.inputParam.methodUrl);\r\n        const regenerateId = this.props.controlMap && this.props.controlMap.has(\"RegenerateReleaseFile\")\r\n            && this.props.controlMap.get(\"RegenerateReleaseFile\").ncontrolcode;\r\n            const downloadId = this.props.controlMap && this.props.controlMap.has(\"DownloadReleaseFile\")\r\n            && this.props.controlMap.get(\"DownloadReleaseFile\").ncontrolcode;\r\n        const releaseId = this.props.controlMap && this.props.controlMap.has(\"COA\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"COA\".concat(methodUrl)).ncontrolcode;\r\n        const expandId = this.props.controlMap && this.props.controlMap.has(\"ReleaseExpand\")\r\n            && this.props.controlMap.get(\"ReleaseExpand\").ncontrolcode;\r\n        const collapseId = this.props.controlMap && this.props.controlMap.has(\"ReleaseCollapse\")\r\n            && this.props.controlMap.get(\"ReleaseCollapse\").ncontrolcode;\r\n        const pageSizes = this.props.pageSizes ? this.props.pageSizes : this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting))\r\n        return (\r\n            <>\r\n                {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                <AtTableWrap className=\"at-list-table\" actionColWidth={this.props.actionColWidth ? this.props.actionColWidth : \"150px\"} >\r\n                    <LocalizationProvider language=\"lang\">\r\n\r\n                        <Grid ref={foo => this.foo = foo}\r\n                            className={((this.props.dataResult && this.props.dataResult.length > 0) || (this.props.extractedColumnList && this.props.extractedColumnList.length > 0)) ? \"active-paging\" : \"no-paging\"}\r\n                            style={{ height: this.props.gridHeight, width: this.props.gridWidth }}\r\n                            sortable\r\n                            resizable\r\n                            reorderable={false}\r\n                            scrollable={this.props.scrollable}\r\n                            pageable={this.props.pageable ? { buttonCount: 5, pageSizes: pageSizes, previousNext: false } : \"\"}\r\n                            groupable={this.props.groupable ? true : false}\r\n                            detail={this.props.hideDetailBand ? false : this.detailBand}\r\n                            expandField={this.props.expandField}\r\n                            onExpandChange={this.expandChange}\r\n                            data={this.props.dataResult}\r\n                            total={this.props.total}\r\n                            {...this.props.dataState}\r\n                            selectedField=\"selected\"\r\n                            onRowClick={this.props.handleRowClick}\r\n                            onSelectionChange={this.props.selectionChange}\r\n                            onHeaderSelectionChange={this.props.headerSelectionChange}\r\n                            onDataStateChange={this.props.dataStateChange}\r\n                            selectable={{\r\n                                enabled: true,\r\n                                drag: false,\r\n                                cell: false,\r\n                                mode: 'multiple'\r\n                            }}\r\n                        >\r\n                            <GridNoRecords>\r\n                                {this.props.intl.formatMessage({ id: \"IDS_NORECORDSAVAILABLE\" })}\r\n                            </GridNoRecords>\r\n                            {this.props.isToolBarRequired ?\r\n                                <GridToolbar>\r\n                                    {/* {this.props.isExpandRequired === true ?\r\n\r\n                                        <Nav.Link className=\"p-0\" name=\"gridexpand\" onClick={() => this.expandData()}>\r\n                                            {this.props.intl.formatMessage({\r\n                                                id: this.props.Login.change ? \"IDS_COLLAPSE\" : \"IDS_EXPAND\"\r\n\r\n                                            })}\r\n                                        </Nav.Link>\r\n\r\n                                        : \"\"} */}\r\n                                    {this.props.isExpandRequired === true ?\r\n                                        <button className=\"btn btn-primary btn-padd-custom\" href=\"#\" style={{marginRight:\"8px\"}}\r\n                                            //    data-for=\"tooltip_list_wrap\"\r\n                                            onClick={() => this.expandData()} >\r\n\r\n                                            {this.props.intl.formatMessage({\r\n                                                id: this.props.Login.change ? \"IDS_COLLAPSE\" : \"IDS_EXPAND\"\r\n\r\n                                            })}                                                                </button>\r\n                                        : \"\"}\r\n                                         {this.props.isDownloadRequired === true ?\r\n                                        <button className=\"btn btn-primary btn-padd-custom\" href=\"#\" style={{marginRight:\"8px\"}}\r\n                                            //    data-for=\"tooltip_list_wrap\"\r\n                                            onClick={() => this.downloadData()} >\r\n\r\n                                            {/*this.props.intl.formatMessage({\r\n                                                id: this.props.Login.change ? \"IDS_COLLAPSE\" : \"IDS_EXPAND\"\r\n\r\n                                            })*/}\r\n                                            {this.props.intl.formatMessage({\r\n                                                id: \"IDS_DOWNLOADFILE\"\r\n\r\n                                            })}                                                                </button>\r\n                                        : \"\"}\r\n                                    {this.props.isReleaseRequired === false ? \"\" :\r\n                                        <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" variant=\"link\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_RELEASE\" })}\r\n                                            data-for=\"tooltip-grid-wrap\"\r\n                                            hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(releaseId) === -1}\r\n                                            onClick={() => this.props.releaseRecord({userInfo:this.props.userInfo})}>\r\n                                            <FontAwesomeIcon icon={faRocket} />\r\n                                        </Button>\r\n                                    }\r\n                                    {this.props.isRefreshRequired === false ? \"\" :\r\n                                        <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}\r\n                                            data-for=\"tooltip-grid-wrap\"\r\n                                            onClick={() => this.props.reloadData()}>\r\n                                            <FontAwesomeIcon icon={faSync} />\r\n                                        </Button>\r\n                                    }\r\n                                </GridToolbar>\r\n                                : \"\"}\r\n                            {this.props.isCheckBoxRequired === true ?  \r\n                                <Column\r\n\r\n                                    field=\"selected\"\r\n                                    //    width=\"45px\"\r\n                                    title={this.props.title}\r\n                                    //    headerSelectionValue={false}\r\n                                    headerSelectionValue={this.props.dataResult.data && this.props.dataResult.data.length === 0 ? false : this.props.dataResult.data && this.props.dataResult.data.every((data) => {\r\n                                        return data.selected === true\r\n                                    }) ? true : false} />\r\n                                :\"\"\r\n                            \r\n                            }\r\n\r\n                            {this.props.extractedColumnList.map((item, index) =>\r\n                                <Column key={index}\r\n                                    title={this.props.intl.formatMessage({ id: item.idsName })}\r\n                                    //  {...this.columnProps(item.dataField)}\r\n                                    width={item.width}\r\n                                    cell={(row) => (\r\n                                        <td data-tip={row[\"dataItem\"][item.dataField]}>\r\n                                            {item.isIdsField ?\r\n                                                <FormattedMessage id={row[\"dataItem\"][item.dataField]} defaultMessage={row[\"dataItem\"][item.dataField]} />\r\n                                                : row[\"dataItem\"][item.dataField]}\r\n                                        </td>\r\n                                    )} />\r\n                            )}\r\n\r\n                                {this.props.isActionRequired ?\r\n                                    <GridColumn\r\n                                        locked\r\n                                        headerClassName=\"text-center\"\r\n                                        title={this.props.intl.formatMessage({ id: 'IDS_ACTION' })}\r\n                                        sort={false}\r\n                                        cell={(row) => (\r\n\r\n                                            row.rowType === \"groupHeader\" ? null :\r\n                                                <td className={`k-grid-content-sticky k-command-cell selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''`} style={{ left: '0', right: '0', borderRightWidth: '1px', textAlign: 'center' }}>\r\n                                                    <>\r\n                                                        <Nav.Link> \r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\"\r\n                                                                //hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(downloadId) === -1}\r\n                                                                onClick={() => this.props.viewDownloadFile({ ...this.props.masterdata, ...this.props.downloadParam, inputData: { ...row[\"dataItem\"], userinfo: this.props.Login.userInfo }, userinfo: this.props.Login.userInfo, ncontrolCode: downloadId }, row)}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_PREVIEW\" })} data-place=\"left\"\r\n                                                              //  data-for=\"tooltip-grid-wrap\"\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faCloudDownloadAlt}  \r\n                                                                />\r\n                                                            </FontIconWrap>   \r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\"\r\n                                                               hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(regenerateId) === -1}\r\n                                                                onClick={() => this.props.regnerateFile({ ...this.props.masterdata, ...this.props.downloadParam, inputData: { ...row[\"dataItem\"], userinfo: this.props.Login.userInfo }, userinfo: this.props.Login.userInfo, ncontrolCode: downloadId }, row)}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REGENERATEFILE\" })} data-place=\"left\"\r\n                                                              //  data-for=\"tooltip-grid-wrap\"\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faRecycle}  \r\n                                                                />\r\n                                                            </FontIconWrap>     \r\n                                                        </Nav.Link>\r\n                                                    </>\r\n\r\n                                                </td>\r\n                                        )}\r\n                                    /> : \"\"}\r\n                        </Grid>\r\n                    </LocalizationProvider >\r\n\r\n                </AtTableWrap >\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        ReactTooltip.rebuild();\r\n    }\r\n    downloadData(){\r\n        let sfileurl = fileViewUrl() + this.props.Login.sfilepath;\r\n        console.log(sfileurl);\r\n        //ncoahistorycode, \r\n        let filedata = {\r\n            ncoahistorycode : this.props.Login.ncoahistorycode,\r\n            ssystemfilename : this.props.Login.ssystemfilename\r\n        }\r\n        this.viewCOAHistoryFile(filedata);\r\n        //this.handleDownload(sfileurl, this.props.Login.sfilepath)\r\n        //this.pdfDownload(sfileurl)\r\n    }\r\n    viewCOAHistoryFile = (filedata) => {\r\n        const inputParam = {\r\n            inputData: {\r\n                COAHistoryFile: filedata,\r\n                userinfo: this.props.userInfo\r\n            },\r\n            classUrl: \"coarelease\",\r\n            operation: \"view\",\r\n            methodUrl: \"AttachedCOAHistoryFile\",\r\n            screenName: \"IDS_TEST\"\r\n        }\r\n        this.props.viewAttachment(inputParam);\r\n    }\r\n    /*pdfDownload = (id) => {\r\n        axios({\r\n            url: id,\r\n            method: 'GET',\r\n            responseType: 'blob', // important\r\n          }).then((response) => {\r\n            const url = window.URL.createObjectURL(response.data));\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.setAttribute('download', 'file.pdf');\r\n            document.body.appendChild(link);\r\n            link.click();\r\n          });\r\n    };*/\r\n/*\r\n    handleDownload = (url, filename) => {\r\n        Axios.get(url, {\r\n          responseType: 'blob',\r\n        })\r\n        .then((res) => {\r\n          js-file-downloa(res.data, filename)\r\n        })\r\n      }*/\r\n}\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, { updateStore,viewAttachment })(injectIntl(DataGridWithMultipleGrid));"]},"metadata":{},"sourceType":"module"}