{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicmaster\\\\DynamicMaster.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DynamicDataGrid from '../../components/data-grid/data-grid.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../../pages/audittrail/Esign';\nimport { callService, crudMaster, updateStore, validateEsignCredential, getEditDynamicMasterCombo, //fetchRecord,\ngetDynamicMasterCombo, getChildValues, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte, getChildComboMaster, getChildValuesForAddMaster } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, deleteAttachmentDropZone, getSameRecordFromTwoArrays, onDropAttachFileList, convertDateTimetoString, validateEmail, formatDate, sortData, ageCalculate, formatInputDate, extractFieldHeader, childComboClear } from '../../components/CommonScript';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout.jsx';\nimport { designComponents, transactionStatus } from '../../components/Enumeration';\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\nimport AddMasterRecords from '../dynamicpreregdesign/AddMasterRecords';\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass DynamicMaster extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data || [], event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.removeIndex = (data, removeIndex) => {\n      const data1 = [...data.splice(0, removeIndex), ...data.splice(removeIndex + 1)];\n      return data1;\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedMaster = this.props.Login.selectedMaster;\n      let selectedControl = this.props.Login.selectedControl;\n      let masterextractedColumnList = this.props.Login.masterextractedColumnList;\n      let masterfieldList = this.props.Login.masterfieldList;\n      let masterdataList = this.props.Login.masterfieldList;\n      let mastercomboComponents = this.props.Login.masterfieldList;\n      let masterwithoutCombocomponent = this.props.Login.masterfieldList;\n      let masterComboColumnFiled = this.props.Login.masterComboColumnFiled;\n      let masterDesign = this.props.Login.masterDesign;\n      let addMaster = this.props.Login.addMaster;\n      let masterIndex = this.props.Login.masterIndex;\n      let screenName = this.props.Login.screenName;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else if (this.props.Login.addMaster) {\n        if (masterIndex !== 0) {\n          screenName = selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode];\n          selectedMaster = this.removeIndex(selectedMaster, masterIndex);\n          selectedControl = this.removeIndex(selectedControl, masterIndex);\n          masterextractedColumnList = masterextractedColumnList && this.removeIndex(masterextractedColumnList, masterIndex);\n          masterfieldList = masterfieldList && this.removeIndex(masterfieldList, masterIndex);\n          masterdataList = masterdataList && this.removeIndex(masterdataList, masterIndex);\n          mastercomboComponents = mastercomboComponents && this.removeIndex(mastercomboComponents, masterIndex);\n          masterComboColumnFiled = masterComboColumnFiled && this.removeIndex(masterComboColumnFiled, masterIndex);\n          masterwithoutCombocomponent = masterwithoutCombocomponent && this.removeIndex(masterwithoutCombocomponent, masterIndex);\n          masterDesign = masterDesign && this.removeIndex(masterDesign, masterIndex);\n          masterIndex = masterIndex - 1; //  masterprimaryKeyField = \"\"\n          //addMaster = false\n        } else {\n          selectedMaster = [];\n          selectedControl = [];\n          masterextractedColumnList = [];\n          masterfieldList = [];\n          addMaster = false;\n          masterdataList = [];\n          mastercomboComponents = [];\n          masterwithoutCombocomponent = [];\n          masterComboColumnFiled = [];\n          masterDesign = [];\n          masterIndex = undefined;\n          screenName = this.props.Login.inputParam.displayName;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedMaster = [];\n        selectedControl = [];\n        masterextractedColumnList = [];\n        masterfieldList = [];\n        addMaster = false;\n        masterdataList = [];\n        mastercomboComponents = [];\n        masterwithoutCombocomponent = [];\n        masterComboColumnFiled = [];\n        masterDesign = [];\n        masterIndex = undefined;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null,\n          selectedMaster,\n          selectedControl,\n          masterextractedColumnList,\n          masterfieldList,\n          addMaster,\n          masterIndex,\n          masterdataList,\n          mastercomboComponents,\n          masterwithoutCombocomponent,\n          masterComboColumnFiled,\n          masterDesign,\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChangeMasterDyanmic = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {}; //if (comboData) {\n\n      comboData[\"item\"] = { ...comboData[\"item\"],\n        \"pkey\": control.valuemember,\n        \"nquerybuildertablecode\": control.nquerybuildertablecode,\n        \"source\": control.source\n      };\n      selectedMaster[masterIndex][comboName] = comboData; // console.log(\"selected:\", selectedMaster, comboData, control, customName);\n\n      if (control.child && control.child.length > 0) {\n        const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\");\n        let childColumnList = {};\n        childComboList.map(columnList => {\n          const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\");\n\n        if (comboData) {\n          const inputParem = {\n            child: control.child,\n            source: control.source,\n            primarykeyField: control.valuemember,\n            value: comboData.value,\n            item: comboData.item\n          };\n          this.props.getChildValuesForAddMaster(inputParem, this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList, childComboList, childColumnList, this.props.Login.masterwithoutCombocomponent, [...childComboList, ...parentList], masterIndex);\n        } else {\n          let comboData = this.props.Login.masterdataList;\n          const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n          const inputParam = {\n            control,\n            comboComponents: this.props.Login.mastercomboComponents[masterIndex],\n            withoutCombocomponent: withoutCombocomponent[masterIndex],\n            selectedMaster: selectedMaster[masterIndex],\n            comboData: comboData[masterIndex]\n          };\n          const childParam = childComboClear(inputParam);\n          selectedMaster[masterIndex] = childParam.selectedRecord;\n          comboData[masterIndex] = childParam.comboData;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedMaster,\n              mastedataList: comboData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChangeMasterDynamic = (event, radiotext) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'toggle') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'numeric') {\n        if (/\\D/.test(event.target.value)) selectedMaster[masterIndex][event.target.name] = event.target.value;\n      } else if (event.target.type === 'checkbox') {\n        const value = selectedMaster[masterIndex][event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedMaster[masterIndex][event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedMaster[masterIndex][event.target.name] = radiotext;\n      } else {\n        selectedMaster[masterIndex][event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.handleDateChangeMasterDynamic = (dateValue, dateName) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputChangeMasterDynamic = (value, name) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericBlurMasterDynamic = (value, control) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (selectedMaster[masterIndex][control.label]) {\n        if (control.max) {\n          if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onComboChangeMaster = (comboData, fieldName, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (comboData !== null) {\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\n          selectedMaster[masterIndex][item.tableDataField] = comboData.value;\n        } else if (item.foreignDataField) {\n          selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\n        }\n      }\n\n      selectedMaster[masterIndex][fieldName] = comboData;\n\n      if (item.childIndex !== undefined) {\n        this.props.getChildComboMaster(selectedMaster, fieldName, item, this.props.Login.selectedControl, this.props.Login.masterfieldList, this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex);\n      } else {\n        this.setState({\n          selectedMaster\n        });\n      }\n    };\n\n    this.handleDateChangeMaster = (dateName, dateValue, item) => {\n      //   const { selectedMaster } = this.state;\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      const age = ageCalculate(dateValue);\n      selectedMaster[masterIndex][\"sage\"] = age;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputOnChangeMaster = (value, name, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onInputOnChangeMaster = event => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\n\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\n          if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\n            selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\n            selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\n            selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\n            selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\n            selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\n            selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\n            selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\n          } else {\n            selectedMaster[masterIndex].sflatnotemp = \"\";\n            selectedMaster[masterIndex].shousenotemp = \"\";\n            selectedMaster[masterIndex].spostalcodetemp = \"\";\n            selectedMaster[masterIndex].sstreettemp = \"\";\n            selectedMaster[masterIndex].scitynametemp = \"\";\n            selectedMaster[masterIndex].sdistrictnametemp = \"\";\n            selectedMaster[masterIndex].sregionnametemp = \"\";\n          }\n        }\n      } else {\n        selectedMaster[masterIndex][event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onSaveMasterRecord = (saveType, formRef) => {\n      //add / edit            \n      const masterIndex = this.props.Login.masterIndex;\n      let inputData = [];\n      const selectedControl = this.props.Login.selectedControl;\n      const masterDesign = this.props.Login.masterDesign;\n      inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n        nformcode: selectedControl[masterIndex].table.item.nformcode\n      };\n      inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = {\n        \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n      };\n      const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase();\n\n      if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\n        const selectedMaster = this.state.selectedMaster;\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n          nformcode: selectedControl[masterIndex].table.item.nformcode\n        };\n        inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\n        inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\n        inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique; //add                          \n\n        inputData[\"dynamicmaster\"] = {\n          nformcode: selectedControl[masterIndex].table.item.nformcode,\n          ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\n          jsondata: {},\n          jsonuidata: {}\n        };\n        const dateList = [];\n        const defaulttimezone = this.props.Login.defaulttimezone;\n        masterDesign[masterIndex] && masterDesign[masterIndex].slideoutdesign.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ? {\n                      value: selectedMaster[masterIndex][componentrow.label].value,\n                      label: selectedMaster[masterIndex][componentrow.label].label,\n                      pkey: selectedMaster[masterIndex][componentrow.label].item.pkey,\n                      nquerybuildertablecode: selectedMaster[masterIndex][componentrow.label].item.nquerybuildertablecode,\n                      source: selectedMaster[masterIndex][componentrow.label].item.source\n                    } : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\";\n                  } else if (componentrow.inputtype === \"date\") {\n                    if (componentrow.mandatory) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false);\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    } else {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) : selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false) : \"\";\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    }\n\n                    if (componentrow.timezone) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ? {\n                        value: selectedMaster[masterIndex][`tz${componentrow.label}`].value,\n                        label: selectedMaster[masterIndex][`tz${componentrow.label}`].label\n                      } : defaulttimezone ? defaulttimezone : -1;\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`];\n                    }\n\n                    dateList.push(componentrow.label);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label] : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\n                  }\n\n                  return inputData[\"dynamicmaster\"];\n                });\n              } else {\n                if (component.inputtype === \"combo\") {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? {\n                    value: selectedMaster[masterIndex][component.label].value,\n                    label: selectedMaster[masterIndex][component.label].label,\n                    pkey: selectedMaster[masterIndex][component.label].item.pkey,\n                    nquerybuildertablecode: selectedMaster[masterIndex][component.label].item.nquerybuildertablecode,\n                    source: selectedMaster[masterIndex][component.label].item.source\n                  } : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label; //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\n                } else if (component.inputtype === \"date\") {\n                  if (component.mandatory) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false); // convertDateTimetoString(selectedRecord[component.label] ?\n                    // selectedRecord[component.label] : new Date(), userInfo);\n\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ? //convertDateTimetoString(selectedRecord[component.label] ?                                      \n                    //    selectedRecord[component.label] : new Date(), userInfo) :\n                    formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) : selectedMaster[masterIndex][component.label] ? // convertDateTimetoString(selectedRecord[component.label] ?\n                    //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\n                    formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo)\n                  }\n\n                  if (component.timezone) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ? {\n                      value: selectedMaster[masterIndex][`tz${component.label}`].value,\n                      label: selectedMaster[masterIndex][`tz${component.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`];\n                  }\n\n                  dateList.push(component.label);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? selectedMaster[masterIndex][component.label] : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label];\n                }\n              }\n\n              return inputData[\"dynamicmaster\"];\n            });\n            return inputData[\"dynamicmaster\"];\n          });\n          return inputData[\"dynamicmaster\"];\n        });\n        inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\n        inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\n        inputData[\"masterdatelist\"] = dateList;\n      } else if (selectedControl[masterIndex].table.item.component === 'Type3Component' && selectedControl[masterIndex].table.item.nformcode === 137) {\n        inputData[\"noneedfilter\"] = true;\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } else {\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } // }\n\n\n      const inputParam = {\n        userinfo: this.props.Login.userInfo,\n        withoutCombocomponent: this.state.withoutCombocomponent,\n        comboComponents: this.state.comboComponents,\n        selectedRecord: this.state.selectedRecord,\n        selectedRecordName: 'selectedRecord',\n        loadSubSample: false,\n        selectedControl: this.props.Login.selectedControl,\n        comboData: this.props.Login.comboData,\n        comboName: 'comboData',\n        classUrl: selectedControl[masterIndex].table.item.classUrl,\n        methodUrl: selectedControl[masterIndex].table.item.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        // selectedControl[masterIndex].table.item.sdisplayname,\n        screenName: masterIndex !== 0 ? selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode] : this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: \"create\",\n        saveType,\n        formRef,\n        masterIndex,\n        selectedMaster: this.state.selectedMaster,\n        mastercomboComponents: this.props.Login.mastercomboComponents,\n        masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\n        masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\n        masterextractedColumnList: this.props.Login.masterextractedColumnList,\n        masterdataList: this.props.Login.masterdataList,\n        masterDesign: this.props.Login.masterDesign,\n        masterfieldList: this.props.Login.masterfieldList\n      };\n      this.props.addMasterRecord(inputParam, this.props.Login.masterData);\n    };\n\n    this.addMasterRecord = control => {\n      let masterIndex = this.props.Login.masterIndex;\n\n      if (masterIndex !== undefined) {\n        masterIndex = masterIndex + 1;\n      } else {\n        masterIndex = 0;\n      }\n\n      let selectedControl = this.props.Login.selectedControl || [];\n      let selectedMaster = this.state.selectedMaster || [];\n      selectedMaster[masterIndex] = {};\n      selectedControl[masterIndex] = control;\n      let fieldList = this.props.Login.masterfieldList || [];\n      fieldList[masterIndex] = [];\n      let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || [];\n      masterComboColumnFiled[masterIndex] = [];\n      let extractedColumnList = this.props.Login.masterextractedColumnList || [];\n      extractedColumnList[masterIndex] = [];\n      let masterdataList = this.props.Login.masterdataList || [];\n      let masterDesign = this.props.Login.masterDesign || [];\n      let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n      let mastercomboComponents = this.props.Login.mastercomboComponents || [];\n      masterdataList[masterIndex] = [];\n      masterDesign[masterIndex] = [];\n      masterwithoutCombocomponent[masterIndex] = [];\n      mastercomboComponents[masterIndex] = [];\n\n      if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\n        if (control.table.item.component === 'Type2Component') {\n          fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\n        } else {\n          fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\n        }\n\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedControl,\n            addMaster: true,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            selectedMaster,\n            screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else if (control.table.item.component === 'Type3Component') {\n        fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item => item.ndesigncomponentcode === designComponents.COMBOBOX);\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterprimaryKeyField: primaryKeyField,\n          masterComboColumnFiled: masterComboColumnFiled,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          selectedMaster,\n          screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n        };\n        this.props.getAddMasterCombo(inputParam);\n      } else if (control.table.item.component === 'Dynamic') {\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterComboColumnFiled,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterComboColumnFiled,\n          selectedMaster\n        };\n        this.props.getDynamicMasterTempalte(inputParam);\n      } // this.props.getMasterRecord(control);\n\n    };\n\n    this.openModal = () => {\n      const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\") && this.state.controlMap.get(\"Add\").ncontrolcode;\n      this.props.getDynamicMasterCombo(this.props.Login.masterData, this.props.Login.userInfo, addId, this.state.designData, this.state.selectedRecord, this.state.childColumnList, this.state.comboComponents, this.state.withoutCombocomponent, false, true, new Map(), true, \"create\", this.props.Login.displayName);\n    };\n\n    this.fetchRecord = fetchRecordParam => {\n      this.props.getEditDynamicMasterCombo(fetchRecordParam, this.state.designData, this.state.selectedRecord, this.state.childColumnList, this.state.comboComponents, this.state.withoutCombocomponent);\n    };\n\n    this.onNumericBlur = (value, control) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[control.label]) {\n        if (control.max) {\n          if (!(selectedRecord[control.label] < parseFloat(control.max))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedRecord[control.label] > parseFloat(control.min))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.comboChild = (data, columnList, childColumnList, slice) => {\n      let retunObj = {}; // if (data.findIndex(x => x.label === columnList.label) !== -1) {\n\n      if (!childColumnList.hasOwnProperty(columnList.label)) {\n        if (childColumnList[columnList.label] === undefined) {\n          if (columnList.hasOwnProperty(\"child\")) {\n            let childList = [];\n            columnList.child.map(childData => {\n              const index = data.findIndex(x => x.label === childData.label);\n\n              if (index !== -1) {\n                childList.push(data[index]);\n\n                if (slice) {\n                  data = [...data.slice(0, index), ...data.slice(index + 1)];\n                }\n              }\n            });\n            childColumnList[columnList.label] = childList;\n\n            if (childList.length > 0) {\n              childList.map(y => {\n                if (y.hasOwnProperty(\"child\")) {\n                  const val = this.comboChild(data, y, childColumnList, slice);\n                  retunObj[\"data\"] = val.data;\n                  retunObj[\"childColumnList\"] = val.childColumnList;\n                } else {\n                  retunObj[\"data\"] = data;\n                  retunObj[\"childColumnList\"] = childColumnList;\n                }\n              });\n            } else {\n              retunObj[\"data\"] = data;\n              retunObj[\"childColumnList\"] = childColumnList;\n            }\n          } else {\n            retunObj[\"data\"] = data;\n            retunObj[\"childColumnList\"] = childColumnList;\n          }\n        } else {\n          retunObj[\"data\"] = data;\n          retunObj[\"childColumnList\"] = childColumnList;\n        }\n      } else {\n        retunObj[\"data\"] = data;\n        retunObj[\"childColumnList\"] = childColumnList;\n      }\n\n      return retunObj;\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData) {\n        comboData[\"item\"] = { ...comboData[\"item\"],\n          \"pkey\": control.valuemember,\n          \"nquerybuildertablecode\": control.nquerybuildertablecode,\n          \"source\": control.source\n        };\n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      if (control.child && control.child.length > 0) {\n        const childComboList = getSameRecordFromTwoArrays(this.state.comboComponents, control.child, \"label\");\n        let childColumnList = {};\n        childComboList.map(columnList => {\n          const val = this.comboChild(this.state.comboComponents, columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        const parentList = getSameRecordFromTwoArrays(this.state.withoutCombocomponent, control.child, \"label\");\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData.value,\n          item: comboData.item\n        };\n        this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.state.withoutCombocomponent, [...childComboList, ...parentList]);\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onDrop = (value, type, oldVlaue) => {\n      const design = this.state.design;\n      let columns = design[0].children;\n      let designData = this.props.Login.ReactInputFields;\n      value = JSON.parse(value.fields);\n      value = { ...value,\n        type: \"component\"\n      };\n      let designDataIndex = designData.findIndex(item => item.label === value.label);\n      let firstIndex = columns[0] ? columns[0].children.findIndex(item => item.label === value.label) : -1;\n      let secondIndex = columns[1] ? columns[1].children.findIndex(item => item.label === value.label) : -1;\n      if (designDataIndex >= 0) designData.splice(designDataIndex, 1);\n\n      if (firstIndex >= 0) {\n        if (type !== 1) {\n          columns[0].children.splice(firstIndex, 1); // columns[0].splice(to, 0, columns[0].splice(from, 1)[0]);\n        } else {\n          if (oldVlaue) {\n            oldVlaue = JSON.parse(oldVlaue);\n            let from = columns[0].children.findIndex(item => item.label === value.label);\n            let to = columns[0].children.findIndex(item => item.label === oldVlaue.label);\n            columns[0].children.splice(to, 0, columns[0].children.splice(from, 1)[0]);\n          }\n        }\n      } else if (type === 1) {\n        if (columns[0]) {\n          columns[0].children.push(value);\n        } else {\n          columns[0] = {\n            id: \"1\",\n            type: \"column\",\n            children: []\n          };\n          columns[0].children.push(value);\n        }\n      }\n\n      if (secondIndex >= 0) {\n        if (type !== 2) {\n          columns[1].splice(secondIndex, 1);\n        } else {\n          if (oldVlaue) {\n            oldVlaue = JSON.parse(oldVlaue);\n            let from = columns[1].children.findIndex(item => item.label === value.label);\n            let to = columns[1].children.findIndex(item => item.label === oldVlaue.label);\n            columns[1].children.splice(to, 0, columns[1].children.splice(from, 1)[0]);\n          }\n        }\n      } else if (type === 2) {\n        if (columns[1]) {\n          columns[1].children.push(value);\n        } else {\n          columns[1] = {\n            id: \"2\",\n            type: \"column\",\n            children: []\n          };\n          columns[1].children.push(value);\n        }\n      } // design.push(columns)\n\n\n      this.setState({\n        designData,\n        design\n      });\n    };\n\n    this.onDropFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.onInputOnChange = (event, value) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'toggle') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'numeric') {\n        if (/\\D/.test(event.target.value)) selectedRecord[event.target.name] = event.target.value;\n      } else if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = value;\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: \"dynamicmaster\",\n        methodUrl: \"DynamicMaster\",\n        displayName: this.props.Login.displayName,\n        inputData: {\n          [\"dynamicmaster\"]: {\n            \"ndynamicmastercode\": deleteParam.selectedRecord.ndynamicmastercode\n          },\n          //.dataItem,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: \"delete\",\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.displayName,\n            operation: \"delete\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit  \n      let inputData = [];\n      let dataState = undefined;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"masterdateconstraints\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdateconstraints;\n      inputData[\"masterdatefields\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdatefields;\n      inputData[\"mastercombinationunique\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.mastercombinationunique;\n      let selectedId = null;\n      let operation = \"\";\n      let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        dataState = this.state.dataState;\n        inputData[\"dynamicmaster\"] = {\n          ndynamicmastercode: this.state.selectedRecord[\"ndynamicmastercode\"]\n        }; //this.state.selectedRecord;\n\n        inputData[\"dynamicmaster\"][\"jsondata\"] = {};\n        inputData[\"dynamicmaster\"][\"jsonuidata\"] = {};\n        selectedId = this.props.Login.selectedId;\n        operation = \"update\";\n      } else {\n        //add                          \n        inputData[\"dynamicmaster\"] = {\n          //\"nsitecode\": this.props.Login.userInfo.nmastersitecode, \n          nformcode: this.props.Login.userInfo.nformcode,\n          ndesigntemplatemappingcode: this.props.Login.masterData.DynamicMasterDesign.ndesigntemplatemappingcode,\n          jsondata: {},\n          jsonuidata: {}\n        };\n        operation = \"create\";\n      }\n\n      const dateList = [];\n      const defaulttimezone = this.props.Login.defaulttimezone;\n      const userInfo = this.props.Login.userInfo;\n      this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.slideoutdesign.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ? {\n                    value: selectedRecord[componentrow.label].value,\n                    label: selectedRecord[componentrow.label].label,\n                    pkey: selectedRecord[componentrow.label].item.pkey,\n                    nquerybuildertablecode: selectedRecord[componentrow.label].item.nquerybuildertablecode,\n                    source: selectedRecord[componentrow.label].item.source\n                  } : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label].label : \"\";\n                } else if (componentrow.inputtype === \"date\") {\n                  if (componentrow.mandatory) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedRecord[componentrow.label], false);\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? formatDate(selectedRecord[componentrow.label] || new Date(), false) : selectedRecord[componentrow.label] ? formatDate(selectedRecord[componentrow.label], false) : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                  }\n\n                  if (componentrow.timezone) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ? {\n                      value: selectedRecord[`tz${componentrow.label}`].value,\n                      label: selectedRecord[`tz${componentrow.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`];\n                  }\n\n                  dateList.push(componentrow.label);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\n                }\n\n                return inputData[\"dynamicmaster\"];\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedRecord[component.label] ? {\n                  value: selectedRecord[component.label].value,\n                  label: selectedRecord[component.label].label,\n                  pkey: selectedRecord[component.label].item.pkey,\n                  nquerybuildertablecode: selectedRecord[component.label].item.nquerybuildertablecode,\n                  source: selectedRecord[component.label].item.source\n                } : -1;\n                inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label; //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\n              } else if (component.inputtype === \"date\") {\n                if (component.mandatory) {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedRecord[component.label], false); // convertDateTimetoString(selectedRecord[component.label] ?\n                  // selectedRecord[component.label] : new Date(), userInfo);\n\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ? //convertDateTimetoString(selectedRecord[component.label] ?                                      \n                  //    selectedRecord[component.label] : new Date(), userInfo) :\n                  formatDate(selectedRecord[component.label] || new Date(), false) : selectedRecord[component.label] ? // convertDateTimetoString(selectedRecord[component.label] ?\n                  //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\n                  formatDate(selectedRecord[component.label], false) : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo)\n                }\n\n                if (component.timezone) {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ? {\n                    value: selectedRecord[`tz${component.label}`].value,\n                    label: selectedRecord[`tz${component.label}`].label\n                  } : defaulttimezone ? defaulttimezone : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`];\n                }\n\n                dateList.push(component.label);\n              } else {\n                inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedRecord[component.label] ? selectedRecord[component.label] : \"\";\n                inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label];\n              }\n            }\n\n            return inputData[\"dynamicmaster\"];\n          });\n          return inputData[\"dynamicmaster\"];\n        });\n        return inputData[\"dynamicmaster\"];\n      });\n      inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\n      inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\n      inputData[\"masterdatelist\"] = dateList;\n      const inputParam = {\n        classUrl: \"dynamicmaster\",\n        methodUrl: \"DynamicMaster\",\n        displayName: this.props.Login.displayName,\n        inputData: inputData,\n        operation: operation,\n        saveType,\n        formRef,\n        selectedId,\n        dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.displayName,\n            operation: \"create\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.detailedColumnList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      comboComponents: [],\n      withoutCombocomponent: [],\n      selectedMaster: []\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"ndynamicmastercode\";\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\") && this.state.controlMap.get(\"Edit\").ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      operation: \"update\",\n      primaryKeyField,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    }; // const mandatoryFields=[];\n    // this.extractedColumnList.forEach(item=>item.mandatory === true ? \n    //     mandatoryFields.push(item) :\"\"\n    // );   \n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 21\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DynamicDataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      detailedFieldList: this.detailedColumnList,\n      expandField: this.detailedColumnList.length > 0 ? \"expanded\" : false,\n      methodUrl: \"\",\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.fetchRecord,\n      editParam: editParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: deleteParam,\n      reloadData: this.reloadData,\n      addRecord: this.openModal,\n      pageable: true,\n      scrollable: 'scrollable',\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 29\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation ? this.props.Login.operation : \"create\",\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.props.Login.addMaster ? this.onSaveMasterRecord : this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.props.Login.addMaster ? this.state.selectedMaster[this.props.Login.masterIndex] : this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.addMaster ? this.props.Login.masterextractedColumnList[this.props.Login.masterIndex].filter(x => x.mandatory === true) : this.state.mandatoryFields || [],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 25\n        }\n      }) : this.props.Login.addMaster ? /*#__PURE__*/React.createElement(AddMasterRecords, {\n        selectedControl: this.props.Login.selectedControl[this.props.Login.masterIndex],\n        fieldList: this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex],\n        extractedColumnList: this.props.Login.masterextractedColumnList[this.props.Login.masterIndex] // primaryKeyField={this.props.Login.masterprimaryKeyField}\n        ,\n        selectedRecord: this.state.selectedMaster[this.props.Login.masterIndex] || {},\n        onInputOnChange: this.onInputOnChangeMaster,\n        onComboChange: this.onComboChangeMaster,\n        handleDateChange: this.handleDateChangeMaster,\n        dataList: this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex],\n        onNumericInputOnChange: this.onNumericInputOnChangeMaster,\n        masterDesign: this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex],\n        mastertimeZoneList: this.props.Login.mastertimeZoneList,\n        masterdefaultTimeZone: this.props.Login.masterdefaultTimeZone,\n        onComboChangeMasterDyanmic: this.onComboChangeMasterDyanmic,\n        handleDateChangeMasterDynamic: this.handleDateChangeMasterDynamic,\n        onInputOnChangeMasterDynamic: this.onInputOnChangeMasterDynamic,\n        onNumericInputChangeMasterDynamic: this.onNumericInputChangeMasterDynamic,\n        onNumericBlurMasterDynamic: this.onNumericBlurMasterDynamic,\n        userInfo: this.props.Login.userInfo,\n        Login: this.props.Login,\n        addMasterRecord: this.addMasterRecord,\n        userRoleControlRights: this.props.Login.userRoleControlRights,\n        masterIndex: this.props.Login.masterIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(DynamicSlideout, {\n        selectedRecord: this.props.Login.selectedRecord,\n        templateData: this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.slideoutdesign // handleChange={this.handleChange}\n        ,\n        handleDateChange: this.handleDateChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        comboData: this.props.Login.comboData,\n        onComboChange: this.onComboChange,\n        onDropFile: this.onDropFile,\n        deleteAttachment: this.deleteAttachment,\n        onNumericBlur: this.onNumericBlur,\n        userInfo: this.props.Login.userInfo,\n        timeZoneList: this.props.Login.timeZoneList,\n        defaultTimeZone: this.props.Login.defaultTimeZone,\n        Login: this.props.Login,\n        addMasterRecord: this.addMasterRecord,\n        userRoleControlRights: this.props.Login.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.extractedColumnList = [];\n        this.detailedColumnList = [];\n\n        if (this.props.Login.masterData && this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.screendesign) {\n          this.props.Login.masterData.DynamicMasterDesign.screendesign.griditem.map(row => {\n            // console.log(\"data:\", row);\n            this.extractedColumnList.push({\n              \"idsName\": row[\"1\"][this.props.Login.userInfo.slanguagetypecode],\n              \"dataField\": row[\"2\"]\n            });\n          });\n          this.props.Login.masterData.DynamicMasterDesign.screendesign.gridmoreitem.map(row => {\n            this.detailedColumnList.push({\n              \"idsName\": row[\"1\"][this.props.Login.userInfo.slanguagetypecode],\n              \"dataField\": row[\"2\"]\n            });\n          });\n        }\n\n        let data = [];\n        const withoutCombocomponent = [];\n        const mandatoryFields = [];\n        const Layout = this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.slideoutdesign || [];\n        Layout.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    data.push(componentrow);\n                  } else {\n                    withoutCombocomponent.push(componentrow);\n                  }\n\n                  if (componentrow.mandatory === true) {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                });\n              } else {\n                component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component);\n\n                if (component.mandatory === true) {\n                  if (component.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": component.label,\n                      \"dataField\": component.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  } else {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": component.label,\n                      \"dataField\": component.label,\n                      \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                    });\n                  }\n                }\n              }\n            });\n          });\n        });\n        const comboComponents = data;\n        let childColumnList = {};\n        data.map(columnList => {\n          const val = this.comboChild(data, columnList, childColumnList, true);\n          data = val.data;\n          childColumnList = val.childColumnList;\n        });\n        const masterData = this.props.Login.masterData.DynamicMasterData ? sortData(this.props.Login.masterData.DynamicMasterData, \"descending\", \"ndynamicmastercode\") : [];\n        this.setState({\n          withoutCombocomponent,\n          comboComponents,\n          childColumnList,\n          designData: data,\n          mandatoryFields,\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData.DynamicMasterData || [],\n          dataResult: process(masterData || [], this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        const masterData = this.props.Login.masterData.DynamicMasterData ? sortData(this.props.Login.masterData.DynamicMasterData, \"descending\", \"ndynamicmastercode\") : [];\n        this.setState({\n          data: this.props.Login.masterData.DynamicMasterData || [],\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(masterData || [], dataState),\n          dataState //, comboComponents, withoutCombocomponent\n\n        });\n      }\n    }\n\n    if (this.props.Login.selectedMaster !== previousProps.Login.selectedMaster) {\n      this.setState({\n        selectedMaster: this.props.Login.selectedMaster\n      });\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  getChildValues,\n  getEditDynamicMasterCombo,\n  //fetchRecord,\n  getDynamicMasterCombo,\n  addMasterRecord,\n  getAddMasterCombo,\n  getDynamicMasterTempalte,\n  getChildComboMaster,\n  getChildValuesForAddMaster\n})(injectIntl(DynamicMaster));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dynamicmaster/DynamicMaster.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DynamicDataGrid","SlideOutModal","Esign","callService","crudMaster","updateStore","validateEsignCredential","getEditDynamicMasterCombo","getDynamicMasterCombo","getChildValues","addMasterRecord","getAddMasterCombo","getDynamicMasterTempalte","getChildComboMaster","getChildValuesForAddMaster","DEFAULT_RETURN","showEsign","getControlMap","deleteAttachmentDropZone","getSameRecordFromTwoArrays","onDropAttachFileList","convertDateTimetoString","validateEmail","formatDate","sortData","ageCalculate","formatInputDate","extractFieldHeader","childComboClear","ListWrapper","DynamicSlideout","designComponents","transactionStatus","getFieldSpecification","AddMasterRecords","getFieldSpecification1","getFieldSpecification3","mapStateToProps","state","Login","DynamicMaster","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","removeIndex","data1","splice","closeModal","loadEsign","openModal","selectedRecord","selectedMaster","selectedControl","masterextractedColumnList","masterfieldList","masterdataList","mastercomboComponents","masterwithoutCombocomponent","masterComboColumnFiled","masterDesign","addMaster","masterIndex","screenName","operation","displayname","userInfo","slanguagetypecode","undefined","inputParam","displayName","updateInfo","typeName","selectedId","onComboChangeMasterDyanmic","comboData","control","customName","comboName","label","valuemember","nquerybuildertablecode","source","child","length","childComboList","childColumnList","map","columnList","val","comboChild","parentList","inputParem","primarykeyField","value","item","withoutCombocomponent","comboComponents","childParam","mastedataList","onInputOnChangeMasterDynamic","radiotext","target","type","name","checked","YES","NO","test","includes","index","indexOf","indexcomma","slice","handleDateChangeMasterDynamic","dateValue","dateName","onNumericInputChangeMasterDynamic","onNumericBlurMasterDynamic","max","parseFloat","precision","parseInt","min","onComboChangeMaster","fieldName","table","nformcode","tableDataField","foreignDataField","childIndex","handleDateChangeMaster","age","onNumericInputOnChangeMaster","onInputOnChangeMaster","nneedcurrentaddress","sflatnotemp","sflatno","shousenotemp","shouseno","spostalcodetemp","spostalcode","sstreettemp","sstreet","scitynametemp","scityname","sdistrictnametemp","sdistrictname","sregionnametemp","sregionname","onSaveMasterRecord","saveType","formRef","inputData","methodUrl","toLowerCase","nmastersitecode","component","screendesign","masterdateconstraints","masterdatefields","mastercombinationunique","ndesigntemplatemappingcode","jsondata","jsonuidata","dateList","defaulttimezone","slideoutdesign","row","children","column","hasOwnProperty","componentrow","inputtype","pkey","mandatory","loadcurrentdate","Date","timezone","push","JSON","stringify","dataField","isJsonField","jsonObjectName","controlType","dateField","controlName","userinfo","selectedRecordName","loadSubSample","classUrl","masterData","fieldList","extractedColumnList","get","Object","values","primaryKeyField","keys","masterprimaryKeyField","filter","ndesigncomponentcode","COMBOBOX","addId","controlMap","has","ncontrolcode","designData","Map","fetchRecord","fetchRecordParam","onNumericBlur","retunObj","childList","childData","findIndex","x","y","onComboChange","onNumericInputChange","handleDateChange","onDrop","oldVlaue","design","columns","ReactInputFields","parse","fields","designDataIndex","firstIndex","secondIndex","from","to","id","onDropFile","attachedFiles","maxSize","actionType","deleteAttachment","file","onInputOnChange","deleteRecord","deleteParam","ndynamicmastercode","userRoleControlRights","ncontrolCode","screenData","reloadData","onSaveClick","DynamicMasterDesign","esignNeeded","validateEsign","sreason","nreasoncode","spredefinedreason","password","createRef","detailedColumnList","skip","take","settings","masterStatus","error","getDerivedStateFromProps","warn","render","editId","editParam","intl","formatMessage","mandatoryFields","mastertimeZoneList","masterdefaultTimeZone","timeZoneList","defaultTimeZone","componentDidUpdate","previousProps","griditem","gridmoreitem","Layout","DynamicMasterData"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DynamicDataGrid from '../../components/data-grid/data-grid.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport {\r\n    callService, crudMaster, updateStore, validateEsignCredential,\r\n    getEditDynamicMasterCombo,\r\n    //fetchRecord,\r\n    getDynamicMasterCombo, getChildValues,\r\n    addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster,getChildValuesForAddMaster\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport {\r\n    showEsign, getControlMap, deleteAttachmentDropZone,\r\n    getSameRecordFromTwoArrays, onDropAttachFileList, convertDateTimetoString,\r\n    validateEmail, formatDate, sortData, ageCalculate, formatInputDate, extractFieldHeader, childComboClear\r\n} from '../../components/CommonScript';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout.jsx';\r\nimport { designComponents, transactionStatus } from '../../components/Enumeration';\r\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\r\nimport AddMasterRecords from '../dynamicpreregdesign/AddMasterRecords'\r\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\r\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass DynamicMaster extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.detailedColumnList = [];\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            comboComponents: [],\r\n            withoutCombocomponent: [],\r\n            selectedMaster: []\r\n        };\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data || [], event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    removeIndex = (data, removeIndex) => {\r\n        const data1 = [...data.splice(0, removeIndex), ...data.splice(removeIndex + 1)]\r\n        return data1\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedMaster = this.props.Login.selectedMaster;\r\n        let selectedControl = this.props.Login.selectedControl;\r\n        let masterextractedColumnList = this.props.Login.masterextractedColumnList;\r\n        let masterfieldList = this.props.Login.masterfieldList;\r\n        let masterdataList = this.props.Login.masterfieldList;\r\n        let mastercomboComponents = this.props.Login.masterfieldList;\r\n        let masterwithoutCombocomponent = this.props.Login.masterfieldList;\r\n        let masterComboColumnFiled = this.props.Login.masterComboColumnFiled;\r\n        let masterDesign = this.props.Login.masterDesign;\r\n        let addMaster = this.props.Login.addMaster\r\n        let masterIndex = this.props.Login.masterIndex\r\n        let screenName=this.props.Login.screenName\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason'] = \"\"\r\n            }\r\n        } else if (this.props.Login.addMaster) {\r\n            if (masterIndex !== 0) {\r\n                screenName=selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                selectedMaster = this.removeIndex(selectedMaster, masterIndex)\r\n                selectedControl = this.removeIndex(selectedControl, masterIndex)\r\n                masterextractedColumnList = masterextractedColumnList && this.removeIndex(masterextractedColumnList, masterIndex)\r\n                masterfieldList = masterfieldList && this.removeIndex(masterfieldList, masterIndex)\r\n                masterdataList = masterdataList && this.removeIndex(masterdataList, masterIndex)\r\n                mastercomboComponents = mastercomboComponents && this.removeIndex(mastercomboComponents, masterIndex)\r\n                masterComboColumnFiled = masterComboColumnFiled && this.removeIndex(masterComboColumnFiled, masterIndex)\r\n                masterwithoutCombocomponent = masterwithoutCombocomponent && this.removeIndex(masterwithoutCombocomponent, masterIndex)\r\n                masterDesign = masterDesign && this.removeIndex(masterDesign, masterIndex)\r\n                masterIndex = masterIndex - 1;\r\n                //  masterprimaryKeyField = \"\"\r\n                //addMaster = false\r\n            } else {\r\n                selectedMaster = []\r\n                selectedControl = []\r\n                masterextractedColumnList = []\r\n                masterfieldList = []\r\n                addMaster = false\r\n                masterdataList = []\r\n                mastercomboComponents = []\r\n                masterwithoutCombocomponent = []\r\n                masterComboColumnFiled = []\r\n                masterDesign = []\r\n                masterIndex=undefined\r\n                screenName=this.props.Login.inputParam.displayName\r\n            }\r\n\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedMaster = []\r\n            selectedControl = []\r\n            masterextractedColumnList = []\r\n            masterfieldList = []\r\n            addMaster = false\r\n            masterdataList = []\r\n            mastercomboComponents = []\r\n            masterwithoutCombocomponent = []\r\n            masterComboColumnFiled = []\r\n            masterDesign = []\r\n            masterIndex=undefined\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal, loadEsign,\r\n                selectedRecord, selectedId: null, selectedMaster, selectedControl,\r\n                masterextractedColumnList, masterfieldList\r\n                , addMaster, masterIndex, masterdataList,\r\n                mastercomboComponents,\r\n                masterwithoutCombocomponent,\r\n                masterComboColumnFiled, masterDesign,screenName\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n\r\n        let primaryKeyField = \"ndynamicmastercode\";\r\n\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\")\r\n            && this.state.controlMap.get(\"Edit\").ncontrolcode;\r\n\r\n        const editParam = {\r\n            screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName\r\n                && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation: \"update\", primaryKeyField,\r\n            inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editId\r\n        };\r\n\r\n        const deleteParam = { operation: \"delete\" };\r\n\r\n        // const mandatoryFields=[];\r\n        // this.extractedColumnList.forEach(item=>item.mandatory === true ? \r\n        //     mandatoryFields.push(item) :\"\"\r\n        // );   \r\n\r\n        return (<>\r\n            <Row>\r\n                <Col>\r\n                    <ListWrapper className=\"client-list-content\">\r\n                        {this.state.data ?\r\n                            <DynamicDataGrid\r\n                                primaryKeyField={primaryKeyField}\r\n                                data={this.state.data}\r\n                                dataResult={this.state.dataResult}\r\n                                dataState={this.state.dataState}\r\n                                dataStateChange={this.dataStateChange}\r\n                                extractedColumnList={this.extractedColumnList}\r\n                                detailedFieldList={this.detailedColumnList}\r\n                                expandField={this.detailedColumnList.length > 0 ? \"expanded\" : false}\r\n                                methodUrl={\"\"}\r\n                                controlMap={this.state.controlMap}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                fetchRecord={this.fetchRecord}\r\n                                editParam={editParam}\r\n                                deleteRecord={this.deleteRecord}\r\n                                deleteParam={deleteParam}\r\n                                reloadData={this.reloadData}\r\n                                addRecord={this.openModal}\r\n                                pageable={true}\r\n                                scrollable={'scrollable'}\r\n                                gridHeight={'600px'}\r\n                                isActionRequired={true}\r\n                                isToolBarRequired={true}\r\n                                selectedId={this.props.Login.selectedId}\r\n                            />\r\n                            : \"\"}\r\n                    </ListWrapper>\r\n                </Col>\r\n            </Row>\r\n\r\n            {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n            {this.props.Login.openModal ?\r\n                <SlideOutModal show={this.props.Login.openModal}\r\n                    closeModal={this.closeModal}\r\n                    operation={this.props.Login.operation ? this.props.Login.operation : \"create\"}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName}\r\n                    onSaveClick={this.props.Login.addMaster ?\r\n                        this.onSaveMasterRecord : this.onSaveClick}\r\n                    esign={this.props.Login.loadEsign}\r\n                    validateEsign={this.validateEsign}\r\n                    masterStatus={this.props.Login.masterStatus}\r\n                    updateStore={this.props.updateStore}\r\n                    selectedRecord={this.props.Login.addMaster ?\r\n                        this.state.selectedMaster[this.props.Login.masterIndex] : this.state.selectedRecord || {}}\r\n                    mandatoryFields={this.props.Login.addMaster ?\r\n                        this.props.Login.masterextractedColumnList[this.props.Login.masterIndex].filter(x => x.mandatory === true)\r\n                        : this.state.mandatoryFields || []}\r\n                    addComponent={this.props.Login.loadEsign ?\r\n                        <Esign operation={this.props.Login.operation}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        /> : this.props.Login.addMaster ?\r\n                            <AddMasterRecords\r\n                                selectedControl={this.props.Login.selectedControl[this.props.Login.masterIndex]}\r\n                                fieldList={this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex]}\r\n                                extractedColumnList={this.props.Login.masterextractedColumnList[this.props.Login.masterIndex]}\r\n                                // primaryKeyField={this.props.Login.masterprimaryKeyField}\r\n                                selectedRecord={this.state.selectedMaster[this.props.Login.masterIndex] || {}}\r\n                                onInputOnChange={this.onInputOnChangeMaster}\r\n                                onComboChange={this.onComboChangeMaster}\r\n                                handleDateChange={this.handleDateChangeMaster}\r\n                                dataList={this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex]}\r\n                                onNumericInputOnChange={this.onNumericInputOnChangeMaster}\r\n                                masterDesign={this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex]}\r\n                                mastertimeZoneList={this.props.Login.mastertimeZoneList}\r\n                                masterdefaultTimeZone={this.props.Login.masterdefaultTimeZone}\r\n                                onComboChangeMasterDyanmic={this.onComboChangeMasterDyanmic}\r\n                                handleDateChangeMasterDynamic={this.handleDateChangeMasterDynamic}\r\n                                onInputOnChangeMasterDynamic={this.onInputOnChangeMasterDynamic}\r\n                                onNumericInputChangeMasterDynamic={this.onNumericInputChangeMasterDynamic}\r\n                                onNumericBlurMasterDynamic={this.onNumericBlurMasterDynamic}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                Login={this.props.Login}\r\n                                addMasterRecord={this.addMasterRecord}\r\n                                userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                masterIndex={this.props.Login.masterIndex}\r\n                            /> :\r\n                            <DynamicSlideout\r\n                                selectedRecord={this.props.Login.selectedRecord}\r\n                                templateData={this.props.Login.masterData.DynamicMasterDesign &&\r\n                                    this.props.Login.masterData.DynamicMasterDesign.slideoutdesign}\r\n                                // handleChange={this.handleChange}\r\n                                handleDateChange={this.handleDateChange}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onNumericInputChange={this.onNumericInputChange}\r\n                                comboData={this.props.Login.comboData}\r\n                                onComboChange={this.onComboChange}\r\n                                onDropFile={this.onDropFile}\r\n                                deleteAttachment={this.deleteAttachment}\r\n                                onNumericBlur={this.onNumericBlur}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                timeZoneList={this.props.Login.timeZoneList}\r\n                                defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                Login={this.props.Login}\r\n                                addMasterRecord={this.addMasterRecord}\r\n                                userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                            />\r\n                    }\r\n\r\n                /> : \"\"}\r\n        </>\r\n        );\r\n    }\r\n\r\n\r\n    onComboChangeMasterDyanmic = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        //if (comboData) {\r\n        comboData[\"item\"] = {\r\n            ...comboData[\"item\"], \"pkey\": control.valuemember, \"nquerybuildertablecode\": control.nquerybuildertablecode,\r\n            \"source\": control.source\r\n        };\r\n        selectedMaster[masterIndex][comboName] = comboData;\r\n\r\n        // console.log(\"selected:\", selectedMaster, comboData, control, customName);\r\n        if (control.child && control.child.length > 0) {\r\n            const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\")\r\n            let childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\")\r\n\r\n            if (comboData) {\r\n                const inputParem = {\r\n                    child: control.child,\r\n                    source: control.source,\r\n                    primarykeyField: control.valuemember,\r\n                    value: comboData.value,\r\n                    item: comboData.item\r\n                }\r\n                this.props.getChildValuesForAddMaster(inputParem,\r\n                    this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList,\r\n                    childComboList, childColumnList,\r\n                    this.props.Login.masterwithoutCombocomponent,\r\n                    [...childComboList, ...parentList], masterIndex)\r\n            } else {\r\n                let comboData = this.props.Login.masterdataList\r\n                const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n                const inputParam = { control, comboComponents: this.props.Login.mastercomboComponents[masterIndex], withoutCombocomponent: withoutCombocomponent[masterIndex], selectedMaster: selectedMaster[masterIndex], comboData: comboData[masterIndex] }\r\n                const childParam = childComboClear(inputParam)\r\n                selectedMaster[masterIndex] = childParam.selectedRecord\r\n                comboData[masterIndex] = childParam.comboData\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedMaster, mastedataList: comboData }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedMaster }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n    onInputOnChangeMasterDynamic = (event, radiotext) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'toggle') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else if (event.target.type === 'numeric') {\r\n            if (/\\D/.test(event.target.value))\r\n                selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        } else if (event.target.type === 'checkbox') {\r\n            const value = selectedMaster[masterIndex][event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedMaster[masterIndex][event.target.name] = radiotext;\r\n            }\r\n        } else if (event.target.type === 'radio') {\r\n            selectedMaster[masterIndex][event.target.name] = radiotext\r\n        } else {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n\r\n    handleDateChangeMasterDynamic = (dateValue, dateName) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericInputChangeMasterDynamic = (value, name) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericBlurMasterDynamic = (value, control) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (selectedMaster[masterIndex][control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n    onComboChangeMaster = (comboData, fieldName, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        if (comboData !== null) {\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                selectedMaster[masterIndex][item.tableDataField] = comboData.value;\r\n            }\r\n            else if (item.foreignDataField) {\r\n                selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\r\n            }\r\n        }\r\n        selectedMaster[masterIndex][fieldName] = comboData;\r\n        if (item.childIndex !== undefined) {\r\n            this.props.getChildComboMaster(selectedMaster, fieldName, item,\r\n                this.props.Login.selectedControl,\r\n                this.props.Login.masterfieldList,\r\n                this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex)\r\n        } else {\r\n            this.setState({ selectedMaster });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChangeMaster = (dateName, dateValue, item) => {\r\n        //   const { selectedMaster } = this.state;\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n        const age = ageCalculate(dateValue);\r\n        selectedMaster[masterIndex][\"sage\"] = age;\r\n        this.setState({ selectedMaster });\r\n\r\n    }\r\n\r\n    onNumericInputOnChangeMaster = (value, name, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n\r\n\r\n    onInputOnChangeMaster = (event) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\r\n                    selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\r\n                    selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\r\n                    selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\r\n                    selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\r\n                    selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\r\n                    selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\r\n                    selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\r\n                }\r\n                else {\r\n                    selectedMaster[masterIndex].sflatnotemp = \"\";\r\n                    selectedMaster[masterIndex].shousenotemp = \"\";\r\n                    selectedMaster[masterIndex].spostalcodetemp = \"\";\r\n                    selectedMaster[masterIndex].sstreettemp = \"\";\r\n                    selectedMaster[masterIndex].scitynametemp = \"\";\r\n                    selectedMaster[masterIndex].sdistrictnametemp = \"\";\r\n                    selectedMaster[masterIndex].sregionnametemp = \"\";\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onSaveMasterRecord = (saveType, formRef) => {\r\n        //add / edit            \r\n        const masterIndex = this.props.Login.masterIndex;\r\n        let inputData = [];\r\n        const selectedControl = this.props.Login.selectedControl\r\n        const masterDesign = this.props.Login.masterDesign\r\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n        inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n        const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase()\r\n\r\n\r\n        if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n            const selectedMaster = this.state.selectedMaster;\r\n            inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n            inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\r\n            inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\r\n            inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique;\r\n            //add                          \r\n            inputData[\"dynamicmaster\"] = {\r\n                nformcode: selectedControl[masterIndex].table.item.nformcode,\r\n                ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\r\n                jsondata: {}, jsonuidata: {}\r\n            };\r\n\r\n            const dateList = [];\r\n            const defaulttimezone = this.props.Login.defaulttimezone;\r\n\r\n            masterDesign[masterIndex] &&\r\n                masterDesign[masterIndex].slideoutdesign.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ?\r\n                                            {\r\n                                                value: selectedMaster[masterIndex][componentrow.label].value,\r\n                                                label: selectedMaster[masterIndex][componentrow.label].label,\r\n                                                pkey: selectedMaster[masterIndex][componentrow.label].item.pkey,\r\n                                                nquerybuildertablecode: selectedMaster[masterIndex][componentrow.label].item.nquerybuildertablecode,\r\n                                                source: selectedMaster[masterIndex][componentrow.label].item.source\r\n                                            } : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\"\r\n\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                            //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        else {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) :\r\n                                                selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n                                                    : \"\";\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label];\r\n                                            //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ?\r\n                                                { value: selectedMaster[masterIndex][`tz${componentrow.label}`].value, label: selectedMaster[masterIndex][`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`]\r\n                                        }\r\n                                        dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ?\r\n                                            selectedMaster[masterIndex][componentrow.label] : \"\"\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                        // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n\r\n                                    }\r\n                                    return inputData[\"dynamicmaster\"];\r\n                                })\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        {\r\n                                            value: selectedMaster[masterIndex][component.label].value,\r\n                                            label: selectedMaster[masterIndex][component.label].label,\r\n                                            pkey: selectedMaster[masterIndex][component.label].item.pkey,\r\n                                            nquerybuildertablecode: selectedMaster[masterIndex][component.label].item.nquerybuildertablecode,\r\n                                            source: selectedMaster[masterIndex][component.label].item.source\r\n                                        } : -1\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label;\r\n                                    //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false);\r\n                                        // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                        // selectedRecord[component.label] : new Date(), userInfo);\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo);\r\n\r\n                                    } else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            //convertDateTimetoString(selectedRecord[component.label] ?                                      \r\n                                            //    selectedRecord[component.label] : new Date(), userInfo) :\r\n                                            formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) :\r\n                                            selectedMaster[masterIndex][component.label] ?\r\n                                                // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                                //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\r\n                                                formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo)\r\n\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ?\r\n                                            { value: selectedMaster[masterIndex][`tz${component.label}`].value, label: selectedMaster[masterIndex][`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`]\r\n                                    }\r\n                                    dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        selectedMaster[masterIndex][component.label] : \"\"\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                }\r\n                            }\r\n                            return inputData[\"dynamicmaster\"];\r\n                        }\r\n                        )\r\n                        return inputData[\"dynamicmaster\"];\r\n                    })\r\n                    return inputData[\"dynamicmaster\"];\r\n                })\r\n\r\n\r\n            inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\r\n            inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\r\n            inputData[\"masterdatelist\"] = dateList;\r\n\r\n\r\n        }\r\n        else if (selectedControl[masterIndex].table.item.component === 'Type3Component'\r\n            && selectedControl[masterIndex].table.item.nformcode === 137) {\r\n            inputData[\"noneedfilter\"] = true\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        else {\r\n\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        // }\r\n\r\n        const inputParam = {\r\n            userinfo: this.props.Login.userInfo,\r\n            withoutCombocomponent: this.state.withoutCombocomponent,\r\n            comboComponents: this.state.comboComponents,\r\n            selectedRecord: this.state.selectedRecord,\r\n            selectedRecordName: 'selectedRecord',\r\n            loadSubSample: false,\r\n            selectedControl: this.props.Login.selectedControl,\r\n            comboData: this.props.Login.comboData,\r\n            comboName: 'comboData',\r\n            classUrl: selectedControl[masterIndex].table.item.classUrl,\r\n            methodUrl: selectedControl[masterIndex].table.item.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,// selectedControl[masterIndex].table.item.sdisplayname,\r\n            screenName: masterIndex !== 0 ?\r\n                selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode] : this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: \"create\", saveType, formRef,\r\n            masterIndex,\r\n            selectedMaster: this.state.selectedMaster,\r\n            mastercomboComponents: this.props.Login.mastercomboComponents,\r\n            masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\r\n            masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\r\n            masterextractedColumnList: this.props.Login.masterextractedColumnList,\r\n            masterdataList: this.props.Login.masterdataList,\r\n            masterDesign: this.props.Login.masterDesign,\r\n            masterfieldList: this.props.Login.masterfieldList,\r\n\r\n        }\r\n\r\n        this.props.addMasterRecord(inputParam, this.props.Login.masterData)\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    addMasterRecord = (control) => {\r\n        let masterIndex = this.props.Login.masterIndex\r\n        if (masterIndex !== undefined) {\r\n            masterIndex = masterIndex + 1;\r\n        } else {\r\n            masterIndex = 0\r\n        }\r\n        let selectedControl = this.props.Login.selectedControl || []\r\n        let selectedMaster = this.state.selectedMaster || []\r\n        selectedMaster[masterIndex]={}\r\n        selectedControl[masterIndex] = control\r\n\r\n        let fieldList = this.props.Login.masterfieldList || []\r\n        fieldList[masterIndex] = []\r\n\r\n        let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || []\r\n        masterComboColumnFiled[masterIndex] = []\r\n\r\n        let extractedColumnList = this.props.Login.masterextractedColumnList || []\r\n        extractedColumnList[masterIndex] = []\r\n\r\n        let  masterdataList = this.props.Login.masterdataList|| []\r\n        let  masterDesign = this.props.Login.masterDesign|| []\r\n        let  masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent|| []\r\n        let  mastercomboComponents = this.props.Login.mastercomboComponents|| []\r\n\r\n        masterdataList[masterIndex] = []\r\n        masterDesign[masterIndex] = []\r\n        masterwithoutCombocomponent[masterIndex] = []\r\n        mastercomboComponents[masterIndex] = []\r\n\r\n        if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\r\n            if (control.table.item.component === 'Type2Component') {\r\n                fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\r\n            } else {\r\n                fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\r\n            }\r\n\r\n\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedControl,\r\n                    addMaster: true,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    selectedMaster,\r\n                    screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo)\r\n        }\r\n        else if (control.table.item.component === 'Type3Component') {\r\n            fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n            masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item =>\r\n                item.ndesigncomponentcode === designComponents.COMBOBOX)\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterprimaryKeyField: primaryKeyField,\r\n                masterComboColumnFiled: masterComboColumnFiled,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                selectedMaster,\r\n                screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n            }\r\n\r\n            this.props.getAddMasterCombo(inputParam);\r\n\r\n        }\r\n        else if (control.table.item.component === 'Dynamic') {\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterComboColumnFiled,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterComboColumnFiled,\r\n                selectedMaster\r\n            }\r\n            this.props.getDynamicMasterTempalte(inputParam);\r\n        }\r\n\r\n        // this.props.getMasterRecord(control);\r\n    }\r\n\r\n    openModal = () => {\r\n\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\")\r\n            && this.state.controlMap.get(\"Add\").ncontrolcode;\r\n\r\n        this.props.getDynamicMasterCombo(this.props.Login.masterData, this.props.Login.userInfo, addId,\r\n            this.state.designData, this.state.selectedRecord, this.state.childColumnList,\r\n            this.state.comboComponents, this.state.withoutCombocomponent,\r\n            false, true, new Map(), true, \"create\", this.props.Login.displayName);\r\n    }\r\n\r\n    fetchRecord = (fetchRecordParam) => {\r\n\r\n        this.props.getEditDynamicMasterCombo(fetchRecordParam,\r\n            this.state.designData, this.state.selectedRecord, this.state.childColumnList,\r\n            this.state.comboComponents, this.state.withoutCombocomponent)\r\n\r\n    }\r\n\r\n\r\n    onNumericBlur = (value, control) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (selectedRecord[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedRecord[control.label] < parseFloat(control.max))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedRecord[control.label] > parseFloat(control.min))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    comboChild = (data, columnList, childColumnList, slice) => {\r\n        let retunObj = {}\r\n        // if (data.findIndex(x => x.label === columnList.label) !== -1) {\r\n        if (!childColumnList.hasOwnProperty(columnList.label)) {\r\n            if (childColumnList[columnList.label] === undefined) {\r\n                if (columnList.hasOwnProperty(\"child\")) {\r\n                    let childList = []\r\n                    columnList.child.map(childData => {\r\n                        const index = data.findIndex(x => x.label === childData.label)\r\n                        if (index !== -1) {\r\n                            childList.push(data[index])\r\n                            if (slice) {\r\n                                data = [...data.slice(0, index), ...data.slice(index + 1)]\r\n                            }\r\n                        }\r\n                    })\r\n                    childColumnList[columnList.label] = childList;\r\n                    if (childList.length > 0) {\r\n                        childList.map(y => {\r\n                            if (y.hasOwnProperty(\"child\")) {\r\n                                const val = this.comboChild(data, y, childColumnList, slice)\r\n                                retunObj[\"data\"] = val.data;\r\n                                retunObj[\"childColumnList\"] = val.childColumnList;\r\n                            } else {\r\n                                retunObj[\"data\"] = data;\r\n                                retunObj[\"childColumnList\"] = childColumnList;\r\n                            }\r\n                        })\r\n                    } else {\r\n                        retunObj[\"data\"] = data;\r\n                        retunObj[\"childColumnList\"] = childColumnList;\r\n                    }\r\n                } else {\r\n                    retunObj[\"data\"] = data;\r\n                    retunObj[\"childColumnList\"] = childColumnList;\r\n                }\r\n            } else {\r\n                retunObj[\"data\"] = data;\r\n                retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n            }\r\n        } else {\r\n            retunObj[\"data\"] = data;\r\n            retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n        }\r\n        return retunObj;\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (comboData) {\r\n            comboData[\"item\"] = {\r\n                ...comboData[\"item\"], \"pkey\": control.valuemember, \"nquerybuildertablecode\": control.nquerybuildertablecode,\r\n                \"source\": control.source\r\n            };\r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = [];\r\n        }\r\n        if (control.child && control.child.length > 0) {\r\n            const childComboList = getSameRecordFromTwoArrays(this.state.comboComponents, control.child, \"label\")\r\n            let childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = this.comboChild(this.state.comboComponents, columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            const parentList = getSameRecordFromTwoArrays(this.state.withoutCombocomponent, control.child, \"label\")\r\n\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData.value,\r\n                item: comboData.item\r\n            }\r\n            this.props.getChildValues(inputParem,\r\n                this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                childComboList, childColumnList, this.state.withoutCombocomponent, [...childComboList, ...parentList])\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onDrop = (value, type, oldVlaue) => {\r\n        const design = this.state.design;\r\n        let columns = design[0].children;\r\n        let designData = this.props.Login.ReactInputFields;\r\n        value = JSON.parse(value.fields);\r\n        value = { ...value, type: \"component\" }\r\n        let designDataIndex = designData.findIndex(item => item.label === value.label);\r\n        let firstIndex = columns[0] ? columns[0].children.findIndex(item => item.label === value.label) : -1;\r\n        let secondIndex = columns[1] ? columns[1].children.findIndex(item => item.label === value.label) : -1;\r\n\r\n        if (designDataIndex >= 0)\r\n            designData.splice(designDataIndex, 1);\r\n        if (firstIndex >= 0) {\r\n            if (type !== 1) {\r\n                columns[0].children.splice(firstIndex, 1);\r\n                // columns[0].splice(to, 0, columns[0].splice(from, 1)[0]);\r\n            } else {\r\n                if (oldVlaue) {\r\n                    oldVlaue = JSON.parse(oldVlaue);\r\n                    let from = columns[0].children.findIndex(item => item.label === value.label);\r\n                    let to = columns[0].children.findIndex(item => item.label === oldVlaue.label);\r\n                    columns[0].children.splice(to, 0, columns[0].children.splice(from, 1)[0]);\r\n                }\r\n            }\r\n\r\n        } else if (type === 1) {\r\n            if (columns[0]) {\r\n                columns[0].children.push(value);\r\n            } else {\r\n                columns[0] = {\r\n                    id: \"1\",\r\n                    type: \"column\",\r\n                    children: []\r\n                }\r\n\r\n                columns[0].children.push(value);\r\n            }\r\n        }\r\n        if (secondIndex >= 0) {\r\n            if (type !== 2) {\r\n                columns[1].splice(secondIndex, 1);\r\n            } else {\r\n                if (oldVlaue) {\r\n                    oldVlaue = JSON.parse(oldVlaue);\r\n                    let from = columns[1].children.findIndex(item => item.label === value.label);\r\n                    let to = columns[1].children.findIndex(item => item.label === oldVlaue.label);\r\n                    columns[1].children.splice(to, 0, columns[1].children.splice(from, 1)[0]);\r\n                }\r\n            }\r\n        } else if (type === 2) {\r\n            if (columns[1]) {\r\n                columns[1].children.push(value);\r\n            } else {\r\n                columns[1] = {\r\n                    id: \"2\",\r\n                    type: \"column\",\r\n                    children: []\r\n                }\r\n                columns[1].children.push(value);\r\n            }\r\n        }\r\n\r\n        // design.push(columns)\r\n        this.setState({ designData, design })\r\n    }\r\n\r\n    onDropFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.extractedColumnList = [];\r\n                this.detailedColumnList = [];\r\n\r\n                if (this.props.Login.masterData && this.props.Login.masterData.DynamicMasterDesign &&\r\n                    this.props.Login.masterData.DynamicMasterDesign.screendesign) {\r\n                    this.props.Login.masterData.DynamicMasterDesign.screendesign.griditem.map(row => {\r\n                        // console.log(\"data:\", row);\r\n                        this.extractedColumnList.push({ \"idsName\": row[\"1\"][this.props.Login.userInfo.slanguagetypecode], \"dataField\": row[\"2\"] });\r\n                    })\r\n                    this.props.Login.masterData.DynamicMasterDesign.screendesign.gridmoreitem.map(row => {\r\n                        this.detailedColumnList.push({ \"idsName\": row[\"1\"][this.props.Login.userInfo.slanguagetypecode], \"dataField\": row[\"2\"] });\r\n                    })\r\n                }\r\n\r\n                let data = [];\r\n                const withoutCombocomponent = [];\r\n                const mandatoryFields = [];\r\n                const Layout = (this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.slideoutdesign) || [];\r\n                Layout.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        data.push(componentrow)\r\n                                    } else {\r\n                                        withoutCombocomponent.push(componentrow)\r\n                                    }\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                        }\r\n                                        else {\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                })\r\n                            }\r\n                            else {\r\n                                component.inputtype === \"combo\" ?\r\n                                    data.push(component)\r\n                                    : withoutCombocomponent.push(component)\r\n\r\n                                if (component.mandatory === true) {\r\n                                    if (component.inputtype === \"email\") {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true, \"idsName\": component.label,\r\n                                            \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        })\r\n                                    }\r\n                                    else {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label,\r\n                                            \"dataField\": component.label,\r\n                                            \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": component.inputtype === \"combo\" ?\r\n                                                \"selectbox\" : \"textbox\"\r\n                                        })\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n                })\r\n                const comboComponents = data;\r\n                let childColumnList = {};\r\n                data.map(columnList => {\r\n                    const val = this.comboChild(data, columnList, childColumnList, true);\r\n                    data = val.data;\r\n                    childColumnList = val.childColumnList\r\n                })\r\n\r\n                const masterData = this.props.Login.masterData.DynamicMasterData ? sortData(this.props.Login.masterData.DynamicMasterData, \"descending\", \"ndynamicmastercode\") : [];\r\n\r\n                this.setState({\r\n                    withoutCombocomponent, comboComponents, childColumnList, designData: data, mandatoryFields,\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData.DynamicMasterData || [],\r\n                    dataResult: process(masterData || [], this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n\r\n                const masterData = this.props.Login.masterData.DynamicMasterData ? sortData(this.props.Login.masterData.DynamicMasterData, \"descending\", \"ndynamicmastercode\") : [];\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData.DynamicMasterData || [], selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(masterData || [], dataState),\r\n                    dataState//, comboComponents, withoutCombocomponent\r\n                });\r\n            }\r\n        }\r\n\r\n        if (this.props.Login.selectedMaster !== previousProps.Login.selectedMaster) {\r\n            this.setState({ selectedMaster: this.props.Login.selectedMaster });\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event, value) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'toggle') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else if (event.target.type === 'numeric') {\r\n            if (/\\D/.test(event.target.value))\r\n                selectedRecord[event.target.name] = event.target.value;\r\n        } else if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = value;\r\n        } else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = value\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    //deleteRecord = (selectedRecord, operation, ncontrolCode) => {\r\n    deleteRecord = (deleteParam) => {\r\n        const inputParam = {\r\n            classUrl: \"dynamicmaster\",\r\n            methodUrl: \"DynamicMaster\",\r\n            displayName: this.props.Login.displayName,\r\n            inputData: {\r\n                [\"dynamicmaster\"]: { \"ndynamicmastercode\": deleteParam.selectedRecord.ndynamicmastercode },//.dataItem,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: \"delete\",\r\n            dataState: this.state.dataState\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.Login.displayName,\r\n                    operation: \"delete\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.inputParam.displayName\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        //add / edit  \r\n\r\n        let inputData = [];\r\n        let dataState = undefined;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"masterdateconstraints\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdateconstraints;\r\n        inputData[\"masterdatefields\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdatefields;\r\n        inputData[\"mastercombinationunique\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.mastercombinationunique;\r\n        let selectedId = null;\r\n        let operation = \"\";\r\n        let selectedRecord = this.state.selectedRecord;\r\n        if (this.props.Login.operation === \"update\") {    // edit\r\n            dataState = this.state.dataState\r\n            inputData[\"dynamicmaster\"] = { ndynamicmastercode: this.state.selectedRecord[\"ndynamicmastercode\"] };//this.state.selectedRecord;\r\n            inputData[\"dynamicmaster\"][\"jsondata\"] = {};\r\n            inputData[\"dynamicmaster\"][\"jsonuidata\"] = {};\r\n            selectedId = this.props.Login.selectedId;\r\n            operation = \"update\";\r\n        }\r\n        else {\r\n            //add                          \r\n            inputData[\"dynamicmaster\"] = { //\"nsitecode\": this.props.Login.userInfo.nmastersitecode, \r\n                nformcode: this.props.Login.userInfo.nformcode,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.DynamicMasterDesign.ndesigntemplatemappingcode,\r\n                jsondata: {}, jsonuidata: {}\r\n            };\r\n\r\n            operation = \"create\";\r\n\r\n        }\r\n\r\n        const dateList = [];\r\n        const defaulttimezone = this.props.Login.defaulttimezone;\r\n        const userInfo = this.props.Login.userInfo;\r\n\r\n        this.props.Login.masterData.DynamicMasterDesign &&\r\n            this.props.Login.masterData.DynamicMasterDesign.slideoutdesign.map(row => {\r\n                row.children.map(column => {\r\n                    column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ?\r\n                                        {\r\n                                            value: selectedRecord[componentrow.label].value,\r\n                                            label: selectedRecord[componentrow.label].label,\r\n                                            pkey: selectedRecord[componentrow.label].item.pkey,\r\n                                            nquerybuildertablecode: selectedRecord[componentrow.label].item.nquerybuildertablecode,\r\n                                            source: selectedRecord[componentrow.label].item.source\r\n                                        } : -1\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label].label : \"\"\r\n\r\n                                }\r\n                                else if (componentrow.inputtype === \"date\") {\r\n                                    if (componentrow.mandatory) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedRecord[componentrow.label], false)\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                        //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                    }\r\n                                    else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                            formatDate(selectedRecord[componentrow.label] || new Date(), false) :\r\n                                            selectedRecord[componentrow.label] ? formatDate(selectedRecord[componentrow.label], false)\r\n                                                : \"\";\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label];\r\n                                        //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                    }\r\n                                    if (componentrow.timezone) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                                            { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`]\r\n                                    }\r\n                                    dateList.push(componentrow.label)\r\n                                }\r\n\r\n                                else {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ?\r\n                                        selectedRecord[componentrow.label] : \"\"\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                    // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n\r\n                                }\r\n                                return inputData[\"dynamicmaster\"];\r\n                            })\r\n                        }\r\n                        else {\r\n                            if (component.inputtype === \"combo\") {\r\n                                inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedRecord[component.label] ?\r\n                                    {\r\n                                        value: selectedRecord[component.label].value,\r\n                                        label: selectedRecord[component.label].label,\r\n                                        pkey: selectedRecord[component.label].item.pkey,\r\n                                        nquerybuildertablecode: selectedRecord[component.label].item.nquerybuildertablecode,\r\n                                        source: selectedRecord[component.label].item.source\r\n                                    } : -1\r\n\r\n                                inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label;\r\n                                //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\r\n                            }\r\n                            else if (component.inputtype === \"date\") {\r\n                                if (component.mandatory) {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedRecord[component.label], false);\r\n                                    // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                    // selectedRecord[component.label] : new Date(), userInfo);\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                    //convertDateTimetoString(selectedRecord[component.label], userInfo);\r\n\r\n                                } else {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                        //convertDateTimetoString(selectedRecord[component.label] ?                                      \r\n                                        //    selectedRecord[component.label] : new Date(), userInfo) :\r\n                                        formatDate(selectedRecord[component.label] || new Date(), false) :\r\n                                        selectedRecord[component.label] ?\r\n                                            // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                            //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\r\n                                            formatDate(selectedRecord[component.label], false) : \"\";\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                    //convertDateTimetoString(selectedRecord[component.label], userInfo)\r\n\r\n                                }\r\n                                if (component.timezone) {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ?\r\n                                        { value: selectedRecord[`tz${component.label}`].value, label: selectedRecord[`tz${component.label}`].label } :\r\n                                        defaulttimezone ? defaulttimezone : -1\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`]\r\n                                }\r\n                                dateList.push(component.label)\r\n                            }\r\n                            else {\r\n                                inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedRecord[component.label] ?\r\n                                    selectedRecord[component.label] : \"\"\r\n\r\n                                inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                            }\r\n                        }\r\n                        return inputData[\"dynamicmaster\"];\r\n                    }\r\n                    )\r\n                    return inputData[\"dynamicmaster\"];\r\n                })\r\n                return inputData[\"dynamicmaster\"];\r\n            })\r\n\r\n\r\n        inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\r\n        inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\r\n        inputData[\"masterdatelist\"] = dateList;\r\n\r\n        const inputParam = {\r\n            classUrl: \"dynamicmaster\",\r\n            methodUrl: \"DynamicMaster\",\r\n            displayName: this.props.Login.displayName,\r\n            inputData: inputData, operation: operation,\r\n            saveType, formRef, selectedId, dataState\r\n\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.Login.displayName,\r\n                    operation: \"create\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential,\r\n    getChildValues, getEditDynamicMasterCombo,//fetchRecord,\r\n    getDynamicMasterCombo,\r\n    addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster,getChildValuesForAddMaster\r\n})(injectIntl(DynamicMaster));\r\n"]},"metadata":{},"sourceType":"module"}