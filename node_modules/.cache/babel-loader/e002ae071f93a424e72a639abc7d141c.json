{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN, REQUEST_FAILURE } from './LoginTypes';\nimport { sortData, searchData, constructOptionList, fillRecordBasedOnCheckBoxSelection } from '../components/CommonScript'; //getComboLabelValue,, searchData\n\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nexport function comboChangeUserRoleScreenRights(selectedcombo, data, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/screenrights/getScreenRightsByUserRoleCode\", {\n      nuserrolecode: selectedcombo['nuserrolecode'].value,\n      \"userinfo\": userInfo\n    }).then(response => {\n      const masterData = { ...data,\n        ...response.data,\n        searchedData: undefined\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          skip: 0,\n          take: 10\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function getScreenRightsComboService(screenName, operation, userInfo, selectedcombo, ncontrolCode) {\n  return function (dispatch) {\n    if (operation === \"create\") {\n      let urlArray = [];\n      let AvaliableScreen = [];\n      const ScreenRightsAvaliablescreen = rsapi.post(\"screenrights/getAvailableScreen\", {\n        \"nuserrolecode\": selectedcombo[\"nuserrolecode\"] ? selectedcombo[\"nuserrolecode\"].value : null,\n        \"userinfo\": userInfo\n      });\n      urlArray = [ScreenRightsAvaliablescreen];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        // selectedRecord = response[0].data;\n        AvaliableScreen = response[0].data;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation,\n            screenName,\n            AvaliableScreen,\n            openModal: true,\n            selectedcombo,\n            ncontrolCode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    }\n  };\n}\nexport function getScreenRightsDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    if (isServiceRequired) {\n      dispatch(initRequest(true));\n      return rsapi.post(\"screenrights/getSingleSelectScreenRights\", {\n        \"screenrights\": inputData.SelectedScreenRights,\n        \"userinfo\": inputData.userinfo,\n        \"nuserrolecode\": inputData.masterData.SelectedUserRole.nuserrolecode\n      }).then(response => {\n        let dataState = inputData.dataState;\n\n        if (response.data.ControlRights.length < dataState.skip) {\n          dataState['skip'] = 0;\n        }\n\n        const masterData = { ...inputData.masterData,\n          ...response.data,\n          SelectedScreenRights: inputData.SelectedScreenRights\n        };\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            dataState,\n            skip: inputData.skip,\n            take: inputData.take\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.SelectedScreenRights, inputData.childTabsKey, inputData.checkBoxOperation, \"nuserrolescreencode\", inputData.removeElementFromArray);\n      let masterData = { ...inputData.masterData,\n        SelectedScreenRights: inputData.SelectedScreenRights\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }\n  };\n}\nexport function handleClickDelete(SelectedScreenRights, userInfo, masterData, selectedcombo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"screenrights/deleteScreenRights\", {\n      \"screenrights\": SelectedScreenRights,\n      \"userinfo\": userInfo,\n      \"nuserrolecode\": selectedcombo[\"nuserrolecode\"].value\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      const dataState = {\n        skip: 0,\n        take: 10\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          dataState,\n          skip: undefined,\n          take: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport function filterColumnData(filterValue, filterParam) {\n  return function (dispatch) {\n    let masterData = filterParam.masterData;\n    let primaryKeyValue = 0;\n    let searchedData = undefined;\n\n    if (filterValue === \"\") {\n      if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\n        primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\n      }\n    } else {\n      searchedData = searchData(filterValue, masterData[filterParam.inputListName]);\n\n      if (searchedData.length > 0) {\n        primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\n      }\n    }\n\n    if (primaryKeyValue !== 0) {\n      masterData[\"searchedData\"] = searchedData;\n      dispatch(initRequest(true));\n      return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject,\n        [filterParam.primaryKeyField]: primaryKeyValue\n      }).then(response => {\n        masterData = { ...masterData,\n          ...response.data\n        };\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      masterData[filterParam.selectedObject] = undefined;\n      masterData[\"searchedData\"] = [];\n      Object.keys(masterData).forEach(item => {\n        if (item !== filterParam.inputListName && item !== filterParam.selectedObject && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1) masterData[item] = [];\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function getCopyUseRoleScreenRights(screenName, operation, ncontrolCode, selectedcombo, userInfo, masterData, saveType) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"screenrights/getUserRole\", {\n      \"userinfo\": userInfo,\n      \"nuserrolecode\": selectedcombo[\"nuserrolecode\"].value\n    }).then(response => {\n      const roleMap = constructOptionList(response.data[\"Userrole\"] || [], \"nuserrolecode\", \"suserrolename\", false, false, true);\n      masterData = { ...masterData,\n        Userrole: roleMap.get(\"OptionList\")\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          screenName,\n          operation,\n          openModal: true,\n          ncontrolCode,\n          saveType: saveType,\n          skip: undefined,\n          take: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport function copyScreenRights(userrolecode, nuserrolecode, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"screenrights/copyScreenRights\", {\n      \"userrolecode\": userrolecode,\n      \"nuserrolecode\": nuserrolecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          skip: undefined,\n          take: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport function checkUserRoleScreenRights(nuserrolecode, data, userInfo, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/screenrights/getCopyUserRoleCode\", {\n      nuserrolecode: nuserrolecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      const masterData = { ...data,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          openModal: true,\n          loadEsign: false,\n          selectedRecord,\n          skip: undefined,\n          take: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport const reload = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"/screenrights/getScreenRightsByUserRoleCode\", {\n      nuserrolecode: inputParam.nuserrolecode.nuserrolecode,\n      \"userinfo\": inputParam.inputData.userinfo\n    }).then(response => {\n      let data = response.data;\n      let masterData = { ...inputParam.masterData,\n        ...data\n      };\n      sortData(masterData);\n      let selectedcombo = {};\n      selectedcombo[\"nuserrolecode\"] = {\n        value: inputParam.nuserrolecode.nuserrolecode,\n        label: inputParam.nuserrolecode.suserrolename\n      }; //   const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { masterData: [], organisation: undefined, }\n      //   }\n      // dispatch(updateStore(updateInfo))\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedcombo,\n          comboitem: inputParam.comboitem,\n          masterData: masterData,\n          activeTestTab: data.activeTestTab,\n          inputParam: inputParam,\n          masterStatus: \"\",\n          userInfo: inputParam.inputData.userinfo,\n          loading: false,\n          selectedId: null,\n          selectedRecord: {},\n          dataState: undefined,\n          organisation: {\n            selectedNode: data.SelectedNode,\n            selectedNodeName: data.SelectedNodeName,\n            primaryKeyValue: data.AddedChildPrimaryKey\n          },\n          displayName: inputParam.displayName,\n          reportFilePath: undefined,\n          skip: 0,\n          take: 10\n        }\n      }); // }\n    }).catch(error => {\n      if (error.response === undefined && error === \"Network Error\") {\n        dispatch({\n          type: REQUEST_FAILURE,\n          payload: {\n            error: \"Network Error\",\n            loading: false\n          }\n        });\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ScreenRightsAction.js"],"names":["rsapi","DEFAULT_RETURN","REQUEST_FAILURE","sortData","searchData","constructOptionList","fillRecordBasedOnCheckBoxSelection","toast","Axios","initRequest","intl","comboChangeUserRoleScreenRights","selectedcombo","data","userInfo","dispatch","post","nuserrolecode","value","then","response","masterData","searchedData","undefined","type","payload","loading","skip","take","catch","error","formatMessage","id","message","getScreenRightsComboService","screenName","operation","ncontrolCode","urlArray","AvaliableScreen","ScreenRightsAvaliablescreen","all","openModal","status","warn","getScreenRightsDetail","inputData","isServiceRequired","SelectedScreenRights","userinfo","SelectedUserRole","dataState","ControlRights","length","childTabsKey","checkBoxOperation","removeElementFromArray","handleClickDelete","filterColumnData","filterValue","filterParam","primaryKeyValue","inputListName","primaryKeyField","fetchUrl","fecthInputObject","selectedObject","Object","keys","forEach","item","unchangeList","indexOf","modalName","getCopyUseRoleScreenRights","saveType","roleMap","Userrole","get","copyScreenRights","userrolecode","loadEsign","checkUserRoleScreenRights","selectedRecord","reload","inputParam","label","suserrolename","comboitem","activeTestTab","masterStatus","selectedId","organisation","selectedNode","SelectedNode","selectedNodeName","SelectedNodeName","AddedChildPrimaryKey","displayName","reportFilePath"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN, REQUEST_FAILURE } from './LoginTypes';\r\nimport { sortData, searchData, constructOptionList, fillRecordBasedOnCheckBoxSelection } from '../components/CommonScript'//getComboLabelValue,, searchData\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\n\r\n\r\nexport function comboChangeUserRoleScreenRights(selectedcombo, data, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/screenrights/getScreenRightsByUserRoleCode\", { nuserrolecode: selectedcombo['nuserrolecode'].value, \"userinfo\": userInfo })\r\n            .then(response => {\r\n                const masterData = { ...data, ...response.data ,searchedData: undefined}\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, loading: false,skip:0,take:10\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n\r\nexport function getScreenRightsComboService(screenName, operation, userInfo, selectedcombo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if (operation === \"create\") {\r\n            let urlArray = [];\r\n            let AvaliableScreen = [];\r\n            const ScreenRightsAvaliablescreen = rsapi.post(\"screenrights/getAvailableScreen\", { \"nuserrolecode\": selectedcombo[\"nuserrolecode\"] ? selectedcombo[\"nuserrolecode\"].value : null, \"userinfo\": userInfo });\r\n            urlArray = [ScreenRightsAvaliablescreen];\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    // selectedRecord = response[0].data;\r\n                    AvaliableScreen = response[0].data;\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            operation, screenName, AvaliableScreen, openModal: true, selectedcombo,\r\n                            ncontrolCode, loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n}\r\nexport function getScreenRightsDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        if (isServiceRequired) {\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"screenrights/getSingleSelectScreenRights\", {\r\n                \"screenrights\": inputData.SelectedScreenRights,\r\n                \"userinfo\": inputData.userinfo,\r\n                \"nuserrolecode\": inputData.masterData.SelectedUserRole.nuserrolecode\r\n            })\r\n                .then(response => {\r\n                    let dataState = inputData.dataState\r\n                    if (response.data.ControlRights.length < dataState.skip) {\r\n                        dataState['skip']=0\r\n                    }\r\n                    const masterData = { ...inputData.masterData, ...response.data, SelectedScreenRights: inputData.SelectedScreenRights };\r\n                    sortData(masterData);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false, dataState,skip:inputData.skip,take:inputData.take } });\r\n                }).catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.SelectedScreenRights, inputData.childTabsKey, inputData.checkBoxOperation, \"nuserrolescreencode\",inputData.removeElementFromArray);\r\n            let masterData={...inputData.masterData,SelectedScreenRights:inputData.SelectedScreenRights}\r\n            dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false, dataState: undefined } });\r\n        }\r\n\r\n    }\r\n}\r\nexport function handleClickDelete(SelectedScreenRights, userInfo, masterData, selectedcombo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"screenrights/deleteScreenRights\", {\r\n            \"screenrights\": SelectedScreenRights,\r\n            \"userinfo\": userInfo, \"nuserrolecode\": selectedcombo[\"nuserrolecode\"].value\r\n        })\r\n            .then(response => {\r\n                masterData = { ...masterData, ...response.data };\r\n\r\n              const dataState={skip:0,take:10}\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false,dataState,skip:undefined,take:undefined } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function filterColumnData(filterValue, filterParam) {\r\n    return function (dispatch) {\r\n        let masterData = filterParam.masterData;\r\n        let primaryKeyValue = 0;\r\n        let searchedData = undefined;\r\n        if (filterValue === \"\") {\r\n            if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\r\n                primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\r\n            }\r\n        }\r\n        else {\r\n            searchedData = searchData(filterValue, masterData[filterParam.inputListName]);\r\n\r\n            if (searchedData.length > 0) {\r\n                primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\r\n            }\r\n        }\r\n        if (primaryKeyValue !== 0) {\r\n            masterData[\"searchedData\"] = searchedData;\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject, [filterParam.primaryKeyField]: primaryKeyValue })\r\n                .then(response => {\r\n                    masterData = { ...masterData, ...response.data };\r\n                    sortData(masterData);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            masterData[filterParam.selectedObject] = undefined;\r\n            masterData[\"searchedData\"] = [];\r\n            Object.keys(masterData).forEach(item => {\r\n                if (item !== filterParam.inputListName && item !== filterParam.selectedObject\r\n                    && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1)\r\n                    masterData[item] = [];\r\n            })\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData, operation: null, modalName: undefined,\r\n                    loading: false\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\nexport function getCopyUseRoleScreenRights(screenName, operation, ncontrolCode, selectedcombo, userInfo, masterData, saveType) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"screenrights/getUserRole\", {\r\n            \"userinfo\": userInfo, \"nuserrolecode\": selectedcombo[\"nuserrolecode\"].value\r\n        })\r\n            .then(response => {\r\n                const roleMap = constructOptionList(response.data[\"Userrole\"] || [], \"nuserrolecode\", \"suserrolename\", false, false, true);\r\n                masterData = { ...masterData, Userrole: roleMap.get(\"OptionList\") };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false, screenName, operation, openModal: true, ncontrolCode, saveType: saveType,skip:undefined,take:undefined} });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response }));\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function copyScreenRights(userrolecode, nuserrolecode, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"screenrights/copyScreenRights\", {\r\n            \"userrolecode\": userrolecode,\r\n            \"nuserrolecode\": nuserrolecode,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false, loadEsign: false, openModal: false,skip:undefined,take:undefined } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openModal: false, } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\nexport function checkUserRoleScreenRights(nuserrolecode, data, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/screenrights/getCopyUserRoleCode\", { nuserrolecode: nuserrolecode, \"userinfo\": userInfo })\r\n            .then(response => {\r\n                const masterData = { ...data, ...response.data }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, loading: false, openModal: true, loadEsign: false, selectedRecord,skip:undefined,take:undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n\r\nexport const reload = (inputParam) => {\r\n    return (dispatch) => {\r\n      dispatch(initRequest(true));\r\n      return rsapi.post(\"/screenrights/getScreenRightsByUserRoleCode\", { nuserrolecode: inputParam.nuserrolecode.nuserrolecode, \"userinfo\": inputParam.inputData.userinfo })\r\n        .then(response => {\r\n          \r\n          let data = response.data;\r\n          let masterData={...inputParam.masterData,...data}\r\n          sortData(masterData);\r\n\r\n          let selectedcombo={};\r\n          selectedcombo[\"nuserrolecode\"]={value:inputParam.nuserrolecode.nuserrolecode,label:inputParam.nuserrolecode.suserrolename} \r\n      \r\n        //   const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { masterData: [], organisation: undefined, }\r\n        //   }\r\n         // dispatch(updateStore(updateInfo))\r\n  \r\n          dispatch({\r\n            type: DEFAULT_RETURN,\r\n            payload: {\r\n                selectedcombo,\r\n                comboitem:inputParam.comboitem,\r\n              masterData: masterData,\r\n              activeTestTab: data.activeTestTab,\r\n              inputParam: inputParam,\r\n              masterStatus: \"\",\r\n              userInfo: inputParam.inputData.userinfo,\r\n              loading: false, selectedId: null, selectedRecord: {},\r\n              dataState: undefined,\r\n              organisation: {\r\n                selectedNode: data.SelectedNode, selectedNodeName: data.SelectedNodeName,\r\n                primaryKeyValue: data.AddedChildPrimaryKey\r\n              },\r\n              displayName: inputParam.displayName,\r\n              reportFilePath: undefined,skip:0,take:10\r\n            }\r\n          })\r\n          // }\r\n  \r\n        })\r\n        .catch(error => {\r\n          if (error.response === undefined && error === \"Network Error\") {\r\n            dispatch({\r\n              type: REQUEST_FAILURE,\r\n              payload: {\r\n                error: \"Network Error\",\r\n                loading: false,\r\n              }\r\n            });\r\n          } \r\n        })\r\n    };\r\n  };\r\n  "]},"metadata":{},"sourceType":"module"}