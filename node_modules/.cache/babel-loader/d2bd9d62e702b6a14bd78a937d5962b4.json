{"ast":null,"code":"import _defineProperty from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{constructOptionList,sortData}from'../components/CommonScript';//getComboLabelValue,, searchData\nimport{toast}from'react-toastify';import Axios from'axios';import{initRequest}from'./LoginAction';import{intl}from'../components/App';import{ColumnType,queryTypeFilter}from'../components/Enumeration';export function getSQLQueryDetail(sqlQuery,userInfo,masterData){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"sqlquery/getSQLQuery\",{nsqlquerycode:sqlQuery.nsqlquerycode,\"userinfo\":userInfo}).then(function(response){masterData=_objectSpread(_objectSpread({},masterData),response.data);sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false,queryResult:[],queryList:[],param:[],Dparam:[],TBLName:[]}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response}));}});};}export function getSQLQueryComboService(screenName,operation,primaryKeyName,primaryKeyValue,masterData,userInfo,queryTypeCode,ncontrolCode){return function(dispatch){if(operation===\"create\"||operation===\"update\"){var selectedRecord={};var chartService=rsapi.post(\"sqlquery/getChartType\",{userinfo:userInfo});var tableService=rsapi.post(\"sqlquery/getTablesFromSchema\",{\"tabletypecode\":-1,\"moduleformcode\":0,userinfo:userInfo});var tableType=rsapi.post(\"sqlquery/getQueryTableType\",{userinfo:userInfo});var urlArray=[];if(operation===\"create\"){urlArray=[chartService,tableService,tableType];}else{var _rsapi$post;var queryById=rsapi.post(\"sqlquery/getActiveSQLQueryById\",(_rsapi$post={},_defineProperty(_rsapi$post,primaryKeyName,primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",userInfo),_rsapi$post));urlArray=[chartService,tableService,tableType,queryById];}if(queryTypeCode===queryTypeFilter.LIMSDASHBOARDQUERY){screenName=intl.formatMessage({id:\"IDS_LIMSDASHBOARDQUERY\"});}else if(queryTypeCode===queryTypeFilter.LIMSALERTQUERY){screenName=intl.formatMessage({id:\"IDS_LIMSALERTQUERY\"});}else if(queryTypeCode===queryTypeFilter.LIMSBARCODEQUERY){screenName=intl.formatMessage({id:\"IDS_LIMSBARCODEQUERY\"});}else if(queryTypeCode===queryTypeFilter.LIMSGENERALQUERY){screenName=intl.formatMessage({id:\"IDS_LIMSGENERALQUERY\"});}else{screenName=intl.formatMessage({id:\"IDS_LIMSFILTERQUERY\"});}dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var chart=[];if(operation===\"update\"){selectedRecord=response[3].data;chart.push({\"value\":response[3].data[\"ncharttypecode\"],\"label\":response[3].data[\"schartname\"]});selectedRecord[\"ncharttypecode\"]=chart[0];}var tableName=undefined;var tableNameOnly=[];Object.values(response[1].data[0]).forEach(function(p){if(p.stable!==tableName){tableName=p.stable;tableNameOnly.push({tableName:tableName});}});dispatch({type:DEFAULT_RETURN,payload:{chartList:response[0].data||[],tableList:response[1].data[0]||[],tableType:response[2].data||[],tableName:tableNameOnly||[],operation:operation,screenName:screenName,selectedRecord:selectedRecord,openModal:true,ncontrolCode:ncontrolCode,loading:false,showExecute:true,showParam:false,showValidate:true,showSave:false,slideResult:[],slideList:[],resultStatus:'',param:[],Dparam:[],TBLName:[],parentPopUpSize:\"xl\"}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response.data}));}});}// else {\n// }\n};}export function getTablesName(TableTypeCode,FormCode){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"sqlquery/getTablesFromSchema\",{//\"tabletypecode\": parseInt(selectedRecord[\"ntabletypecode\"].value),\"moduleformcode\": parseInt(selectedRecord[\"nformcode\"] ? selectedRecord[\"nformcode\"].value: 0)\n\"tabletypecode\":parseInt(TableTypeCode),\"moduleformcode\":parseInt(FormCode)}).then(function(response){var tableName=undefined;var tableNameOnly=[];Object.values(response.data[0]).forEach(function(p){if(p.stable!==tableName){tableName=p.stable;tableNameOnly.push({tableName:tableName});}});dispatch({type:DEFAULT_RETURN,payload:{tableList:response.data[0]||[],tableName:tableNameOnly||[],loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response}));}});};}export function getModuleFormName(TableTypeCode,userInfo){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"sqlquery/getModuleFormName\",{\"tabletypecode\":parseInt(TableTypeCode),\"userinfo\":userInfo}).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{moduleFormName:response.data[0]||[],loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response}));}});};}export function executeUserQuery(inputParam){return function(dispatch){var Query=inputParam.query;var screenFlag=inputParam.screenFlag;var slideOperation=inputParam.slideOperation;var userInfo=inputParam.userInfo;var screenName=inputParam.screenName;var data=inputParam.data;dispatch(initRequest(true));rsapi.post(\"/sqlquery/getSchemaQueryOutput\",{\"query\":Query,userinfo:userInfo,\"returnoption\":\"LIST\"}).then(function(response){var querycol=response.data[1];var keyarray=[];var temparray=[];var validColumns=true;if(querycol.length>0){keyarray=Object.keys(querycol[0]);var width=\"200px\";if(keyarray.length===2){width=\"300px\";}for(var i=0;i<keyarray.length;i++){if(keyarray[i]!==null&&keyarray[i]!==''){temparray.push({\"idsName\":keyarray[i],\"dataField\":keyarray[i],\"width\":width});}else{validColumns=false;}}}var respObject={loading:false,slideResult:response.data[1]||[],slideList:temparray||[],resultStatus:response.data[0]||'',openModal:true,showParam:true,screenFlag:screenFlag};if(screenFlag===\"showQuery\"){if(screenName===\"Results\"){respObject=_objectSpread(_objectSpread({},respObject),{},{showExecute:false,operation:\"view\",screenName:screenName},data);}else{respObject=_objectSpread(_objectSpread({},respObject),{},{showExecute:true,operation:slideOperation});}}else{if(screenFlag===\"NoParam\"){respObject=_objectSpread(_objectSpread({},respObject),{},{screenName:\"Results\",operation:\"view\",queryResult:response.data[1]||[],queryList:temparray||[],showExecute:inputParam.showExecute,showValidate:inputParam.showValidate,showSave:inputParam.showSave,noSave:inputParam.noSave});}else{respObject=_objectSpread(_objectSpread({},respObject),{},{queryResult:response.data[1]||[],showExecute:true,showValidate:false,operation:\"create\",screenName:\"Parameter for Results\",queryList:temparray||[]});}}if(validColumns){dispatch({type:DEFAULT_RETURN,payload:_objectSpread({},respObject)});}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.warn(intl.formatMessage({id:\"IDS_MAKESUREALLFIELDSHAVENAMEORALIASNAME\"}));}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});//toast.error(intl.formatMessage({ id: error.message }));\nif(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function executeAlertUserQuery(Query,userInfo){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/sqlquery/getSchemaQueryOutput\",{\"query\":Query,userinfo:userInfo}).then(function(response){var resultCount=response.data[1];dispatch({type:DEFAULT_RETURN,payload:{loading:false,resultCount:resultCount}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.error(intl.formatMessage({id:error.message}));});};}export function comboChangeQueryType(querytypecode,data,userInfo){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/sqlquery/getSQLQueryByQueryTypeCode\",{nquerytypecode:querytypecode,\"userinfo\":userInfo}).then(function(response){var masterData=_objectSpread(_objectSpread(_objectSpread({},data),response.data),{},{searchedData:undefined});sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false,queryList:[]}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.error(intl.formatMessage({id:error.message}));});};}export function getColumnNamesByTableName(tableName,columnList){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/sqlquery/getColumnsFromTable\",{\"tablename\":tableName}).then(function(response){columnList=columnList||new Map();columnList.set(Object.keys(response.data)[0],Object.values(response.data)[0]);dispatch({type:DEFAULT_RETURN,payload:{columnList:columnList,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.error(intl.formatMessage({id:error.message}));});};}export function comboColumnValues(tableName,fieldName){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/sqlquery/getColumnValues\",{\"tablename\":tableName,\"fieldname\":fieldName}).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{fieldResult:response.data[1]||[],loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.error(intl.formatMessage({id:error.message}));});};}export function getDatabaseTables(userInfo,sqlQuery,inputParam){return function(dispatch){dispatch(initRequest(true));var url=\"\";if(sqlQuery){url=\"/sqlquery/getdatabasetables\";}else{url=\"/sqlquery/getdatabaseviews\";}rsapi.post(url,{userinfo:userInfo}).then(function(response){if(sqlQuery){var tableListMap=constructOptionList(response.data[\"databaseTableList\"]||[],\"stablename\",\"displayname\",false,false,false);dispatch({type:DEFAULT_RETURN,payload:_objectSpread({loading:false,databaseTableList:tableListMap.get(\"OptionList\"),openPortalModal:true,screenName:\"IDS_QUERYBUILDER\",sqlQuery:sqlQuery},inputParam)});}else{var viewListMap=constructOptionList(response.data[\"databaseviewList\"]||[],\"sviewname\",\"displayname\",false,false,false);dispatch({type:DEFAULT_RETURN,payload:_objectSpread({loading:false,databaseviewList:viewListMap.get(\"OptionList\"),openPortalModal:true,screenName:\"IDS_QUERYBUILDER\",sqlQuery:sqlQuery},inputParam)});}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function executeQuery(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/sqlquery/executequery\",_objectSpread({},inputParam)).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{loading:false,selectedRecord:_objectSpread(_objectSpread({},inputParam.selectedRecord),{},{sstatus:\"SUCCESS\"})// ,\n// resultStatus: \"Success\",\n// screenName: \"Results\",\n// openModal: true\n}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getForeignTable(inputParam,type){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/sqlquery/getforeigntable\",_objectSpread({},inputParam)).then(function(response){var userInfo=inputParam.userinfo;var foreignTableList=response.data[\"foreignTableList\"];var jstaticcolumns=foreignTableList[0]?foreignTableList[0].jstaticcolumns||[]:[];var jdynamiccolumns=foreignTableList[0]?foreignTableList[0].jdynamiccolumns||[]:[];var jmultilingualcolumn=foreignTableList[0]?foreignTableList[0].jmultilingualcolumn||[]:[];var jnumericcolumns=foreignTableList[0]?foreignTableList[0].jnumericcolumns||[]:[];var sprimarykeyname=foreignTableList[0]?foreignTableList[0].sprimarykeyname:\"\";var stablename=foreignTableList[0]?foreignTableList[0].stablename:\"\";var defaultColumn={};var comboData=[];jstaticcolumns.map(function(items){comboData.push({label:items.displayname[userInfo.slanguagetypecode],value:items.columnname,items:_objectSpread(_objectSpread({},items),{},{stablename:stablename,sprimarykeyname:sprimarykeyname,columntype:ColumnType.STATICCOLUMN})});if(items.default){defaultColumn={label:items.displayname[userInfo.slanguagetypecode],value:items.columnname,items:_objectSpread(_objectSpread({},items),{},{stablename:stablename,sprimarykeyname:sprimarykeyname,columntype:ColumnType.STATICCOLUMN})};}});jdynamiccolumns.map(function(items){comboData.push({label:items.displayname[userInfo.slanguagetypecode],value:items.columnname,items:_objectSpread(_objectSpread({},items),{},{stablename:stablename,sprimarykeyname:sprimarykeyname,columntype:ColumnType.DYNAMICCOLUMN})});if(items.default){defaultColumn={label:items.displayname[userInfo.slanguagetypecode],value:items.columnname,items:_objectSpread(_objectSpread({},items),{},{stablename:stablename,sprimarykeyname:sprimarykeyname,columntype:ColumnType.DYNAMICCOLUMN})};}});jmultilingualcolumn.map(function(items){comboData.push({label:items.displayname[userInfo.slanguagetypecode],value:items.columnname,items:_objectSpread(_objectSpread({},items),{},{stablename:stablename,sprimarykeyname:sprimarykeyname,columntype:ColumnType.MULTILINGUALCOLUMN})});if(items.default){defaultColumn={label:items.displayname[userInfo.slanguagetypecode],value:items.columnname,items:_objectSpread(_objectSpread({},items),{},{stablename:stablename,sprimarykeyname:sprimarykeyname,columntype:ColumnType.MULTILINGUALCOLUMN})};}});jnumericcolumns.map(function(items){comboData.push({label:items.displayname[userInfo.slanguagetypecode],value:items.foriegntablePK,items:_objectSpread(_objectSpread({},items),{},{stablename:stablename,sprimarykeyname:sprimarykeyname,columntype:ColumnType.NUMERICCOLUMN})});if(items.default){defaultColumn={label:items.displayname[userInfo.slanguagetypecode],value:items.foriegntablePK,items:_objectSpread(_objectSpread({},items),{},{stablename:stablename,sprimarykeyname:sprimarykeyname,columntype:ColumnType.NUMERICCOLUMN})};}});var tableColumnList=[];var tempdata={};if(type===\"column\"){tableColumnList=inputParam.foreignTableColumnList||[];tableColumnList[inputParam.index]=comboData;tempdata={foreignTableColumnList:tableColumnList};}else{tableColumnList=inputParam.tableColumnList||[];tableColumnList[inputParam.index]=comboData;tempdata={tableColumnList:tableColumnList};}dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({loading:false},tempdata),{},{selectedRecord:inputParam.selectedRecord})});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getViewColumns(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/sqlquery/getdatabaseviewscolumns\",{sviewname:inputParam.sviewname,userinfo:inputParam.userinfo}).then(function(response){var userInfo=inputParam.userinfo;var languageCode=userInfo.slanguagetypecode?userInfo.slanguagetypecode:\"en-US\";var responseData=response.data[\"viewColumnList\"]||[];var jsonData=responseData[0]?responseData[0].jsondata:[];var defaultColumn={};var comboData=[];jsonData.map(function(items){comboData.push({label:items.displayname[languageCode],value:items.columnname,items:items});if(items.default){defaultColumn={label:items.displayname[languageCode],value:items.columnname,items:items};}});dispatch({type:DEFAULT_RETURN,payload:{loading:false,viewColumnList:comboData,selectedRecord:inputParam.selectedRecord}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getMasterData(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/sqlquery/getmasterdata\",_objectSpread({},inputParam)).then(function(response){// const optionId = inputParam.data.sforeigncolumnname;\nvar tableListMap=constructOptionList(response.data[\"masterdata\"]||[],inputParam.optionId,\"sdisplayname\",false,false,false);var tempData={};if(inputParam.data.nflag===1){var masterdata=[];masterdata[inputParam.index]=tableListMap.get(\"OptionList\");tempData={masterdata:masterdata};}else{var viewMasterListByRule=[];viewMasterListByRule[inputParam.index]=tableListMap.get(\"OptionList\");tempData={viewMasterListByRule:viewMasterListByRule};}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({loading:false,selectedRecord:inputParam.selectedRecord},tempData)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/SQLBuilderAction.js"],"names":["rsapi","DEFAULT_RETURN","constructOptionList","sortData","toast","Axios","initRequest","intl","ColumnType","queryTypeFilter","getSQLQueryDetail","sqlQuery","userInfo","masterData","dispatch","post","nsqlquerycode","then","response","data","type","payload","loading","queryResult","queryList","param","Dparam","TBLName","catch","error","status","formatMessage","id","message","warn","getSQLQueryComboService","screenName","operation","primaryKeyName","primaryKeyValue","queryTypeCode","ncontrolCode","selectedRecord","chartService","userinfo","tableService","tableType","urlArray","queryById","LIMSDASHBOARDQUERY","LIMSALERTQUERY","LIMSBARCODEQUERY","LIMSGENERALQUERY","all","chart","push","tableName","undefined","tableNameOnly","Object","values","forEach","p","stable","chartList","tableList","openModal","showExecute","showParam","showValidate","showSave","slideResult","slideList","resultStatus","parentPopUpSize","getTablesName","TableTypeCode","FormCode","parseInt","getModuleFormName","moduleFormName","executeUserQuery","inputParam","Query","query","screenFlag","slideOperation","querycol","keyarray","temparray","validColumns","length","keys","width","i","respObject","noSave","executeAlertUserQuery","resultCount","comboChangeQueryType","querytypecode","nquerytypecode","searchedData","getColumnNamesByTableName","columnList","Map","set","comboColumnValues","fieldName","fieldResult","getDatabaseTables","url","tableListMap","databaseTableList","get","openPortalModal","viewListMap","databaseviewList","executeQuery","sstatus","getForeignTable","foreignTableList","jstaticcolumns","jdynamiccolumns","jmultilingualcolumn","jnumericcolumns","sprimarykeyname","stablename","defaultColumn","comboData","map","items","label","displayname","slanguagetypecode","value","columnname","columntype","STATICCOLUMN","default","DYNAMICCOLUMN","MULTILINGUALCOLUMN","foriegntablePK","NUMERICCOLUMN","tableColumnList","tempdata","foreignTableColumnList","index","getViewColumns","sviewname","languageCode","responseData","jsonData","jsondata","viewColumnList","getMasterData","optionId","tempData","nflag","masterdata","viewMasterListByRule"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    constructOptionList,\r\n    sortData\r\n} from '../components/CommonScript' //getComboLabelValue,, searchData\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport {\r\n    ColumnType,\r\n    queryTypeFilter\r\n} from '../components/Enumeration';\r\n\r\n\r\n\r\nexport function getSQLQueryDetail(sqlQuery, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"sqlquery/getSQLQuery\", {\r\n                nsqlquerycode: sqlQuery.nsqlquerycode,\r\n                \"userinfo\": userInfo\r\n            })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data\r\n                };\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        queryResult: [],\r\n                        queryList: [],\r\n                        param: [],\r\n                        Dparam: [],\r\n                        TBLName: []\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response\r\n                    }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSQLQueryComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, queryTypeCode, ncontrolCode) {\r\n    return function (dispatch) {\r\n\r\n        if (operation === \"create\" || operation === \"update\") {\r\n\r\n            let selectedRecord = {};\r\n            const chartService = rsapi.post(\"sqlquery/getChartType\", {\r\n                userinfo: userInfo\r\n            });\r\n            const tableService = rsapi.post(\"sqlquery/getTablesFromSchema\", {\r\n                \"tabletypecode\": -1,\r\n                \"moduleformcode\": 0,\r\n                userinfo: userInfo\r\n            });\r\n            const tableType = rsapi.post(\"sqlquery/getQueryTableType\", {\r\n                userinfo: userInfo\r\n            });\r\n            let urlArray = [];\r\n            if (operation === \"create\") {\r\n\r\n                urlArray = [chartService, tableService, tableType];\r\n            } else {\r\n                const queryById = rsapi.post(\"sqlquery/getActiveSQLQueryById\", {\r\n                    [primaryKeyName]: primaryKeyValue,\r\n                    \"userinfo\": userInfo\r\n                });\r\n\r\n                urlArray = [chartService, tableService, tableType, queryById];\r\n            }\r\n\r\n            if (queryTypeCode === queryTypeFilter.LIMSDASHBOARDQUERY) {\r\n                screenName = intl.formatMessage({\r\n                    id: \"IDS_LIMSDASHBOARDQUERY\"\r\n                });\r\n            } else if (queryTypeCode === queryTypeFilter.LIMSALERTQUERY) {\r\n                screenName = intl.formatMessage({\r\n                    id: \"IDS_LIMSALERTQUERY\"\r\n                });\r\n            } else if (queryTypeCode === queryTypeFilter.LIMSBARCODEQUERY) {\r\n                screenName = intl.formatMessage({\r\n                    id: \"IDS_LIMSBARCODEQUERY\"\r\n                });\r\n            } else if (queryTypeCode === queryTypeFilter.LIMSGENERALQUERY) {\r\n                screenName = intl.formatMessage({\r\n                    id: \"IDS_LIMSGENERALQUERY\"\r\n                });\r\n            } else {\r\n                screenName = intl.formatMessage({\r\n                    id: \"IDS_LIMSFILTERQUERY\"\r\n                });\r\n            }\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n\r\n                    let chart = [];\r\n                    if (operation === \"update\") {\r\n                        selectedRecord = response[3].data;\r\n                        chart.push({\r\n                            \"value\": response[3].data[\"ncharttypecode\"],\r\n                            \"label\": response[3].data[\"schartname\"]\r\n                        });\r\n                        selectedRecord[\"ncharttypecode\"] = chart[0];\r\n                    }\r\n\r\n                    let tableName = undefined;\r\n                    let tableNameOnly = [];\r\n                    Object.values(response[1].data[0]).forEach(p => {\r\n                        if (p.stable !== tableName) {\r\n                            tableName = p.stable;\r\n                            tableNameOnly.push({\r\n                                tableName\r\n                            });\r\n                        }\r\n                    })\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            chartList: response[0].data || [],\r\n                            tableList: response[1].data[0] || [],\r\n                            tableType: response[2].data || [],\r\n                            tableName: tableNameOnly || [],\r\n                            operation,\r\n                            screenName,\r\n                            selectedRecord,\r\n                            openModal: true,\r\n                            ncontrolCode,\r\n                            loading: false,\r\n                            showExecute: true,\r\n                            showParam: false,\r\n                            showValidate: true,\r\n                            showSave: false,\r\n                            slideResult: [],\r\n                            slideList: [],\r\n                            resultStatus: '',\r\n                            param: [],\r\n                            Dparam: [],\r\n                            TBLName: [],\r\n                            parentPopUpSize: \"xl\"\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({\r\n                            id: error.message\r\n                        }));\r\n                    } else {\r\n\r\n                        toast.warn(intl.formatMessage({\r\n                            id: error.response.data\r\n                        }));\r\n                    }\r\n                })\r\n\r\n\r\n\r\n        }\r\n        // else {\r\n        // }\r\n    }\r\n}\r\n\r\nexport function getTablesName(TableTypeCode, FormCode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"sqlquery/getTablesFromSchema\", {\r\n                //\"tabletypecode\": parseInt(selectedRecord[\"ntabletypecode\"].value),\"moduleformcode\": parseInt(selectedRecord[\"nformcode\"] ? selectedRecord[\"nformcode\"].value: 0)\r\n                \"tabletypecode\": parseInt(TableTypeCode),\r\n                \"moduleformcode\": parseInt(FormCode)\r\n\r\n            })\r\n            .then(response => {\r\n\r\n                let tableName = undefined;\r\n                let tableNameOnly = [];\r\n                Object.values(response.data[0]).forEach(p => {\r\n                    if (p.stable !== tableName) {\r\n                        tableName = p.stable;\r\n                        tableNameOnly.push({\r\n                            tableName\r\n                        });\r\n                    }\r\n                })\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        tableList: response.data[0] || [],\r\n                        tableName: tableNameOnly || [],\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response\r\n                    }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getModuleFormName(TableTypeCode, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"sqlquery/getModuleFormName\", {\r\n                \"tabletypecode\": parseInt(TableTypeCode),\r\n                \"userinfo\": userInfo\r\n\r\n            })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        moduleFormName: response.data[0] || [],\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response\r\n                    }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function executeUserQuery(inputParam) {\r\n    return function (dispatch) {\r\n        const Query = inputParam.query;\r\n        const screenFlag = inputParam.screenFlag;\r\n        const slideOperation = inputParam.slideOperation;\r\n        const userInfo = inputParam.userInfo;\r\n        const screenName = inputParam.screenName\r\n        const data = inputParam.data;\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getSchemaQueryOutput\", {\r\n                \"query\": Query,\r\n                userinfo: userInfo,\r\n                \"returnoption\": \"LIST\"\r\n            })\r\n            .then(response => {\r\n                const querycol = response.data[1];\r\n                let keyarray = [];\r\n                let temparray = [];\r\n                let validColumns = true;\r\n                if (querycol.length > 0) {\r\n                    keyarray = Object.keys(querycol[0]);\r\n                    let width = \"200px\"\r\n                    if (keyarray.length === 2) {\r\n                        width = \"300px\"\r\n                    }\r\n                    for (let i = 0; i < keyarray.length; i++) {\r\n                        if (keyarray[i] !== null && keyarray[i] !== '') {\r\n                            temparray.push({\r\n                                \"idsName\": keyarray[i],\r\n                                \"dataField\": keyarray[i],\r\n                                \"width\": width\r\n                            });\r\n                        } else {\r\n                            validColumns = false;\r\n                        }\r\n                    }\r\n                }\r\n                let respObject = {\r\n                    loading: false,\r\n                    slideResult: response.data[1] || [],\r\n                    slideList: temparray || [],\r\n                    resultStatus: response.data[0] || '',\r\n                    openModal: true,\r\n                    showParam: true,\r\n                    screenFlag\r\n                }\r\n\r\n                if (screenFlag === \"showQuery\") {\r\n                    if (screenName === \"Results\") {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            showExecute: false,\r\n                            operation: \"view\",\r\n                            screenName: screenName,\r\n                            ...data\r\n                        }\r\n                    } else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            showExecute: true,\r\n                            operation: slideOperation,\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (screenFlag === \"NoParam\") {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            screenName: \"Results\",\r\n                            operation: \"view\",\r\n                            queryResult: response.data[1] || [],\r\n                            queryList: temparray || [],\r\n                            showExecute: inputParam.showExecute,\r\n                            showValidate: inputParam.showValidate,\r\n                            showSave: inputParam.showSave,\r\n                            noSave: inputParam.noSave,\r\n                        }\r\n                    } else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            queryResult: response.data[1] || [],\r\n                            showExecute: true,\r\n                            showValidate: false,\r\n                            operation: \"create\",\r\n                            screenName: \"Parameter for Results\",\r\n                            queryList: temparray || [],\r\n                        }\r\n                    }\r\n                }\r\n                if (validColumns) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ...respObject\r\n                        }\r\n                    });\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    toast.warn(intl.formatMessage({\r\n                        id: \"IDS_MAKESUREALLFIELDSHAVENAMEORALIASNAME\"\r\n                    }))\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n                //toast.error(intl.formatMessage({ id: error.message }));\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function executeAlertUserQuery(Query, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getSchemaQueryOutput\", {\r\n                \"query\": Query,\r\n                userinfo: userInfo\r\n            })\r\n            .then(response => {\r\n\r\n\r\n                const resultCount = response.data[1];\r\n\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        resultCount: resultCount\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.error(intl.formatMessage({\r\n                    id: error.message\r\n                }));\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function comboChangeQueryType(querytypecode, data, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getSQLQueryByQueryTypeCode\", {\r\n                nquerytypecode: querytypecode,\r\n                \"userinfo\": userInfo\r\n            })\r\n            .then(response => {\r\n\r\n                const masterData = {\r\n                    ...data,\r\n                    ...response.data,\r\n                    searchedData: undefined\r\n                }\r\n\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        queryList: []\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.error(intl.formatMessage({\r\n                    id: error.message\r\n                }));\r\n            });\r\n    }\r\n}\r\n\r\nexport function getColumnNamesByTableName(tableName, columnList) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getColumnsFromTable\", {\r\n                \"tablename\": tableName\r\n            })\r\n            .then(response => {\r\n\r\n                columnList = columnList || new Map();\r\n                columnList.set(Object.keys(response.data)[0], Object.values(response.data)[0]);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        columnList,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.error(intl.formatMessage({\r\n                    id: error.message\r\n                }));\r\n            });\r\n    }\r\n}\r\n\r\nexport function comboColumnValues(tableName, fieldName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getColumnValues\", {\r\n                \"tablename\": tableName,\r\n                \"fieldname\": fieldName\r\n            })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        fieldResult: response.data[1] || [],\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.error(intl.formatMessage({\r\n                    id: error.message\r\n                }));\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function getDatabaseTables(userInfo, sqlQuery, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let url = \"\";\r\n        if(sqlQuery) {\r\n            url = \"/sqlquery/getdatabasetables\";\r\n        } else {\r\n            url = \"/sqlquery/getdatabaseviews\";\r\n        }\r\n        rsapi.post(url, {\r\n                userinfo: userInfo\r\n            })\r\n            .then(response => {\r\n                if(sqlQuery) {\r\n                    const tableListMap = constructOptionList(response.data[\"databaseTableList\"] || [], \"stablename\", \"displayname\", false, false, false);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            databaseTableList: tableListMap.get(\"OptionList\"),\r\n                            openPortalModal: true,\r\n                            screenName: \"IDS_QUERYBUILDER\",\r\n                            sqlQuery,\r\n                            ...inputParam\r\n                        }\r\n                    });\r\n                } else {\r\n                    const viewListMap = constructOptionList(response.data[\"databaseviewList\"] || [], \"sviewname\", \"displayname\", false, false, false);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            databaseviewList: viewListMap.get(\"OptionList\"),\r\n                            openPortalModal: true,\r\n                            screenName: \"IDS_QUERYBUILDER\",\r\n                            sqlQuery,\r\n                            ...inputParam\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function executeQuery(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/executequery\", {\r\n                ...inputParam\r\n            })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            sstatus: \"SUCCESS\"\r\n                        }\r\n                        // ,\r\n                        // resultStatus: \"Success\",\r\n                        // screenName: \"Results\",\r\n                        // openModal: true\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getForeignTable(inputParam, type) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getforeigntable\", {\r\n                ...inputParam\r\n            })\r\n            .then(response => {\r\n                const userInfo = inputParam.userinfo;\r\n                const foreignTableList = response.data[\"foreignTableList\"];\r\n\r\n                const jstaticcolumns = foreignTableList[0]? (foreignTableList[0].jstaticcolumns || []): [];\r\n                const jdynamiccolumns = foreignTableList[0]? (foreignTableList[0].jdynamiccolumns || []): [];\r\n                const jmultilingualcolumn = foreignTableList[0]? (foreignTableList[0].jmultilingualcolumn || []): [];\r\n                const jnumericcolumns = foreignTableList[0]? (foreignTableList[0].jnumericcolumns || []): [];\r\n                const sprimarykeyname = foreignTableList[0]? foreignTableList[0].sprimarykeyname: \"\";\r\n                const stablename = foreignTableList[0]? foreignTableList[0].stablename: \"\";\r\n                \r\n                let defaultColumn = {};\r\n                let comboData = []\r\n                jstaticcolumns.map(items => {\r\n                    comboData.push({\r\n                        label: items.displayname[userInfo.slanguagetypecode],\r\n                        value: items.columnname,\r\n                        items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.STATICCOLUMN }\r\n                    })\r\n                    if (items.default) {\r\n                        defaultColumn = {\r\n                            label: items.displayname[userInfo.slanguagetypecode],\r\n                            value: items.columnname,\r\n                            items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.STATICCOLUMN }\r\n                        }\r\n                    }\r\n                });\r\n                jdynamiccolumns.map(items => {\r\n                    comboData.push({\r\n                        label: items.displayname[userInfo.slanguagetypecode],\r\n                        value: items.columnname,\r\n                        items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.DYNAMICCOLUMN }\r\n                    })\r\n                    if (items.default) {\r\n                        defaultColumn = {\r\n                            label: items.displayname[userInfo.slanguagetypecode],\r\n                            value: items.columnname,\r\n                            items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.DYNAMICCOLUMN }\r\n                        }\r\n                    }\r\n                });\r\n                jmultilingualcolumn.map(items => {\r\n                    comboData.push({\r\n                        label: items.displayname[userInfo.slanguagetypecode],\r\n                        value: items.columnname,\r\n                        items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.MULTILINGUALCOLUMN }\r\n                    })\r\n                    if (items.default) {\r\n                        defaultColumn = {\r\n                            label: items.displayname[userInfo.slanguagetypecode],\r\n                            value: items.columnname,\r\n                            items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.MULTILINGUALCOLUMN }\r\n                        }\r\n                    }\r\n                });\r\n                jnumericcolumns.map(items => {\r\n                    comboData.push({\r\n                        label: items.displayname[userInfo.slanguagetypecode],\r\n                        value: items.foriegntablePK,\r\n                        items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.NUMERICCOLUMN }\r\n                    })\r\n                    if (items.default) {\r\n                        defaultColumn = {\r\n                            label: items.displayname[userInfo.slanguagetypecode],\r\n                            value: items.foriegntablePK,\r\n                            items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.NUMERICCOLUMN }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                let tableColumnList = [];\r\n                let tempdata = {};\r\n                if(type === \"column\") {\r\n                    tableColumnList = inputParam.foreignTableColumnList || [];\r\n                    tableColumnList[inputParam.index] = comboData\r\n                    tempdata = { foreignTableColumnList: tableColumnList };\r\n                } else {\r\n                    tableColumnList = inputParam.tableColumnList || [];\r\n                    tableColumnList[inputParam.index] = comboData;\r\n                    tempdata = { tableColumnList };\r\n                }        \r\n                      \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        ...tempdata,\r\n                        selectedRecord: inputParam.selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getViewColumns(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getdatabaseviewscolumns\", {\r\n                sviewname: inputParam.sviewname,\r\n                userinfo: inputParam.userinfo\r\n            })\r\n            .then(response => {\r\n\r\n                const userInfo = inputParam.userinfo;\r\n                let languageCode = userInfo.slanguagetypecode ? userInfo.slanguagetypecode : \"en-US\";\r\n                const responseData = response.data[\"viewColumnList\"] || [];\r\n                const jsonData = responseData[0]? responseData[0].jsondata: [];\r\n                let defaultColumn = {};\r\n                let comboData = []\r\n                jsonData.map(items => {\r\n                    comboData.push({\r\n                        label: items.displayname[languageCode],\r\n                        value: items.columnname,\r\n                        items\r\n                    })\r\n                    if (items.default) {\r\n                        defaultColumn = {\r\n                            label: items.displayname[languageCode],\r\n                            value: items.columnname,\r\n                            items\r\n                        }\r\n                    }\r\n                });\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        viewColumnList: comboData,\r\n                        selectedRecord: inputParam.selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function getMasterData(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getmasterdata\", {\r\n              ...inputParam\r\n            })\r\n            .then(response => {\r\n                \r\n                // const optionId = inputParam.data.sforeigncolumnname;\r\n                const tableListMap = constructOptionList(response.data[\"masterdata\"] || [], inputParam.optionId, \"sdisplayname\", false, false, false);\r\n                \r\n                let tempData = {};\r\n                if(inputParam.data.nflag === 1) {\r\n                    let masterdata = [];\r\n                    masterdata[inputParam.index] = tableListMap.get(\"OptionList\");\r\n                    tempData = { masterdata };\r\n                } else {\r\n                    let viewMasterListByRule = [];\r\n                    viewMasterListByRule[inputParam.index] = tableListMap.get(\"OptionList\");\r\n                    tempData = { viewMasterListByRule };\r\n                }\r\n                \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        selectedRecord: inputParam.selectedRecord,\r\n                        ...tempData\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}