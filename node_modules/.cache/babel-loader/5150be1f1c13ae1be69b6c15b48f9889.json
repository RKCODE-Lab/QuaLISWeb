{"ast":null,"code":"import _defineProperty from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _toConsumableArray from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{toast}from'react-toastify';import{initRequest}from'./LoginAction';import{constructOptionList,replaceUpdatedObject,sortData,fillRecordBasedOnCheckBoxSelection,getSameRecordFromTwoArrays,getRecordBasedOnPrimaryKeyName,filterRecordBasedOnPrimaryKeyName,reArrangeArrays,rearrangeDateFormat}from'../components/CommonScript';import{postCRUDOrganiseTransSearch}from'./ServiceAction';import Axios from'axios';import{transactionStatus}from'../components/Enumeration';export function getRegTypeJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getRegistrationTypeBySampleType\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultSampleTypeValue:inputData.defaultSampleTypeValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getRegSubTypeJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getRegistrationsubTypeByRegType\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultRegTypeValue:inputData.defaultRegTypeValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getAppConfigVersionJobAllocation(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getApprovalConfigVersionByRegSubType\",inputParam.inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputParam.masterData),responseData),{},{defaultRegSubTypeValue:inputParam.masterData.defaultRegSubTypeValue,RegSubTypeValue:inputParam.masterData.realRegSubTypeValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getSectionJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getTestComboBySection\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultUserSectionValue:inputData.masterData.defaultUserSectionValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getFilterStatusJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getTestComboBySection\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultFilterStatusValue:inputData.masterData.defaultFilterStatusValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getFilterStatusSectionJobAllocation(inputData){return function(dispatch){var testStatusService=rsapi.post(\"joballocation/getFilterStatusByApproveVersion\",inputData);var sectionService=rsapi.post(\"joballocation/getSectionByApproveVersion\",inputData);var urlArray=[];urlArray=[testStatusService,sectionService];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultApprovalVersionValue:inputData.masterData.defaultApprovalVersionValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getDesignTemplateJobAllocation(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getDesignTemplateByApprovalConfigVersion\",inputParam).then(function(response){if(response.data[\"Success\"]){toast.warn(response.data.Success);}var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputParam.masterData),responseData),{},{defaultApprovalVersionValue:inputParam.masterData.defaultApprovalVersionValue,ApprovalVersionValue:inputParam.masterData.realApprovalVersionValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getTestStatusJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getFilterStatusByApproveVersion\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{RegSubTypeValue:inputData.RegSubTypeValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getJobAllcationFilterSubmit(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getJobAllocationDetails\",inputParam.inputData).then(function(response){var responseData=_objectSpread({},response.data);var masterData=_objectSpread(_objectSpread({},inputParam.masterData),responseData);if(inputParam.searchSampleRef!==undefined&&inputParam.searchSampleRef.current!==null){inputParam.searchSampleRef.current.value=\"\";masterData['searchedSample']=undefined;}if(inputParam.searchSubSampleRef!==undefined&&inputParam.searchSubSampleRef.current!==null){inputParam.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputParam.searchTestRef!==undefined&&inputParam.searchTestRef.current!==null){inputParam.searchTestRef.current.value=\"\";masterData['searchedTest']=undefined;}sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false,showTest:inputParam.inputData.showTest,activeTestTab:inputParam.inputData.activeTestTab,showFilter:false,sampleskip:0,sampletake:inputParam.sampletake,subsampleskip:0,subsampletake:inputParam.subsampletake,testskip:0,testtake:inputParam.testtake,documentDataState:_objectSpread(_objectSpread({},inputParam.documentDataState),{},{sort:undefined,filter:undefined}),testCommentDataState:_objectSpread(_objectSpread({},inputParam.testCommentDataState),{},{sort:undefined,filter:undefined})}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function ReceiveinLabStatusWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/CreateReceiveinLab\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"JA_SAMPLE\"],inputParam.inputData.masterData.JA_SAMPLE,\"nregistrationsectioncode\");replaceUpdatedObject(response.data[\"JA_SUBSAMPLE\"],inputParam.inputData.masterData.JA_SUBSAMPLE,\"ntransactionsamplecode\");replaceUpdatedObject(response.data[\"JA_TEST\"],inputParam.inputData.masterData.JA_TEST,\"ntransactiontestcode\");delete response.data[\"JA_SAMPLE\"];delete response.data[\"JA_SUBSAMPLE\"];delete response.data[\"JA_TEST\"];var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data),{},{JASelectedSample:replaceUpdatedObject(response.data[\"JASelectedSample\"],inputParam.inputData.masterData.JASelectedSample,\"nregistrationsectioncode\"),JASelectedSubSample:replaceUpdatedObject(response.data[\"JASelectedSubSample\"],inputParam.inputData.masterData.JASelectedSubSample,\"ntransactionsamplecode\"),JASelectedTest:replaceUpdatedObject(response.data[\"JASelectedTest\"],inputParam.inputData.masterData.JASelectedTest,\"ntransactiontestcode\")});var respObject=_objectSpread(_objectSpread({masterData:masterData},inputParam.inputData),{},{loading:false,loadEsign:false,openModal:false,showSample:undefined});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){//toast.error(error.message); \ndispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getAllottedTestWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getAllotDetails\",inputParam.inputData).then(function(response){var TechniqueMap=constructOptionList(response.data.Technique||[],\"ntechniquecode\",\"stechniquename\",undefined,undefined,false);var UsersMap=constructOptionList(response.data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);var UsersPeriodMap=constructOptionList(response.data.Period||[],\"nuserperiodcode\",\"speriodname\",undefined,undefined,false);var InstrumentCategoryMap=constructOptionList(response.data.InstrumentCategory||[],\"ninstrumentcatcode\",\"sinstrumentcatname\",undefined,undefined,false);var InstrumentMap=constructOptionList(response.data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,false);var InstrumentPeriodMap=constructOptionList(response.data.Period||[],\"ninstrumentperiodcode\",\"speriodname\",undefined,undefined,false);var currentTime=rearrangeDateFormat(inputParam.inputData.userinfo,response.data.CurrentTime.body);var Technique=TechniqueMap.get(\"OptionList\");var Users=UsersMap.get(\"OptionList\");var UsersPeriod=UsersPeriodMap.get(\"OptionList\");var InstrumentCategory=InstrumentCategoryMap.get(\"OptionList\");var Instrument=InstrumentMap.get(\"OptionList\");var InstrumentPeriod=InstrumentPeriodMap.get(\"OptionList\");var selectedRecord={};selectedRecord[\"scomments\"]=\"\";selectedRecord[\"suserholdduration\"]=\"\";selectedRecord[\"sinstrumentholdduration\"]=\"\";selectedRecord[\"duserblockfromdatetime\"]=new Date();//selectedRecord [\"dinstblockfromdatetime\"] = new Date();\ndispatch({type:DEFAULT_RETURN,payload:{Technique:Technique,Users:Users,UsersPeriod:UsersPeriod,InstrumentCategory:InstrumentCategory,Instrument:Instrument,InstrumentPeriod:InstrumentPeriod,currentTime:currentTime,selectedRecord:selectedRecord,isOpen:true,operation:inputParam.inputData.operation,screenName:inputParam.inputData.screenName,openModal:true,ncontrolCode:inputParam.inputData.ncontrolcode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getAllotAnotherUserTestWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getAllotAnotherUserDetails\",inputParam.inputData).then(function(response){var UsersMap=constructOptionList(response.data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);var UsersPeriodMap=constructOptionList(response.data.Period||[],\"nuserperiodcode\",\"speriodname\",undefined,undefined,false);var Users=UsersMap.get(\"OptionList\");var UsersPeriod=UsersPeriodMap.get(\"OptionList\");var currentTime=rearrangeDateFormat(inputParam.inputData.userinfo,response.data.CurrentTime.body);var Technique=response.data.Technique&&response.data.Technique[0].stechniquename;var selectedRecord={};selectedRecord[\"scomments\"]=\"\";selectedRecord[\"suserholdduration\"]=\"\";selectedRecord[\"sinstrumentholdduration\"]=\"\";selectedRecord[\"duserblockfromdatetime\"]=new Date();dispatch({type:DEFAULT_RETURN,payload:{Technique:Technique,Users:Users,UsersPeriod:UsersPeriod,currentTime:currentTime,selectedRecord:selectedRecord,isOpen:true,operation:inputParam.inputData.operation,screenName:inputParam.inputData.screenName,openModal:true,ncontrolCode:inputParam.inputData.ncontrolcode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getRescheduleTestWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getRescheduledDetails\",inputParam.inputData).then(function(response){var TechniqueMap=constructOptionList(response.data.Technique||[],\"ntechniquecode\",\"stechniquename\",undefined,undefined,false);var UsersMap=constructOptionList(response.data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);var UsersPeriodMap=constructOptionList(response.data.Period||[],\"nuserperiodcode\",\"speriodname\",undefined,undefined,false);var InstrumentCategoryMap=constructOptionList(response.data.InstrumentCategory||[],\"ninstrumentcatcode\",\"sinstrumentcatname\",undefined,undefined,false);var InstrumentMap=constructOptionList(response.data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,false);var InstrumentPeriodMap=constructOptionList(response.data.Period||[],\"ninstrumentperiodcode\",\"speriodname\",undefined,undefined,false);var currentTime=rearrangeDateFormat(inputParam.inputData.userinfo,response.data.CurrentTime.body);var selectedRecord={};selectedRecord[\"scomments\"]=\"\";selectedRecord[\"suserholdduration\"]=\"\";selectedRecord[\"sinstrumentholdduration\"]=\"\";selectedRecord[\"duserblockfromdatetime\"]=new Date();var Technique=TechniqueMap.get(\"OptionList\");var Users=UsersMap.get(\"OptionList\");var UsersPeriod=UsersPeriodMap.get(\"OptionList\");var InstrumentCategory=InstrumentCategoryMap.get(\"OptionList\");var Instrument=InstrumentMap.get(\"OptionList\");var InstrumentPeriod=InstrumentPeriodMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{Technique:Technique,Users:Users,UsersPeriod:UsersPeriod,InstrumentCategory:InstrumentCategory,Instrument:Instrument,InstrumentPeriod:InstrumentPeriod,currentTime:currentTime,selectedRecord:selectedRecord,isOpen:true,operation:inputParam.inputData.operation,screenName:inputParam.inputData.screenName,openModal:true,ncontrolCode:inputParam.inputData.ncontrolcode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getInstrument(ninstrumentcatcode,ncalibrationreq,userInfo,selectedRecord){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"joballocation/getInstrumentBasedCategory\",{\"ninstrumentcatcode\":ninstrumentcatcode,\"ncalibrationreq\":ncalibrationreq,\"userinfo\":userInfo}).then(function(response){var Instrument=[];var InstrumentMap=constructOptionList(response.data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,false);Instrument=InstrumentMap.get(\"OptionList\");if(ninstrumentcatcode!==transactionStatus.NA){selectedRecord[\"dinstblockfromdatetime\"]=new Date();}else{selectedRecord[\"dinstblockfromdatetime\"]=\"\";}dispatch({type:DEFAULT_RETURN,payload:{Instrument:Instrument,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getUsers(ntechniquecode,JASelectedTest,userInfo,selectedRecord,masterData){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"joballocation/getUsersBasedTechnique\",{\"ntechniquecode\":ntechniquecode,\"ssectioncode\":JASelectedTest.JASelectedSample?JASelectedTest.JASelectedSample.map(function(sample){return sample.nsectioncode;}).join(\",\"):\"\",\"nregtypecode\":JASelectedTest.realRegTypeValue.nregtypecode,\"nregsubtypecode\":JASelectedTest.realRegSubTypeValue.nregsubtypecode,\"userinfo\":userInfo}).then(function(response){var Users=[];var UsersMap=constructOptionList(response.data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);Users=UsersMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{// masterData:{...masterData},\nUsers:Users,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function ViewAnalystCalendar(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/viewAnalystCalendar\",inputParam.inputData).then(function(response){var masterData=_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data);var Users=[];var UsersMap=constructOptionList(response.data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);Users=UsersMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{Users:Users,screenName:inputParam.inputData.screenName,loading:false,openModal:true,masterData:masterData}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function CancelTestWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/cancelTest\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"JA_TEST\"],inputParam.inputData.masterData.JA_TEST,\"ntransactiontestcode\");delete response.data[\"JA_TEST\"];fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData,response.data,[\"TestView\"],3,\"ntransactiontestcode\",[]);var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data),{},{JASelectedTest:replaceUpdatedObject(response.data[\"JASelectedTest\"],inputParam.inputData.masterData.JASelectedTest,\"ntransactiontestcode\"),TestView:inputParam.inputData.masterData.TestView});var respObject=_objectSpread(_objectSpread({masterData:masterData},inputParam.inputData),{},{loading:false,loadEsign:false,openModal:false,showSample:undefined});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}export function AllotJobAction(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/AllotJobCreate\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"JA_TEST\"],inputParam.inputData.masterData.JA_TEST,\"ntransactiontestcode\");delete response.data[\"JA_TEST\"];var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data),{},{JASelectedTest:replaceUpdatedObject(response.data[\"JASelectedTest\"],inputParam.inputData.masterData.JASelectedTest,\"ntransactiontestcode\"),TestView:replaceUpdatedObject(response.data[\"TestView\"],inputParam.inputData.masterData.TestView,\"ntransactiontestcode\")});var respObject=_objectSpread(_objectSpread({},inputParam.inputData),{},{masterData:masterData,loading:false,loadEsign:false,openModal:false,showSample:undefined});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}export function AllotAnotherUserAction(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/AllotAnotherUserCreate\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"JA_TEST\"],inputParam.inputData.masterData.JA_TEST,\"ntransactiontestcode\");delete response.data[\"JA_TEST\"];fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData,response.data,[\"TestView\"],3,\"ntransactiontestcode\",[]);var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data),{},{JASelectedTest:replaceUpdatedObject(response.data[\"JASelectedTest\"],inputParam.inputData.masterData.JASelectedTest,\"ntransactiontestcode\"),TestView:inputParam.inputData.masterData.TestView});var respObject=_objectSpread(_objectSpread({masterData:masterData},inputParam.inputData),{},{loading:false,loadEsign:false,openModal:false,showSample:undefined});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}export function RescheduleJobAction(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/RescheduleCreate\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"JA_TEST\"],inputParam.inputData.masterData.JA_TEST,\"ntransactiontestcode\");delete response.data[\"JA_TEST\"];fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData,response.data,[\"TestView\"],3,\"ntransactiontestcode\",[]);var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data),{},{JASelectedTest:replaceUpdatedObject(response.data[\"JASelectedTest\"],inputParam.inputData.masterData.JASelectedTest,\"ntransactiontestcode\"),TestView:inputParam.inputData.masterData.TestView});var respObject=_objectSpread(_objectSpread({masterData:masterData},inputParam.inputData),{},{loading:false,loadEsign:false,openModal:false,showSample:undefined});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}export function getJobAllocationSubSampleDetail(inputData,isServiceRequired){return function(dispatch){//console.log(\"response :\");\nvar arr=[];// const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\n// (item,index) => \n// item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\n// );\ninputData.JASelectedSample&&inputData.JASelectedSample.map(function(item){if(!arr.includes(item.nsectioncode)){arr.push(item.nsectioncode);}});var inputParamData={nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.JASelectedSample&&inputData.JASelectedSample.map(function(sample){return sample.npreregno;}).join(\",\"),nregistrationsectioncode:inputData.nregistrationsectioncode,// ssectioncode : inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(\",\"),\nnsectioncode:arr.map(function(item){return item;}).join(\",\"),ntransactionstatus:String(inputData.ntransactionstatus),ntransactiontestcode:\"0\",userinfo:inputData.userinfo,ntestcode:inputData.ntestcode,napprovalversioncode:inputData.napprovalversioncode,fromdate:inputData.fromdate,todate:inputData.todate,activeTestTab:inputData.activeTestTab,activeSampleTab:inputData.activeSampleTab,activeSubSampleTab:inputData.activeSubSampleTab,nneedsubsample:inputData.masterData.realRegSubTypeValue.nneedsubsample,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,nneedtemplatebasedflow:inputData.masterData.realRegSubTypeValue.nneedtemplatebasedflow,checkBoxOperation:inputData.checkBoxOperation};var activeName=\"\";var dataStateName=\"\";dispatch(initRequest(true));if(isServiceRequired){rsapi.post(\"joballocation/getJobAllocationSubSampleDetails\",_objectSpread(_objectSpread({},inputParamData),{},{checkBoxOperation:inputData.checkBoxOperation})).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData,'descending','ntransactionsamplecode');// sortData(response.data);\nvar oldSelectedTest=inputData.masterData.JASelectedTest;var oldSelectedSubSample=inputData.masterData.JASelectedSubSample;fillRecordBasedOnCheckBoxSelection(inputData.masterData,response.data,inputData.childTabsKey,inputData.checkBoxOperation,\"nregistrationsectioncode\",inputData.removeElementFromArray);// inputData.masterData.JA_SUBSAMPLE = response.data.JA_SUBSAMPLE;  \n// inputData.masterData.JASelectedSubSample=response.data.JASelectedSubSample;\n// inputData.masterData.JA_TEST = response.data.JA_TEST;  \n// inputData.masterData.JASelectedTest=response.data.JASelectedTest;\n// inputData.masterData.RegistrationAttachment =response.data.RegistrationAttachment;\n// inputData.masterData.RegistrationSampleAttachment =response.data.RegistrationSampleAttachment;\n// inputData.masterData.RegistrationComment =response.data.RegistrationComment;\n// inputData.masterData.RegistrationSampleComment =response.data.RegistrationSampleComment;\nvar masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[],JASelectedSample:inputData.JASelectedSample});if(inputData.searchSubSampleRef!==undefined&&inputData.searchSubSampleRef.current!==null){inputData.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTest']=undefined;}var _inputData=inputData,testskip=_inputData.testskip,testtake=_inputData.testtake,subsampleskip=_inputData.subsampleskip,subsampletake=_inputData.subsampletake;// let bool = false;\n// Commented bool value because no need to check bool condition to update skipInfo value.\nvar skipInfo={};// if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\ntestskip=0;//     bool = true\n// }\nsubsampleskip=0;// bool = true\n// if (bool) {\nskipInfo={testskip:testskip,testtake:testtake,subsampleskip:subsampleskip,subsampletake:subsampletake};// }\nvar RegistrationTestAttachment=[];var RegistrationTestComment=[];var TestView=[];var RegistrationComment=[];var RegistrationSampleAttachment=[];if(inputData.checkBoxOperation===1){var wholeSubSampleList=masterData.JA_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample.forEach(function(subsample,index){if(!wholeSubSampleList.includes(subsample.ntransactionsamplecode)){oldSelectedSubSample.splice(index,1);}});if(oldSelectedSubSample.length>0){masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedSubSample:oldSelectedSubSample});}var wholeTestList=masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var ntransactiontestcode;var npreregno;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:oldSelectedTest});}else{ntransactiontestcode=masterData.JASelectedTest[0].ntransactiontestcode;npreregno=masterData.JASelectedSample[0].npreregno;}switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":TestView=keepOld?inputData.masterData.TestView:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;default:RegistrationComment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"npreregno\");activeName=\"RegistrationTestAttachment\";dataStateName=\" testAttachmentDataState\";break;}}else if(inputData.checkBoxOperation===5){var list=[];var dbData=[];switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":dbData=response.data.RegistrationTestComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestComment),_toConsumableArray(dbData));RegistrationTestComment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTVIEW\":dbData=response.data.TestView||[];list=[].concat(_toConsumableArray(inputData.masterData.TestView),_toConsumableArray(dbData));TestView=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_SAMPLECOMMENTS\":dbData=response.data.RegistrationComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationComment),_toConsumableArray(dbData));RegistrationComment=getRecordBasedOnPrimaryKeyName(list,inputData.JASelectedSample.length>0?inputData.JASelectedSample[0].npreregno:\"\",\"npreregno\");break;default:dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else if(inputData.checkBoxOperation===7){var _list=[];switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":_list=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":_list=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":_list=response.data.TestView?sortData(response.data.TestView,'descending','ntransactiontestcode'):[];TestView=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;case\"IDS_SAMPLECOMMENTS\":RegistrationComment=response.data.RegistrationComment?_toConsumableArray(response.data.RegistrationComment):[];activeName=\"RegistrationComment\";dataStateName=\"sampleCommentsDataState\";break;default:_list=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;}}else{var _list2=[];if(!inputData.masterData.realRegSubTypeValue.nneedsubsample){var _wholeTestList=masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!_wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var _keepOld=false;var _ntransactiontestcode;if(oldSelectedTest.length>0){_keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:oldSelectedTest});}else{_ntransactiontestcode=masterData.JASelectedTest[0].ntransactiontestcode;}}switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":_list2=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":_list2=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":_list2=response.data.TestView?sortData(response.data.TestView,'descending','ntransactiontestcode'):[];TestView=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;case\"IDS_SAMPLECOMMENTS\":_list2=response.data.RegistrationComment?sortData(response.data.RegistrationComment,'descending','nregcommentcode'):[];RegistrationComment=getRecordBasedOnPrimaryKeyName(_list2,inputData.JASelectedSample.length>0?inputData.JASelectedSample[0].npreregno:\"\",\"npreregno\");activeName=\"RegistrationComment\";dataStateName=\"sampleChangeDataState\";break;case\"IDS_SUBSAMPLEATTACHMENTS\":_list2=response.data.RegistrationSampleAttachment?sortData(response.data.RegistrationSampleAttachment,'descending','nsampleattachmentcode'):[];RegistrationSampleAttachment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.JASelectedSubSample.length>0?inputData.masterData.JASelectedSubSample[0].ntransactionsamplecode:\"\",\"ntransactionsamplecode\");activeName=\"RegistrationSampleAttachment\";dataStateName=\"subsampleAttachmentDataState\";break;default:_list2=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;}}masterData=_objectSpread(_objectSpread({},masterData),{},{RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,TestView:TestView,RegistrationComment:RegistrationComment,RegistrationSampleAttachment:RegistrationSampleAttachment});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({masterData:masterData,secondarySelection:inputData[\"secondarySelection\"],loading:false},skipInfo),{},{activeTabIndex:inputData.activeTabIndex})});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{var oldSelectedTest=inputData.masterData.JASelectedTest;var oldSelectedSubSample=inputData.masterData.JASelectedSubSample;var _inputData2=inputData,subsampletake=_inputData2.subsampletake,subsampleskip=_inputData2.subsampleskip;var skipInfo={};var TestSelected=[];var subSampleSelected=[];if(inputData[\"statusNone\"]){TestSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest,inputData.removeElementFromArray[0].nregistrationsectioncode,\"nregistrationsectioncode\");subSampleSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample,inputData.removeElementFromArray[0].nregistrationsectioncode,\"nregistrationsectioncode\");}else{TestSelected=filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest,inputData.removeElementFromArray[0].nregistrationsectioncode,\"nregistrationsectioncode\");subSampleSelected=filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample,inputData.removeElementFromArray[0].nregistrationsectioncode,\"nregistrationsectioncode\");}var isGrandChildGetRequired=false;if(TestSelected.length>0){isGrandChildGetRequired=false;}else{isGrandChildGetRequired=true;}fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.JASelectedSample,inputData.childTabsKey,inputData.checkBoxOperation,\"nregistrationsectioncode\",inputData.removeElementFromArray);if(isGrandChildGetRequired){var ntransactiontestcode=inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode.toString():\"\";var JASelectedSample=inputData.JASelectedSample;var JASelectedTest=inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[];var JASelectedSubSample=inputData.masterData.JA_SUBSAMPLE;if(inputData.masterData.realRegSubTypeValue.nneedsubsample){var filterSelectedSubSample=getSameRecordFromTwoArrays(oldSelectedSubSample,inputData.masterData.JA_SUBSAMPLE,\"ntransactionsamplecode\");JASelectedSubSample=filterSelectedSubSample.length>0?filterSelectedSubSample:[inputData.masterData.JA_SUBSAMPLE[0]];if(inputData.masterData.JA_SUBSAMPLE.length<=inputData.subsampleskip){subsampleskip=0;skipInfo={subsampletake:subsampletake,subsampleskip:subsampleskip};}}var ntransactionsamplecode=JASelectedSubSample.map(function(subsample){return subsample.ntransactionsamplecode;}).join(',');var npreregno=inputData.JASelectedSample&&inputData.JASelectedSample.map(function(sample){return sample.npreregno;}).join(',');var nsectioncode=inputData.JASelectedSample&&inputData.JASelectedSample.map(function(sample){return sample.nsectioncode;}).join(',');var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedSample:JASelectedSample,JASelectedSubSample:JASelectedSubSample,JASelectedTest:JASelectedTest});inputData=_objectSpread(_objectSpread({},inputData),{},{ntransactiontestcode:ntransactiontestcode,npreregno:npreregno,nsectioncode:nsectioncode,ntransactionsamplecode:ntransactionsamplecode,JASelectedSample:JASelectedSample,JASelectedTest:JASelectedTest,JASelectedSubSample:JASelectedSubSample,checkBoxOperation:3,activeTestTab:inputData.activeTestTab,masterData:masterData});if(JASelectedTest.length>0){inputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"RegistrationTestAttachment\",\"RegistrationTestComment\",\"TestView\"]});dispatch(getTestChildTabDetailJobAllocation(inputData,true));}else{inputData=_objectSpread(_objectSpread({},inputData),{},{masterData:masterData,childTabsKey:[\"JA_TEST\"]});dispatch(getJobAllocationTestDetail(inputData,true));}}else{var _masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:TestSelected?TestSelected:inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[],JASelectedSample:inputData.JASelectedSample,JASelectedSubSample:subSampleSelected?subSampleSelected:inputData.masterData.JA_SUBSAMPLE.length>0?[inputData.masterData.JA_SUBSAMPLE[0]]:[]});var subsamplecheck=true;if(inputData.masterData.realRegSubTypeValue.nneedsubsample){var SubSampleSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample,inputData.removeElementFromArray[0].npreregno,\"npreregno\");if(SubSampleSelected.length>0){var _filterSelectedSubSample=getSameRecordFromTwoArrays(oldSelectedSubSample,inputData.masterData.JA_SUBSAMPLE,\"ntransactionsamplecode\");if(_filterSelectedSubSample.length===0){var wholeSubSample=_masterData.JA_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample.forEach(function(test,index){if(!wholeSubSample.includes(test.ntransactionsamplecode)){oldSelectedSubSample.splice(index,1);}return null;});if(oldSelectedSubSample.length===0&&wholeSubSample.length>0&&_masterData.selectedTest.length===0){var selectedSubSample1=[inputData.masterData.JA_SUBSAMPLE[0]];_masterData=_objectSpread(_objectSpread({},_masterData),{},{JASelectedSubSample:selectedSubSample1,selectedTest:[]});inputData=_objectSpread(_objectSpread({},inputData),_masterData);inputData[\"npreregno\"]=selectedSubSample1.map(function(x){return x.npreregno;}).join(\",\");inputData[\"ntransactionsamplecode\"]=selectedSubSample1.map(function(x){return x.ntransactionsamplecode;}).join(\",\");inputData[\"checkBoxOperation\"]=3;inputData[\"childTabsKey\"]=[\"JA_TEST\"];subsamplecheck=false;dispatch(getJobAllocationTestDetail(inputData,true));}}else{oldSelectedSubSample=_filterSelectedSubSample;}}else{var _wholeSubSample=_masterData.JA_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample.forEach(function(test,index){if(!_wholeSubSample.includes(test.ntransactionsamplecode)){oldSelectedSubSample.splice(index,1);}return null;});}if(subsamplecheck){_masterData=_objectSpread(_objectSpread({},_masterData),{},{JASelectedSubSample:oldSelectedSubSample});}if(inputData.masterData.JA_SUBSAMPLE.length<=inputData.subsampleskip){subsampleskip=0;_skipInfo={subsampleskip:subsampleskip,subsampletake:subsampletake};}}var wholeTestList=_masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var _ntransactiontestcode2;if(oldSelectedTest.length>0){keepOld=true;_masterData=_objectSpread(_objectSpread({},_masterData),{},{JASelectedTest:oldSelectedTest});}else{_ntransactiontestcode2=inputData.masterData.JA_TEST[0].ntransactiontestcode;}var RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment||[],_ntransactiontestcode2,\"ntransactiontestcode\");var RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment||[],_ntransactiontestcode2,\"ntransactiontestcode\");var TestView=keepOld?inputData.masterData.TestView:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView||[],_ntransactiontestcode2,\"ntransactiontestcode\");var _inputData3=inputData,testskip=_inputData3.testskip,testtake=_inputData3.testtake;var bool=false;var _skipInfo={};if(inputData.masterData.JA_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){_skipInfo={testskip:testskip,testtake:testtake};}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:_objectSpread(_objectSpread({},_masterData),{},{JASelectedSample:inputData.JASelectedSample,RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,TestView:TestView}),loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestTab:inputData.activeTestTab},_skipInfo)});}}};}export function getJobAllocationTestDetail(inputData,isServiceRequired){return function(dispatch){//console.log(\"response :\");\nvar arr=[];var arr1=[];// const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\n// (item,index) => \n// item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\n// );\n//   const myArray = inputData.nsectioncode.split(\",\");\n//   myArray.map((item) => {\n//         if(!arr.includes(item)) {\n//             arr.push(item)\n//           }\n//         }\n//     )\nvar JASelectedSubSample=inputData.JASelectedSubSample;JASelectedSubSample&&JASelectedSubSample.map(function(item){if(!arr.includes(item.nsectioncode)){arr.push(item.nsectioncode);}});var activeName=\"\";var dataStateName=\"\";var inputParamData={nflag:3,ntype:3,nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,nsectioncode:arr.map(function(nsectioncode){return nsectioncode;}).join(\",\"),ntransactiontestcode:\"0\",ntransactionstatus:inputData.ntransactionstatus.toString(),ntransactionsamplecode:inputData.ntransactionsamplecode,userinfo:inputData.userinfo,ntestcode:inputData.ntestcode,activeTestTab:inputData.activeTestTab,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,checkBoxOperation:inputData.checkBoxOperation,nneedsubsample:inputData.nneedsubsample};var subSample=inputData.nneedsubsample;if(isServiceRequired){dispatch(initRequest(true));rsapi.post(\"joballocation/getJobAllocationTestDetails\",inputParamData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData,'descending','ntransactionsamplecode');var oldSelectedTest=inputData.masterData.JASelectedTest;var oldSelectedSubSample=inputData.masterData.JASelectedSubSample||[];fillRecordBasedOnCheckBoxSelection(inputData.masterData,response.data,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactionsamplecode\",inputData.removeElementFromArray);//inputData.masterData.JA_TEST = response.data.JA_TEST;\nvar masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[],JASelectedSample:inputData.masterData.JASelectedSample,JASelectedSubSample:inputData.JASelectedSubSample||inputData.masterData.JASelectedSubSample});if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTests']=undefined;}var _inputData4=inputData,testskip=_inputData4.testskip,testtake=_inputData4.testtake;// let bool = false;\n// Commented bool value because no need to check bool condition to update skipInfo value.\nvar skipInfo={};// if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\ntestskip=0;// bool = true\n// }\n// if (bool) {\nskipInfo={testskip:testskip,testtake:testtake};// }\nvar RegistrationTestAttachment=[];var RegistrationTestComment=[];var TestView=[];var RegistrationSampleComment=[];var RegistrationSampleAttachment=[];if(inputData.checkBoxOperation===1){var wholeTestList=masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var ntransactiontestcode;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:oldSelectedTest});}else{ntransactiontestcode=masterData.JASelectedTest[0].ntransactiontestcode;}switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":TestView=keepOld?inputData.masterData.TestView:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;default:RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;}}else if(inputData.checkBoxOperation===5){var list=[];var dbData=[];switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTVIEW\":dbData=response.data.TestView||[];list=[].concat(_toConsumableArray(inputData.masterData.TestView),_toConsumableArray(dbData));TestView=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":dbData=response.data.RegistrationTestComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestComment),_toConsumableArray(dbData));RegistrationTestComment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;default:dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else if(inputData.checkBoxOperation===7){var _list3=[];var _dbData=[];var testList=reArrangeArrays(inputData.masterData.JA_SUBSAMPLE,responseData.JA_TEST,\"ntransactionsamplecode\");masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:[testList[0]],JA_TEST:testList});switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":_dbData=response.data.RegistrationTestAttachment||[];_list3=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(_dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTVIEW\":_dbData=response.data.TestView||[];_list3=[].concat(_toConsumableArray(inputData.masterData.TestView),_toConsumableArray(_dbData));TestView=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;default:_dbData=response.data.RegistrationTestAttachment||[];_list3=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(_dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else{var _list4=[];switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":_list4=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentState\";break;case\"IDS_TESTCOMMENTS\":_list4=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":_list4=response.data.TestView?sortData(response.data.TestView,'descending','ntransactiontestcode'):[];TestView=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;case\"IDS_SUBSAMPLEATTACHMENTS\":_list4=response.data.RegistrationSampleComment?sortData(response.data.RegistrationSampleComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_SUBSAMPLE.length>0?inputData.masterData.JA_SUBSAMPLE[0].ntransactionsamplecode:\"\",\"ntransactionsamplecode\");activeName=\"RegistrationSampleComment\";dataStateName=\"testCommentDataState\";break;default:_list4=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentState\";break;}}if(subSample){var wholeSubsampleList=masterData.JA_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample.map(function(test,index){if(!wholeSubsampleList.includes(test.ntransactionsamplecode)){oldSelectedSubSample.splice(index,1);}return null;});var _keepOld2=false;var ntransactionsamplecode;if(oldSelectedSubSample.length>0){_keepOld2=true;}else{ntransactionsamplecode=masterData.selectedSubSample[0].ntransactionsamplecode;}switch(inputData.activeSubSampleTab){case\"IDS_SUBSAMPLECOMMENTS\":RegistrationSampleComment=_keepOld2?inputData.masterData.RegistrationSampleComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment,ntransactionsamplecode,\"ntransactionsamplecode\");activeName=\"RegistrationSampleComment\";dataStateName=\"subSampleCommentDataState\";break;default:RegistrationSampleAttachment=_keepOld2?inputData.masterData.RegistrationSampleAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment,ntransactionsamplecode,\"ntransactionsamplecode\");activeName=\"RegistrationSampleAttachment\";dataStateName=\"subSampleAttachmentDataState\";break;}}masterData=_objectSpread(_objectSpread({},masterData),{},{RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,TestView:TestView,RegistrationSampleComment:RegistrationSampleComment,RegistrationSampleAttachment:RegistrationSampleAttachment});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTestTab:inputData.activeTestTab,// activeTestTab: inputData.activeTestTab,\nscreenName:inputData.activeTestTab,subsampleskip:undefined,subsampletake:undefined},skipInfo)});}).catch(function(error){//console.log(\"error:\", error);\ndispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{var oldSelectedTest=inputData.masterData.JASelectedTest;var TestSelected=inputData[\"statusNone\"]?getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest,inputData.removeElementFromArray[0].ntransactionsamplecode,\"ntransactionsamplecode\"):filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest,inputData.removeElementFromArray[0].ntransactionsamplecode,\"ntransactionsamplecode\");var isGrandChildGetRequired=false;if(TestSelected.length>0){isGrandChildGetRequired=false;}else{isGrandChildGetRequired=true;}fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.JASelectedSubSample,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactionsamplecode\",inputData.removeElementFromArray);if(isGrandChildGetRequired){var ntransactiontestcode=inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode.toString():\"\";var _JASelectedSubSample=inputData.RESelectedSubSample;var JASelectedTest=inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[];inputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"TestView\",\"RegistrationTestAttachment\",\"RegistrationTestComment\"],ntransactiontestcode:ntransactiontestcode,JASelectedSample:inputData.masterData.JASelectedSample,JASelectedTest:JASelectedTest,JASelectedSubSample:_JASelectedSubSample,checkBoxOperation:3,activeTestTab:inputData.activeTestTab});dispatch(getTestChildTabDetailJobAllocation(inputData,true));}else{var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[],JASelectedSubSample:inputData.JASelectedSubSample});var wholeTestList=masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var _ntransactiontestcode3;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:oldSelectedTest});}else{_ntransactiontestcode3=masterData.JA_TEST[0].ntransactiontestcode;}var RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment||[],_ntransactiontestcode3,\"ntransactiontestcode\");var RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment||[],_ntransactiontestcode3,\"ntransactiontestcode\");var TestView=keepOld?inputData.masterData.TestView:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView||[],_ntransactiontestcode3,\"ntransactiontestcode\");var _inputData5=inputData,testskip=_inputData5.testskip,testtake=_inputData5.testtake;var bool=false;var skipInfo={};if(inputData.masterData.JA_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:_objectSpread(_objectSpread({},masterData),{},{JASelectedSubSample:inputData.JASelectedSubSample,RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,TestView:TestView}),loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestTab:inputData.activeTestTab},skipInfo)});}}};}export function getTestChildTabDetailJobAllocation(inputData,isServiceRequired){return function(dispatch){var arr=[];inputData.JASelectedTest&&inputData.JASelectedTest.map(function(item){if(!arr.includes(item.nsectioncode)){arr.push(item.nsectioncode);}});var inputParamData={ntransactiontestcode:inputData.JASelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"),npreregno:inputData.npreregno,nsectioncode:arr.map(function(nsectioncode){return nsectioncode;}).join(\",\"),//ssectioncode :inputData.JASelectedTest.map(sample => sample.nsectioncode).join(\",\"),\nntransactionsamplecode:inputData.JASelectedTest.map(function(test){return test.ntransactionsamplecode;}).join(\",\"),ndesigntemplatemappingcode:inputData.masterData.realDesignTemplateMappingValue&&inputData.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode,userinfo:inputData.userinfo};var activeName=\"\";var dataStateName=\"\";var url=\"\";switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":url=\"attachment/getTestAttachment\";activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":url=\"comments/getTestComment\";activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_SAMPLEATTACHMENTS\":url=\"attachment/getSampleAttachment\";activeName=\"RegistrationSampleAttachment\";dataStateName=\"sampleAttachmentDataState\";break;case\"IDS_TESTVIEW\":url=\"joballocation/getTestView\";activeName=\"TestView\";dataStateName=\"testViewDataState\";break;default:url=\"attachment/getTestAttachment\";activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;}dispatch(initRequest(true));if(isServiceRequired){rsapi.post(url,inputParamData).then(function(response){var _objectSpread7;var responseData=_objectSpread(_objectSpread({},response.data),{},{JASelectedSample:inputData.JASelectedSample||inputData.masterData.JASelectedSample,JASelectedTest:inputData.JASelectedTest,activeTabIndex:inputData.activeTabIndex,activeTabId:inputData.activeTabId});var skipInfo={};fillRecordBasedOnCheckBoxSelection(inputData.masterData,responseData,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var masterData=_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{JASelectedTest:inputData.JASelectedTest});if(inputData[dataStateName]&&masterData[activeName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread((_objectSpread7={masterData:masterData,activeTabIndex:inputData.activeTabIndex,activeTabId:inputData.activeTabId,activeTestTab:inputData.activeTestTab,loading:false},_defineProperty(_objectSpread7,\"activeTestTab\",inputData.activeTestTab),_defineProperty(_objectSpread7,\"screenName\",inputData.activeTestTab),_defineProperty(_objectSpread7,\"testskip\",undefined),_defineProperty(_objectSpread7,\"testtake\",undefined),_objectSpread7),skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.JASelectedTest,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactiontestcode\",inputData.removeElementFromArray);var skipInfo={};var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:inputData.JASelectedTest});if(masterData[activeName].length<=inputData.skip){skipInfo=_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTestTab:inputData.activeTestTab,screenName:inputData.screenName},skipInfo)});}};}export function validateEsignforJobAllocation(inputParam){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"login/validateEsignCredential\",inputParam.inputData).then(function(response){if(response.data===\"Success\"){var methodUrl=inputParam.screenData.inputParam.methodUrl;inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"]=inputParam.inputData.userinfo;if(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]&&inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]){delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];}dispatch(dispatchMethods(inputParam[\"screenData\"]));}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}function dispatchMethods(screenData){return function(dispatch){var action=screenData.inputParam.action;switch(action){case\"receiveinlab\":dispatch(ReceiveinLabStatusWise(screenData.inputParam,screenData.masterData));break;case\"allotjob\":dispatch(AllotJobAction(screenData.inputParam,screenData.masterData));break;case\"allotanotheruser\":dispatch(AllotAnotherUserAction(screenData.inputParam,screenData.masterData));break;case\"reschedule\":dispatch(RescheduleJobAction(screenData.inputParam,screenData.masterData));break;case\"canceltest\":dispatch(CancelTestWise(screenData.inputParam,screenData.masterData));break;default:break;}};}export function updatedObjectWithNewElement1(oldList,newList){oldList=[].concat(_toConsumableArray(newList),_toConsumableArray(oldList));return oldList;}export function getAnalystCalenderBasedOnUser(nusercode,masterData,userInfo,selectedRecord){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"joballocation/getAnalystCalendarBasedOnUser\",{\"nusercode\":nusercode,\"userinfo\":userInfo}).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},masterData),{},{analystCalenderData:response.data.UserData}),loading:false,selectedRecord:selectedRecord}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getInstrumentForSchedule(ninstrumentcatcode,userInfo){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"joballocation/getInstrumentBasedCategoryForSchedule\",{\"ninstrumentcatcode\":ninstrumentcatcode,\"userinfo\":userInfo}).then(function(response){var Instrument=[];var InstrumentMap=constructOptionList(response.data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,false);Instrument=InstrumentMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{Instrument:Instrument,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/JobAllocationAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","constructOptionList","replaceUpdatedObject","sortData","fillRecordBasedOnCheckBoxSelection","getSameRecordFromTwoArrays","getRecordBasedOnPrimaryKeyName","filterRecordBasedOnPrimaryKeyName","reArrangeArrays","rearrangeDateFormat","postCRUDOrganiseTransSearch","Axios","transactionStatus","getRegTypeJobAllocation","inputData","dispatch","post","then","response","responseData","data","type","payload","masterData","defaultSampleTypeValue","loading","catch","error","status","message","warn","getRegSubTypeJobAllocation","defaultRegTypeValue","getAppConfigVersionJobAllocation","inputParam","defaultRegSubTypeValue","RegSubTypeValue","realRegSubTypeValue","getSectionJobAllocation","defaultUserSectionValue","getFilterStatusJobAllocation","defaultFilterStatusValue","getFilterStatusSectionJobAllocation","testStatusService","sectionService","urlArray","all","defaultApprovalVersionValue","getDesignTemplateJobAllocation","Success","ApprovalVersionValue","realApprovalVersionValue","getTestStatusJobAllocation","getJobAllcationFilterSubmit","searchSampleRef","undefined","current","value","searchSubSampleRef","searchTestRef","showTest","activeTestTab","showFilter","sampleskip","sampletake","subsampleskip","subsampletake","testskip","testtake","documentDataState","sort","filter","testCommentDataState","ReceiveinLabStatusWise","rtn","JA_SAMPLE","JA_SUBSAMPLE","JA_TEST","JASelectedSample","JASelectedSubSample","JASelectedTest","respObject","loadEsign","openModal","showSample","postParamList","getAllottedTestWise","TechniqueMap","Technique","UsersMap","Users","UsersPeriodMap","Period","InstrumentCategoryMap","InstrumentCategory","InstrumentMap","Instrument","InstrumentPeriodMap","currentTime","userinfo","CurrentTime","body","get","UsersPeriod","InstrumentPeriod","selectedRecord","Date","isOpen","operation","screenName","ncontrolCode","ncontrolcode","getAllotAnotherUserTestWise","stechniquename","getRescheduleTestWise","getInstrument","ninstrumentcatcode","ncalibrationreq","userInfo","NA","getUsers","ntechniquecode","map","sample","nsectioncode","join","realRegTypeValue","nregtypecode","nregsubtypecode","ViewAnalystCalendar","CancelTestWise","TestView","info","AllotJobAction","AllotAnotherUserAction","RescheduleJobAction","getJobAllocationSubSampleDetail","isServiceRequired","arr","item","includes","push","inputParamData","nsampletypecode","npreregno","nregistrationsectioncode","ntransactionstatus","String","ntransactiontestcode","ntestcode","napprovalversioncode","fromdate","todate","activeSampleTab","activeSubSampleTab","nneedsubsample","ndesigntemplatemappingcode","nneedtemplatebasedflow","checkBoxOperation","activeName","dataStateName","oldSelectedTest","oldSelectedSubSample","childTabsKey","removeElementFromArray","length","skipInfo","RegistrationTestAttachment","RegistrationTestComment","RegistrationComment","RegistrationSampleAttachment","wholeSubSampleList","b","ntransactionsamplecode","forEach","subsample","index","splice","wholeTestList","test","keepOld","list","dbData","skip","secondarySelection","activeTabIndex","TestSelected","subSampleSelected","isGrandChildGetRequired","toString","filterSelectedSubSample","getTestChildTabDetailJobAllocation","getJobAllocationTestDetail","subsamplecheck","SubSampleSelected","wholeSubSample","selectedTest","selectedSubSample1","x","bool","arr1","nflag","ntype","subSample","RegistrationSampleComment","testList","wholeSubsampleList","selectedSubSample","RESelectedSubSample","realDesignTemplateMappingValue","url","activeTabId","validateEsignforJobAllocation","methodUrl","screenData","toLowerCase","dispatchMethods","action","updatedObjectWithNewElement1","oldList","newList","getAnalystCalenderBasedOnUser","nusercode","analystCalenderData","UserData","getInstrumentForSchedule"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, replaceUpdatedObject, sortData,fillRecordBasedOnCheckBoxSelection,getSameRecordFromTwoArrays,\r\n    getRecordBasedOnPrimaryKeyName,filterRecordBasedOnPrimaryKeyName,reArrangeArrays,rearrangeDateFormat } from '../components/CommonScript';\r\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\r\nimport Axios from 'axios';\r\nimport { transactionStatus } from '../components/Enumeration';\r\n\r\nexport function getRegTypeJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getRegistrationTypeBySampleType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultSampleTypeValue: inputData.defaultSampleTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegSubTypeJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getRegistrationsubTypeByRegType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultRegTypeValue: inputData.defaultRegTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAppConfigVersionJobAllocation(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getApprovalConfigVersionByRegSubType\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            defaultRegSubTypeValue: inputParam.masterData.defaultRegSubTypeValue,\r\n                            RegSubTypeValue: inputParam.masterData.realRegSubTypeValue\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSectionJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultUserSectionValue: inputData.masterData.defaultUserSectionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterStatusJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultFilterStatusValue: inputData.masterData.defaultFilterStatusValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterStatusSectionJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        const testStatusService = rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData );\r\n        const sectionService = rsapi.post(\"joballocation/getSectionByApproveVersion\",  inputData );\r\n        let urlArray = [];\r\n        urlArray = [testStatusService,sectionService];\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultApprovalVersionValue: inputData.masterData.defaultApprovalVersionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getDesignTemplateJobAllocation(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getDesignTemplateByApprovalConfigVersion\", inputParam)\r\n            .then(response => {\r\n\r\n                if(response.data[\"Success\"]){\r\n                    toast.warn(response.data.Success);\r\n                }\r\n\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            defaultApprovalVersionValue: inputParam.masterData.defaultApprovalVersionValue,\r\n                            ApprovalVersionValue: inputParam.masterData.realApprovalVersionValue\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestStatusJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getJobAllcationFilterSubmit(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getJobAllocationDetails\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                     masterData['searchedTest'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showTest: inputParam.inputData.showTest,\r\n                        activeTestTab: inputParam.inputData.activeTestTab,\r\n                        showFilter: false,\r\n                        sampleskip: 0,\r\n                        sampletake: inputParam.sampletake,\r\n                        subsampleskip :0,\r\n                        subsampletake :inputParam.subsampletake,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function ReceiveinLabStatusWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/CreateReceiveinLab\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_SAMPLE\"], inputParam.inputData.masterData.JA_SAMPLE, \"nregistrationsectioncode\");\r\n                        replaceUpdatedObject(response.data[\"JA_SUBSAMPLE\"], inputParam.inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n\r\n                        delete response.data[\"JA_SAMPLE\"];\r\n                        delete response.data[\"JA_SUBSAMPLE\"];\r\n                        delete response.data[\"JA_TEST\"];\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedSample: replaceUpdatedObject(response.data[\"JASelectedSample\"], inputParam.inputData.masterData.JASelectedSample, \"nregistrationsectioncode\"),\r\n                            JASelectedSubSample: replaceUpdatedObject(response.data[\"JASelectedSubSample\"], inputParam.inputData.masterData.JASelectedSubSample, \"ntransactionsamplecode\"),\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        //toast.error(error.message); \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }                  \r\n                })\r\n    }\r\n} \r\n\r\nexport function getAllottedTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getAllotDetails\",inputParam.inputData)\r\n                .then(response => {\r\n\r\n                const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\",\r\n                \"stechniquename\", undefined, undefined, false);    \r\n\r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);    \r\n\r\n\r\n                const InstrumentCategoryMap = constructOptionList(response.data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                \"sinstrumentcatname\", undefined, undefined, false);                \r\n\r\n                const InstrumentMap =    constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\r\n                \"sinstrumentid\", undefined, undefined, false);           \r\n\r\n                const InstrumentPeriodMap = constructOptionList(response.data.Period || [], \"ninstrumentperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);    \r\n\r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n\r\n                const Technique = TechniqueMap.get(\"OptionList\");\r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n                const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\r\n                const Instrument = InstrumentMap.get(\"OptionList\");                \r\n                const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\r\n                 \r\n                let selectedRecord ={};\r\n                selectedRecord[\"scomments\"] =\"\";\r\n                selectedRecord[\"suserholdduration\"] =\"\";\r\n                selectedRecord[\"sinstrumentholdduration\"]=\"\";\r\n                selectedRecord [\"duserblockfromdatetime\"] = new Date();\r\n                //selectedRecord [\"dinstblockfromdatetime\"] = new Date();\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, \r\n                        payload: {\r\n                            Technique,\r\n                            Users,\r\n                            UsersPeriod,\r\n                            InstrumentCategory,\r\n                            Instrument,                            \r\n                            InstrumentPeriod,\r\n                            currentTime,\r\n                            selectedRecord,\r\n                            isOpen: true,\r\n                            operation:inputParam.inputData.operation,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                            loading: false             \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n}\r\n\r\nexport function getAllotAnotherUserTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getAllotAnotherUserDetails\",inputParam.inputData)\r\n                .then(response => {\r\n                \r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);  \r\n                                \r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n                \r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n                const Technique = response.data.Technique && response.data.Technique[0].stechniquename;\r\n                let selectedRecord ={};\r\n                selectedRecord[\"scomments\"] =\"\";\r\n                selectedRecord[\"suserholdduration\"] =\"\";\r\n                selectedRecord[\"sinstrumentholdduration\"]=\"\";\r\n                selectedRecord [\"duserblockfromdatetime\"] = new Date();\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, \r\n                        payload: {\r\n                            Technique,                          \r\n                            Users,\r\n                            UsersPeriod, \r\n                            currentTime,  \r\n                            selectedRecord,                         \r\n                            isOpen: true,\r\n                            operation: inputParam.inputData.operation,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                            loading: false             \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n}\r\n\r\nexport function getRescheduleTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getRescheduledDetails\",inputParam.inputData)\r\n                .then(response => {\r\n\r\n\r\n                const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\",\r\n                \"stechniquename\", undefined, undefined, false);    \r\n\r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);    \r\n\r\n\r\n                const InstrumentCategoryMap = constructOptionList(response.data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                \"sinstrumentcatname\", undefined, undefined, false);                \r\n\r\n                const InstrumentMap =    constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\r\n                \"sinstrumentid\", undefined, undefined, false);           \r\n\r\n                const InstrumentPeriodMap = constructOptionList(response.data.Period || [], \"ninstrumentperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);   \r\n                \r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n\r\n                let selectedRecord ={};\r\n                selectedRecord[\"scomments\"] =\"\";\r\n                selectedRecord[\"suserholdduration\"] =\"\";\r\n                selectedRecord[\"sinstrumentholdduration\"]=\"\";\r\n                selectedRecord [\"duserblockfromdatetime\"] = new Date();\r\n\r\n                const Technique = TechniqueMap.get(\"OptionList\");\r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n                const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\r\n                const Instrument = InstrumentMap.get(\"OptionList\");                \r\n                const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, \r\n                        payload: {\r\n                            Technique,\r\n                            Users,\r\n                            UsersPeriod,\r\n                            InstrumentCategory,\r\n                            Instrument,                            \r\n                            InstrumentPeriod,\r\n                            currentTime,\r\n                            selectedRecord,\r\n                            isOpen: true,\r\n                            operation: inputParam.inputData.operation,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                            loading: false             \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n}\r\n\r\n\r\nexport function getInstrument(ninstrumentcatcode,ncalibrationreq,userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getInstrumentBasedCategory\", {\r\n                \"ninstrumentcatcode\": ninstrumentcatcode,\"ncalibrationreq\":ncalibrationreq,\"userinfo\":userInfo\r\n            })\r\n            .then(response => {\r\n                let Instrument = [];               \r\n                const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\"sinstrumentid\", undefined, undefined, false);\r\n                Instrument = InstrumentMap.get(\"OptionList\");\r\n\r\n                if(ninstrumentcatcode !== transactionStatus.NA){\r\n                    selectedRecord [\"dinstblockfromdatetime\"] = new Date();\r\n                }else{\r\n                    selectedRecord [\"dinstblockfromdatetime\"] =\"\";\r\n                }\r\n                \r\n               \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Instrument,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getUsers(ntechniquecode,JASelectedTest, userInfo, selectedRecord,masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getUsersBasedTechnique\", {\"ntechniquecode\": ntechniquecode,\r\n                          \"ssectioncode\":JASelectedTest.JASelectedSample ? JASelectedTest.JASelectedSample.map(sample=>sample.nsectioncode).join(\",\"):\"\", \r\n                          \"nregtypecode\":JASelectedTest.realRegTypeValue.nregtypecode,\r\n                          \"nregsubtypecode\":JASelectedTest.realRegSubTypeValue.nregsubtypecode,\r\n                          \"userinfo\": userInfo})\r\n            .then(response => {\r\n                let Users = [];               \r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\"susername\", undefined, undefined, false);\r\n                Users = UsersMap.get(\"OptionList\");\r\n               \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                       // masterData:{...masterData},\r\n                        Users,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function ViewAnalystCalendar(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/viewAnalystCalendar\", (inputParam.inputData))\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputParam.inputData.masterData,\r\n                    ...response.data,\r\n                }  \r\n                let Users = [];               \r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\"susername\", undefined, undefined, false);\r\n                Users = UsersMap.get(\"OptionList\");\r\n                \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {                       \r\n                        Users,                        \r\n                        screenName: inputParam.inputData.screenName,\r\n                        loading: false,\r\n                        openModal:true,\r\n                        masterData,\r\n                        \r\n                        \r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function CancelTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/cancelTest\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                            TestView: inputParam.inputData.masterData.TestView\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }                   \r\n                })\r\n    }\r\n}\r\n\r\nexport function AllotJobAction(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/AllotJobCreate\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                            TestView: replaceUpdatedObject(response.data[\"TestView\"], inputParam.inputData.masterData.TestView, \"ntransactiontestcode\" )\r\n                        }\r\n                        let respObject = {\r\n                            ...inputParam.inputData,\r\n                            masterData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }                   \r\n                })\r\n    }\r\n}\r\n\r\nexport function AllotAnotherUserAction(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/AllotAnotherUserCreate\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                            TestView: inputParam.inputData.masterData.TestView\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }                   \r\n                })\r\n    }\r\n}\r\n\r\nexport function RescheduleJobAction(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/RescheduleCreate\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                            TestView: inputParam.inputData.masterData.TestView\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }                   \r\n                })\r\n    }\r\n}\r\n\r\n\r\nexport function getJobAllocationSubSampleDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        //console.log(\"response :\");\r\n        let arr =[];\r\n        // const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\r\n        // (item,index) => \r\n        // item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\r\n        // );\r\n\r\n        inputData.JASelectedSample && inputData.JASelectedSample.map((item) => {\r\n            if(!arr.includes(item.nsectioncode)) {\r\n                arr.push(item.nsectioncode)\r\n              }\r\n            }\r\n        )\r\n\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            nregistrationsectioncode: inputData.nregistrationsectioncode,\r\n           // ssectioncode : inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(\",\"),\r\n            nsectioncode : arr.map(item => item).join(\",\"),\r\n            ntransactionstatus: String(inputData.ntransactionstatus),\r\n            ntransactiontestcode: \"0\",\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            fromdate: inputData.fromdate,\r\n            todate: inputData.todate,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            activeSubSampleTab: inputData.activeSubSampleTab,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: inputData.masterData.realRegSubTypeValue.nneedtemplatebasedflow,\r\n            checkBoxOperation: inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"joballocation/getJobAllocationSubSampleDetails\", { ...inputParamData, checkBoxOperation: inputData.checkBoxOperation })\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData, 'descending', 'ntransactionsamplecode')\r\n                    // sortData(response.data);\r\n                    let oldSelectedTest = inputData.masterData.JASelectedTest;    \r\n                    let oldSelectedSubSample = inputData.masterData.JASelectedSubSample;\r\n                    \r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\",inputData.removeElementFromArray);\r\n\r\n                    // inputData.masterData.JA_SUBSAMPLE = response.data.JA_SUBSAMPLE;  \r\n                    // inputData.masterData.JASelectedSubSample=response.data.JASelectedSubSample;\r\n                    // inputData.masterData.JA_TEST = response.data.JA_TEST;  \r\n                    // inputData.masterData.JASelectedTest=response.data.JASelectedTest;\r\n                    // inputData.masterData.RegistrationAttachment =response.data.RegistrationAttachment;\r\n                    // inputData.masterData.RegistrationSampleAttachment =response.data.RegistrationSampleAttachment;\r\n                    // inputData.masterData.RegistrationComment =response.data.RegistrationComment;\r\n                    // inputData.masterData.RegistrationSampleComment =response.data.RegistrationSampleComment;\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                        JASelectedSample: inputData.JASelectedSample\r\n                    }\r\n                    \r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake,\r\n                        subsampleskip, subsampletake\r\n                    } = inputData\r\n                    // let bool = false;\r\n                    // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                    let skipInfo = {}\r\n                    // if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                    //     bool = true\r\n                    // }\r\n                    subsampleskip = 0;\r\n                    // bool = true\r\n                    // if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake,\r\n                            subsampleskip, subsampletake\r\n                        }\r\n                    // }\r\n                    let RegistrationTestAttachment = [];\r\n                    let RegistrationTestComment = [];\r\n                    let TestView = [];\r\n                    let RegistrationComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n\r\n                        let wholeSubSampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((subsample, index) => {\r\n                                if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n                            if (oldSelectedSubSample.length > 0) {\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedSubSample: oldSelectedSubSample\r\n                                }\r\n                            }\r\n\r\n\r\n                        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        let npreregno;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                JASelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\r\n                            npreregno = masterData.JASelectedSample[0].npreregno;\r\n                        }\r\n                        switch (inputData.activeTestTab) {                           \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            \r\n                             case \"IDS_TESTVIEW\":\r\n                                TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;\r\n\r\n                            default:\r\n                                RegistrationComment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"npreregno\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \" testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestTab) {                  \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                                \r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                dbData = response.data.RegistrationComment || []\r\n                                list = [...inputData.masterData.RegistrationComment, ...dbData];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    }\r\n                    else if (inputData.checkBoxOperation === 7) {\r\n                        let list = []\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n\r\n                                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleCommentsDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        let list = []\r\n                        if (!inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                            let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.map((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedTest: oldSelectedTest\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode\r\n                            }\r\n                        }\r\n                        switch (inputData.activeTestTab) {                            \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;    \r\n\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                list = response.data.RegistrationComment ? sortData(response.data.RegistrationComment, 'descending', 'nregcommentcode') : [];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleChangeDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                                list = response.data.RegistrationSampleAttachment ? sortData(response.data.RegistrationSampleAttachment, 'descending', 'nsampleattachmentcode') : [];\r\n                                RegistrationSampleAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JASelectedSubSample.length >0 ? inputData.masterData.JASelectedSubSample[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subsampleAttachmentDataState\"\r\n                                break;\r\n\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RegistrationTestAttachment,\r\n                        RegistrationTestComment,\r\n                        TestView,\r\n                        RegistrationComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            secondarySelection :inputData[\"secondarySelection\"], \r\n                            loading: false,\r\n                            // sampleskip: undefined,\r\n                            // sampletake: undefined,\r\n                            ...skipInfo,\r\n                            activeTabIndex: inputData.activeTabIndex\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.JASelectedTest\r\n            let oldSelectedSubSample = inputData.masterData.JASelectedSubSample\r\n            let { subsampletake, subsampleskip } = inputData;\r\n            let skipInfo = {};\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n            if (inputData[\"statusNone\"]) {\r\n                TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n                subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n            }\r\n            else {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n            }\r\n\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let JASelectedSample = inputData.JASelectedSample;\r\n                let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\r\n                let JASelectedSubSample = inputData.masterData.JA_SUBSAMPLE\r\n\r\n\r\n                if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    JASelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.JA_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n                }\r\n                let ntransactionsamplecode = JASelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\r\n                let npreregno = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(',');\r\n                let nsectioncode = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(',');\r\n                let masterData = { ...inputData.masterData, JASelectedSample, JASelectedSubSample, JASelectedTest }\r\n                inputData = {\r\n                    ...inputData,\r\n                    ntransactiontestcode,\r\n                    npreregno,\r\n                    nsectioncode,\r\n                    ntransactionsamplecode,\r\n                    JASelectedSample,\r\n                    JASelectedTest,\r\n                    JASelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestTab: inputData.activeTestTab, masterData\r\n                }\r\n\r\n                if (JASelectedTest.length > 0) {\r\n                    inputData = {\r\n                        ...inputData,\r\n                        childTabsKey: [\"RegistrationTestAttachment\",\"RegistrationTestComment\",\"TestView\"]\r\n                    }\r\n                    dispatch(getTestChildTabDetailJobAllocation(inputData, true));\r\n                } else {\r\n                    inputData = {\r\n                        ...inputData, masterData,\r\n                        childTabsKey: [\"JA_TEST\"]\r\n                    }\r\n                    dispatch(getJobAllocationTestDetail(inputData, true));\r\n                }\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    JASelectedTest: TestSelected ? TestSelected : inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                    JASelectedSample: inputData.JASelectedSample,\r\n                    JASelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.JA_SUBSAMPLE.length > 0 ? [inputData.masterData.JA_SUBSAMPLE[0]] : []\r\n\r\n                }\r\n                let subsamplecheck = true;\r\n                if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((test, index) => {\r\n                                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.JA_SUBSAMPLE[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"childTabsKey\"] = [\"JA_TEST\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getJobAllocationTestDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.forEach((test, index) => {\r\n                            if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            JASelectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        JASelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.JA_TEST[0].ntransactiontestcode\r\n                }                \r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [],\r\n                        ntransactiontestcode, \"ntransactiontestcode\");    \r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            JASelectedSample: inputData.JASelectedSample,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            TestView,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getJobAllocationTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n\r\n        //console.log(\"response :\");\r\n        let arr =[];\r\n        let arr1=[];\r\n        // const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\r\n        // (item,index) => \r\n        // item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\r\n        // );\r\n    //   const myArray = inputData.nsectioncode.split(\",\");\r\n    //   myArray.map((item) => {\r\n    //         if(!arr.includes(item)) {\r\n    //             arr.push(item)\r\n    //           }\r\n    //         }\r\n    //     )\r\n\r\n    let JASelectedSubSample = inputData.JASelectedSubSample;\r\n    JASelectedSubSample && JASelectedSubSample.map((item) => {\r\n        if (!arr.includes(item.nsectioncode)) {\r\n            arr.push(item.nsectioncode)\r\n        }\r\n    }\r\n    )    \r\n        \r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let inputParamData = {\r\n            nflag: 3,\r\n            ntype: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            nsectioncode: arr.map(nsectioncode => nsectioncode).join(\",\"),\r\n            ntransactiontestcode: \"0\",\r\n            ntransactionstatus: inputData.ntransactionstatus.toString(),\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation,\r\n            nneedsubsample: inputData.nneedsubsample\r\n        }\r\n        const subSample = inputData.nneedsubsample;\r\n        if (isServiceRequired) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getJobAllocationTestDetails\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData, 'descending', 'ntransactionsamplecode')\r\n                    let oldSelectedTest = inputData.masterData.JASelectedTest\r\n                    let oldSelectedSubSample = inputData.masterData.JASelectedSubSample || []\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n                    //inputData.masterData.JA_TEST = response.data.JA_TEST;\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                        JASelectedSample: inputData.masterData.JASelectedSample,\r\n                        JASelectedSubSample: inputData.JASelectedSubSample || inputData.masterData.JASelectedSubSample,\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    // let bool = false;\r\n                    // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                    let skipInfo = {}\r\n                    // if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        // bool = true\r\n                    // }\r\n                    // if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    // }\r\n                    let RegistrationTestAttachment = [];\r\n                    let RegistrationTestComment = [];\r\n                    let TestView = [];\r\n                    let RegistrationSampleComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                JASelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestTab) {                           \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;   \r\n                           \r\n                            default:\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break; \r\n                          \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 7) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        let testList = reArrangeArrays(inputData.masterData.JA_SUBSAMPLE, responseData.JA_TEST, \"ntransactionsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            JASelectedTest: [testList[0]],\r\n                            JA_TEST: testList,\r\n                        }\r\n\r\n                        switch (inputData.activeTestTab) {\r\n                            \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n\r\n                    } else {\r\n                        let list = []\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;\r\n                                \r\n                            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                                list = response.data.RegistrationSampleComment ? sortData(response.data.RegistrationSampleComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_SUBSAMPLE.length > 0 ? inputData.masterData.JA_SUBSAMPLE[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (subSample) {\r\n                        let wholeSubsampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.map((test, index) => {\r\n                            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactionsamplecode;\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            keepOld = true\r\n                        } else {\r\n                            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode\r\n                        }\r\n\r\n                        switch (inputData.activeSubSampleTab) {\r\n                            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"subSampleCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    masterData = {\r\n                        ...masterData,                      \r\n                        RegistrationTestAttachment,\r\n                        RegistrationTestComment,\r\n                        TestView,\r\n                        RegistrationSampleComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            // activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.activeTestTab,\r\n                            subsampleskip:undefined,\r\n                            subsampletake:undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    //console.log(\"error:\", error);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.JASelectedTest\r\n            let TestSelected =\r\n                inputData[\"statusNone\"] ?\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") :\r\n                    filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let JASelectedSubSample = inputData.RESelectedSubSample;\r\n                let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\r\n                inputData = {\r\n                    ...inputData,\r\n                    childTabsKey: [\"TestView\",\"RegistrationTestAttachment\", \"RegistrationTestComment\"],\r\n                    ntransactiontestcode,\r\n                    JASelectedSample: inputData.masterData.JASelectedSample,\r\n                    JASelectedTest,\r\n                    JASelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestTab: inputData.activeTestTab\r\n                }\r\n                dispatch(getTestChildTabDetailJobAllocation(inputData, true));\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                    JASelectedSubSample: inputData.JASelectedSubSample\r\n                }\r\n                let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        JASelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.JA_TEST[0].ntransactiontestcode\r\n                }\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                 const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                \r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            JASelectedSubSample: inputData.JASelectedSubSample,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            TestView,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        // activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTestChildTabDetailJobAllocation(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let arr = [];\r\n        inputData.JASelectedTest && inputData.JASelectedTest.map((item) => {\r\n            if(!arr.includes(item.nsectioncode)) {\r\n                arr.push(item.nsectioncode)\r\n              }\r\n            }\r\n        )\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.JASelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\r\n            npreregno: inputData.npreregno,\r\n            nsectioncode :arr.map(nsectioncode => nsectioncode).join(\",\"),\r\n            //ssectioncode :inputData.JASelectedTest.map(sample => sample.nsectioncode).join(\",\"),\r\n            ntransactionsamplecode :inputData.JASelectedTest.map(test => test.ntransactionsamplecode).join(\",\"),\r\n            ndesigntemplatemappingcode: inputData.masterData.realDesignTemplateMappingValue && inputData.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let url=\"\";\r\n       \r\n        switch (inputData.activeTestTab) {\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                dataStateName =\"testAttachmentDataState\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                activeName = \"RegistrationTestComment\"\r\n                dataStateName = \"testCommentDataState\"\r\n                break;           \r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"RegistrationSampleAttachment\"\r\n                dataStateName = \"sampleAttachmentDataState\"\r\n                break;\r\n            case \"IDS_TESTVIEW\":\r\n                url = \"joballocation/getTestView\"\r\n                activeName = \"TestView\"\r\n                dataStateName = \"testViewDataState\"\r\n                break;    \r\n            default:\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                dataStateName =\"testAttachmentDataState\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(url, inputParamData)\r\n                .then(response => {\r\n                    let responseData = {\r\n                        ...response.data,\r\n                        JASelectedSample: inputData.JASelectedSample || inputData.masterData.JASelectedSample,\r\n                        JASelectedTest: inputData.JASelectedTest,\r\n                        activeTabIndex: inputData.activeTabIndex,\r\n                        activeTabId: inputData.activeTabId\r\n                    }\r\n                    let skipInfo = {};\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        JASelectedTest: inputData.JASelectedTest\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            activeTabIndex: inputData.activeTabIndex,\r\n                            activeTabId: inputData.activeTabId,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            loading: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.activeTestTab,\r\n                            testskip: undefined,\r\n                            testtake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n            let skipInfo = {};\r\n            let masterData = {\r\n                ...inputData.masterData,\r\n                JASelectedTest: inputData.JASelectedTest\r\n            }\r\n            if (masterData[activeName].length <= inputData.skip) {\r\n\r\n                skipInfo = {\r\n\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        skip: 0,\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            } else {\r\n                skipInfo = {\r\n                    ...skipInfo,\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData,\r\n                    loading: false,\r\n                    showFilter: false,\r\n                    activeTestTab: inputData.activeTestTab,\r\n                    screenName: inputData.screenName,\r\n                    ...skipInfo\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function validateEsignforJobAllocation(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = inputParam.screenData.inputParam.methodUrl;\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    dispatch(dispatchMethods(inputParam[\"screenData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nfunction dispatchMethods(screenData) {\r\n    return (dispatch) => {\r\n        let action = screenData.inputParam.action\r\n        switch (action) {\r\n            case \"receiveinlab\":\r\n                dispatch(ReceiveinLabStatusWise(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"allotjob\":\r\n                dispatch(AllotJobAction(screenData.inputParam, screenData.masterData));\r\n                break;  \r\n            case \"allotanotheruser\":\r\n                dispatch(AllotAnotherUserAction(screenData.inputParam, screenData.masterData));\r\n                break;    \r\n            case \"reschedule\":\r\n                dispatch(RescheduleJobAction(screenData.inputParam, screenData.masterData));\r\n                break;    \r\n            case \"canceltest\":\r\n                dispatch(CancelTestWise(screenData.inputParam, screenData.masterData));\r\n                break;                      \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function updatedObjectWithNewElement1(oldList, newList) {\r\n    oldList = [...newList, ...oldList];\r\n    return oldList;\r\n  }\r\n\r\n\r\n\r\n  export function getAnalystCalenderBasedOnUser(nusercode,masterData, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getAnalystCalendarBasedOnUser\", {\"nusercode\": nusercode,\r\n                          \"userinfo\": userInfo})\r\n            .then(response => {          \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData:{...masterData,analystCalenderData: response.data.UserData},\r\n                        loading:false,\r\n                        selectedRecord\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getInstrumentForSchedule(ninstrumentcatcode,userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getInstrumentBasedCategoryForSchedule\", {\r\n                \"ninstrumentcatcode\": ninstrumentcatcode,\"userinfo\":userInfo\r\n            })\r\n            .then(response => {\r\n                let Instrument = [];               \r\n                const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\"sinstrumentid\", undefined, undefined, false);\r\n                Instrument = InstrumentMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Instrument,\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}