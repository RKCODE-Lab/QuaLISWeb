{"ast":null,"code":"import rsapi from \"../rsapi\";\nimport { toast } from \"react-toastify\";\nimport { constructOptionList, sortData } from \"../components/CommonScript\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nimport Axios from \"axios\";\nimport { initRequest } from \"./LoginAction\";\nimport { transactionStatus, attachmentType } from \"../components/Enumeration\";\nimport { intl } from \"../components/App\"; //Test click\n\nexport const getTestMaster = (testItem, userInfo, masterData) => {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testmaster/getTestById\", {\n      ntestcode: testItem.ntestcode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n}; //tab click\n\nexport const getTestDetails = inputParam => {\n  return function (dispatch) {\n    const testParameter = inputParam.testParameter;\n    dispatch(initRequest(true));\n    rsapi.post(\"/testmaster/getothertestdetails\", {\n      ntestcode: testParameter.ntestcode,\n      \"nFlag\": inputParam.nFlag,\n      ntestparametercode: testParameter.ntestparametercode,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      let masterData = inputParam.masterData;\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}; //Add Test\n\nexport const addTest = (operation, testmaster, userInfo, ncontrolCode, nfilterTestCategory) => {\n  return function (dispatch) {\n    if (nfilterTestCategory && Object.values(nfilterTestCategory).length > 0) {\n      dispatch(initRequest(true));\n      const urlArray = [rsapi.post(\"testcategory/getTestCategory\", {\n        \"userinfo\": userInfo\n      }), rsapi.post(\"checklist/getApprovedChecklist\", {\n        \"userinfo\": userInfo\n      })];\n\n      if (operation === \"update\") {\n        urlArray.push(rsapi.post(\"testmaster/getActiveTestById\", {\n          \"userinfo\": userInfo,\n          ntestcode: testmaster.ntestcode\n        }));\n      } else if (operation === \"create\") {\n        urlArray.push(rsapi.post(\"parametertype/getParameterType\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"grade/getGrade\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"section/getSection\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"method/getMethod\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"unit/getUnit\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"instrumentcategory/fetchinstrumentcategory\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"testmaster/getAddTest\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"containertype/getContainerType\", {\n          \"userinfo\": userInfo\n        }));\n      } else if (operation === \"copy\") {\n        urlArray.push(rsapi.post(\"testmaster/validateCopyTest\", {\n          \"userinfo\": userInfo,\n          ntestcode: testmaster.ntestcode\n        }));\n      }\n\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = {};\n        const testCategoryMap = constructOptionList(response[0].data || [], \"ntestcategorycode\", \"stestcategoryname\", false, false, true);\n        const testCategory = testCategoryMap.get(\"OptionList\");\n        const checklistMap = constructOptionList(response[0].data || [], \"nchecklistversioncode\", \"schecklistname\", false, false, true);\n        const ChecklistVersion = checklistMap.get(\"OptionList\");\n        const testData = {\n          testCategory,\n          ChecklistVersion\n        };\n        let parameterData = {};\n        let otherTestData = {};\n        let needOtherTest = false;\n\n        if (operation === \"update\") {\n          const editData = response[2].data;\n          selectedRecord = editData;\n          selectedRecord[\"ntestcategorycode\"] = {\n            \"value\": editData[\"ntestcategorycode\"],\n            \"label\": editData[\"stestcategoryname\"]\n          };\n          selectedRecord[\"nchecklistversioncode\"] = {\n            \"value\": editData[\"nchecklistversioncode\"],\n            \"label\": editData[\"schecklistname\"]\n          };\n        } else if (operation === \"copy\") {\n          selectedRecord = {\n            ntestcategorycode: nfilterTestCategory.value === -2 ? testCategory.length > 0 ? // {\"label\": testCategory[0].stestcategoryname, \"value\": testCategory[0].ntestcategorycode}\n            testCategory[0] : \"\" : nfilterTestCategory,\n            ntransactionstatus: transactionStatus.ACTIVE,\n            naccredited: transactionStatus.NOTACCREDITED,\n            stestsynonym: \"\",\n            stestname: \"\",\n            sdescription: \"\",\n            ncost: \"\"\n          };\n        } else {\n          // const { Grade } = response[7].data; //ParameterType\n          const parameterMap = constructOptionList(response[2].data || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true); // const parameterType = parameterMap.get(\"OptionList\");//response[2].data;\n\n          const gradeMap = constructOptionList(response[3].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true); // const grade = gradeMap.get(\"OptionList\");// response[3].data;\n\n          const parameterItem = parameterMap.get(\"DefaultValue\") ? parameterMap.get(\"DefaultValue\") : \"\"; //parameterType.filter(item=>{ return item.nparametertypecode === 3 });//ParameterType[0];\n\n          selectedRecord = {\n            // nsectioncode: {\"value\": response[2].data[0].nsectioncode, \"label\": response[2].data[0].ssectionname},\n            nunitcode: -1,\n            nparametertypecode: parameterItem,\n            //{\"value\": parameterItem[0].nparametertypecode, \"label\": parameterItem[0].sdisplaystatus},\n            ntestcategorycode: nfilterTestCategory.value === -2 ? testCategory.length > 0 ? // {\"label\": testCategory[0].stestcategoryname, \"value\": testCategory[0].ntestcategorycode}: \"\")\n            testCategory[0] : \"\" : nfilterTestCategory,\n            ntransactionstatus: transactionStatus.ACTIVE,\n            naccredited: transactionStatus.NOTACCREDITED,\n            stestsynonym: \"\",\n            stestname: \"\",\n            sdescription: \"\",\n            ncost: \"\"\n          };\n          let needUnit = true;\n          let needRoundingDigit = true;\n          let needCodedResult = true;\n          let needActualResult = true;\n          let npredefinedcode = transactionStatus.NO;\n          const unitMap = constructOptionList(response[6].data || [], \"nunitcode\", \"sunitname\", false, false, true);\n\n          if (parameterItem && parameterItem.item) {\n            if (parameterItem.item[\"nunit\"] === transactionStatus.YES) {\n              needUnit = false;\n              selectedRecord[\"nunitcode\"] = unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\"; //{\"value\": response[4].data[0][\"nunitcode\"], \"label\": response[4].data[0][\"sunitname\"]};\n            }\n\n            if (parameterItem.item[\"nroundingdigit\"] === transactionStatus.YES) {\n              needRoundingDigit = false;\n            }\n\n            if (parameterItem.item[\"npredefinedcode\"] === transactionStatus.YES) {\n              needCodedResult = false;\n              npredefinedcode = parameterItem.item[\"npredefinedcode\"];\n            }\n\n            if (parameterItem.item[\"ngrade\"] === transactionStatus.YES) {\n              needActualResult = false;\n              selectedRecord[\"ngradecode\"] = gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\"; //{\"value\": Grade.ngradecode, \"label\": Grade[\"sdisplaystatus\"]};\n            }\n          } // const testParameterMap = constructOptionList(response[8].data[\"TestParameter\"] || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true);\n\n\n          parameterData = {\n            grade: gradeMap.get(\"OptionList\"),\n            parameterType: parameterMap.get(\"OptionList\"),\n            unit: unitMap.get(\"OptionList\"),\n            needRoundingDigit,\n            needUnit,\n            needCodedResult,\n            needActualResult,\n            npredefinedcode,\n            testParameter: constructOptionList(response[8].data[\"TestParameter\"] || [], 'sparametername', 'sparametername', false, false, true).get(\"OptionList\"),\n            defaultUnit: unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\",\n            defaultGrade: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\" //testParameterMap.get(\"OptionList\")\n\n          };\n          const sectionMap = constructOptionList(response[4].data || [], \"nsectioncode\", \"ssectionname\", false, false, true);\n          const methodMap = constructOptionList(response[5].data || [], \"nmethodcode\", \"smethodname\", false, false, true);\n          const instCatMap = constructOptionList(response[7].data || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", false, false, true);\n          const continerType = constructOptionList(response[9].data || [], \"ncontainertypecode\", \"scontainertype\", false, false, true);\n          otherTestData = {\n            section: sectionMap.get(\"OptionList\"),\n            method: methodMap.get(\"OptionList\"),\n            instrumentcategory: instCatMap.get(\"OptionList\"),\n            containertype: continerType.get(\"OptionList\")\n          };\n          needOtherTest = true;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openModal: true,\n            needOtherTest,\n            operation: operation,\n            screenName: \"IDS_TEST\",\n            selectedRecord,\n            ncontrolCode,\n            testData,\n            parameterData,\n            otherTestData,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_TESTCATEGORYNOTAVAILABLE\"\n      }));\n    }\n  };\n}; //Add Test Parameter\n\nexport const addParameter = (operation, ntestparametercode, userInfo, ncontrolCode) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    const urlArray = [rsapi.post(\"unit/getUnit\", {\n      \"userinfo\": userInfo\n    }), rsapi.post(\"parametertype/getParameterType\", {\n      \"userinfo\": userInfo\n    }), rsapi.post(\"grade/getGrade\", {\n      \"userinfo\": userInfo\n    }), rsapi.post(\"testmaster/getAddTest\", {\n      \"userinfo\": userInfo\n    })];\n\n    if (operation === \"update\") {\n      urlArray.push(rsapi.post(\"testmaster/getActiveParameterById\", {\n        ntestparametercode: ntestparametercode,\n        \"userinfo\": userInfo\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      // const { Grade, ParameterType } = response[1].data;\n      const parameterMap = constructOptionList(response[1].data || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true);\n      const gradeMap = constructOptionList(response[2].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\n      const unitMap = constructOptionList(response[0].data || [], \"nunitcode\", \"sunitname\", false, false, true); //response[2].data;\n      // const grade = response[2].data;\n      // const parameterType = response[1].data;\n\n      let selectedRecord = {};\n      let needUnit = true;\n      let needRoundingDigit = true;\n      let needCodedResult = true;\n      let needActualResult = true;\n      let npredefinedcode = transactionStatus.No;\n\n      if (operation === \"update\") {\n        const editTestParameter = response[4].data.TestParameter[0];\n        selectedRecord = editTestParameter;\n        const nparametertypecode = editTestParameter[\"nparametertypecode\"];\n        const parameterItem = parameterMap.get(\"OptionList\").filter(function (item) {\n          return item.value === nparametertypecode;\n        });\n        selectedRecord[\"sparametername\"] = {\n          value: editTestParameter[\"sparametername\"],\n          label: editTestParameter[\"sparametername\"]\n        };\n        selectedRecord[\"nparametertypecode\"] = {\n          value: nparametertypecode,\n          label: editTestParameter[\"sdisplaystatus\"]\n        };\n\n        if (parameterItem && parameterItem[0].item) {\n          const selectedParameterItem = parameterItem[0].item;\n\n          if (selectedParameterItem[\"nunitrequired\"] === transactionStatus.YES) {\n            needUnit = false;\n            selectedRecord[\"nunitcode\"] = {\n              value: editTestParameter[\"nunitcode\"],\n              label: editTestParameter[\"sunitname\"]\n            };\n          }\n\n          if (selectedParameterItem[\"nroundingrequired\"] === transactionStatus.YES) {\n            needRoundingDigit = false;\n          }\n\n          if (selectedParameterItem[\"npredefinedrequired\"] === transactionStatus.YES || selectedParameterItem[\"ngraderequired\"] === transactionStatus.YES) {\n            const editCodedResult = response[4].data.TestPredefinedParameter;\n\n            if (editCodedResult.length > 0) {\n              const defaultCodedResult = editCodedResult.filter(function (item) {\n                return item.ndefaultstatus === transactionStatus.YES;\n              });\n\n              if (defaultCodedResult.length > 0) {\n                selectedRecord[\"spredefinedname\"] = defaultCodedResult[0].spredefinedname;\n                selectedRecord[\"ntestpredefinedcode\"] = defaultCodedResult[0].ntestpredefinedcode;\n                ;\n                selectedRecord[\"ngradecode\"] = {\n                  value: defaultCodedResult[0].ngradecode,\n                  label: defaultCodedResult[0][\"sdisplaystatus\"]\n                };\n              } else {\n                selectedRecord[\"spredefinedname\"] = editCodedResult[0].spredefinedname;\n                selectedRecord[\"ntestpredefinedcode\"] = editCodedResult[0].ntestpredefinedcode;\n                selectedRecord[\"ngradecode\"] = {\n                  value: editCodedResult[0].ngradecode,\n                  label: editCodedResult[0][\"sdisplaystatus\"]\n                };\n              }\n            }\n          } else {\n            selectedRecord[\"spredefinedname\"] = \"\";\n            selectedRecord[\"ngradecode\"] = -1;\n          }\n\n          if (selectedParameterItem[\"npredefinedrequired\"] === transactionStatus.YES) {\n            needCodedResult = false;\n            npredefinedcode = selectedParameterItem[\"npredefinedcode\"];\n          }\n\n          if (selectedParameterItem[\"ngraderequired\"] === transactionStatus.YES) {\n            needActualResult = false;\n          }\n        }\n      } else {\n        const parameterItem = parameterMap.get(\"DefaultValue\") ? parameterMap.get(\"DefaultValue\").item : {}; // parameterType.filter(item=>{ return item.nparametertypecode === transactionStatus.YES });\n\n        if (parameterItem[\"nunitrequired\"] === transactionStatus.YES) {\n          needUnit = false;\n          selectedRecord[\"nunitcode\"] = unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\"; //{\"value\": response[0].data[0][\"nunitcode\"], \"label\": response[0].data[0][\"sunitname\"]};\n        }\n\n        if (parameterItem[\"nroundingrequired\"] === transactionStatus.YES) {\n          needRoundingDigit = false;\n        }\n\n        if (parameterItem[\"npredefinedcrequired\"] === transactionStatus.YES) {\n          needCodedResult = false;\n          npredefinedcode = parameterItem[\"npredefinedcode\"];\n        }\n\n        if (parameterItem[\"ngraderequired\"] === transactionStatus.YES) {\n          needActualResult = false; // selectedRecord[\"ngradecode\"] = {\"value\": Grade.ngradecode, \"label\": Grade[\"sdisplaystatus\"]};\n        }\n\n        selectedRecord[\"nparametertypecode\"] = parameterMap.get(\"DefaultValue\"); //{value: parameterItem[0].nparametertypecode, label: parameterItem[0].sdisplaystatus};\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          showSaveContinue: true,\n          operation: operation,\n          screenName: \"IDS_PARAMETER\",\n          selectedRecord,\n          parameterData: {\n            unit: unitMap.get(\"OptionList\"),\n            grade: gradeMap.get(\"OptionList\"),\n            parameterType: parameterMap.get(\"OptionList\"),\n            needUnit,\n            needRoundingDigit,\n            needCodedResult,\n            needActualResult,\n            npredefinedcode,\n            testParameter: constructOptionList(response[3].data[\"TestParameter\"] || [], 'sparametername', 'sparametername', false, false, true).get(\"OptionList\"),\n            defaultUnit: unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\",\n            defaultGrade: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\"\n          },\n          ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}; //Add Coded result\n\nexport const addCodedResult = (operation, paramdata, userInfo, ncontrolCode) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    const urlArray = [rsapi.post(\"testmaster/getAddTest\", {\n      \"userinfo\": userInfo\n    }), rsapi.post(\"grade/getGrade\", {\n      \"userinfo\": userInfo\n    })];\n\n    if (operation === \"update\") {\n      urlArray.push(rsapi.post(\"testmaster/getActivePredefinedParameterById\", {\n        ntestpredefinedcode: paramdata[\"ntestpredefinedcode\"],\n        \"userinfo\": userInfo\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {}; // const grade = response[1].data;\n\n      const gradeMap = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\n\n      if (operation === \"update\") {\n        const editCodedResult = response[2].data;\n        selectedRecord = {\n          ntestpredefinedcode: paramdata[\"ntestpredefinedcode\"],\n          ntestparametercode: paramdata[\"ntestparametercode\"],\n          ngradecode: {\n            \"label\": editCodedResult[\"sdisplaystatus\"],\n            \"value\": editCodedResult[\"ngradecode\"]\n          },\n          spredefinedname: editCodedResult[\"spredefinedname\"],\n          ndefaultstatus: editCodedResult[\"ndefaultstatus\"]\n        };\n      } else {\n        selectedRecord = {\n          ntestparametercode: paramdata[\"ntestparametercode\"],\n          ngradecode: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\" //{\"value\": grade[0].ngradecode, \"label\": grade[0][\"sdisplaystatus\"]}\n\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          showSaveContinue: false,\n          operation: operation,\n          screenName: \"IDS_CODEDRESULT\",\n          parameterData: {\n            grade: gradeMap.get(\"OptionList\"),\n            defaultGrade: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\"\n          },\n          selectedRecord,\n          ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}; //Add parameter specification\n\nexport const addParameterSpecification = (operation, paramdata, userInfo, ncontrolCode) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    let inputparam = [];\n    let surl = \"\";\n\n    if (operation === \"update\") {\n      surl = \"getParameterSpecificationById\";\n      inputparam = {\n        userinfo: userInfo,\n        ntestparamnumericcode: paramdata[\"ntestparamnumericcode\"]\n      };\n    } else {\n      surl = \"getParameterSpecificationByCount\";\n      inputparam = {\n        userinfo: userInfo,\n        ntestparametercode: paramdata[\"ntestparametercode\"]\n      };\n    }\n\n    rsapi.post(\"testmaster/\" + surl, inputparam).then(response => {\n      let selectedRecord = {};\n\n      if (operation === \"update\") {\n        selectedRecord = { ...response.data\n        };\n      } else {\n        selectedRecord = {\n          ntestparametercode: paramdata[\"ntestparametercode\"]\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          showSaveContinue: false,\n          operation: operation,\n          screenName: \"IDS_SPECIFICATION\",\n          selectedRecord,\n          ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getAvailableData = (testItem, url, key, screenName, userInfo, ncontrolCode) => {\n  return dispatch => {\n    const inputParam = {\n      TestMaster: testItem,\n      \"userinfo\": userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"testmaster/\" + url, inputParam).then(response => {\n      const availableDataMap = constructOptionList(response.data, key === \"section\" ? \"nsectioncode\" : key === \"method\" ? \"nmethodcode\" : key == \"instrumentcategory\" ? \"ninstrumentcatcode\" : \"ncontainertypecode\", key === \"section\" ? \"ssectionname\" : key === \"method\" ? \"smethodname\" : key == \"instrumentcategory\" ? \"sinstrumentcatname\" : \"scontainertype\", false, false, true);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          showSaveContinue: false,\n          otherTestData: {\n            [key]: availableDataMap.get(\"OptionList\")\n          },\n          screenName: screenName,\n          selectedRecord: {\n            availableData: \"\"\n          },\n          operation: \"create\",\n          ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 417) {\n        toast.info(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n}; //Add formula\n\nexport const addFormula = (paramdata, userInfo, ncontrolCode) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"testmaster/addTestFormula\", {\n      userinfo: userInfo,\n      nFlag: 1\n    }).then(response => {\n      const responseData = response.data;\n      const testMasterMap = constructOptionList(responseData[\"TestMaster\"], \"ntestcode\", \"stestname\", false, false, false);\n      const testCategoryMap = constructOptionList(responseData[\"TestCategory\"], \"ntestcategorycode\", \"stestcategoryname\", false, false, true);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          showSaveContinue: false,\n          operation: \"create\",\n          screenName: \"IDS_FORMULA\",\n          formulaData: {\n            operators: responseData[\"Operators\"],\n            functions: responseData[\"Functions\"],\n            testCategory: testCategoryMap.get(\"OptionList\"),\n            testMaster: testMasterMap.get(\"OptionList\"),\n            dynamicFormulaFields: responseData[\"DynamicFormulaFields\"]\n          },\n          isFormulaOpen: true,\n          selectedRecord: {\n            ntestcategorycode: testCategoryMap.get(\"OptionList\") && testCategoryMap.get(\"OptionList\").length > 0 ? testCategoryMap.get(\"OptionList\")[0] : \"\",\n            //responseData[\"TestCategory\"].length>0? {\"label\": responseData[\"TestCategory\"][0][\"stestcategoryname\"], \"value\": responseData[\"TestCategory\"][0][\"ntestcategorycode\"]}: \"\",\n            ntestcode: testMasterMap.get(\"OptionList\") && testMasterMap.get(\"OptionList\").length > 0 ? testMasterMap.get(\"OptionList\")[0] : \"\",\n            //responseData[\"TestMaster\"].length>0? {\"label\": responseData[\"TestMaster\"][0][\"stestname\"], \"value\": responseData[\"TestMaster\"][0][\"ntestcode\"]}: \"\",\n            ntestparametercode: paramdata[\"ntestparametercode\"]\n          },\n          ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}; //Formula test category and test change event function\n\nexport const formulaChangeFunction = (inputParam, formulaData, caseNo, selectedRecordData, methodUrl) => {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testmaster\" + methodUrl, inputParam).then(response => {\n      const masterData = response.data;\n      const testMasterMap = constructOptionList(masterData[\"TestMaster\"] || [], \"ntestcode\", \"stestname\", 'descending', 'ntestcode', false);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: caseNo === 1 ? {\n          formulaData: { ...formulaData,\n            testMaster: testMasterMap.get(\"OptionList\"),\n            dynamicFormulaFields: masterData[\"DynamicFormulaFields\"] || []\n          },\n          selectedRecord: { ...selectedRecordData,\n            ntestcode: testMasterMap.get(\"OptionList\") && testMasterMap.get(\"OptionList\").length > 0 ? testMasterMap.get(\"OptionList\")[0] : \"\" // masterData[\"TestMaster\"].length>0? {\"label\": masterData[\"TestMaster\"][0][\"stestname\"], \"value\": masterData[\"TestMaster\"][0][\"ntestcode\"]}: \"\"\n\n          },\n          loading: false\n        } : {\n          formulaData: { ...formulaData,\n            dynamicFormulaFields: masterData[\"DynamicFormulaFields\"]\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const changeTestCategoryFilter = (inputParam, filterTestCategory) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testmaster/get\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      const masterData = response.data;\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData: { ...masterData,\n            filterTestCategory,\n            nfilterTestCategory: inputParam.inputData.nfilterTestCategory\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const addTestFile = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\n      userinfo: inputParam.userInfo\n    })];\n\n    if (inputParam.operation === \"update\") {\n      urlArray.push(rsapi.post(\"/testmaster/editTestFile\", {\n        userinfo: inputParam.userInfo,\n        testfile: inputParam.selectedRecord\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\n      const linkmaster = linkMap.get(\"OptionList\");\n      let selectedRecord = {};\n      const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\n      let disabled = false;\n      let editObject = {};\n\n      if (inputParam.operation === \"update\") {\n        editObject = response[1].data;\n        let nlinkcode = {};\n        let link = {};\n\n        if (editObject.nattachmenttypecode === attachmentType.LINK) {\n          nlinkcode = {\n            \"label\": editObject.slinkname,\n            \"value\": editObject.nlinkcode\n          };\n          link = {\n            slinkfilename: editObject.sfilename,\n            slinkdescription: editObject.sdescription,\n            nlinkdefaultstatus: editObject.ndefaultstatus,\n            sfilesize: '',\n            nfilesize: 0,\n            ndefaultstatus: 4,\n            sfilename: ''\n          };\n        } else {\n          nlinkcode = defaultLink.length > 0 ? defaultLink[0] : \"\"; //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\"\n\n          link = {\n            slinkfilename: '',\n            slinkdescription: '',\n            nlinkdefaultstatus: 4,\n            sfilesize: editObject.sfilesize,\n            nfilesize: editObject.nfilesize,\n            ndefaultstatus: editObject.ndefaultstatus,\n            sfilename: editObject.sfilename\n          };\n        }\n\n        selectedRecord = { ...link,\n          ntestfilecode: editObject.ntestfilecode,\n          nattachmenttypecode: editObject.nattachmenttypecode,\n          ...editObject,\n          nlinkcode // disabled: true\n\n        };\n      } else {\n        selectedRecord = {\n          nattachmenttypecode: response[0].data.AttachmentType.length > 0 ? response[0].data.AttachmentType[0].nattachmenttypecode : attachmentType.FTP,\n          nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\",\n          //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\n          disabled\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          [inputParam.modalName]: true,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolCode,\n          selectedRecord,\n          loading: false,\n          linkMaster: linkmaster,\n          showSaveContinue: false,\n          editFiles: editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getActiveTestContainerTypeById = containerParam => {\n  return function (dispatch) {\n    let urlArray = [];\n    const containerTypeById = rsapi.post(\"containertype/getContainerType\", {\n      \"userinfo\": containerParam.userInfo\n    });\n    const containerById = rsapi.post(\"testmaster/getActiveTestContainerTypeById\", {\n      [containerParam.primaryKeyField]: containerParam.primaryKeyValue,\n      \"userinfo\": containerParam.userInfo\n    });\n    urlArray = [containerTypeById, containerById];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      const continerType = constructOptionList(response[0].data || [], \"ncontainertypecode\", \"scontainertype\", false, false, true);\n      let otherTestData = {\n        containertype: continerType.get(\"OptionList\")\n      };\n      let ContainerType = [];\n      ContainerType.push({\n        \"value\": response[1].data[\"ncontainertypecode\"],\n        \"label\": response[1].data[\"scontainertype\"]\n      });\n      selectedRecord = response[1].data;\n      selectedRecord[\"ncontainertypecode\"] = ContainerType[0];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          otherTestData: otherTestData,\n          selectedRecord: selectedRecord,\n          isOpen: true,\n          operation: containerParam.operation,\n          screenName: \"IDS_CONTAINERTYPE\",\n          openChildModal: true,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/TestMasterAction.js"],"names":["rsapi","toast","constructOptionList","sortData","DEFAULT_RETURN","Axios","initRequest","transactionStatus","attachmentType","intl","getTestMaster","testItem","userInfo","masterData","dispatch","post","ntestcode","userinfo","then","response","data","type","payload","loading","dataState","undefined","catch","error","message","getTestDetails","inputParam","testParameter","nFlag","ntestparametercode","status","warn","addTest","operation","testmaster","ncontrolCode","nfilterTestCategory","Object","values","length","urlArray","push","all","selectedRecord","testCategoryMap","testCategory","get","checklistMap","ChecklistVersion","testData","parameterData","otherTestData","needOtherTest","editData","ntestcategorycode","value","ntransactionstatus","ACTIVE","naccredited","NOTACCREDITED","stestsynonym","stestname","sdescription","ncost","parameterMap","gradeMap","parameterItem","nunitcode","nparametertypecode","needUnit","needRoundingDigit","needCodedResult","needActualResult","npredefinedcode","NO","unitMap","item","YES","grade","parameterType","unit","defaultUnit","defaultGrade","sectionMap","methodMap","instCatMap","continerType","section","method","instrumentcategory","containertype","openModal","screenName","formatMessage","id","addParameter","No","editTestParameter","TestParameter","filter","label","selectedParameterItem","editCodedResult","TestPredefinedParameter","defaultCodedResult","ndefaultstatus","spredefinedname","ntestpredefinedcode","ngradecode","openChildModal","showSaveContinue","addCodedResult","paramdata","addParameterSpecification","inputparam","surl","ntestparamnumericcode","getAvailableData","url","key","TestMaster","availableDataMap","availableData","info","addFormula","responseData","testMasterMap","formulaData","operators","functions","testMaster","dynamicFormulaFields","isFormulaOpen","formulaChangeFunction","caseNo","selectedRecordData","methodUrl","changeTestCategoryFilter","filterTestCategory","inputData","addTestFile","testfile","linkMap","LinkMaster","linkmaster","defaultLink","items","ndefaultlink","disabled","editObject","nlinkcode","link","nattachmenttypecode","LINK","slinkname","slinkfilename","sfilename","slinkdescription","nlinkdefaultstatus","sfilesize","nfilesize","ntestfilecode","AttachmentType","FTP","modalName","linkMaster","editFiles","getActiveTestContainerTypeById","containerParam","containerTypeById","containerById","primaryKeyField","primaryKeyValue","ContainerType","isOpen"],"mappings":"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","sourcesContent":["import rsapi from \"../rsapi\";\r\nimport {\r\n    toast\r\n} from \"react-toastify\";\r\nimport {\r\n    constructOptionList,\r\n    sortData\r\n} from \"../components/CommonScript\";\r\nimport {\r\n    DEFAULT_RETURN\r\n} from \"./LoginTypes\";\r\nimport Axios from \"axios\";\r\nimport {\r\n    initRequest\r\n} from \"./LoginAction\";\r\nimport {\r\n    transactionStatus,\r\n    attachmentType\r\n} from \"../components/Enumeration\";\r\nimport {\r\n    intl\r\n} from \"../components/App\";\r\n\r\n//Test click\r\nexport const getTestMaster = (testItem, userInfo, masterData) => {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testmaster/getTestById\", {\r\n                ntestcode: testItem.ntestcode,\r\n                userinfo: userInfo\r\n            })\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        dataState: undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\n//tab click\r\nexport const getTestDetails = (inputParam) => {\r\n    return function (dispatch) {\r\n        const testParameter = inputParam.testParameter;\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testmaster/getothertestdetails\", {\r\n                ntestcode: testParameter.ntestcode,\r\n                \"nFlag\": inputParam.nFlag,\r\n                ntestparametercode: testParameter.ntestparametercode,\r\n                userinfo: inputParam.userInfo\r\n            })\r\n            .then(response => {\r\n                let masterData = inputParam.masterData\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data\r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\n//Add Test\r\nexport const addTest = (operation, testmaster, userInfo, ncontrolCode, nfilterTestCategory) => {\r\n    return function (dispatch) {\r\n        if (nfilterTestCategory && Object.values(nfilterTestCategory).length > 0) {\r\n            dispatch(initRequest(true));\r\n            const urlArray = [\r\n                rsapi.post(\"testcategory/getTestCategory\", {\r\n                    \"userinfo\": userInfo\r\n                }),\r\n                rsapi.post(\"checklist/getApprovedChecklist\", {\r\n                    \"userinfo\": userInfo\r\n                })\r\n            ];\r\n            if (operation === \"update\") {\r\n                urlArray.push(rsapi.post(\"testmaster/getActiveTestById\", {\r\n                    \"userinfo\": userInfo,\r\n                    ntestcode: testmaster.ntestcode\r\n                }))\r\n            } else if (operation === \"create\") {\r\n                urlArray.push(rsapi.post(\"parametertype/getParameterType\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"grade/getGrade\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"section/getSection\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"method/getMethod\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"unit/getUnit\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"instrumentcategory/fetchinstrumentcategory\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"testmaster/getAddTest\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"containertype/getContainerType\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n            } else if (operation === \"copy\") {\r\n                urlArray.push(rsapi.post(\"testmaster/validateCopyTest\", {\r\n                    \"userinfo\": userInfo,\r\n                    ntestcode: testmaster.ntestcode\r\n                }));\r\n            }\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = {};\r\n                    const testCategoryMap = constructOptionList(response[0].data || [], \"ntestcategorycode\", \"stestcategoryname\", false, false, true);\r\n                    const testCategory = testCategoryMap.get(\"OptionList\");\r\n                    const checklistMap = constructOptionList(response[0].data || [], \"nchecklistversioncode\", \"schecklistname\", false, false, true);\r\n                    const ChecklistVersion = checklistMap.get(\"OptionList\");\r\n                    const testData = {\r\n                        testCategory,\r\n                        ChecklistVersion\r\n                    };\r\n                    let parameterData = {};\r\n                    let otherTestData = {}\r\n                    let needOtherTest = false;\r\n                    if (operation === \"update\") {\r\n                        const editData = response[2].data;\r\n                        selectedRecord = editData;\r\n                        selectedRecord[\"ntestcategorycode\"] = {\r\n                            \"value\": editData[\"ntestcategorycode\"],\r\n                            \"label\": editData[\"stestcategoryname\"]\r\n                        };\r\n                        selectedRecord[\"nchecklistversioncode\"] = {\r\n                            \"value\": editData[\"nchecklistversioncode\"],\r\n                            \"label\": editData[\"schecklistname\"]\r\n                        };\r\n                    } else if (operation === \"copy\") {\r\n                        selectedRecord = {\r\n                            ntestcategorycode: nfilterTestCategory.value === -2 ? (testCategory.length > 0 ?\r\n                                // {\"label\": testCategory[0].stestcategoryname, \"value\": testCategory[0].ntestcategorycode}\r\n                                testCategory[0] : \"\") : nfilterTestCategory,\r\n                            ntransactionstatus: transactionStatus.ACTIVE,\r\n                            naccredited: transactionStatus.NOTACCREDITED,\r\n                            stestsynonym: \"\",\r\n                            stestname: \"\",\r\n                            sdescription: \"\",\r\n                            ncost: \"\"\r\n                        }\r\n                    } else {\r\n                        // const { Grade } = response[7].data; //ParameterType\r\n                        const parameterMap = constructOptionList(response[2].data || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true);\r\n                        // const parameterType = parameterMap.get(\"OptionList\");//response[2].data;\r\n                        const gradeMap = constructOptionList(response[3].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\r\n                        // const grade = gradeMap.get(\"OptionList\");// response[3].data;\r\n                        const parameterItem = parameterMap.get(\"DefaultValue\") ? parameterMap.get(\"DefaultValue\") : \"\"; //parameterType.filter(item=>{ return item.nparametertypecode === 3 });//ParameterType[0];\r\n                        selectedRecord = {\r\n                            // nsectioncode: {\"value\": response[2].data[0].nsectioncode, \"label\": response[2].data[0].ssectionname},\r\n                            nunitcode: -1,\r\n                            nparametertypecode: parameterItem, //{\"value\": parameterItem[0].nparametertypecode, \"label\": parameterItem[0].sdisplaystatus},\r\n                            ntestcategorycode: nfilterTestCategory.value === -2 ? (testCategory.length > 0 ?\r\n                                // {\"label\": testCategory[0].stestcategoryname, \"value\": testCategory[0].ntestcategorycode}: \"\")\r\n                                testCategory[0] : \"\") : nfilterTestCategory,\r\n                            ntransactionstatus: transactionStatus.ACTIVE,\r\n                            naccredited: transactionStatus.NOTACCREDITED,\r\n                            stestsynonym: \"\",\r\n                            stestname: \"\",\r\n                            sdescription: \"\",\r\n                            ncost: \"\"\r\n                        }\r\n                        let needUnit = true;\r\n                        let needRoundingDigit = true;\r\n                        let needCodedResult = true;\r\n                        let needActualResult = true;\r\n                        let npredefinedcode = transactionStatus.NO;\r\n                        const unitMap = constructOptionList(response[6].data || [], \"nunitcode\", \"sunitname\", false, false, true);\r\n                        if (parameterItem && parameterItem.item) {\r\n                            if (parameterItem.item[\"nunit\"] === transactionStatus.YES) {\r\n                                needUnit = false;\r\n                                selectedRecord[\"nunitcode\"] = unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\";\r\n                                //{\"value\": response[4].data[0][\"nunitcode\"], \"label\": response[4].data[0][\"sunitname\"]};\r\n                            }\r\n                            if (parameterItem.item[\"nroundingdigit\"] === transactionStatus.YES) {\r\n                                needRoundingDigit = false;\r\n                            }\r\n                            if (parameterItem.item[\"npredefinedcode\"] === transactionStatus.YES) {\r\n                                needCodedResult = false;\r\n                                npredefinedcode = parameterItem.item[\"npredefinedcode\"];\r\n                            }\r\n                            if (parameterItem.item[\"ngrade\"] === transactionStatus.YES) {\r\n                                needActualResult = false;\r\n                                selectedRecord[\"ngradecode\"] = gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\";\r\n                                //{\"value\": Grade.ngradecode, \"label\": Grade[\"sdisplaystatus\"]};\r\n                            }\r\n                        }\r\n                        // const testParameterMap = constructOptionList(response[8].data[\"TestParameter\"] || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true);\r\n                        parameterData = {\r\n                            grade: gradeMap.get(\"OptionList\"),\r\n                            parameterType: parameterMap.get(\"OptionList\"),\r\n                            unit: unitMap.get(\"OptionList\"),\r\n                            needRoundingDigit,\r\n                            needUnit,\r\n                            needCodedResult,\r\n                            needActualResult,\r\n                            npredefinedcode,\r\n                            testParameter: constructOptionList(response[8].data[\"TestParameter\"] || [], 'sparametername', 'sparametername', false, false, true).get(\"OptionList\"),\r\n                            defaultUnit: unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\",\r\n                            defaultGrade: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\"\r\n                            //testParameterMap.get(\"OptionList\")\r\n                        };\r\n                        const sectionMap = constructOptionList(response[4].data || [], \"nsectioncode\", \"ssectionname\", false, false, true);\r\n                        const methodMap = constructOptionList(response[5].data || [], \"nmethodcode\", \"smethodname\", false, false, true);\r\n                        const instCatMap = constructOptionList(response[7].data || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", false, false, true);\r\n                        const continerType = constructOptionList(response[9].data || [], \"ncontainertypecode\", \"scontainertype\", false, false, true);\r\n\r\n                        otherTestData = {\r\n                            section: sectionMap.get(\"OptionList\"),\r\n                            method: methodMap.get(\"OptionList\"),\r\n                            instrumentcategory: instCatMap.get(\"OptionList\"),\r\n                            containertype: continerType.get(\"OptionList\")\r\n\r\n                        }\r\n                        needOtherTest = true;\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            openModal: true,\r\n                            needOtherTest,\r\n                            operation: operation,\r\n                            screenName: \"IDS_TEST\",\r\n                            selectedRecord,\r\n                            ncontrolCode,\r\n                            testData,\r\n                            parameterData,\r\n                            otherTestData,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_TESTCATEGORYNOTAVAILABLE\"\r\n            }))\r\n        }\r\n    }\r\n}\r\n\r\n//Add Test Parameter\r\nexport const addParameter = (operation, ntestparametercode, userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        const urlArray = [\r\n            rsapi.post(\"unit/getUnit\", {\r\n                \"userinfo\": userInfo\r\n            }),\r\n            rsapi.post(\"parametertype/getParameterType\", {\r\n                \"userinfo\": userInfo\r\n            }),\r\n            rsapi.post(\"grade/getGrade\", {\r\n                \"userinfo\": userInfo\r\n            }),\r\n            rsapi.post(\"testmaster/getAddTest\", {\r\n                \"userinfo\": userInfo\r\n            })\r\n        ];\r\n        if (operation === \"update\") {\r\n            urlArray.push(rsapi.post(\"testmaster/getActiveParameterById\", {\r\n                ntestparametercode: ntestparametercode,\r\n                \"userinfo\": userInfo\r\n            }));\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                // const { Grade, ParameterType } = response[1].data;\r\n                const parameterMap = constructOptionList(response[1].data || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true);\r\n                const gradeMap = constructOptionList(response[2].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\r\n                const unitMap = constructOptionList(response[0].data || [], \"nunitcode\", \"sunitname\", false, false, true);\r\n                //response[2].data;\r\n                // const grade = response[2].data;\r\n                // const parameterType = response[1].data;\r\n                let selectedRecord = {};\r\n                let needUnit = true;\r\n                let needRoundingDigit = true;\r\n                let needCodedResult = true;\r\n                let needActualResult = true;\r\n                let npredefinedcode = transactionStatus.No;\r\n                if (operation === \"update\") {\r\n                    const editTestParameter = response[4].data.TestParameter[0];\r\n                    selectedRecord = editTestParameter;\r\n                    const nparametertypecode = editTestParameter[\"nparametertypecode\"];\r\n                    const parameterItem = parameterMap.get(\"OptionList\").filter(function (item) {\r\n                        return item.value === nparametertypecode;\r\n                    });\r\n                    selectedRecord[\"sparametername\"] = {\r\n                        value: editTestParameter[\"sparametername\"],\r\n                        label: editTestParameter[\"sparametername\"]\r\n                    };\r\n                    selectedRecord[\"nparametertypecode\"] = {\r\n                        value: nparametertypecode,\r\n                        label: editTestParameter[\"sdisplaystatus\"]\r\n                    };\r\n                    if (parameterItem && parameterItem[0].item) {\r\n                        const selectedParameterItem = parameterItem[0].item;\r\n                        if (selectedParameterItem[\"nunitrequired\"] === transactionStatus.YES) {\r\n                            needUnit = false;\r\n                            selectedRecord[\"nunitcode\"] = {\r\n                                value: editTestParameter[\"nunitcode\"],\r\n                                label: editTestParameter[\"sunitname\"]\r\n                            };\r\n                        }\r\n                        if (selectedParameterItem[\"nroundingrequired\"] === transactionStatus.YES) {\r\n                            needRoundingDigit = false;\r\n                        }\r\n\r\n                        if (selectedParameterItem[\"npredefinedrequired\"] === transactionStatus.YES || selectedParameterItem[\"ngraderequired\"] === transactionStatus.YES) {\r\n                            const editCodedResult = response[4].data.TestPredefinedParameter;\r\n                            if (editCodedResult.length > 0) {\r\n                                const defaultCodedResult = editCodedResult.filter(function (item) {\r\n                                    return item.ndefaultstatus === transactionStatus.YES;\r\n                                });\r\n                                if (defaultCodedResult.length > 0) {\r\n                                    selectedRecord[\"spredefinedname\"] = defaultCodedResult[0].spredefinedname;\r\n                                    selectedRecord[\"ntestpredefinedcode\"] = defaultCodedResult[0].ntestpredefinedcode;;\r\n                                    selectedRecord[\"ngradecode\"] = {\r\n                                        value: defaultCodedResult[0].ngradecode,\r\n                                        label: defaultCodedResult[0][\"sdisplaystatus\"]\r\n                                    };\r\n                                } else {\r\n                                    selectedRecord[\"spredefinedname\"] = editCodedResult[0].spredefinedname;\r\n                                    selectedRecord[\"ntestpredefinedcode\"] = editCodedResult[0].ntestpredefinedcode;\r\n                                    selectedRecord[\"ngradecode\"] = {\r\n                                        value: editCodedResult[0].ngradecode,\r\n                                        label: editCodedResult[0][\"sdisplaystatus\"]\r\n                                    };\r\n                                }\r\n                            }\r\n                        } else {\r\n                            selectedRecord[\"spredefinedname\"] = \"\";\r\n                            selectedRecord[\"ngradecode\"] = -1;\r\n                        }\r\n                        if (selectedParameterItem[\"npredefinedrequired\"] === transactionStatus.YES) {\r\n                            needCodedResult = false;\r\n                            npredefinedcode = selectedParameterItem[\"npredefinedcode\"];\r\n                        }\r\n                        if (selectedParameterItem[\"ngraderequired\"] === transactionStatus.YES) {\r\n                            needActualResult = false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    const parameterItem = parameterMap.get(\"DefaultValue\") ? parameterMap.get(\"DefaultValue\").item : {};\r\n                    // parameterType.filter(item=>{ return item.nparametertypecode === transactionStatus.YES });\r\n                    if (parameterItem[\"nunitrequired\"] === transactionStatus.YES) {\r\n                        needUnit = false;\r\n                        selectedRecord[\"nunitcode\"] = unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\"; //{\"value\": response[0].data[0][\"nunitcode\"], \"label\": response[0].data[0][\"sunitname\"]};\r\n                    }\r\n                    if (parameterItem[\"nroundingrequired\"] === transactionStatus.YES) {\r\n                        needRoundingDigit = false;\r\n                    }\r\n                    if (parameterItem[\"npredefinedcrequired\"] === transactionStatus.YES) {\r\n                        needCodedResult = false;\r\n                        npredefinedcode = parameterItem[\"npredefinedcode\"];\r\n                    }\r\n                    if (parameterItem[\"ngraderequired\"] === transactionStatus.YES) {\r\n                        needActualResult = false;\r\n                        // selectedRecord[\"ngradecode\"] = {\"value\": Grade.ngradecode, \"label\": Grade[\"sdisplaystatus\"]};\r\n                    }\r\n                    selectedRecord[\"nparametertypecode\"] = parameterMap.get(\"DefaultValue\"); //{value: parameterItem[0].nparametertypecode, label: parameterItem[0].sdisplaystatus};\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal: true,\r\n                        showSaveContinue: true,\r\n                        operation: operation,\r\n                        screenName: \"IDS_PARAMETER\",\r\n                        selectedRecord,\r\n                        parameterData: {\r\n                            unit: unitMap.get(\"OptionList\"),\r\n                            grade: gradeMap.get(\"OptionList\"),\r\n                            parameterType: parameterMap.get(\"OptionList\"),\r\n                            needUnit,\r\n                            needRoundingDigit,\r\n                            needCodedResult,\r\n                            needActualResult,\r\n                            npredefinedcode,\r\n                            testParameter: constructOptionList(response[3].data[\"TestParameter\"] || [], 'sparametername', 'sparametername', false, false, true).get(\"OptionList\"),\r\n                            defaultUnit: unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\",\r\n                            defaultGrade: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\"\r\n                        },\r\n                        ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n//Add Coded result\r\nexport const addCodedResult = (operation, paramdata, userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        const urlArray = [\r\n            rsapi.post(\"testmaster/getAddTest\", {\r\n                \"userinfo\": userInfo\r\n            }),\r\n            rsapi.post(\"grade/getGrade\", {\r\n                \"userinfo\": userInfo\r\n            })\r\n        ];\r\n        if (operation === \"update\") {\r\n            urlArray.push(rsapi.post(\"testmaster/getActivePredefinedParameterById\", {\r\n                ntestpredefinedcode: paramdata[\"ntestpredefinedcode\"],\r\n                \"userinfo\": userInfo\r\n            }));\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                // const grade = response[1].data;\r\n                const gradeMap = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\r\n                if (operation === \"update\") {\r\n                    const editCodedResult = response[2].data;\r\n                    selectedRecord = {\r\n                        ntestpredefinedcode: paramdata[\"ntestpredefinedcode\"],\r\n                        ntestparametercode: paramdata[\"ntestparametercode\"],\r\n                        ngradecode: {\r\n                            \"label\": editCodedResult[\"sdisplaystatus\"],\r\n                            \"value\": editCodedResult[\"ngradecode\"]\r\n                        },\r\n                        spredefinedname: editCodedResult[\"spredefinedname\"],\r\n                        ndefaultstatus: editCodedResult[\"ndefaultstatus\"],\r\n                    }\r\n                } else {\r\n                    selectedRecord = {\r\n                        ntestparametercode: paramdata[\"ntestparametercode\"],\r\n                        ngradecode: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\" //{\"value\": grade[0].ngradecode, \"label\": grade[0][\"sdisplaystatus\"]}\r\n                    }\r\n                }\r\n              \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal: true,\r\n                        showSaveContinue: false,\r\n                        operation: operation,\r\n                        screenName: \"IDS_CODEDRESULT\",\r\n                        parameterData: {\r\n                            grade: gradeMap.get(\"OptionList\"),\r\n                            defaultGrade: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\"\r\n                        },\r\n                        selectedRecord,\r\n                        ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n//Add parameter specification\r\nexport const addParameterSpecification = (operation, paramdata, userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        let inputparam = [];\r\n        let surl = \"\";\r\n        if (operation === \"update\") {\r\n            surl = \"getParameterSpecificationById\";\r\n            inputparam = {\r\n                userinfo: userInfo,\r\n                ntestparamnumericcode: paramdata[\"ntestparamnumericcode\"]\r\n            };\r\n        } else {\r\n            surl = \"getParameterSpecificationByCount\";\r\n            inputparam = {\r\n                userinfo: userInfo,\r\n                ntestparametercode: paramdata[\"ntestparametercode\"]\r\n            };\r\n        }\r\n        rsapi.post(\"testmaster/\" + surl, inputparam)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                if (operation === \"update\") {\r\n                    selectedRecord = {\r\n                        ...response.data\r\n                    }\r\n                } else {\r\n                    selectedRecord = {\r\n                        ntestparametercode: paramdata[\"ntestparametercode\"]\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal: true,\r\n                        showSaveContinue: false,\r\n                        operation: operation,\r\n                        screenName: \"IDS_SPECIFICATION\",\r\n                        selectedRecord,\r\n                        ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getAvailableData = (testItem, url, key, screenName, userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        const inputParam = {\r\n            TestMaster: testItem,\r\n            \"userinfo\": userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testmaster/\" + url, inputParam)\r\n            .then(response => {\r\n                const availableDataMap = constructOptionList(response.data, key === \"section\" ? \"nsectioncode\" : key === \"method\" ? \"nmethodcode\" : key == \"instrumentcategory\" ?\"ninstrumentcatcode\" : \"ncontainertypecode\",\r\n                    key === \"section\" ? \"ssectionname\" : key === \"method\" ? \"smethodname\" :  key == \"instrumentcategory\" ? \"sinstrumentcatname\" : \"scontainertype\", false, false, true);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal: true,\r\n                        showSaveContinue: false,\r\n                        otherTestData: {\r\n                            [key]: availableDataMap.get(\"OptionList\")\r\n                        },\r\n                        screenName: screenName,\r\n                        selectedRecord: {\r\n                            availableData: \"\"\r\n                        },\r\n                        operation: \"create\",\r\n                        ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 417) {\r\n                    toast.info(error.response.data)\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n//Add formula\r\nexport const addFormula = (paramdata, userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testmaster/addTestFormula\", {\r\n                userinfo: userInfo,\r\n                nFlag: 1\r\n            })\r\n            .then(response => {\r\n                const responseData = response.data;\r\n                const testMasterMap = constructOptionList(responseData[\"TestMaster\"], \"ntestcode\", \"stestname\", false, false, false);\r\n                const testCategoryMap = constructOptionList(responseData[\"TestCategory\"], \"ntestcategorycode\", \"stestcategoryname\", false, false, true);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal: true,\r\n                        showSaveContinue: false,\r\n                        operation: \"create\",\r\n                        screenName: \"IDS_FORMULA\",\r\n                        formulaData: {\r\n                            operators: responseData[\"Operators\"],\r\n                            functions: responseData[\"Functions\"],\r\n                            testCategory: testCategoryMap.get(\"OptionList\"),\r\n                            testMaster: testMasterMap.get(\"OptionList\"),\r\n                            dynamicFormulaFields: responseData[\"DynamicFormulaFields\"]\r\n                        },\r\n                        isFormulaOpen: true,\r\n                        selectedRecord: {\r\n                            ntestcategorycode: testCategoryMap.get(\"OptionList\") && testCategoryMap.get(\"OptionList\").length > 0 ? testCategoryMap.get(\"OptionList\")[0] : \"\", //responseData[\"TestCategory\"].length>0? {\"label\": responseData[\"TestCategory\"][0][\"stestcategoryname\"], \"value\": responseData[\"TestCategory\"][0][\"ntestcategorycode\"]}: \"\",\r\n                            ntestcode: testMasterMap.get(\"OptionList\") && testMasterMap.get(\"OptionList\").length > 0 ? testMasterMap.get(\"OptionList\")[0] : \"\", //responseData[\"TestMaster\"].length>0? {\"label\": responseData[\"TestMaster\"][0][\"stestname\"], \"value\": responseData[\"TestMaster\"][0][\"ntestcode\"]}: \"\",\r\n                            ntestparametercode: paramdata[\"ntestparametercode\"]\r\n                        },\r\n                        ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n//Formula test category and test change event function\r\nexport const formulaChangeFunction = (inputParam, formulaData, caseNo, selectedRecordData, methodUrl) => {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testmaster\" + methodUrl, inputParam)\r\n            .then(response => {\r\n                const masterData = response.data;\r\n                const testMasterMap = constructOptionList(masterData[\"TestMaster\"] || [], \"ntestcode\", \"stestname\", 'descending', 'ntestcode', false);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n\r\n                    payload: caseNo === 1 ? {\r\n                        formulaData: {\r\n                            ...formulaData,\r\n                            testMaster: testMasterMap.get(\"OptionList\"),\r\n                            dynamicFormulaFields: masterData[\"DynamicFormulaFields\"] || []\r\n                        },\r\n                        selectedRecord: {\r\n                            ...selectedRecordData,\r\n                            ntestcode: testMasterMap.get(\"OptionList\") && testMasterMap.get(\"OptionList\").length > 0 ? testMasterMap.get(\"OptionList\")[0] : \"\"\r\n                            // masterData[\"TestMaster\"].length>0? {\"label\": masterData[\"TestMaster\"][0][\"stestname\"], \"value\": masterData[\"TestMaster\"][0][\"ntestcode\"]}: \"\"\r\n                        },\r\n                        loading: false\r\n                    } : {\r\n                        formulaData: {\r\n                            ...formulaData,\r\n                            dynamicFormulaFields: masterData[\"DynamicFormulaFields\"]\r\n                        },\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport const changeTestCategoryFilter = (inputParam, filterTestCategory) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testmaster/get\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                const masterData = response.data\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterTestCategory,\r\n                            nfilterTestCategory: inputParam.inputData.nfilterTestCategory\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport const addTestFile = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\r\n            userinfo: inputParam.userInfo\r\n        })];\r\n        if (inputParam.operation === \"update\") {\r\n            urlArray.push(rsapi.post(\"/testmaster/editTestFile\", {\r\n                userinfo: inputParam.userInfo,\r\n                testfile: inputParam.selectedRecord\r\n            }))\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\r\n                const linkmaster = linkMap.get(\"OptionList\");\r\n                let selectedRecord = {};\r\n                const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\r\n                let disabled = false;\r\n                let editObject = {};\r\n                if (inputParam.operation === \"update\") {\r\n                    editObject = response[1].data;\r\n                    let nlinkcode = {};\r\n                    let link = {};\r\n                    if (editObject.nattachmenttypecode === attachmentType.LINK) {\r\n                        nlinkcode = {\r\n                            \"label\": editObject.slinkname,\r\n                            \"value\": editObject.nlinkcode\r\n                        }\r\n\r\n                        link = {\r\n                            slinkfilename:editObject.sfilename,\r\n                            slinkdescription:editObject.sdescription,\r\n                            nlinkdefaultstatus:editObject.ndefaultstatus,\r\n                            sfilesize:'',\r\n                            nfilesize:0,\r\n                            ndefaultstatus:4,\r\n                            sfilename:'',\r\n                        }\r\n\r\n                    } else {\r\n                        nlinkcode = defaultLink.length > 0 ? defaultLink[0] : \"\" //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\"\r\n                        link = {\r\n                            slinkfilename:'',\r\n                            slinkdescription:'',\r\n                            nlinkdefaultstatus:4,\r\n                            sfilesize:editObject.sfilesize,\r\n                            nfilesize:editObject.nfilesize,\r\n                            ndefaultstatus:editObject.ndefaultstatus,\r\n                            sfilename:editObject.sfilename,\r\n                        }\r\n                    }\r\n\r\n\r\n\r\n                    selectedRecord = {\r\n                        ...link,\r\n                        ntestfilecode:editObject.ntestfilecode,\r\n                        nattachmenttypecode:editObject.nattachmenttypecode,\r\n                        ...editObject,\r\n                        nlinkcode,\r\n        \r\n                       // disabled: true\r\n                    };\r\n                } else {\r\n                    selectedRecord = {\r\n                        nattachmenttypecode:response[0].data.AttachmentType.length>0?\r\n                        response[0].data.AttachmentType[0].nattachmenttypecode:attachmentType.FTP,\r\n                        nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\", //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\r\n                        disabled\r\n                    };\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        [inputParam.modalName]: true,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord,\r\n                        loading: false,\r\n                        linkMaster: linkmaster,\r\n                        showSaveContinue: false,\r\n                        editFiles: editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {}\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n \r\n\r\nexport const getActiveTestContainerTypeById = (containerParam) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const containerTypeById =rsapi.post(\"containertype/getContainerType\", {\r\n            \"userinfo\": containerParam.userInfo});\r\n        \r\n          \r\n            const containerById=rsapi.post(\"testmaster/getActiveTestContainerTypeById\", {\r\n                [containerParam.primaryKeyField] :containerParam.primaryKeyValue,\r\n                \"userinfo\": containerParam.userInfo\r\n                });\r\n            urlArray = [containerTypeById, containerById];\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n               \r\n                const continerType = constructOptionList(response[0].data || [], \"ncontainertypecode\", \"scontainertype\", false, false, true);\r\n\r\n                let otherTestData = {\r\n                    containertype: continerType.get(\"OptionList\")\r\n\r\n                }\r\n                let ContainerType = [];\r\n\r\n                ContainerType.push({\r\n                    \"value\": response[1].data[\"ncontainertypecode\"],\r\n                    \"label\": response[1].data[\"scontainertype\"]\r\n                });\r\n                selectedRecord = response[1].data;\r\n\r\n                selectedRecord[\"ncontainertypecode\"] = ContainerType[0];\r\n                   \r\n                \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        otherTestData:otherTestData,\r\n                       selectedRecord: selectedRecord,\r\n                        isOpen: true,\r\n                        operation: containerParam.operation,\r\n                        screenName: \"IDS_CONTAINERTYPE\",\r\n                        openChildModal: true,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}