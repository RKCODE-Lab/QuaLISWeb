{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5294\\\\QuaLISWeb\\\\src\\\\pages\\\\export&import\\\\ExportButton.jsx\";\nimport React from \"react\";\nimport { faBarcode, faFileExcel, faFileImport } from \"@fortawesome/free-solid-svg-icons\";\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Button, Nav } from \"react-bootstrap\"; //import { openBarcodeModal } from '../../actions'\n//import { connect } from \"react-redux\";\n\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from \"../audittrail/Esign\";\nimport { constructOptionList, deleteAttachmentDropZone, onDropAttachFileList, showEsign } from \"../../components/CommonScript\";\nimport rsapi from \"../../rsapi\";\nimport Axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { FontIconWrap } from '../../components/data-grid/data-grid.styles';\nimport Preloader from '../../components/preloader/preloader.component';\nimport { dynamicExportTemplate, updateStore, crudMaster, dynamicImportTemplate } from '../../actions';\nimport AddFile from \"../goodsin/AddFile\";\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass ExportButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.openBarcodeModal = (selectedMaster, ncontrolCode, userinfo) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const getPrinter = rsapi.post(\"barcode/getPrinter\", userinfo);\n      const getControlBasedBarcode = rsapi.post(\"barcodeconfiguration/checkConfiguration\", {\n        selectedMaster,\n        ncontrolCode,\n        userinfo,\n        Multiselect: Array.isArray(selectedMaster)\n      });\n      urlArray = [getPrinter, getControlBasedBarcode];\n      Axios.all(urlArray).then(response => {\n        const printer = constructOptionList(response[0].data || [], \"sprintername\", \"sprintername\", undefined, undefined, true).get(\"OptionList\");\n        const barcode = constructOptionList(response[1].data.Barcode || [], \"sbarcodename\", \"sbarcodename\", undefined, undefined, true).get(\"OptionList\");\n        const selectedRecord = {};\n        if (printer.length > 0) selectedRecord['sprintername'] = printer[0];\n        if (barcode.length > 0) selectedRecord['nbarcode'] = barcode[0];\n        selectedRecord['nbarcodeprint'] = 1;\n        this.setState({\n          openBarcodeModal: true,\n          ncontrolCode,\n          Printer: printer,\n          BarcodeList: barcode,\n          operation: \"Printbarcode\",\n          nbarcodeprint: response[1].data.nbarcodeprint,\n          selectedRecord,\n          loadBarcode: true,\n          loading: false\n        });\n      }).catch(error => {\n        // dispatch(initRequest(false));\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    };\n\n    this.onSaveImportClick = (saveType, formRef) => {\n      let inputParam = {};\n      let selectedRecord = this.state.selectedRecord;\n      let isFileupload = true;\n      const formData = new FormData();\n      formData.append(\"ImportFile\", selectedRecord['stemplatefilename'][0]);\n      formData.append(\"nformcode\", this.props.Login.userInfo && this.props.Login.userInfo.nformcode);\n      inputParam = {\n        formData: formData,\n        isFileupload,\n        methodUrl: \"Template\",\n        operation: \"import\",\n        classUrl: \"exportimport\",\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        }\n      };\n      var saveType = this.statesaveType;\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            dynamicfields: [],\n            screenData: {\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.dynamicImportTemplate(inputParam, masterData, \"openExcelModal\");\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n\n        if (event.target.name === 'nclientprinter' && event.target.checked === true) {//const printers =   window.navigator.printer.getPrinters();\n          /////const names = printers.map(printer => printer.name);\n          //selectedPrinterDatas {printername: { = names;\n          // this.setState({ selectedPrinterData });\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openExcel = this.props.Login.openExcel;\n      let openExcelModal = this.props.Login.openExcelModal;\n      let selectedRecord = this.state.selectedRecord;\n      let inputData;\n\n      if (loadEsign) {\n        inputData = {\n          loadEsign: false,\n          openExcel: true,\n          openExcelModal: true\n        };\n      } else {\n        inputData = {\n          loadEsign: false,\n          openExcel: false,\n          openExcelModal: false,\n          selectedRecord: {}\n        };\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: { ...inputData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.mandatoryFields = () => {\n      const mandatory = [{\n        \"idsName\": \"IDS_FILE\",\n        \"dataField\": \"stemplatefilename\",\n        \"mandatoryLabel\": \"IDS_CHOOSE\",\n        \"controlType\": \"file\"\n      }];\n      return mandatory;\n    };\n\n    this.dynamicExportTemplate = ExportControl => {\n      let headerName = [];\n\n      if (this.props.isDataGrid) {\n        this.props.extractedColumnList.map(item => {\n          if (item.tablecolumnname !== \"ndefaultstatus\" && item.controlType !== 'NA') {\n            headerName.push({\n              'headerName': this.props.intl.formatMessage({\n                id: item.idsName\n              }) + \" (\" + item.tablecolumnname + \")\",\n              'controlType': item.controlType,\n              'tablecolumnname': item.tablecolumnname\n            });\n          }\n        });\n        this.props.detailedFieldList && this.props.detailedFieldList.map(item => {\n          if (item.tablecolumnname !== \"ndefaultstatus\" && item.controlType !== 'NA') {\n            headerName.push({\n              'headerName': this.props.intl.formatMessage({\n                id: item.idsName\n              }) + \" (\" + item.tablecolumnname + \")\",\n              'controlType': item.controlType,\n              'tablecolumnname': item.tablecolumnname\n            });\n          }\n        });\n        this.props.dynamicExportTemplate({\n          selectedHeader: headerName,\n          ncontrolCode: ExportControl,\n          userinfo: this.props.userInfo,\n          formName: this.props.screenName,\n          nformcode: this.props.userInfo.nformcode,\n          rowCount: this.props.settings && parseInt(this.props.settings['76'])\n        });\n      } else {\n        this.props.dynamicExportTemplate({\n          selectedHeader: headerName,\n          ncontrolCode: ExportControl,\n          userinfo: this.props.userInfo,\n          formName: this.props.screenName,\n          nformcode: this.props.userInfo.nformcode,\n          rowCount: this.props.settings && parseInt(this.props.settings['76'])\n        });\n      }\n    };\n\n    this.excelModal = (ncontrolcode, operation) => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: {},\n          operation: operation,\n          ncontrolcode,\n          selectedId: null,\n          openExcel: true,\n          openExcelModal: true\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onDropFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.state = {\n      selectedRecord: \"\",\n      ncontrolCode: -1,\n      nbarcodeprint: 1,\n      BarcodeList: [],\n      operation: \"Printbarcode\",\n      Printer: [],\n      openBarcodeModal: false,\n      loadEsign: false,\n      loadBarcode: false,\n      loading: false\n    };\n  }\n\n  render() {\n    const ExportControl = this.props.controlMap && this.props.controlMap.has(this.props.exportUrl) && this.props.controlMap.get(this.props.exportUrl).ncontrolcode;\n    const ImportControl = this.props.controlMap && this.props.controlMap.has(this.props.importUrl) && this.props.controlMap.get(this.props.importUrl).ncontrolcode;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Preloader, {\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"export\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EXPORTTEMPLATE\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(ExportControl) === -1,\n      onClick: () => this.dynamicExportTemplate(ExportControl),\n      className: \"btn btn-circle outline-grey mr-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileExcel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"export\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_IMPORTTEMPLATE\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(ImportControl) === -1,\n      onClick: () => this.excelModal(ImportControl, 'import'),\n      className: \"btn btn-circle outline-grey mr-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileImport,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 25\n      }\n    }))), this.props.Login.openExcelModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openExcelModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: {\n        methodUrl: this.props.methodUrl\n      },\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveImportClick,\n      esign: this.state.loadEsign,\n      validateEsign: this.validateEsign // masterStatus={this.props.Login.masterStatus}\n      // updateStore={this.props.updateStore}\n      ,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.mandatoryFields(),\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.state.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange //inputParam={this.props.Login.inputParam}\n        ,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddFile, {\n        selectedRecord: this.state.selectedRecord,\n        onDrop: this.onDropFile,\n        deleteAttachment: this.deleteAttachment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 33\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  updateStore,\n  dynamicExportTemplate,\n  crudMaster,\n  dynamicImportTemplate\n})(injectIntl(ExportButton));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/pages/export&import/ExportButton.jsx"],"names":["React","faBarcode","faFileExcel","faFileImport","connect","injectIntl","FontAwesomeIcon","Button","Nav","SlideOutModal","Esign","constructOptionList","deleteAttachmentDropZone","onDropAttachFileList","showEsign","rsapi","Axios","toast","FontIconWrap","Preloader","dynamicExportTemplate","updateStore","crudMaster","dynamicImportTemplate","AddFile","DEFAULT_RETURN","mapStateToProps","state","Login","ExportButton","Component","constructor","props","openBarcodeModal","selectedMaster","ncontrolCode","userinfo","setState","loading","urlArray","getPrinter","post","getControlBasedBarcode","Multiselect","Array","isArray","all","then","response","printer","data","undefined","get","barcode","Barcode","selectedRecord","length","Printer","BarcodeList","operation","nbarcodeprint","loadBarcode","catch","error","status","message","warn","intl","formatMessage","id","onSaveImportClick","saveType","formRef","inputParam","isFileupload","formData","FormData","append","userInfo","nformcode","methodUrl","classUrl","inputData","statesaveType","masterData","userRoleControlRights","ncontrolcode","updateInfo","typeName","loadEsign","dynamicfields","screenData","onNumericInputChange","value","name","onInputOnChange","event","target","type","checked","onComboChange","comboData","fieldName","closeModal","openExcel","openExcelModal","mandatoryFields","mandatory","ExportControl","headerName","isDataGrid","extractedColumnList","map","item","tablecolumnname","controlType","push","idsName","detailedFieldList","selectedHeader","formName","screenName","rowCount","settings","parseInt","excelModal","selectedId","onDropFile","attachedFiles","maxSize","actionType","deleteAttachment","file","render","controlMap","has","exportUrl","ImportControl","importUrl","indexOf","validateEsign"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAmBC,WAAnB,EAA+BC,YAA/B,QAAmD,mCAAnD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,MAAT,EAAiBC,GAAjB,QAA2B,iBAA3B,C,CACA;AACA;;AACA,OAAOC,aAAP,MAA0B,gDAA1B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,mBAAT,EAA8BC,wBAA9B,EAAwDC,oBAAxD,EAA8EC,SAA9E,QAA+F,+BAA/F;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,YAAT,QAA6B,6CAA7B;AACA,OAAOC,SAAP,MAAsB,gDAAtB;AACA,SAAUC,qBAAV,EAAgCC,WAAhC,EAA6CC,UAA7C,EAAwDC,qBAAxD,QAAoF,eAApF;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,cAAT,QAA+B,0BAA/B;;AAGA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAQ;AAAEC,IAAAA,KAAK,EAAED,KAAK,CAACC;AAAf,GAAR;AACH,CAFD;;AAIA,MAAMC,YAAN,SAA2B7B,KAAK,CAAC8B,SAAjC,CAA2C;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAkBnBC,gBAlBmB,GAkBA,CAACC,cAAD,EAAiBC,YAAjB,EAA+BC,QAA/B,KAA4C;AAC3D,WAAKC,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,YAAMC,UAAU,GAAGzB,KAAK,CAAC0B,IAAN,CAAW,oBAAX,EAAiCL,QAAjC,CAAnB;AACA,YAAMM,sBAAsB,GAAG3B,KAAK,CAAC0B,IAAN,CAAW,yCAAX,EAAsD;AAAEP,QAAAA,cAAF;AAAkBC,QAAAA,YAAlB;AAAgCC,QAAAA,QAAhC;AAA0CO,QAAAA,WAAW,EAAEC,KAAK,CAACC,OAAN,CAAcX,cAAd;AAAvD,OAAtD,CAA/B;AACAK,MAAAA,QAAQ,GAAG,CAACC,UAAD,EAAaE,sBAAb,CAAX;AAEA1B,MAAAA,KAAK,CAAC8B,GAAN,CAAUP,QAAV,EAAoBQ,IAApB,CAAyBC,QAAQ,IAAI;AAEjC,cAAMC,OAAO,GAAGtC,mBAAmB,CAACqC,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,IAAoB,EAArB,EAAyB,cAAzB,EAC/B,cAD+B,EACfC,SADe,EACJA,SADI,EACO,IADP,CAAnB,CACgCC,GADhC,CACoC,YADpC,CAAhB;AAGA,cAAMC,OAAO,GAAG1C,mBAAmB,CAACqC,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBI,OAAjB,IAA4B,EAA7B,EAAiC,cAAjC,EAC/B,cAD+B,EACfH,SADe,EACJA,SADI,EACO,IADP,CAAnB,CACgCC,GADhC,CACoC,YADpC,CAAhB;AAGA,cAAMG,cAAc,GAAG,EAAvB;AAEA,YAAIN,OAAO,CAACO,MAAR,GAAiB,CAArB,EACID,cAAc,CAAC,cAAD,CAAd,GAAiCN,OAAO,CAAC,CAAD,CAAxC;AAEJ,YAAII,OAAO,CAACG,MAAR,GAAiB,CAArB,EAAwBD,cAAc,CAAC,UAAD,CAAd,GAA6BF,OAAO,CAAC,CAAD,CAApC;AACxBE,QAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,CAAlC;AAGA,aAAKlB,QAAL,CAAc;AACVJ,UAAAA,gBAAgB,EAAE,IADR;AACcE,UAAAA,YADd;AAC4BsB,UAAAA,OAAO,EAAER,OADrC;AAEVS,UAAAA,WAAW,EAAEL,OAFH;AAEYM,UAAAA,SAAS,EAAE,cAFvB;AAGVC,UAAAA,aAAa,EAAEZ,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBU,aAHtB;AAGqCL,UAAAA,cAHrC;AAGqDM,UAAAA,WAAW,EAAE,IAHlE;AAGwEvB,UAAAA,OAAO,EAAE;AAHjF,SAAd;AAKH,OAtBD,EAsBGwB,KAtBH,CAsBSC,KAAK,IAAI;AAEd;AAEA,YAAIA,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAmC;AAE/B/C,UAAAA,KAAK,CAAC8C,KAAN,CAAYA,KAAK,CAACE,OAAlB;AAEH,SAJD,MAIO;AAEHhD,UAAAA,KAAK,CAACiD,IAAN,CAAW,KAAKlC,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CAA8B;AAErCC,YAAAA,EAAE,EAAEN,KAAK,CAACf,QAAN,CAAeE;AAFkB,WAA9B,CAAX;AAKH;AACJ,OAtCD;AAuCH,KAhEkB;;AAAA,SAkEnBoB,iBAlEmB,GAkED,CAACC,QAAD,EAAWC,OAAX,KAAqB;AACnC,UAAIC,UAAU,GAAG,EAAjB;AACA,UAAIlB,cAAc,GAAG,KAAK5B,KAAL,CAAW4B,cAAhC;AACA,UAAImB,YAAY,GAAE,IAAlB;AACA,YAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgB,YAAhB,EAA8BtB,cAAc,CAAC,mBAAD,CAAd,CAAoC,CAApC,CAA9B;AACAoB,MAAAA,QAAQ,CAACE,MAAT,CAAiB,WAAjB,EAA6B,KAAK7C,KAAL,CAAWJ,KAAX,CAAiBkD,QAAjB,IAA6B,KAAK9C,KAAL,CAAWJ,KAAX,CAAiBkD,QAAjB,CAA0BC,SAApF;AACAN,MAAAA,UAAU,GAAG;AACTE,QAAAA,QAAQ,EAAEA,QADD;AAETD,QAAAA,YAFS;AAGTM,QAAAA,SAAS,EAAC,UAHD;AAITrB,QAAAA,SAAS,EAAE,QAJF;AAKTsB,QAAAA,QAAQ,EAAE,cALD;AAMTC,QAAAA,SAAS,EAAC;AAAC,sBAAW,KAAKlD,KAAL,CAAWJ,KAAX,CAAiBkD;AAA7B;AAND,OAAb;AASA,UAAIP,QAAQ,GAAG,KAAKY,aAApB;AACA,YAAMC,UAAU,GAAG,KAAKpD,KAAL,CAAWJ,KAAX,CAAiBwD,UAApC;;AAEA,UAAItE,SAAS,CAAC,KAAKkB,KAAL,CAAWJ,KAAX,CAAiByD,qBAAlB,EAAyC,KAAKrD,KAAL,CAAWJ,KAAX,CAAiBkD,QAAjB,CAA0BC,SAAnE,EAA8E,KAAK/C,KAAL,CAAWJ,KAAX,CAAiB0D,YAA/F,CAAb,EAA2H;AAEvH,cAAMC,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE/D,cADK;AAEfyB,UAAAA,IAAI,EAAE;AACFuC,YAAAA,SAAS,EAAE,IADT;AACeC,YAAAA,aAAa,EAAE,EAD9B;AACkCC,YAAAA,UAAU,EAAE;AAAGP,cAAAA;AAAH,aAD9C;AAC+Db,YAAAA;AAD/D;AAFS,SAAnB;AAMA,aAAKvC,KAAL,CAAWX,WAAX,CAAuBkE,UAAvB;AACH,OATD,MASO;AACH,aAAKvD,KAAL,CAAWT,qBAAX,CAAiCkD,UAAjC,EAA4CW,UAA5C,EAAwD,gBAAxD;AAEH;AACJ,KAlGkB;;AAAA,SAqGnBQ,oBArGmB,GAqGI,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACpC,YAAMvC,cAAc,GAAG,KAAK5B,KAAL,CAAW4B,cAAX,IAA6B,EAApD;AACAA,MAAAA,cAAc,CAACuC,IAAD,CAAd,GAAuBD,KAAvB;AACA,WAAKxD,QAAL,CAAc;AAAEkB,QAAAA;AAAF,OAAd;AACH,KAzGkB;;AAAA,SA2GnBwC,eA3GmB,GA2GAC,KAAD,IAAW;AACzB,YAAMzC,cAAc,GAAG,KAAK5B,KAAL,CAAW4B,cAAX,IAA6B,EAApD;;AAEA,UAAIyC,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClC3C,QAAAA,cAAc,CAACyC,KAAK,CAACC,MAAN,CAAaH,IAAd,CAAd,GAAoCE,KAAK,CAACC,MAAN,CAAaE,OAAb,KAAyB,IAAzB,GAAgC,CAAhC,GAAoC,CAAxE;;AACA,YAAIH,KAAK,CAACC,MAAN,CAAaH,IAAb,KAAsB,gBAAtB,IAA0CE,KAAK,CAACC,MAAN,CAAaE,OAAb,KAAyB,IAAvE,EAA6E,CACzE;AACA;AAEA;AACA;AACH;AACJ,OATD,MAUK;AACD5C,QAAAA,cAAc,CAACyC,KAAK,CAACC,MAAN,CAAaH,IAAd,CAAd,GAAoCE,KAAK,CAACC,MAAN,CAAaJ,KAAjD;AACH;;AACD,WAAKxD,QAAL,CAAc;AAAEkB,QAAAA;AAAF,OAAd;AACH,KA5HkB;;AAAA,SA+HnB6C,aA/HmB,GA+HH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACtC,YAAM/C,cAAc,GAAG,KAAK5B,KAAL,CAAW4B,cAAX,IAA6B,EAApD;AACAA,MAAAA,cAAc,CAAC+C,SAAD,CAAd,GAA4BD,SAA5B;AACA,WAAKhE,QAAL,CAAc;AAAEkB,QAAAA;AAAF,OAAd;AACH,KAnIkB;;AAAA,SAsInBgD,UAtImB,GAsIN,MAAM;AACf,UAAId,SAAS,GAAG,KAAKzD,KAAL,CAAWJ,KAAX,CAAiB6D,SAAjC;AACA,UAAIe,SAAS,GAAG,KAAKxE,KAAL,CAAWJ,KAAX,CAAiB4E,SAAjC;AACA,UAAIC,cAAc,GAAG,KAAKzE,KAAL,CAAWJ,KAAX,CAAiB6E,cAAtC;AACA,UAAIlD,cAAc,GAAG,KAAK5B,KAAL,CAAW4B,cAAhC;AACA,UAAI2B,SAAJ;;AACA,UAAIO,SAAJ,EAAe;AACXP,QAAAA,SAAS,GAAE;AAAEO,UAAAA,SAAS,EAAE,KAAb;AAAmBe,UAAAA,SAAS,EAAC,IAA7B;AAAkCC,UAAAA,cAAc,EAAC;AAAjD,SAAX;AACH,OAFD,MAGK;AACDvB,QAAAA,SAAS,GAAC;AAAEO,UAAAA,SAAS,EAAE,KAAb;AAAoBe,UAAAA,SAAS,EAAC,KAA9B;AAAoCC,UAAAA,cAAc,EAAC,KAAnD;AAA0DlD,UAAAA,cAAc,EAAE;AAA1E,SAAV;AACH;;AAED,YAAMgC,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE/D,cADK;AAEfyB,QAAAA,IAAI,EAAE,EAAE,GAAGgC;AAAL;AAFS,OAAnB;AAIA,WAAKlD,KAAL,CAAWX,WAAX,CAAuBkE,UAAvB;AAEH,KAzJkB;;AAAA,SA4JnBmB,eA5JmB,GA4JD,MAAM;AAEpB,YAAMC,SAAS,GAAG,CACd;AAAE,mBAAW,UAAb;AAAyB,qBAAa,mBAAtC;AAA2D,0BAAkB,YAA7E;AAA2F,uBAAe;AAA1G,OADc,CAAlB;AAIA,aAAOA,SAAP;AACH,KAnKkB;;AAAA,SAoKnBvF,qBApKmB,GAoKIwF,aAAD,IAAiB;AACnC,UAAIC,UAAU,GAAC,EAAf;;AACA,UAAG,KAAK7E,KAAL,CAAW8E,UAAd,EAAyB;AACzB,aAAK9E,KAAL,CAAW+E,mBAAX,CAA+BC,GAA/B,CAAmCC,IAAI,IAAE;AACrC,cAAIA,IAAI,CAACC,eAAL,KAAuB,gBAAvB,IAA2CD,IAAI,CAACE,WAAL,KAAmB,IAAlE,EAAwE;AACxEN,YAAAA,UAAU,CAACO,IAAX,CAAgB;AAAC,4BAAa,KAAKpF,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAC4C,IAAI,CAACI;AAAV,eAA9B,IAAkD,IAAlD,GAAuDJ,IAAI,CAACC,eAA5D,GAA4E,GAA1F;AAChB,6BAAcD,IAAI,CAACE,WADH;AAEhB,iCAAkBF,IAAI,CAACC;AAFP,aAAhB;AAGC;AACJ,SAND;AAOA,aAAKlF,KAAL,CAAWsF,iBAAX,IAAgC,KAAKtF,KAAL,CAAWsF,iBAAX,CAA6BN,GAA7B,CAAiCC,IAAI,IAAE;AACnE,cAAIA,IAAI,CAACC,eAAL,KAAuB,gBAAvB,IAA2CD,IAAI,CAACE,WAAL,KAAmB,IAAlE,EAAwE;AACxEN,YAAAA,UAAU,CAACO,IAAX,CAAgB;AAAC,4BAAa,KAAKpF,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAC4C,IAAI,CAACI;AAAV,eAA9B,IAAkD,IAAlD,GAAuDJ,IAAI,CAACC,eAA5D,GAA4E,GAA1F;AAA8F,6BAAcD,IAAI,CAACE,WAAjH;AAA6H,iCAAkBF,IAAI,CAACC;AAApJ,aAAhB;AACC;AACJ,SAJ+B,CAAhC;AAKA,aAAKlF,KAAL,CAAWZ,qBAAX,CAAiC;AAACmG,UAAAA,cAAc,EAACV,UAAhB;AAA4B1E,UAAAA,YAAY,EAACyE,aAAzC;AAAwDxE,UAAAA,QAAQ,EAAC,KAAKJ,KAAL,CAAW8C,QAA5E;AAAqF0C,UAAAA,QAAQ,EAAC,KAAKxF,KAAL,CAAWyF,UAAzG;AAC7B1C,UAAAA,SAAS,EAAC,KAAK/C,KAAL,CAAW8C,QAAX,CAAoBC,SADD;AACW2C,UAAAA,QAAQ,EAAC,KAAK1F,KAAL,CAAW2F,QAAX,IAAuBC,QAAQ,CAAC,KAAK5F,KAAL,CAAW2F,QAAX,CAAoB,IAApB,CAAD;AADnD,SAAjC;AAEC,OAfD,MAeK;AACD,aAAK3F,KAAL,CAAWZ,qBAAX,CAAiC;AAACmG,UAAAA,cAAc,EAACV,UAAhB;AAA4B1E,UAAAA,YAAY,EAACyE,aAAzC;AAAwDxE,UAAAA,QAAQ,EAAC,KAAKJ,KAAL,CAAW8C,QAA5E;AAAqF0C,UAAAA,QAAQ,EAAC,KAAKxF,KAAL,CAAWyF,UAAzG;AAC7B1C,UAAAA,SAAS,EAAC,KAAK/C,KAAL,CAAW8C,QAAX,CAAoBC,SADD;AACW2C,UAAAA,QAAQ,EAAC,KAAK1F,KAAL,CAAW2F,QAAX,IAAuBC,QAAQ,CAAC,KAAK5F,KAAL,CAAW2F,QAAX,CAAoB,IAApB,CAAD;AADnD,SAAjC;AAEH;AACJ,KAzLkB;;AAAA,SAuQnBE,UAvQmB,GAuQN,CAACvC,YAAD,EAAc3B,SAAd,KAA4B;AACrC,YAAM4B,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE/D,cADK;AAEfyB,QAAAA,IAAI,EAAE;AACFK,UAAAA,cAAc,EAAE,EADd;AACkBI,UAAAA,SAAS,EAACA,SAD5B;AACuC2B,UAAAA,YADvC;AACqDwC,UAAAA,UAAU,EAAE,IADjE;AAEFtB,UAAAA,SAAS,EAAE,IAFT;AAEeC,UAAAA,cAAc,EAAE;AAF/B;AAFS,OAAnB;AAOA,WAAKzE,KAAL,CAAWX,WAAX,CAAuBkE,UAAvB;AACH,KAhRkB;;AAAA,SAkRnBwC,UAlRmB,GAkRN,CAACC,aAAD,EAAgB1B,SAAhB,EAA2B2B,OAA3B,KAAuC;AAChD,UAAI1E,cAAc,GAAG,KAAK5B,KAAL,CAAW4B,cAAX,IAA6B,EAAlD;AACAA,MAAAA,cAAc,CAAC+C,SAAD,CAAd,GAA4BzF,oBAAoB,CAAC0C,cAAc,CAAC+C,SAAD,CAAf,EAA4B0B,aAA5B,EAA2CC,OAA3C,CAAhD;AACA,WAAK5F,QAAL,CAAc;AAAEkB,QAAAA,cAAF;AAAkB2E,QAAAA,UAAU,EAAE;AAA9B,OAAd;AACH,KAtRkB;;AAAA,SAwRnBC,gBAxRmB,GAwRA,CAACnC,KAAD,EAAQoC,IAAR,EAAc9B,SAAd,KAA4B;AAC3C,UAAI/C,cAAc,GAAG,KAAK5B,KAAL,CAAW4B,cAAX,IAA6B,EAAlD;AACAA,MAAAA,cAAc,CAAC+C,SAAD,CAAd,GAA4B1F,wBAAwB,CAAC2C,cAAc,CAAC+C,SAAD,CAAf,EAA4B8B,IAA5B,CAApD;AACA,WAAK/F,QAAL,CAAc;AACVkB,QAAAA,cADU;AACM2E,QAAAA,UAAU,EAAE,QADlB,CAC2B;;AAD3B,OAAd;AAGH,KA9RkB;;AAIf,SAAKvG,KAAL,GAAa;AACT4B,MAAAA,cAAc,EAAE,EADP;AAETpB,MAAAA,YAAY,EAAE,CAAC,CAFN;AAGTyB,MAAAA,aAAa,EAAE,CAHN;AAITF,MAAAA,WAAW,EAAE,EAJJ;AAKTC,MAAAA,SAAS,EAAE,cALF;AAMTF,MAAAA,OAAO,EAAE,EANA;AAOTxB,MAAAA,gBAAgB,EAAE,KAPT;AAQTwD,MAAAA,SAAS,EAAE,KARF;AAST5B,MAAAA,WAAW,EAAE,KATJ;AAUTvB,MAAAA,OAAO,EAAE;AAVA,KAAb;AAYH;;AA4KD+F,EAAAA,MAAM,GAAG;AACL,UAAMzB,aAAa,GAAG,KAAK5E,KAAL,CAAWsG,UAAX,IAAyB,KAAKtG,KAAL,CAAWsG,UAAX,CAAsBC,GAAtB,CAA0B,KAAKvG,KAAL,CAAWwG,SAArC,CAAzB,IAA4E,KAAKxG,KAAL,CAAWsG,UAAX,CAAsBlF,GAAtB,CAA0B,KAAKpB,KAAL,CAAWwG,SAArC,EAAgDlD,YAAlJ;AACA,UAAMmD,aAAa,GAAG,KAAKzG,KAAL,CAAWsG,UAAX,IAAyB,KAAKtG,KAAL,CAAWsG,UAAX,CAAsBC,GAAtB,CAA0B,KAAKvG,KAAL,CAAW0G,SAArC,CAAzB,IAA4E,KAAK1G,KAAL,CAAWsG,UAAX,CAAsBlF,GAAtB,CAA0B,KAAKpB,KAAL,CAAW0G,SAArC,EAAgDpD,YAAlJ;AACA,wBACI,uDAEI,oBAAC,SAAD;AAAW,MAAA,OAAO,EAAE,KAAK3D,KAAL,CAAWW,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAKY,uDACA,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,IAAI,EAAC,QAAf;AACA,kBAAU,KAAKN,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADV,CAEA;AAFA;AAGA,MAAA,MAAM,EAAE,KAAKrC,KAAL,CACNqD,qBADM,IACmB,KAAKrD,KAAL,CAAWqD,qBAAX,CAAiCsD,OAAjC,CAAyC/B,aAAzC,MAA4D,CAAC,CAJxF;AAKA,MAAA,OAAO,EAAE,MAAM,KAAKxF,qBAAL,CAA2BwF,aAA3B,CALf;AAMA,MAAA,SAAS,EAAC,kCANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAQA,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE1G,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARA,CADA,eAYA,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,IAAI,EAAC,QAAf;AACA,kBAAU,KAAK8B,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADV,CAEA;AAFA;AAGA,MAAA,MAAM,EAAE,KAAKrC,KAAL,CACNqD,qBADM,IACmB,KAAKrD,KAAL,CAAWqD,qBAAX,CAAiCsD,OAAjC,CAAyCF,aAAzC,MAA4D,CAAC,CAJxF;AAKA,MAAA,OAAO,EAAE,MAAM,KAAKZ,UAAL,CAAgBY,aAAhB,EAA8B,QAA9B,CALf;AAMA,MAAA,SAAS,EAAC,kCANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAQA,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAEtI,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARA,CAZA,CALZ,EAqCK,KAAK6B,KAAL,CAAWJ,KAAX,CAAiB6E,cAAjB,iBACG,oBAAC,aAAD;AACI,MAAA,IAAI,EAAE,KAAKzE,KAAL,CAAWJ,KAAX,CAAiB6E,cAD3B;AAEI,MAAA,UAAU,EAAE,KAAKF,UAFrB;AAGI,MAAA,SAAS,EAAE,KAAKvE,KAAL,CAAWJ,KAAX,CAAiB+B,SAHhC;AAII,MAAA,UAAU,EAAE;AAAEqB,QAAAA,SAAS,EAAE,KAAKhD,KAAL,CAAWgD;AAAxB,OAJhB;AAKI,MAAA,UAAU,EAAE,KAAKhD,KAAL,CAAWJ,KAAX,CAAiB6F,UALjC;AAMI,MAAA,WAAW,EAAE,KAAKnD,iBANtB;AAOI,MAAA,KAAK,EAAE,KAAK3C,KAAL,CAAW8D,SAPtB;AAQI,MAAA,aAAa,EAAE,KAAKmD,aARxB,CASI;AACA;AAVJ;AAWI,MAAA,cAAc,EAAE,KAAKjH,KAAL,CAAW4B,cAAX,IAA6B,EAXjD;AAYI,MAAA,eAAe,EAAE,KAAKmD,eAAL,EAZrB;AAaI,MAAA,YAAY,EAAE,KAAK1E,KAAL,CAAWJ,KAAX,CAAiB6D,SAAjB,gBACV,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAE,KAAK9D,KAAL,CAAWgC,SAA7B;AACI,QAAA,aAAa,EAAE,KAAK3B,KAAL,CAAWmC,IAAX,CAAgBC,aADnC;AAEI,QAAA,eAAe,EAAE,KAAK2B,eAF1B,CAGI;AAHJ;AAII,QAAA,cAAc,EAAE,KAAKpE,KAAL,CAAW4B,cAAX,IAA6B,EAJjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU,gBAMN,oBAAC,OAAD;AACA,QAAA,cAAc,EAAE,KAAK5B,KAAL,CAAW4B,cAD3B;AAEA,QAAA,MAAM,EAAE,KAAKwE,UAFb;AAGA,QAAA,gBAAgB,EAAE,KAAKI,gBAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAnBZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtCR,CADJ;AAsEH;;AAtQsC;;AAoS3C,eAAe/H,OAAO,CAACsB,eAAD,EAAkB;AAAEL,EAAAA,WAAF;AAAeD,EAAAA,qBAAf;AAAqCE,EAAAA,UAArC;AAAgDC,EAAAA;AAAhD,CAAlB,CAAP,CAAiGlB,UAAU,CAACwB,YAAD,CAA3G,CAAf","sourcesContent":["import React from \"react\";\r\nimport { faBarcode,faFileExcel,faFileImport } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Button ,Nav} from \"react-bootstrap\";\r\n//import { openBarcodeModal } from '../../actions'\r\n//import { connect } from \"react-redux\";\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal'\r\nimport Esign from \"../audittrail/Esign\";\r\nimport { constructOptionList, deleteAttachmentDropZone, onDropAttachFileList, showEsign } from \"../../components/CommonScript\";\r\nimport rsapi from \"../../rsapi\";\r\nimport Axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { FontIconWrap } from '../../components/data-grid/data-grid.styles';\r\nimport Preloader from '../../components/preloader/preloader.component'\r\nimport {  dynamicExportTemplate,updateStore ,crudMaster,dynamicImportTemplate} from '../../actions';\r\nimport AddFile from \"../goodsin/AddFile\";\r\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass ExportButton extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n\r\n        this.state = {\r\n            selectedRecord: \"\",\r\n            ncontrolCode: -1,\r\n            nbarcodeprint: 1,\r\n            BarcodeList: [],\r\n            operation: \"Printbarcode\",\r\n            Printer: [],\r\n            openBarcodeModal: false,\r\n            loadEsign: false,\r\n            loadBarcode: false,\r\n            loading: false,\r\n        }\r\n    }\r\n\r\n    openBarcodeModal = (selectedMaster, ncontrolCode, userinfo) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const getPrinter = rsapi.post(\"barcode/getPrinter\", userinfo);\r\n        const getControlBasedBarcode = rsapi.post(\"barcodeconfiguration/checkConfiguration\", { selectedMaster, ncontrolCode, userinfo, Multiselect: Array.isArray(selectedMaster) });\r\n        urlArray = [getPrinter, getControlBasedBarcode]\r\n\r\n        Axios.all(urlArray).then(response => {\r\n\r\n            const printer = constructOptionList(response[0].data || [], \"sprintername\",\r\n                \"sprintername\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n            const barcode = constructOptionList(response[1].data.Barcode || [], \"sbarcodename\",\r\n                \"sbarcodename\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n            const selectedRecord = {}\r\n\r\n            if (printer.length > 0)\r\n                selectedRecord['sprintername'] = printer[0];\r\n\r\n            if (barcode.length > 0) selectedRecord['nbarcode'] = barcode[0];\r\n            selectedRecord['nbarcodeprint'] = 1\r\n\r\n\r\n            this.setState({\r\n                openBarcodeModal: true, ncontrolCode, Printer: printer,\r\n                BarcodeList: barcode, operation: \"Printbarcode\",\r\n                nbarcodeprint: response[1].data.nbarcodeprint, selectedRecord, loadBarcode: true, loading: false\r\n            })\r\n        }).catch(error => {\r\n\r\n            // dispatch(initRequest(false));\r\n\r\n            if (error.response.status === 500) {\r\n\r\n                toast.error(error.message);\r\n\r\n            } else {\r\n\r\n                toast.warn(this.props.intl.formatMessage({\r\n\r\n                    id: error.response.data\r\n\r\n                }));\r\n            }\r\n        })\r\n    }\r\n\r\n    onSaveImportClick=(saveType, formRef)=>{\r\n        let inputParam = {};\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let isFileupload =true;\r\n        const formData = new FormData();\r\n        formData.append(\"ImportFile\", selectedRecord['stemplatefilename'][0])\r\n        formData.append( \"nformcode\",this.props.Login.userInfo && this.props.Login.userInfo.nformcode);\r\n        inputParam = {\r\n            formData: formData,\r\n            isFileupload,\r\n            methodUrl:\"Template\",\r\n            operation: \"import\",\r\n            classUrl: \"exportimport\",\r\n            inputData:{\"userinfo\":this.props.Login.userInfo}\r\n            \r\n        }\r\n        var saveType = this.statesaveType;\r\n        const masterData = this.props.Login.masterData;\r\n     \r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, dynamicfields: [], screenData: {  masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.dynamicImportTemplate(inputParam,masterData, \"openExcelModal\");\r\n\r\n        }\r\n    }\r\n\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            if (event.target.name === 'nclientprinter' && event.target.checked === true) {\r\n                //const printers =   window.navigator.printer.getPrinters();\r\n                /////const names = printers.map(printer => printer.name);\r\n\r\n                //selectedPrinterDatas {printername: { = names;\r\n                // this.setState({ selectedPrinterData });\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openExcel = this.props.Login.openExcel;\r\n        let openExcelModal = this.props.Login.openExcelModal;\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let inputData;\r\n        if (loadEsign) {\r\n            inputData= { loadEsign: false,openExcel:true,openExcelModal:true }\r\n        }\r\n        else {\r\n            inputData={ loadEsign: false, openExcel:false,openExcelModal:false, selectedRecord: {}}\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { ...inputData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n\r\n    mandatoryFields = () => {\r\n\r\n        const mandatory = [\r\n            { \"idsName\": \"IDS_FILE\", \"dataField\": \"stemplatefilename\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n        ]\r\n\r\n        return mandatory;\r\n    }\r\n    dynamicExportTemplate=(ExportControl)=>{\r\n        let headerName=[];\r\n        if(this.props.isDataGrid){\r\n        this.props.extractedColumnList.map(item=>{\r\n            if((item.tablecolumnname!==\"ndefaultstatus\" && item.controlType!=='NA')){\r\n            headerName.push({'headerName':this.props.intl.formatMessage({ id:item.idsName})+\" (\"+item.tablecolumnname+\")\",\r\n            'controlType':item.controlType,\r\n            'tablecolumnname':item.tablecolumnname})\r\n            }\r\n        })\r\n        this.props.detailedFieldList && this.props.detailedFieldList.map(item=>{\r\n            if((item.tablecolumnname!==\"ndefaultstatus\" && item.controlType!=='NA')){\r\n            headerName.push({'headerName':this.props.intl.formatMessage({ id:item.idsName})+\" (\"+item.tablecolumnname+\")\",'controlType':item.controlType,'tablecolumnname':item.tablecolumnname})\r\n            }\r\n        })\r\n        this.props.dynamicExportTemplate({selectedHeader:headerName, ncontrolCode:ExportControl, userinfo:this.props.userInfo,formName:this.props.screenName,\r\n            nformcode:this.props.userInfo.nformcode,rowCount:this.props.settings && parseInt(this.props.settings['76'])})\r\n        }else{\r\n            this.props.dynamicExportTemplate({selectedHeader:headerName, ncontrolCode:ExportControl, userinfo:this.props.userInfo,formName:this.props.screenName,\r\n                nformcode:this.props.userInfo.nformcode,rowCount:this.props.settings && parseInt(this.props.settings['76'])})\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const ExportControl = this.props.controlMap && this.props.controlMap.has(this.props.exportUrl) && this.props.controlMap.get(this.props.exportUrl).ncontrolcode;\r\n        const ImportControl = this.props.controlMap && this.props.controlMap.has(this.props.importUrl) && this.props.controlMap.get(this.props.importUrl).ncontrolcode;\r\n        return (\r\n            <>\r\n\r\n                <Preloader loading={this.state.loading} />\r\n\r\n                {/* {this.props.isDataGrid ? */}\r\n                        <>\r\n                        <Nav.Link name=\"export\"\r\n                        data-tip={this.props.intl.formatMessage({ id: \"IDS_EXPORTTEMPLATE\" })}\r\n                        //  data-for=\"tooltip_list_wrap\"\r\n                        hidden={this.props.\r\n                          userRoleControlRights && this.props.userRoleControlRights.indexOf(ExportControl) === -1}\r\n                        onClick={() => this.dynamicExportTemplate(ExportControl)}\r\n                        className=\"btn btn-circle outline-grey mr-2\"\r\n                        >\r\n                        <FontAwesomeIcon icon={faFileExcel} />\r\n                        </Nav.Link>       \r\n                        \r\n                        <Nav.Link name=\"export\"\r\n                        data-tip={this.props.intl.formatMessage({ id: \"IDS_IMPORTTEMPLATE\" })}\r\n                        //  data-for=\"tooltip_list_wrap\"\r\n                        hidden={this.props.\r\n                          userRoleControlRights && this.props.userRoleControlRights.indexOf(ImportControl) === -1}\r\n                        onClick={() => this.excelModal(ImportControl,'import')}\r\n                        className=\"btn btn-circle outline-grey mr-2\"\r\n                        >\r\n                        <FontAwesomeIcon icon={faFileImport} />\r\n                        </Nav.Link>     \r\n                        </>  \r\n                            {/* :\r\n                    <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                        hidden={this.props.userRoleControlRights.indexOf(ExportControl) === -1}\r\n                        data-tip={this.props.intl.formatMessage({ id: \"IDS_BARCODEGENERATE\" })}\r\n                        onClick={() => this.excelModal(this.props.selectedMaster, ExportControl, this.props.userInfo)}>\r\n                        <FontAwesomeIcon icon={faBarcode} />\r\n                    </Button>\r\n                } */}\r\n\r\n                {this.props.Login.openExcelModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openExcelModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={{ methodUrl: this.props.methodUrl }}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveImportClick}\r\n                        esign={this.state.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        // masterStatus={this.props.Login.masterStatus}\r\n                        // updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.mandatoryFields()}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.state.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                //inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}/>:\r\n                                <AddFile\r\n                                selectedRecord={this.state.selectedRecord}\r\n                                onDrop={this.onDropFile}\r\n                                deleteAttachment={this.deleteAttachment}\r\n                                />\r\n                        }\r\n                    ></SlideOutModal>\r\n\r\n                }\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n    excelModal = (ncontrolcode,operation) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: {}, operation:operation, ncontrolcode, selectedId: null,\r\n                openExcel: true, openExcelModal: true,\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onDropFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, { updateStore, dynamicExportTemplate,crudMaster,dynamicImportTemplate})(injectIntl(ExportButton));"]},"metadata":{},"sourceType":"module"}