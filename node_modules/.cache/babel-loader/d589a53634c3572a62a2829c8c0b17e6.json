{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\KpiBand.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Row, Col, FormGroup, FormLabel } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport AddKpiBand from './AddKpiBand';\nimport { callService, crudMaster, updateStore, validateEsignCredential, getKpiBandComboService } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { MediaLabel } from '../../components/add-client.styles';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass KpiBand extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedId = this.props.Login.selectedId;\n      let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          selectedId = null;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedId = null;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.expandChange = event => {\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\n      event.dataItem.expanded = !isExpanded;\n      this.setState({ ...this.props\n      });\n    };\n\n    this.detailBand = props => {\n      const Dataitem = props.dataItem;\n      const OptionalFieldList = [{\n        datafield: \"nbeforewindowperiod\",\n        Column: \"Before Window Period\"\n      }, {\n        datafield: \"sbeforeperiodname\",\n        Column: \"Before Period Code\"\n      }, {\n        datafield: \"nafterwindowperiod\",\n        Column: \"After Window Period\"\n      }, {\n        datafield: \"safterperiodname\",\n        Column: \"After Period Code\"\n      }];\n      return /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 17\n        }\n      }, OptionalFieldList.map(fields => {\n        return /*#__PURE__*/React.createElement(Col, {\n          md: \"6\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: fields.Column,\n          message: fields.Column,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 40\n          }\n        })), /*#__PURE__*/React.createElement(MediaLabel, {\n          className: \"readonly-text font-weight-normal\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 29\n          }\n        }, Dataitem[fields.datafield])));\n      }));\n    };\n\n    this.detailedFieldList = [{\n      dataField: \"nbeforewindowperiod\",\n      idsName: \"IDS_BEFOREWINDOWPERIOD\"\n    }, {\n      dataField: \"sbeforeperiodname\",\n      idsName: \"IDS_BEFOREPERIODCODE\"\n    }, {\n      dataField: \"nafterwindowperiod\",\n      idsName: \"IDS_AFTERWINDOWPERIOD\"\n    }, {\n      dataField: \"safterperiodname\",\n      idsName: \"IDS_AFTERPERIODCODE\"\n    } //{ \"idsName\": \"IDS_DISPLAYSTATUS\", \"dataField\": \"sdisplaystatus\", \"width\": \"20%\", \"isIdsField\": true, \"controlName\": \"ndefaultstatus\" }\n    ];\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData != null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData; //.value;\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        }\n      } else if (event.target.type === 'select-one') {\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputOnChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (value < 0) {\n        //|| value === 0.0) {\n        selectedRecord[name] = '';\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        selectedRecord[name] = value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.deleteRecord = deleteparam => {\n      if (deleteparam.selectedRecord.expanded !== undefined) {\n        delete deleteparam.selectedRecord.expanded;\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: deleteparam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        selectedId: deleteparam.selectedRecord.nkpibandcode,\n        inputData: {\n          //[this.props.Login.inputParam.methodUrl.toLowerCase()]: selectedRecord.dataItem,\n          [deleteparam.methodUrl.toLowerCase()]: deleteparam.selectedRecord,\n          //.dataItem,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteparam.operation\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteparam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            //screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\n            //operation\n            screenName: deleteparam.screenName,\n            operation: deleteparam.operation,\n            selectedId: deleteparam.selectedRecord.nkpibandcode\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n        this.fieldList.map(item => {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item];\n        });\n        inputData[\"kpiband\"][\"nproductcode\"] = this.state.selectedRecord[\"nproductcode\"] ? this.state.selectedRecord[\"nproductcode\"].value : -1;\n        inputData[\"kpiband\"][\"nbeforeperiodcode\"] = this.state.selectedRecord[\"nbeforeperiodcode\"] ? this.state.selectedRecord[\"nbeforeperiodcode\"].value : -1;\n        inputData[\"kpiband\"][\"nafterperiodcode\"] = this.state.selectedRecord[\"nafterperiodcode\"] ? this.state.selectedRecord[\"nafterperiodcode\"].value : -1;\n        dataState = this.state.dataState;\n        selectedId = this.props.Login.selectedId;\n      } else {\n        //add               \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        this.fieldList.map(item => {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item];\n        });\n        inputData[\"kpiband\"][\"nproductcode\"] = this.state.selectedRecord[\"nproductcode\"] ? this.state.selectedRecord[\"nproductcode\"].value : -1;\n        inputData[\"kpiband\"][\"nbeforeperiodcode\"] = this.state.selectedRecord[\"nbeforeperiodcode\"] ? this.state.selectedRecord[\"nbeforeperiodcode\"].value : -1;\n        inputData[\"kpiband\"][\"nafterperiodcode\"] = this.state.selectedRecord[\"nafterperiodcode\"] ? this.state.selectedRecord[\"nafterperiodcode\"].value : -1;\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        selectedId,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo); // let selectedRecord = {};\n        // this.setState({ selectedRecord });\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\"); // let selectedRecord = {};\n        // this.setState({ selectedRecord });\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.fieldList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      addScreen: false,\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      operation: \"create\",\n      dataResult: [],\n      dataState: _dataState,\n      kpiBandData: [],\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      selectedRecord: {},\n      periodList: [],\n      productList: []\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_PRODUCTNAME\",\n      \"dataField\": \"sproductname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_KPIBANDNAME\",\n      \"dataField\": \"skpibandname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_NUMBEROFDAYS\",\n      \"dataField\": \"nnumberofdays\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_BEFOREWINDOWPERIOD\",\n      \"dataField\": \"nbeforewindowperiod\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_AFTERWINDOWPERIOD\",\n      \"dataField\": \"nafterwindowperiod\",\n      \"width\": \"200px\"\n    } // { \"idsName\": \"IDS_BEFOREWINDOWPERIOD\", \"dataField\": \"nbeforewindowperiod\", \"width\": \"200px\" },\n    // { \"idsName\": \"IDS_BEFOREPERIODCODE\", \"dataField\": \"sbeforeperiodname\", \"width\": \"200px\" },\n    // { \"idsName\": \"IDS_AFTERWINDOWPERIOD\", \"dataField\": \"nafterwindowperiod\", \"width\": \"200px\" },\n    // { \"idsName\": \"IDS_AFTERPERIODCODE\", \"dataField\": \"safterperiodname\", \"width\": \"200px\" },\n    ]; //primaryKeyField = \"nkpibandcode\";\n\n    this.validationColumnList = [{\n      \"idsName\": \"IDS_PRODUCTNAME\",\n      \"dataField\": \"nproductcode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_KPIBANDNAME\",\n      \"dataField\": \"skpibandname\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_NUMBEROFDAYS\",\n      \"dataField\": \"nnumberofdays\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_BEFOREWINDOWPERIOD\",\n      \"dataField\": \"nbeforewindowperiod\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_BEFOREPERIODCODE\",\n      \"dataField\": \"nbeforeperiodcode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_AFTERWINDOWPERIOD\",\n      \"dataField\": \"nafterwindowperiod\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_AFTERPERIODCODE\",\n      \"dataField\": \"nafterperiodcode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    this.fieldList = [\"skpibandname\", \"nnumberofdays\", \"nbeforewindowperiod\", \"nbeforeperiodcode\", \"nafterwindowperiod\", \"nafterperiodcode\", \"nproductcode\"];\n    const addId = this.state.controlMap.has(\"AddKpiBand\") && this.state.controlMap.get(\"AddKpiBand\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditKpiBand\") && this.state.controlMap.get(\"EditKpiBand\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteKpiBand\") && this.state.controlMap.get(\"DeleteKpiBand\").ncontrolcode;\n    const kpiBandAddParam = {\n      screenName: \"KPI Band\",\n      operation: \"create\",\n      primaryKeyField: \"nkpibandcode\",\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId\n    };\n    const kpiBandEditParam = {\n      screenName: \"KPI Band\",\n      operation: \"update\",\n      primaryKeyField: \"nkpibandcode\",\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const kpiBandDeleteParam = {\n      screenName: \"KpiBand\",\n      methodUrl: \"KpiBand\",\n      operation: \"delete\",\n      ncontrolCode: deleteId\n    };\n    const mandatoryFields = [];\n    this.validationColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nkpibandcode\",\n      expandField: \"expanded\",\n      detailedFieldList: this.detailedFieldList,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.getKpiBandComboService //fetchRecord}\n      ,\n      editParam: kpiBandEditParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: kpiBandDeleteParam,\n      reloadData: this.reloadData,\n      addRecord: () => this.props.getKpiBandComboService(kpiBandAddParam),\n      pageable: {\n        buttonCount: 4,\n        pageSizes: true\n      } // scrollable={\"auto\"}\n      ,\n      scrollable: 'scrollable',\n      gridHeight: \"600px\",\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId // isComponent={true}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddKpiBand, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputOnChange: this.onNumericInputOnChange,\n        onComboChange: this.onComboChange,\n        formatMessage: this.props.intl.formatMessage,\n        productList: this.state.productList || [] //{this.props.Login.productList || []}\n        ,\n        periodList: this.state.periodList || [] //{this.props.Login.periodList || []}\n        ,\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.periodList !== previousProps.Login.periodList || this.props.Login.productList !== previousProps.Login.productList) {\n      const periodList = constructOptionList(this.props.Login.periodList || [], \"nperiodcode\", \"speriodname\", undefined, undefined, undefined);\n      const periodListKPI = periodList.get(\"OptionList\");\n      const productList = constructOptionList(this.props.Login.productList || [], \"nproductcode\", \"sproductname\", undefined, undefined, undefined);\n      const productListKPI = productList.get(\"OptionList\");\n      this.setState({\n        periodList: periodListKPI,\n        productList: productListKPI\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  getKpiBandComboService\n})(injectIntl(KpiBand));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/pages/basemaster/KpiBand.jsx"],"names":["React","connect","FormattedMessage","injectIntl","Row","Col","FormGroup","FormLabel","toast","process","DataGrid","SlideOutModal","Esign","AddKpiBand","callService","crudMaster","updateStore","validateEsignCredential","getKpiBandComboService","DEFAULT_RETURN","constructOptionList","getControlMap","showEsign","ListWrapper","MediaLabel","mapStateToProps","state","Login","KpiBand","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedId","selectedRecord","operation","updateInfo","typeName","expandChange","isExpanded","dataItem","expanded","undefined","aggregates","detailBand","Dataitem","OptionalFieldList","datafield","Column","map","fields","detailedFieldList","dataField","idsName","onComboChange","comboData","fieldName","onInputOnChange","target","type","name","checked","value","onNumericInputOnChange","deleteRecord","deleteparam","inputParam","classUrl","methodUrl","displayName","nkpibandcode","inputData","toLowerCase","userInfo","userRoleControlRights","nformcode","ncontrolCode","screenData","masterData","screenName","reloadData","onSaveClick","saveType","formRef","JSON","parse","stringify","fieldList","item","nmastersitecode","intl","formatMessage","id","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","createRef","extractedColumnList","skip","take","settings","parseInt","addScreen","masterStatus","error","kpiBandData","controlMap","Map","periodList","productList","getDerivedStateFromProps","warn","render","validationColumnList","addId","has","get","ncontrolcode","editId","deleteId","kpiBandAddParam","primaryKeyField","kpiBandEditParam","kpiBandDeleteParam","mandatoryFields","forEach","mandatory","push","buttonCount","pageSizes","componentDidUpdate","previousProps","Object","values","periodListKPI","productListKPI"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,YAA7C;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,EAA8BC,SAA9B,QAA+C,iBAA/C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,OAAOC,QAAP,MAAqB,gDAArB;AACA,OAAOC,aAAP,MAA0B,gDAA1B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,WAAlC,EAA+CC,uBAA/C,EAAwEC,sBAAxE,QAAsG,eAAtG;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAAQC,mBAAR,EAA6BC,aAA7B,EAA4CC,SAA5C,QAA6D,+BAA7D;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,SAASC,UAAT,QAA2B,oCAA3B;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAQ;AAAEC,IAAAA,KAAK,EAAED,KAAK,CAACC;AAAf,GAAR;AACH,CAFD;;AAIA,MAAMC,OAAN,SAAsB5B,KAAK,CAAC6B,SAA5B,CAAsC;AAClCC,EAAAA,WAAW,CAACC,MAAD,EAAQ;AACf,UAAMA,MAAN;;AADe,SAuBnBC,eAvBmB,GAuBAC,KAAD,IAAW;AACzB,WAAKC,QAAL,CAAc;AACVC,QAAAA,UAAU,EAAE1B,OAAO,CAAC,KAAKiB,KAAL,CAAWU,IAAZ,EAAkBH,KAAK,CAACI,SAAxB,CADT;AAEVA,QAAAA,SAAS,EAAEJ,KAAK,CAACI;AAFP,OAAd;AAIH,KA5BkB;;AAAA,SA8BnBC,UA9BmB,GA8BN,MAAM;AACf,UAAIC,SAAS,GAAG,KAAKR,KAAL,CAAWJ,KAAX,CAAiBY,SAAjC;AACA,UAAIC,SAAS,GAAG,KAAKT,KAAL,CAAWJ,KAAX,CAAiBa,SAAjC;AACA,UAAIC,UAAU,GAAG,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,UAAlC;AACA,UAAIC,cAAc,GAAG,KAAKhB,KAAL,CAAWgB,cAAhC,CAJe,CAIiC;;AAChD,UAAI,KAAKX,KAAL,CAAWJ,KAAX,CAAiBY,SAArB,EAAgC;AAC5B,YAAI,KAAKR,KAAL,CAAWJ,KAAX,CAAiBgB,SAAjB,KAA+B,QAAnC,EAA6C;AACzCJ,UAAAA,SAAS,GAAG,KAAZ;AACAC,UAAAA,SAAS,GAAG,KAAZ;AACAE,UAAAA,cAAc,GAAG,EAAjB;AACAD,UAAAA,UAAU,GAAG,IAAb;AACH,SALD,MAMK;AACDF,UAAAA,SAAS,GAAG,KAAZ;AAEH;AACJ,OAXD,MAYK;AACDC,QAAAA,SAAS,GAAG,KAAZ;AACAC,QAAAA,UAAU,GAAG,IAAb;AACAC,QAAAA,cAAc,GAAG,EAAjB;AACH;;AAED,YAAME,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE1B,cADK;AAEfiB,QAAAA,IAAI,EAAE;AAAEI,UAAAA,SAAF;AAAaD,UAAAA,SAAb;AAAwBG,UAAAA,cAAxB;AAAwCD,UAAAA;AAAxC;AAFS,OAAnB;AAIA,WAAKV,KAAL,CAAWf,WAAX,CAAuB4B,UAAvB;AAEH,KA3DkB;;AAAA,SAuNnBE,YAvNmB,GAuNHb,KAAD,IAAW;AACtB,YAAMc,UAAU,GACZd,KAAK,CAACe,QAAN,CAAeC,QAAf,KAA4BC,SAA5B,GACIjB,KAAK,CAACe,QAAN,CAAeG,UADnB,GACgClB,KAAK,CAACe,QAAN,CAAeC,QAFnD;AAGAhB,MAAAA,KAAK,CAACe,QAAN,CAAeC,QAAf,GAA0B,CAACF,UAA3B;AACA,WAAKb,QAAL,CAAc,EAAE,GAAG,KAAKH;AAAV,OAAd;AACH,KA7NkB;;AAAA,SA8NnBqB,UA9NmB,GA8NLrB,KAAD,IAAW;AAEpB,YAAMsB,QAAQ,GAAGtB,KAAK,CAACiB,QAAvB;AACA,YAAMM,iBAAiB,GAAG,CACtB;AAAEC,QAAAA,SAAS,EAAE,qBAAb;AAAoCC,QAAAA,MAAM,EAAE;AAA5C,OADsB,EAEtB;AAAED,QAAAA,SAAS,EAAE,mBAAb;AAAkCC,QAAAA,MAAM,EAAE;AAA1C,OAFsB,EAGtB;AAAED,QAAAA,SAAS,EAAE,oBAAb;AAAmCC,QAAAA,MAAM,EAAE;AAA3C,OAHsB,EAItB;AAAED,QAAAA,SAAS,EAAE,kBAAb;AAAiCC,QAAAA,MAAM,EAAE;AAAzC,OAJsB,CAA1B;AAMA,0BAAQ,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACHF,iBAAiB,CAACG,GAAlB,CAAuBC,MAAD,IAAY;AAC/B,4BACI,oBAAC,GAAD;AAAK,UAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAW,oBAAC,gBAAD;AAAkB,UAAA,EAAE,EAAEA,MAAM,CAACF,MAA7B;AAAqC,UAAA,OAAO,EAAEE,MAAM,CAACF,MAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAX,CADJ,eAEI,oBAAC,UAAD;AAAY,UAAA,SAAS,EAAC,kCAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA0DH,QAAQ,CAACK,MAAM,CAACH,SAAR,CAAlE,CAFJ,CADJ,CADJ;AAQH,OATA,CADG,CAAR;AAaH,KApPkB;;AAAA,SAqPnBI,iBArPmB,GAqPC,CAChB;AAAEC,MAAAA,SAAS,EAAE,qBAAb;AAAoCC,MAAAA,OAAO,EAAE;AAA7C,KADgB,EAEhB;AAAED,MAAAA,SAAS,EAAE,mBAAb;AAAkCC,MAAAA,OAAO,EAAE;AAA3C,KAFgB,EAGhB;AAAED,MAAAA,SAAS,EAAE,oBAAb;AAAmCC,MAAAA,OAAO,EAAE;AAA5C,KAHgB,EAIhB;AAAED,MAAAA,SAAS,EAAE,kBAAb;AAAiCC,MAAAA,OAAO,EAAE;AAA1C,KAJgB,CAKhB;AALgB,KArPD;;AAAA,SA8PnBC,aA9PmB,GA8PH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACtC,UAAID,SAAS,IAAI,IAAjB,EAAuB;AACnB,cAAMrB,cAAc,GAAG,KAAKhB,KAAL,CAAWgB,cAAX,IAA6B,EAApD;AACAA,QAAAA,cAAc,CAACsB,SAAD,CAAd,GAA4BD,SAA5B,CAFmB,CAEmB;;AAGtC,aAAK7B,QAAL,CAAc;AAAEQ,UAAAA;AAAF,SAAd;AACH;AACJ,KAtQkB;;AAAA,SAuTnBuB,eAvTmB,GAuTAhC,KAAD,IAAW;AAEzB,YAAMS,cAAc,GAAG,KAAKhB,KAAL,CAAWgB,cAAX,IAA6B,EAApD;;AACA,UAAIT,KAAK,CAACiC,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClC,YAAIlC,KAAK,CAACiC,MAAN,CAAaE,IAAb,KAAsB,OAA1B,EAAmC;AAC/B1B,UAAAA,cAAc,CAACT,KAAK,CAACiC,MAAN,CAAaE,IAAd,CAAd,GAAoCnC,KAAK,CAACiC,MAAN,CAAaG,OAAb,KAAyB,IAAzB,GAAgC,CAAhC,GAAoC,CAAxE;AACH;AACJ,OAJD,MAKK,IAAIpC,KAAK,CAACiC,MAAN,CAAaC,IAAb,KAAsB,YAA1B,EAAwC;AAEzCzB,QAAAA,cAAc,CAACT,KAAK,CAACiC,MAAN,CAAaE,IAAd,CAAd,GAAoCnC,KAAK,CAACiC,MAAN,CAAaI,KAAjD;AAEH,OAJI,MAKA;AACD5B,QAAAA,cAAc,CAACT,KAAK,CAACiC,MAAN,CAAaE,IAAd,CAAd,GAAoCnC,KAAK,CAACiC,MAAN,CAAaI,KAAjD;AACH;;AAED,WAAKpC,QAAL,CAAc;AAAEQ,QAAAA;AAAF,OAAd;AAGH,KA3UkB;;AAAA,SA6UnB6B,sBA7UmB,GA6UM,CAACD,KAAD,EAAQF,IAAR,KAAiB;AACtC,YAAM1B,cAAc,GAAG,KAAKhB,KAAL,CAAWgB,cAAX,IAA6B,EAApD;;AACA,UAAI4B,KAAK,GAAG,CAAZ,EAAe;AAAE;AACb5B,QAAAA,cAAc,CAAC0B,IAAD,CAAd,GAAuB,EAAvB;AACA,aAAKlC,QAAL,CAAc;AAAEQ,UAAAA;AAAF,SAAd;AACH,OAHD,MAIK;AACDA,QAAAA,cAAc,CAAC0B,IAAD,CAAd,GAAuBE,KAAvB;AACA,aAAKpC,QAAL,CAAc;AAAEQ,UAAAA;AAAF,SAAd;AACH;AACJ,KAvVkB;;AAAA,SAyVnB8B,YAzVmB,GAyVHC,WAAD,IAAiB;AAC5B,UAAIA,WAAW,CAAC/B,cAAZ,CAA2BO,QAA3B,KAAwCC,SAA5C,EAAuD;AACnD,eAAOuB,WAAW,CAAC/B,cAAZ,CAA2BO,QAAlC;AACH;;AACD,YAAMyB,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE,KAAK5C,KAAL,CAAWJ,KAAX,CAAiB+C,UAAjB,CAA4BC,QADvB;AAEfC,QAAAA,SAAS,EAAEH,WAAW,CAACG,SAFR;AAGfC,QAAAA,WAAW,EAAE,KAAK9C,KAAL,CAAWJ,KAAX,CAAiB+C,UAAjB,CAA4BG,WAH1B;AAIfpC,QAAAA,UAAU,EAAEgC,WAAW,CAAC/B,cAAZ,CAA2BoC,YAJxB;AAKfC,QAAAA,SAAS,EAAE;AACP;AACA,WAACN,WAAW,CAACG,SAAZ,CAAsBI,WAAtB,EAAD,GAAuCP,WAAW,CAAC/B,cAF5C;AAE2D;AAClE,sBAAY,KAAKX,KAAL,CAAWJ,KAAX,CAAiBsD;AAHtB,SALI;AAUftC,QAAAA,SAAS,EAAE8B,WAAW,CAAC9B;AAVR,OAAnB;;AAaA,UAAIrB,SAAS,CAAC,KAAKS,KAAL,CAAWJ,KAAX,CAAiBuD,qBAAlB,EAAyC,KAAKnD,KAAL,CAAWJ,KAAX,CAAiBsD,QAAjB,CAA0BE,SAAnE,EAA8EV,WAAW,CAACW,YAA1F,CAAb,EAAsH;AAClH,cAAMxC,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE1B,cADK;AAEfiB,UAAAA,IAAI,EAAE;AACFG,YAAAA,SAAS,EAAE,IADT;AACe8C,YAAAA,UAAU,EAAE;AAAEX,cAAAA,UAAF;AAAcY,cAAAA,UAAU,EAAE,KAAKvD,KAAL,CAAWJ,KAAX,CAAiB2D;AAA3C,aAD3B;AAEF9C,YAAAA,SAAS,EAAE,IAFT;AAEe;AACjB;AACA+C,YAAAA,UAAU,EAAEd,WAAW,CAACc,UAJtB;AAKF5C,YAAAA,SAAS,EAAE8B,WAAW,CAAC9B,SALrB;AAMFF,YAAAA,UAAU,EAAEgC,WAAW,CAAC/B,cAAZ,CAA2BoC;AANrC;AAFS,SAAnB;AAWA,aAAK/C,KAAL,CAAWf,WAAX,CAAuB4B,UAAvB;AACH,OAbD,MAcK;AACD,aAAKb,KAAL,CAAWhB,UAAX,CAAsB2D,UAAtB,EAAkC,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB2D,UAAnD,EAA+D,WAA/D;AACH;AACJ,KA3XkB;;AAAA,SA6XnBE,UA7XmB,GA6XN,MAAM;AACf,YAAMd,UAAU,GAAG;AACfK,QAAAA,SAAS,EAAE;AAAE,sBAAY,KAAKhD,KAAL,CAAWJ,KAAX,CAAiBsD;AAA/B,SADI;AAEfN,QAAAA,QAAQ,EAAE,KAAK5C,KAAL,CAAWJ,KAAX,CAAiB+C,UAAjB,CAA4BC,QAFvB;AAGfC,QAAAA,SAAS,EAAE,KAAK7C,KAAL,CAAWJ,KAAX,CAAiB+C,UAAjB,CAA4BE,SAHxB;AAIfC,QAAAA,WAAW,EAAE,KAAK9C,KAAL,CAAWJ,KAAX,CAAiB+C,UAAjB,CAA4BG,WAJ1B;AAKfI,QAAAA,QAAQ,EAAE,KAAKlD,KAAL,CAAWJ,KAAX,CAAiBsD;AALZ,OAAnB;AAQA,WAAKlD,KAAL,CAAWjB,WAAX,CAAuB4D,UAAvB;AACH,KAvYkB;;AAAA,SA0YnBe,WA1YmB,GA0YL,CAACC,QAAD,EAAWC,OAAX,KAAuB;AAEjC,UAAIZ,SAAS,GAAG,EAAhB;AACAA,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKhD,KAAL,CAAWJ,KAAX,CAAiBsD,QAAzC;AACA,UAAI5C,SAAS,GAAGa,SAAhB;AACA,UAAIT,UAAU,GAAG,IAAjB;;AACA,UAAI,KAAKV,KAAL,CAAWJ,KAAX,CAAiBgB,SAAjB,KAA+B,QAAnC,EAA6C;AACzC;AACAoC,QAAAA,SAAS,CAAC,KAAKhD,KAAL,CAAWJ,KAAX,CAAiB+C,UAAjB,CAA4BE,SAA5B,CAAsCI,WAAtC,EAAD,CAAT,GAAiEY,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKpE,KAAL,CAAWgB,cAA1B,CAAX,CAAjE;AAEA,aAAKqD,SAAL,CAAetC,GAAf,CAAmBuC,IAAI,IAAI;AACvB,iBAAOjB,SAAS,CAAC,KAAKhD,KAAL,CAAWJ,KAAX,CAAiB+C,UAAjB,CAA4BE,SAA5B,CAAsCI,WAAtC,EAAD,CAAT,CAA+DgB,IAA/D,IAAuE,KAAKtE,KAAL,CAAWgB,cAAX,CAA0BsD,IAA1B,CAA9E;AACH,SAFD;AAIAjB,QAAAA,SAAS,CAAC,SAAD,CAAT,CAAqB,cAArB,IAAuC,KAAKrD,KAAL,CAAWgB,cAAX,CAA0B,cAA1B,IAA4C,KAAKhB,KAAL,CAAWgB,cAAX,CAA0B,cAA1B,EAA0C4B,KAAtF,GAA8F,CAAC,CAAtI;AACAS,QAAAA,SAAS,CAAC,SAAD,CAAT,CAAqB,mBAArB,IAA4C,KAAKrD,KAAL,CAAWgB,cAAX,CAA0B,mBAA1B,IAAiD,KAAKhB,KAAL,CAAWgB,cAAX,CAA0B,mBAA1B,EAA+C4B,KAAhG,GAAwG,CAAC,CAArJ;AACAS,QAAAA,SAAS,CAAC,SAAD,CAAT,CAAqB,kBAArB,IAA2C,KAAKrD,KAAL,CAAWgB,cAAX,CAA0B,kBAA1B,IAAgD,KAAKhB,KAAL,CAAWgB,cAAX,CAA0B,kBAA1B,EAA8C4B,KAA9F,GAAsG,CAAC,CAAlJ;AACAjC,QAAAA,SAAS,GAAG,KAAKX,KAAL,CAAWW,SAAvB;AACAI,QAAAA,UAAU,GAAG,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,UAA9B;AACH,OAbD,MAcK;AACD;AACAsC,QAAAA,SAAS,CAAC,KAAKhD,KAAL,CAAWJ,KAAX,CAAiB+C,UAAjB,CAA4BE,SAA5B,CAAsCI,WAAtC,EAAD,CAAT,GAAiE;AAAE,uBAAa,KAAKjD,KAAL,CAAWJ,KAAX,CAAiBsD,QAAjB,CAA0BgB;AAAzC,SAAjE;AAGA,aAAKF,SAAL,CAAetC,GAAf,CAAmBuC,IAAI,IAAI;AACvB,iBAAOjB,SAAS,CAAC,KAAKhD,KAAL,CAAWJ,KAAX,CAAiB+C,UAAjB,CAA4BE,SAA5B,CAAsCI,WAAtC,EAAD,CAAT,CAA+DgB,IAA/D,IAAuE,KAAKtE,KAAL,CAAWgB,cAAX,CAA0BsD,IAA1B,CAA9E;AACH,SAFD;AAIAjB,QAAAA,SAAS,CAAC,SAAD,CAAT,CAAqB,cAArB,IAAuC,KAAKrD,KAAL,CAAWgB,cAAX,CAA0B,cAA1B,IAA4C,KAAKhB,KAAL,CAAWgB,cAAX,CAA0B,cAA1B,EAA0C4B,KAAtF,GAA8F,CAAC,CAAtI;AACAS,QAAAA,SAAS,CAAC,SAAD,CAAT,CAAqB,mBAArB,IAA4C,KAAKrD,KAAL,CAAWgB,cAAX,CAA0B,mBAA1B,IAAiD,KAAKhB,KAAL,CAAWgB,cAAX,CAA0B,mBAA1B,EAA+C4B,KAAhG,GAAwG,CAAC,CAArJ;AACAS,QAAAA,SAAS,CAAC,SAAD,CAAT,CAAqB,kBAArB,IAA2C,KAAKrD,KAAL,CAAWgB,cAAX,CAA0B,kBAA1B,IAAgD,KAAKhB,KAAL,CAAWgB,cAAX,CAA0B,kBAA1B,EAA8C4B,KAA9F,GAAsG,CAAC,CAAlJ;AACH;;AAED,YAAMI,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE,KAAK5C,KAAL,CAAWJ,KAAX,CAAiB+C,UAAjB,CAA4BC,QADvB;AAEfC,QAAAA,SAAS,EAAE,KAAK7C,KAAL,CAAWJ,KAAX,CAAiB+C,UAAjB,CAA4BE,SAFxB;AAGfC,QAAAA,WAAW,EAAE,KAAK9C,KAAL,CAAWJ,KAAX,CAAiB+C,UAAjB,CAA4BG,WAH1B;AAIfpC,QAAAA,UAJe;AAKfsC,QAAAA,SAAS,EAAEA,SALI;AAMfpC,QAAAA,SAAS,EAAE,KAAKZ,KAAL,CAAWJ,KAAX,CAAiBgB,SANb;AAMwB+C,QAAAA,QANxB;AAMkCC,QAAAA,OANlC;AAM2CtD,QAAAA;AAN3C,OAAnB;;AASA,UAAIf,SAAS,CAAC,KAAKS,KAAL,CAAWJ,KAAX,CAAiBuD,qBAAlB,EAAyC,KAAKnD,KAAL,CAAWJ,KAAX,CAAiBsD,QAAjB,CAA0BE,SAAnE,EAA8E,KAAKpD,KAAL,CAAWJ,KAAX,CAAiByD,YAA/F,CAAb,EAA2H;AACvH,cAAMxC,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE1B,cADK;AAEfiB,UAAAA,IAAI,EAAE;AACFG,YAAAA,SAAS,EAAE,IADT;AACe8C,YAAAA,UAAU,EAAE;AAAEX,cAAAA,UAAF;AAAcY,cAAAA,UAAU,EAAE,KAAKvD,KAAL,CAAWJ,KAAX,CAAiB2D;AAA3C,aAD3B;AAEF9C,YAAAA,SAAS,EAAE,IAFT;AAEe+C,YAAAA,UAAU,EAAE,KAAKxD,KAAL,CAAWmE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,cAAAA,EAAE,EAAE,KAAKrE,KAAL,CAAWJ,KAAX,CAAiB+C,UAAjB,CAA4BG;AAAlC,aAA9B,CAF3B;AAGFlC,YAAAA,SAAS,EAAE,KAAKZ,KAAL,CAAWJ,KAAX,CAAiBgB;AAH1B;AAFS,SAAnB;AAQA,aAAKZ,KAAL,CAAWf,WAAX,CAAuB4B,UAAvB,EATuH,CAUvH;AACA;AACH,OAZD,MAaK;AACD,aAAKb,KAAL,CAAWhB,UAAX,CAAsB2D,UAAtB,EAAkC,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB2D,UAAnD,EAA+D,WAA/D,EADC,CAED;AACA;AACH;AAGJ,KAzckB;;AAAA,SA0cnBe,aA1cmB,GA0cH,MAAM;AAClB,YAAM3B,UAAU,GAAG;AACfK,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAKhD,KAAL,CAAWJ,KAAX,CAAiBsD,QADZ;AAERqB,YAAAA,OAAO,EAAE,KAAK5E,KAAL,CAAWgB,cAAX,CAA0B,eAA1B,CAFD;AAGR6D,YAAAA,WAAW,EAAC,KAAK7E,KAAL,CAAWgB,cAAX,CAA0B,aAA1B,KAA4C,KAAKhB,KAAL,CAAWgB,cAAX,CAA0B,aAA1B,EAAyC4B,KAHzF;AAIRkC,YAAAA,iBAAiB,EAAC,KAAK9E,KAAL,CAAWgB,cAAX,CAA0B,aAA1B,KAA4C,KAAKhB,KAAL,CAAWgB,cAAX,CAA0B,aAA1B,EAAyC+D;AAJ/F,WADL;AAQPC,UAAAA,QAAQ,EAAE,KAAKhF,KAAL,CAAWgB,cAAX,CAA0B,eAA1B;AARH,SADI;AAWf2C,QAAAA,UAAU,EAAE,KAAKtD,KAAL,CAAWJ,KAAX,CAAiB0D;AAXd,OAAnB;AAaA,WAAKtD,KAAL,CAAWd,uBAAX,CAAmCyD,UAAnC,EAA+C,WAA/C;AACH,KAzdkB;;AAEf,SAAKiB,OAAL,GAAe3F,KAAK,CAAC2G,SAAN,EAAf;AACA,SAAKC,mBAAL,GAA2B,EAA3B;AACA,SAAKb,SAAL,GAAiB,EAAjB;AAGA,UAAM1D,UAAS,GAAG;AACdwE,MAAAA,IAAI,EAAE,CADQ;AAEdC,MAAAA,IAAI,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBoF,QAAjB,GAA4BC,QAAQ,CAAC,KAAKjF,KAAL,CAAWJ,KAAX,CAAiBoF,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAF9D,KAAlB;AAIA,SAAKrF,KAAL,GAAa;AACTuF,MAAAA,SAAS,EAAE,KADF;AACS7E,MAAAA,IAAI,EAAE,EADf;AACmB8E,MAAAA,YAAY,EAAE,EADjC;AACqCC,MAAAA,KAAK,EAAE,EAD5C;AACgDxE,MAAAA,SAAS,EAAE,QAD3D;AAETR,MAAAA,UAAU,EAAE,EAFH;AAGTE,MAAAA,SAAS,EAAEA,UAHF;AAIT+E,MAAAA,WAAW,EAAE,EAJJ;AAKTlC,MAAAA,qBAAqB,EAAE,EALd;AAMTmC,MAAAA,UAAU,EAAE,IAAIC,GAAJ,EANH;AAOT5E,MAAAA,cAAc,EAAE,EAPP;AAQT6E,MAAAA,UAAU,EAAC,EARF;AAQKC,MAAAA,WAAW,EAAC;AARjB,KAAb;AAUH;;AAwC8B,SAAxBC,wBAAwB,CAAC1F,KAAD,EAAQL,KAAR,EAAe;AAE1C,QAAIK,KAAK,CAACJ,KAAN,CAAYuF,YAAZ,KAA6B,EAA7B,IAAmCnF,KAAK,CAACJ,KAAN,CAAYuF,YAAZ,KAA6BxF,KAAK,CAACwF,YAA1E,EAAwF;AACpF1G,MAAAA,KAAK,CAACkH,IAAN,CAAW3F,KAAK,CAACJ,KAAN,CAAYuF,YAAvB;AACAnF,MAAAA,KAAK,CAACJ,KAAN,CAAYuF,YAAZ,GAA2B,EAA3B;AACH;;AAED,QAAInF,KAAK,CAACJ,KAAN,CAAYwF,KAAZ,KAAsBzF,KAAK,CAACyF,KAAhC,EAAuC;AACnC3G,MAAAA,KAAK,CAAC2G,KAAN,CAAYpF,KAAK,CAACJ,KAAN,CAAYwF,KAAxB;AACApF,MAAAA,KAAK,CAACJ,KAAN,CAAYwF,KAAZ,GAAoB,EAApB;AACH;;AACD,QAAIpF,KAAK,CAACJ,KAAN,CAAYe,cAAZ,KAA+BQ,SAAnC,EAA8C;AAC1C,aAAO;AAAER,QAAAA,cAAc,EAAE;AAAlB,OAAP;AACH;;AACD,WAAO,IAAP;AACH;;AAEDiF,EAAAA,MAAM,GAAG;AAEL,SAAKf,mBAAL,GAA2B,CACvB;AAAE,iBAAW,iBAAb;AAAgC,mBAAa,cAA7C;AAA6D,eAAS;AAAtE,KADuB,EAEvB;AAAE,iBAAW,iBAAb;AAAgC,mBAAa,cAA7C;AAA6D,eAAS;AAAtE,KAFuB,EAGvB;AAAE,iBAAW,kBAAb;AAAiC,mBAAa,eAA9C;AAA+D,eAAS;AAAxE,KAHuB,EAIvB;AAAE,iBAAW,wBAAb;AAAuC,mBAAa,qBAApD;AAA2E,eAAS;AAApF,KAJuB,EAKvB;AAAE,iBAAW,uBAAb;AAAsC,mBAAa,oBAAnD;AAAyE,eAAS;AAAlF,KALuB,CAMvB;AACA;AACA;AACA;AATuB,KAA3B,CAFK,CAcL;;AAEA,SAAKgB,oBAAL,GAA4B,CACxB;AAAE,iBAAW,iBAAb;AAAgC,mBAAa,cAA7C;AAA6D,eAAS,OAAtE;AAA8E,mBAAa,IAA3F;AAAmG,wBAAiB,YAApH;AAAkI,qBAAe;AAAjJ,KADwB,EAExB;AAAE,iBAAW,iBAAb;AAAgC,mBAAa,cAA7C;AAA6D,eAAS,OAAtE;AAA8E,mBAAa,IAA3F;AAAmG,wBAAiB,WAApH;AAAiI,qBAAe;AAAhJ,KAFwB,EAGxB;AAAE,iBAAW,kBAAb;AAAiC,mBAAa,eAA9C;AAA+D,eAAS,OAAxE;AAAgF,mBAAa,IAA7F;AAAqG,wBAAiB,WAAtH;AAAmI,qBAAe;AAAlJ,KAHwB,EAIvB;AAAE,iBAAW,wBAAb;AAAuC,mBAAa,qBAApD;AAA2E,eAAS,OAApF;AAA4F,mBAAa,IAAzG;AAAiH,wBAAiB,WAAlI;AAA+I,qBAAe;AAA9J,KAJuB,EAKvB;AAAE,iBAAW,sBAAb;AAAqC,mBAAa,mBAAlD;AAAuE,eAAS,OAAhF;AAAwF,mBAAa,IAArG;AAA4G,wBAAiB,WAA7H;AAA0I,qBAAe;AAAzJ,KALuB,EAMvB;AAAE,iBAAW,uBAAb;AAAsC,mBAAa,oBAAnD;AAAyE,eAAS,OAAlF;AAA0F,mBAAa,IAAvG;AAA+G,wBAAiB,WAAhI;AAA6I,qBAAe;AAA5J,KANuB,EAOvB;AAAE,iBAAW,qBAAb;AAAoC,mBAAa,kBAAjD;AAAqE,eAAS,OAA9E;AAAsF,mBAAa,IAAnG;AAA0G,wBAAiB,WAA3H;AAAwI,qBAAe;AAAvJ,KAPuB,CAA5B;AAWA,SAAK7B,SAAL,GAAiB,CAAC,cAAD,EAAiB,eAAjB,EAAkC,qBAAlC,EAAyD,mBAAzD,EAA8E,oBAA9E,EAAoG,kBAApG,EAAwH,cAAxH,CAAjB;AAEA,UAAM8B,KAAK,GAAG,KAAKnG,KAAL,CAAW2F,UAAX,CAAsBS,GAAtB,CAA0B,YAA1B,KAA2C,KAAKpG,KAAL,CAAW2F,UAAX,CAAsBU,GAAtB,CAA0B,YAA1B,EAAwCC,YAAjG;AACA,UAAMC,MAAM,GAAG,KAAKvG,KAAL,CAAW2F,UAAX,CAAsBS,GAAtB,CAA0B,aAA1B,KAA4C,KAAKpG,KAAL,CAAW2F,UAAX,CAAsBU,GAAtB,CAA0B,aAA1B,EAAyCC,YAApG;AACA,UAAME,QAAQ,GAAG,KAAKxG,KAAL,CAAW2F,UAAX,CAAsBS,GAAtB,CAA0B,eAA1B,KAA8C,KAAKpG,KAAL,CAAW2F,UAAX,CAAsBU,GAAtB,CAA0B,eAA1B,EAA2CC,YAA1G;AAEA,UAAMG,eAAe,GAAG;AACpB5C,MAAAA,UAAU,EAAE,UADQ;AACI5C,MAAAA,SAAS,EAAE,QADf;AACyByF,MAAAA,eAAe,EAAE,cAD1C;AAEpBnD,MAAAA,QAAQ,EAAE,KAAKlD,KAAL,CAAWJ,KAAX,CAAiBsD,QAFP;AAEiBG,MAAAA,YAAY,EAAEyC;AAF/B,KAAxB;AAKA,UAAMQ,gBAAgB,GAAG;AACrB9C,MAAAA,UAAU,EAAE,UADS;AACG5C,MAAAA,SAAS,EAAE,QADd;AACwByF,MAAAA,eAAe,EAAE,cADzC;AAErBnD,MAAAA,QAAQ,EAAE,KAAKlD,KAAL,CAAWJ,KAAX,CAAiBsD,QAFN;AAEgBG,MAAAA,YAAY,EAAE6C;AAF9B,KAAzB;AAKA,UAAMK,kBAAkB,GAAG;AAAE/C,MAAAA,UAAU,EAAE,SAAd;AAAyBX,MAAAA,SAAS,EAAE,SAApC;AAA+CjC,MAAAA,SAAS,EAAE,QAA1D;AAAoEyC,MAAAA,YAAY,EAAE8C;AAAlF,KAA3B;AACA,UAAMK,eAAe,GAAG,EAAxB;AACA,SAAKX,oBAAL,CAA0BY,OAA1B,CAAkCxC,IAAI,IAAIA,IAAI,CAACyC,SAAL,KAAmB,IAAnB,GACtCF,eAAe,CAACG,IAAhB,CAAqB1C,IAArB,CADsC,GACT,EADjC;AAIA,wBAAQ,uDACA,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,qBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAeK,KAAKtE,KAAL,CAAWU,IAAX,gBACG,oBAAC,QAAD;AACI,MAAA,eAAe,EAAE,cADrB;AAEI,MAAA,WAAW,EAAC,UAFhB;AAGI,MAAA,iBAAiB,EAAE,KAAKuB,iBAH5B;AAII,MAAA,IAAI,EAAE,KAAKjC,KAAL,CAAWU,IAJrB;AAKI,MAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,UAL3B;AAMI,MAAA,SAAS,EAAE,KAAKT,KAAL,CAAWW,SAN1B;AAOI,MAAA,eAAe,EAAE,KAAKL,eAP1B;AAQI,MAAA,mBAAmB,EAAE,KAAK4E,mBAR9B;AASI,MAAA,UAAU,EAAE,KAAKlF,KAAL,CAAW2F,UAT3B;AAUI,MAAA,qBAAqB,EAAE,KAAK3F,KAAL,CAAWwD,qBAVtC;AAWI,MAAA,UAAU,EAAE,KAAKnD,KAAL,CAAWJ,KAAX,CAAiB+C,UAXjC;AAYI,MAAA,QAAQ,EAAE,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBsD,QAZ/B;AAaI,MAAA,WAAW,EAAE,KAAKlD,KAAL,CAAWb,sBAb5B,CAaoD;AAbpD;AAcI,MAAA,SAAS,EAAEmH,gBAdf;AAeI,MAAA,YAAY,EAAE,KAAK7D,YAfvB;AAgBI,MAAA,WAAW,EAAE8D,kBAhBjB;AAiBI,MAAA,UAAU,EAAE,KAAK9C,UAjBrB;AAkBI,MAAA,SAAS,EAAE,MAAM,KAAKzD,KAAL,CAAWb,sBAAX,CAAkCiH,eAAlC,CAlBrB;AAmBI,MAAA,QAAQ,EAAE;AAAEQ,QAAAA,WAAW,EAAE,CAAf;AAAkBC,QAAAA,SAAS,EAAE;AAA7B,OAnBd,CAoBI;AApBJ;AAqBI,MAAA,UAAU,EAAE,YArBhB;AAsBI,MAAA,UAAU,EAAI,OAtBlB;AAuBI,MAAA,gBAAgB,EAAE,IAvBtB;AAwBI,MAAA,iBAAiB,EAAE,IAxBvB;AAyBI,MAAA,UAAU,EAAE,KAAK7G,KAAL,CAAWJ,KAAX,CAAiBc,UAzBjC,CA0BI;AA1BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GA6BK,EA5CV,CADJ,CADJ,CADA,EAoDC,KAAKV,KAAL,CAAWJ,KAAX,CAAiBa,SAAjB,iBACG,oBAAC,aAAD;AAAe,MAAA,IAAI,EAAE,KAAKT,KAAL,CAAWJ,KAAX,CAAiBa,SAAtC;AACI,MAAA,UAAU,EAAE,KAAKF,UADrB;AAEI,MAAA,SAAS,EAAE,KAAKP,KAAL,CAAWJ,KAAX,CAAiBgB,SAFhC;AAGI,MAAA,UAAU,EAAE,KAAKZ,KAAL,CAAWJ,KAAX,CAAiB+C,UAHjC;AAII,MAAA,UAAU,EAAE,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB4D,UAJjC;AAKI,MAAA,WAAW,EAAE,KAAKE,WALtB;AAMI,MAAA,KAAK,EAAE,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBY,SAN5B;AAOI,MAAA,aAAa,EAAE,KAAK8D,aAPxB;AAQI,MAAA,YAAY,EAAE,KAAKtE,KAAL,CAAWJ,KAAX,CAAiBuF,YARnC;AASI,MAAA,WAAW,EAAE,KAAKnF,KAAL,CAAWf,WAT5B;AAUI,MAAA,cAAc,EAAE,KAAKU,KAAL,CAAWgB,cAAX,IAA6B,EAVjD;AAWI,MAAA,eAAe,EAAE6F,eAXrB;AAYI,MAAA,YAAY,EAAE,KAAKxG,KAAL,CAAWJ,KAAX,CAAiBY,SAAjB,gBACV,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAE,KAAKR,KAAL,CAAWJ,KAAX,CAAiBgB,SAAnC;AACI,QAAA,aAAa,EAAE,KAAKZ,KAAL,CAAWmE,IAAX,CAAgBC,aADnC;AAEI,QAAA,eAAe,EAAE,KAAKlC,eAF1B;AAGI,QAAA,UAAU,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiB+C,UAHjC;AAII,QAAA,cAAc,EAAE,KAAKhD,KAAL,CAAWgB,cAAX,IAA6B,EAJjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU,gBAOR,oBAAC,UAAD;AACE,QAAA,cAAc,EAAE,KAAKhB,KAAL,CAAWgB,cAAX,IAA6B,EAD/C;AAEE,QAAA,eAAe,EAAE,KAAKuB,eAFxB;AAGE,QAAA,sBAAsB,EAAE,KAAKM,sBAH/B;AAIE,QAAA,aAAa,EAAE,KAAKT,aAJtB;AAKE,QAAA,aAAa,EAAE,KAAK/B,KAAL,CAAWmE,IAAX,CAAgBC,aALjC;AAME,QAAA,WAAW,EAAE,KAAKzE,KAAL,CAAW8F,WAAX,IAA0B,EANzC,CAM4C;AAN5C;AAOE,QAAA,UAAU,EAAE,KAAK9F,KAAL,CAAW6F,UAAX,IAAyB,EAPvC,CAO0C;AAP1C;AAQE,QAAA,SAAS,EAAE,KAAKxF,KAAL,CAAWJ,KAAX,CAAiBgB,SAR9B;AASE,QAAA,UAAU,EAAE,KAAKZ,KAAL,CAAWJ,KAAX,CAAiB+C,UAT/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAnBV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArDJ,CAAR;AAsFH;;AAqDDmE,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAC9B,QAAI,KAAK/G,KAAL,CAAWJ,KAAX,CAAiB2D,UAAjB,KAAgCwD,aAAa,CAACnH,KAAd,CAAoB2D,UAAxD,EAAoE;AAChE,UAAI,KAAKvD,KAAL,CAAWJ,KAAX,CAAiBsD,QAAjB,CAA0BE,SAA1B,KAAwC2D,aAAa,CAACnH,KAAd,CAAoBsD,QAApB,CAA6BE,SAAzE,EAAoF;AAChF,cAAMD,qBAAqB,GAAG,EAA9B;;AACA,YAAI,KAAKnD,KAAL,CAAWJ,KAAX,CAAiBuD,qBAArB,EAA4C;AACxC,eAAKnD,KAAL,CAAWJ,KAAX,CAAiBuD,qBAAjB,CAAuC,KAAKnD,KAAL,CAAWJ,KAAX,CAAiBsD,QAAjB,CAA0BE,SAAjE,KAA+E4D,MAAM,CAACC,MAAP,CAAc,KAAKjH,KAAL,CAAWJ,KAAX,CAAiBuD,qBAAjB,CAAuC,KAAKnD,KAAL,CAAWJ,KAAX,CAAiBsD,QAAjB,CAA0BE,SAAjE,CAAd,EAA2F1B,GAA3F,CAA+FuC,IAAI,IAC9Kd,qBAAqB,CAACwD,IAAtB,CAA2B1C,IAAI,CAACgC,YAAhC,CAD2E,CAA/E;AAEH;;AACD,cAAMX,UAAU,GAAGhG,aAAa,CAAC,KAAKU,KAAL,CAAWJ,KAAX,CAAiBuD,qBAAlB,EAAyC,KAAKnD,KAAL,CAAWJ,KAAX,CAAiBsD,QAAjB,CAA0BE,SAAnE,CAAhC;AACA,aAAKjD,QAAL,CAAc;AACVgD,UAAAA,qBADU;AACamC,UAAAA,UADb;AACyBjF,UAAAA,IAAI,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiB2D,UADhD;AAEVnD,UAAAA,UAAU,EAAE1B,OAAO,CAAC,KAAKsB,KAAL,CAAWJ,KAAX,CAAiB2D,UAAlB,EAA8B,KAAK5D,KAAL,CAAWW,SAAzC;AAFT,SAAd;AAIH,OAXD,MAYK;AACD,YAAI;AAAEA,UAAAA;AAAF,YAAgB,KAAKX,KAAzB;;AACA,YAAI,KAAKK,KAAL,CAAWJ,KAAX,CAAiBU,SAAjB,KAA+Ba,SAAnC,EAA8C;AAC1Cb,UAAAA,SAAS,GAAG;AAAEwE,YAAAA,IAAI,EAAE,CAAR;AAAWC,YAAAA,IAAI,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBoF,QAAjB,GAA4BC,QAAQ,CAAC,KAAKjF,KAAL,CAAWJ,KAAX,CAAiBoF,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAvF,WAAZ;AACH;;AAED,aAAK7E,QAAL,CAAc;AACVE,UAAAA,IAAI,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiB2D,UADb;AAEVnD,UAAAA,UAAU,EAAE1B,OAAO,CAAC,KAAKsB,KAAL,CAAWJ,KAAX,CAAiB2D,UAAlB,EAA8BjD,SAA9B,CAFT;AAGVA,UAAAA;AAHU,SAAd;AAKH;AACJ;;AACD,QAAI,KAAKN,KAAL,CAAWJ,KAAX,CAAiBe,cAAjB,KAAoCoG,aAAa,CAACnH,KAAd,CAAoBe,cAA5D,EAA4E;AACxE,WAAKR,QAAL,CAAc;AAAEQ,QAAAA,cAAc,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe;AAAnC,OAAd;AACH;;AACD,QAAG,KAAKX,KAAL,CAAWJ,KAAX,CAAiB4F,UAAjB,KAAgCuB,aAAa,CAACnH,KAAd,CAAoB4F,UAApD,IAAkE,KAAKxF,KAAL,CAAWJ,KAAX,CAAiB6F,WAAjB,KAAiCsB,aAAa,CAACnH,KAAd,CAAoB6F,WAA1H,EAAuI;AAE/H,YAAOD,UAAU,GAAInG,mBAAmB,CAAC,KAAKW,KAAL,CAAWJ,KAAX,CAAiB4F,UAAjB,IAA8B,EAA/B,EAAmC,aAAnC,EACxC,aADwC,EACxBrE,SADwB,EACbA,SADa,EACFA,SADE,CAAxC;AAEJ,YAAO+F,aAAa,GAAI1B,UAAU,CAACQ,GAAX,CAAe,YAAf,CAAxB;AAEA,YAAOP,WAAW,GAAIpG,mBAAmB,CAAC,KAAKW,KAAL,CAAWJ,KAAX,CAAiB6F,WAAjB,IAA+B,EAAhC,EAAoC,cAApC,EACrC,cADqC,EACpBtE,SADoB,EACTA,SADS,EACEA,SADF,CAAzC;AAEA,YAAOgG,cAAc,GAAI1B,WAAW,CAACO,GAAZ,CAAgB,YAAhB,CAAzB;AAEA,WAAK7F,QAAL,CAAc;AAAEqF,QAAAA,UAAU,EAAE0B,aAAd;AAA6BzB,QAAAA,WAAW,EAAE0B;AAA1C,OAAd;AACH;AACJ;;AArTiC;;AA8dtC,eAAejJ,OAAO,CAACwB,eAAD,EAAkB;AACpCX,EAAAA,WADoC;AACvBC,EAAAA,UADuB;AACXC,EAAAA,WADW;AACEC,EAAAA,uBADF;AAEpCC,EAAAA;AAFoC,CAAlB,CAAP,CAGZf,UAAU,CAACyB,OAAD,CAHE,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Row, Col, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport AddKpiBand from './AddKpiBand';\r\nimport { callService, crudMaster, updateStore, validateEsignCredential, getKpiBandComboService } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport {constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { MediaLabel } from '../../components/add-client.styles';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass KpiBand extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.fieldList = [];\r\n\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            addScreen: false, data: [], masterStatus: \"\", error: \"\", operation: \"create\",\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            kpiBandData: [],\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            selectedRecord: {},\r\n            periodList:[],productList:[]\r\n        };\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                selectedId = null;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedId = null;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_PRODUCTNAME\", \"dataField\": \"sproductname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_KPIBANDNAME\", \"dataField\": \"skpibandname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_NUMBEROFDAYS\", \"dataField\": \"nnumberofdays\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_BEFOREWINDOWPERIOD\", \"dataField\": \"nbeforewindowperiod\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_AFTERWINDOWPERIOD\", \"dataField\": \"nafterwindowperiod\", \"width\": \"200px\" },\r\n            // { \"idsName\": \"IDS_BEFOREWINDOWPERIOD\", \"dataField\": \"nbeforewindowperiod\", \"width\": \"200px\" },\r\n            // { \"idsName\": \"IDS_BEFOREPERIODCODE\", \"dataField\": \"sbeforeperiodname\", \"width\": \"200px\" },\r\n            // { \"idsName\": \"IDS_AFTERWINDOWPERIOD\", \"dataField\": \"nafterwindowperiod\", \"width\": \"200px\" },\r\n            // { \"idsName\": \"IDS_AFTERPERIODCODE\", \"dataField\": \"safterperiodname\", \"width\": \"200px\" },\r\n\r\n        ]\r\n        //primaryKeyField = \"nkpibandcode\";\r\n\r\n        this.validationColumnList = [\r\n            { \"idsName\": \"IDS_PRODUCTNAME\", \"dataField\": \"nproductcode\", \"width\": \"200px\",\"mandatory\": true  , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n            { \"idsName\": \"IDS_KPIBANDNAME\", \"dataField\": \"skpibandname\", \"width\": \"200px\",\"mandatory\": true  , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            { \"idsName\": \"IDS_NUMBEROFDAYS\", \"dataField\": \"nnumberofdays\", \"width\": \"200px\",\"mandatory\": true  , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n             { \"idsName\": \"IDS_BEFOREWINDOWPERIOD\", \"dataField\": \"nbeforewindowperiod\", \"width\": \"200px\",\"mandatory\": true  , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n             { \"idsName\": \"IDS_BEFOREPERIODCODE\", \"dataField\": \"nbeforeperiodcode\", \"width\": \"200px\",\"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n             { \"idsName\": \"IDS_AFTERWINDOWPERIOD\", \"dataField\": \"nafterwindowperiod\", \"width\": \"200px\",\"mandatory\": true  , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n             { \"idsName\": \"IDS_AFTERPERIODCODE\", \"dataField\": \"nafterperiodcode\", \"width\": \"200px\",\"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n\r\n        ]\r\n\r\n        this.fieldList = [\"skpibandname\", \"nnumberofdays\", \"nbeforewindowperiod\", \"nbeforeperiodcode\", \"nafterwindowperiod\", \"nafterperiodcode\", \"nproductcode\"];\r\n\r\n        const addId = this.state.controlMap.has(\"AddKpiBand\") && this.state.controlMap.get(\"AddKpiBand\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditKpiBand\") && this.state.controlMap.get(\"EditKpiBand\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteKpiBand\") && this.state.controlMap.get(\"DeleteKpiBand\").ncontrolcode;\r\n\r\n        const kpiBandAddParam = {\r\n            screenName: \"KPI Band\", operation: \"create\", primaryKeyField: \"nkpibandcode\",\r\n            userInfo: this.props.Login.userInfo, ncontrolCode: addId\r\n        };\r\n\r\n        const kpiBandEditParam = {\r\n            screenName: \"KPI Band\", operation: \"update\", primaryKeyField: \"nkpibandcode\",\r\n            userInfo: this.props.Login.userInfo, ncontrolCode: editId\r\n        };\r\n\r\n        const kpiBandDeleteParam = { screenName: \"KpiBand\", methodUrl: \"KpiBand\", operation: \"delete\", ncontrolCode: deleteId };\r\n        const mandatoryFields = [];\r\n        this.validationColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n\r\n        return (<>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            {/* <PrimaryHeader className=\"d-flex justify-content-between mb-3\">\r\n                                <HeaderName className=\"header-primary-md\">\r\n                                    {this.props.Login.inputParam && this.props.Login.inputParam.displayName ?\r\n                                        <FormattedMessage id={this.props.Login.inputParam.displayName} /> : \"\"}\r\n                                </HeaderName>\r\n\r\n                                <Button className=\"btn btn-user btn-primary-blue\"\r\n                                    hidden={this.props.Login.inputParam && this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                    onClick={() => this.props.getKpiBandComboService(kpiBandAddParam)} role=\"button\">\r\n                                    <FontAwesomeIcon icon={faPlus} /> { }\r\n                                    <FormattedMessage id={\"IDS_ADD\"} defaultMessage='Add' />\r\n                                </Button>\r\n                            </PrimaryHeader> */}\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={\"nkpibandcode\"}\r\n                                    expandField=\"expanded\"\r\n                                    detailedFieldList={this.detailedFieldList}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.getKpiBandComboService} //fetchRecord}\r\n                                    editParam={kpiBandEditParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    deleteParam={kpiBandDeleteParam}\r\n                                    reloadData={this.reloadData}\r\n                                    addRecord={() => this.props.getKpiBandComboService(kpiBandAddParam)}\r\n                                    pageable={{ buttonCount: 4, pageSizes: true }}\r\n                                    // scrollable={\"auto\"}\r\n                                    scrollable={'scrollable'}\r\n                                    gridHeight = {\"600px\"}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    // isComponent={true}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                \r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddKpiBand\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onNumericInputOnChange={this.onNumericInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                productList={this.state.productList || []}//{this.props.Login.productList || []}\r\n                                periodList={this.state.periodList || []}//{this.props.Login.periodList || []}\r\n                                operation={this.props.Login.operation}\r\n                                inputParam={this.props.Login.inputParam}\r\n                            />}\r\n                    />\r\n                }\r\n            </>);\r\n    }\r\n\r\n    expandChange = (event) => {\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined ?\r\n                event.dataItem.aggregates : event.dataItem.expanded;\r\n        event.dataItem.expanded = !isExpanded;\r\n        this.setState({ ...this.props });\r\n    }\r\n    detailBand = (props) => {\r\n\r\n        const Dataitem = props.dataItem\r\n        const OptionalFieldList = [\r\n            { datafield: \"nbeforewindowperiod\", Column: \"Before Window Period\" },\r\n            { datafield: \"sbeforeperiodname\", Column: \"Before Period Code\" },\r\n            { datafield: \"nafterwindowperiod\", Column: \"After Window Period\" },\r\n            { datafield: \"safterperiodname\", Column: \"After Period Code\" },\r\n        ];\r\n        return (<Row>\r\n            {OptionalFieldList.map((fields) => {\r\n                return (\r\n                    <Col md='6'>\r\n                        <FormGroup>\r\n                            <FormLabel><FormattedMessage id={fields.Column} message={fields.Column} /></FormLabel>\r\n                            <MediaLabel className=\"readonly-text font-weight-normal\">{Dataitem[fields.datafield]}</MediaLabel>\r\n                        </FormGroup>\r\n                    </Col>\r\n                )\r\n            })\r\n            }\r\n        </Row>)\r\n    }\r\n    detailedFieldList = [\r\n        { dataField: \"nbeforewindowperiod\", idsName: \"IDS_BEFOREWINDOWPERIOD\" },\r\n        { dataField: \"sbeforeperiodname\", idsName: \"IDS_BEFOREPERIODCODE\" },\r\n        { dataField: \"nafterwindowperiod\", idsName: \"IDS_AFTERWINDOWPERIOD\" },\r\n        { dataField: \"safterperiodname\", idsName: \"IDS_AFTERPERIODCODE\" },\r\n        //{ \"idsName\": \"IDS_DISPLAYSTATUS\", \"dataField\": \"sdisplaystatus\", \"width\": \"20%\", \"isIdsField\": true, \"controlName\": \"ndefaultstatus\" }\r\n\r\n    ];\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData != null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;//.value;\r\n\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if(this.props.Login.periodList !== previousProps.Login.periodList || this.props.Login.productList !== previousProps.Login.productList ){\r\n\r\n                const  periodList  = constructOptionList(this.props.Login.periodList ||[], \"nperiodcode\",\r\n                \"speriodname\" , undefined, undefined, undefined);\r\n            const  periodListKPI  = periodList.get(\"OptionList\");\r\n\r\n            const  productList  = constructOptionList(this.props.Login.productList ||[], \"nproductcode\",\r\n                \"sproductname\" , undefined, undefined, undefined);\r\n            const  productListKPI  = productList.get(\"OptionList\");\r\n\r\n            this.setState({ periodList: periodListKPI, productList: productListKPI});\r\n        }\r\n    }\r\n\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n        }\r\n        else if (event.target.type === 'select-one') {\r\n\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n\r\n\r\n    }\r\n\r\n    onNumericInputOnChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (value < 0) { //|| value === 0.0) {\r\n            selectedRecord[name] = '';\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else {\r\n            selectedRecord[name] = value;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    deleteRecord = (deleteparam) => {\r\n        if (deleteparam.selectedRecord.expanded !== undefined) {\r\n            delete deleteparam.selectedRecord.expanded\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: deleteparam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            selectedId: deleteparam.selectedRecord.nkpibandcode,\r\n            inputData: {\r\n                //[this.props.Login.inputParam.methodUrl.toLowerCase()]: selectedRecord.dataItem,\r\n                [deleteparam.methodUrl.toLowerCase()]: deleteparam.selectedRecord,//.dataItem,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: deleteparam.operation\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteparam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, //screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    //operation\r\n                    screenName: deleteparam.screenName,\r\n                    operation: deleteparam.operation,\r\n                    selectedId: deleteparam.selectedRecord.nkpibandcode\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        let selectedId = null;\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n\r\n            this.fieldList.map(item => {\r\n                return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item]\r\n            })\r\n\r\n            inputData[\"kpiband\"][\"nproductcode\"] = this.state.selectedRecord[\"nproductcode\"] ? this.state.selectedRecord[\"nproductcode\"].value : -1;\r\n            inputData[\"kpiband\"][\"nbeforeperiodcode\"] = this.state.selectedRecord[\"nbeforeperiodcode\"] ? this.state.selectedRecord[\"nbeforeperiodcode\"].value : -1;\r\n            inputData[\"kpiband\"][\"nafterperiodcode\"] = this.state.selectedRecord[\"nafterperiodcode\"] ? this.state.selectedRecord[\"nafterperiodcode\"].value : -1;\r\n            dataState = this.state.dataState;\r\n            selectedId = this.props.Login.selectedId\r\n        }\r\n        else {\r\n            //add               \r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n\r\n            this.fieldList.map(item => {\r\n                return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item]\r\n            })\r\n\r\n            inputData[\"kpiband\"][\"nproductcode\"] = this.state.selectedRecord[\"nproductcode\"] ? this.state.selectedRecord[\"nproductcode\"].value : -1;\r\n            inputData[\"kpiband\"][\"nbeforeperiodcode\"] = this.state.selectedRecord[\"nbeforeperiodcode\"] ? this.state.selectedRecord[\"nbeforeperiodcode\"].value : -1;\r\n            inputData[\"kpiband\"][\"nafterperiodcode\"] = this.state.selectedRecord[\"nafterperiodcode\"] ? this.state.selectedRecord[\"nafterperiodcode\"].value : -1;\r\n        }\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            selectedId,\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation, saveType, formRef, dataState\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            // let selectedRecord = {};\r\n            // this.setState({ selectedRecord });\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            // let selectedRecord = {};\r\n            // this.setState({ selectedRecord });\r\n        }\r\n\r\n\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential,\r\n    getKpiBandComboService\r\n})(injectIntl(KpiBand));"]},"metadata":{},"sourceType":"module"}