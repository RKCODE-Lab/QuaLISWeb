{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\competencemanagement\\\\trainingcertificate\\\\TrainingandCertificate.jsx\";\nimport React from 'react';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTrashAlt, faThumbsUp, faUserLock, faClock } from '@fortawesome/free-solid-svg-icons'; //,faUserTimes, faTrash\n\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getTrainingCertificateDetail, getTrainingCertificateComboService, getTrainingParticipantsComboDataService, filterColumnData, reloadTrainingCertificate } from '../../../actions';\nimport { ReactComponent as Reject } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/image/reject.svg\";\nimport { ReadOnlyText, ContentPanel } from '../../../components/App.styles';\nimport { constructOptionList, getControlMap, showEsign, validateEmail, validatePhoneNumber, validateTwoDigitDate, convertDateValuetoString } from '../../../components/CommonScript'; //searchData, sortData,\n\nimport ListMaster from '../../../components/list-master/list-master.component';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport AddTrainingCertificate from './AddTrainingCertificate';\nimport Esign from '../../../pages/audittrail/Esign';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\nimport { ListWrapper } from '../../../components/client-group.styles';\nimport { transactionStatus } from '../../../components/Enumeration';\nimport DateFilter from '../../../components/DateFilter';\nimport { Affix } from 'rsuite';\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component'; // import ReactTooltip from 'react-tooltip';\n\nimport TrainingCertificateParticipantsTab from './TrainingCertificateParticipantsTab';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass TrainingCertificate extends React.Component {\n  constructor(props) {\n    super(props); // const dataState = {\n    //     skip: 0,\n    //     take: 10,\n    // };\n\n    this.getTrainingCertificateComboService = resheduleId => {\n      if (this.props.Login.masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.CANCELLED) {\n        this.props.getTrainingCertificateComboService(\"TrainingCertificate\", \"update\", \"ntrainingcode\", this.props.Login.masterData.SelectedTrainingCertificate.ntrainingcode, this.props.Login.masterData, this.props.Login.userInfo, resheduleId);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_TRAININGCANCELED\"\n        }));\n      }\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.reloadData(true);\n    };\n\n    this.reloadData = isFilterSubmit => {\n      this.searchRef.current.value = \"\"; // let obj = this.convertDatetoString(selectedRecord[\"fromdate\"] || (this.props.Login.masterData && this.props.Login.masterData.FromDate),\n      //     selectedRecord[\"todate\"] || (this.props.Login.masterData && this.props.Login.masterData.ToDate))\n\n      let fromDate = this.props.Login.masterData.FromDate;\n      let toDate = this.props.Login.masterData.ToDate;\n\n      if (isFilterSubmit) {\n        let selectedRecord = this.state.selectedRecord || {};\n\n        if (selectedRecord && selectedRecord[\"fromdate\"] !== undefined) {\n          fromDate = selectedRecord[\"fromdate\"];\n        }\n\n        if (selectedRecord && selectedRecord[\"todate\"] !== undefined) {\n          toDate = selectedRecord[\"todate\"];\n        }\n      } //let obj = this.convertDatetoString(fromDate, toDate); \n\n\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate: obj.fromDate,\n          toDate: obj.toDate,\n          currentDate: null //currentdate: isDateChange === true ? null : formatInputDate(new Date(), true)\n\n        },\n        classUrl: \"trainingcertificate\",\n        methodUrl: \"TrainingCertificate\",\n        displayName: \"IDS_TRAININGCERTIFICATE\",\n        userInfo: this.props.Login.userInfo\n      }; //this.props.callService(inputParam);\n\n      this.props.reloadTrainingCertificate(inputParam);\n    };\n\n    this.onConductlick = () => {\n      if (this.props.Login.masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.CANCELLED) {\n        const ncontrolCode = this.state.controlMap.has(\"ConductTrainingCertificate\") && this.state.controlMap.get(\"ConductTrainingCertificate\").ncontrolcode;\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = undefined;\n        inputData[\"trainingcertificate\"] = {\n          \"ntrainingcode\": this.props.Login.masterData.SelectedTrainingCertificate[\"ntrainingcode\"] ? this.props.Login.masterData.SelectedTrainingCertificate[\"ntrainingcode\"].Value : \"\"\n        };\n        inputData[\"trainingcertificate\"] = this.props.Login.masterData.SelectedTrainingCertificate;\n        postParam = {\n          inputListName: \"TrainingCertificate\",\n          selectedObject: \"SelectedTrainingCertificate\",\n          primaryKeyField: \"ntrainingcode\"\n        };\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n        let fromDate = obj.fromDate;\n        let toDate = obj.toDate;\n        inputData[\"fromDate\"] = fromDate;\n        inputData[\"toDate\"] = toDate;\n        const inputParam = {\n          inputData: {\n            \"userinfo\": this.props.Login.userInfo,\n            fromDate,\n            toDate\n          },\n          classUrl: 'trainingcertificate',\n          methodUrl: \"TrainingCertificate\",\n          inputData: inputData,\n          operation: \"conduct\",\n          postParam\n        };\n        let saveType;\n        const masterData = this.props.Login.masterData;\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              openModal: true,\n              operation: \"conduct\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_TRAININGCANCELED\"\n        }));\n      }\n    };\n\n    this.onCancelListClick = () => {\n      //if (this.props.Login.masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.DRAFT) {\n      const ncontrolCode = this.state.controlMap.has(\"CancelTrainingCertificate\") && this.state.controlMap.get(\"CancelTrainingCertificate\").ncontrolcode;\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo; //add               \n\n      let postParam = undefined;\n      inputData[\"trainingcertificate\"] = {\n        \"ntrainingcode\": this.props.Login.masterData.SelectedTrainingCertificate[\"ntrainingcode\"] ? this.props.Login.masterData.SelectedTrainingCertificate[\"ntrainingcode\"].Value : \"\"\n      };\n      inputData[\"trainingcertificate\"] = this.props.Login.masterData.SelectedTrainingCertificate;\n      postParam = {\n        inputListName: \"TrainingCertificate\",\n        selectedObject: \"SelectedTrainingCertificate\",\n        primaryKeyField: \"ntrainingcode\"\n      };\n      let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      let fromDate = obj.fromDate;\n      let toDate = obj.toDate;\n      inputData[\"fromDate\"] = fromDate;\n      inputData[\"toDate\"] = toDate;\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate,\n          toDate\n        },\n        classUrl: 'trainingcertificate',\n        methodUrl: \"TrainingCertificate\",\n        inputData: inputData,\n        operation: \"cancel\",\n        postParam\n      };\n      let saveType;\n      const masterData = this.props.Login.masterData;\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            openModal: true,\n            operation: \"cancel\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"conduct\" || this.props.Login.operation === \"blackList\" || this.props.Login.operation === \"cancel\" || this.props.Login.operation === \"invite\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      ;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"ncontrolcode\"] = this.props.Login.ncontrolCode;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      let fromDate = obj.fromDate;\n      let toDate = obj.toDate;\n      inputData[\"fromDate\"] = fromDate;\n      inputData[\"toDate\"] = toDate;\n      let postParam = undefined;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"TrainingCertificate\",\n          selectedObject: \"SelectedTrainingCertificate\",\n          primaryKeyField: \"ntrainingcode\"\n        };\n        inputData[\"trainingcertificate\"] = JSON.parse(JSON.stringify(this.props.Login.selectedRecord));\n        this.trainingcertificateFieldList.map(item => {\n          return inputData[\"trainingcertificate\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n        });\n      } else {\n        //add               \n        inputData[\"trainingcertificate\"] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        this.trainingcertificateFieldList.map(item => {\n          return inputData[\"trainingcertificate\"][item] = this.state.selectedRecord[item];\n        });\n        inputData[\"trainingcertificate\"][\"ntransactionstatus\"] = \"38\";\n      }\n\n      inputData[\"trainingcertificate\"][\"ntrainingcategorycode\"] = this.state.selectedRecord[\"ntrainingcategorycode\"] ? this.state.selectedRecord[\"ntrainingcategorycode\"].value : \"-1\";\n      inputData[\"trainingcertificate\"][\"ntechniquecode\"] = this.state.selectedRecord[\"ntechniquecode\"] ? this.state.selectedRecord[\"ntechniquecode\"].value : \"-1\";\n      inputData[\"trainingcertificate\"][\"ntztrainingdate\"] = this.state.selectedRecord[\"ntztrainingdate\"] ? this.state.selectedRecord[\"ntztrainingdate\"].value : \"-1\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate,\n          toDate\n        },\n        classUrl: \"trainingcertificate\",\n        //this.props.Login.inputParam.classUrl,\n        methodUrl: \"TrainingCertificate\",\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.state = {\n      isOpen: false,\n      trainingcertificateData: [],\n      TrainingParticipantsData: [],\n      trainingcategoryList: [],\n      techniqueList: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      operation: \"\",\n      screenName: undefined,\n      userLogged: true,\n      selectedTrainingCertificate: undefined,\n      trainingparticipants: [],\n      selectedTrainingParticipants: [],\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showAccordian: true,\n      TrainingParticipantscombo: [],\n      trainingparticipantsList: []\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.trainingcertificateFieldList = ['strainername', 'strainingtopic', 'strainingvenue', 'dtrainingdatetime', 'ntransactionstatus', 'ntechniquecode', 'ntrainingcategorycode', 'stztrainingdate', 'scomments']; //'nmahcode',\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    //console.log('screen name:',this.props.Login.screenName,'operation ;',this.props.Login.operation)\n    //console.log('selected r :', this.props.Login.inputParam)\n    let userStatusCSS = \"outline-secondary\";\n\n    if (this.props.Login.masterData.SelectedTrainingCertificate ? this.props.Login.masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.COMPLETED || this.props.Login.masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.CONDUCTED : false) {\n      userStatusCSS = \"outline-success\";\n    } else if (this.props.Login.masterData.SelectedTrainingCertificate && this.props.Login.masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.CANCELLED) {\n      userStatusCSS = \"outline-danger\";\n    }\n\n    const addId = this.state.controlMap.has(\"AddTrainingCertificate\") && this.state.controlMap.get(\"AddTrainingCertificate\").ncontrolcode;\n    const resheduleId = this.state.controlMap.has(\"ResheduleTrainingCertificate\") && this.state.controlMap.get(\"ResheduleTrainingCertificate\").ncontrolcode;\n    const conductId = this.state.controlMap.has(\"ConductTrainingCertificate\") && this.state.controlMap.get(\"ConductTrainingCertificate\").ncontrolcode;\n    const cancelId = this.state.controlMap.has(\"CancelTrainingCertificate\") && this.state.controlMap.get(\"CancelTrainingCertificate\").ncontrolcode;\n    let obj = convertDateValuetoString(this.state.selectedRecord[\"fromdate\"] || this.props.Login.masterData && this.props.Login.masterData.FromDate, this.state.selectedRecord[\"todate\"] || this.props.Login.masterData && this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n    let fromDate = obj.fromDate;\n    let toDate = obj.toDate;\n    const filterParam = {\n      inputListName: \"TrainingCertificate\",\n      selectedObject: \"SelectedTrainingCertificate\",\n      primaryKeyField: \"ntrainingcode\",\n      fetchUrl: \"trainingcertificate/getTrainingCertificate\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        fromDate,\n        toDate\n      },\n      masterData: this.props.Login.masterData,\n      unchangeList: [\"FromDate\", \"ToDate\"],\n      searchFieldList: this.trainingcertificateFieldList\n    };\n    this.validationColumnList = [{\n      \"idsName\": \"IDS_TRAININGCATERGORY\",\n      \"dataField\": \"ntrainingcategorycode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_TECHNIQUE\",\n      \"dataField\": \"ntechniquecode\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_TRAININGTPOIC\",\n      \"dataField\": \"strainingtopic\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_TRAININGDATE\",\n      \"dataField\": \"dtrainingdatetime\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_TIMEZONE\",\n      \"dataField\": \"stztrainingdate\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_TRAINERNAME\",\n      \"dataField\": \"strainername\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_TRAININGVENUE\",\n      \"dataField\": \"strainingvenue\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    const mandatoryFields = [];\n    this.validationColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    let breadCrumbDataDate = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate, this.props.Login.masterData && this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n    const breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": breadCrumbDataDate.breadCrumbFrom\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": breadCrumbDataDate.breadCrumbto\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: \"TrainingCertificate\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.TrainingCertificate,\n      getMasterDetail: trainingcertificate => this.props.getTrainingCertificateDetail(trainingcertificate, fromDate, toDate, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.SelectedTrainingCertificate,\n      primaryKeyField: \"ntrainingcode\",\n      mainField: \"strainingtopic\",\n      firstField: \"strainingcategoryname\",\n      secondField: \"sdisplaystatus\",\n      isIDSField: \"Yes\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: true,\n      openModal: () => this.props.getTrainingCertificateComboService(\"TrainingCertificate\", \"create\", \"ntrainingcode\", null, this.props.Login.masterData, this.props.Login.userInfo, addId),\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      filterComponent: [{\n        \"IDS_FILTER\": /*#__PURE__*/React.createElement(DateFilter, {\n          selectedRecord: this.state.selectedRecord || {},\n          handleDateChange: this.handleDateChange,\n          fromDate: fromDate,\n          toDate: toDate,\n          userInfo: this.props.Login.userInfo,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.TrainingCertificate && this.props.Login.masterData.TrainingCertificate.length > 0 && this.props.Login.masterData.SelectedTrainingCertificate ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.SelectedTrainingCertificate.strainingtopic)), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      className: \"text-muted font-weight-normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 10,\n      className: \"d-flex no-padding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${userStatusCSS} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.SelectedTrainingCertificate && this.props.Login.masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.ACTIVE ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fas fa-check \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 235\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.masterData.SelectedTrainingCertificate.sdisplaystatus || \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 69\n      }\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category float-right icon-group-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(resheduleId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RESCHEDULE\"\n      }) // data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.getTrainingCertificateComboService(resheduleId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faClock,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_RESCHEDULE\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(conductId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_CONDUCT\"\n      }) // data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.onConductlick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_CONDUCT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(cancelId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_TRAININGSCHEDULECANCEL\"\n      }) //   data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.onCancelListClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Reject, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 69\n      }\n    }))))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_TRAININGCATEGORY\",\n      message: \"Training Category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedTrainingCertificate.strainingcategoryname))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_TECHNIQUE\",\n      message: \"Technique\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedTrainingCertificate.stechniquename))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_TRAININGTOPIC\",\n      message: \"Training Topic\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedTrainingCertificate.strainingtopic))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_TRAININGDATE\",\n      message: \"Training Date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedTrainingCertificate.strainingdatetime))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_TRAININGNAME\",\n      message: \"Training Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 61\n      }\n    }, \" \", this.props.Login.masterData.SelectedTrainingCertificate.strainername))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_TRAININGVENUE\",\n      message: \"Venue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 61\n      }\n    }, \" \", this.props.Login.masterData.SelectedTrainingCertificate.strainingvenue))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_TRAININGCOMMENTS\",\n      message: \"Comments\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedTrainingCertificate.scomments)))), /*#__PURE__*/React.createElement(TrainingCertificateParticipantsTab, {\n      formatMessage: this.props.intl.formatMessage,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam || [],\n      screenName: this.props.Login.screenName,\n      userInfo: this.props.Login.userInfo,\n      masterData: this.props.Login.masterData,\n      crudMaster: this.props.crudMaster,\n      errorCode: this.props.Login.errorCode,\n      masterStatus: this.props.Login.masterStatus,\n      openChildModal: this.props.Login.openChildModal,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.props.Login.selectedRecord,\n      getTrainingParticipantsComboDataService: this.props.getTrainingParticipantsComboDataService,\n      ncontrolCode: this.props.Login.ncontrolCode,\n      userRoleControlRights: this.state.userRoleControlRights,\n      esignRights: this.props.Login.userRoleControlRights,\n      screenData: this.props.Login.screenData,\n      validateEsignCredential: this.props.validateEsignCredential,\n      loadEsign: this.props.Login.loadEsign,\n      controlMap: this.state.controlMap,\n      showAccordian: this.state.showAccordian,\n      dataState: this.props.Login.dataState,\n      selectedId: this.props.Login.selectedId,\n      settings: this.props.Login.settings,\n      nFlag: this.props.Login.nFlag,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 49\n      }\n    }))) : \"\"))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam || [],\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddTrainingCertificate, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        formatMessage: this.props.intl.formatMessage,\n        trainingcategoryList: this.props.Login.trainingcategoryList || [],\n        techniqueList: this.props.Login.techniqueList || [],\n        timeZoneList: this.props.Login.timeZoneList || [],\n        currentTime: this.props.Login.currentTime || [],\n        selectedTrainingCertificate: this.props.Login.masterData.SelectedTrainingCertificate || {},\n        operation: this.props.Login.operation,\n        userLogged: this.props.Login.userLogged,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\n      let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      breadCrumbData.push({\n        \"label\": \"IDS_FROM\",\n        \"value\": obj.breadCrumbFrom\n      }, {\n        \"label\": \"IDS_TO\",\n        \"value\": obj.breadCrumbto\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  } // reloadData = () => {\n  //     const startDate = this.state.selectedRecord[\"fromdate\"] || (this.props.Login.inputParam && new Date(this.props.Login.inputParam.inputData.fromDate));\n  //     const endDate = this.state.selectedRecord[\"todate\"] || (this.props.Login.inputParam && new Date(this.props.Login.inputParam.inputData.toDate));\n  //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth()+1)); \n  //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth()+1));\n  //     const prevDay = validateTwoDigitDate(String(startDate.getDate())); \n  //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\n  //     const fromDate = startDate.getFullYear()+'-'+prevMonth+'-'+prevDay +\" 00:00:00\";\n  //     const toDate = endDate.getFullYear()+'-'+currentMonth+'-'+currentDay + \" 23:59:00\" ;                    \n  //     const inputParam = {\n  //         inputData : {\"userinfo\":this.props.Login.userInfo,\n  //                         fromDate, toDate,\n  //                     },                        \n  //                     classUrl: this.props.Login.inputParam.classUrl,\n  //                     methodUrl: this.props.Login.inputParam.methodUrl,\n  //                     displayName:this.props.Login.inputParam.displayName,\n  //                     userInfo: this.props.Login.userInfo\n  //                 };     \n  //     this.props.callService(inputParam);\n  //     // this.searchRef.current.value = \"\";\n  //     // const inputParam = {\n  //     //     inputData: { \"userinfo\": this.props.Login.userInfo },\n  //     //     classUrl: \"trainingcertificate\",\n  //     //     methodUrl: \"TrainingCertificate\",\n  //     //     displayName: \"IDS_TRAININGcertificate\",\n  //     //     userInfo: this.props.Login.userInfo\n  //     // };\n  //     // this.props.callService(inputParam);\n  // }\n\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  updateStore,\n  getTrainingCertificateDetail,\n  getTrainingCertificateComboService,\n  getTrainingParticipantsComboDataService,\n  filterColumnData,\n  reloadTrainingCertificate\n})(injectIntl(TrainingCertificate));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/competencemanagement/trainingcertificate/TrainingandCertificate.jsx"],"names":["React","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faPencilAlt","faTrashAlt","faThumbsUp","faUserLock","faClock","connect","injectIntl","FormattedMessage","toast","callService","crudMaster","validateEsignCredential","updateStore","getTrainingCertificateDetail","getTrainingCertificateComboService","getTrainingParticipantsComboDataService","filterColumnData","reloadTrainingCertificate","ReadOnlyText","ContentPanel","constructOptionList","getControlMap","showEsign","validateEmail","validatePhoneNumber","validateTwoDigitDate","convertDateValuetoString","ListMaster","SlideOutModal","AddTrainingCertificate","Esign","DEFAULT_RETURN","BreadcrumbComponent","ListWrapper","transactionStatus","DateFilter","Affix","ConfirmMessage","TrainingCertificateParticipantsTab","mapStateToProps","state","Login","TrainingCertificate","Component","constructor","props","resheduleId","masterData","SelectedTrainingCertificate","ntransactionstatus","CANCELLED","ntrainingcode","userInfo","warn","intl","formatMessage","id","openFilter","showFilter","updateInfo","typeName","data","closeFilter","onFilterSubmit","reloadData","isFilterSubmit","searchRef","current","value","fromDate","FromDate","toDate","ToDate","selectedRecord","undefined","obj","inputParam","inputData","currentDate","classUrl","methodUrl","displayName","onConductlick","ncontrolCode","controlMap","has","get","ncontrolcode","postParam","Value","inputListName","selectedObject","primaryKeyField","operation","saveType","esignNeeded","userRoleControlRights","nformcode","loadEsign","screenData","openModal","onCancelListClick","validateEsign","sreason","password","closeModal","selectedId","onComboChange","comboData","fieldName","setState","onInputOnChange","event","target","type","name","checked","YES","NO","handleDateChange","dateName","dateValue","onSaveClick","formRef","JSON","parse","stringify","trainingcertificateFieldList","map","item","nmastersitecode","onTabChange","tabProps","screenName","isOpen","trainingcertificateData","TrainingParticipantsData","trainingcategoryList","techniqueList","masterStatus","error","userLogged","selectedTrainingCertificate","trainingparticipants","selectedTrainingParticipants","Map","showAccordian","TrainingParticipantscombo","trainingparticipantsList","createRef","confirmMessage","getDerivedStateFromProps","render","userStatusCSS","COMPLETED","CONDUCTED","addId","conductId","cancelId","filterParam","fetchUrl","fecthInputObject","userinfo","unchangeList","searchFieldList","validationColumnList","mandatoryFields","forEach","mandatory","push","breadCrumbDataDate","breadCrumbData","breadCrumbFrom","breadCrumbto","length","searchedData","trainingcertificate","strainingtopic","ACTIVE","sdisplaystatus","indexOf","strainingcategoryname","stechniquename","strainingdatetime","strainername","strainingvenue","scomments","errorCode","openChildModal","dataState","settings","nFlag","timeZoneList","currentTime","componentDidUpdate","previousProps","Object","values","generateBreadCrumData","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrashAlt, faThumbsUp, faUserLock, faClock } from '@fortawesome/free-solid-svg-icons';//,faUserTimes, faTrash\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getTrainingCertificateDetail,\r\n    getTrainingCertificateComboService, getTrainingParticipantsComboDataService, filterColumnData, reloadTrainingCertificate,\r\n} from '../../../actions';\r\nimport { ReactComponent as Reject } from '../../../assets/image/reject.svg'\r\nimport { ReadOnlyText, ContentPanel } from '../../../components/App.styles';\r\nimport { constructOptionList, getControlMap, showEsign, validateEmail, validatePhoneNumber, validateTwoDigitDate, convertDateValuetoString } from '../../../components/CommonScript';//searchData, sortData,\r\nimport ListMaster from '../../../components/list-master/list-master.component';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport AddTrainingCertificate from './AddTrainingCertificate'\r\nimport Esign from '../../../pages/audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\r\nimport { ListWrapper } from '../../../components/client-group.styles';\r\nimport { transactionStatus } from '../../../components/Enumeration';\r\nimport DateFilter from '../../../components/DateFilter';\r\nimport { Affix } from 'rsuite';\r\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport TrainingCertificateParticipantsTab from './TrainingCertificateParticipantsTab';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass TrainingCertificate extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // const dataState = {\r\n        //     skip: 0,\r\n        //     take: 10,\r\n        // };\r\n\r\n        this.state = {\r\n            isOpen: false,\r\n            trainingcertificateData: [], TrainingParticipantsData: [],\r\n            trainingcategoryList: [], techniqueList: [],\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            operation: \"\",\r\n\r\n            screenName: undefined,\r\n            userLogged: true,\r\n            selectedTrainingCertificate: undefined,\r\n            trainingparticipants: [], selectedTrainingParticipants: [],\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            TrainingParticipantscombo: [], trainingparticipantsList: []\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.trainingcertificateFieldList = ['strainername', 'strainingtopic', 'strainingvenue',\r\n            'dtrainingdatetime', 'ntransactionstatus', 'ntechniquecode', 'ntrainingcategorycode', 'stztrainingdate', 'scomments'];//'nmahcode',\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n                        //console.log('screen name:',this.props.Login.screenName,'operation ;',this.props.Login.operation)\r\n                        //console.log('selected r :', this.props.Login.inputParam)\r\n        let userStatusCSS = \"outline-secondary\";\r\n        if (this.props.Login.masterData.SelectedTrainingCertificate ? this.props.Login.masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.COMPLETED\r\n            || this.props.Login.masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.CONDUCTED : false) {\r\n            userStatusCSS = \"outline-success\";\r\n        }\r\n        else if (this.props.Login.masterData.SelectedTrainingCertificate && this.props.Login.masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.CANCELLED) {\r\n            userStatusCSS = \"outline-danger\";\r\n        }\r\n\r\n        const addId = this.state.controlMap.has(\"AddTrainingCertificate\") && this.state.controlMap.get(\"AddTrainingCertificate\").ncontrolcode;\r\n        const resheduleId = this.state.controlMap.has(\"ResheduleTrainingCertificate\") && this.state.controlMap.get(\"ResheduleTrainingCertificate\").ncontrolcode;\r\n        const conductId = this.state.controlMap.has(\"ConductTrainingCertificate\") && this.state.controlMap.get(\"ConductTrainingCertificate\").ncontrolcode\r\n        const cancelId = this.state.controlMap.has(\"CancelTrainingCertificate\") && this.state.controlMap.get(\"CancelTrainingCertificate\").ncontrolcode\r\n\r\n        let obj = convertDateValuetoString(this.state.selectedRecord[\"fromdate\"] || (this.props.Login.masterData && this.props.Login.masterData.FromDate),\r\n            this.state.selectedRecord[\"todate\"] || (this.props.Login.masterData && this.props.Login.masterData.ToDate),\r\n            this.props.Login.userInfo)\r\n\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n        const filterParam = {\r\n            inputListName: \"TrainingCertificate\",\r\n            selectedObject: \"SelectedTrainingCertificate\",\r\n            primaryKeyField: \"ntrainingcode\",\r\n            fetchUrl: \"trainingcertificate/getTrainingCertificate\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo, fromDate, toDate },\r\n            masterData: this.props.Login.masterData,\r\n            unchangeList: [\"FromDate\", \"ToDate\"],\r\n            searchFieldList: this.trainingcertificateFieldList\r\n\r\n\r\n        };\r\n        this.validationColumnList = [\r\n            { \"idsName\": \"IDS_TRAININGCATERGORY\", \"dataField\": \"ntrainingcategorycode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_TECHNIQUE\", \"dataField\": \"ntechniquecode\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_TRAININGTPOIC\", \"dataField\": \"strainingtopic\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_TRAININGDATE\", \"dataField\": \"dtrainingdatetime\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"stztrainingdate\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_TRAINERNAME\", \"dataField\": \"strainername\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_TRAININGVENUE\", \"dataField\": \"strainingvenue\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n\r\n        ]\r\n        const mandatoryFields = [];\r\n        this.validationColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n        let breadCrumbDataDate = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate,\r\n            this.props.Login.masterData && this.props.Login.masterData.ToDate,\r\n            this.props.Login.userInfo)\r\n\r\n        const breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": breadCrumbDataDate.breadCrumbFrom\r\n            },\r\n            {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": breadCrumbDataDate.breadCrumbto\r\n            }\r\n        ];\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    {/* Start of get display*/}\r\n                    {/* <div className=\"client-listing-wrap mtop-4\"> */}\r\n                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n                            <ListMaster\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={\"TrainingCertificate\"}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.TrainingCertificate}\r\n                                getMasterDetail={(trainingcertificate) => this.props.getTrainingCertificateDetail(trainingcertificate, fromDate, toDate, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.SelectedTrainingCertificate}\r\n                                primaryKeyField=\"ntrainingcode\"\r\n                                mainField=\"strainingtopic\"\r\n                                firstField=\"strainingcategoryname\"\r\n                                secondField=\"sdisplaystatus\"\r\n                                isIDSField=\"Yes\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={true}\r\n                                openModal={() => this.props.getTrainingCertificateComboService(\"TrainingCertificate\", \"create\", \"ntrainingcode\", null, this.props.Login.masterData, this.props.Login.userInfo, addId)}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n\r\n\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_FILTER\":\r\n                                            <DateFilter\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                handleDateChange={this.handleDateChange}\r\n                                                fromDate={fromDate}\r\n                                                toDate={toDate}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n\r\n                        {/* <Row>\r\n                        <Col md={3}>\r\n                                <DateTimePicker\r\n                                        name={\"fromdate\"} \r\n                                        label={ this.props.intl.formatMessage({ id:\"IDS_FROM\"})}                     \r\n                                        className='form-control'\r\n                                        placeholderText=\"Select date..\"\r\n                                        selected={this.state.selectedRecord[\"fromdate\"] || (this.props.Login.inputParam && new Date(this.props.Login.inputParam.inputData.fromDate))}\r\n                                        dateFormat={\"dd/MM/yyyy\"}\r\n                                        isClearable={false}\r\n                                        onChange={date => this.handleDateChange(\"fromdate\", date)}\r\n                                        value={this.state.selectedRecord[\"fromdate\"] || (this.props.Login.inputParam && new Date(this.props.Login.inputParam.inputData.fromDate))}\r\n                                                                        \r\n                                />\r\n                        </Col>\r\n                        <Col md={3}>\r\n                                <DateTimePicker\r\n                                        name={\"todate\"} \r\n                                        label={ this.props.intl.formatMessage({ id:\"IDS_TO\"})}                     \r\n                                        className='form-control'\r\n                                        placeholderText=\"Select date..\"\r\n                                        selected={this.state.selectedRecord[\"todate\"] || (this.props.Login.inputParam && new Date(this.props.Login.inputParam.inputData.toDate))}\r\n                                        dateFormat={\"dd/MM/yyyy\"}\r\n                                        isClearable={false}                                        \r\n                                        onChange={date => this.handleDateChange(\"todate\", date)}\r\n                                        value={this.state.selectedRecord[\"todate\"] || (this.props.Login.inputParam && new Date(this.props.Login.inputParam.inputData.toDate))}\r\n                                                                        \r\n                                />\r\n                        </Col>\r\n                        <Col></Col>\r\n                   </Row> */}\r\n\r\n                        <Col md={8}>\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Card className=\"border-0\">\r\n                                    {this.props.Login.masterData.TrainingCertificate && this.props.Login.masterData.TrainingCertificate.length > 0 && this.props.Login.masterData.SelectedTrainingCertificate ?\r\n                                        <>\r\n                                            <Card.Header>\r\n                                                <Card.Title>\r\n                                                    <h1 className=\"product-title-main\">{this.props.Login.masterData.SelectedTrainingCertificate.strainingtopic}</h1>\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle className=\"text-muted font-weight-normal\">\r\n                                                    <Row>\r\n                                                        <Col md={10} className=\"d-flex no-padding\">\r\n                                                            <h2 className=\"product-title-sub flex-grow-1\">\r\n\r\n                                                                <span className={`btn btn-outlined ${userStatusCSS} btn-sm ml-3`}>\r\n                                                                    {this.props.Login.masterData.SelectedTrainingCertificate && this.props.Login.masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.ACTIVE ? <i class=\"fas fa-check \"></i> : \"\"}\r\n                                                                    <FormattedMessage id={this.props.Login.masterData.SelectedTrainingCertificate.sdisplaystatus || \"\"} />\r\n                                                                </span>\r\n\r\n                                                            </h2>\r\n                                                        </Col>\r\n                                                        <Col md={2}>\r\n                                                            <div className=\"d-flex product-category float-right icon-group-wrap\">\r\n\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(resheduleId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_RESCHEDULE\" })}\r\n                                                                   // data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={() => this.getTrainingCertificateComboService(resheduleId)}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faClock} title={this.props.intl.formatMessage({ id: \"IDS_RESCHEDULE\" })} />\r\n                                                                </Nav.Link>\r\n\r\n\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(conductId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_CONDUCT\" })}\r\n                                                                   // data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={() => this.onConductlick()}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faThumbsUp} title={this.props.intl.formatMessage({ id: \"IDS_CONDUCT\" })} />\r\n                                                                </Nav.Link>\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(cancelId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_TRAININGSCHEDULECANCEL\" })}\r\n                                                                 //   data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={() => this.onCancelListClick()}\r\n                                                                >\r\n                                                                    <Reject className=\"custom_icons\" width=\"20\" height=\"20\" />\r\n                                                                    {/* <FontAwesomeIcon icon={faUserLock} title={this.props.intl.formatMessage({ id: \"IDS_TRAININGSCHEDULECANCEL\" })} /> */}\r\n                                                                </Nav.Link>\r\n                                                            </div>\r\n\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                {/* <Card.Text> */}\r\n                                                <Row>\r\n                                                <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_TRAININGCATEGORY\" message=\"Training Category\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedTrainingCertificate.strainingcategoryname}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_TECHNIQUE\" message=\"Technique\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedTrainingCertificate.stechniquename}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_TRAININGTOPIC\" message=\"Training Topic\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedTrainingCertificate.strainingtopic}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_TRAININGDATE\" message=\"Training Date\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedTrainingCertificate.strainingdatetime}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_TRAININGNAME\" message=\"Training Name\" /></FormLabel>\r\n                                                            <ReadOnlyText> {this.props.Login.masterData.SelectedTrainingCertificate.strainername}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_TRAININGVENUE\" message=\"Venue\" /></FormLabel>\r\n                                                            <ReadOnlyText> {this.props.Login.masterData.SelectedTrainingCertificate.strainingvenue}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    {/* <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_TRAININTIMEZONE\" message=\"Time Zone\" /></FormLabel>\r\n                                                            <ReadOnlyText> {this.props.Login.masterData.SelectedTrainingCertificate.ntztrainingdate}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col> */}\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_TRAININGCOMMENTS\" message=\"Comments\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedTrainingCertificate.scomments}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n\r\n                                                </Row>\r\n                                                <TrainingCertificateParticipantsTab formatMessage={this.props.intl.formatMessage}\r\n                                                    operation={this.props.Login.operation}\r\n                                                    inputParam={this.props.Login.inputParam|| []}\r\n                                                    screenName={this.props.Login.screenName}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    masterData={this.props.Login.masterData}\r\n                                                    crudMaster={this.props.crudMaster}\r\n                                                    errorCode={this.props.Login.errorCode}\r\n                                                    masterStatus={this.props.Login.masterStatus}\r\n                                                    openChildModal={this.props.Login.openChildModal}\r\n                                                    updateStore={this.props.updateStore}\r\n                                                    selectedRecord={this.props.Login.selectedRecord}\r\n                                                    getTrainingParticipantsComboDataService={this.props.getTrainingParticipantsComboDataService}\r\n                                                    ncontrolCode={this.props.Login.ncontrolCode}\r\n                                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                                    esignRights={this.props.Login.userRoleControlRights}\r\n                                                    screenData={this.props.Login.screenData}\r\n                                                    validateEsignCredential={this.props.validateEsignCredential}\r\n                                                    loadEsign={this.props.Login.loadEsign}\r\n                                                    controlMap={this.state.controlMap}\r\n                                                    showAccordian={this.state.showAccordian}\r\n                                                    dataState={this.props.Login.dataState}\r\n                                                    selectedId={this.props.Login.selectedId}\r\n                                                    settings={this.props.Login.settings}\r\n                                                    nFlag={this.props.Login.nFlag}\r\n\r\n                                                />\r\n                                            </Card.Body>\r\n                                        </>\r\n                                        : \"\"\r\n                                    }\r\n                                </Card>\r\n                            </ContentPanel>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n\r\n\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam || []}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddTrainingCertificate\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                handleDateChange={this.handleDateChange}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                trainingcategoryList={this.props.Login.trainingcategoryList || []}\r\n                                techniqueList={this.props.Login.techniqueList || []}\r\n                                timeZoneList={this.props.Login.timeZoneList || []}\r\n                                currentTime={this.props.Login.currentTime || []}\r\n                                selectedTrainingCertificate={this.props.Login.masterData.SelectedTrainingCertificate || {}}\r\n                                operation={this.props.Login.operation}\r\n                                userLogged={this.props.Login.userLogged}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                userInfo={this.props.Login.userInfo}\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n                {/* End of Modal Sideout for User Creation */}\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ userRoleControlRights, controlMap });\r\n        }\r\n\r\n    }\r\n\r\n    getTrainingCertificateComboService = (resheduleId) => {\r\n\r\n        if (this.props.Login.masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.CANCELLED) {\r\n\r\n            this.props.getTrainingCertificateComboService(\"TrainingCertificate\", \"update\", \"ntrainingcode\", this.props.Login.masterData.SelectedTrainingCertificate.ntrainingcode,\r\n                this.props.Login.masterData, this.props.Login.userInfo, resheduleId)\r\n\r\n        }\r\n        else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id:\"IDS_TRAININGCANCELED\"}));\r\n        }\r\n    }\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n\r\n        if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\r\n\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate,\r\n                this.props.Login.masterData.ToDate,\r\n                this.props.Login.userInfo);\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_FROM\",\r\n                    \"value\": obj.breadCrumbFrom\r\n                },\r\n                {\r\n                    \"label\": \"IDS_TO\",\r\n                    \"value\": obj.breadCrumbto\r\n                },\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onFilterSubmit = () => {\r\n        this.reloadData(true);\r\n    }\r\n\r\n    reloadData = (isFilterSubmit) => {\r\n\r\n        this.searchRef.current.value = \"\";\r\n        // let obj = this.convertDatetoString(selectedRecord[\"fromdate\"] || (this.props.Login.masterData && this.props.Login.masterData.FromDate),\r\n        //     selectedRecord[\"todate\"] || (this.props.Login.masterData && this.props.Login.masterData.ToDate))\r\n\r\n        let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;\r\n        if (isFilterSubmit) {\r\n            let selectedRecord = this.state.selectedRecord || {};\r\n            if (selectedRecord && selectedRecord[\"fromdate\"] !== undefined) {\r\n                fromDate = selectedRecord[\"fromdate\"];\r\n            }\r\n            if (selectedRecord && selectedRecord[\"todate\"] !== undefined) {\r\n                toDate = selectedRecord[\"todate\"];\r\n            }\r\n        }\r\n        //let obj = this.convertDatetoString(fromDate, toDate); \r\n        let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                fromDate: obj.fromDate,\r\n                toDate: obj.toDate,\r\n                currentDate: null\r\n                //currentdate: isDateChange === true ? null : formatInputDate(new Date(), true)\r\n            },\r\n            classUrl: \"trainingcertificate\",\r\n            methodUrl: \"TrainingCertificate\",\r\n            displayName: \"IDS_TRAININGCERTIFICATE\",\r\n\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        //this.props.callService(inputParam);\r\n        this.props.reloadTrainingCertificate(inputParam);\r\n    }\r\n\r\n    onConductlick = () => {\r\n        if (this.props.Login.masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.CANCELLED) {\r\n\r\n        const ncontrolCode = this.state.controlMap.has(\"ConductTrainingCertificate\") && this.state.controlMap.get(\"ConductTrainingCertificate\").ncontrolcode\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        let postParam = undefined;\r\n        inputData[\"trainingcertificate\"] = { \"ntrainingcode\": this.props.Login.masterData.SelectedTrainingCertificate[\"ntrainingcode\"] ? this.props.Login.masterData.SelectedTrainingCertificate[\"ntrainingcode\"].Value : \"\" };\r\n        inputData[\"trainingcertificate\"] = this.props.Login.masterData.SelectedTrainingCertificate;\r\n        postParam = { inputListName: \"TrainingCertificate\", selectedObject: \"SelectedTrainingCertificate\", primaryKeyField: \"ntrainingcode\" };\r\n\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n        inputData[\"fromDate\"] = fromDate;\r\n        inputData[\"toDate\"] = toDate;\r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                fromDate, toDate,\r\n            },\r\n            classUrl: 'trainingcertificate',\r\n            methodUrl: \"TrainingCertificate\",\r\n            inputData: inputData,\r\n            operation: \"conduct\", postParam\r\n        }\r\n        let saveType;\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"conduct\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n    else {\r\n\r\n        toast.warn(this.props.intl.formatMessage({ id:\"IDS_TRAININGCANCELED\"}));\r\n    }\r\n    }\r\n\r\n    onCancelListClick = () => {\r\n        //if (this.props.Login.masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.DRAFT) {\r\n        const ncontrolCode = this.state.controlMap.has(\"CancelTrainingCertificate\") && this.state.controlMap.get(\"CancelTrainingCertificate\").ncontrolcode\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        //add               \r\n        let postParam = undefined;\r\n        inputData[\"trainingcertificate\"] = { \"ntrainingcode\": this.props.Login.masterData.SelectedTrainingCertificate[\"ntrainingcode\"] ? this.props.Login.masterData.SelectedTrainingCertificate[\"ntrainingcode\"].Value : \"\" };\r\n        inputData[\"trainingcertificate\"] = this.props.Login.masterData.SelectedTrainingCertificate;\r\n\r\n        postParam = { inputListName: \"TrainingCertificate\", selectedObject: \"SelectedTrainingCertificate\", primaryKeyField: \"ntrainingcode\" };\r\n\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n        inputData[\"fromDate\"] = fromDate;\r\n        inputData[\"toDate\"] = toDate;\r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                fromDate, toDate,\r\n            },\r\n            classUrl: 'trainingcertificate',\r\n            methodUrl: \"TrainingCertificate\",\r\n            inputData: inputData,\r\n            operation: \"cancel\", postParam\r\n        }\r\n        let saveType;\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"cancel\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"conduct\"\r\n                || this.props.Login.operation === \"blackList\" || this.props.Login.operation === \"cancel\"\r\n                  || this.props.Login.operation === \"invite\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;;\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n\r\n        let inputData = [];\r\n        inputData[\"ncontrolcode\"] = this.props.Login.ncontrolCode;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n        inputData[\"fromDate\"] = fromDate;\r\n        inputData[\"toDate\"] = toDate;\r\n\r\n        let postParam = undefined;\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"TrainingCertificate\", selectedObject: \"SelectedTrainingCertificate\", primaryKeyField: \"ntrainingcode\" };\r\n            inputData[\"trainingcertificate\"] = JSON.parse(JSON.stringify(this.props.Login.selectedRecord));\r\n\r\n            this.trainingcertificateFieldList.map(item => {\r\n                return inputData[\"trainingcertificate\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            })\r\n        }\r\n        else {\r\n            //add               \r\n            inputData[\"trainingcertificate\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n\r\n            this.trainingcertificateFieldList.map(item => {\r\n                return inputData[\"trainingcertificate\"][item] = this.state.selectedRecord[item]\r\n            });\r\n            inputData[\"trainingcertificate\"][\"ntransactionstatus\"] = \"38\";\r\n\r\n        }\r\n\r\n        inputData[\"trainingcertificate\"][\"ntrainingcategorycode\"] = this.state.selectedRecord[\"ntrainingcategorycode\"] ? this.state.selectedRecord[\"ntrainingcategorycode\"].value : \"-1\";\r\n        inputData[\"trainingcertificate\"][\"ntechniquecode\"] = this.state.selectedRecord[\"ntechniquecode\"] ? this.state.selectedRecord[\"ntechniquecode\"].value : \"-1\";\r\n        inputData[\"trainingcertificate\"][\"ntztrainingdate\"] = this.state.selectedRecord[\"ntztrainingdate\"] ? this.state.selectedRecord[\"ntztrainingdate\"].value : \"-1\";\r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                fromDate, toDate,\r\n            },\r\n            classUrl: \"trainingcertificate\", //this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"TrainingCertificate\",\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (\r\n            showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    // reloadData = () => {\r\n    //     const startDate = this.state.selectedRecord[\"fromdate\"] || (this.props.Login.inputParam && new Date(this.props.Login.inputParam.inputData.fromDate));\r\n    //     const endDate = this.state.selectedRecord[\"todate\"] || (this.props.Login.inputParam && new Date(this.props.Login.inputParam.inputData.toDate));\r\n\r\n    //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth()+1)); \r\n    //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth()+1));\r\n    //     const prevDay = validateTwoDigitDate(String(startDate.getDate())); \r\n    //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\r\n\r\n    //     const fromDate = startDate.getFullYear()+'-'+prevMonth+'-'+prevDay +\" 00:00:00\";\r\n    //     const toDate = endDate.getFullYear()+'-'+currentMonth+'-'+currentDay + \" 23:59:00\" ;                    \r\n\r\n    //     const inputParam = {\r\n    //         inputData : {\"userinfo\":this.props.Login.userInfo,\r\n    //                         fromDate, toDate,\r\n    //                     },                        \r\n    //                     classUrl: this.props.Login.inputParam.classUrl,\r\n    //                     methodUrl: this.props.Login.inputParam.methodUrl,\r\n    //                     displayName:this.props.Login.inputParam.displayName,\r\n    //                     userInfo: this.props.Login.userInfo\r\n    //                 };     \r\n    //     this.props.callService(inputParam);\r\n\r\n    //     // this.searchRef.current.value = \"\";\r\n    //     // const inputParam = {\r\n    //     //     inputData: { \"userinfo\": this.props.Login.userInfo },\r\n    //     //     classUrl: \"trainingcertificate\",\r\n    //     //     methodUrl: \"TrainingCertificate\",\r\n\r\n    //     //     displayName: \"IDS_TRAININGcertificate\",\r\n    //     //     userInfo: this.props.Login.userInfo\r\n    //     // };\r\n\r\n    //     // this.props.callService(inputParam);\r\n    // }\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential,\r\n    updateStore, getTrainingCertificateDetail,\r\n    getTrainingCertificateComboService, getTrainingParticipantsComboDataService, filterColumnData, reloadTrainingCertificate\r\n})(injectIntl(TrainingCertificate));\r\n\r\n"]},"metadata":{},"sourceType":"module"}