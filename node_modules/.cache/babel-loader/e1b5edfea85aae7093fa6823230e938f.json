{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\BarcodeTemplate\\\\BarcodeConfiguration.jsx\";\nimport React from 'react';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getBarcodeTemplateComboService, getBarcodeTemplateControlBC, getReactInputFields, getReactQuerybuilderTableRecord, getBarcodeTemplateDetail, getBarcodeDynamicChange, getBarcodeTemplateControlCombo, getOpenModalForBarcodeConfig, getBarcodeFileParameter, getBarcodeConfigFilterSubmit, getEditBarcodeConfigurationComboService, getBarcodeConfigurationDetail, filterColumnData } from '../../actions';\nimport { comboChild, constructOptionList, constructjsonOptionList, getControlMap, getSameRecordFromTwoArrays, showEsign } from '../../components/CommonScript';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../../pages/audittrail/Esign';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { SampleType, transactionStatus } from '../../components/Enumeration';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddBarcodeConfiguration from './AddBarcodeConfiguration';\nimport BarcodeDynamicFilter from './BarcodeDynamicFilter';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { Affix } from 'rsuite';\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faThumbsUp, faTrashAlt, faUserTimes } from '@fortawesome/free-solid-svg-icons';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass BarcodeConfiguration extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sidebarExpandCollapse = () => {\n      this.setState({\n        sidebarview: true\n      });\n    };\n\n    this.deleteTemplate = ncontrolCode => {\n      if (this.props.Login.masterData.SelectedBarcodeConfiguration.ntransactionstatus !== transactionStatus.DRAFT) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTRECORDTODELETE\"\n        }));\n      } else {\n        const postParam = {\n          inputListName: \"BarcodeConfiguration\",\n          selectedObject: \"SelectedBarcodeConfiguration\",\n          primaryKeyField: \"nbarcodeconfigurationcode\",\n          primaryKeyValue: this.props.Login.masterData.SelectedBarcodeConfiguration.nbarcodeconfigurationcode,\n          fetchUrl: \"barcodeconfiguration/getBarcodeConfiguration\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        const operation = \"delete\"; // const selectedRecordFilter = this.state.selectedRecordFilter\n\n        let filter = {};\n\n        if (this.props.Login.masterData.SelecetedControl.nneedconfiguration) {\n          this.props.Login.masterData.ComboComponnet.map(x => {\n            filter = { ...filter,\n              [x.label]: this.props.Login.masterData[\"Selected\" + x.label]\n            };\n          });\n          filter = { ...filter,\n            ComboComponnet: this.props.Login.masterData.ComboComponnet,\n            nformcode: this.props.Login.masterData.SelecetedScreen.nformcode,\n            ncontrolcode: this.props.Login.masterData.SelecetedControl.ncontrolcode,\n            nbarcodetemplatecode: this.props.Login.masterData.SelecetedControl.nbarcodetemplatecode\n          };\n        } else {\n          filter = {\n            ComboComponnet: null,\n            nformcode: this.props.Login.masterData.SelecetedScreen.nformcode,\n            ncontrolcode: this.props.Login.masterData.SelecetedControl.ncontrolcode,\n            nbarcodetemplatecode: this.props.Login.masterData.SelecetedControl.nbarcodetemplatecode\n          };\n        }\n\n        const inputParam = {\n          classUrl: \"barcodeconfiguration\",\n          //this.props.Login.inputParam.classUrl,\n          methodUrl: \"BarcodeConfiguration\",\n          postParam,\n          inputData: {\n            // \"barcodetemplate\": selectedRecord,\n            \"userinfo\": this.props.Login.userInfo,\n            \"BarcodeConfiguration\": this.props.Login.masterData.SelectedBarcodeConfiguration,\n            ...filter\n          },\n          operation,\n          selectedRecord: { ...this.state.selectedRecord\n          }\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: this.props.Login.screenName,\n              operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.onApproveClick = approveId => {\n      if (this.props.Login.masterData.SelectedBarcodeConfiguration.ntransactionstatus === transactionStatus.DRAFT) {\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.Login.userInfo; //add               \n\n        let postParam = undefined;\n        inputData[\"barcodeconfiguration\"] = {\n          \"nbarcodeconfigurationcode\": this.props.Login.masterData.SelectedBarcodeConfiguration[\"nbarcodeconfigurationcode\"] ? this.props.Login.masterData.SelectedBarcodeConfiguration[\"nbarcodeconfigurationcode\"].Value : \"\"\n        };\n        inputData[\"barcodeconfiguration\"] = this.props.Login.masterData.SelectedBarcodeConfiguration;\n        postParam = {\n          inputListName: \"BarcodeConfiguration\",\n          selectedObject: \"SelectedBarcodeConfiguration\",\n          primaryKeyField: \"nbarcodeconfigurationcode\"\n        };\n        const inputParam = {\n          classUrl: 'barcodeconfiguration',\n          methodUrl: \"BarcodeConfiguration\",\n          inputData: inputData,\n          operation: \"approve\",\n          postParam,\n          selectedRecord: { ...this.state.selectedRecord\n          }\n        };\n        let saveType;\n        const masterData = this.props.Login.masterData;\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              openModal: true,\n              operation: \"approve\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTRECORD\"\n        }));\n      }\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteTemplate(deleteId));\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n\n      if (this.props.Login.masterData && this.props.Login.masterData.SelecetedScreen && this.props.Login.masterData.SelecetedControl) {\n        let filter = {};\n\n        if (this.props.Login.masterData.SelecetedScreen.nneedconfiguration) {\n          this.props.Login.masterData.ComboComponnet.map(x => {\n            filter = { ...filter,\n              [x.label]: this.props.Login.masterData[\"Selected\" + x.label]\n            };\n          });\n          filter = { ...filter,\n            ComboComponnet: this.props.Login.masterData.ComboComponnet,\n            nformcode: this.props.Login.masterData.SelecetedScreen.nformcode,\n            ncontrolcode: this.props.Login.masterData.SelecetedControl.ncontrolcode,\n            nbarcodetemplatecode: this.props.Login.masterData.SelecetedScreen.nbarcodetemplatecode\n          };\n        }\n\n        let inputParam = {\n          userinfo: this.props.Login.userInfo,\n          masterData: { ...this.props.Login.masterData,\n            searchedData: undefined\n          },\n          //selectedRecordFilter: this.state.selectedRecordFilter,\n          ...filter\n        };\n        this.props.getBarcodeConfigFilterSubmit(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_CHOOSEALLFILTER\"\n        }));\n      }\n    };\n\n    this.onRetireClick = approveId => {\n      if (this.props.Login.masterData.SelectedBarcodeConfiguration.ntransactionstatus === transactionStatus.APPROVED) {\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.Login.userInfo; //add               \n\n        let postParam = undefined;\n        inputData[\"barcodeconfiguration\"] = {\n          \"nbarcodeconfigurationcode\": this.props.Login.masterData.SelectedBarcodeConfiguration[\"nbarcodeconfigurationcode\"] ? this.props.Login.masterData.SelectedBarcodeConfiguration[\"nbarcodeconfigurationcode\"].Value : \"\"\n        };\n        inputData[\"barcodeconfiguration\"] = this.props.Login.masterData.SelectedBarcodeConfiguration;\n        postParam = {\n          inputListName: \"BarcodeConfiguration\",\n          selectedObject: \"SelectedBarcodeConfiguration\",\n          primaryKeyField: \"nbarcodeconfigurationcode\"\n        };\n        const inputParam = {\n          classUrl: 'barcodeconfiguration',\n          methodUrl: \"BarcodeConfiguration\",\n          inputData: inputData,\n          operation: \"retire\",\n          postParam,\n          selectedRecord: { ...this.state.selectedRecord\n          }\n        };\n        let saveType;\n        const masterData = this.props.Login.masterData;\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              openModal: true,\n              operation: \"retire\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTAPPROVERECORD\"\n        }));\n      }\n    };\n\n    this.onEditClick = editId => {\n      const addParam = {\n        screenName: this.props.intl.formatMessage({\n          id: \"IDS_BARCODECONFIGURATION\"\n        }),\n        operation: \"update\",\n        userInfo: this.props.Login.userInfo,\n        controlId: editId,\n        selectedRecord: this.state.selectedRecord,\n        nbarcodeconfigurationcode: this.props.Login.masterData.SelectedBarcodeConfiguration.nbarcodeconfigurationcode,\n        userinfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        nsqlqueryneed: this.props.Login.masterData.SelecetedControl.nsqlqueryneed,\n        nsqlquerycode: this.props.Login.masterData.SelecetedControl.nsqlquerycode\n      };\n      this.props.getEditBarcodeConfigurationComboService(addParam);\n    };\n\n    this.generateBreadcrumb = () => {\n      let obj = [];\n      obj = [{\n        \"label\": \"IDS_SCREEN\",\n        \"value\": this.props.Login.masterData.SelecetedScreen && this.props.Login.masterData.SelecetedScreen.sformname,\n        \"item\": this.props.Login.masterData.SelecetedScreen\n      }, {\n        \"label\": \"IDS_CONTROL\",\n        \"value\": this.props.Login.masterData.SelecetedControl && this.props.Login.masterData.SelecetedControl.scontrolname,\n        \"item\": this.props.Login.masterData.SelecetedControl\n      }];\n      this.props.Login.masterData.ComboComponnet && this.props.Login.masterData.ComboComponnet.map(x => {\n        obj.push({\n          \"label\": x.label,\n          \"value\": this.props.Login.masterData['Selected' + x.label] ? x.isMultiLingual ? this.props.Login.masterData['Selected' + x.label][x.displaymember][this.props.Login.userInfo.slanguagetypecode] : this.props.Login.masterData['Selected' + x.label][x.displaymember] : \"\",\n          \"item\": this.props.Login.masterData['Selected' + x.label]\n        });\n      });\n      return obj;\n    };\n\n    this.mandatoryFields = () => {\n      const mandatoryList = [{\n        \"idsName\": \"IDS_BARCODE\",\n        \"dataField\": \"nbarcode\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"combo\"\n      }];\n\n      if (this.props.Login.masterData && this.props.Login.masterData.SelecetedControl && this.props.Login.masterData.SelecetedControl.nfiltersqlqueryneed) {\n        mandatoryList.push({\n          \"idsName\": \"IDS_SQLQUERY\",\n          \"dataField\": \"nsqlquerycode\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        });\n      }\n\n      this.props.Login.masterData.BarcodeParameter && this.props.Login.masterData.BarcodeParameter.map(x => {\n        mandatoryList.push({\n          \"idsName\": x,\n          \"dataField\": x,\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        });\n      });\n      if (this.props.Login.masterData.SelecetedControl && this.props.Login.masterData.SelecetedControl.nsqlqueryneed && this.props.Login.masterData.SqlQueryParam.length > 0) this.props.Login.masterData.SqlQueryParam && this.props.Login.masterData.SqlQueryParam.map(x => {\n        mandatoryList.push({\n          \"idsName\": x,\n          \"dataField\": x,\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        });\n      });\n      return mandatoryList;\n    };\n\n    this.onSaveClick = () => {\n      if (this.props.Login.masterData.SelecetedControl.nfiltersqlqueryneed && this.state.selectedRecord.nsqlquerycode === undefined) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSQLQUERY\"\n        }));\n      } else {\n        const selectedRecord = this.state.selectedRecord;\n        let inputData = {};\n        inputData['userinfo'] = this.props.Login.userInfo;\n        inputData['BarcodeConfiguration'] = {};\n        inputData['BarcodeConfiguration']['nbarcode'] = selectedRecord.nbarcode ? selectedRecord.nbarcode.value : -1;\n        inputData['BarcodeConfiguration']['nbarcodetemplatecode'] = this.props.Login.masterData.SelecetedControl ? this.props.Login.masterData.SelecetedControl.nbarcodetemplatecode : -1;\n        inputData['BarcodeConfiguration']['nformcode'] = this.props.Login.masterData.SelecetedScreen ? this.props.Login.masterData.SelecetedScreen.nformcode : -1;\n        inputData['BarcodeConfiguration']['ncontrolcode'] = this.props.Login.masterData.SelecetedControl ? this.props.Login.masterData.SelecetedControl.ncontrolcode : -1;\n        inputData['BarcodeConfiguration']['ndesigntemplatemappingcode'] = this.props.Login.ndesigntemplatemappingcode;\n\n        if (this.props.Login.operation === 'update') {\n          inputData['BarcodeConfiguration']['nbarcodeconfigurationcode'] = this.props.Login.masterData.SelectedBarcodeConfiguration.nbarcodeconfigurationcode;\n        }\n\n        let data = {};\n        let filter = {};\n\n        if (this.props.Login.masterData.SelecetedControl.nneedconfiguration) {\n          this.props.Login.masterData.ComboComponnet.map(x => {\n            filter = { ...filter,\n              [x.label]: this.props.Login.masterData[\"Selected\" + x.label]\n            };\n          });\n          filter = { ...filter,\n            ComboComponnet: this.props.Login.masterData.ComboComponnet,\n            nformcode: this.props.Login.masterData.SelecetedScreen.nformcode,\n            ncontrolcode: this.props.Login.masterData.SelecetedControl.ncontrolcode,\n            nbarcodetemplatecode: this.props.Login.masterData.SelecetedControl.nbarcodetemplatecode\n          };\n        } else {\n          filter = {\n            ComboComponnet: null,\n            nformcode: this.props.Login.masterData.SelecetedScreen.nformcode,\n            ncontrolcode: this.props.Login.masterData.SelecetedControl.ncontrolcode,\n            nbarcodetemplatecode: this.props.Login.masterData.SelecetedControl.nbarcodetemplatecode\n          };\n        }\n\n        data = {\n          primarykeyName: this.props.Login.masterData.ComboComponnet && this.props.Login.masterData.ComboComponnet.length > 0 && this.props.Login.masterData.ComboComponnet[this.props.Login.masterData.ComboComponnet.length - 1]['valuemember'],\n          value: this.props.Login.masterData.ComboComponnet && this.props.Login.masterData.ComboComponnet.length > 0 && this.state.selectedRecordFilter[this.props.Login.masterData.ComboComponnet && this.props.Login.masterData.ComboComponnet[this.props.Login.masterData.ComboComponnet.length - 1]['label']].value,\n          nfiltersqlquerycode: this.props.Login.masterData.SelecetedControl.nfiltersqlqueryneed ? this.state.selectedRecord.nsqlquerycode.value : -1\n        };\n\n        if (this.props.Login.masterData.SelecetedControl.nsqlqueryneed) {\n          let param = {};\n          this.props.Login.masterData.SqlQueryParam && this.props.Login.masterData.SqlQueryParam.map(x => {\n            param = { ...param,\n              [x]: this.state.selectedRecord[x].value\n            };\n          });\n          data = { ...data,\n            SqlQueryParamMapping: param\n          };\n        }\n\n        const jsondata = {\n          parameterMapping: { ...selectedRecord.columnname\n          },\n          ...data\n        };\n        inputData['BarcodeConfiguration']['jsondata'] = jsondata;\n        inputData['BarcodeConfiguration']['jsonstring'] = JSON.stringify(jsondata);\n        inputData = { ...inputData,\n          ...filter\n        };\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: \"BarcodeConfiguration\",\n          displayName: this.props.Login.inputParam.displayName,\n          inputData: inputData,\n          operation: this.props.Login.operation,\n          searchRef: this.searchRef //  postParam:postParam,\n          // filtercombochange:this.props.Login.masterData.searchedData!==undefined?\n          //     this.state.selectedRecord.nclientcatcode.value === this.props.Login.masterData.SelectedClientCat.nclientcatcode?false:true:false\n\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: \"IDS_BARCODECONFIGURATION\"\n              }),\n              //this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\n              operation: this.props.Login.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.getOpenModalForBarcodeConfig = map => {\n      const inputParam = { ...map,\n        masterData: this.props.Login.masterData\n      };\n      let lastLevelCode = -1;\n\n      if (this.props.Login.masterData.SelecetedScreen['nformcode'] && this.props.Login.masterData.SelecetedControl) {\n        inputParam['nformcode'] = this.props.Login.masterData.SelecetedScreen['nformcode'];\n        inputParam['nbarcodetemplatecode'] = this.props.Login.masterData.SelecetedControl.nbarcodetemplatecode;\n        inputParam['ncontrolcode'] = this.props.Login.masterData.SelecetedControl.ncontrolcode;\n        inputParam['nquerybuildertablecode'] = this.props.Login.masterData.SelecetedControl.nquerybuildertablecode;\n        inputParam['lastLevelCode'] = lastLevelCode;\n        inputParam['nsqlqueryneed'] = this.props.Login.masterData.SelecetedControl.nsqlqueryneed;\n        inputParam['nfiltersqlqueryneed'] = this.props.Login.masterData.SelecetedControl.nfiltersqlqueryneed;\n        inputParam['nsqlquerycode'] = this.props.Login.masterData.SelecetedControl.nsqlquerycode;\n\n        if (this.props.Login.masterData && this.props.Login.masterData.ComboComponnet && this.props.Login.masterData.ComboComponnet.length > 0) {\n          lastLevelCode = this.state.selectedRecordFilter[this.props.Login.masterData.ComboComponnet[this.props.Login.masterData.ComboComponnet.length - 1].label].value;\n        }\n\n        inputParam['lastLevelCode'] = lastLevelCode;\n\n        if (this.props.Login.masterData.SelecetedControl.nneedconfiguration) {\n          if (lastLevelCode !== -1) this.props.getOpenModalForBarcodeConfig(inputParam);else toast.info(this.props.formatMessage({\n            ids: \"IDS_SELECTALLFILTERVALUES\"\n          }));\n        } else {\n          this.props.getOpenModalForBarcodeConfig(inputParam);\n        }\n      } else {\n        toast.info(\"IDS_SELECTALLFILTERVALUES\");\n      }\n    };\n\n    this.onComboChangeModal = (comboData, columnname, sparametername) => {\n      const selectedRecord = this.state.selectedRecord;\n      selectedRecord[columnname] = { ...selectedRecord[columnname],\n        [sparametername]: comboData.value\n      };\n      selectedRecord[sparametername] = comboData;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboBarcodeChange = (comboData, columnname) => {\n      const selectedRecord = this.state.selectedRecord;\n\n      if (columnname === 'nbarcode') {\n        selectedRecord['nbarcode'] = comboData;\n\n        if (this.props.Login.masterData.SelecetedControl.nfiltersqlqueryneed === false) {\n          const objMap = {\n            selectedRecord,\n            masterData: this.props.Login.masterData,\n            userinfo: this.props.Login.userInfo,\n            nfiltersqlqueryneed: this.props.Login.masterData.SelecetedControl.nfiltersqlqueryneed\n          };\n          this.props.getBarcodeFileParameter(objMap);\n        } else {\n          this.setState({\n            selectedRecord\n          });\n        }\n      } else if (columnname === 'nsqlquerycode') {\n        selectedRecord['nsqlquerycode'] = comboData;\n        delete selectedRecord[\"columnname\"];\n        this.props.Login.masterData && this.props.Login.masterData.BarcodeParameter.map(x => {\n          delete selectedRecord[x];\n        });\n        const objMap = {\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          userinfo: this.props.Login.userInfo,\n          nfiltersqlqueryneed: this.props.Login.masterData.SelecetedControl.nfiltersqlqueryneed\n        };\n        this.props.getBarcodeFileParameter(objMap);\n      } else {\n        selectedRecord[columnname] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.checkValidation = (ComboComponnet, selectedRecord) => {\n      const list = [];\n      ComboComponnet && ComboComponnet.map(x => {\n        list.push(selectedRecord[x.label] ? false : true);\n      });\n      return !list.includes(true);\n    };\n\n    this.onFilterSubmit = () => {\n      this.searchRef.current.value = \"\";\n      const selectedRecordFilter = this.state.selectedRecordFilter;\n\n      if (selectedRecordFilter[\"nformcode\"] && selectedRecordFilter[\"ncontrolcode\"]) {\n        if (selectedRecordFilter[\"ncontrolcode\"].item.nneedconfiguration) {\n          if (this.checkValidation(this.props.Login.masterData.ComboComponnet, selectedRecordFilter)) {\n            let obj = {};\n            this.props.Login.masterData.ComboComponnet.map(x => {\n              obj = { ...obj,\n                [x.label]: selectedRecordFilter[x.label]\n              };\n            });\n            let inputParam = {\n              userinfo: this.props.Login.userInfo,\n              masterData: { ...this.props.Login.masterData,\n                searchedData: undefined\n              },\n              selectedRecordFilter: this.state.selectedRecordFilter,\n              ComboComponnet: this.props.Login.masterData.ComboComponnet,\n              nformcode: selectedRecordFilter[\"nformcode\"].value,\n              nbarcodetemplatecode: selectedRecordFilter[\"ncontrolcode\"].item.nbarcodetemplatecode,\n              ncontrolcode: selectedRecordFilter[\"ncontrolcode\"].value,\n              ...obj\n            };\n            this.props.getBarcodeConfigFilterSubmit(inputParam);\n          } else {\n            toast.info(\"IDS_SELECTALLFILTER\");\n          }\n        } else {\n          let inputParam = {\n            userinfo: this.props.Login.userInfo,\n            masterData: { ...this.props.Login.masterData,\n              searchedData: undefined\n            },\n            selectedRecordFilter: this.state.selectedRecordFilter,\n            ComboComponnet: this.props.Login.masterData.ComboComponnet,\n            nformcode: selectedRecordFilter[\"nformcode\"].value,\n            nbarcodetemplatecode: selectedRecordFilter[\"ncontrolcode\"].item.nbarcodetemplatecode,\n            ncontrolcode: selectedRecordFilter[\"ncontrolcode\"].value\n          };\n          this.props.getBarcodeConfigFilterSubmit(inputParam);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_INSTRUMENTCATEGORYNOTAVALIABLE\"\n        }));\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.openPortal) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openPortal: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        if (this.props.Login.loadEsign) {\n          if (this.props.Login.operation === \"approve\" || this.props.Login.operation === \"delete\") {\n            loadEsign = false;\n            openModal = false;\n            selectedRecord = {};\n          } else {\n            loadEsign = false;\n          }\n        } else {\n          openModal = false;\n          selectedRecord = {};\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal,\n            loadEsign,\n            selectedRecord,\n            selectedId: null,\n            dataList: [],\n            dataListCount: [],\n            dataListSubSample: [],\n            dataListCountSubSample: []\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onComboChangeFilter = (comboData, fieldName) => {\n      const selectedRecordFilter = this.state.selectedRecordFilter || {};\n      selectedRecordFilter[fieldName] = comboData;\n\n      if (fieldName === 'nformcode') {\n        const map = {\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          selectedRecordFilter: selectedRecordFilter,\n          nbarcodetemplatecode: selectedRecordFilter['nformcode'].item.nbarcodetemplatecode,\n          listData: this.state.listData\n        };\n        this.props.getBarcodeTemplateControlBC(map);\n      } else if (fieldName === 'ncontrolcode') {\n        if (comboData.item.nneedconfiguration) {\n          const map = {\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            selectedRecordFilter: selectedRecordFilter,\n            nbarcodetemplatecode: selectedRecordFilter['ncontrolcode'].item.nbarcodetemplatecode,\n            listData: this.state.listData\n          };\n          this.props.getBarcodeTemplateControlCombo(map);\n        } else {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecordFilter,\n              masterData: { ...this.props.Login.masterData,\n                ComboComponnet: []\n              }\n            }\n          };\n          this.props.updateStore(updateInfo); //   /  this.setState({ selectedRecordFilter });\n        }\n      } else {\n        this.setState({\n          selectedRecordFilter\n        });\n      }\n    };\n\n    this.onComboChangedynamic = (comboData, control) => {\n      let childComboList = [];\n      let childColumnList = {};\n      let parentList = {};\n      const selectedRecordFilter = { ...this.state.selectedRecordFilter\n      };\n      selectedRecordFilter[control.label] = comboData;\n\n      if (control.child && control.child.length > 0) {\n        childComboList = getSameRecordFromTwoArrays(this.props.Login.masterData.ComboComponnet, control.child, \"label\");\n        childColumnList = {};\n        childComboList.map(columnList => {\n          const val = comboChild(this.props.Login.masterData.ComboComponnet, columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n          return null;\n        }); //  parentList =[]\n        // getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\")\n\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData ? comboData.value : -1,\n          item: comboData ? comboData.item : \"\",\n          label: comboData ? control.label : \"\"\n        };\n        this.props.getBarcodeDynamicChange(inputParem, selectedRecordFilter, control, this.props.Login.masterData, childComboList, childColumnList, this.props.Login.userInfo, this.state.listData);\n      } else {\n        this.setState({\n          selectedRecordFilter\n        });\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        if (event.target.name === \"sviewname\") {\n          selectedRecord[event.target.name] = event.target.value.replace(/[^a-z]/gi, '');\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.state = {\n      masterStatus: \"\",\n      error: \"\",\n      operation: \"\",\n      screenName: undefined,\n      sidebarview: false,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      selectedRecord: {},\n      selectedRecordFilter: {},\n      listData: {}\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.searchFieldList = [\"sbarcodename\", \"stransactionstatus\", \"sbarcodeprint\", \"sneedconfiguration\", \"ssqlqueryname\", \"ssqlqueryneed\"];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const addId = this.state.controlMap.has(\"AddBarcodeConfiguration\") && this.state.controlMap.get(\"AddBarcodeConfiguration\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteBarcodeConfiguration\") && this.state.controlMap.get(\"DeleteBarcodeConfiguration\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"ApproveBarcodeConfiguration\") && this.state.controlMap.get(\"ApproveBarcodeConfiguration\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditBarcodeConfiguration\") && this.state.controlMap.get(\"EditBarcodeConfiguration\").ncontrolcode;\n    const retireId = this.state.controlMap.has(\"RetireBarcodeConfiguration\") && this.state.controlMap.get(\"RetireBarcodeConfiguration\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"BarcodeConfiguration\",\n      selectedObject: \"SelectedBarcodeConfiguration\",\n      primaryKeyField: \"nbarcodeconfigurationcode\",\n      fetchUrl: \"barcodeconfiguration/getBarcodeConfiguration\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    const AddParam = {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_BARCODECONFIGURATION\"\n      }),\n      operation: \"create\",\n      userInfo: this.props.Login.userInfo,\n      controlId: addId\n    };\n    let userStatusCSS = \"outline-secondary\";\n    let activeIconCSS = \"fa fa-check\";\n\n    if (this.props.Login.masterData.SelectedBarcodeConfiguration && this.props.Login.masterData.SelectedBarcodeConfiguration.ntransactionstatus === transactionStatus.APPROVED) {\n      userStatusCSS = \"outline-success\";\n    } else if (this.props.Login.masterData.SelectedBarcodeConfiguration && this.props.Login.masterData.SelectedBarcodeConfiguration.ntransactionstatus === transactionStatus.RETIRED) {\n      userStatusCSS = \"outline-danger\";\n      activeIconCSS = \"\";\n    } else if (this.props.Login.masterData.SelectedBarcodeConfiguration && this.props.Login.masterData.SelectedBarcodeConfiguration.ntransactionstatus === transactionStatus.DRAFT) {\n      activeIconCSS = \"\";\n    } //   const breadCrumbData = this.state.filterData || [];\n\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.generateBreadcrumb(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster // formatMessage={this.props.intl.formatMessage}\n    , {\n      screenName: \"IDS_BARCODECONGIGURATION\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.BarcodeConfiguration,\n      getMasterDetail: BarcodeConfiguration => this.props.getBarcodeConfigurationDetail(BarcodeConfiguration, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.SelectedBarcodeConfiguration,\n      primaryKeyField: \"nbarcodeconfigurationcode\",\n      mainField: \"sbarcodename\",\n      firstField: \"scontrolname\",\n      secondField: \"stransdisplaystatus\" // isIDSField=\"Yes\"\n      ,\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: false,\n      openModal: () => this.getOpenModalForBarcodeConfig(AddParam),\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      filterComponent: [{\n        \"IDS_BARCODECONFIGURATIONFILTER\": /*#__PURE__*/React.createElement(BarcodeDynamicFilter, {\n          onComboChange: this.onComboChangeFilter,\n          selectedRecord: this.state.selectedRecordFilter,\n          listData: this.state.listData,\n          ComboComponnet: this.props.Login.masterData.ComboComponnet && this.props.Login.masterData.ComboComponnet,\n          onComboChangedynamic: this.onComboChangedynamic,\n          slanguagetypecode: this.props.Login.userInfo.slanguagetypecode,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '8' : \"10\"}`,\n      className: \"position-relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn \",\n      onClick: this.props.parentFunction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 33\n      }\n    }, !this.props.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.BarcodeConfiguration && this.props.Login.masterData.BarcodeConfiguration.length > 0 && this.props.Login.masterData.SelectedBarcodeConfiguration ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 49\n      }\n    }, this.props.Login.masterData.SelectedBarcodeConfiguration.sbarcodename), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${userStatusCSS} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 61\n      }\n    }, activeIconCSS !== \"\" ? /*#__PURE__*/React.createElement(\"i\", {\n      class: activeIconCSS,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 89\n      }\n    }) : \"\", this.props.Login.masterData.SelectedBarcodeConfiguration.stransdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"editUser\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      onClick: () => this.onEditClick(editId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteUser\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.ConfirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }),\n      onClick: () => this.onApproveClick(approveId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"retireUser\",\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(retireId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RETIRE\"\n      }),\n      onClick: () => this.onRetireClick(retireId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faUserTimes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 65\n      }\n    })))))), /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ASKNUMBEROFBARCODEWANTTOPRINT\",\n      message: \"Number Of Barcode Needed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 84\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedBarcodeConfiguration.sbarcodeprint))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SQLQUERYNEED\",\n      message: \"Need Screen Filter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 84\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedBarcodeConfiguration.ssqlqueryneed))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SQLQUERYNAME\",\n      message: \"Need Screen Filter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 84\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedBarcodeConfiguration.ssqlqueryname))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_NEEDSCREENFILTER\",\n      message: \"Need Screen Filter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 84\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedBarcodeConfiguration.sneedconfiguration))))))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 49\n      }\n    }, this.props.Login.masterData.SelectedBarcodeConfiguration.jsondata && Object.keys(this.props.Login.masterData.SelectedBarcodeConfiguration.jsondata.parameterMapping).map(x => /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: x,\n      message: x,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 80\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 69\n      }\n    }, this.props.Login.masterData.SelectedBarcodeConfiguration.jsondata.parameterMapping[x]))))))) : \"\"))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.mandatoryFields(),\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddBarcodeConfiguration // Barcode={this.props.Login.masterData.Barcode}\n      // SqlQuery={this.props.Login.masterData.SqlQuery || []}\n      , {\n        selectedRecord: this.state.selectedRecord,\n        onComboChangeModal: this.onComboChangeModal,\n        onComboBarcodeChange: this.onComboBarcodeChange,\n        onInputOnChange: this.onInputOnChange // BarcodeParameter={this.props.Login.masterData.BarcodeParameter}\n        // MappingFileds={this.props.Login.masterData.MappingFileds}\n        ,\n        operation: this.props.Login.operation,\n        masterData: this.props.Login.masterData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      selectedRecord,\n      userRoleControlRights,\n      controlMap,\n      listData,\n      selectedRecordFilter\n    } = this.state;\n\n    if (this.props.Login.selectedRecordFilter !== previousProps.Login.selectedRecordFilter) {\n      updateState = true;\n      selectedRecordFilter = this.props.Login.selectedRecordFilter;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      updateState = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.listData !== previousProps.Login.listData) {\n      updateState = true;\n      listData = this.props.Login.listData;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n          controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n          updateState = true;\n        }\n      }\n\n      if (this.props.Login.masterData.Screen !== previousProps.Login.masterData.Screen) {\n        listData['nformcode'] = constructOptionList(this.props.Login.masterData.Screen, 'nformcode', 'sformname').get(\"OptionList\");\n        listData['ncontrolcode'] = constructOptionList(this.props.Login.masterData.Control, 'ncontrolcode', 'scontrolname').get(\"OptionList\");\n        selectedRecordFilter['nformcode'] = this.props.Login.masterData.SelecetedScreen && {\n          label: this.props.Login.masterData.SelecetedScreen.sformname,\n          value: this.props.Login.masterData.SelecetedScreen.nformcode,\n          item: { ...this.props.Login.masterData.SelecetedScreen\n          }\n        };\n        selectedRecordFilter['ncontrolcode'] = this.props.Login.masterData.SelecetedControl && {\n          label: this.props.Login.masterData.SelecetedControl.scontrolname,\n          value: this.props.Login.masterData.SelecetedControl.ncontrolcode,\n          item: { ...this.props.Login.masterData.SelecetedControl\n          }\n        };\n        updateState = true;\n        this.props.Login.masterData.ComboComponnet && this.props.Login.masterData.ComboComponnet.map(x => {\n          const data = constructjsonOptionList(this.props.Login.masterData[x.label], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, this.props.Login.userInfo.slanguagetypecode, x).get(\"OptionList\");\n\n          if (data.length !== 0) {\n            selectedRecordFilter[x.label] = { ...data.filter(y => y.value === this.props.Login.masterData[\"Selected\" + x.label][x.valuemember])[0]\n            };\n          }\n\n          listData[x.label] = data;\n        });\n      }\n    }\n\n    if (updateState) {\n      this.setState({\n        selectedRecord,\n        controlMap,\n        userRoleControlRights,\n        listData,\n        selectedRecordFilter\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  updateStore,\n  getBarcodeTemplateComboService,\n  getBarcodeTemplateControlBC,\n  getReactInputFields,\n  getReactQuerybuilderTableRecord,\n  getBarcodeTemplateDetail,\n  getBarcodeDynamicChange,\n  getBarcodeTemplateControlCombo,\n  getOpenModalForBarcodeConfig,\n  getBarcodeFileParameter,\n  getBarcodeConfigFilterSubmit,\n  getEditBarcodeConfigurationComboService,\n  getBarcodeConfigurationDetail,\n  filterColumnData\n})(injectIntl(BarcodeConfiguration));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/BarcodeTemplate/BarcodeConfiguration.jsx"],"names":["React","Row","Col","Card","Nav","FormGroup","FormLabel","connect","injectIntl","FormattedMessage","toast","callService","crudMaster","validateEsignCredential","updateStore","getBarcodeTemplateComboService","getBarcodeTemplateControlBC","getReactInputFields","getReactQuerybuilderTableRecord","getBarcodeTemplateDetail","getBarcodeDynamicChange","getBarcodeTemplateControlCombo","getOpenModalForBarcodeConfig","getBarcodeFileParameter","getBarcodeConfigFilterSubmit","getEditBarcodeConfigurationComboService","getBarcodeConfigurationDetail","filterColumnData","comboChild","constructOptionList","constructjsonOptionList","getControlMap","getSameRecordFromTwoArrays","showEsign","ListMaster","SlideOutModal","Esign","DEFAULT_RETURN","ListWrapper","SampleType","transactionStatus","ConfirmMessage","AddBarcodeConfiguration","BarcodeDynamicFilter","BreadcrumbComponent","Affix","ReadOnlyText","ContentPanel","FontAwesomeIcon","faPencilAlt","faThumbsUp","faTrashAlt","faUserTimes","mapStateToProps","state","Login","BarcodeConfiguration","Component","constructor","props","sidebarExpandCollapse","setState","sidebarview","deleteTemplate","ncontrolCode","masterData","SelectedBarcodeConfiguration","ntransactionstatus","DRAFT","warn","intl","formatMessage","id","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","nbarcodeconfigurationcode","fetchUrl","fecthInputObject","userinfo","userInfo","operation","filter","SelecetedControl","nneedconfiguration","ComboComponnet","map","x","label","nformcode","SelecetedScreen","ncontrolcode","nbarcodetemplatecode","inputParam","classUrl","methodUrl","inputData","selectedRecord","userRoleControlRights","updateInfo","typeName","data","loadEsign","screenData","openModal","screenName","onApproveClick","approveId","undefined","Value","saveType","esignNeeded","ConfirmDelete","deleteId","confirmMessage","confirm","reloadData","searchRef","current","value","searchedData","onRetireClick","APPROVED","onEditClick","editId","addParam","controlId","nsqlqueryneed","nsqlquerycode","generateBreadcrumb","obj","sformname","scontrolname","push","isMultiLingual","displaymember","slanguagetypecode","mandatoryFields","mandatoryList","nfiltersqlqueryneed","BarcodeParameter","SqlQueryParam","length","onSaveClick","nbarcode","ndesigntemplatemappingcode","primarykeyName","selectedRecordFilter","nfiltersqlquerycode","param","SqlQueryParamMapping","jsondata","parameterMapping","columnname","JSON","stringify","displayName","lastLevelCode","nquerybuildertablecode","info","ids","onComboChangeModal","comboData","sparametername","onComboBarcodeChange","objMap","openFilter","showFilter","closeFilter","checkValidation","list","includes","onFilterSubmit","item","validateEsign","sreason","nreasoncode","spredefinedreason","password","closeModal","openPortal","selectedId","dataList","dataListCount","dataListSubSample","dataListCountSubSample","onComboChangeFilter","fieldName","listData","onComboChangedynamic","control","childComboList","childColumnList","parentList","child","columnList","val","inputParem","source","primarykeyField","valuemember","onInputOnChange","event","target","type","name","checked","YES","NO","replace","masterStatus","error","controlMap","Map","createRef","searchFieldList","getDerivedStateFromProps","render","addId","has","get","retireId","filterParam","AddParam","userStatusCSS","activeIconCSS","RETIRED","parentFunction","sbarcodename","stransdisplaystatus","indexOf","sbarcodeprint","ssqlqueryneed","ssqlqueryname","sneedconfiguration","Object","keys","componentDidUpdate","previousProps","updateState","values","Screen","Control","y","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getBarcodeTemplateComboService,\r\n    getBarcodeTemplateControlBC, getReactInputFields, getReactQuerybuilderTableRecord,\r\n    getBarcodeTemplateDetail, getBarcodeDynamicChange, getBarcodeTemplateControlCombo, getOpenModalForBarcodeConfig,\r\n    getBarcodeFileParameter, getBarcodeConfigFilterSubmit, getEditBarcodeConfigurationComboService, getBarcodeConfigurationDetail,\r\n    filterColumnData\r\n} from '../../actions';\r\nimport { comboChild, constructOptionList, constructjsonOptionList, getControlMap, getSameRecordFromTwoArrays, showEsign } from '../../components/CommonScript';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport {\r\n    SampleType, transactionStatus\r\n} from '../../components/Enumeration';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddBarcodeConfiguration from './AddBarcodeConfiguration'\r\nimport BarcodeDynamicFilter from './BarcodeDynamicFilter'\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { Affix } from 'rsuite';\r\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faThumbsUp, faTrashAlt, faUserTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass BarcodeConfiguration extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            operation: \"\",\r\n            screenName: undefined,\r\n            sidebarview: false,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            selectedRecord: {},\r\n            selectedRecordFilter: {},\r\n            listData: {}\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.searchFieldList = [\"sbarcodename\", \"stransactionstatus\", \"sbarcodeprint\", \"sneedconfiguration\", \"ssqlqueryname\", \"ssqlqueryneed\"];\r\n\r\n    }\r\n\r\n    sidebarExpandCollapse = () => {\r\n        this.setState({\r\n            sidebarview: true\r\n        })\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    deleteTemplate = (ncontrolCode) => {\r\n        if (this.props.Login.masterData.SelectedBarcodeConfiguration.ntransactionstatus !== transactionStatus.DRAFT) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTODELETE\" }));\r\n        }\r\n        else {\r\n\r\n            const postParam = {\r\n                inputListName: \"BarcodeConfiguration\", selectedObject: \"SelectedBarcodeConfiguration\",\r\n                primaryKeyField: \"nbarcodeconfigurationcode\",\r\n                primaryKeyValue: this.props.Login.masterData.SelectedBarcodeConfiguration.nbarcodeconfigurationcode,\r\n                fetchUrl: \"barcodeconfiguration/getBarcodeConfiguration\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            }\r\n\r\n            const operation = \"delete\"\r\n            // const selectedRecordFilter = this.state.selectedRecordFilter\r\n            let filter = {}\r\n            if (this.props.Login.masterData.SelecetedControl.nneedconfiguration) {\r\n                this.props.Login.masterData.ComboComponnet\r\n                    .map(x => {\r\n                        filter = { ...filter, [x.label]: this.props.Login.masterData[\"Selected\" + x.label] }\r\n                    })\r\n                filter = {\r\n                    ...filter,\r\n                    ComboComponnet: this.props.Login.masterData.ComboComponnet,\r\n                    nformcode: this.props.Login.masterData.SelecetedScreen.nformcode,\r\n                    ncontrolcode: this.props.Login.masterData.SelecetedControl.ncontrolcode,\r\n                    nbarcodetemplatecode: this.props.Login.masterData.SelecetedControl.nbarcodetemplatecode,\r\n                }\r\n            } else {\r\n                filter = {\r\n                    ComboComponnet: null,\r\n                    nformcode: this.props.Login.masterData.SelecetedScreen.nformcode,\r\n                    ncontrolcode: this.props.Login.masterData.SelecetedControl.ncontrolcode,\r\n                    nbarcodetemplatecode: this.props.Login.masterData.SelecetedControl.nbarcodetemplatecode,\r\n                }\r\n            }\r\n\r\n            const inputParam = {\r\n                classUrl: \"barcodeconfiguration\", //this.props.Login.inputParam.classUrl,\r\n                methodUrl: \"BarcodeConfiguration\", postParam,\r\n                inputData: {\r\n                    // \"barcodetemplate\": selectedRecord,\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n                    \"BarcodeConfiguration\": this.props.Login.masterData.SelectedBarcodeConfiguration, ...filter\r\n                },\r\n                operation,\r\n                selectedRecord: { ...this.state.selectedRecord }\r\n            }\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: this.props.Login.screenName, operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n\r\n    onApproveClick = (approveId) => {\r\n\r\n        if (this.props.Login.masterData.SelectedBarcodeConfiguration.ntransactionstatus === transactionStatus.DRAFT) {\r\n\r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            //add               \r\n            let postParam = undefined;\r\n            inputData[\"barcodeconfiguration\"] = { \"nbarcodeconfigurationcode\": this.props.Login.masterData.SelectedBarcodeConfiguration[\"nbarcodeconfigurationcode\"] ? this.props.Login.masterData.SelectedBarcodeConfiguration[\"nbarcodeconfigurationcode\"].Value : \"\" };\r\n            inputData[\"barcodeconfiguration\"] = this.props.Login.masterData.SelectedBarcodeConfiguration;\r\n            postParam = { inputListName: \"BarcodeConfiguration\", selectedObject: \"SelectedBarcodeConfiguration\", primaryKeyField: \"nbarcodeconfigurationcode\" };\r\n            const inputParam = {\r\n                classUrl: 'barcodeconfiguration',\r\n                methodUrl: \"BarcodeConfiguration\",\r\n                inputData: inputData,\r\n                operation: \"approve\", postParam,\r\n                selectedRecord: { ...this.state.selectedRecord }\r\n            }\r\n            let saveType;\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId);\r\n            if (esignNeeded) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"approve\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORD\" }))\r\n        }\r\n\r\n    }\r\n\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteTemplate(deleteId));\r\n    }\r\n\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        if (this.props.Login.masterData && this.props.Login.masterData.SelecetedScreen && this.props.Login.masterData.SelecetedControl) {\r\n\r\n\r\n            let filter = {}\r\n            if (this.props.Login.masterData.SelecetedScreen.nneedconfiguration) {\r\n                this.props.Login.masterData.ComboComponnet\r\n                    .map(x => {\r\n                        filter = { ...filter, [x.label]: this.props.Login.masterData[\"Selected\" + x.label] }\r\n                    })\r\n                filter = {\r\n                    ...filter,\r\n                    ComboComponnet: this.props.Login.masterData.ComboComponnet,\r\n                    nformcode: this.props.Login.masterData.SelecetedScreen.nformcode,\r\n                    ncontrolcode: this.props.Login.masterData.SelecetedControl.ncontrolcode,\r\n                    nbarcodetemplatecode: this.props.Login.masterData.SelecetedScreen.nbarcodetemplatecode,\r\n                }\r\n            }\r\n\r\n            let inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                masterData: {\r\n                    ...this.props.Login.masterData,\r\n                    searchedData: undefined\r\n                },\r\n                //selectedRecordFilter: this.state.selectedRecordFilter,\r\n                ...filter\r\n            };\r\n            this.props.getBarcodeConfigFilterSubmit(inputParam\r\n            );\r\n\r\n        } else {\r\n            toast.warn(\r\n                this.props.intl.formatMessage({\r\n                    id: \"IDS_CHOOSEALLFILTER\",\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    onRetireClick = (approveId) => {\r\n\r\n        if (this.props.Login.masterData.SelectedBarcodeConfiguration.ntransactionstatus === transactionStatus.APPROVED) {\r\n\r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            //add               \r\n            let postParam = undefined;\r\n            inputData[\"barcodeconfiguration\"] = { \"nbarcodeconfigurationcode\": this.props.Login.masterData.SelectedBarcodeConfiguration[\"nbarcodeconfigurationcode\"] ? this.props.Login.masterData.SelectedBarcodeConfiguration[\"nbarcodeconfigurationcode\"].Value : \"\" };\r\n            inputData[\"barcodeconfiguration\"] = this.props.Login.masterData.SelectedBarcodeConfiguration;\r\n            postParam = { inputListName: \"BarcodeConfiguration\", selectedObject: \"SelectedBarcodeConfiguration\", primaryKeyField: \"nbarcodeconfigurationcode\" };\r\n            const inputParam = {\r\n                classUrl: 'barcodeconfiguration',\r\n                methodUrl: \"BarcodeConfiguration\",\r\n                inputData: inputData,\r\n                operation: \"retire\", postParam,\r\n                selectedRecord: { ...this.state.selectedRecord }\r\n            }\r\n            let saveType;\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId);\r\n            if (esignNeeded) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"retire\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTAPPROVERECORD\" }))\r\n        }\r\n\r\n    }\r\n\r\n    onEditClick = (editId) => {\r\n\r\n        const addParam = {\r\n            screenName: this.props.intl.formatMessage({ id: \"IDS_BARCODECONFIGURATION\" }),\r\n            operation: \"update\",\r\n            userInfo: this.props.Login.userInfo,\r\n            controlId: editId,\r\n            selectedRecord: this.state.selectedRecord,\r\n            nbarcodeconfigurationcode: this.props.Login.masterData.SelectedBarcodeConfiguration.nbarcodeconfigurationcode,\r\n            userinfo: this.props.Login.userInfo,\r\n            masterData: this.props.Login.masterData,\r\n            nsqlqueryneed: this.props.Login.masterData.SelecetedControl.nsqlqueryneed,\r\n            nsqlquerycode: this.props.Login.masterData.SelecetedControl.nsqlquerycode\r\n\r\n        }\r\n        this.props.getEditBarcodeConfigurationComboService(addParam)\r\n    }\r\n\r\n    generateBreadcrumb = () => {\r\n        let obj = []\r\n\r\n\r\n        obj = [\r\n            {\r\n                \"label\": \"IDS_SCREEN\",\r\n                \"value\": this.props.Login.masterData.SelecetedScreen && this.props.Login.masterData.SelecetedScreen.sformname,\r\n                \"item\": this.props.Login.masterData.SelecetedScreen\r\n            },\r\n            {\r\n                \"label\": \"IDS_CONTROL\",\r\n                \"value\": this.props.Login.masterData.SelecetedControl && this.props.Login.masterData.SelecetedControl.scontrolname,\r\n                \"item\": this.props.Login.masterData.SelecetedControl\r\n            }\r\n        ]\r\n        this.props.Login.masterData.ComboComponnet && this.props.Login.masterData.ComboComponnet.map(x => {\r\n\r\n            obj.push({\r\n                \"label\": x.label,\r\n                \"value\": this.props.Login.masterData['Selected' + x.label] ? x.isMultiLingual ? this.props.Login.masterData['Selected' + x.label][x.displaymember][this.props.Login.userInfo.slanguagetypecode] : this.props.Login.masterData['Selected' + x.label][x.displaymember] : \"\",\r\n                \"item\": this.props.Login.masterData['Selected' + x.label]\r\n            },)\r\n\r\n        })\r\n\r\n\r\n        return obj;\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const addId = this.state.controlMap.has(\"AddBarcodeConfiguration\") && this.state.controlMap.get(\"AddBarcodeConfiguration\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteBarcodeConfiguration\") && this.state.controlMap.get(\"DeleteBarcodeConfiguration\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"ApproveBarcodeConfiguration\") && this.state.controlMap.get(\"ApproveBarcodeConfiguration\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditBarcodeConfiguration\") && this.state.controlMap.get(\"EditBarcodeConfiguration\").ncontrolcode;\r\n        const retireId = this.state.controlMap.has(\"RetireBarcodeConfiguration\") && this.state.controlMap.get(\"RetireBarcodeConfiguration\").ncontrolcode;\r\n\r\n\r\n        const filterParam = {\r\n            inputListName: \"BarcodeConfiguration\", selectedObject: \"SelectedBarcodeConfiguration\", primaryKeyField: \"nbarcodeconfigurationcode\",\r\n            fetchUrl: \"barcodeconfiguration/getBarcodeConfiguration\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData, searchFieldList: this.searchFieldList\r\n        };\r\n\r\n        const AddParam = {\r\n            screenName: this.props.intl.formatMessage({ id: \"IDS_BARCODECONFIGURATION\" }),\r\n            operation: \"create\",\r\n            userInfo: this.props.Login.userInfo,\r\n            controlId: addId,\r\n        }\r\n\r\n        let userStatusCSS = \"outline-secondary\";\r\n        let activeIconCSS = \"fa fa-check\"\r\n        if (this.props.Login.masterData.SelectedBarcodeConfiguration && this.props.Login.masterData.SelectedBarcodeConfiguration.ntransactionstatus === transactionStatus.APPROVED) {\r\n            userStatusCSS = \"outline-success\";\r\n        }\r\n        else if (this.props.Login.masterData.SelectedBarcodeConfiguration && this.props.Login.masterData.SelectedBarcodeConfiguration.ntransactionstatus === transactionStatus.RETIRED) {\r\n            userStatusCSS = \"outline-danger\";\r\n            activeIconCSS = \"\";\r\n        }\r\n        else if (this.props.Login.masterData.SelectedBarcodeConfiguration && this.props.Login.masterData.SelectedBarcodeConfiguration.ntransactionstatus === transactionStatus.DRAFT) {\r\n            activeIconCSS = \"\";\r\n        }\r\n\r\n        //   const breadCrumbData = this.state.filterData || [];\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    <Affix top={53}>\r\n                        <BreadcrumbComponent breadCrumbItem={this.generateBreadcrumb()} />\r\n                    </Affix>\r\n                    <Row noGutters={true}>\r\n                        <Col md={`${!this.props.sidebarview ? '4' : \"2\"}`}> \r\n                            <ListMaster\r\n                                // formatMessage={this.props.intl.formatMessage}\r\n                                screenName={\"IDS_BARCODECONGIGURATION\"}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.BarcodeConfiguration}\r\n                                getMasterDetail={(BarcodeConfiguration) => this.props.getBarcodeConfigurationDetail(BarcodeConfiguration, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.SelectedBarcodeConfiguration}\r\n                                primaryKeyField=\"nbarcodeconfigurationcode\"\r\n                                mainField=\"sbarcodename\"\r\n                                firstField=\"scontrolname\"\r\n                                secondField=\"stransdisplaystatus\"\r\n                                // isIDSField=\"Yes\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={false}\r\n                                openModal={() => this.getOpenModalForBarcodeConfig(AddParam)}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_BARCODECONFIGURATIONFILTER\":\r\n                                            <BarcodeDynamicFilter\r\n                                                onComboChange={this.onComboChangeFilter}\r\n                                                selectedRecord={this.state.selectedRecordFilter}\r\n                                                listData={this.state.listData}\r\n                                                ComboComponnet={this.props.Login.masterData.ComboComponnet && this.props.Login.masterData.ComboComponnet}\r\n                                                onComboChangedynamic={this.onComboChangedynamic}\r\n                                                slanguagetypecode={this.props.Login.userInfo.slanguagetypecode}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md={`${!this.props.sidebarview ? '8' : \"10\"}`} className=\"position-relative\">\r\n                            <div className=\"sidebar-view-btn-block\">\r\n                                <div className=\"sidebar-view-btn \" onClick={this.props.parentFunction}>\r\n                                    {!this.props.sidebarview ?                    \r\n                                        <i class=\"fa fa-less-than\"></i> :\r\n                                        <i class=\"fa fa-greater-than\"></i> \r\n                                    }\r\n                                </div>\r\n                            </div> \r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Card className=\"border-0\">\r\n                                    {this.props.Login.masterData.BarcodeConfiguration && this.props.Login.masterData.BarcodeConfiguration.length > 0 && this.props.Login.masterData.SelectedBarcodeConfiguration ?\r\n                                        <>\r\n                                            <Card.Header>\r\n                                                <Card.Title className=\"product-title-main\">\r\n                                                    {this.props.Login.masterData.SelectedBarcodeConfiguration.sbarcodename}\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle>\r\n                                                    <div className=\"d-flex product-category\">\r\n                                                        <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                            <span className={`btn btn-outlined ${userStatusCSS} btn-sm ml-3`}>\r\n                                                                {activeIconCSS !== \"\" ? <i class={activeIconCSS}></i> : \"\"}\r\n                                                                {this.props.Login.masterData.SelectedBarcodeConfiguration.stransdisplaystatus}\r\n                                                            </span>\r\n                                                        </h2>\r\n                                                        <div className=\"d-inline\">\r\n                                                            <Nav.Link name=\"editUser\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                onClick={() => this.onEditClick(editId)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link name=\"deleteUser\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                onClick={() => this.ConfirmDelete(deleteId)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                onClick={() => this.onApproveClick(approveId)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faThumbsUp} title={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })} />\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link name=\"retireUser\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(retireId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_RETIRE\" })}\r\n                                                                onClick={() => this.onRetireClick(retireId)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faUserTimes} />\r\n                                                            </Nav.Link>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            {\r\n                                                <ContentPanel className=\"panel-main-content\">\r\n                                                    <Card className=\"border-0\">\r\n                                                        <Card.Body className=\"form-static-wrap\">\r\n                                                            <Row>\r\n                                                                <Col md={4}>\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel><FormattedMessage id=\"IDS_ASKNUMBEROFBARCODEWANTTOPRINT\" message=\"Number Of Barcode Needed\" /></FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedBarcodeConfiguration.sbarcodeprint}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                                <Col md={4}>\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel><FormattedMessage id=\"IDS_SQLQUERYNEED\" message=\"Need Screen Filter\" /></FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedBarcodeConfiguration.ssqlqueryneed}\r\n                                                                        </ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                                <Col md={4}>\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel><FormattedMessage id=\"IDS_SQLQUERYNAME\" message=\"Need Screen Filter\" /></FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedBarcodeConfiguration.ssqlqueryname}\r\n                                                                        </ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n\r\n                                                                <Col md={4}>\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel><FormattedMessage id=\"IDS_NEEDSCREENFILTER\" message=\"Need Screen Filter\" /></FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedBarcodeConfiguration.sneedconfiguration}\r\n                                                                        </ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n\r\n                                                            </Row>\r\n\r\n\r\n                                                        </Card.Body>\r\n                                                    </Card>\r\n                                                </ContentPanel>\r\n\r\n                                            }\r\n                                            <Card.Body className=\"form-static-wrap\">\r\n                                                <Row>\r\n                                                    {this.props.Login.masterData.SelectedBarcodeConfiguration.jsondata &&\r\n                                                        Object.keys(this.props.Login.masterData.SelectedBarcodeConfiguration.jsondata.parameterMapping).map(x =>\r\n                                                            <Col md={4}>\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel><FormattedMessage id={x} message={x} /></FormLabel>\r\n                                                                    <ReadOnlyText>\r\n                                                                        {this.props.Login.masterData.SelectedBarcodeConfiguration.jsondata.parameterMapping[x]}\r\n                                                                    </ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        )}\r\n                                                </Row>\r\n                                            </Card.Body>\r\n                                        </>\r\n                                        : \"\"\r\n                                    }\r\n                                </Card>\r\n                            </ContentPanel>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.mandatoryFields()}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddBarcodeConfiguration\r\n                                // Barcode={this.props.Login.masterData.Barcode}\r\n                                // SqlQuery={this.props.Login.masterData.SqlQuery || []}\r\n                                selectedRecord={this.state.selectedRecord}\r\n                                onComboChangeModal={this.onComboChangeModal}\r\n                                onComboBarcodeChange={this.onComboBarcodeChange}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                // BarcodeParameter={this.props.Login.masterData.BarcodeParameter}\r\n                                // MappingFileds={this.props.Login.masterData.MappingFileds}\r\n                                operation={this.props.Login.operation}\r\n                                masterData={this.props.Login.masterData}\r\n                            ></AddBarcodeConfiguration>}\r\n                    />\r\n                }\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n    mandatoryFields = () => {\r\n\r\n        const mandatoryList = [{ \"idsName\": \"IDS_BARCODE\", \"dataField\": \"nbarcode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n\r\n        if (this.props.Login.masterData && this.props.Login.masterData.SelecetedControl && this.props.Login.masterData.SelecetedControl.nfiltersqlqueryneed) {\r\n            mandatoryList.push({ \"idsName\": \"IDS_SQLQUERY\", \"dataField\": \"nsqlquerycode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" })\r\n\r\n        }\r\n\r\n        this.props.Login.masterData.BarcodeParameter && this.props.Login.masterData.BarcodeParameter.map(x => {\r\n            mandatoryList.push({ \"idsName\": x, \"dataField\": x, \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" })\r\n        })\r\n\r\n        if (this.props.Login.masterData.SelecetedControl && this.props.Login.masterData.SelecetedControl.nsqlqueryneed && this.props.Login.masterData.SqlQueryParam.length > 0)\r\n\r\n            this.props.Login.masterData.SqlQueryParam && this.props.Login.masterData.SqlQueryParam.map(x => {\r\n                mandatoryList.push({ \"idsName\": x, \"dataField\": x, \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" })\r\n            })\r\n\r\n\r\n        return mandatoryList;\r\n    }\r\n\r\n\r\n    onSaveClick = () => {\r\n        if (this.props.Login.masterData.SelecetedControl.nfiltersqlqueryneed && this.state.selectedRecord.nsqlquerycode === undefined) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSQLQUERY\" }))\r\n        } else {\r\n            const selectedRecord = this.state.selectedRecord;\r\n            let inputData = {}\r\n            inputData['userinfo'] = this.props.Login.userInfo;\r\n            inputData['BarcodeConfiguration'] = {}\r\n            inputData['BarcodeConfiguration']['nbarcode'] = selectedRecord.nbarcode ? selectedRecord.nbarcode.value : -1;\r\n            inputData['BarcodeConfiguration']['nbarcodetemplatecode'] = this.props.Login.masterData.SelecetedControl ? this.props.Login.masterData.SelecetedControl.nbarcodetemplatecode : -1;\r\n            inputData['BarcodeConfiguration']['nformcode'] = this.props.Login.masterData.SelecetedScreen ? this.props.Login.masterData.SelecetedScreen.nformcode : -1;\r\n            inputData['BarcodeConfiguration']['ncontrolcode'] = this.props.Login.masterData.SelecetedControl ? this.props.Login.masterData.SelecetedControl.ncontrolcode : -1;\r\n            inputData['BarcodeConfiguration']['ndesigntemplatemappingcode'] = this.props.Login.ndesigntemplatemappingcode;\r\n\r\n\r\n            if (this.props.Login.operation === 'update') {\r\n                inputData['BarcodeConfiguration']['nbarcodeconfigurationcode'] = this.props.Login.masterData.SelectedBarcodeConfiguration.nbarcodeconfigurationcode;\r\n            }\r\n\r\n            let data = {}\r\n            let filter = {}\r\n            if (this.props.Login.masterData.SelecetedControl.nneedconfiguration) {\r\n                this.props.Login.masterData.ComboComponnet\r\n                    .map(x => {\r\n                        filter = { ...filter, [x.label]: this.props.Login.masterData[\"Selected\" + x.label] }\r\n                    })\r\n                filter = {\r\n                    ...filter,\r\n                    ComboComponnet: this.props.Login.masterData.ComboComponnet,\r\n                    nformcode: this.props.Login.masterData.SelecetedScreen.nformcode,\r\n                    ncontrolcode: this.props.Login.masterData.SelecetedControl.ncontrolcode,\r\n                    nbarcodetemplatecode: this.props.Login.masterData.SelecetedControl.nbarcodetemplatecode,\r\n                }\r\n            } else {\r\n                filter = {\r\n                    ComboComponnet: null,\r\n                    nformcode: this.props.Login.masterData.SelecetedScreen.nformcode,\r\n                    ncontrolcode: this.props.Login.masterData.SelecetedControl.ncontrolcode,\r\n                    nbarcodetemplatecode: this.props.Login.masterData.SelecetedControl.nbarcodetemplatecode,\r\n                }\r\n            }\r\n\r\n            data = {\r\n                primarykeyName: this.props.Login.masterData.ComboComponnet && this.props.Login.masterData.ComboComponnet.length > 0 &&\r\n                    this.props.Login.masterData.ComboComponnet[this.props.Login.masterData.ComboComponnet.length - 1]['valuemember'],\r\n                value: this.props.Login.masterData.ComboComponnet && this.props.Login.masterData.ComboComponnet.length > 0 &&\r\n                    this.state.selectedRecordFilter[this.props.Login.masterData.ComboComponnet &&\r\n                        this.props.Login.masterData.ComboComponnet[this.props.Login.masterData.ComboComponnet.length - 1]['label']].value,\r\n                nfiltersqlquerycode: this.props.Login.masterData.SelecetedControl.nfiltersqlqueryneed ? this.state.selectedRecord.nsqlquerycode.value : -1\r\n\r\n            }\r\n\r\n\r\n            if (this.props.Login.masterData.SelecetedControl.nsqlqueryneed) {\r\n\r\n                let param = {}\r\n                this.props.Login.masterData.SqlQueryParam && this.props.Login.masterData.SqlQueryParam.map(x => {\r\n                    param = { ...param, [x]: this.state.selectedRecord[x].value }\r\n                })\r\n                data = {\r\n                    ...data, SqlQueryParamMapping: param\r\n                }\r\n\r\n            }\r\n\r\n            const jsondata = {\r\n                parameterMapping: { ...selectedRecord.columnname },\r\n                ...data\r\n            }\r\n            inputData['BarcodeConfiguration']['jsondata'] = jsondata;\r\n            inputData['BarcodeConfiguration']['jsonstring'] = JSON.stringify(jsondata);\r\n\r\n            inputData = { ...inputData, ...filter }\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: \"BarcodeConfiguration\",\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: inputData,\r\n                operation: this.props.Login.operation,\r\n                searchRef: this.searchRef,\r\n                //  postParam:postParam,\r\n                // filtercombochange:this.props.Login.masterData.searchedData!==undefined?\r\n                //     this.state.selectedRecord.nclientcatcode.value === this.props.Login.masterData.SelectedClientCat.nclientcatcode?false:true:false\r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_BARCODECONFIGURATION\" }),\r\n                        //this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                        operation: this.props.Login.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    getOpenModalForBarcodeConfig = (map) => {\r\n        const inputParam = { ...map, masterData: this.props.Login.masterData };\r\n        let lastLevelCode = -1\r\n\r\n        if (this.props.Login.masterData.SelecetedScreen['nformcode'] && this.props.Login.masterData.SelecetedControl) {\r\n            inputParam['nformcode'] = this.props.Login.masterData.SelecetedScreen['nformcode']\r\n            inputParam['nbarcodetemplatecode'] = this.props.Login.masterData.SelecetedControl.nbarcodetemplatecode\r\n            inputParam['ncontrolcode'] = this.props.Login.masterData.SelecetedControl.ncontrolcode\r\n            inputParam['nquerybuildertablecode'] = this.props.Login.masterData.SelecetedControl.nquerybuildertablecode\r\n            inputParam['lastLevelCode'] = lastLevelCode\r\n            inputParam['nsqlqueryneed'] = this.props.Login.masterData.SelecetedControl.nsqlqueryneed\r\n            inputParam['nfiltersqlqueryneed'] = this.props.Login.masterData.SelecetedControl.nfiltersqlqueryneed\r\n            inputParam['nsqlquerycode'] = this.props.Login.masterData.SelecetedControl.nsqlquerycode\r\n\r\n            if (this.props.Login.masterData && this.props.Login.masterData.ComboComponnet && this.props.Login.masterData.ComboComponnet.length > 0) {\r\n                lastLevelCode = this.state.selectedRecordFilter[this.props.Login.masterData.ComboComponnet[this.props.Login.masterData.ComboComponnet.length - 1].label].value\r\n\r\n            }\r\n            inputParam['lastLevelCode'] = lastLevelCode\r\n\r\n            if (this.props.Login.masterData.SelecetedControl.nneedconfiguration) {\r\n                if (lastLevelCode !== -1) this.props.getOpenModalForBarcodeConfig(inputParam);\r\n                else toast.info(this.props.formatMessage({ ids: \"IDS_SELECTALLFILTERVALUES\" }));\r\n            } else {\r\n                this.props.getOpenModalForBarcodeConfig(inputParam);\r\n            }\r\n\r\n\r\n        } else {\r\n            toast.info(\"IDS_SELECTALLFILTERVALUES\");\r\n        }\r\n    }\r\n\r\n    onComboChangeModal = (comboData, columnname, sparametername) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        selectedRecord[columnname] = { ...selectedRecord[columnname], [sparametername]: comboData.value }\r\n        selectedRecord[sparametername] = comboData\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    onComboBarcodeChange = (comboData, columnname) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        if (columnname === 'nbarcode') {\r\n            selectedRecord['nbarcode'] = comboData\r\n\r\n            if (this.props.Login.masterData.SelecetedControl.nfiltersqlqueryneed === false) {\r\n                const objMap = {\r\n                    selectedRecord, masterData: this.props.Login.masterData,\r\n                    userinfo: this.props.Login.userInfo, nfiltersqlqueryneed: this.props.Login.masterData.SelecetedControl.nfiltersqlqueryneed\r\n                }\r\n                this.props.getBarcodeFileParameter(objMap)\r\n            } else {\r\n                this.setState({ selectedRecord })\r\n            }\r\n        }\r\n        else if (columnname === 'nsqlquerycode') {\r\n            selectedRecord['nsqlquerycode'] = comboData\r\n            delete selectedRecord[\"columnname\"]\r\n\r\n            this.props.Login.masterData && this.props.Login.masterData.BarcodeParameter.map(x => {\r\n                delete selectedRecord[x]\r\n            })\r\n\r\n            const objMap = {\r\n                selectedRecord, masterData: this.props.Login.masterData, userinfo: this.props.Login.userInfo,\r\n                nfiltersqlqueryneed: this.props.Login.masterData.SelecetedControl.nfiltersqlqueryneed\r\n            }\r\n            this.props.getBarcodeFileParameter(objMap)\r\n        } else {\r\n            selectedRecord[columnname] = comboData\r\n            this.setState({ selectedRecord })\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter },\r\n        };\r\n        this.props.updateStore(updateInfo);\r\n    };\r\n\r\n    closeFilter = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false },\r\n        };\r\n        this.props.updateStore(updateInfo);\r\n    };\r\n\r\n    checkValidation = (ComboComponnet, selectedRecord) => {\r\n        const list = []\r\n        ComboComponnet\r\n            && ComboComponnet\r\n                .map(x => {\r\n                    list.push(selectedRecord[x.label] ? false : true)\r\n                })\r\n        return !list.includes(true)\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        this.searchRef.current.value = \"\";\r\n        const selectedRecordFilter = this.state.selectedRecordFilter;\r\n        if (selectedRecordFilter[\"nformcode\"] && selectedRecordFilter[\"ncontrolcode\"]) {\r\n            if (selectedRecordFilter[\"ncontrolcode\"].item.nneedconfiguration) {\r\n                if (this.checkValidation(this.props.Login.masterData.ComboComponnet, selectedRecordFilter)) {\r\n                    let obj = {}\r\n                    this.props.Login.masterData.ComboComponnet\r\n                        .map(x => {\r\n                            obj = { ...obj, [x.label]: selectedRecordFilter[x.label] }\r\n                        })\r\n\r\n\r\n                    let inputParam = {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        masterData: {\r\n                            ...this.props.Login.masterData,\r\n                            searchedData: undefined\r\n                        }, selectedRecordFilter: this.state.selectedRecordFilter,\r\n                        ComboComponnet: this.props.Login.masterData.ComboComponnet,\r\n                        nformcode: selectedRecordFilter[\"nformcode\"].value,\r\n                        nbarcodetemplatecode: selectedRecordFilter[\"ncontrolcode\"].item.nbarcodetemplatecode,\r\n                        ncontrolcode: selectedRecordFilter[\"ncontrolcode\"].value,\r\n                        ...obj\r\n                    };\r\n                    this.props.getBarcodeConfigFilterSubmit(inputParam\r\n                    );\r\n                } else {\r\n                    toast.info(\"IDS_SELECTALLFILTER\")\r\n                }\r\n            } else {\r\n                let inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: {\r\n                        ...this.props.Login.masterData,\r\n                        searchedData: undefined\r\n                    }, selectedRecordFilter: this.state.selectedRecordFilter,\r\n                    ComboComponnet: this.props.Login.masterData.ComboComponnet,\r\n                    nformcode: selectedRecordFilter[\"nformcode\"].value,\r\n                    nbarcodetemplatecode: selectedRecordFilter[\"ncontrolcode\"].item.nbarcodetemplatecode,\r\n                    ncontrolcode: selectedRecordFilter[\"ncontrolcode\"].value,\r\n                };\r\n                this.props.getBarcodeConfigFilterSubmit(inputParam);\r\n            }\r\n        } else {\r\n            toast.warn(\r\n                this.props.intl.formatMessage({\r\n                    id: \"IDS_INSTRUMENTCATEGORYNOTAVALIABLE\",\r\n                })\r\n            );\r\n        }\r\n    };\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false;\r\n\r\n        let { selectedRecord, userRoleControlRights, controlMap, listData, selectedRecordFilter } = this.state;\r\n\r\n        if (this.props.Login.selectedRecordFilter !== previousProps.Login.selectedRecordFilter) {\r\n            updateState = true;\r\n            selectedRecordFilter = this.props.Login.selectedRecordFilter\r\n        }\r\n\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord\r\n        }\r\n\r\n        if (this.props.Login.listData !== previousProps.Login.listData) {\r\n            updateState = true;\r\n            listData = this.props.Login.listData\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]\r\n                        && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                            userRoleControlRights.push(item.ncontrolcode))\r\n                    controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                    updateState = true;\r\n                }\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.Screen !== previousProps.Login.masterData.Screen) {\r\n                listData['nformcode'] = constructOptionList(this.props.Login.masterData.Screen, 'nformcode', 'sformname').get(\"OptionList\");\r\n                listData['ncontrolcode'] = constructOptionList(this.props.Login.masterData.Control, 'ncontrolcode', 'scontrolname').get(\"OptionList\");\r\n                selectedRecordFilter['nformcode'] = this.props.Login.masterData.SelecetedScreen && { label: this.props.Login.masterData.SelecetedScreen.sformname, value: this.props.Login.masterData.SelecetedScreen.nformcode, item: { ...this.props.Login.masterData.SelecetedScreen } }\r\n                selectedRecordFilter['ncontrolcode'] = this.props.Login.masterData.SelecetedControl && { label: this.props.Login.masterData.SelecetedControl.scontrolname, value: this.props.Login.masterData.SelecetedControl.ncontrolcode, item: { ...this.props.Login.masterData.SelecetedControl } }\r\n                updateState = true;\r\n                this.props.Login.masterData.ComboComponnet\r\n                    && this.props.Login.masterData.ComboComponnet\r\n                        .map(x => {\r\n\r\n                            const data = constructjsonOptionList(this.props.Login.masterData[x.label], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, this.props.Login.userInfo.slanguagetypecode, x).get(\"OptionList\");\r\n                            if (data.length !== 0) {\r\n\r\n                                selectedRecordFilter[x.label] = { ...data.filter(y => y.value === this.props.Login.masterData[\"Selected\" + x.label][x.valuemember])[0] }\r\n                            }\r\n                            listData[x.label] = data\r\n                        })\r\n\r\n            }\r\n\r\n\r\n\r\n        }\r\n        if (updateState) {\r\n            this.setState({\r\n                selectedRecord, controlMap, userRoleControlRights, listData, selectedRecordFilter\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.openPortal) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { openPortal: false }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            if (this.props.Login.loadEsign) {\r\n                if (this.props.Login.operation === \"approve\"\r\n                    || this.props.Login.operation === \"delete\") {\r\n                    loadEsign = false;\r\n                    openModal = false;\r\n                    selectedRecord = {};\r\n                }\r\n                else {\r\n                    loadEsign = false;\r\n                }\r\n            }\r\n            else {\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModal, loadEsign, selectedRecord, selectedId: null, dataList: [],\r\n                    dataListCount: [], dataListSubSample: [], dataListCountSubSample: []\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onComboChangeFilter = (comboData, fieldName) => {\r\n        const selectedRecordFilter = this.state.selectedRecordFilter || {};\r\n        selectedRecordFilter[fieldName] = comboData;\r\n\r\n        if (fieldName === 'nformcode') {\r\n            const map = {\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                selectedRecordFilter: selectedRecordFilter,\r\n                nbarcodetemplatecode: selectedRecordFilter['nformcode'].item.nbarcodetemplatecode,\r\n                listData: this.state.listData\r\n            }\r\n            this.props.getBarcodeTemplateControlBC(map);\r\n        } else if (fieldName === 'ncontrolcode') {\r\n            if (comboData.item.nneedconfiguration) {\r\n                const map = {\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    selectedRecordFilter: selectedRecordFilter,\r\n                    nbarcodetemplatecode: selectedRecordFilter['ncontrolcode'].item.nbarcodetemplatecode,\r\n                    listData: this.state.listData\r\n                }\r\n                this.props.getBarcodeTemplateControlCombo(map);\r\n            } else {\r\n\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        selectedRecordFilter, masterData: { ...this.props.Login.masterData, ComboComponnet: [] }\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n                //   /  this.setState({ selectedRecordFilter });\r\n            }\r\n        }\r\n        else {\r\n            this.setState({ selectedRecordFilter });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    onComboChangedynamic = (comboData, control) => {\r\n        let childComboList = []\r\n        let childColumnList = {}\r\n        let parentList = {}\r\n        const selectedRecordFilter = { ...this.state.selectedRecordFilter }\r\n        selectedRecordFilter[control.label] = comboData;\r\n        if (control.child && control.child.length > 0) {\r\n            childComboList = getSameRecordFromTwoArrays(this.props.Login.masterData.ComboComponnet, control.child, \"label\")\r\n            childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = comboChild(this.props.Login.masterData.ComboComponnet, columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n                return null;\r\n            })\r\n            //  parentList =[]\r\n            // getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\")\r\n\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData ? comboData.value : -1,\r\n                item: comboData ? comboData.item : \"\",\r\n                label: comboData ? control.label : \"\"\r\n            }\r\n\r\n            this.props.getBarcodeDynamicChange(inputParem, selectedRecordFilter, control,\r\n                this.props.Login.masterData, childComboList, childColumnList, this.props.Login.userInfo, this.state.listData);\r\n\r\n        } else {\r\n\r\n            this.setState({ selectedRecordFilter });\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            if (event.target.name === \"sviewname\") {\r\n                selectedRecord[event.target.name] = event.target.value.replace(/[^a-z]/gi, '');\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential,\r\n    updateStore, getBarcodeTemplateComboService, getBarcodeTemplateControlBC,\r\n    getReactInputFields, getReactQuerybuilderTableRecord, getBarcodeTemplateDetail,\r\n    getBarcodeDynamicChange, getBarcodeTemplateControlCombo, getOpenModalForBarcodeConfig,\r\n    getBarcodeFileParameter, getBarcodeConfigFilterSubmit, getEditBarcodeConfigurationComboService,\r\n    getBarcodeConfigurationDetail, filterColumnData\r\n})(injectIntl(BarcodeConfiguration));\r\n\r\n"]},"metadata":{},"sourceType":"module"}