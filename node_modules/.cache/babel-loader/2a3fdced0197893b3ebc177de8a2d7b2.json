{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\checklist\\\\checklist\\\\ChecklistForms.jsx\";\nimport React from 'react';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport { Row, Col } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\nimport FormInput from '../../../components/form-input/form-input.component';\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\nimport CustomSwitch from '../../../components/custom-switch/custom-switch.component';\nimport Esign from '../../audittrail/Esign';\nimport { transactionStatus } from '../../../components/Enumeration';\n\nclass ChecklistForms extends React.Component {\n  render() {\n    let mandatoryFields = this.props.id === 'checklist' ? [{\n      \"idsName\": \"IDS_CHECKLISTNAME\",\n      \"dataField\": \"schecklistname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }] : this.props.id === 'checklistversion' ? [{\n      \"idsName\": \"IDS_CHECKLISTVERSION\",\n      \"dataField\": \"schecklistversionname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }] : this.props.id === \"checklistversionqb\" && this.props.operation !== \"update\" ? [{\n      \"idsName\": \"IDS_QBCATEGORYNAME\",\n      \"dataField\": \"schecklistqbcategoryname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_QUESTION\",\n      \"dataField\": this.props.selectedRecord['schecklistqbcategoryname'],\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }] : [];\n    return /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.props.onSaveClick,\n      operation: this.props.operation ? this.props.operation : '',\n      screenName: this.props.id === 'checklist' ? \"IDS_CHECKLIST\" : this.props.id === 'checklistversion' ? \"IDS_CHECKLISTVERSION\" : \"IDS_CHECKLISTVERSIONQB\",\n      closeModal: this.props.handleClose,\n      show: this.props.isOpen,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.props.validateEsign,\n      selectedRecord: this.props.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: event => this.props.onInputOnChange(event),\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.props.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }\n      }) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }\n      }, this.props.id === 'checklist' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormInput, {\n        name: \"schecklistname\",\n        type: \"text\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_CHECKLISTNAME\"\n        }),\n        onChange: event => this.props.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_CHECKLISTNAME\"\n        }),\n        value: this.props.selectedRecord ? this.props.selectedRecord[\"schecklistname\"] : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(FormTextarea, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_DESCRIPTION\"\n        }),\n        name: \"sdescription\",\n        onChange: event => this.props.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_DESCRIPTION\"\n        }),\n        value: this.props.selectedRecord ? this.props.selectedRecord[\"sdescription\"] : \"\",\n        rows: \"2\",\n        isMandatory: false,\n        required: false,\n        maxLength: 255,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 29\n        }\n      })) : \"\", this.props.id === 'checklistversion' ? /*#__PURE__*/React.createElement(FormInput, {\n        name: \"schecklistversionname\",\n        type: \"text\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_CHECKLISTVERSION\"\n        }),\n        onChange: event => this.props.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_CHECKLISTVERSION\"\n        }),\n        value: this.props.selectedRecord ? this.props.selectedRecord[\"schecklistversionname\"] : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 29\n        }\n      }) : \"\", this.props.id === \"checklistversionqb\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        name: \"nchecklistqbcategorycode\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_QBCATEGORYNAME\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        value: this.props.QBCategory,\n        options: this.props.availableQBCategory || [],\n        optionId: \"nchecklistqbcategorycode\",\n        optionValue: \"schecklistqbcategoryname\",\n        isMandatory: true,\n        isMulti: false,\n        isDisabled: this.props.operation === \"update\" ? true : false,\n        isSearchable: false,\n        as: \"select\",\n        onChange: event => this.props.onComboChange(event, \"nchecklistqbcategorycode\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n        name: \"nchecklistqbcode\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_QUESTION\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        key: this.props.selectedRecord && this.props.selectedRecord.schecklistqbcategoryname ? this.props.selectedRecord.schecklistqbcategoryname : '',\n        value: this.props.QB,\n        options: this.props.selectedRecord && this.props.selectedRecord.schecklistqbcategoryname ? this.props.availableQB || [] : [],\n        optionId: \"nchecklistqbcode\",\n        optionValue: \"squestion\",\n        isMandatory: true,\n        isMulti: this.props.operation === \"update\" ? false : true,\n        isDisabled: this.props.operation === \"update\" ? true : false,\n        isSearchable: false,\n        closeMenuOnSelect: false,\n        as: \"select\",\n        isClearable: true,\n        onChange: event => this.props.onComboChange(event, \"nchecklistqbcode\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 29\n        }\n      }), this.props.operation === \"update\" ? /*#__PURE__*/React.createElement(CustomSwitch, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_MANDATORY\"\n        }),\n        type: \"switch\",\n        name: \"nmandatoryfield\",\n        onChange: event => this.props.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_MANDATORY\"\n        }),\n        defaultValue: this.props.selectedRecord ? this.props.selectedRecord[\"nmandatoryfield\"] === transactionStatus.YES ? true : false : false,\n        isMandatory: false,\n        required: false,\n        checked: this.props.selectedRecord ? this.props.selectedRecord.nmandatoryfield === transactionStatus.YES ? true : false : false,\n        disabled: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 29\n        }\n      }) : \"\") : \"\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default injectIntl(ChecklistForms);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/checklist/checklist/ChecklistForms.jsx"],"names":["React","SlideOutModal","Row","Col","injectIntl","FormTextarea","FormInput","FormSelectSearch","CustomSwitch","Esign","transactionStatus","ChecklistForms","Component","render","mandatoryFields","props","id","operation","selectedRecord","onSaveClick","handleClose","isOpen","Login","inputParam","loadEsign","validateEsign","event","onInputOnChange","intl","formatMessage","QBCategory","availableQBCategory","onComboChange","schecklistqbcategoryname","QB","availableQB","YES","nmandatoryfield"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport {Row, Col,} from 'react-bootstrap';\r\n\r\nimport { injectIntl } from 'react-intl';\r\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\r\nimport FormInput from '../../../components/form-input/form-input.component';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\nimport CustomSwitch from '../../../components/custom-switch/custom-switch.component';\r\nimport Esign from '../../audittrail/Esign';\r\nimport { transactionStatus } from '../../../components/Enumeration';\r\nclass ChecklistForms extends React.Component{\r\n    render(){\r\n        let mandatoryFields=this.props.id==='checklist'?[{\"idsName\": \"IDS_CHECKLISTNAME\", \"dataField\": \"schecklistname\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}]\r\n                            :this.props.id==='checklistversion'?[{\"idsName\": \"IDS_CHECKLISTVERSION\", \"dataField\": \"schecklistversionname\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}]\r\n                            :this.props.id===\"checklistversionqb\"&&this.props.operation!==\"update\"?[\r\n                                {\"idsName\": \"IDS_QBCATEGORYNAME\", \"dataField\": \"schecklistqbcategoryname\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                                {\"idsName\": \"IDS_QUESTION\", \"dataField\": this.props.selectedRecord['schecklistqbcategoryname'], \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}\r\n                                ]\r\n                            :[]\r\n        return(\r\n            <SlideOutModal\r\n            onSaveClick={this.props.onSaveClick}\r\n            operation={this.props.operation?this.props.operation:''}\r\n            screenName={this.props.id==='checklist'?\"IDS_CHECKLIST\":this.props.id==='checklistversion'?\"IDS_CHECKLISTVERSION\":\"IDS_CHECKLISTVERSIONQB\"}\r\n            closeModal={this.props.handleClose}\r\n            show={this.props.isOpen}\r\n            inputParam={this.props.Login.inputParam}\r\n            esign={this.props.Login.loadEsign}\r\n            validateEsign={this.props.validateEsign}\r\n            selectedRecord={this.props.selectedRecord || {}}\r\n            mandatoryFields={mandatoryFields}\r\n            addComponent={this.props.Login.loadEsign ? \r\n                <Esign  \r\n                    operation={this.props.Login.operation}\r\n                    onInputOnChange={(event)=>this.props.onInputOnChange(event)}\r\n                    inputParam={this.props.Login.inputParam}                                               \r\n                    selectedRecord={this.props.selectedRecord ||{}}\r\n                    />\r\n                :\r\n            <Row>\r\n                <Col md={12}>\r\n                    {this.props.id==='checklist'?\r\n                        <>\r\n                            <FormInput\r\n                                name=\"schecklistname\"\r\n                                type=\"text\"\r\n                                label={this.props.intl.formatMessage({ id:\"IDS_CHECKLISTNAME\"})}\r\n                                onChange={(event)=>this.props.onInputOnChange(event)}\r\n                                placeholder={this.props.intl.formatMessage({ id:\"IDS_CHECKLISTNAME\"})}\r\n                                value ={this.props.selectedRecord ? this.props.selectedRecord[\"schecklistname\"] : \"\"}\r\n                                isMandatory={true}\r\n                                required={ true}\r\n                                maxLength={100}\r\n                            />\r\n                            <FormTextarea\r\n                                label={this.props.intl.formatMessage({ id:\"IDS_DESCRIPTION\"})}\r\n                                name=\"sdescription\"\r\n                                onChange={(event)=>this.props.onInputOnChange(event)}\r\n                                placeholder={this.props.intl.formatMessage({ id:\"IDS_DESCRIPTION\"})}\r\n                                value ={this.props.selectedRecord ? this.props.selectedRecord[\"sdescription\"] : \"\"}\r\n                                rows=\"2\"\r\n                                isMandatory={false}\r\n                                required={false}\r\n                                maxLength={255}\r\n                            />\r\n                        </>\r\n                        :\"\"\r\n                        }\r\n                        {this.props.id==='checklistversion'?\r\n                            <FormInput\r\n                                name={\"schecklistversionname\"}\r\n                                type=\"text\"\r\n                                label={this.props.intl.formatMessage({ id:\"IDS_CHECKLISTVERSION\"})}\r\n                                onChange={(event)=>this.props.onInputOnChange(event)}\r\n                                placeholder={this.props.intl.formatMessage({ id:\"IDS_CHECKLISTVERSION\"})}\r\n                                value ={this.props.selectedRecord ? this.props.selectedRecord[\"schecklistversionname\"] : \"\"}\r\n                                isMandatory={true}\r\n                                required={ true}\r\n                                maxLength={100}\r\n                            />\r\n                        :\"\"}\r\n                        {this.props.id===\"checklistversionqb\"?\r\n                        <>\r\n                            <FormSelectSearch\r\n                                name=\"nchecklistqbcategorycode\"\r\n                                formLabel={this.props.intl.formatMessage({ id:\"IDS_QBCATEGORYNAME\"})}\r\n                                placeholder={this.props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}\r\n                                value={this.props.QBCategory}\r\n                                options={this.props.availableQBCategory||[]}\r\n                                optionId=\"nchecklistqbcategorycode\"\r\n                                optionValue=\"schecklistqbcategoryname\"\r\n                                isMandatory={true}\r\n                                isMulti={false}\r\n                                isDisabled={this.props.operation===\"update\"?true:false}\r\n                                isSearchable={false}\r\n                                as=\"select\"\r\n                                onChange={(event)=>this.props.onComboChange(event,\"nchecklistqbcategorycode\")}\r\n                        />\r\n                            <FormSelectSearch\r\n                                name=\"nchecklistqbcode\"\r\n                                formLabel={this.props.intl.formatMessage({ id:\"IDS_QUESTION\"})}\r\n                                placeholder={this.props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}\r\n                                key={this.props.selectedRecord&&this.props.selectedRecord.schecklistqbcategoryname?this.props.selectedRecord.schecklistqbcategoryname:''}\r\n                                value={this.props.QB}\r\n                                options={this.props.selectedRecord&&this.props.selectedRecord.schecklistqbcategoryname?this.props.availableQB||[]:[]}\r\n                                optionId=\"nchecklistqbcode\"\r\n                                optionValue=\"squestion\"\r\n                                isMandatory={true}\r\n                                isMulti={this.props.operation===\"update\"?false:true}\r\n                                isDisabled={this.props.operation===\"update\"?true:false}\r\n                                isSearchable={false}\r\n                                closeMenuOnSelect={false}\r\n                                as={\"select\"}\r\n                                isClearable={true}\r\n                                onChange={(event)=>this.props.onComboChange(event,\"nchecklistqbcode\")}\r\n                        />\r\n                        {this.props.operation===\"update\"? \r\n                        \r\n                            <CustomSwitch\r\n                                label={this.props.intl.formatMessage({ id:\"IDS_MANDATORY\"})}\r\n                                type=\"switch\"\r\n                                name={\"nmandatoryfield\"}\r\n                                onChange={(event)=>this.props.onInputOnChange(event)}\r\n                                placeholder={this.props.intl.formatMessage({ id:\"IDS_MANDATORY\"})}\r\n                                defaultValue ={this.props.selectedRecord ? this.props.selectedRecord[\"nmandatoryfield\"] === transactionStatus.YES ? true :false  : false}\r\n                                isMandatory={false}\r\n                                required={false}\r\n                                checked={this.props.selectedRecord ? this.props.selectedRecord.nmandatoryfield === transactionStatus.YES ? true :false  : false}\r\n                                disabled={false}\r\n                            />                                               \r\n                        :\"\"}\r\n                        </>\r\n                    :\"\"}\r\n                    </Col>\r\n                </Row>}/>\r\n        )\r\n    }\r\n}\r\nexport default injectIntl(ChecklistForms)"]},"metadata":{},"sourceType":"module"}