{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\reports\\\\reportsconfig\\\\AddReportMaster.js\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { transactionStatus, attachmentType, reportTypeEnum, REPORTTYPE, SampleType } from '../../../components/Enumeration';\nimport CustomSwitch from '../../../components/custom-switch/custom-switch.component';\nimport DropZone from '../../../components/dropzone/dropzone.component';\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\nimport FormInput from '../../../components/form-input/form-input.component';\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\nimport ReactSelectAddEdit from '../../../components/react-select-add-edit/react-select-add-edit-component';\nimport { Form } from 'react-bootstrap';\n\nconst AddReportMaster = props => {\n  //console.log(\"propsiin reportmaster:\", props.selectedRecord)\n  const {\n    sreportformatdetail,\n    disabled\n  } = props.selectedRecord;\n  let isReportTypeDisabled = false;\n\n  if (props.operation === \"update\") {\n    isReportTypeDisabled = true;\n  } else {\n    if (props.filterReportType && props.filterReportType.nreporttypecode !== 0) {\n      isReportTypeDisabled = true;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"nreporttypecode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_REPORTTYPE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.reportTypeList || [],\n    value: props.selectedRecord[\"nreporttypecode\"] || \"\",\n    isMandatory: true,\n    isMulti: false,\n    isClearable: false,\n    isSearchable: true //isDisabled={props.operation === \"update\"}\n    ,\n    isDisabled: isReportTypeDisabled,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"nreporttypecode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 33\n    }\n  }), props.selectedRecord[\"nreporttypecode\"] && props.selectedRecord[\"nreporttypecode\"]['item'].isneedregtype === transactionStatus.YES ? /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"nsampletypecode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_SAMPLETYPE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.sampleTypeList || [] //options={ props.selectedRecord[\"nreporttypecode\"]['item'].nreporttypecode === reportTypeEnum.SAMPLE?props.regType:props.regTypeList || []}\n    ,\n    value: props.selectedRecord[\"nsampletypecode\"] || \"\",\n    isMandatory: true,\n    isMulti: false,\n    isClearable: false,\n    isSearchable: true,\n    isDisabled: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"nsampletypecode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 57\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"nregtypecode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_REGTYPE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.regTypeList || [] //options={ props.selectedRecord[\"nreporttypecode\"]['item'].nreporttypecode === reportTypeEnum.SAMPLE?props.regType:props.regTypeList || []}\n    ,\n    value: props.selectedRecord[\"nregtypecode\"] || \"\",\n    isMandatory: true,\n    isMulti: false,\n    isClearable: false,\n    isSearchable: true,\n    isDisabled: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"nregtypecode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 57\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"nregsubtypecode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_REGSUBTYPE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.regSubTypeList || [],\n    value: props.selectedRecord[\"nregsubtypecode\"] || \"\",\n    isMandatory: true,\n    isMulti: false,\n    isClearable: false,\n    isSearchable: true,\n    isDisabled: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"nregsubtypecode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 57\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"napproveconfversioncode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_APPROVECONFIGVERSION\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.ApproveConfigList || [],\n    value: props.selectedRecord[\"napproveconfversioncode\"] || \"\",\n    isMandatory: true,\n    isMulti: false,\n    isClearable: false,\n    isSearchable: true,\n    isDisabled: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"napproveconfversioncode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 57\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"ncoareporttypecode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_REPORTSUBTYPE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.coaReportTypeList || [],\n    value: props.selectedRecord[\"ncoareporttypecode\"] || \"\",\n    isMandatory: true,\n    isMulti: false,\n    isClearable: false,\n    isSearchable: true,\n    isDisabled: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"ncoareporttypecode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 57\n    }\n  })), props.selectedRecord[\"isneedsection\"] || (props.selectedRecord[\"ncoareporttypecode\"] && props.selectedRecord[\"ncoareporttypecode\"].item.isneedsection) === transactionStatus.YES ? /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"nsectioncode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_SECTION\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.sectionList || [],\n    value: props.selectedRecord[\"nsectioncode\"] || \"\",\n    isMandatory: true,\n    isMulti: false,\n    isClearable: false,\n    isSearchable: true,\n    isDisabled: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"nsectioncode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 65\n    }\n  })) : \"\") : \"\", props.selectedRecord[\"nreporttypecode\"] && (props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COA || props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COAPREVIEW || props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COAPRELIMINARY) && props.selectedRecord[\"nsampletypecode\"] && props.selectedRecord[\"nsampletypecode\"].value !== SampleType.CLINICALTYPE ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"nreporttemplatecode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_REPORTTEMPLATE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.reportTemplateList || [],\n    value: props.selectedRecord[\"nreporttemplatecode\"] || \"\",\n    isMandatory: true,\n    isMulti: false,\n    isClearable: false,\n    isSearchable: true,\n    isDisabled: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"nreporttemplatecode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 41\n    }\n  }) : \"\", props.selectedRecord[\"nreporttypecode\"] && props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SCREENWISE ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"nformcode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_SCREENNAME\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.controlScreen || [],\n    value: props.selectedRecord[\"nformcode\"] || \"\",\n    isMandatory: true,\n    isMulti: false,\n    isClearable: false,\n    isSearchable: true,\n    isDisabled: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"nformcode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 43\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"ncontrolcode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_CONTROLNAME\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.controlButton || [],\n    value: props.selectedRecord[\"ncontrolcode\"] || \"\",\n    isMandatory: true,\n    isMulti: false,\n    isClearable: false,\n    isSearchable: true,\n    isDisabled: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"ncontrolcode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 49\n    }\n  })) : \"\", props.selectedRecord[\"nreporttypecode\"] && props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.MIS ? /*#__PURE__*/React.createElement(ReactSelectAddEdit, {\n    name: \"nreportmodulecode\",\n    label: props.intl.formatMessage({\n      id: \"IDS_MODULENAME\"\n    }),\n    className: \"color-select\",\n    classNamePrefix: \"react-select\",\n    optionId: \"nreportmodulecode\",\n    optionValue: \"sdisplayname\",\n    options: props.reportModuleList || [],\n    isMandatory: true,\n    getValue: value => props.onComboChange(value, \"nreportmodulecode\"),\n    value: props.selectedRecord[\"nreportmodulecode\"] ? props.selectedRecord[\"nreportmodulecode\"] : \"\" // defaultValue={props.selectedRecord? props.selectedRecord[\"sparametername\"]:\"\"}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 41\n    }\n  }) : \"\", props.selectedRecord[\"nreporttypecode\"] && (props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH || props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE) ? /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"ncertificatetypecode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_CERTIFICATETYPE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.certificateTypeList || [],\n    value: props.selectedRecord[\"ncertificatetypecode\"] || \"\",\n    isMandatory: true,\n    isMulti: false,\n    isClearable: false,\n    isSearchable: true,\n    isDisabled: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"ncertificatetypecode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 57\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_REPORTBATCHTYPE\"\n    }),\n    name: \"sbatchdisplayname\",\n    type: \"text\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_REPORTBATCHTYPE\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"sbatchdisplayname\"] : \"\",\n    isMandatory: false,\n    required: false,\n    readOnly: true,\n    onChange: event => props.onInputOnChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 57\n    }\n  }))) : \"\", /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_REPORTNAME\"\n    }),\n    name: \"sreportname\",\n    type: \"text\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_REPORTNAME\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"sreportname\"] : \"\",\n    isMandatory: true,\n    required: true,\n    maxLength: 100,\n    readOnly: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    onChange: event => props.onInputOnChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(FormTextarea, {\n    name: \"sdescription\",\n    label: props.intl.formatMessage({\n      id: \"IDS_DESCRIPTION\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_DESCRIPTION\"\n    }),\n    value: props.selectedRecord[\"sdescription\"] || \"\",\n    rows: \"2\",\n    isMandatory: false,\n    required: false,\n    maxLength: 255,\n    isDisabled: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    onChange: event => props.onInputOnChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 33\n    }\n  }), props.selectedRecord[\"nreporttypecode\"] && props.selectedRecord[\"nreporttypecode\"].value === REPORTTYPE.CONTROLBASED && props.operation !== 'update' //||  props.selectedRecord[\"nreporttypecode\"].value === REPORTTYPE.COAPREVIEW\n  ? /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, {\n    name: \"sreportformatdetail\",\n    type: \"radio\",\n    id: \"Addviewer\",\n    label: props.intl.formatMessage({\n      id: \"IDS_VIEWER\"\n    }),\n    inline: true,\n    value: \"viewer\",\n    onChange: event => props.onInputOnChange(event),\n    checked: sreportformatdetail === \"viewer\" ? true : false,\n    disabled: props.operation === \"update\" ? ' ' : disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    name: \"sreportformatdetail\",\n    type: \"radio\",\n    id: \"AddPDF\",\n    label: props.intl.formatMessage({\n      id: \"IDS_PDF\"\n    }),\n    inline: true,\n    value: \"pdf\",\n    defaultChecked: true,\n    onChange: event => props.onInputOnChange(event) //checked={sreportformat === \"pdf\" ? true : false}\n    ,\n    checked: sreportformatdetail === \"pdf\" ? true : sreportformatdetail === undefined ? true : false,\n    readOnly: props.operation === \"update\" ? true : false,\n    disabled: props.operation === \"update\" ? ' ' : disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    name: \"sreportformatdetail\",\n    type: \"radio\",\n    id: \"Addhtml\",\n    label: props.intl.formatMessage({\n      id: \"IDS_HTML\"\n    }),\n    inline: true,\n    value: \"html\",\n    onChange: event => props.onInputOnChange(event),\n    checked: sreportformatdetail === \"html\" ? true : false,\n    disabled: props.operation === \"update\" ? ' ' : disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    name: \"sreportformatdetail\",\n    type: \"radio\",\n    id: \"AddXLS\",\n    label: props.intl.formatMessage({\n      id: \"IDS_XLS\"\n    }),\n    inline: true,\n    value: \"xls\",\n    onChange: event => props.onInputOnChange(event),\n    checked: sreportformatdetail === \"xls\" ? true : false,\n    disabled: props.operation === \"update\" ? ' ' : disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    name: \"sreportformatdetail\",\n    type: \"radio\",\n    id: \"AddDOC\",\n    label: props.intl.formatMessage({\n      id: \"IDS_DOC\"\n    }),\n    inline: true,\n    value: \"doc\",\n    onChange: event => props.onInputOnChange(event),\n    checked: sreportformatdetail === \"doc\" ? true : false,\n    disabled: props.operation === \"update\" ? ' ' : disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 49\n    }\n  })) : \"\", /*#__PURE__*/React.createElement(CustomSwitch, {\n    name: \"ntransactionstatus\",\n    type: \"switch\",\n    label: props.intl.formatMessage({\n      id: \"IDS_ISACTIVE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_ISACTIVE\"\n    }),\n    value: props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true : false,\n    isMandatory: false,\n    required: false,\n    checked: props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true : false,\n    onChange: event => props.onInputOnChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 33\n    }\n  }), props.operation === \"create\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CustomSwitch, {\n    name: \"nisplsqlquery\",\n    type: \"switch\",\n    label: props.intl.formatMessage({\n      id: \"IDS_ISPLSQLQUERY\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_ISPLSQLQUERY\"\n    }),\n    value: props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true : false,\n    isMandatory: false,\n    required: false,\n    checked: props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true : false,\n    onChange: event => props.onInputOnChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 41\n    }\n  }), Object.keys(props.selectedRecord).length > 0 && /*#__PURE__*/React.createElement(DropZone, {\n    label: props.intl.formatMessage({\n      id: \"IDS_FILE\"\n    }),\n    maxFiles: 1,\n    accept: \".jrxml,.mrt\",\n    minSize: 0,\n    maxSize: 10,\n    fileNameLength: 150,\n    onDrop: event => props.onDropImage(event, \"sfilename\", 1),\n    multiple: false,\n    isMandatory: true,\n    editFiles: props.selectedRecord ? props.selectedRecord : {},\n    attachmentTypeCode: props.operation === \"update\" ? attachmentType.OTHERS : \"\",\n    fileName: \"sfilename\",\n    deleteAttachment: () => props.deleteFile(\"sfilename\"),\n    actionType: props.actionType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 49\n    }\n  })) : \"\"));\n};\n\nexport default injectIntl(AddReportMaster);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/reports/reportsconfig/AddReportMaster.js"],"names":["React","Row","Col","injectIntl","transactionStatus","attachmentType","reportTypeEnum","REPORTTYPE","SampleType","CustomSwitch","DropZone","FormTextarea","FormInput","FormSelectSearch","ReactSelectAddEdit","Form","AddReportMaster","props","sreportformatdetail","disabled","selectedRecord","isReportTypeDisabled","operation","filterReportType","nreporttypecode","intl","formatMessage","id","reportTypeList","event","onComboChange","isneedregtype","YES","sampleTypeList","reportVersionStatus","APPROVED","regTypeList","regSubTypeList","ApproveConfigList","coaReportTypeList","item","isneedsection","sectionList","value","COA","COAPREVIEW","COAPRELIMINARY","CLINICALTYPE","reportTemplateList","SCREENWISE","controlScreen","controlButton","MIS","reportModuleList","BATCH","SAMPLE","certificateTypeList","onInputOnChange","CONTROLBASED","undefined","ACTIVE","Object","keys","length","onDropImage","OTHERS","deleteFile","actionType"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { transactionStatus, attachmentType, reportTypeEnum, REPORTTYPE, SampleType } from '../../../components/Enumeration';\r\nimport CustomSwitch from '../../../components/custom-switch/custom-switch.component';\r\nimport DropZone from '../../../components/dropzone/dropzone.component';\r\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\r\nimport FormInput from '../../../components/form-input/form-input.component';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\nimport ReactSelectAddEdit from '../../../components/react-select-add-edit/react-select-add-edit-component'\r\nimport { Form } from 'react-bootstrap';\r\n\r\n\r\n\r\n\r\nconst AddReportMaster = (props) => {\r\n        //console.log(\"propsiin reportmaster:\", props.selectedRecord)\r\n        const { sreportformatdetail, disabled } = props.selectedRecord;\r\n\r\n        let isReportTypeDisabled = false;\r\n        if (props.operation === \"update\") {\r\n                isReportTypeDisabled = true;\r\n        }\r\n        else {\r\n                if (props.filterReportType && props.filterReportType.nreporttypecode !== 0) {\r\n                        isReportTypeDisabled = true;\r\n                }\r\n        }\r\n        return (\r\n                <Row>\r\n                        <Col md={12}>\r\n                                <FormSelectSearch\r\n                                        name={\"nreporttypecode\"}\r\n                                        formLabel={props.intl.formatMessage({ id: \"IDS_REPORTTYPE\" })}\r\n                                        placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                        options={props.reportTypeList || []}\r\n                                        value={props.selectedRecord[\"nreporttypecode\"] || \"\"}\r\n                                        isMandatory={true}\r\n                                        isMulti={false}\r\n                                        isClearable={false}\r\n                                        isSearchable={true}\r\n                                        //isDisabled={props.operation === \"update\"}\r\n                                        isDisabled={isReportTypeDisabled}\r\n                                        closeMenuOnSelect={true}\r\n                                        onChange={(event) => props.onComboChange(event, \"nreporttypecode\")}\r\n                                />\r\n                                {props.selectedRecord[\"nreporttypecode\"] &&\r\n                                        props.selectedRecord[\"nreporttypecode\"]['item'].isneedregtype === transactionStatus.YES ?\r\n                                        <Row>\r\n                                                <Col md={6}>\r\n                                                        <FormSelectSearch\r\n                                                                name={\"nsampletypecode\"}\r\n                                                                formLabel={props.intl.formatMessage({ id: \"IDS_SAMPLETYPE\" })}\r\n                                                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                options={props.sampleTypeList || []}\r\n                                                                //options={ props.selectedRecord[\"nreporttypecode\"]['item'].nreporttypecode === reportTypeEnum.SAMPLE?props.regType:props.regTypeList || []}\r\n                                                                value={props.selectedRecord[\"nsampletypecode\"] || \"\"}\r\n                                                                isMandatory={true}\r\n                                                                isMulti={false}\r\n                                                                isClearable={false}\r\n                                                                isSearchable={true}\r\n                                                                isDisabled={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                                                closeMenuOnSelect={true}\r\n                                                                onChange={(event) => props.onComboChange(event, \"nsampletypecode\")}\r\n                                                        />\r\n\r\n                                                </Col>\r\n\r\n                                                <Col md={6}>\r\n                                                        <FormSelectSearch\r\n                                                                name={\"nregtypecode\"}\r\n                                                                formLabel={props.intl.formatMessage({ id: \"IDS_REGTYPE\" })}\r\n                                                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                options={props.regTypeList || []}\r\n                                                                //options={ props.selectedRecord[\"nreporttypecode\"]['item'].nreporttypecode === reportTypeEnum.SAMPLE?props.regType:props.regTypeList || []}\r\n                                                                value={props.selectedRecord[\"nregtypecode\"] || \"\"}\r\n                                                                isMandatory={true}\r\n                                                                isMulti={false}\r\n                                                                isClearable={false}\r\n                                                                isSearchable={true}\r\n                                                                isDisabled={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                                                closeMenuOnSelect={true}\r\n                                                                onChange={(event) => props.onComboChange(event, \"nregtypecode\")}\r\n                                                        />\r\n\r\n                                                </Col>\r\n\r\n                                                <Col md={6}>\r\n\r\n                                                        <FormSelectSearch\r\n                                                                name={\"nregsubtypecode\"}\r\n                                                                formLabel={props.intl.formatMessage({ id: \"IDS_REGSUBTYPE\" })}\r\n                                                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                options={props.regSubTypeList || []}\r\n                                                                value={props.selectedRecord[\"nregsubtypecode\"] || \"\"}\r\n                                                                isMandatory={true}\r\n                                                                isMulti={false}\r\n                                                                isClearable={false}\r\n                                                                isSearchable={true}\r\n                                                                isDisabled={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                                                closeMenuOnSelect={true}\r\n                                                                onChange={(event) => props.onComboChange(event, \"nregsubtypecode\")}\r\n                                                        />\r\n\r\n                                                </Col>\r\n                                                <Col md={6}>\r\n\r\n                                                        <FormSelectSearch\r\n                                                                name={\"napproveconfversioncode\"}\r\n                                                                formLabel={props.intl.formatMessage({ id: \"IDS_APPROVECONFIGVERSION\" })}\r\n                                                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                options={props.ApproveConfigList || []}\r\n                                                                value={props.selectedRecord[\"napproveconfversioncode\"] || \"\"}\r\n                                                                isMandatory={true}\r\n                                                                isMulti={false}\r\n                                                                isClearable={false}\r\n                                                                isSearchable={true}\r\n                                                                isDisabled={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                                                closeMenuOnSelect={true}\r\n                                                                onChange={(event) => props.onComboChange(event, \"napproveconfversioncode\")}\r\n                                                        />\r\n                                                </Col>\r\n                                                <Col md={6}>\r\n                                                        <FormSelectSearch\r\n                                                                name={\"ncoareporttypecode\"}\r\n                                                                formLabel={props.intl.formatMessage({ id: \"IDS_REPORTSUBTYPE\" })}\r\n                                                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                options={props.coaReportTypeList || []}\r\n                                                                value={props.selectedRecord[\"ncoareporttypecode\"] || \"\"}\r\n                                                                isMandatory={true}\r\n                                                                isMulti={false}\r\n                                                                isClearable={false}\r\n                                                                isSearchable={true}\r\n                                                                isDisabled={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                                                closeMenuOnSelect={true}\r\n                                                                onChange={(event) => props.onComboChange(event, \"ncoareporttypecode\")}\r\n                                                        />\r\n                                                </Col>\r\n\r\n                                                {/* <Col md={6}>\r\n                                                <CustomSwitch\r\n                                                name={\"isneedsection\"}\r\n                                                type=\"switch\"\r\n                                                label={props.intl.formatMessage({ id: \"IDS_NEEDSECTION\" })}\r\n                                                placeholder={props.intl.formatMessage({ id: \"IDS_NEEDSECTION\" })}\r\n                                                value={(props.selectedRecord[\"isneedsection\"] || props.selectedRecord[\"ncoareporttypecode\"] &&\r\n                                                props.selectedRecord[\"ncoareporttypecode\"].item && props.selectedRecord[\"ncoareporttypecode\"].item.isneedsection) === transactionStatus.YES ? true : false}\r\n                                                isMandatory={false}\r\n                                                required={false}\r\n                                                checked={(props.selectedRecord[\"isneedsection\"] || props.selectedRecord[\"ncoareporttypecode\"] &&\r\n                                                props.selectedRecord[\"ncoareporttypecode\"].item && props.selectedRecord[\"ncoareporttypecode\"].item.isneedsection) === transactionStatus.YES ? true : false}\r\n                                                disabled={(props.selectedRecord[\"isneedsection\"] || props.selectedRecord[\"ncoareporttypecode\"] &&\r\n                                                props.selectedRecord[\"ncoareporttypecode\"].item && props.selectedRecord[\"ncoareporttypecode\"].item.isneedsection) === transactionStatus.YES ? false : true}\r\n                                                onChange={(event) => props.onInputOnChange(event)}\r\n                                        />\r\n                                                </Col> */}\r\n                                                {(props.selectedRecord[\"isneedsection\"] || (props.selectedRecord[\"ncoareporttypecode\"] && props.selectedRecord[\"ncoareporttypecode\"].item.isneedsection) === transactionStatus.YES) ?\r\n                                                        <Col md={6}>\r\n                                                                <FormSelectSearch\r\n                                                                        name={\"nsectioncode\"}\r\n                                                                        formLabel={props.intl.formatMessage({ id: \"IDS_SECTION\" })}\r\n                                                                        placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                        options={props.sectionList || []}\r\n                                                                        value={props.selectedRecord[\"nsectioncode\"] || \"\"}\r\n                                                                        isMandatory={true}\r\n                                                                        isMulti={false}\r\n                                                                        isClearable={false}\r\n                                                                        isSearchable={true}\r\n                                                                        isDisabled={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                                                        closeMenuOnSelect={true}\r\n                                                                        onChange={(event) => props.onComboChange(event, \"nsectioncode\")}\r\n                                                                />\r\n\r\n                                                        </Col> : \"\"}\r\n                                        </Row>\r\n                                        : \"\"}\r\n\r\n                                {/* {props.selectedRecord[\"nreporttypecode\"] && props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COA\r\n                                        && props.selectedRecord[\"ncoareporttypecode\"] && props.selectedRecord[\"ncoareporttypecode\"].value === reportCOAType.PROJECTWISE\r\n                                        || props.selectedRecord[\"nreporttypecode\"] && props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COAPREVIEW\r\n                                        && props.selectedRecord[\"ncoareporttypecode\"] && props.selectedRecord[\"ncoareporttypecode\"].value === reportCOAType.PROJECTWISE\r\n                                        || props.selectedRecord[\"nreporttypecode\"] && props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COAPRELIMINARY\r\n                                        && props.selectedRecord[\"ncoareporttypecode\"] && props.selectedRecord[\"ncoareporttypecode\"].value === reportCOAType.PROJECTWISE ? */}\r\n                                { (props.selectedRecord[\"nreporttypecode\"] && (props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COA \r\n                                        || props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COAPREVIEW \r\n                                        || props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COAPRELIMINARY ))\r\n                                        && props.selectedRecord[\"nsampletypecode\"] && props.selectedRecord[\"nsampletypecode\"].value !== SampleType.CLINICALTYPE ?\r\n                                        <FormSelectSearch\r\n                                                name={\"nreporttemplatecode\"}\r\n                                                formLabel={props.intl.formatMessage({ id: \"IDS_REPORTTEMPLATE\" })}\r\n                                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                options={props.reportTemplateList || []}\r\n                                                value={props.selectedRecord[\"nreporttemplatecode\"] || \"\"}\r\n                                                isMandatory={true}\r\n                                                isMulti={false}\r\n                                                isClearable={false}\r\n                                                isSearchable={true}\r\n                                                isDisabled={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                                closeMenuOnSelect={true}\r\n                                                onChange={(event) => props.onComboChange(event, \"nreporttemplatecode\")}\r\n                                        />\r\n                                        : \"\"\r\n                                }\r\n                                        {/* : \"\"\r\n                                } */}\r\n\r\n\r\n                                {props.selectedRecord[\"nreporttypecode\"] &&\r\n                                        props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SCREENWISE ?\r\n                                        <><FormSelectSearch\r\n                                                name={\"nformcode\"}\r\n                                                formLabel={props.intl.formatMessage({ id: \"IDS_SCREENNAME\" })}\r\n                                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                options={props.controlScreen || []}\r\n                                                value={props.selectedRecord[\"nformcode\"] || \"\"}\r\n                                                isMandatory={true}\r\n                                                isMulti={false}\r\n                                                isClearable={false}\r\n                                                isSearchable={true}\r\n                                                isDisabled={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                                closeMenuOnSelect={true}\r\n                                                onChange={(event) => props.onComboChange(event, \"nformcode\")}\r\n                                        />\r\n                                                <FormSelectSearch\r\n                                                        name={\"ncontrolcode\"}\r\n                                                        formLabel={props.intl.formatMessage({ id: \"IDS_CONTROLNAME\" })}\r\n                                                        placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                        options={props.controlButton || []}\r\n                                                        value={props.selectedRecord[\"ncontrolcode\"] || \"\"}\r\n                                                        isMandatory={true}\r\n                                                        isMulti={false}\r\n                                                        isClearable={false}\r\n                                                        isSearchable={true}\r\n                                                        isDisabled={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                                        closeMenuOnSelect={true}\r\n                                                        onChange={(event) => props.onComboChange(event, \"ncontrolcode\")}\r\n                                                />\r\n                                        </>\r\n                                        : \"\"}\r\n\r\n\r\n                                {props.selectedRecord[\"nreporttypecode\"] &&\r\n                                        props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.MIS ?\r\n\r\n                                        <ReactSelectAddEdit\r\n                                                name=\"nreportmodulecode\"\r\n                                                label={props.intl.formatMessage({ id: \"IDS_MODULENAME\" })}\r\n                                                className=\"color-select\"\r\n                                                classNamePrefix=\"react-select\"\r\n                                                optionId=\"nreportmodulecode\"\r\n                                                optionValue=\"sdisplayname\"\r\n                                                options={props.reportModuleList || []}\r\n                                                isMandatory={true}\r\n                                                getValue={value => props.onComboChange(value, \"nreportmodulecode\")}\r\n                                                value={props.selectedRecord[\"nreportmodulecode\"] ? props.selectedRecord[\"nreportmodulecode\"] : \"\"}\r\n                                        // defaultValue={props.selectedRecord? props.selectedRecord[\"sparametername\"]:\"\"}\r\n                                        />\r\n                                        : \"\"}\r\n\r\n                                {props.selectedRecord[\"nreporttypecode\"] &&\r\n                                        (props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH\r\n                                                || props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE) ?\r\n                                        <Row>\r\n                                                <Col md={6}>\r\n                                                        <FormSelectSearch\r\n                                                                name={\"ncertificatetypecode\"}\r\n                                                                formLabel={props.intl.formatMessage({ id: \"IDS_CERTIFICATETYPE\" })}\r\n                                                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                options={props.certificateTypeList || []}\r\n                                                                value={props.selectedRecord[\"ncertificatetypecode\"] || \"\"}\r\n                                                                isMandatory={true}\r\n                                                                isMulti={false}\r\n                                                                isClearable={false}\r\n                                                                isSearchable={true}\r\n                                                                isDisabled={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                                                closeMenuOnSelect={true}\r\n                                                                onChange={(event) => props.onComboChange(event, \"ncertificatetypecode\")}\r\n                                                        />\r\n                                                </Col>\r\n                                                <Col md={6}>\r\n                                                        <FormInput\r\n                                                                label={props.intl.formatMessage({ id: \"IDS_REPORTBATCHTYPE\" })}\r\n                                                                name={\"sbatchdisplayname\"}\r\n                                                                type=\"text\"\r\n                                                                placeholder={props.intl.formatMessage({ id: \"IDS_REPORTBATCHTYPE\" })}\r\n                                                                value={props.selectedRecord ? props.selectedRecord[\"sbatchdisplayname\"] : \"\"}\r\n                                                                isMandatory={false}\r\n                                                                required={false}\r\n                                                                readOnly={true}\r\n                                                                onChange={(event) => props.onInputOnChange(event)}\r\n                                                        />\r\n                                                </Col>\r\n                                        </Row>\r\n\r\n                                        : \"\"}\r\n\r\n                                <FormInput\r\n                                        label={props.intl.formatMessage({ id: \"IDS_REPORTNAME\" })}\r\n                                        name={\"sreportname\"}\r\n                                        type=\"text\"\r\n                                        placeholder={props.intl.formatMessage({ id: \"IDS_REPORTNAME\" })}\r\n                                        value={props.selectedRecord ? props.selectedRecord[\"sreportname\"] : \"\"}\r\n                                        isMandatory={true}\r\n                                        required={true}\r\n                                        maxLength={100}\r\n                                        readOnly={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                        onChange={(event) => props.onInputOnChange(event)}\r\n                                />\r\n\r\n                                <FormTextarea\r\n                                        name={\"sdescription\"}\r\n                                        label={props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                                        placeholder={props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                                        value={props.selectedRecord[\"sdescription\"] || \"\"}\r\n                                        rows=\"2\"\r\n                                        isMandatory={false}\r\n                                        required={false}\r\n                                        maxLength={255}\r\n                                        isDisabled={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                        onChange={(event) => props.onInputOnChange(event)}\r\n                                />\r\n\r\n                                {/* {props.selectedRecord[\"nreporttypecode\"] &&\r\n                                (props.selectedRecord[\"nreporttypecode\"].value === REPORTTYPE.COAREPORT || \r\n                                props.operation !=='update'\r\n                                //props.selectedRecord[\"nreporttypecode\"].value === REPORTTYPE.CONTROLBASED ||\r\n                                //props.selectedRecord[\"nreporttypecode\"].value === REPORTTYPE.COAPREVIEW\r\n                                ) ? */}\r\n\r\n                                {props.selectedRecord[\"nreporttypecode\"] &&\r\n                                        (props.selectedRecord[\"nreporttypecode\"].value === REPORTTYPE.CONTROLBASED && props.operation !== 'update'\r\n                                                //||  props.selectedRecord[\"nreporttypecode\"].value === REPORTTYPE.COAPREVIEW\r\n                                        ) ?\r\n\r\n                                        <Form.Group>\r\n\r\n                                                <Form.Check\r\n                                                        name=\"sreportformatdetail\"\r\n                                                        type=\"radio\"\r\n                                                        id=\"Addviewer\"\r\n                                                        label={props.intl.formatMessage({ id: \"IDS_VIEWER\" })}\r\n                                                        inline={true}\r\n                                                        value='viewer'\r\n                                                        onChange={(event) => props.onInputOnChange(event)}\r\n                                                        checked={sreportformatdetail === \"viewer\" ? true : false}\r\n                                                        disabled={props.operation === \"update\" ? ' ' : disabled}\r\n                                                >\r\n                                                </Form.Check>\r\n\r\n                                                {/* {props.selectedRecord[\"nreporttypecode\"] &&\r\n                                props.selectedRecord[\"nreporttypecode\"].value !== REPORTTYPE.COAPREVIEW ? \r\n                                <> \r\n                                 {props.selectedRecord[\"nreporttypecode\"] &&\r\n                                (props.selectedRecord[\"nreporttypecode\"].value === REPORTTYPE.CONTROLBASED \r\n                                || props.operation !=='update'\r\n                                //||  props.selectedRecord[\"nreporttypecode\"].value === REPORTTYPE.COAPREVIEW\r\n                                ) ? <>  */}\r\n                                                <Form.Check\r\n                                                        name=\"sreportformatdetail\"\r\n                                                        type=\"radio\"\r\n                                                        id=\"AddPDF\"\r\n                                                        label={props.intl.formatMessage({ id: \"IDS_PDF\" })}\r\n                                                        inline={true}\r\n                                                        value='pdf'\r\n                                                        defaultChecked\r\n                                                        onChange={(event) => props.onInputOnChange(event)}\r\n                                                        //checked={sreportformat === \"pdf\" ? true : false}\r\n                                                        checked={sreportformatdetail === \"pdf\" ? true : sreportformatdetail === undefined ? true : false}\r\n                                                        readOnly={props.operation === \"update\" ? true : false}\r\n                                                        disabled={props.operation === \"update\" ? ' ' : disabled}\r\n                                                >\r\n                                                </Form.Check>\r\n\r\n                                                <Form.Check\r\n                                                        name=\"sreportformatdetail\"\r\n                                                        type=\"radio\"\r\n                                                        id=\"Addhtml\"\r\n                                                        label={props.intl.formatMessage({ id: \"IDS_HTML\" })}\r\n                                                        inline={true}\r\n                                                        value='html'\r\n                                                        onChange={(event) => props.onInputOnChange(event)}\r\n                                                        checked={sreportformatdetail === \"html\" ? true : false}\r\n                                                        disabled={props.operation === \"update\" ? ' ' : disabled}\r\n                                                >\r\n                                                </Form.Check>\r\n\r\n                                                <Form.Check\r\n                                                        name=\"sreportformatdetail\"\r\n                                                        type=\"radio\"\r\n                                                        id=\"AddXLS\"\r\n                                                        label={props.intl.formatMessage({ id: \"IDS_XLS\" })}\r\n                                                        inline={true}\r\n                                                        value='xls'\r\n                                                        onChange={(event) => props.onInputOnChange(event)}\r\n                                                        checked={sreportformatdetail === \"xls\" ? true : false}\r\n                                                        disabled={props.operation === \"update\" ? ' ' : disabled}\r\n                                                >\r\n                                                </Form.Check>\r\n\r\n                                                <Form.Check\r\n                                                        name=\"sreportformatdetail\"\r\n                                                        type=\"radio\"\r\n                                                        id=\"AddDOC\"\r\n                                                        label={props.intl.formatMessage({ id: \"IDS_DOC\" })}\r\n                                                        inline={true}\r\n                                                        value='doc'\r\n                                                        onChange={(event) => props.onInputOnChange(event)}\r\n                                                        checked={sreportformatdetail === \"doc\" ? true : false}\r\n                                                        disabled={props.operation === \"update\" ? ' ' : disabled}\r\n                                                >\r\n                                                </Form.Check>\r\n\r\n                                        </Form.Group>\r\n                                        : \"\"}\r\n                                        \r\n                                        \r\n\r\n                                {/* <Form.Group>\r\n                    <Form.Check\r\n                        name=\"nattachmenttypecode\"\r\n                        type=\"radio\"\r\n                        id=\"AddFiles\"\r\n                        label={props.intl.formatMessage({ id: \"IDS_FTP\" })}\r\n                        inline={true}\r\n                        onChange={(event) => props.onInputOnChange(event, 1, attachmentType.FTP)}\r\n                        checked={nattachmenttypecode === attachmentType.FTP ? true : false}\r\n                        disabled={disabled}\r\n                    >\r\n                    </Form.Check>\r\n                    <Form.Check\r\n                        name=\"nattachmenttypecode\"\r\n                        type=\"radio\"\r\n                        id=\"AddLink\"\r\n                        label={props.intl.formatMessage({ id: \"IDS_LINK\" })}\r\n                        inline={true}\r\n                        onChange={(event) => props.onInputOnChange(event,  attachmentType.LINK)}\r\n                        checked={nattachmenttypecode === attachmentType.LINK ? true : false}\r\n                        disabled={disabled}\r\n                    >\r\n                    </Form.Check>\r\n                </Form.Group> */}\r\n\r\n\r\n\r\n\r\n                                <CustomSwitch\r\n                                        name={\"ntransactionstatus\"}\r\n                                        type=\"switch\"\r\n                                        label={props.intl.formatMessage({ id: \"IDS_ISACTIVE\" })}\r\n                                        placeholder={props.intl.formatMessage({ id: \"IDS_ISACTIVE\" })}\r\n                                        value={props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true : false}\r\n                                        isMandatory={false}\r\n                                        required={false}\r\n                                        checked={props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true : false}\r\n                                        onChange={(event) => props.onInputOnChange(event)}\r\n                                />\r\n                                {props.operation === \"create\" ? <>\r\n\r\n                                        <CustomSwitch\r\n                                                name={\"nisplsqlquery\"}\r\n                                                type=\"switch\"\r\n                                                label={props.intl.formatMessage({ id: \"IDS_ISPLSQLQUERY\" })}\r\n                                                placeholder={props.intl.formatMessage({ id: \"IDS_ISPLSQLQUERY\" })}\r\n                                                value={props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true : false}\r\n                                                isMandatory={false}\r\n                                                required={false}\r\n                                                checked={props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true : false}\r\n                                                onChange={(event) => props.onInputOnChange(event)}\r\n                                        />\r\n\r\n                                        {Object.keys(props.selectedRecord).length > 0 &&\r\n\r\n                                                <DropZone\r\n                                                        label={props.intl.formatMessage({ id: \"IDS_FILE\" })}\r\n                                                        maxFiles={1}\r\n                                                        accept=\".jrxml,.mrt\"\r\n                                                        minSize={0}\r\n                                                        maxSize={10}\r\n                                                        fileNameLength={150}\r\n                                                        onDrop={(event) => props.onDropImage(event, \"sfilename\", 1)}\r\n                                                        multiple={false}\r\n                                                        isMandatory={true}\r\n                                                        editFiles={props.selectedRecord ? props.selectedRecord : {}}\r\n                                                        attachmentTypeCode={props.operation === \"update\" ? attachmentType.OTHERS : \"\"}\r\n                                                        fileName=\"sfilename\"\r\n                                                        deleteAttachment={() => props.deleteFile(\"sfilename\")}\r\n                                                        actionType={props.actionType}\r\n                                                />\r\n\r\n                                        }\r\n                                </>\r\n                                        : \"\"}\r\n                        </Col>\r\n                </Row>\r\n        )\r\n}\r\n\r\nexport default injectIntl(AddReportMaster);"]},"metadata":{},"sourceType":"module"}