{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\QuaLISWeb\\\\src\\\\pages\\\\ResultEntryBySample\\\\ResultEntryMaterialForm.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { intl } from '../../components/App';\nimport { injectIntl } from 'react-intl';\nimport { MediaHeader } from '../../components/App.styles';\nimport FormInput from '../../components/form-input/form-input.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { updateStore } from '../../actions';\nimport { connect } from 'react-redux';\nimport { constructOptionList } from '../../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport rsapi from '../../rsapi';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport Preloader from '../../components/preloader/preloader.component';\n\nclass ResultEntryMaterialForm extends React.Component {\n  //    const ResultEntryMaterialForm = (this.props) => {\n  constructor(props) {\n    super(props);\n\n    this.onInputOnChange = (event, name) => {\n      const selectedRecordMaterialForm = this.state.selectedRecordMaterialForm || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecordMaterialForm[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecordMaterialForm[event.target.name] = event.target.value;\n      }\n\n      switch (name) {\n        case 'ntestgroupmaterial':\n          const ntestgrouptestcode = selectedRecordMaterialForm.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1; //this.props.\n\n          this.getREMaterialComboGet({\n            ntestgroupmaterial: selectedRecordMaterialForm.ntestgroupmaterial,\n            ntestgrouptestcode,\n            RESelectedTest: this.props.Login.masterData.RESelectedTest,\n            test: this.props.Login.masterData.RESelectedTest[0],\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        default:\n          //Sync Child Component data with Parent Component     \n          this.props.onChildDataChange(selectedRecordMaterialForm);\n          this.setState({\n            selectedRecordMaterialForm\n          });\n      }\n    };\n\n    this.onMaterialComboChange = (comboData, comboName) => {\n      const selectedRecordMaterialForm = this.state.selectedRecordMaterialForm || [];\n      const ntestgrouptestcode = selectedRecordMaterialForm.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1;\n\n      if (comboData) {\n        selectedRecordMaterialForm[comboName] = comboData;\n      } else {\n        selectedRecordMaterialForm[comboName] = [];\n      }\n\n      switch (comboName) {\n        case 'nmaterialtypecode':\n          this.getREMaterialCategoryByType({\n            ntestgrouptestcode,\n            selectedRecordMaterialForm,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        case 'nmaterialcatcode':\n          selectedRecordMaterialForm['nsectioncode'] = selectedRecordMaterialForm.nmaterialcatcode.item.needSectionwise == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].nsectioncode : -1;\n          this.getREMaterialByCategory({\n            ntestgrouptestcode,\n            selectedRecordMaterialForm,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        case 'nmaterialcode':\n          this.getREMaterialInvertoryByMaterial({\n            ntestgrouptestcode,\n            selectedRecordMaterialForm,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        default:\n          this.getAvailableMaterialQuantity({\n            ntestgrouptestcode,\n            selectedRecordMaterialForm,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n      }\n    };\n\n    this.state = {\n      selectedRecordMaterialForm: this.props.Login.selectedRecordMaterialForm,\n      materialType: this.props.Login.materialType,\n      materialCategory: this.props.Login.materialCategory,\n      material: this.props.Login.material,\n      materialInventory: this.props.Login.materialInventory,\n      loading: false\n    };\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        isMaterialInitialRender: false\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.selectedRecordMaterialForm !== previousProps.selectedRecordMaterialForm) {\n      this.setState({\n        selectedRecordMaterialForm: this.props.selectedRecordMaterialForm\n      });\n    }\n\n    if (this.props.materialCategory !== previousProps.materialCategory) {\n      this.setState({\n        materialCategory: this.props.materialCategory\n      });\n    }\n\n    if (this.props.material !== previousProps.material) {\n      this.setState({\n        material: this.props.material\n      });\n    }\n\n    if (this.props.materialInventory !== previousProps.materialInventory) {\n      this.setState({\n        materialInventory: this.props.materialInventory\n      });\n    }\n  }\n\n  getREMaterialComboGet(inputData) {\n    // return function (dispatch) {\n    // dispatch(initRequest(true));\n    this.setState({\n      loading: true\n    });\n    rsapi.post(\"resultentrybysample/getResultUsedMaterialCombo\", {\n      userinfo: inputData.userInfo,\n      nsectioncode: inputData.test.nsectioncode,\n      ntestgrouptestcode: inputData.ntestgrouptestcode\n    }).then(response => {\n      const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\n      const materialType = materialTypeMap.get(\"OptionList\");\n      const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\n      const materialCategory = materialCatMap.get(\"OptionList\");\n      const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      const material = materialMap.get(\"OptionList\");\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\"); //  dispatch({\n      //     type: DEFAULT_RETURN,\n      //      payload:\n      //Sync Child Component data with Parent Component     \n\n      this.props.onChildDataChange({\n        ntestgroupmaterial: inputData.ntestgroupmaterial,\n        sarno: inputData.test.sarno,\n        ssamplearno: inputData.test.ssamplearno,\n        stestsynonym: inputData.test.stestsynonym,\n        nsectioncode: inputData.test.nsectioncode,\n        ssectionname: inputData.test.ssectionname,\n        transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n        ntransactiontestcode: inputData.test.ntransactiontestcode,\n        npreregno: inputData.test.npreregno,\n        nmaterialtypecode: materialTypeMap.get(\"DefaultValue\") ? materialTypeMap.get(\"DefaultValue\") : \"\",\n        nmaterialcatcode: materialCatMap.get(\"DefaultValue\") ? materialCatMap.get(\"DefaultValue\") : \"\",\n        nmaterialcode: materialMap.get(\"OptionList\").length > 0 ? materialMap.get(\"OptionList\")[0] : \"\",\n        nmaterialinventorycode: materialInventoryMap.get(\"OptionList\").length > 0 ? materialInventoryMap.get(\"OptionList\")[0] : \"\",\n        sunitname: response.data.MaterialInventory !== undefined && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].sunitname : \"\",\n        savailablequantity: response.data.MaterialInventory !== undefined && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].savailablequatity : \"\"\n      });\n      this.setState({\n        selectedId: null,\n        selectedRecordMaterialForm: {\n          ntestgroupmaterial: inputData.ntestgroupmaterial,\n          sarno: inputData.test.sarno,\n          ssamplearno: inputData.test.ssamplearno,\n          stestsynonym: inputData.test.stestsynonym,\n          nsectioncode: inputData.test.nsectioncode,\n          ssectionname: inputData.test.ssectionname,\n          transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n          ntransactiontestcode: inputData.test.ntransactiontestcode,\n          npreregno: inputData.test.npreregno,\n          nmaterialtypecode: materialTypeMap.get(\"DefaultValue\") ? materialTypeMap.get(\"DefaultValue\") : \"\",\n          nmaterialcatcode: materialCatMap.get(\"DefaultValue\") ? materialCatMap.get(\"DefaultValue\") : \"\",\n          nmaterialcode: materialMap.get(\"OptionList\").length > 0 ? materialMap.get(\"OptionList\")[0] : \"\",\n          nmaterialinventorycode: materialInventoryMap.get(\"OptionList\").length > 0 ? materialInventoryMap.get(\"OptionList\")[0] : \"\",\n          sunitname: response.data.MaterialInventory !== undefined && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].sunitname : \"\",\n          savailablequantity: response.data.MaterialInventory !== undefined && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].savailablequatity : \"\"\n        },\n        materialType,\n        materialCategory,\n        material,\n        materialInventory,\n        loading: false,\n        screenName: \"IDS_MATERIAL\",\n        openModal: true,\n        operation: \"create\",\n        loading: false\n      }); // })\n    }); // .catch(error => {\n    //     dispatch({\n    //         type: DEFAULT_RETURN,\n    //         payload: {\n    //             loading: false\n    //         }\n    //     })\n    //     if (error.response.status === 500) {\n    //         toast.error(error.message);\n    //     } else {\n    //         toast.warn(error.response.data);\n    //     }\n    // })\n    // }\n  }\n\n  getREMaterialByCategory(inputData) {\n    // return function (dispatch) {\n    //     dispatch(initRequest(true));\n    this.setState({\n      loading: true\n    });\n    rsapi.post(\"resultentrybysample/getREMaterialByCategory\", {\n      ntestgrouptestcode: inputData.ntestgrouptestcode,\n      nmaterialtypecode: inputData.selectedRecordMaterialForm.nmaterialtypecode.value,\n      nmaterialcatcode: inputData.selectedRecordMaterialForm.nmaterialcatcode.value,\n      nsectioncode: inputData.selectedRecordMaterialForm.nsectioncode,\n      userinfo: inputData.userInfo\n    }).then(response => {\n      const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      const material = materialMap.get(\"OptionList\");\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\"); // dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload:\n      //Sync Child Component data with Parent Component     \n\n      this.props.onChildDataChange({ ...inputData.selectedRecordMaterialForm,\n        nmaterialcode: materialMap.get(\"OptionList\")[0],\n        nmaterialinventorycode: materialInventoryMap.get(\"OptionList\")[0],\n        savailablequantity: response.data.MaterialInventory && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].savailablequatity : \"\",\n        sunitname: response.data.MaterialInventory && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].sunitname : \"\"\n      });\n      this.setState({\n        selectedId: null,\n        selectedRecordMaterialForm: { ...inputData.selectedRecordMaterialForm,\n          nmaterialcode: materialMap.get(\"OptionList\")[0],\n          nmaterialinventorycode: materialInventoryMap.get(\"OptionList\")[0],\n          savailablequantity: response.data.MaterialInventory && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].savailablequatity : \"\",\n          sunitname: response.data.MaterialInventory && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].sunitname : \"\"\n        },\n        material,\n        materialInventory,\n        loading: false\n      }); //  })\n    }); // .catch(error => {\n    //     dispatch({\n    //         type: DEFAULT_RETURN,\n    //         payload: {\n    //             loading: false\n    //         }\n    //     })\n    //     if (error.response.status === 500) {\n    //         toast.error(error.message);\n    //     } else {\n    //         toast.warn(error.response.data);\n    //     }\n    // })\n    // }\n  }\n\n  getREMaterialInvertoryByMaterial(inputData) {\n    // return function (dispatch) {\n    //     dispatch(initRequest(true));\n    this.setState({\n      loading: true\n    });\n    rsapi.post(\"resultentrybysample/getREMaterialInvertoryByMaterial\", {\n      ntestgrouptestcode: inputData.ntestgrouptestcode,\n      nmaterialcode: inputData.selectedRecordMaterialForm.nmaterialcode.value,\n      nsectioncode: inputData.selectedRecordMaterialForm.nsectioncode,\n      userinfo: inputData.userInfo\n    }).then(response => {\n      inputData.selectedRecordMaterialForm.nmaterialinventorycode && delete inputData.selectedRecordMaterialForm.nmaterialinventorycode;\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\"); // dispatch({\n      //    type: DEFAULT_RETURN,\n      //    payload:\n      //Sync Child Component data with Parent Component   \n\n      this.props.onChildDataChange({ ...inputData.selectedRecordMaterialForm,\n        nmaterialinventorycode: response.data.MaterialInventory ? materialInventoryMap.get(\"OptionList\")[0] : undefined,\n        sunitname: response.data.MaterialInventory && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].sunitname : \"\",\n        savailablequantity: response.data.MaterialInventory && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].savailablequatity : \"\"\n      });\n      this.setState({\n        selectedId: null,\n        selectedRecordMaterialForm: { ...inputData.selectedRecordMaterialForm,\n          nmaterialinventorycode: response.data.MaterialInventory ? materialInventoryMap.get(\"OptionList\")[0] : undefined,\n          sunitname: response.data.MaterialInventory && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].sunitname : \"\",\n          savailablequantity: response.data.MaterialInventory && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].savailablequatity : \"\"\n        },\n        materialInventory,\n        loading: false,\n        screenName: \"IDS_MATERIAL\",\n        openModal: true,\n        //operation: \"create\",\n        //activeTestKey: \"IDS_INSTRUMENT\",\n        ncontrolcode: inputData.addResultUsedInstrumentId\n      }); //  })\n    }); // .catch(error => {\n    //     dispatch({\n    //         type: DEFAULT_RETURN,\n    //         payload: {\n    //             loading: false\n    //         }\n    //     })\n    //     if (error.response.status === 500) {\n    //         toast.error(error.message);\n    //     } else {\n    //         toast.warn(error.response.data);\n    //     }\n    // })\n    // }\n  }\n\n  getREMaterialCategoryByType(inputData) {\n    //   return function (dispatch) {\n    //    dispatch(initRequest(true));\n    this.setState({\n      loading: true\n    });\n    rsapi.post(\"resultentrybysample/getREMaterialCategoryByType\", {\n      ntestgrouptestcode: inputData.ntestgrouptestcode,\n      nmaterialtypecode: inputData.selectedRecordMaterialForm.nmaterialtypecode.value,\n      userinfo: inputData.userInfo\n    }).then(response => {\n      const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\n      const materialCategory = materialCatMap.get(\"OptionList\");\n      const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      const material = materialMap.get(\"OptionList\");\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\"); // dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: \n      //Sync Child Component data with Parent Component \n\n      this.props.onChildDataChange({ ...inputData.selectedRecordMaterialForm,\n        nmaterialcode: materialMap.get(\"DefaultValue\") || \"\",\n        nmaterialinventorycode: materialInventoryMap.get(\"DefaultValue\") || \"\",\n        nmaterialcatcode: materialCatMap.get(\"DefaultValue\") || \"\"\n      });\n      this.setState({\n        selectedId: null,\n        selectedRecordMaterialForm: { ...inputData.selectedRecordMaterialForm,\n          nmaterialcode: materialMap.get(\"DefaultValue\") || {},\n          nmaterialinventorycode: materialInventoryMap.get(\"DefaultValue\") || {},\n          nmaterialcatcode: materialCatMap.get(\"DefaultValue\") || {}\n        },\n        materialCategory,\n        material,\n        materialInventory,\n        loading: false\n      }); // })\n    }); // .catch(error => {\n    //     dispatch({\n    //         type: DEFAULT_RETURN,\n    //         payload: {\n    //             loading: false\n    //         }\n    //     })\n    //     if (error.response.status === 500) {\n    //         toast.error(error.message);\n    //     } else {\n    //         toast.warn(error.response.data);\n    //     }\n    // })\n    //   }\n  }\n\n  getAvailableMaterialQuantity(inputData) {\n    // return function (dispatch) {\n    //     dispatch(initRequest(true));\n    this.setState({\n      loading: true\n    });\n    rsapi.post(\"resultentrybysample/getAvailableMaterialQuantity\", {\n      ntestgrouptestcode: inputData.ntestgrouptestcode,\n      nmaterialinventorycode: inputData.selectedRecordMaterialForm.nmaterialinventorycode.value,\n      nsectioncode: inputData.selectedRecordMaterialForm.nsectioncode,\n      userinfo: inputData.userInfo\n    }).then(response => {\n      // dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: \n      //Sync Child Component data with Parent Component   \n      this.props.onChildDataChange({ ...inputData.selectedRecordMaterialForm,\n        savailablequantity: response.data.inventory ? response.data.inventory.savailablequatity : \"\",\n        sunitname: response.data.inventory ? response.data.inventory.sunitname : \"\"\n      });\n      this.setState({\n        selectedId: null,\n        selectedRecordMaterialForm: { ...inputData.selectedRecordMaterialForm,\n          savailablequantity: response.data.inventory ? response.data.inventory.savailablequatity : \"\",\n          sunitname: response.data.inventory ? response.data.inventory.sunitname : \"\"\n        },\n        loading: false,\n        screenName: \"IDS_MATERIAL\",\n        openModal: true,\n        //operation: \"create\",\n        //activeTestKey: \"IDS_INSTRUMENT\",\n        ncontrolcode: inputData.addResultUsedInstrumentId\n      }); //  })\n    }); // .catch(error => {\n    //     dispatch({\n    //         type: DEFAULT_RETURN,\n    //         payload: {\n    //             loading: false\n    //         }\n    //     })\n    //     if (error.response.status === 500) {\n    //         toast.error(error.message);\n    //     } else {\n    //         toast.warn(error.response.data);\n    //     }\n    // })\n    //}\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Preloader, {\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 16\n      }\n    }), Object.values(this.props.selectedRecordMaterialForm).length > 0 ? /*#__PURE__*/React.createElement(Row, {\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 21\n      }\n    }, this.props.needSubSample ? /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(MediaHeader, {\n      className: `labelfont`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 33\n      }\n    }, intl.formatMessage({\n      id: \"IDS_SAMPLEARNO\"\n    }), \": \", \" \" + this.props.selectedRecordMaterialForm.ssamplearno)) : /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(MediaHeader, {\n      className: `labelfont`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 33\n      }\n    }, intl.formatMessage({\n      id: \"IDS_ARNO\"\n    }), \": \", \" \" + this.props.selectedRecordMaterialForm.sarno)), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(MediaHeader, {\n      className: `labelfont`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 29\n      }\n    }, intl.formatMessage({\n      id: \"IDS_TEST\"\n    }), \": \", \" \" + this.props.selectedRecordMaterialForm.stestsynonym))) : \"\", /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch, {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_TESTGROUPMATERIAL\"\n      }),\n      type: \"switch\",\n      name: \"ntestgroupmaterial\",\n      onChange: event => this.onInputOnChange(event, \"ntestgroupmaterial\"),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_DISPLAYSTATUS\"\n      }) //defaultValue={this.props.selectedRecordMaterialForm ? this.props.selectedRecordMaterialForm[nattachmenttypecode === attachmentType.LINK?\"nlinkdefaultstatus\":\"ndefaultstatus\"] === 3 ? true : false : \"\"}\n      ,\n      isMandatory: false,\n      required: false,\n      checked: this.state.selectedRecordMaterialForm ? this.state.selectedRecordMaterialForm[\"ntestgroupmaterial\"] === transactionStatus.YES ? true : false : false // disabled={this.state.selectedRecordMaterialForm ? this.state.selectedRecordMaterialForm[\"ntestgroupmaterial\"] === 3 ? true : false : false}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: intl.formatMessage({\n        id: \"IDS_MATERIALTYPE\"\n      }),\n      placeholder: intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isSearchable: false,\n      name: \"nmaterialtypecode\",\n      isDisabled: false,\n      isMandatory: true,\n      options: this.state.materialType || [],\n      value: this.state.selectedRecordMaterialForm && this.state.selectedRecordMaterialForm.nmaterialtypecode && Object.values(this.state.selectedRecordMaterialForm.nmaterialtypecode).length > 0 && this.state.selectedRecordMaterialForm.nmaterialtypecode !== undefined && this.state.selectedRecordMaterialForm.nmaterialtypecode !== \"\" ? this.state.selectedRecordMaterialForm.nmaterialtypecode : \"\",\n      showOption: true,\n      required: true,\n      onChange: event => this.onMaterialComboChange(event, 'nmaterialtypecode'),\n      isMulti: false,\n      closeMenuOnSelect: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: intl.formatMessage({\n        id: \"IDS_MATERIALCATEGORY\"\n      }),\n      placeholder: intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isSearchable: false,\n      name: \"nmaterialcatcode\",\n      isDisabled: false,\n      isMandatory: true,\n      options: this.state.materialCategory || [],\n      value: this.state.selectedRecordMaterialForm && this.state.selectedRecordMaterialForm.nmaterialcatcode && Object.values(this.state.selectedRecordMaterialForm.nmaterialcatcode).length > 0 && this.state.selectedRecordMaterialForm.nmaterialcatcode !== undefined && this.state.selectedRecordMaterialForm.nmaterialcatcode !== \"\" ? this.state.selectedRecordMaterialForm.nmaterialcatcode : \"\",\n      showOption: true,\n      required: true,\n      onChange: event => this.onMaterialComboChange(event, 'nmaterialcatcode'),\n      isMulti: false,\n      closeMenuOnSelect: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: intl.formatMessage({\n        id: \"IDS_MATERIAL\"\n      }),\n      placeholder: intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isSearchable: false,\n      name: \"nmaterialcode\",\n      isDisabled: false,\n      isMandatory: true,\n      options: this.state.material || [],\n      value: this.state.selectedRecordMaterialForm && this.state.selectedRecordMaterialForm.nmaterialcode && Object.values(this.state.selectedRecordMaterialForm.nmaterialcode).length > 0 && this.state.selectedRecordMaterialForm.nmaterialcode !== undefined && this.state.selectedRecordMaterialForm.nmaterialcode !== \"\" ? this.state.selectedRecordMaterialForm.nmaterialcode : \"\",\n      showOption: true,\n      required: true,\n      onChange: event => this.onMaterialComboChange(event, 'nmaterialcode'),\n      isMulti: false,\n      closeMenuOnSelect: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: intl.formatMessage({\n        id: \"IDS_MATERIALINVENTORY\"\n      }),\n      placeholder: intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isSearchable: false,\n      name: \"nmaterialinventorycode\",\n      isDisabled: false,\n      isMandatory: true,\n      options: this.state.materialInventory || [],\n      value: this.state.selectedRecordMaterialForm && this.state.selectedRecordMaterialForm.nmaterialinventorycode && Object.values(this.state.selectedRecordMaterialForm.nmaterialinventorycode).length > 0 && this.state.selectedRecordMaterialForm.nmaterialinventorycode !== undefined && this.state.selectedRecordMaterialForm.nmaterialinventorycode !== \"\" ? this.state.selectedRecordMaterialForm.nmaterialinventorycode : \"\",\n      showOption: true,\n      required: true,\n      onChange: event => this.onMaterialComboChange(event, 'nmaterialinventorycode'),\n      isMulti: false,\n      closeMenuOnSelect: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 33\n      }\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_AVAILABLEQUANTITY\"\n      }),\n      name: \"savailablequantity\",\n      type: \"text\",\n      maxLength: \"100\",\n      isMandatory: true,\n      value: this.state.selectedRecordMaterialForm[\"savailablequantity\"] || [],\n      onChange: event => this.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_AVAILABLEQUANTITY\"\n      }),\n      isDisabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_USEDQTY\"\n      }),\n      name: \"susedquantity\",\n      type: \"text\",\n      maxLength: \"100\",\n      isMandatory: true,\n      value: this.state.selectedRecordMaterialForm[\"susedquantity\"] || [],\n      onChange: event => this.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_USEDQTY\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_UNIT\"\n      }),\n      name: \"sunitname\",\n      type: \"text\",\n      maxLength: \"100\",\n      isMandatory: true,\n      value: this.state.selectedRecordMaterialForm[\"sunitname\"] || [],\n      onChange: event => this.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_UNIT\"\n      }),\n      isDisabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_MOBILEPHASE\"\n      }),\n      name: \"smobilephase\",\n      type: \"text\",\n      maxLength: \"20\",\n      value: this.state.selectedRecordMaterialForm[\"smobilephase\"] || [],\n      onChange: event => this.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_MOBILEPHASE\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_CARRIERGAS\"\n      }),\n      name: \"scarriergas\",\n      type: \"text\",\n      maxLength: \"20\",\n      value: this.state.selectedRecordMaterialForm[\"scarriergas\"] || [],\n      onChange: event => this.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_CARRIERGAS\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormTextarea, {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_REMARKS\"\n      }),\n      name: \"sremarks\",\n      type: \"text\",\n      onChange: event => this.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_REMARKS\"\n      }),\n      value: this.state.selectedRecordMaterialForm && this.state.selectedRecordMaterialForm[\"sremarks\"] && this.state.selectedRecordMaterialForm[\"sremarks\"] !== undefined && this.state.selectedRecordMaterialForm[\"sremarks\"] !== \"\" ? this.state.selectedRecordMaterialForm[\"sremarks\"] : \"\",\n      isMandatory: false,\n      required: false,\n      maxLength: 255,\n      row: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 33\n      }\n    }))))));\n  }\n\n} //export default injectIntl(ResultEntryMaterialForm);\n\n\nexport default connect(null, {\n  updateStore\n})(injectIntl(ResultEntryMaterialForm));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntryMaterialForm.jsx"],"names":["React","Row","Col","FormSelectSearch","intl","injectIntl","MediaHeader","FormInput","FormTextarea","CustomSwitch","transactionStatus","updateStore","connect","constructOptionList","toast","rsapi","DEFAULT_RETURN","Preloader","ResultEntryMaterialForm","Component","constructor","props","onInputOnChange","event","name","selectedRecordMaterialForm","state","target","type","checked","YES","NO","value","ntestgrouptestcode","ntestgroupmaterial","Login","masterData","RESelectedTest","getREMaterialComboGet","test","userInfo","onChildDataChange","setState","onMaterialComboChange","comboData","comboName","getREMaterialCategoryByType","nmaterialcatcode","item","needSectionwise","nsectioncode","getREMaterialByCategory","getREMaterialInvertoryByMaterial","getAvailableMaterialQuantity","materialType","materialCategory","material","materialInventory","loading","componentWillUnmount","updateInfo","typeName","data","isMaterialInitialRender","componentDidUpdate","previousProps","inputData","post","userinfo","then","response","materialTypeMap","MaterialType","undefined","get","materialCatMap","MaterialCategory","materialMap","Material","materialInventoryMap","MaterialInventory","sarno","ssamplearno","stestsynonym","ssectionname","transactiontestcode","map","ntransactiontestcode","join","toString","npreregno","nmaterialtypecode","nmaterialcode","length","nmaterialinventorycode","sunitname","savailablequantity","savailablequatity","selectedId","screenName","openModal","operation","ncontrolcode","addResultUsedInstrumentId","inventory","render","Object","values","needSubSample","formatMessage","id"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { intl } from '../../components/App';\r\nimport { injectIntl } from 'react-intl';\r\nimport { MediaHeader } from '../../components/App.styles';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport {\r\n    updateStore\r\n} from '../../actions';\r\nimport { connect } from 'react-redux';\r\nimport { constructOptionList } from '../../components/CommonScript';\r\nimport { toast } from 'react-toastify';\r\nimport rsapi from '../../rsapi';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport Preloader from '../../components/preloader/preloader.component';\r\n\r\nclass ResultEntryMaterialForm extends React.Component {\r\n    //    const ResultEntryMaterialForm = (this.props) => {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedRecordMaterialForm: this.props.Login.selectedRecordMaterialForm,\r\n            materialType: this.props.Login.materialType,\r\n            materialCategory: this.props.Login.materialCategory,\r\n            material: this.props.Login.material,\r\n            materialInventory: this.props.Login.materialInventory,\r\n            loading:false\r\n        }\r\n\r\n    }\r\n    componentWillUnmount() { \r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN, \r\n            data: { isMaterialInitialRender: false  } \r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.selectedRecordMaterialForm !== previousProps.selectedRecordMaterialForm) {\r\n            this.setState({ selectedRecordMaterialForm: this.props.selectedRecordMaterialForm });\r\n        }\r\n        if (this.props.materialCategory !== previousProps.materialCategory) {\r\n            this.setState({ materialCategory: this.props.materialCategory });\r\n        }\r\n        if (this.props.material !== previousProps.material) {\r\n            this.setState({ material: this.props.material });\r\n        }\r\n        if (this.props.materialInventory !== previousProps.materialInventory) {\r\n            this.setState({ materialInventory: this.props.materialInventory });\r\n        }\r\n    }\r\n    onInputOnChange = (event, name) => {\r\n\r\n        const selectedRecordMaterialForm = this.state.selectedRecordMaterialForm || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecordMaterialForm[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecordMaterialForm[event.target.name] = event.target.value;\r\n        }\r\n        switch (name) {\r\n            case 'ntestgroupmaterial':\r\n                const ntestgrouptestcode = selectedRecordMaterialForm.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1\r\n                //this.props.\r\n                this.getREMaterialComboGet({ ntestgroupmaterial: selectedRecordMaterialForm.ntestgroupmaterial, ntestgrouptestcode, RESelectedTest: this.props.Login.masterData.RESelectedTest, test: this.props.Login.masterData.RESelectedTest[0], userInfo: this.props.Login.userInfo })\r\n                break;\r\n            default:\r\n                //Sync Child Component data with Parent Component     \r\n                this.props.onChildDataChange(selectedRecordMaterialForm);\r\n                this.setState({ selectedRecordMaterialForm });\r\n        }\r\n    }\r\n\r\n    getREMaterialComboGet(inputData) {\r\n        // return function (dispatch) {\r\n        // dispatch(initRequest(true));\r\n        this.setState({loading:true})\r\n        rsapi.post(\"resultentrybysample/getResultUsedMaterialCombo\", { userinfo: inputData.userInfo, nsectioncode: inputData.test.nsectioncode, ntestgrouptestcode: inputData.ntestgrouptestcode })\r\n            .then(response => {\r\n                const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\r\n                const materialType = materialTypeMap.get(\"OptionList\");\r\n                const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\r\n                const materialCategory = materialCatMap.get(\"OptionList\");\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                //  dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //      payload:\r\n\r\n                //Sync Child Component data with Parent Component     \r\n                this.props.onChildDataChange({\r\n                    ntestgroupmaterial: inputData.ntestgroupmaterial,\r\n                    sarno: inputData.test.sarno,\r\n                    ssamplearno: inputData.test.ssamplearno,\r\n                    stestsynonym: inputData.test.stestsynonym,\r\n                    nsectioncode: inputData.test.nsectioncode,\r\n                    ssectionname: inputData.test.ssectionname,\r\n                    transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                    ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                    npreregno: inputData.test.npreregno,\r\n                    nmaterialtypecode: materialTypeMap.get(\"DefaultValue\") ? materialTypeMap.get(\"DefaultValue\") : \"\",\r\n                    nmaterialcatcode: materialCatMap.get(\"DefaultValue\") ? materialCatMap.get(\"DefaultValue\") : \"\",\r\n                    nmaterialcode: materialMap.get(\"OptionList\").length > 0 ? materialMap.get(\"OptionList\")[0] : \"\",\r\n                    nmaterialinventorycode: materialInventoryMap.get(\"OptionList\").length > 0 ? materialInventoryMap.get(\"OptionList\")[0] : \"\",\r\n                    sunitname: response.data.MaterialInventory !== undefined && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].sunitname : \"\",\r\n                    savailablequantity: response.data.MaterialInventory !== undefined && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].savailablequatity : \"\"\r\n                });\r\n                this.setState({\r\n                    selectedId: null,\r\n                    selectedRecordMaterialForm: {\r\n                        ntestgroupmaterial: inputData.ntestgroupmaterial,\r\n                        sarno: inputData.test.sarno,\r\n                        ssamplearno: inputData.test.ssamplearno,\r\n                        stestsynonym: inputData.test.stestsynonym,\r\n                        nsectioncode: inputData.test.nsectioncode,\r\n                        ssectionname: inputData.test.ssectionname,\r\n                        transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                        ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                        npreregno: inputData.test.npreregno,\r\n                        nmaterialtypecode: materialTypeMap.get(\"DefaultValue\") ? materialTypeMap.get(\"DefaultValue\") : \"\",\r\n                        nmaterialcatcode: materialCatMap.get(\"DefaultValue\") ? materialCatMap.get(\"DefaultValue\") : \"\",\r\n                        nmaterialcode: materialMap.get(\"OptionList\").length > 0 ? materialMap.get(\"OptionList\")[0] : \"\",\r\n                        nmaterialinventorycode: materialInventoryMap.get(\"OptionList\").length > 0 ? materialInventoryMap.get(\"OptionList\")[0] : \"\",\r\n                        sunitname: response.data.MaterialInventory !== undefined && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].sunitname : \"\",\r\n                        savailablequantity: response.data.MaterialInventory !== undefined && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].savailablequatity : \"\"\r\n                    },\r\n                    materialType,\r\n                    materialCategory,\r\n                    material,\r\n                    materialInventory,\r\n                    loading: false,\r\n                    screenName: \"IDS_MATERIAL\",\r\n                    openModal: true,\r\n                    operation: \"create\",\r\n                    loading:false\r\n                })\r\n                // })\r\n            })\r\n        // .catch(error => {\r\n        //     dispatch({\r\n        //         type: DEFAULT_RETURN,\r\n        //         payload: {\r\n        //             loading: false\r\n        //         }\r\n        //     })\r\n        //     if (error.response.status === 500) {\r\n        //         toast.error(error.message);\r\n        //     } else {\r\n        //         toast.warn(error.response.data);\r\n        //     }\r\n        // })\r\n        // }\r\n    }\r\n    onMaterialComboChange = (comboData, comboName) => {\r\n        const selectedRecordMaterialForm = this.state.selectedRecordMaterialForm || [];\r\n        const ntestgrouptestcode = selectedRecordMaterialForm.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1;\r\n        if (comboData) {\r\n            selectedRecordMaterialForm[comboName] = comboData;\r\n        } else {\r\n            selectedRecordMaterialForm[comboName] = []\r\n        }\r\n        switch (comboName) {\r\n            case 'nmaterialtypecode':\r\n                this.getREMaterialCategoryByType({ ntestgrouptestcode, selectedRecordMaterialForm, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            case 'nmaterialcatcode':\r\n                selectedRecordMaterialForm['nsectioncode'] = selectedRecordMaterialForm.nmaterialcatcode.item.needSectionwise == transactionStatus.YES ?\r\n                    this.props.Login.masterData.RESelectedTest[0].nsectioncode : -1;\r\n                this.getREMaterialByCategory({ ntestgrouptestcode, selectedRecordMaterialForm, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            case 'nmaterialcode':\r\n                this.getREMaterialInvertoryByMaterial({ ntestgrouptestcode, selectedRecordMaterialForm, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            default:\r\n                this.getAvailableMaterialQuantity({ ntestgrouptestcode, selectedRecordMaterialForm, userInfo: this.props.Login.userInfo })\r\n                break;\r\n        }\r\n    }\r\n\r\n    getREMaterialByCategory(inputData) {\r\n        // return function (dispatch) {\r\n        //     dispatch(initRequest(true));\r\n        this.setState({loading:true})\r\n        rsapi.post(\"resultentrybysample/getREMaterialByCategory\", {\r\n            ntestgrouptestcode: inputData.ntestgrouptestcode,\r\n            nmaterialtypecode: inputData.selectedRecordMaterialForm.nmaterialtypecode.value,\r\n            nmaterialcatcode: inputData.selectedRecordMaterialForm.nmaterialcatcode.value,\r\n            nsectioncode: inputData.selectedRecordMaterialForm.nsectioncode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                // dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //     payload:\r\n\r\n                //Sync Child Component data with Parent Component     \r\n                this.props.onChildDataChange({\r\n                    ...inputData.selectedRecordMaterialForm,\r\n                    nmaterialcode: materialMap.get(\"OptionList\")[0],\r\n                    nmaterialinventorycode: materialInventoryMap.get(\"OptionList\")[0],\r\n                    savailablequantity: response.data.MaterialInventory && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].savailablequatity : \"\",\r\n                    sunitname: response.data.MaterialInventory && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].sunitname : \"\"\r\n                });\r\n                this.setState({\r\n                    selectedId: null,\r\n                    selectedRecordMaterialForm: {\r\n                        ...inputData.selectedRecordMaterialForm,\r\n                        nmaterialcode: materialMap.get(\"OptionList\")[0],\r\n                        nmaterialinventorycode: materialInventoryMap.get(\"OptionList\")[0],\r\n                        savailablequantity: response.data.MaterialInventory && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].savailablequatity : \"\",\r\n                        sunitname: response.data.MaterialInventory && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].sunitname : \"\"\r\n                    },\r\n                    material,\r\n                    materialInventory,\r\n                    loading: false\r\n                })\r\n                //  })\r\n            })\r\n        // .catch(error => {\r\n        //     dispatch({\r\n        //         type: DEFAULT_RETURN,\r\n        //         payload: {\r\n        //             loading: false\r\n        //         }\r\n        //     })\r\n        //     if (error.response.status === 500) {\r\n        //         toast.error(error.message);\r\n        //     } else {\r\n        //         toast.warn(error.response.data);\r\n        //     }\r\n        // })\r\n        // }\r\n    }\r\n\r\n    getREMaterialInvertoryByMaterial(inputData) {\r\n        // return function (dispatch) {\r\n        //     dispatch(initRequest(true));\r\n        this.setState({loading:true})\r\n        rsapi.post(\"resultentrybysample/getREMaterialInvertoryByMaterial\", {\r\n            ntestgrouptestcode: inputData.ntestgrouptestcode,\r\n            nmaterialcode: inputData.selectedRecordMaterialForm.nmaterialcode.value,\r\n            nsectioncode: inputData.selectedRecordMaterialForm.nsectioncode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                inputData.selectedRecordMaterialForm.nmaterialinventorycode && delete\r\n                    inputData.selectedRecordMaterialForm.nmaterialinventorycode;\r\n\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                // dispatch({\r\n                //    type: DEFAULT_RETURN,\r\n                //    payload:\r\n\r\n                //Sync Child Component data with Parent Component   \r\n                this.props.onChildDataChange({\r\n                    ...inputData.selectedRecordMaterialForm,\r\n                    nmaterialinventorycode: response.data.MaterialInventory ? materialInventoryMap.get(\"OptionList\")[0] : undefined,\r\n                    sunitname: response.data.MaterialInventory && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].sunitname : \"\",\r\n                    savailablequantity: response.data.MaterialInventory && response.data.MaterialInventory.length > 0  ? response.data.MaterialInventory[0].savailablequatity : \"\"\r\n                });\r\n\r\n\r\n\r\n                this.setState({\r\n                    selectedId: null,\r\n                    selectedRecordMaterialForm: {\r\n                        ...inputData.selectedRecordMaterialForm,\r\n                        nmaterialinventorycode: response.data.MaterialInventory ? materialInventoryMap.get(\"OptionList\")[0] : undefined,\r\n                        sunitname: response.data.MaterialInventory && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].sunitname : \"\",\r\n                        savailablequantity: response.data.MaterialInventory && response.data.MaterialInventory.length > 0 ? response.data.MaterialInventory[0].savailablequatity : \"\"\r\n                    },\r\n                    materialInventory,\r\n                    loading: false,\r\n                    screenName: \"IDS_MATERIAL\",\r\n                    openModal: true,\r\n                    //operation: \"create\",\r\n                    //activeTestKey: \"IDS_INSTRUMENT\",\r\n                    ncontrolcode: inputData.addResultUsedInstrumentId\r\n                })\r\n                //  })\r\n            })\r\n        // .catch(error => {\r\n        //     dispatch({\r\n        //         type: DEFAULT_RETURN,\r\n        //         payload: {\r\n        //             loading: false\r\n        //         }\r\n        //     })\r\n        //     if (error.response.status === 500) {\r\n        //         toast.error(error.message);\r\n        //     } else {\r\n        //         toast.warn(error.response.data);\r\n        //     }\r\n        // })\r\n        // }\r\n    }\r\n\r\n    getREMaterialCategoryByType(inputData) {\r\n        //   return function (dispatch) {\r\n        //    dispatch(initRequest(true));\r\n        this.setState({loading:true})\r\n        rsapi.post(\"resultentrybysample/getREMaterialCategoryByType\", {\r\n            ntestgrouptestcode: inputData.ntestgrouptestcode,\r\n            nmaterialtypecode: inputData.selectedRecordMaterialForm.nmaterialtypecode.value,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\r\n                const materialCategory = materialCatMap.get(\"OptionList\");\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                // dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //     payload: \r\n\r\n                //Sync Child Component data with Parent Component \r\n                this.props.onChildDataChange({\r\n                    ...inputData.selectedRecordMaterialForm,\r\n                    nmaterialcode:  materialMap.get(\"DefaultValue\") || \"\",\r\n                    nmaterialinventorycode: materialInventoryMap.get(\"DefaultValue\") || \"\",\r\n                    nmaterialcatcode: materialCatMap.get(\"DefaultValue\") || \"\",\r\n                });\r\n\r\n                this.setState({\r\n                    selectedId: null,\r\n                    selectedRecordMaterialForm: {\r\n                        ...inputData.selectedRecordMaterialForm,\r\n                        nmaterialcode: materialMap.get(\"DefaultValue\") || {},\r\n                        nmaterialinventorycode: materialInventoryMap.get(\"DefaultValue\") || {},\r\n                        nmaterialcatcode: materialCatMap.get(\"DefaultValue\") || {},\r\n                    },\r\n                    materialCategory,\r\n                    material,\r\n                    materialInventory,\r\n                    loading: false,\r\n                });\r\n                // })\r\n            })\r\n        // .catch(error => {\r\n        //     dispatch({\r\n        //         type: DEFAULT_RETURN,\r\n        //         payload: {\r\n        //             loading: false\r\n        //         }\r\n        //     })\r\n        //     if (error.response.status === 500) {\r\n        //         toast.error(error.message);\r\n        //     } else {\r\n        //         toast.warn(error.response.data);\r\n        //     }\r\n        // })\r\n        //   }\r\n    }\r\n\r\n\r\n    getAvailableMaterialQuantity(inputData) {\r\n        // return function (dispatch) {\r\n        //     dispatch(initRequest(true));\r\n        this.setState({loading:true})\r\n        rsapi.post(\"resultentrybysample/getAvailableMaterialQuantity\", {\r\n            ntestgrouptestcode: inputData.ntestgrouptestcode,\r\n            nmaterialinventorycode: inputData.selectedRecordMaterialForm.nmaterialinventorycode.value,\r\n            nsectioncode: inputData.selectedRecordMaterialForm.nsectioncode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                // dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //     payload: \r\n\r\n                //Sync Child Component data with Parent Component   \r\n                this.props.onChildDataChange({\r\n                    ...inputData.selectedRecordMaterialForm,\r\n                    savailablequantity: response.data.inventory ? response.data.inventory.savailablequatity : \"\",\r\n                    sunitname: response.data.inventory ? response.data.inventory.sunitname : \"\"\r\n                });\r\n\r\n                this.setState({\r\n                    selectedId: null,\r\n                    selectedRecordMaterialForm: {\r\n                        ...inputData.selectedRecordMaterialForm,\r\n                        savailablequantity: response.data.inventory ? response.data.inventory.savailablequatity : \"\",\r\n                        sunitname: response.data.inventory ? response.data.inventory.sunitname : \"\"\r\n                    },\r\n                    loading: false,\r\n                    screenName: \"IDS_MATERIAL\",\r\n                    openModal: true,\r\n                    //operation: \"create\",\r\n                    //activeTestKey: \"IDS_INSTRUMENT\",\r\n                    ncontrolcode: inputData.addResultUsedInstrumentId\r\n                })\r\n                //  })\r\n            })\r\n        // .catch(error => {\r\n        //     dispatch({\r\n        //         type: DEFAULT_RETURN,\r\n        //         payload: {\r\n        //             loading: false\r\n        //         }\r\n        //     })\r\n        //     if (error.response.status === 500) {\r\n        //         toast.error(error.message);\r\n        //     } else {\r\n        //         toast.warn(error.response.data);\r\n        //     }\r\n        // })\r\n        //}\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n               <Preloader loading={this.state.loading} /> \r\n\r\n                {Object.values(this.props.selectedRecordMaterialForm).length > 0 ?\r\n                    <Row className=\"mb-4\">\r\n                        {this.props.needSubSample ?\r\n\r\n                            <Col md={12}>\r\n                                <MediaHeader className={`labelfont`}>{intl.formatMessage({ id: \"IDS_SAMPLEARNO\" })}: {\" \" + this.props.selectedRecordMaterialForm.ssamplearno}</MediaHeader>\r\n                            </Col>\r\n                            :\r\n                            <Col md={12}>\r\n                                <MediaHeader className={`labelfont`}>{intl.formatMessage({ id: \"IDS_ARNO\" })}: {\" \" + this.props.selectedRecordMaterialForm.sarno}</MediaHeader>\r\n                            </Col>\r\n                        }\r\n                        <Col md={12}>\r\n                            <MediaHeader className={`labelfont`}>{intl.formatMessage({ id: \"IDS_TEST\" })}: {\" \" + this.props.selectedRecordMaterialForm.stestsynonym}</MediaHeader>\r\n                        </Col>\r\n                    </Row>\r\n                    : \"\"}\r\n\r\n                <Row>\r\n                    <Col md={6}>\r\n                        <Row>\r\n                            <Col md={12}>\r\n                                <CustomSwitch\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_TESTGROUPMATERIAL\" })}\r\n                                    type=\"switch\"\r\n                                    name={\"ntestgroupmaterial\"}\r\n                                    onChange={(event) => this.onInputOnChange(event, \"ntestgroupmaterial\")}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_DISPLAYSTATUS\" })}\r\n                                    //defaultValue={this.props.selectedRecordMaterialForm ? this.props.selectedRecordMaterialForm[nattachmenttypecode === attachmentType.LINK?\"nlinkdefaultstatus\":\"ndefaultstatus\"] === 3 ? true : false : \"\"}\r\n                                    isMandatory={false}\r\n                                    required={false}\r\n                                    checked={this.state.selectedRecordMaterialForm ? this.state.selectedRecordMaterialForm[\"ntestgroupmaterial\"] === transactionStatus.YES ? true : false : false}\r\n                                // disabled={this.state.selectedRecordMaterialForm ? this.state.selectedRecordMaterialForm[\"ntestgroupmaterial\"] === 3 ? true : false : false}\r\n                                >\r\n                                </CustomSwitch>\r\n                                <FormSelectSearch\r\n                                    formLabel={intl.formatMessage({ id: \"IDS_MATERIALTYPE\" })}\r\n                                    placeholder={intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                    isSearchable={false}\r\n                                    name={\"nmaterialtypecode\"}\r\n                                    isDisabled={false}\r\n                                    isMandatory={true}\r\n                                    options={this.state.materialType || []}\r\n                                    value={this.state.selectedRecordMaterialForm&&this.state.selectedRecordMaterialForm.nmaterialtypecode&&\r\n                                        Object.values(this.state.selectedRecordMaterialForm.nmaterialtypecode).length>0      &&\r\n                                        this.state.selectedRecordMaterialForm.nmaterialtypecode!==undefined&&\r\n                                        this.state.selectedRecordMaterialForm.nmaterialtypecode!==\"\"  ? this.state.selectedRecordMaterialForm.nmaterialtypecode : \"\"}\r\n                                    showOption={true}\r\n                                    required={true}\r\n                                    onChange={(event) => this.onMaterialComboChange(event, 'nmaterialtypecode')}\r\n                                    isMulti={false}\r\n                                    closeMenuOnSelect={true}\r\n                                />\r\n                                <FormSelectSearch\r\n                                    formLabel={intl.formatMessage({ id: \"IDS_MATERIALCATEGORY\" })}\r\n                                    placeholder={intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                    isSearchable={false}\r\n                                    name={\"nmaterialcatcode\"}\r\n                                    isDisabled={false}\r\n                                    isMandatory={true}\r\n                                    options={this.state.materialCategory || []}\r\n                                    value={this.state.selectedRecordMaterialForm&&\r\n                                        this.state.selectedRecordMaterialForm.nmaterialcatcode&&\r\n                                        Object.values(this.state.selectedRecordMaterialForm.nmaterialcatcode).length>0      &&\r\n                                        this.state.selectedRecordMaterialForm.nmaterialcatcode!==undefined&&\r\n                                        this.state.selectedRecordMaterialForm.nmaterialcatcode!==\"\"  ? this.state.selectedRecordMaterialForm.nmaterialcatcode : \"\"}\r\n                                    showOption={true}\r\n                                    required={true}\r\n                                    onChange={(event) => this.onMaterialComboChange(event, 'nmaterialcatcode')}\r\n                                    isMulti={false}\r\n                                    closeMenuOnSelect={true}\r\n                                />\r\n                                <FormSelectSearch\r\n                                    formLabel={intl.formatMessage({ id: \"IDS_MATERIAL\" })}\r\n                                    placeholder={intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                    isSearchable={false}\r\n                                    name={\"nmaterialcode\"}\r\n                                    isDisabled={false}\r\n                                    isMandatory={true}\r\n                                    options={this.state.material || []}\r\n                                    value={this.state.selectedRecordMaterialForm&&\r\n                                        this.state.selectedRecordMaterialForm.nmaterialcode&&\r\n                                        Object.values(this.state.selectedRecordMaterialForm.nmaterialcode).length>0      &&\r\n                                        this.state.selectedRecordMaterialForm.nmaterialcode!==undefined&&\r\n                                        this.state.selectedRecordMaterialForm.nmaterialcode!==\"\" ? this.state.selectedRecordMaterialForm.nmaterialcode : \"\"}\r\n                                    showOption={true}\r\n                                    required={true}\r\n                                    onChange={(event) => this.onMaterialComboChange(event, 'nmaterialcode')}\r\n                                    isMulti={false}\r\n                                    closeMenuOnSelect={true}\r\n                                />\r\n                                <FormSelectSearch\r\n                                    formLabel={intl.formatMessage({ id: \"IDS_MATERIALINVENTORY\" })}\r\n                                    placeholder={intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                    isSearchable={false}\r\n                                    name={\"nmaterialinventorycode\"}\r\n                                    isDisabled={false}\r\n                                    isMandatory={true}\r\n                                    options={this.state.materialInventory || []}\r\n                                    value={this.state.selectedRecordMaterialForm &&\r\n                                        this.state.selectedRecordMaterialForm.nmaterialinventorycode&&\r\n                                        Object.values(this.state.selectedRecordMaterialForm.nmaterialinventorycode).length>0      &&\r\n                                        this.state.selectedRecordMaterialForm.nmaterialinventorycode!==undefined&&\r\n                                        this.state.selectedRecordMaterialForm.nmaterialinventorycode!==\"\" ? this.state.selectedRecordMaterialForm.nmaterialinventorycode : \"\"}\r\n                                    showOption={true}\r\n                                    required={true}\r\n                                    onChange={(event) => this.onMaterialComboChange(event, 'nmaterialinventorycode')}\r\n                                    isMulti={false}\r\n                                    closeMenuOnSelect={true}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <Row>\r\n                            <Col md={12}>\r\n                                <FormInput\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_AVAILABLEQUANTITY\" })}\r\n                                    name=\"savailablequantity\"\r\n                                    type=\"text\"\r\n                                    maxLength=\"100\"\r\n                                    isMandatory={true}\r\n                                    value={this.state.selectedRecordMaterialForm[\"savailablequantity\"] || []}\r\n                                    onChange={(event) => this.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_AVAILABLEQUANTITY\" })}\r\n                                    isDisabled={true}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <FormInput\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_USEDQTY\" })}\r\n                                    name=\"susedquantity\"\r\n                                    type=\"text\"\r\n                                    maxLength=\"100\"\r\n                                    isMandatory={true}\r\n                                    value={this.state.selectedRecordMaterialForm[\"susedquantity\"] || []}\r\n                                    onChange={(event) => this.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_USEDQTY\" })}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <FormInput\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_UNIT\" })}\r\n                                    name=\"sunitname\"\r\n                                    type=\"text\"\r\n                                    maxLength=\"100\"\r\n                                    isMandatory={true}\r\n                                    value={this.state.selectedRecordMaterialForm[\"sunitname\"] || []}\r\n                                    onChange={(event) => this.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_UNIT\" })}\r\n                                    isDisabled={true}\r\n                                />\r\n                            </Col>\r\n                            <Col md={12}>\r\n                                <FormInput\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_MOBILEPHASE\" })}\r\n                                    name=\"smobilephase\"\r\n                                    type=\"text\"\r\n                                    maxLength=\"20\"\r\n                                    value={this.state.selectedRecordMaterialForm[\"smobilephase\"] || []}\r\n                                    onChange={(event) => this.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_MOBILEPHASE\" })}\r\n                                />\r\n                                <FormInput\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_CARRIERGAS\" })}\r\n                                    name=\"scarriergas\"\r\n                                    type=\"text\"\r\n                                    maxLength=\"20\"\r\n                                    value={this.state.selectedRecordMaterialForm[\"scarriergas\"] || []}\r\n                                    onChange={(event) => this.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_CARRIERGAS\" })}\r\n                                />\r\n                                <FormTextarea\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_REMARKS\" })}\r\n                                    name=\"sremarks\"\r\n                                    type=\"text\"\r\n                                    onChange={(event) => this.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_REMARKS\" })}\r\n                                    value={this.state.selectedRecordMaterialForm&&this.state.selectedRecordMaterialForm[\"sremarks\"]&&\r\n                                        this.state.selectedRecordMaterialForm[\"sremarks\"]!==undefined&&\r\n                                        this.state.selectedRecordMaterialForm[\"sremarks\"]!==\"\" ? this.state.selectedRecordMaterialForm[\"sremarks\"] : \"\"}\r\n                                    isMandatory={false}\r\n                                    required={false}\r\n                                    maxLength={255}\r\n                                    row={2}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n//export default injectIntl(ResultEntryMaterialForm);\r\n\r\nexport default connect(null, {\r\n    updateStore\r\n\r\n})(injectIntl(ResultEntryMaterialForm));\r\n"]},"metadata":{},"sourceType":"module"}