{"ast":null,"code":"import _defineProperty from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{toast}from'react-toastify';import Axios from'axios';import{initRequest}from'./LoginAction';import{constructOptionList}from'../components/CommonScript';export function openLicenseAuthorityModal(userInfo,ncontrolcode){return function(dispatch){dispatch(initRequest(true));rsapi.post('country/getCountry',{\"userinfo\":userInfo}).then(function(response){var countryOptionsMap=constructOptionList(response.data||[],\"ncountrycode\",\"scountryname\",undefined,undefined,true);var countryOptions=countryOptionsMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{selectedRecord:{},operation:\"create\",countryOptions:countryOptions,openModal:true,ncontrolcode:ncontrolcode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};};export function fetchLicenseAuthorityById(editParam){return function(dispatch){var _rsapi$post;var URL1=rsapi.post('country/getCountry',{\"userinfo\":editParam.userInfo});var URL2=rsapi.post(\"licenseauthority/getActiveLicenseAuthorityById\",(_rsapi$post={},_defineProperty(_rsapi$post,editParam.primaryKeyField,editParam.primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",editParam.userInfo),_rsapi$post));dispatch(initRequest(true));Axios.all([URL1,URL2]).then(function(response){var selectedId=editParam.primaryKeyValue;var selectedRecord=response[1].data;var countryOptionsMap=constructOptionList(response[0].data||[],\"ncountrycode\",\"scountryname\",undefined,undefined,true);var countryOptions=countryOptionsMap.get(\"OptionList\");selectedRecord['countryValue']={value:response[1].data.ncountrycode,label:response[1].data.scountryname};selectedRecord['countryShortName']=response[1].data.scountryshortname;dispatch({type:DEFAULT_RETURN,payload:{selectedRecord:selectedRecord,operation:\"update\",countryOptions:countryOptions,screenName:editParam.screenName,inputparam:editParam.inputparam,ncontrolcode:editParam.ncontrolCode,openModal:true,loading:false,selectedId:selectedId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/LicenseAuthorityAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","constructOptionList","openLicenseAuthorityModal","userInfo","ncontrolcode","dispatch","post","then","response","countryOptionsMap","data","undefined","countryOptions","get","type","payload","selectedRecord","operation","openModal","loading","catch","error","status","message","warn","fetchLicenseAuthorityById","editParam","URL1","URL2","primaryKeyField","primaryKeyValue","all","selectedId","value","ncountrycode","label","scountryname","scountryshortname","screenName","inputparam","ncontrolCode"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList } from '../components/CommonScript';\r\n\r\n\r\nexport function openLicenseAuthorityModal(userInfo, ncontrolcode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('country/getCountry', { \"userinfo\": userInfo })\r\n            .then(response => {\r\n                const countryOptionsMap = constructOptionList(response.data || [], \"ncountrycode\", \"scountryname\", undefined, undefined, true);\r\n                const countryOptions = countryOptionsMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        selectedRecord: {},\r\n                        operation: \"create\",\r\n                        countryOptions,\r\n                        openModal: true,\r\n                        ncontrolcode,\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n};\r\n\r\nexport function fetchLicenseAuthorityById(editParam) {\r\n    return function (dispatch) {\r\n        const URL1 = rsapi.post('country/getCountry', { \"userinfo\": editParam.userInfo })\r\n        const URL2 = rsapi.post(\"licenseauthority/getActiveLicenseAuthorityById\", { [editParam.primaryKeyField]: editParam.primaryKeyValue, \"userinfo\": editParam.userInfo })\r\n        dispatch(initRequest(true));\r\n        Axios.all([URL1, URL2])\r\n            .then(response => {\r\n                let selectedId = editParam.primaryKeyValue\r\n                let selectedRecord = response[1].data;\r\n                const countryOptionsMap = constructOptionList(response[0].data || [], \"ncountrycode\", \"scountryname\", undefined, undefined, true);\r\n                const countryOptions = countryOptionsMap.get(\"OptionList\");\r\n                selectedRecord['countryValue'] = { value: response[1].data.ncountrycode, label: response[1].data.scountryname }\r\n                selectedRecord['countryShortName'] = response[1].data.scountryshortname\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        selectedRecord,\r\n                        operation: \"update\",\r\n                        countryOptions ,\r\n                        screenName: editParam.screenName,\r\n                        inputparam: editParam.inputparam,\r\n                        ncontrolcode: editParam.ncontrolCode,\r\n                        openModal: true,\r\n                        loading: false,\r\n                        selectedId\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}