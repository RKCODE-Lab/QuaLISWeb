{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicpreregdesign\\\\registrationsubtype\\\\AddSeqNoFormatPopup.jsx\";\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { AtAccordion } from '../../../components/custom-accordion/custom-accordion.styles';\nimport { Accordion, Button, Card, Col, ListGroupItem, Nav, Row, useAccordionToggle } from 'react-bootstrap';\nimport AccordionContext from \"react-bootstrap/AccordionContext\";\nimport { Draggable, Droppable } from 'react-drag-and-drop';\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBackspace, faChevronDown, faChevronUp, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\nimport FormNumericInput from '../../../components/form-numeric-input/form-numeric-input.component';\nimport FormInput from '../../../components/form-input/form-input.component';\nimport CustomSwitch from '../../../components/custom-switch/custom-switch.component';\n\nclass AddSeqNoFormatPopup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    this.date = new Date();\n    this.year = this.props.intl.formatMessage({\n      id: \"IDS_YEAR\"\n    });\n    this.month = this.props.intl.formatMessage({\n      id: \"IDS_MONTH\"\n    });\n    this.dates = this.props.intl.formatMessage({\n      id: \"IDS_DATE\"\n    });\n    this.character = this.props.intl.formatMessage({\n      id: \"IDS_LIMSCHARACTER\"\n    });\n    this.seqNo = this.props.intl.formatMessage({\n      id: \"IDS_SEQNO\"\n    });\n  }\n\n  render() {\n    let str = '{9999}';\n    str = str.substring(1, str.length - 2);\n    str = str.padStart(this.props.selectedRecord.seqnolength || 4, 9);\n    let sseqno = '{' + str + '}';\n    const formatComponents = [{\n      \"componentname\": `${this.year} (${this.date.getFullYear()})`,\n      \"componentvalue\": \"{yyyy}\"\n    }, {\n      \"componentname\": `${this.year} (${this.date.getFullYear().toString().substring(2, 4)})`,\n      \"componentvalue\": \"{yy}\"\n    }, {\n      \"componentname\": `${this.month} (${(this.date.getMonth() + 1).toString().padStart(2, \"0\")})`,\n      \"componentvalue\": \"{MM}\"\n    }, {\n      \"componentname\": `${this.month} (${this.months[this.date.getMonth()]})`,\n      \"componentvalue\": \"{MMM}\"\n    }, {\n      \"componentname\": `${this.dates} (${this.date.getDate()})`,\n      \"componentvalue\": \"{DD}\"\n    }, {\n      \"componentname\": `${this.character} (${this.props.selectedRecord.splaintext || \"\"})`,\n      \"componentvalue\": this.props.selectedRecord.splaintext || \"\"\n    }, {\n      \"componentname\": `${this.seqNo} (${sseqno})`,\n      \"componentvalue\": this.props.selectedRecord.sseqno || \"{9999}\"\n    }, {\n      \"componentname\": \"/\",\n      \"componentvalue\": \"/\"\n    }, {\n      \"componentname\": \"-\",\n      \"componentvalue\": \"-\"\n    }];\n    const configFields = [{\n      \"idsName\": \"IDS_NEEDSUBSAMPLE\",\n      \"dataField\": \"nneedsubsample\"\n    }, {\n      \"idsName\": \"IDS_NEEDSAMPLEDBY\",\n      \"dataField\": \"nneedsampledby\"\n    }, {\n      \"idsName\": \"IDS_NEEDJOBALLOCATION\",\n      \"dataField\": \"nneedjoballocation\"\n    }, {\n      \"idsName\": \"IDS_NEEDMYJOB\",\n      \"dataField\": \"nneedmyjob\"\n    }, {\n      \"idsName\": \"IDS_NEEDTESTINITIATE\",\n      \"dataField\": \"nneedtestinitiate\"\n    }, {\n      \"idsName\": \"IDS_NEEDSCHEDULER\",\n      \"dataField\": \"nneedscheduler\"\n    }, {\n      \"idsName\": \"IDS_NEEDTEMPLATEBASEDFLOW\",\n      \"dataField\": \"nneedtemplatebasedflow\"\n    }, {\n      \"idsName\": \"IDS_USENEWFORMAT\",\n      \"dataField\": \"nisnewformat\"\n    }];\n\n    const CustomToggle = ({\n      children,\n      eventKey\n    }) => {\n      const currentEventKey = React.useContext(AccordionContext);\n      const isCurrentEventKey = currentEventKey === eventKey;\n      const decoratedOnClick = useAccordionToggle(eventKey, \"\");\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-between\",\n        onClick: decoratedOnClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }\n      }, children, isCurrentEventKey ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faChevronUp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }\n      }) : /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faChevronDown //onClick={children.props.onExpandCall}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 27\n        }\n      }));\n    };\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, configFields.map(field => /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch, {\n      label: this.props.intl.formatMessage({\n        id: field.idsName\n      }),\n      type: \"switch\",\n      name: field.dataField,\n      onChange: event => this.props.onInputOnChange(event),\n      isMandatory: false,\n      required: true,\n      checked: this.props.selectedRecord[field.dataField],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 29\n      }\n    })))), this.props.selectedRecord.nisnewformat ? /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nperiodcode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_RESETSEQEVERY\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_RESETDURATION\"\n      }),\n      options: this.props.periodList || [],\n      value: this.props.selectedRecord.nperiodcode || '',\n      isMandatory: true,\n      isSearchable: true,\n      isMulti: false,\n      onChange: event => this.props.onComboChange(event, 'nperiodcode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      name: \"splaintext\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_TEXTVALUE\"\n      }),\n      type: \"text\",\n      value: this.props.selectedRecord.splaintext || \"\",\n      required: true,\n      maxLength: 3,\n      onChange: event => this.props.onInputOnChange(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormNumericInput, {\n      name: \"seqnolength\",\n      className: \"form-control\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_SEQUENCENOLENGTH\"\n      }),\n      value: this.props.selectedRecord.seqnolength || 4,\n      isMandatory: true,\n      type: \"number\",\n      noStyle: true,\n      required: true,\n      strict: true,\n      maxLength: 1,\n      onChange: event => this.props.onNumericInputChange(event, 'seqnolength'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 29\n      }\n    }))) : \"\", /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      className: \"mt-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(AtAccordion, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Accordion, {\n      activeKey: this.props.selectedRecord.nisnewformat ? \"InputFields\" : \"ExistingFormats\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 37\n      }\n    }, this.props.selectedRecord.nisnewformat ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(CustomToggle, {\n      eventKey: \"InputFields\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_FORMATFIELDS\"\n    })))), /*#__PURE__*/React.createElement(Accordion.Collapse, {\n      eventKey: \"InputFields\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, formatComponents.map((sideBarItem, index) => /*#__PURE__*/React.createElement(Draggable, {\n      type: 'formatcomponents',\n      data: sideBarItem.componentvalue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(ListGroupItem, {\n      key: index,\n      className: \"sideBarItem ml-0\",\n      style: {\n        backgroundColor: \"#155592\",\n        justifyContent: \"space-around\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 69\n      }\n    }, sideBarItem.componentname)))))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(CustomToggle, {\n      eventKey: \"ExistingFormats\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_EXISTINGFORMAT\"\n    })))), /*#__PURE__*/React.createElement(Accordion.Collapse, {\n      eventKey: \"ExistingFormats\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, this.props.existingFormats && this.props.existingFormats.map((sideBarItem, index) => /*#__PURE__*/React.createElement(Draggable, {\n      type: 'formatcomponents',\n      data: sideBarItem.ssampleformat,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(ListGroupItem, {\n      key: index,\n      className: \"sideBarItem ml-0\",\n      style: {\n        backgroundColor: \"#155592\",\n        justifyContent: \"space-around\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 69\n      }\n    }, sideBarItem.ssampleformat))))))))))), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 25\n      }\n    }, this.props.selectedRecord.nisnewformat ? /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      className: \"d-flex flex-column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn-user btn-cancel btn p-0\",\n      onClick: this.props.onClickBackspace,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faBackspace,\n      className: \"pr-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 41\n      }\n    }), this.props.intl.formatMessage({\n      id: \"IDS_BACKSPACE\"\n    }))) : \"\", /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      className: \" d-flex justify-content-start\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn-user btn-cancel btn p-0 mb-3\",\n      onClick: this.props.onClickClear,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTimes,\n      className: \"pr-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 37\n      }\n    }), this.props.intl.formatMessage({\n      id: \"IDS_CLEARALL\"\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Droppable, {\n      types: ['formatcomponents'],\n      onDrop: event => this.props.onDrop(event),\n      className: \"p-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormTextarea, {\n      name: \"ssampleformat\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_INPUTFORMAT\"\n      }),\n      onChange: event => this.props.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_INPUTFORMAT\"\n      }),\n      value: this.props.selectedRecord[\"ssampleformat\"],\n      rows: 2,\n      isMandatory: true,\n      readOnly: true,\n      required: true,\n      showCharCount: true,\n      maxLength: 30,\n      charLength: this.props.selectedRecord[\"ssampleformat\"] ? this.props.selectedRecord[\"ssampleformat\"].replaceAll(\"{\", \"\").replaceAll(\"}\", \"\").length : 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormTextarea, {\n      name: \"ssampleformat\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_OUTPUTFORMAT\"\n      }),\n      onChange: event => this.props.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_OUTPUTFORMAT\"\n      }),\n      value: this.props.selectedRecord[\"exampleformat\"],\n      rows: 2,\n      isMandatory: true,\n      readOnly: true,\n      required: true,\n      showCharCount: true,\n      maxLength: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 33\n      }\n    }))))));\n  }\n\n}\n\nexport default injectIntl(AddSeqNoFormatPopup);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dynamicpreregdesign/registrationsubtype/AddSeqNoFormatPopup.jsx"],"names":["React","injectIntl","PerfectScrollbar","AtAccordion","Accordion","Button","Card","Col","ListGroupItem","Nav","Row","useAccordionToggle","AccordionContext","Draggable","Droppable","FormTextarea","FontAwesomeIcon","faBackspace","faChevronDown","faChevronUp","faTimes","FormSelectSearch","FormNumericInput","FormInput","CustomSwitch","AddSeqNoFormatPopup","Component","constructor","props","months","date","Date","year","intl","formatMessage","id","month","dates","character","seqNo","render","str","substring","length","padStart","selectedRecord","seqnolength","sseqno","formatComponents","getFullYear","toString","getMonth","getDate","splaintext","configFields","CustomToggle","children","eventKey","currentEventKey","useContext","isCurrentEventKey","decoratedOnClick","map","field","idsName","dataField","event","onInputOnChange","nisnewformat","periodList","nperiodcode","onComboChange","onNumericInputChange","sideBarItem","index","componentvalue","backgroundColor","justifyContent","componentname","existingFormats","ssampleformat","onClickBackspace","onClickClear","onDrop","replaceAll"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { AtAccordion } from '../../../components/custom-accordion/custom-accordion.styles';\r\nimport { Accordion, Button, Card, Col, ListGroupItem, Nav, Row, useAccordionToggle } from 'react-bootstrap';\r\nimport AccordionContext from \"react-bootstrap/AccordionContext\";\r\nimport { Draggable, Droppable } from 'react-drag-and-drop';\r\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBackspace, faChevronDown, faChevronUp, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\nimport FormNumericInput from '../../../components/form-numeric-input/form-numeric-input.component';\r\nimport FormInput from '../../../components/form-input/form-input.component';\r\nimport CustomSwitch from '../../../components/custom-switch/custom-switch.component';\r\nclass AddSeqNoFormatPopup extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n        this.date = new Date();\r\n        this.year = this.props.intl.formatMessage({ id: \"IDS_YEAR\" })\r\n        this.month = this.props.intl.formatMessage({ id: \"IDS_MONTH\" })\r\n        this.dates = this.props.intl.formatMessage({ id: \"IDS_DATE\" })\r\n        this.character = this.props.intl.formatMessage({ id: \"IDS_LIMSCHARACTER\" })\r\n        this.seqNo = this.props.intl.formatMessage({ id: \"IDS_SEQNO\" })\r\n    }\r\n    render() {\r\n        let str = '{9999}'\r\n        str = str.substring(1, str.length - 2)\r\n        str = str.padStart(this.props.selectedRecord.seqnolength || 4, 9)\r\n        let sseqno = '{' + str + '}'\r\n        const formatComponents = [\r\n            { \"componentname\": `${this.year} (${this.date.getFullYear()})`, \"componentvalue\": \"{yyyy}\" },\r\n            { \"componentname\": `${this.year} (${this.date.getFullYear().toString().substring(2, 4)})`, \"componentvalue\": \"{yy}\" },\r\n            { \"componentname\": `${this.month} (${(this.date.getMonth() + 1).toString().padStart(2,\"0\")})`, \"componentvalue\": \"{MM}\" },\r\n            { \"componentname\": `${this.month} (${this.months[this.date.getMonth()]})`, \"componentvalue\": \"{MMM}\" },\r\n            { \"componentname\": `${this.dates} (${this.date.getDate()})`, \"componentvalue\": \"{DD}\" },\r\n            { \"componentname\": `${this.character} (${this.props.selectedRecord.splaintext || \"\"})`, \"componentvalue\": this.props.selectedRecord.splaintext || \"\" },\r\n            { \"componentname\": `${this.seqNo} (${sseqno})`, \"componentvalue\": this.props.selectedRecord.sseqno || \"{9999}\" },\r\n            { \"componentname\": \"/\", \"componentvalue\": \"/\" },\r\n            { \"componentname\": \"-\", \"componentvalue\": \"-\" }\r\n        ]\r\n        const configFields = [\r\n            { \"idsName\": \"IDS_NEEDSUBSAMPLE\", \"dataField\": \"nneedsubsample\" },\r\n            { \"idsName\": \"IDS_NEEDSAMPLEDBY\", \"dataField\": \"nneedsampledby\" },\r\n            { \"idsName\": \"IDS_NEEDJOBALLOCATION\", \"dataField\": \"nneedjoballocation\" },\r\n            { \"idsName\": \"IDS_NEEDMYJOB\", \"dataField\": \"nneedmyjob\" },          \r\n            { \"idsName\": \"IDS_NEEDTESTINITIATE\", \"dataField\": \"nneedtestinitiate\" },\r\n            { \"idsName\": \"IDS_NEEDSCHEDULER\", \"dataField\": \"nneedscheduler\" },\r\n            { \"idsName\": \"IDS_NEEDTEMPLATEBASEDFLOW\", \"dataField\": \"nneedtemplatebasedflow\" },\r\n            { \"idsName\": \"IDS_USENEWFORMAT\", \"dataField\": \"nisnewformat\" },\r\n\r\n        ]\r\n        const CustomToggle = ({ children, eventKey }) => {\r\n            const currentEventKey = React.useContext(AccordionContext);\r\n            const isCurrentEventKey = currentEventKey === eventKey;\r\n            const decoratedOnClick = useAccordionToggle(eventKey, \"\");\r\n            return (\r\n                <div\r\n                    className=\"d-flex justify-content-between\"\r\n                    onClick={decoratedOnClick}>\r\n                    {children}\r\n                    {isCurrentEventKey ?\r\n                        <FontAwesomeIcon icon={faChevronUp} />\r\n                        : <FontAwesomeIcon icon={faChevronDown} //onClick={children.props.onExpandCall}\r\n                        />}\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <>\r\n                <Row>\r\n                    {configFields.map(field =>\r\n                        <Col md={3}>\r\n                            <CustomSwitch\r\n                                label={this.props.intl.formatMessage({ id: field.idsName })}\r\n                                type=\"switch\"\r\n                                name={field.dataField}\r\n                                onChange={(event) => this.props.onInputOnChange(event)}\r\n                                isMandatory={false}\r\n                                required={true}\r\n                                checked={this.props.selectedRecord[field.dataField]}\r\n                            />\r\n                        </Col>\r\n                    )}\r\n                </Row>\r\n                {this.props.selectedRecord.nisnewformat ?\r\n                    <Row>\r\n                        {/* <Col md={6}>\r\n                            <FormNumericInput\r\n                                name={\"nresetduration\"}\r\n                                label={this.props.intl.formatMessage({ id: \"IDS_RESETDURATION\" })}\r\n                                placeholder={this.props.intl.formatMessage({ id: \"IDS_RESETDURATION\" })}\r\n                                value={this.props.selectedRecord.nresetduration || \"\"}\r\n                                className=\"form-control\"\r\n                                noStyle={true}\r\n                                isMandatory={true}\r\n                                required={true}\r\n                                maxLength={100}\r\n                                onChange={(event) => this.props.onNumericInputChange(event, 'nresetduration')}\r\n                            />\r\n                        </Col> */}\r\n                        <Col md={4}>\r\n                            <FormSelectSearch\r\n                                name={\"nperiodcode\"}\r\n                                formLabel={this.props.intl.formatMessage({ id: \"IDS_RESETSEQEVERY\" })}\r\n                                placeholder={this.props.intl.formatMessage({ id: \"IDS_RESETDURATION\" })}\r\n                                options={this.props.periodList || []}\r\n                                value={this.props.selectedRecord.nperiodcode || ''}\r\n                                isMandatory={true}\r\n                                isSearchable={true}\r\n                                isMulti={false}\r\n                                onChange={(event) => this.props.onComboChange(event, 'nperiodcode')}\r\n                            />\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <FormInput\r\n                                name={\"splaintext\"}\r\n                                label={this.props.intl.formatMessage({ id: \"IDS_TEXTVALUE\" })}\r\n                                type=\"text\"\r\n                                value={this.props.selectedRecord.splaintext || \"\"}\r\n                                required={true}\r\n                                maxLength={3}\r\n                                onChange={(event) => this.props.onInputOnChange(event)}\r\n                            />\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <FormNumericInput\r\n                                name={\"seqnolength\"}\r\n                                className={\"form-control\"}\r\n                                label={this.props.intl.formatMessage({ id: \"IDS_SEQUENCENOLENGTH\" })}\r\n                                value={this.props.selectedRecord.seqnolength || 4}\r\n                                isMandatory={true}\r\n                                type=\"number\"\r\n                                noStyle={true}\r\n                                required={true}\r\n                                strict={true}\r\n                                maxLength={1}\r\n                                onChange={(event) => this.props.onNumericInputChange(event, 'seqnolength')}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    : \"\"}\r\n                <Row>\r\n                    <Col md={4} className='mt-3'>\r\n                        <PerfectScrollbar>\r\n                            <AtAccordion>\r\n                                <Accordion activeKey={this.props.selectedRecord.nisnewformat ? \"InputFields\" : \"ExistingFormats\"} >\r\n                                    <Card>\r\n                                        {this.props.selectedRecord.nisnewformat ?\r\n                                            <>\r\n                                                <Card.Header>\r\n                                                    <CustomToggle eventKey={\"InputFields\"}>\r\n                                                        <Card.Title>\r\n                                                            {this.props.intl.formatMessage({ id: \"IDS_FORMATFIELDS\" })}\r\n                                                        </Card.Title>\r\n                                                    </CustomToggle>\r\n                                                </Card.Header>\r\n                                                <Accordion.Collapse eventKey={\"InputFields\"}>\r\n                                                    <>\r\n                                                        {\r\n                                                            formatComponents.map((sideBarItem, index) => (\r\n                                                                <Draggable type={'formatcomponents'} data={sideBarItem.componentvalue}>\r\n                                                                    <ListGroupItem key={index} className=\"sideBarItem ml-0\" style={{ backgroundColor: \"#155592\", justifyContent: \"space-around\" }}>\r\n                                                                        {sideBarItem.componentname}\r\n                                                                    </ListGroupItem>\r\n                                                                </Draggable>\r\n                                                            ))\r\n                                                        }\r\n                                                    </>\r\n                                                </Accordion.Collapse>\r\n                                            </>\r\n                                            :\r\n                                            <>\r\n                                                <Card.Header>\r\n                                                    <CustomToggle eventKey={\"ExistingFormats\"}>\r\n                                                        <Card.Title>\r\n                                                            {this.props.intl.formatMessage({ id: \"IDS_EXISTINGFORMAT\" })}\r\n                                                        </Card.Title>\r\n                                                    </CustomToggle>\r\n                                                </Card.Header>\r\n                                                <Accordion.Collapse eventKey={\"ExistingFormats\"}>\r\n                                                    <>\r\n                                                        {\r\n                                                            this.props.existingFormats && this.props.existingFormats.map((sideBarItem, index) => (\r\n                                                                <Draggable type={'formatcomponents'} data={sideBarItem.ssampleformat}>\r\n                                                                    <ListGroupItem key={index} className=\"sideBarItem ml-0\" style={{ backgroundColor: \"#155592\", justifyContent: \"space-around\" }}>\r\n                                                                        {sideBarItem.ssampleformat}\r\n                                                                    </ListGroupItem>\r\n                                                                </Draggable>\r\n                                                            ))\r\n                                                        }\r\n                                                    </>\r\n                                                </Accordion.Collapse>\r\n                                            </>\r\n                                        }\r\n                                    </Card>\r\n                                </Accordion>\r\n                            </AtAccordion>\r\n                        </PerfectScrollbar>\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <Row>\r\n                            {this.props.selectedRecord.nisnewformat ?\r\n                                <Col md={6} className='d-flex flex-column'>\r\n                                    <Nav.Link className=\"btn-user btn-cancel btn p-0\" onClick={this.props.onClickBackspace}>\r\n                                        <FontAwesomeIcon icon={faBackspace} className='pr-1' />\r\n                                        {this.props.intl.formatMessage({ id: \"IDS_BACKSPACE\" })}\r\n                                    </Nav.Link>\r\n                                </Col>\r\n                                : \"\"\r\n                            }\r\n                            <Col md={6} className=' d-flex justify-content-start'>\r\n                                <Nav.Link className=\"btn-user btn-cancel btn p-0 mb-3\" onClick={this.props.onClickClear}>\r\n                                    <FontAwesomeIcon icon={faTimes} className='pr-1' />\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_CLEARALL\" })}\r\n                                </Nav.Link>\r\n                            </Col>\r\n                            <Col md={12}>\r\n                                <Droppable\r\n                                    types={['formatcomponents']}\r\n                                    onDrop={event => this.props.onDrop(event)}\r\n                                    className={\"p-1\"}\r\n                                >\r\n                                    <FormTextarea\r\n                                        name={\"ssampleformat\"}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_INPUTFORMAT\" })}\r\n                                        onChange={(event) => this.props.onInputOnChange(event)}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_INPUTFORMAT\" })}\r\n                                        value={this.props.selectedRecord[\"ssampleformat\"]}\r\n                                        rows={2}\r\n                                        isMandatory={true}\r\n                                        readOnly={true}\r\n                                        required={true}\r\n                                        showCharCount={true}\r\n                                        maxLength={30}\r\n                                        charLength ={ this.props.selectedRecord[\"ssampleformat\"] ? this.props.selectedRecord[\"ssampleformat\"].replaceAll(\"{\",\"\").replaceAll(\"}\",\"\").length:0}\r\n                                    />\r\n                                </Droppable>\r\n                            </Col>\r\n                            <Col md={12}>\r\n                                <FormTextarea\r\n                                    name={\"ssampleformat\"}\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_OUTPUTFORMAT\" })}\r\n                                    onChange={(event) => this.props.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_OUTPUTFORMAT\" })}\r\n                                    value={this.props.selectedRecord[\"exampleformat\"]}\r\n                                    rows={2}\r\n                                    isMandatory={true}\r\n                                    readOnly={true}\r\n                                    required={true}\r\n                                    showCharCount={true}\r\n                                    maxLength={30}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default injectIntl(AddSeqNoFormatPopup)"]},"metadata":{},"sourceType":"module"}