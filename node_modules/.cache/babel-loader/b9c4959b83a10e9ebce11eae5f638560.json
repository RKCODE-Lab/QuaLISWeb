{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\configurationmaster\\\\approvalconfig\\\\ApprovalConfig.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { callService, crudMaster } from '../../../actions';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faCopy, faThumbsUp, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { sortData, getControlMap, showEsign, constructOptionList, validateCreateView } from '../../../components/CommonScript';\nimport { process } from '@progress/kendo-data-query';\nimport ListMaster from '../../../components/list-master/list-master.component';\nimport Esign from '../../audittrail/Esign';\nimport SampleFilter from './SampleFilter';\nimport AddApprovalConfig from './AddApprovalConfig';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport { ReadOnlyText, ContentPanel } from '../../../components/App.styles';\nimport { openModal, updateStore, getApprovalConfigVersion, getApprovalConfigEditData, copyVersion, setDefault, validateEsignCredential, getFilterChange, getRoleDetails, getCopySubType, filterColumnData, getApprovalConfigurationVersion, approveVersion } from '../../../actions';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport { ApprovalSubType, designProperties, transactionStatus } from '../../../components/Enumeration';\nimport FilterStatusTab from './FilterStatusTab';\nimport ValidationStatusTab from './ValidationStatusTab';\nimport UserRoleAccordion from './UserRoleAccordion';\nimport CustomAccordion from '../../../components/custom-accordion/custom-accordion.component';\nimport DecisionStatusTab from './DecisionStatusTab';\nimport ActionStatusTab from './ActionStatusTab'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\nimport { Affix } from 'rsuite';\nimport FormInput from '../../../components/form-input/form-input.component';\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component'; // import ReactTooltip from 'react-tooltip';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass ApprovalConfig extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sidebarExpandCollapse = () => {\n      this.setState({\n        sidebarview: true\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.handleClose = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteApprovalConfigVersion = deleteId => {\n      if (this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.APPROVED || this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTVERSION\"\n        }));\n      } else {\n        const postParam = {\n          inputListName: \"versionData\",\n          selectedObject: \"selectedVersion\",\n          primaryKeyField: \"napproveconfversioncode\",\n          primaryKeyValue: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\n          fetchUrl: \"approvalconfig/getApprovalConfigVersion\",\n          fecthInputObject: {\n            napprovalsubtypecode: this.approvalSubTypeValue.value,\n            userinfo: this.props.Login.userInfo\n          } // unchangeList: [\"approvalsubtype\", \"approvalSubTypeValue\", \"registrationType\",\n          //  \"registrationTypeValue\", \"registrationSubType\", \"registrationSubTypeValue\",\n          //     \"ApprovalsubtypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\"]\n\n        };\n        const inputData = {\n          'approvalconfigversion': {\n            napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\n            napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\n            napprovalsubtypecode: this.approvalSubTypeValue.value,\n            ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue.value,\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        inputData['userinfo'] = this.props.Login.userInfo;\n        const inputParam = {\n          methodUrl: 'ApprovalConfigVersion',\n          classUrl: this.props.Login.inputParam.classUrl,\n          displayName: \"IDS_APPROVALCONFIG\",\n          inputData: inputData,\n          postParam,\n          operation: \"delete\",\n          selectedRecord: { ...this.state.selectedRecord\n          }\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              operation: \"delete\",\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: \"IDS_APPROVALCONFIG\"\n              })\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.approveVersion = approveId => {\n      if (this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.APPROVED || this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTVERSION\"\n        }));\n      } else {\n        if (this.approvalSubTypeValue.value === 2) {\n          const inputData = {\n            // 'approvalconfigversion': {\n            napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\n            napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\n            napprovalsubtypecode: this.approvalSubTypeValue.value,\n            ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1,\n            userinfo: this.props.Login.userInfo,\n            nregsubtypecode: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.value : -1,\n            sregsubtypename: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.label : \"\",\n            nregtypecode: this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue.value : -1 // nregtypecode:this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue.value : -1,\n            // }\n\n          };\n          inputData['userinfo'] = this.props.Login.userInfo; //  inputData['userinfo'] = this.props.Login.userInfo\n\n          const inputParam = {\n            methodUrl: 'ApprovalConfigVersion',\n            classUrl: this.props.Login.inputParam.classUrl,\n            displayName: \"IDS_APPROVALCONFIG\",\n            inputData: inputData,\n            operation: \"approve\",\n            ncontrolcode: approveId\n          }; //const masterData = this.props.Login.masterData;\n\n          this.props.approveVersion(inputParam); // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId)) {\n          //     const updateInfo = {\n          //         typeName: DEFAULT_RETURN,\n          //         data: {\n          //             loadEsign: true, screenData: { inputParam, masterData },\n          //             openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_APPROVALCONFIG\" }), operation: \"approve\"\n          //         }\n          //     }\n          //     this.props.updateStore(updateInfo);\n          // }\n          // else {\n          //     this.props.crudMaster(inputParam, masterData, \"openModal\");\n          // }\n        } else if (this.approvalSubTypeValue.value === ApprovalSubType.PROTOCOLAPPROVAL) {\n          const inputData = {\n            napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\n            napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\n            napprovalsubtypecode: this.approvalSubTypeValue.value,\n            ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1,\n            userinfo: this.props.Login.userInfo\n          };\n          inputData['userinfo'] = this.props.Login.userInfo;\n          const inputParam = {\n            methodUrl: 'ApprovalConfigVersion',\n            classUrl: this.props.Login.inputParam.classUrl,\n            displayName: \"IDS_APPROVALCONFIG\",\n            inputData: inputData,\n            operation: \"approve\",\n            ncontrolcode: approveId\n          };\n          this.props.approveVersion(inputParam);\n        } else {\n          const inputData = {\n            'approvalconfigversion': {\n              napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\n              napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\n              napprovalsubtypecode: this.approvalSubTypeValue.value,\n              ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1,\n              userinfo: this.props.Login.userInfo,\n              nregsubtypecode: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.value || -1 : -1,\n              sregsubtypename: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.label || \"\" : \"\",\n              nregtypecode: this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue.value : -1\n            }\n          };\n          inputData['userinfo'] = this.props.Login.userInfo;\n          const inputParam = {\n            methodUrl: 'ApprovalConfigVersion',\n            classUrl: this.props.Login.inputParam.classUrl,\n            displayName: \"IDS_APPROVALCONFIG\",\n            inputData: inputData,\n            operation: \"updateapprove\",\n            ncontrolcode: approveId,\n            selectedRecord: { ...this.state.selectedRecord\n            }\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                screenName: this.props.intl.formatMessage({\n                  id: \"IDS_APPROVALCONFIG\"\n                }),\n                operation: \"approve\"\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n          }\n        }\n      }\n    };\n\n    this.getGridJsondata = (templatedata, subSampleCheck, subSampleTemplate) => {\n      let gridItem = [];\n      let gridMoreItem = [];\n      let masterdatefields = [];\n      let masterdateconstraints = [];\n      let masteruniquevalidation = [];\n      let mastercombinationunique = [];\n      let editable = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = [];\n      let templatePrimaryKey = \"\";\n      let mastertemplatefields = [];\n      let sampleAuditFields = [];\n      let sampleAuditEditable = [];\n      let sampleAuditMultilingualFields = [];\n      let sampleQuerybuilderViewCondition = [];\n      let sampleQuerybuilderViewSelect = [];\n      let jsqlquerycolumns = [];\n      let jsqlquerycolumnssub = [];\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map((component, index) => {\n          //console.log(\"component2:\", component);\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              if (componentRow.inputtype !== 'frontendsearchfilter' && componentRow.inputtype !== 'backendsearchfilter') {\n                jsqlquerycolumns.push({\n                  \"tablename\": \"registration\",\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"isjsoncolumn\": false,\n                  \"columndatatype\": componentRow.inputtype === 'date' ? \"date\" : \"string\",\n                  \"jsoncolumnname\": \"jsonuidata\"\n                });\n              } // console.log(\"component row2:\", componentRow);\n\n\n              componentRow.unique && masteruniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              componentRow.unique && mastercombinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                }\n              });\n              templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\n              let filterinputtype = \"text\";\n              let comboDataInputObject = {};\n\n              if (componentRow.inputtype === 'combo') {\n                comboDataInputObject = {\n                  \"predefinedtablename\": componentRow.source,\n                  \"predefinedvaluemember\": componentRow.valuemember,\n                  \"predefineddisplaymember\": componentRow.displaymember,\n                  \"predefinedismultilingual\": componentRow.isMultiLingual ? componentRow.isMultiLingual : false,\n                  \"predefinedconditionalString\": \"\\\"\" + componentRow.valuemember + \"\\\"\" + \" > '0' \"\n                };\n                jnumericcolumns.push({\n                  \"columnname\": componentRow.displaymember,\n                  \"displayname\": componentRow.displayname,\n                  \"foriegntablePK\": componentRow.valuemember,\n                  // \"ismultilingual\": true,\n                  // \"conditionstring\": \" and nformcode in (\"+componentRow.table.item.nformcode+\") \",\n                  \"tablecolumnname\": componentRow.label,\n                  \"foriegntablename\": componentRow.source,\n                  ...comboDataInputObject\n                });\n\n                if (!componentRow.ismultilingual === true) {\n                  sampleQuerybuilderViewCondition.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"columntype\": 1,\n                    \"viewvaluemember\": componentRow.label,\n                    \"valuemember\": componentRow.valuemember,\n                    \"displaymember\": componentRow.displaymember,\n                    \"mastertablename\": componentRow.source,\n                    \"needmasterdata\": true,\n                    \"columntypedesc\": \"textinput\"\n                  });\n                } else {\n                  sampleQuerybuilderViewCondition.push({\n                    \"columnname\": component.label,\n                    \"columntype\": 4,\n                    \"columntypedesc\": \"combo\",\n                    \"isjsondisplayname\": true,\n                    \"displayname\": component.displayname,\n                    \"sforeigntablename\": component.source,\n                    \"sforeigncolumnname\": component.valuemember,\n                    \"sforeigndisplayname\": \"jsondata->[\" + component.displaymember + \"]->>\"\n                  });\n                }\n\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n                filterinputtype = \"predefinednumeric\";\n              } // samplesearchfields.push(componentRow.label)\n\n\n              if (componentRow.inputtype === 'date') {\n                filterinputtype = \"date\";\n                masterdatefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                masterdateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 2,\n                  \"columntypedesc\": \"datetime\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\n                filterinputtype = \"numeric\";\n\n                if (componentRow.inputtype === 'Numeric') {\n                  sampleQuerybuilderViewCondition.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"columntype\": 5,\n                    \"columntypedesc\": \"numericinput\"\n                  });\n                  sampleQuerybuilderViewSelect.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"languagecode\": false\n                  });\n                }\n              }\n\n              if (componentRow.inputtype === 'textinput' || componentRow.inputtype === 'email' || componentRow.inputtype === 'textarea' || componentRow.inputtype === 'radio') {\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 1,\n                  \"columntypedesc\": \"textinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              jdynamiccolumns.push({\n                default: componentRow.unique ? true : false,\n                filterinputtype,\n                columnname: componentRow.label,\n                displayname: componentRow.displayname,\n                ...comboDataInputObject\n              }); // displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\n              // componentRow.templatemandatory && listItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\n\n              if (componentRow.mandatory || componentRow.templatemandatory) {\n                gridItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n                sampleAuditEditable.push(componentRow.label);\n              } else {\n                gridMoreItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              }\n\n              mastertemplatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n              sampleAuditFields.push(componentRow.label);\n              sampleAuditMultilingualFields.push({\n                [componentRow.label]: componentRow.displayname\n              });\n\n              if (componentRow.templatemandatory) {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: []\n                });\n              } else {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: [transactionStatus.DRAFT]\n                });\n              }\n\n              return null;\n            });\n          } else {\n            if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\n              jsqlquerycolumns.push({\n                \"tablename\": \"registration\",\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"isjsoncolumn\": false,\n                \"columndatatype\": component.inputtype === 'date' ? 'date' : \"string\",\n                \"jsoncolumnname\": \"jsondata\"\n              });\n            } //console.log(\"component2:\", component);\n\n\n            component.unique && masteruniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            component.unique && mastercombinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              }\n            });\n            templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\n            let filterinputtype = \"text\";\n            let comboDataInputObject = {};\n            mastertemplatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            });\n            sampleAuditFields.push(component.label);\n            sampleAuditMultilingualFields.push({\n              [component.label]: component.displayname\n            });\n\n            if (component.inputtype === 'combo') {\n              filterinputtype = \"predefinednumeric\";\n              comboDataInputObject = {\n                \"predefinedtablename\": component.source,\n                \"predefinedvaluemember\": component.valuemember,\n                \"predefineddisplaymember\": component.displaymember,\n                \"predefinedismultilingual\": component.isMultiLingual ? component.isMultiLingual : false,\n                \"predefinedconditionalString\": \"\\\"\" + component.valuemember + \"\\\"\" + \" > '0'\"\n              };\n              jnumericcolumns.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"foriegntablePK\": component.valuemember,\n                // \"ismultilingual\": true,\n                //\"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\n                \"tablecolumnname\": component.label,\n                \"foriegntablename\": component.source,\n                ...comboDataInputObject\n              });\n\n              if (!component.ismultilingual === true) {\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"columntype\": 1,\n                  \"viewvaluemember\": component.label,\n                  \"valuemember\": component.valuemember,\n                  \"displaymember\": component.displaymember,\n                  \"mastertablename\": component.source,\n                  \"needmasterdata\": true,\n                  \"columntypedesc\": \"textinput\"\n                });\n              } else {\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": component.label,\n                  \"columntype\": 4,\n                  \"columntypedesc\": \"combo\",\n                  \"isjsondisplayname\": true,\n                  \"displayname\": component.displayname,\n                  \"sforeigntablename\": component.source,\n                  \"sforeigncolumnname\": component.valuemember,\n                  \"sforeigndisplayname\": \"jsondata->[\" + component.displaymember + \"]->>\"\n                });\n              }\n\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            } // samplesearchfields.push(component.label)\n\n\n            if (component.inputtype === 'date') {\n              filterinputtype = \"date\";\n              masterdatefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              masterdateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 2,\n                \"columntypedesc\": \"datetime\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            if (component.inputtype === 'Numeric' || component.inputtype === 'radio') {\n              filterinputtype = \"numeric\";\n\n              if (component.inputtype === 'Numeric') {\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"columntype\": 5,\n                  \"columntypedesc\": \"numericinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"languagecode\": false\n                });\n              }\n            }\n\n            if (component.inputtype === 'textinput' || component.inputtype === 'email' || component.inputtype === 'textarea' || component.inputtype === 'radio') {\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 1,\n                \"columntypedesc\": \"textinput\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            jdynamiccolumns.push({\n              default: component.unique ? true : false,\n              columnname: component.label,\n              displayname: component.displayname,\n              filterinputtype,\n              ...comboDataInputObject\n            });\n\n            if (component.mandatory || component.templatemandatory) {\n              gridItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n              sampleAuditEditable.push(component.label);\n            } else {\n              gridMoreItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            }\n\n            if (component.templatemandatory) {\n              editable.push({\n                label: component.label,\n                editableuntill: []\n              });\n            } else {\n              editable.push({\n                label: component.label,\n                editableuntill: [transactionStatus.DRAFT]\n              });\n            }\n\n            return null;\n          }\n        });\n      }));\n\n      if (subSampleCheck) {\n        subSampleTemplate && subSampleTemplate.jsondata.map(row => row.children && row.children.map(column => {\n          column.children && column.children.map((component, index) => {\n            //console.log(\"component2:\", component);\n            if (component.hasOwnProperty('children')) {\n              component.children.map(componentRow => {\n                if (componentRow.inputtype !== 'frontendsearchfilter' && componentRow.inputtype !== 'backendsearchfilter') {\n                  jsqlquerycolumnssub.push({\n                    \"tablename\": \"registrationsample\",\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"isjsoncolumn\": true,\n                    \"columndatatype\": componentRow.inputtype === 'date' ? \"date\" : \"string\",\n                    \"jsoncolumnname\": \"jsonuidata\"\n                  });\n                }\n\n                if (componentRow.inputtype === 'combo') {\n                  if (!componentRow.ismultilingual === true) {\n                    sampleQuerybuilderViewCondition.push({\n                      \"columnname\": componentRow.label,\n                      \"displayname\": componentRow.displayname,\n                      \"columntype\": 1,\n                      \"viewvaluemember\": componentRow.label,\n                      \"valuemember\": componentRow.valuemember,\n                      \"displaymember\": componentRow.displaymember,\n                      \"mastertablename\": componentRow.source,\n                      \"needmasterdata\": true,\n                      \"columntypedesc\": \"textinput\"\n                    });\n                  } else {\n                    sampleQuerybuilderViewCondition.push({\n                      \"columnname\": component.label,\n                      \"columntype\": 1,\n                      \"displayname\": componentRow.displayname,\n                      \"columntypedesc\": \"textinput\",\n                      \"isjsondisplayname\": true,\n                      \"sforeigntablename\": component.source,\n                      \"sforeigncolumnname\": component.valuemember,\n                      \"sforeigndisplayname\": \"jsondata->[\" + component.displaymember + \"]->>\"\n                    });\n                  }\n\n                  sampleQuerybuilderViewSelect.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"languagecode\": false\n                  });\n                }\n\n                if (componentRow.inputtype === 'date') {\n                  sampleQuerybuilderViewCondition.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"columntype\": 2,\n                    \"columntypedesc\": \"datetime\"\n                  });\n                  sampleQuerybuilderViewSelect.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"languagecode\": false\n                  });\n                }\n\n                if (componentRow.inputtype === 'Numeric') {\n                  sampleQuerybuilderViewCondition.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"columntype\": 5,\n                    \"columntypedesc\": \"numericinput\"\n                  });\n                  sampleQuerybuilderViewSelect.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"languagecode\": false\n                  });\n                }\n\n                if (componentRow.inputtype === 'textinput' || componentRow.inputtype === 'email' || componentRow.inputtype === 'textarea' || componentRow.inputtype === 'radio') {\n                  sampleQuerybuilderViewCondition.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"columntype\": 1,\n                    \"columntypedesc\": \"textinput\"\n                  });\n                  sampleQuerybuilderViewSelect.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"languagecode\": false\n                  });\n                }\n\n                return null;\n              });\n            } else {\n              if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\n                jsqlquerycolumnssub.push({\n                  \"tablename\": \"registrationsample\",\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"isjsoncolumn\": true,\n                  \"columndatatype\": component.inputtype === 'date' ? \"date\" : \"string\",\n                  \"jsoncolumnname\": \"jsonuidata\"\n                });\n              }\n\n              if (component.inputtype === 'combo') {\n                if (!component.ismultilingual === true) {\n                  sampleQuerybuilderViewCondition.push({\n                    \"columnname\": component.label,\n                    \"displayname\": component.displayname,\n                    \"columntype\": 1,\n                    \"viewvaluemember\": component.label,\n                    \"valuemember\": component.valuemember,\n                    \"displaymember\": component.displaymember,\n                    \"mastertablename\": component.source,\n                    \"needmasterdata\": true,\n                    \"columntypedesc\": \"textinput\"\n                  });\n                } else {\n                  sampleQuerybuilderViewCondition.push({\n                    \"columnname\": component.label,\n                    \"columntype\": 4,\n                    \"displayname\": component.displayname,\n                    \"columntypedesc\": \"combo\",\n                    \"isjsondisplayname\": true,\n                    \"sforeigntablename\": component.source,\n                    \"sforeigncolumnname\": component.valuemember,\n                    \"sforeigndisplayname\": \"jsondata->[\" + component.displaymember + \"]->>\"\n                  });\n                }\n\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              if (component.inputtype === 'date') {\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"columntype\": 2,\n                  \"columntypedesc\": \"datetime\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              if (component.inputtype === 'Numeric') {\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"columntype\": 5,\n                  \"columntypedesc\": \"numericinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              if (component.inputtype === 'textinput' || component.inputtype === 'email' || component.inputtype === 'textarea' || component.inputtype === 'radio') {\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"columntype\": 1,\n                  \"columntypedesc\": \"textinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              return null;\n            }\n          });\n        }));\n      }\n\n      let jsondata = {\n        griditem: gridItem,\n        gridmoreitem: gridMoreItem,\n        masterdatefields,\n        masterdateconstraints,\n        masteruniquevalidation,\n        editable,\n        mastertemplatefields,\n        mastercombinationunique,\n        sampleAuditFields,\n        sampleAuditEditable,\n        sampleAuditMultilingualFields\n      }; //console.log(\"dynamiccolumns:\", jdynamiccolumns);\n\n      return {\n        jsondata,\n        jdynamiccolumns,\n        jnumericcolumns,\n        templatePrimaryKey,\n        sampleQuerybuilderViewCondition,\n        sampleQuerybuilderViewSelect,\n        jsqlquerycolumns,\n        jsqlquerycolumnssub\n      };\n    };\n\n    this.approveVersion1 = approveId => {\n      if (this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.APPROVED || this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTVERSION\"\n        }));\n      } else {\n        const postParam = {\n          inputListName: \"versionData\",\n          selectedObject: \"selectedVersion\",\n          primaryKeyField: \"napproveconfversioncode\",\n          primaryKeyValue: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\n          fetchUrl: \"approvalconfig/getApprovalConfigVersion\",\n          fecthInputObject: {\n            napprovalsubtypecode: this.approvalSubTypeValue.value,\n            userinfo: this.props.Login.userInfo\n          },\n          unchangeList: [\"approvalsubtype\", \"approvalSubTypeValue\", \"registrationType\", \"registrationTypeValue\", \"registrationSubType\", \"registrationSubTypeValue\", \"ApprovalsubtypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\"]\n        };\n        let {\n          jdynamiccolumns,\n          jnumericcolumns,\n          templatePrimaryKey,\n          sampleQuerybuilderViewCondition,\n          sampleQuerybuilderViewSelect,\n          jsqlquerycolumns,\n          jsqlquerycolumnssub\n        } = this.getGridJsondata(this.props.Login.selectedTemplate && this.props.Login.selectedTemplate, this.props.Login.subSampleCheck, this.props.Login.subSampleTemplate);\n        const inputData = {\n          'approvalconfigversion': {\n            napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\n            napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\n            napprovalsubtypecode: this.approvalSubTypeValue.value,\n            ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1,\n            userinfo: this.props.Login.userInfo,\n            nregsubtypecode: this.props.Login.masterData.registrationSubTypeValue && this.props.Login.masterData.registrationSubTypeValue.value ? this.props.Login.masterData.registrationSubTypeValue.value : -1,\n            sregsubtypename: this.props.Login.masterData.registrationSubTypeValue && this.props.Login.masterData.registrationSubTypeValue.label ? this.props.Login.masterData.registrationSubTypeValue.label : \"\",\n            sviewname: this.state.selectedRecord.sviewname,\n            ndesigntemplatemappingcode: this.state.selectedRecord.ndesigntemplatemappingcode.value,\n            sregtemplatename: this.state.selectedRecord.ndesigntemplatemappingcode.label\n          },\n          jdynamiccolumns,\n          jnumericcolumns,\n          sprimarykey: templatePrimaryKey,\n          sampleQuerybuilderViewCondition,\n          sampleQuerybuilderViewSelect,\n          jsqlquerycolumns,\n          jsqlquerycolumnssub\n        };\n        inputData['userinfo'] = this.props.Login.userInfo; // inputData['jsondata'] = this.props.Login.userInfo\n\n        const inputParam = {\n          methodUrl: 'ApprovalConfigVersion',\n          classUrl: this.props.Login.inputParam.classUrl,\n          displayName: \"IDS_APPROVALCONFIG\",\n          inputData: inputData,\n          postParam,\n          operation: \"updateapprove\",\n          selectedRecord: { ...this.state.selectedRecord\n          }\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: \"IDS_APPROVALCONFIG\"\n              }),\n              operation: \"approve\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let postParam = undefined;\n\n      if (this.props.Login.operation === \"copy\") {\n        const subTypeCode = this.approvalSubTypeValue.value;\n        const inputData = {\n          approvalconfigversion: {\n            napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\n            napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\n            napprovalsubtypecode: subTypeCode,\n            sversionname: this.state.selectedRecord.sversionname,\n            nregtypecode: subTypeCode === ApprovalSubType.TESTRESULTAPPROVAL ? this.state.selectedRecord['regtype'] ? this.state.selectedRecord['regtype'].value : this.state.registrationTypeValue[0].value : -1,\n            nregsubtypecode: subTypeCode === ApprovalSubType.TESTRESULTAPPROVAL ? this.state.selectedRecord['regsubtype'] ? this.state.selectedRecord['regsubtype'].value : this.state.registrationSubTypeValue[0].value : -1,\n            userinfo: this.props.Login.userInfo,\n            ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1\n          }\n        };\n        inputData['userinfo'] = this.props.Login.userInfo;\n        const inputParam = {\n          methodUrl: 'ApprovalConfigVersion',\n          classUrl: this.props.Login.inputParam.classUrl,\n          displayName: \"IDS_APPROVALCONFIG\",\n          inputData: inputData,\n          postParam,\n          searchRef: this.searchRef,\n          operation: \"copy\",\n          selectedRecord: { ...this.state.selectedRecord\n          }\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: \"IDS_APPROVALCONFIG\"\n              }),\n              operation: \"copy\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else if (this.props.Login.operation === 'approve') {\n        this.approveVersion1(this.props.Login.ncontrolcode);\n      } else {\n        let bool = true;\n        let errormessage = [];\n        let inputData = {};\n        let approvalconfigrole = [];\n        let filterDetailCount = 0;\n        let validationDetailCount = 0;\n        let decisionDetailCount = 0;\n        let actionDetailCount = 0;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData['napprovalconfigcode'] = this.props.Login.masterData.realApprovalConfigCode;\n        inputData['ntreeversiontempcode'] = this.props.Login.userRoleTree[0].ntreeversiontempcode;\n        inputData['napprovalsubtypecode'] = this.approvalSubTypeValue.value;\n        let isAutoApprovalVersion = this.state.selectedRecord['IDS_AUTOAPPROVAL'] && this.state.selectedRecord['IDS_AUTOAPPROVAL'] === transactionStatus.YES ? true : false;\n        const userRoleTree = this.props.Login.userRoleTree; //.reverse();\n\n        userRoleTree.map(role => {\n          let approvalconfigrolefilterdetail = [];\n          let approvalconfigrolevalidationdetail = [];\n          let approvalconfigroledecisiondetail = [];\n          let approvalconfigroleactiondetail = []; //to fill role details\n\n          if (this.state.selectedRecord[role.nuserrolecode]) {\n            approvalconfigrole.push({\n              napprovalconfigrolecode: this.props.Login.operation === 'create' ? 0 : role.napprovalconfigrolecode,\n              napprovalconfigcode: role.napprovalconfigcode,\n              ntreeversiontempcode: role.ntreeversiontempcode,\n              nuserrolecode: role.nuserrolecode,\n              nchecklistversioncode: this.state.selectedRecord[role.nuserrolecode] ? this.state.selectedRecord[role.nuserrolecode].checklist ? this.state.selectedRecord[role.nuserrolecode].checklist : transactionStatus.NA : transactionStatus.NA,\n              npartialapprovalneed: this.state.selectedRecord[role.nuserrolecode]['Partial Approval_' + role.nuserrolecode] ? this.state.selectedRecord[role.nuserrolecode]['Partial Approval_' + role.nuserrolecode] : transactionStatus.YES,\n              nsectionwiseapprovalneed: this.state.selectedRecord[role.nuserrolecode]['IDS_PARTIALAPPROVAL'] && this.state.selectedRecord[role.nuserrolecode]['IDS_PARTIALAPPROVAL'] === transactionStatus.NO ? this.state.selectedRecord[role.nuserrolecode]['IDS_SECTIONWISEAPPROVE'] ? this.state.selectedRecord[role.nuserrolecode]['IDS_SECTIONWISEAPPROVE'] : transactionStatus.NO : transactionStatus.NO,\n              // nrecomretestneed: this.state.selectedRecord[role.nuserrolecode]['IDS_RECOMMENDRETEST'] ?\n              //     this.state.selectedRecord[role.nuserrolecode]['IDS_RECOMMENDRETEST'] : transactionStatus.NO,\n              // nrecomrecalcneed: this.state.selectedRecord[role.nuserrolecode]['IDS_RECOMMENDRECALC'] ?\n              //     this.state.selectedRecord[role.nuserrolecode]['IDS_RECOMMENDRECALC'] : transactionStatus.NO,\n              // nretestneed: this.state.selectedRecord[role.nuserrolecode]['IDS_RETEST'] ?\n              //     this.state.selectedRecord[role.nuserrolecode]['IDS_RETEST'] : transactionStatus.NO,\n              // nrecalcneed: this.state.selectedRecord[role.nuserrolecode]['IDS_RECALC'] ?\n              //     this.state.selectedRecord[role.nuserrolecode]['IDS_RECALC'] : transactionStatus.NO,\n              // nlevelno: role.nlevelno,\n              nrecomretestneed: this.state.selectedRecord[role.nuserrolecode]['Recommend Retest_' + role.nuserrolecode] ? this.state.selectedRecord[role.nuserrolecode]['Recommend Retest_' + role.nuserrolecode] : transactionStatus.NO,\n              nrecomrecalcneed: this.state.selectedRecord[role.nuserrolecode]['Recommend Recalc_' + role.nuserrolecode] ? this.state.selectedRecord[role.nuserrolecode]['Recommend Recalc_' + role.nuserrolecode] : transactionStatus.NO,\n              nretestneed: this.state.selectedRecord[role.nuserrolecode]['ReTest_' + role.nuserrolecode] ? this.state.selectedRecord[role.nuserrolecode]['ReTest_' + role.nuserrolecode] : transactionStatus.NO,\n              nrecalcneed: this.state.selectedRecord[role.nuserrolecode]['ReCalc_' + role.nuserrolecode] ? this.state.selectedRecord[role.nuserrolecode]['ReCalc_' + role.nuserrolecode] : transactionStatus.NO,\n              nlevelno: role.nlevelno,\n              napprovalstatuscode: this.state.selectedRecord[role.nuserrolecode].approvalstatus ? this.state.selectedRecord[role.nuserrolecode].approvalstatus : transactionStatus.NA,\n              nautoapproval: this.state.selectedRecord['IDS_AUTOAPPROVAL'] && this.state.selectedRecord['IDS_AUTOAPPROVAL'] === transactionStatus.YES ? transactionStatus.YES : this.state.selectedRecord[role.nuserrolecode]['IDS_AUTOAPPROVAL'] ? this.state.selectedRecord[role.nuserrolecode]['IDS_AUTOAPPROVAL'] : transactionStatus.NO,\n              nautoapprovalstatuscode: this.state.selectedRecord['IDS_AUTOAPPROVAL'] && this.state.selectedRecord['IDS_AUTOAPPROVAL'] === transactionStatus.YES ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus : this.state.selectedRecord[role.nuserrolecode]['IDS_AUTOAPPROVAL'] && this.state.selectedRecord[role.nuserrolecode].approvalstatus ? this.state.selectedRecord[role.nuserrolecode].approvalstatus : transactionStatus.NA,\n              nautodescisionstatuscode: this.state.selectedRecord['IDS_AUTOAPPROVAL'] && this.state.selectedRecord['IDS_AUTOAPPROVAL'] === transactionStatus.YES ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus[0] ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus[0] : transactionStatus.PASS : this.state.selectedRecord[role.nuserrolecode]['IDS_AUTOAPPROVAL'] && this.state.selectedRecord[role.nuserrolecode].decisionstatus && this.state.selectedRecord[role.nuserrolecode].decisionstatus.length > 0 ? this.state.selectedRecord[role.nuserrolecode].decisionstatus[0] : transactionStatus.DRAFT // :this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus&&this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus.length>0 ?\n              // :transactionStatus.NA\n              ,\n              ncorrectionneed: this.state.selectedRecord[role.nuserrolecode]['Correction_' + role.nuserrolecode] ? this.state.selectedRecord[role.nuserrolecode]['Correction_' + role.nuserrolecode] : transactionStatus.NO,\n              nesignneed: this.state.selectedRecord[role.nuserrolecode]['Esign_' + role.nuserrolecode] ? this.state.selectedRecord[role.nuserrolecode]['Esign_' + role.nuserrolecode] : transactionStatus.NO,\n              ntransactionstatus: transactionStatus.DRAFT,\n              nsitecode: this.props.Login.userInfo.nmastersitecode,\n              nstatus: transactionStatus.ACTIVE\n            });\n\n            if (this.state.selectedRecord[role.nuserrolecode].filterstatus) {\n              this.state.selectedRecord[role.nuserrolecode].filterstatus.map(filterValue => {\n                filterDetailCount++;\n                approvalconfigrolefilterdetail.push({\n                  napprovalconfigcode: role.napprovalconfigcode,\n                  nuserrolecode: role.nuserrolecode,\n                  nlevelno: role.nlevelno,\n                  ntransactionstatus: filterValue,\n                  nstatus: transactionStatus.ACTIVE\n                });\n                return null;\n              });\n            }\n\n            if (this.state.selectedRecord[role.nuserrolecode].validationstatus) {\n              this.state.selectedRecord[role.nuserrolecode].validationstatus.map(validationValue => {\n                validationDetailCount++;\n                approvalconfigrolevalidationdetail.push({\n                  napprovalconfigcode: role.napprovalconfigcode,\n                  nuserrolecode: role.nuserrolecode,\n                  nlevelno: role.nlevelno,\n                  ntransactionstatus: validationValue,\n                  nstatus: transactionStatus.ACTIVE\n                });\n                return null;\n              });\n            }\n\n            if (this.state.selectedRecord[role.nuserrolecode].decisionstatus) {\n              this.state.selectedRecord[role.nuserrolecode].decisionstatus.map(decisionValue => {\n                decisionDetailCount++;\n                approvalconfigroledecisiondetail.push({\n                  napprovalconfigcode: role.napprovalconfigcode,\n                  nuserrolecode: role.nuserrolecode,\n                  nlevelno: role.nlevelno,\n                  ntransactionstatus: decisionValue,\n                  nstatus: transactionStatus.ACTIVE\n                });\n                return null;\n              });\n            }\n\n            this.state.selectedRecord[`actionStatus_${role.nuserrolecode}`] ? this.state.selectedRecord[`actionStatus_${role.nuserrolecode}`].map(actionValue => {\n              actionDetailCount++;\n              approvalconfigroleactiondetail.push({\n                napprovalconfigcode: role.napprovalconfigcode,\n                nuserrolecode: role.nuserrolecode,\n                nlevelno: role.nlevelno,\n                ntransactionstatus: actionValue,\n                nstatus: transactionStatus.ACTIVE\n              });\n              return null;\n            }) : approvalconfigroleactiondetail.push();\n            actionDetailCount++;\n            approvalconfigroleactiondetail.push({\n              napprovalconfigcode: role.napprovalconfigcode,\n              nuserrolecode: role.nuserrolecode,\n              nlevelno: role.nlevelno,\n              ntransactionstatus: this.state.selectedRecord[role.nuserrolecode].approvalstatus ? this.state.selectedRecord[role.nuserrolecode].approvalstatus : -1,\n              nstatus: transactionStatus.ACTIVE\n            });\n            inputData[`approvalconfigrolefilterdetail_${[role.nuserrolecode]}`] = approvalconfigrolefilterdetail;\n            inputData[`approvalconfigrolevalidationdetail_${[role.nuserrolecode]}`] = approvalconfigrolevalidationdetail;\n            inputData[`approvalconfigroledecisiondetail_${[role.nuserrolecode]}`] = approvalconfigroledecisiondetail;\n            inputData[`approvalconfigroleactiondetail_${[role.nuserrolecode]}`] = approvalconfigroleactiondetail;\n            bool = bool ? true : false;\n            return null;\n          } else {\n            bool = false;\n            errormessage.push(role.suserrolename);\n            return false;\n          }\n        }); //role map\n\n        inputData['approvalconfigrole'] = approvalconfigrole;\n        inputData['rolecount'] = this.props.Login.userRoleTree.length;\n        inputData['filterdetailcount'] = filterDetailCount;\n        inputData['validationdetailcount'] = validationDetailCount;\n        inputData['decisiondetailcount'] = decisionDetailCount;\n        inputData['actioncount'] = actionDetailCount;\n        inputData['ntreeversiontempcode'] = this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1;\n        let finalInputData = {};\n        let inputParam = {};\n\n        if (bool) {\n          if (this.props.Login.operation === \"update\") {\n            // edit\n            postParam = {\n              inputListName: \"versionData\",\n              selectedObject: \"selectedVersion\",\n              primaryKeyField: \"napproveconfversioncode\"\n            };\n            const temp1 = {};\n            this.props.Login.versionConfig.map(temp => {\n              if (temp.ntranscode === transactionStatus.AUTOAPPROVAL) {\n                temp1['nneedautoapproval'] = this.state.selectedRecord[temp.stransdisplaystatus] ? this.state.selectedRecord[temp.stransdisplaystatus] : transactionStatus.NO;\n              } else if (temp.ntranscode === transactionStatus.AUTOCOMPLETE) {\n                temp1['nneedautocomplete'] = this.state.selectedRecord[temp.stransdisplaystatus] ? this.state.selectedRecord[temp.stransdisplaystatus] : transactionStatus.NO;\n              }\n            });\n            inputData['approvalconfigautoapproval'] = {\n              napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\n              napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\n              sversionname: this.state.selectedRecord.sversionname,\n              //  nneedautocomplete: this.state.selectedRecord['Auto Complete'] ? this.state.selectedRecord['Auto Complete'] : transactionStatus.NO,\n              //  nneedautoapproval: this.state.selectedRecord['Auto Approval'] ? this.state.selectedRecord['Auto Approval'] : transactionStatus.NO,\n              nautoapprovalstatus: this.props.Login.userRoleTree && this.props.Login.userRoleTree.length > 0 && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus : transactionStatus.NA,\n              nautodescisionstatus: isAutoApprovalVersion ? transactionStatus.PASS : this.props.Login.userRoleTree && this.props.Login.userRoleTree.length > 0 && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus[0] || transactionStatus.DRAFT : transactionStatus.DRAFT,\n              nautoallot: this.state.selectedRecord['IDS_AUTOALLOT'] ? this.state.selectedRecord['IDS_AUTOALLOT'] : transactionStatus.NO,\n              nneedjoballocation: this.state.selectedRecord['IDS_JOBALLOCATION'] ? this.state.selectedRecord['IDS_JOBALLOCATION'] : transactionStatus.NO,\n              nstatus: transactionStatus.ACTIVE,\n              nneedautoouterband: this.state.selectedRecord['nneedautoouterband'] ? this.state.selectedRecord['nneedautoouterband'] : transactionStatus.NO,\n              nneedautoinnerband: this.state.selectedRecord['nneedautoinnerband'] ? this.state.selectedRecord['nneedautoinnerband'] : transactionStatus.NO,\n              ...temp1\n            };\n          } else {\n            inputData['approveconfigversion'] = {\n              napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\n              napproveconfversionno: -1,\n              ntransactionstatus: transactionStatus.DRAFT,\n              ntreeversiontempcode: this.props.Login.userRoleTree[0].ntreeversiontempcode,\n              sapproveconfversiondesc: '-',\n              nsitecode: this.props.Login.userInfo.nmastersitecode,\n              nstatus: transactionStatus.ACTIVE\n            };\n            const temp1 = {};\n            this.props.Login.versionConfig.map(temp => {\n              if (temp.ntranscode === transactionStatus.AUTOAPPROVAL) {\n                temp1['nneedautoapproval'] = this.state.selectedRecord[temp.stransdisplaystatus] ? this.state.selectedRecord[temp.stransdisplaystatus] : transactionStatus.NO;\n              } else if (temp.ntranscode === transactionStatus.AUTOCOMPLETE) {\n                temp1['nneedautocomplete'] = this.state.selectedRecord[temp.stransdisplaystatus] ? this.state.selectedRecord[temp.stransdisplaystatus] : transactionStatus.NO;\n              }\n            });\n            inputData['approvalconfigautoapproval'] = {\n              napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\n              sversionname: this.state.selectedRecord.sversionname,\n              // nneedautocomplete: this.state.selectedRecord['Auto Complete'] ? this.state.selectedRecord['Auto Complete'] : transactionStatus.NO,\n              //  nneedautoapproval: this.state.selectedRecord['Auto Approval'] ? this.state.selectedRecord['Auto Approval'] : transactionStatus.NO,\n              nautoapprovalstatus: this.props.Login.userRoleTree && this.props.Login.userRoleTree.length > 0 && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus : transactionStatus.NA,\n              nautodescisionstatus: isAutoApprovalVersion ? transactionStatus.PASS : this.props.Login.userRoleTree && this.props.Login.userRoleTree.length > 0 && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus[0] || transactionStatus.DRAFT : transactionStatus.DRAFT,\n              nautoallot: this.state.selectedRecord['IDS_AUTOALLOT'] ? this.state.selectedRecord['IDS_AUTOALLOT'] : transactionStatus.NO,\n              nneedjoballocation: this.state.selectedRecord['IDS_JOBALLOCATION'] ? this.state.selectedRecord['IDS_JOBALLOCATION'] : transactionStatus.NO,\n              nneedautoouterband: this.state.selectedRecord['nneedautoouterband'] ? this.state.selectedRecord['nneedautoouterband'] : transactionStatus.NO,\n              nneedautoinnerband: this.state.selectedRecord['nneedautoinnerband'] ? this.state.selectedRecord['nneedautoinnerband'] : transactionStatus.NO,\n              nstatus: transactionStatus.ACTIVE,\n              ...temp1\n            };\n          }\n\n          finalInputData['approvalconfigversion'] = inputData;\n          finalInputData['userinfo'] = this.props.Login.userInfo;\n          inputParam = {\n            methodUrl: 'ApprovalConfigVersion',\n            classUrl: this.props.Login.inputParam.classUrl,\n            displayName: \"IDS_APPROVALCONFIG\",\n            inputData: finalInputData,\n            saveType,\n            formRef,\n            operation: this.props.Login.operation,\n            postParam,\n            searchRef: this.searchRef,\n            selectedRecord: { ...this.state.selectedRecord\n            }\n          };\n          const masterData = this.props.Login.masterData;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                saveType,\n                openModal: true,\n                operation: this.props.Login.operation,\n                screenName: this.props.intl.formatMessage({\n                  id: \"IDS_APPROVALCONFIG\"\n                })\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_FILLDETAILSFOR\"\n          }) + \" \" + errormessage.join(\",\"));\n        }\n      }\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteApprovalConfigVersion(deleteId));\n    };\n\n    this.onInputOnChange = (event, role, action) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (role) {\n        let roleDetails = this.state.selectedRecord[role.nuserrolecode] || {};\n        const fieldName = event.target.name.split('_')[0] + '_' + event.target.name.split('_')[1];\n        let actionArray = selectedRecord[`actionStatus_${role.nuserrolecode}`] || [];\n\n        if (event.target.type === 'checkbox') {\n          if (action) {\n            if (event.target.checked) {\n              actionArray.push(action.ntranscode);\n            } else {\n              actionArray.splice(actionArray.indexOf(action.ntranscode), 1);\n            }\n\n            selectedRecord[`actionStatus_${role.nuserrolecode}`] = actionArray;\n          }\n\n          roleDetails[fieldName] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n\n          if (fieldName === 'IDS_PARTIALAPPROVAL' && roleDetails[\"IDS_PARTIALAPPROVAL\"] && roleDetails[\"IDS_PARTIALAPPROVAL\"] === transactionStatus.YES) {\n            roleDetails['IDS_SECTIONWISEAPPROVE'] = transactionStatus.NO;\n          }\n\n          selectedRecord[role.nuserrolecode] = roleDetails;\n        } else {\n          roleDetails[fieldName] = event.target.value;\n          selectedRecord[role.nuserrolecode] = roleDetails;\n        }\n      } else {\n        if (event.target.type === 'checkbox') {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n\n          if (selectedRecord[event.target.name]) {\n            if (event.target.name === \"nneedautoinnerband\" && (selectedRecord[\"Auto Approval\"] === transactionStatus.YES || selectedRecord[\"nneedautoouterband\"] === transactionStatus.YES)) {\n              delete selectedRecord[\"Auto Approval\"];\n              delete selectedRecord[\"nneedautoouterband\"];\n            } else if (event.target.name === \"Auto Approval\" && (selectedRecord[\"nneedautoinnerband\"] === transactionStatus.YES || selectedRecord[\"nneedautoouterband\"] === transactionStatus.YES)) {\n              delete selectedRecord[\"nneedautoinnerband\"];\n              delete selectedRecord[\"nneedautoouterband\"];\n            } else if (event.target.name === \"nneedautoouterband\" && (selectedRecord[\"Auto Approval\"] === transactionStatus.YES || selectedRecord[\"nneedautoinnerband\"] === transactionStatus.YES)) {\n              delete selectedRecord[\"Auto Approval\"];\n              delete selectedRecord[\"nneedautoinnerband\"];\n            }\n          }\n        } else {\n          if (event.target.name === 'sviewname') {\n            if (event.target.value !== \"\") {\n              // selectedRecord[event.target.name] =   event.target.value.replace(/[^a-z]/gi, '')\n              //event.target.value =  validateCreateView(event.target.value);\n              //Janakumar -> ALPD-5184 Approval configuration - In view name field ( when enter french lang 500 error is occurring ) (Both Normal & French)\n              const regex = /^[a-z0-9]+$/;\n              const regexNum = /^[0-9]+$/;\n              const value = regex.test(event.target.value);\n\n              if (value) {\n                selectedRecord[event.target.name] = event.target.value !== \"\" ? regexNum.test(event.target.value.charAt(0)) ? event.target.defaultValue : event.target.value : selectedRecord[event.target.name];\n              } else {\n                selectedRecord[event.target.name] = regexNum.test(event.target.value.charAt(0)) ? event.target.defaultValue : event.target.value.replace(/[^a-z0-9]/g, '');\n              }\n            } else {\n              selectedRecord[event.target.name] = event.target.value;\n            }\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, role, comboName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (role) {\n        let roleDetails = this.state.selectedRecord[role.nuserrolecode] || {};\n        const fieldName = comboName.split('_')[0];\n        let filterArray = [];\n        roleDetails[fieldName] = [];\n\n        if (comboData) {\n          selectedRecord[comboName] = comboData;\n\n          if (fieldName === 'checklist') {\n            selectedRecord[`checklistVersion_${role.nuserrolecode}`] = {\n              label: comboData.item.schecklistversionname,\n              value: comboData.item.nchecklistversioncode\n            };\n            filterArray = comboData.item.nchecklistversioncode;\n          } else {\n            if (Array.isArray(comboData)) {\n              comboData.map(item => {\n                return filterArray.push(item.value);\n              });\n            } else {\n              filterArray = comboData.value;\n            }\n          }\n\n          roleDetails[fieldName] = filterArray;\n          selectedRecord[role.nuserrolecode] = roleDetails;\n        } else {\n          selectedRecord[comboName] = [];\n          filterArray = [];\n          roleDetails[fieldName] = filterArray;\n          selectedRecord[role.nuserrolecode] = roleDetails;\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        selectedRecord[comboName] = comboData;\n\n        if (comboName === 'regtype') {\n          this.props.getCopySubType(comboData, selectedRecord, this.props.Login.userInfo, this.props.Login.masterData, this.props.Login.optCopyRegType);\n        } else {\n          this.setState({\n            selectedRecord\n          });\n        }\n      }\n    };\n\n    this.onFilterComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let approvalSubTypeValue = this.props.Login.masterData.approvalSubTypeValue;\n      let registrationTypeValue = this.props.Login.masterData.registrationTypeValue;\n      let registrationSubTypeValue;\n\n      if (comboData) {\n        selectedRecord[fieldName] = comboData.value;\n        let inputData = {};\n\n        if (fieldName === 'napprovalsubtypecode') {\n          approvalSubTypeValue = comboData;\n          inputData = {\n            nFlag: 2,\n            napprovalsubtypecode: comboData.value,\n            userinfo: this.props.Login.userInfo\n          };\n        } else if (fieldName === 'nregtypecode') {\n          registrationTypeValue = comboData;\n          inputData = {\n            nFlag: 3,\n            napprovalsubtypecode: approvalSubTypeValue.value,\n            nregtypecode: comboData.value,\n            userinfo: this.props.Login.userInfo\n          };\n        } else if (fieldName === 'nregsubtypecode') {\n          registrationSubTypeValue = comboData;\n          inputData = {\n            nFlag: 4,\n            napprovalsubtypecode: approvalSubTypeValue.value,\n            nregtypecode: registrationTypeValue.value,\n            nregsubtypecode: comboData.value,\n            userinfo: this.props.Login.userInfo\n          };\n        }\n\n        if (fieldName === 'ntreeversiontempcode') {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData: { ...this.props.Login.masterData,\n                userroleTemplateValue: comboData\n              }\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          const oldState = {\n            approvalsubtype: this.props.Login.masterData.approvalsubtype,\n            registrationtype: this.props.Login.masterData.registrationType,\n            registrationsubtype: this.props.Login.masterData.registrationSubType,\n            approvalSubTypeValue,\n            registrationTypeValue,\n            registrationSubTypeValue,\n            RegistrationTypeList: this.state.RegistrationTypeList,\n            RegistrationSubTypeList: this.state.RegistrationSubTypeList\n          };\n          let inputParamData = {\n            inputData,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getFilterChange(inputParamData, oldState);\n        }\n      } else {\n        selectedRecord[fieldName] = \"\";\n\n        if (fieldName === 'napprovalsubtypecode') {\n          this.approvalSubTypeValue = [];\n          registrationTypeValue = [];\n          registrationSubTypeValue = [];\n        } else if (fieldName === 'nregtypecode') {\n          registrationTypeValue = [];\n          registrationSubTypeValue = [];\n        } else {\n          registrationSubTypeValue = [];\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      } // this.searchRef.current.value = \"\"\n\n    };\n\n    this.getApprovalConfigurationVersion = () => {\n      if (this.props.Login.masterData.approvalSubTypeValue) {\n        //this.searchRef.current.value = \"\"\n        let masterData = { ...this.props.Login.masterData //ALPD-5195--Vignesh R(21-01-2025)-->reg sub type and approval config-- filter issue, check description\n          //realApprovalSubTypeValue: this.props.Login.masterData.approvalSubTypeValue ? this.props.Login.masterData.approvalSubTypeValue : -1,\n          //realRegistrationTypeValue: this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue : -1,\n          // realRegistrationSubTypeValue: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue : -1,\n          //realApprovalConfigCode: this.props.Login.masterData.approvalConfigCode || -1,\n          //realTreeVersionTemplateValue: this.props.Login.masterData.userroleTemplateValue || -1,\n\n        };\n        const inputData = {\n          napprovalsubtypecode: this.props.Login.masterData.approvalSubTypeValue ? this.props.Login.masterData.approvalSubTypeValue.value : -1,\n          napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\n          ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue.value,\n          userinfo: this.props.Login.userInfo\n        };\n        let inputParamData = {\n          inputData,\n          masterData,\n          searchRef: this.searchRef\n        };\n        this.props.getApprovalConfigurationVersion(inputParamData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_APPROVALSUBTYPENOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.onFilterSubmit = () => {\n      if (this.props.Login.masterData.approvalSubTypeValue) {\n        let check = false;\n\n        if (this.props.Login.masterData.approvalSubTypeValue.value === ApprovalSubType.TESTGROUPAPPROVAL) {\n          if (this.props.Login.masterData.userroleTemplateValue.value === undefined) {\n            check = true;\n          }\n        } else if (this.props.Login.masterData.approvalSubTypeValue.value === ApprovalSubType.TESTRESULTAPPROVAL) {\n          if (this.props.Login.masterData.userroleTemplateValue.value === undefined || this.props.Login.masterData.registrationSubTypeValue.value === undefined || this.props.Login.masterData.registrationTypeValue.value === undefined) {\n            check = true;\n          }\n        }\n\n        if (!check) {\n          //this.searchRef.current.value = \"\"\n          let masterData = { ...this.props.Login.masterData,\n            realApprovalSubTypeValue: this.props.Login.masterData.approvalSubTypeValue ? this.props.Login.masterData.approvalSubTypeValue : -1,\n            realRegistrationTypeValue: this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue : -1,\n            realRegistrationSubTypeValue: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue : -1,\n            realApprovalConfigCode: this.props.Login.masterData.approvalConfigCode || -1,\n            realTreeVersionTemplateValue: this.props.Login.masterData.userroleTemplateValue || -1\n          };\n          const inputData = {\n            napprovalsubtypecode: this.props.Login.masterData.approvalSubTypeValue ? this.props.Login.masterData.approvalSubTypeValue.value : -1,\n            napprovalconfigcode: this.props.Login.masterData.approvalConfigCode,\n            ntreeversiontempcode: this.props.Login.masterData.userroleTemplateValue.value,\n            userinfo: this.props.Login.userInfo\n          };\n          let inputParamData = {\n            inputData,\n            masterData,\n            searchRef: this.searchRef\n          };\n          this.props.getApprovalConfigurationVersion(inputParamData);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTALLINFILTER\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_APPROVALSUBTYPENOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.reloadData = () => {\n      // this.searchRef.current.value = \"\";\n      // const inputParam = {\n      //     inputData: { \"userinfo\": this.props.Login.userInfo },\n      //     classUrl: \"approvalconfig\",\n      //     methodUrl: \"ApprovalConfigFilter\",\n      //     userInfo: this.props.Login.userInfo,\n      //     displayName: \"IDS_APPROVALCONFIG\"\n      // };\n      // this.props.callService(inputParam);\n      this.getApprovalConfigurationVersion();\n    };\n\n    this.userRoleAccordion = userRoleList => {\n      const accordionMap = new Map();\n      userRoleList = sortData(userRoleList, 'ascending', 'nlevelno');\n      userRoleList.map(role => accordionMap.set(role.napprovalconfigrolecode, /*#__PURE__*/React.createElement(UserRoleAccordion, {\n        role: role,\n        roleConfig: this.props.Login.masterData.roleConfig,\n        userRoleControlRights: this.state.userRoleControlRights,\n        controlMap: this.state.controlMap,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        deleteRecord: this.deleteRecord,\n        tabDetail: this.tabDetail(role),\n        onTabOnChange: this.onTabOnChange,\n        approvalSubTypeValue: this.props.Login.masterData.approvalSubTypeValue,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2059,\n          columnNumber: 17\n        }\n      })));\n      return accordionMap;\n    };\n\n    this.tabDetail = () => {\n      const selectedRole = this.props.Login.masterData.selectedRole ? this.props.Login.masterData.selectedRole : this.props.Login.masterData.approvalconfigRoleNames && this.props.Login.masterData.approvalconfigRoleNames.length > 0 && sortData(this.props.Login.masterData.approvalconfigRoleNames, 'ascending', 'nlevelno')[0];\n      const tabMap = new Map();\n      tabMap.set(\"IDS_FILTERSTATUS\", /*#__PURE__*/React.createElement(FilterStatusTab, {\n        filterData: process(this.props.Login.masterData.roleFilters ? // sortData(this.props.Login.masterData.roleFilters) : [],\n        // { skip: this.state.dataState.skip, take: this.state.dataState.take })}\n        sortData(this.props.Login.masterData.roleFilters) : [], this.state.filterStatusState),\n        setDefault: this.props.setDefault,\n        selectedRole: selectedRole,\n        napprovalsubtypecode: this.approvalSubTypeValue.value,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        dataState: this.state.filterStatusState,\n        dataStateChange: event => this.setState({\n          filterStatusState: event.dataState\n        }),\n        screenName: \"IDS_FILTERSTATUS\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2078,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_VALIDATIONSTATUS\", /*#__PURE__*/React.createElement(ValidationStatusTab, {\n        validationStatus: process(this.props.Login.masterData.roleValidations ? sortData(this.props.Login.masterData.roleValidations) : [], this.state.validationStatusState) // sortData(this.props.Login.masterData.roleValidations) : [],\n        // { skip: this.state.dataState.skip, take: this.state.dataState.take })}\n        ,\n        selectedRole: selectedRole,\n        napprovalsubtypecode: this.approvalSubTypeValue.value,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        dataState: this.state.validationStatusState,\n        dataStateChange: event => this.setState({\n          validationStatusState: event.dataState\n        }),\n        screenName: \"IDS_VALIDATIONSTATUS\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2095,\n          columnNumber: 13\n        }\n      })); //ATE234 Janakumar ALPD-5316 Test Approval -> Decision Status there have based on sample type.\n      // if (this.props.Login.masterData.roleDecisions && this.props.Login.masterData.roleDecisions.length > 0) {\n\n      tabMap.set(\"IDS_DECISIONSTATUS\", /*#__PURE__*/React.createElement(DecisionStatusTab, {\n        decisionData: process(this.props.Login.masterData.roleDecisions ? sortData(this.props.Login.masterData.roleDecisions) : [], {\n          skip: this.state.dataState.skip,\n          take: this.state.dataState.take\n        }),\n        setDefault: this.props.setDefault,\n        selectedRole: selectedRole,\n        napprovalsubtypecode: this.approvalSubTypeValue.value,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        screenName: \"IDS_DECISIONSTATUS\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2111,\n          columnNumber: 17\n        }\n      })); // }\n\n      tabMap.set(\"IDS_ACTIONSTATUS\", /*#__PURE__*/React.createElement(ActionStatusTab, {\n        actionData: process(this.props.Login.masterData.roleActions ? sortData(this.props.Login.masterData.roleActions) : [], {\n          skip: this.state.dataState.skip,\n          take: this.state.dataState.take\n        }),\n        setDefault: this.props.setDefault,\n        selectedRole: selectedRole,\n        napprovalsubtypecode: this.approvalSubTypeValue.value,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        screenName: \"IDS_ACTIONSTATUS\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2123,\n          columnNumber: 13\n        }\n      }));\n      return tabMap;\n    };\n\n    this.onTabOnChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    const dataState = {\n      skip: 0,\n      take: 10\n    };\n    const filterStatusState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const validationStatusState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      openModal: false,\n      masterStatus: \"\",\n      error: \"\",\n      approvalConfigCode: -1,\n      dataResult: [],\n      dataState: dataState,\n      selectedRecord: {},\n      ApprovalsubtypeList: [],\n      RegistrationTypeList: [],\n      RegistrationSubTypeList: [],\n      UserRoleTemplateList: [],\n      filterStatusState,\n      validationStatusState,\n      sidebarview: false\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    let versionStatusCSS = \"outline-secondary\";\n\n    if (this.props.Login.masterData.selectedVersion && this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.APPROVED) {\n      versionStatusCSS = \"outline-success\";\n    } else if (this.props.Login.masterData.selectedVersion && this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.RETIRED) {\n      versionStatusCSS = \"outline-danger\";\n    }\n\n    const editId = this.state.controlMap.has(\"EditApprovalConfig\") && this.state.controlMap.get(\"EditApprovalConfig\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteApprovalConfig\") && this.state.controlMap.get(\"DeleteApprovalConfig\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"ApproveApprovalConfig\") && this.state.controlMap.get(\"ApproveApprovalConfig\").ncontrolcode;\n    const copyId = this.state.controlMap.has(\"CopyApprovalConfig\") && this.state.controlMap.get(\"CopyApprovalConfig\").ncontrolcode;\n    const addId = this.state.controlMap.has(\"AddApprovalConfig\") && this.state.controlMap.get(\"AddApprovalConfig\").ncontrolcode;\n    this.approvalSubTypeValue = this.props.Login.masterData.realApprovalSubTypeValue ? this.props.Login.masterData.realApprovalSubTypeValue : this.props.Login.masterData.approvalSubTypeValue ? this.props.Login.masterData.approvalSubTypeValue : this.props.Login.masterData.approvalsubtype ? this.props.Login.masterData.approvalsubtype.length > 0 ? {\n      value: sortData(this.props.Login.masterData.approvalsubtype, 'ascending', 'napprovalsubtypecode')[0].napprovalsubtypecode,\n      label: sortData(this.props.Login.masterData.approvalsubtype, 'ascending', 'napprovalsubtypecode')[0].ssubtypename\n    } : {} : {};\n    const filterParam = {\n      inputListName: \"versionData\",\n      selectedObject: \"selectedVersion\",\n      primaryKeyField: \"napproveconfversioncode\",\n      searchFieldList: [\"sversionname\", \"sversionstatus\", \"sapproveconfversiondesc\"],\n      fetchUrl: \"approvalconfig/getApprovalConfigVersion\",\n      fecthInputObject: {\n        napprovalsubtypecode: this.approvalSubTypeValue.value,\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      sortField: \"napproveconfversioncode\",\n      sortOrder: \"descending\",\n      //NIBSCRT-2294\n      unchangeList: [\"approvalsubtype\", \"approvalSubTypeValue\", \"registrationType\", \"registrationTypeValue\", \"registrationSubType\", \"registrationSubTypeValue\", \"ApprovalsubtypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\", \"treeVersionTemplate\", \"userroleTemplateValue\", \"realApprovalSubTypeValue\", \"realRegistrationTypeValue\", \"realRegistrationSubTypeValue\", \"realTreeVersionTemplateValue\", \"approvalConfigCode\", \"realApprovalConfigCode\"]\n    };\n    const selectedRole = this.props.Login.masterData.selectedRole ? this.props.Login.masterData.selectedRole : this.props.Login.masterData.approvalconfigRoleNames && this.props.Login.masterData.approvalconfigRoleNames.length > 0 && sortData(this.props.Login.masterData.approvalconfigRoleNames, 'ascending', 'nlevelno')[0];\n    const mandatoryFields = [{\n      \"idsName\": \"IDS_VERSIONNAME\",\n      \"dataField\": \"sversionname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    this.props.Login.operation !== 'copy' && this.props.Login.userRoleTree && this.props.Login.userRoleTree.map(role => {\n      mandatoryFields.push({\n        \"idsName\": \"IDS_APPROVALSTATUS\",\n        \"alertSuffix\": ` - ${role.suserrolename}`,\n        \"dataField\": `approvalstatus_${role.nuserrolecode}`,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      });\n      mandatoryFields.push({\n        \"idsName\": \"IDS_FILTERSTATUS\",\n        \"alertSuffix\": ` - ${role.suserrolename}`,\n        \"dataField\": `filterstatus_${role.nuserrolecode}`,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      });\n      mandatoryFields.push({\n        \"idsName\": \"IDS_VALIDATIONSTATUS\",\n        \"alertSuffix\": ` - ${role.suserrolename}`,\n        \"dataField\": `validationstatus_${role.nuserrolecode}`,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }); //ALPD-5334 added by Dhanushya RI,Enable mandatory field to non mandatory field\n      // if (this.props.Login.decisionStatusOptions && this.props.Login.decisionStatusOptions.length > 0) {\n      //     mandatoryFields.push({ \"idsName\": \"IDS_DECISIONSTATUS\", \"alertSuffix\": ` - ${role.suserrolename}`, \"dataField\": `decisionstatus_${role.nuserrolecode}` });\n      // }\n\n      return null;\n    });\n    let breadCrumbData = [];\n\n    if (this.props.Login.masterData.realApprovalSubTypeValue && this.props.Login.masterData.realApprovalSubTypeValue.value === ApprovalSubType.TESTRESULTAPPROVAL) {\n      breadCrumbData = [{\n        \"label\": \"IDS_APPROVALSUBTYPE\",\n        \"value\": this.props.Login.masterData.realApprovalSubTypeValue ? this.props.Login.masterData.realApprovalSubTypeValue.label : \"NA\"\n      }, {\n        \"label\": \"IDS_REGISTRATIONTYPE\",\n        \"value\": this.props.Login.masterData.realRegistrationTypeValue ? this.props.Login.masterData.realRegistrationTypeValue.label : \"NA\"\n      }, {\n        \"label\": \"IDS_REGISTRATIONSUBTYPE\",\n        \"value\": this.props.Login.masterData.realRegistrationSubTypeValue ? this.props.Login.masterData.realRegistrationSubTypeValue.label : \"NA\"\n      }, {\n        \"label\": \"IDS_USERROLETEMPLATE\",\n        \"value\": this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.label : \"NA\"\n      }];\n    } else {\n      breadCrumbData = [{\n        \"label\": \"IDS_APPROVALSUBTYPE\",\n        \"value\": this.props.Login.masterData.realApprovalSubTypeValue ? this.props.Login.masterData.realApprovalSubTypeValue.label : \"NA\"\n      }, {\n        \"label\": \"IDS_USERROLETEMPLATE\",\n        \"value\": this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.label : \"NA\"\n      }];\n    } // console.log(\"this.approvalSubTypeValue:\", Object.keys(this.approvalSubTypeValue).length);\n    // console.log(\"this.props.Login.masterData.:\", this.props.Login.masterData);\n\n\n    const masterList = sortData(this.props.Login.masterData.searchedData || this.props.Login.masterData.versionData, \"descending\", \"napproveconfversioncode\"); //console.log(\"masterList:\", masterList);\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1362,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1363,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1364,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1366,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1367,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      filterColumnData: this.props.filterColumnData,\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_APPROVALCONFIG\"\n      }),\n      masterList: masterList,\n      getMasterDetail: version => this.props.getApprovalConfigVersion(version, this.approvalSubTypeValue.value, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedVersion,\n      primaryKeyField: \"napproveconfversioncode\",\n      mainField: \"sversionname\",\n      firstField: \"sapproveconfversiondesc\",\n      secondField: \"sversionstatus\",\n      isIDSField: \"Yes\",\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      openModal: () => this.props.openModal(\"create\", this.props.Login.masterData.realApprovalConfigCode, this.approvalSubTypeValue.value, this.props.Login.userInfo, addId, this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -10),\n      needAccordianFilter: false,\n      reloadData: this.reloadData,\n      hidePaging: true,\n      showFilterIcon: true //ALPD-5195--Vignesh R(21-01-2025)-->reg sub type and approval config-- filter issue, check description\n      ,\n      onFilterSubmit: this.onFilterSubmit,\n      filterComponent: [{\n        \"IDS_SAMPLEFILTER\": /*#__PURE__*/React.createElement(SampleFilter, {\n          selectedRecord: this.state.selectedRecord || {},\n          filterComboChange: this.onFilterComboChange,\n          approvalSubTypeOptions: this.state.ApprovalsubtypeList,\n          approvalSubTypeValue: this.props.Login.masterData.approvalSubTypeValue,\n          registrationTypeOptions: this.state.RegistrationTypeList,\n          registrationTypeValue: this.props.Login.masterData.registrationTypeValue,\n          registrationSubTypeOptions: this.state.RegistrationSubTypeList,\n          registrationSubTypeValue: this.props.Login.masterData.registrationSubTypeValue,\n          userroleTemplateOptions: this.state.UserRoleTemplateList,\n          userroleTemplateValue: this.props.Login.masterData.userroleTemplateValue,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1396,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1368,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '8' : \"10\"}`,\n      className: \"position-relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1412,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1413,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn \",\n      onClick: this.props.parentFunction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1414,\n        columnNumber: 33\n      }\n    }, !this.props.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1416,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1417,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1421,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1422,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.selectedVersion ? Object.entries(this.props.Login.masterData.selectedVersion).length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1425,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1427,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1428,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.selectedVersion.sversionname)), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      className: \"readonly-text font-weight-normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1430,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1431,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1432,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1433,\n        columnNumber: 61\n      }\n    }, `${this.props.intl.formatMessage({\n      id: \"IDS_VERSIONNO\"\n    })}:${this.props.Login.masterData.selectedVersion.sapproveconfversiondesc}`, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${versionStatusCSS} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1435,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.selectedVersion.sversionstatus))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1441,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1443,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1445,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.props.getApprovalConfigEditData(this.props.Login.masterData.selectedVersion.napproveconfversioncode, this.approvalSubTypeValue.value, this.props.Login.userInfo, this.props.Login.masterData, editId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1446,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1452,\n        columnNumber: 77\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.ConfirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1454,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1459,\n        columnNumber: 77\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }) // data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.approveVersion(approveId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1471,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1477,\n        columnNumber: 77\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      hidden: this.state.userRoleControlRights.indexOf(copyId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COPY\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.props.copyVersion(this.approvalSubTypeValue.value, this.props.Login.userInfo, this.props.Login.masterData, copyId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1479,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCopy,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_COPY\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1485,\n        columnNumber: 77\n      }\n    }))))))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1495,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1497,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1498,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.approvalSubTypeValue && this.props.Login.masterData.approvalSubTypeValue !== undefined && (this.props.Login.masterData.approvalSubTypeValue.value === ApprovalSubType.TESTRESULTAPPROVAL || this.props.Login.masterData.approvalSubTypeValue.value === ApprovalSubType.PROTOCOLAPPROVAL) ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1503,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1504,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1505,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VIEWNAME\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1505,\n        columnNumber: 80\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1506,\n        columnNumber: 69\n      }\n    }, this.props.Login.masterData.selectedVersion.sviewname === \"\" ? '-' : this.props.Login.masterData.selectedVersion.sviewname))), /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1511,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1512,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1513,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_TEMPLATEMAPPINGVERSION\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1513,\n        columnNumber: 80\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1514,\n        columnNumber: 69\n      }\n    }, this.props.Login.masterData.selectedVersion.stemplatemappingversion)))) : \"\"), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1520,\n        columnNumber: 54\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1521,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1523,\n        columnNumber: 62\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1524,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_AUTOAPPROVAL\",\n      message: \"Auto Approval\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1524,\n        columnNumber: 78\n      }\n    })), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1525,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1526,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.approvalSubTypeValue && this.props.Login.masterData.approvalSubTypeValue !== undefined && this.props.Login.masterData.approvalSubTypeValue.value === ApprovalSubType.TESTRESULTAPPROVAL ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1534,\n        columnNumber: 74\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1535,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1536,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: 'IDS_AUTOINNERBAND',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1536,\n        columnNumber: 80\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1537,\n        columnNumber: 69\n      }\n    }, this.props.Login.masterData.selectedVersion.sneedautoinnerband))), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1540,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1541,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1542,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: 'IDS_AUTOOUTERBAND',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1542,\n        columnNumber: 80\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1543,\n        columnNumber: 69\n      }\n    }, this.props.Login.masterData.selectedVersion.sneedautoouterband)))) : \"\", this.props.Login.masterData.versionConfig ? this.props.Login.masterData.versionConfig.map(item => /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1550,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1551,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1552,\n        columnNumber: 81\n      }\n    }, this.props.Login.masterData.approvalSubTypeValue && this.props.Login.masterData.approvalSubTypeValue !== undefined && this.props.Login.masterData.approvalSubTypeValue.value === ApprovalSubType.TESTRESULTAPPROVAL ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: 'IDS_ANYCASE',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1556,\n        columnNumber: 89\n      }\n    }) : \"\" //<FormattedMessage id={'IDS_AUTOAPPROVAL'} /> \n    ), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1561,\n        columnNumber: 81\n      }\n    }, this.props.Login.masterData.selectedVersion[`${item.ntranscode}`])))) : \"\")))))), /*#__PURE__*/React.createElement(Row, {\n      oGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1576,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1577,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1578,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData ? this.props.Login.masterData.approvalconfigRoleNames && this.props.Login.masterData.approvalconfigRoleNames.length > 0 ? /*#__PURE__*/React.createElement(CustomAccordion, {\n      key: \"UserRoles\",\n      accordionTitle: \"suserrolename\",\n      accordionComponent: this.userRoleAccordion(this.props.Login.masterData.approvalconfigRoleNames),\n      inputParam: {\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        napprovalsubtypecode: this.approvalSubTypeValue.value\n      },\n      accordionClick: this.props.getRoleDetails,\n      accordionPrimaryKey: \"napprovalconfigrolecode\",\n      accordionObjectName: \"role\",\n      selectedKey: selectedRole.napprovalconfigrolecode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1580,\n        columnNumber: 65\n      }\n    }) : \"\" : \"\"))))) : \"\" : \"\"))))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: \"IDS_APPROVALCONFIG\",\n      closeModal: this.handleClose,\n      show: this.props.Login.openModal,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.operation === 'approve' ? [{\n        \"idsName\": \"IDS_VIEWNAME\",\n        \"dataField\": \"sviewname\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_TEMPLATEMAPPING\",\n        \"dataField\": \"ndesigntemplatemappingcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"combo\"\n      }] : mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1619,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === 'approve' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1626,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1627,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        name: \"ndesigntemplatemappingcode\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATEMAPPING\"\n        }),\n        placeholder: \"Please Select...\",\n        options: this.props.Login.designTemplateMapping // optionId=\"ntimezonecode\"\n        // optionValue=\"stimezoneid\"\n        ,\n        value: this.state.selectedRecord[\"ndesigntemplatemappingcode\"] //defaultValue={props.selectedRecord[\"ndesigntemplatemapping\"]}\n        ,\n        isMandatory: true,\n        isMulti: false,\n        isSearchable: false,\n        isClearable: false,\n        isDisabled: true,\n        closeMenuOnSelect: true,\n        onChange: event => this.onComboChange(event, 'ndesigntemplatemappingcode'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1628,\n          columnNumber: 45\n        }\n      }), /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_VIEWNAME\"\n        }),\n        name: \"sviewname\",\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_VIEWNAME\"\n        }),\n        value: this.state.selectedRecord[\"sviewname\"],\n        isMandatory: true //required={true}\n        ,\n        maxLength: 30,\n        onPaste: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1645,\n          columnNumber: 45\n        }\n      })))) : /*#__PURE__*/React.createElement(AddApprovalConfig, {\n        selectedRecord: this.state.selectedRecord ? this.state.selectedRecord : {},\n        userRoleTree: this.props.Login.userRoleTree,\n        approvalSubTypeValue: this.approvalSubTypeValue,\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        approvalStatusOptions: this.props.Login.approvalStatusOptions,\n        approvalStatusValue: this.props.Login.approvalStatusValue,\n        filterStatusOptions: this.props.Login.filterStatusOptions,\n        filterStatusValues: this.props.Login.filterStatusValues,\n        topLevelValidStatusOptions: this.props.Login.topLevelValidStatusOptions,\n        validationStatusOptions: this.props.Login.validationStatusOptions,\n        validationStatusValues: this.props.Login.validationStatusValues,\n        decisionStatusOptions: this.props.Login.decisionStatusOptions,\n        decisionStatusValues: this.props.Login.decisionStatusValues,\n        actionStatus: this.props.Login.actionStatus,\n        checklistOptions: this.props.Login.checklistOptions,\n        checklistValues: this.props.Login.checklistValues,\n        roleConfig: this.props.Login.roleConfig,\n        versionConfig: this.props.Login.versionConfig,\n        operation: this.props.Login.operation,\n        nsubType: this.approvalSubTypeValue.value,\n        registrationTypeOptions: this.props.Login.optCopyRegType,\n        registrationTypeValue: this.state.registrationTypeValue,\n        registrationSubTypeOptions: this.props.Login.optCopyRegSubType,\n        registrationSubTypeValue: this.state.registrationSubTypeValue,\n        selectedVersion: this.props.Login.masterData.selectedVersion,\n        masterData: this.props.Login.masterData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1662,\n          columnNumber: 33\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1604,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      selectedRecord,\n      userRoleControlRights,\n      controlMap,\n      ApprovalsubtypeList,\n      RegistrationTypeList,\n      RegistrationSubTypeList,\n      UserRoleTemplateList,\n      filterStatusState,\n      validationStatusState\n    } = this.state;\n    let updateState = false;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      updateState = true;\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode); // const ApprovalsubtypeListMap = constructOptionList(this.props.Login.masterData.approvalsubtype || [], \"napprovalsubtypecode\", \"ssubtypename\", 'ntemplatecode','ascending', false);\n      // const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.registrationType || [], \"nregtypecode\", \"sregtypename\", 'ascending', 'nregtypecode', false);\n      // const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.registrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nregsubtypecode', false);\n\n      const ApprovalsubtypeListMap = constructOptionList(this.props.Login.masterData.approvalsubtype || [], \"napprovalsubtypecode\", \"ssubtypename\", 'ntemplatecode', 'ascending', false);\n      const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.registrationType || [], \"nregtypecode\", \"sregtypename\", 'nsorter', 'ascending', false);\n      const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.registrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'nsorter', 'ascending', false);\n      const UserRoleTemplateListMap = constructOptionList(this.props.Login.masterData.treeVersionTemplate || [], \"ntreeversiontempcode\", \"sversiondescription\", 'ntransactionstatus', 'descending', false);\n      ApprovalsubtypeList = ApprovalsubtypeListMap.get(\"OptionList\");\n      RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\n      RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\n      UserRoleTemplateList = UserRoleTemplateListMap.get(\"OptionList\");\n      updateState = true;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      //this.setState({  RegistrationTypeList,RegistrationSubTypeList,templateVersionOptionList});  \n      // RegistrationTypeList=this.props.Login.masterData.RegistrationTypeList\n      // RegistrationSubTypeList=this.props.Login.masterData.RegistrationSubTypeList\n      const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.registrationType || [], \"nregtypecode\", \"sregtypename\", 'nsorter', 'ascending', false);\n      const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.registrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'nsorter', 'ascending', false);\n      const UserRoleTemplateListMap = constructOptionList(this.props.Login.masterData.treeVersionTemplate || [], \"ntreeversiontempcode\", \"sversiondescription\", 'ntransactionstatus', 'descending', false);\n      RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\n      RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\n      UserRoleTemplateList = UserRoleTemplateListMap.get(\"OptionList\");\n      updateState = true; // if (this.props.dataState === undefined) {\n      //     filterStatusState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\n      //     validationStatusState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\n      // }\n    }\n\n    if (updateState) {\n      this.setState({\n        selectedRecord,\n        userRoleControlRights,\n        controlMap,\n        ApprovalsubtypeList,\n        RegistrationTypeList,\n        RegistrationSubTypeList,\n        UserRoleTemplateList,\n        filterStatusState,\n        validationStatusState\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  openModal,\n  updateStore,\n  getApprovalConfigVersion,\n  getApprovalConfigEditData,\n  copyVersion,\n  getFilterChange,\n  validateEsignCredential,\n  getCopySubType,\n  getRoleDetails,\n  setDefault,\n  filterColumnData,\n  getApprovalConfigurationVersion,\n  approveVersion\n})(injectIntl(ApprovalConfig));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/configurationmaster/approvalconfig/ApprovalConfig.jsx"],"names":["React","connect","injectIntl","FormattedMessage","toast","callService","crudMaster","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faPencilAlt","faCopy","faThumbsUp","faTrashAlt","sortData","getControlMap","showEsign","constructOptionList","validateCreateView","process","ListMaster","Esign","SampleFilter","AddApprovalConfig","SlideOutModal","ReadOnlyText","ContentPanel","openModal","updateStore","getApprovalConfigVersion","getApprovalConfigEditData","copyVersion","setDefault","validateEsignCredential","getFilterChange","getRoleDetails","getCopySubType","filterColumnData","getApprovalConfigurationVersion","approveVersion","DEFAULT_RETURN","ApprovalSubType","designProperties","transactionStatus","FilterStatusTab","ValidationStatusTab","UserRoleAccordion","CustomAccordion","DecisionStatusTab","ActionStatusTab","BreadcrumbComponent","ConfirmMessage","Affix","FormInput","FormSelectSearch","mapStateToProps","state","Login","ApprovalConfig","Component","constructor","props","sidebarExpandCollapse","setState","sidebarview","validateEsign","inputParam","inputData","userInfo","sreason","selectedRecord","nreasoncode","value","spredefinedreason","label","password","screenData","handleClose","loadEsign","operation","updateInfo","typeName","data","selectedId","deleteApprovalConfigVersion","deleteId","masterData","selectedVersion","ntransactionstatus","APPROVED","RETIRED","warn","intl","formatMessage","id","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","napproveconfversioncode","fetchUrl","fecthInputObject","napprovalsubtypecode","approvalSubTypeValue","userinfo","napprovalconfigversioncode","napprovalconfigcode","realApprovalConfigCode","ntreeversiontempcode","realTreeVersionTemplateValue","methodUrl","classUrl","displayName","userRoleControlRights","nformcode","screenName","approveId","nregsubtypecode","registrationSubTypeValue","sregsubtypename","nregtypecode","registrationTypeValue","ncontrolcode","PROTOCOLAPPROVAL","getGridJsondata","templatedata","subSampleCheck","subSampleTemplate","gridItem","gridMoreItem","masterdatefields","masterdateconstraints","masteruniquevalidation","mastercombinationunique","editable","jdynamiccolumns","jnumericcolumns","templatePrimaryKey","mastertemplatefields","sampleAuditFields","sampleAuditEditable","sampleAuditMultilingualFields","sampleQuerybuilderViewCondition","sampleQuerybuilderViewSelect","jsqlquerycolumns","jsqlquerycolumnssub","map","row","children","column","component","index","hasOwnProperty","componentRow","inputtype","push","displayname","unique","LABEL","VALUE","filterinputtype","comboDataInputObject","source","valuemember","displaymember","isMultiLingual","ismultilingual","dateonly","dateConstraintArraySQL","default","columnname","mandatory","templatemandatory","editableuntill","DRAFT","jsondata","griditem","gridmoreitem","approveVersion1","unchangeList","selectedTemplate","sviewname","ndesigntemplatemappingcode","sregtemplatename","sprimarykey","onSaveClick","saveType","formRef","undefined","subTypeCode","approvalconfigversion","sversionname","TESTRESULTAPPROVAL","searchRef","bool","errormessage","approvalconfigrole","filterDetailCount","validationDetailCount","decisionDetailCount","actionDetailCount","userRoleTree","isAutoApprovalVersion","YES","role","approvalconfigrolefilterdetail","approvalconfigrolevalidationdetail","approvalconfigroledecisiondetail","approvalconfigroleactiondetail","nuserrolecode","napprovalconfigrolecode","nchecklistversioncode","checklist","NA","npartialapprovalneed","nsectionwiseapprovalneed","NO","nrecomretestneed","nrecomrecalcneed","nretestneed","nrecalcneed","nlevelno","napprovalstatuscode","approvalstatus","nautoapproval","nautoapprovalstatuscode","nautodescisionstatuscode","decisionstatus","PASS","length","ncorrectionneed","nesignneed","nsitecode","nmastersitecode","nstatus","ACTIVE","filterstatus","filterValue","validationstatus","validationValue","decisionValue","actionValue","suserrolename","finalInputData","temp1","versionConfig","temp","ntranscode","AUTOAPPROVAL","stransdisplaystatus","AUTOCOMPLETE","nautoapprovalstatus","nautodescisionstatus","nautoallot","nneedjoballocation","nneedautoouterband","nneedautoinnerband","napproveconfversionno","sapproveconfversiondesc","join","ConfirmDelete","confirmMessage","confirm","onInputOnChange","event","action","roleDetails","fieldName","target","name","split","actionArray","type","checked","splice","indexOf","regex","regexNum","test","charAt","defaultValue","replace","onComboChange","comboData","comboName","filterArray","item","schecklistversionname","Array","isArray","optCopyRegType","onFilterComboChange","nFlag","userroleTemplateValue","oldState","approvalsubtype","registrationtype","registrationType","registrationsubtype","registrationSubType","RegistrationTypeList","RegistrationSubTypeList","inputParamData","onFilterSubmit","check","TESTGROUPAPPROVAL","realApprovalSubTypeValue","realRegistrationTypeValue","realRegistrationSubTypeValue","approvalConfigCode","reloadData","userRoleAccordion","userRoleList","accordionMap","Map","set","roleConfig","controlMap","deleteRecord","tabDetail","onTabOnChange","selectedRole","approvalconfigRoleNames","tabMap","roleFilters","filterStatusState","dataState","roleValidations","validationStatusState","roleDecisions","skip","take","roleActions","tabProps","settings","parseInt","masterStatus","error","dataResult","ApprovalsubtypeList","UserRoleTemplateList","createRef","getDerivedStateFromProps","render","versionStatusCSS","editId","has","get","copyId","addId","ssubtypename","filterParam","searchFieldList","sortField","sortOrder","mandatoryFields","breadCrumbData","masterList","searchedData","versionData","version","parentFunction","Object","entries","sversionstatus","float","stemplatemappingversion","sneedautoinnerband","sneedautoouterband","designTemplateMapping","approvalStatusOptions","approvalStatusValue","filterStatusOptions","filterStatusValues","topLevelValidStatusOptions","validationStatusOptions","validationStatusValues","decisionStatusOptions","decisionStatusValues","actionStatus","checklistOptions","checklistValues","optCopyRegSubType","componentDidUpdate","previousProps","updateState","values","ApprovalsubtypeListMap","RegistrationTypeListMap","RegistrationSubTypeListMap","UserRoleTemplateListMap","treeVersionTemplate","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\nimport { callService, crudMaster } from '../../../actions';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faCopy, faThumbsUp, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { sortData, getControlMap, showEsign, constructOptionList, validateCreateView } from '../../../components/CommonScript'\r\nimport { process } from '@progress/kendo-data-query';\r\nimport ListMaster from '../../../components/list-master/list-master.component';\r\nimport Esign from '../../audittrail/Esign';\r\nimport SampleFilter from './SampleFilter';\r\nimport AddApprovalConfig from './AddApprovalConfig';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport { ReadOnlyText, ContentPanel } from '../../../components/App.styles';\r\nimport {\r\n    openModal, updateStore, getApprovalConfigVersion, getApprovalConfigEditData, copyVersion, setDefault, validateEsignCredential,\r\n    getFilterChange, getRoleDetails, getCopySubType, filterColumnData, getApprovalConfigurationVersion, approveVersion\r\n} from '../../../actions'\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport { ApprovalSubType, designProperties, transactionStatus } from '../../../components/Enumeration';\r\nimport FilterStatusTab from './FilterStatusTab';\r\nimport ValidationStatusTab from './ValidationStatusTab';\r\nimport UserRoleAccordion from './UserRoleAccordion';\r\nimport CustomAccordion from '../../../components/custom-accordion/custom-accordion.component';\r\nimport DecisionStatusTab from './DecisionStatusTab';\r\nimport ActionStatusTab from './ActionStatusTab';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\r\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\r\nimport { Affix } from 'rsuite';\r\nimport FormInput from '../../../components/form-input/form-input.component';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\n// import ReactTooltip from 'react-tooltip';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass ApprovalConfig extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        const dataState = {\r\n            skip: 0,\r\n            take: 10,\r\n        };\r\n        const filterStatusState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n        const validationStatusState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n\r\n        this.state = {\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            openModal: false, masterStatus: \"\", error: \"\",\r\n            approvalConfigCode: -1,\r\n            dataResult: [], dataState: dataState, selectedRecord: {},\r\n            ApprovalsubtypeList: [],\r\n            RegistrationTypeList: [],\r\n            RegistrationSubTypeList: [],\r\n            UserRoleTemplateList: [],\r\n            filterStatusState,\r\n            validationStatusState,\r\n            sidebarview: false\r\n\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    sidebarExpandCollapse = () => {\r\n        this.setState({\r\n            sidebarview: true\r\n        })          \r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\") {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\":\r\n                {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    handleClose = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason'] = \"\"\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {}\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    deleteApprovalConfigVersion = (deleteId) => {\r\n\r\n        if (this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.APPROVED ||\r\n            this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTVERSION\" }))\r\n        }\r\n        else {\r\n            const postParam = {\r\n                inputListName: \"versionData\", selectedObject: \"selectedVersion\",\r\n                primaryKeyField: \"napproveconfversioncode\",\r\n                primaryKeyValue: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\r\n                fetchUrl: \"approvalconfig/getApprovalConfigVersion\",\r\n                fecthInputObject: { napprovalsubtypecode: this.approvalSubTypeValue.value, userinfo: this.props.Login.userInfo },\r\n                // unchangeList: [\"approvalsubtype\", \"approvalSubTypeValue\", \"registrationType\",\r\n                //  \"registrationTypeValue\", \"registrationSubType\", \"registrationSubTypeValue\",\r\n                //     \"ApprovalsubtypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\"]\r\n            }\r\n            const inputData = {\r\n                'approvalconfigversion': {\r\n                    napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\r\n                    napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\r\n                    napprovalsubtypecode: this.approvalSubTypeValue.value,\r\n                    ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue.value,\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n            }\r\n            inputData['userinfo'] = this.props.Login.userInfo\r\n            const inputParam = {\r\n                methodUrl: 'ApprovalConfigVersion',\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                displayName: \"IDS_APPROVALCONFIG\",\r\n                inputData: inputData, postParam,\r\n                operation: \"delete\",\r\n                selectedRecord:{...this.state.selectedRecord}\r\n\r\n            }\r\n\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, operation: \"delete\",\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_APPROVALCONFIG\" })\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    approveVersion = (approveId) => {\r\n        if (this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.APPROVED ||\r\n            this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTVERSION\" }))\r\n        } else {\r\n\r\n            if (this.approvalSubTypeValue.value === 2) {\r\n                const inputData = {\r\n                    // 'approvalconfigversion': {\r\n                    napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\r\n                    napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\r\n                    napprovalsubtypecode: this.approvalSubTypeValue.value,\r\n                    ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nregsubtypecode: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.value : -1,\r\n                    sregsubtypename: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.label : \"\",\r\n                    nregtypecode: this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue.value : -1,\r\n                    // nregtypecode:this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue.value : -1,\r\n                    // }\r\n\r\n                }\r\n                inputData['userinfo'] = this.props.Login.userInfo\r\n                //  inputData['userinfo'] = this.props.Login.userInfo\r\n                const inputParam = {\r\n                    methodUrl: 'ApprovalConfigVersion',\r\n                    classUrl: this.props.Login.inputParam.classUrl,\r\n                    displayName: \"IDS_APPROVALCONFIG\",\r\n                    inputData: inputData,\r\n                    operation: \"approve\", ncontrolcode: approveId\r\n                }\r\n                //const masterData = this.props.Login.masterData;\r\n                this.props.approveVersion(inputParam);\r\n\r\n                // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId)) {\r\n                //     const updateInfo = {\r\n                //         typeName: DEFAULT_RETURN,\r\n                //         data: {\r\n                //             loadEsign: true, screenData: { inputParam, masterData },\r\n                //             openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_APPROVALCONFIG\" }), operation: \"approve\"\r\n                //         }\r\n                //     }\r\n                //     this.props.updateStore(updateInfo);\r\n                // }\r\n                // else {\r\n                //     this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n                // }\r\n            } else if(this.approvalSubTypeValue.value === ApprovalSubType.PROTOCOLAPPROVAL) {    \r\n                const inputData = {\r\n                    napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\r\n                    napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\r\n                    napprovalsubtypecode: this.approvalSubTypeValue.value,\r\n                    ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1,\r\n                    userinfo: this.props.Login.userInfo,\r\n\r\n                }\r\n                inputData['userinfo'] = this.props.Login.userInfo\r\n                const inputParam = {\r\n                    methodUrl: 'ApprovalConfigVersion',\r\n                    classUrl: this.props.Login.inputParam.classUrl,\r\n                    displayName: \"IDS_APPROVALCONFIG\",\r\n                    inputData: inputData,\r\n                    operation: \"approve\", ncontrolcode: approveId\r\n                }\r\n                this.props.approveVersion(inputParam);\r\n\r\n            } else {\r\n                const inputData = {\r\n                    'approvalconfigversion': {\r\n                        napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\r\n                        napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\r\n                        napprovalsubtypecode: this.approvalSubTypeValue.value,\r\n                        ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nregsubtypecode: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.value||-1 : -1,\r\n                        sregsubtypename: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.label||\"\" : \"\",\r\n                        nregtypecode: this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue.value : -1,\r\n                    }\r\n\r\n                }\r\n                inputData['userinfo'] = this.props.Login.userInfo\r\n                const inputParam = {\r\n                    methodUrl: 'ApprovalConfigVersion',\r\n                    classUrl: this.props.Login.inputParam.classUrl,\r\n                    displayName: \"IDS_APPROVALCONFIG\",\r\n                    inputData: inputData,\r\n                    operation: \"updateapprove\", ncontrolcode: approveId,\r\n                    selectedRecord: {...this.state.selectedRecord}\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_APPROVALCONFIG\" }), operation: \"approve\"\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    getGridJsondata = (templatedata, subSampleCheck, subSampleTemplate) => {\r\n        let gridItem = [];\r\n        let gridMoreItem = [];\r\n        let masterdatefields = [];\r\n        let masterdateconstraints = [];\r\n        let masteruniquevalidation = [];\r\n        let mastercombinationunique = [];\r\n        let editable = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n        let templatePrimaryKey = \"\";\r\n        let mastertemplatefields = [];\r\n        let sampleAuditFields = [];\r\n        let sampleAuditEditable = [];\r\n        let sampleAuditMultilingualFields = [];\r\n        let sampleQuerybuilderViewCondition = [];\r\n        let sampleQuerybuilderViewSelect = [];\r\n        let jsqlquerycolumns = [];\r\n        let jsqlquerycolumnssub = [];\r\n\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map((component, index) => {\r\n                    //console.log(\"component2:\", component);\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n\r\n                            if(componentRow.inputtype !== 'frontendsearchfilter'\r\n                            &&componentRow.inputtype !== 'backendsearchfilter'){\r\n                                jsqlquerycolumns.push({\r\n                                    \"tablename\": \"registration\",\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"isjsoncolumn\":false,\r\n                                    \"columndatatype\":  componentRow.inputtype==='date'?\"date\":\"string\",\r\n                                    \"jsoncolumnname\": \"jsonuidata\"\r\n                                })\r\n                            }\r\n                           \r\n\r\n                            // console.log(\"component row2:\", componentRow);\r\n                            componentRow.unique && masteruniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && mastercombinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n\r\n\r\n                            templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\r\n\r\n                            let filterinputtype = \"text\";\r\n                            let comboDataInputObject = {};\r\n\r\n                            if (componentRow.inputtype === 'combo') {\r\n\r\n                                comboDataInputObject = {\r\n                                    \"predefinedtablename\": componentRow.source,\r\n                                    \"predefinedvaluemember\": componentRow.valuemember,\r\n                                    \"predefineddisplaymember\": componentRow.displaymember,\r\n                                    \"predefinedismultilingual\": componentRow.isMultiLingual?componentRow.isMultiLingual:false,\r\n                                    \"predefinedconditionalString\": \"\\\"\" + componentRow.valuemember + \"\\\"\" + \" > '0' \"\r\n                                };\r\n                                jnumericcolumns.push({\r\n                                    \"columnname\": componentRow.displaymember,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"foriegntablePK\": componentRow.valuemember,\r\n                                    // \"ismultilingual\": true,\r\n                                    // \"conditionstring\": \" and nformcode in (\"+componentRow.table.item.nformcode+\") \",\r\n                                    \"tablecolumnname\": componentRow.label ,\r\n                                    \"foriegntablename\": componentRow.source,\r\n                                    ...comboDataInputObject\r\n                                })\r\n                                if(!componentRow.ismultilingual===true){\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 1,\r\n                                    \"viewvaluemember\": componentRow.label,\r\n                                    \"valuemember\": componentRow.valuemember,\r\n                                    \"displaymember\": componentRow.displaymember,\r\n                                    \"mastertablename\": componentRow.source,\r\n                                    \"needmasterdata\": true,\r\n                                    \"columntypedesc\": \"textinput\",\r\n                                })\r\n                            }\r\n                            else{\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": component.label, \r\n                                    \"columntype\": 4,\r\n                                    \"columntypedesc\": \"combo\",\r\n                                    \"isjsondisplayname\": true,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"sforeigntablename\": component.source,\r\n                                    \"sforeigncolumnname\": component.valuemember,\r\n                                    \"sforeigndisplayname\": \"jsondata->[\"+component.displaymember+\"]->>\"\r\n                                })\r\n         \r\n                            }\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n\r\n                                filterinputtype = \"predefinednumeric\";\r\n                            }\r\n                            // samplesearchfields.push(componentRow.label)\r\n                            if (componentRow.inputtype === 'date') {\r\n                                filterinputtype = \"date\";\r\n                                masterdatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                masterdateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 2,\r\n                                    \"columntypedesc\": \"datetime\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n\r\n\r\n                            }\r\n                            if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\r\n                                filterinputtype = \"numeric\";\r\n\r\n                                if (componentRow.inputtype === 'Numeric') {\r\n                                    sampleQuerybuilderViewCondition.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"columntype\": 5,\r\n                                        \"columntypedesc\": \"numericinput\",\r\n                                    })\r\n\r\n                                    sampleQuerybuilderViewSelect.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"languagecode\": false\r\n                                    })\r\n                                }\r\n\r\n\r\n\r\n                            }\r\n\r\n                            if (componentRow.inputtype === 'textinput' || componentRow.inputtype === 'email'\r\n                                || componentRow.inputtype === 'textarea' || componentRow.inputtype === 'radio') {\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 1,\r\n                                    \"columntypedesc\": \"textinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n\r\n                            }\r\n\r\n                            jdynamiccolumns.push({\r\n                                default: componentRow.unique ? true : false,\r\n                                filterinputtype,\r\n                                columnname: componentRow.label,\r\n                                displayname: componentRow.displayname,\r\n                                ...comboDataInputObject\r\n                            })\r\n                            // displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            // componentRow.templatemandatory && listItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                                sampleAuditEditable.push(componentRow.label);\r\n                            }\r\n                            else {\r\n                                gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            }\r\n                            mastertemplatefields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            sampleAuditFields.push(componentRow.label);\r\n                            sampleAuditMultilingualFields.push({ [componentRow.label]: componentRow.displayname });\r\n\r\n\r\n                            if (componentRow.templatemandatory) {\r\n                                editable.push({ label: componentRow.label, editableuntill: [] })\r\n                            }\r\n                            else {\r\n                                editable.push({ label: componentRow.label, editableuntill: [transactionStatus.DRAFT] })\r\n                            }\r\n\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        if(component.inputtype !== 'frontendsearchfilter'\r\n                        &&component.inputtype !== 'backendsearchfilter'){\r\n                        jsqlquerycolumns.push({\r\n                            \"tablename\": \"registration\",\r\n                            \"columnname\": component.label,\r\n                            \"displayname\": component.displayname,\r\n                            \"isjsoncolumn\": false,\r\n                            \"columndatatype\": component.inputtype === 'date'?'date':\"string\",\r\n                            \"jsoncolumnname\": \"jsondata\"\r\n                        })\r\n                    }\r\n                        //console.log(\"component2:\", component);\r\n                        component.unique && masteruniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        component.unique && mastercombinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n                        templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\r\n\r\n\r\n                        let filterinputtype = \"text\";\r\n                        let comboDataInputObject = {};\r\n\r\n                        mastertemplatefields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        sampleAuditFields.push(component.label);\r\n                        sampleAuditMultilingualFields.push({ [component.label]: component.displayname });\r\n\r\n                        if (component.inputtype === 'combo') {\r\n                            filterinputtype = \"predefinednumeric\";\r\n                            comboDataInputObject = {\r\n                                \"predefinedtablename\": component.source,\r\n                                \"predefinedvaluemember\": component.valuemember,\r\n                                \"predefineddisplaymember\": component.displaymember,\r\n                                \"predefinedismultilingual\": component.isMultiLingual?component.isMultiLingual:false,\r\n                                \"predefinedconditionalString\": \"\\\"\" + component.valuemember + \"\\\"\" + \" > '0'\"\r\n                            };\r\n                            jnumericcolumns.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"foriegntablePK\": component.valuemember ,\r\n                                // \"ismultilingual\": true,\r\n                                //\"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\r\n                                \"tablecolumnname\": component.label,\r\n                                \"foriegntablename\": component.source,\r\n                                ...comboDataInputObject\r\n                            })\r\n                            if(!component.ismultilingual===true){\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"columntype\": 1,\r\n                                    \"viewvaluemember\": component.label,\r\n                                    \"valuemember\": component.valuemember,\r\n                                    \"displaymember\": component.displaymember,\r\n                                    \"mastertablename\": component.source,\r\n                                    \"needmasterdata\": true,\r\n                                    \"columntypedesc\": \"textinput\",\r\n                                })\r\n                            }\r\n                            else{\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": component.label, \r\n                                    \"columntype\": 4,\r\n                                    \"columntypedesc\": \"combo\",\r\n                                    \"isjsondisplayname\": true,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"sforeigntablename\": component.source,\r\n                                    \"sforeigncolumnname\": component.valuemember,\r\n                                    \"sforeigndisplayname\": \"jsondata->[\"+component.displaymember+\"]->>\"\r\n                                })\r\n                              \r\n                                \r\n                            }\r\n                           \r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n                        }\r\n                        // samplesearchfields.push(component.label)\r\n                        if (component.inputtype === 'date') {\r\n                            filterinputtype = \"date\";\r\n                            masterdatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            masterdateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\r\n\r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"columntype\": 2,\r\n                                \"columntypedesc\": \"datetime\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n                        }\r\n                        if (component.inputtype === 'Numeric' || component.inputtype === 'radio') {\r\n                            filterinputtype = \"numeric\";\r\n                            if (component.inputtype === 'Numeric') {\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"columntype\": 5,\r\n                                    \"columntypedesc\": \"numericinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n                            }\r\n                        }\r\n\r\n                        if (component.inputtype === 'textinput' || component.inputtype === 'email'\r\n                            || component.inputtype === 'textarea' || component.inputtype === 'radio') {\r\n\r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"columntype\": 1,\r\n                                \"columntypedesc\": \"textinput\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n\r\n                        }\r\n\r\n                        jdynamiccolumns.push({\r\n                            default: component.unique ? true : false,\r\n                            columnname: component.label,\r\n                            displayname: component.displayname,\r\n                            filterinputtype,\r\n                            ...comboDataInputObject\r\n                        });\r\n\r\n                        if (component.mandatory || component.templatemandatory) {\r\n                            gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                            sampleAuditEditable.push(component.label);\r\n                        } else {\r\n                            gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n                        }\r\n                        if (component.templatemandatory) {\r\n                            editable.push({ label: component.label, editableuntill: [] });\r\n\r\n                        }\r\n                        else {\r\n                            editable.push({ label: component.label, editableuntill: [transactionStatus.DRAFT] })\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                })\r\n            })\r\n        );\r\n\r\n\r\n        if (subSampleCheck) {\r\n            subSampleTemplate && subSampleTemplate.jsondata.map(row =>\r\n                row.children && row.children.map(column => {\r\n                    column.children && column.children.map((component, index) => {\r\n                        //console.log(\"component2:\", component);\r\n                        if (component.hasOwnProperty('children')) {\r\n                            component.children.map(componentRow => {\r\n                                if(componentRow.inputtype !== 'frontendsearchfilter'\r\n                                &&componentRow.inputtype !== 'backendsearchfilter'){\r\n                                    jsqlquerycolumnssub.push({\r\n                                        \"tablename\": \"registrationsample\",\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"isjsoncolumn\":true,\r\n                                        \"columndatatype\":  componentRow.inputtype==='date'?\"date\":\"string\",\r\n                                        \"jsoncolumnname\": \"jsonuidata\"\r\n                                    })\r\n                                }\r\n                               \r\n    \r\n                                if (componentRow.inputtype === 'combo') {\r\n                                   if(!componentRow.ismultilingual===true){\r\n                                    sampleQuerybuilderViewCondition.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"columntype\": 1,\r\n                                        \"viewvaluemember\": componentRow.label,\r\n                                        \"valuemember\": componentRow.valuemember,\r\n                                        \"displaymember\": componentRow.displaymember,\r\n                                        \"mastertablename\": componentRow.source,\r\n                                        \"needmasterdata\": true,\r\n                                        \"columntypedesc\": \"textinput\",\r\n                                    })\r\n                                }\r\n                             \r\n                                    else{\r\n                                        sampleQuerybuilderViewCondition.push({\r\n                                            \"columnname\": component.label, \r\n                                            \"columntype\": 1,\r\n                                            \"displayname\": componentRow.displayname,\r\n                                            \"columntypedesc\": \"textinput\",\r\n                                            \"isjsondisplayname\": true,\r\n                                            \"sforeigntablename\": component.source,\r\n                                            \"sforeigncolumnname\": component.valuemember,\r\n                                    \"sforeigndisplayname\": \"jsondata->[\"+component.displaymember+\"]->>\"\r\n                                        })\r\n                                }\r\n                                    sampleQuerybuilderViewSelect.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"languagecode\": false\r\n                                    })\r\n                                }\r\n\r\n                                if (componentRow.inputtype === 'date') {\r\n                                    sampleQuerybuilderViewCondition.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"columntype\": 2,\r\n                                        \"columntypedesc\": \"datetime\",\r\n                                    })\r\n\r\n                                    sampleQuerybuilderViewSelect.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"languagecode\": false\r\n                                    })\r\n\r\n\r\n                                }\r\n\r\n                                if (componentRow.inputtype === 'Numeric') {\r\n                                    sampleQuerybuilderViewCondition.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"columntype\": 5,\r\n                                        \"columntypedesc\": \"numericinput\",\r\n                                    })\r\n\r\n                                    sampleQuerybuilderViewSelect.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"languagecode\": false\r\n                                    })\r\n                                }\r\n\r\n\r\n\r\n                                if (componentRow.inputtype === 'textinput' || componentRow.inputtype === 'email'\r\n                                    || componentRow.inputtype === 'textarea' || componentRow.inputtype === 'radio') {\r\n\r\n                                    sampleQuerybuilderViewCondition.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"columntype\": 1,\r\n                                        \"columntypedesc\": \"textinput\",\r\n                                    })\r\n\r\n                                    sampleQuerybuilderViewSelect.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"languagecode\": false\r\n                                    })\r\n\r\n                                }\r\n                                return null;\r\n                            })\r\n                        } else {\r\n\r\n                            if(component.inputtype !== 'frontendsearchfilter'\r\n                            &&component.inputtype !== 'backendsearchfilter'){\r\n                                jsqlquerycolumnssub.push({\r\n                                    \"tablename\": \"registrationsample\",\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"isjsoncolumn\":true,\r\n                                    \"columndatatype\":  component.inputtype==='date'?\"date\":\"string\",\r\n                                    \"jsoncolumnname\": \"jsonuidata\"\r\n                                })\r\n                            }\r\n                            if (component.inputtype === 'combo') {\r\n                                if(!component.ismultilingual===true){\r\n            \r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"columntype\": 1,\r\n                                    \"viewvaluemember\": component.label,\r\n                                    \"valuemember\": component.valuemember,\r\n                                    \"displaymember\": component.displaymember,\r\n                                    \"mastertablename\": component.source,\r\n                                    \"needmasterdata\": true,\r\n                                    \"columntypedesc\": \"textinput\",\r\n                                })\r\n                            }\r\n                                else{\r\n                                    sampleQuerybuilderViewCondition.push({\r\n                                        \"columnname\": component.label, \r\n                                        \"columntype\": 4,\r\n                                        \"displayname\": component.displayname,\r\n                                        \"columntypedesc\": \"combo\",\r\n                                        \"isjsondisplayname\": true,\r\n                                        \"sforeigntablename\": component.source,\r\n                                        \"sforeigncolumnname\": component.valuemember,\r\n                                    \"sforeigndisplayname\": \"jsondata->[\"+component.displaymember+\"]->>\"\r\n                                    })\r\n                            }\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n                            }\r\n                            if (component.inputtype === 'date') {\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"columntype\": 2,\r\n                                    \"columntypedesc\": \"datetime\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n                            }\r\n\r\n                            if (component.inputtype === 'Numeric') {\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"columntype\": 5,\r\n                                    \"columntypedesc\": \"numericinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n                            }\r\n\r\n                            if (component.inputtype === 'textinput' || component.inputtype === 'email'\r\n                                || component.inputtype === 'textarea' || component.inputtype === 'radio') {\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"columntype\": 1,\r\n                                    \"columntypedesc\": \"textinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n\r\n                            }\r\n                            return null;\r\n                        }\r\n\r\n                    })\r\n                })\r\n            );\r\n\r\n\r\n        }\r\n        let jsondata = {\r\n            griditem: gridItem,\r\n            gridmoreitem: gridMoreItem,\r\n            masterdatefields,\r\n            masterdateconstraints,\r\n            masteruniquevalidation,\r\n            editable,\r\n            mastertemplatefields,\r\n            mastercombinationunique,\r\n            sampleAuditFields,\r\n            sampleAuditEditable,\r\n            sampleAuditMultilingualFields\r\n        }\r\n\r\n        //console.log(\"dynamiccolumns:\", jdynamiccolumns);\r\n        return { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect ,jsqlquerycolumns,jsqlquerycolumnssub};\r\n    }\r\n\r\n\r\n    approveVersion1 = (approveId) => {\r\n        if (this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.APPROVED ||\r\n            this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTVERSION\" }))\r\n        } else {\r\n            const postParam = {\r\n                inputListName: \"versionData\", selectedObject: \"selectedVersion\",\r\n                primaryKeyField: \"napproveconfversioncode\",\r\n                primaryKeyValue: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\r\n                fetchUrl: \"approvalconfig/getApprovalConfigVersion\",\r\n                fecthInputObject: { napprovalsubtypecode: this.approvalSubTypeValue.value, userinfo: this.props.Login.userInfo },\r\n                unchangeList: [\"approvalsubtype\", \"approvalSubTypeValue\", \"registrationType\", \"registrationTypeValue\", \"registrationSubType\",\r\n                    \"registrationSubTypeValue\", \"ApprovalsubtypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\"]\r\n            }\r\n\r\n            let { jdynamiccolumns, jnumericcolumns, templatePrimaryKey, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect ,jsqlquerycolumns,jsqlquerycolumnssub} = this.getGridJsondata(this.props.Login.selectedTemplate &&\r\n                this.props.Login.selectedTemplate, this.props.Login.subSampleCheck, this.props.Login.subSampleTemplate);\r\n            const inputData = {\r\n                'approvalconfigversion': {\r\n                    napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\r\n                    napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\r\n                    napprovalsubtypecode: this.approvalSubTypeValue.value,\r\n                    ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nregsubtypecode: this.props.Login.masterData.registrationSubTypeValue && this.props.Login.masterData.registrationSubTypeValue.value  ? this.props.Login.masterData.registrationSubTypeValue.value : -1,\r\n                    sregsubtypename: this.props.Login.masterData.registrationSubTypeValue && this.props.Login.masterData.registrationSubTypeValue.label ? this.props.Login.masterData.registrationSubTypeValue.label : \"\",\r\n                    sviewname: this.state.selectedRecord.sviewname,\r\n                    ndesigntemplatemappingcode: this.state.selectedRecord.ndesigntemplatemappingcode.value,\r\n                    sregtemplatename: this.state.selectedRecord.ndesigntemplatemappingcode.label,\r\n                }, jdynamiccolumns, jnumericcolumns, sprimarykey: templatePrimaryKey,\r\n                sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect,jsqlquerycolumns,jsqlquerycolumnssub\r\n\r\n            }\r\n            inputData['userinfo'] = this.props.Login.userInfo\r\n\r\n\r\n            // inputData['jsondata'] = this.props.Login.userInfo\r\n            const inputParam = {\r\n                methodUrl: 'ApprovalConfigVersion',\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                displayName: \"IDS_APPROVALCONFIG\",\r\n                inputData: inputData, postParam,\r\n                operation: \"updateapprove\",\r\n                selectedRecord:{...this.state.selectedRecord}\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_APPROVALCONFIG\" }), operation: \"approve\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let postParam = undefined;\r\n        if (this.props.Login.operation === \"copy\") {\r\n\r\n            const subTypeCode = this.approvalSubTypeValue.value;\r\n\r\n            const inputData = {\r\n                approvalconfigversion: {\r\n                    napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\r\n                    napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\r\n                    napprovalsubtypecode: subTypeCode,\r\n                    sversionname: this.state.selectedRecord.sversionname,\r\n                    nregtypecode: subTypeCode === ApprovalSubType.TESTRESULTAPPROVAL ? this.state.selectedRecord['regtype'] ? this.state.selectedRecord['regtype'].value : this.state.registrationTypeValue[0].value : -1,\r\n                    nregsubtypecode: subTypeCode === ApprovalSubType.TESTRESULTAPPROVAL ? this.state.selectedRecord['regsubtype'] ? this.state.selectedRecord['regsubtype'].value : this.state.registrationSubTypeValue[0].value : -1,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1\r\n                }\r\n\r\n            }\r\n            inputData['userinfo'] = this.props.Login.userInfo\r\n            const inputParam = {\r\n                methodUrl: 'ApprovalConfigVersion',\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                displayName: \"IDS_APPROVALCONFIG\",\r\n                inputData: inputData, postParam, searchRef: this.searchRef,\r\n                operation: \"copy\",\r\n                selectedRecord:{...this.state.selectedRecord}\r\n            }\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_APPROVALCONFIG\" }), operation: \"copy\"\r\n                    }\r\n                }\r\n\r\n                this.props.updateStore(updateInfo);\r\n\r\n            } else {\r\n\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n\r\n            }\r\n\r\n        } else if (this.props.Login.operation === 'approve') {\r\n            this.approveVersion1(this.props.Login.ncontrolcode);\r\n        }\r\n        else {\r\n\r\n            let bool = true;\r\n            let errormessage = [];\r\n            let inputData = {};\r\n            let approvalconfigrole = [];\r\n            let filterDetailCount = 0;\r\n            let validationDetailCount = 0;\r\n            let decisionDetailCount = 0;\r\n            let actionDetailCount = 0;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData['napprovalconfigcode'] = this.props.Login.masterData.realApprovalConfigCode\r\n            inputData['ntreeversiontempcode'] = this.props.Login.userRoleTree[0].ntreeversiontempcode\r\n            inputData['napprovalsubtypecode'] = this.approvalSubTypeValue.value\r\n            let isAutoApprovalVersion = this.state.selectedRecord['IDS_AUTOAPPROVAL'] && this.state.selectedRecord['IDS_AUTOAPPROVAL'] === transactionStatus.YES ? true : false;\r\n\r\n            const userRoleTree = this.props.Login.userRoleTree;//.reverse();\r\n            userRoleTree.map(role => {\r\n                let approvalconfigrolefilterdetail = [];\r\n                let approvalconfigrolevalidationdetail = [];\r\n                let approvalconfigroledecisiondetail = [];\r\n                let approvalconfigroleactiondetail = [];\r\n                //to fill role details\r\n                if (this.state.selectedRecord[role.nuserrolecode]) {\r\n                    approvalconfigrole.push({\r\n                        napprovalconfigrolecode: this.props.Login.operation === 'create' ? 0 : role.napprovalconfigrolecode,\r\n                        napprovalconfigcode: role.napprovalconfigcode,\r\n                        ntreeversiontempcode: role.ntreeversiontempcode,\r\n                        nuserrolecode: role.nuserrolecode,\r\n                        nchecklistversioncode: this.state.selectedRecord[role.nuserrolecode] ? this.state.selectedRecord[role.nuserrolecode].checklist ?\r\n                            this.state.selectedRecord[role.nuserrolecode].checklist : transactionStatus.NA : transactionStatus.NA,\r\n                        npartialapprovalneed: this.state.selectedRecord[role.nuserrolecode]['Partial Approval_' + role.nuserrolecode] ?\r\n                            this.state.selectedRecord[role.nuserrolecode]['Partial Approval_' + role.nuserrolecode] : transactionStatus.YES,\r\n                        nsectionwiseapprovalneed: this.state.selectedRecord[role.nuserrolecode]['IDS_PARTIALAPPROVAL'] && this.state.selectedRecord[role.nuserrolecode]['IDS_PARTIALAPPROVAL'] === transactionStatus.NO ?\r\n                            this.state.selectedRecord[role.nuserrolecode]['IDS_SECTIONWISEAPPROVE'] ?\r\n                                this.state.selectedRecord[role.nuserrolecode]['IDS_SECTIONWISEAPPROVE'] : transactionStatus.NO\r\n                            : transactionStatus.NO,\r\n                        // nrecomretestneed: this.state.selectedRecord[role.nuserrolecode]['IDS_RECOMMENDRETEST'] ?\r\n                        //     this.state.selectedRecord[role.nuserrolecode]['IDS_RECOMMENDRETEST'] : transactionStatus.NO,\r\n                        // nrecomrecalcneed: this.state.selectedRecord[role.nuserrolecode]['IDS_RECOMMENDRECALC'] ?\r\n                        //     this.state.selectedRecord[role.nuserrolecode]['IDS_RECOMMENDRECALC'] : transactionStatus.NO,\r\n                        // nretestneed: this.state.selectedRecord[role.nuserrolecode]['IDS_RETEST'] ?\r\n                        //     this.state.selectedRecord[role.nuserrolecode]['IDS_RETEST'] : transactionStatus.NO,\r\n                        // nrecalcneed: this.state.selectedRecord[role.nuserrolecode]['IDS_RECALC'] ?\r\n                        //     this.state.selectedRecord[role.nuserrolecode]['IDS_RECALC'] : transactionStatus.NO,\r\n                        // nlevelno: role.nlevelno,\r\n                        nrecomretestneed: this.state.selectedRecord[role.nuserrolecode]['Recommend Retest_' + role.nuserrolecode] ?\r\n                            this.state.selectedRecord[role.nuserrolecode]['Recommend Retest_' + role.nuserrolecode] : transactionStatus.NO,\r\n                        nrecomrecalcneed: this.state.selectedRecord[role.nuserrolecode]['Recommend Recalc_' + role.nuserrolecode] ?\r\n                            this.state.selectedRecord[role.nuserrolecode]['Recommend Recalc_' + role.nuserrolecode] : transactionStatus.NO,\r\n                        nretestneed: this.state.selectedRecord[role.nuserrolecode]['ReTest_' + role.nuserrolecode] ?\r\n                            this.state.selectedRecord[role.nuserrolecode]['ReTest_' + role.nuserrolecode] : transactionStatus.NO,\r\n                        nrecalcneed: this.state.selectedRecord[role.nuserrolecode]['ReCalc_' + role.nuserrolecode] ?\r\n                            this.state.selectedRecord[role.nuserrolecode]['ReCalc_' + role.nuserrolecode] : transactionStatus.NO,\r\n                        nlevelno: role.nlevelno,\r\n                        napprovalstatuscode: this.state.selectedRecord[role.nuserrolecode].approvalstatus ? this.state.selectedRecord[role.nuserrolecode].approvalstatus : transactionStatus.NA,\r\n\r\n                        nautoapproval: this.state.selectedRecord['IDS_AUTOAPPROVAL'] && this.state.selectedRecord['IDS_AUTOAPPROVAL'] === transactionStatus.YES ? transactionStatus.YES :\r\n                            this.state.selectedRecord[role.nuserrolecode]['IDS_AUTOAPPROVAL'] ? this.state.selectedRecord[role.nuserrolecode]['IDS_AUTOAPPROVAL'] : transactionStatus.NO,\r\n\r\n                        nautoapprovalstatuscode: this.state.selectedRecord['IDS_AUTOAPPROVAL'] && this.state.selectedRecord['IDS_AUTOAPPROVAL'] === transactionStatus.YES ?\r\n                            this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus\r\n                            : this.state.selectedRecord[role.nuserrolecode]['IDS_AUTOAPPROVAL'] && this.state.selectedRecord[role.nuserrolecode].approvalstatus ?\r\n                                this.state.selectedRecord[role.nuserrolecode].approvalstatus\r\n                                : transactionStatus.NA\r\n                        ,\r\n                        nautodescisionstatuscode: this.state.selectedRecord['IDS_AUTOAPPROVAL'] && this.state.selectedRecord['IDS_AUTOAPPROVAL'] === transactionStatus.YES ?\r\n                            this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus[0] ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus[0] : transactionStatus.PASS\r\n                            : this.state.selectedRecord[role.nuserrolecode]['IDS_AUTOAPPROVAL'] && this.state.selectedRecord[role.nuserrolecode].decisionstatus && this.state.selectedRecord[role.nuserrolecode].decisionstatus.length > 0 ?\r\n                                this.state.selectedRecord[role.nuserrolecode].decisionstatus[0] : transactionStatus.DRAFT\r\n                        // :this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus&&this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus.length>0 ?\r\n                        // :transactionStatus.NA\r\n                        ,\r\n                        ncorrectionneed: this.state.selectedRecord[role.nuserrolecode]['Correction_' + role.nuserrolecode] ?\r\n                            this.state.selectedRecord[role.nuserrolecode]['Correction_' + role.nuserrolecode] : transactionStatus.NO,\r\n                        nesignneed: this.state.selectedRecord[role.nuserrolecode]['Esign_' + role.nuserrolecode] ?\r\n                            this.state.selectedRecord[role.nuserrolecode]['Esign_' + role.nuserrolecode] : transactionStatus.NO,\r\n                        ntransactionstatus: transactionStatus.DRAFT,\r\n                        nsitecode: this.props.Login.userInfo.nmastersitecode,\r\n                        nstatus: transactionStatus.ACTIVE\r\n\r\n                    })\r\n\r\n\r\n                    if (this.state.selectedRecord[role.nuserrolecode].filterstatus) {\r\n                        this.state.selectedRecord[role.nuserrolecode].filterstatus.map(filterValue => {\r\n                            filterDetailCount++;\r\n                            approvalconfigrolefilterdetail.push({\r\n                                napprovalconfigcode: role.napprovalconfigcode,\r\n                                nuserrolecode: role.nuserrolecode,\r\n                                nlevelno: role.nlevelno,\r\n                                ntransactionstatus: filterValue,\r\n                                nstatus: transactionStatus.ACTIVE\r\n                            })\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (this.state.selectedRecord[role.nuserrolecode].validationstatus) {\r\n                        this.state.selectedRecord[role.nuserrolecode].validationstatus.map(validationValue => {\r\n                            validationDetailCount++;\r\n                            approvalconfigrolevalidationdetail.push({\r\n                                napprovalconfigcode: role.napprovalconfigcode,\r\n                                nuserrolecode: role.nuserrolecode,\r\n                                nlevelno: role.nlevelno,\r\n                                ntransactionstatus: validationValue,\r\n                                nstatus: transactionStatus.ACTIVE\r\n                            })\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (this.state.selectedRecord[role.nuserrolecode].decisionstatus) {\r\n                        this.state.selectedRecord[role.nuserrolecode].decisionstatus.map(decisionValue => {\r\n                            decisionDetailCount++;\r\n                            approvalconfigroledecisiondetail.push({\r\n                                napprovalconfigcode: role.napprovalconfigcode,\r\n                                nuserrolecode: role.nuserrolecode,\r\n                                nlevelno: role.nlevelno,\r\n                                ntransactionstatus: decisionValue,\r\n                                nstatus: transactionStatus.ACTIVE\r\n                            });\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    this.state.selectedRecord[`actionStatus_${role.nuserrolecode}`] ? this.state.selectedRecord[`actionStatus_${role.nuserrolecode}`].map(actionValue => {\r\n                        actionDetailCount++;\r\n                        approvalconfigroleactiondetail.push({\r\n                            napprovalconfigcode: role.napprovalconfigcode,\r\n                            nuserrolecode: role.nuserrolecode,\r\n                            nlevelno: role.nlevelno,\r\n                            ntransactionstatus: actionValue,\r\n                            nstatus: transactionStatus.ACTIVE\r\n                        });\r\n                        return null;\r\n                    }) : approvalconfigroleactiondetail.push();\r\n                    actionDetailCount++;\r\n                    approvalconfigroleactiondetail.push({\r\n                        napprovalconfigcode: role.napprovalconfigcode,\r\n                        nuserrolecode: role.nuserrolecode,\r\n                        nlevelno: role.nlevelno,\r\n                        ntransactionstatus: this.state.selectedRecord[role.nuserrolecode].approvalstatus ? this.state.selectedRecord[role.nuserrolecode].approvalstatus : -1,\r\n                        nstatus: transactionStatus.ACTIVE\r\n                    });\r\n\r\n                    inputData[`approvalconfigrolefilterdetail_${[role.nuserrolecode]}`] = approvalconfigrolefilterdetail\r\n                    inputData[`approvalconfigrolevalidationdetail_${[role.nuserrolecode]}`] = approvalconfigrolevalidationdetail\r\n                    inputData[`approvalconfigroledecisiondetail_${[role.nuserrolecode]}`] = approvalconfigroledecisiondetail\r\n                    inputData[`approvalconfigroleactiondetail_${[role.nuserrolecode]}`] = approvalconfigroleactiondetail\r\n                    bool = bool ? true : false\r\n                    return null;\r\n                } else {\r\n                    bool = false\r\n                    errormessage.push(role.suserrolename)\r\n                    return false;\r\n                }\r\n            })//role map\r\n\r\n            inputData['approvalconfigrole'] = approvalconfigrole\r\n            inputData['rolecount'] = this.props.Login.userRoleTree.length\r\n            inputData['filterdetailcount'] = filterDetailCount\r\n            inputData['validationdetailcount'] = validationDetailCount\r\n            inputData['decisiondetailcount'] = decisionDetailCount\r\n            inputData['actioncount'] = actionDetailCount\r\n            inputData['ntreeversiontempcode'] = this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1;\r\n            let finalInputData = {}\r\n            let inputParam = {}\r\n            if (bool) {\r\n                if (this.props.Login.operation === \"update\") {\r\n                    // edit\r\n                    postParam = { inputListName: \"versionData\", selectedObject: \"selectedVersion\", primaryKeyField: \"napproveconfversioncode\" };\r\n\r\n                    const temp1 = {};\r\n                    this.props.Login.versionConfig.map(temp => {\r\n                        if (temp.ntranscode === transactionStatus.AUTOAPPROVAL) {\r\n                            temp1['nneedautoapproval'] = this.state.selectedRecord[temp.stransdisplaystatus] ? this.state.selectedRecord[temp.stransdisplaystatus] : transactionStatus.NO\r\n                        }\r\n                        else if (temp.ntranscode === transactionStatus.AUTOCOMPLETE) {\r\n                            temp1['nneedautocomplete'] = this.state.selectedRecord[temp.stransdisplaystatus] ? this.state.selectedRecord[temp.stransdisplaystatus] : transactionStatus.NO\r\n                        }\r\n\r\n\r\n\r\n                    })\r\n\r\n\r\n                    inputData['approvalconfigautoapproval'] = {\r\n                        napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\r\n                        napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\r\n                        sversionname: this.state.selectedRecord.sversionname,\r\n                        //  nneedautocomplete: this.state.selectedRecord['Auto Complete'] ? this.state.selectedRecord['Auto Complete'] : transactionStatus.NO,\r\n                        //  nneedautoapproval: this.state.selectedRecord['Auto Approval'] ? this.state.selectedRecord['Auto Approval'] : transactionStatus.NO,\r\n                        nautoapprovalstatus: this.props.Login.userRoleTree && this.props.Login.userRoleTree.length > 0 && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus : transactionStatus.NA,\r\n                        nautodescisionstatus: isAutoApprovalVersion ? transactionStatus.PASS : this.props.Login.userRoleTree && this.props.Login.userRoleTree.length > 0 && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus ? (this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus[0] || transactionStatus.DRAFT) : transactionStatus.DRAFT,\r\n                        nautoallot: this.state.selectedRecord['IDS_AUTOALLOT'] ? this.state.selectedRecord['IDS_AUTOALLOT'] : transactionStatus.NO,\r\n                        nneedjoballocation: this.state.selectedRecord['IDS_JOBALLOCATION'] ? this.state.selectedRecord['IDS_JOBALLOCATION'] : transactionStatus.NO,\r\n                        nstatus: transactionStatus.ACTIVE,\r\n                        nneedautoouterband: this.state.selectedRecord['nneedautoouterband'] ? this.state.selectedRecord['nneedautoouterband'] : transactionStatus.NO,\r\n                        nneedautoinnerband: this.state.selectedRecord['nneedautoinnerband'] ? this.state.selectedRecord['nneedautoinnerband'] : transactionStatus.NO,\r\n                        ...temp1\r\n                    }\r\n                }\r\n                else {\r\n\r\n\r\n                    inputData['approveconfigversion'] = {\r\n                        napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\r\n                        napproveconfversionno: -1,\r\n                        ntransactionstatus: transactionStatus.DRAFT,\r\n                        ntreeversiontempcode: this.props.Login.userRoleTree[0].ntreeversiontempcode,\r\n                        sapproveconfversiondesc: '-',\r\n                        nsitecode: this.props.Login.userInfo.nmastersitecode,\r\n                        nstatus: transactionStatus.ACTIVE\r\n                    }\r\n                    const temp1 = {};\r\n                    this.props.Login.versionConfig.map(temp => {\r\n                        if (temp.ntranscode === transactionStatus.AUTOAPPROVAL) {\r\n                            temp1['nneedautoapproval'] = this.state.selectedRecord[temp.stransdisplaystatus] ? this.state.selectedRecord[temp.stransdisplaystatus] : transactionStatus.NO\r\n                        }\r\n                        else if (temp.ntranscode === transactionStatus.AUTOCOMPLETE) {\r\n                            temp1['nneedautocomplete'] = this.state.selectedRecord[temp.stransdisplaystatus] ? this.state.selectedRecord[temp.stransdisplaystatus] : transactionStatus.NO\r\n                        }\r\n\r\n\r\n\r\n                    })\r\n                    inputData['approvalconfigautoapproval'] = {\r\n                        napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\r\n                        sversionname: this.state.selectedRecord.sversionname,\r\n                        // nneedautocomplete: this.state.selectedRecord['Auto Complete'] ? this.state.selectedRecord['Auto Complete'] : transactionStatus.NO,\r\n                        //  nneedautoapproval: this.state.selectedRecord['Auto Approval'] ? this.state.selectedRecord['Auto Approval'] : transactionStatus.NO,\r\n                        nautoapprovalstatus: this.props.Login.userRoleTree && this.props.Login.userRoleTree.length > 0 && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus : transactionStatus.NA,\r\n                        nautodescisionstatus: isAutoApprovalVersion ? transactionStatus.PASS : this.props.Login.userRoleTree && this.props.Login.userRoleTree.length > 0 && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus ? (this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus[0] || transactionStatus.DRAFT) : transactionStatus.DRAFT,\r\n                        nautoallot: this.state.selectedRecord['IDS_AUTOALLOT'] ? this.state.selectedRecord['IDS_AUTOALLOT'] : transactionStatus.NO,\r\n                        nneedjoballocation: this.state.selectedRecord['IDS_JOBALLOCATION'] ? this.state.selectedRecord['IDS_JOBALLOCATION'] : transactionStatus.NO,\r\n                        nneedautoouterband: this.state.selectedRecord['nneedautoouterband'] ? this.state.selectedRecord['nneedautoouterband'] : transactionStatus.NO,\r\n                        nneedautoinnerband: this.state.selectedRecord['nneedautoinnerband'] ? this.state.selectedRecord['nneedautoinnerband'] : transactionStatus.NO,\r\n                        nstatus: transactionStatus.ACTIVE,\r\n                        ...temp1\r\n                    }\r\n                }\r\n                finalInputData['approvalconfigversion'] = inputData\r\n                finalInputData['userinfo'] = this.props.Login.userInfo\r\n                inputParam = {\r\n                    methodUrl: 'ApprovalConfigVersion',\r\n                    classUrl: this.props.Login.inputParam.classUrl,\r\n                    displayName: \"IDS_APPROVALCONFIG\",\r\n                    inputData: finalInputData, saveType, formRef,\r\n                    operation: this.props.Login.operation,\r\n                    postParam, searchRef: this.searchRef,\r\n                    selectedRecord:{...this.state.selectedRecord}\r\n                }\r\n                const masterData = this.props.Login.masterData;\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType,\r\n                            openModal: true, operation: this.props.Login.operation, screenName: this.props.intl.formatMessage({ id: \"IDS_APPROVALCONFIG\" })\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_FILLDETAILSFOR\" }) + \" \" + errormessage.join(\",\"))\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n      \r\n        let versionStatusCSS = \"outline-secondary\";\r\n        if (this.props.Login.masterData.selectedVersion && this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.APPROVED) {\r\n            versionStatusCSS = \"outline-success\";\r\n        }\r\n        else if (this.props.Login.masterData.selectedVersion && this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.RETIRED) {\r\n            versionStatusCSS = \"outline-danger\";\r\n        }\r\n        const editId = this.state.controlMap.has(\"EditApprovalConfig\") && this.state.controlMap.get(\"EditApprovalConfig\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteApprovalConfig\") && this.state.controlMap.get(\"DeleteApprovalConfig\").ncontrolcode\r\n        const approveId = this.state.controlMap.has(\"ApproveApprovalConfig\") && this.state.controlMap.get(\"ApproveApprovalConfig\").ncontrolcode\r\n        const copyId = this.state.controlMap.has(\"CopyApprovalConfig\") && this.state.controlMap.get(\"CopyApprovalConfig\").ncontrolcode\r\n        const addId = this.state.controlMap.has(\"AddApprovalConfig\") && this.state.controlMap.get(\"AddApprovalConfig\").ncontrolcode\r\n\r\n        this.approvalSubTypeValue = this.props.Login.masterData.realApprovalSubTypeValue ?\r\n            this.props.Login.masterData.realApprovalSubTypeValue\r\n            : this.props.Login.masterData.approvalSubTypeValue ?\r\n                this.props.Login.masterData.approvalSubTypeValue\r\n                : this.props.Login.masterData.approvalsubtype ? this.props.Login.masterData.approvalsubtype.length > 0 ?\r\n                    {\r\n                        value: sortData(this.props.Login.masterData.approvalsubtype, 'ascending', 'napprovalsubtypecode')[0].napprovalsubtypecode,\r\n                        label: sortData(this.props.Login.masterData.approvalsubtype, 'ascending', 'napprovalsubtypecode')[0].ssubtypename\r\n                    } : {} : {};\r\n\r\n        const filterParam = {\r\n            inputListName: \"versionData\",\r\n            selectedObject: \"selectedVersion\",\r\n            primaryKeyField: \"napproveconfversioncode\",\r\n            searchFieldList: [\"sversionname\", \"sversionstatus\", \"sapproveconfversiondesc\"],\r\n            fetchUrl: \"approvalconfig/getApprovalConfigVersion\",\r\n            fecthInputObject: { napprovalsubtypecode: this.approvalSubTypeValue.value, userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            sortField: \"napproveconfversioncode\", sortOrder: \"descending\",\r\n\r\n            //NIBSCRT-2294\r\n            unchangeList: [\"approvalsubtype\", \"approvalSubTypeValue\", \"registrationType\", \"registrationTypeValue\",\r\n                \"registrationSubType\", \"registrationSubTypeValue\", \"ApprovalsubtypeList\",\r\n                \"RegistrationTypeList\", \"RegistrationSubTypeList\", \"treeVersionTemplate\", \"userroleTemplateValue\",\r\n                \"realApprovalSubTypeValue\", \"realRegistrationTypeValue\", \"realRegistrationSubTypeValue\",\r\n                \"realTreeVersionTemplateValue\", \"approvalConfigCode\", \"realApprovalConfigCode\"]\r\n        };\r\n        const selectedRole = this.props.Login.masterData.selectedRole ? this.props.Login.masterData.selectedRole : this.props.Login.masterData.approvalconfigRoleNames && this.props.Login.masterData.approvalconfigRoleNames.length > 0 && sortData(this.props.Login.masterData.approvalconfigRoleNames, 'ascending', 'nlevelno')[0]\r\n\r\n        const mandatoryFields = [{ \"idsName\": \"IDS_VERSIONNAME\", \"dataField\": \"sversionname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }]\r\n        this.props.Login.operation !== 'copy' && this.props.Login.userRoleTree && this.props.Login.userRoleTree.map(role => {\r\n            mandatoryFields.push({ \"idsName\": \"IDS_APPROVALSTATUS\", \"alertSuffix\": ` - ${role.suserrolename}`, \"dataField\": `approvalstatus_${role.nuserrolecode}`, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n            mandatoryFields.push({ \"idsName\": \"IDS_FILTERSTATUS\", \"alertSuffix\": ` - ${role.suserrolename}`, \"dataField\": `filterstatus_${role.nuserrolecode}`, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n            mandatoryFields.push({ \"idsName\": \"IDS_VALIDATIONSTATUS\", \"alertSuffix\": ` - ${role.suserrolename}`, \"dataField\": `validationstatus_${role.nuserrolecode}`, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n            //ALPD-5334 added by Dhanushya RI,Enable mandatory field to non mandatory field\r\n            // if (this.props.Login.decisionStatusOptions && this.props.Login.decisionStatusOptions.length > 0) {\r\n            //     mandatoryFields.push({ \"idsName\": \"IDS_DECISIONSTATUS\", \"alertSuffix\": ` - ${role.suserrolename}`, \"dataField\": `decisionstatus_${role.nuserrolecode}` });\r\n            // }\r\n            return null;\r\n        });\r\n        let breadCrumbData = []\r\n        if (this.props.Login.masterData.realApprovalSubTypeValue && this.props.Login.masterData.realApprovalSubTypeValue.value === ApprovalSubType.TESTRESULTAPPROVAL) {\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_APPROVALSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.realApprovalSubTypeValue ? this.props.Login.masterData.realApprovalSubTypeValue.label : \"NA\"\r\n                }, {\r\n                    \"label\": \"IDS_REGISTRATIONTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegistrationTypeValue ? this.props.Login.masterData.realRegistrationTypeValue.label : \"NA\"\r\n                }, {\r\n                    \"label\": \"IDS_REGISTRATIONSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegistrationSubTypeValue ? this.props.Login.masterData.realRegistrationSubTypeValue.label : \"NA\"\r\n                }, {\r\n                    \"label\": \"IDS_USERROLETEMPLATE\",\r\n                    \"value\": this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.label : \"NA\"\r\n                }\r\n            ];\r\n        } else {\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_APPROVALSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.realApprovalSubTypeValue ? this.props.Login.masterData.realApprovalSubTypeValue.label : \"NA\"\r\n                }, {\r\n                    \"label\": \"IDS_USERROLETEMPLATE\",\r\n                    \"value\": this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.label : \"NA\"\r\n                }\r\n            ]\r\n        }\r\n        // console.log(\"this.approvalSubTypeValue:\", Object.keys(this.approvalSubTypeValue).length);\r\n       // console.log(\"this.props.Login.masterData.:\", this.props.Login.masterData);\r\n        const masterList = sortData((this.props.Login.masterData.searchedData || this.props.Login.masterData.versionData), \"descending\", \"napproveconfversioncode\");\r\n        //console.log(\"masterList:\", masterList);\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    <Affix top={53}>\r\n                        <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                    </Affix>\r\n                    <Row noGutters={true}>\r\n                        <Col md={`${!this.props.sidebarview ? '4' : \"2\"}`}> \r\n                            <ListMaster\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_APPROVALCONFIG\" })}\r\n                                masterList={masterList}\r\n                                getMasterDetail={(version) => this.props.getApprovalConfigVersion(version, this.approvalSubTypeValue.value, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.selectedVersion}\r\n                                primaryKeyField=\"napproveconfversioncode\"\r\n                                mainField=\"sversionname\"\r\n                                firstField=\"sapproveconfversiondesc\"\r\n                                secondField=\"sversionstatus\"\r\n                                isIDSField=\"Yes\"\r\n                                searchRef={this.searchRef}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                openModal={() => this.props.openModal(\"create\", this.props.Login.masterData.realApprovalConfigCode, this.approvalSubTypeValue.value,\r\n                                    this.props.Login.userInfo, addId, this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -10)}\r\n                                needAccordianFilter={false}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={true}\r\n                                showFilterIcon={true}\r\n                                //ALPD-5195--Vignesh R(21-01-2025)-->reg sub type and approval config-- filter issue, check description\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_SAMPLEFILTER\":\r\n                                            <SampleFilter\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                filterComboChange={this.onFilterComboChange}\r\n                                                approvalSubTypeOptions={this.state.ApprovalsubtypeList}\r\n                                                approvalSubTypeValue={this.props.Login.masterData.approvalSubTypeValue}\r\n                                                registrationTypeOptions={this.state.RegistrationTypeList}\r\n                                                registrationTypeValue={this.props.Login.masterData.registrationTypeValue}\r\n                                                registrationSubTypeOptions={this.state.RegistrationSubTypeList}\r\n                                                registrationSubTypeValue={this.props.Login.masterData.registrationSubTypeValue}\r\n                                                userroleTemplateOptions={this.state.UserRoleTemplateList}\r\n                                                userroleTemplateValue={this.props.Login.masterData.userroleTemplateValue}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md={`${!this.props.sidebarview ? '8' : \"10\"}`} className=\"position-relative\">\r\n                            <div className=\"sidebar-view-btn-block\">\r\n                                <div className=\"sidebar-view-btn \" onClick={this.props.parentFunction}>\r\n                                    {!this.props.sidebarview ?                    \r\n                                        <i class=\"fa fa-less-than\"></i> :\r\n                                        <i class=\"fa fa-greater-than\"></i> \r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Card className=\"border-0\">\r\n                                    {this.props.Login.masterData.selectedVersion ? Object.entries(this.props.Login.masterData.selectedVersion).length > 0 ?\r\n                                        <>\r\n                                            <Card.Header>\r\n                                                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                                                <Card.Title>\r\n                                                    <h1 className=\"product-title-main\">{this.props.Login.masterData.selectedVersion.sversionname}</h1>\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle className=\"readonly-text font-weight-normal\">\r\n                                                    <Row>\r\n                                                        <Col md={8} >\r\n                                                            <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                {`${this.props.intl.formatMessage({ id: \"IDS_VERSIONNO\" })}:${this.props.Login.masterData.selectedVersion.sapproveconfversiondesc}`}\r\n                                                                <span className={`btn btn-outlined ${versionStatusCSS} btn-sm ml-3`}>\r\n                                                                    {/* <i class=\"fas fa-check \"></i>  */}\r\n                                                                    {this.props.Login.masterData.selectedVersion.sversionstatus}\r\n                                                                </span>\r\n                                                            </h2>\r\n                                                        </Col>\r\n                                                        <Col md={4}>\r\n                                                            <>\r\n                                                                <div className=\"d-flex product-category\" style={{ float: \"right\" }}>\r\n                                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                    <div className=\"d-inline \">\r\n                                                                        <Nav.Link\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                            //  data-for=\"tooltip_list_wrap\"\r\n                                                                            onClick={() => this.props.getApprovalConfigEditData(this.props.Login.masterData.selectedVersion.napproveconfversioncode, this.approvalSubTypeValue.value, this.props.Login.userInfo, this.props.Login.masterData, editId)}>\r\n                                                                            <FontAwesomeIcon icon={faPencilAlt} title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} />\r\n                                                                        </Nav.Link>\r\n                                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                            //  data-for=\"tooltip_list_wrap\"\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                            onClick={() => this.ConfirmDelete(deleteId)}>\r\n                                                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                            {/* <ConfirmDialog\r\n                                                                        name=\"deleteMessage\"\r\n                                                                        message={this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" })}\r\n                                                                        doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                                        doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                        icon={faTrashAlt}\r\n                                                                        //title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                        handleClickDelete={() => this.deleteApprovalConfigVersion(deleteId)}\r\n                                                                    /> */}\r\n                                                                        </Nav.Link>\r\n                                                                        <Nav.Link\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                            // data-for=\"tooltip_list_wrap\"\r\n                                                                            onClick={() => this.approveVersion(approveId)}>\r\n                                                                            <FontAwesomeIcon icon={faThumbsUp} />\r\n                                                                        </Nav.Link>\r\n                                                                        <Nav.Link\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(copyId) === -1}\r\n                                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_COPY\" })}\r\n                                                                            //  data-for=\"tooltip_list_wrap\"\r\n                                                                            onClick={() => this.props.copyVersion(this.approvalSubTypeValue.value, this.props.Login.userInfo, this.props.Login.masterData, copyId)}>\r\n                                                                            <FontAwesomeIcon icon={faCopy} title={this.props.intl.formatMessage({ id: \"IDS_COPY\" })} />\r\n                                                                        </Nav.Link>\r\n                                                                    </div>\r\n                                                                    {/* </Tooltip> */}\r\n                                                                </div>\r\n                                                            </>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                               \r\n                                                <Card.Text>\r\n                                                    <Row>\r\n                                                        {this.props.Login.masterData.approvalSubTypeValue && this.props.Login.masterData.approvalSubTypeValue !== undefined \r\n                                                                    && (this.props.Login.masterData.approvalSubTypeValue.value === ApprovalSubType.TESTRESULTAPPROVAL \r\n                                                                    || this.props.Login.masterData.approvalSubTypeValue.value === ApprovalSubType.PROTOCOLAPPROVAL) ?\r\n                                                            <>\r\n                                                            <Col md=\"6\">\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel><FormattedMessage id={\"IDS_VIEWNAME\"} /></FormLabel>\r\n                                                                    <ReadOnlyText>{\r\n                                                                            this.props.Login.masterData.selectedVersion.sviewname === \"\" ? '-' \r\n                                                                            : this.props.Login.masterData.selectedVersion.sviewname}</ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                            <Col md=\"6\">\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel><FormattedMessage id={\"IDS_TEMPLATEMAPPINGVERSION\"} /></FormLabel>\r\n                                                                    <ReadOnlyText>{this.props.Login.masterData.selectedVersion.stemplatemappingversion}</ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                            </>\r\n                                                            : \"\"}\r\n                                                    </Row>\r\n                                                     <Row>\r\n                                                        <Col>\r\n\r\n                                                             <Card>\r\n                                                                <Card.Header><FormattedMessage id=\"IDS_AUTOAPPROVAL\" message=\"Auto Approval\"/></Card.Header>\r\n                                                                <Card.Body>  \r\n                                                                <Row>\r\n                                                                    { /*Added by sonia on 14th NOV 2024 for jira id: ALPD-5086\t*/  }\r\n                                                                  \r\n\r\n                                                        {this.props.Login.masterData.approvalSubTypeValue && \r\n                                                            this.props.Login.masterData.approvalSubTypeValue !== undefined  &&\r\n                                                            this.props.Login.masterData.approvalSubTypeValue.value === ApprovalSubType.TESTRESULTAPPROVAL ?\r\n                                                            <>\r\n                                                                         <Col md=\"4\">\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel><FormattedMessage id={'IDS_AUTOINNERBAND'} /></FormLabel>\r\n                                                                    <ReadOnlyText>{this.props.Login.masterData.selectedVersion.sneedautoinnerband}</ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                                        <Col md=\"4\">\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel><FormattedMessage id={'IDS_AUTOOUTERBAND'} /></FormLabel>\r\n                                                                    <ReadOnlyText>{this.props.Login.masterData.selectedVersion.sneedautoouterband}</ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                            </>\r\n                                                           \r\n                                                        :\"\" }\r\n                                                                      {this.props.Login.masterData.versionConfig ? this.props.Login.masterData.versionConfig.map(item =>\r\n                                                                        <Col md=\"4\">\r\n                                                                            <FormGroup>\r\n                                                                                <FormLabel> \r\n                                                                                    {this.props.Login.masterData.approvalSubTypeValue && \r\n                                                                                    this.props.Login.masterData.approvalSubTypeValue !== undefined  &&\r\n                                                                                    this.props.Login.masterData.approvalSubTypeValue.value === ApprovalSubType.TESTRESULTAPPROVAL ?\r\n                                                                                        <FormattedMessage id={'IDS_ANYCASE'} />\r\n                                                                                    : \"\"//<FormattedMessage id={'IDS_AUTOAPPROVAL'} /> \r\n                                                                                    }\r\n                                                           \r\n                                                                                    </FormLabel>\r\n                                                                                <ReadOnlyText>{this.props.Login.masterData.selectedVersion[`${item.ntranscode}`]}</ReadOnlyText>\r\n                                                                            </FormGroup>\r\n                                                                        </Col>\r\n                                                                    ) : \"\"}\r\n                                                           \r\n                                                    </Row>\r\n\r\n                                                                </Card.Body>\r\n                                                            </Card>\r\n                                                            </Col>\r\n                                                    </Row>\r\n                                                  \r\n\r\n                                                  \r\n                                                </Card.Text>\r\n                                                <Row oGutters={true}>\r\n                                                    <Col md={12}>\r\n                                                        <Card className=\"at-tabs\">\r\n                                                            {this.props.Login.masterData ? this.props.Login.masterData.approvalconfigRoleNames && this.props.Login.masterData.approvalconfigRoleNames.length > 0 ?\r\n                                                                <CustomAccordion\r\n                                                                    key=\"UserRoles\"\r\n                                                                    accordionTitle=\"suserrolename\"\r\n                                                                    accordionComponent={this.userRoleAccordion(this.props.Login.masterData.approvalconfigRoleNames)}\r\n                                                                    inputParam={{ masterData: this.props.Login.masterData, userinfo: this.props.Login.userInfo, napprovalsubtypecode: this.approvalSubTypeValue.value }}\r\n                                                                    accordionClick={this.props.getRoleDetails}\r\n                                                                    accordionPrimaryKey={\"napprovalconfigrolecode\"}\r\n                                                                    accordionObjectName={\"role\"}\r\n                                                                    selectedKey={selectedRole.napprovalconfigrolecode}\r\n\r\n                                                                />\r\n                                                                : \"\" : \"\"}\r\n                                                        </Card>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </Card.Body>\r\n                                        </>\r\n                                        : \"\" : \"\"}\r\n                                </Card>\r\n                            </ContentPanel>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        onSaveClick={this.onSaveClick}\r\n                        operation={this.props.Login.operation}\r\n                        screenName={\"IDS_APPROVALCONFIG\"}\r\n                        closeModal={this.handleClose}\r\n                        show={this.props.Login.openModal}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.operation === 'approve' ? [{ \"idsName\": \"IDS_VIEWNAME\", \"dataField\": \"sviewname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                        { \"idsName\": \"IDS_TEMPLATEMAPPING\", \"dataField\": \"ndesigntemplatemappingcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }] : mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.operation === 'approve' ?\r\n                                <>\r\n                                    <Row>\r\n                                        <Col md={12}>\r\n                                            <FormSelectSearch\r\n                                                name={\"ndesigntemplatemappingcode\"}\r\n                                                formLabel={this.props.intl.formatMessage({ id: \"IDS_TEMPLATEMAPPING\" })}\r\n                                                placeholder=\"Please Select...\"\r\n                                                options={this.props.Login.designTemplateMapping}\r\n                                                // optionId=\"ntimezonecode\"\r\n                                                // optionValue=\"stimezoneid\"\r\n                                                value={this.state.selectedRecord[\"ndesigntemplatemappingcode\"]}\r\n                                                //defaultValue={props.selectedRecord[\"ndesigntemplatemapping\"]}\r\n                                                isMandatory={true}\r\n                                                isMulti={false}\r\n                                                isSearchable={false}\r\n                                                isClearable={false}\r\n                                                isDisabled={true}\r\n                                                closeMenuOnSelect={true}\r\n                                                onChange={(event) => this.onComboChange(event, 'ndesigntemplatemappingcode')}\r\n                                            />\r\n                                            <FormInput\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_VIEWNAME\" })}\r\n                                                name={\"sviewname\"}\r\n                                                type=\"text\"\r\n                                                onChange={(event) => this.onInputOnChange(event)}\r\n                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_VIEWNAME\" })}\r\n                                                value={this.state.selectedRecord[\"sviewname\"]}\r\n                                                isMandatory={true}\r\n                                                //required={true}\r\n                                                maxLength={30}\r\n                                                onPaste={true}\r\n                                            />\r\n\r\n                                        </Col>\r\n                                    </Row>\r\n                                </>\r\n                                :\r\n                                <AddApprovalConfig\r\n                                    selectedRecord={this.state.selectedRecord ? this.state.selectedRecord : {}}\r\n                                    userRoleTree={this.props.Login.userRoleTree}\r\n                                    approvalSubTypeValue={this.approvalSubTypeValue}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    approvalStatusOptions={this.props.Login.approvalStatusOptions}\r\n                                    approvalStatusValue={this.props.Login.approvalStatusValue}\r\n                                    filterStatusOptions={this.props.Login.filterStatusOptions}\r\n                                    filterStatusValues={this.props.Login.filterStatusValues}\r\n                                    topLevelValidStatusOptions={this.props.Login.topLevelValidStatusOptions}\r\n                                    validationStatusOptions={this.props.Login.validationStatusOptions}\r\n                                    validationStatusValues={this.props.Login.validationStatusValues}\r\n                                    decisionStatusOptions={this.props.Login.decisionStatusOptions}\r\n                                    decisionStatusValues={this.props.Login.decisionStatusValues}\r\n                                    actionStatus={this.props.Login.actionStatus}\r\n                                    checklistOptions={this.props.Login.checklistOptions}\r\n                                    checklistValues={this.props.Login.checklistValues}\r\n                                    roleConfig={this.props.Login.roleConfig}\r\n                                    versionConfig={this.props.Login.versionConfig}\r\n                                    operation={this.props.Login.operation}\r\n                                    nsubType={this.approvalSubTypeValue.value}\r\n                                    registrationTypeOptions={this.props.Login.optCopyRegType}\r\n                                    registrationTypeValue={this.state.registrationTypeValue}\r\n                                    registrationSubTypeOptions={this.props.Login.optCopyRegSubType}\r\n                                    registrationSubTypeValue={this.state.registrationSubTypeValue}\r\n                                    selectedVersion={this.props.Login.masterData.selectedVersion}\r\n                                    masterData={this.props.Login.masterData}\r\n\r\n                                />}\r\n                    />\r\n                    : \"\"}\r\n            </>\r\n        );\r\n    }\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteApprovalConfigVersion(deleteId));\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        let { selectedRecord, userRoleControlRights, controlMap, ApprovalsubtypeList,\r\n            RegistrationTypeList, RegistrationSubTypeList, UserRoleTemplateList, filterStatusState, validationStatusState } = this.state;\r\n        let updateState = false;\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            // const ApprovalsubtypeListMap = constructOptionList(this.props.Login.masterData.approvalsubtype || [], \"napprovalsubtypecode\", \"ssubtypename\", 'ntemplatecode','ascending', false);\r\n            // const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.registrationType || [], \"nregtypecode\", \"sregtypename\", 'ascending', 'nregtypecode', false);\r\n            // const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.registrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nregsubtypecode', false);\r\n            const ApprovalsubtypeListMap = constructOptionList(this.props.Login.masterData.approvalsubtype || [], \"napprovalsubtypecode\", \"ssubtypename\", 'ntemplatecode', 'ascending', false);\r\n            const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.registrationType || [], \"nregtypecode\", \"sregtypename\", 'nsorter', 'ascending', false);\r\n            const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.registrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'nsorter', 'ascending', false);\r\n            const UserRoleTemplateListMap = constructOptionList(this.props.Login.masterData.treeVersionTemplate || [], \"ntreeversiontempcode\", \"sversiondescription\", 'ntransactionstatus', 'descending', false);\r\n\r\n            ApprovalsubtypeList = ApprovalsubtypeListMap.get(\"OptionList\");\r\n            RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\r\n            RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\r\n            UserRoleTemplateList = UserRoleTemplateListMap.get(\"OptionList\");\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            //this.setState({  RegistrationTypeList,RegistrationSubTypeList,templateVersionOptionList});  \r\n            // RegistrationTypeList=this.props.Login.masterData.RegistrationTypeList\r\n            // RegistrationSubTypeList=this.props.Login.masterData.RegistrationSubTypeList\r\n\r\n            const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.registrationType || [], \"nregtypecode\", \"sregtypename\", 'nsorter', 'ascending', false);\r\n            const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.registrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'nsorter', 'ascending', false);\r\n            const UserRoleTemplateListMap = constructOptionList(this.props.Login.masterData.treeVersionTemplate || [], \"ntreeversiontempcode\", \"sversiondescription\", 'ntransactionstatus', 'descending', false);\r\n\r\n            RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\r\n            RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\r\n            UserRoleTemplateList = UserRoleTemplateListMap.get(\"OptionList\");\r\n            updateState = true;\r\n\r\n            // if (this.props.dataState === undefined) {\r\n            //     filterStatusState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n            //     validationStatusState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n            // }\r\n        }\r\n        if (updateState) {\r\n            this.setState({\r\n                selectedRecord, userRoleControlRights, controlMap, ApprovalsubtypeList,\r\n                RegistrationTypeList, RegistrationSubTypeList, UserRoleTemplateList, filterStatusState, validationStatusState\r\n            })\r\n        }\r\n    }\r\n    onInputOnChange = (event, role, action) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (role) {\r\n            let roleDetails = this.state.selectedRecord[role.nuserrolecode] || {}\r\n            const fieldName = event.target.name.split('_')[0] + '_' + event.target.name.split('_')[1]\r\n            let actionArray = selectedRecord[`actionStatus_${role.nuserrolecode}`] || [];\r\n            if (event.target.type === 'checkbox') {\r\n                if (action) {\r\n                    if (event.target.checked) {\r\n                        actionArray.push(action.ntranscode);\r\n                    } else {\r\n                        actionArray.splice(actionArray.indexOf(action.ntranscode), 1)\r\n                    }\r\n                    selectedRecord[`actionStatus_${role.nuserrolecode}`] = actionArray\r\n                }\r\n                roleDetails[fieldName] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO\r\n                if (fieldName === 'IDS_PARTIALAPPROVAL' && roleDetails[\"IDS_PARTIALAPPROVAL\"] && roleDetails[\"IDS_PARTIALAPPROVAL\"] === transactionStatus.YES) {\r\n                    roleDetails['IDS_SECTIONWISEAPPROVE'] = transactionStatus.NO\r\n                }\r\n                selectedRecord[role.nuserrolecode] = roleDetails\r\n            }\r\n            else {\r\n                roleDetails[fieldName] = event.target.value\r\n                selectedRecord[role.nuserrolecode] = roleDetails\r\n            }\r\n        }\r\n        else {\r\n            if (event.target.type === 'checkbox') {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n                if(selectedRecord[event.target.name]){\r\n                    if(event.target.name===\"nneedautoinnerband\"&&(selectedRecord[\"Auto Approval\"]===transactionStatus.YES || selectedRecord[\"nneedautoouterband\"]===transactionStatus.YES)){\r\n                    delete selectedRecord[\"Auto Approval\"]\r\n                    delete selectedRecord[\"nneedautoouterband\"]\r\n\r\n                }\r\n                    else if(event.target.name===\"Auto Approval\"&&  (selectedRecord[\"nneedautoinnerband\"]===transactionStatus.YES ||selectedRecord[\"nneedautoouterband\"]===transactionStatus.YES) ){\r\n                    delete selectedRecord[\"nneedautoinnerband\"]\r\n                    delete selectedRecord[\"nneedautoouterband\"]\r\n\r\n                }\r\n                else if(event.target.name===\"nneedautoouterband\"&&  (selectedRecord[\"Auto Approval\"]===transactionStatus.YES ||selectedRecord[\"nneedautoinnerband\"]===transactionStatus.YES) ){\r\n                    delete selectedRecord[\"Auto Approval\"]\r\n                    delete selectedRecord[\"nneedautoinnerband\"]                \r\n                }\r\n\r\n                }\r\n            \r\n            }\r\n            else {\r\n                if (event.target.name === 'sviewname') {\r\n                    if(event.target.value !== \"\"){\r\n                        // selectedRecord[event.target.name] =   event.target.value.replace(/[^a-z]/gi, '')\r\n                        //event.target.value =  validateCreateView(event.target.value);\r\n                       //Janakumar -> ALPD-5184 Approval configuration - In view name field ( when enter french lang 500 error is occurring ) (Both Normal & French)\r\n                        const regex = /^[a-z0-9]+$/;\r\n                        const regexNum=/^[0-9]+$/;\r\n                        const value=regex.test(event.target.value);\r\n                            if(value){  \r\n                                selectedRecord[event.target.name] = event.target.value !== \"\" ? regexNum.test(event.target.value.charAt(0))\r\n                               ?event.target.defaultValue : event.target.value : selectedRecord[event.target.name];\r\n                            }else{\r\n                                selectedRecord[event.target.name]=regexNum.test(event.target.value.charAt(0))\r\n                                ?event.target.defaultValue:event.target.value.replace(/[^a-z0-9]/g, '');\r\n                            }\r\n                        } else{\r\n                        selectedRecord[event.target.name] = event.target.value;\r\n                    }\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n\r\n            }\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onComboChange = (comboData, role, comboName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (role) {\r\n            let roleDetails = this.state.selectedRecord[role.nuserrolecode] || {}\r\n            const fieldName = comboName.split('_')[0]\r\n            let filterArray = [];\r\n            roleDetails[fieldName] = [];\r\n            if (comboData) {\r\n                selectedRecord[comboName] = comboData\r\n                if (fieldName === 'checklist') {\r\n                    selectedRecord[`checklistVersion_${role.nuserrolecode}`] = { label: comboData.item.schecklistversionname, value: comboData.item.nchecklistversioncode }\r\n                    filterArray = comboData.item.nchecklistversioncode;\r\n\r\n                } else {\r\n                    if (Array.isArray(comboData)) {\r\n                        comboData.map(item => {\r\n                            return (filterArray.push(item.value))\r\n                        })\r\n                    } else {\r\n                        filterArray = comboData.value;\r\n                    }\r\n                }\r\n                roleDetails[fieldName] = filterArray\r\n                selectedRecord[role.nuserrolecode] = roleDetails\r\n            } else {\r\n                selectedRecord[comboName] = []\r\n                filterArray = []\r\n                roleDetails[fieldName] = filterArray\r\n                selectedRecord[role.nuserrolecode] = roleDetails\r\n            }\r\n            this.setState({ selectedRecord });\r\n        } else {\r\n            selectedRecord[comboName] = comboData\r\n\r\n            if (comboName === 'regtype') {\r\n                this.props.getCopySubType(comboData, selectedRecord, this.props.Login.userInfo, this.props.Login.masterData, this.props.Login.optCopyRegType)\r\n            } else {\r\n                this.setState({ selectedRecord });\r\n            }\r\n\r\n        }\r\n    }\r\n    onFilterComboChange = (comboData, fieldName) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        let approvalSubTypeValue = this.props.Login.masterData.approvalSubTypeValue;\r\n        let registrationTypeValue = this.props.Login.masterData.registrationTypeValue;\r\n        let registrationSubTypeValue;\r\n\r\n        if (comboData) {\r\n\r\n            selectedRecord[fieldName] = comboData.value;\r\n            let inputData = {};\r\n            if (fieldName === 'napprovalsubtypecode') {\r\n\r\n                approvalSubTypeValue = comboData\r\n                inputData = { nFlag: 2, napprovalsubtypecode: comboData.value, userinfo: this.props.Login.userInfo };\r\n\r\n            } else if (fieldName === 'nregtypecode') {\r\n\r\n                registrationTypeValue = comboData\r\n                inputData = { nFlag: 3, napprovalsubtypecode: approvalSubTypeValue.value, nregtypecode: comboData.value, userinfo: this.props.Login.userInfo }\r\n\r\n            } else if (fieldName === 'nregsubtypecode') {\r\n\r\n                registrationSubTypeValue = comboData\r\n                inputData = {\r\n                    nFlag: 4, napprovalsubtypecode: approvalSubTypeValue.value,\r\n                    nregtypecode: registrationTypeValue.value,\r\n                    nregsubtypecode: comboData.value,\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n            }\r\n            if (fieldName === 'ntreeversiontempcode') {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        masterData: {\r\n                            ...this.props.Login.masterData,\r\n                            userroleTemplateValue: comboData\r\n                        }\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                const oldState = {\r\n                    approvalsubtype: this.props.Login.masterData.approvalsubtype,\r\n                    registrationtype: this.props.Login.masterData.registrationType,\r\n                    registrationsubtype: this.props.Login.masterData.registrationSubType,\r\n                    approvalSubTypeValue,\r\n                    registrationTypeValue,\r\n                    registrationSubTypeValue,\r\n                    RegistrationTypeList: this.state.RegistrationTypeList,\r\n                    RegistrationSubTypeList: this.state.RegistrationSubTypeList,\r\n                }\r\n                let inputParamData = { inputData, masterData: this.props.Login.masterData }\r\n                this.props.getFilterChange(inputParamData, oldState)\r\n            }\r\n\r\n        } else {\r\n            selectedRecord[fieldName] = \"\";\r\n            if (fieldName === 'napprovalsubtypecode') {\r\n\r\n                this.approvalSubTypeValue = []\r\n                registrationTypeValue = []\r\n                registrationSubTypeValue = []\r\n\r\n            } else if (fieldName === 'nregtypecode') {\r\n\r\n                registrationTypeValue = []\r\n                registrationSubTypeValue = []\r\n\r\n            } else {\r\n\r\n                registrationSubTypeValue = []\r\n\r\n            }\r\n\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n        // this.searchRef.current.value = \"\"\r\n\r\n    }\r\n    getApprovalConfigurationVersion = () => {\r\n        if (this.props.Login.masterData.approvalSubTypeValue) {\r\n            //this.searchRef.current.value = \"\"\r\n            let masterData = {\r\n                ...this.props.Login.masterData,\r\n                //ALPD-5195--Vignesh R(21-01-2025)-->reg sub type and approval config-- filter issue, check description\r\n                //realApprovalSubTypeValue: this.props.Login.masterData.approvalSubTypeValue ? this.props.Login.masterData.approvalSubTypeValue : -1,\r\n                //realRegistrationTypeValue: this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue : -1,\r\n               // realRegistrationSubTypeValue: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue : -1,\r\n                //realApprovalConfigCode: this.props.Login.masterData.approvalConfigCode || -1,\r\n                //realTreeVersionTemplateValue: this.props.Login.masterData.userroleTemplateValue || -1,\r\n\r\n            }\r\n            const inputData = {\r\n                napprovalsubtypecode: this.props.Login.masterData.approvalSubTypeValue ?\r\n                    this.props.Login.masterData.approvalSubTypeValue.value : -1,\r\n                napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\r\n                ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue.value,\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n            let inputParamData = { inputData, masterData, searchRef: this.searchRef }\r\n            this.props.getApprovalConfigurationVersion(inputParamData);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_APPROVALSUBTYPENOTAVAILABLE\" }))\r\n        }\r\n    }\r\n\r\n//ALPD-5195--Vignesh R(21-01-2025)-->reg sub type and approval config-- filter issue, check description\r\nonFilterSubmit = () => {\r\n    if (this.props.Login.masterData.approvalSubTypeValue) {\r\n\r\n        let check=false;\r\n\r\n        if(this.props.Login.masterData.approvalSubTypeValue.value===ApprovalSubType.TESTGROUPAPPROVAL){\r\n            if(this.props.Login.masterData.userroleTemplateValue.value===undefined){\r\n                check=true;\r\n            }\r\n\r\n        }else if(this.props.Login.masterData.approvalSubTypeValue.value===ApprovalSubType.TESTRESULTAPPROVAL){\r\n            if(this.props.Login.masterData.userroleTemplateValue.value===undefined || this.props.Login.masterData.registrationSubTypeValue.value===undefined ||\r\n                this.props.Login.masterData.registrationTypeValue.value===undefined)\r\n             {\r\n                check=true;\r\n             }\r\n        }\r\n    if(!check){\r\n\r\n        //this.searchRef.current.value = \"\"\r\n        let masterData = {\r\n            ...this.props.Login.masterData,\r\n            realApprovalSubTypeValue: this.props.Login.masterData.approvalSubTypeValue ? this.props.Login.masterData.approvalSubTypeValue : -1,\r\n            realRegistrationTypeValue: this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue : -1,\r\n           realRegistrationSubTypeValue: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue : -1,\r\n            realApprovalConfigCode: this.props.Login.masterData.approvalConfigCode || -1,\r\n            realTreeVersionTemplateValue: this.props.Login.masterData.userroleTemplateValue || -1,\r\n\r\n        }\r\n        const inputData = {\r\n            napprovalsubtypecode: this.props.Login.masterData.approvalSubTypeValue ?\r\n                this.props.Login.masterData.approvalSubTypeValue.value : -1,\r\n                napprovalconfigcode: this.props.Login.masterData.approvalConfigCode,\r\n                ntreeversiontempcode: this.props.Login.masterData.userroleTemplateValue.value,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        let inputParamData = { inputData, masterData, searchRef: this.searchRef }\r\n        this.props.getApprovalConfigurationVersion(inputParamData);\r\n    }\r\n    else {\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLINFILTER\" }))\r\n    }\r\n    } else {\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_APPROVALSUBTYPENOTAVAILABLE\" }))\r\n    }\r\n}\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    reloadData = () => {\r\n        // this.searchRef.current.value = \"\";\r\n        // const inputParam = {\r\n        //     inputData: { \"userinfo\": this.props.Login.userInfo },\r\n        //     classUrl: \"approvalconfig\",\r\n        //     methodUrl: \"ApprovalConfigFilter\",\r\n        //     userInfo: this.props.Login.userInfo,\r\n        //     displayName: \"IDS_APPROVALCONFIG\"\r\n        // };\r\n        // this.props.callService(inputParam);\r\n        this.getApprovalConfigurationVersion()\r\n    }\r\n    userRoleAccordion = (userRoleList) => {\r\n        const accordionMap = new Map();\r\n        userRoleList = sortData(userRoleList, 'ascending', 'nlevelno')\r\n        userRoleList.map((role) =>\r\n            accordionMap.set(role.napprovalconfigrolecode,\r\n                <UserRoleAccordion\r\n                    role={role}\r\n                    roleConfig={this.props.Login.masterData.roleConfig}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    controlMap={this.state.controlMap}\r\n                    userInfo={this.props.Login.userInfo}\r\n                    masterData={this.props.Login.masterData}\r\n                    deleteRecord={this.deleteRecord}\r\n                    tabDetail={this.tabDetail(role)}\r\n                    onTabOnChange={this.onTabOnChange}\r\n                    approvalSubTypeValue={this.props.Login.masterData.approvalSubTypeValue}\r\n                />)\r\n        )\r\n        return accordionMap;\r\n    }\r\n    tabDetail = () => {\r\n        const selectedRole = this.props.Login.masterData.selectedRole ? this.props.Login.masterData.selectedRole : this.props.Login.masterData.approvalconfigRoleNames && this.props.Login.masterData.approvalconfigRoleNames.length > 0 && sortData(this.props.Login.masterData.approvalconfigRoleNames, 'ascending', 'nlevelno')[0]\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_FILTERSTATUS\",\r\n            <FilterStatusTab\r\n                filterData={process(this.props.Login.masterData.roleFilters ?\r\n                    // sortData(this.props.Login.masterData.roleFilters) : [],\r\n                    // { skip: this.state.dataState.skip, take: this.state.dataState.take })}\r\n                    sortData(this.props.Login.masterData.roleFilters) : [], this.state.filterStatusState)}\r\n                setDefault={this.props.setDefault}\r\n                selectedRole={selectedRole}\r\n                napprovalsubtypecode={this.approvalSubTypeValue.value}\r\n                userInfo={this.props.Login.userInfo}\r\n                masterData={this.props.Login.masterData}\r\n                dataState={this.state.filterStatusState}\r\n                dataStateChange={(event) => this.setState({ filterStatusState: event.dataState })}\r\n                screenName=\"IDS_FILTERSTATUS\"\r\n            />\r\n        )\r\n\r\n        tabMap.set(\"IDS_VALIDATIONSTATUS\",\r\n            <ValidationStatusTab\r\n                validationStatus={process(this.props.Login.masterData.roleValidations ?\r\n                    sortData(this.props.Login.masterData.roleValidations) : [], this.state.validationStatusState)}\r\n                // sortData(this.props.Login.masterData.roleValidations) : [],\r\n                // { skip: this.state.dataState.skip, take: this.state.dataState.take })}\r\n                selectedRole={selectedRole}\r\n                napprovalsubtypecode={this.approvalSubTypeValue.value}\r\n                userInfo={this.props.Login.userInfo}\r\n                masterData={this.props.Login.masterData}\r\n                dataState={this.state.validationStatusState}\r\n                dataStateChange={(event) => this.setState({ validationStatusState: event.dataState })}\r\n                screenName=\"IDS_VALIDATIONSTATUS\"\r\n            />)\r\n            //ATE234 Janakumar ALPD-5316 Test Approval -> Decision Status there have based on sample type.\r\n        // if (this.props.Login.masterData.roleDecisions && this.props.Login.masterData.roleDecisions.length > 0) {\r\n            tabMap.set(\"IDS_DECISIONSTATUS\",\r\n                <DecisionStatusTab\r\n                    decisionData={process(this.props.Login.masterData.roleDecisions ? sortData(this.props.Login.masterData.roleDecisions) : [],\r\n                        { skip: this.state.dataState.skip, take: this.state.dataState.take })}\r\n                    setDefault={this.props.setDefault}\r\n                    selectedRole={selectedRole}\r\n                    napprovalsubtypecode={this.approvalSubTypeValue.value}\r\n                    userInfo={this.props.Login.userInfo}\r\n                    masterData={this.props.Login.masterData}\r\n                    screenName=\"IDS_DECISIONSTATUS\"\r\n                />)\r\n        // }\r\n        tabMap.set(\"IDS_ACTIONSTATUS\",\r\n            <ActionStatusTab\r\n                actionData={process(this.props.Login.masterData.roleActions ? sortData(this.props.Login.masterData.roleActions) : [],\r\n                    { skip: this.state.dataState.skip, take: this.state.dataState.take })}\r\n                setDefault={this.props.setDefault}\r\n                selectedRole={selectedRole}\r\n                napprovalsubtypecode={this.approvalSubTypeValue.value}\r\n                userInfo={this.props.Login.userInfo}\r\n                masterData={this.props.Login.masterData}\r\n                screenName=\"IDS_ACTIONSTATUS\"\r\n            />)\r\n        return tabMap;\r\n    }\r\n    onTabOnChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n}\r\nexport default connect(mapStateToProps,\r\n    {\r\n        callService, crudMaster, openModal, updateStore, getApprovalConfigVersion, getApprovalConfigEditData, copyVersion, getFilterChange\r\n        , validateEsignCredential, getCopySubType, getRoleDetails, setDefault, filterColumnData,\r\n        getApprovalConfigurationVersion, approveVersion\r\n    })\r\n    (injectIntl(ApprovalConfig));"]},"metadata":{},"sourceType":"module"}