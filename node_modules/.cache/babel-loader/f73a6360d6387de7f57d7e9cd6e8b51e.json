{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\configurationmaster\\\\Languages.jsx\";\nimport React from 'react';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { Row, Col, Button } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { callService, crudMaster, showRegTypeAddScreen, fetchById, comboService, updateStore, validateEsignCredential } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { showEsign, getControlMap, constructOptionList } from '../../components/CommonScript';\nimport Esign from '../audittrail/Esign';\nimport AddLanguageSynonym from '../../components/AddLanguages'; // import ReactTooltip from 'react-tooltip';\n\nimport { Affix } from 'rsuite';\nimport { faSync, faLanguage, faFilePdf } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Languages extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data.listofItem, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        methodUrl: \"Language\",\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onInputOnChange = (event, name, item) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        if (name == 'English') {\n          selectedRecord['sdisplayname'] = { ...selectedRecord['sdisplayname'],\n            [event.target.name]: event.target.value\n          };\n          {\n            if (item == 'sactiondisplaystatus') {\n              selectedRecord['sactiondisplaystatus'] = { ...selectedRecord['sactiondisplaystatus'],\n                [event.target.name]: event.target.value\n              };\n            } else if (item == 'salertdisplaystatus') {\n              selectedRecord['salertdisplaystatus'] = { ...selectedRecord['salertdisplaystatus'],\n                [event.target.name]: event.target.value\n              };\n            } else {\n              selectedRecord['stransdisplaystatus'] = { ...selectedRecord['stransdisplaystatus'],\n                [event.target.name]: event.target.value\n              };\n            }\n          }\n          selectedRecord['scontrolids'] = { ...selectedRecord['scontrolids'],\n            [event.target.name]: event.target.value\n          };\n          selectedRecord['approvalsubtypename'] = { ...selectedRecord['approvalsubtypename'],\n            [event.target.name]: event.target.value\n          };\n          selectedRecord['sampletypename'] = { ...selectedRecord['sampletypename'],\n            [event.target.name]: event.target.value\n          };\n          selectedRecord['stemplatetypename'] = { ...selectedRecord['stemplatetypename'],\n            [event.target.name]: event.target.value\n          };\n          selectedRecord['speriodname'] = { ...selectedRecord['speriodname'],\n            [event.target.name]: event.target.value\n          };\n          selectedRecord['sgendername'] = { ...selectedRecord['sgendername'],\n            [event.target.name]: event.target.value\n          };\n          selectedRecord['sschedulertypename'] = { ...selectedRecord['sschedulertypename'],\n            [event.target.name]: event.target.value\n          };\n          selectedRecord['tablename'] = { ...selectedRecord['tablename'],\n            [event.target.name]: event.target.value\n          };\n          selectedRecord['displayname'] = { ...selectedRecord['displayname'],\n            [event.target.name]: event.target.value\n          };\n          selectedRecord['sdefaultname'] = event.target.value == \"\" ? undefined : event.target.value;\n        } else {\n          selectedRecord['sdisplayname'] = { ...selectedRecord['sdisplayname'],\n            [event.target.name]: event.target.value\n          };\n          selectedRecord['scontrolids'] = { ...selectedRecord['scontrolids'],\n            [event.target.name]: event.target.value\n          };\n          selectedRecord['approvalsubtypename'] = { ...selectedRecord['approvalsubtypename'],\n            [event.target.name]: event.target.value\n          };\n          selectedRecord['sampletypename'] = { ...selectedRecord['sampletypename'],\n            [event.target.name]: event.target.value\n          };\n          selectedRecord['stemplatetypename'] = { ...selectedRecord['stemplatetypename'],\n            [event.target.name]: event.target.value\n          };\n          selectedRecord['speriodname'] = { ...selectedRecord['speriodname'],\n            [event.target.name]: event.target.value\n          };\n          selectedRecord['sgendername'] = { ...selectedRecord['sgendername'],\n            [event.target.name]: event.target.value\n          };\n          selectedRecord['sschedulertypename'] = { ...selectedRecord['sschedulertypename'],\n            [event.target.name]: event.target.value\n          };\n          selectedRecord['tablename'] = { ...selectedRecord['tablename'],\n            [event.target.name]: event.target.value\n          };\n          selectedRecord['displayname'] = { ...selectedRecord['displayname'],\n            [event.target.name]: event.target.value\n          };\n\n          if (item == \"sactiondisplaystatus\") {\n            selectedRecord['sactiondisplaystatus'] = { ...selectedRecord['sactiondisplaystatus'],\n              [event.target.name]: event.target.value\n            };\n          } else if (item == \"salertdisplaystatus\") {\n            selectedRecord['salertdisplaystatus'] = { ...selectedRecord['salertdisplaystatus'],\n              [event.target.name]: event.target.value\n            };\n          } else {\n            selectedRecord['stransdisplaystatus'] = { ...selectedRecord['stransdisplaystatus'],\n              [event.target.name]: event.target.value\n            };\n          }\n\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n\n      if (this.props.Login.masterData.headername == \"QueryBuilderViewsColumns\" || this.props.Login.masterData.headername == \"testmasterview\") {\n        if (fieldName === \"nmultilingualmasterscode\") {\n          this.props.comboService({\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              sdisplayname: selectedRecord.nmultilingualmasterscode.label,\n              primarykey: selectedRecord.nmultilingualmasterscode.value\n            },\n            masterData: this.props.Login.masterData,\n            userinfo: this.props.Login.userInfo,\n            sdisplayname: selectedRecord.nmultilingualmasterscode.label\n          });\n        } else {\n          this.props.comboService({\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              sdisplayname: selectedRecord.nquerybuilderviewscode.label,\n              sviewname: selectedRecord.nquerybuilderviewscode.item.sviewname,\n              primarykey: selectedRecord.nquerybuilderviewscode.value\n            },\n            masterData: this.props.Login.masterData,\n            userinfo: this.props.Login.userInfo\n          });\n        }\n      } else {\n        if (fieldName === \"nmultilingualmasterscode\") {\n          this.props.comboService({\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              sdisplayname: selectedRecord.nmultilingualmasterscode.label,\n              primarykey: selectedRecord.nmultilingualmasterscode.value\n            },\n            masterData: this.props.Login.masterData,\n            userinfo: this.props.Login.userInfo,\n            sdisplayname: selectedRecord.nmultilingualmasterscode.label\n          });\n        }\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      let selectedId = null;\n      let methodUrl = \"\";\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n\n      if (this.state.showSynonym) {\n        this.setState({\n          showSynonym: false\n        });\n        return null;\n      }\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        if (this.props.Login.masterData.headername === \"Menu\") {\n          selectedId = this.props.Login.selectedId;\n          dataState = this.state.dataState;\n          inputData[\"language\"] = {\n            \"nmenucode\": this.state.selectedRecord.nmenucode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"MenuLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Module\") {\n          selectedId = this.props.Login.selectedId;\n          dataState = this.state.dataState;\n          inputData[\"language\"] = {\n            \"nmodulecode\": this.state.selectedRecord.nmodulecode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"ModuleLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Form\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nformcode\": this.state.selectedRecord.nformcode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"FormLanguage\";\n        } else if (this.props.Login.masterData.headername === \"TransactionStatus\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ntranscode\": this.state.selectedRecord.ntranscode,\n            \"jsondata\": {\n              \"salertdisplaystatus\": this.state.selectedRecord.salertdisplaystatus,\n              \"stransdisplaystatus\": this.state.selectedRecord.stransdisplaystatus,\n              \"sactiondisplaystatus\": this.state.selectedRecord.sactiondisplaystatus\n            }\n          };\n          methodUrl = \"TransactionStatusLanguage\";\n        } else if (this.props.Login.masterData.headername === \"ControlMaster\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ncontrolcode\": this.state.selectedRecord.ncontrolcode,\n            \"jsondata\": {\n              \"scontrolids\": this.state.selectedRecord.scontrolids\n            }\n          };\n          methodUrl = \"ControlMasterLanguage\";\n        } else if (this.props.Login.masterData.headername === \"ApprovalSubType\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"napprovalsubtypecode\": this.state.selectedRecord.napprovalsubtypecode,\n            \"jsondata\": {\n              \"approvalsubtypename\": this.state.selectedRecord.approvalsubtypename\n            }\n          };\n          methodUrl = \"ApprovalSubTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"SampleType\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nsampletypecode\": this.state.selectedRecord.nsampletypecode,\n            \"jsondata\": {\n              \"sampletypename\": this.state.selectedRecord.sampletypename\n            }\n          };\n          methodUrl = \"SampleTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"TemplateType\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ntemplatetypecode\": this.state.selectedRecord.ntemplatetypecode,\n            \"jsondata\": {\n              \"stemplatetypename\": this.state.selectedRecord.stemplatetypename\n            }\n          };\n          methodUrl = \"TemplateTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Period\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nperiodcode\": this.state.selectedRecord.nperiodcode,\n            \"jsondata\": {\n              \"speriodname\": this.state.selectedRecord.speriodname\n            }\n          };\n          methodUrl = \"PeriodLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Gender\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ngendercode\": this.state.selectedRecord.ngendercode,\n            \"jsondata\": {\n              \"sgendername\": this.state.selectedRecord.sgendername\n            }\n          };\n          methodUrl = \"GenderLanguage\";\n        } else if (this.props.Login.masterData.headername === \"Grade\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"ngradecode\": this.state.selectedRecord.ngradecode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"GradeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"SchedulerType\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nschedulertypecode\": this.state.selectedRecord.nschedulertypecode,\n            \"jsondata\": {\n              \"sschedulertypename\": this.state.selectedRecord.sschedulertypename\n            }\n          };\n          methodUrl = \"SchedulerTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"DynamicRecordDetail\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nrecorddetailtypecode\": this.state.selectedRecord.nrecorddetailtypecode,\n            \"jsondata\": {\n              \"sdisplayname\": this.state.selectedRecord.sdisplayname\n            }\n          };\n          methodUrl = \"DynamicRecordDetailTypeLanguage\";\n        } else if (this.props.Login.masterData.headername === \"QueryBuilderTables\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nquerybuildertablecode\": this.state.selectedRecord.nquerybuildertablecode,\n            \"jsondata\": {\n              \"tablename\": this.state.selectedRecord.tablename\n            }\n          };\n          methodUrl = \"QueryBuilderTablesLanguage\";\n        } else if (this.props.Login.masterData.headername === \"QueryBuilderViews\") {\n          dataState = this.state.dataState;\n          selectedId = this.props.Login.selectedId;\n          inputData[\"language\"] = {\n            \"nquerybuilderviewscode\": this.state.selectedRecord.nquerybuilderviewscode,\n            \"jsondata\": {\n              \"displayname\": this.state.selectedRecord.displayname\n            }\n          };\n          methodUrl = \"QueryBuilderViewsLanguage\";\n        } else {// nflag = 15\n          // dataState = this.state.dataState\n          // selectedId = this.props.Login.selectedId;\n          // inputData[\"language\"] = {\n          //     \"nflag\": nflag,\n          //     \"nmultilingualmasterscode\": this.state.selectedRecord.nmultilingualmasterscode,\n          //     \"jsondata\": {\n          //         \"sdisplayname\": this.state.selectedRecord.sdisplayname\n          //     }\n          // }\n        }\n      }\n\n      const inputParam = {\n        methodUrl: methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState,\n        selectedId\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            operation: this.props.Login.operation,\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.handleClose = this.handleClose.bind(this);\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      dataResult: [],\n      dataState: _dataState,\n      mandatoryFields: []\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.mandatoryFields = [{\n        \"idsName\": \"IDS_DEFAULTLANGUAGE\",\n        \"dataField\": this.props.Login.languageList[0].value == \"en-US\" ? \"sdefaultname\" : \" \",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"text\"\n      }];\n\n      if (this.props.Login.masterData.headername == \"Menu\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_MENUID\",\n          \"dataField\": \"smenuname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_MENUNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nmenucode\";\n      } else if (this.props.Login.masterData.headername == \"Module\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_MODULEID\",\n          \"dataField\": \"smodulename\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_MODULENAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nmodulecode\";\n      } else if (this.props.Login.masterData.headername == \"Forms\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_FORMID\",\n          \"dataField\": \"sformname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_FORMNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nformcode\";\n      } else if (this.props.Login.masterData.headername == \"TransactionStatus\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_TRANSACTIONSTATUSID\",\n          \"dataField\": \"stransstatus\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_ALERTDISPLAYSTATUS\",\n          \"dataField\": \"salertdisplaystatus\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_TRANSDISPLAYSTATUS\",\n          \"dataField\": \"stransdisplaystatus\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_ACTIONDISPLAYSTATUS\",\n          \"dataField\": \"sactiondisplaystatus\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ntranscode\";\n      } else if (this.props.Login.masterData.headername == \"ControlMaster\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_CONTROLMASTERID\",\n          \"dataField\": \"scontrolname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_CONTROLMASTER\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ncontrolcode\";\n      } else if (this.props.Login.masterData.headername == \"ApprovalSubType\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_APPROVALSUBTYPEID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_APPROVALSUBTYPENAME\",\n          \"dataField\": \"sapprovalsubtypename\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"napprovalsubtypecode\";\n      } else if (this.props.Login.masterData.headername == \"SampleType\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_SAMPLETYPEID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_SAMPLETYPENAME\",\n          \"dataField\": \"ssampletypename\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nsampletypecode\";\n      } else if (this.props.Login.masterData.headername == \"TemplateType\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_TEMPLATETYPEID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_TEMPLATETYPENAME\",\n          \"dataField\": \"stemplatetypename\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ntemplatetypecode\";\n      } else if (this.props.Login.masterData.headername == \"Period\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_PERIODID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_PERIODNAME\",\n          \"dataField\": \"speriodname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nperiodcode\";\n      } else if (this.props.Login.masterData.headername == \"Gender\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_GENDERID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_GENDERNAME\",\n          \"dataField\": \"sgendername\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ngendercode\";\n      } else if (this.props.Login.masterData.headername == \"Grade\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_GRADEID\",\n          \"dataField\": \"sgradename\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_GRADENAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"ngradecode\";\n      } else if (this.props.Login.masterData.headername == \"SchedulerType\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_SCHEDULERTYPEID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_SCHEDULERTYPENAME\",\n          \"dataField\": \"sschedulertypename\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nschedulertypecode\";\n      } else if (this.props.Login.masterData.headername == \"DynamicRecordDetail\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_DYNAMICRECORDDETAILSTYPEID\",\n          \"dataField\": \"sdefaultname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_DYNAMICRECORDDETAILSTYPENAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nrecorddetailtypecode\";\n      } else if (this.props.Login.masterData.headername == \"SqlQueryBuilder\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_SQLQUERYBUILDERID\",\n          \"dataField\": \"stablename\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_SQLQUERYBUILDERNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nquerybuildertablecode\";\n      } else if (this.props.Login.masterData.headername == \"ViewsQueryBuilder\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_VIEWSQUERYBUILDERID\",\n          \"dataField\": \"sviewname\",\n          \"width\": \"250px\"\n        }, {\n          \"idsName\": \"IDS_VIEWSQUERYBUILDERNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n        primaryKeyField = \"nquerybuilderviewscode\";\n      } else if (this.props.Login.masterData.headername == \"testmasterview\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_QUERYBUILDERVIEWSCOLUMNSID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }];\n      } else if (this.props.Login.masterData.headername == \"QueryBuilderViewsColumns\") {\n        this.extractedColumnList = [{\n          \"idsName\": \"IDS_QUERYBUILDERVIEWSCOLUMNSID\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"250px\"\n        }]; //  // this.props.Login.masterData.listofItem.map((item)=>{ return(item.jsondata.map((item1)=>item1.displayname,\n        //     // {\"idsName\": \"IDS_QUERYBUILDERVIEWSCOLUMNSNAME\", \"dataField\": \"sdefaultname\", \"width\": \"250px\" }))})]\n        //     // this.extractedColumnList \n        //     // primaryKeyField = \"nquerybuilderviewscode\";              \n      } else {// this.extractedColumnList = [\n        //     { \"idsName\": \"IDS_MULTILINGUALID\", \"dataField\": \"sdefaultname\", \"width\": \"250px\" },\n        //     { \"idsName\": \"IDS_MULTILINGUALNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\n        // ]\n        // primaryKeyField = \"nmultilingualmasterscode\";\n      }\n    }\n\n    const languagesId = this.props.Login.inputParam && this.state.controlMap.has(\"UpdateLanguage\") && this.state.controlMap.get('UpdateLanguage').ncontrolcode;\n    const languagesParam = {\n      screenName: \"Language\",\n      operation: \"update\",\n      primaryKeyField: primaryKeyField,\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: languagesId\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Affix, {\n      top: 85,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nmultilingualmasterscode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_MULTILINGUALMASTERS\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.multilingualmasters || [],\n      value: this.props.Login.masterData && this.props.Login.masterData.selectedmultilingualmasters && {\n        value: this.props.Login.masterData.selectedmultilingualmasters.nmultilingualmasterscode ? this.props.Login.masterData.selectedmultilingualmasters.nmultilingualmasterscode : this.state.selectedRecord.nmultilingualmasterscode.value,\n        label: this.props.Login.masterData.selectedmultilingualmasters.sdisplayname ? this.props.Login.masterData.selectedmultilingualmasters.sdisplayname : this.state.selectedRecord.nmultilingualmasterscode.label\n      },\n      isMandatory: false,\n      isMulti: false,\n      isClearable: false,\n      isSearchable: true,\n      isDisabled: false,\n      closeMenuOnSelect: true,\n      className: \"mb-2\",\n      onChange: event => this.onComboChange(event, 'nmultilingualmasterscode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 57\n      }\n    })), this.props.Login.masterData.headername == \"QueryBuilderViewsColumns\" || this.props.Login.masterData.headername == \"testmasterview\" ? /*#__PURE__*/React.createElement(Col, {\n      md: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nquerybuilderviewscode\" //  formLabel={this.props.intl.formatMessage({ id: \"IDS_LIMSSTRUCTURE\" })}\n      ,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.QueryBuilderViewsName || [],\n      value: this.props.Login.masterData && this.props.Login.masterData.selectedQueryBuilderViewsName && {\n        value: this.props.Login.masterData.selectedQueryBuilderViewsName.nquerybuilderviewscode ? this.props.Login.masterData.selectedQueryBuilderViewsName.nquerybuilderviewscode : this.state.selectedRecord.nquerybuilderviewscode.value,\n        label: this.props.Login.masterData.selectedQueryBuilderViewsName.sdisplayname ? this.props.Login.masterData.selectedQueryBuilderViewsName.sdisplayname : this.state.selectedRecord.nquerybuilderviewscode.label\n      },\n      isMandatory: false,\n      isMulti: false,\n      isClearable: false,\n      isSearchable: true,\n      isDisabled: false,\n      closeMenuOnSelect: true,\n      className: \"mb-2\",\n      onChange: event => this.onComboChange(event, 'nquerybuilderviewscode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 53\n      }\n    })) : \"\")))))), this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data.listofItem,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      languagesRecord: this.props.fetchById,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      languagesParam: languagesParam,\n      methodUrl: \"Language\",\n      pageable: true,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      isDownloadPDFRequired: true,\n      isDownloadExcelRequired: true,\n      gridHeight: '465px',\n      scrollable: \"scrollable\",\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: this.props.Login.inputParam.displayName,\n      closeModal: this.handleClose,\n      show: this.props.Login.openModal,\n      showSaveContinue: false,\n      hideSave: this.state.showSynonym,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord,\n      mandatoryFields: this.mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation ? this.props.Login.operation : '',\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddLanguageSynonym, {\n        selectedFieldRecord: this.props.Login.masterData.headername == \"QueryBuilderViewsColumns\" ? this.props.Login.selectedRecord.sjsondata : this.state.selectedRecord,\n        needheader: this.props.Login.masterData.selectedmultilingualmasters || this.props.Login.masterData.needHeader,\n        onInputOnChange: this.onInputOnChange,\n        selectedJsondata: this.props.Login.masterData.headername == \"QueryBuilderViewsColumns\" ? this.props.Login.selectedRecord.sjsondata : this.props.Login.selectedRecord && this.props.Login.selectedRecord.jsondata,\n        languages: this.props.Login.languageList || [],\n        fieldName: this.props.Login.selectedRecord.fieldName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        const multilingualmastersMap = constructOptionList(this.props.Login.masterData.multilingualmasters || [], \"nmultilingualmasterscode\", \"sdisplayname\", undefined, undefined, true);\n        const multilingualmasters = multilingualmastersMap.get(\"OptionList\");\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          multilingualmasters: multilingualmasters,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData.listofItem ? this.props.Login.masterData.listofItem : [], this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        const FilterQueryMap = constructOptionList(this.props.Login.masterData.QueryBuilderViewsName || [], \"nquerybuilderviewscode\", \"sdisplayname\", undefined, undefined, true);\n        const QueryBuilderViewsName = FilterQueryMap.get(\"OptionList\");\n        this.setState({\n          data: this.props.Login.masterData,\n          QueryBuilderViewsName: QueryBuilderViewsName,\n          dataResult: process(this.props.Login.masterData.listofItem ? this.props.Login.masterData.listofItem : [], dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n  // onIconchange = (event , name) => {\n  //     const selectedRecord = this.state.selectedRecord || {};\n  //     if (name == \"Menu\") {\n  //         this.props.iconChangeService({\n  //             inputData: {\n  //                 nflag:1,\n  //                 userinfo: this.props.Login.userInfo,\n  //             },\n  //             masterData: this.props.Login.masterData,\n  //             url: \"language/getComboService\"\n  //         });\n  //     }\n  //     else if (name== \"Module\") {\n  //         this.props.iconChangeService({\n  //             inputData: {\n  //                 nflag: 2,\n  //                 userinfo: this.props.Login.userInfo,\n  //             },\n  //             masterData: this.props.Login.masterData,\n  //             url: \"language/getComboService\"\n  //         });\n  //     }\n  //     else if (name == \"Form\") {\n  //         this.props.iconChangeService({\n  //             inputData: {\n  //                 nflag: 3,\n  //                 userinfo: this.props.Login.userInfo,\n  //             },\n  //             masterData: this.props.Login.masterData,\n  //             url: \"language/getComboService\"\n  //         });\n  //     }\n  //     else {\n  //         this.setState({ selectedRecord });\n  //     }\n  // }\n  handleClose() {\n    let loadEsign = this.props.Login.loadEsign;\n    let openModal = this.props.Login.openModal;\n    let selectedRecord = this.props.Login.selectedRecord;\n    let selectedId = this.props.Login.selectedId;\n\n    if (this.state.showSynonym) {\n      this.setState({\n        showSynonym: false\n      });\n      return null;\n    }\n\n    if (this.props.Login.loadEsign) {\n      loadEsign = false;\n      openModal = false;\n    } else {\n      openModal = false;\n      selectedRecord = {};\n      selectedId = null;\n    }\n\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        openModal,\n        loadEsign,\n        selectedRecord,\n        selectedId\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  showRegTypeAddScreen,\n  fetchById,\n  comboService,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(Languages));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/configurationmaster/Languages.jsx"],"names":["React","ListWrapper","Row","Col","Button","toast","process","connect","injectIntl","callService","crudMaster","showRegTypeAddScreen","fetchById","comboService","updateStore","validateEsignCredential","DEFAULT_RETURN","DataGrid","FormSelectSearch","SlideOutModal","showEsign","getControlMap","constructOptionList","Esign","AddLanguageSynonym","Affix","faSync","faLanguage","faFilePdf","FontAwesomeIcon","mapStateToProps","state","Login","Languages","Component","constructor","props","dataStateChange","event","setState","dataResult","data","listofItem","dataState","reloadData","inputParam","inputData","userinfo","userInfo","methodUrl","classUrl","displayName","validateEsign","sreason","selectedRecord","password","screenData","onInputOnChange","name","item","target","type","checked","value","undefined","onComboChange","comboData","fieldName","masterData","headername","sdisplayname","nmultilingualmasterscode","label","primarykey","nquerybuilderviewscode","sviewname","onSaveClick","saveType","formRef","selectedId","showSynonym","operation","nmenucode","nmodulecode","nformcode","ntranscode","salertdisplaystatus","stransdisplaystatus","sactiondisplaystatus","ncontrolcode","scontrolids","napprovalsubtypecode","approvalsubtypename","nsampletypecode","sampletypename","ntemplatetypecode","stemplatetypename","nperiodcode","speriodname","ngendercode","sgendername","ngradecode","nschedulertypecode","sschedulertypename","nrecorddetailtypecode","nquerybuildertablecode","tablename","displayname","userRoleControlRights","updateInfo","typeName","loadEsign","openModal","screenName","createRef","extractedColumnList","handleClose","bind","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","mandatoryFields","getDerivedStateFromProps","warn","render","primaryKeyField","languageList","languagesId","has","get","languagesParam","ncontrolCode","intl","formatMessage","id","multilingualmasters","selectedmultilingualmasters","QueryBuilderViewsName","selectedQueryBuilderViewsName","sjsondata","needHeader","jsondata","componentDidUpdate","previousProps","Object","values","map","push","multilingualmastersMap","FilterQueryMap"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { ListWrapper } from '../../components/client-group.styles'\r\nimport { Row, Col, Button } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { callService, crudMaster, showRegTypeAddScreen, fetchById, comboService, updateStore, validateEsignCredential } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { showEsign, getControlMap, constructOptionList } from '../../components/CommonScript';\r\nimport Esign from '../audittrail/Esign';\r\nimport AddLanguageSynonym from '../../components/AddLanguages';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { Affix } from 'rsuite';\r\nimport { faSync, faLanguage, faFilePdf } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Languages extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.handleClose = this.handleClose.bind(this);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {}, userRoleControlRights: [], controlMap: new Map(),\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            mandatoryFields: []\r\n            \r\n        };\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data.listofItem, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            methodUrl: \"Language\",\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n        if (this.props.Login.inputParam !== undefined) {\r\n            this.mandatoryFields = [\r\n                { \"idsName\": \"IDS_DEFAULTLANGUAGE\", \"dataField\": this.props.Login.languageList[0].value == \"en-US\" ? \"sdefaultname\" : \" \", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"text\" }\r\n            ]\r\n            if (this.props.Login.masterData.headername == \"Menu\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_MENUID\", \"dataField\": \"smenuname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_MENUNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nmenucode\";\r\n            } else if (this.props.Login.masterData.headername == \"Module\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_MODULEID\", \"dataField\": \"smodulename\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_MODULENAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                ]\r\n                primaryKeyField = \"nmodulecode\";\r\n            } else if (this.props.Login.masterData.headername  == \"Forms\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_FORMID\", \"dataField\": \"sformname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_FORMNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                ]\r\n                primaryKeyField = \"nformcode\";\r\n            } else if (this.props.Login.masterData.headername  == \"TransactionStatus\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_TRANSACTIONSTATUSID\", \"dataField\": \"stransstatus\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_ALERTDISPLAYSTATUS\", \"dataField\": \"salertdisplaystatus\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_TRANSDISPLAYSTATUS\", \"dataField\": \"stransdisplaystatus\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_ACTIONDISPLAYSTATUS\", \"dataField\": \"sactiondisplaystatus\", \"width\": \"250px\" },\r\n                ]\r\n                primaryKeyField = \"ntranscode\";\r\n            } else if (this.props.Login.masterData.headername  == \"ControlMaster\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_CONTROLMASTERID\", \"dataField\": \"scontrolname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_CONTROLMASTER\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                ]\r\n                primaryKeyField = \"ncontrolcode\";\r\n            } else if (this.props.Login.masterData.headername == \"ApprovalSubType\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_APPROVALSUBTYPEID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_APPROVALSUBTYPENAME\", \"dataField\": \"sapprovalsubtypename\", \"width\": \"250px\" },\r\n                ]\r\n                primaryKeyField = \"napprovalsubtypecode\";\r\n            } else if (this.props.Login.masterData.headername== \"SampleType\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_SAMPLETYPEID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_SAMPLETYPENAME\", \"dataField\": \"ssampletypename\", \"width\": \"250px\" },\r\n                ]\r\n                primaryKeyField = \"nsampletypecode\";\r\n            } else if (this.props.Login.masterData.headername == \"TemplateType\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_TEMPLATETYPEID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_TEMPLATETYPENAME\", \"dataField\": \"stemplatetypename\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"ntemplatetypecode\";\r\n            } else if (this.props.Login.masterData.headername== \"Period\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_PERIODID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_PERIODNAME\", \"dataField\": \"speriodname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nperiodcode\";\r\n            } else if (this.props.Login.masterData.headername == \"Gender\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_GENDERID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_GENDERNAME\", \"dataField\": \"sgendername\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"ngendercode\";\r\n            } else if (this.props.Login.masterData.headername == \"Grade\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_GRADEID\", \"dataField\": \"sgradename\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_GRADENAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"ngradecode\";\r\n            } else if (this.props.Login.masterData.headername == \"SchedulerType\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_SCHEDULERTYPEID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_SCHEDULERTYPENAME\", \"dataField\": \"sschedulertypename\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nschedulertypecode\";\r\n            } else if (this.props.Login.masterData.headername == \"DynamicRecordDetail\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_DYNAMICRECORDDETAILSTYPEID\", \"dataField\": \"sdefaultname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_DYNAMICRECORDDETAILSTYPENAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nrecorddetailtypecode\";\r\n            }else if (this.props.Login.masterData.headername == \"SqlQueryBuilder\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_SQLQUERYBUILDERID\", \"dataField\": \"stablename\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_SQLQUERYBUILDERNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nquerybuildertablecode\";\r\n            }else if (this.props.Login.masterData.headername == \"ViewsQueryBuilder\") {\r\n                this.extractedColumnList = [\r\n                    { \"idsName\": \"IDS_VIEWSQUERYBUILDERID\", \"dataField\": \"sviewname\", \"width\": \"250px\" },\r\n                    { \"idsName\": \"IDS_VIEWSQUERYBUILDERNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                ]\r\n                primaryKeyField = \"nquerybuilderviewscode\";\r\n            }\r\n            else if (this.props.Login.masterData.headername == \"testmasterview\") {\r\n                this.extractedColumnList =  [ { \"idsName\": \"IDS_QUERYBUILDERVIEWSCOLUMNSID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" } ]\r\n            \r\n        }\r\n             else if (this.props.Login.masterData.headername == \"QueryBuilderViewsColumns\") {\r\n                this.extractedColumnList =  [ { \"idsName\": \"IDS_QUERYBUILDERVIEWSCOLUMNSID\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" } ]\r\n            //  // this.props.Login.masterData.listofItem.map((item)=>{ return(item.jsondata.map((item1)=>item1.displayname,\r\n            //     // {\"idsName\": \"IDS_QUERYBUILDERVIEWSCOLUMNSNAME\", \"dataField\": \"sdefaultname\", \"width\": \"250px\" }))})]\r\n            //     // this.extractedColumnList \r\n            //     // primaryKeyField = \"nquerybuilderviewscode\";              \r\n             } \r\n            else {\r\n                // this.extractedColumnList = [\r\n                //     { \"idsName\": \"IDS_MULTILINGUALID\", \"dataField\": \"sdefaultname\", \"width\": \"250px\" },\r\n                //     { \"idsName\": \"IDS_MULTILINGUALNAME\", \"dataField\": \"sdisplayname\", \"width\": \"250px\" }\r\n                // ]\r\n                // primaryKeyField = \"nmultilingualmasterscode\";\r\n            }\r\n        }\r\n\r\n        const languagesId =this.props.Login.inputParam && this.state.controlMap.has(\"UpdateLanguage\")\r\n            && this.state.controlMap.get('UpdateLanguage').ncontrolcode;\r\n        const languagesParam = {\r\n            screenName: \"Language\", operation: \"update\", primaryKeyField: primaryKeyField,\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, ncontrolCode: languagesId\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                            <Row noGutters>\r\n                                <Col md={5}>\r\n                                    <Affix top={85}>\r\n                                        <Row>\r\n                                            <Col md={12}>\r\n                                                <Row>\r\n                                                    <Col md={5}>\r\n                                                        {/* <div gridHeight={'255px'}>\r\n                                                     <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                         data-tip={this.props.intl.formatMessage({ id: \"IDS_MENU\" })}\r\n                                                         data-for=\"tooltip-grid-wrap\"\r\n                                                         onClick={(event) => this.onIconchange(event,\"Menu\"  )}>\r\n                                                         <FontAwesomeIcon icon={faSync} />\r\n                                                     </Button>&nbsp;&nbsp;\r\n                                                     <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                          data-tip={this.props.intl.formatMessage({ id: \"IDS_MODULE\" })}\r\n                                                          data-for=\"tooltip-grid-wrap\"\r\n                                                         onClick={(event) => this.onIconchange(event,\"Module\")}>\r\n                                                         <FontAwesomeIcon icon={faLanguage} />\r\n                                                     </Button>&nbsp;&nbsp;\r\n                                                     <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                          data-tip={this.props.intl.formatMessage({ id: \"IDS_FORMS\" })}\r\n                                                          data-for=\"tooltip-grid-wrap\"\r\n                                                         onClick={(event) => this.onIconchange(event,\"Form\")}>\r\n                                                         <FontAwesomeIcon icon={faFilePdf} />\r\n                                                     </Button>\r\n                                                     </div> */}\r\n                                                        <FormSelectSearch\r\n                                                            name={\"nmultilingualmasterscode\"}\r\n                                                            formLabel={this.props.intl.formatMessage({ id: \"IDS_MULTILINGUALMASTERS\" })}\r\n                                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                            options={this.state.multilingualmasters || []}\r\n                                                            value={this.props.Login.masterData && this.props.Login.masterData.selectedmultilingualmasters\r\n                                                                && {\r\n                                                                value:\r\n                                                                    this.props.Login.masterData.selectedmultilingualmasters.nmultilingualmasterscode ? this.props.Login.masterData.selectedmultilingualmasters.nmultilingualmasterscode :\r\n                                                                        this.state.selectedRecord.nmultilingualmasterscode.value,\r\n                                                                label: this.props.Login.masterData.selectedmultilingualmasters.sdisplayname ? this.props.Login.masterData.selectedmultilingualmasters.sdisplayname :\r\n                                                                    this.state.selectedRecord.nmultilingualmasterscode.label\r\n                                                            }}\r\n                                                            isMandatory={false}\r\n                                                            isMulti={false}\r\n                                                            isClearable={false}\r\n                                                            isSearchable={true}\r\n                                                            isDisabled={false}\r\n                                                            closeMenuOnSelect={true}\r\n                                                            className=\"mb-2\"\r\n                                                            onChange={(event) => this.onComboChange(event, 'nmultilingualmasterscode')}\r\n                                                        />\r\n                                                    </Col>\r\n                                                    {this.props.Login.masterData.headername == \"QueryBuilderViewsColumns\" || this.props.Login.masterData.headername == \"testmasterview\" ?\r\n                                                    <Col md={5}>\r\n                                                    <FormSelectSearch\r\n                                                            name={\"nquerybuilderviewscode\"}\r\n                                                          //  formLabel={this.props.intl.formatMessage({ id: \"IDS_LIMSSTRUCTURE\" })}\r\n                                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                            options={this.state.QueryBuilderViewsName || []}\r\n                                                            value={this.props.Login.masterData && this.props.Login.masterData.selectedQueryBuilderViewsName\r\n                                                                && {\r\n                                                                value:\r\n                                                                    this.props.Login.masterData.selectedQueryBuilderViewsName.nquerybuilderviewscode ? this.props.Login.masterData.selectedQueryBuilderViewsName.nquerybuilderviewscode :\r\n                                                                        this.state.selectedRecord.nquerybuilderviewscode.value,\r\n                                                                label: this.props.Login.masterData.selectedQueryBuilderViewsName.sdisplayname ? this.props.Login.masterData.selectedQueryBuilderViewsName.sdisplayname :\r\n                                                                    this.state.selectedRecord.nquerybuilderviewscode.label\r\n                                                            }}\r\n                                                            isMandatory={false}\r\n                                                            isMulti={false}\r\n                                                            isClearable={false}\r\n                                                            isSearchable={true}\r\n                                                            isDisabled={false}\r\n                                                            closeMenuOnSelect={true}\r\n                                                            className=\"mb-2\"\r\n                                                            onChange={(event) => this.onComboChange(event, 'nquerybuilderviewscode')}\r\n                                                        />\r\n                                                    </Col>:\"\"}\r\n                                                </Row>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Affix>\r\n                                </Col>\r\n                            </Row>\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data.listofItem}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    languagesRecord={this.props.fetchById}\r\n                                    reloadData={this.reloadData}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    languagesParam={languagesParam}\r\n                                    methodUrl=\"Language\"\r\n                                    pageable={true}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    isDownloadPDFRequired={true}\r\n                                    isDownloadExcelRequired={true}\r\n                                    gridHeight={'465px'}\r\n                                    scrollable={\"scrollable\"}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        onSaveClick={this.onSaveClick}\r\n                        operation={this.props.Login.operation}\r\n                        screenName={this.props.Login.inputParam.displayName}\r\n                        closeModal={this.handleClose}\r\n                        show={this.props.Login.openModal}\r\n                        showSaveContinue={false}\r\n                        hideSave={this.state.showSynonym}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord}\r\n                        mandatoryFields={this.mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation ? this.props.Login.operation : ''}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            <AddLanguageSynonym\r\n                                selectedFieldRecord={this.props.Login.masterData.headername==\"QueryBuilderViewsColumns\"?this.props.Login.selectedRecord.sjsondata:this.state.selectedRecord}\r\n                                needheader={(this.props.Login.masterData.selectedmultilingualmasters || this.props.Login.masterData.needHeader)}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                selectedJsondata={this.props.Login.masterData.headername==\"QueryBuilderViewsColumns\"?this.props.Login.selectedRecord.sjsondata:(this.props.Login.selectedRecord && this.props.Login.selectedRecord.jsondata)}\r\n                                languages={this.props.Login.languageList || []}\r\n                                fieldName={this.props.Login.selectedRecord.fieldName}\r\n                            />\r\n                        } />\r\n                    : \"\"}\r\n            </>\r\n        );\r\n    }\r\n    \r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                const multilingualmastersMap = constructOptionList(this.props.Login.masterData.multilingualmasters || [], \"nmultilingualmasterscode\",\r\n                    \"sdisplayname\", undefined, undefined, true);\r\n                const multilingualmasters = multilingualmastersMap.get(\"OptionList\");\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, multilingualmasters: multilingualmasters,data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData.listofItem ? this.props.Login.masterData.listofItem : [], this.state.dataState)\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n                const FilterQueryMap = constructOptionList(this.props.Login.masterData.QueryBuilderViewsName || [], \"nquerybuilderviewscode\",\r\n                    \"sdisplayname\", undefined, undefined, true);\r\n                const QueryBuilderViewsName = FilterQueryMap.get(\"OptionList\");\r\n                this.setState({\r\n                    data: this.props.Login.masterData, QueryBuilderViewsName:QueryBuilderViewsName,\r\n                    dataResult: process(this.props.Login.masterData.listofItem ? this.props.Login.masterData.listofItem : [], dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        }\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event, name, item) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            if (name == 'English') {\r\n                selectedRecord['sdisplayname'] = { ...selectedRecord['sdisplayname'], [event.target.name]: event.target.value }\r\n\r\n                {\r\n                    if (item == 'sactiondisplaystatus') {\r\n                        selectedRecord['sactiondisplaystatus'] = { ...selectedRecord['sactiondisplaystatus'], [event.target.name]: event.target.value };\r\n                    } else if (item == 'salertdisplaystatus') {\r\n                        selectedRecord['salertdisplaystatus'] = { ...selectedRecord['salertdisplaystatus'], [event.target.name]: event.target.value };\r\n                    } else {\r\n                        selectedRecord['stransdisplaystatus'] = { ...selectedRecord['stransdisplaystatus'], [event.target.name]: event.target.value };\r\n                    }\r\n                }\r\n                selectedRecord['scontrolids'] = { ...selectedRecord['scontrolids'], [event.target.name]: event.target.value };\r\n                selectedRecord['approvalsubtypename'] = { ...selectedRecord['approvalsubtypename'], [event.target.name]: event.target.value };\r\n                selectedRecord['sampletypename'] = { ...selectedRecord['sampletypename'], [event.target.name]: event.target.value };\r\n                selectedRecord['stemplatetypename'] = { ...selectedRecord['stemplatetypename'], [event.target.name]: event.target.value };\r\n                selectedRecord['speriodname'] = { ...selectedRecord['speriodname'], [event.target.name]: event.target.value };\r\n                selectedRecord['sgendername'] = { ...selectedRecord['sgendername'], [event.target.name]: event.target.value };\r\n                selectedRecord['sschedulertypename'] = { ...selectedRecord['sschedulertypename'], [event.target.name]: event.target.value };\r\n                selectedRecord['tablename'] = { ...selectedRecord['tablename'], [event.target.name]: event.target.value };\r\n                selectedRecord['displayname'] = { ...selectedRecord['displayname'], [event.target.name]: event.target.value };\r\n                selectedRecord['sdefaultname'] = event.target.value == \"\" ? undefined : event.target.value\r\n            }\r\n            else {\r\n                selectedRecord['sdisplayname'] = { ...selectedRecord['sdisplayname'], [event.target.name]: event.target.value }\r\n                selectedRecord['scontrolids'] = { ...selectedRecord['scontrolids'], [event.target.name]: event.target.value };\r\n                selectedRecord['approvalsubtypename'] = { ...selectedRecord['approvalsubtypename'], [event.target.name]: event.target.value };\r\n                selectedRecord['sampletypename'] = { ...selectedRecord['sampletypename'], [event.target.name]: event.target.value };\r\n                selectedRecord['stemplatetypename'] = { ...selectedRecord['stemplatetypename'], [event.target.name]: event.target.value };\r\n                selectedRecord['speriodname'] = { ...selectedRecord['speriodname'], [event.target.name]: event.target.value };\r\n                selectedRecord['sgendername'] = { ...selectedRecord['sgendername'], [event.target.name]: event.target.value };\r\n                selectedRecord['sschedulertypename'] = { ...selectedRecord['sschedulertypename'], [event.target.name]: event.target.value };\r\n                selectedRecord['tablename'] = { ...selectedRecord['tablename'], [event.target.name]: event.target.value };\r\n                selectedRecord['displayname'] = { ...selectedRecord['displayname'], [event.target.name]: event.target.value };\r\n                if (item == \"sactiondisplaystatus\") {\r\n                    selectedRecord['sactiondisplaystatus'] = { ...selectedRecord['sactiondisplaystatus'], [event.target.name]: event.target.value };\r\n                } else if (item == \"salertdisplaystatus\") {\r\n                    selectedRecord['salertdisplaystatus'] = { ...selectedRecord['salertdisplaystatus'], [event.target.name]: event.target.value }\r\n                } else {\r\n                    selectedRecord['stransdisplaystatus'] = { ...selectedRecord['stransdisplaystatus'], [event.target.name]: event.target.value }\r\n                }\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        if(this.props.Login.masterData.headername == \"QueryBuilderViewsColumns\"||this.props.Login.masterData.headername == \"testmasterview\") {\r\n        if (fieldName === \"nmultilingualmasterscode\") {\r\n            this.props.comboService({\r\n                inputData: {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    sdisplayname: selectedRecord.nmultilingualmasterscode.label,\r\n                    primarykey: selectedRecord.nmultilingualmasterscode.value\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,  \r\n                 sdisplayname: selectedRecord.nmultilingualmasterscode.label,\r\n                \r\n            });\r\n        }else{\r\n            this.props.comboService({\r\n                inputData: {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    sdisplayname: selectedRecord.nquerybuilderviewscode.label,\r\n                    sviewname:selectedRecord.nquerybuilderviewscode.item.sviewname,\r\n                    primarykey: selectedRecord.nquerybuilderviewscode.value\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,  \r\n                \r\n            });\r\n        }\r\n    }else{\r\n        if (fieldName === \"nmultilingualmasterscode\") {\r\n            this.props.comboService({\r\n                inputData: {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    sdisplayname: selectedRecord.nmultilingualmasterscode.label,\r\n                    primarykey: selectedRecord.nmultilingualmasterscode.value\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,  \r\n                 sdisplayname: selectedRecord.nmultilingualmasterscode.label,\r\n                \r\n            });\r\n        }\r\n    }\r\n    }\r\n\r\n    // onIconchange = (event , name) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     if (name == \"Menu\") {\r\n    //         this.props.iconChangeService({\r\n    //             inputData: {\r\n    //                 nflag:1,\r\n    //                 userinfo: this.props.Login.userInfo,\r\n    //             },\r\n    //             masterData: this.props.Login.masterData,\r\n    //             url: \"language/getComboService\"\r\n    //         });\r\n    //     }\r\n    //     else if (name== \"Module\") {\r\n    //         this.props.iconChangeService({\r\n    //             inputData: {\r\n    //                 nflag: 2,\r\n    //                 userinfo: this.props.Login.userInfo,\r\n    //             },\r\n    //             masterData: this.props.Login.masterData,\r\n    //             url: \"language/getComboService\"\r\n    //         });\r\n    //     }\r\n    //     else if (name == \"Form\") {\r\n    //         this.props.iconChangeService({\r\n    //             inputData: {\r\n    //                 nflag: 3,\r\n    //                 userinfo: this.props.Login.userInfo,\r\n    //             },\r\n    //             masterData: this.props.Login.masterData,\r\n    //             url: \"language/getComboService\"\r\n    //         });\r\n    //     }\r\n    //     else {\r\n    //         this.setState({ selectedRecord });\r\n    //     }\r\n    // }\r\n\r\n    handleClose() {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.state.showSynonym) {\r\n            this.setState({ showSynonym: false })\r\n            return null;\r\n        }\r\n        if (this.props.Login.loadEsign) {\r\n                loadEsign = false;\r\n                openModal=false;\r\n            }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId = null;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    };\r\n\r\n    //to open side out\r\n    //to perform save action for both add and edit\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let selectedId = null;\r\n        let methodUrl=\"\";\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        if (this.state.showSynonym) {\r\n            this.setState({ showSynonym: false })\r\n            return null;\r\n        }\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            if (this.props.Login.masterData.headername === \"Menu\") {\r\n                selectedId = this.props.Login.selectedId;\r\n                dataState = this.state.dataState\r\n                inputData[\"language\"] = {\r\n                    \"nmenucode\": this.state.selectedRecord.nmenucode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl=\"MenuLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Module\") {\r\n                selectedId = this.props.Login.selectedId;\r\n                dataState = this.state.dataState\r\n                inputData[\"language\"] = {\r\n                    \"nmodulecode\": this.state.selectedRecord.nmodulecode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl=\"ModuleLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Form\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nformcode\": this.state.selectedRecord.nformcode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl=\"FormLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"TransactionStatus\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ntranscode\": this.state.selectedRecord.ntranscode,\r\n                    \"jsondata\": {\r\n                        \"salertdisplaystatus\": this.state.selectedRecord.salertdisplaystatus,\r\n                        \"stransdisplaystatus\": this.state.selectedRecord.stransdisplaystatus,\r\n                        \"sactiondisplaystatus\": this.state.selectedRecord.sactiondisplaystatus\r\n                    }\r\n                }\r\n                methodUrl=\"TransactionStatusLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"ControlMaster\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ncontrolcode\": this.state.selectedRecord.ncontrolcode,\r\n                    \"jsondata\": {\r\n                        \"scontrolids\": this.state.selectedRecord.scontrolids\r\n                    }\r\n                }\r\n                methodUrl=\"ControlMasterLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"ApprovalSubType\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"napprovalsubtypecode\": this.state.selectedRecord.napprovalsubtypecode,\r\n                    \"jsondata\": {\r\n                        \"approvalsubtypename\": this.state.selectedRecord.approvalsubtypename\r\n                    }\r\n                }\r\n                methodUrl=\"ApprovalSubTypeLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"SampleType\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nsampletypecode\": this.state.selectedRecord.nsampletypecode,\r\n                    \"jsondata\": {\r\n                        \"sampletypename\": this.state.selectedRecord.sampletypename\r\n                    }\r\n                }\r\n                methodUrl=\"SampleTypeLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"TemplateType\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ntemplatetypecode\": this.state.selectedRecord.ntemplatetypecode,\r\n                    \"jsondata\": {\r\n                        \"stemplatetypename\": this.state.selectedRecord.stemplatetypename\r\n                    }\r\n                }\r\n                methodUrl=\"TemplateTypeLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Period\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nperiodcode\": this.state.selectedRecord.nperiodcode,\r\n                    \"jsondata\": {\r\n                        \"speriodname\": this.state.selectedRecord.speriodname\r\n                    }\r\n                }\r\n                methodUrl=\"PeriodLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Gender\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ngendercode\": this.state.selectedRecord.ngendercode,\r\n                    \"jsondata\": {\r\n                        \"sgendername\": this.state.selectedRecord.sgendername\r\n                    }\r\n                }\r\n                methodUrl=\"GenderLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"Grade\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"ngradecode\": this.state.selectedRecord.ngradecode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl=\"GradeLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"SchedulerType\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nschedulertypecode\": this.state.selectedRecord.nschedulertypecode,\r\n                    \"jsondata\": {\r\n                        \"sschedulertypename\": this.state.selectedRecord.sschedulertypename\r\n                    }\r\n                }\r\n                methodUrl=\"SchedulerTypeLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"DynamicRecordDetail\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nrecorddetailtypecode\": this.state.selectedRecord.nrecorddetailtypecode,\r\n                    \"jsondata\": {\r\n                        \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                    }\r\n                }\r\n                methodUrl=\"DynamicRecordDetailTypeLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"QueryBuilderTables\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nquerybuildertablecode\": this.state.selectedRecord.nquerybuildertablecode,\r\n                    \"jsondata\": {\r\n                        \"tablename\": this.state.selectedRecord.tablename\r\n                    }\r\n                }\r\n                methodUrl=\"QueryBuilderTablesLanguage\"\r\n            } else if (this.props.Login.masterData.headername === \"QueryBuilderViews\") {\r\n                dataState = this.state.dataState\r\n                selectedId = this.props.Login.selectedId;\r\n                inputData[\"language\"] = {\r\n                    \"nquerybuilderviewscode\":this.state.selectedRecord.nquerybuilderviewscode,\r\n                    \"jsondata\": {\r\n                        \"displayname\": this.state.selectedRecord.displayname\r\n                    }\r\n                }\r\n                methodUrl=\"QueryBuilderViewsLanguage\"\r\n            } else {\r\n                // nflag = 15\r\n                // dataState = this.state.dataState\r\n                // selectedId = this.props.Login.selectedId;\r\n                // inputData[\"language\"] = {\r\n                //     \"nflag\": nflag,\r\n                //     \"nmultilingualmasterscode\": this.state.selectedRecord.nmultilingualmasterscode,\r\n                //     \"jsondata\": {\r\n                //         \"sdisplayname\": this.state.selectedRecord.sdisplayname\r\n                //     }\r\n                // }\r\n            }\r\n        }\r\n        const inputParam = {\r\n            methodUrl: methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, dataState, selectedId\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType,\r\n                    operation: this.props.Login.operation, openModal: true,\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, showRegTypeAddScreen, fetchById, comboService,\r\n    updateStore, validateEsignCredential\r\n})(injectIntl(Languages));"]},"metadata":{},"sourceType":"module"}