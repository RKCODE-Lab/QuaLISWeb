{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\PreRegisterSlideOutModal.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Button, Card, Form, Modal } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ModalInner } from '../../components/App.styles';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { faCalculator } from '@fortawesome/free-solid-svg-icons';\nimport { comboChild, convertDateTimetoString, getSameRecordFromTwoArrays, rearrangeDateFormat, showEsign, validateEmail } from '../../components/CommonScript';\nimport RegisterSlideOut from './RegisterSlideOut';\nimport AddSpecification from './AddSpecification';\nimport AddTest from './AddTest';\nimport { connect } from 'react-redux';\nimport { getPreviewTemplate, getChildValues, getNewRegSpecification, AddComponents, updateStore, EditComponent, getTest, addsubSample, editSubSample, insertRegistration, updateRegistration, addSubSampleSaveContinue, componentTest } from '../../actions';\nimport AddComponentPopUp from './AddComponentPopUp';\nimport AddSubSample from './AddSubSample';\nimport { getRegistration, getRegistrationSubSample, SubSample, TestListManipulation } from './RegistrationValidation'; //import SplitterLayout from 'react-splitter-layout';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PreRegisterSlideOutModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formRef = React.createRef();\n    this.state = {\n      failedControls: [],\n      testDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      subSampleDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      selectedRecord: {},\n      selectedSpec: {},\n      selectComponent: {},\n      selectedTest: {},\n      selectedTestData: {},\n      SubSamplecomboComponents: [],\n      SubSamplewithoutCombocomponent: [],\n      // selectedTestData: [],\n      parentSubSampleColumnList: [],\n      specBasedComponent: false\n    };\n\n    this.handleSaveClick = saveType => {\n      const failedControls = [];\n      const startLabel = [];\n      let label = \"IDS_ENTER\";\n      let mandatoryFields = [];\n      let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.loadComponent) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_RECEIVEDDATE\",\n          \"dataField\": \"dreceiveddate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_TIMEZONE\",\n          \"dataField\": \"ntzdreceivedate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadSubSample) {\n        if (this.state.specBasedComponent) mandatoryFields = [{\n          \"idsName\": \"IDS_SPECIMEN\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  if (componentrow.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  } else {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                    });\n                  }\n                } else {\n                  if (componentrow.inputtype === \"email\") {\n                    this.state.selectComponent[componentrow.label] && this.state.selectComponent[componentrow.label] !== \"\" && mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  }\n                }\n\n                return null;\n              }) : component.mandatory === true ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : this.state.selectComponent[component.label] ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : \"\" : \"\";\n            });\n          });\n        });\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadTest) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_TEST\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.props.Login.selectedTestData;\n      } else if (this.props.Login.loadSpec) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_SPECIFICATION\",\n          \"dataField\": \"nallottedspeccode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n      } else {\n        this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  if (componentrow.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  } else {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                    });\n                  }\n                } else {\n                  if (componentrow.inputtype === \"email\") {\n                    selectedRecord[componentrow.label] && selectedRecord[componentrow.label] !== \"\" && mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  }\n                }\n\n                return null;\n              }) : component.mandatory === true ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : selectedRecord[component.label] ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : \"\" : \"\";\n            });\n          });\n        });\n      }\n\n      if (this.props.esign) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_PASSWORD\",\n          \"dataField\": \"esignpassword\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"esigncomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      }\n\n      mandatoryFields.forEach(item => {\n        if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\n          const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n            id: item.idsName\n          }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n          failedControls.push(alertMessage);\n          startLabel.push(item.mandatoryLabel); //\"IDS_PROVIDE\";\n        } else {\n          if (item.validateFunction) {\n            const validateData = item.validateFunction;\n\n            if (validateData(selectedRecord[item.dataField]) === false) {\n              const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                id: item.idsName\n              }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n              failedControls.push(alertMessage);\n              startLabel.push(item.mandatoryLabel);\n            }\n          } else {\n            if (typeof selectedRecord[item.dataField] === \"object\") {\n              //to validate FormSelectSearch component\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel); //\"IDS_SELECT\";\n              }\n            } else if (typeof selectedRecord[item.dataField] === \"string\") {\n              //to handle string field -- added trim function\n              if (selectedRecord[item.dataField].trim().length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            } else {\n              //number field\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            }\n          }\n        } // else{\n        //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\n        //     failedControls.push(alertMessage);\n        // }\n\n      }); // console.log(\"validationPassed:\", failedControls);\n\n      if (failedControls.length === 0) {\n        if (saveType === 4) {\n          this.props.onExecuteClick(this.formRef);\n        } else if (saveType === 3) {\n          if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_CHECKAGREE\"\n            }));\n          } else {\n            this.props.validateEsign();\n          }\n        } else {\n          if (this.props.Login.loadSpec) {\n            let selectedSpec = this.state.selectedSpec;\n            selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\n            selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\n            selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"]; // this.setState({\n            //     selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\n            // })\n\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                selectedTestData: [],\n                loadSpec: false,\n                SelectedTest: [],\n                Test: [],\n                Component: [],\n                selectedSpec,\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else if (this.props.Login.loadComponent) {\n            this.onSaveComponentClick(saveType, this.formRef);\n          } else if (this.props.Login.loadTest) {\n            this.onSaveTestClick(saveType, this.formRef);\n          } else if (this.props.Login.loadSubSample) {\n            this.onSaveSubSampleClick(saveType, this.formRef);\n          } else {\n            this.onSaveClick(saveType, this.formRef);\n          }\n        }\n      } else {\n        label = startLabel[0] === undefined ? label : startLabel[0];\n        toast.info(`${this.props.intl.formatMessage({\n          id: label\n        })} ${failedControls[0]}`);\n      }\n    };\n\n    this.TestChange = (comboData, fieldName) => {\n      const selectedTestData = this.state.selectedTestData || {};\n      selectedTestData[fieldName] = comboData;\n      this.setState({\n        selectedTestData\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedTestData }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      let parentList = [];\n      let childComboList = [];\n      let childColumnList = {};\n      let comboName = customName || control.label;\n      const selectedRecord = this.state.selectedRecord || {};\n      let product = false;\n      let productCategory = false;\n      let nproductcatcode = -1;\n      let nproductcode = -1;\n      let materialType = false;\n      let instrument = false;\n      let instrumentCategory = false; // let ninstrumentcatcode = -1\n      //let ninstrumentcode = -1\n\n      let material = false;\n      let materialCategory = false; //  let nmaterialcatcode = -1\n      // let nmaterialcode = -1\n\n      const nsampletypecode = parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode);\n      const inputParem = {\n        child: control.child,\n        source: control.source,\n        primarykeyField: control.valuemember,\n        value: comboData.value,\n        item: comboData.item,\n        label: comboName,\n        nameofdefaultcomp: control.name\n      };\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      if (control.name === 'Product') {\n        const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\n        const ncategorybasedflow = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n        nproductcatcode = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label].value;\n\n        if (ncategorybasedflow !== 3) {\n          product = true;\n          nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n        }\n      } else if (control.name === 'Instrument') {\n        const InstrumentCategory = this.props.comboComponents.filter(x => x.name === \"Instrument Category\");\n        const ncategorybasedflow = selectedRecord[InstrumentCategory[0].label] && selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n        nproductcatcode = selectedRecord[InstrumentCategory[0].label] && selectedRecord[InstrumentCategory[0].label].value;\n\n        if (ncategorybasedflow !== 3) {\n          instrument = true;\n          nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n        }\n      } else if (control.name === 'Material') {\n        const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\n        const ncategorybasedflow = selectedRecord[MaterialCategory[0].label] && selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n        nproductcatcode = selectedRecord[MaterialCategory[0].label] && selectedRecord[MaterialCategory[0].label].value;\n\n        if (ncategorybasedflow !== 3) {\n          material = true;\n          nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n        }\n      } else if (control.name === 'Product Category') {\n        const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n        nproductcatcode = comboData.value;\n        const ncategorybasedflow = comboData && comboData['item']['jsondata']['ncategorybasedflow'];\n\n        if (ncategorybasedflow === 3) {\n          productCategory = true;\n        } else {\n          inputParem[\"ProductName\"] = Product[0].label; // nproductcode = selectedRecord[comboName] &&\n          // selectedRecord[comboName].value;\n\n          product = true;\n        }\n      } else if (control.name === 'Instrument Category') {\n        const Instrument = this.props.comboComponents.filter(x => x.name === \"Instrument\");\n        nproductcatcode = comboData.value;\n        const ncategorybasedflow = comboData && comboData['item']['jsondata']['ncategorybasedflow'];\n\n        if (ncategorybasedflow === 3) {\n          instrumentCategory = true;\n        } else {\n          inputParem[\"InstrumentName\"] = Instrument[0].label; // nproductcode = selectedRecord[comboName] &&\n          // selectedRecord[comboName].value;\n\n          instrument = true;\n        }\n      } else if (control.name === 'Material Category') {\n        const Material = this.props.comboComponents.filter(x => x.name === \"Material\");\n        nproductcatcode = comboData.value;\n        const ncategorybasedflow = comboData && comboData['item']['jsondata']['ncategorybasedflow'];\n\n        if (ncategorybasedflow === 3) {\n          materialCategory = true;\n        } else {\n          inputParem[\"MaterialName\"] = Material[0].label; // nproductcode = selectedRecord[comboName] &&\n          // selectedRecord[comboName].value;\n\n          material = true;\n        }\n      } else if (control.name === 'Material Type') {\n        const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\"); //nproductcatcode = -1;\n        // const ncategorybasedflow = comboData &&\n        //     comboData['item']['jsondata']['ncategorybasedflow'];\n        // if (ncategorybasedflow === 3) {\n        //     productCategory = true\n        // } else {\n\n        inputParem[\"MaterialCategoryName\"] = MaterialCategory[0].label; // nproductcode = selectedRecord[comboName] &&\n        // selectedRecord[comboName].value;\n\n        materialType = true; //  }\n      }\n\n      if (control.child && control.child.length > 0) {\n        childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\");\n        childColumnList = {};\n        childComboList.map(columnList => {\n          const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n          return null;\n        });\n        parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\");\n        const mapOfFilter = {\n          nproductcode,\n          nproductcatcode,\n          nsampletypecode: nsampletypecode\n        };\n        this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter, instrumentCategory, instrument, materialCategory, material, materialType);\n      } else {\n        // if (productCategory) {\n        //     const ncategorybasedflow = selectedRecord[comboName] &&\n        //         selectedRecord[comboName].value;\n        // } else if\n        if (product || productCategory || instrument || material || materialCategory || instrumentCategory || materialType) {\n          // const nproductcode = selectedRecord[comboName] &&\n          //     selectedRecord[comboName].value;\n          const mapOfFilter = {\n            nproductcode,\n            nproductcatcode,\n            nsampletypecode: nsampletypecode\n          };\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter, instrumentCategory, instrument, materialCategory, material);\n        } else {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onInputOnChange = (event, radiotext) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        const value = selectedRecord[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedRecord[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedRecord[event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedRecord[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedRecord[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedRecord[event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = radiotext;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnSubSampleChange = (event, radiotext) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectComponent['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectComponent['timeonly'] = false;\n        }\n\n        const value = selectComponent[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectComponent[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectComponent[event.target.name] = \"\";\n                }\n              } else {\n                //  const  indexcomma= value.indexOf(\",\")\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectComponent[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectComponent[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectComponent[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectComponent[event.target.name] = radiotext;\n        }\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.onComboSubSampleChange = (comboData, control, customName) => {\n      let parentList = [];\n      let childComboList = [];\n      let childColumnList = {};\n      let comboName = customName || control.label;\n      const selectComponent = this.state.selectComponent || {};\n      const inputParem = {\n        child: control.child,\n        source: control.source,\n        primarykeyField: control.valuemember,\n        value: comboData.value,\n        item: comboData.item,\n        label: comboName,\n        nameofdefaultcomp: control.name\n      };\n\n      if (comboData) {\n        selectComponent[comboName] = comboData;\n      } else {\n        selectComponent[comboName] = [];\n      }\n\n      if (control.child && control.child.length > 0) {\n        childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents, control.child, \"label\");\n        childColumnList = {};\n        childColumnList = childComboList.map(columnList => {\n          const val = comboChild(this.state.SubSamplecomboComponents, columnList, childColumnList, false);\n          return val.childColumnList;\n        });\n        parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent, control.child, \"label\");\n        this.props.getChildValues(inputParem, this.props.Login.userInfo, selectComponent, this.props.Login.SubSamplecomboData, childComboList, childColumnList, this.state.SubSamplewithoutCombocomponent, [...childComboList, ...parentList]);\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputSubSampleChange = (value, name) => {\n      let selectComponent = this.state.selectComponent;\n      selectComponent[name] = value;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.handleDateChangeComp = (dateValue, dateName, screenName) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (screenName === 'component') {\n        const selectComponent = this.state.selectComponent;\n        selectComponent[dateName] = dateValue;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        selectedRecord[dateName] = dateValue;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateSubSampleChange = (dateValue, dateName) => {\n      const {\n        selectComponent\n      } = this.state;\n      selectComponent[dateName] = dateValue;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.state.showFilter;\n      this.setState({\n        showFilter\n      });\n    };\n\n    this.closeFilter = () => {\n      this.setState({\n        showFilter: false\n      });\n    };\n\n    this.AddSpec = e => {\n      // this.setState({\n      //     loadSpec: true\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: true,\n          screenName: \"Specification\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.addTestslide = (selectedComponent, nneedsubsample, specBasedComponent) => {\n      if (nneedsubsample) {\n        if (selectedComponent && Object.keys(selectedComponent).length > 0) {\n          delete selectedComponent[\"selected\"];\n          this.props.getTest(selectedComponent, this.props.Login, nneedsubsample, specBasedComponent);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: nneedsubsample ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\"\n          }));\n        }\n      } else {\n        const selectedComponent1 = {\n          nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\n          slno: 1\n        };\n        this.props.getTest(selectedComponent1, this.props.Login, nneedsubsample, specBasedComponent);\n      }\n    };\n\n    this.closeSpec = e => {\n      // this.setState({\n      //     loadSpec: false,\n      //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\n      //      screenName:\"Specification\"\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: false,\n          selectedRecord: { ...this.state.selectedRecord,\n            ...this.state.selectedSpec\n          },\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeComponent = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadComponent: false,\n          selectComponent: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeTest = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadTest: false,\n          selectedTestData: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeSubSample = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSubSample: false,\n          selectedSubSample: {},\n          showSaveContinue: false,\n          selectComponent: {},\n          selectedTestData: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onspecChange = (event, fieldName) => {\n      if (event !== null) {\n        const selectedRecord = this.state.selectedRecord; // const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\n        //     this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\n\n        selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\n        selectedRecord[\"nallottedspeccode\"] = event; //  if(this.props.Login.Component.length=== 0 ){\n\n        this.setState({\n          selectedRecord\n        }); // }else{\n        //     if(event.value!== oldpromarycode ){\n        //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n        //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\n        //     }\n        // }\n      }\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_REGISTRATION\",\n        operation: \"get\",\n        activeKey: event.key,\n        focusKey: event.key,\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedNode: event.item,\n        selectedRecord: this.state.selectedRecord,\n        primaryKey: event.primaryKey\n      };\n\n      if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\n        this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\n      } // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\n      //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\n      // } else {\n      //     // if(event.key!== this.props.Login.ActiveKey ){\n      //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n      //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\n      //     // }\n      // }\n\n    };\n\n    this.handleComponentRowClick = event => {\n      let selectedComponent = event.dataItem;\n      let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest,\n          selectedComponent,\n          testDataState: {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddComponent = () => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        this.props.AddComponents(Map);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onComponentChange = (comboData, fieldName, nneedsubsample) => {\n      if (comboData !== null) {\n        //  if (!nneedsubsample) {\n        const selectComponent = this.state.selectComponent || {};\n\n        if (fieldName === 'ntzdreceivedate') {\n          selectComponent[\"ntzdreceivedate\"] = comboData;\n          this.setState({\n            selectComponent\n          });\n        } else {\n          // const oldspecsampletypecode = selectComponent.nspecsampletypecode\n          // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\n          //     //selectComponent[\"nneedservice\"] = true;\n          // }\n          selectComponent[fieldName] = comboData;\n          selectComponent[\"Sample Name\"] = comboData.label;\n          selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\n          this.props.componentTest(selectComponent, false, this.state.specBasedComponent, this.props.Login.Component);\n        } // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //         selectComponent\n        //     }\n        // }\n        // this.props.updateStore(updateInfo);\n        // } else {\n        //     const selectComponent = this.state.selectComponent || {};\n        //     selectComponent[fieldName] = comboData;\n        //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\n        //     this.setState({ selectComponent })\n        // }\n\n      }\n    };\n\n    this.onInputComponentOnChange = event => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         selectComponent\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveComponentClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.ComponentObjectAfterSave();\n        } else if (saveType === 2) {\n          this.ComponentObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        const dreceiveddate = selectedComponent[\"dreceiveddate\"];\n        objcomponent[\"dreceiveddate\"] = dreceiveddate;\n        objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n        objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\n        objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\n        objcomponent[\"jsondata\"] = \"\";\n        selectedComponent = { ...selectedComponent,\n          ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadComponent: false,\n              openChildModal: false,\n              selectComponent: undefined,\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno]\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onSaveSubSampleClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.SubSampleObjectAfterSave();\n        } else if (saveType === 2) {\n          this.SubSampleObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus; // const defaulttimezone = this.props.Login.defaulttimezone;\n        // const userInfo = this.props.Login.userInfo;\n\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\"; // objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n        // if(this.props.specBasedComponent){\n        //     objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        //     objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        //     objcomponent[\"nspecsampletypecode\"] = selectedComponent[\"nspecsampletypecode\"] ?selectedComponent[\"nspecsampletypecode\"]  : -1;\n        // }else{\n        //     objcomponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n        // }\n\n        const subSampleDetail = getRegistrationSubSample(selectedComponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n        objcomponent = { ...objcomponent,\n          ...subSampleDetail.sampleRegistration\n        };\n        let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n        const index1 = subSampleDataGridList.findIndex(x => x.slno === objcomponent.slno);\n        if (index1 !== -1) subSampleDataGridList[index1] = { ...objcomponent['jsonuidata'],\n          ...objcomponent\n        }; // objcomponent[\"jsondata\"] = {}\n        // objcomponent[\"jsonuidata\"] = {}\n        // this.props.Login.masterData.SubSampleTemplate &&\n        //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        //         row.children.map(column => {\n        //             column.children.map(component => {\n        //                 if (component.hasOwnProperty(\"children\")) {\n        //                    // let componentrowlabel = ''\n        //                  //   let componentrowvalue = ''\n        //                     component.children.map(componentrow => {\n        //                         if (componentrow.inputtype === \"combo\") {\n        //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\n        //                                 { value: selectedComponent[componentrow.label].value, label: selectedComponent[componentrow.label].label } : -1\n        //                            // if (componentrow.mandatory || selectedComponent[componentrow.label]) {\n        //                               //  componentrowlabel = componentrowlabel + '&' + componentrow.label\n        //                                // componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label].label\n        //                           //  }\n        //                             objcomponent[\"jsonuidata\"][componentrow.label]=selectedComponent[componentrow.label]?selectedComponent[componentrow.label].label:\"\"\n        //                         }\n        //                         else if (componentrow.inputtype === \"date\") {\n        //                             if (componentrow.mandatory) {\n        //                                 selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                     selectedComponent[componentrow.label] : new Date(), userInfo);\n        //                                     selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\n        //                             } else {\n        //                                 objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n        //                                     convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                         selectedComponent[componentrow.label] : new Date(), userInfo) :\n        //                                     selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                         selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\n        //                                         selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\n        //                             }\n        //                             if (componentrow.timezone) {\n        //                                 selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ?\n        //                                     { value: selectedComponent[`tz${componentrow.label}`].value, label: selectedComponent[`tz${componentrow.label}`].label } :\n        //                                     defaulttimezone ? defaulttimezone : -1\n        //                                     selectedComponent[\"jsonuidata\"][`tz${componentrow.label}`]=selectedComponent[\"jsondata\"][`tz${componentrow.label}`]\n        //                             }\n        //                             // dateList.push(componentrow.label)\n        //                         }\n        //                         else {\n        //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\n        //                                 selectedComponent[componentrow.label] : \"\"\n        //                                 objcomponent[\"jsonuidata\"][componentrow.label]=objcomponent[\"jsondata\"][componentrow.label]\n        //                             // if (selectedComponent[componentrow.label]) {\n        //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n        //                             //     componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label]\n        //                             // }\n        //                         }\n        //                     })\n        //                    // objcomponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n        //                 }\n        //                 else {\n        //                     if (component.inputtype === \"combo\") {\n        //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\n        //                             { value: selectedComponent[component.label].value, label: selectedComponent[component.label].label } : -1\n        //                             objcomponent[\"jsonuidata\"][component.label] =selectedComponent[component.label] ? selectedComponent[component.label].label :\"\"\n        //                     }\n        //                     else if (component.inputtype === \"date\") {\n        //                         if (component.mandatory) {\n        //                             objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ?\n        //                                 selectedComponent[component.label] : new Date(), userInfo);\n        //                                 objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                         } else {\n        //                             objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\n        //                                 convertDateTimetoString(selectedComponent[component.label] ?\n        //                                     selectedComponent[component.label] : new Date(), userInfo) :\n        //                                 selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ?\n        //                                     selectedComponent[component.label] : new Date(), userInfo) : \"\";\n        //                                     objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                         }\n        //                         if (component.timezone) {\n        //                             objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ?\n        //                                 { value: selectedComponent[`tz${component.label}`].value, label: selectedComponent[`tz${component.label}`].label } :\n        //                                 defaulttimezone ? defaulttimezone : -1\n        //                                 objcomponent[\"jsonuidata\"][`tz${component.label}`]  = objcomponent[\"jsondata\"][`tz${component.label}`] \n        //                         }\n        //                         //dateList.push(component.label)\n        //                     }\n        //                     else {\n        //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\n        //                             selectedComponent[component.label] : \"\"\n        //                             objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                     }\n        //                 }\n        //             }\n        //             )\n        //         })\n        //     })\n\n        selectedComponent = { ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadSubSample: false,\n              openChildModal: false,\n              selectComponent: {},\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno],\n              screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n              subSampleDataGridList\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.addSubSampleSaveContinue = (updateInfo, selectedTestData) => {\n      const Map = {};\n      Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      Map[\"testrequired\"] = false;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      Map[\"nspecsampletypecode\"] = updateInfo.selectedComponent[\"nspecsampletypecode\"] ? updateInfo.selectedComponent[\"nspecsampletypecode\"] : -1;\n      this.props.addSubSampleSaveContinue(updateInfo, Map, this.state.specBasedComponent, this.props.Login.Components, selectedTestData, this.props.Login.lstComponent);\n    };\n\n    this.editComponent = editselectedcomponent => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\n    };\n\n    this.editSubSample = (editselectedcomponent, specBasedComponent) => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      const defaulttimezone = this.props.Login.defaulttimezone;\n      const userInfo = this.props.Login.userInfo;\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      let selectComponent = this.state.selectComponent;\n      selectComponent['nspecsampletypecode'] = objComponent['nspecsampletypecode'] ? objComponent['nspecsampletypecode'] : -1;\n\n      if (specBasedComponent) {\n        selectComponent['ncomponentcode'] = {\n          value: objComponent['ncomponentcode'] ? objComponent['ncomponentcode'] : -1,\n          label: objComponent['scomponentname'] ? objComponent['scomponentname'] : \"\"\n        };\n      }\n\n      selectComponent['slno'] = objComponent['slno'];\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              return component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                } else if (componentrow.inputtype === \"date\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? rearrangeDateFormat(userInfo, objComponent[\"jsondata\"][componentrow.label]) : new Date();\n\n                  if (componentrow.timezone) {\n                    selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ? objComponent[\"jsondata\"][`tz${componentrow.label}`] : defaulttimezone ? defaulttimezone : -1;\n                  }\n                } else {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                }\n\n                return null;\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : -1;\n              } else if (component.inputtype === \"date\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? rearrangeDateFormat(userInfo, objComponent[\"jsondata\"][component.label]) : new Date();\n\n                if (component.timezone) {\n                  selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ? objComponent[\"jsondata\"][`tz${component.label}`] : defaulttimezone ? defaulttimezone : -1;\n                }\n              } else {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : \"\";\n              }\n\n              return selectComponent;\n            }\n          });\n        });\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         loadSubSample: true, childoperation: \"update\",\n      //         ChildscreenName: \"SubSample\",\n      //         screenName: \"SubSample\",\n      //         openChildModal: false, selectComponent,\n      //         parentPopUpSize: \"lg\", loading: false\n      //     }\n      // }\n      // this.props.updateStore(updateInfo)\n\n      this.props.editSubSample(inputData, selectComponent, this.props.Login.userInfo, specBasedComponent);\n    };\n\n    this.deleteComponent = event => {\n      const dataItem = event;\n      const Component = this.props.Login.Component;\n      const subSampleDataGridList = this.props.Login.subSampleDataGridList;\n      const Test = this.props.Login.Test;\n      let SelectedTest = this.props.Login.SelectedTest;\n      const index = Component.findIndex(x => x.slno === dataItem.slno);\n\n      if (index > -1) {\n        Component.splice(index, 1);\n        subSampleDataGridList.splice(index, 1);\n      }\n\n      Test && Test[dataItem.slno] && delete Test[dataItem.slno];\n      SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0].slno];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: Component[0],\n          Test,\n          SelectedTest\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteTest = event => {\n      const dataItem = event;\n      let SelectedTest = this.props.Login.SelectedTest;\n      let selectedComponent = this.props.Login.selectedComponent;\n      const Test = this.props.Login.Test;\n      const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\n\n      if (index > -1) {\n        SelectedTest.splice(index, 1);\n      }\n\n      Test[selectedComponent.slno] = SelectedTest;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Test,\n          SelectedTest\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveTestClick = (saveType, formRef) => {\n      let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      selectedTestData.map(item => {\n        return selectedTestArray.push(item.item);\n      });\n      let updateInfo = {};\n      let selectedComponent = this.props.Login.selectedComponent;\n      let Test = this.props.Login.Test || [];\n\n      if (this.props.Login.masterData.nneedsubsample) {\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            SelectedTest: Test[selectedComponent.slno],\n            Test: Test,\n            selectedTestData: {},\n            loadTest: false,\n            parentPopUpSize: \"xl\"\n          }\n        };\n      } else {\n        selectedComponent = {\n          subsamplename: \"NA\",\n          slno: 1\n        };\n        const Component = [selectedComponent];\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedComponent,\n            Component,\n            SelectedTest: Test[selectedComponent.slno],\n            Test: Test,\n            selectedTestData: {},\n            loadTest: false,\n            parentPopUpSize: \"xl\",\n            screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.componentDataStateChange = event => {\n      this.setState({\n        componentDataState: event.dataState\n      });\n    };\n\n    this.testDataStateChange = event => {\n      this.setState({\n        testDataState: event.dataState\n      });\n    };\n\n    this.subSampleDataStateChange = event => {\n      this.setState({\n        subSampleDataState: event.dataState\n      });\n    };\n\n    this.addsubSample = specBasedComponent => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        let data = this.state.SubSamplecomboComponents || [];\n        const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || [];\n        const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n        if (SubSamplewithoutCombocomponent.length === 0 || data.length === 0) {\n          if (Layout !== undefined) {\n            Layout.map(row => {\n              return row.children.map(column => {\n                return column.children.map(component => {\n                  return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                    if (componentrow.inputtype === \"combo\") {\n                      data.push(componentrow);\n                    } else {\n                      SubSamplewithoutCombocomponent.push(componentrow);\n                    }\n\n                    return null;\n                  }) : component.inputtype === \"combo\" ? data.push(component) : SubSamplewithoutCombocomponent.push(component);\n                });\n              });\n            });\n            const SubSamplecomboComponents = data;\n            let childColumnList = {};\n            data.map(columnList => {\n              const val = comboChild(data, columnList, childColumnList, true);\n              data = val.data;\n              childColumnList = val.childColumnList;\n              return null;\n            });\n            this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, childColumnList, SubSamplecomboComponents, SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, true); //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\n          }\n        } else {\n          this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents, this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, false, this.props.Login.SubSamplecomboData, this.props.Login.TestCombined);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let operation = this.props.Login.operation;\n\n      if (operation === \"update\") {\n        this.onUpdateRegistration(saveType, formRef, operation);\n      } else {\n        if (operation === \"create\") {\n          this.insertRegistration(true);\n        }\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.myRef = React.createRef();\n    this.PrevoiusLoginData = this.props.PrevoiusLoginData;\n    this.subSampleDataGridList = [];\n    this.componentColumnList = [{\n      \"idsName\": \"IDS_SPECIMEN\",\n      \"dataField\": \"scomponentname\",\n      width: \"200px\"\n    }, {\n      \"idsName\": \"IDS_DATERECEIVED\",\n      \"dataField\": \"sreceiveddate\",\n      width: \"250px\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      width: \"200px\"\n    }];\n  }\n\n  componentDidUpdate(previousProps) {\n    let masterStatus = this.props.masterStatus; // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\n\n    let check = false;\n\n    if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\n      const specBasedComponent = this.props.Login.selectedSpec && this.props.Login.selectedSpec.item.ncomponentrequired === 3 ? true : false;\n      this.sampleeditable = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n\n      if (specBasedComponent) {\n        this.subSampleDataGridList = [{\n          \"idsName\": \"IDS_SPECIMEN\",\n          \"dataField\": \"scomponentname\",\n          width: \"200px\"\n        }];\n      }\n\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            // let label = ''\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  // label = label + '&' + componentrow.label\n                  this.subSampleDataGridList.push({\n                    \"mandatory\": true,\n                    \"idsName\": componentrow.label,\n                    \"dataField\": componentrow.label,\n                    width: \"150px\"\n                  });\n                }\n\n                return this.subSampleDataGridList;\n              });\n            } else {\n              if (component.mandatory) this.subSampleDataGridList.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                width: \"150px\"\n              });\n              return this.subSampleDataGridList;\n            } // if (label !== '') {\n            //     this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": label.substring(1), \"dataField\": label.substring(1),width: \"150px\" })\n            // }\n\n          });\n        });\n      });\n      this.setState({\n        selectedSpec: this.props.Login.selectedSpec,\n        specBasedComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\n      this.setState({\n        selectedTestData: this.props.Login.selectedTestData\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\n      this.setState({\n        selectComponent: this.props.Login.selectComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\n      this.setState({\n        SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\n      this.setState({\n        SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents\n      });\n      check = true;\n    }\n\n    if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\n      this.setState({\n        parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList\n      });\n      check = true;\n    }\n\n    if (check) {\n      this.PrevoiusLoginData = previousProps;\n    }\n\n    if (masterStatus !== \"\" && masterStatus !== undefined) {\n      toast.warn(masterStatus);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterStatus: \"\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n      masterStatus = \"\";\n    }\n\n    if (this.props.innerPopup !== this.state.innerTop) {\n      setTimeout(() => {\n        let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\n\n        if (this.myRef && this.myRef.current) {\n          this.myRef.current.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n\n        if (scrollDoc) {\n          scrollDoc.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n      }, 100);\n      this.setState({\n        innerTop: this.props.innerPopup\n      });\n    }\n  }\n\n  ComponentObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: {},\n          showSaveContinue: false,\n          loadComponent: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  ComponentObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    };\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      objcomponent1[\"scomments\"] = \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: objcomponent1\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice; // const defaulttimezone = this.props.Login.defaulttimezone;\n    // const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {}; // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1; // if(this.props.specBasedComponent){\n      //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\n      // }else{\n      //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n      // }\n\n      const subSampleDetail = getRegistrationSubSample(objcomponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n      saveComponent = { ...saveComponent,\n        ...subSampleDetail.sampleRegistration\n      };\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n      subSampleDataGridList.push({ ...saveComponent['jsonuidata'],\n        ...saveComponent\n      }); // saveComponent[\"jsondata\"] = {}\n      // saveComponent[\"jsonuidata\"] = {}\n      // this.props.Login.masterData.SubSampleTemplate &&\n      //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n      //         row.children.map(column => {\n      //             column.children.map(component => {\n      //                 if (component.hasOwnProperty(\"children\")) {\n      //                    // let componentrowlabel = ''\n      //                    // let componentrowvalue = ''\n      //                     component.children.map(componentrow => {\n      //                         if (componentrow.inputtype === \"combo\") {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\n      //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\n      //                             // }\n      //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\n      //                         }\n      //                         else if (componentrow.inputtype === \"date\") {\n      //                             if (componentrow.mandatory) {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                     objcomponent[componentrow.label] : new Date(), userInfo);\n      //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             } else {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n      //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\n      //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\n      //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             }\n      //                             if (componentrow.timezone) {\n      //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\n      //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\n      //                                     defaulttimezone ? defaulttimezone : -1\n      //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\n      //                             }\n      //                             // dateList.push(componentrow.label)\n      //                         }\n      //                         else {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 objcomponent[componentrow.label] : \"\"\n      //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             // if (objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\n      //                             // }\n      //                         }\n      //                     })\n      //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n      //                 }\n      //                 else {\n      //                     if (component.inputtype === \"combo\") {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\n      //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\n      //                         }\n      //                     else if (component.inputtype === \"date\") {\n      //                         if (component.mandatory) {\n      //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\n      //                                 objcomponent[component.label] : new Date(), userInfo);\n      //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                         } else {\n      //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\n      //                                 convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) :\n      //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\n      //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                                 }\n      //                         if (component.timezone) {\n      //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\n      //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\n      //                                 defaulttimezone ? defaulttimezone : -1\n      //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\n      //                         }\n      //                         //dateList.push(component.label)\n      //                     }\n      //                     else {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             objcomponent[component.label] : \"\"\n      //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                     }\n      //                 }\n      //             }\n      //             )\n      //         })\n      //     })\n      //  saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n\n      Component.unshift(saveComponent);\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\n      const selectedTestArray = [];\n      selectedTestData && selectedTestData.map(item => {\n        //  item.item['slno']=saveComponent.slno;\n        return selectedTestArray.push(item.item);\n      }); // selectedTestArray.map((item,i)=>{\n      //    selectedTestArray[i]['slno']=saveComponent.slno;\n      // })\n      // let selectedComponent = this.props.Login.selectedComponent;\n\n      const Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          loadSubSample: false,\n          selectComponent: {},\n          showSaveContinue: false,\n          parentPopUpSize: \"xl\",\n          SelectedTest: Test[saveComponent.slno],\n          Test: Test,\n          selectedTestData: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          subSampleDataGridList\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    }; // const defaulttimezone = this.props.Login.defaulttimezone;\n    // const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {}; // if(this.props.specBasedComponent){\n      //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\n      // }else{\n      //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n      // }\n\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      const subSampleDetail = getRegistrationSubSample(objcomponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n      saveComponent = { ...saveComponent,\n        ...subSampleDetail.sampleRegistration\n      };\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n      subSampleDataGridList.push({ ...saveComponent['jsonuidata'],\n        ...saveComponent\n      }); // saveComponent[\"jsondata\"] = {}\n      // saveComponent[\"jsonuidata\"] = {}\n      // this.props.Login.masterData.SubSampleTemplate &&\n      //   this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n      //         row.children.map(column => {\n      //             column.children.map(component => {\n      //                 if (component.hasOwnProperty(\"children\")) {\n      //                    // let componentrowlabel = ''\n      //                    // let componentrowvalue = ''\n      //                     component.children.map(componentrow => {\n      //                         if (componentrow.inputtype === \"combo\") {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\n      //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\n      //                             // }\n      //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\n      //                         }\n      //                         else if (componentrow.inputtype === \"date\") {\n      //                             if (componentrow.mandatory) {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                     objcomponent[componentrow.label] : new Date(), userInfo);\n      //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             } else {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n      //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\n      //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\n      //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             }\n      //                             if (componentrow.timezone) {\n      //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\n      //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\n      //                                     defaulttimezone ? defaulttimezone : -1\n      //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\n      //                             }\n      //                             // dateList.push(componentrow.label)\n      //                         }\n      //                         else {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 objcomponent[componentrow.label] : \"\"\n      //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             // if (objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\n      //                             // }\n      //                         }\n      //                     })\n      //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n      //                 }\n      //                 else {\n      //                     if (component.inputtype === \"combo\") {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\n      //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\n      //                         }\n      //                     else if (component.inputtype === \"date\") {\n      //                         if (component.mandatory) {\n      //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\n      //                                 objcomponent[component.label] : new Date(), userInfo);\n      //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                         } else {\n      //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\n      //                                 convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) :\n      //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\n      //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                                 }\n      //                         if (component.timezone) {\n      //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\n      //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\n      //                                 defaulttimezone ? defaulttimezone : -1\n      //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\n      //                         }\n      //                         //dateList.push(component.label)\n      //                     }\n      //                     else {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             objcomponent[component.label] : \"\"\n      //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                     }\n      //                 }\n      //             }\n      //             )\n      //         })\n      //     })\n      //   saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ?\n      //     this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n\n      Component.unshift(saveComponent); // objcomponent1[\"scomments\"] = \"\";\n      //objcomponent1[\"ssubsamplename\"] = \"\";\n\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      selectedTestData && selectedTestData.map(item => {\n        // item.item['slno']=saveComponent.slno;\n        return selectedTestArray.push(item.item);\n      }); // selectedTestArray.map((item,i)=>{\n      //     selectedTestArray[i]['slno']=saveComponent.slno;\n      // })\n\n      let Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        Component,\n        selectedComponent: saveComponent,\n        selectComponent: objcomponent1,\n        SelectedTest: Test[saveComponent.slno],\n        Test: Test,\n        subSampleDataGridList //, selectedTestData: {}\n\n      };\n      this.addSubSampleSaveContinue(updateInfo, selectedTestData); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         Component, selectedComponent: saveComponent,\n      //         selectComponent: objcomponent1,\n      //         SelectedTest: Test[saveComponent.slno],\n      //         Test: Test, selectedTestData: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    }\n  }\n\n  onUpdateRegistration(saveType, formRef, operation, flag) {\n    const inputData = {\n      userinfo: this.props.Login.userInfo\n    };\n    let initialParam = {\n      nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      fromdate: \"\",\n      todate: \"\",\n      nflag: 2,\n      ntype: 2,\n      npreregno: String(this.state.selectedRecord.npreregno),\n      ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample,\n      checkBoxOperation: 3,\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\"\n    };\n    inputData[\"initialparam\"] = initialParam; // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\n    //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n\n    const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, operation, this.props.comboComponents);\n    inputData[\"registration\"] = param.sampleRegistration;\n    inputData[\"DateList\"] = param.dateList;\n    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n    inputData[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n    inputData[\"checkBoxOperation\"] = 3;\n    inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n    inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\"; // Object.keys(this.state.selectedRecord).map(key => {\n    //     if (typeof this.state.selectedRecord[key] === \"object\") {\n    //         if (this.state.selectedRecord[key] === null) {\n    //             return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n    //         }\n    //         else if (this.state.selectedRecord[key] instanceof Date) {\n    //             return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\n    //         }\n    //         else {\n    //             return inputData[\"registration\"][key] = this.state.selectedRecord[key].value\n    //         }\n    //     }\n    //     else {\n    //         return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n    //     }\n    // }\n    //  )\n    // console.log(\"edit:\", inputData);\n    // if (inputData[\"registration\"] ) {\n    //     delete inputData[\"registration\"][\"esignpassword\"]\n    //     delete inputData[\"registration\"][\"esigncomments\"]\n    //     delete inputData[\"registration\"][\"agree\"]\n    // }\n\n    const inputParam = {\n      classUrl: this.props.Login.inputParam.classUrl,\n      methodUrl: \"Registration\",\n      displayName: this.props.Login.inputParam.displayName,\n      inputData: inputData,\n      operation: operation,\n      saveType,\n      formRef,\n      action: 'editSample',\n      showConfirmAlert: false,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState // dataState:undefined, selectedId\n\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          saveType,\n          parentPopUpSize: \"lg\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\n    }\n  }\n\n  findSubsampleDateList(subsampletemplate) {\n    const dateList = [];\n    subsampletemplate && subsampletemplate.map(row => {\n      return row.children.map(column => {\n        return column.children.map(component => {\n          if (component.hasOwnProperty(\"children\")) {\n            return component.children.map(componentrow => {\n              if (componentrow.inputtype === \"date\") {\n                dateList.push(componentrow.label);\n              }\n            });\n          } else {\n            if (component.inputtype === \"date\") {\n              dateList.push(component.label);\n            }\n\n            return dateList;\n          }\n        });\n      });\n    });\n    return dateList;\n  }\n\n  insertRegistration() {\n    let Components = this.props.Login.Component;\n\n    if (Components && Components.length > 0) {\n      let Test = this.props.Login.Test;\n      let Map = {};\n      Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n      Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [], this.state.specBasedComponent);\n      Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata); //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\n      // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\n\n      Map[\"FromDate\"] = \"\";\n      Map[\"ToDate\"] = \"\";\n      Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n      Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n      Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n      Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n      Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n      Map[\"checkBoxOperation\"] = 3;\n      const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents);\n      Map[\"Registration\"] = param.sampleRegistration;\n      Map[\"DateList\"] = param.dateList;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      Map[\"nflag\"] = 2; // Map[\"ntype\"] = 2;\n\n      Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n      Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n      Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n      const inputParam = {\n        inputData: Map,\n        postParamList: this.props.postParamList,\n        action: \"preregister\"\n      };\n      this.props.insertRegistration(inputParam, this.props.Login.masterData);\n    } else {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_ADDSUBSAMPLETOPREREGISTER\"\n      }));\n    }\n  }\n\n  render() {\n    let saveType = 1;\n\n    if (this.props.ignoreFormValidation) {\n      saveType = 5;\n    }\n\n    let buttonLabel = \"Save\";\n    let idsLabel = \"IDS_SAVE\";\n\n    if (this.props.buttonLabel) {\n      buttonLabel = this.props.buttonLabel;\n      idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\n    } // const testColumnList = [\n    //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\n    //     { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\n\n\n    return /*#__PURE__*/React.createElement(Modal, {\n      size: this.props.Login.loadComponent ? 'lg' : this.props.Login.loadSpec ? 'lg' : this.props.Login.loadTest ? 'lg' : this.props.Login.loadSubSample ? 'lg' : 'xl' // size={this.props.templateData[0] ?\n      //     this.props.templateData[0].children ?\n      //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\n      ,\n      backdrop: \"static\" //className={this.props.className || \"registrationModel\"}\n      ,\n      className: this.props.className || \"\",\n      show: this.props.Login.openPortal,\n      onHide: this.props.closeModal,\n      enforceFocus: false,\n      dialogClassName: \"modal-dialog-slideout freakerstop\",\n      \"aria-labelledby\": \"add-user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2219,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2236,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add-user\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2237,\n        columnNumber: 21\n      }\n    }, this.props.graphView === true ? \"\" : this.props.Login.inputParam ? this.props.Login.esign === true ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ESIGN\",\n      defaultMessage: \"Esign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2240,\n        columnNumber: 33\n      }\n    }) : this.props.loginoperation ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2242,\n        columnNumber: 37\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, this.props.operation ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.operation && \"IDS_\".concat(this.props.Login.operation.toUpperCase()),\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2246,\n        columnNumber: 49\n      }\n    }), \" \", this.props.Login.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2251,\n        columnNumber: 57\n      }\n    }) : \"\") : this.props.Login.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2257,\n        columnNumber: 49\n      }\n    }) : \"\") : \"\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.props.Login.loadSpec ? this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ? this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample : this.props.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2262,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2266,\n        columnNumber: 25\n      }\n    })), this.props.esign === true ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2269,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2270,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SUBMIT\",\n      defaultMessage: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2271,\n        columnNumber: 29\n      }\n    })) : (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2275,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2276,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VALIDATE\",\n      defaultMessage: \"Validate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2277,\n        columnNumber: 33\n      }\n    })) : this.props.showCalculate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2280,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2281,\n        columnNumber: 37\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CALCULATE\",\n      defaultMessage: \"Calculate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2282,\n        columnNumber: 37\n      }\n    })) : this.props.showParam === true && this.props.showExecute ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2285,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCalculator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2286,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EXECUTE\",\n      defaultMessage: \"Execute\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2287,\n        columnNumber: 41\n      }\n    })) : this.props.noSave || this.props.graphView ? this.props.operation === \"view\" ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-user btn-primary-blue\",\n      role: \"button\",\n      onClick: this.props.resetView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2291,\n        columnNumber: 47\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RESET\",\n      defaultMessage: \"Reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2294,\n        columnNumber: 49\n      }\n    })) : this.props.hideSave ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2297,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2298,\n        columnNumber: 49\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: idsLabel,\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2299,\n        columnNumber: 49\n      }\n    })), this.props.Login.operation === \"create\" && this.props.Login.showSaveContinue ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2303,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2304,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVECONTINUE\",\n      defaultMessage: \"Save & Continue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2305,\n        columnNumber: 29\n      }\n    })) : \"\", (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2311,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2312,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2313,\n        columnNumber: 29\n      }\n    })) : \"\"), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2317,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalInner, {\n      ref: this.myRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2318,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2319,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2328,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      ref: this.formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2329,\n        columnNumber: 33\n      }\n    }, this.props.Login.loadSpec ? /*#__PURE__*/React.createElement(AddSpecification, {\n      AgaramTree: this.props.Login.AgaramTree,\n      openNodes: this.props.Login.OpenNodes,\n      handleTreeClick: this.onTreeClick,\n      focusKey: this.props.Login.FocusKey,\n      activeKey: this.props.Login.ActiveKey,\n      Specification: this.props.Login.Specification,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      onSpecChange: this.onspecChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2332,\n        columnNumber: 45\n      }\n    }) : this.props.Login.loadTest ? /*#__PURE__*/React.createElement(AddTest, {\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.props.Login.selectedTestData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2344,\n        columnNumber: 49\n      }\n    }) : this.props.Login.loadComponent ? /*#__PURE__*/React.createElement(AddComponentPopUp, {\n      ref: this.myScrollRef,\n      selectComponent: this.state.selectComponent || {},\n      RealSampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\n      RealRegTypeValue: this.props.Login.masterData.RealRegTypeValue || {},\n      RealRegSubTypeValue: this.props.Login.masterData.RealRegSubTypeValue || {},\n      RealFilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\n      formatMessage: this.props.intl.formatMessage,\n      handleDateChange: this.handleDateChangeComp,\n      Component: this.props.Login.lstComponent || [],\n      onInputComponentOnChange: this.onInputComponentOnChange // onComboChange={this.onComponentComboChange}\n      ,\n      timeZoneList: this.props.Login.timeZoneList,\n      onComponentChange: this.onComponentChange,\n      userInfo: this.props.Login.userInfo,\n      sreceiveddate: this.props.Login.sreceiveddate || [],\n      CurrentTime: this.props.Login.CurrentTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2349,\n        columnNumber: 53\n      }\n    }) : this.props.Login.loadSubSample ? /*#__PURE__*/React.createElement(AddSubSample, {\n      Component: this.props.Login.lstComponent || [],\n      selectComponent: this.state.selectComponent // Unit={this.props.Login.Unit || []}\n      ,\n      onComponentChange: this.onComponentChange,\n      onInputComponentOnChange: this.onInputComponentOnChange,\n      templateData: this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata,\n      userInfo: this.props.Login.userInfo,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      handleDateChange: this.handleDateSubSampleChange,\n      onInputOnChange: this.onInputOnSubSampleChange,\n      onNumericInputChange: this.onNumericInputSubSampleChange,\n      comboData: this.props.Login.SubSamplecomboData,\n      onComboChange: this.onComboSubSampleChange,\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.state.selectedTestData,\n      childoperation: this.props.Login.childoperation,\n      specBasedComponent: this.state.specBasedComponent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2368,\n        columnNumber: 57\n      }\n    }) : /*#__PURE__*/React.createElement(RegisterSlideOut, {\n      editfield: this.sampleeditable && this.sampleeditable['sampleeditable'],\n      ntransactionstatus: this.props.Login.masterData && this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 && this.props.Login.masterData.selectedSample[0].ntransactionstatus,\n      loadPreregister: this.props.Login.loadPreregister,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      selectedComponent: this.props.Login.selectedComponent,\n      subSampleDataGridList: this.props.Login.subSampleDataGridList || [],\n      SelectedTest: this.props.Login.SelectedTest,\n      selectedTestData: this.state.selectedTestData,\n      userRoleControlRights: this.props.userRoleControlRights,\n      templateData: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata,\n      handleChange: this.props.handleChange,\n      handleDateChange: this.handleDateChange,\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputChange: this.onNumericInputChange,\n      comboData: this.props.Login.comboData,\n      onComboChange: this.onComboChange,\n      userInfo: this.props.Login.userInfo,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      AddSpec: this.AddSpec,\n      addTest: this.addTestslide,\n      handleComponentRowClick: this.handleComponentRowClick,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample,\n      specBasedComponent: this.state.specBasedComponent,\n      AddComponent: this.AddComponent,\n      deleteComponent: this.deleteComponent,\n      deleteTest: this.deleteTest,\n      editComponent: this.editComponent,\n      componentColumnList: this.componentColumnList,\n      Component: this.props.Login.Component,\n      TestChange: this.TestChange,\n      testDataState: this.state.testDataState,\n      subSampleDataState: this.state.subSampleDataState //componentDataState={this.state.componentDataState}\n      ,\n      testDataStateChange: this.testDataStateChange //componentDataStateChange={this.componentDataStateChange}\n      ,\n      subSampleDataStateChange: this.subSampleDataStateChange,\n      addsubSample: this.addsubSample,\n      editSubSample: this.editSubSample // onNumericInputChange={this.onNumericInputChange}\n      ,\n      subSampleDataGridFields: this.subSampleDataGridList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2390,\n        columnNumber: 59\n      }\n    })))))));\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  getChildValues,\n  getPreviewTemplate,\n  getNewRegSpecification,\n  AddComponents,\n  updateStore,\n  EditComponent,\n  getTest,\n  addsubSample,\n  editSubSample,\n  insertRegistration,\n  updateRegistration,\n  addSubSampleSaveContinue,\n  componentTest\n})(injectIntl(PreRegisterSlideOutModal));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/registration/PreRegisterSlideOutModal.jsx"],"names":["React","FormattedMessage","injectIntl","Button","Card","Form","Modal","FontAwesomeIcon","faSave","toast","DEFAULT_RETURN","ModalInner","transactionStatus","faCalculator","comboChild","convertDateTimetoString","getSameRecordFromTwoArrays","rearrangeDateFormat","showEsign","validateEmail","RegisterSlideOut","AddSpecification","AddTest","connect","getPreviewTemplate","getChildValues","getNewRegSpecification","AddComponents","updateStore","EditComponent","getTest","addsubSample","editSubSample","insertRegistration","updateRegistration","addSubSampleSaveContinue","componentTest","AddComponentPopUp","AddSubSample","getRegistration","getRegistrationSubSample","SubSample","TestListManipulation","mapStateToProps","state","Login","PreRegisterSlideOutModal","Component","constructor","props","formRef","createRef","failedControls","testDataState","skip","take","settings","parseInt","subSampleDataState","selectedRecord","selectedSpec","selectComponent","selectedTest","selectedTestData","SubSamplecomboComponents","SubSamplewithoutCombocomponent","parentSubSampleColumnList","specBasedComponent","handleSaveClick","saveType","startLabel","label","mandatoryFields","loadComponent","loadSubSample","masterData","SubSampleTemplate","jsondata","map","row","children","column","component","hasOwnProperty","componentrow","mandatory","inputtype","push","intl","formatMessage","id","loadTest","loadSpec","registrationTemplate","esign","forEach","item","dataField","undefined","alertMessage","alertPreFix","idsName","alertSuffix","mandatoryLabel","validateFunction","validateData","length","trim","onExecuteClick","agree","NO","info","validateEsign","updateInfo","typeName","data","SelectedTest","Test","screenName","RealRegSubTypeValue","sregsubtypename","onSaveComponentClick","onSaveTestClick","onSaveSubSampleClick","onSaveClick","TestChange","comboData","fieldName","setState","onComboChange","control","customName","parentList","childComboList","childColumnList","comboName","product","productCategory","nproductcatcode","nproductcode","materialType","instrument","instrumentCategory","material","materialCategory","nsampletypecode","RealSampleTypeValue","inputParem","child","source","primarykeyField","valuemember","value","nameofdefaultcomp","name","ProductCategory","comboComponents","filter","x","ncategorybasedflow","InstrumentCategory","MaterialCategory","Product","Instrument","Material","columnList","val","withoutCombocomponent","mapOfFilter","userInfo","onInputOnChange","event","radiotext","target","type","includes","index","indexOf","indexcomma","slice","onInputOnSubSampleChange","onComboSubSampleChange","SubSamplecomboData","onNumericInputChange","onNumericInputSubSampleChange","handleDateChangeComp","dateValue","dateName","handleDateChange","handleDateSubSampleChange","openFilter","showFilter","closeFilter","AddSpec","e","addTestslide","selectedComponent","nneedsubsample","Object","keys","warn","selectedComponent1","nallottedspeccode","slno","closeSpec","closeComponent","closeTest","closeSubSample","selectedSubSample","showSaveContinue","onspecChange","sversion","onTreeClick","inputParam","methodUrl","operation","activeKey","key","focusKey","keyName","userinfo","selectedNode","primaryKey","handleComponentRowClick","dataItem","AddComponent","Map","ntemplatemanipulationcode","RealRegTypeValue","nregtypecode","onComponentChange","nspecsampletypecode","onInputComponentOnChange","checked","childoperation","ComponentObjectAfterSave","ComponentObject","testrequired","ntransactionstatus","objcomponent","dreceiveddate","findIndex","splice","getTestByComponentChange","nneedservice","openChildModal","parentPopUpSize","SubSampleObjectAfterSave","SubSampleObject","subSampleDetail","defaulttimezone","sampleRegistration","subSampleDataGridList","index1","Components","lstComponent","editComponent","editselectedcomponent","inputData","objComponent","Date","timezone","deleteComponent","deleteTest","ntestgrouptestcode","selectedTestArray","ArrayTest","subsamplename","componentDataStateChange","componentDataState","dataState","testDataStateChange","subSampleDataStateChange","Layout","TestCombined","onUpdateRegistration","myRef","PrevoiusLoginData","componentColumnList","width","componentDidUpdate","previousProps","masterStatus","check","ncomponentrequired","sampleeditable","JSON","parse","DynamicDesign","innerPopup","innerTop","setTimeout","scrollDoc","modalEvent","document","getElementById","current","scrollIntoView","behavior","getTestfromDB","saveComponent","unshift","objcomponent1","flag","initialParam","nfilterstatus","FilterStatusValue","nregsubtypecode","fromdate","todate","nflag","ntype","npreregno","String","ndesigntemplatemappingcode","checkBoxOperation","activeSampleTab","activeTestTab","param","dateList","classUrl","displayName","action","showConfirmAlert","resultDataState","testCommentDataState","userRoleControlRights","nformcode","ncontrolCode","loadEsign","screenData","findSubsampleDateList","subsampletemplate","PREREGISTER","defaultTimeZone","postParamList","render","ignoreFormValidation","buttonLabel","idsLabel","concat","toUpperCase","className","openPortal","closeModal","graphView","loginoperation","showValidate","showCalculate","showParam","showExecute","noSave","resetView","hideSave","showSave","AgaramTree","OpenNodes","FocusKey","ActiveKey","Specification","myScrollRef","RealFilterStatusValue","timeZoneList","sreceiveddate","CurrentTime","selectedSample","loadPreregister","handleChange"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Button, Card, Form, Modal } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ModalInner } from '../../components/App.styles';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { faCalculator } from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    comboChild, convertDateTimetoString,\r\n    getSameRecordFromTwoArrays, rearrangeDateFormat, showEsign, validateEmail\r\n} from '../../components/CommonScript';\r\nimport RegisterSlideOut from './RegisterSlideOut';\r\nimport AddSpecification from './AddSpecification';\r\nimport AddTest from './AddTest';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    getPreviewTemplate, getChildValues,\r\n    getNewRegSpecification, AddComponents, updateStore,\r\n    EditComponent, getTest, addsubSample, editSubSample,\r\n    insertRegistration, updateRegistration, addSubSampleSaveContinue,\r\n    componentTest\r\n} from '../../actions'\r\nimport AddComponentPopUp from './AddComponentPopUp';\r\nimport AddSubSample from './AddSubSample';\r\nimport {\r\n    getRegistration, getRegistrationSubSample, SubSample, TestListManipulation\r\n} from './RegistrationValidation';\r\n//import SplitterLayout from 'react-splitter-layout';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nclass PreRegisterSlideOutModal extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.myRef = React.createRef()\r\n        this.PrevoiusLoginData = this.props.PrevoiusLoginData;\r\n        this.subSampleDataGridList = [];\r\n        this.componentColumnList = [\r\n            { \"idsName\": \"IDS_SPECIMEN\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n            { \"idsName\": \"IDS_DATERECEIVED\", \"dataField\": \"sreceiveddate\", width: \"250px\" },\r\n            { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", width: \"200px\" },\r\n        ];\r\n      \r\n    }\r\n    formRef = React.createRef();\r\n    state = {\r\n        failedControls: [],\r\n        testDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        subSampleDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        selectedRecord: {},\r\n        selectedSpec: {},\r\n        selectComponent: {},\r\n        selectedTest: {},\r\n        selectedTestData: {},\r\n        SubSamplecomboComponents: [],\r\n        SubSamplewithoutCombocomponent: [],\r\n        // selectedTestData: [],\r\n        parentSubSampleColumnList: [],\r\n        specBasedComponent:false\r\n    }\r\n\r\n\r\n\r\n    handleSaveClick = (saveType) => {\r\n        const failedControls = [];\r\n        const startLabel = [];\r\n        let label = \"IDS_ENTER\";\r\n        let mandatoryFields = [];\r\n        let selectedRecord = this.state.selectedRecord\r\n\r\n\r\n        if (this.props.Login.loadComponent) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadSubSample) {\r\n\r\n            if (this.state.specBasedComponent)\r\n                mandatoryFields = [{ \"idsName\": \"IDS_SPECIMEN\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                        } else {\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                        }\r\n\r\n                                    } else {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n\r\n                                            this.state.selectComponent[componentrow.label] &&\r\n                                                this.state.selectComponent[componentrow.label] !== \"\" &&\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                    component.inputtype === \"email\" ?\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label, \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        })\r\n                                        :\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label, \"dataField\": component.label,\r\n                                            \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                        })\r\n                                    : this.state.selectComponent[component.label] ? component.inputtype === \"email\" ?\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label, \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        }) : \"\" : \"\"\r\n\r\n\r\n                        })\r\n                    })\r\n                })\r\n\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadTest) {\r\n            mandatoryFields = [{ \"idsName\": \"IDS_TEST\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },]\r\n            selectedRecord = this.props.Login.selectedTestData\r\n        }\r\n        else if (this.props.Login.loadSpec) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n        } else {\r\n            this.props.Login.masterData.registrationTemplate &&\r\n                this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                        } else {\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                        }\r\n\r\n                                    } else {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n\r\n                                            selectedRecord[componentrow.label] &&\r\n                                                selectedRecord[componentrow.label] !== \"\" &&\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                    component.inputtype === \"email\" ?\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label, \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        })\r\n                                        :\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label, \"dataField\": component.label,\r\n                                            \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                        })\r\n                                    : selectedRecord[component.label] ? component.inputtype === \"email\" ?\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label, \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        }) : \"\" : \"\"\r\n                        })\r\n                    })\r\n                })\r\n        }\r\n        if (this.props.esign) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"esignpassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"esigncomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        mandatoryFields.forEach(item => {\r\n            if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\r\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                failedControls.push(alertMessage);\r\n                startLabel.push(item.mandatoryLabel)//\"IDS_PROVIDE\";\r\n            }\r\n            else {\r\n                if (item.validateFunction) {\r\n                    const validateData = item.validateFunction;\r\n                    if (validateData(selectedRecord[item.dataField]) === false) {\r\n                        const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                        failedControls.push(alertMessage);\r\n                        startLabel.push(item.mandatoryLabel)\r\n                    }\r\n                }\r\n                else {\r\n                    if (typeof selectedRecord[item.dataField] === \"object\") {\r\n                        //to validate FormSelectSearch component\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)//\"IDS_SELECT\";\r\n                        }\r\n                    }\r\n                    else if (typeof selectedRecord[item.dataField] === \"string\") {\r\n                        //to handle string field -- added trim function\r\n                        if (selectedRecord[item.dataField].trim().length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //number field\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // else{\r\n            //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\r\n            //     failedControls.push(alertMessage);\r\n            // }\r\n        });\r\n        // console.log(\"validationPassed:\", failedControls);\r\n\r\n        if (failedControls.length === 0) {\r\n            if (saveType === 4) {\r\n                this.props.onExecuteClick(this.formRef);\r\n            }\r\n            else if (saveType === 3) {\r\n                if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\r\n\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_CHECKAGREE\" }));\r\n\r\n                } else {\r\n\r\n                    this.props.validateEsign();\r\n                }\r\n            }\r\n            else {\r\n                if (this.props.Login.loadSpec) {\r\n                    let selectedSpec = this.state.selectedSpec\r\n                    selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"]\r\n                    selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"]\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"]\r\n                    // this.setState({\r\n                    //     selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\r\n                    // })\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            selectedTestData: [],\r\n                            loadSpec: false,\r\n                            SelectedTest: [],\r\n                            Test: [],\r\n                            Component: [],\r\n                            selectedSpec,\r\n                            screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n\r\n\r\n                }\r\n                else if (this.props.Login.loadComponent) {\r\n                    this.onSaveComponentClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadTest) {\r\n                    this.onSaveTestClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadSubSample) {\r\n                    this.onSaveSubSampleClick(saveType, this.formRef)\r\n                }\r\n                else {\r\n                    this.onSaveClick(saveType, this.formRef);\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n            label = startLabel[0] === undefined ? label : startLabel[0];\r\n            toast.info(`${this.props.intl.formatMessage({ id: label })} ${failedControls[0]}`);\r\n        }\r\n\r\n    }\r\n\r\n    TestChange = (comboData, fieldName) => {\r\n        const selectedTestData = this.state.selectedTestData || {};\r\n        selectedTestData[fieldName] = comboData;\r\n        this.setState({ selectedTestData });\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedTestData }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n        let parentList = []\r\n        let childComboList = []\r\n        let childColumnList = {}\r\n\r\n        let comboName = customName || control.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let product = false;\r\n        let productCategory = false;\r\n        let nproductcatcode = -1\r\n        let nproductcode = -1\r\n\r\n        let materialType = false;\r\n        let instrument = false;\r\n        let instrumentCategory = false;\r\n        // let ninstrumentcatcode = -1\r\n        //let ninstrumentcode = -1\r\n\r\n        let material = false;\r\n        let materialCategory = false;\r\n        //  let nmaterialcatcode = -1\r\n        // let nmaterialcode = -1\r\n        const nsampletypecode = parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\r\n        const inputParem = {\r\n            child: control.child,\r\n            source: control.source,\r\n            primarykeyField: control.valuemember,\r\n            value: comboData.value,\r\n            item: comboData.item,\r\n            label: comboName,\r\n            nameofdefaultcomp: control.name\r\n        }\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n        }\r\n        if (control.name === 'Product') {\r\n            const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\r\n            const ncategorybasedflow = selectedRecord[ProductCategory[0].label] &&\r\n                selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n            nproductcatcode = selectedRecord[ProductCategory[0].label] &&\r\n                selectedRecord[ProductCategory[0].label].value\r\n            if (ncategorybasedflow !== 3) {\r\n                product = true\r\n                nproductcode = selectedRecord[comboName] &&\r\n                    selectedRecord[comboName].value;\r\n            }\r\n\r\n        }\r\n        else if (control.name === 'Instrument') {\r\n            const InstrumentCategory = this.props.comboComponents.filter(x => x.name === \"Instrument Category\");\r\n            const ncategorybasedflow = selectedRecord[InstrumentCategory[0].label] &&\r\n                selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n            nproductcatcode = selectedRecord[InstrumentCategory[0].label] &&\r\n                selectedRecord[InstrumentCategory[0].label].value\r\n            if (ncategorybasedflow !== 3) {\r\n                instrument = true\r\n                nproductcode = selectedRecord[comboName] &&\r\n                    selectedRecord[comboName].value;\r\n            }\r\n\r\n        }\r\n        else if (control.name === 'Material') {\r\n            const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\r\n            const ncategorybasedflow = selectedRecord[MaterialCategory[0].label] &&\r\n                selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n            nproductcatcode = selectedRecord[MaterialCategory[0].label] &&\r\n                selectedRecord[MaterialCategory[0].label].value\r\n            if (ncategorybasedflow !== 3) {\r\n                material = true\r\n                nproductcode = selectedRecord[comboName] &&\r\n                    selectedRecord[comboName].value;\r\n            }\r\n\r\n        }\r\n        else if (control.name === 'Product Category') {\r\n            const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n            nproductcatcode = comboData.value;\r\n            const ncategorybasedflow = comboData &&\r\n                comboData['item']['jsondata']['ncategorybasedflow'];\r\n            if (ncategorybasedflow === 3) {\r\n                productCategory = true\r\n            } else {\r\n                inputParem[\"ProductName\"] = Product[0].label\r\n                // nproductcode = selectedRecord[comboName] &&\r\n                // selectedRecord[comboName].value;\r\n                product = true\r\n            }\r\n        }\r\n        else if (control.name === 'Instrument Category') {\r\n            const Instrument = this.props.comboComponents.filter(x => x.name === \"Instrument\");\r\n            nproductcatcode = comboData.value;\r\n            const ncategorybasedflow = comboData &&\r\n                comboData['item']['jsondata']['ncategorybasedflow'];\r\n            if (ncategorybasedflow === 3) {\r\n                instrumentCategory = true\r\n            } else {\r\n                inputParem[\"InstrumentName\"] = Instrument[0].label\r\n                // nproductcode = selectedRecord[comboName] &&\r\n                // selectedRecord[comboName].value;\r\n                instrument = true\r\n            }\r\n        }\r\n        else if (control.name === 'Material Category') {\r\n            const Material = this.props.comboComponents.filter(x => x.name === \"Material\");\r\n            nproductcatcode = comboData.value;\r\n            const ncategorybasedflow = comboData &&\r\n                comboData['item']['jsondata']['ncategorybasedflow'];\r\n            if (ncategorybasedflow === 3) {\r\n                materialCategory = true\r\n            } else {\r\n                inputParem[\"MaterialName\"] = Material[0].label\r\n                // nproductcode = selectedRecord[comboName] &&\r\n                // selectedRecord[comboName].value;\r\n                material = true\r\n            }\r\n        }\r\n        else if (control.name === 'Material Type') {\r\n            const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\r\n            //nproductcatcode = -1;\r\n            // const ncategorybasedflow = comboData &&\r\n            //     comboData['item']['jsondata']['ncategorybasedflow'];\r\n            // if (ncategorybasedflow === 3) {\r\n            //     productCategory = true\r\n            // } else {\r\n            inputParem[\"MaterialCategoryName\"] = MaterialCategory[0].label\r\n            // nproductcode = selectedRecord[comboName] &&\r\n            // selectedRecord[comboName].value;\r\n            materialType = true\r\n            //  }\r\n        }\r\n\r\n        if (control.child && control.child.length > 0) {\r\n            childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\")\r\n            childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n                return null;\r\n            })\r\n\r\n            parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\")\r\n            const mapOfFilter = {\r\n                nproductcode, nproductcatcode,\r\n                nsampletypecode: nsampletypecode,\r\n            }\r\n            this.props.getChildValues(inputParem,\r\n                this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                [...childComboList, ...parentList], productCategory, product, mapOfFilter,\r\n                instrumentCategory, instrument, materialCategory, material, materialType)\r\n        } else {\r\n\r\n            // if (productCategory) {\r\n            //     const ncategorybasedflow = selectedRecord[comboName] &&\r\n            //         selectedRecord[comboName].value;\r\n\r\n            // } else if\r\n            if (product || productCategory || instrument ||\r\n                material || materialCategory || instrumentCategory || materialType) {\r\n                // const nproductcode = selectedRecord[comboName] &&\r\n                //     selectedRecord[comboName].value;\r\n                const mapOfFilter = {\r\n                    nproductcode, nproductcatcode,\r\n                    nsampletypecode: nsampletypecode,\r\n                }\r\n\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                    childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                    [...childComboList, ...parentList], productCategory, product, mapOfFilter,\r\n                    instrumentCategory, instrument, materialCategory, material)\r\n            } else {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event, radiotext) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            const value = selectedRecord[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedRecord[event.target.name] = value.slice(indexcomma + 1)\r\n\r\n                            } else {\r\n                                selectedRecord[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedRecord[event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedRecord[event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedRecord[event.target.name] = radiotext;\r\n            }\r\n        }\r\n        else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = radiotext;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnSubSampleChange = (event, radiotext) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectComponent['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectComponent['timeonly'] = false;\r\n            }\r\n            const value = selectComponent[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectComponent[event.target.name] = value.slice(indexcomma + 1)\r\n\r\n                            } else {\r\n                                selectComponent[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            //  const  indexcomma= value.indexOf(\",\")\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectComponent[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectComponent[event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectComponent[event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectComponent[event.target.name] = radiotext;\r\n            }\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n\r\n    onComboSubSampleChange = (comboData, control, customName) => {\r\n        let parentList = []\r\n        let childComboList = []\r\n        let childColumnList = {}\r\n\r\n        let comboName = customName || control.label;\r\n        const selectComponent = this.state.selectComponent || {};\r\n        const inputParem = {\r\n            child: control.child,\r\n            source: control.source,\r\n            primarykeyField: control.valuemember,\r\n            value: comboData.value,\r\n            item: comboData.item,\r\n            label: comboName,\r\n            nameofdefaultcomp: control.name\r\n        }\r\n        if (comboData) {\r\n            selectComponent[comboName] = comboData;\r\n        } else {\r\n            selectComponent[comboName] = []\r\n        }\r\n        if (control.child && control.child.length > 0) {\r\n            childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents,\r\n                control.child, \"label\")\r\n            childColumnList = {};\r\n            childColumnList = childComboList.map(columnList => {\r\n                const val = comboChild(this.state.SubSamplecomboComponents,\r\n                    columnList, childColumnList, false);\r\n                return val.childColumnList\r\n            })\r\n\r\n            parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent,\r\n                control.child, \"label\")\r\n\r\n            this.props.getChildValues(inputParem,\r\n                this.props.Login.userInfo, selectComponent, this.props.Login.SubSamplecomboData,\r\n                childComboList, childColumnList, this.state.SubSamplewithoutCombocomponent,\r\n                [...childComboList, ...parentList])\r\n        } else {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectComponent }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericInputSubSampleChange = (value, name) => {\r\n        let selectComponent = this.state.selectComponent\r\n        selectComponent[name] = value;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    handleDateChangeComp = (dateValue, dateName, screenName) => {\r\n        const { selectedRecord } = this.state;\r\n        if (screenName === 'component') {\r\n            const selectComponent = this.state.selectComponent;\r\n            selectComponent[dateName] = dateValue;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectComponent\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            selectedRecord[dateName] = dateValue;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateSubSampleChange = (dateValue, dateName) => {\r\n        const { selectComponent } = this.state;\r\n        selectComponent[dateName] = dateValue;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let masterStatus = this.props.masterStatus;\r\n        // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\r\n        let check = false;\r\n        if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\r\n\r\n           const specBasedComponent=this.props.Login.selectedSpec&&\r\n           this.props.Login.selectedSpec.item.ncomponentrequired===3?true:false \r\n\r\n            this.sampleeditable = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n         \r\n            if (specBasedComponent) {\r\n                this.subSampleDataGridList = [\r\n                    { \"idsName\": \"IDS_SPECIMEN\", \"dataField\": \"scomponentname\", width: \"200px\" }\r\n                ]\r\n            }\r\n    \r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            // let label = ''\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        // label = label + '&' + componentrow.label\r\n                                        this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label, width: \"150px\" })\r\n                                    }\r\n                                    return this.subSampleDataGridList;\r\n                                })\r\n                            } else {\r\n                                if (component.mandatory)\r\n                                    this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label, width: \"150px\" });\r\n    \r\n                                return this.subSampleDataGridList\r\n                            }\r\n                            // if (label !== '') {\r\n                            //     this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": label.substring(1), \"dataField\": label.substring(1),width: \"150px\" })\r\n                            // }\r\n                        })\r\n    \r\n                    })\r\n                })\r\n\r\n            this.setState({ selectedSpec: this.props.Login.selectedSpec,\r\n                specBasedComponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\r\n            this.setState({ selectedTestData: this.props.Login.selectedTestData });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\r\n            this.setState({ selectComponent: this.props.Login.selectComponent });\r\n            check = true\r\n        }\r\n\r\n        if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\r\n            this.setState({ SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\r\n            this.setState({ SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents });\r\n            check = true\r\n        }\r\n        if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\r\n            this.setState({ parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList });\r\n            check = true\r\n        }\r\n\r\n\r\n\r\n        if (check) {\r\n            this.PrevoiusLoginData = previousProps\r\n        }\r\n        if (masterStatus !== \"\" && masterStatus !== undefined) {\r\n            toast.warn(masterStatus);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { masterStatus: \"\" }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            masterStatus = \"\";\r\n        }\r\n        if (this.props.innerPopup !== this.state.innerTop) {\r\n            setTimeout(() => {\r\n                let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\r\n                if (this.myRef && this.myRef.current) {\r\n                    this.myRef.current.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n                if (scrollDoc) {\r\n                    scrollDoc.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n            }, 100)\r\n            this.setState({\r\n                innerTop: this.props.innerPopup\r\n            })\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.state.showFilter\r\n        this.setState({\r\n            showFilter\r\n        })\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        this.setState({\r\n            showFilter: false\r\n        })\r\n    }\r\n    AddSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: true\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: true,\r\n                screenName: \"Specification\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    // addTestslide = (e) => {\r\n    //     this.setState({\r\n    //         loadTest: true\r\n    //     })\r\n    // }\r\n\r\n    addTestslide = (selectedComponent, nneedsubsample, specBasedComponent) => {\r\n        if (nneedsubsample) {\r\n            if (selectedComponent && Object.keys(selectedComponent).length > 0) {\r\n                delete selectedComponent[\"selected\"];\r\n                this.props.getTest(selectedComponent, this.props.Login,\r\n                    nneedsubsample, specBasedComponent);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: nneedsubsample ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n            }\r\n        } else {\r\n            const selectedComponent1 = {\r\n                nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\r\n                slno: 1\r\n            }\r\n            this.props.getTest(selectedComponent1,\r\n                this.props.Login,\r\n                nneedsubsample, specBasedComponent);\r\n        }\r\n    }\r\n\r\n    closeSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: false,\r\n        //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n        //      screenName:\"Specification\"\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: false,\r\n                selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeComponent = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadComponent: false,\r\n                selectComponent: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeTest = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadTest: false,\r\n                selectedTestData: {},\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeSubSample = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSubSample: false,\r\n                selectedSubSample: {},\r\n                showSaveContinue: false,\r\n                selectComponent: {},\r\n                selectedTestData: {},\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onspecChange = (event, fieldName) => {\r\n        if (event !== null) {\r\n            const selectedRecord = this.state.selectedRecord;\r\n            // const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\r\n            //     this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\r\n            selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\r\n            selectedRecord[\"nallottedspeccode\"] = event;\r\n            //  if(this.props.Login.Component.length=== 0 ){\r\n            this.setState({ selectedRecord });\r\n            // }else{\r\n            //     if(event.value!== oldpromarycode ){\r\n            //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n            //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\r\n            //     }\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_REGISTRATION\",\r\n            operation: \"get\",\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedNode: event.item,\r\n            selectedRecord: this.state.selectedRecord,\r\n\r\n            primaryKey: event.primaryKey\r\n        };\r\n        if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\r\n            this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\r\n        }\r\n\r\n\r\n        // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\r\n        //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\r\n        // } else {\r\n        //     // if(event.key!== this.props.Login.ActiveKey ){\r\n        //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n        //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\r\n        //     // }\r\n        // }\r\n    }\r\n\r\n\r\n    handleComponentRowClick = (event) => {\r\n        let selectedComponent = event.dataItem;\r\n        let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                SelectedTest, selectedComponent,\r\n                testDataState: {\r\n                    skip: 0, take: this.props.Login.settings ?\r\n                        parseInt(this.props.Login.settings[14]) : 5\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    };\r\n\r\n\r\n    AddComponent = () => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            this.props.AddComponents(Map);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onComponentChange = (comboData, fieldName, nneedsubsample) => {\r\n        if (comboData !== null) {\r\n            //  if (!nneedsubsample) {\r\n            const selectComponent = this.state.selectComponent || {};\r\n            if (fieldName === 'ntzdreceivedate') {\r\n                selectComponent[\"ntzdreceivedate\"] = comboData;\r\n                this.setState({ selectComponent })\r\n            } else {\r\n                // const oldspecsampletypecode = selectComponent.nspecsampletypecode\r\n                // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\r\n                //     //selectComponent[\"nneedservice\"] = true;\r\n                // }\r\n                selectComponent[fieldName] = comboData;\r\n                selectComponent[\"Sample Name\"] = comboData.label;\r\n                selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\r\n                this.props.componentTest(selectComponent, false, this.state.specBasedComponent,\r\n                    this.props.Login.Component);\r\n            }\r\n\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         selectComponent\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            // } else {\r\n            //     const selectComponent = this.state.selectComponent || {};\r\n            //     selectComponent[fieldName] = comboData;\r\n            //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\r\n            //     this.setState({ selectComponent })\r\n            // }\r\n        }\r\n\r\n    }\r\n    onInputComponentOnChange = (event) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent })\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         selectComponent\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveComponentClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.ComponentObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.ComponentObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n            objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = selectedComponent[\"dreceiveddate\"];\r\n            objcomponent[\"dreceiveddate\"] = dreceiveddate;\r\n            objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\r\n            objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\r\n            objcomponent[\"jsondata\"] = \"\"\r\n            selectedComponent = { ...selectedComponent, ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component, selectedComponent: selectedComponent, loadComponent: false, openChildModal: false,\r\n                        selectComponent: undefined, parentPopUpSize: \"xl\", Test, SelectedTest: Test[selectedComponent.slno]\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    ComponentObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false, selectedComponent: saveComponent,\r\n                    SelectedTest: [], selectComponent: {}, showSaveContinue: false, loadComponent: false, parentPopUpSize: \"xl\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    ComponentObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            objcomponent1[\"scomments\"] = \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: saveComponent, SelectedTest: [], selectComponent: objcomponent1 }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onSaveSubSampleClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.SubSampleObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.SubSampleObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n            // const defaulttimezone = this.props.Login.defaulttimezone;\r\n            // const userInfo = this.props.Login.userInfo;\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n\r\n            objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\"\r\n            // objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            // if(this.props.specBasedComponent){\r\n            //     objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            //     objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            //     objcomponent[\"nspecsampletypecode\"] = selectedComponent[\"nspecsampletypecode\"] ?selectedComponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     objcomponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n\r\n\r\n\r\n            const subSampleDetail = getRegistrationSubSample(selectedComponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec)\r\n\r\n            objcomponent = { ...objcomponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            const index1 = subSampleDataGridList.findIndex(x => x.slno === objcomponent.slno)\r\n            if (index1 !== -1)\r\n                subSampleDataGridList[index1] = { ...objcomponent['jsonuidata'], ...objcomponent }\r\n\r\n            // objcomponent[\"jsondata\"] = {}\r\n            // objcomponent[\"jsonuidata\"] = {}\r\n\r\n\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                    // let componentrowlabel = ''\r\n            //                  //   let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n            //                                 { value: selectedComponent[componentrow.label].value, label: selectedComponent[componentrow.label].label } : -1\r\n            //                            // if (componentrow.mandatory || selectedComponent[componentrow.label]) {\r\n            //                               //  componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                                // componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label].label\r\n            //                           //  }\r\n            //                             objcomponent[\"jsonuidata\"][componentrow.label]=selectedComponent[componentrow.label]?selectedComponent[componentrow.label].label:\"\"\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                     selectedComponent[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                     selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                     convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                         selectedComponent[componentrow.label] : new Date(), userInfo) :\r\n            //                                     selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                         selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                         selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\r\n\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ?\r\n            //                                     { value: selectedComponent[`tz${componentrow.label}`].value, label: selectedComponent[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                     selectedComponent[\"jsonuidata\"][`tz${componentrow.label}`]=selectedComponent[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             // dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n            //                                 selectedComponent[componentrow.label] : \"\"\r\n            //                                 objcomponent[\"jsonuidata\"][componentrow.label]=objcomponent[\"jsondata\"][componentrow.label]\r\n            //                             // if (selectedComponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                     })\r\n            //                    // objcomponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n            //                             { value: selectedComponent[component.label].value, label: selectedComponent[component.label].label } : -1\r\n\r\n            //                             objcomponent[\"jsonuidata\"][component.label] =selectedComponent[component.label] ? selectedComponent[component.label].label :\"\"\r\n            //                     }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                 selectedComponent[component.label] : new Date(), userInfo);\r\n\r\n            //                                 objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                                 convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                     selectedComponent[component.label] : new Date(), userInfo) :\r\n            //                                 selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                     selectedComponent[component.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                     objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                         }\r\n            //                         if (component.timezone) {\r\n            //                             objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ?\r\n            //                                 { value: selectedComponent[`tz${component.label}`].value, label: selectedComponent[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 objcomponent[\"jsonuidata\"][`tz${component.label}`]  = objcomponent[\"jsondata\"][`tz${component.label}`] \r\n            //                         }\r\n            //                         //dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n            //                             selectedComponent[component.label] : \"\"\r\n\r\n            //                             objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n\r\n            //             }\r\n            //             )\r\n            //         })\r\n            //     })\r\n\r\n\r\n            selectedComponent = { ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component,\r\n                        selectedComponent: selectedComponent,\r\n                        loadSubSample: false, openChildModal: false,\r\n                        selectComponent: {}, parentPopUpSize: \"xl\",\r\n                        Test, SelectedTest: Test[selectedComponent.slno],\r\n                        screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                        subSampleDataGridList\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    SubSampleObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        // const defaulttimezone = this.props.Login.defaulttimezone;\r\n        // const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n\r\n\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            // if(this.props.specBasedComponent){\r\n            //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n\r\n            const subSampleDetail = getRegistrationSubSample(objcomponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec)\r\n\r\n            saveComponent = { ...saveComponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\r\n\r\n            // saveComponent[\"jsondata\"] = {}\r\n            // saveComponent[\"jsonuidata\"] = {}\r\n\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                    // let componentrowlabel = ''\r\n            //                    // let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\r\n            //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\r\n            //                             // }\r\n            //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\r\n\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                     objcomponent[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\r\n            //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\r\n            //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             // dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 objcomponent[componentrow.label] : \"\"\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             // if (objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                     })\r\n            //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\r\n\r\n            //                         }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                 objcomponent[component.label] : new Date(), userInfo);\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                                 convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) :\r\n            //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\r\n            //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n\r\n            //                                 }\r\n            //                         if (component.timezone) {\r\n            //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\r\n            //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\r\n            //                         }\r\n            //                         //dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             objcomponent[component.label] : \"\"\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n\r\n            //             }\r\n            //             )\r\n            //         })\r\n            //     })\r\n\r\n            //  saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            Component.unshift(saveComponent);\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            const selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                //  item.item['slno']=saveComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            // selectedTestArray.map((item,i)=>{\r\n            //    selectedTestArray[i]['slno']=saveComponent.slno;\r\n            // })\r\n            // let selectedComponent = this.props.Login.selectedComponent;\r\n            const Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false,\r\n                    selectedComponent: saveComponent,\r\n                    loadSubSample: false,\r\n                    selectComponent: {},\r\n                    showSaveContinue: false,\r\n                    parentPopUpSize: \"xl\",\r\n                    SelectedTest: Test[saveComponent.slno],\r\n                    Test: Test, selectedTestData: {},\r\n                    screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                    subSampleDataGridList\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    SubSampleObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        // const defaulttimezone = this.props.Login.defaulttimezone;\r\n        // const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            // if(this.props.specBasedComponent){\r\n            //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n\r\n\r\n            const subSampleDetail = getRegistrationSubSample(objcomponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent, \r\n                this.state.selectedSpec)\r\n\r\n            saveComponent = { ...saveComponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\r\n\r\n            // saveComponent[\"jsondata\"] = {}\r\n            // saveComponent[\"jsonuidata\"] = {}\r\n\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //   this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                    // let componentrowlabel = ''\r\n            //                    // let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\r\n            //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\r\n            //                             // }\r\n            //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\r\n\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                     objcomponent[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\r\n            //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\r\n            //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             // dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 objcomponent[componentrow.label] : \"\"\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             // if (objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                     })\r\n            //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\r\n\r\n            //                         }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                 objcomponent[component.label] : new Date(), userInfo);\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                                 convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) :\r\n            //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\r\n            //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n\r\n            //                                 }\r\n            //                         if (component.timezone) {\r\n            //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\r\n            //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\r\n            //                         }\r\n            //                         //dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             objcomponent[component.label] : \"\"\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n\r\n            //             }\r\n            //             )\r\n            //         })\r\n            //     })\r\n\r\n            //   saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ?\r\n            //     this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            Component.unshift(saveComponent);\r\n            // objcomponent1[\"scomments\"] = \"\";\r\n            //objcomponent1[\"ssubsamplename\"] = \"\";\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            let selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                // item.item['slno']=saveComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            // selectedTestArray.map((item,i)=>{\r\n            //     selectedTestArray[i]['slno']=saveComponent.slno;\r\n            // })\r\n            let Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            const updateInfo = {\r\n                Component, selectedComponent: saveComponent,\r\n                selectComponent: objcomponent1,\r\n                SelectedTest: Test[saveComponent.slno],\r\n                Test: Test, subSampleDataGridList//, selectedTestData: {}\r\n            }\r\n            this.addSubSampleSaveContinue(updateInfo, selectedTestData)\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         Component, selectedComponent: saveComponent,\r\n            //         selectComponent: objcomponent1,\r\n            //         SelectedTest: Test[saveComponent.slno],\r\n            //         Test: Test, selectedTestData: {}\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    addSubSampleSaveContinue = (updateInfo, selectedTestData) => {\r\n        const Map = {}\r\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        Map[\"testrequired\"] = false;\r\n        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n        Map[\"nspecsampletypecode\"] = updateInfo.selectedComponent[\"nspecsampletypecode\"] ?\r\n            updateInfo.selectedComponent[\"nspecsampletypecode\"] : -1\r\n        this.props.addSubSampleSaveContinue(updateInfo, Map, this.state.specBasedComponent,\r\n            this.props.Login.Components, selectedTestData, this.props.Login.lstComponent)\r\n    }\r\n\r\n    editComponent = (editselectedcomponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\r\n    }\r\n\r\n\r\n    editSubSample = (editselectedcomponent, specBasedComponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        const defaulttimezone = this.props.Login.defaulttimezone;\r\n        const userInfo = this.props.Login.userInfo;\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n\r\n\r\n\r\n        let selectComponent = this.state.selectComponent;\r\n        selectComponent['nspecsampletypecode'] = objComponent['nspecsampletypecode'] ?\r\n            objComponent['nspecsampletypecode'] : -1\r\n        if (specBasedComponent) {\r\n            selectComponent['ncomponentcode'] = { value: objComponent['ncomponentcode'] ? objComponent['ncomponentcode'] : -1, label: objComponent['scomponentname'] ? objComponent['scomponentname'] : \"\" }\r\n\r\n        }\r\n        selectComponent['slno'] = objComponent['slno']\r\n        this.props.Login.masterData.SubSampleTemplate &&\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            return component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                                else if (componentrow.inputtype === \"date\") {\r\n\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        rearrangeDateFormat(userInfo, objComponent[\"jsondata\"][componentrow.label]) : new Date();\r\n\r\n                                    if (componentrow.timezone) {\r\n                                        selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ?\r\n                                            objComponent[\"jsondata\"][`tz${componentrow.label}`] :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                               return null;\r\n                            })\r\n                        }\r\n                        else {\r\n                            if (component.inputtype === \"combo\") {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : -1\r\n                            }\r\n                            else if (component.inputtype === \"date\") {\r\n\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    rearrangeDateFormat(userInfo, objComponent[\"jsondata\"][component.label]) : new Date();\r\n\r\n                                if (component.timezone) {\r\n                                    selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ?\r\n                                        objComponent[\"jsondata\"][`tz${component.label}`] :\r\n                                        defaulttimezone ? defaulttimezone : -1\r\n                                }\r\n                            }\r\n                            else {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : \"\"\r\n                            }\r\n                            return selectComponent;\r\n                        }\r\n                    }\r\n                    )\r\n                })\r\n            })\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         loadSubSample: true, childoperation: \"update\",\r\n        //         ChildscreenName: \"SubSample\",\r\n        //         screenName: \"SubSample\",\r\n        //         openChildModal: false, selectComponent,\r\n        //         parentPopUpSize: \"lg\", loading: false\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo)\r\n        this.props.editSubSample(inputData, selectComponent,\r\n            this.props.Login.userInfo, specBasedComponent);\r\n    }\r\n\r\n    deleteComponent = (event) => {\r\n        const dataItem = event;\r\n        const Component = this.props.Login.Component;\r\n        const subSampleDataGridList = this.props.Login.subSampleDataGridList;\r\n        const Test = this.props.Login.Test;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n        const index = Component.findIndex(x => x.slno === dataItem.slno);\r\n        if (index > -1) {\r\n            Component.splice(index, 1);\r\n            subSampleDataGridList.splice(index, 1);\r\n        }\r\n        Test && Test[dataItem.slno] && delete Test[dataItem.slno]\r\n        SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0].slno];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { Component, selectedComponent: Component[0], Test, SelectedTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    deleteTest = (event) => {\r\n        const dataItem = event;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n        const Test = this.props.Login.Test;\r\n        const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\r\n        if (index > -1) {\r\n            SelectedTest.splice(index, 1);\r\n        }\r\n        Test[selectedComponent.slno] = SelectedTest;\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { Test, SelectedTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveTestClick = (saveType, formRef) => {\r\n        let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\r\n        let selectedTestArray = [];\r\n        selectedTestData.map((item) => {\r\n            return selectedTestArray.push(item.item);\r\n        });\r\n        let updateInfo = {}\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n        let Test = this.props.Login.Test || [];\r\n        if (this.props.Login.masterData.nneedsubsample) {\r\n            const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { SelectedTest: Test[selectedComponent.slno], Test: Test, selectedTestData: {}, loadTest: false, parentPopUpSize: \"xl\" }\r\n            }\r\n        } else {\r\n            selectedComponent = { subsamplename: \"NA\", slno: 1 }\r\n            const Component = [selectedComponent]\r\n            const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedComponent,\r\n                    Component,\r\n                    SelectedTest: Test[selectedComponent.slno],\r\n                    Test: Test, selectedTestData: {}, loadTest: false,\r\n                    parentPopUpSize: \"xl\"\r\n                    , screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    componentDataStateChange = (event) => {\r\n        this.setState({\r\n            componentDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    testDataStateChange = (event) => {\r\n        this.setState({\r\n            testDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    subSampleDataStateChange = (event) => {\r\n        this.setState({\r\n            subSampleDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    addsubSample = (specBasedComponent) => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            let data = this.state.SubSamplecomboComponents || []\r\n            const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || []\r\n            const Layout = this.props.Login.masterData.SubSampleTemplate\r\n                && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n            if (SubSamplewithoutCombocomponent.length === 0 || data.length === 0) {\r\n                if (Layout !== undefined) {\r\n                    Layout.map(row => {\r\n                        return row.children.map(column => {\r\n                            return column.children.map(component => {\r\n                                return component.hasOwnProperty(\"children\") ?\r\n                                    component.children.map(componentrow => {\r\n                                        if (componentrow.inputtype === \"combo\") {\r\n                                            data.push(componentrow)\r\n                                        } else {\r\n                                            SubSamplewithoutCombocomponent.push(componentrow)\r\n                                        }\r\n                                        return null;\r\n                                    })\r\n                                    : component.inputtype === \"combo\" ? data.push(component) :\r\n                                        SubSamplewithoutCombocomponent.push(component)\r\n                            })\r\n                        })\r\n                    })\r\n                    const SubSamplecomboComponents = data\r\n                    let childColumnList = {};\r\n                    data.map(columnList => {\r\n                        const val = comboChild(data, columnList, childColumnList, true);\r\n                        data = val.data;\r\n                        childColumnList = val.childColumnList\r\n                        return null;\r\n                    })\r\n\r\n                    this.props.addsubSample(this.props.Login.masterData,\r\n                        this.props.Login.userInfo, data, this.state.selectComponent,\r\n                        childColumnList, SubSamplecomboComponents,\r\n                        SubSamplewithoutCombocomponent, specBasedComponent,\r\n                        Map, this.props.Login.Component, true)\r\n\r\n                    //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\r\n                }\r\n            } else {\r\n                this.props.addsubSample(this.props.Login.masterData,\r\n                    this.props.Login.userInfo, data, this.state.selectComponent,\r\n                    this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents,\r\n                    this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map,\r\n                    this.props.Login.Component, false, this.props.Login.SubSamplecomboData,\r\n                    this.props.Login.TestCombined)\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let operation = this.props.Login.operation;\r\n        if (operation === \"update\") {\r\n            this.onUpdateRegistration(saveType, formRef, operation);\r\n        }\r\n        else {\r\n            if (operation === \"create\") {\r\n                this.insertRegistration(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    onUpdateRegistration(saveType, formRef, operation, flag) {\r\n        const inputData = { userinfo: this.props.Login.userInfo };\r\n\r\n        let initialParam = {\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            fromdate: \"\",\r\n            todate: \"\",\r\n            nflag: 2,\r\n            ntype: 2,\r\n            npreregno: String(this.state.selectedRecord.npreregno),\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData\r\n                && this.props.Login.masterData.nneedsubsample,\r\n            checkBoxOperation: 3,\r\n            activeSampleTab: this.props.Login.activeSampleTab||\"IDS_SAMPLEATTACHMENTS\",\r\n            activeTestTab: this.props.Login.activeTestTab|| \"IDS_PARAMETERRESULTS\"\r\n\r\n        }\r\n\r\n        inputData[\"initialparam\"] = initialParam;\r\n        // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\r\n        //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        const param = getRegistration(this.props.Login.masterData,\r\n            this.state.selectedRecord, this.state.selectedSpec,\r\n            this.props.Login.masterData.registrationTemplate.jsondata,\r\n            this.props.Login.userInfo, this.props.Login.defaulttimezone, \r\n            operation,this.props.comboComponents);\r\n\r\n        inputData[\"registration\"] = param.sampleRegistration\r\n        inputData[\"DateList\"] = param.dateList\r\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n            && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n        inputData[\"nneedsubsample\"] = this.props.Login.masterData\r\n            && this.props.Login.masterData.nneedsubsample;\r\n        inputData[\"checkBoxOperation\"] = 3;\r\n        inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab||\"IDS_SAMPLEATTACHMENTS\"\r\n        inputData[\"activeTestTab\"] = this.props.Login.activeTestTab|| \"IDS_PARAMETERRESULTS\"\r\n        // Object.keys(this.state.selectedRecord).map(key => {\r\n        //     if (typeof this.state.selectedRecord[key] === \"object\") {\r\n        //         if (this.state.selectedRecord[key] === null) {\r\n        //             return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n        //         }\r\n        //         else if (this.state.selectedRecord[key] instanceof Date) {\r\n        //             return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\r\n        //         }\r\n        //         else {\r\n        //             return inputData[\"registration\"][key] = this.state.selectedRecord[key].value\r\n        //         }\r\n        //     }\r\n        //     else {\r\n        //         return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n        //     }\r\n        // }\r\n        //  )\r\n        // console.log(\"edit:\", inputData);\r\n\r\n        // if (inputData[\"registration\"] ) {\r\n        //     delete inputData[\"registration\"][\"esignpassword\"]\r\n        //     delete inputData[\"registration\"][\"esigncomments\"]\r\n        //     delete inputData[\"registration\"][\"agree\"]\r\n        // }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"Registration\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef,\r\n            action: 'editSample',\r\n            showConfirmAlert: false,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            // dataState:undefined, selectedId\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType, parentPopUpSize: \"lg\",\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    findSubsampleDateList(subsampletemplate) {\r\n        const dateList = []\r\n        subsampletemplate && subsampletemplate.map(row => {\r\n            return row.children.map(column => {\r\n                return column.children.map(component => {\r\n                    if (component.hasOwnProperty(\"children\")) {\r\n                        return component.children.map(componentrow => {\r\n                            if (componentrow.inputtype === \"date\") {\r\n                                dateList.push(componentrow.label)\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        if (component.inputtype === \"date\") {\r\n                            dateList.push(component.label)\r\n                        }\r\n                        return dateList\r\n                    }\r\n                }\r\n                )\r\n            })\r\n        })\r\n        return dateList;\r\n    }\r\n\r\n    insertRegistration() {\r\n        let Components = this.props.Login.Component;\r\n        if (Components && Components.length > 0) {\r\n            let Test = this.props.Login.Test;\r\n            let Map = {};\r\n            Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n            Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [], this.state.specBasedComponent);\r\n            Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\r\n            //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\r\n            // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\r\n            Map[\"FromDate\"] = \"\";\r\n            Map[\"ToDate\"] = \"\";\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n            Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n            Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n            Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\r\n            Map[\"checkBoxOperation\"] = 3;\r\n\r\n\r\n            const param = getRegistration(this.props.Login.masterData,\r\n                this.state.selectedRecord, this.state.selectedSpec,\r\n                this.props.Login.masterData.registrationTemplate.jsondata,\r\n                this.props.Login.userInfo, this.props.Login.defaultTimeZone,'create',\r\n                this.props.comboComponents);\r\n            Map[\"Registration\"] = param.sampleRegistration\r\n            Map[\"DateList\"] = param.dateList\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            Map[\"nflag\"] = 2;\r\n            // Map[\"ntype\"] = 2;\r\n            Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n            Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n            Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n\r\n            const inputParam = {\r\n                inputData: Map,\r\n                postParamList: this.props.postParamList,\r\n                action: \"preregister\"\r\n            }\r\n            this.props.insertRegistration(inputParam, this.props.Login.masterData)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLETOPREREGISTER\" }));\r\n        }\r\n\r\n    }\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    render() {\r\n\r\n        let saveType = 1;\r\n        if (this.props.ignoreFormValidation) {\r\n            saveType = 5;\r\n        }\r\n        let buttonLabel = \"Save\";\r\n        let idsLabel = \"IDS_SAVE\";\r\n        if (this.props.buttonLabel) {\r\n            buttonLabel = this.props.buttonLabel;\r\n            idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\r\n        }\r\n        // const testColumnList = [\r\n        //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\r\n        //     { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\r\n        return (\r\n            <Modal\r\n                size={this.props.Login.loadComponent ?\r\n                    'lg' : this.props.Login.loadSpec ? 'lg' :\r\n                        this.props.Login.loadTest ? 'lg' :\r\n                            this.props.Login.loadSubSample ? 'lg' : 'xl'}\r\n                // size={this.props.templateData[0] ?\r\n                //     this.props.templateData[0].children ?\r\n                //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\r\n                backdrop=\"static\"\r\n                //className={this.props.className || \"registrationModel\"}\r\n                className={this.props.className || \"\"}\r\n                show={this.props.Login.openPortal}\r\n                onHide={this.props.closeModal}\r\n                enforceFocus={false}\r\n                dialogClassName=\"modal-dialog-slideout freakerstop\"\r\n                aria-labelledby=\"add-user\">\r\n                {/* <Modal.Header className=\"d-flex align-items-center mb-2\"> */}\r\n                <Modal.Header className=\"d-flex align-items-center\">\r\n                    <Modal.Title id=\"add-user\" className=\"header-primary flex-grow-1\">\r\n                        {this.props.graphView === true ? \"\" : this.props.Login.inputParam ?\r\n                            this.props.Login.esign === true ?\r\n                                <FormattedMessage id={\"IDS_ESIGN\"} defaultMessage=\"Esign\" />\r\n                                : this.props.loginoperation ?\r\n                                    <FormattedMessage id={this.props.Login.screenName} />\r\n                                    : <>\r\n                                        {this.props.operation ?\r\n                                            <>\r\n                                                <FormattedMessage id={this.props.Login.operation && \"IDS_\".concat(this.props.Login.operation.toUpperCase())}\r\n                                                    defaultMessage='Add' />\r\n                                                {\" \"}\r\n                                                {\r\n                                                    this.props.Login.screenName ?\r\n                                                        <FormattedMessage id={this.props.Login.screenName} />\r\n                                                        : \"\"\r\n                                                }\r\n                                            </>\r\n                                            :\r\n                                            this.props.Login.screenName ?\r\n                                                <FormattedMessage id={this.props.Login.screenName} />\r\n                                                : \"\"}\r\n                                    </>\r\n                            : \"\"}\r\n                    </Modal.Title>\r\n                    <Button className=\"btn-user btn-cancel\" variant=\"\" onClick={this.props.Login.loadSpec ?\r\n                        this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ?\r\n                            this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample :\r\n                                this.props.closeModal}>\r\n                        <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                    </Button>\r\n                    {this.props.esign === true ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(3)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SUBMIT' defaultMessage='Submit' />\r\n                        </Button>\r\n                        :\r\n                        (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ?\r\n                            <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                <FormattedMessage id='IDS_VALIDATE' defaultMessage='Validate' />\r\n                            </Button> :\r\n                            this.props.showCalculate ?\r\n                                <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                    <FontAwesomeIcon icon={faSave} /> { }\r\n                                    <FormattedMessage id='IDS_CALCULATE' defaultMessage='Calculate' />\r\n                                </Button> :\r\n                                this.props.showParam === true && this.props.showExecute ?\r\n                                    <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                        <FontAwesomeIcon icon={faCalculator} /> { }\r\n                                        <FormattedMessage id='IDS_EXECUTE' defaultMessage='Execute' />\r\n                                    </Button> :\r\n                                    this.props.noSave || this.props.graphView ?\r\n                                        this.props.operation === \"view\" ? \"\"\r\n                                            : <Button className=\"btn btn-user btn-primary-blue\" role=\"button\"\r\n                                                onClick={this.props.resetView}\r\n                                            >\r\n                                                <FormattedMessage id={\"IDS_RESET\"} defaultMessage='Reset' />\r\n                                            </Button>\r\n                                        : this.props.hideSave ? \"\" :\r\n                                            <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                                <FormattedMessage id={idsLabel} defaultMessage={buttonLabel} />\r\n                                            </Button>\r\n                    }\r\n                    {this.props.Login.operation === \"create\" && this.props.Login.showSaveContinue ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(2)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVECONTINUE' defaultMessage='Save & Continue' />\r\n                        </Button>\r\n                        : \"\"\r\n                    }\r\n                    {(this.props.operation === \"create\" || this.props.operation === \"update\")\r\n                        && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(1)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVE' defaultMessage='Save' />\r\n                        </Button>\r\n                        : \"\"}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <ModalInner ref={this.myRef}>\r\n                        <Card.Body>\r\n                            {/* <SplitterLayout borderColor=\"#999\"\r\n                                primaryIndex={1} percentage={true}\r\n                                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                primaryMinSize={40}\r\n                                secondaryMinSize={20}\r\n                                vertical={true}\r\n                            > */}\r\n                            <React.Fragment>\r\n                                <Form ref={this.formRef}>\r\n                                    {\r\n                                        this.props.Login.loadSpec ?\r\n                                            <AddSpecification\r\n                                                AgaramTree={this.props.Login.AgaramTree}\r\n                                                openNodes={this.props.Login.OpenNodes}\r\n                                                handleTreeClick={this.onTreeClick}\r\n                                                focusKey={this.props.Login.FocusKey}\r\n                                                activeKey={this.props.Login.ActiveKey}\r\n                                                Specification={this.props.Login.Specification}\r\n                                                selectedSpec={this.state.selectedSpec}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                onSpecChange={this.onspecChange}\r\n                                            />\r\n                                            : this.props.Login.loadTest ?\r\n                                                <AddTest\r\n                                                    TestCombined={this.props.Login.TestCombined || []}\r\n                                                    TestChange={this.TestChange}\r\n                                                    selectedTestData={this.props.Login.selectedTestData}\r\n                                                /> : this.props.Login.loadComponent ?\r\n                                                    <AddComponentPopUp\r\n                                                        ref={this.myScrollRef}\r\n                                                        selectComponent={this.state.selectComponent || {}}\r\n                                                        RealSampleTypeValue={this.props.Login.masterData.RealSampleTypeValue || {}}\r\n                                                        RealRegTypeValue={this.props.Login.masterData.RealRegTypeValue || {}}\r\n                                                        RealRegSubTypeValue={this.props.Login.masterData.RealRegSubTypeValue || {}}\r\n                                                        RealFilterStatusValue={this.props.Login.masterData.RealFilterStatusValue || {}}\r\n                                                        formatMessage={this.props.intl.formatMessage}\r\n                                                        handleDateChange={this.handleDateChangeComp}\r\n                                                        Component={this.props.Login.lstComponent || []}\r\n                                                        onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                        // onComboChange={this.onComponentComboChange}\r\n                                                        timeZoneList={this.props.Login.timeZoneList}\r\n                                                        onComponentChange={this.onComponentChange}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        sreceiveddate={this.props.Login.sreceiveddate || []}\r\n                                                        CurrentTime={this.props.Login.CurrentTime}\r\n                                                    />\r\n                                                    : this.props.Login.loadSubSample ?\r\n                                                        <AddSubSample\r\n                                                            Component={this.props.Login.lstComponent || []}\r\n                                                            selectComponent={this.state.selectComponent}\r\n                                                            // Unit={this.props.Login.Unit || []}\r\n                                                            onComponentChange={this.onComponentChange}\r\n                                                            onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                            templateData={this.props.Login.masterData.SubSampleTemplate &&\r\n                                                                this.props.Login.masterData.SubSampleTemplate.jsondata}\r\n                                                            userInfo={this.props.Login.userInfo}\r\n                                                            timeZoneList={this.props.Login.timeZoneList}\r\n                                                            defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                            handleDateChange={this.handleDateSubSampleChange}\r\n                                                            onInputOnChange={this.onInputOnSubSampleChange}\r\n                                                            onNumericInputChange={this.onNumericInputSubSampleChange}\r\n                                                            comboData={this.props.Login.SubSamplecomboData}\r\n                                                            onComboChange={this.onComboSubSampleChange}\r\n                                                            TestCombined={this.props.Login.TestCombined || []}\r\n                                                            TestChange={this.TestChange}\r\n                                                            selectedTestData={this.state.selectedTestData}\r\n                                                            childoperation={this.props.Login.childoperation}\r\n                                                            specBasedComponent={this.state.specBasedComponent}\r\n                                                        />\r\n                                                        : <RegisterSlideOut\r\n                                                            editfield={this.sampleeditable &&\r\n                                                                this.sampleeditable['sampleeditable']}\r\n                                                            ntransactionstatus={this.props.Login.masterData && this.props.Login.masterData.selectedSample &&\r\n                                                                this.props.Login.masterData.selectedSample.length > 0 && this.props.Login.masterData.selectedSample[0].ntransactionstatus}\r\n                                                            loadPreregister={this.props.Login.loadPreregister}\r\n                                                            selectedSpec={this.state.selectedSpec}\r\n                                                            selectedRecord={this.state.selectedRecord}\r\n                                                            selectedComponent={this.props.Login.selectedComponent}\r\n                                                            subSampleDataGridList={this.props.Login.subSampleDataGridList || []}\r\n                                                            SelectedTest={this.props.Login.SelectedTest}\r\n                                                            selectedTestData={this.state.selectedTestData}\r\n                                                            userRoleControlRights={this.props.userRoleControlRights}\r\n                                                            templateData={this.props.Login.masterData.registrationTemplate &&\r\n                                                                this.props.Login.masterData.registrationTemplate.jsondata}\r\n                                                            handleChange={this.props.handleChange}\r\n                                                            handleDateChange={this.handleDateChange}\r\n                                                            onInputOnChange={this.onInputOnChange}\r\n                                                            onNumericInputChange={this.onNumericInputChange}\r\n                                                            comboData={this.props.Login.comboData}\r\n                                                            onComboChange={this.onComboChange}\r\n                                                            userInfo={this.props.Login.userInfo}\r\n                                                            timeZoneList={this.props.Login.timeZoneList}\r\n                                                            defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                            AddSpec={this.AddSpec}\r\n                                                            addTest={this.addTestslide}\r\n                                                            handleComponentRowClick={this.handleComponentRowClick}\r\n                                                            nneedsubsample={this.props.Login.masterData\r\n                                                                && this.props.Login.masterData.nneedsubsample}\r\n                                                            specBasedComponent={this.state.specBasedComponent}\r\n                                                            AddComponent={this.AddComponent}\r\n                                                            deleteComponent={this.deleteComponent}\r\n                                                            deleteTest={this.deleteTest}\r\n                                                            editComponent={this.editComponent}\r\n                                                            componentColumnList={this.componentColumnList}\r\n                                                            Component={this.props.Login.Component}\r\n                                                            TestChange={this.TestChange}\r\n                                                            testDataState={this.state.testDataState}\r\n                                                            subSampleDataState={this.state.subSampleDataState}\r\n                                                            //componentDataState={this.state.componentDataState}\r\n                                                            testDataStateChange={this.testDataStateChange}\r\n                                                            //componentDataStateChange={this.componentDataStateChange}\r\n                                                            subSampleDataStateChange={this.subSampleDataStateChange}\r\n                                                            addsubSample={this.addsubSample}\r\n                                                            editSubSample={this.editSubSample}\r\n                                                            // onNumericInputChange={this.onNumericInputChange}\r\n                                                            subSampleDataGridFields={this.subSampleDataGridList}\r\n\r\n                                                        />\r\n                                    }\r\n                                </Form>\r\n                            </React.Fragment>\r\n                            {/* </SplitterLayout> */}\r\n                        </Card.Body>\r\n                    </ModalInner>\r\n                </Modal.Body>\r\n            </Modal>\r\n        );\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getChildValues,\r\n    getPreviewTemplate, getNewRegSpecification,\r\n    AddComponents, updateStore, EditComponent, getTest,\r\n    addsubSample, editSubSample, insertRegistration,\r\n    updateRegistration, addSubSampleSaveContinue, componentTest\r\n}\r\n)(injectIntl(PreRegisterSlideOutModal));"]},"metadata":{},"sourceType":"module"}