{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData } from '../components/CommonScript';\nimport { initRequest } from './LoginAction';\nimport { toast } from 'react-toastify';\nimport { intl } from '../components/App';\nexport function selectedAlertView(AlertView, userInfo, masterData, dataState) {\n  return function (dispatch) {\n    let selectedId = AlertView.nsqlquerycode;\n    dispatch(initRequest(true));\n    rsapi.post(\"/alertview/getSelectedAlertView\", {\n      'userinfo': userInfo,\n      \"nsqlquerycode\": AlertView.nsqlquerycode\n    }).then(response => {\n      if (response.data.ReturnStatus === false) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_INVALIDALERTQUERY\"\n        }));\n      }\n\n      masterData = { ...masterData,\n        selectedAlertView: response.data.selectedAlertView,\n        SelectedAlert: response.data.SelectedAlert,\n        sqlQueryName: response.data.sqlQueryName\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          selectedId,\n          dataState: { ...dataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getListAlert(userInfo, loader) {\n  return function (dispatch) {\n    dispatch(initRequest(loader));\n    rsapi.post(\"/alertview/getAlerts\", {\n      'userinfo': userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          alert: response.data.alert,\n          selectedAlertView: response.data.selectedAlertView,\n          selectedAlertView1: response.data.selectedAlertView1,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getSelectedAlert(action, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/alertview/getSelectedAlert\", {\n      'nsqlquerycode': action.nsqlquerycode,\n      'userinfo': userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedAlertView: response.data.selectedAlertView,\n          selectedAlertView1: response.data.selectedAlertView1,\n          sqlQueryName: response.data.sqlQueryName,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/AlertViewAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","initRequest","toast","intl","selectedAlertView","AlertView","userInfo","masterData","dataState","dispatch","selectedId","nsqlquerycode","post","then","response","data","ReturnStatus","warn","formatMessage","id","SelectedAlert","sqlQueryName","type","payload","loading","sort","undefined","filter","catch","error","getListAlert","loader","alert","selectedAlertView1","getSelectedAlert","action"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { sortData } from '../components/CommonScript';\r\nimport { initRequest } from './LoginAction';\r\nimport { toast } from 'react-toastify';\r\nimport { intl } from '../components/App';\r\n\r\nexport function selectedAlertView(AlertView, userInfo, masterData, dataState) {\r\n    return function (dispatch) {\r\n        let selectedId = AlertView.nsqlquerycode;\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/alertview/getSelectedAlertView\", { 'userinfo': userInfo, \"nsqlquerycode\": AlertView.nsqlquerycode })\r\n\r\n            .then(response => {\r\n\r\n                if (response.data.ReturnStatus === false){\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_INVALIDALERTQUERY\" }));\r\n                }\r\n                masterData = { ...masterData, selectedAlertView: response.data.selectedAlertView,\r\n                                SelectedAlert:response.data.SelectedAlert, \r\n                                sqlQueryName: response.data.sqlQueryName }; \r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false, \r\n                                                            selectedId, \r\n                                                            dataState:{...dataState, sort:undefined, filter:undefined}\r\n                                                        } });\r\n            })\r\n            .catch(error => {              \r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getListAlert(userInfo,loader) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(loader));\r\n        rsapi.post(\"/alertview/getAlerts\", { 'userinfo': userInfo})\r\n\r\n            .then(response => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: {alert:response.data.alert ,selectedAlertView: response.data.selectedAlertView,selectedAlertView1: response.data.selectedAlertView1 ,loading: false } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSelectedAlert(action,userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/alertview/getSelectedAlert\", { 'nsqlquerycode':action.nsqlquerycode,'userinfo': userInfo})\r\n\r\n            .then(response => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: {selectedAlertView: response.data.selectedAlertView,selectedAlertView1: response.data.selectedAlertView1, sqlQueryName: response.data.sqlQueryName , loading: false } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}