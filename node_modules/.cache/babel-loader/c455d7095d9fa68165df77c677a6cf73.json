{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nimport { sortData } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nexport function getSelectedSampleStorageLocation(inputParam, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/getSelectedSampleStorageLocation\", {\n      'userinfo': userInfo,\n      \"nsamplestoragelocationcode\": inputParam.nsamplestoragelocationcode\n    }).then(response => {\n      masterData = { ...masterData,\n        selectedSampleStorageLocation: response.data[\"selectedSampleStorageLocation\"]\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function editSampleStorageLocation(inputParam, userInfo, masterData) {\n  return function (dispatch) {\n    let selectedRecord = {};\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/getActiveSampleStorageVersion\", {\n      'userinfo': userInfo,\n      \"nsamplestorageversioncode\": inputParam.nsamplestorageversioncode\n    }).then(response => {\n      masterData = { ...masterData\n      };\n      sortData(masterData);\n      selectedRecord[\"ssamplestoragelocationname\"] = response.data[\"selectedSampleStorageVersion\"][\"ssamplestoragelocationname\"];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          treeData: JSON.parse(response.data[\"selectedSampleStorageVersion\"][\"jsondata\"].value).data,\n          selectedRecord,\n          openModal: true,\n          operation: \"update\",\n          loadTreeProperties: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const openPropertyModal = clickedItem => dispatch => {\n  let selectedRecord = {};\n  selectedRecord[\"locationlastnode\"] = clickedItem.item.locationlastnode === undefined ? false : clickedItem.item.locationlastnode;\n  selectedRecord[\"containerfirstnode\"] = clickedItem.item.containerfirstnode === undefined ? false : clickedItem.item.containerfirstnode;\n  selectedRecord[\"containerlastnode\"] = clickedItem.item.containerlastnode === undefined ? false : clickedItem.item.containerlastnode;\n  dispatch({\n    type: DEFAULT_RETURN,\n    payload: {\n      selectedRecord,\n      loadTreeProperties: true,\n      openModal: true,\n      clickedItem,\n      operation: \"update\"\n    }\n  });\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/SampleStorageLocationAction.js"],"names":["rsapi","DEFAULT_RETURN","initRequest","sortData","toast","getSelectedSampleStorageLocation","inputParam","userInfo","masterData","dispatch","post","nsamplestoragelocationcode","then","response","selectedSampleStorageLocation","data","type","payload","loading","catch","error","status","message","warn","editSampleStorageLocation","selectedRecord","nsamplestorageversioncode","treeData","JSON","parse","value","openModal","operation","loadTreeProperties","openPropertyModal","clickedItem","item","locationlastnode","undefined","containerfirstnode","containerlastnode"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { sortData } from '../components/CommonScript';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport function getSelectedSampleStorageLocation(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/getSelectedSampleStorageLocation\",\r\n            { 'userinfo': userInfo, \"nsamplestoragelocationcode\": inputParam.nsamplestoragelocationcode })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, selectedSampleStorageLocation: response.data[\"selectedSampleStorageLocation\"]\r\n                };\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function editSampleStorageLocation(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        let selectedRecord = {};\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/getActiveSampleStorageVersion\",\r\n            { 'userinfo': userInfo, \"nsamplestorageversioncode\": inputParam.nsamplestorageversioncode })\r\n            .then(response => {\r\n               \r\n                masterData = {\r\n                    ...masterData\r\n                };\r\n                sortData(masterData);\r\n                selectedRecord[\"ssamplestoragelocationname\"] = response.data[\"selectedSampleStorageVersion\"][\"ssamplestoragelocationname\"]\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        treeData: JSON.parse(response.data[\"selectedSampleStorageVersion\"][\"jsondata\"].value).data,\r\n                        selectedRecord, openModal: true, operation: \"update\", loadTreeProperties: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const openPropertyModal = (clickedItem) => (dispatch) => {\r\n    let selectedRecord = {};\r\n    selectedRecord[\"locationlastnode\"] = clickedItem.item.locationlastnode === undefined ? false : clickedItem.item.locationlastnode;\r\n    selectedRecord[\"containerfirstnode\"] = clickedItem.item.containerfirstnode === undefined ? false : clickedItem.item.containerfirstnode;\r\n    selectedRecord[\"containerlastnode\"] = clickedItem.item.containerlastnode === undefined ? false : clickedItem.item.containerlastnode;\r\n    dispatch({\r\n        type: DEFAULT_RETURN,\r\n        payload: { selectedRecord, loadTreeProperties: true, openModal: true, clickedItem, operation: \"update\" }\r\n    });\r\n};"]},"metadata":{},"sourceType":"module"}