{"ast":null,"code":"import _defineProperty from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{sortData}from'../components/CommonScript';//getComboLabelValue,, searchData\nimport{toast}from'react-toastify';import Axios from'axios';import{initRequest}from'./LoginAction';import{intl}from'../components/App';import{queryTypeFilter}from'../components/Enumeration';export function getSQLQueryDetail(sqlQuery,userInfo,masterData){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"sqlquery/getSQLQuery\",{nsqlquerycode:sqlQuery.nsqlquerycode,\"userinfo\":userInfo}).then(function(response){masterData=_objectSpread(_objectSpread({},masterData),response.data);sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false,queryResult:[],queryList:[],param:[],Dparam:[],TBLName:[]}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response}));}});};}export function getSQLQueryComboService(screenName,operation,primaryKeyName,primaryKeyValue,masterData,userInfo,queryTypeCode,ncontrolCode){return function(dispatch){if(operation===\"create\"||operation===\"update\"){var selectedRecord={};var chartService=rsapi.post(\"sqlquery/getChartType\",{userinfo:userInfo});var tableService=rsapi.post(\"sqlquery/getTablesFromSchema\",{\"tabletypecode\":-1,\"moduleformcode\":0,userinfo:userInfo});var tableType=rsapi.post(\"sqlquery/getQueryTableType\",{userinfo:userInfo});var urlArray=[];if(operation===\"create\"){urlArray=[chartService,tableService,tableType];}else{var _rsapi$post;var queryById=rsapi.post(\"sqlquery/getActiveSQLQueryById\",(_rsapi$post={},_defineProperty(_rsapi$post,primaryKeyName,primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",userInfo),_rsapi$post));urlArray=[chartService,tableService,tableType,queryById];}if(queryTypeCode===queryTypeFilter.LIMSDASHBOARDQUERY){screenName=intl.formatMessage({id:\"IDS_LIMSDASHBOARDQUERY\"});}else if(queryTypeCode===queryTypeFilter.LIMSALERTQUERY){screenName=intl.formatMessage({id:\"IDS_LIMSALERTQUERY\"});}else if(queryTypeCode===queryTypeFilter.LIMSBARCODEQUERY){screenName=intl.formatMessage({id:\"IDS_LIMSBARCODEQUERY\"});}else if(queryTypeCode===queryTypeFilter.LIMSGENERALQUERY){screenName=intl.formatMessage({id:\"IDS_LIMSGENERALQUERY\"});}else{screenName=intl.formatMessage({id:\"IDS_LIMSFILTERQUERY\"});}dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var chart=[];if(operation===\"update\"){selectedRecord=response[3].data;chart.push({\"value\":response[3].data[\"ncharttypecode\"],\"label\":response[3].data[\"schartname\"]});selectedRecord[\"ncharttypecode\"]=chart[0];}var tableName=undefined;var tableNameOnly=[];Object.values(response[1].data[0]).forEach(function(p){if(p.stable!==tableName){tableName=p.stable;tableNameOnly.push({tableName:tableName});}});dispatch({type:DEFAULT_RETURN,payload:{chartList:response[0].data||[],tableList:response[1].data[0]||[],tableType:response[2].data||[],tableName:tableNameOnly||[],operation:operation,screenName:screenName,selectedRecord:selectedRecord,openModal:true,ncontrolCode:ncontrolCode,loading:false,showExecute:true,showParam:false,showValidate:true,showSave:false,slideResult:[],slideList:[],resultStatus:'',param:[],Dparam:[],TBLName:[],parentPopUpSize:\"xl\"}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response.data}));}});}// else {\n// }\n};}export function getTablesName(TableTypeCode,FormCode){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"sqlquery/getTablesFromSchema\",{//\"tabletypecode\": parseInt(selectedRecord[\"ntabletypecode\"].value),\"moduleformcode\": parseInt(selectedRecord[\"nformcode\"] ? selectedRecord[\"nformcode\"].value: 0)\n\"tabletypecode\":parseInt(TableTypeCode),\"moduleformcode\":parseInt(FormCode)}).then(function(response){var tableName=undefined;var tableNameOnly=[];Object.values(response.data[0]).forEach(function(p){if(p.stable!==tableName){tableName=p.stable;tableNameOnly.push({tableName:tableName});}});dispatch({type:DEFAULT_RETURN,payload:{tableList:response.data[0]||[],tableName:tableNameOnly||[],loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response}));}});};}export function getModuleFormName(TableTypeCode,userInfo){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"sqlquery/getModuleFormName\",{\"tabletypecode\":parseInt(TableTypeCode),\"userinfo\":userInfo}).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{moduleFormName:response.data[0]||[],loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response}));}});};}export function executeUserQuery(inputParam){return function(dispatch){var Query=inputParam.query;var screenFlag=inputParam.screenFlag;var slideOperation=inputParam.slideOperation;var userInfo=inputParam.userInfo;var screenName=inputParam.screenName;var data=inputParam.data;dispatch(initRequest(true));rsapi.post(\"/sqlquery/getSchemaQueryOutput\",{\"query\":Query,userinfo:userInfo,\"returnoption\":\"LIST\"}).then(function(response){var querycol=response.data[1];var keyarray=[];var temparray=[];var validColumns=true;if(querycol.length>0){keyarray=Object.keys(querycol[0]);var width=\"200px\";if(keyarray.length===2){width=\"300px\";}for(var i=0;i<keyarray.length;i++){if(keyarray[i]!==null&&keyarray[i]!==''){temparray.push({\"idsName\":keyarray[i],\"dataField\":keyarray[i],\"width\":width});}else{validColumns=false;}}}var respObject={loading:false,slideResult:response.data[1]||[],slideList:temparray||[],resultStatus:response.data[0]||'',openModal:true,showParam:true,screenFlag:screenFlag};if(screenFlag===\"showQuery\"){if(screenName===\"Results\"){respObject=_objectSpread(_objectSpread({},respObject),{},{showExecute:false,operation:\"view\",screenName:screenName},data);}else{respObject=_objectSpread(_objectSpread({},respObject),{},{showExecute:true,operation:slideOperation});}}else{if(screenFlag===\"NoParam\"){respObject=_objectSpread(_objectSpread({},respObject),{},{screenName:\"Results\",operation:\"view\",queryResult:response.data[1]||[],queryList:temparray||[],showExecute:inputParam.showExecute,showValidate:inputParam.showValidate,showSave:inputParam.showSave,noSave:inputParam.noSave});}else{respObject=_objectSpread(_objectSpread({},respObject),{},{queryResult:response.data[1]||[],showExecute:true,showValidate:false,operation:\"create\",screenName:\"Parameter for Results\",queryList:temparray||[]});}}if(validColumns){dispatch({type:DEFAULT_RETURN,payload:_objectSpread({},respObject)});}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.warn(intl.formatMessage({id:\"IDS_MAKESUREALLFIELDSHAVENAMEORALIASNAME\"}));}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});//toast.error(intl.formatMessage({ id: error.message }));\nif(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function executeAlertUserQuery(Query,userInfo){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/sqlquery/getSchemaQueryOutput\",{\"query\":Query,userinfo:userInfo}).then(function(response){var resultCount=response.data[1];dispatch({type:DEFAULT_RETURN,payload:{loading:false,resultCount:resultCount}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.error(intl.formatMessage({id:error.message}));});};}export function comboChangeQueryType(querytypecode,data,userInfo){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/sqlquery/getSQLQueryByQueryTypeCode\",{nquerytypecode:querytypecode,\"userinfo\":userInfo}).then(function(response){var masterData=_objectSpread(_objectSpread(_objectSpread({},data),response.data),{},{searchedData:undefined});sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false,queryList:[]}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.error(intl.formatMessage({id:error.message}));});};}export function getColumnNamesByTableName(tableName,columnList){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/sqlquery/getColumnsFromTable\",{\"tablename\":tableName}).then(function(response){columnList=columnList||new Map();columnList.set(Object.keys(response.data)[0],Object.values(response.data)[0]);dispatch({type:DEFAULT_RETURN,payload:{columnList:columnList,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.error(intl.formatMessage({id:error.message}));});};}export function comboColumnValues(tableName,fieldName){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/sqlquery/getColumnValues\",{\"tablename\":tableName,\"fieldname\":fieldName}).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{fieldResult:response.data[1]||[],loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.error(intl.formatMessage({id:error.message}));});};}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/SQLBuilderAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","toast","Axios","initRequest","intl","queryTypeFilter","getSQLQueryDetail","sqlQuery","userInfo","masterData","dispatch","post","nsqlquerycode","then","response","data","type","payload","loading","queryResult","queryList","param","Dparam","TBLName","catch","error","status","formatMessage","id","message","warn","getSQLQueryComboService","screenName","operation","primaryKeyName","primaryKeyValue","queryTypeCode","ncontrolCode","selectedRecord","chartService","userinfo","tableService","tableType","urlArray","queryById","LIMSDASHBOARDQUERY","LIMSALERTQUERY","LIMSBARCODEQUERY","LIMSGENERALQUERY","all","chart","push","tableName","undefined","tableNameOnly","Object","values","forEach","p","stable","chartList","tableList","openModal","showExecute","showParam","showValidate","showSave","slideResult","slideList","resultStatus","parentPopUpSize","getTablesName","TableTypeCode","FormCode","parseInt","getModuleFormName","moduleFormName","executeUserQuery","inputParam","Query","query","screenFlag","slideOperation","querycol","keyarray","temparray","validColumns","length","keys","width","i","respObject","noSave","executeAlertUserQuery","resultCount","comboChangeQueryType","querytypecode","nquerytypecode","searchedData","getColumnNamesByTableName","columnList","Map","set","comboColumnValues","fieldName","fieldResult"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { sortData } from '../components/CommonScript'//getComboLabelValue,, searchData\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport {queryTypeFilter} from '../components/Enumeration';\r\n\r\n\r\n\r\nexport function getSQLQueryDetail(sqlQuery, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"sqlquery/getSQLQuery\", {\r\n            nsqlquerycode: sqlQuery.nsqlquerycode,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false, queryResult: [], queryList: [], param: [], Dparam: [], TBLName: [] } });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n\r\n                    toast.warn(intl.formatMessage({ id: error.response }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSQLQueryComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, queryTypeCode, ncontrolCode) {\r\n    return function (dispatch) {\r\n\r\n        if (operation === \"create\" || operation === \"update\") {\r\n\r\n            let selectedRecord = {};\r\n            const chartService = rsapi.post(\"sqlquery/getChartType\", { userinfo: userInfo });\r\n            const tableService = rsapi.post(\"sqlquery/getTablesFromSchema\", {\"tabletypecode\": -1,\"moduleformcode\": 0, userinfo: userInfo });\r\n            const tableType = rsapi.post(\"sqlquery/getQueryTableType\", { userinfo: userInfo });\r\n            let urlArray = [];\r\n            if (operation === \"create\") {\r\n\r\n                urlArray = [chartService, tableService,tableType];\r\n            }\r\n            else {\r\n                const queryById = rsapi.post(\"sqlquery/getActiveSQLQueryById\", { [primaryKeyName]: primaryKeyValue, \"userinfo\": userInfo });\r\n\r\n                urlArray = [chartService, tableService,tableType, queryById];\r\n            }\r\n\r\n            if (queryTypeCode === queryTypeFilter.LIMSDASHBOARDQUERY) {\r\n                screenName = intl.formatMessage({ id: \"IDS_LIMSDASHBOARDQUERY\" });\r\n            }\r\n            else if (queryTypeCode === queryTypeFilter.LIMSALERTQUERY) {\r\n                screenName = intl.formatMessage({ id: \"IDS_LIMSALERTQUERY\" });\r\n            }\r\n            else if (queryTypeCode === queryTypeFilter.LIMSBARCODEQUERY) {\r\n                screenName = intl.formatMessage({ id: \"IDS_LIMSBARCODEQUERY\" });\r\n            }\r\n            else if (queryTypeCode === queryTypeFilter.LIMSGENERALQUERY) {\r\n                screenName = intl.formatMessage({ id: \"IDS_LIMSGENERALQUERY\" });\r\n            }\r\n            else {\r\n                screenName = intl.formatMessage({ id: \"IDS_LIMSFILTERQUERY\" });\r\n            }\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n\r\n                    let chart = [];\r\n                    if (operation === \"update\") {\r\n                        selectedRecord = response[3].data;\r\n                        chart.push({ \"value\": response[3].data[\"ncharttypecode\"], \"label\": response[3].data[\"schartname\"] });\r\n                        selectedRecord[\"ncharttypecode\"] = chart[0];\r\n                    }\r\n\r\n                    let tableName = undefined;\r\n                    let tableNameOnly = [];\r\n                    Object.values(response[1].data[0]).forEach(p => {\r\n                        if (p.stable !== tableName) {\r\n                            tableName = p.stable;\r\n                            tableNameOnly.push({ tableName });\r\n                        }\r\n                    })\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            chartList: response[0].data || [],\r\n                            tableList: response[1].data[0] || [],\r\n                            tableType: response[2].data || [],\r\n                            tableName: tableNameOnly || [],\r\n                            operation, screenName, selectedRecord, openModal: true,\r\n                            ncontrolCode, loading: false, showExecute: true, showParam: false, showValidate: true, showSave: false,\r\n                            slideResult: [], slideList: [],\r\n                            resultStatus: '', param: [], Dparam: [], TBLName: [], parentPopUpSize: \"xl\"\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n\r\n\r\n\r\n        }\r\n        // else {\r\n        // }\r\n    }\r\n}\r\n\r\nexport function getTablesName(TableTypeCode,FormCode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"sqlquery/getTablesFromSchema\", {\r\n            //\"tabletypecode\": parseInt(selectedRecord[\"ntabletypecode\"].value),\"moduleformcode\": parseInt(selectedRecord[\"nformcode\"] ? selectedRecord[\"nformcode\"].value: 0)\r\n            \"tabletypecode\": parseInt(TableTypeCode),\"moduleformcode\": parseInt(FormCode)\r\n            \r\n        })\r\n            .then(response => {\r\n\r\n                let tableName = undefined;\r\n                    let tableNameOnly = [];\r\n                    Object.values(response.data[0]).forEach(p => {\r\n                        if (p.stable !== tableName) {\r\n                            tableName = p.stable;\r\n                            tableNameOnly.push({ tableName });\r\n                        }\r\n                    })\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: {  tableList: response.data[0] || [],\r\n                    tableName: tableNameOnly || [],loading: false } });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n\r\n                    toast.warn(intl.formatMessage({ id: error.response }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getModuleFormName(TableTypeCode,userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"sqlquery/getModuleFormName\", {\r\n            \"tabletypecode\": parseInt(TableTypeCode), \"userinfo\": userInfo\r\n            \r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: {  moduleFormName: response.data[0] || [],loading: false} });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n\r\n                    toast.warn(intl.formatMessage({ id: error.response }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function executeUserQuery(inputParam) {\r\n    return function (dispatch) {\r\n        const Query = inputParam.query;\r\n        const screenFlag = inputParam.screenFlag;\r\n        const slideOperation = inputParam.slideOperation;\r\n        const userInfo = inputParam.userInfo;\r\n        const screenName = inputParam.screenName\r\n        const data = inputParam.data;\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getSchemaQueryOutput\", { \"query\": Query, userinfo: userInfo, \"returnoption\": \"LIST\" })\r\n            .then(response => {\r\n                const querycol = response.data[1];\r\n                let keyarray = [];\r\n                let temparray = [];\r\n                let validColumns = true;\r\n                if (querycol.length > 0) {\r\n                    keyarray = Object.keys(querycol[0]);\r\n                    let width=\"200px\"\r\n                    if(keyarray.length === 2){\r\n                        width=\"300px\"\r\n                    }\r\n                    for (let i = 0; i < keyarray.length; i++) {\r\n                        if( keyarray[i]!==null && keyarray[i]!==''){\r\n                            temparray.push({ \"idsName\": keyarray[i], \"dataField\": keyarray[i], \"width\": width\r\n                            });\r\n                        }else{\r\n                            validColumns = false;\r\n                        }\r\n                    }\r\n                }\r\n                let respObject = {loading: false,\r\n                                slideResult: response.data[1] || [],\r\n                                slideList: temparray || [],\r\n                                resultStatus: response.data[0] || '',\r\n                                openModal: true,\r\n                                showParam: true,\r\n                                screenFlag\r\n                                }\r\n\r\n                if (screenFlag === \"showQuery\") \r\n                {\r\n                    if (screenName === \"Results\") {\r\n                        respObject = {...respObject,\r\n                                        showExecute: false,                                       \r\n                                        operation: \"view\",\r\n                                        screenName: screenName,                                                               \r\n                                        ...data\r\n                                    }                         \r\n                    }\r\n                    else {\r\n                        respObject = {...respObject, \r\n                                        showExecute: true,                                   \r\n                                         operation: slideOperation,                           \r\n                                    }\r\n                    }\r\n                }\r\n                else \r\n                {\r\n                    if (screenFlag === \"NoParam\") \r\n                    {\r\n                        respObject = {...respObject,\r\n                                            screenName: \"Results\",\r\n                                            operation: \"view\",                                          \r\n                                            queryResult: response.data[1] || [],\r\n                                            queryList: temparray || [],  \r\n                                            showExecute: inputParam.showExecute,\r\n                                            showValidate:  inputParam.showValidate,\r\n                                            showSave:  inputParam.showSave,\r\n                                            noSave:  inputParam.noSave,                                          \r\n                                        }                               \r\n                    }\r\n                    else {\r\n                        respObject = {...respObject, queryResult: response.data[1] || [],\r\n                                                    showExecute: true,                                                 \r\n                                                    showValidate: false,\r\n                                                    operation: \"create\",\r\n                                                    screenName: \"Parameter for Results\",                                                                   \r\n                                                    queryList: temparray || [],                                                    \r\n                                                }                     \r\n                    }                   \r\n                }\r\n                if(validColumns){\r\n                    dispatch({ type: DEFAULT_RETURN, payload: {...respObject}});\r\n                }else{\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                    toast.warn(intl.formatMessage({ id:\"IDS_MAKESUREALLFIELDSHAVENAMEORALIASNAME\"})) \r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                   \r\n                //toast.error(intl.formatMessage({ id: error.message }));\r\n                if (error.response.status === 500) {                   \r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function executeAlertUserQuery(Query, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getSchemaQueryOutput\", { \"query\": Query, userinfo: userInfo })\r\n            .then(response => {\r\n\r\n\r\n                const resultCount = response.data[1];\r\n\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false,\r\n                        resultCount: resultCount\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function comboChangeQueryType(querytypecode, data, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getSQLQueryByQueryTypeCode\", { nquerytypecode: querytypecode, \"userinfo\": userInfo })\r\n            .then(response => {\r\n\r\n                const masterData = { ...data, ...response.data, searchedData: undefined }\r\n\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, loading: false, queryList: []\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n\r\nexport function getColumnNamesByTableName(tableName, columnList) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getColumnsFromTable\", { \"tablename\": tableName })\r\n            .then(response => {\r\n\r\n                columnList = columnList || new Map();\r\n                columnList.set(Object.keys(response.data)[0], Object.values(response.data)[0]);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        columnList, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n\r\nexport function comboColumnValues(tableName, fieldName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getColumnValues\", { \"tablename\": tableName, \"fieldname\": fieldName })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        fieldResult: response.data[1] || [], loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}