{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\actions\\\\RegistrationAction.js\";\nimport React from 'react';\nimport rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { filterRecordBasedOnTwoArrays, sortData, rearrangeDateFormat, convertDateTimetoString, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, updatedObjectWithNewElement, replaceUpdatedObject, parentChildComboLoad, getSameRecordFromTwoArrays, constructjsonOptionList, constructjsonOptionDefault, childComboLoad, filterRecordBasedOnPrimaryKeyName, reArrangeArrays, childComboLoadForEdit } from '../components/CommonScript';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { intl } from '../components/App';\nimport { initRequest } from './LoginAction';\nimport { //RegistrationSubType, RegistrationType, \ntransactionStatus } from '../components/Enumeration';\nimport { crudMaster, postCRUDOrganiseTransSearch } from './ServiceAction'; //import { getTestChildTabDetail } from './index.js'\n\nimport { constructOptionList } from '../components/CommonScript';\nimport { Operators, TextFilter, NumericFilter, // BooleanFilter,\nDateFilter // EnumFilter,\n//  EnumFilterProps,\n} from \"@progress/kendo-react-data-tools\";\nimport { ComboBox } from \"@progress/kendo-react-dropdowns\";\nexport function getSampleTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getRegTypeBySampleType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getSubSampleChildTabDetail(inputData) {\n  return function (dispatch) {\n    if (inputData.ntransactionsamplecode.length > 0) {\n      let inputParamData = {\n        ntransactionsamplecode: inputData.ntransactionsamplecode,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n\n      switch (inputData.activeSubSampleTab) {\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          url = \"attachment/getSubSampleAttachment\";\n          break;\n\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          url = \"comments/getSubSampleComment\";\n          break;\n\n        default:\n          url = null;\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n        rsapi.post(url, inputParamData).then(response => {\n          let responseData = { ...response.data\n          };\n          responseData = sortData(responseData);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...inputData.masterData,\n                ...responseData,\n                selectedSubSample: inputData.selectedSubSample // selectedTestCode: inputData.ntransactiontestcode,\n\n              },\n              loading: false,\n              showFilter: false,\n              activeSubSampleTab: inputData.activeSubSampleTab,\n              screenName: inputData.screenName,\n              activeTestTab: inputData.activeSubSampleTab,\n              screenName: inputData.screenName\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              selectedSample: inputData.selectedSample\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      //toast.warn(\"Please Select a Sample\");\n      toast.warn(intl.FormattedMessage({\n        id: \"IDS_PLSSELECTASAMPLE\"\n      }));\n    }\n  };\n}\nexport function getRegTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    rsapi.post(\"/registration/getRegSubTypeByRegType\", Map).then(response => {\n      // const RegistrationSubType = response.data[\"RegistrationSubType\"];\n      //  console.log(response.data);\n      // RegistrationSubType.length > 0 ?\n      //     selectedRecord[\"nregsubtypecode\"] = {\n      //         \"value\": RegistrationSubType[0].nregsubtypecode,\n      //         \"label\": RegistrationSubType[0].sregsubtypename\n      //     } : selectedRecord[\"nregsubtypecode\"] = \"\";\n      // const [labelname] = event.item;\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getRegSubTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getRegTemplateTypeByRegSubType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function onApprovalConfigVersionChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getApprovalConfigBasedTemplateDesign\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getComponentTestBySpec(Map, selectedRecord, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getComponentTestBySpec\", Map).then(response => {\n      const {\n        Component,\n        Test\n      } = response.data;\n      let slno = Component.length > 0 ? Component[0].slno : -1;\n      let selectedComponent = Component.length > 0 ? Component[0] : undefined;\n      let SelectedTest = [];\n\n      if (Object.keys(Test).length > 0) {\n        SelectedTest = Test[slno];\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Component,\n          Test,\n          SelectedTest,\n          selectedComponent,\n          loading: false,\n          selectedRecord,\n          popUptestDataState: {\n            skip: 0,\n            take: 10\n          }\n        }\n      });\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getTestfromDB(objComponent, LoginProps, nflag) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let component = { ...objComponent\n    };\n    component[\"ncomponentcode\"] = objComponent[\"ncomponentcode\"] ? objComponent[\"ncomponentcode\"].value : -1;\n    component[\"nstoragelocationcode\"] = objComponent[\"nstoragelocationcode\"] ? objComponent[\"nstoragelocationcode\"].value : -1;\n    component[\"nstorageconditioncode\"] = objComponent[\"nstorageconditioncode\"] ? objComponent[\"nstorageconditioncode\"].value : -1;\n    component[\"slno\"] = LoginProps.Component ? Object.keys(LoginProps.Component).length + 1 : 0;\n    component[\"scomponentname\"] = objComponent[\"ncomponentcode\"].label;\n    component[\"sstoragelocationname\"] = objComponent[\"nstoragelocationcode\"] && objComponent[\"nstoragelocationcode\"].label ? objComponent[\"nstoragelocationcode\"].label : \"\";\n    component[\"sstorageconditionname\"] = objComponent[\"nstorageconditioncode\"] && objComponent[\"nstorageconditioncode\"].label ? objComponent[\"nstorageconditioncode\"].label : \"\";\n    component[\"ntzdmanufdate\"] = objComponent[\"ntzdmanufdate\"] ? objComponent[\"ntzdmanufdate\"].value : -1;\n    component[\"ntzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].value : -1;\n    component[\"stzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].label : \"\";\n    component[\"nplasmafilecode\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].value : -1;\n    component[\"splasmafilenumber\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].label : \"\";\n    const dreceiveddate = objComponent[\"dreceiveddate\"];\n    component[\"dreceiveddate\"] = dreceiveddate; //formatInputDate(objComponent[\"dreceiveddate\"], false);\n\n    component[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, LoginProps.userInfo); //formatInputDateWithoutT(objComponent[\"dreceiveddate\"], false);//formatDate(objComponent[\"sreceiveddate\"]);\n    // rsapi.post(\"/registration/getTestfromDB\", { \"Component\": component })\n\n    rsapi.post(\"/registration/getTestfromDB\", {\n      nspecsampletypecode: component.nspecsampletypecode,\n      slno: component.slno,\n      nneedsubsample: LoginProps.masterData.RealRegSubTypeValue.nneedsubsample\n    }).then(response => {\n      let TestData = response.data;\n      let slno = component.slno;\n      let SelectedTest = [];\n      let loadComponent = true;\n      let selectComponent = {};\n      let showSaveContinue = true;\n      let SelectedSource = []; // let openChildModal = true;\n\n      let selectedComponent = undefined;\n      let parentPopUpSize = \"lg\"; // selectComponent = objComponent\n\n      if (nflag === 1) {\n        loadComponent = true;\n        objComponent[\"smanuflotno\"] = \"\";\n        objComponent[\"dreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime); //new Date(LoginProps.CurrentTime);\n\n        objComponent[\"sreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime); //new Date(LoginProps.CurrentTime);\n\n        selectComponent = objComponent;\n      } else {\n        loadComponent = false;\n        parentPopUpSize = \"xl\"; // openChildModal = false;\n\n        showSaveContinue = false;\n        selectComponent = undefined;\n      }\n\n      let Test = LoginProps.Test || [];\n      let Component = LoginProps.Component || [];\n      Component.unshift(component);\n      selectedComponent = component;\n      Test[slno] = response.data;\n      SelectedTest = TestData;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Component,\n          Test,\n          SelectedTest,\n          selectComponent,\n          selectedComponent,\n          loadComponent,\n          showSaveContinue,\n          parentPopUpSize,\n          loading: false,\n          SelectedSource\n        }\n      }); // console.log(response.data);\n    }).catch(error => {\n      //   console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function EditComponent(Map, component, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", Map);\n    const timezone = rsapi.post(\"timezone/getTimeZone\");\n    urlArray = [ComponentTestBySpec, timezone];\n    Axios.all(urlArray).then(response => {\n      const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const TimeZoneField = response[1].data;\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n      const timeZoneList = timeZoneListMap.get(\"OptionList\");\n      component[\"ncomponentcode\"] = {\n        label: component.scomponentname,\n        value: component.ncomponentcode\n      };\n      component[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, component[\"sreceiveddate\"]);\n      component[\"scomments\"] = component[\"scomments\"];\n      let ntzdreceivedate = component.ntzdreceivedate;\n\n      if (component.ntzdreceivedate !== null && typeof component.ntzdreceivedate === \"object\") {\n        ntzdreceivedate = component.ntzdreceivedate.value;\n      }\n\n      component[\"ntzdreceivedate\"] = component.ntzdreceivedate ? {\n        \"label\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].stimezoneid,\n        \"value\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].ntimezonecode\n      } : \"\";\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadComponent: true,\n          childoperation: \"update\",\n          lstComponent,\n          ChildscreenName: \"Component\",\n          openChildModal: false,\n          selectComponent: component,\n          parentPopUpSize: \"lg\",\n          timeZoneList,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function ReloadData(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData\n    }).then(response => {\n      let masterData = { ...inputData.masterData,\n        ...response.data\n      };\n\n      if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        inputData.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n        inputData.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n        inputData.searchTestRef.current.value = \"\"; //masterData['searchedTests'] = undefined\n\n        masterData['searchedTest'] = undefined;\n      } // let selectedFilter = inputData.selectedFilter;\n      // selectedFilter[\"fromdate\"] = \"\";\n      // selectedFilter[\"todate\"] = \"\";\n\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          testskip: 0,\n          take: undefined,\n          testtake: undefined,\n          subsampletake: undefined,\n          subsampleskip: 0,\n          showSample: undefined //selectedFilter\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTreeByProduct(Map, selectedRecord, comboData, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getTreeByProduct\", Map).then(response => {\n      let {\n        Specification,\n        AgaramTree,\n        ActiveKey,\n        FocusKey,\n        OpenNodes\n      } = [];\n      const selectedSpec = {};\n\n      if (response.data[\"rtn\"] === true) {\n        Specification = constructOptionList(response.data[\"Specification\"] || [], \"nallottedspeccode\", \"sspecname\", undefined, undefined, true).get(\"OptionList\");\n        AgaramTree = response.data[\"AgaramTree\"];\n        ActiveKey = response.data[\"ActiveKey\"];\n        FocusKey = response.data[\"FocusKey\"];\n        OpenNodes = response.data[\"OpenNodes\"]; //Manufacturer = response.data[\"Manufacturer\"];\n\n        selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          \"value\": Specification[0].value,\n          \"label\": Specification[0].label,\n          \"item\": Specification[0].item\n        } : \"\";\n        selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n      }\n\n      selectedRecord = { ...selectedRecord,\n        ...selectedSpec\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Specification,\n          selectedRecord,\n          AgaramTree,\n          ActiveKey,\n          FocusKey,\n          OpenNodes,\n          Test: [],\n          SelectedTest: [],\n          loading: false,\n          comboData,\n          ...inputParam,\n          selectedSpec,\n          Component: [],\n          selectComponent: {},\n          selectedComponent: {}\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport const getNewRegSpecification = (inputParam, masterData) => {\n  return dispatch => {\n    if (inputParam.selectedNode !== null) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/registration/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam,\n        ntreetemplatemanipulationcode: inputParam.selectedNode.ntemplatemanipulationcode\n      }).then(response => {\n        sortData(response.data);\n        let Specification = constructOptionList(response.data || [], \"nallottedspeccode\", \"sspecname\", false, false, true).get(\"OptionList\");\n        let selectedComponent = undefined;\n        inputParam.selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          value: Specification[0].value,\n          label: Specification[0].label,\n          item: Specification[0].item\n        } : \"\";\n        inputParam.selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        inputParam.selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ActiveKey: inputParam.activeKey,\n            FocusKey: inputParam.focusKey,\n            primaryKey: inputParam.primaryKey,\n            Specification: Specification,\n            selectedNode: inputParam.selectedNode,\n            selectedRecord: inputParam.selectedRecord,\n            Test: [],\n            selectedComponent,\n            SelectedTest: [],\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }).catch(error => {\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.warn(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    }\n  };\n};\nexport function AddComponents(Map) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", Map);\n    const timezone = rsapi.post(\"timezone/getTimeZone\");\n    urlArray = [ComponentTestBySpec, timezone];\n    Axios.all(urlArray).then(response => {\n      const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n      const timeZoneList = timeZoneListMap.get(\"OptionList\");\n      let dreceiveddate = null;\n      if (lstComponent[0].item.sreceiveddate) dreceiveddate = rearrangeDateFormat(Map[\"userinfo\"], lstComponent[0].item.sreceiveddate); //new Date(lstComponent[0].item.sreceiveddate);//|| [];\n\n      let selectComponent = {\n        sreceiveddate: dreceiveddate,\n        dreceiveddate,\n        ntzdreceivedate: {\n          \"label\": Map[\"userinfo\"].stimezoneid,\n          \"value\": Map[\"userinfo\"].ntimezonecode\n        },\n        stzdreceivedate: Map[\"userinfo\"].stimezoneid,\n        scomments: \"\",\n        nallottedspeccode: lstComponent[0].item.nallottedspeccode\n      };\n      let CurrentTime = dreceiveddate;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadComponent: true,\n          lstComponent,\n          dreceiveddate,\n          ChildscreenName: \"Component\",\n          showSaveContinue: true,\n          openChildModal: false,\n          childoperation: \"create\",\n          selectComponent,\n          parentPopUpSize: \"lg\",\n          CurrentTime,\n          timeZoneList,\n          loading: false,\n          openPortal: true,\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getAllTest(objComponent, LoginProps, nneedsubsample, specBasedComponent, selectPackage1, specBasedTestPackage, selectPackage) {\n  return function (dispatch) {\n    if (Object.keys(objComponent).length > 0) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/registration/getTestfromDB\", {\n        nspecsampletypecode: objComponent.nspecsampletypecode,\n        slno: objComponent.slno,\n        nneedsubsample: nneedsubsample,\n        nallottedspeccode: objComponent.nallottedspeccode,\n        specBasedComponent: specBasedComponent,\n        specBasedTestPackage: specBasedTestPackage,\n        conditionalTestPackage: true //    ntestpackagecode:selectPackage.ntestpackagecode.value\n\n      }).then(response => {\n        let PackageData = [];\n        let TestCombined = []; //   const TestCombined = response.data;\n\n        let TestData = response.data;\n        let Test = LoginProps.Test || [];\n        let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\n        TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestgrouptestcode\");\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            TestCombined,\n            TestPackage: PackageData,\n            selectPackage: [],\n            loadTest: true,\n            openChildModal: false,\n            ChildscreenName: \"Test\",\n            screenName: \"Test\",\n            operation: \"create\",\n            childoperation: \"create\",\n            parentPopUpSize: \"lg\",\n            loading: false\n          }\n        });\n      }).catch(error => {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTCOMPONENTTOADDTEST\"\n      }));\n    }\n  };\n}\nexport function getTest(objComponent, LoginProps, nneedsubsample, specBasedComponent, selectPackage1, specBasedTestPackage, selectPackage) {\n  return function (dispatch) {\n    // if (Object.keys(objComponent).length > 0) {\n    const urlArray = [];\n    const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\n      nspecsampletypecode: objComponent.nspecsampletypecode,\n      slno: objComponent.slno,\n      nneedsubsample: nneedsubsample,\n      nallottedspeccode: objComponent.nallottedspeccode,\n      specBasedComponent: specBasedComponent,\n      specBasedTestPackage: specBasedTestPackage,\n      conditionalTestPackage: true //    ntestpackagecode:selectPackage.ntestpackagecode.value\n\n    });\n    urlArray[0] = TestGet;\n    const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\n      nspecsampletypecode: objComponent.nspecsampletypecode,\n      slno: objComponent.slno,\n      nneedsubsample: nneedsubsample,\n      nallottedspeccode: objComponent.nallottedspeccode,\n      specBasedComponent: specBasedComponent,\n      specBasedTestPackage: specBasedTestPackage,\n      conditionalTestPackage: true\n    });\n    urlArray[1] = TestPackageGet;\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      // const TestCombined = [];\n      let PackageData = []; //  if (specBasedTestPackage) {\n\n      const PackageDataMap = constructOptionList(response[1].data.TestPackage || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n      PackageData = PackageDataMap.get(\"OptionList\"); //    }\n      //    else {\n\n      let TestData = response[0].data;\n      let Test = LoginProps.Test || [];\n      let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\n      let TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\"); //    }\n      // const lstComponentMap = constructOptionList(TestCombined|| [], \"ntestgrouptestcode\",\n      //\"stestsynonym\", undefined, undefined, true);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          TestCombined,\n          TestPackage: PackageData,\n          selectPackage: [],\n          AllTest: TestData,\n          loadTest: true,\n          openChildModal: false,\n          ChildscreenName: \"Test\",\n          screenName: \"Test\",\n          operation: \"create\",\n          childoperation: \"create\",\n          parentPopUpSize: \"lg\",\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }); // } else {\n    //     toast.warn(intl.formatMessage({ id: \"IDS_SELECTCOMPONENTTOADDTEST\" }));\n    // }\n  };\n}\nexport function addsubSample(masterData, userinfo, columnList, selectComponent, childColumnList, SubSamplecomboComponents, SubSamplewithoutCombocomponent, specBasedComponent, Map, Component, isServiceRequired, SubSamplecomboData, selectedRecord, conditionalTestPackage, specBasedTestPackage, LoginProps) {\n  if (isServiceRequired) {\n    return function (dispatch) {\n      dispatch(initRequest(true));\n      const urlArray = [];\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      urlArray[0] = timeZoneService;\n      const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n        parentcolumnlist: columnList ? columnList : [],\n        childcolumnlist: childColumnList ? childColumnList : [],\n        userinfo\n      });\n      urlArray[1] = actualService;\n\n      if (specBasedComponent) {\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", { ...Map,\n          specBasedComponent: specBasedComponent //   conditionalTestPackage:true\n\n        });\n        urlArray[2] = ComponentTestBySpec;\n      } else {\n        Component = Component ? Component : [];\n        const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\n          nallottedspeccode: Map[\"nallottedspeccode\"],\n          slno: Component ? Object.keys(Component).length + 1 : 1,\n          nneedsubsample: Map[\"nneedsubsample\"],\n          // nallottedspeccode: objComponent.nallottedspeccode,\n          specBasedComponent: specBasedComponent,\n          conditionalTestPackage: true,\n          specBasedTestPackage: specBasedTestPackage\n        });\n        urlArray[2] = TestGet;\n        const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\n          nallottedspeccode: Map[\"nallottedspeccode\"],\n          // slno: Component ? Object.keys(Component).length + 1 : 1,\n          specBasedComponent: specBasedComponent //   specBasedTestPackage: specBasedTestPackage,\n          //  conditionalTestPackage: conditionalTestPackage\n\n        });\n        urlArray[5] = TestPackageGet;\n      }\n\n      const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo\n      });\n      urlArray[3] = currentDate;\n      const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n        datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\n        userinfo\n      });\n      urlArray[4] = dateService;\n      Axios.all(urlArray).then(response => {\n        const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n        const timeZoneList = timeZoneMap.get(\"OptionList\");\n        const defaultTimeZone = {\n          label: userinfo.stimezoneid,\n          value: userinfo.ntimezonecode\n        };\n        const newcomboData = parentChildComboLoad(columnList, response[1].data, selectComponent, childColumnList, SubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo);\n        let TestCombined = [];\n        let lstComponent = [];\n        let PackageData = [];\n\n        if (specBasedComponent) {\n          const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n          lstComponent = lstComponentMap.get(\"OptionList\");\n        } else {\n          /// if (specBasedTestPackage) {\n          const PackageDataMap = constructOptionList(response[5].data.TestPackage || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n          PackageData = PackageDataMap.get(\"OptionList\"); // if (PackageData.length === 0) {\n          //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \n          // }                      \n          // }\n          // else {\n\n          TestCombined = response[2].data; //}\n        }\n\n        const comboData1 = newcomboData.comboData;\n        const selectedRecord1 = newcomboData.selectedRecord;\n        SubSamplewithoutCombocomponent.map(componentrow => {\n          if (componentrow.inputtype === \"date\") {\n            if (componentrow.loadcurrentdate) {\n              selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\n              selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n            } else if (componentrow.nperiodcode) {\n              selectedRecord1[componentrow.label + \"value\"] = response[4].data[componentrow.label] ? new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\n\n              if (componentrow.loadselecteddate) {\n                selectedRecord1[componentrow.label] = response[4].data[componentrow.label] ? new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\n              } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n              //    new Date(response[2].data[componentrow.label]):null;\n\n            } else {\n              selectedRecord1[componentrow.label + \"value\"] = new Date();\n            }\n\n            if (componentrow.hidebeforedate) {\n              selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n            }\n\n            if (componentrow.hideafterdate) {\n              selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n            }\n          } else if (componentrow.inputtype === \"radio\") {\n            selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n          }\n        }); //console.log(\"selectedRecord1 action1:\", selectedRecord1);\n        // if (masterData.RealRegSubTypeValue.nregsubtypecode === 6) {\n        //     let portalOrder = selectedRecord && selectedRecord['Portal Order ID'] || {}\n        //     let containerType = comboData1['Container Type'] || []\n        //     comboData1['ContainerType'] = comboData1['Container Type'] || []\n        //     let containerList = []\n        //     const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1\n        //     containerType.map(x => {\n        //         if (x.item.jsondata.nportalordercode === nportalordercode) {\n        //             containerList.push(x)\n        //         }\n        //     })\n        //     comboData1['Container Type'] = containerList\n        // }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ChildscreenName: \"SubSample\",\n            screenName: \"SubSample\",\n            showSaveContinue: true,\n            openChildModal: false,\n            childoperation: \"create\",\n            parentPopUpSize: \"lg\",\n            loading: false,\n            lstComponent,\n            openPortal: true,\n            openModal: false,\n            operation: \"create\",\n            loadSubSample: true,\n            selectComponent: selectedRecord1,\n            SubSamplecomboData: comboData1,\n            SubSamplecomboComponents,\n            SubSamplewithoutCombocomponent,\n            TestCombined,\n            parentSubSampleColumnList: columnList,\n            childSubSampleColumnList: childColumnList,\n            timeZoneList,\n            defaultTimeZone,\n            masterData,\n            selectPackage: [],\n            TestPackage: PackageData\n          }\n        });\n      }).catch(error => {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      });\n    };\n  } else {\n    const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData, selectComponent, childColumnList, SubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo);\n    return dispatch => {\n      if (!specBasedComponent) {\n        const urlArray = [];\n        const ComponentTestBySpec = rsapi.post(\"/registration/getTestfromDB\", {\n          nallottedspeccode: Map[\"nallottedspeccode\"],\n          slno: Component ? Object.keys(Component).length + 1 : 1,\n          // nneedsubsample: Map[\"nneedsubsample\"],\n          ...Map,\n          // nallottedspeccode: objComponent.nallottedspeccode,\n          specBasedComponent: specBasedComponent,\n          conditionalTestPackage: true,\n          specBasedTestPackage: specBasedTestPackage\n        });\n        urlArray[0] = ComponentTestBySpec;\n        const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n          userinfo\n        });\n        urlArray[1] = currentDate;\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n          datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\n          userinfo\n        });\n        urlArray[2] = dateService;\n        const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\n          //  nspecsampletypecode: selectedobject.nspecsampletypecode,\n          nallottedspeccode: selectedRecord.nallottedspeccode.item.nallottedspeccode,\n          slno: Component ? Object.keys(Component).length + 1 : 1,\n          specBasedComponent: specBasedComponent,\n          specBasedTestPackage: specBasedTestPackage,\n          conditionalTestPackage: conditionalTestPackage\n        });\n        urlArray[3] = TestPackageGet;\n        Axios.all(urlArray).then(response => {\n          let TestCombined = [];\n          let PackageData = []; //  if (!specBasedTestPackage) {\n\n          TestCombined = response[0].data; // } \n          // else {\n\n          const PackageDataMap = constructOptionList(response[3].data.TestPackage || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n          PackageData = PackageDataMap.get(\"OptionList\"); // if (PackageData.length === 0) {\n          //    dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \n          //} \n          // }\n\n          const selectedRecord1 = newcomboData.selectedRecord;\n          SubSamplewithoutCombocomponent.map(componentrow => {\n            if (componentrow.inputtype === \"date\") {\n              if (componentrow.loadcurrentdate) {\n                selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[1].data) : \"\";\n                selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n              } else if (componentrow.nperiodcode) {\n                selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n\n                if (componentrow.loadselecteddate) {\n                  selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n                } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n                //    new Date(response[2].data[componentrow.label]):null;\n\n              } else {\n                selectedRecord1[componentrow.label + \"value\"] = new Date();\n              }\n\n              if (componentrow.hidebeforedate) {\n                selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n              }\n\n              if (componentrow.hideafterdate) {\n                selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n              }\n            } else if (componentrow.inputtype === \"radio\") {\n              selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n            }\n          }); // if (masterData.RealRegSubTypeValue.nregsubtypecode === 6) {\n          //     let portalOrder = selectedRecord && selectedRecord['Portal Order ID'] || {}\n          //     let containerType = SubSamplecomboData['ContainerType'] || []\n          //     let containerList = []\n          //     const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1\n          //     containerType.map(x => {\n          //         if (x.item.jsondata.nportalordercode === nportalordercode) {\n          //             containerList.push(x)\n          //         }\n          //     })\n          //     SubSamplecomboData['Container Type'] = containerList\n          // }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              ChildscreenName: \"SubSample\",\n              screenName: \"SubSample\",\n              showSaveContinue: true,\n              openChildModal: false,\n              childoperation: \"create\",\n              parentPopUpSize: \"lg\",\n              loading: false,\n              lstComponent: [],\n              openPortal: true,\n              openModal: false,\n              operation: \"create\",\n              loadSubSample: true,\n              selectComponent: selectedRecord1,\n              TestCombined: TestCombined,\n              TestPackage: PackageData\n            }\n          });\n        });\n      } else {\n        // Component = Component ? Component : []\n        const urlArray = [];\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", { ...Map,\n          specBasedComponent: specBasedComponent\n        });\n        urlArray[0] = ComponentTestBySpec;\n        const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n          userinfo\n        });\n        urlArray[1] = currentDate;\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n          datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\n          userinfo\n        });\n        urlArray[2] = dateService;\n        Axios.all(urlArray).then(response => {\n          // const lstComponent =  response.data.lstComponent\n          let lstComponent = response[0].data.lstComponent; //filterRecordBasedOnTwoArrays(response.data.lstComponent, Component, \"ncomponentcode\")\n\n          const lstComponentMap = constructOptionList(lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n          lstComponent = lstComponentMap.get(\"OptionList\");\n          const selectedRecord1 = newcomboData.selectedRecord;\n          SubSamplewithoutCombocomponent.map(componentrow => {\n            if (componentrow.inputtype === \"date\") {\n              if (componentrow.loadcurrentdate) {\n                selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[1].data) : \"\";\n                selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n              } else if (componentrow.nperiodcode) {\n                selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n\n                if (componentrow.loadselecteddate) {\n                  selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n                } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n                //    new Date(response[2].data[componentrow.label]):null;\n\n              } else {\n                selectedRecord1[componentrow.label + \"value\"] = new Date();\n              }\n\n              if (componentrow.hidebeforedate) {\n                selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n              }\n\n              if (componentrow.hideafterdate) {\n                selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n              }\n            } else if (componentrow.inputtype === \"radio\") {\n              selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n            }\n          }); // if (masterData.RealRegSubTypeValue.nregsubtypecode === 6) {\n          //     let portalOrder = selectedRecord && selectedRecord['Portal Order ID'] || {}\n          //     let containerType = SubSamplecomboData['ContainerType'] || []\n          //     let containerList = []\n          //     const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1\n          //     containerType.map(x => {\n          //         if (x.item.jsondata.nportalordercode === nportalordercode) {\n          //             containerList.push(x)\n          //         }\n          //     })\n          //     SubSamplecomboData['Container Type'] = containerList\n          // }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              ChildscreenName: \"SubSample\",\n              screenName: \"SubSample\",\n              showSaveContinue: true,\n              openChildModal: false,\n              childoperation: \"create\",\n              parentPopUpSize: \"lg\",\n              loading: false,\n              lstComponent,\n              openPortal: true,\n              openModal: false,\n              operation: \"create\",\n              loadSubSample: true,\n              selectComponent: selectedRecord1,\n              TestCombined: [],\n              selectedTestData: [],\n              selectPackage: []\n            }\n          });\n        });\n      }\n    };\n  }\n} // export function componentTestPackage(selectedobject, Reg, specBasedComponent, Component,specBasedTestPackage,conditionalTestPackage) {\n//     return function (dispatch) {\n//         dispatch(initRequest(true));\n//         Component = Component ? Component : []\n//         rsapi.post(\"/registration/getTestfromDB\", {\n//             nspecsampletypecode: selectedobject.selectedSubSample &&\n//             [...new Set(selectedobject.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\"),\n//             conditionalTestPackage: true,\n//             specBasedTestPackage: specBasedTestPackage,\n//             specBasedComponent: specBasedComponent,\n//             nallottedspeccode:selectedobject.selectedSample[0].nallottedspeccode\n//         })\n//             .then(response => {\n//                 let PackageData = []\n//                 let TestData=[]\n//                 if (specBasedTestPackage) {\n//                     const PackageDataMap = constructOptionList(response.data.TestPackage || [], \"ntestpackagecode\",\n//                         \"stestpackagename\", undefined, undefined, true);\n//                     PackageData = PackageDataMap.get(\"OptionList\");\n//                     // if (PackageData.length === 0) {\n//                     //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \n//                     // } \n//                 }\n//                 else {\n//                      TestData = response.data;\n//                 }\n//                 //let Test = [];\n//                 // Test[selectedobject.slno] = TestData;\n//                 const Map = {}\n//                 if (Reg) {\n//                     delete selectedobject.ntestpackagecode\n//                     delete selectedobject.ntestgrouptestcode\n//                     Map[\"selectedRecord\"] = selectedobject\n//                 } else {\n//                     Map[\"selectComponent\"] = selectedobject\n//                 }\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: {\n//                         TestCombined: TestData, TestPackage: PackageData,\n//                         ...Map,\n//                         loading: false, selectedTestData: [],\n//                         availableTest:[],\n//                       //  selectPackage: {},\n//                         screenName: \"IDS_TEST\",\n//                         operation: \"create\",\n//                         openModal: true,\n//                         parentPopUpSize: \"lg\",\n//                         loadChildTest: true,\n//                        //selectedRecord:{},\n//                     }\n//                 });\n//             })\n//             .catch(error => {\n//                 toast.error(error.message);\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//             })\n//     }\n// }\n\nexport function componentTest(selectedobject, Reg, specBasedComponent, Component, specBasedTestPackage, conditionalTestPackage) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const urlArray = [];\n    Component = Component ? Component : [];\n    const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\n      nspecsampletypecode: selectedobject.nspecsampletypecode,\n      slno: Component ? Object.keys(Component).length + 1 : 1,\n      specBasedComponent: specBasedComponent,\n      specBasedTestPackage: specBasedTestPackage,\n      conditionalTestPackage: conditionalTestPackage,\n      nneedsubsample: selectedobject.nneedsubsample\n    });\n    urlArray[0] = TestGet;\n    const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\n      nspecsampletypecode: selectedobject.nspecsampletypecode,\n      slno: Component ? Object.keys(Component).length + 1 : 1,\n      specBasedComponent: specBasedComponent,\n      specBasedTestPackage: specBasedTestPackage,\n      conditionalTestPackage: conditionalTestPackage\n    });\n    urlArray[1] = TestPackageGet;\n    Axios.all(urlArray).then(response => {\n      let PackageData = [];\n      let TestData = []; // if (specBasedTestPackage) {\n\n      const PackageDataMap = constructOptionList(response[1].data.TestPackage || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n      PackageData = PackageDataMap.get(\"OptionList\"); // if (PackageData.length === 0) {\n      //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \n      // } \n      //   }\n      //    else {\n\n      TestData = response[0].data; //  }\n      //let Test = [];\n      // Test[selectedobject.slno] = TestData;\n\n      const Map = {};\n\n      if (Reg) {\n        Map[\"selectedRecord\"] = selectedobject;\n      } else {\n        Map[\"selectComponent\"] = selectedobject;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          TestCombined: TestData,\n          AllTest: TestData,\n          TestPackage: PackageData,\n          ...Map,\n          loading: false,\n          selectedTestData: [],\n          selectPackage: []\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n} // export function testPackageTest(selectedobject, Reg, specBasedComponent, Component,specBasedTestPackage,conditionalTestPackage,selectComponent,objComponent,LoginProps,selectPackage,subSampleBased,selectedSpec,nneedsubsample) {\n\nexport function testPackageTest(selectedobject, Reg, specBasedComponent, Component, selectComponent, objComponent, LoginProps, selectPackage, subSampleBased, selectedSpec, nneedsubsample) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    Component = Component ? Component : []; // rsapi.post(\"/registration/getTestBasesdTestPackage\", {\n    //     nspecsampletypecode:!nneedsubsample?selectedSpec.item.nspecsampletypecode: Object.keys(selectedobject).length!==0?selectedobject.nspecsampletypecode:selectComponent.nspecsampletypecode,\n    //     slno:subSampleBased?Component ? Object.keys(Component).length + 1 : 1:selectComponent.slno,\n    //     specBasedComponent: specBasedComponent,\n    //     ntestpackagecode: selectPackage.ntestpackagecode.value,\n    //     nallottedspeccode:selectedSpec!==undefined?selectedSpec.value:selectedobject.nallottedspeccode\n    // })\n\n    rsapi.post(\"/registration/getTestBasesdTestPackage\", {\n      // nspecsampletypecode:!nneedsubsample?selectedSpec.item.nspecsampletypecode: Object.keys(selectedobject).length!==0?selectedobject.nspecsampletypecode:selectComponent.nspecsampletypecode,\n      nspecsampletypecode: selectComponent && selectComponent.nspecsampletypecode ? selectComponent.nspecsampletypecode : selectedobject.nspecsampletypecode,\n      //     slno: subSampleBased ? Component ? Object.keys(Component).length + 1 : 1 : selectComponent.slno,\n      specBasedComponent: specBasedComponent,\n      ntestpackagecode: selectPackage.ntestpackagecode.value,\n      nallottedspeccode: selectedSpec && selectedSpec.value !== undefined ? selectedSpec.value : selectedobject.nallottedspeccode\n    }).then(response => {\n      const Map = {};\n      let TestData = response.data;\n      let Test = LoginProps.Test || [];\n      let componentTest = [];\n\n      if (subSampleBased) {\n        componentTest = Test[Component ? Object.keys(Component).length + 1 : 1] ? Test[Component ? Object.keys(Component).length + 1 : 1] : [];\n      } else {\n        componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\n      }\n\n      const availableTest = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\n      const TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\n      delete selectedobject.ntestgrouptestcode;\n\n      if (Reg) {\n        Map[\"selectedRecord\"] = selectedobject;\n      } else {\n        Map[\"selectPackage\"] = selectPackage;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          availableTest,\n          TestCombined,\n          ...Map,\n          loading: false,\n          selectedTestData: [] //, selectPackage: []\n          // TestCombined,loadTest: true, openChildModal: false,\n          // ChildscreenName: \"Test\",\n          //  screenName: \"Test\",\n          // operation: \"create\",\n          //  childoperation: \"create\",\n          //   parentPopUpSize: \"lg\", loading: false\n\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function addSubSampleSaveContinue(Map1, Map, specBasedComponent, Component, selectedTestData, lstComponent) {\n  //  const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData,\n  //     selectComponent, childColumnList, SubSamplewithoutCombocomponent)\n  return dispatch => {\n    if (!specBasedComponent) {\n      rsapi.post(\"/registration/getTestfromDB\", {\n        nallottedspeccode: Map[\"nallottedspeccode\"],\n        nspecsampletypecode: Map[\"nspecsampletypecode\"],\n        slno: Map1.Component ? Object.keys(Map1.Component).length + 1 : 1,\n        specBasedComponent: specBasedComponent,\n        nneedsubsample: Map[\"nneedsubsample\"]\n      }).then(response => {\n        let TestCombined = response.data; // let selectedTestPackageData = selectedTestPackageData && selectedTestPackageData.length > 0 ? selectedTestData : []\n\n        let selectedTestPackageData = selectedTestData && selectedTestData.length > 0 ? selectedTestData : [];\n        const selectedTestPackageData1 = TestCombined.filter(function (x) {\n          return selectedTestPackageData.some(function (y) {\n            return x[\"ntestpackagetestcode\"] === y.value;\n          });\n        });\n        selectedTestData = selectedTestData && selectedTestData.length > 0 ? selectedTestPackageData : [];\n        const selectedTestData1 = TestCombined.filter(function (x) {\n          return selectedTestData.some(function (y) {\n            return x[\"ntestgrouptestcode\"] === y.value;\n          });\n        }); // const selectedTestData2 = []\n        // TestCombined.map(x=>{\n        //     selectedTestData1.map(y=>{\n        //         if(x[\"ntestgrouptestcode\"] !== y[\"ntestgrouptestcode\"]){\n        //             selectedTestData2.push(x)\n        //         } \n        //     })\n        // });\n        //  let filterArray = filterRecordBasedOnTwoArrays(selectedTestData1, TestCombined, \"ntestgrouptestcode\")\n        // const filterArray = [...selectedTestData1, ...TestCombined]\n\n        selectedTestData = constructOptionList(selectedTestData1, \"ntestgrouptestcode\", \"stestsynonym\");\n        selectedTestData[\"ntestgrouptestcode\"] = selectedTestData.get(\"OptionList\");\n        selectedTestPackageData = constructOptionList(selectedTestPackageData1, \"ntestpackagetestcode\", \"stestpackagename\");\n        selectedTestPackageData[\"ntestpackagetestcode\"] = selectedTestPackageData.get(\"OptionList\");\n        Map1.selectComponent = {}; // Map1.selectComponent[\"ncomponentcode\"] = {};\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...Map1,\n            loading: false,\n            TestCombined,\n            //selectedTestData,\n            //selectedTestPackageData,\n            selectedTestData: [],\n            selectedTestPackageData: [],\n            masterStatus: intl.formatMessage({\n              id: \"IDS_SAVESUCCESSFULLY\"\n            })\n          }\n        });\n      });\n    } else {\n      // lstComponent = lstComponent.filter(x => x.item.nspecsampletypecode !== Map1.selectComponent[\"nspecsampletypecode\"])\n      Map1.selectComponent = {};\n      Map1.selectComponent[\"ncomponentcode\"] = {}; // Map1.selectComponent[\"ncomponentcode\"] = {};\n      // Map1.selectComponent[\"Sample Name\"] = \"\";\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...Map1,\n          loading: false,\n          TestCombined: [],\n          selectedTestData: [],\n          selectedTestPackageData: [],\n          lstComponent,\n          masterStatus: intl.formatMessage({\n            id: \"IDS_SAVESUCCESSFULLY\"\n          })\n        }\n      });\n    }\n  };\n}\nexport function editSubSample(Map, component, userInfo, specBasedComponent, SubSamplecomboData, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    let Componnet = {};\n\n    if (specBasedComponent) {\n      Componnet = rsapi.post(\"/registration/getComponentBySpec\", { ...Map\n      });\n    }\n\n    urlArray = [Componnet];\n    Axios.all(urlArray).then(response => {\n      let comp = [];\n\n      if (specBasedComponent) {\n        comp = response[0].data.lstComponent;\n      }\n\n      const lstComponentMap = constructOptionList(comp || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n\n      if (Map.nregsubtypecode === 6) {\n        let portalOrder = component['Container Type'] || {};\n        let containerType = SubSamplecomboData['ContainerType'] || [];\n        let containerList = [];\n        const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1;\n        containerType.map(x => {\n          if (x.item.jsondata.nportalordercode === nportalordercode) {\n            containerList.push(x);\n          }\n        });\n        SubSamplecomboData['Container Type'] = containerList;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadSubSample: true,\n          childoperation: \"update\",\n          ChildscreenName: \"SubSample\",\n          openChildModal: false,\n          selectComponent: component,\n          parentPopUpSize: \"lg\",\n          loading: false,\n          lstComponent,\n          SubSamplecomboData\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function insertRegistration(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/createRegistration\", inputParam.inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\n        let selectedSample = response.data[\"selectedSample\"];\n        let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\n        let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n        let selectedSubSample = RegistrationGetSubSample;\n        RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\n        let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\n\n        if (inputParam.inputData.nneedsubsample) {\n          RegistrationGetSubSample = sortData(response.data[\"RegistrationGetSubSample\"], 'npreregno', 'desc');\n          selectedSubSample = RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\n          RegistrationGetTest = RegistrationGetTest.filter(x => x.ntransactionsamplecode === selectedSubSample[0].ntransactionsamplecode);\n          selectedTest = RegistrationGetTest.length > 0 ? response.data[\"selectedTest\"] : [];\n        } // RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\")\n\n\n        if (inputParam.multipleselectionFlag) {\n          selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\n          updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\n          updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\n          RegistrationGetSubSample = masterData.RegistrationGetSubSample;\n          RegistrationGetTest = masterData.RegistrationGetTest;\n        }\n\n        masterData = { ...masterData,\n          ...response.data,\n          selectedSample,\n          selectedSubSample,\n          selectedTest,\n          RegistrationGetSubSample,\n          RegistrationGetTest,\n          RegistrationGetSample\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          openModal: false,\n          loadEsign: false,\n          showConfirmAlert: false,\n          selectedRecord: undefined,\n          loading: false,\n          loadPreregister: false,\n          showSample: undefined,\n          openPortal: false,\n          selectedSpec: {},\n          selectComponent: {},\n          SelectedTest: {},\n          selectedComponent: {},\n          Component: [],\n          selectedRecord: {},\n          SelectedTest: [],\n          Test: [],\n          selectedComponent: {},\n          subSampleDataGridList: []\n        };\n        inputParam.postParamList[0]['clearFilter'] = 'yes';\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        toast.warn(response.data.rtn);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showConfirmAlert: false\n          }\n        });\n      }\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          showConfirmAlert: false\n        }\n      });\n    });\n  };\n}\nexport function insertRegistrationScheduler(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/schedulerinsertRegistration\", inputParam.inputData).then(response => {\n      // if (response.data.rtn === \"Success\") {\n      //     let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\n      //     let selectedSample = response.data[\"selectedSample\"];\n      //     let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\n      //     let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n      //     let selectedSubSample = RegistrationGetSubSample;\n      //     RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\n      //     let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\n      //     if (inputParam.inputData.nneedsubsample) {\n      //         RegistrationGetSubSample = sortData(response.data[\"RegistrationGetSubSample\"], 'npreregno', 'desc')\n      //         selectedSubSample = RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\n      //         RegistrationGetTest = RegistrationGetTest.filter(x => x.ntransactionsamplecode === selectedSubSample[0].ntransactionsamplecode)\n      //         selectedTest = RegistrationGetTest.length > 0 ? response.data[\"selectedTest\"] : [];\n      //     }\n      //     // RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\")\n      //     if (inputParam.multipleselectionFlag) {\n      //         selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\n      //         updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\n      //         updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\n      //         RegistrationGetSubSample = masterData.RegistrationGetSubSample;\n      //         RegistrationGetTest = masterDat..a.RegistrationGetTest;\n      //     }\n      //     masterData = {\n      //         ...masterData, ...response.data,\n      //         selectedSample, selectedSubSample, selectedTest,\n      //         RegistrationGetSubSample, RegistrationGetTest, RegistrationGetSample\n      //     }\n      let respObject = {\n        masterData: { ...masterData,\n          SchedulerTransaction: response[\"data\"].SchedulerTransaction\n        },\n        ...inputParam.inputData,\n        openModal: false,\n        loadEsign: false,\n        showConfirmAlert: false,\n        selectedRecord: undefined,\n        loading: false,\n        loadPreregister: false,\n        showSample: undefined,\n        openPortal: false,\n        selectedSpec: {},\n        selectComponent: {},\n        SelectedTest: {},\n        selectedComponent: {},\n        Component: [],\n        selectedRecord: {},\n        SelectedTest: [],\n        Test: [],\n        selectedComponent: {},\n        subSampleDataGridList: []\n      }; // inputParam.postParamList[0]['clearFilter'] = 'yes'\n      // dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...respObject\n        }\n      }); // } else {\n      //     toast.warn(response.data.rtn);\n      //     dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\n      // }\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          showConfirmAlert: false\n        }\n      });\n    });\n  };\n}\nexport function getRegistrationSample(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData\n    }).then(response => {\n      let masterData = { ...inputData.masterData,\n        ...response.data\n      };\n\n      if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        inputData.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n        inputData.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n        inputData.searchTestRef.current.value = \"\";\n        masterData['searchedTest'] = undefined;\n      }\n\n      let respObject = {};\n\n      if (inputData.selectedFilter) {\n        respObject = {\n          selectedFilter: { ...inputData.selectedFilter\n          }\n        };\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          testskip: 0,\n          take: undefined,\n          testtake: undefined,\n          subsampleskip: 0,\n          subsampletake: undefined,\n          showSample: undefined,\n          ...respObject,\n          activeSampleTab: inputData.inputData.activeSampleTab\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationsubSampleDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeTestTab,\n      activeSubSampleTab: inputData.activeTestTab,\n      userinfo: inputData.userinfo,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      nneedsubsample: inputData.nneedsubsample,\n      ntype: inputData.checkBoxOperation === 7 ? 2 : undefined,\n      checkBoxOperation: inputData.nneedsubsample === true ? inputData.checkBoxOperation === 5 ? 3 : inputData.checkBoxOperation : inputData.checkBoxOperation\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    const subSample = inputData.nneedsubsample;\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"registration/getRegistrationSubSample\", inputParamData).then(response => {\n        sortData(response.data, \"descending\", \"npreregno\");\n        sortData(response.data['RegistrationAttachment']);\n        sortData(response.data['RegistrationComment']);\n        let masterData = {};\n        let skipInfo = {};\n        let oldSelectedTest = inputData.masterData.selectedTest || [];\n\n        if (subSample) {\n          let oldSelectedSubSample = inputData.masterData.selectedSubSample;\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          masterData = { ...inputData.masterData,\n            selectedSample: inputData.selectedSample,\n            selectedPreregno: inputData.npreregno,\n            selectedSubSample: inputData.masterData.RegistrationGetSubSample.length > 0 ? [inputData.masterData.RegistrationGetSubSample[0]] : []\n          };\n          let RegistrationTestComment = [];\n          let RegistrationTestAttachment = [];\n          let RegistrationParameter = [];\n          let RegistrationComment = []; //if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7) {  \n\n          if (inputData.checkBoxOperation === 1) {\n            const wholeSubSampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((subsample, index) => {\n              if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n            });\n\n            if (oldSelectedSubSample.length > 0) {\n              masterData = { ...masterData,\n                selectedSubSample: oldSelectedSubSample\n              };\n            }\n\n            const selectedTest = getSameRecordFromTwoArrays(oldSelectedTest, masterData.selectedSubSample, 'npreregno');\n            masterData = { ...masterData,\n              selectedTest\n            };\n          }\n\n          if (inputData.checkBoxOperation === 7) {\n            // masterData = {\n            //     ...masterData,\n            //     APSelectedTest:responseData.APSelectedTest,\n            //     AP_TEST:responseData.AP_TEST,\n            //     ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\n            // }\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment1 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                {\n                  let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\n                  let RegistrationTestAttachment1 = [];\n\n                  if (inputData.masterData.RegistrationTestAttachment !== undefined) {\n                    RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\n                  }\n\n                  let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                  RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\n                  activeName = \"RegistrationTestAttachment\";\n                  dataStateName = \"testCommentDataState\";\n                }\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n                let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1;\n                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              default:\n                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment2 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n                }\n\n                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n\n            masterData['RegistrationTestComment'] = RegistrationTestComment;\n            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\n            masterData[\"RegistrationParameter\"] = RegistrationParameter;\n            masterData[\"RegistrationComment\"] = RegistrationComment;\n          }\n\n          if (inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 5) {\n            masterData = { ...masterData,\n              selectedTest: masterData.RegistrationGetTest.length > 0 ? [masterData.RegistrationGetTest[0]] : []\n            };\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment1 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                {\n                  let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\n                  let RegistrationTestAttachment1 = [];\n\n                  if (inputData.masterData.RegistrationTestAttachment !== undefined) {\n                    RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\n                  }\n\n                  let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                  RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\n                  activeName = \"RegistrationTestAttachment\";\n                  dataStateName = \"testCommentDataState\";\n                }\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n                let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1;\n                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_SAMPLECOMMENTS\":\n                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\n                activeName = \"RegistrationComment\";\n                dataStateName = \"sampleCommentsDataState\";\n                break;\n\n              default:\n                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment2 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n                }\n\n                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n\n            masterData['RegistrationTestComment'] = RegistrationTestComment;\n            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\n            masterData[\"RegistrationParameter\"] = RegistrationParameter;\n            masterData[\"RegistrationComment\"] = RegistrationComment;\n          }\n\n          let {\n            testskip,\n            testtake,\n            subsampleskip,\n            subsampletake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.RegistrationGetSubSample.length < inputData.subsampleskip) {\n            testskip = 0;\n            subsampleskip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake,\n              subsampleskip,\n              subsampletake\n            };\n          }\n        } else {\n          //let oldSelectedTest = inputData.masterData.selectedTest\n          //  let oldSelectedSubSample = inputData.masterData.selectedSubSample\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          masterData = { ...inputData.masterData,\n            selectedSample: inputData.selectedSample,\n            selectedPreregno: inputData.npreregno,\n            selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\n            selectedSubSample: inputData.masterData.RegistrationGetSubSample\n          };\n          let RegistrationTestComment = [];\n          let RegistrationParameter = [];\n          let RegistrationTestAttachment = [];\n          let RegistrationComment = [];\n\n          if (inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 1) {\n            const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n            oldSelectedTest.forEach((test, index) => {\n              if (!wholeTestList.includes(test.ntransactiontestcode)) {\n                oldSelectedTest.splice(index, 1);\n              }\n            });\n            let keepOld = false;\n            let ntransactiontestcode;\n            let npreregno;\n\n            if (oldSelectedTest.length > 0) {\n              keepOld = true;\n              masterData = { ...masterData,\n                selectedTest: oldSelectedTest\n              };\n            } else {\n              ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\";\n              npreregno = inputData.masterData.RegistrationGetSample.length > 0 ? inputData.masterData.RegistrationGetSample[0].npreregno : \"\";\n            }\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_PARAMETERRESULTS\":\n                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                {\n                  RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ? inputData.masterData.RegistrationTestAttachment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n                  activeName = \"RegistrationTestAttachment\";\n                  dataStateName = \"testCommentDataState\";\n                }\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_SAMPLECOMMENTS\":\n                RegistrationComment = keepOld ? inputData.masterData.RegistrationComment ? inputData.masterData.RegistrationComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\");\n                activeName = \"RegistrationComment\";\n                dataStateName = \"sampleCommentsDataState\";\n                break;\n\n              default:\n                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          } else if (inputData.checkBoxOperation === 5) {\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment1 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                {\n                  let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\n                  let RegistrationTestAttachment1 = [];\n\n                  if (inputData.masterData.RegistrationTestAttachment !== undefined) {\n                    RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\n                  }\n\n                  let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                  RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\n                  activeName = \"RegistrationTestAttachment\";\n                  dataStateName = \"testCommentDataState\";\n                }\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n                let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_SAMPLECOMMENTS\":\n                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\n                activeName = \"RegistrationComment\";\n                dataStateName = \"sampleCommentsDataState\";\n                break;\n\n              default:\n                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment2 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n                }\n\n                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            } // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n\n          } else {\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                {\n                  RegistrationTestAttachment = response.data.RegistrationTestAttachment ? [...response.data.RegistrationTestAttachment] : [];\n                  activeName = \"RegistrationTestAttachment\";\n                  dataStateName = \"testCommentDataState\";\n                }\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_SAMPLECOMMENTS\":\n                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\n                activeName = \"RegistrationComment\";\n                dataStateName = \"sampleCommentsDataState\";\n                break;\n\n              default:\n                RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          }\n\n          masterData['RegistrationTestComment'] = RegistrationTestComment;\n          masterData[\"RegistrationParameter\"] = RegistrationParameter;\n          masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\n          masterData['RegistrationComment'] = RegistrationComment;\n          let {\n            testskip,\n            testtake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\n            testskip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake\n            };\n          }\n        }\n\n        if (inputData.masterData.selectedSample && inputData.sampleGridDataState && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        }\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        } // let inputParam = { attachmentskip: undefined }\n\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo // inputParam:inputData\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let bool = false;\n      let skipInfo = {};\n      let {\n        testskip,\n        testtake,\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let oldSelectedTest = inputData.masterData.selectedTest;\n      let oldSelectedSubSample = inputData.masterData.selectedSubSample; // let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n\n      let isGrandChildGetRequired = false;\n      let TestSelected = [];\n      let subSampleSelected = [];\n\n      if (inputData[\"statusNone\"]) {\n        TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      } else {\n        TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      }\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let selectedSample = inputData.selectedSample;\n        let filterTestSameOldSelectedTest = getSameRecordFromTwoArrays(oldSelectedTest, inputData.masterData.RegistrationGetTest, \"ntransactiontestcode\");\n        let selectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest : inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\n        let ntransactiontestcode = selectedTest.length > 0 ? selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\n        let selectedSubSample = inputData.masterData.RegistrationGetSubSample;\n\n        if (subSample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n          selectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RegistrationGetSubSample[0]];\n\n          if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let masterData = { ...inputData.masterData,\n          selectedSample,\n          selectedSubSample,\n          selectedTest\n        };\n\n        if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        }\n\n        inputData = { ...inputData,\n          childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"],\n          ntransactiontestcode,\n          masterData,\n          selectedTest,\n          selectedSubSample,\n          checkBoxOperation: 3,\n          skipInfo,\n          masterData\n        };\n\n        if (subSample) {\n          if (selectedTest.length === 0) {\n            inputData[\"npreregno\"] = selectedSubSample.map(x => x.npreregno).join(\",\");\n            inputData[\"ntransactionsamplecode\"] = selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\n            inputData[\"checkBoxOperation\"] = 3;\n            inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"];\n            dispatch(getRegistrationTestDetail(inputData, true));\n          } else {\n            dispatch(getTestChildTabDetailRegistration(inputData, true));\n          }\n        } else {\n          dispatch(getTestChildTabDetailRegistration(inputData, true));\n        }\n      } else {\n        let masterData = { ...inputData.masterData,\n          selectedSample: inputData.selectedSample,\n          selectedPreregno: inputData.npreregno,\n          selectedTest: TestSelected ? TestSelected : inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\n          // RegistrationTestComment,\n          selectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.RegistrationGetSubSample\n        };\n        let subsamplecheck = true;\n\n        if (subSample) {\n          let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n\n          if (SubSampleSelected.length > 0) {\n            let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n\n            if (filterSelectedSubSample.length === 0) {\n              let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n              oldSelectedSubSample.forEach((test, index) => {\n                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                  oldSelectedSubSample.splice(index, 1);\n                }\n\n                return null;\n              });\n\n              if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0 && masterData.selectedTest.length === 0) {\n                const selectedSubSample1 = [inputData.masterData.RegistrationGetSubSample[0]];\n                masterData = { ...masterData,\n                  selectedSubSample: selectedSubSample1,\n                  selectedTest: []\n                };\n                inputData = { ...inputData,\n                  ...masterData\n                };\n                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\");\n                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\");\n                inputData[\"checkBoxOperation\"] = 3;\n                inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"];\n                subsamplecheck = false;\n                dispatch(getRegistrationTestDetail(inputData, true));\n              }\n            } else {\n              oldSelectedSubSample = filterSelectedSubSample;\n            }\n          } else {\n            let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((test, index) => {\n              if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n\n              return null;\n            });\n          }\n\n          if (subsamplecheck) {\n            masterData = { ...masterData,\n              selectedSubSample: oldSelectedSubSample\n            };\n          }\n\n          if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampleskip,\n              subsampletake\n            };\n          }\n        }\n\n        let wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n        oldSelectedTest.forEach((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\";\n        }\n\n        masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n        masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n        let skipInfo = {};\n\n        if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        }\n\n        let dataStateArray = [{\n          activeName: 'selectedSample',\n          dataStateName: 'sampleGridDataState'\n        }, {\n          activeName: 'RegistrationSourceCountry',\n          dataStateName: 'sourceDataState'\n        }, {\n          activeName: 'RegistrationTestComment',\n          dataStateName: 'testCommentDataState'\n        }, {\n          activeName: 'RegistrationParameter',\n          dataStateName: 'resultDataState'\n        }];\n        dataStateArray.map(arr => {\n          if (inputData[arr.dataStateName] && masterData[arr.activeName] && masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          return null;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getRegistrationTestDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      activeSubSampleTab: inputData.activeSubSampleTab,\n      userinfo: inputData.userinfo,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      checkBoxOperation: inputData.checkBoxOperation,\n      nneedsubsample: inputData.nneedsubsample\n    };\n    const subSample = inputData.nneedsubsample;\n    let activeName = \"\";\n    let dataStateName = \"\";\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"registration/getRegistrationTest\", inputParamData).then(response => {\n        sortData(response.data);\n        let oldSelectedTest = inputData.masterData.selectedTest || [];\n        let oldSelectedSubSample = inputData.masterData.selectedSubSample || [];\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          selectedSubSample: inputData.selectedSubSample,\n          selectedTransactionsamplecode: inputData.ntransactionsamplecode,\n          selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [] // RegistrationTestComment,\n\n        }; //let wholeRegistrationTestComments = [];\n\n        let RegistrationTestComment = [];\n        let RegistrationTestAttachment = [];\n        let RegistrationParameter = [];\n        let RegistrationSampleComment = [];\n        let RegistrationSampleAttachment = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n          oldSelectedTest.forEach((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              selectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\";\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_PARAMETERRESULTS\":\n              RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ? inputData.masterData.RegistrationTestAttachment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTCOMMENTS\":\n              let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment1 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n              }\n\n              let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              {\n                let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\n                let RegistrationTestAttachment1 = [];\n\n                if (inputData.masterData.RegistrationTestAttachment !== undefined) {\n                  RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                dataStateName = \"testCommentDataState\";\n              }\n              break;\n\n            case \"IDS_PARAMETERRESULTS\":\n              let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n              let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n              let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            default:\n              let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment2 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n              }\n\n              let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          } // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n\n        } else if (inputData.checkBoxOperation === 7) {\n          let testList = reArrangeArrays(inputData.masterData.RegistrationGetSubSample, response.data.RegistrationGetTest, \"ntransactionsamplecode\");\n          masterData = { ...masterData,\n            selectedTest: testList ? testList.length > 0 ? [testList[0]] : [] : [],\n            RegistrationGetTest: testList ? testList.length > 0 ? testList : [] : [] //ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\n\n          };\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTCOMMENTS\":\n              let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment1 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n              }\n\n              let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              {\n                let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\n                let RegistrationTestAttachment1 = [];\n\n                if (inputData.masterData.RegistrationTestAttachment !== undefined) {\n                  RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                dataStateName = \"testCommentDataState\";\n              }\n              break;\n\n            case \"IDS_PARAMETERRESULTS\":\n              let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : []; // let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n\n              let RegistrationParameter1 = [...resultResponseData];\n              let ntransactiontestcode1 = testList ? testList.length > 0 ? testList[0].ntransactiontestcode : inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1 : -1;\n              RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            default:\n              let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment2 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n              }\n\n              let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          } // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n\n        } else {\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = response.data.RegistrationTestAttachment ? [...response.data.RegistrationTestAttachment] : [];\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_PARAMETERRESULTS\":\n              RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            default:\n              RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        if (subSample) {\n          let wholeSubsampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n          oldSelectedSubSample.map((test, index) => {\n            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\n              oldSelectedSubSample.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactionsamplecode;\n\n          if (oldSelectedSubSample.length > 0) {\n            keepOld = true;\n          } else {\n            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode;\n          }\n\n          switch (inputData.activeSubSampleTab) {\n            case \"IDS_SUBSAMPLECOMMENTS\":\n              RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleComment\";\n              dataStateName = \"subSampleCommentDataState\";\n              break;\n\n            default:\n              RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleAttachment\";\n              dataStateName = \"subSampleAttachmentDataState\";\n              break;\n          }\n        }\n\n        masterData['RegistrationTestComment'] = RegistrationTestComment;\n        masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\n        masterData[\"RegistrationParameter\"] = RegistrationParameter;\n        masterData[\"RegistrationSampleComment\"] = RegistrationSampleComment;\n        masterData[\"RegistrationSampleAttachment\"] = RegistrationSampleAttachment;\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        if (inputData.masterData.selectedSample && inputData.sampleGridDataState && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        } //  let inputParam = { attachmentskip: undefined }\n\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeTabIndex: inputData.activeTabIndex,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo //  inputParam\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.selectedTest;\n      let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = true;\n      } else {\n        isGrandChildGetRequired = false;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode.toString() : \"-1\";\n        let selectedSubSample = inputData.selectedSubSample; // let selectedPreregno = inputData.npreregno;\n\n        let selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : []; // let selectedSubSample = inputData.masterData.RegistrationGetSubSample\n\n        let masterData = { ...inputData.masterData,\n          selectedSubSample,\n          selectedTest\n        };\n        inputData = { ...inputData,\n          childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationParameter\"],\n          ntransactiontestcode,\n          masterData,\n          selectedTest,\n          selectedSubSample,\n          checkBoxOperation: 3\n        };\n        dispatch(getTestChildTabDetailRegistration(inputData, true));\n      } else {\n        let masterData = { ...inputData.masterData,\n          selectedSubSample: inputData.selectedSubSample,\n          selectedTransactioncode: inputData.ntransactionsamplecode,\n          selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : []\n        };\n        const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n        oldSelectedTest.forEach((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\";\n        }\n\n        masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n        masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n        let skipInfo = {};\n        let dataStateArray = [{\n          activeName: 'selectedSample',\n          dataStateName: 'sampleGridDataState'\n        }, {\n          activeName: 'RegistrationSourceCountry',\n          dataStateName: 'sourceDataState'\n        }, {\n          activeName: 'RegistrationTestComment',\n          dataStateName: 'testCommentDataState'\n        }, {\n          activeName: 'RegistrationParameter',\n          dataStateName: 'resultDataState'\n        }];\n        dataStateArray.map(arr => {\n          if (inputData[arr.dataStateName] && masterData[arr.activeName] && masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          return null;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            activeTabIndex: inputData.activeTabIndex,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function acceptRegistration(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/acceptRegistration\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\" || response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\" || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\n        replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n        replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n        replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n        delete response.data[\"RegistrationGetSample\"];\n        delete response.data[\"RegistrationGetSubSample\"];\n        delete response.data[\"RegistrationGetTest\"];\n        let masterData = { ...LoginProps,\n          ...response.data,\n          selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n          selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n          selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n\n        if (response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\" || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\n          toast.warn(intl.formatMessage({\n            id: response.data.rtn\n          }));\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      // toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data[\"rtn\"]);\n      }\n    });\n  };\n}\nexport const addMoreTest = (inputParam, ncontrolCode) => {\n  return dispatch => {\n    let {\n      sampleList\n    } = inputParam;\n    let value = false;\n\n    if (inputParam.selectedSample && inputParam.selectedSample.length > 0) {\n      if (inputParam.selectedSubSample && inputParam.selectedSubSample.length > 0) {\n        value = inputParam.selectedSubSample.some(obj => obj.nspecsampletypecode !== inputParam.selectedSubSample[0].nspecsampletypecode);\n\n        if (value) {\n          return toast.warn(intl.formatMessage({\n            id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n          }));\n        }\n\n        sampleList = sampleList ? [...sampleList.slice(inputParam.skip, inputParam.take)] : [];\n        const selectedsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedSample, \"npreregno\"); // const selectsubsample = getSameRecordFromTwoArrays(subsampleList, inputParam.selectedsubsample, \"ntransactionsamplecode\");\n\n        if (selectedsample && selectedsample.length > 0) {\n          const findTransactionStatus = [...new Set(selectedsample.map(item => item.ntransactionstatus))];\n\n          if (findTransactionStatus.length === 1) {\n            if (findTransactionStatus[0] !== transactionStatus.REJECT && findTransactionStatus[0] !== transactionStatus.CANCELLED) {\n              if (findTransactionStatus[0] !== transactionStatus.RELEASED) {\n                // if (selectsubsample && selectsubsample.length > 0) {\n                //     const findSubSampleStatus = [...new Set(selectsubsample.map(item => item.ntransactionstatus))];\n                //\n                //     if (findSubSampleStatus[0] !== transactionStatus.REJECT && findSubSampleStatus[0] !== transactionStatus.CANCELLED) \n                //     {                    \n                const findApprovalVersion = [...new Set(selectedsample.map(item => item.napprovalversioncode))];\n\n                if (findApprovalVersion.length === 1) {\n                  const findSampleSpec = [...new Set(selectedsample.map(item => item.nallottedspeccode))]; //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\n\n                  if (findSampleSpec.length === 1) //&& findComponent.length === 1 \n                    {\n                      inputParam[\"snspecsampletypecode\"] = inputParam.selectedSubSample && [...new Set(inputParam.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\");\n                      dispatch(initRequest(true));\n                      const urlArray = [];\n                      const TestGet = rsapi.post(\"/registration/getMoreTest\", { ...inputParam\n                      });\n                      urlArray[0] = TestGet;\n                      const TestPackageGet = rsapi.post(\"/registration/getMoreTestPackage\", { ...inputParam\n                      });\n                      urlArray[1] = TestPackageGet;\n                      Axios.all(urlArray).then(response => {\n                        let PackageData = [];\n                        const PackageDataMap = constructOptionList(response[1].data || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n                        PackageData = PackageDataMap.get(\"OptionList\");\n                        dispatch({\n                          type: DEFAULT_RETURN,\n                          payload: {\n                            availableTest: response[0].data,\n                            AllTest: response[0].data,\n                            TestPackage: PackageData,\n                            loadChildTest: true,\n                            loading: false,\n                            ncontrolCode,\n                            screenName: \"IDS_TEST\",\n                            operation: \"create\",\n                            openModal: true,\n                            parentPopUpSize: \"lg\",\n                            selectedRecord: {},\n                            showSample: undefined\n                          }\n                        });\n                      }).catch(error => {\n                        dispatch({\n                          type: DEFAULT_RETURN,\n                          payload: {\n                            loading: false\n                          }\n                        });\n\n                        if (error.response.status === 500) {\n                          toast.error(error.message);\n                        } else {\n                          toast.warn(this.props.formatMessage({\n                            id: error.response.data\n                          }));\n                        }\n                      });\n                    } else {\n                    toast.warn(intl.formatMessage({\n                      id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n                    }));\n                  }\n                } else {\n                  toast.warn(intl.formatMessage({\n                    id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\"\n                  }));\n                } //     }\n                //     else {\n                //         toast.warn(intl.formatMessage({ id: \"IDS_SUBSAMPLEISREJECTEDORCANCELLED\" }));\n                //     }\n                // }                               \n\n              } else {\n                toast.warn(intl.formatMessage({\n                  id: \"IDS_TESTCANNOTBEFORRELEASEDSAMPLES\"\n                }));\n              }\n            } else {\n              ////     toast.warn(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCANCELLEDREJECTSAMPLES\" }));\n              toast.warn(intl.formatMessage({\n                id: \"IDS_SAMPLEISREJECTEDORCANCELLED\"\n              }));\n            }\n          } else {\n            toast.warn(intl.formatMessage({\n              id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\"\n            }));\n          }\n        } else {\n          toast.warn(intl.formatMessage({\n            id: \"IDS_SELECTSAMPLE\"\n          }));\n        }\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTSUBSAMPLE\"\n        }));\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTSAMPLE\"\n      }));\n    }\n  };\n};\nexport const createRegistrationTest = (inputParam, masterData, modalName) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData\n    }).then(response => {\n      let RegistrationGetTest = updatedObjectWithNewElement(masterData[\"RegistrationGetTest\"], response.data[\"RegistrationGetTest\"]);\n      masterData = { ...masterData,\n        RegistrationGetTest: sortData(RegistrationGetTest, \"descending\", \"ntransactiontestcode\"),\n        selectedTest: response.data[\"RegistrationGetTest\"],\n        RegistrationParameter: response.data.RegistrationParameter // RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, masterData.RegistrationGetSample, 'npreregno')\n\n      };\n      let respObject = {\n        masterData,\n        [modalName]: false,\n        loading: false,\n        loadChildTest: false,\n        showSample: undefined,\n        openModal: false,\n        selectedRecord: {}\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'yes';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject)); // dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: {\n      //         masterData,\n      //         [modalName]: false,\n      //         loading: false,\n      //         loadChildTest: false,\n      //         showSample: undefined,\n      //         openModal: false,\n      //         selectedRecord: {}\n      //     }\n      // });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.error(error.message);\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            [modalName]: false,\n            loading: false,\n            loadChildTest: false,\n            showSample: undefined,\n            openModal: false,\n            selectedRecord: {}\n          }\n        });\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n};\nexport function getEditRegistrationComboService(inputParam, columnList, selectedRecord1, childColumnList, comboComponents, withoutCombocomponent) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const {\n      userInfo,\n      operation\n    } = { ...inputParam\n    };\n    let masterData = inputParam[\"masterData\"];\n\n    if (masterData[\"selectedSample\"].length > 1 || masterData[\"selectedSample\"].findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName]) === -1) {\n      inputParam.editRegParam[\"getSampleChildDetail\"] = true;\n    }\n\n    masterData[\"selectedSample\"] = [];\n    masterData[\"selectedSample\"].push(inputParam[\"mastertoedit\"]);\n    const npreregno = inputParam.mastertoedit[inputParam.primaryKeyName];\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\"); // const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n    //     parentcolumnlist: columnList,\n    //     childcolumnlist: childColumnList,\n    //     userinfo: userInfo\n    // })\n\n    const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationDetails\", { ...inputParam.editRegParam,\n      npreregno,\n      parentcolumnlist: columnList,\n      childcolumnlist: childColumnList,\n      userinfo: userInfo\n    });\n    const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n      datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\n      userinfo: userInfo\n    });\n    urlArray = [timeZoneService, selectedRegistration, dateService];\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = { ...response[1].data[\"EditData\"]\n      };\n      selectedRecord = { ...selectedRecord,\n        ...selectedRecord['jsondata']\n      }; // const recordToEdit = { ...response[2].data[\"SelectedRegistration\"][0] };\n      //  const currentTime = rearrangeDateFormat(userInfo, response[6].data);\n\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userInfo.stimezoneid,\n        value: userInfo.ntimezonecode\n      }; //  const newcomboData = parentChildComboLoad(columnList, response[1].data,\n      // selectedRecord, childColumnList, withoutCombocomponent)\n\n      if (selectedRecord.ntransactionstatus === transactionStatus.CANCELLED || selectedRecord.ntransactionstatus === transactionStatus.REJECT) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_CANNOTEDITCANCELLEDSAMPLE\"\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else {\n        const languagetypeCode = undefined;\n        const comboData = response[1].data;\n        delete comboData['EditData'];\n        let comboValues = {};\n\n        if (columnList.length > 0) {\n          columnList.map(x => {\n            if (x.inputtype === 'combo') {\n              if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n                {\n                  if (comboData[x.label].length > 0) {\n                    if (comboData[x.label][0].label === undefined) {\n                      const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                      comboData[x.label] = optionList.get(\"OptionList\");\n                    } else {\n                      comboData[x.label] = comboData[x.label];\n                      const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                    }\n                  } else {\n                    comboData[x.label] = [];\n                  } //comboValues = childComboLoad(x, comboData, selectedRecord, \n                  //   childColumnList, withoutCombocomponent)\\\n\n\n                  comboValues = childComboLoadForEdit(x, comboData, selectedRecord, childColumnList, withoutCombocomponent);\n                } else {\n                comboValues = {\n                  \"comboData\": comboData\n                };\n              }\n            } else {\n              comboValues = {\n                comboData: comboData,\n                ...comboValues\n              };\n            }\n          });\n        } else {\n          comboValues = {\n            \"comboData\": comboData\n          };\n        }\n\n        withoutCombocomponent.map(date => {\n          if (date.inputtype === 'date') {\n            selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ? rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\";\n\n            if (date.nperiodcode) {\n              selectedRecord[date.label + \"value\"] = response[2].data[date.label] ? new Date(response[2].data[date.label][\"datevalue\"]) : null;\n            } else {\n              selectedRecord[date.label + \"value\"] = new Date();\n            }\n\n            if (date.hidebeforedate) {\n              selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"];\n            }\n\n            if (date.hideafterdate) {\n              selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"];\n            }\n          }\n        });\n        let {\n          Specification,\n          AgaramTree,\n          ActiveKey,\n          FocusKey,\n          OpenNodes\n        } = [];\n        const selectedSpec = {};\n        Specification = constructOptionList(response[1].data[\"Specification\"] || [], \"nallottedspeccode\", \"sspecname\", undefined, undefined, true).get(\"OptionList\");\n        AgaramTree = response[1].data[\"AgaramTree\"];\n        ActiveKey = response[1].data[\"FocusKey\"];\n        FocusKey = response[1].data[\"ActiveKey\"];\n        OpenNodes = response[1].data[\"OpenNodes\"]; //Manufacturer = response.data[\"Manufacturer\"];\n\n        selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          \"value\": Specification[0].value,\n          \"label\": Specification[0].label,\n          \"item\": Specification[0].item\n        } : \"\";\n        selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n        selectedRecord = { ...selectedRecord,\n          ...selectedSpec\n        };\n\n        if (inputParam.editRegParam[\"getSampleChildDetail\"] === true) {\n          masterData = sortData({ ...masterData,\n            ...response[1].data[\"SampleChildDetail\"]\n          });\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            AgaramTree,\n            FocusKey,\n            ActiveKey,\n            OpenNodes,\n            selectedSpec,\n            Specification,\n            // statustoEditDetail: response[2].data[\"ApprovalConfigRole\"] || {},\n            // currentTime,\n            operation: \"update\",\n            screenName: inputParam.masterData.RealRegSubTypeValue.sregsubtypename,\n            // PopUpLabel: popUpLabel,\n            timeZoneList,\n            defaultTimeZone,\n            selectedRecord,\n            openPortal: true,\n            ncontrolCode: inputParam.editRegParam.ncontrolCode,\n            loadPreregister: true,\n            parentPopUpSize: \"xl\",\n            loading: false,\n            showSample: undefined,\n            comboData: comboValues.comboData,\n            childColumnList,\n            comboComponents,\n            withoutCombocomponent,\n            columnList,\n            masterData //  regRecordToEdit:recordToEdit\n\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function updateRegistration(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/updateRegistration\", inputParam.inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        // sortData(response.data);\n        replaceUpdatedObject(response.data[\"RegistrationGetSample\"], masterData.RegistrationGetSample, \"npreregno\");\n        replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n        replaceUpdatedObject(response.data[\"RegistrationGetTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\"); //  let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\n        //let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n\n        masterData = { ...masterData,\n          selectedSample: response.data[\"selectedSample\"],\n          // selectedSubSample: masterData[\"selectedSubSample\"],\n          //selectedTest:masterData[\"selectedTest\"],\n          // RegistrationGetTest,\n          // RegistrationGetSubSample,\n          RegistrationParameter: masterData[\"RegistrationParameter\"]\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            openPortal: false,\n            loading: false,\n            showConfirmAlert: false,\n            regDateEditConfirmMessage: undefined,\n            loadEsign: false,\n            openModal: false,\n            loadPreregister: false,\n            selectedRecord: {},\n            showSample: undefined\n          }\n        }); // let inputData = {\n        //     masterData,\n        //     selectedTest: masterData.selectedTest,\n        //     ntransactiontestcode: masterData.selectedTest ?\n        //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n        //     npreregno: masterData.selectedSample ?\n        //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n        //     userinfo: inputParam.inputData.userinfo,\n        //     activeTestTab : masterData.activeTestTab,\n        //     screenName: masterData.activeTestTab,\n        //     resultDataState: inputParam.resultDataState,\n        //     testCommentDataState: inputParam.testCommentDataState,\n        // }\n        // dispatch(getTestChildTabDetail(inputData, true))\n      } else {\n        toast.info(response.data.rtn);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else if (error.response.status === 302) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            regEditParam: inputParam,\n            showConfirmAlert: true,\n            parentPopUpSize: \"xl\",\n            regDateEditConfirmMessage: error.response.data,\n            showSample: undefined\n          }\n        });\n      } else {\n        toast.warn(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    });\n  };\n}\nexport function cancelTestAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/cancelTest\", inputParam.inputData).then(response => {\n      // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      let masterData = { ...LoginProps,\n        selectedTest: response.data[\"selectedTest\"],\n        // RegistrationGetTest:response.data[\"RegistrationGetTest\"],\n        RegistrationGetTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\") //  RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, LoginProps.RegistrationGetSample, 'npreregno')\n\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        openModal: false,\n        loadEsign: false,\n        showConfirmAlert: false,\n        selectedRecord: {},\n        loading: false,\n        loadPreregister: false,\n        showSample: undefined\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'no';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function cancelSampleAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/cancelSample\", inputParam.inputData).then(response => {\n      replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      let masterData = { ...LoginProps,\n        selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        loading: false,\n        loadEsign: false,\n        openModal: false,\n        showSample: undefined\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function addsubSampleRegistration(masterData, userinfo, regcolumnList, selectRecord, regchildColumnList, regSubSamplecomboComponents, regSubSamplewithoutCombocomponent, Map, ncontrolcode, specBasedComponent, specBasedTestPackage) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    urlArray[0] = timeZoneService;\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: regcolumnList,\n      childcolumnlist: regchildColumnList,\n      userinfo\n    });\n    urlArray[1] = actualService;\n\n    if (specBasedComponent) {\n      const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", { ...Map,\n        specBasedComponent: specBasedComponent,\n        userinfo\n      });\n      urlArray[2] = ComponentTestBySpec;\n    } else {\n      const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\n        nallottedspeccode: Map[\"nallottedspeccode\"],\n        slno: 1,\n        specBasedComponent: specBasedComponent,\n        specBasedTestPackage: specBasedTestPackage,\n        conditionalTestPackage: true,\n        nneedsubsample: Map[\"nneedsubsample\"]\n      });\n      urlArray[2] = TestGet;\n      const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\n        //  nspecsampletypecode: selectedobject.nspecsampletypecode,\n        nallottedspeccode: Map[\"nallottedspeccode\"],\n        //  slno: Component ? Object.keys(Component).length + 1 : 1,\n        specBasedComponent: specBasedComponent,\n        specBasedTestPackage: specBasedTestPackage //     conditionalTestPackage: conditionalTestPackage\n\n      });\n      urlArray[5] = TestPackageGet;\n    }\n\n    const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo\n    });\n    urlArray[3] = currentDate;\n    const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n      datecolumnlist: regSubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\n      userinfo\n    });\n    urlArray[4] = dateService;\n    Axios.all(urlArray).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userinfo.stimezoneid,\n        value: userinfo.ntimezonecode\n      };\n      const newcomboData = parentChildComboLoad(regcolumnList, response[1].data, selectRecord, regchildColumnList, regSubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo);\n      let TestCombined = [];\n      let lstComponent = [];\n      let PackageData = [];\n\n      if (specBasedComponent) {\n        const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n        lstComponent = lstComponentMap.get(\"OptionList\");\n      } else {\n        //if (specBasedTestPackage) {\n        const PackageDataMap = constructOptionList(response[5].data.TestPackage || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n        PackageData = PackageDataMap.get(\"OptionList\"); // if (PackageData.length === 0) {\n        //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \n        // } \n        // }\n        // else {\n\n        TestCombined = response[2].data; // }\n      }\n\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n      regSubSamplewithoutCombocomponent.map(componentrow => {\n        if (componentrow.inputtype === \"date\") {\n          if (componentrow.loadcurrentdate) {\n            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\n            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n          } else if (componentrow.nperiodcode) {\n            selectedRecord1[componentrow.label + \"value\"] = response[4].data[componentrow.label] ? new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\n\n            if (componentrow.loadselecteddate) {\n              selectedRecord1[componentrow.label] = response[4].data[componentrow.label] ? new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\n            } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n            //    new Date(response[2].data[componentrow.label]):null;\n\n          } else {\n            selectedRecord1[componentrow.label + \"value\"] = new Date();\n          }\n\n          if (componentrow.hidebeforedate) {\n            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n          }\n\n          if (componentrow.hideafterdate) {\n            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n          }\n        } else if (componentrow.inputtype === \"radio\") {\n          selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n        }\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          screenName: \"SubSample\",\n          showSaveContinue: false,\n          parentPopUpSize: \"lg\",\n          loading: false,\n          lstComponent,\n          openModal: true,\n          operation: \"create\",\n          loadRegSubSample: true,\n          selectedRecord: selectedRecord1,\n          regSubSamplecomboData: comboData1,\n          regSubSamplecomboComponents,\n          regSubSamplewithoutCombocomponent,\n          TestCombined,\n          regparentSubSampleColumnList: regcolumnList,\n          regchildSubSampleColumnList: regchildColumnList,\n          ncontrolCode: ncontrolcode,\n          timeZoneList,\n          defaultTimeZone,\n          masterData,\n          specBasedComponent,\n          specBasedTestPackage,\n          TestPackage: PackageData\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function saveSubSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/createSubSample\", inputParam.inputData).then(response => {\n      // let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\n      // let selectedSample = response.data[\"selectedSample\"];\n      let RegistrationGetSubSample = updatedObjectWithNewElement(inputParam.inputData.masterData.RegistrationGetSubSample, response.data[\"selectedSubSample\"]);\n      let RegistrationGetTest = response.data[\"selectedTest\"];\n      let selectedSubSample = response.data[\"selectedSubSample\"]; // RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\n\n      RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\n      let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\n      let RegistrationParameter = response.data[\"RegistrationParameter\"];\n      RegistrationParameter = getSameRecordFromTwoArrays(RegistrationParameter, selectedTest, 'ntransactiontestcode');\n      let masterData = { ...inputParam.inputData.masterData\n      };\n      masterData = { ...masterData,\n        ...response.data,\n        selectedSubSample,\n        selectedTest,\n        RegistrationGetSubSample,\n        RegistrationGetTest,\n        RegistrationParameter\n      };\n      let respObject = {\n        masterData,\n        openModal: false,\n        loadEsign: false,\n        loading: false,\n        showSample: undefined,\n        selectedRecord: {},\n        loadRegSubSample: false\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'yes';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject)); //    dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: {\n      //         masterData,\n      //         openModal: false,\n      //         loadEsign: false,\n      //         loading: false,\n      //         showSample: undefined,\n      //         selectedRecord: {},\n      //         loadRegSubSample:false\n      //     }\n      // });\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          showConfirmAlert: false\n        }\n      });\n    });\n  };\n}\nexport function getEditSubSampleComboService(inputParam, columnList, selectedRecord1, childColumnList, comboComponents, withoutCombocomponent, specBasedComponent) {\n  return function (dispatch) {\n    let {\n      userInfo,\n      operation,\n      masterData\n    } = { ...inputParam\n    };\n\n    if (masterData[\"selectedSubSample\"].length > 1 || masterData[\"selectedSubSample\"].findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName]) === -1) {\n      inputParam.editSubSampleRegParam[\"getSubSampleChildDetail\"] = true;\n    }\n\n    masterData[\"selectedSubSample\"] = [];\n    masterData[\"selectedSubSample\"].push(inputParam[\"mastertoedit\"]);\n    inputParam.editSubSampleRegParam[\"npreregno\"] = inputParam[\"mastertoedit\"][\"npreregno\"];\n    inputParam.editSubSampleRegParam[\"checkBoxOperation\"] = 3;\n    inputParam.editSubSampleRegParam[\"nfilterstatus\"] = inputParam[\"mastertoedit\"][\"ntransactionstatus\"];\n    inputParam.editSubSampleRegParam[\"napprovalconfigcode\"] = inputParam[\"mastertoedit\"][\"napprovalconfigcode\"]; //inputParam.editSubSampleRegParam[\"withoutgetparameter\"] = 3;\n\n    const ntransactionsamplecode = inputParam.mastertoedit[inputParam.primaryKeyName];\n\n    if (ntransactionsamplecode === undefined) {\n      toast.warn(intl.formattedMessage({\n        id: \"IDS_SELECTVALIDSUBSAMPLE\"\n      }));\n    } else {\n      let urlArray = [];\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\"); // const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      //     parentcolumnlist: columnList,\n      //     childcolumnlist: childColumnList,\n      //     userinfo: userInfo\n      // })\n\n      const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationSubSampleDetails\", { ...inputParam.editSubSampleRegParam,\n        ntransactionsamplecode,\n        parentcolumnlist: columnList,\n        childcolumnlist: childColumnList,\n        userinfo: userInfo\n      });\n      const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n        datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\n        userinfo: userInfo\n      });\n      urlArray = [timeZoneService, selectedRegistration, dateService]; // if(specBasedComponent){\n      //     const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\n      //         ...Map,\n      //         specBasedComponent: specBasedComponent\n      //     })\n      //     urlArray.push(ComponentTestBySpec) \n      // }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = { ...response[1].data[\"EditData\"]\n        };\n        selectedRecord = { ...selectedRecord,\n          ...selectedRecord['jsondata']\n        };\n        const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n        const timeZoneList = timeZoneMap.get(\"OptionList\");\n        const defaultTimeZone = {\n          label: userInfo.stimezoneid,\n          value: userInfo.ntimezonecode\n        }; // if (selectedRecord.ntransactionstatus !== transactionStatus.PREREGISTER) {\n        //     toast.warn(intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSUBSAMPLETOEDIT\" }));\n        //     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\n        // }\n        //else {\n        //               let lstComponent=[]\n\n        if (specBasedComponent) {\n          selectedRecord[\"ncomponentcode\"] = {\n            label: selectedRecord[\"scomponentname\"],\n            value: selectedRecord[\"ncomponentcode\"]\n          };\n        }\n\n        const languagetypeCode = undefined;\n        const comboData = response[1].data;\n        delete comboData['EditData'];\n        let comboValues = {};\n\n        if (columnList.length > 0) {\n          columnList.map(x => {\n            if (x.inputtype === 'combo') {\n              if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n                {\n                  if (comboData[x.label].length > 0) {\n                    if (comboData[x.label][0].label === undefined) {\n                      const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                      comboData[x.label] = optionList.get(\"OptionList\");\n                    } else {\n                      comboData[x.label] = comboData[x.label];\n                      const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                    }\n                  } else {\n                    comboData[x.label] = [];\n                  } //comboValues = childComboLoad(x, comboData, selectedRecord, \n                  //   childColumnList, withoutCombocomponent)\\\n\n\n                  comboValues = childComboLoadForEdit(x, comboData, selectedRecord, childColumnList, withoutCombocomponent);\n                } else {\n                comboValues = {\n                  \"comboData\": comboData\n                };\n              }\n            } else {\n              comboValues = {\n                comboData: comboData,\n                ...comboValues\n              };\n            }\n          });\n        } else {\n          comboValues = {\n            \"comboData\": comboData\n          };\n        } // withoutCombocomponent.map(date => {\n        //     if (date.inputtype === 'date')\n        //         selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\n        //             rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\";\n        // })\n\n\n        withoutCombocomponent.map(date => {\n          if (date.inputtype === 'date') {\n            selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ? rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\";\n\n            if (date.nperiodcode) {\n              selectedRecord[date.label + \"value\"] = response[2].data[date.label] ? new Date(response[2].data[date.label][\"datevalue\"]) : null;\n            } else {\n              selectedRecord[date.label + \"value\"] = new Date();\n            }\n\n            if (date.hidebeforedate) {\n              selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"];\n            }\n\n            if (date.hideafterdate) {\n              selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"];\n            }\n          }\n        });\n        selectedRecord = { ...selectedRecord\n        };\n\n        if (inputParam.editSubSampleRegParam[\"getSubSampleChildDetail\"] === true) {\n          masterData = { ...masterData,\n            ...response[1].data[\"SubSampleChildDetail\"]\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation,\n            timeZoneList,\n            defaultTimeZone,\n            selectedRecord,\n            openModal: true,\n            ncontrolCode: inputParam.editSubSampleRegParam.ncontrolCode,\n            parentPopUpSize: \"lg\",\n            loading: false,\n            showSample: undefined,\n            regSubSamplecomboData: comboValues.comboData,\n            loadRegSubSample: true,\n            screenName: \"IDS_SUBSAMPLE\",\n            operation: \"update\",\n            specBasedComponent,\n            //  regRecordToEdit:recordToEdit\n            masterData\n          }\n        }); // }\n      }).catch(error => {\n        //console.log(\"error:\", error);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    }\n  };\n}\nexport function onUpdateSubSampleRegistration(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/updateRegistrationSubSample\", inputParam.inputData).then(response => {\n      sortData(response.data);\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\"); //replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      // replaceUpdatedObject(response.data[\"selectedTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\");\n      //  let RegistrationGetSubSample=response.data[\"RegistrationGetSubSample\"];\n\n      let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n      masterData = { ...masterData,\n        // selectedSample: response.data[\"selectedSample\"],\n        selectedSubSample: response.data[\"selectedSubSample\"],\n        selectedTest: response.data[\"selectedTest\"],\n        RegistrationGetTest,\n        // RegistrationGetSubSample,\n        RegistrationParameter: response.data[\"RegistrationParameter\"]\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          openModal: false,\n          loading: false,\n          showConfirmAlert: false,\n          regDateEditConfirmMessage: undefined,\n          loadEsign: false,\n          loadRegSubSample: false,\n          selectedRecord: {},\n          showSample: undefined,\n          screenName: \"SubSample\"\n        }\n      }); // let inputData = {\n      //     masterData,\n      //     selectedTest: masterData.selectedTest,\n      //     ntransactiontestcode: masterData.selectedTest ?\n      //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n      //     npreregno: masterData.selectedSample ?\n      //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n      //     userinfo: inputParam.inputData.userinfo,\n      //     activeTestTab : masterData.activeTestTab,\n      //     screenName: masterData.activeTestTab,\n      //     resultDataState: inputParam.resultDataState,\n      //     testCommentDataState: inputParam.testCommentDataState,\n      // }\n      // dispatch(getTestChildTabDetail(inputData, true))\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else if (error.response.status === 302) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            regEditParam: inputParam,\n            showConfirmAlert: true,\n            parentPopUpSize: \"xl\",\n            regDateEditConfirmMessage: error.response.data,\n            showSample: undefined\n          }\n        });\n      } else {\n        toast.warn(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    });\n  };\n}\nexport function cancelSubSampleAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/cancelSubSample\", inputParam.inputData).then(response => {\n      // replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      let masterData = { ...LoginProps,\n        // selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        loading: false,\n        loadEsign: false,\n        openModal: false,\n        showSample: undefined\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function preregRecordToQuarantine(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/quarantineRegistration\", inputParam.inputData).then(response => {\n      // replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      // replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      delete response.data[\"RegistrationGetSample\"];\n      delete response.data[\"RegistrationGetSubSample\"];\n      delete response.data[\"RegistrationGetTest\"];\n      let masterData = { ...LoginProps,\n        selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n      };\n      let respObject = {\n        masterData,\n        loading: false,\n        loadEsign: false,\n        openModal: false,\n        showSample: undefined\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function getTestChildTabDetailRegistration(inputData, isServiceRequired) {\n  return function (dispatch) {\n    if (inputData.ntransactiontestcode === \"\") {\n      inputData.ntransactiontestcode = \"0\";\n    }\n\n    if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\n      let inputParamData = {\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n      let {\n        testtake\n      } = inputData;\n      let activeName = \"\";\n      let dataStateName = \"\";\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_PARAMETERRESULTS\":\n          url = \"registration/getregistrationparameter\";\n          activeName = \"RegistrationParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          url = \"resultentrybysample/getResultUsedInstrument\";\n          activeName = \"ResultUsedInstrument\";\n          dataStateName = \"instrumentDataState\";\n          break;\n\n        case \"IDS_MATERIAL\":\n          url = \"resultentrybysample/getResultUsedMaterial\";\n          break;\n\n        case \"IDS_TASK\":\n          url = \"resultentrybysample/getResultUsedTask\";\n          activeName = \"ResultUsedTasks\";\n          dataStateName = \"taskDataState\";\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          url = \"attachment/getTestAttachment\";\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          url = \"comments/getTestComment\";\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          url = \"approval/getapprovalparameter\";\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          url = \"approval/getApprovalResultChangeHistory\";\n          activeName = \"ApprovalResultChangeHistory\";\n          dataStateName = \"resultChangeDataState\";\n          break;\n\n        case \"IDS_TESTAPPROVALHISTORY\":\n          url = \"approval/getApprovalHistory\";\n          activeName = \"ApprovalHistory\";\n          dataStateName = \"historyDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        default:\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n\n        if (isServiceRequired) {\n          rsapi.post(url, inputParamData).then(response => {\n            let skipInfo = {};\n            let responseData = { ...response.data,\n              selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\n              selectedTest: inputData.selectedTest\n            }; //responseData = sortData(responseData)\n            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\n\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n            let masterData = { ...inputData.masterData,\n              selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\n              selectedTest: inputData.selectedTest,\n              selectedPreregno: inputData.npreregno,\n              selectedSampleCode: inputData.ntransactionsamplecode,\n              selectedTestCode: inputData.ntransactiontestcode,\n              activeTabIndex: inputData.activeTabIndex,\n              activeTabId: inputData.activeTabId\n            };\n\n            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n              skipInfo = {\n                [dataStateName]: { ...inputData[dataStateName],\n                  skip: 0,\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            } else {\n              skipInfo = { ...skipInfo,\n                [dataStateName]: { ...inputData[dataStateName],\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            }\n\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                masterData,\n                activeTabIndex: inputData.activeTabIndex,\n                activeTabId: inputData.activeTabId,\n                loading: false,\n                showFilter: false,\n                activeTestTab: inputData.activeTestTab,\n                screenName: inputData.screenName,\n                testtake,\n                testskip: undefined,\n                ...skipInfo\n              }\n            });\n          }).catch(error => {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false\n              }\n            });\n\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n          });\n        } else {\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n          let skipInfo = {};\n          let masterData = { ...inputData.masterData,\n            selectedTest: inputData.selectedTest,\n            selectedPreregno: inputData.npreregno,\n            selectedSampleCode: inputData.ntransactionsamplecode,\n            selectedTestCode: inputData.ntransactiontestcode\n          };\n\n          if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n            skipInfo = {\n              [dataStateName]: { ...inputData[dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [dataStateName]: { ...inputData[dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              loading: false,\n              showFilter: false,\n              activeTestTab: inputData.activeTestTab,\n              screenName: inputData.screenName,\n              testtake,\n              testskip: undefined,\n              ...skipInfo\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      let {\n        ApprovalParameter,\n        ResultUsedInstrument,\n        ResultUsedTasks,\n        RegistrationTestAttachment,\n        ApprovalResultChangeHistory,\n        RegistrationTestComment,\n        ApprovalHistory\n      } = inputData.masterData;\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          ApprovalParameter = [];\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          ResultUsedInstrument = [];\n          break;\n\n        case \"IDS_TASK\":\n          ResultUsedTasks = [];\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          RegistrationTestAttachment = [];\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          ApprovalResultChangeHistory = [];\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          RegistrationTestComment = [];\n          break;\n\n        case \"IDS_APPROVALHISTORY\":\n          ApprovalHistory = [];\n          break;\n\n        default:\n          ApprovalParameter = [];\n          break;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            selectedTest: [],\n            ApprovalParameter,\n            ResultUsedInstrument,\n            ResultUsedTasks,\n            RegistrationTestAttachment,\n            ApprovalResultChangeHistory,\n            RegistrationTestComment,\n            ApprovalHistory\n          },\n          loading: false,\n          activeTabIndex: inputData.activeTabIndex,\n          activeTabId: inputData.activeTabId\n        }\n      });\n    }\n  };\n}\n\nconst toTimestamp = strDate => {\n  // const dt = new Date(strDate).getTime();\n  // return dt / 1000;\n  const dt = strDate.getTime();\n  return dt;\n};\n\nexport function getDynamicFilter(inputParam) {\n  if (inputParam.component.inputtype === 'frontendsearchfilter') {\n    return function (dispatch) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/dynamicpreregdesign/getcustomsearchfilter\", { ...inputParam.component,\n        userinfo: inputParam.userinfo\n      }).then(response => {\n        const source = inputParam.component.source;\n        const languageTypeCode = inputParam.userinfo.slanguagetypecode;\n        const lstData = response.data[inputParam.component.label]; // const responseparam={}\n\n        const gridColumns = [];\n        const fields = [];\n        const datefileds = [];\n        const multilingual = [];\n        inputParam.component.filterfields.map(item => {\n          fields.push(filterObject(item, languageTypeCode, response.data));\n\n          if (item.ismultilingual) {\n            multilingual.push(item.columnname);\n          }\n\n          if (item.filterinputtype === \"date\") {\n            datefileds.push(item.columnname);\n          }\n\n          if (item.filterinputtype !== 'predefinednumeric') {\n            gridColumns.push(creategridColumns(item, languageTypeCode));\n          }\n        });\n        const optionList = lstData.map(item => {\n          const jsondata = item[source] ? item[source].value ? JSON.parse(item[source].value) : item.jsondata : item.jsondata;\n          datefileds.map(x => {\n            jsondata[x + \"timestamp\"] = toTimestamp(rearrangeDateFormatforKendoDataTool(inputParam.userinfo, jsondata[x]));\n          });\n          multilingual.map(mul => {\n            jsondata[mul] = jsondata[mul][languageTypeCode] || jsondata[mul]['en-US'];\n          });\n          return jsondata;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            lstPatient: optionList,\n            gridColumns,\n            fields,\n            loadCustomSearchFilter: true,\n            loading: false,\n            screenName: inputParam.component.displayname[languageTypeCode],\n            seletedFilterComponent: inputParam.component,\n            kendoSkip: 0,\n            kendoTake: 5,\n            kendoFilter: {\n              logic: \"and\",\n              filters: []\n            },\n            awesomeTree: undefined,\n            awesomeConfig: undefined\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data.rtn);\n        }\n      });\n    };\n  } else if (inputParam.component.inputtype === \"backendsearchfilter\") {\n    return function (dispatch) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/dynamicpreregdesign/getcustomsearchfilterpredefined\", { ...inputParam.component,\n        userinfo: inputParam.userinfo\n      }).then(response => {\n        const languageTypeCode = inputParam.userinfo.slanguagetypecode;\n        const {\n          fields,\n          gridColumns\n        } = filterObjectForReactAwesomeFilter(inputParam.component.filterfields, languageTypeCode, response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            lstPatient: [],\n            gridColumns,\n            fields,\n            loadCustomSearchFilter: true,\n            loading: false,\n            screenName: inputParam.component.displayname[languageTypeCode],\n            seletedFilterComponent: inputParam.component,\n            kendoSkip: 0,\n            kendoTake: 5,\n            kendoFilter: {\n              logic: \"and\",\n              filters: []\n            },\n            awesomeTree: undefined,\n            onExecute: true,\n            awesomeConfig: undefined\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data.rtn);\n        }\n      });\n    };\n  }\n}\nlet datapredef = {};\n\nconst CustomFilter = props => {\n  const {\n    filter,\n    data = [],\n    defaultItem\n  } = props;\n\n  const onChange = event => {\n    props.onFilterChange.call(undefined, {\n      nextFilter: { ...props.filter,\n        value: event.target.value.value\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ComboBox, {\n    onChange: onChange,\n    data: filter.field ? datapredef[filter.field] : [],\n    textField: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 4257,\n      columnNumber: 12\n    }\n  });\n};\n\nexport function creategridColumns(item, languageTypeCode) {\n  let obj = {};\n\n  if (item.filterinputtype !== 'predefinednumeric') {\n    return {\n      field: item.columnname,\n      title: item.displayname[languageTypeCode],\n      width: \"200px\"\n    };\n  }\n}\nexport function filterObjectForReactAwesomeFilter(filterFields, languageTypeCode, resposedata) {\n  let obj = {};\n  obj['fields'] = {};\n  obj['gridColumns'] = [];\n  filterFields.map(item => {\n    if (item.filterinputtype === 'predefinednumeric' || item.filterinputtype === 'predefinedtext') {\n      const optionList = resposedata[item.predefinedtablename].map(data => {\n        const jsondata = data[item.predefinedtablename] ? data[item.predefinedtablename].value ? JSON.parse(data[item.predefinedtablename].value) : data.jsondata : data.jsondata;\n        jsondata['title'] = item.predefinedismultilingual ? jsondata[item.predefineddisplaymember][languageTypeCode] || jsondata[item.predefineddisplaymember]['en-US'] : jsondata[item.predefineddisplaymember];\n        jsondata['value'] = jsondata[item.predefinedvaluemember];\n        return jsondata;\n      });\n      datapredef[item.columnname] = optionList;\n    }\n\n    switch (item.filterinputtype) {\n      case \"text\":\n        obj['fields'][item.type === 'dynamic' ? item.ismultilingual ? \"jsondata->'\" + item.columnname + \"'->>'\" + languageTypeCode + \"'\" : \"jsondata->>'\" + item.columnname + \"'\" : \"\\\"\" + item.columnname + \"\\\"\"] = {\n          label: item.displayname[languageTypeCode],\n          type: \"text\",\n          valueSources: [\"value\", \"func\"],\n          mainWidgetProps: {\n            \"valueLabel\": \"Name\",\n            \"valuePlaceholder\": \"Enter\" + item.displayname[languageTypeCode]\n          }\n        };\n        break;\n\n      case \"numeric\":\n        obj['fields'][item.type === 'dynamic' ? \"(jsondata->>'\" + item.columnname + \"')::int\" : \"\\\"\" + item.columnname + \"\\\"\"] = {\n          label: item.displayname[languageTypeCode],\n          type: \"number\",\n          valueSources: [\"value\"],\n          fieldSettings: { ...item.numericcondition\n          }\n        };\n        break;\n\n      case \"date\":\n        obj['fields'][item.type === 'dynamic' ? \"jsondata->>'\" + item.columnname + \"'\" : \"\\\"\" + item.columnname + \"\\\"\"] = {\n          label: item.displayname[languageTypeCode],\n          type: \"date\",\n          valueSources: [\"value\"]\n        };\n        break;\n\n      case \"predefinednumeric\":\n        obj['fields'][item.type === 'dynamic' ? \"(jsondata->>'\" + item.columnname + \"')::int\" : \"\\\"\" + item.columnname + \"\\\"\"] = {\n          label: item.displayname[languageTypeCode],\n          type: \"select\",\n          valueSources: [\"value\"],\n          fieldSettings: {\n            listValues: datapredef[item.columnname]\n          }\n        };\n        break;\n\n      case \"predefinedtext\":\n        obj['fields'][item.type === 'dynamic' ? item.ismultilingual ? \"jsondata->'\" + item.columnname + \"'->>'\" + languageTypeCode + \"'\" : \"jsondata->>'\" + item.columnname + \"'\" : \"\\\"\" + item.columnname + \"\\\"\"] = {\n          label: item.displayname[languageTypeCode],\n          type: \"select\",\n          valueSources: [\"value\"],\n          fieldSettings: {\n            listValues: datapredef[item.columnname]\n          }\n        };\n        break;\n    }\n\n    const gridColumns = creategridColumns(item, languageTypeCode);\n\n    if (item.filterinputtype !== 'predefinednumeric') {\n      obj['gridColumns'].push(gridColumns);\n    }\n  });\n  return obj;\n}\nexport function filterObject(item, languageTypeCode, resposedata) {\n  let obj = {};\n  let preobj = {};\n\n  if (item.filterinputtype === 'predefinednumeric' || item.filterinputtype === 'predefinedtext') {\n    const optionList = resposedata[item.predefinedtablename].map(data => {\n      const jsondata = data[item.predefinedtablename] ? data[item.predefinedtablename].value ? JSON.parse(data[item.predefinedtablename].value) : data.jsondata : data.jsondata;\n      jsondata['text'] = item.predefinedismultilingual ? jsondata[item.predefineddisplaymember][languageTypeCode] || jsondata[item.predefineddisplaymember]['en-US'] : jsondata[item.predefineddisplaymember];\n      jsondata['value'] = jsondata[item.predefinedvaluemember]; //delete jsondata.jsondata\n\n      return jsondata;\n    });\n    datapredef[item.columnname] = optionList; // preobj = {\n    //     predefdata: optionList, predefineddisplaymember: item.predefineddisplaymember,\n    //     predefinedvaluemember: item.columnname\n    // }\n  }\n\n  switch (item.filterinputtype) {\n    case \"text\":\n      return obj = {\n        name: item.columnname,\n        label: item.displayname[languageTypeCode],\n        filter: TextFilter,\n        operators: Operators.text\n      };\n\n    case \"numeric\":\n      return obj = {\n        name: item.columnname,\n        label: item.displayname[languageTypeCode],\n        filter: NumericFilter,\n        operators: Operators.numeric\n      };\n\n    case \"date\":\n      return obj = {\n        name: item.columnname + \"timestamp\",\n        label: item.displayname[languageTypeCode],\n        filter: DateFilter,\n        operators: Operators.date\n      };\n\n    case \"predefinednumeric\":\n      return obj = {\n        name: item.columnname,\n        label: item.displayname[languageTypeCode],\n        filter: CustomFilter,\n        operators: Operators.numeric\n      };\n\n    case \"predefinedtext\":\n      return obj = {\n        name: item.columnname,\n        label: item.displayname[languageTypeCode],\n        filter: CustomFilter,\n        operators: Operators.text\n      };\n\n    default:\n      return obj = {\n        name: item.columnname,\n        label: item.displayname[languageTypeCode],\n        filter: TextFilter,\n        operators: Operators.text\n      };\n  } //return obj;\n\n}\nexport function getDynamicFilterExecuteData(inputParam) {\n  return function (dispatch) {\n    let obj = { ...inputParam.component,\n      filterquery: inputParam.filterquery,\n      userinfo: inputParam.userinfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"/dynamicpreregdesign/getdynamicfilterexecutedata\", obj).then(response => {\n      const source = inputParam.component.source;\n      const languageTypeCode = inputParam.userinfo.slanguagetypecode;\n      const lstData = response.data[inputParam.component.label];\n      const multilingual = [];\n      inputParam.component.filterfields.map(item => {\n        if (item.ismultilingual) {\n          multilingual.push(item.columnname);\n        }\n      });\n      const optionList = lstData.map(item => {\n        const jsondata = item[source] ? item[source].value ? JSON.parse(item[source].value) : item.jsondata : item.jsondata;\n        multilingual.map(mul => {\n          jsondata[mul] = jsondata[mul][languageTypeCode] || jsondata[mul]['en-US'];\n        }); // let label = isMultiLingual ?\n        //   jsondata[optionValue]\n        //   [languageTypeCode] || jsondata[optionValue]['en-US']\n        //   : jsondata[optionValue];\n\n        return jsondata;\n      });\n\n      if (inputParam.userinfo.nformcode === 161) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            lstPatient: optionList,\n            onExecute: false,\n            loading: false,\n            screenName: inputParam.component.displayname[languageTypeCode]\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            lstPatient: optionList,\n            // onExecute: false,\n            loading: false,\n            screenName: inputParam.component.displayname[languageTypeCode]\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function rearrangeDateFormatforKendoDataTool(userInfo, dateValue) {\n  let splitChar = \"/\";\n\n  if (dateValue !== undefined) {\n    const index = userInfo.ssitedatetime && userInfo.ssitedatetime.indexOf(\"/\" || \"-\");\n    if (index !== -1) splitChar = userInfo.ssitedatetime.substring(index, index + 1);\n  } //   console.log(\"splitChar:\", splitChar);\n\n\n  if ((splitChar === \"/\" || splitChar === \"-\") && typeof dateValue === \"string\") {\n    const firstField = userInfo.ssitedatetime && userInfo.ssitedatetime.split(splitChar)[0]; // console.log(\"firstField:\", firstField);\n\n    const timeSplitChar = dateValue.indexOf(\"T\") !== -1 ? \"T\" : \" \";\n    const datetime = dateValue.split(timeSplitChar);\n    const dateArray = datetime[0].split(splitChar);\n\n    if (firstField === \"dd\") {\n      const day = dateArray[0];\n      const month = dateArray[1];\n      const year = dateArray[2];\n      const time = datetime[1] || \"00:00:00\";\n      const formatted = year + \"-\" + month + \"-\" + day + \"T\" + time;\n      return new Date(formatted);\n    } else if (firstField === \"yyyy\") {\n      const year = dateArray[0];\n      const month = dateArray[1];\n      const day = dateArray[2];\n      const time = datetime[1] || \"00:00:00\";\n      const formatted = year + \"-\" + month + \"-\" + day + \"T\" + time;\n      return new Date(formatted);\n    } else {\n      return new Date(dateValue);\n    }\n  } else {\n    return dateValue;\n  }\n}\nexport function preRegDispatch(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    dispatch({\n      type: DEFAULT_RETURN,\n      payload: { ...inputParam\n      }\n    });\n  };\n}\nexport function validateEsignforRegistration(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"registration\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        } //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\n\n\n        dispatch(dispatchMethods(inputParam[\"screenData\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n\nfunction dispatchMethods(screenData) {\n  return dispatch => {\n    let action = screenData.inputParam.action;\n\n    switch (action) {\n      case \"preregister\":\n        dispatch(insertRegistration(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"editSample\":\n        dispatch(updateRegistration(screenData.inputParam, screenData.masterData, 'openModal'));\n        break;\n\n      case \"accept\":\n        dispatch(acceptRegistration(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"quarantine\":\n        dispatch(preregRecordToQuarantine(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"cancelTest\":\n        dispatch(cancelTestAction(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"cancelSample\":\n        dispatch(cancelSampleAction(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"addregsourcecountry\":\n        dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"));\n        break;\n\n      case \"deleteregsourcecountry\":\n        dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"));\n        break;\n\n      case \"printer\":\n        dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"));\n        break;\n\n      case \"editSubSample\":\n        dispatch(onUpdateSubSampleRegistration(screenData.inputParam, screenData.masterData));\n\n      case \"cancelSubSample\":\n        dispatch(cancelSubSampleAction(screenData.inputParam, screenData.masterData));\n\n      default:\n        break;\n    }\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/RegistrationAction.js"],"names":["React","rsapi","Axios","toast","filterRecordBasedOnTwoArrays","sortData","rearrangeDateFormat","convertDateTimetoString","fillRecordBasedOnCheckBoxSelection","getRecordBasedOnPrimaryKeyName","updatedObjectWithNewElement","replaceUpdatedObject","parentChildComboLoad","getSameRecordFromTwoArrays","constructjsonOptionList","constructjsonOptionDefault","childComboLoad","filterRecordBasedOnPrimaryKeyName","reArrangeArrays","childComboLoadForEdit","DEFAULT_RETURN","intl","initRequest","transactionStatus","crudMaster","postCRUDOrganiseTransSearch","constructOptionList","Operators","TextFilter","NumericFilter","DateFilter","ComboBox","getSampleTypeChange","Map","masterData","event","labelname","dispatch","post","then","response","data","item","type","payload","loading","catch","error","message","getSubSampleChildTabDetail","inputData","ntransactionsamplecode","length","inputParamData","userinfo","url","activeSubSampleTab","responseData","selectedSubSample","showFilter","screenName","activeTestTab","status","warn","selectedSample","activeSampleTab","FormattedMessage","id","getRegTypeChange","getRegSubTypeChange","onApprovalConfigVersionChange","getComponentTestBySpec","selectedRecord","Component","Test","slno","selectedComponent","undefined","SelectedTest","Object","keys","popUptestDataState","skip","take","getTestfromDB","objComponent","LoginProps","nflag","component","value","label","dreceiveddate","userInfo","nspecsampletypecode","nneedsubsample","RealRegSubTypeValue","TestData","loadComponent","selectComponent","showSaveContinue","SelectedSource","parentPopUpSize","CurrentTime","unshift","EditComponent","urlArray","ComponentTestBySpec","timezone","all","lstComponentMap","lstComponent","timeZoneListMap","TimeZoneField","get","timeZoneList","scomponentname","ncomponentcode","ntzdreceivedate","findIndex","x","ntimezonecode","stimezoneid","childoperation","ChildscreenName","openChildModal","ReloadData","searchSampleRef","current","searchSubSampleRef","searchTestRef","testskip","testtake","subsampletake","subsampleskip","showSample","getTreeByProduct","comboData","inputParam","Specification","AgaramTree","ActiveKey","FocusKey","OpenNodes","selectedSpec","sversion","ntemplatemanipulationcode","getNewRegSpecification","selectedNode","operation","methodUrl","ntreetemplatemanipulationcode","activeKey","focusKey","primaryKey","AddComponents","sreceiveddate","stzdreceivedate","scomments","nallottedspeccode","openPortal","openModal","getAllTest","specBasedComponent","selectPackage1","specBasedTestPackage","selectPackage","conditionalTestPackage","PackageData","TestCombined","componentTest","TestPackage","loadTest","formatMessage","getTest","TestGet","TestPackageGet","PackageDataMap","AllTest","addsubSample","columnList","childColumnList","SubSamplecomboComponents","SubSamplewithoutCombocomponent","isServiceRequired","SubSamplecomboData","timeZoneService","actualService","parentcolumnlist","childcolumnlist","currentDate","dateService","datecolumnlist","filter","inputtype","timeZoneMap","defaultTimeZone","newcomboData","slanguagetypecode","comboData1","selectedRecord1","map","componentrow","loadcurrentdate","nperiodcode","Date","loadselecteddate","hidebeforedate","hideafterdate","radioOptions","tags","text","loadSubSample","parentSubSampleColumnList","childSubSampleColumnList","selectedTestData","selectedobject","Reg","testPackageTest","subSampleBased","ntestpackagecode","availableTest","ntestgrouptestcode","addSubSampleSaveContinue","Map1","selectedTestPackageData","selectedTestPackageData1","some","y","selectedTestData1","masterStatus","editSubSample","Componnet","comp","nregsubtypecode","portalOrder","containerType","containerList","nportalordercode","jsondata","push","insertRegistration","rtn","RegistrationGetSample","RegistrationGetSubSample","RegistrationGetTest","selectedTest","multipleselectionFlag","respObject","loadEsign","showConfirmAlert","loadPreregister","subSampleDataGridList","postParamList","insertRegistrationScheduler","SchedulerTransaction","getRegistrationSample","selectedFilter","getRegistrationsubSampleDetail","nsampletypecode","nregtypecode","npreregno","ntransactionstatus","napprovalconfigcode","ndesigntemplatemappingcode","ntype","checkBoxOperation","activeName","dataStateName","subSample","skipInfo","oldSelectedTest","oldSelectedSubSample","childTabsKey","removeElementFromArray","selectedPreregno","RegistrationTestComment","RegistrationTestAttachment","RegistrationParameter","RegistrationComment","wholeSubSampleList","b","forEach","subsample","index","includes","splice","ResponseData","RegistrationTestComment1","ntransactiontestcode","RegistrationTestAttachment1","resultResponseData","RegistrationParameter1","ntransactiontestcode1","ResponseData1","RegistrationTestComment2","ntransactionTestCode","bool","wholeTestList","test","keepOld","sampleGridDataState","sort","isGrandChildGetRequired","TestSelected","subSampleSelected","filterTestSameOldSelectedTest","join","filterSelectedSubSample","getRegistrationTestDetail","getTestChildTabDetailRegistration","subsamplecheck","SubSampleSelected","wholeSubSample","selectedSubSample1","dataStateArray","arr","selectedTransactionsamplecode","RegistrationSampleComment","RegistrationSampleAttachment","testList","wholeSubsampleList","activeTabIndex","toString","selectedTransactioncode","acceptRegistration","addMoreTest","ncontrolCode","sampleList","obj","slice","selectedsample","findTransactionStatus","Set","REJECT","CANCELLED","RELEASED","findApprovalVersion","napprovalversioncode","findSampleSpec","loadChildTest","props","createRegistrationTest","modalName","classUrl","getEditRegistrationComboService","comboComponents","withoutCombocomponent","primaryKeyName","editRegParam","mastertoedit","selectedRegistration","languagetypeCode","comboValues","optionList","valuemember","displaymember","source","isMultiLingual","date","sregsubtypename","updateRegistration","regDateEditConfirmMessage","info","regEditParam","cancelTestAction","cancelSampleAction","addsubSampleRegistration","regcolumnList","selectRecord","regchildColumnList","regSubSamplecomboComponents","regSubSamplewithoutCombocomponent","ncontrolcode","loadRegSubSample","regSubSamplecomboData","regparentSubSampleColumnList","regchildSubSampleColumnList","saveSubSample","getEditSubSampleComboService","editSubSampleRegParam","formattedMessage","onUpdateSubSampleRegistration","cancelSubSampleAction","preregRecordToQuarantine","selectedSampleCode","selectedTestCode","activeTabId","ApprovalParameter","ResultUsedInstrument","ResultUsedTasks","ApprovalResultChangeHistory","ApprovalHistory","toTimestamp","strDate","dt","getTime","getDynamicFilter","languageTypeCode","lstData","gridColumns","fields","datefileds","multilingual","filterfields","filterObject","ismultilingual","columnname","filterinputtype","creategridColumns","JSON","parse","rearrangeDateFormatforKendoDataTool","mul","lstPatient","loadCustomSearchFilter","displayname","seletedFilterComponent","kendoSkip","kendoTake","kendoFilter","logic","filters","awesomeTree","awesomeConfig","filterObjectForReactAwesomeFilter","onExecute","datapredef","CustomFilter","defaultItem","onChange","onFilterChange","call","nextFilter","target","field","title","width","filterFields","resposedata","predefinedtablename","predefinedismultilingual","predefineddisplaymember","predefinedvaluemember","valueSources","mainWidgetProps","fieldSettings","numericcondition","listValues","preobj","name","operators","numeric","getDynamicFilterExecuteData","filterquery","nformcode","dateValue","splitChar","ssitedatetime","indexOf","substring","firstField","split","timeSplitChar","datetime","dateArray","day","month","year","time","formatted","preRegDispatch","validateEsignforRegistration","toLowerCase","dispatchMethods","screenData","action"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    filterRecordBasedOnTwoArrays, sortData,\r\n    rearrangeDateFormat, convertDateTimetoString, \r\n    fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, updatedObjectWithNewElement, \r\n    replaceUpdatedObject, parentChildComboLoad, getSameRecordFromTwoArrays, constructjsonOptionList,\r\n     constructjsonOptionDefault, childComboLoad, filterRecordBasedOnPrimaryKeyName, reArrangeArrays, childComboLoadForEdit\r\n} from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { intl } from '../components/App';\r\nimport { initRequest } from './LoginAction';\r\nimport { //RegistrationSubType, RegistrationType, \r\n    transactionStatus } from '../components/Enumeration';\r\nimport { crudMaster, postCRUDOrganiseTransSearch } from './ServiceAction'\r\n//import { getTestChildTabDetail } from './index.js'\r\nimport { constructOptionList } from '../components/CommonScript';\r\nimport {\r\n    Operators,\r\n    TextFilter,\r\n    NumericFilter,\r\n   // BooleanFilter,\r\n    DateFilter,\r\n   // EnumFilter,\r\n  //  EnumFilterProps,\r\n} from \"@progress/kendo-react-data-tools\";\r\nimport { ComboBox } from \"@progress/kendo-react-dropdowns\";\r\n\r\nexport function getSampleTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getRegTypeBySampleType\", Map)\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSubSampleChildTabDetail(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.ntransactionsamplecode.length > 0) {\r\n            let inputParamData = {\r\n                ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            switch (inputData.activeSubSampleTab) {\r\n                case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSubSampleAttachment\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLECOMMENTS\":\r\n                    url = \"comments/getSubSampleComment\"\r\n                    break;\r\n                default:\r\n                    url = null\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                rsapi.post(url, inputParamData)\r\n                    .then(response => {\r\n                        let responseData = { ...response.data }\r\n                        responseData = sortData(responseData)\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData: {\r\n                                    ...inputData.masterData,\r\n                                    ...responseData,\r\n                                    selectedSubSample: inputData.selectedSubSample,\r\n                                    // selectedTestCode: inputData.ntransactiontestcode,\r\n                                },\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                activeSubSampleTab: inputData.activeSubSampleTab,\r\n                                screenName: inputData.screenName,\r\n                                activeTestTab: inputData.activeSubSampleTab,\r\n                                screenName: inputData.screenName\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            //toast.warn(\"Please Select a Sample\");\r\n            toast.warn(intl.FormattedMessage({\r\n                id: \"IDS_PLSSELECTASAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\nexport function getRegTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        rsapi.post(\"/registration/getRegSubTypeByRegType\", Map)\r\n            .then(response => {\r\n                // const RegistrationSubType = response.data[\"RegistrationSubType\"];\r\n\r\n                //  console.log(response.data);\r\n                // RegistrationSubType.length > 0 ?\r\n                //     selectedRecord[\"nregsubtypecode\"] = {\r\n                //         \"value\": RegistrationSubType[0].nregsubtypecode,\r\n                //         \"label\": RegistrationSubType[0].sregsubtypename\r\n                //     } : selectedRecord[\"nregsubtypecode\"] = \"\";\r\n                // const [labelname] = event.item;\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegSubTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getRegTemplateTypeByRegSubType\", Map)\r\n\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function onApprovalConfigVersionChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getApprovalConfigBasedTemplateDesign\", Map)\r\n\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getComponentTestBySpec(Map, selectedRecord, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getComponentTestBySpec\", Map)\r\n            .then(response => {\r\n                const { Component, Test } = response.data;\r\n                let slno = Component.length > 0 ? Component[0].slno : -1;\r\n                let selectedComponent = Component.length > 0 ? Component[0] : undefined\r\n                let SelectedTest = [];\r\n                if (Object.keys(Test).length > 0) {\r\n                    SelectedTest = Test[slno];\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Component, Test, SelectedTest, selectedComponent, loading: false,\r\n                        selectedRecord, popUptestDataState: { skip: 0, take: 10 }\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestfromDB(objComponent, LoginProps, nflag) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let component = { ...objComponent };\r\n        component[\"ncomponentcode\"] = objComponent[\"ncomponentcode\"] ? objComponent[\"ncomponentcode\"].value : -1;\r\n        component[\"nstoragelocationcode\"] = objComponent[\"nstoragelocationcode\"] ? objComponent[\"nstoragelocationcode\"].value : -1;\r\n        component[\"nstorageconditioncode\"] = objComponent[\"nstorageconditioncode\"] ? objComponent[\"nstorageconditioncode\"].value : -1;\r\n        component[\"slno\"] = LoginProps.Component ? Object.keys(LoginProps.Component).length + 1 : 0;\r\n        component[\"scomponentname\"] = objComponent[\"ncomponentcode\"].label;\r\n        component[\"sstoragelocationname\"] = objComponent[\"nstoragelocationcode\"] && objComponent[\"nstoragelocationcode\"].label ? objComponent[\"nstoragelocationcode\"].label : \"\";\r\n        component[\"sstorageconditionname\"] = objComponent[\"nstorageconditioncode\"] && objComponent[\"nstorageconditioncode\"].label ? objComponent[\"nstorageconditioncode\"].label : \"\";\r\n        component[\"ntzdmanufdate\"] = objComponent[\"ntzdmanufdate\"] ? objComponent[\"ntzdmanufdate\"].value : -1;\r\n        component[\"ntzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].value : -1;\r\n        component[\"stzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].label : \"\";\r\n        component[\"nplasmafilecode\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].value : -1;\r\n        component[\"splasmafilenumber\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].label : \"\";\r\n        const dreceiveddate = objComponent[\"dreceiveddate\"];\r\n        component[\"dreceiveddate\"] = dreceiveddate;//formatInputDate(objComponent[\"dreceiveddate\"], false);\r\n        component[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, LoginProps.userInfo);//formatInputDateWithoutT(objComponent[\"dreceiveddate\"], false);//formatDate(objComponent[\"sreceiveddate\"]);\r\n        // rsapi.post(\"/registration/getTestfromDB\", { \"Component\": component })\r\n        rsapi.post(\"/registration/getTestfromDB\", {\r\n            nspecsampletypecode: component.nspecsampletypecode,\r\n            slno: component.slno,\r\n            nneedsubsample:LoginProps.masterData.RealRegSubTypeValue.nneedsubsample\r\n        })\r\n            .then(response => {\r\n                let TestData = response.data;\r\n                let slno = component.slno;\r\n                let SelectedTest = [];\r\n                let loadComponent = true;\r\n                let selectComponent = {};\r\n                let showSaveContinue = true;\r\n                let SelectedSource = [];\r\n                // let openChildModal = true;\r\n                let selectedComponent = undefined;\r\n                let parentPopUpSize = \"lg\"\r\n                // selectComponent = objComponent\r\n                if (nflag === 1) {\r\n                    loadComponent = true;\r\n                    objComponent[\"smanuflotno\"] = \"\";\r\n                    objComponent[\"dreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime)//new Date(LoginProps.CurrentTime);\r\n                    objComponent[\"sreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime)//new Date(LoginProps.CurrentTime);\r\n                    selectComponent = objComponent;\r\n                } else {\r\n                    loadComponent = false;\r\n                    parentPopUpSize = \"xl\"\r\n                    // openChildModal = false;\r\n                    showSaveContinue = false;\r\n                    selectComponent = undefined\r\n                }\r\n                let Test = LoginProps.Test || [];\r\n                let Component = LoginProps.Component || [];\r\n                Component.unshift(component);\r\n                selectedComponent = component;\r\n                Test[slno] = response.data;\r\n                SelectedTest = TestData;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Component, Test, SelectedTest, selectComponent, selectedComponent,\r\n                        loadComponent, showSaveContinue, parentPopUpSize, loading: false, SelectedSource\r\n                    }\r\n                });\r\n                // console.log(response.data);\r\n            })\r\n            .catch(error => {\r\n                //   console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function EditComponent(Map, component, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\",\r\n            Map);\r\n\r\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n\r\n        urlArray = [ComponentTestBySpec, timezone]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, true);\r\n                const TimeZoneField = response[1].data;\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n                const timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n\r\n                component[\"ncomponentcode\"] = { label: component.scomponentname, value: component.ncomponentcode }\r\n                component[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, component[\"sreceiveddate\"]);\r\n                component[\"scomments\"] = component[\"scomments\"]\r\n\r\n                let ntzdreceivedate = component.ntzdreceivedate;\r\n                if (component.ntzdreceivedate !== null && typeof component.ntzdreceivedate === \"object\") {\r\n                    ntzdreceivedate = component.ntzdreceivedate.value;\r\n                }\r\n                component[\"ntzdreceivedate\"] = component.ntzdreceivedate ?\r\n                    {\r\n                        \"label\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].stimezoneid, \"value\":\r\n                            TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].ntimezonecode\r\n                    } : \"\"\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadComponent: true, childoperation: \"update\",\r\n                        lstComponent, ChildscreenName: \"Component\",\r\n                        openChildModal: false, selectComponent: component, parentPopUpSize: \"lg\",\r\n                        timeZoneList, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function ReloadData(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    //masterData['searchedTests'] = undefined\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                // let selectedFilter = inputData.selectedFilter;\r\n                // selectedFilter[\"fromdate\"] = \"\";\r\n                // selectedFilter[\"todate\"] = \"\";\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        subsampletake: undefined,\r\n                        subsampleskip: 0,\r\n                        showSample: undefined,\r\n                        //selectedFilter\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTreeByProduct(Map, selectedRecord, comboData, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getTreeByProduct\", Map)\r\n            .then(response => {\r\n                let { Specification, AgaramTree, ActiveKey, FocusKey, OpenNodes } = [];\r\n                const selectedSpec = {}\r\n                if (response.data[\"rtn\"] === true) {\r\n                    Specification = constructOptionList(response.data[\"Specification\"] || [], \"nallottedspeccode\",\r\n                        \"sspecname\", undefined, undefined, true).get(\"OptionList\");\r\n                    AgaramTree = response.data[\"AgaramTree\"];\r\n                    ActiveKey = response.data[\"ActiveKey\"];\r\n                    FocusKey = response.data[\"FocusKey\"];\r\n                    OpenNodes = response.data[\"OpenNodes\"];\r\n                    //Manufacturer = response.data[\"Manufacturer\"];\r\n                    selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\r\n                        \"value\": Specification[0].value,\r\n                        \"label\": Specification[0].label,\r\n                        \"item\": Specification[0].item\r\n                    } : \"\";\r\n\r\n                    selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\"\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1\r\n                }\r\n                selectedRecord = { ...selectedRecord, ...selectedSpec }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Specification,\r\n                        selectedRecord,\r\n                        AgaramTree, ActiveKey, FocusKey, OpenNodes,\r\n                        Test: [],\r\n                        SelectedTest: [],\r\n                        loading: false,\r\n                        comboData,\r\n                        ...inputParam,\r\n                        selectedSpec,\r\n                        Component: [],\r\n                        selectComponent: {},\r\n                        selectedComponent: {}\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport const getNewRegSpecification = (inputParam, masterData) => {\r\n    return (dispatch) => {\r\n        if (inputParam.selectedNode !== null) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/registration/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam, ntreetemplatemanipulationcode: inputParam.selectedNode.ntemplatemanipulationcode })\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let Specification = constructOptionList(response.data || [], \"nallottedspeccode\", \"sspecname\", false, false, true).get(\"OptionList\");\r\n                    let selectedComponent = undefined;\r\n                    inputParam.selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ? { value: Specification[0].value, label: Specification[0].label, item: Specification[0].item } : \"\";\r\n                    inputParam.selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\r\n                    inputParam.selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ActiveKey: inputParam.activeKey,\r\n                            FocusKey: inputParam.focusKey,\r\n                            primaryKey: inputParam.primaryKey,\r\n                            Specification: Specification,\r\n                            selectedNode: inputParam.selectedNode,\r\n                            selectedRecord: inputParam.selectedRecord,\r\n                            Test: [],\r\n                            selectedComponent,\r\n                            SelectedTest: [],\r\n                            loading: false,\r\n                            showSample: undefined\r\n                        }\r\n                    }\r\n                    );\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 409 || error.response.status === 417) {\r\n                        toast.warn(error.response.data);\r\n                    } else {\r\n                        toast.error(error.message)\r\n                    }\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\nexport function AddComponents(Map) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = []\r\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\",\r\n            Map);\r\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n\r\n        urlArray = [ComponentTestBySpec, timezone\r\n        ]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, true);\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n                const timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n                let dreceiveddate = null;\r\n                if (lstComponent[0].item.sreceiveddate)\r\n                    dreceiveddate = rearrangeDateFormat(Map[\"userinfo\"], lstComponent[0].item.sreceiveddate);//new Date(lstComponent[0].item.sreceiveddate);//|| [];\r\n\r\n                let selectComponent = {\r\n                    sreceiveddate: dreceiveddate,\r\n                    dreceiveddate,\r\n                    ntzdreceivedate: { \"label\": Map[\"userinfo\"].stimezoneid, \"value\": Map[\"userinfo\"].ntimezonecode },\r\n                    stzdreceivedate: Map[\"userinfo\"].stimezoneid,\r\n                    scomments: \"\",\r\n                    nallottedspeccode: lstComponent[0].item.nallottedspeccode\r\n                };\r\n                let CurrentTime = dreceiveddate;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadComponent: true,\r\n                        lstComponent, dreceiveddate, ChildscreenName: \"Component\",\r\n                        showSaveContinue: true, openChildModal: false, childoperation: \"create\", selectComponent\r\n                        , parentPopUpSize: \"lg\", CurrentTime, timeZoneList, loading: false,\r\n                        openPortal: true, openModal: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAllTest(objComponent, LoginProps, nneedsubsample, specBasedComponent,selectPackage1,specBasedTestPackage,selectPackage) {\r\n    return function (dispatch) {\r\n        if (Object.keys(objComponent).length > 0) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/registration/getTestfromDB\", {\r\n                nspecsampletypecode: objComponent.nspecsampletypecode,\r\n                slno: objComponent.slno,\r\n                nneedsubsample: nneedsubsample,\r\n                nallottedspeccode: objComponent.nallottedspeccode,\r\n                specBasedComponent: specBasedComponent,\r\n                specBasedTestPackage:specBasedTestPackage,\r\n                conditionalTestPackage: true,\r\n            //    ntestpackagecode:selectPackage.ntestpackagecode.value\r\n\r\n            })\r\n                .then(response => {\r\n                    let PackageData = [];\r\n                    let TestCombined = [];\r\n                 //   const TestCombined = response.data;\r\n                    let TestData = response.data;\r\n                    let Test = LoginProps.Test || [];\r\n                    let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\r\n                     TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestgrouptestcode\");\r\n                \r\n                 \r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            TestCombined, TestPackage:PackageData,selectPackage:[],\r\n                            loadTest: true, openChildModal: false,\r\n                            ChildscreenName: \"Test\",\r\n                            screenName: \"Test\",\r\n                            operation: \"create\",\r\n                            childoperation: \"create\",\r\n                            parentPopUpSize: \"lg\", loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n        } else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function getTest(objComponent, LoginProps, nneedsubsample, specBasedComponent,selectPackage1,specBasedTestPackage,selectPackage) {\r\n    return function (dispatch) {\r\n       \r\n\r\n       // if (Object.keys(objComponent).length > 0) {\r\n            const urlArray = []\r\n\r\n            const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\r\n                nspecsampletypecode: objComponent.nspecsampletypecode,\r\n                slno: objComponent.slno,\r\n                nneedsubsample: nneedsubsample,\r\n                nallottedspeccode: objComponent.nallottedspeccode,\r\n                specBasedComponent: specBasedComponent,\r\n                specBasedTestPackage: specBasedTestPackage,\r\n                conditionalTestPackage: true,\r\n                //    ntestpackagecode:selectPackage.ntestpackagecode.value\r\n\r\n            });\r\n            urlArray[0] = TestGet;\r\n            const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\r\n                nspecsampletypecode: objComponent.nspecsampletypecode,\r\n                slno: objComponent.slno,\r\n                nneedsubsample: nneedsubsample,\r\n                nallottedspeccode: objComponent.nallottedspeccode,\r\n                specBasedComponent: specBasedComponent,\r\n                specBasedTestPackage: specBasedTestPackage,\r\n                conditionalTestPackage: true,\r\n            });\r\n            urlArray[1] = TestPackageGet;\r\n            dispatch(initRequest(true));\r\n         Axios.all(urlArray).then(response => {\r\n                    \r\n                   // const TestCombined = [];\r\n                    let PackageData = [];\r\n                  //  if (specBasedTestPackage) {\r\n                        const PackageDataMap = constructOptionList(response[1].data.TestPackage || [], \"ntestpackagecode\",\r\n                            \"stestpackagename\", undefined, undefined, true);\r\n                        PackageData = PackageDataMap.get(\"OptionList\");\r\n                //    }\r\n                //    else {\r\n                        let TestData = response[0].data;\r\n                        let Test = LoginProps.Test || [];\r\n                        let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\r\n                        let TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\r\n                //    }\r\n                    // const lstComponentMap = constructOptionList(TestCombined|| [], \"ntestgrouptestcode\",\r\n                    //\"stestsynonym\", undefined, undefined, true);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            TestCombined, TestPackage:PackageData,selectPackage:[],AllTest:TestData,\r\n                            loadTest: true, openChildModal: false,\r\n                            ChildscreenName: \"Test\",\r\n                            screenName: \"Test\",\r\n                            operation: \"create\",\r\n                            childoperation: \"create\",\r\n                            parentPopUpSize: \"lg\", loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n        // } else {\r\n        //     toast.warn(intl.formatMessage({ id: \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n        // }\r\n\r\n    }\r\n}\r\n\r\nexport function addsubSample(masterData, userinfo, columnList,\r\n    selectComponent, childColumnList,\r\n    SubSamplecomboComponents, SubSamplewithoutCombocomponent,\r\n    specBasedComponent, Map, Component, isServiceRequired,\r\n    SubSamplecomboData, selectedRecord,conditionalTestPackage,specBasedTestPackage,LoginProps) {\r\n    if (isServiceRequired) {\r\n        return function (dispatch) {\r\n            dispatch(initRequest(true));\r\n            const urlArray = []\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            urlArray[0] = timeZoneService;\r\n            const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n                parentcolumnlist: columnList ? columnList : [],\r\n                childcolumnlist: childColumnList ? childColumnList : [],\r\n                userinfo\r\n            })\r\n            urlArray[1] = actualService;\r\n            if (specBasedComponent) {\r\n                const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\r\n                    ...Map,\r\n                    specBasedComponent: specBasedComponent,\r\n                 //   conditionalTestPackage:true\r\n                })\r\n                urlArray[2] = ComponentTestBySpec;\r\n            } else {\r\n                Component = Component ? Component : []\r\n                const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\r\n                    nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                    slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                    nneedsubsample: Map[\"nneedsubsample\"],\r\n                    // nallottedspeccode: objComponent.nallottedspeccode,\r\n                    specBasedComponent: specBasedComponent,\r\n                    conditionalTestPackage:true,\r\n                    specBasedTestPackage:specBasedTestPackage\r\n                })\r\n                urlArray[2] = TestGet;\r\n                const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\r\n                    nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                   // slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                    specBasedComponent: specBasedComponent,\r\n                 //   specBasedTestPackage: specBasedTestPackage,\r\n                  //  conditionalTestPackage: conditionalTestPackage\r\n                });\r\n                urlArray[5] = TestPackageGet;\r\n            }\r\n            const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n                userinfo\r\n            })\r\n\r\n            urlArray[3] = currentDate\r\n\r\n            const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n                datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n                userinfo\r\n            })\r\n            urlArray[4] = dateService\r\n          \r\n            Axios.all(urlArray).then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                const newcomboData = parentChildComboLoad(columnList, response[1].data,\r\n                    selectComponent, childColumnList, SubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo)\r\n                let TestCombined = [];\r\n                let lstComponent = [];\r\n                let PackageData = []\r\n                if (specBasedComponent) {\r\n                    const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\",\r\n                        \"scomponentname\", undefined, undefined, true);\r\n\r\n                    lstComponent = lstComponentMap.get(\"OptionList\");\r\n\r\n                } else {\r\n                   /// if (specBasedTestPackage) {\r\n                        const PackageDataMap = constructOptionList(response[5].data.TestPackage || [], \"ntestpackagecode\",\r\n                        \"stestpackagename\", undefined, undefined, true);\r\n                        PackageData = PackageDataMap.get(\"OptionList\");\r\n\r\n                        // if (PackageData.length === 0) {\r\n                        //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \r\n                        // }                      \r\n                    // }\r\n                    // else {\r\n                        TestCombined = response[2].data\r\n                    //}\r\n                }\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                SubSamplewithoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        if (componentrow.loadcurrentdate) {\r\n                            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\r\n                            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                        } else if (componentrow.nperiodcode) {\r\n                            selectedRecord1[componentrow.label + \"value\"] = response[4].data[componentrow.label] ?\r\n                                new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                            if (componentrow.loadselecteddate) {\r\n                                selectedRecord1[componentrow.label] = response[4].data[componentrow.label] ?\r\n                                    new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                            }\r\n                            //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                            //    new Date(response[2].data[componentrow.label]):null;\r\n                        } else {\r\n                            selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                        }\r\n\r\n                        if (componentrow.hidebeforedate) {\r\n                            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n                        if (componentrow.hideafterdate) {\r\n                            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n\r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\") {\r\n                        selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                            componentrow.radioOptions.tags[0].text : \"\";\r\n                    }\r\n\r\n                })\r\n                //console.log(\"selectedRecord1 action1:\", selectedRecord1);\r\n                // if (masterData.RealRegSubTypeValue.nregsubtypecode === 6) {\r\n\r\n                //     let portalOrder = selectedRecord && selectedRecord['Portal Order ID'] || {}\r\n                //     let containerType = comboData1['Container Type'] || []\r\n                //     comboData1['ContainerType'] = comboData1['Container Type'] || []\r\n                //     let containerList = []\r\n                //     const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1\r\n                //     containerType.map(x => {\r\n                //         if (x.item.jsondata.nportalordercode === nportalordercode) {\r\n                //             containerList.push(x)\r\n                //         }\r\n                //     })\r\n\r\n                //     comboData1['Container Type'] = containerList\r\n                // }\r\n\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ChildscreenName: \"SubSample\",\r\n                        screenName: \"SubSample\",\r\n                        showSaveContinue: true,\r\n                        openChildModal: false,\r\n                        childoperation: \"create\",\r\n                        parentPopUpSize: \"lg\",\r\n                        loading: false,\r\n                        lstComponent,\r\n                        openPortal: true,\r\n                        openModal: false,\r\n                        operation: \"create\",\r\n                        loadSubSample: true,\r\n                        selectComponent: selectedRecord1,\r\n                        SubSamplecomboData: comboData1,\r\n                        SubSamplecomboComponents,\r\n                        SubSamplewithoutCombocomponent,\r\n                        TestCombined,\r\n                        parentSubSampleColumnList: columnList,\r\n                        childSubSampleColumnList: childColumnList,\r\n                        timeZoneList,\r\n                        defaultTimeZone,\r\n                        masterData,\r\n                        selectPackage: [],\r\n                        TestPackage: PackageData                    }\r\n                });\r\n            })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n        }\r\n    } else {\r\n        const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData,\r\n            selectComponent, childColumnList,\r\n            SubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo)\r\n        return (dispatch) => {\r\n            if (!specBasedComponent) {\r\n                const urlArray = []\r\n                const ComponentTestBySpec = rsapi.post(\"/registration/getTestfromDB\", {\r\n                    nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                    slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                   // nneedsubsample: Map[\"nneedsubsample\"],\r\n                    ...Map,\r\n                    // nallottedspeccode: objComponent.nallottedspeccode,\r\n                    specBasedComponent: specBasedComponent,\r\n                    conditionalTestPackage:true,\r\n                    specBasedTestPackage:specBasedTestPackage                })\r\n                urlArray[0] = ComponentTestBySpec;\r\n                const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n                    userinfo\r\n                })\r\n                urlArray[1] = currentDate;\r\n                const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n                    datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n                    userinfo\r\n                })\r\n                urlArray[2] = dateService\r\n                const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\r\n                  //  nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n                  nallottedspeccode:selectedRecord.nallottedspeccode.item.nallottedspeccode,\r\n                    slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                    specBasedComponent: specBasedComponent,\r\n                    specBasedTestPackage: specBasedTestPackage,\r\n                    conditionalTestPackage: conditionalTestPackage\r\n                });\r\n                urlArray[3] = TestPackageGet;\r\n                Axios.all(urlArray).then(response => {\r\n                    let TestCombined = []\r\n                    let PackageData = []\r\n\r\n                  //  if (!specBasedTestPackage) {\r\n                         TestCombined = response[0].data\r\n                    // } \r\n                    // else {\r\n                        const PackageDataMap = constructOptionList(response[3].data.TestPackage || [], \"ntestpackagecode\",\r\n                        \"stestpackagename\", undefined, undefined, true);\r\n                        PackageData = PackageDataMap.get(\"OptionList\");\r\n                       // if (PackageData.length === 0) {\r\n                        //    dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \r\n                        //} \r\n\r\n                   // }\r\n                    const selectedRecord1 = newcomboData.selectedRecord\r\n                    SubSamplewithoutCombocomponent.map(componentrow => {\r\n                        if (componentrow.inputtype === \"date\") {\r\n                            if (componentrow.loadcurrentdate) {\r\n                                selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[1].data) : \"\";\r\n                                selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                            } else if (componentrow.nperiodcode) {\r\n                                selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ?\r\n                                    new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                                if (componentrow.loadselecteddate) {\r\n                                    selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ?\r\n                                        new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                                }\r\n                                //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                                //    new Date(response[2].data[componentrow.label]):null;\r\n                            } else {\r\n                                selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                            }\r\n\r\n                            if (componentrow.hidebeforedate) {\r\n                                selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                            }\r\n                            if (componentrow.hideafterdate) {\r\n                                selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                            }\r\n\r\n                        }\r\n                        else if (componentrow.inputtype === \"radio\") {\r\n                            selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                                componentrow.radioOptions.tags[0].text : \"\";\r\n                        }\r\n\r\n                    })\r\n                    // if (masterData.RealRegSubTypeValue.nregsubtypecode === 6) {\r\n\r\n                    //     let portalOrder = selectedRecord && selectedRecord['Portal Order ID'] || {}\r\n                    //     let containerType = SubSamplecomboData['ContainerType'] || []\r\n                    //     let containerList = []\r\n                    //     const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1\r\n                    //     containerType.map(x => {\r\n                    //         if (x.item.jsondata.nportalordercode === nportalordercode) {\r\n                    //             containerList.push(x)\r\n                    //         }\r\n                    //     })\r\n\r\n                    //     SubSamplecomboData['Container Type'] = containerList\r\n                    // }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ChildscreenName: \"SubSample\",\r\n                            screenName: \"SubSample\",\r\n                            showSaveContinue: true,\r\n                            openChildModal: false,\r\n                            childoperation: \"create\",\r\n                            parentPopUpSize: \"lg\",\r\n                            loading: false,\r\n                            lstComponent: [],\r\n                            openPortal: true,\r\n                            openModal: false,\r\n                            operation: \"create\",\r\n                            loadSubSample: true,\r\n                            selectComponent: selectedRecord1,\r\n                            TestCombined: TestCombined,\r\n                            TestPackage:PackageData\r\n                        }\r\n                    });\r\n                })\r\n            } else {\r\n                // Component = Component ? Component : []\r\n\r\n                const urlArray = []\r\n                const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\r\n                    ...Map,\r\n                    specBasedComponent: specBasedComponent\r\n                })\r\n                urlArray[0] = ComponentTestBySpec;\r\n                const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n                    userinfo\r\n                })\r\n                urlArray[1] = currentDate;\r\n                const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n                    datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n                    userinfo\r\n                })\r\n                urlArray[2] = dateService\r\n                Axios.all(urlArray).then(response => {\r\n                    // const lstComponent =  response.data.lstComponent\r\n                    let lstComponent = response[0].data.lstComponent //filterRecordBasedOnTwoArrays(response.data.lstComponent, Component, \"ncomponentcode\")\r\n                    const lstComponentMap = constructOptionList(lstComponent || [], \"ncomponentcode\",\r\n                        \"scomponentname\", undefined, undefined, true);\r\n\r\n                    lstComponent = lstComponentMap.get(\"OptionList\");\r\n\r\n                    const selectedRecord1 = newcomboData.selectedRecord\r\n                    SubSamplewithoutCombocomponent.map(componentrow => {\r\n                        if (componentrow.inputtype === \"date\") {\r\n                            if (componentrow.loadcurrentdate) {\r\n                                selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[1].data) : \"\";\r\n                                selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                            } else if (componentrow.nperiodcode) {\r\n                                selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ?\r\n                                    new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                                if (componentrow.loadselecteddate) {\r\n                                    selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ?\r\n                                        new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                                }\r\n                                //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                                //    new Date(response[2].data[componentrow.label]):null;\r\n                            } else {\r\n                                selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                            }\r\n\r\n                            if (componentrow.hidebeforedate) {\r\n                                selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                            }\r\n                            if (componentrow.hideafterdate) {\r\n                                selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                            }\r\n\r\n                        }\r\n                        else if (componentrow.inputtype === \"radio\") {\r\n                            selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                                componentrow.radioOptions.tags[0].text : \"\";\r\n                        }\r\n\r\n                    })\r\n                    // if (masterData.RealRegSubTypeValue.nregsubtypecode === 6) {\r\n\r\n                    //     let portalOrder = selectedRecord && selectedRecord['Portal Order ID'] || {}\r\n                    //     let containerType = SubSamplecomboData['ContainerType'] || []\r\n                    //     let containerList = []\r\n                    //     const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1\r\n                    //     containerType.map(x => {\r\n                    //         if (x.item.jsondata.nportalordercode === nportalordercode) {\r\n                    //             containerList.push(x)\r\n                    //         }\r\n                    //     })\r\n\r\n                    //     SubSamplecomboData['Container Type'] = containerList\r\n                    // }\r\n\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ChildscreenName: \"SubSample\",\r\n                            screenName: \"SubSample\",\r\n                            showSaveContinue: true,\r\n                            openChildModal: false,\r\n                            childoperation: \"create\",\r\n                            parentPopUpSize: \"lg\",\r\n                            loading: false,\r\n                            lstComponent,\r\n                            openPortal: true,\r\n                            openModal: false,\r\n                            operation: \"create\",\r\n                            loadSubSample: true,\r\n                            selectComponent: selectedRecord1,\r\n                            TestCombined: [],\r\n                            selectedTestData: [],\r\n                            selectPackage:[]\r\n                        }\r\n                    });\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// export function componentTestPackage(selectedobject, Reg, specBasedComponent, Component,specBasedTestPackage,conditionalTestPackage) {\r\n//     return function (dispatch) {\r\n//         dispatch(initRequest(true));\r\n//         Component = Component ? Component : []\r\n//         rsapi.post(\"/registration/getTestfromDB\", {\r\n//             nspecsampletypecode: selectedobject.selectedSubSample &&\r\n//             [...new Set(selectedobject.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\"),\r\n//             conditionalTestPackage: true,\r\n//             specBasedTestPackage: specBasedTestPackage,\r\n//             specBasedComponent: specBasedComponent,\r\n//             nallottedspeccode:selectedobject.selectedSample[0].nallottedspeccode\r\n\r\n//         })\r\n//             .then(response => {\r\n//                 let PackageData = []\r\n//                 let TestData=[]\r\n//                 if (specBasedTestPackage) {\r\n//                     const PackageDataMap = constructOptionList(response.data.TestPackage || [], \"ntestpackagecode\",\r\n//                         \"stestpackagename\", undefined, undefined, true);\r\n//                     PackageData = PackageDataMap.get(\"OptionList\");\r\n                    \r\n//                     // if (PackageData.length === 0) {\r\n//                     //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \r\n//                     // } \r\n//                 }\r\n//                 else {\r\n//                      TestData = response.data;\r\n//                 }\r\n//                 //let Test = [];\r\n//                 // Test[selectedobject.slno] = TestData;\r\n//                 const Map = {}\r\n//                 if (Reg) {\r\n//                     delete selectedobject.ntestpackagecode\r\n//                     delete selectedobject.ntestgrouptestcode\r\n\r\n//                     Map[\"selectedRecord\"] = selectedobject\r\n//                 } else {\r\n//                     Map[\"selectComponent\"] = selectedobject\r\n//                 }\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: {\r\n//                         TestCombined: TestData, TestPackage: PackageData,\r\n//                         ...Map,\r\n//                         loading: false, selectedTestData: [],\r\n//                         availableTest:[],\r\n//                       //  selectPackage: {},\r\n//                         screenName: \"IDS_TEST\",\r\n//                         operation: \"create\",\r\n//                         openModal: true,\r\n//                         parentPopUpSize: \"lg\",\r\n//                         loadChildTest: true,\r\n//                        //selectedRecord:{},\r\n                        \r\n//                     }\r\n//                 });\r\n//             })\r\n//             .catch(error => {\r\n//                 toast.error(error.message);\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//             })\r\n//     }\r\n// }\r\n\r\nexport function componentTest(selectedobject, Reg, specBasedComponent, Component,specBasedTestPackage,conditionalTestPackage) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const urlArray = []\r\n        Component = Component ? Component : []\r\n        const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\r\n            nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n            slno: Component ? Object.keys(Component).length + 1 : 1,\r\n            specBasedComponent: specBasedComponent,\r\n            specBasedTestPackage: specBasedTestPackage,\r\n            conditionalTestPackage: conditionalTestPackage,\r\n            nneedsubsample : selectedobject.nneedsubsample\r\n        });\r\n        urlArray[0] = TestGet;\r\n        const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\r\n            nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n            slno: Component ? Object.keys(Component).length + 1 : 1,\r\n            specBasedComponent: specBasedComponent,\r\n            specBasedTestPackage: specBasedTestPackage,\r\n            conditionalTestPackage: conditionalTestPackage\r\n        });\r\n        urlArray[1] = TestPackageGet;\r\n        Axios.all(urlArray).then(response => {\r\n                let PackageData = []\r\n                let TestData=[]\r\n               // if (specBasedTestPackage) {\r\n                    const PackageDataMap = constructOptionList(response[1].data.TestPackage || [], \"ntestpackagecode\",\r\n                        \"stestpackagename\", undefined, undefined, true);\r\n                    PackageData = PackageDataMap.get(\"OptionList\");\r\n                    \r\n                    // if (PackageData.length === 0) {\r\n                    //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \r\n                    // } \r\n             //   }\r\n            //    else {\r\n                     TestData = response[0].data;\r\n              //  }\r\n                //let Test = [];\r\n                // Test[selectedobject.slno] = TestData;\r\n                const Map = {}\r\n                if (Reg) {\r\n                    Map[\"selectedRecord\"] = selectedobject\r\n                } else {\r\n                    Map[\"selectComponent\"] = selectedobject\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        TestCombined: TestData,AllTest:TestData, TestPackage: PackageData, ...Map, loading: false, selectedTestData: [],\r\n                        selectPackage:[]\r\n                        \r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\n// export function testPackageTest(selectedobject, Reg, specBasedComponent, Component,specBasedTestPackage,conditionalTestPackage,selectComponent,objComponent,LoginProps,selectPackage,subSampleBased,selectedSpec,nneedsubsample) {\r\nexport function testPackageTest(selectedobject, Reg, specBasedComponent, Component,selectComponent,objComponent,LoginProps,selectPackage,subSampleBased,selectedSpec,nneedsubsample) {\r\n\r\n        return function (dispatch) {\r\n            dispatch(initRequest(true));\r\n            Component = Component ? Component : []\r\n            // rsapi.post(\"/registration/getTestBasesdTestPackage\", {\r\n            //     nspecsampletypecode:!nneedsubsample?selectedSpec.item.nspecsampletypecode: Object.keys(selectedobject).length!==0?selectedobject.nspecsampletypecode:selectComponent.nspecsampletypecode,\r\n            //     slno:subSampleBased?Component ? Object.keys(Component).length + 1 : 1:selectComponent.slno,\r\n            //     specBasedComponent: specBasedComponent,\r\n            //     ntestpackagecode: selectPackage.ntestpackagecode.value,\r\n            //     nallottedspeccode:selectedSpec!==undefined?selectedSpec.value:selectedobject.nallottedspeccode\r\n    \r\n            // })\r\n            rsapi.post(\"/registration/getTestBasesdTestPackage\", {\r\n               // nspecsampletypecode:!nneedsubsample?selectedSpec.item.nspecsampletypecode: Object.keys(selectedobject).length!==0?selectedobject.nspecsampletypecode:selectComponent.nspecsampletypecode,\r\n               nspecsampletypecode:selectComponent&&selectComponent.nspecsampletypecode?selectComponent.nspecsampletypecode:selectedobject.nspecsampletypecode,\r\n           //     slno: subSampleBased ? Component ? Object.keys(Component).length + 1 : 1 : selectComponent.slno,\r\n                specBasedComponent: specBasedComponent,\r\n                ntestpackagecode: selectPackage.ntestpackagecode.value,\r\n                nallottedspeccode:selectedSpec&&selectedSpec.value!==undefined?selectedSpec.value:selectedobject.nallottedspeccode\r\n    \r\n            })\r\n            .then(response => {\r\n                const Map = {}\r\n                let TestData = response.data;\r\n                let Test = LoginProps.Test || [];\r\n                let componentTest = [];\r\n                if (subSampleBased) {\r\n                    componentTest = Test[Component ? Object.keys(Component).length + 1 : 1] ? Test[Component ? Object.keys(Component).length + 1 : 1] : [];\r\n\r\n                } else {\r\n                     componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\r\n\r\n                }\r\n                const availableTest = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\r\n                const TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\r\n\r\n                delete selectedobject.ntestgrouptestcode;\r\n                if (Reg) {\r\n                    Map[\"selectedRecord\"] = selectedobject\r\n                } else {\r\n                    Map[\"selectPackage\"] = selectPackage\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        availableTest,TestCombined, ...Map, loading: false, selectedTestData: []\r\n                        //, selectPackage: []\r\n                     // TestCombined,loadTest: true, openChildModal: false,\r\n                     // ChildscreenName: \"Test\",\r\n                    //  screenName: \"Test\",\r\n                    // operation: \"create\",\r\n                    //  childoperation: \"create\",\r\n                   //   parentPopUpSize: \"lg\", loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function addSubSampleSaveContinue(Map1, Map,\r\n    specBasedComponent, Component, selectedTestData, lstComponent) {\r\n\r\n    //  const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData,\r\n    //     selectComponent, childColumnList, SubSamplewithoutCombocomponent)\r\n    return (dispatch) => {\r\n        if (!specBasedComponent) {\r\n            rsapi.post(\"/registration/getTestfromDB\", {\r\n                nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                nspecsampletypecode: Map[\"nspecsampletypecode\"],\r\n                slno: Map1.Component ? Object.keys(Map1.Component).length + 1 : 1,\r\n                specBasedComponent: specBasedComponent, nneedsubsample:Map[\"nneedsubsample\"]\r\n            }).then(response => {\r\n                let TestCombined = response.data\r\n               // let selectedTestPackageData = selectedTestPackageData && selectedTestPackageData.length > 0 ? selectedTestData : []\r\n\r\n                let selectedTestPackageData = selectedTestData && selectedTestData.length > 0 ? selectedTestData : []\r\n\r\n                const selectedTestPackageData1 = TestCombined.filter(function (x) {\r\n                    return selectedTestPackageData.some(function (y) {\r\n                        return x[\"ntestpackagetestcode\"] === y.value\r\n                    })\r\n                });\r\n                selectedTestData = selectedTestData && selectedTestData.length > 0 ? selectedTestPackageData : []\r\n\r\n                const selectedTestData1 = TestCombined.filter(function (x) {\r\n                    return selectedTestData.some(function (y) {\r\n                        return x[\"ntestgrouptestcode\"] === y.value\r\n                    })\r\n                });\r\n                // const selectedTestData2 = []\r\n                // TestCombined.map(x=>{\r\n                //     selectedTestData1.map(y=>{\r\n                //         if(x[\"ntestgrouptestcode\"] !== y[\"ntestgrouptestcode\"]){\r\n                //             selectedTestData2.push(x)\r\n                //         } \r\n                //     })\r\n                // });\r\n\r\n\r\n                //  let filterArray = filterRecordBasedOnTwoArrays(selectedTestData1, TestCombined, \"ntestgrouptestcode\")\r\n                // const filterArray = [...selectedTestData1, ...TestCombined]\r\n\r\n                selectedTestData = constructOptionList(selectedTestData1, \"ntestgrouptestcode\", \"stestsynonym\")\r\n                selectedTestData[\"ntestgrouptestcode\"] = selectedTestData.get(\"OptionList\")\r\n                selectedTestPackageData = constructOptionList(selectedTestPackageData1, \"ntestpackagetestcode\", \"stestpackagename\")\r\n                selectedTestPackageData[\"ntestpackagetestcode\"] = selectedTestPackageData.get(\"OptionList\")\r\n\r\n                Map1.selectComponent = {};\r\n               // Map1.selectComponent[\"ncomponentcode\"] = {};\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...Map1,\r\n                        loading: false,\r\n                        TestCombined,\r\n                        //selectedTestData,\r\n                        //selectedTestPackageData,\r\n                        selectedTestData: [],\r\n                        selectedTestPackageData:[],\r\n                        masterStatus:intl.formatMessage({ id: \"IDS_SAVESUCCESSFULLY\" })\r\n                    }\r\n                });\r\n            })\r\n        }\r\n        else {\r\n            // lstComponent = lstComponent.filter(x => x.item.nspecsampletypecode !== Map1.selectComponent[\"nspecsampletypecode\"])\r\n            Map1.selectComponent = {};\r\n            Map1.selectComponent[\"ncomponentcode\"] = {};\r\n            // Map1.selectComponent[\"ncomponentcode\"] = {};\r\n            // Map1.selectComponent[\"Sample Name\"] = \"\";\r\n           \r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    ...Map1,\r\n                    loading: false,\r\n                    TestCombined: [],\r\n                    selectedTestData: [],\r\n                    selectedTestPackageData:[],\r\n                    lstComponent,\r\n                    masterStatus:intl.formatMessage({ id: \"IDS_SAVESUCCESSFULLY\" })\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function editSubSample(Map,\r\n    component, userInfo, specBasedComponent,\r\n    SubSamplecomboData, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = []\r\n        let Componnet = {}\r\n        if (specBasedComponent) {\r\n            Componnet = rsapi.post(\"/registration/getComponentBySpec\", {\r\n                ...Map\r\n            });\r\n        }\r\n        urlArray = [Componnet]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let comp = []\r\n                if (specBasedComponent) {\r\n                    comp = response[0].data.lstComponent\r\n                }\r\n                const lstComponentMap = constructOptionList(comp || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n                if (Map.nregsubtypecode === 6) {\r\n                    let portalOrder = component['Container Type'] || {}\r\n                    let containerType = SubSamplecomboData['ContainerType'] || []\r\n                    let containerList = []\r\n                    const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1\r\n                    containerType.map(x => {\r\n                        if (x.item.jsondata.nportalordercode === nportalordercode) {\r\n                            containerList.push(x)\r\n                        }\r\n                    })\r\n\r\n                    SubSamplecomboData['Container Type'] = containerList\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadSubSample: true, childoperation: \"update\",\r\n                        ChildscreenName: \"SubSample\",\r\n                        openChildModal: false, selectComponent: component,\r\n                        parentPopUpSize: \"lg\", loading: false, lstComponent, SubSamplecomboData\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function insertRegistration(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/createRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === \"Success\") {\r\n                    let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\r\n                    let selectedSample = response.data[\"selectedSample\"];\r\n                    let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\r\n                    let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                    let selectedSubSample = RegistrationGetSubSample;\r\n                    RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\r\n                    let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\r\n                    if (inputParam.inputData.nneedsubsample) {\r\n                        RegistrationGetSubSample = sortData(response.data[\"RegistrationGetSubSample\"], 'npreregno', 'desc')\r\n                        selectedSubSample = RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\r\n                        RegistrationGetTest = RegistrationGetTest.filter(x => x.ntransactionsamplecode === selectedSubSample[0].ntransactionsamplecode)\r\n                        selectedTest = RegistrationGetTest.length > 0 ? response.data[\"selectedTest\"] : [];\r\n                    }\r\n                    // RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\")\r\n                    if (inputParam.multipleselectionFlag) {\r\n                        selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\r\n                        updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\r\n                        updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\r\n                        RegistrationGetSubSample = masterData.RegistrationGetSubSample;\r\n                        RegistrationGetTest = masterData.RegistrationGetTest;\r\n                    }\r\n\r\n\r\n                    masterData = {\r\n                        ...masterData, ...response.data,\r\n                        selectedSample, selectedSubSample, selectedTest,\r\n                        RegistrationGetSubSample, RegistrationGetTest, RegistrationGetSample\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        selectedRecord: undefined,\r\n                        loading: false,\r\n                        loadPreregister: false,\r\n                        showSample: undefined,\r\n                        openPortal: false,\r\n                        selectedSpec: {},\r\n                        selectComponent: {},\r\n                        SelectedTest: {},\r\n                        selectedComponent: {},\r\n                        Component: [],\r\n                        selectedRecord: {},\r\n                        SelectedTest: [],\r\n                        Test: [],\r\n                        selectedComponent: {},\r\n                        subSampleDataGridList: []\r\n                    }\r\n                    inputParam.postParamList[0]['clearFilter'] = 'yes'\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function insertRegistrationScheduler(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/schedulerinsertRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                // if (response.data.rtn === \"Success\") {\r\n                //     let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\r\n                //     let selectedSample = response.data[\"selectedSample\"];\r\n                //     let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\r\n                //     let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                //     let selectedSubSample = RegistrationGetSubSample;\r\n                //     RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\r\n                //     let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\r\n                //     if (inputParam.inputData.nneedsubsample) {\r\n                //         RegistrationGetSubSample = sortData(response.data[\"RegistrationGetSubSample\"], 'npreregno', 'desc')\r\n                //         selectedSubSample = RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\r\n                //         RegistrationGetTest = RegistrationGetTest.filter(x => x.ntransactionsamplecode === selectedSubSample[0].ntransactionsamplecode)\r\n                //         selectedTest = RegistrationGetTest.length > 0 ? response.data[\"selectedTest\"] : [];\r\n                //     }\r\n                //     // RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\")\r\n                //     if (inputParam.multipleselectionFlag) {\r\n                //         selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\r\n                //         updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\r\n                //         updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\r\n                //         RegistrationGetSubSample = masterData.RegistrationGetSubSample;\r\n                //         RegistrationGetTest = masterDat..a.RegistrationGetTest;\r\n                //     }\r\n\r\n\r\n                //     masterData = {\r\n                //         ...masterData, ...response.data,\r\n                //         selectedSample, selectedSubSample, selectedTest,\r\n                //         RegistrationGetSubSample, RegistrationGetTest, RegistrationGetSample\r\n                //     }\r\n                let respObject = {\r\n                    masterData: { ...masterData, SchedulerTransaction: response[\"data\"].SchedulerTransaction },\r\n                    ...inputParam.inputData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    showConfirmAlert: false,\r\n                    selectedRecord: undefined,\r\n                    loading: false,\r\n                    loadPreregister: false,\r\n                    showSample: undefined,\r\n                    openPortal: false,\r\n                    selectedSpec: {},\r\n                    selectComponent: {},\r\n                    SelectedTest: {},\r\n                    selectedComponent: {},\r\n                    Component: [],\r\n                    selectedRecord: {},\r\n                    SelectedTest: [],\r\n                    Test: [],\r\n                    selectedComponent: {},\r\n                    subSampleDataGridList: []\r\n                }\r\n                // inputParam.postParamList[0]['clearFilter'] = 'yes'\r\n                // dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                dispatch({ type: DEFAULT_RETURN, payload: { ...respObject } })\r\n                // } else {\r\n                //     toast.warn(response.data.rtn);\r\n                //     dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n                // }\r\n\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegistrationSample(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                let respObject = {};\r\n                if (inputData.selectedFilter) {\r\n                    respObject = { selectedFilter: { ...inputData.selectedFilter } };\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        subsampleskip: 0,\r\n                        subsampletake: undefined,\r\n                        showSample: undefined,\r\n                        ...respObject,\r\n                        activeSampleTab: inputData.inputData.activeSampleTab\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegistrationsubSampleDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeTestTab,\r\n            activeSubSampleTab: inputData.activeTestTab,\r\n            userinfo: inputData.userinfo,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedsubsample: inputData.nneedsubsample,\r\n            ntype: inputData.checkBoxOperation === 7 ? 2 : undefined,\r\n            checkBoxOperation: inputData.nneedsubsample === true ?\r\n                inputData.checkBoxOperation === 5 ? 3 : inputData.checkBoxOperation : inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        const subSample = inputData.nneedsubsample\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"registration/getRegistrationSubSample\", inputParamData)\r\n                .then(response => {\r\n                    sortData(response.data, \"descending\", \"npreregno\");\r\n                    sortData(response.data['RegistrationAttachment']);\r\n                    sortData(response.data['RegistrationComment']);\r\n                    let masterData = {}\r\n                    let skipInfo = {}\r\n                    let oldSelectedTest = inputData.masterData.selectedTest || []\r\n                    if (subSample) {\r\n                        let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                            inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\",\r\n                            inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            selectedSubSample: inputData.masterData.RegistrationGetSubSample.length > 0 ?\r\n                                [inputData.masterData.RegistrationGetSubSample[0]] : [],\r\n                        }\r\n                        let RegistrationTestComment = [];\r\n                        let RegistrationTestAttachment = [];\r\n                        let RegistrationParameter = [];\r\n                        let RegistrationComment = [];\r\n                        //if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7) {  \r\n                        if (inputData.checkBoxOperation === 1) {\r\n\r\n                            const wholeSubSampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((subsample, index) => {\r\n                                if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n                            if (oldSelectedSubSample.length > 0) {\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedSubSample: oldSelectedSubSample\r\n                                }\r\n                            }\r\n                            const selectedTest = getSameRecordFromTwoArrays(oldSelectedTest,\r\n                                masterData.selectedSubSample, 'npreregno')\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest\r\n                            }\r\n                        }\r\n                        if (inputData.checkBoxOperation === 7) {\r\n                            // masterData = {\r\n                            //     ...masterData,\r\n                            //     APSelectedTest:responseData.APSelectedTest,\r\n                            //     AP_TEST:responseData.AP_TEST,\r\n                            //     ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                            // }\r\n\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                        let RegistrationTestAttachment1 = [];\r\n                                        if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                            RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                        }\r\n                                        let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                        RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                    let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                            masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                            masterData[\"RegistrationComment\"] = RegistrationComment;\r\n                        }\r\n                        if (inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 5) {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: masterData.RegistrationGetTest.length > 0 ? [masterData.RegistrationGetTest[0]] : []\r\n                            }\r\n\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                        let RegistrationTestAttachment1 = [];\r\n                                        if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                            RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                        }\r\n                                        let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                        RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                    let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = response.data.RegistrationComment ?\r\n                                        [...response.data.RegistrationComment] : [];\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                            masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                            masterData[\"RegistrationComment\"] = RegistrationComment;\r\n\r\n                        }\r\n\r\n\r\n                        let { testskip, testtake, subsampleskip, subsampletake } = inputData\r\n                        let bool = false;\r\n\r\n                        if (inputData.masterData.RegistrationGetSubSample.length < inputData.subsampleskip) {\r\n                            testskip = 0;\r\n                            subsampleskip = 0;\r\n                            bool = true\r\n                        }\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake, subsampleskip, subsampletake }\r\n                        }\r\n                    } else {\r\n\r\n                        //let oldSelectedTest = inputData.masterData.selectedTest\r\n                        //  let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                            inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\",\r\n                            inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                                [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                            selectedSubSample: inputData.masterData.RegistrationGetSubSample,\r\n                        }\r\n                        let RegistrationTestComment = [];\r\n                        let RegistrationParameter = [];\r\n                        let RegistrationTestAttachment = [];\r\n                        let RegistrationComment = [];\r\n\r\n                        if (inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 1) {\r\n                            const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.forEach((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            let npreregno;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedTest: oldSelectedTest,\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                                    inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\"\r\n                                npreregno = inputData.masterData.RegistrationGetSample.length > 0 ?\r\n                                    inputData.masterData.RegistrationGetSample[0].npreregno : \"\"\r\n                            }\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                        inputData.masterData.RegistrationParameter : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ?\r\n                                            inputData.masterData.RegistrationTestAttachment : [] :\r\n                                            getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                                        inputData.masterData.RegistrationTestComment : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = keepOld ? inputData.masterData.RegistrationComment ?\r\n                                        inputData.masterData.RegistrationComment : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\")\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                        inputData.masterData.RegistrationParameter : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        }\r\n                        else if (inputData.checkBoxOperation === 5) {\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                        let RegistrationTestAttachment1 = [];\r\n                                        if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                            RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                        }\r\n                                        let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                        RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                    let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = response.data.RegistrationComment ?\r\n                                        [...response.data.RegistrationComment] : [];\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                        }\r\n                        else {\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                                        [...response.data.RegistrationTestComment] : [];\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        RegistrationTestAttachment = response.data.RegistrationTestAttachment ?\r\n                                            [...response.data.RegistrationTestAttachment] : [];\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                                        [...response.data.RegistrationParameter] : [];\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = response.data.RegistrationComment ?\r\n                                        [...response.data.RegistrationComment] : [];\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                                        [...response.data.RegistrationParameter] : [];\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        }\r\n                        masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                        masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                        masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                        masterData['RegistrationComment'] = RegistrationComment;\r\n\r\n                        let { testskip, testtake } = inputData\r\n                        let bool = false;\r\n\r\n                        if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\r\n                            testskip = 0;\r\n                            bool = true\r\n                        }\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake }\r\n                        }\r\n\r\n                    }\r\n                    if (inputData.masterData.selectedSample && inputData.sampleGridDataState\r\n                        && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\"\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                   // let inputParam = { attachmentskip: undefined }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                           // inputParam:inputData\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            let bool = false;\r\n            let skipInfo = {};\r\n            let { testskip, testtake, subsampletake, subsampleskip } = inputData;\r\n            let oldSelectedTest = inputData.masterData.selectedTest\r\n            let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n            // let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n\r\n\r\n            if (inputData[\"statusNone\"]) {\r\n                TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n            else {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let selectedSample = inputData.selectedSample;\r\n                let filterTestSameOldSelectedTest = getSameRecordFromTwoArrays(oldSelectedTest, inputData.masterData.RegistrationGetTest, \"ntransactiontestcode\");\r\n                let selectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest :\r\n                    inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\r\n                let ntransactiontestcode = selectedTest.length > 0 ? selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\r\n                let selectedSubSample = inputData.masterData.RegistrationGetSubSample\r\n\r\n                if (subSample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                    selectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RegistrationGetSubSample[0]];\r\n                    if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n\r\n                }\r\n                let masterData = { ...inputData.masterData, selectedSample, selectedSubSample, selectedTest }\r\n                if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\r\n                    selectedSubSample, checkBoxOperation: 3, skipInfo, masterData\r\n                }\r\n                if (subSample) {\r\n                    if (selectedTest.length === 0) {\r\n                        inputData[\"npreregno\"] = selectedSubSample.map(x => x.npreregno).join(\",\")\r\n                        inputData[\"ntransactionsamplecode\"] = selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\")\r\n                        inputData[\"checkBoxOperation\"] = 3\r\n                        inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"]\r\n                        dispatch(getRegistrationTestDetail(inputData, true));\r\n                    } else {\r\n                        dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n                    }\r\n                } else {\r\n                    dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n                }\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedSample: inputData.selectedSample,\r\n                    selectedPreregno: inputData.npreregno,\r\n                    selectedTest: TestSelected ? TestSelected : inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                    // RegistrationTestComment,\r\n                    selectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.RegistrationGetSubSample\r\n                }\r\n                let subsamplecheck = true;\r\n                if (subSample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((test, index) => {\r\n                                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.RegistrationGetSubSample[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getRegistrationTestDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.forEach((test, index) => {\r\n                            if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            selectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.forEach((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\"\r\n                }\r\n                masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                let skipInfo = {};\r\n                if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n\r\n                let dataStateArray = [\r\n                    { activeName: 'selectedSample', dataStateName: 'sampleGridDataState' },\r\n                    { activeName: 'RegistrationSourceCountry', dataStateName: 'sourceDataState' },\r\n                    { activeName: 'RegistrationTestComment', dataStateName: 'testCommentDataState' },\r\n                    { activeName: 'RegistrationParameter', dataStateName: 'resultDataState' },\r\n                ]\r\n                dataStateArray.map(arr => {\r\n                    if (inputData[arr.dataStateName] && masterData[arr.activeName] &&\r\n                        masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    return null;\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function getRegistrationTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            activeSubSampleTab: inputData.activeSubSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation,\r\n            nneedsubsample: inputData.nneedsubsample\r\n\r\n        }\r\n        const subSample = inputData.nneedsubsample;\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"registration/getRegistrationTest\", inputParamData)\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let oldSelectedTest = inputData.masterData.selectedTest || []\r\n                    let oldSelectedSubSample = inputData.masterData.selectedSubSample || []\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                        inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\",\r\n                        inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedSubSample: inputData.selectedSubSample,\r\n                        selectedTransactionsamplecode: inputData.ntransactionsamplecode,\r\n                        selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                            [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                        // RegistrationTestComment,\r\n                    }\r\n                    //let wholeRegistrationTestComments = [];\r\n                    let RegistrationTestComment = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let RegistrationParameter = [];\r\n                    let RegistrationSampleComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.forEach((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n\r\n                        })\r\n\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: oldSelectedTest,\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                                inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\"\r\n                        }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                    inputData.masterData.RegistrationParameter : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                                    inputData.masterData.RegistrationTestComment : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ?\r\n                                    inputData.masterData.RegistrationTestAttachment : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                    inputData.masterData.RegistrationParameter : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n                    else if (inputData.checkBoxOperation === 5) {\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment1 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                }\r\n                                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                {\r\n                                    let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                    let RegistrationTestAttachment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                        RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                }\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment2 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                }\r\n                                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                        // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                    }\r\n                    else if (inputData.checkBoxOperation === 7) {\r\n                        let testList = reArrangeArrays(inputData.masterData.RegistrationGetSubSample, response.data.RegistrationGetTest, \"ntransactionsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            selectedTest: testList ? testList.length > 0 ? [testList[0]] : [] : [],\r\n                            RegistrationGetTest: testList ? testList.length > 0 ? testList : [] : [],\r\n                            //ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                        }\r\n\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment1 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                }\r\n                                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                {\r\n                                    let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                    let RegistrationTestAttachment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                        RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                }\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                // let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                let RegistrationParameter1 = [...resultResponseData];\r\n                                let ntransactiontestcode1 = testList ? testList.length > 0 ? testList[0].ntransactiontestcode : inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1 : -1\r\n\r\n                                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment2 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                }\r\n                                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                        // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                    }\r\n                    else {\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                                    [...response.data.RegistrationTestComment] : [];\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = response.data.RegistrationTestAttachment ?\r\n                                    [...response.data.RegistrationTestAttachment] : [];\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = response.data.RegistrationParameter ?\r\n                                    [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationParameter = response.data.RegistrationParameter ?\r\n                                    [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (subSample) {\r\n                        let wholeSubsampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.map((test, index) => {\r\n                            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactionsamplecode;\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            keepOld = true\r\n                        } else {\r\n                            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode\r\n                        }\r\n\r\n                        switch (inputData.activeSubSampleTab) {\r\n                            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"subSampleCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                    masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                    masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                    masterData[\"RegistrationSampleComment\"] = RegistrationSampleComment;\r\n                    masterData[\"RegistrationSampleAttachment\"] = RegistrationSampleAttachment;\r\n                    let { testskip, testtake } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n\r\n                    if (bool) {\r\n                        skipInfo = { testskip, testtake }\r\n                    }\r\n                    if (inputData.masterData.selectedSample && inputData.sampleGridDataState\r\n                        && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                  //  let inputParam = { attachmentskip: undefined }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTabIndex: inputData.activeTabIndex,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                          //  inputParam\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.selectedTest\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode.toString() : \"-1\";\r\n                let selectedSubSample = inputData.selectedSubSample;\r\n                // let selectedPreregno = inputData.npreregno;\r\n                let selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\r\n                // let selectedSubSample = inputData.masterData.RegistrationGetSubSample\r\n                let masterData = { ...inputData.masterData, selectedSubSample, selectedTest }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\r\n                    selectedSubSample, checkBoxOperation: 3\r\n                }\r\n                dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedSubSample: inputData.selectedSubSample,\r\n                    selectedTransactioncode: inputData.ntransactionsamplecode,\r\n                    selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                        [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                }\r\n\r\n                const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.forEach((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest,\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                        inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\"\r\n                }\r\n                masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                    inputData.masterData.RegistrationTestComment : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                    inputData.masterData.RegistrationParameter : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                let skipInfo = {};\r\n                let dataStateArray = [\r\n                    { activeName: 'selectedSample', dataStateName: 'sampleGridDataState' },\r\n                    { activeName: 'RegistrationSourceCountry', dataStateName: 'sourceDataState' },\r\n                    { activeName: 'RegistrationTestComment', dataStateName: 'testCommentDataState' },\r\n                    { activeName: 'RegistrationParameter', dataStateName: 'resultDataState' },\r\n                ]\r\n                dataStateArray.map(arr => {\r\n                    if (inputData[arr.dataStateName] && masterData[arr.activeName] &&\r\n                        masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    return null;\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        activeTabIndex: inputData.activeTabIndex,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function acceptRegistration(inputParam, LoginProps) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/acceptRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\"\r\n                    || response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\"\r\n                    || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                    delete response.data[\"RegistrationGetSample\"];\r\n                    delete response.data[\"RegistrationGetSubSample\"];\r\n                    delete response.data[\"RegistrationGetTest\"];\r\n                    let masterData = {\r\n                        ...LoginProps, ...response.data,\r\n                        selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    if (response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\"\r\n                        || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\r\n                        toast.warn(intl.formatMessage({ id: response.data.rtn }));\r\n                    }\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n            })\r\n            .catch(error => {\r\n               // toast.error(error.message);\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading: false}});\r\n\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data[\"rtn\"] );\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const addMoreTest = (inputParam, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        let { sampleList} = inputParam;\r\n        let value = false;\r\n        if (inputParam.selectedSample && inputParam.selectedSample.length > 0) {\r\n            if (inputParam.selectedSubSample && inputParam.selectedSubSample.length > 0) {\r\n                value = inputParam.selectedSubSample.some(obj => obj.nspecsampletypecode !== inputParam.selectedSubSample[0].nspecsampletypecode)\r\n                if (value) {\r\n                    return toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                }\r\n                sampleList = sampleList ? [...sampleList.slice(inputParam.skip, inputParam.take)] : [];\r\n                const selectedsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedSample, \"npreregno\");\r\n               // const selectsubsample = getSameRecordFromTwoArrays(subsampleList, inputParam.selectedsubsample, \"ntransactionsamplecode\");\r\n                if (selectedsample && selectedsample.length > 0) {\r\n                    const findTransactionStatus = [...new Set(selectedsample.map(item => item.ntransactionstatus))];\r\n\r\n                    if (findTransactionStatus.length === 1) {\r\n                        if (findTransactionStatus[0] !== transactionStatus.REJECT && findTransactionStatus[0] !== transactionStatus.CANCELLED) {\r\n                            if (findTransactionStatus[0] !== transactionStatus.RELEASED) {\r\n\r\n                               // if (selectsubsample && selectsubsample.length > 0) {\r\n                               //     const findSubSampleStatus = [...new Set(selectsubsample.map(item => item.ntransactionstatus))];\r\n                //\r\n                               //     if (findSubSampleStatus[0] !== transactionStatus.REJECT && findSubSampleStatus[0] !== transactionStatus.CANCELLED) \r\n                               //     {                    \r\n\r\n                                        const findApprovalVersion = [...new Set(selectedsample.map(item => item.napprovalversioncode))];\r\n                                        if (findApprovalVersion.length === 1) {\r\n                                            const findSampleSpec = [...new Set(selectedsample.map(item => item.nallottedspeccode))];\r\n                                            //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\r\n                                            if (findSampleSpec.length === 1)//&& findComponent.length === 1 \r\n                                            {\r\n                                                inputParam[\"snspecsampletypecode\"] = inputParam.selectedSubSample &&\r\n                                                    [...new Set(inputParam.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\r\n                                                dispatch(initRequest(true));\r\n                                                const urlArray = []\r\n                                                const TestGet = rsapi.post(\"/registration/getMoreTest\", {\r\n                                                    ...inputParam\r\n                                                });\r\n                                                urlArray[0] = TestGet;\r\n                                                const TestPackageGet = rsapi.post(\"/registration/getMoreTestPackage\", {\r\n                                                    ...inputParam\r\n                                                });\r\n                                                urlArray[1] = TestPackageGet;\r\n\r\n                                                Axios.all(urlArray)\r\n                                                .then(response => {\r\n                                                    let PackageData = []\r\n                                                        const PackageDataMap = constructOptionList(response[1].data || [], \"ntestpackagecode\",\r\n                                                            \"stestpackagename\", undefined, undefined, true);\r\n                                                        PackageData = PackageDataMap.get(\"OptionList\");\r\n                                                        dispatch({\r\n                                                            type: DEFAULT_RETURN,\r\n                                                            payload: {\r\n                                                                availableTest: response[0].data,\r\n                                                                AllTest: response[0].data,\r\n                                                                TestPackage: PackageData,\r\n                                                                loadChildTest: true,\r\n                                                                loading: false, ncontrolCode,\r\n                                                                screenName: \"IDS_TEST\",\r\n                                                                operation: \"create\",\r\n                                                                openModal: true,\r\n                                                                parentPopUpSize: \"lg\",\r\n                                                                selectedRecord: {},\r\n                                                                showSample: undefined\r\n                                                            }\r\n                                                        });\r\n                                                    })\r\n                                                    .catch(error => {\r\n                                                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                                                        if (error.response.status === 500) {\r\n                                                            toast.error(error.message);\r\n                                                        } else {\r\n                                                            toast.warn(this.props.formatMessage({ id: error.response.data }));\r\n                                                        }\r\n                                                    });\r\n                                            } else {\r\n                                                toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                                            }\r\n                                        } else {\r\n                                            toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\r\n                                        }\r\n                                //     }\r\n                                //     else {\r\n                                //         toast.warn(intl.formatMessage({ id: \"IDS_SUBSAMPLEISREJECTEDORCANCELLED\" }));\r\n                                //     }\r\n                                // }                               \r\n                            }\r\n                            else {\r\n                                toast.warn(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORRELEASEDSAMPLES\" }));\r\n                            }\r\n                        }\r\n                        else {\r\n                            ////     toast.warn(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCANCELLEDREJECTSAMPLES\" }));\r\n                            toast.warn(intl.formatMessage({ id: \"IDS_SAMPLEISREJECTEDORCANCELLED\" }));\r\n                        }\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\" }));\r\n                    }\r\n                } else {\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }));\r\n                }\r\n            } else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_SELECTSUBSAMPLE\" }));\r\n            }\r\n        } else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }));\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const createRegistrationTest = (inputParam, masterData, modalName) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData })\r\n            .then(response => {\r\n                let RegistrationGetTest = updatedObjectWithNewElement(masterData[\"RegistrationGetTest\"], response.data[\"RegistrationGetTest\"]);\r\n                masterData = {\r\n                    ...masterData,\r\n                    RegistrationGetTest:sortData(RegistrationGetTest, \"descending\", \"ntransactiontestcode\"),\r\n                    selectedTest: response.data[\"RegistrationGetTest\"],\r\n                    RegistrationParameter: response.data.RegistrationParameter,\r\n                    // RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, masterData.RegistrationGetSample, 'npreregno')\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    [modalName]: false,\r\n                    loading: false,\r\n                    loadChildTest: false,\r\n                    showSample: undefined,\r\n                    openModal: false,\r\n                    selectedRecord: {}\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'yes'\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n                // dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //     payload: {\r\n                //         masterData,\r\n                //         [modalName]: false,\r\n                //         loading: false,\r\n                //         loadChildTest: false,\r\n                //         showSample: undefined,\r\n                //         openModal: false,\r\n                //         selectedRecord: {}\r\n                //     }\r\n                // });\r\n            })\r\n            .catch(error => {\r\n                \r\n                if (error.response.status === 500) {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    toast.error(error.message);\r\n                } else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { \r\n                                                                [modalName]: false,\r\n                                                                loading: false,\r\n                                                                loadChildTest: false,\r\n                                                                showSample: undefined,\r\n                                                                openModal: false,\r\n                                                                selectedRecord: {}}});\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getEditRegistrationComboService(inputParam, columnList,\r\n    selectedRecord1, childColumnList, comboComponents,\r\n    withoutCombocomponent) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const { userInfo, operation } = { ...inputParam };\r\n        let masterData = inputParam[\"masterData\"];\r\n\r\n        if (masterData[\"selectedSample\"].length > 1 ||\r\n            masterData[\"selectedSample\"]\r\n                .findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName])\r\n            === -1) {\r\n            inputParam.editRegParam[\"getSampleChildDetail\"] = true;\r\n        }\r\n        masterData[\"selectedSample\"] = [];\r\n        masterData[\"selectedSample\"].push(inputParam[\"mastertoedit\"]);\r\n\r\n        const npreregno = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n        let urlArray = [];\r\n\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        // const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n        //     parentcolumnlist: columnList,\r\n        //     childcolumnlist: childColumnList,\r\n        //     userinfo: userInfo\r\n        // })\r\n        const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationDetails\", {\r\n            ...inputParam.editRegParam, npreregno, parentcolumnlist: columnList,\r\n            childcolumnlist: childColumnList,\r\n            userinfo: userInfo\r\n        })\r\n\r\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n            datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n            userinfo:userInfo\r\n        })\r\n\r\n        urlArray = [timeZoneService, selectedRegistration,dateService]\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = { ...response[1].data[\"EditData\"] };\r\n                selectedRecord = { ...selectedRecord, ...selectedRecord['jsondata'] }\r\n                // const recordToEdit = { ...response[2].data[\"SelectedRegistration\"][0] };\r\n                //  const currentTime = rearrangeDateFormat(userInfo, response[6].data);\r\n\r\n                \r\n\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode }\r\n\r\n                \r\n                //  const newcomboData = parentChildComboLoad(columnList, response[1].data,\r\n                // selectedRecord, childColumnList, withoutCombocomponent)\r\n\r\n                if (selectedRecord.ntransactionstatus === transactionStatus.CANCELLED\r\n                    || selectedRecord.ntransactionstatus === transactionStatus.REJECT) {\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_CANNOTEDITCANCELLEDSAMPLE\" }));\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                }\r\n                else {\r\n                    const languagetypeCode = undefined\r\n                    const comboData = response[1].data;\r\n                    delete comboData['EditData']\r\n                    let comboValues = {}\r\n                    if (columnList.length > 0) {\r\n                        columnList.map(x => {\r\n                            if (x.inputtype === 'combo') {\r\n                                if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                                {\r\n                                    if (comboData[x.label].length > 0) {\r\n                                        if (comboData[x.label][0].label === undefined) {\r\n                                            const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                            comboData[x.label] = optionList.get(\"OptionList\");\r\n                                        } else {\r\n                                            comboData[x.label] = comboData[x.label]\r\n                                            const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                        }\r\n                                    } else {\r\n                                        comboData[x.label] = []\r\n                                    }\r\n                                    //comboValues = childComboLoad(x, comboData, selectedRecord, \r\n                                    //   childColumnList, withoutCombocomponent)\\\r\n                                    comboValues = childComboLoadForEdit(x, comboData, selectedRecord,\r\n                                        childColumnList, withoutCombocomponent)\r\n                                } else {\r\n                                    comboValues = {\r\n                                        \"comboData\": comboData,\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                comboValues = {\r\n                                    comboData: comboData,\r\n                                    ...comboValues\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        comboValues = {\r\n                            \"comboData\": comboData,\r\n                        }\r\n                    }\r\n\r\n                    withoutCombocomponent.map(date => {\r\n                        if (date.inputtype === 'date') {\r\n                            selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\r\n                                rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\"\r\n                                \r\n                                if(date.nperiodcode){\r\n                                    selectedRecord[date.label + \"value\"] = response[2].data[date.label] ?\r\n                                    new Date(response[2].data[date.label][\"datevalue\"]) : null;\r\n                                }else{\r\n                                    selectedRecord[date.label+ \"value\"] = new Date();\r\n                                }\r\n\r\n                                if (date.hidebeforedate) {\r\n                                    selectedRecord[date.label + \"min\"] =selectedRecord[date.label + \"value\"]\r\n                                }\r\n                                if (date.hideafterdate) {\r\n                                    selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"]\r\n                                }\r\n                        }\r\n                    })\r\n\r\n                    let { Specification, AgaramTree, ActiveKey, FocusKey, OpenNodes } = [];\r\n                    const selectedSpec = {}\r\n                    Specification = constructOptionList(response[1].data[\"Specification\"] || [], \"nallottedspeccode\",\r\n                        \"sspecname\", undefined, undefined, true).get(\"OptionList\");\r\n                    AgaramTree = response[1].data[\"AgaramTree\"];\r\n                    ActiveKey = response[1].data[\"FocusKey\"];\r\n                    FocusKey = response[1].data[\"ActiveKey\"];\r\n                    OpenNodes = response[1].data[\"OpenNodes\"];\r\n                    //Manufacturer = response.data[\"Manufacturer\"];\r\n                    selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\r\n                        \"value\": Specification[0].value,\r\n                        \"label\": Specification[0].label,\r\n                        \"item\": Specification[0].item\r\n                    } : \"\";\r\n\r\n                    selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\"\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ?\r\n                        Specification[0].item.ntemplatemanipulationcode : -1\r\n                    selectedRecord = { ...selectedRecord, ...selectedSpec }\r\n\r\n                    if (inputParam.editRegParam[\"getSampleChildDetail\"] === true){\r\n                        masterData = sortData({...masterData, ...response[1].data[\"SampleChildDetail\"]})\r\n                     }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            AgaramTree,\r\n                            FocusKey,\r\n                            ActiveKey,\r\n                            OpenNodes,\r\n                            selectedSpec,\r\n                            Specification,\r\n                            // statustoEditDetail: response[2].data[\"ApprovalConfigRole\"] || {},\r\n                            // currentTime,\r\n                            operation: \"update\",\r\n                            screenName: inputParam.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                            // PopUpLabel: popUpLabel,\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            selectedRecord,\r\n                            openPortal: true,\r\n                            ncontrolCode: inputParam.editRegParam.ncontrolCode,\r\n                            loadPreregister: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            loading: false,\r\n                            showSample: undefined,\r\n                            comboData: comboValues.comboData,\r\n                            childColumnList, comboComponents,\r\n                            withoutCombocomponent,\r\n                            columnList,\r\n                            masterData\r\n                            //  regRecordToEdit:recordToEdit\r\n\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport function updateRegistration(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/updateRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === \"Success\") {\r\n                    // sortData(response.data);\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetSample\"], masterData.RegistrationGetSample, \"npreregno\");\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\");\r\n                    //  let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\r\n                    //let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedSample: response.data[\"selectedSample\"],\r\n                        // selectedSubSample: masterData[\"selectedSubSample\"],\r\n                        //selectedTest:masterData[\"selectedTest\"],\r\n                        // RegistrationGetTest,\r\n                        // RegistrationGetSubSample,\r\n                        RegistrationParameter: masterData[\"RegistrationParameter\"]\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData, openPortal: false, loading: false, showConfirmAlert: false,\r\n                            regDateEditConfirmMessage: undefined, loadEsign: false, openModal: false,\r\n                            loadPreregister: false, selectedRecord: {}, showSample: undefined\r\n                        }\r\n                    });\r\n                    // let inputData = {\r\n                    //     masterData,\r\n                    //     selectedTest: masterData.selectedTest,\r\n                    //     ntransactiontestcode: masterData.selectedTest ?\r\n                    //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                    //     npreregno: masterData.selectedSample ?\r\n                    //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    //     userinfo: inputParam.inputData.userinfo,\r\n                    //     activeTestTab : masterData.activeTestTab,\r\n                    //     screenName: masterData.activeTestTab,\r\n                    //     resultDataState: inputParam.resultDataState,\r\n                    //     testCommentDataState: inputParam.testCommentDataState,\r\n                    // }\r\n                    // dispatch(getTestChildTabDetail(inputData, true))\r\n                } else {\r\n                    toast.info(response.data.rtn);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n                else if (error.response.status === 302) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, loadEsign: false,\r\n                            regEditParam: inputParam,\r\n                            showConfirmAlert: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            regDateEditConfirmMessage: error.response.data, showSample: undefined\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function cancelTestAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/cancelTest\", inputParam.inputData)\r\n            .then(response => {\r\n\r\n                // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    selectedTest: response.data[\"selectedTest\"],\r\n                    // RegistrationGetTest:response.data[\"RegistrationGetTest\"],\r\n                    RegistrationGetTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\"),\r\n                    //  RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, LoginProps.RegistrationGetSample, 'npreregno')\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    showConfirmAlert: false,\r\n                    selectedRecord: {},\r\n                    loading: false,\r\n                    loadPreregister: false,\r\n                    showSample: undefined\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'no'\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function cancelSampleAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/cancelSample\", inputParam.inputData)\r\n            .then(response => {\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                    selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                    selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                }\r\n\r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    loading: false,\r\n                    loadEsign: false,\r\n                    openModal: false,\r\n                    showSample: undefined\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function addsubSampleRegistration(masterData, userinfo, regcolumnList,\r\n    selectRecord, regchildColumnList,\r\n    regSubSamplecomboComponents,\r\n    regSubSamplewithoutCombocomponent, Map, ncontrolcode, specBasedComponent,specBasedTestPackage) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const urlArray = []\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        urlArray[0] = timeZoneService;\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: regcolumnList,\r\n            childcolumnlist: regchildColumnList,\r\n            userinfo\r\n        })\r\n        urlArray[1] = actualService;\r\n\r\n        if (specBasedComponent) {\r\n            const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\r\n                ...Map,\r\n                specBasedComponent: specBasedComponent,\r\n                userinfo\r\n            })\r\n            urlArray[2] = ComponentTestBySpec;\r\n        } else {\r\n\r\n            const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\r\n                nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                slno: 1,\r\n                specBasedComponent: specBasedComponent,\r\n                specBasedTestPackage: specBasedTestPackage,\r\n                conditionalTestPackage:true,\r\n                nneedsubsample:Map[\"nneedsubsample\"]\r\n\r\n            })\r\n            urlArray[2] = TestGet;\r\n            const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\r\n                //  nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n                nallottedspeccode: Map[\"nallottedspeccode\"],\r\n              //  slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                  specBasedComponent: specBasedComponent,\r\n                  specBasedTestPackage: specBasedTestPackage,\r\n             //     conditionalTestPackage: conditionalTestPackage\r\n              });\r\n              urlArray[5] = TestPackageGet;\r\n            \r\n        }\r\n        const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo\r\n        })\r\n\r\n        urlArray[3] = currentDate\r\n\r\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n            datecolumnlist: regSubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n            userinfo\r\n        })\r\n        urlArray[4] = dateService\r\n        \r\n        Axios.all(urlArray)\r\n        .then(response => {\r\n            const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n            const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n            const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n            const newcomboData = parentChildComboLoad(regcolumnList, response[1].data,\r\n                selectRecord, regchildColumnList, regSubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo)\r\n            let TestCombined = [];\r\n            let lstComponent = [];\r\n            let PackageData = [];\r\n            if (specBasedComponent) {\r\n                \r\n                const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n\r\n                lstComponent = lstComponentMap.get(\"OptionList\");\r\n\r\n            } else {\r\n                //if (specBasedTestPackage) {\r\n                    const PackageDataMap = constructOptionList(response[5].data.TestPackage || [], \"ntestpackagecode\",\r\n                        \"stestpackagename\", undefined, undefined, true);\r\n                    PackageData = PackageDataMap.get(\"OptionList\");\r\n                    \r\n                    // if (PackageData.length === 0) {\r\n                    //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \r\n                    // } \r\n                // }\r\n                // else {\r\n                     TestCombined = response[2].data;\r\n                // }\r\n            }\r\n            const comboData1 = newcomboData.comboData\r\n            const selectedRecord1 = newcomboData.selectedRecord\r\n            regSubSamplewithoutCombocomponent.map(componentrow => {\r\n                if (componentrow.inputtype === \"date\") {\r\n                    if (componentrow.loadcurrentdate) {\r\n                        selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\r\n                        selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                    } else if (componentrow.nperiodcode) {\r\n                        selectedRecord1[componentrow.label + \"value\"] = response[4].data[componentrow.label] ?\r\n                            new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                        if (componentrow.loadselecteddate) {\r\n                            selectedRecord1[componentrow.label] = response[4].data[componentrow.label] ?\r\n                                new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                        }\r\n                        //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                        //    new Date(response[2].data[componentrow.label]):null;\r\n                    } else {\r\n                        selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                    }\r\n\r\n                    if (componentrow.hidebeforedate) {\r\n                        selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                    }\r\n                    if (componentrow.hideafterdate) {\r\n                        selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                    }\r\n\r\n                }\r\n                else if (componentrow.inputtype === \"radio\") {\r\n                    selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                        componentrow.radioOptions.tags[0].text : \"\";\r\n                }\r\n\r\n            })\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    screenName: \"SubSample\",\r\n                    showSaveContinue: false,\r\n                    parentPopUpSize: \"lg\",\r\n                    loading: false,\r\n                    lstComponent,\r\n                    openModal: true,\r\n                    operation: \"create\",\r\n                    loadRegSubSample: true,\r\n                    selectedRecord: selectedRecord1,\r\n                    regSubSamplecomboData: comboData1,\r\n                    regSubSamplecomboComponents,\r\n                    regSubSamplewithoutCombocomponent,\r\n                    TestCombined,\r\n                    regparentSubSampleColumnList: regcolumnList,\r\n                    regchildSubSampleColumnList: regchildColumnList,\r\n                    ncontrolCode: ncontrolcode,\r\n                    timeZoneList,\r\n                    defaultTimeZone,\r\n                    masterData,\r\n                    specBasedComponent,\r\n                    specBasedTestPackage,\r\n                    TestPackage:PackageData\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function saveSubSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/createSubSample\", inputParam.inputData)\r\n            .then(response => {\r\n                // let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\r\n                // let selectedSample = response.data[\"selectedSample\"];\r\n                let RegistrationGetSubSample = updatedObjectWithNewElement(inputParam.inputData.masterData.RegistrationGetSubSample, response.data[\"selectedSubSample\"]);\r\n                let RegistrationGetTest = response.data[\"selectedTest\"];\r\n                let selectedSubSample = response.data[\"selectedSubSample\"];// RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\r\n                RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\r\n                let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\r\n\r\n                let RegistrationParameter = response.data[\"RegistrationParameter\"]\r\n\r\n                RegistrationParameter = getSameRecordFromTwoArrays(RegistrationParameter, selectedTest, 'ntransactiontestcode')\r\n\r\n                let masterData = { ...inputParam.inputData.masterData }\r\n                masterData = {\r\n                    ...masterData, ...response.data,\r\n                    selectedSubSample, selectedTest,\r\n                    RegistrationGetSubSample, RegistrationGetTest, RegistrationParameter\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    loading: false,\r\n                    showSample: undefined,\r\n                    selectedRecord: {},\r\n                    loadRegSubSample: false\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'yes'\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                //    dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //     payload: {\r\n                //         masterData,\r\n                //         openModal: false,\r\n                //         loadEsign: false,\r\n                //         loading: false,\r\n                //         showSample: undefined,\r\n                //         selectedRecord: {},\r\n                //         loadRegSubSample:false\r\n                //     }\r\n                // });\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function getEditSubSampleComboService(inputParam, columnList, selectedRecord1,\r\n    childColumnList, comboComponents,\r\n    withoutCombocomponent, specBasedComponent) {\r\n    return function (dispatch) {\r\n\r\n        let { userInfo, operation, masterData } = { ...inputParam };\r\n\r\n        if (masterData[\"selectedSubSample\"].length > 1 ||\r\n            masterData[\"selectedSubSample\"]\r\n                .findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName])\r\n            === -1) {\r\n            inputParam.editSubSampleRegParam[\"getSubSampleChildDetail\"] = true;\r\n        }\r\n\r\n        masterData[\"selectedSubSample\"] = [];\r\n        masterData[\"selectedSubSample\"].push(inputParam[\"mastertoedit\"]);\r\n\r\n        inputParam.editSubSampleRegParam[\"npreregno\"] = inputParam[\"mastertoedit\"][\"npreregno\"];\r\n        inputParam.editSubSampleRegParam[\"checkBoxOperation\"] = 3;\r\n        inputParam.editSubSampleRegParam[\"nfilterstatus\"] = inputParam[\"mastertoedit\"][\"ntransactionstatus\"];\r\n        inputParam.editSubSampleRegParam[\"napprovalconfigcode\"] = inputParam[\"mastertoedit\"][\"napprovalconfigcode\"];\r\n        //inputParam.editSubSampleRegParam[\"withoutgetparameter\"] = 3;\r\n\r\n        const ntransactionsamplecode = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n        if (ntransactionsamplecode === undefined) {\r\n            toast.warn(intl.formattedMessage({ id: \"IDS_SELECTVALIDSUBSAMPLE\" }));\r\n        }\r\n        else {\r\n            let urlArray = [];\r\n\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            // const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            //     parentcolumnlist: columnList,\r\n            //     childcolumnlist: childColumnList,\r\n            //     userinfo: userInfo\r\n            // })\r\n            const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationSubSampleDetails\", {\r\n                ...inputParam.editSubSampleRegParam, ntransactionsamplecode, parentcolumnlist: columnList,\r\n                childcolumnlist: childColumnList,\r\n                userinfo: userInfo\r\n            })\r\n\r\n            const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n                datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n                userinfo:userInfo\r\n            })\r\n    \r\n\r\n            urlArray = [timeZoneService, selectedRegistration,dateService]\r\n            // if(specBasedComponent){\r\n            //     const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\r\n            //         ...Map,\r\n            //         specBasedComponent: specBasedComponent\r\n            //     })\r\n            //     urlArray.push(ComponentTestBySpec) \r\n            // }\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = { ...response[1].data[\"EditData\"] };\r\n\r\n                    selectedRecord = { ...selectedRecord, ...selectedRecord['jsondata'] }\r\n\r\n                    const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                    const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                    const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode }\r\n\r\n                    // if (selectedRecord.ntransactionstatus !== transactionStatus.PREREGISTER) {\r\n                    //     toast.warn(intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSUBSAMPLETOEDIT\" }));\r\n                    //     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                    // }\r\n\r\n                    //else {\r\n                    //               let lstComponent=[]\r\n                    if (specBasedComponent) {\r\n                        selectedRecord[\"ncomponentcode\"] = { label: selectedRecord[\"scomponentname\"], value: selectedRecord[\"ncomponentcode\"] }\r\n                    }\r\n                    const languagetypeCode = undefined\r\n                    const comboData = response[1].data;\r\n                    delete comboData['EditData']\r\n                    let comboValues = {}\r\n                    if (columnList.length > 0) {\r\n                        columnList.map(x => {\r\n                            if (x.inputtype === 'combo') {\r\n                                if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                                {\r\n                                    if (comboData[x.label].length > 0) {\r\n                                        if (comboData[x.label][0].label === undefined) {\r\n                                            const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                            comboData[x.label] = optionList.get(\"OptionList\");\r\n                                        } else {\r\n                                            comboData[x.label] = comboData[x.label]\r\n                                            const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                        }\r\n                                    } else {\r\n                                        comboData[x.label] = []\r\n                                    }\r\n                                    //comboValues = childComboLoad(x, comboData, selectedRecord, \r\n                                    //   childColumnList, withoutCombocomponent)\\\r\n                                    comboValues = childComboLoadForEdit(x, comboData, selectedRecord,\r\n                                        childColumnList, withoutCombocomponent)\r\n                                } else {\r\n                                    comboValues = {\r\n                                        \"comboData\": comboData,\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                comboValues = {\r\n                                    comboData: comboData,\r\n                                    ...comboValues\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        comboValues = {\r\n                            \"comboData\": comboData,\r\n                        }\r\n                    }\r\n                    // withoutCombocomponent.map(date => {\r\n                    //     if (date.inputtype === 'date')\r\n                    //         selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\r\n                    //             rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\";\r\n                    // })\r\n\r\n                    withoutCombocomponent.map(date => {\r\n                        if (date.inputtype === 'date') {\r\n                            selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\r\n                                rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\"\r\n                                \r\n                                if(date.nperiodcode){\r\n                                    selectedRecord[date.label + \"value\"] = response[2].data[date.label] ?\r\n                                    new Date(response[2].data[date.label][\"datevalue\"]) : null;\r\n                                }else{\r\n                                    selectedRecord[date.label+ \"value\"] = new Date();\r\n                                }\r\n\r\n                                if (date.hidebeforedate) {\r\n                                    selectedRecord[date.label + \"min\"] =selectedRecord[date.label + \"value\"]\r\n                                }\r\n                                if (date.hideafterdate) {\r\n                                    selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"]\r\n                                }\r\n                        }\r\n                    })\r\n\r\n                    selectedRecord = { ...selectedRecord }\r\n\r\n                    if (inputParam.editSubSampleRegParam[\"getSubSampleChildDetail\"] === true) {\r\n                        masterData = { ...masterData, ...response[1].data[\"SubSampleChildDetail\"] };\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            operation,\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            selectedRecord,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.editSubSampleRegParam.ncontrolCode,\r\n                            parentPopUpSize: \"lg\",\r\n                            loading: false,\r\n                            showSample: undefined,\r\n                            regSubSamplecomboData: comboValues.comboData,\r\n                            loadRegSubSample: true,\r\n                            screenName: \"IDS_SUBSAMPLE\",\r\n                            operation: \"update\",\r\n                            specBasedComponent,\r\n                            //  regRecordToEdit:recordToEdit\r\n                            masterData\r\n                        }\r\n                    })\r\n                    // }\r\n                })\r\n                .catch(error => {\r\n                    //console.log(\"error:\", error);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: error.response.data\r\n                        }));\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport function onUpdateSubSampleRegistration(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/updateRegistrationSubSample\", inputParam.inputData)\r\n            .then(response => {\r\n                sortData(response.data);\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                //replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                // replaceUpdatedObject(response.data[\"selectedTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\");\r\n                //  let RegistrationGetSubSample=response.data[\"RegistrationGetSubSample\"];\r\n                let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                masterData = {\r\n                    ...masterData,\r\n                    // selectedSample: response.data[\"selectedSample\"],\r\n                    selectedSubSample: response.data[\"selectedSubSample\"],\r\n                    selectedTest: response.data[\"selectedTest\"],\r\n                    RegistrationGetTest,\r\n                    // RegistrationGetSubSample,\r\n                    RegistrationParameter: response.data[\"RegistrationParameter\"]\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openModal: false, loading: false, showConfirmAlert: false,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                        loadRegSubSample: false, selectedRecord: {}, showSample: undefined, screenName: \"SubSample\",\r\n                    }\r\n                });\r\n                // let inputData = {\r\n                //     masterData,\r\n                //     selectedTest: masterData.selectedTest,\r\n                //     ntransactiontestcode: masterData.selectedTest ?\r\n                //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                //     npreregno: masterData.selectedSample ?\r\n                //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                //     userinfo: inputParam.inputData.userinfo,\r\n                //     activeTestTab : masterData.activeTestTab,\r\n                //     screenName: masterData.activeTestTab,\r\n                //     resultDataState: inputParam.resultDataState,\r\n                //     testCommentDataState: inputParam.testCommentDataState,\r\n                // }\r\n                // dispatch(getTestChildTabDetail(inputData, true))\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n                else if (error.response.status === 302) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, loadEsign: false,\r\n                            regEditParam: inputParam,\r\n                            showConfirmAlert: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            regDateEditConfirmMessage: error.response.data, showSample: undefined\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function cancelSubSampleAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/cancelSubSample\", inputParam.inputData)\r\n            .then(response => {\r\n                // replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    // selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                    selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                    selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                }\r\n\r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    loading: false,\r\n                    loadEsign: false,\r\n                    openModal: false,\r\n                    showSample: undefined\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function preregRecordToQuarantine(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/quarantineRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                // replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                // replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                delete response.data[\"RegistrationGetSample\"];\r\n                delete response.data[\"RegistrationGetSubSample\"];\r\n                delete response.data[\"RegistrationGetTest\"];\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                    selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                    selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    loading: false,\r\n                    loadEsign: false,\r\n                    openModal: false,\r\n                    showSample: undefined\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestChildTabDetailRegistration(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        if(inputData.ntransactiontestcode === \"\"){\r\n            inputData.ntransactiontestcode = \"0\";\r\n        }\r\n        if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\r\n            let inputParamData = {\r\n                ntransactiontestcode: inputData.ntransactiontestcode,\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            let { testtake } = inputData;\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_PARAMETERRESULTS\":\r\n                    url = \"registration/getregistrationparameter\"\r\n                    activeName = \"RegistrationParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    url = \"resultentrybysample/getResultUsedInstrument\"\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    url = \"resultentrybysample/getResultUsedMaterial\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    url = \"resultentrybysample/getResultUsedTask\"\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    url = \"attachment/getTestAttachment\"\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    url = \"comments/getTestComment\"\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    url = \"approval/getApprovalResultChangeHistory\"\r\n                    activeName = \"ApprovalResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_TESTAPPROVALHISTORY\":\r\n                    url = \"approval/getApprovalHistory\"\r\n                    activeName = \"ApprovalHistory\"\r\n                    dataStateName = \"historyDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                default:\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                if (isServiceRequired) {\r\n                    rsapi.post(url, inputParamData)\r\n                        .then(response => {\r\n                            let skipInfo = {};\r\n                            let responseData = { ...response.data, selectedSample: inputData.selectedSample || inputData.masterData.selectedSample, selectedTest: inputData.selectedTest }\r\n                            //responseData = sortData(responseData)\r\n                            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\r\n                            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n                            let masterData = {\r\n                                ...inputData.masterData,\r\n                                selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\r\n                                selectedTest: inputData.selectedTest,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode,\r\n                                selectedTestCode: inputData.ntransactiontestcode,\r\n                                activeTabIndex: inputData.activeTabIndex,\r\n                                activeTabId: inputData.activeTabId\r\n                            }\r\n                            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                                skipInfo = {\r\n\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        skip: 0,\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                skipInfo = {\r\n                                    ...skipInfo,\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            }\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN, payload: {\r\n                                    masterData,\r\n                                    activeTabIndex: inputData.activeTabIndex,\r\n                                    activeTabId: inputData.activeTabId,\r\n                                    loading: false,\r\n                                    showFilter: false,\r\n                                    activeTestTab: inputData.activeTestTab,\r\n                                    screenName: inputData.screenName,\r\n                                    testtake, testskip: undefined,\r\n                                    ...skipInfo\r\n                                }\r\n                            })\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                            if (error.response.status === 500) {\r\n                                toast.error(error.message);\r\n                            }\r\n                            else {\r\n                                toast.warn(error.response.data);\r\n                            }\r\n                        })\r\n                } else {\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n                    let skipInfo = {};\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedTest: inputData.selectedTest,\r\n                        selectedPreregno: inputData.npreregno,\r\n                        selectedSampleCode: inputData.ntransactionsamplecode,\r\n                        selectedTestCode: inputData.ntransactiontestcode,\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.screenName,\r\n                            testtake, testskip: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                }\r\n\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            let { ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment, ApprovalResultChangeHistory,\r\n                RegistrationTestComment, ApprovalHistory } = inputData.masterData\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    ApprovalParameter = [];\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    ResultUsedInstrument = []\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    ResultUsedTasks = []\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    RegistrationTestAttachment = []\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    ApprovalResultChangeHistory = []\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    RegistrationTestComment = []\r\n                    break;\r\n                case \"IDS_APPROVALHISTORY\":\r\n                    ApprovalHistory = []\r\n                    break;\r\n                default:\r\n                    ApprovalParameter = []\r\n                    break;\r\n            }\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData: {\r\n                        ...inputData.masterData,\r\n                        selectedTest: [],\r\n                        ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory, RegistrationTestComment, ApprovalHistory\r\n                    }, loading: false,   \r\n                    activeTabIndex: inputData.activeTabIndex,\r\n                    activeTabId: inputData.activeTabId,\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nconst toTimestamp = (strDate) => {\r\n    // const dt = new Date(strDate).getTime();\r\n    // return dt / 1000;\r\n    const dt = strDate.getTime();\r\n    return dt;\r\n}\r\n\r\nexport function getDynamicFilter(inputParam) {\r\n    if (inputParam.component.inputtype === 'frontendsearchfilter') {\r\n        return function (dispatch) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/dynamicpreregdesign/getcustomsearchfilter\", { ...inputParam.component, userinfo: inputParam.userinfo })\r\n                .then(response => {\r\n                    const source = inputParam.component.source\r\n                    const languageTypeCode = inputParam.userinfo.slanguagetypecode\r\n                    const lstData = response.data[inputParam.component.label]\r\n\r\n\r\n                    // const responseparam={}\r\n                    const gridColumns = []\r\n                    const fields = []\r\n                    const datefileds = []\r\n                    const multilingual = []\r\n                    inputParam.component.filterfields.map(item => {\r\n                        fields.push(filterObject(item, languageTypeCode, response.data));\r\n                        if (item.ismultilingual) {\r\n                            multilingual.push(item.columnname)\r\n                        }\r\n                        if (item.filterinputtype === \"date\") {\r\n                            datefileds.push(item.columnname)\r\n                        }\r\n                        if (item.filterinputtype !== 'predefinednumeric') {\r\n                            gridColumns.push(creategridColumns(item, languageTypeCode,));\r\n                        }\r\n                    })\r\n\r\n                    const optionList = lstData.map(item => {\r\n                        const jsondata = item[source] ? item[source].value ?\r\n                            JSON.parse(item[source].value) : item.jsondata : item.jsondata\r\n\r\n                        datefileds.map(x => {\r\n                            jsondata[x + \"timestamp\"] = toTimestamp(rearrangeDateFormatforKendoDataTool(inputParam.userinfo, jsondata[x]))\r\n                        })\r\n                        multilingual.map(mul => {\r\n                            jsondata[mul] =\r\n                                jsondata[mul][languageTypeCode] || jsondata[mul]['en-US']\r\n                                ;\r\n                        })\r\n\r\n\r\n                        return jsondata\r\n                    });\r\n\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            lstPatient: optionList, gridColumns, fields,\r\n                            loadCustomSearchFilter: true\r\n                            , loading: false,\r\n                            screenName: inputParam.component.displayname[languageTypeCode],\r\n                            seletedFilterComponent: inputParam.component,\r\n                            kendoSkip: 0,\r\n                            kendoTake: 5,\r\n                            kendoFilter: {\r\n                                logic: \"and\",\r\n                                filters: []\r\n                            },\r\n                            awesomeTree: undefined,\r\n                            awesomeConfig: undefined,\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data.rtn);\r\n                    }\r\n\r\n                })\r\n        }\r\n    } else if (inputParam.component.inputtype === \"backendsearchfilter\") {\r\n        return function (dispatch) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/dynamicpreregdesign/getcustomsearchfilterpredefined\", { ...inputParam.component, userinfo: inputParam.userinfo })\r\n                .then(response => {\r\n                    const languageTypeCode = inputParam.userinfo.slanguagetypecode\r\n                    const { fields, gridColumns } = filterObjectForReactAwesomeFilter(inputParam.component.filterfields, languageTypeCode, response.data)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            lstPatient: [], gridColumns, fields,\r\n                            loadCustomSearchFilter: true\r\n                            , loading: false,\r\n                            screenName: inputParam.component.displayname[languageTypeCode],\r\n                            seletedFilterComponent: inputParam.component,\r\n                            kendoSkip: 0,\r\n                            kendoTake: 5,\r\n                            kendoFilter: {\r\n                                logic: \"and\",\r\n                                filters: []\r\n                            },\r\n                            awesomeTree: undefined,\r\n                            onExecute:true,\r\n                            awesomeConfig: undefined,\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data.rtn);\r\n                    }\r\n\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nlet datapredef = {}\r\nconst CustomFilter = props => {\r\n    const { filter, data = [], defaultItem } = props;\r\n    const onChange = event => {\r\n        props.onFilterChange.call(undefined, {\r\n            nextFilter: { ...props.filter, value: event.target.value.value }\r\n        });\r\n    };\r\n\r\n    return <ComboBox onChange={onChange} data={filter.field ? datapredef[filter.field] : []} textField=\"text\" />;\r\n};\r\n\r\nexport function creategridColumns(item, languageTypeCode) {\r\n    let obj = {}\r\n    if (item.filterinputtype !== 'predefinednumeric') {\r\n        return {\r\n            field: item.columnname,\r\n            title: item.displayname[languageTypeCode], width: \"200px\"\r\n        }\r\n    }\r\n}\r\n\r\nexport function filterObjectForReactAwesomeFilter(filterFields, languageTypeCode, resposedata) {\r\n    let obj = {}\r\n    obj['fields'] = {}\r\n    obj['gridColumns'] = []\r\n    filterFields.map(item => {\r\n        if (item.filterinputtype === 'predefinednumeric' || item.filterinputtype === 'predefinedtext') {\r\n            const optionList = resposedata[item.predefinedtablename].map(data => {\r\n                const jsondata = data[item.predefinedtablename] ? data[item.predefinedtablename].value ?\r\n                    JSON.parse(data[item.predefinedtablename].value) : data.jsondata : data.jsondata\r\n\r\n                jsondata['title'] = item.predefinedismultilingual ?\r\n                    jsondata[item.predefineddisplaymember]\r\n                    [languageTypeCode] || jsondata[item.predefineddisplaymember]['en-US']\r\n                    : jsondata[item.predefineddisplaymember];\r\n                jsondata['value'] = jsondata[item.predefinedvaluemember]\r\n                return jsondata\r\n            });\r\n            datapredef[item.columnname] = optionList\r\n        }\r\n        switch (item.filterinputtype) {\r\n            case \"text\":\r\n                obj['fields'][item.type === 'dynamic' ? item.ismultilingual ?\r\n                    \"jsondata->'\" + item.columnname + \"'->>'\" + languageTypeCode + \"'\" :\r\n                    \"jsondata->>'\" + item.columnname + \"'\" :\r\n                   \"\\\"\"+ item.columnname+\"\\\"\"] = {\r\n                    label: item.displayname[languageTypeCode],\r\n                    type: \"text\",\r\n                    valueSources: [\"value\", \"func\"],\r\n                    mainWidgetProps: {\r\n                        \"valueLabel\": \"Name\",\r\n                        \"valuePlaceholder\": \"Enter\" + item.displayname[languageTypeCode]\r\n                    }\r\n                }\r\n                break;\r\n            case \"numeric\":\r\n                obj['fields'][item.type === 'dynamic' ?\r\n                    \"(jsondata->>'\" + item.columnname + \"')::int\" :\r\n                    \"\\\"\"+ item.columnname+\"\\\"\"] = {\r\n                    label: item.displayname[languageTypeCode],\r\n                    type: \"number\",\r\n                    valueSources: [\"value\"],\r\n                    fieldSettings: {\r\n                        ...item.numericcondition\r\n                    }\r\n                }\r\n                break;\r\n            case \"date\":\r\n                obj['fields'][item.type === 'dynamic' ?\r\n                    \"jsondata->>'\" + item.columnname + \"'\" :\r\n                    \"\\\"\"+ item.columnname+\"\\\"\"] = {\r\n                    label: item.displayname[languageTypeCode],\r\n                    type: \"date\",\r\n                    valueSources: [\"value\"],\r\n                }\r\n                break;\r\n            case \"predefinednumeric\":\r\n                obj['fields'][item.type === 'dynamic' ?\r\n                    \"(jsondata->>'\" + item.columnname + \"')::int\" :\r\n                    \"\\\"\"+ item.columnname+\"\\\"\"] = {\r\n                    label: item.displayname[languageTypeCode],\r\n                    type: \"select\",\r\n                    valueSources: [\"value\"],\r\n                    fieldSettings: {\r\n                        listValues: datapredef[item.columnname]\r\n                    }\r\n\r\n                }\r\n                break;\r\n            case \"predefinedtext\":\r\n                obj['fields'][item.type === 'dynamic' ? item.ismultilingual ?\r\n                    \"jsondata->'\" + item.columnname + \"'->>'\" + languageTypeCode + \"'\" :\r\n                    \"jsondata->>'\" + item.columnname + \"'\" :\r\n                    \"\\\"\"+ item.columnname+\"\\\"\"] = {\r\n                    label: item.displayname[languageTypeCode],\r\n                    type: \"select\",\r\n                    valueSources: [\"value\"],\r\n                    fieldSettings: {\r\n                        listValues: datapredef[item.columnname]\r\n                    }\r\n\r\n                }\r\n                break;\r\n        }\r\n        const gridColumns = creategridColumns(item, languageTypeCode)\r\n        if (item.filterinputtype !== 'predefinednumeric') {\r\n            obj['gridColumns'].push(gridColumns)\r\n        }\r\n\r\n\r\n    })\r\n    return obj;\r\n}\r\n\r\nexport function filterObject(item, languageTypeCode, resposedata) {\r\n    let obj = {}\r\n    let preobj = {}\r\n    if (item.filterinputtype === 'predefinednumeric' || item.filterinputtype === 'predefinedtext') {\r\n        const optionList = resposedata[item.predefinedtablename].map(data => {\r\n            const jsondata = data[item.predefinedtablename] ? data[item.predefinedtablename].value ?\r\n                JSON.parse(data[item.predefinedtablename].value) : data.jsondata : data.jsondata\r\n\r\n            jsondata['text'] = item.predefinedismultilingual ?\r\n                jsondata[item.predefineddisplaymember]\r\n                [languageTypeCode] || jsondata[item.predefineddisplaymember]['en-US']\r\n                : jsondata[item.predefineddisplaymember];\r\n            jsondata['value'] = jsondata[item.predefinedvaluemember]\r\n            //delete jsondata.jsondata\r\n            return jsondata\r\n        });\r\n        datapredef[item.columnname] = optionList\r\n        // preobj = {\r\n        //     predefdata: optionList, predefineddisplaymember: item.predefineddisplaymember,\r\n        //     predefinedvaluemember: item.columnname\r\n        // }\r\n    }\r\n    switch (item.filterinputtype) {\r\n        case \"text\":\r\n            return obj = {\r\n                name: item.columnname,\r\n                label: item.displayname[languageTypeCode],\r\n                filter: TextFilter,\r\n                operators: Operators.text,\r\n            }\r\n        case \"numeric\":\r\n            return obj = {\r\n                name: item.columnname,\r\n                label: item.displayname[languageTypeCode],\r\n                filter: NumericFilter,\r\n                operators: Operators.numeric,\r\n            }\r\n        case \"date\":\r\n            return obj = {\r\n                name: item.columnname + \"timestamp\",\r\n                label: item.displayname[languageTypeCode],\r\n                filter: DateFilter,\r\n                operators: Operators.date,\r\n            }\r\n        case \"predefinednumeric\":\r\n\r\n\r\n            return obj = {\r\n                name: item.columnname,\r\n                label: item.displayname[languageTypeCode],\r\n                filter: CustomFilter,\r\n                operators: Operators.numeric,\r\n            }\r\n        case \"predefinedtext\":\r\n            return obj = {\r\n                name: item.columnname,\r\n                label: item.displayname[languageTypeCode],\r\n                filter: CustomFilter,\r\n                operators: Operators.text,\r\n            }\r\n        default:\r\n            return obj = {\r\n                name: item.columnname,\r\n                label: item.displayname[languageTypeCode],\r\n                filter: TextFilter,\r\n                operators: Operators.text,\r\n            }\r\n\r\n    }\r\n\r\n    //return obj;\r\n}\r\n\r\nexport function getDynamicFilterExecuteData(inputParam) {\r\n    return function (dispatch) {\r\n        let obj = { ...inputParam.component, filterquery: inputParam.filterquery, userinfo: inputParam.userinfo }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/dynamicpreregdesign/getdynamicfilterexecutedata\", obj)\r\n            .then(response => {\r\n                const source = inputParam.component.source\r\n                const languageTypeCode = inputParam.userinfo.slanguagetypecode\r\n                const lstData = response.data[inputParam.component.label]\r\n                const multilingual = []\r\n                inputParam.component.filterfields.map(item => {\r\n                    if (item.ismultilingual) {\r\n                        multilingual.push(item.columnname)\r\n                    }\r\n                })\r\n                const optionList = lstData.map(item => {\r\n                    const jsondata = item[source] ? item[source].value ?\r\n                        JSON.parse(item[source].value) : item.jsondata : item.jsondata\r\n\r\n                    multilingual.map(mul => {\r\n                        jsondata[mul] =\r\n                            jsondata[mul][languageTypeCode] || jsondata[mul]['en-US'];\r\n                    })\r\n                    // let label = isMultiLingual ?\r\n                    //   jsondata[optionValue]\r\n                    //   [languageTypeCode] || jsondata[optionValue]['en-US']\r\n                    //   : jsondata[optionValue];\r\n\r\n                    return jsondata\r\n                });\r\n                if (inputParam.userinfo.nformcode === 161) { \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        lstPatient: optionList,\r\n                        onExecute: false,\r\n                        loading: false,\r\n                        screenName: inputParam.component.displayname[languageTypeCode]\r\n                    }\r\n                })\r\n            }\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            lstPatient: optionList,\r\n                           // onExecute: false,\r\n                            loading: false,\r\n                            screenName: inputParam.component.displayname[languageTypeCode]\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function rearrangeDateFormatforKendoDataTool(userInfo, dateValue) {\r\n    let splitChar = \"/\";\r\n\r\n    if (dateValue !== undefined) {\r\n        const index = userInfo.ssitedatetime && userInfo.ssitedatetime.indexOf(\"/\" || \"-\")\r\n        if (index !== -1)\r\n            splitChar = userInfo.ssitedatetime.substring(index, index + 1)\r\n\r\n    }\r\n    //   console.log(\"splitChar:\", splitChar);\r\n    if ((splitChar === \"/\" || splitChar === \"-\") && typeof dateValue === \"string\") {\r\n        const firstField = userInfo.ssitedatetime && userInfo.ssitedatetime.split(splitChar)[0];\r\n        // console.log(\"firstField:\", firstField);\r\n        const timeSplitChar = dateValue.indexOf(\"T\") !== -1 ? \"T\" : \" \"\r\n        const datetime = dateValue.split(timeSplitChar);\r\n        const dateArray = datetime[0].split(splitChar);\r\n        if (firstField === \"dd\") {\r\n            const day = dateArray[0];\r\n            const month = dateArray[1];\r\n            const year = dateArray[2];\r\n            const time = datetime[1] || \"00:00:00\";\r\n\r\n            const formatted = year + \"-\" + month + \"-\" + day + \"T\" + time;\r\n            return new Date(formatted);\r\n        }\r\n        else if (firstField === \"yyyy\") {\r\n            const year = dateArray[0];\r\n            const month = dateArray[1];\r\n            const day = dateArray[2];\r\n            const time = datetime[1] || \"00:00:00\";\r\n            const formatted = year + \"-\" + month + \"-\" + day + \"T\" + time;\r\n            return new Date(formatted);\r\n        }\r\n        else {\r\n            return new Date(dateValue);\r\n        }\r\n    }\r\n    else {\r\n        return dateValue;\r\n    }\r\n}\r\n\r\nexport function preRegDispatch(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        dispatch({\r\n            type: DEFAULT_RETURN,\r\n            payload: {\r\n                ...inputParam\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function validateEsignforRegistration(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = \"registration\";\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n                    dispatch(dispatchMethods(inputParam[\"screenData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nfunction dispatchMethods(screenData) {\r\n    return (dispatch) => {\r\n        let action = screenData.inputParam.action\r\n        switch (action) {\r\n            case \"preregister\":\r\n                dispatch(insertRegistration(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"editSample\":\r\n                dispatch(updateRegistration(screenData.inputParam, screenData.masterData, 'openModal'));\r\n                break;\r\n            case \"accept\":\r\n                dispatch(acceptRegistration(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"quarantine\":\r\n                dispatch(preregRecordToQuarantine(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"cancelTest\":\r\n                dispatch(cancelTestAction(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"cancelSample\":\r\n                dispatch(cancelSampleAction(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"addregsourcecountry\":\r\n                dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"))\r\n                break;\r\n            case \"deleteregsourcecountry\":\r\n                dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"))\r\n                break;\r\n            case \"printer\":\r\n                dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"))\r\n                break;\r\n            case \"editSubSample\":\r\n                dispatch(onUpdateSubSampleRegistration(screenData.inputParam, screenData.masterData));\r\n            case \"cancelSubSample\":\r\n                dispatch(cancelSubSampleAction(screenData.inputParam, screenData.masterData));\r\n                    \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}