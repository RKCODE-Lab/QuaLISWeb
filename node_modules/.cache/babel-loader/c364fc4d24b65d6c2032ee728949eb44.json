{"ast":null,"code":"'use strict';\n\nvar _ = require('underscore');\n\nmodule.exports = function (dialect) {\n  dialect.operators.fetching.add('$field', {\n    fn: function fn(value) {\n      return dialect.buildBlock('term', {\n        term: value,\n        type: 'field'\n      });\n    }\n  });\n  dialect.operators.fetching.add('$value', {\n    fn: function fn(value) {\n      return dialect.buildBlock('term', {\n        term: value,\n        type: 'value'\n      });\n    }\n  });\n  dialect.operators.fetching.add('$func', {\n    fn: function fn(value) {\n      return dialect.buildBlock('term', {\n        term: value,\n        type: 'func'\n      });\n    }\n  });\n  dialect.operators.fetching.add('$expression', {\n    fn: function fn(value) {\n      return dialect.buildBlock('term', {\n        term: value,\n        type: 'expression'\n      });\n    }\n  });\n  dialect.operators.fetching.add('$select', {\n    fn: function fn(value) {\n      return dialect.buildTemplate('subQuery', {\n        queryBody: value\n      });\n    }\n  });\n  dialect.operators.fetching.add('$query', {\n    fn: function fn(value) {\n      return dialect.buildTemplate('subQuery', {\n        queryBody: value\n      });\n    }\n  });\n  dialect.operators.fetching.add('$boolean', {\n    fn: function fn(value) {\n      return Boolean(value);\n    }\n  });\n  dialect.operators.fetching.add('$inValues', {\n    fn: function fn(value) {\n      if (!_.isObject(value)) {\n        throw new Error('Invalid `$in/$nin` value type \"' + typeof value + '\"');\n      }\n\n      if (_.isArray(value)) {\n        if (!value.length) value = [null];\n        return '(' + _(value).map(function (item) {\n          return dialect.builder._pushValue(item);\n        }).join(', ') + ')';\n      } else {\n        return dialect.buildTemplate('subQuery', {\n          queryBody: value\n        });\n      }\n    }\n  });\n  dialect.operators.fetching.add('$betweenValues', {\n    fn: function fn(value) {\n      if (!_.isArray(value)) {\n        throw new Error('Invalid `$between` value type \"' + typeof value + '\"');\n      }\n\n      if (value.length < 2) {\n        throw new Error('`$between` array length should be 2 or greater');\n      }\n\n      return dialect.builder._pushValue(value[0]) + ' and ' + dialect.builder._pushValue(value[1]);\n    }\n  });\n};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/node_modules/json-sql/lib/dialects/base/operators/fetching.js"],"names":["_","require","module","exports","dialect","operators","fetching","add","fn","value","buildBlock","term","type","buildTemplate","queryBody","Boolean","isObject","Error","isArray","length","map","item","builder","_pushValue","join"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('underscore');\n\nmodule.exports = function(dialect) {\n\tdialect.operators.fetching.add('$field', {\n\t\tfn: function(value) {\n\t\t\treturn dialect.buildBlock('term', {term: value, type: 'field'});\n\t\t}\n\t});\n\n\tdialect.operators.fetching.add('$value', {\n\t\tfn: function(value) {\n\t\t\treturn dialect.buildBlock('term', {term: value, type: 'value'});\n\t\t}\n\t});\n\n\tdialect.operators.fetching.add('$func', {\n\t\tfn: function(value) {\n\t\t\treturn dialect.buildBlock('term', {term: value, type: 'func'});\n\t\t}\n\t});\n\n\tdialect.operators.fetching.add('$expression', {\n\t\tfn: function(value) {\n\t\t\treturn dialect.buildBlock('term', {term: value, type: 'expression'});\n\t\t}\n\t});\n\n\tdialect.operators.fetching.add('$select', {\n\t\tfn: function(value) {\n\t\t\treturn dialect.buildTemplate('subQuery', {queryBody: value});\n\t\t}\n\t});\n\n\tdialect.operators.fetching.add('$query', {\n\t\tfn: function(value) {\n\t\t\treturn dialect.buildTemplate('subQuery', {queryBody: value});\n\t\t}\n\t});\n\n\tdialect.operators.fetching.add('$boolean', {\n\t\tfn: function(value) {\n\t\t\treturn Boolean(value);\n\t\t}\n\t});\n\n\tdialect.operators.fetching.add('$inValues', {\n\t\tfn: function(value) {\n\t\t\tif (!_.isObject(value)) {\n\t\t\t\tthrow new Error('Invalid `$in/$nin` value type \"' + (typeof value) + '\"');\n\t\t\t}\n\n\t\t\tif (_.isArray(value)) {\n\t\t\t\tif (!value.length) value = [null];\n\n\t\t\t\treturn '(' + _(value).map(function(item) {\n\t\t\t\t\treturn dialect.builder._pushValue(item);\n\t\t\t\t}).join(', ') + ')';\n\t\t\t} else {\n\t\t\t\treturn dialect.buildTemplate('subQuery', {queryBody: value});\n\t\t\t}\n\t\t}\n\t});\n\n\tdialect.operators.fetching.add('$betweenValues', {\n\t\tfn: function(value) {\n\t\t\tif (!_.isArray(value)) {\n\t\t\t\tthrow new Error('Invalid `$between` value type \"' + (typeof value) + '\"');\n\t\t\t}\n\n\t\t\tif (value.length < 2) {\n\t\t\t\tthrow new Error('`$between` array length should be 2 or greater');\n\t\t\t}\n\n\t\t\treturn dialect.builder._pushValue(value[0]) + ' and ' + dialect.builder._pushValue(value[1]);\n\t\t}\n\t});\n};\n"]},"metadata":{},"sourceType":"script"}