{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript'; //, getComboLabelValue, searchData\n\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { transactionStatus } from '../components/Enumeration';\nexport function getTrainingCertificateDetail(trainingcertificate, fromDate, toDate, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"trainingcertificate/getTrainingCertificate\", {\n      ntrainingcode: trainingcertificate.ntrainingcode,\n      fromDate,\n      toDate,\n      \"userinfo\": userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport function getTrainingCertificateComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    if (operation === \"create\" || operation === \"update\") {\n      const trainingcategoryService = rsapi.post(\"traningcategory/getTrainingCategory\", {\n        userinfo: userInfo\n      });\n      const techniqueService = rsapi.post(\"technique/getTechnique\", {\n        userinfo: userInfo\n      });\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo: userInfo\n      });\n      let urlArray = [techniqueService, trainingcategoryService, timeZoneService, UTCtimeZoneService];\n\n      if (operation === \"update\") {\n        const trainingcertificateServiceById = rsapi.post(\"trainingcertificate/getActiveTrainingCertificateById\", {\n          [primaryKeyName]: primaryKeyValue,\n          \"userinfo\": userInfo\n        }); //this.props.Login.userInfo\n\n        urlArray.push(trainingcertificateServiceById);\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let trainingcategory = [];\n        let technique = [];\n        let tztrainingdate = [];\n        let selectedRecord = {\n          \"ntztrainingdate\": {\n            \"value\": userInfo.ntimezonecode,\n            \"label\": userInfo.stimezoneid\n          },\n          \"stztrainingdate\": userInfo.stimezoneid\n        };\n        const techniqueMap = constructOptionList(response[0].data[\"Technique\"] || [], \"ntechniquecode\", \"stechniquename\", undefined, undefined, true);\n        const trainingcategoryMap = constructOptionList(response[1].data || [], \"ntrainingcategorycode\", \"strainingcategoryname\", undefined, undefined, true);\n        const timeZoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n        const trainingcategoryList = trainingcategoryMap.get(\"OptionList\");\n        const techniqueList = techniqueMap.get(\"OptionList\");\n        const timeZoneList = timeZoneMap.get(\"OptionList\");\n        const currentTime = rearrangeDateFormat(userInfo, response[3].data);\n\n        if (operation === \"update\") {\n          // selectedRecord[\"strainername\"] = response[4].data.strainername;\n          // selectedRecord[\"strainingtopic\"] = response[4].data.strainingtopic;\n          // selectedRecord[\"strainingvenue\"] = response[4].data.strainingvenue;\n          // selectedRecord[\"strainingdatetime\"] = response[4].data.strainingdatetime;\n          // selectedRecord[\"scomments\"] = response[4].data.scomments;\n          selectedRecord = response[4].data;\n          selectedRecord[\"dtrainingdatetime\"] = rearrangeDateFormat(userInfo, response[4].data.strainingdatetime);\n          tztrainingdate.push({\n            \"value\": userInfo.ntimezonecode,\n            \"label\": userInfo.stimezoneid\n          });\n          selectedRecord[\"stztrainingdate\"] = userInfo.stimezoneid; // selectedRecord[\"ntztrainingdate\"]= userInfo.ntimezonecode\n\n          technique.push({\n            \"value\": response[0].data[0].ntechniquecode,\n            \"label\": response[0].data[0].stechniquename\n          });\n          trainingcategory.push({\n            \"value\": response[1].data[0].ntrainingcategorycode,\n            \"label\": response[1].data[0].strainingcategoryname\n          });\n          selectedRecord[\"ntrainingcategorycode\"] = trainingcategory[0];\n          selectedRecord[\"ntechniquecode\"] = technique[0];\n          selectedRecord[\"ntztrainingdate\"] = tztrainingdate[0];\n        } else {\n          selectedRecord[\"ntransactionstatus\"] = transactionStatus.ACTIVE;\n          selectedRecord[\"ntrainingcategorycode\"] = trainingcategoryMap.get(\"DefaultValue\");\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            currentTime,\n            trainingcategoryList,\n            techniqueList,\n            timeZoneList,\n            operation,\n            screenName,\n            selectedRecord,\n            openModal: true,\n            ncontrolCode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    }\n  };\n}\nexport function getTrainingParticipantsComboDataService(trainingparam, masterData) {\n  return function (dispatch) {\n    if (masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.CANCELLED) {\n      const section = rsapi.post(\"section/getSection\", {\n        \"userinfo\": trainingparam.userInfo\n      });\n      let urlArray = [];\n      let selectedId = null;\n      urlArray = [section];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(Axios.spread((...response) => {\n        let selectedRecord = {};\n        let nsectioncode = [];\n        let nsitecode = [];\n        let sectionusersList = [];\n        const SectionMap = constructOptionList(response[0].data || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n        const sectionList = SectionMap.get(\"OptionList\");\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            section: sectionList,\n            sectionUsers: trainingparam.operation === \"update\" ? sectionusersList : [],\n            nsectioncode: nsectioncode,\n            nsitecode: nsitecode,\n            selectedRecord: trainingparam.operation === \"update\" ? selectedRecord : undefined,\n            operation: trainingparam.operation,\n            screenName: \"IDS_PARTICIPANTSDETAILS\",\n            openChildModal: true,\n            ncontrolCode: trainingparam.ncontrolCode,\n            loading: false,\n            selectedId\n          }\n        });\n      })).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_TRAININGCANCELED\"\n      }));\n    }\n  };\n}\nexport function reloadTrainingCertificate(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"trainingcertificate/getTrainingCertificate\", { ...inputParam.inputData\n    }).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\n        inputParam.searchRef.current.value = \"\";\n        masterData['searchedData'] = undefined;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSectionUsersDataService(nSectionCode, selectedRecord, userInfo, SelectedTrainingCertificate) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"trainingcertificate/getSectionUsers\", {\n      \"userinfo\": userInfo,\n      \"nsectioncode\": parseInt(nSectionCode),\n      \"ntrainingcode\": parseInt(SelectedTrainingCertificate)\n    }).then(response => {\n      let nusercode = []; // const sectionusersMap = constructOptionList(response.data.SectionUsers || [], \"nusercode\",\n      //     \"sfullname\", undefined, undefined, true);\n\n      const sectionusersList = response.data.SectionUsers;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          sectionUsers: sectionusersList,\n          nusercode: nusercode,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getTrainingParticipantsInvite(trainingparam, selectedRecord, masterData, operation) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"trainingcertificate/getInviteParticipants\", {\n      \"userinfo\": trainingparam.userInfo,\n      \"ntrainingcode\": parseInt(masterData.SelectedTrainingCertificate.ntrainingcode)\n    }).then(response => {\n      let nusercode = []; // const inviteUsersMap = constructOptionList(response.data.InvitedParticipants || [], \"nusercode\",\n      //     \"sfullname\", undefined, undefined, true);\n      // const inviteUsersList = inviteUsersMap.get(\"OptionList\");\n\n      const inviteUsersList = response.data.InvitedParticipants;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          usersStatus: inviteUsersList,\n          nusercode: nusercode,\n          loading: false,\n          openChildModal: true,\n          screenName: \"IDS_INVITEDPARTICIPANTSDETAILS\",\n          nFlag: 2,\n          selectedRecord: selectedRecord,\n          operation: operation\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTrainingParticipantsCancel(trainingparam, selectedRecord, masterData, operation) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"trainingcertificate/getCancelParticipants\", {\n      \"userinfo\": trainingparam.userInfo,\n      \"ntrainingcode\": parseInt(masterData.SelectedTrainingCertificate.ntrainingcode)\n    }).then(response => {\n      let nusercode = []; // const cancelUsersMap = constructOptionList(response.data.CancelParticipants || [], \"nusercode\",\n      //     \"sfullname\", undefined, undefined, true);\n\n      const cancelUsersList = response.data.CancelParticipants;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          usersStatus: cancelUsersList,\n          nusercode: nusercode,\n          loading: false,\n          openChildModal: true,\n          screenName: \"IDS_CANCELPARTICIPANTSDETAILS\",\n          nFlag: 3,\n          selectedRecord: selectedRecord,\n          operation: operation\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/TrainingCertificateAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","constructOptionList","rearrangeDateFormat","toast","Axios","initRequest","intl","transactionStatus","getTrainingCertificateDetail","trainingcertificate","fromDate","toDate","userInfo","masterData","dispatch","post","ntrainingcode","then","response","data","type","payload","loading","catch","error","status","formatMessage","id","message","warn","getTrainingCertificateComboService","screenName","operation","primaryKeyName","primaryKeyValue","ncontrolCode","trainingcategoryService","userinfo","techniqueService","timeZoneService","UTCtimeZoneService","urlArray","trainingcertificateServiceById","push","all","trainingcategory","technique","tztrainingdate","selectedRecord","ntimezonecode","stimezoneid","techniqueMap","undefined","trainingcategoryMap","timeZoneMap","trainingcategoryList","get","techniqueList","timeZoneList","currentTime","strainingdatetime","ntechniquecode","stechniquename","ntrainingcategorycode","strainingcategoryname","ACTIVE","openModal","getTrainingParticipantsComboDataService","trainingparam","SelectedTrainingCertificate","ntransactionstatus","CANCELLED","section","selectedId","spread","nsectioncode","nsitecode","sectionusersList","SectionMap","sectionList","sectionUsers","openChildModal","reloadTrainingCertificate","inputParam","inputData","responseData","searchRef","current","value","showFilter","getSectionUsersDataService","nSectionCode","parseInt","nusercode","SectionUsers","getTrainingParticipantsInvite","inviteUsersList","InvitedParticipants","usersStatus","nFlag","getTrainingParticipantsCancel","cancelUsersList","CancelParticipants"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript'//, getComboLabelValue, searchData\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { transactionStatus } from '../components/Enumeration';\r\n\r\nexport function getTrainingCertificateDetail(trainingcertificate, fromDate, toDate, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        return rsapi.post(\"trainingcertificate/getTrainingCertificate\", {\r\n            ntrainingcode: trainingcertificate.ntrainingcode, fromDate, toDate,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n\r\n                    toast.warn(intl.formatMessage({ id: error.response }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTrainingCertificateComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if (operation === \"create\" || (operation === \"update\")) {\r\n\r\n            const trainingcategoryService = rsapi.post(\"traningcategory/getTrainingCategory\", { userinfo: userInfo });\r\n\r\n            const techniqueService = rsapi.post(\"technique/getTechnique\", { userinfo: userInfo });\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: userInfo });\r\n\r\n            let urlArray = [techniqueService, trainingcategoryService, timeZoneService, UTCtimeZoneService];\r\n\r\n\r\n            if (operation === \"update\") {\r\n\r\n                const trainingcertificateServiceById = rsapi.post(\"trainingcertificate/getActiveTrainingCertificateById\", { [primaryKeyName]: primaryKeyValue, \"userinfo\": userInfo });//this.props.Login.userInfo\r\n                urlArray.push(trainingcertificateServiceById)\r\n            }\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n\r\n\r\n                    let trainingcategory = [];\r\n                    let technique = [];\r\n                    let tztrainingdate = [];\r\n\r\n                    let selectedRecord = {\r\n\r\n                        \"ntztrainingdate\": {\r\n                            \"value\": userInfo.ntimezonecode,\r\n                            \"label\": userInfo.stimezoneid\r\n                        },\r\n                        \"stztrainingdate\": userInfo.stimezoneid\r\n                    };\r\n\r\n                    const techniqueMap = constructOptionList(response[0].data[\"Technique\"] || [], \"ntechniquecode\",\r\n                        \"stechniquename\", undefined, undefined, true);\r\n                    const trainingcategoryMap = constructOptionList(response[1].data || [], \"ntrainingcategorycode\",\r\n                        \"strainingcategoryname\", undefined, undefined, true);\r\n                    const timeZoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, true);\r\n\r\n                    const trainingcategoryList = trainingcategoryMap.get(\"OptionList\");\r\n                    const techniqueList = techniqueMap.get(\"OptionList\");\r\n                    const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                    const currentTime = rearrangeDateFormat(userInfo, response[3].data);\r\n\r\n\r\n                    if (operation === \"update\") {\r\n\r\n                        // selectedRecord[\"strainername\"] = response[4].data.strainername;\r\n                        // selectedRecord[\"strainingtopic\"] = response[4].data.strainingtopic;\r\n                        // selectedRecord[\"strainingvenue\"] = response[4].data.strainingvenue;\r\n                        // selectedRecord[\"strainingdatetime\"] = response[4].data.strainingdatetime;\r\n                        // selectedRecord[\"scomments\"] = response[4].data.scomments;\r\n\r\n                        selectedRecord = response[4].data;\r\n                        selectedRecord[\"dtrainingdatetime\"]= rearrangeDateFormat(userInfo, response[4].data.strainingdatetime)\r\n                         tztrainingdate.push({ \"value\": userInfo.ntimezonecode, \"label\":userInfo.stimezoneid });\r\n                        selectedRecord[\"stztrainingdate\"]= userInfo.stimezoneid\r\n                       // selectedRecord[\"ntztrainingdate\"]= userInfo.ntimezonecode\r\n\r\n                        technique.push({ \"value\": response[0].data[0].ntechniquecode, \"label\": response[0].data[0].stechniquename });\r\n                        trainingcategory.push({ \"value\": response[1].data[0].ntrainingcategorycode, \"label\": response[1].data[0].strainingcategoryname });\r\n\r\n\r\n                        selectedRecord[\"ntrainingcategorycode\"] = trainingcategory[0];\r\n                        selectedRecord[\"ntechniquecode\"] = technique[0];\r\n                         selectedRecord[\"ntztrainingdate\"] = tztrainingdate[0];\r\n\r\n                    }\r\n                    else {\r\n                        selectedRecord[\"ntransactionstatus\"] = transactionStatus.ACTIVE;\r\n                        selectedRecord[\"ntrainingcategorycode\"] = trainingcategoryMap.get(\"DefaultValue\");\r\n                    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            currentTime,\r\n                            trainingcategoryList, techniqueList, timeZoneList,\r\n\r\n                            operation, screenName, selectedRecord, openModal: true,\r\n                            ncontrolCode, loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function getTrainingParticipantsComboDataService(trainingparam, masterData) {\r\n    return function (dispatch) {\r\n\r\n        if (masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.CANCELLED) {\r\n\r\n            const section = rsapi.post(\"section/getSection\", { \"userinfo\": trainingparam.userInfo });\r\n\r\n            let urlArray = [];\r\n\r\n            let selectedId = null;\r\n\r\n            urlArray = [section];\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(Axios.spread((...response) => {\r\n\r\n                    let selectedRecord = {};\r\n                    let nsectioncode = [];\r\n                    let nsitecode = [];\r\n\r\n                    let sectionusersList = [];\r\n\r\n                    const SectionMap = constructOptionList(response[0].data || [], \"nsectioncode\",\r\n                        \"ssectionname\", undefined, undefined, true);\r\n\r\n                    const sectionList = SectionMap.get(\"OptionList\");\r\n\r\n\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            section: sectionList, sectionUsers: trainingparam.operation === \"update\" ? sectionusersList : [],\r\n                            nsectioncode: nsectioncode, nsitecode: nsitecode,\r\n                            selectedRecord: trainingparam.operation === \"update\" ? selectedRecord : undefined, operation: trainingparam.operation,\r\n                            screenName: \"IDS_PARTICIPANTSDETAILS\",\r\n                            openChildModal: true, ncontrolCode: trainingparam.ncontrolCode,\r\n                            loading: false, selectedId\r\n                        }\r\n                    });\r\n                }))\r\n\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n\r\n            toast.warn(intl.formatMessage({ id: \"IDS_TRAININGCANCELED\" }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function reloadTrainingCertificate(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"trainingcertificate/getTrainingCertificate\", { ...inputParam.inputData })\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\r\n                    inputParam.searchRef.current.value = \"\";\r\n                    masterData['searchedData'] = undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSectionUsersDataService(nSectionCode, selectedRecord, userInfo, SelectedTrainingCertificate) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"trainingcertificate/getSectionUsers\", { \"userinfo\": userInfo, \"nsectioncode\": parseInt(nSectionCode), \"ntrainingcode\": parseInt(SelectedTrainingCertificate) })\r\n            .then(response => {\r\n\r\n                let nusercode = [];\r\n\r\n                // const sectionusersMap = constructOptionList(response.data.SectionUsers || [], \"nusercode\",\r\n                //     \"sfullname\", undefined, undefined, true);\r\n\r\n                const sectionusersList = response.data.SectionUsers;\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        sectionUsers: sectionusersList, nusercode: nusercode, selectedRecord, loading: false\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n\r\n            })\r\n    }\r\n}\r\nexport function getTrainingParticipantsInvite(trainingparam,selectedRecord, masterData,operation) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"trainingcertificate/getInviteParticipants\", { \"userinfo\": trainingparam.userInfo,  \"ntrainingcode\": parseInt(masterData.SelectedTrainingCertificate.ntrainingcode) })\r\n            .then(response => {\r\n\r\n                let nusercode = [];\r\n\r\n                // const inviteUsersMap = constructOptionList(response.data.InvitedParticipants || [], \"nusercode\",\r\n                //     \"sfullname\", undefined, undefined, true);\r\n\r\n                // const inviteUsersList = inviteUsersMap.get(\"OptionList\");\r\n                const inviteUsersList =response.data.InvitedParticipants;\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        usersStatus: inviteUsersList, nusercode: nusercode, loading: false,openChildModal: true,\r\n                        screenName:\"IDS_INVITEDPARTICIPANTSDETAILS\",nFlag:2,selectedRecord:selectedRecord,operation:operation\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getTrainingParticipantsCancel(trainingparam,selectedRecord, masterData,operation) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"trainingcertificate/getCancelParticipants\", { \"userinfo\": trainingparam.userInfo,  \"ntrainingcode\": parseInt(masterData.SelectedTrainingCertificate.ntrainingcode) })\r\n            .then(response => {\r\n\r\n                let nusercode = [];\r\n\r\n                // const cancelUsersMap = constructOptionList(response.data.CancelParticipants || [], \"nusercode\",\r\n                //     \"sfullname\", undefined, undefined, true);\r\n\r\n                const cancelUsersList = response.data.CancelParticipants;\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        usersStatus: cancelUsersList, nusercode: nusercode, loading: false,openChildModal: true,\r\n                        screenName:\"IDS_CANCELPARTICIPANTSDETAILS\",nFlag:3,selectedRecord:selectedRecord,operation:operation\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}