{"ast":null,"code":"import Immutable from \"immutable\";\nimport { toImmutableList } from \"../utils/stuff\";\nimport * as constants from \"../stores/constants\";\nimport { defaultRuleProperties, defaultGroupProperties } from \"../utils/defaultUtils\";\nimport uuid from \"../utils/uuid\";\n/**\n * @param {object} config\n * @param {Immutable.Map} tree\n */\n\nexport var setTree = function setTree(config, tree) {\n  return {\n    type: constants.SET_TREE,\n    tree: tree,\n    config: config\n  };\n};\n/**\n * @param {object} config\n * @param {Immutable.List} path\n * @param {Immutable.Map} properties\n */\n\nexport var addRule = function addRule(config, path, properties) {\n  var ruleType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"rule\";\n  var children = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  return {\n    type: constants.ADD_RULE,\n    ruleType: ruleType,\n    children: children,\n    path: toImmutableList(path),\n    id: uuid(),\n    properties: defaultRuleProperties(config).merge(properties || {}),\n    config: config\n  };\n};\n/**\n * @param {object} config\n * @param {Immutable.List} path\n */\n\nexport var removeRule = function removeRule(config, path) {\n  return {\n    type: constants.REMOVE_RULE,\n    path: toImmutableList(path),\n    config: config\n  };\n};\n/**\n * @param {object} config\n * @param {Immutable.List} path\n * @param {Immutable.Map} properties\n */\n\nexport var addDefaultCaseGroup = function addDefaultCaseGroup(config, path, properties) {\n  var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  return {\n    type: constants.ADD_CASE_GROUP,\n    path: toImmutableList(path),\n    children: children,\n    id: uuid(),\n    properties: defaultGroupProperties(config).merge(properties || {}),\n    config: config,\n    meta: {\n      isDefaultCase: true\n    }\n  };\n};\n/**\n * @param {object} config\n * @param {Immutable.List} path\n * @param {Immutable.Map} properties\n */\n\nexport var addCaseGroup = function addCaseGroup(config, path, properties) {\n  var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  return {\n    type: constants.ADD_CASE_GROUP,\n    path: toImmutableList(path),\n    children: children,\n    id: uuid(),\n    properties: defaultGroupProperties(config).merge(properties || {}),\n    config: config\n  };\n};\n/**\n * @param {object} config\n * @param {Immutable.List} path\n * @param {Immutable.Map} properties\n */\n\nexport var addGroup = function addGroup(config, path, properties) {\n  var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  return {\n    type: constants.ADD_GROUP,\n    path: toImmutableList(path),\n    children: children,\n    id: uuid(),\n    properties: defaultGroupProperties(config).merge(properties || {}),\n    config: config\n  };\n};\n/**\n * @param {object} config\n * @param {Immutable.List} path\n */\n\nexport var removeGroup = function removeGroup(config, path) {\n  return {\n    type: constants.REMOVE_GROUP,\n    path: toImmutableList(path),\n    config: config\n  };\n};\n/**\n * @param {object} config\n * @param {Array} fromPath\n * @param {Array} toPath\n * @param {String} placement, see constants PLACEMENT_*\n */\n\nexport var moveItem = function moveItem(config, fromPath, toPath, placement) {\n  return {\n    type: constants.MOVE_ITEM,\n    fromPath: toImmutableList(fromPath),\n    toPath: toImmutableList(toPath),\n    placement: placement,\n    config: config\n  };\n};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/node_modules/@react-awesome-query-builder/core/esm/actions/tree.js"],"names":["Immutable","toImmutableList","constants","defaultRuleProperties","defaultGroupProperties","uuid","setTree","config","tree","type","SET_TREE","addRule","path","properties","ruleType","arguments","length","undefined","children","ADD_RULE","id","merge","removeRule","REMOVE_RULE","addDefaultCaseGroup","ADD_CASE_GROUP","meta","isDefaultCase","addCaseGroup","addGroup","ADD_GROUP","removeGroup","REMOVE_GROUP","moveItem","fromPath","toPath","placement","MOVE_ITEM"],"mappings":"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","sourcesContent":["import Immutable from \"immutable\";\nimport { toImmutableList } from \"../utils/stuff\";\nimport * as constants from \"../stores/constants\";\nimport { defaultRuleProperties, defaultGroupProperties } from \"../utils/defaultUtils\";\nimport uuid from \"../utils/uuid\";\n\n/**\n * @param {object} config\n * @param {Immutable.Map} tree\n */\nexport var setTree = function setTree(config, tree) {\n  return {\n    type: constants.SET_TREE,\n    tree: tree,\n    config: config\n  };\n};\n\n/**\n * @param {object} config\n * @param {Immutable.List} path\n * @param {Immutable.Map} properties\n */\nexport var addRule = function addRule(config, path, properties) {\n  var ruleType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"rule\";\n  var children = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  return {\n    type: constants.ADD_RULE,\n    ruleType: ruleType,\n    children: children,\n    path: toImmutableList(path),\n    id: uuid(),\n    properties: defaultRuleProperties(config).merge(properties || {}),\n    config: config\n  };\n};\n\n/**\n * @param {object} config\n * @param {Immutable.List} path\n */\nexport var removeRule = function removeRule(config, path) {\n  return {\n    type: constants.REMOVE_RULE,\n    path: toImmutableList(path),\n    config: config\n  };\n};\n\n/**\n * @param {object} config\n * @param {Immutable.List} path\n * @param {Immutable.Map} properties\n */\nexport var addDefaultCaseGroup = function addDefaultCaseGroup(config, path, properties) {\n  var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  return {\n    type: constants.ADD_CASE_GROUP,\n    path: toImmutableList(path),\n    children: children,\n    id: uuid(),\n    properties: defaultGroupProperties(config).merge(properties || {}),\n    config: config,\n    meta: {\n      isDefaultCase: true\n    }\n  };\n};\n\n/**\n * @param {object} config\n * @param {Immutable.List} path\n * @param {Immutable.Map} properties\n */\nexport var addCaseGroup = function addCaseGroup(config, path, properties) {\n  var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  return {\n    type: constants.ADD_CASE_GROUP,\n    path: toImmutableList(path),\n    children: children,\n    id: uuid(),\n    properties: defaultGroupProperties(config).merge(properties || {}),\n    config: config\n  };\n};\n\n/**\n * @param {object} config\n * @param {Immutable.List} path\n * @param {Immutable.Map} properties\n */\nexport var addGroup = function addGroup(config, path, properties) {\n  var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  return {\n    type: constants.ADD_GROUP,\n    path: toImmutableList(path),\n    children: children,\n    id: uuid(),\n    properties: defaultGroupProperties(config).merge(properties || {}),\n    config: config\n  };\n};\n\n/**\n * @param {object} config\n * @param {Immutable.List} path\n */\nexport var removeGroup = function removeGroup(config, path) {\n  return {\n    type: constants.REMOVE_GROUP,\n    path: toImmutableList(path),\n    config: config\n  };\n};\n\n/**\n * @param {object} config\n * @param {Array} fromPath\n * @param {Array} toPath\n * @param {String} placement, see constants PLACEMENT_*\n */\nexport var moveItem = function moveItem(config, fromPath, toPath, placement) {\n  return {\n    type: constants.MOVE_ITEM,\n    fromPath: toImmutableList(fromPath),\n    toPath: toImmutableList(toPath),\n    placement: placement,\n    config: config\n  };\n};"]},"metadata":{},"sourceType":"module"}