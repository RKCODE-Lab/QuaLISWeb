{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\contactmaster\\\\ManufacturerSiteTab.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, Tab, Nav } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { FormattedMessage } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { process } from '@progress/kendo-data-query';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddContactInfoManufacturer from '../../pages/contactmaster/AddContactInfoManufacturer';\nimport AddSiteManufacturer from '../../pages/contactmaster/AddSiteManufacturer';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, validateEmail, validatePhoneNumber } from '../../components/CommonScript';\nimport Esign from '../audittrail/Esign';\nimport { transactionStatus } from '../../components/Enumeration';\nimport CustomAccordion from '../../components/custom-accordion/custom-accordion.component';\nimport ManufacturerTabsAccordion from './ManufacturerTabsAccordion';\nimport { toast } from 'react-toastify';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component'; //import ReactTooltip from 'react-tooltip';\n\nclass ManufacturerSiteTab extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.ManufacturerContactInfo, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.openModalContact = input => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal: true,\n          operation: input.operation,\n          selectedRecord: undefined,\n          defaultSite: undefined,\n          ncontrolCode: input.ncontrolCode,\n          screenName: \"IDS_CONTACTDETAILS\",\n          loading: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.manufacturerSiteAccordion = manufacturerSiteAddress => {\n      let primaryKeyField = \"nmanufcontactcode\";\n      const addManufacturerContactId = this.props.controlMap.has(\"AddManufacturerContactInfo\") && this.props.controlMap.get(\"AddManufacturerContactInfo\").ncontrolcode;\n      const editManufacturerContactId = this.props.controlMap.has(\"EditManufacturerContactInfo\") && this.props.controlMap.get(\"EditManufacturerContactInfo\").ncontrolcode;\n      const editContactParam = {\n        screenName: \"ManufacturerContact\",\n        primaryKeyField: \"nmanufcontactcode\",\n        operation: \"update\",\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        ncontrolCode: editManufacturerContactId\n      };\n      const AddContactParam = {\n        screenName: \"ManufacturerContact\",\n        primaryKeyField,\n        undefined,\n        operation: \"create\",\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        ncontrolCode: addManufacturerContactId\n      };\n      const accordionMap = new Map();\n      manufacturerSiteAddress.map(siteAddress => accordionMap.set(siteAddress.nmanufsitecode, /*#__PURE__*/React.createElement(ManufacturerTabsAccordion, {\n        siteAddress: siteAddress,\n        getSiteManufacturerLoadEdit: this.props.getSiteManufacturerLoadEdit,\n        masterData: this.props.masterData,\n        ConfirmDelete: this.ConfirmDelete,\n        addManufacturerContactId: addManufacturerContactId,\n        AddContactParam: AddContactParam,\n        openModalContact: this.openModalContact // tabDetail={this.tabDetail(userSite)}   \n        ,\n        primaryKeyField: primaryKeyField,\n        expandField: \"expanded\",\n        detailedFieldList: this.detailedFieldList,\n        extractedColumnList: this.ContactColumns,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        data: this.state.ManufacturerContactInfo || [],\n        ManufacturerContactInfo: this.state.ManufacturerContactInfo || [],\n        dataState: this.state.dataState,\n        dataStateChange: this.dataStateChange,\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights || [],\n        methodUrl: \"ManufacturerContactInfo\",\n        getContactManufacturerLoadEdit: this.props.getContactManufacturerLoadEdit,\n        editParam: editContactParam,\n        deleteParam: {\n          operation: \"delete\"\n        },\n        deleteRecord: this.DeleteContact,\n        scrollable: \"scrollable\",\n        isActionRequired: true,\n        selectedId: this.props.selectedId,\n        hasDynamicColSize: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 17\n        }\n      })));\n      return accordionMap;\n    };\n\n    this.ConfirmDelete = obj => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.Delete(obj));\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'ntransactionstatus') {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\n        } else if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        }\n      } else {\n        if (event.target.name === \"sphoneno\" || event.target.name === \"smobileno\" || event.target.name === \"sfaxno\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validatePhoneNumber(event.target.value);\n            selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        } // selectedRecord[event.target.name] = event.target.value;\n\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData; //.value;\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.loadEsign;\n      let openChildModal = this.props.openChildModal;\n      let selectedRecord = this.props.selectedRecord;\n\n      if (this.props.loadEsign) {\n        if (this.props.operation === \"delete\") {\n          loadEsign = false;\n          openChildModal = false;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.state.selectedRecord['semail'] ? validateEmail(this.state.selectedRecord['semail']) : true) {\n        let inputParam = {};\n\n        if (this.props.screenName === \"IDS_SITEDETAILS\") {\n          inputParam = this.SaveSiteDetails(saveType, formRef);\n        } else {\n          inputParam = this.SaveContactInfo(saveType, formRef);\n        }\n\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALIDEMAIL\"\n        }));\n      }\n    };\n\n    this.DeleteContact = deleteParam => {\n      let inputData = [];\n\n      if (deleteParam.selectedRecord.expanded !== undefined) {\n        delete deleteParam.selectedRecord.expanded;\n      }\n\n      inputData[\"manufacturercontactinfo\"] = deleteParam.selectedRecord;\n      inputData[\"userinfo\"] = this.props.userInfo;\n      const inputParam = {\n        methodUrl: \"ContactInfo\",\n        classUrl: this.props.inputParam.classUrl,\n        inputData: inputData,\n        operation: \"delete\",\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            openChildModal: true,\n            screenName: \"Contact\",\n            operation: \"delete\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              openChildModal: true,\n              screenName: \"Contact\",\n              operation: \"delete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      }\n    };\n\n    this.Delete = deleteParam => {\n      let inputData = [];\n\n      if (deleteParam.selectedRecord.expanded && deleteParam.selectedRecord.expanded !== undefined) {\n        delete deleteParam.selectedRecord.expanded;\n      }\n\n      inputData[deleteParam.Type] = deleteParam.selectedRecord;\n      inputData[\"userinfo\"] = this.props.userInfo;\n      const inputParam = {\n        methodUrl: deleteParam.methodURL,\n        classUrl: this.props.inputParam.classUrl,\n        inputData: inputData,\n        operation: \"delete\"\n      };\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            openChildModal: true,\n            screenName: deleteParam.screenName,\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              openChildModal: true,\n              screenName: deleteParam.screenName,\n              operation: deleteParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      } //this.props.crudMaster(inputParam, this.props.masterData);\n\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openChildModal\");\n    };\n\n    const dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      isSiteOpen: false,\n      isContactOpen: false,\n      siteSelectedRecord: {},\n      contactSelectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      ManufacturerContactInfo: this.props.masterData.ManufacturerContactInfo,\n      Country: [],\n      SiteCode: this.props.masterData.SiteCode,\n      selectedRecord: {},\n      countryCode: []\n    };\n    this.ContactColumns = [{\n      \"idsName\": \"IDS_CONTACTNAME\",\n      \"mandatory\": true,\n      \"dataField\": \"scontactname\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      dataField: \"semail\",\n      idsName: \"IDS_EMAILID\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      dataField: \"sdefaultContact\",\n      idsName: \"IDS_DEFAULT\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.siteColumns = [{\n      \"idsName\": \"IDS_SITENAME\",\n      \"mandatory\": true,\n      \"dataField\": \"smanufsitename\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_ADDRESS1\",\n      \"mandatory\": true,\n      \"dataField\": \"saddress1\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_COUNTRYNAME\",\n      \"mandatory\": true,\n      \"dataField\": \"ncountrycode\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.detailedFieldList = [{\n      \"dataField\": \"sphoneno\",\n      \"idsName\": \"IDS_PHONE\",\n      columnSize: \"4\"\n    }, {\n      \"idsName\": \"IDS_MOBILE\",\n      \"dataField\": \"smobileno\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"sfaxno\",\n      idsName: \"IDS_FAX\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"scomments\",\n      idsName: \"IDS_COMMENTS\",\n      columnSize: \"12\"\n    }];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  render() {\n    const addManufacturerSiteId = this.props.controlMap.has(\"AddManufacturerSiteAddress\") && this.props.controlMap.get(\"AddManufacturerSiteAddress\").ncontrolcode; // const editManufacturerSiteId = this.props.controlMap.has(\"EditManufacturerSiteAddress\") && this.props.controlMap.get(\"EditManufacturerSiteAddress\").ncontrolcode;\n    // const deleteManufacturerSiteId = this.props.controlMap.has(\"DeleteManufacturerSiteAddress\") && this.props.controlMap.get(\"DeleteManufacturerSiteAddress\").ncontrolcode\n    //const editManufacturerContactId = this.props.controlMap.has(\"EditManufacturerContactInfo\") && this.props.controlMap.get(\"EditManufacturerContactInfo\").ncontrolcode;\n    // const deleteManufacturerContactId = this.props.controlMap.has(\"DeleteManufacturerContactInfo\") && this.props.controlMap.get(\"DeleteManufacturerContactInfo\").ncontrolcode\n    //let primaryKeyField = \"nmanufcontactcode\";\n    // const editContactParam = {\n    //     screenName: \"ManufacturerContact\", primaryKeyField: \"nmanufcontactcode\", operation: \"update\",\n    //     inputParam: this.props.inputParam, userInfo: this.props.userInfo, ncontrolCode: editManufacturerContactId\n    // };\n    // const deleteParam = { operation: \"delete\" };\n\n    const mandatoryFields = [];\n\n    if (this.props.screenName === \"IDS_SITEDETAILS\") {\n      this.siteColumns.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    } else {\n      this.ContactColumns.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Tab.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Tab.Pane, {\n      \"aria-labelledby\": \"Version-tab\",\n      className: \"p-0 active show\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters pt-2 pb-2 col-12 text-right border-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"add-txt-btn\",\n      hidden: this.props.userRoleControlRights.indexOf(addManufacturerSiteId) === -1,\n      onClick: () => this.props.getSiteManufacturerLoadEdit(\"SiteManufacturer\", \"create\", this.props.masterData.selectedManufacturer.nmanufcode, undefined, addManufacturerSiteId, this.props.userInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 53\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SITEDETAILS\",\n      defaultMessage: \"Site Details\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 53\n      }\n    }))))), /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 41\n      }\n    }, this.props.masterData.ManufacturerSiteAddress && this.props.masterData.ManufacturerSiteAddress.length > 0 ? /*#__PURE__*/React.createElement(CustomAccordion, {\n      key: \"filter\",\n      accordionTitle: \"smanufsitename\",\n      accordionComponent: this.manufacturerSiteAccordion(this.props.masterData.ManufacturerSiteAddress),\n      inputParam: {\n        masterData: this.props.masterData,\n        userInfo: this.props.userInfo\n      },\n      accordionClick: this.props.getContactInfo,\n      accordionPrimaryKey: \"nmanufsitecode\",\n      accordionObjectName: \"siteAddress\",\n      selectedKey: this.props.masterData.selectedSite.nmanufsitecode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 49\n      }\n    }) : \"\"))))))), /*#__PURE__*/React.createElement(React.Fragment, null, this.props.openChildModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.operation,\n      inputParam: this.props.inputParam,\n      screenName: this.props.screenName,\n      onSaveClick: this.onSaveClick,\n      updateStore: this.props.updateStore,\n      esign: this.props.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.operation //  formatMessage={this.props.formatMessage}\n        ,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 33\n        }\n      }) : this.props.screenName === \"IDS_SITEDETAILS\" ? /*#__PURE__*/React.createElement(AddSiteManufacturer, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange //   formatMessage={this.props.formatMessage}\n        ,\n        Country: this.props.Country || [],\n        inputParam: this.props.inputParam // defaultValue={this.props.countryCode}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 37\n        }\n      }) : /*#__PURE__*/React.createElement(AddContactInfoManufacturer, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange //  formatMessage={this.props.formatMessage}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 37\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 25\n      }\n    })));\n  }\n\n  SaveSiteDetails(saveType, formRef) {\n    let inputData = [];\n    inputData[\"userinfo\"] = this.props.userInfo;\n    let fieldList = [\"nmanufsitecode\", \"nmanufsitecode\", \"ncountrycode\", \"smanufsitename\", \"saddress1\", \"saddress2\", \"saddress3\", \"ndefaultstatus\", \"ntransactionstatus\"];\n\n    if (this.props.operation === \"update\") {\n      inputData[\"manufacturersiteaddress\"] = {\n        \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode\n      };\n      fieldList.map(item => {\n        if (item === \"ncountrycode\") {\n          return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item].value : \"\";\n        } else {\n          return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n        }\n      });\n    } else {\n      inputData[\"manufacturersiteaddress\"] = {\n        \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode\n      };\n      fieldList.map(item => {\n        if (item === \"ncountrycode\") {\n          return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item].value;\n        } else {\n          return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item];\n        }\n      });\n    }\n\n    const inputParam = {\n      classUrl: this.props.inputParam.classUrl,\n      methodUrl: \"SiteAddress\",\n      inputData: inputData,\n      operation: this.props.operation,\n      saveType,\n      formRef\n    };\n    return inputParam; //this.props.crudMaster(inputParam, this.props.masterData);\n  }\n\n  SaveContactInfo(saveType, formRef) {\n    let dataState = undefined;\n    let inputData = [];\n    inputData[\"userinfo\"] = this.props.userInfo;\n    let fieldList = [\"nmanufcontactcode\", \"scontactname\", \"sphoneno\", \"smobileno\", \"semail\", \"sfaxno\", \"scomments\", \"ndefaultcontact\"];\n    let selectedId = null;\n\n    if (this.props.operation === \"update\") {\n      inputData[\"manufacturercontactinfo\"] = {\n        \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode,\n        \"nmanufsitecode\": this.props.masterData.SiteCode\n      };\n      selectedId = this.props.selectedRecord.nmanufcontactcode;\n      fieldList.map(item => {\n        return inputData[\"manufacturercontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n      });\n      dataState = this.state.dataState;\n    } else {\n      inputData[\"manufacturercontactinfo\"] = {\n        \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode,\n        \"nmanufsitecode\": this.props.masterData.SiteCode\n      };\n      fieldList.map(item => {\n        return inputData[\"manufacturercontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n      });\n      inputData[\"manufacturercontactinfo\"]['ndefaultcontact'] = this.state.selectedRecord && this.state.selectedRecord.ndefaultcontact ? this.state.selectedRecord.ndefaultcontact : transactionStatus.YES;\n    }\n\n    const inputParam = {\n      classUrl: this.props.inputParam.classUrl,\n      methodUrl: \"ContactInfo\",\n      inputData: inputData,\n      selectedId,\n      operation: this.props.operation,\n      saveType,\n      formRef,\n      dataState\n    };\n    return inputParam; // this.props.crudMaster(inputParam, this.props.masterData);\n  } // DeleteContact = (e, selectedRecord, Type, methodURL,operation,screenName, ncontrolCode) => {\n\n\n  componentDidUpdate(previousProps) {\n    if (this.props.masterData !== previousProps.masterData) {\n      let {\n        dataState\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        dataState = {\n          skip: 0,\n          take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n        };\n      }\n\n      this.setState({\n        isSiteOpen: false,\n        isContactOpen: false,\n        ManufacturerContactInfo: this.props.masterData.ManufacturerContactInfo,\n        SiteCode: this.props.masterData.SiteCode,\n        Country: this.props.masterData.Country,\n        dataState\n      });\n    }\n\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default injectIntl(ManufacturerSiteTab);","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/contactmaster/ManufacturerSiteTab.jsx"],"names":["React","Component","Row","Col","Card","Tab","Nav","injectIntl","FormattedMessage","FontAwesomeIcon","faPlus","process","SlideOutModal","AddContactInfoManufacturer","AddSiteManufacturer","DEFAULT_RETURN","showEsign","validateEmail","validatePhoneNumber","Esign","transactionStatus","CustomAccordion","ManufacturerTabsAccordion","toast","ConfirmMessage","ManufacturerSiteTab","constructor","props","dataStateChange","event","setState","dataResult","state","ManufacturerContactInfo","dataState","openModalContact","input","updateInfo","typeName","data","openChildModal","operation","selectedRecord","undefined","defaultSite","ncontrolCode","screenName","loading","updateStore","manufacturerSiteAccordion","manufacturerSiteAddress","primaryKeyField","addManufacturerContactId","controlMap","has","get","ncontrolcode","editManufacturerContactId","editContactParam","inputParam","userInfo","AddContactParam","accordionMap","Map","map","siteAddress","set","nmanufsitecode","getSiteManufacturerLoadEdit","masterData","ConfirmDelete","detailedFieldList","ContactColumns","userRoleControlRights","getContactManufacturerLoadEdit","DeleteContact","selectedId","obj","confirmMessage","confirm","intl","formatMessage","id","Delete","onInputOnChange","target","type","name","checked","ACTIVE","DEACTIVE","YES","NO","value","onComboChange","comboData","fieldName","closeModal","loadEsign","onSaveClick","saveType","formRef","SaveSiteDetails","SaveContactInfo","esignRights","nformcode","screenData","crudMaster","warn","deleteParam","inputData","expanded","methodUrl","classUrl","Type","methodURL","validateEsign","sreason","password","validateEsignCredential","skip","take","settings","parseInt","isSiteOpen","isContactOpen","siteSelectedRecord","contactSelectedRecord","Country","SiteCode","countryCode","dataField","idsName","siteColumns","columnSize","render","addManufacturerSiteId","mandatoryFields","forEach","item","mandatory","push","indexOf","selectedManufacturer","nmanufcode","ManufacturerSiteAddress","length","getContactInfo","selectedSite","fieldList","nmanufcontactcode","ndefaultcontact","componentDidUpdate","previousProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,GAA9B,QAAyC,iBAAzC;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,MAAT,QAAuB,mCAAvB;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,OAAOC,aAAP,MAA0B,gDAA1B;AACA,OAAOC,0BAAP,MAAuC,sDAAvC;AACA,OAAOC,mBAAP,MAAgC,+CAAhC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAmCC,mBAAnC,QAA8D,+BAA9D;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,OAAOC,eAAP,MAA4B,8DAA5B;AACA,OAAOC,yBAAP,MAAsC,6BAAtC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,cAAP,MAA2B,0DAA3B,C,CACA;;AAEA,MAAMC,mBAAN,SAAkCxB,SAAlC,CAA4C;AACxCyB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAkCnBC,eAlCmB,GAkCAC,KAAD,IAAW;AACzB,WAAKC,QAAL,CAAc;AACVC,QAAAA,UAAU,EAAEpB,OAAO,CAAC,KAAKqB,KAAL,CAAWC,uBAAZ,EAAqCJ,KAAK,CAACK,SAA3C,CADT;AAEVA,QAAAA,SAAS,EAAEL,KAAK,CAACK;AAFP,OAAd;AAIH,KAvCkB;;AAAA,SAwCnBC,gBAxCmB,GAwCCC,KAAD,IAAW;AAC1B,YAAMC,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEvB,cADK;AAEfwB,QAAAA,IAAI,EAAE;AACFC,UAAAA,cAAc,EAAE,IADd;AACoBC,UAAAA,SAAS,EAAEL,KAAK,CAACK,SADrC;AAEFC,UAAAA,cAAc,EAAEC,SAFd;AAGFC,UAAAA,WAAW,EAAED,SAHX;AAGsBE,UAAAA,YAAY,EAAET,KAAK,CAACS,YAH1C;AAIFC,UAAAA,UAAU,EAAE,oBAJV;AAIgCC,UAAAA,OAAO,EAAE;AAJzC;AAFS,OAAnB;AASA,WAAKpB,KAAL,CAAWqB,WAAX,CAAuBX,UAAvB;AACH,KAnDkB;;AAAA,SAwMnBY,yBAxMmB,GAwMUC,uBAAD,IAA6B;AACrD,UAAIC,eAAe,GAAG,mBAAtB;AACA,YAAMC,wBAAwB,GAAG,KAAKzB,KAAL,CAAW0B,UAAX,CAAsBC,GAAtB,CAA0B,4BAA1B,KAA2D,KAAK3B,KAAL,CAAW0B,UAAX,CAAsBE,GAAtB,CAA0B,4BAA1B,EAAwDC,YAApJ;AACA,YAAMC,yBAAyB,GAAG,KAAK9B,KAAL,CAAW0B,UAAX,CAAsBC,GAAtB,CAA0B,6BAA1B,KAA4D,KAAK3B,KAAL,CAAW0B,UAAX,CAAsBE,GAAtB,CAA0B,6BAA1B,EAAyDC,YAAvJ;AACA,YAAME,gBAAgB,GAAG;AACrBZ,QAAAA,UAAU,EAAE,qBADS;AACcK,QAAAA,eAAe,EAAE,mBAD/B;AACoDV,QAAAA,SAAS,EAAE,QAD/D;AAErBkB,QAAAA,UAAU,EAAE,KAAKhC,KAAL,CAAWgC,UAFF;AAEcC,QAAAA,QAAQ,EAAE,KAAKjC,KAAL,CAAWiC,QAFnC;AAE6Cf,QAAAA,YAAY,EAAEY;AAF3D,OAAzB;AAIA,YAAMI,eAAe,GAAG;AACpBf,QAAAA,UAAU,EAAE,qBADQ;AACeK,QAAAA,eADf;AACgCR,QAAAA,SADhC;AAC2CF,QAAAA,SAAS,EAAE,QADtD;AAEpBkB,QAAAA,UAAU,EAAE,KAAKhC,KAAL,CAAWgC,UAFH;AAEeC,QAAAA,QAAQ,EAAE,KAAKjC,KAAL,CAAWiC,QAFpC;AAE8Cf,QAAAA,YAAY,EAAEO;AAF5D,OAAxB;AAKA,YAAMU,YAAY,GAAG,IAAIC,GAAJ,EAArB;AACAb,MAAAA,uBAAuB,CAACc,GAAxB,CAA6BC,WAAD,IACxBH,YAAY,CAACI,GAAb,CAAiBD,WAAW,CAACE,cAA7B,eACI,oBAAC,yBAAD;AAA2B,QAAA,WAAW,EAAEF,WAAxC;AACI,QAAA,2BAA2B,EAAE,KAAKtC,KAAL,CAAWyC,2BAD5C;AAEI,QAAA,UAAU,EAAE,KAAKzC,KAAL,CAAW0C,UAF3B;AAGI,QAAA,aAAa,EAAE,KAAKC,aAHxB;AAII,QAAA,wBAAwB,EAAElB,wBAJ9B;AAKI,QAAA,eAAe,EAAES,eALrB;AAMI,QAAA,gBAAgB,EAAE,KAAK1B,gBAN3B,CAOI;AAPJ;AASI,QAAA,eAAe,EAAEgB,eATrB;AAUI,QAAA,WAAW,EAAC,UAVhB;AAWI,QAAA,iBAAiB,EAAE,KAAKoB,iBAX5B;AAYI,QAAA,mBAAmB,EAAE,KAAKC,cAZ9B;AAaI,QAAA,UAAU,EAAE,KAAK7C,KAAL,CAAWgC,UAb3B;AAcI,QAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWiC,QAdzB;AAeI,QAAA,IAAI,EAAE,KAAK5B,KAAL,CAAWC,uBAAX,IAAsC,EAfhD;AAgBI,QAAA,uBAAuB,EAAE,KAAKD,KAAL,CAAWC,uBAAX,IAAsC,EAhBnE;AAiBI,QAAA,SAAS,EAAE,KAAKD,KAAL,CAAWE,SAjB1B;AAkBI,QAAA,eAAe,EAAE,KAAKN,eAlB1B;AAmBI,QAAA,UAAU,EAAE,KAAKD,KAAL,CAAW0B,UAnB3B;AAoBI,QAAA,qBAAqB,EAAE,KAAK1B,KAAL,CAAW8C,qBAAX,IAAoC,EApB/D;AAqBI,QAAA,SAAS,EAAC,yBArBd;AAsBI,QAAA,8BAA8B,EAAE,KAAK9C,KAAL,CAAW+C,8BAtB/C;AAuBI,QAAA,SAAS,EAAEhB,gBAvBf;AAwBI,QAAA,WAAW,EAAE;AAAEjB,UAAAA,SAAS,EAAE;AAAb,SAxBjB;AAyBI,QAAA,YAAY,EAAE,KAAKkC,aAzBvB;AA0BI,QAAA,UAAU,EAAE,YA1BhB;AA2BI,QAAA,gBAAgB,EAAE,IA3BtB;AA4BI,QAAA,UAAU,EAAE,KAAKhD,KAAL,CAAWiD,UA5B3B;AA6BI,QAAA,iBAAiB,EAAE,IA7BvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAkCA,aAAOd,YAAP;AACH,KAzPkB;;AAAA,SA2PnBQ,aA3PmB,GA2PFO,GAAD,IAAS;AACrB,WAAKC,cAAL,CAAoBC,OAApB,CAA4B,eAA5B,EAA6C,KAAKpD,KAAL,CAAWqD,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAA7C,EAAkG,KAAKvD,KAAL,CAAWqD,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAAlG,EACI,KAAKvD,KAAL,CAAWqD,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADJ,EACqD,KAAKvD,KAAL,CAAWqD,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADrD,EAEI,MAAM,KAAKC,MAAL,CAAYN,GAAZ,CAFV;AAGH,KA/PkB;;AAAA,SAiQnBO,eAjQmB,GAiQAvD,KAAD,IAAW;AAEzB,YAAMa,cAAc,GAAG,KAAKV,KAAL,CAAWU,cAAX,IAA6B,EAApD;;AACA,UAAIb,KAAK,CAACwD,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClC,YAAIzD,KAAK,CAACwD,MAAN,CAAaE,IAAb,KAAsB,oBAA1B,EAAgD;AAC5C7C,UAAAA,cAAc,CAACb,KAAK,CAACwD,MAAN,CAAaE,IAAd,CAAd,GAAoC1D,KAAK,CAACwD,MAAN,CAAaG,OAAb,KAAyB,IAAzB,GAAgCpE,iBAAiB,CAACqE,MAAlD,GAA2DrE,iBAAiB,CAACsE,QAAjH;AACH,SAFD,MAGK,IAAI7D,KAAK,CAACwD,MAAN,CAAaE,IAAb,KAAsB,OAA1B,EAAmC;AACpC7C,UAAAA,cAAc,CAACb,KAAK,CAACwD,MAAN,CAAaE,IAAd,CAAd,GAAoC1D,KAAK,CAACwD,MAAN,CAAaG,OAAb,KAAyB,IAAzB,GAAgCpE,iBAAiB,CAACuE,GAAlD,GAAwDvE,iBAAiB,CAACwE,EAA9G;AACH,SAFI,MAGA;AACDlD,UAAAA,cAAc,CAACb,KAAK,CAACwD,MAAN,CAAaE,IAAd,CAAd,GAAoC1D,KAAK,CAACwD,MAAN,CAAaG,OAAb,KAAyB,IAAzB,GAAgCpE,iBAAiB,CAACuE,GAAlD,GAAwDvE,iBAAiB,CAACwE,EAA9G;AACH;AAEJ,OAXD,MAaK;AAED,YAAI/D,KAAK,CAACwD,MAAN,CAAaE,IAAb,KAAsB,UAAtB,IAAoC1D,KAAK,CAACwD,MAAN,CAAaE,IAAb,KAAsB,WAA1D,IACG1D,KAAK,CAACwD,MAAN,CAAaE,IAAb,KAAsB,QAD7B,EACuC;AAEnC,cAAI1D,KAAK,CAACwD,MAAN,CAAaQ,KAAb,KAAuB,EAA3B,EAA+B;AAC3BhE,YAAAA,KAAK,CAACwD,MAAN,CAAaQ,KAAb,GAAqB3E,mBAAmB,CAACW,KAAK,CAACwD,MAAN,CAAaQ,KAAd,CAAxC;AACAnD,YAAAA,cAAc,CAACb,KAAK,CAACwD,MAAN,CAAaE,IAAd,CAAd,GAAoC1D,KAAK,CAACwD,MAAN,CAAaQ,KAAb,KAAuB,EAAvB,GAA4BhE,KAAK,CAACwD,MAAN,CAAaQ,KAAzC,GAAiDnD,cAAc,CAACb,KAAK,CAACwD,MAAN,CAAaE,IAAd,CAAnG;AACH,WAHD,MAIK;AACD7C,YAAAA,cAAc,CAACb,KAAK,CAACwD,MAAN,CAAaE,IAAd,CAAd,GAAoC1D,KAAK,CAACwD,MAAN,CAAaQ,KAAjD;AACH;AACJ,SAVD,MAWK;AACDnD,UAAAA,cAAc,CAACb,KAAK,CAACwD,MAAN,CAAaE,IAAd,CAAd,GAAoC1D,KAAK,CAACwD,MAAN,CAAaQ,KAAjD;AACH,SAfA,CAgBD;;AACH;;AACD,WAAK/D,QAAL,CAAc;AAAEY,QAAAA;AAAF,OAAd;AACH,KApSkB;;AAAA,SAqSnBoD,aArSmB,GAqSH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACtC,UAAID,SAAS,KAAK,IAAlB,EAAwB;AACpB,cAAMrD,cAAc,GAAG,KAAKV,KAAL,CAAWU,cAAX,IAA6B,EAApD;AACAA,QAAAA,cAAc,CAACsD,SAAD,CAAd,GAA4BD,SAA5B,CAFoB,CAEkB;;AAEtC,aAAKjE,QAAL,CAAc;AAAEY,UAAAA;AAAF,SAAd;AACH;AAEJ,KA7SkB;;AAAA,SA8SnBuD,UA9SmB,GA8SN,MAAM;AACf,UAAIC,SAAS,GAAG,KAAKvE,KAAL,CAAWuE,SAA3B;AACA,UAAI1D,cAAc,GAAG,KAAKb,KAAL,CAAWa,cAAhC;AACA,UAAIE,cAAc,GAAG,KAAKf,KAAL,CAAWe,cAAhC;;AACA,UAAI,KAAKf,KAAL,CAAWuE,SAAf,EAA0B;AACtB,YAAI,KAAKvE,KAAL,CAAWc,SAAX,KAAyB,QAA7B,EAAuC;AACnCyD,UAAAA,SAAS,GAAG,KAAZ;AACA1D,UAAAA,cAAc,GAAG,KAAjB;AACH,SAHD,MAIK;AACD0D,UAAAA,SAAS,GAAG,KAAZ;AACH;AACJ,OARD,MASK;AACD1D,QAAAA,cAAc,GAAG,KAAjB;AACAE,QAAAA,cAAc,GAAG,EAAjB;AACH;;AAED,YAAML,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEvB,cADK;AAEfwB,QAAAA,IAAI,EAAE;AAAEC,UAAAA,cAAF;AAAkB0D,UAAAA,SAAlB;AAA6BxD,UAAAA,cAA7B;AAA6CkC,UAAAA,UAAU,EAAE;AAAzD;AAFS,OAAnB;AAIA,WAAKjD,KAAL,CAAWqB,WAAX,CAAuBX,UAAvB;AAEH,KAtUkB;;AAAA,SAwUnB8D,WAxUmB,GAwUL,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACjC,UAAI,KAAKrE,KAAL,CAAWU,cAAX,CAA0B,QAA1B,IAAsCzB,aAAa,CAAC,KAAKe,KAAL,CAAWU,cAAX,CAA0B,QAA1B,CAAD,CAAnD,GAA2F,IAA/F,EAAqG;AACjG,YAAIiB,UAAU,GAAG,EAAjB;;AAEA,YAAI,KAAKhC,KAAL,CAAWmB,UAAX,KAA0B,iBAA9B,EAAiD;AAC7Ca,UAAAA,UAAU,GAAG,KAAK2C,eAAL,CAAqBF,QAArB,EAA+BC,OAA/B,CAAb;AACH,SAFD,MAGK;AAED1C,UAAAA,UAAU,GAAG,KAAK4C,eAAL,CAAqBH,QAArB,EAA+BC,OAA/B,CAAb;AACH;;AAED,YAAIrF,SAAS,CAAC,KAAKW,KAAL,CAAW6E,WAAZ,EAAyB,KAAK7E,KAAL,CAAWiC,QAAX,CAAoB6C,SAA7C,EAAwD,KAAK9E,KAAL,CAAWkB,YAAnE,CAAb,EAA+F;AAC3F,gBAAMR,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEvB,cADK;AAEfwB,YAAAA,IAAI,EAAE;AACF2D,cAAAA,SAAS,EAAE,IADT;AACeQ,cAAAA,UAAU,EAAE;AAAE/C,gBAAAA,UAAF;AAAcU,gBAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAW0C;AAArC,eAD3B;AAC8E+B,cAAAA;AAD9E;AAFS,WAAnB;AAMA,eAAKzE,KAAL,CAAWqB,WAAX,CAAuBX,UAAvB;AACH,SARD,MASK;AACD,eAAKV,KAAL,CAAWgF,UAAX,CAAsBhD,UAAtB,EAAkC,KAAKhC,KAAL,CAAW0C,UAA7C,EAAyD,gBAAzD;AACH;AACJ,OAvBD,MAwBK;AACD9C,QAAAA,KAAK,CAACqF,IAAN,CAAW,KAAKjF,KAAL,CAAWqD,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KApWkB;;AAAA,SA6bnBP,aA7bmB,GA6bFkC,WAAD,IAAiB;AAC7B,UAAIC,SAAS,GAAG,EAAhB;;AACA,UAAID,WAAW,CAACnE,cAAZ,CAA2BqE,QAA3B,KAAwCpE,SAA5C,EAAuD;AACnD,eAAOkE,WAAW,CAACnE,cAAZ,CAA2BqE,QAAlC;AACH;;AACDD,MAAAA,SAAS,CAAC,yBAAD,CAAT,GAAuCD,WAAW,CAACnE,cAAnD;AACAoE,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKnF,KAAL,CAAWiC,QAAnC;AACA,YAAMD,UAAU,GAAG;AACfqD,QAAAA,SAAS,EAAE,aADI;AAEfC,QAAAA,QAAQ,EAAE,KAAKtF,KAAL,CAAWgC,UAAX,CAAsBsD,QAFjB;AAGfH,QAAAA,SAAS,EAAEA,SAHI;AAIfrE,QAAAA,SAAS,EAAE,QAJI;AAKfP,QAAAA,SAAS,EAAE,KAAKF,KAAL,CAAWE;AALP,OAAnB;;AAOA,UAAIlB,SAAS,CAAC,KAAKW,KAAL,CAAW6E,WAAZ,EAAyB,KAAK7E,KAAL,CAAWiC,QAAX,CAAoB6C,SAA7C,EAAwDI,WAAW,CAAChE,YAApE,CAAb,EAAgG;AAC5F,cAAMR,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAEvB,cADK;AAEfwB,UAAAA,IAAI,EAAE;AACF2D,YAAAA,SAAS,EAAE,IADT;AACeQ,YAAAA,UAAU,EAAE;AAAE/C,cAAAA,UAAF;AAAcU,cAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAW0C;AAArC,aAD3B;AAEF7B,YAAAA,cAAc,EAAE,IAFd;AAEoBM,YAAAA,UAAU,EAAE,SAFhC;AAE2CL,YAAAA,SAAS,EAAE;AAFtD;AAFS,SAAnB;AAOA,aAAKd,KAAL,CAAWqB,WAAX,CAAuBX,UAAvB;AACH,OATD,MAUK;AACD,YAAIrB,SAAS,CAAC,KAAKW,KAAL,CAAW8C,qBAAZ,EAAmC,KAAK9C,KAAL,CAAWiC,QAAX,CAAoB6C,SAAvD,EAAkEI,WAAW,CAAChE,YAA9E,CAAb,EAA0G;AACtG,gBAAMR,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEvB,cADK;AAEfwB,YAAAA,IAAI,EAAE;AACF2D,cAAAA,SAAS,EAAE,IADT;AACeQ,cAAAA,UAAU,EAAE;AAAE/C,gBAAAA,UAAF;AAAcU,gBAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAW0C;AAArC,eAD3B;AAEF7B,cAAAA,cAAc,EAAE,IAFd;AAEoBM,cAAAA,UAAU,EAAE,SAFhC;AAE2CL,cAAAA,SAAS,EAAE;AAFtD;AAFS,WAAnB;AAOA,eAAKd,KAAL,CAAWqB,WAAX,CAAuBX,UAAvB;AACH,SATD,MAUK;AACD,eAAKV,KAAL,CAAWgF,UAAX,CAAsBhD,UAAtB,EAAkC,KAAKhC,KAAL,CAAW0C,UAA7C,EAAyD,gBAAzD;AACH;AACJ;AACJ,KApekB;;AAAA,SAsenBc,MAtemB,GAseT0B,WAAD,IAAiB;AACtB,UAAIC,SAAS,GAAG,EAAhB;;AACA,UAAID,WAAW,CAACnE,cAAZ,CAA2BqE,QAA3B,IAAuCF,WAAW,CAACnE,cAAZ,CAA2BqE,QAA3B,KAAwCpE,SAAnF,EAA8F;AAC1F,eAAOkE,WAAW,CAACnE,cAAZ,CAA2BqE,QAAlC;AACH;;AACDD,MAAAA,SAAS,CAACD,WAAW,CAACK,IAAb,CAAT,GAA8BL,WAAW,CAACnE,cAA1C;AACAoE,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKnF,KAAL,CAAWiC,QAAnC;AACA,YAAMD,UAAU,GAAG;AACfqD,QAAAA,SAAS,EAAEH,WAAW,CAACM,SADR;AAEfF,QAAAA,QAAQ,EAAE,KAAKtF,KAAL,CAAWgC,UAAX,CAAsBsD,QAFjB;AAGfH,QAAAA,SAAS,EAAEA,SAHI;AAIfrE,QAAAA,SAAS,EAAE;AAJI,OAAnB;;AAMA,UAAIzB,SAAS,CAAC,KAAKW,KAAL,CAAW6E,WAAZ,EAAyB,KAAK7E,KAAL,CAAWiC,QAAX,CAAoB6C,SAA7C,EAAwDI,WAAW,CAAChE,YAApE,CAAb,EAAgG;AAC5F,cAAMR,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAEvB,cADK;AAEfwB,UAAAA,IAAI,EAAE;AACF2D,YAAAA,SAAS,EAAE,IADT;AACeQ,YAAAA,UAAU,EAAE;AAAE/C,cAAAA,UAAF;AAAcU,cAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAW0C;AAArC,aAD3B;AAEF7B,YAAAA,cAAc,EAAE,IAFd;AAEoBM,YAAAA,UAAU,EAAE+D,WAAW,CAAC/D,UAF5C;AAEwDL,YAAAA,SAAS,EAAEoE,WAAW,CAACpE;AAF/E;AAFS,SAAnB;AAOA,aAAKd,KAAL,CAAWqB,WAAX,CAAuBX,UAAvB;AACH,OATD,MAUK;AACD,YAAIrB,SAAS,CAAC,KAAKW,KAAL,CAAW8C,qBAAZ,EAAmC,KAAK9C,KAAL,CAAWiC,QAAX,CAAoB6C,SAAvD,EAAkEI,WAAW,CAAChE,YAA9E,CAAb,EAA0G;AACtG,gBAAMR,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEvB,cADK;AAEfwB,YAAAA,IAAI,EAAE;AACF2D,cAAAA,SAAS,EAAE,IADT;AACeQ,cAAAA,UAAU,EAAE;AAAE/C,gBAAAA,UAAF;AAAcU,gBAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAW0C;AAArC,eAD3B;AAEF7B,cAAAA,cAAc,EAAE,IAFd;AAEoBM,cAAAA,UAAU,EAAE+D,WAAW,CAAC/D,UAF5C;AAEwDL,cAAAA,SAAS,EAAEoE,WAAW,CAACpE;AAF/E;AAFS,WAAnB;AAOA,eAAKd,KAAL,CAAWqB,WAAX,CAAuBX,UAAvB;AACH,SATD,MAUK;AACD,eAAKV,KAAL,CAAWgF,UAAX,CAAsBhD,UAAtB,EAAkC,KAAKhC,KAAL,CAAW0C,UAA7C,EAAyD,gBAAzD;AACH;AACJ,OArCqB,CAsCtB;;AACH,KA7gBkB;;AAAA,SAkiBnB+C,aAliBmB,GAkiBH,MAAM;AAClB,YAAMzD,UAAU,GAAG;AACfmD,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAKnF,KAAL,CAAWiC,QADN;AAERyD,YAAAA,OAAO,EAAE,KAAKrF,KAAL,CAAWU,cAAX,CAA0B,eAA1B;AAFD,WADL;AAKP4E,UAAAA,QAAQ,EAAE,KAAKtF,KAAL,CAAWU,cAAX,CAA0B,eAA1B;AALH,SADI;AAQfgE,QAAAA,UAAU,EAAE,KAAK/E,KAAL,CAAW+E;AARR,OAAnB;AAUA,WAAK/E,KAAL,CAAW4F,uBAAX,CAAmC5D,UAAnC,EAA+C,gBAA/C;AACH,KA9iBkB;;AAGf,UAAMzB,SAAS,GAAG;AACdsF,MAAAA,IAAI,EAAE,CADQ;AAEdC,MAAAA,IAAI,EAAE,KAAK9F,KAAL,CAAW+F,QAAX,GAAsBC,QAAQ,CAAC,KAAKhG,KAAL,CAAW+F,QAAX,CAAoB,EAApB,CAAD,CAA9B,GAA0D;AAFlD,KAAlB;AAIA,SAAK1F,KAAL,GAAa;AACT4F,MAAAA,UAAU,EAAE,KADH;AACUC,MAAAA,aAAa,EAAE,KADzB;AACgCC,MAAAA,kBAAkB,EAAE,EADpD;AACwDC,MAAAA,qBAAqB,EAAE,EAD/E;AACmFhG,MAAAA,UAAU,EAAE,EAD/F;AAETG,MAAAA,SAAS,EAAEA,SAFF;AAEaD,MAAAA,uBAAuB,EAAE,KAAKN,KAAL,CAAW0C,UAAX,CAAsBpC,uBAF5D;AAEqF+F,MAAAA,OAAO,EAAE,EAF9F;AAGTC,MAAAA,QAAQ,EAAE,KAAKtG,KAAL,CAAW0C,UAAX,CAAsB4D,QAHvB;AAGiCvF,MAAAA,cAAc,EAAE,EAHjD;AAGqDwF,MAAAA,WAAW,EAAE;AAHlE,KAAb;AAMA,SAAK1D,cAAL,GAAsB,CAAC;AAAE,iBAAW,iBAAb;AAAgC,mBAAa,IAA7C;AAAmD,mBAAa,cAAhE;AAAgF,eAAS,OAAzF;AAAmG,wBAAiB,WAApH;AAAiI,qBAAe;AAAhJ,KAAD,EACtB;AAAE2D,MAAAA,SAAS,EAAE,QAAb;AAAuBC,MAAAA,OAAO,EAAE,aAAhC;AAA8C,eAAS,OAAvD;AAAiE,wBAAiB,WAAlF;AAA+F,qBAAe;AAA9G,KADsB,EAEtB;AAAED,MAAAA,SAAS,EAAE,iBAAb;AAAgCC,MAAAA,OAAO,EAAE,aAAzC;AAAuD,eAAS,OAAhE;AAAyE,wBAAiB,YAA1F;AAAwG,qBAAe;AAAvH,KAFsB,CAAtB;AAOA,SAAKC,WAAL,GAAmB,CAAC;AAAE,iBAAW,cAAb;AAA6B,mBAAa,IAA1C;AAAgD,mBAAa,gBAA7D;AAA+E,eAAS,OAAxF;AAAkG,wBAAiB,WAAnH;AAAgI,qBAAe;AAA/I,KAAD,EACnB;AAAE,iBAAW,cAAb;AAA6B,mBAAa,IAA1C;AAAgD,mBAAa,WAA7D;AAA0E,eAAS,OAAnF;AAA6F,wBAAiB,WAA9G;AAA2H,qBAAe;AAA1I,KADmB,EAEnB;AAAE,iBAAW,iBAAb;AAAgC,mBAAa,IAA7C;AAAmD,mBAAa,cAAhE;AAAgF,eAAS,OAAzF;AAAmG,wBAAiB,YAApH;AAAkI,qBAAe;AAAjJ,KAFmB,CAAnB;AAKA,SAAK9D,iBAAL,GAAyB,CACrB;AAAE,mBAAa,UAAf;AAA0B,iBAAW,WAArC;AAAmD+D,MAAAA,UAAU,EAAC;AAA9D,KADqB,EAErB;AAAE,iBAAW,YAAb;AAA2B,mBAAa,WAAxC;AAAsDA,MAAAA,UAAU,EAAC;AAAjE,KAFqB,EAGrB;AAAEH,MAAAA,SAAS,EAAE,QAAb;AAAuBC,MAAAA,OAAO,EAAE,SAAhC;AAA4CE,MAAAA,UAAU,EAAC;AAAvD,KAHqB,EAIrB;AAAEH,MAAAA,SAAS,EAAE,WAAb;AAA0BC,MAAAA,OAAO,EAAE,cAAnC;AAAmDE,MAAAA,UAAU,EAAC;AAA9D,KAJqB,CAAzB;AAOA,SAAKxD,cAAL,GAAsB,IAAItD,cAAJ,EAAtB;AACH;;AAmBD+G,EAAAA,MAAM,GAAG;AAEL,UAAMC,qBAAqB,GAAG,KAAK7G,KAAL,CAAW0B,UAAX,CAAsBC,GAAtB,CAA0B,4BAA1B,KAA2D,KAAK3B,KAAL,CAAW0B,UAAX,CAAsBE,GAAtB,CAA0B,4BAA1B,EAAwDC,YAAjJ,CAFK,CAGL;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;AACA,UAAMiF,eAAe,GAAG,EAAxB;;AACA,QAAI,KAAK9G,KAAL,CAAWmB,UAAX,KAA0B,iBAA9B,EAAiD;AAC7C,WAAKuF,WAAL,CAAiBK,OAAjB,CAAyBC,IAAI,IAAIA,IAAI,CAACC,SAAL,KAAmB,IAAnB,GAC7BH,eAAe,CAACI,IAAhB,CAAqBF,IAArB,CAD6B,GACA,EADjC;AAGH,KAJD,MAKK;AACD,WAAKnE,cAAL,CAAoBkE,OAApB,CAA4BC,IAAI,IAAIA,IAAI,CAACC,SAAL,KAAmB,IAAnB,GAChCH,eAAe,CAACI,IAAhB,CAAqBF,IAArB,CADgC,GACH,EADjC;AAGH;;AACD,wBACI,uDACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAC,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD,CAAK,OAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD,CAAK,IAAL;AAAU,yBAAgB,aAA1B;AAAwC,MAAA,SAAS,EAAC,iBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,sDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,aAApB;AAAkC,MAAA,MAAM,EAAE,KAAKhH,KAAL,CAAW8C,qBAAX,CAAiCqE,OAAjC,CAAyCN,qBAAzC,MAAoE,CAAC,CAA/G;AACI,MAAA,OAAO,EAAE,MAAM,KAAK7G,KAAL,CAAWyC,2BAAX,CAAuC,kBAAvC,EAA2D,QAA3D,EAAqE,KAAKzC,KAAL,CAAW0C,UAAX,CAAsB0E,oBAAtB,CAA2CC,UAAhH,EAA4HrG,SAA5H,EAAuI6F,qBAAvI,EAA8J,KAAK7G,KAAL,CAAWiC,QAAzK,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAElD,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,oBAGI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,iBAArB;AAAuC,MAAA,cAAc,EAAC,cAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CAFJ,CADJ,CADJ,CAFJ,eAgBI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKiB,KAAL,CAAW0C,UAAX,CAAsB4E,uBAAtB,IAAiD,KAAKtH,KAAL,CAAW0C,UAAX,CAAsB4E,uBAAtB,CAA8CC,MAA9C,GAAuD,CAAxG,gBACG,oBAAC,eAAD;AAAiB,MAAA,GAAG,EAAC,QAArB;AACI,MAAA,cAAc,EAAE,gBADpB;AAEI,MAAA,kBAAkB,EAAE,KAAKjG,yBAAL,CAA+B,KAAKtB,KAAL,CAAW0C,UAAX,CAAsB4E,uBAArD,CAFxB;AAGI,MAAA,UAAU,EAAE;AAAE5E,QAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAW0C,UAAzB;AAAoCT,QAAAA,QAAQ,EAAC,KAAKjC,KAAL,CAAWiC;AAAxD,OAHhB;AAII,MAAA,cAAc,EAAE,KAAKjC,KAAL,CAAWwH,cAJ/B;AAKI,MAAA,mBAAmB,EAAE,gBALzB;AAMI,MAAA,mBAAmB,EAAE,aANzB;AAOI,MAAA,WAAW,EAAE,KAAKxH,KAAL,CAAW0C,UAAX,CAAsB+E,YAAtB,CAAmCjF,cAPpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAUK,EAXV,CADJ,CAhBJ,CADJ,CADJ,CADJ,CADJ,CADJ,eAwEI,0CACK,KAAKxC,KAAL,CAAWa,cAAX,iBACG,oBAAC,aAAD;AAAe,MAAA,IAAI,EAAE,KAAKb,KAAL,CAAWa,cAAhC;AACI,MAAA,UAAU,EAAE,KAAKyD,UADrB;AAEI,MAAA,SAAS,EAAE,KAAKtE,KAAL,CAAWc,SAF1B;AAGI,MAAA,UAAU,EAAE,KAAKd,KAAL,CAAWgC,UAH3B;AAII,MAAA,UAAU,EAAE,KAAKhC,KAAL,CAAWmB,UAJ3B;AAKI,MAAA,WAAW,EAAE,KAAKqD,WALtB;AAMI,MAAA,WAAW,EAAE,KAAKxE,KAAL,CAAWqB,WAN5B;AAOI,MAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWuE,SAPtB;AAQI,MAAA,aAAa,EAAE,KAAKkB,aARxB;AASI,MAAA,cAAc,EAAE,KAAKpF,KAAL,CAAWU,cAAX,IAA6B,EATjD;AAUI,MAAA,eAAe,EAAE+F,eAVrB;AAWI,MAAA,YAAY,EAAE,KAAK9G,KAAL,CAAWuE,SAAX,gBACV,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAE,KAAKvE,KAAL,CAAWc,SAA7B,CACI;AADJ;AAEI,QAAA,eAAe,EAAE,KAAK2C,eAF1B;AAGI,QAAA,UAAU,EAAE,KAAKzD,KAAL,CAAWgC,UAH3B;AAII,QAAA,cAAc,EAAE,KAAK3B,KAAL,CAAWU,cAAX,IAA6B,EAJjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU,GAOV,KAAKf,KAAL,CAAWmB,UAAX,KAA0B,iBAA1B,gBACI,oBAAC,mBAAD;AAAqB,QAAA,cAAc,EAAE,KAAKd,KAAL,CAAWU,cAAX,IAA6B,EAAlE;AACI,QAAA,eAAe,EAAE,KAAK0C,eAD1B;AAEI,QAAA,aAAa,EAAE,KAAKU,aAFxB,CAGI;AAHJ;AAII,QAAA,OAAO,EAAE,KAAKnE,KAAL,CAAWqG,OAAX,IAAsB,EAJnC;AAKI,QAAA,UAAU,EAAE,KAAKrG,KAAL,CAAWgC,UAL3B,CAMA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,gBAUI,oBAAC,0BAAD;AACI,QAAA,cAAc,EAAE,KAAK3B,KAAL,CAAWU,cAAX,IAA6B,EADjD;AAEI,QAAA,eAAe,EAAE,KAAK0C,eAF1B;AAGI,QAAA,aAAa,EAAE,KAAKU,aAHxB,CAIA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA5BZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFR,CAxEJ,CADJ;AAsHH;;AA8JDQ,EAAAA,eAAe,CAACF,QAAD,EAAWC,OAAX,EAAoB;AAC/B,QAAIS,SAAS,GAAG,EAAhB;AACAA,IAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKnF,KAAL,CAAWiC,QAAnC;AACA,QAAIyF,SAAS,GAAG,CAAC,gBAAD,EAAmB,gBAAnB,EAAqC,cAArC,EAAqD,gBAArD,EACZ,WADY,EACC,WADD,EACc,WADd,EAC2B,gBAD3B,EAC6C,oBAD7C,CAAhB;;AAGA,QAAI,KAAK1H,KAAL,CAAWc,SAAX,KAAyB,QAA7B,EAAuC;AAEnCqE,MAAAA,SAAS,CAAC,yBAAD,CAAT,GAAuC;AAAE,sBAAc,KAAKnF,KAAL,CAAW0C,UAAX,CAAsB0E,oBAAtB,CAA2CC;AAA3D,OAAvC;AACAK,MAAAA,SAAS,CAACrF,GAAV,CAAc2E,IAAI,IAAI;AAClB,YAAIA,IAAI,KAAK,cAAb,EAA6B;AACzB,iBAAO7B,SAAS,CAAC,yBAAD,CAAT,CAAqC6B,IAArC,IAA6C,KAAK3G,KAAL,CAAWU,cAAX,CAA0BiG,IAA1B,IAAkC,KAAK3G,KAAL,CAAWU,cAAX,CAA0BiG,IAA1B,EAAgC9C,KAAlE,GAA0E,EAA9H;AACH,SAFD,MAGK;AACD,iBAAOiB,SAAS,CAAC,yBAAD,CAAT,CAAqC6B,IAArC,IAA6C,KAAK3G,KAAL,CAAWU,cAAX,CAA0BiG,IAA1B,IAAkC,KAAK3G,KAAL,CAAWU,cAAX,CAA0BiG,IAA1B,CAAlC,GAAoE,EAAxH;AACH;AACJ,OAPD;AAQH,KAXD,MAYK;AAED7B,MAAAA,SAAS,CAAC,yBAAD,CAAT,GAAuC;AAAE,sBAAc,KAAKnF,KAAL,CAAW0C,UAAX,CAAsB0E,oBAAtB,CAA2CC;AAA3D,OAAvC;AAEAK,MAAAA,SAAS,CAACrF,GAAV,CAAc2E,IAAI,IAAI;AAClB,YAAIA,IAAI,KAAK,cAAb,EAA6B;AACzB,iBAAO7B,SAAS,CAAC,yBAAD,CAAT,CAAqC6B,IAArC,IAA6C,KAAK3G,KAAL,CAAWU,cAAX,CAA0BiG,IAA1B,EAAgC9C,KAApF;AACH,SAFD,MAGK;AACD,iBAAOiB,SAAS,CAAC,yBAAD,CAAT,CAAqC6B,IAArC,IAA6C,KAAK3G,KAAL,CAAWU,cAAX,CAA0BiG,IAA1B,CAApD;AACH;AACJ,OAPD;AAQH;;AACD,UAAMhF,UAAU,GAAG;AACfsD,MAAAA,QAAQ,EAAE,KAAKtF,KAAL,CAAWgC,UAAX,CAAsBsD,QADjB;AAEfD,MAAAA,SAAS,EAAE,aAFI;AAGfF,MAAAA,SAAS,EAAEA,SAHI;AAIfrE,MAAAA,SAAS,EAAE,KAAKd,KAAL,CAAWc,SAJP;AAIkB2D,MAAAA,QAJlB;AAI4BC,MAAAA;AAJ5B,KAAnB;AAMA,WAAO1C,UAAP,CArC+B,CAsC/B;AACH;;AACD4C,EAAAA,eAAe,CAACH,QAAD,EAAWC,OAAX,EAAoB;AAE/B,QAAInE,SAAS,GAAGS,SAAhB;AACA,QAAImE,SAAS,GAAG,EAAhB;AACAA,IAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKnF,KAAL,CAAWiC,QAAnC;AACA,QAAIyF,SAAS,GAAG,CAAC,mBAAD,EAAsB,cAAtB,EACZ,UADY,EACA,WADA,EACa,QADb,EACuB,QADvB,EACiC,WADjC,EAC8C,iBAD9C,CAAhB;AAGA,QAAIzE,UAAU,GAAG,IAAjB;;AACA,QAAI,KAAKjD,KAAL,CAAWc,SAAX,KAAyB,QAA7B,EAAuC;AAEnCqE,MAAAA,SAAS,CAAC,yBAAD,CAAT,GAAuC;AACnC,sBAAc,KAAKnF,KAAL,CAAW0C,UAAX,CAAsB0E,oBAAtB,CAA2CC,UADtB;AAEnC,0BAAkB,KAAKrH,KAAL,CAAW0C,UAAX,CAAsB4D;AAFL,OAAvC;AAKArD,MAAAA,UAAU,GAAG,KAAKjD,KAAL,CAAWe,cAAX,CAA0B4G,iBAAvC;AAEAD,MAAAA,SAAS,CAACrF,GAAV,CAAc2E,IAAI,IAAI;AAClB,eAAO7B,SAAS,CAAC,yBAAD,CAAT,CAAqC6B,IAArC,IAA6C,KAAK3G,KAAL,CAAWU,cAAX,CAA0BiG,IAA1B,IAAkC,KAAK3G,KAAL,CAAWU,cAAX,CAA0BiG,IAA1B,CAAlC,GAAoE,EAAxH;AACH,OAFD;AAGAzG,MAAAA,SAAS,GAAG,KAAKF,KAAL,CAAWE,SAAvB;AACH,KAbD,MAcK;AAED4E,MAAAA,SAAS,CAAC,yBAAD,CAAT,GAAuC;AACnC,sBAAc,KAAKnF,KAAL,CAAW0C,UAAX,CAAsB0E,oBAAtB,CAA2CC,UADtB;AAEnC,0BAAkB,KAAKrH,KAAL,CAAW0C,UAAX,CAAsB4D;AAFL,OAAvC;AAIAoB,MAAAA,SAAS,CAACrF,GAAV,CAAc2E,IAAI,IAAI;AAClB,eAAO7B,SAAS,CAAC,yBAAD,CAAT,CAAqC6B,IAArC,IAA6C,KAAK3G,KAAL,CAAWU,cAAX,CAA0BiG,IAA1B,IAAkC,KAAK3G,KAAL,CAAWU,cAAX,CAA0BiG,IAA1B,CAAlC,GAAoE,EAAxH;AACH,OAFD;AAGA7B,MAAAA,SAAS,CAAC,yBAAD,CAAT,CAAqC,iBAArC,IAA0D,KAAK9E,KAAL,CAAWU,cAAX,IAA6B,KAAKV,KAAL,CAAWU,cAAX,CAA0B6G,eAAvD,GACtD,KAAKvH,KAAL,CAAWU,cAAX,CAA0B6G,eAD4B,GAEpDnI,iBAAiB,CAACuE,GAFxB;AAIH;;AACD,UAAMhC,UAAU,GAAG;AACfsD,MAAAA,QAAQ,EAAE,KAAKtF,KAAL,CAAWgC,UAAX,CAAsBsD,QADjB;AAEfD,MAAAA,SAAS,EAAE,aAFI;AAGfF,MAAAA,SAAS,EAAEA,SAHI;AAGOlC,MAAAA,UAHP;AAIfnC,MAAAA,SAAS,EAAE,KAAKd,KAAL,CAAWc,SAJP;AAIkB2D,MAAAA,QAJlB;AAI4BC,MAAAA,OAJ5B;AAIqCnE,MAAAA;AAJrC,KAAnB;AAMA,WAAOyB,UAAP,CA3C+B,CA6C/B;AACH,GA5buC,CA6bxC;;;AAkFA6F,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAC9B,QAAI,KAAK9H,KAAL,CAAW0C,UAAX,KAA0BoF,aAAa,CAACpF,UAA5C,EAAwD;AAEpD,UAAI;AAAEnC,QAAAA;AAAF,UAAgB,KAAKF,KAAzB;;AACA,UAAI,KAAKL,KAAL,CAAWO,SAAX,KAAyBS,SAA7B,EAAwC;AACpCT,QAAAA,SAAS,GAAG;AAAEsF,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE,KAAK9F,KAAL,CAAW+F,QAAX,GAAsBC,QAAQ,CAAC,KAAKhG,KAAL,CAAW+F,QAAX,CAAoB,EAApB,CAAD,CAA9B,GAA0D;AAA3E,SAAZ;AACH;;AAED,WAAK5F,QAAL,CAAc;AACV8F,QAAAA,UAAU,EAAE,KADF;AACSC,QAAAA,aAAa,EAAE,KADxB;AAEV5F,QAAAA,uBAAuB,EAAE,KAAKN,KAAL,CAAW0C,UAAX,CAAsBpC,uBAFrC;AAGVgG,QAAAA,QAAQ,EAAE,KAAKtG,KAAL,CAAW0C,UAAX,CAAsB4D,QAHtB;AAGgCD,QAAAA,OAAO,EAAE,KAAKrG,KAAL,CAAW0C,UAAX,CAAsB2D,OAH/D;AAGwE9F,QAAAA;AAHxE,OAAd;AAMH;;AAED,QAAI,KAAKP,KAAL,CAAWe,cAAX,KAA8B+G,aAAa,CAAC/G,cAAhD,EAAgE;AAC5D,WAAKZ,QAAL,CAAc;AAAEY,QAAAA,cAAc,EAAE,KAAKf,KAAL,CAAWe;AAA7B,OAAd;AACH;AACJ;;AAliBuC;;AAijB5C,eAAgBnC,UAAU,CAACkB,mBAAD,CAA1B","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Card, Tab, Nav } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddContactInfoManufacturer from '../../pages/contactmaster/AddContactInfoManufacturer';\r\nimport AddSiteManufacturer from '../../pages/contactmaster/AddSiteManufacturer';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, validateEmail, validatePhoneNumber } from '../../components/CommonScript';\r\nimport Esign from '../audittrail/Esign';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport CustomAccordion from '../../components/custom-accordion/custom-accordion.component';\r\nimport ManufacturerTabsAccordion from './ManufacturerTabsAccordion';\r\nimport { toast } from 'react-toastify';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\n//import ReactTooltip from 'react-tooltip';\r\n\r\nclass ManufacturerSiteTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take :this.props.settings ? parseInt(this.props.settings[14]) : 5\r\n        };\r\n        this.state = {\r\n            isSiteOpen: false, isContactOpen: false, siteSelectedRecord: {}, contactSelectedRecord: {}, dataResult: [],\r\n            dataState: dataState, ManufacturerContactInfo: this.props.masterData.ManufacturerContactInfo, Country: [],\r\n            SiteCode: this.props.masterData.SiteCode, selectedRecord: {}, countryCode: [],\r\n\r\n        };\r\n        this.ContactColumns = [{ \"idsName\": \"IDS_CONTACTNAME\", \"mandatory\": true, \"dataField\": \"scontactname\", \"width\": \"150px\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n        { dataField: \"semail\", idsName: \"IDS_EMAILID\",\"width\": \"150px\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n        { dataField: \"sdefaultContact\", idsName: \"IDS_DEFAULT\",\"width\": \"150px\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n     \r\n\r\n        ];\r\n\r\n        this.siteColumns = [{ \"idsName\": \"IDS_SITENAME\", \"mandatory\": true, \"dataField\": \"smanufsitename\", \"width\": \"150px\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n        { \"idsName\": \"IDS_ADDRESS1\", \"mandatory\": true, \"dataField\": \"saddress1\", \"width\": \"150px\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n        { \"idsName\": \"IDS_COUNTRYNAME\", \"mandatory\": true, \"dataField\": \"ncountrycode\", \"width\": \"150px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n\r\n        ];\r\n        this.detailedFieldList = [\r\n            { \"dataField\": \"sphoneno\",\"idsName\": \"IDS_PHONE\" , columnSize:\"4\"},\r\n            { \"idsName\": \"IDS_MOBILE\", \"dataField\": \"smobileno\" , columnSize:\"4\"},\r\n            { dataField: \"sfaxno\", idsName: \"IDS_FAX\" , columnSize:\"4\"},\r\n            { dataField: \"scomments\", idsName: \"IDS_COMMENTS\", columnSize:\"12\" }\r\n          \r\n        ];\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.ManufacturerContactInfo, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    openModalContact = (input) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openChildModal: true, operation: input.operation,\r\n                selectedRecord: undefined,\r\n                defaultSite: undefined, ncontrolCode: input.ncontrolCode,\r\n                screenName: \"IDS_CONTACTDETAILS\", loading: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    render() {\r\n\r\n        const addManufacturerSiteId = this.props.controlMap.has(\"AddManufacturerSiteAddress\") && this.props.controlMap.get(\"AddManufacturerSiteAddress\").ncontrolcode\r\n        // const editManufacturerSiteId = this.props.controlMap.has(\"EditManufacturerSiteAddress\") && this.props.controlMap.get(\"EditManufacturerSiteAddress\").ncontrolcode;\r\n        // const deleteManufacturerSiteId = this.props.controlMap.has(\"DeleteManufacturerSiteAddress\") && this.props.controlMap.get(\"DeleteManufacturerSiteAddress\").ncontrolcode\r\n\r\n\r\n        //const editManufacturerContactId = this.props.controlMap.has(\"EditManufacturerContactInfo\") && this.props.controlMap.get(\"EditManufacturerContactInfo\").ncontrolcode;\r\n        // const deleteManufacturerContactId = this.props.controlMap.has(\"DeleteManufacturerContactInfo\") && this.props.controlMap.get(\"DeleteManufacturerContactInfo\").ncontrolcode\r\n\r\n        //let primaryKeyField = \"nmanufcontactcode\";\r\n\r\n        // const editContactParam = {\r\n        //     screenName: \"ManufacturerContact\", primaryKeyField: \"nmanufcontactcode\", operation: \"update\",\r\n        //     inputParam: this.props.inputParam, userInfo: this.props.userInfo, ncontrolCode: editManufacturerContactId\r\n        // };\r\n\r\n        // const deleteParam = { operation: \"delete\" };\r\n        const mandatoryFields = [];\r\n        if (this.props.screenName === \"IDS_SITEDETAILS\") {\r\n            this.siteColumns.forEach(item => item.mandatory === true ?\r\n                mandatoryFields.push(item) : \"\"\r\n            );\r\n        }\r\n        else {\r\n            this.ContactColumns.forEach(item => item.mandatory === true ?\r\n                mandatoryFields.push(item) : \"\"\r\n            );\r\n        }\r\n        return (\r\n            <>\r\n                <Row noGutters={true}>\r\n                    <Col md='12'>\r\n                        <Card className=\"at-tabs\">\r\n                            <Tab.Content>\r\n                                <Tab.Pane aria-labelledby=\"Version-tab\" className=\"p-0 active show\">\r\n\r\n                                    <Row className=\"no-gutters pt-2 pb-2 col-12 text-right border-bottom\" >\r\n                                        <Col md={12}>\r\n                                            <div className=\"d-flex justify-content-end\">\r\n                                                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\"/> */}\r\n                                                <Nav.Link className=\"add-txt-btn\" hidden={this.props.userRoleControlRights.indexOf(addManufacturerSiteId) === -1}\r\n                                                    onClick={() => this.props.getSiteManufacturerLoadEdit(\"SiteManufacturer\", \"create\", this.props.masterData.selectedManufacturer.nmanufcode, undefined, addManufacturerSiteId, this.props.userInfo)}>\r\n                                                    <FontAwesomeIcon icon={faPlus} /> { }\r\n                                                    <FormattedMessage id='IDS_SITEDETAILS' defaultMessage='Site Details' />\r\n                                                </Nav.Link>\r\n                                            </div>\r\n                                        </Col>\r\n\r\n                                    </Row>\r\n\r\n                                    <Row className=\"no-gutters\">\r\n                                        <Col md={12}>\r\n                                            {this.props.masterData.ManufacturerSiteAddress && this.props.masterData.ManufacturerSiteAddress.length > 0 ?\r\n                                                <CustomAccordion key=\"filter\"\r\n                                                    accordionTitle={\"smanufsitename\"}\r\n                                                    accordionComponent={this.manufacturerSiteAccordion(this.props.masterData.ManufacturerSiteAddress)}\r\n                                                    inputParam={{ masterData: this.props.masterData,userInfo:this.props.userInfo }}\r\n                                                    accordionClick={this.props.getContactInfo}\r\n                                                    accordionPrimaryKey={\"nmanufsitecode\"}\r\n                                                    accordionObjectName={\"siteAddress\"}\r\n                                                    selectedKey={this.props.masterData.selectedSite.nmanufsitecode}\r\n                                                />\r\n                                                : \"\"}\r\n                                        </Col>\r\n                                    </Row>\r\n                                    {/* <Row>\r\n                                        <Col>\r\n                                            <DataGrid\r\n                                                primaryKeyField={primaryKeyField}\r\n                                                expandField=\"expanded\"\r\n                                                detailedFieldList={this.detailedFieldList}\r\n                                                extractedColumnList={this.ContactColumns}\r\n                                                inputParam={this.props.inputParam}\r\n                                                userInfo={this.props.userInfo}\r\n                                                // width=\"600px\"\r\n                                                data={this.state.ManufacturerContactInfo || []}\r\n                                                dataResult={process(this.state.ManufacturerContactInfo || [], this.state.dataState)}\r\n                                                dataState={this.state.dataState}\r\n                                                dataStateChange={this.dataStateChange}\r\n                                                controlMap={this.props.controlMap}\r\n                                                userRoleControlRights={this.props.userRoleControlRights || []}\r\n                                                methodUrl=\"ManufacturerContactInfo\"\r\n                                                fetchRecord={this.props.getContactManufacturerLoadEdit}\r\n                                                editParam={editContactParam}\r\n                                                deleteParam={{ operation: \"delete\" }}\r\n                                                deleteRecord={this.DeleteContact}\r\n                                                //pageable={false}\r\n                                                scrollable={\"scrollable\"}\r\n                                                isActionRequired={true}\r\n                                                selectedId={this.props.selectedId}\r\n                                            // isComponent={true}\r\n                                            >\r\n                                            </DataGrid>\r\n                                        </Col>\r\n                                    </Row> */}\r\n\r\n                                </Tab.Pane >\r\n                            </Tab.Content >\r\n                        </Card >\r\n                    </Col >\r\n                </Row >\r\n                <>\r\n                    {this.props.openChildModal &&\r\n                        <SlideOutModal show={this.props.openChildModal}\r\n                            closeModal={this.closeModal}\r\n                            operation={this.props.operation}\r\n                            inputParam={this.props.inputParam}\r\n                            screenName={this.props.screenName}\r\n                            onSaveClick={this.onSaveClick}\r\n                            updateStore={this.props.updateStore}\r\n                            esign={this.props.loadEsign}\r\n                            validateEsign={this.validateEsign}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                            mandatoryFields={mandatoryFields}\r\n                            addComponent={this.props.loadEsign ?\r\n                                <Esign operation={this.props.operation}\r\n                                    //  formatMessage={this.props.formatMessage}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    inputParam={this.props.inputParam}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                /> :\r\n                                this.props.screenName === \"IDS_SITEDETAILS\" ?\r\n                                    <AddSiteManufacturer selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onComboChange={this.onComboChange}\r\n                                        //   formatMessage={this.props.formatMessage}\r\n                                        Country={this.props.Country || []}\r\n                                        inputParam={this.props.inputParam}\r\n                                    // defaultValue={this.props.countryCode}\r\n                                    />\r\n                                    :\r\n                                    <AddContactInfoManufacturer\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onComboChange={this.onComboChange}\r\n                                    //  formatMessage={this.props.formatMessage}\r\n\r\n                                    />\r\n                            }\r\n                        />\r\n\r\n                    }\r\n\r\n                </>\r\n            </>\r\n        );\r\n    }\r\n    manufacturerSiteAccordion = (manufacturerSiteAddress) => {\r\n        let primaryKeyField = \"nmanufcontactcode\";\r\n        const addManufacturerContactId = this.props.controlMap.has(\"AddManufacturerContactInfo\") && this.props.controlMap.get(\"AddManufacturerContactInfo\").ncontrolcode\r\n        const editManufacturerContactId = this.props.controlMap.has(\"EditManufacturerContactInfo\") && this.props.controlMap.get(\"EditManufacturerContactInfo\").ncontrolcode;\r\n        const editContactParam = {\r\n            screenName: \"ManufacturerContact\", primaryKeyField: \"nmanufcontactcode\", operation: \"update\",\r\n            inputParam: this.props.inputParam, userInfo: this.props.userInfo, ncontrolCode: editManufacturerContactId\r\n        };\r\n        const AddContactParam = {\r\n            screenName: \"ManufacturerContact\", primaryKeyField, undefined, operation: \"create\",\r\n            inputParam: this.props.inputParam, userInfo: this.props.userInfo, ncontrolCode: addManufacturerContactId\r\n        };\r\n\r\n        const accordionMap = new Map();\r\n        manufacturerSiteAddress.map((siteAddress) =>\r\n            accordionMap.set(siteAddress.nmanufsitecode,\r\n                <ManufacturerTabsAccordion siteAddress={siteAddress}\r\n                    getSiteManufacturerLoadEdit={this.props.getSiteManufacturerLoadEdit}\r\n                    masterData={this.props.masterData}\r\n                    ConfirmDelete={this.ConfirmDelete}\r\n                    addManufacturerContactId={addManufacturerContactId}\r\n                    AddContactParam={AddContactParam}\r\n                    openModalContact={this.openModalContact}\r\n                    // tabDetail={this.tabDetail(userSite)}   \r\n\r\n                    primaryKeyField={primaryKeyField}\r\n                    expandField=\"expanded\"\r\n                    detailedFieldList={this.detailedFieldList}\r\n                    extractedColumnList={this.ContactColumns}\r\n                    inputParam={this.props.inputParam}\r\n                    userInfo={this.props.userInfo}\r\n                    data={this.state.ManufacturerContactInfo || []}\r\n                    ManufacturerContactInfo={this.state.ManufacturerContactInfo || []}\r\n                    dataState={this.state.dataState}\r\n                    dataStateChange={this.dataStateChange}\r\n                    controlMap={this.props.controlMap}\r\n                    userRoleControlRights={this.props.userRoleControlRights || []}\r\n                    methodUrl=\"ManufacturerContactInfo\"\r\n                    getContactManufacturerLoadEdit={this.props.getContactManufacturerLoadEdit}\r\n                    editParam={editContactParam}\r\n                    deleteParam={{ operation: \"delete\" }}\r\n                    deleteRecord={this.DeleteContact}\r\n                    scrollable={\"scrollable\"}\r\n                    isActionRequired={true}\r\n                    selectedId={this.props.selectedId}\r\n                    hasDynamicColSize={true}\r\n                />)\r\n        )\r\n        return accordionMap;\r\n    }\r\n\r\n    ConfirmDelete = (obj) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.Delete(obj));\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'ntransactionstatus') {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            }\r\n            else if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n\r\n        }\r\n\r\n        else {\r\n\r\n            if (event.target.name === \"sphoneno\" || event.target.name === \"smobileno\"\r\n                || event.target.name === \"sfaxno\") {\r\n\r\n                if (event.target.value !== \"\") {\r\n                    event.target.value = validatePhoneNumber(event.target.value);\r\n                    selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n                }\r\n                else {\r\n                    selectedRecord[event.target.name] = event.target.value\r\n                }\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n            // selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;//.value;\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.loadEsign;\r\n        let openChildModal = this.props.openChildModal;\r\n        let selectedRecord = this.props.selectedRecord;\r\n        if (this.props.loadEsign) {\r\n            if (this.props.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openChildModal = false;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.state.selectedRecord['semail'] ? validateEmail(this.state.selectedRecord['semail']) : true) {\r\n            let inputParam = {};\r\n\r\n            if (this.props.screenName === \"IDS_SITEDETAILS\") {\r\n                inputParam = this.SaveSiteDetails(saveType, formRef);\r\n            }\r\n            else {\r\n\r\n                inputParam = this.SaveContactInfo(saveType, formRef);\r\n            }\r\n\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALIDEMAIL\" }));\r\n        }\r\n    }\r\n    SaveSiteDetails(saveType, formRef) {\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        let fieldList = [\"nmanufsitecode\", \"nmanufsitecode\", \"ncountrycode\", \"smanufsitename\",\r\n            \"saddress1\", \"saddress2\", \"saddress3\", \"ndefaultstatus\", \"ntransactionstatus\"];\r\n\r\n        if (this.props.operation === \"update\") {\r\n\r\n            inputData[\"manufacturersiteaddress\"] = { \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode };\r\n            fieldList.map(item => {\r\n                if (item === \"ncountrycode\") {\r\n                    return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item].value : \"\";\r\n                }\r\n                else {\r\n                    return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n                }\r\n            })\r\n        }\r\n        else {\r\n\r\n            inputData[\"manufacturersiteaddress\"] = { \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode };\r\n\r\n            fieldList.map(item => {\r\n                if (item === \"ncountrycode\") {\r\n                    return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item].value\r\n                }\r\n                else {\r\n                    return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item]\r\n                }\r\n            })\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"SiteAddress\",\r\n            inputData: inputData,\r\n            operation: this.props.operation, saveType, formRef\r\n        }\r\n        return inputParam;\r\n        //this.props.crudMaster(inputParam, this.props.masterData);\r\n    }\r\n    SaveContactInfo(saveType, formRef) {\r\n\r\n        let dataState = undefined;\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        let fieldList = [\"nmanufcontactcode\", \"scontactname\",\r\n            \"sphoneno\", \"smobileno\", \"semail\", \"sfaxno\", \"scomments\", \"ndefaultcontact\"];\r\n\r\n        let selectedId = null;\r\n        if (this.props.operation === \"update\") {\r\n\r\n            inputData[\"manufacturercontactinfo\"] = {\r\n                \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode,\r\n                \"nmanufsitecode\": this.props.masterData.SiteCode\r\n            };\r\n\r\n            selectedId = this.props.selectedRecord.nmanufcontactcode;\r\n\r\n            fieldList.map(item => {\r\n                return inputData[\"manufacturercontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            })\r\n            dataState = this.state.dataState;\r\n        }\r\n        else {\r\n\r\n            inputData[\"manufacturercontactinfo\"] = {\r\n                \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode,\r\n                \"nmanufsitecode\": this.props.masterData.SiteCode\r\n            };\r\n            fieldList.map(item => {\r\n                return inputData[\"manufacturercontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            })\r\n            inputData[\"manufacturercontactinfo\"]['ndefaultcontact'] = this.state.selectedRecord && this.state.selectedRecord.ndefaultcontact ?\r\n                this.state.selectedRecord.ndefaultcontact\r\n                : transactionStatus.YES\r\n\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"ContactInfo\",\r\n            inputData: inputData, selectedId,\r\n            operation: this.props.operation, saveType, formRef, dataState\r\n        }\r\n        return inputParam;\r\n\r\n        // this.props.crudMaster(inputParam, this.props.masterData);\r\n    }\r\n    // DeleteContact = (e, selectedRecord, Type, methodURL,operation,screenName, ncontrolCode) => {\r\n    DeleteContact = (deleteParam) => {\r\n        let inputData = [];\r\n        if (deleteParam.selectedRecord.expanded !== undefined) {\r\n            delete deleteParam.selectedRecord.expanded\r\n        }\r\n        inputData[\"manufacturercontactinfo\"] = deleteParam.selectedRecord;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        const inputParam = {\r\n            methodUrl: \"ContactInfo\",\r\n            classUrl: this.props.inputParam.classUrl,\r\n            inputData: inputData,\r\n            operation: \"delete\",\r\n            dataState: this.state.dataState\r\n        }\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                    openChildModal: true, screenName: \"Contact\", operation: \"delete\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                        openChildModal: true, screenName: \"Contact\", operation: \"delete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n            }\r\n        }\r\n    }\r\n    //Delete = (e, selectedRecord, Type, methodURL, operation, screenName, ncontrolCode) => {\r\n    Delete = (deleteParam) => {\r\n        let inputData = [];\r\n        if (deleteParam.selectedRecord.expanded && deleteParam.selectedRecord.expanded !== undefined) {\r\n            delete deleteParam.selectedRecord.expanded\r\n        }\r\n        inputData[deleteParam.Type] = deleteParam.selectedRecord;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        const inputParam = {\r\n            methodUrl: deleteParam.methodURL,\r\n            classUrl: this.props.inputParam.classUrl,\r\n            inputData: inputData,\r\n            operation: \"delete\"\r\n        }\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                    openChildModal: true, screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                        openChildModal: true, screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n            }\r\n        }\r\n        //this.props.crudMaster(inputParam, this.props.masterData);\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.masterData !== previousProps.masterData) {\r\n\r\n            let { dataState } = this.state;\r\n            if (this.props.dataState === undefined) {\r\n                dataState = { skip: 0 ,take :this.props.settings ? parseInt(this.props.settings[14]) : 5}\r\n            }\r\n\r\n            this.setState({\r\n                isSiteOpen: false, isContactOpen: false,\r\n                ManufacturerContactInfo: this.props.masterData.ManufacturerContactInfo,\r\n                SiteCode: this.props.masterData.SiteCode, Country: this.props.masterData.Country, dataState\r\n\r\n            });\r\n        }\r\n\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n    }\r\n}\r\nexport default (injectIntl(ManufacturerSiteTab));"]},"metadata":{},"sourceType":"module"}