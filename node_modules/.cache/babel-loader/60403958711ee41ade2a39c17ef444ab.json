{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport merge from \"lodash/merge\";\nimport uuid from \"../utils/uuid\";\nimport mergeWith from \"lodash/mergeWith\";\nimport { settings as defaultSettings } from \"../config/default\";\nimport moment from \"moment\";\nimport { mergeArraysSmart } from \"./stuff\";\nimport { getWidgetForFieldOp } from \"./ruleUtils\";\nimport clone from \"clone\";\nexport var extendConfig = function extendConfig(config, configId) {\n  //operators, defaultOperator - merge\n  //widgetProps (including valueLabel, valuePlaceholder, hideOperator, operatorInlineLabel) - concrete by widget\n  if (config.__configId) {\n    return config;\n  }\n\n  config = _objectSpread({}, config);\n  config.settings = merge({}, defaultSettings, config.settings);\n  config._fieldsCntByType = {};\n  config._funcsCntByType = {};\n  config.types = clone(config.types);\n\n  _extendTypesConfig(config.types, config);\n\n  config.fields = clone(config.fields);\n  config.__fieldNames = {};\n\n  _extendFieldsConfig(config.fields, config);\n\n  config.funcs = clone(config.funcs);\n\n  _extendFuncArgsConfig(config.funcs, config);\n\n  moment.locale(config.settings.locale.moment);\n  Object.defineProperty(config, \"__configId\", {\n    enumerable: false,\n    writable: false,\n    value: configId || uuid()\n  });\n  return config;\n};\n\nfunction _extendTypesConfig(typesConfig, config) {\n  for (var type in typesConfig) {\n    var typeConfig = typesConfig[type];\n\n    _extendTypeConfig(type, typeConfig, config);\n  }\n}\n\nfunction _extendTypeConfig(type, typeConfig, config) {\n  var operators = null,\n      defaultOperator = null;\n  typeConfig.mainWidget = typeConfig.mainWidget || Object.keys(typeConfig.widgets).filter(function (w) {\n    return w != \"field\" && w != \"func\";\n  })[0];\n\n  for (var widget in typeConfig.widgets) {\n    var typeWidgetConfig = typeConfig.widgets[widget];\n\n    if (typeWidgetConfig.operators) {\n      var typeWidgetOperators = typeWidgetConfig.operators;\n\n      if (typeConfig.excludeOperators) {\n        typeWidgetOperators = typeWidgetOperators.filter(function (op) {\n          return !typeConfig.excludeOperators.includes(op);\n        });\n      }\n\n      operators = mergeArraysSmart(operators, typeWidgetOperators);\n    }\n\n    if (typeWidgetConfig.defaultOperator) defaultOperator = typeWidgetConfig.defaultOperator;\n\n    if (widget == typeConfig.mainWidget) {\n      typeWidgetConfig = merge({}, {\n        widgetProps: typeConfig.mainWidgetProps || {}\n      }, typeWidgetConfig);\n    }\n\n    typeConfig.widgets[widget] = typeWidgetConfig;\n  }\n\n  if (!typeConfig.valueSources) typeConfig.valueSources = Object.keys(config.settings.valueSourcesInfo);\n\n  var _iterator = _createForOfIteratorHelper(typeConfig.valueSources),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var valueSrc = _step.value;\n\n      if (valueSrc != \"value\" && !typeConfig.widgets[valueSrc]) {\n        typeConfig.widgets[valueSrc] = {};\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (!typeConfig.operators && operators) typeConfig.operators = Array.from(new Set(operators)); //unique\n\n  if (!typeConfig.defaultOperator && defaultOperator) typeConfig.defaultOperator = defaultOperator;\n}\n\nfunction _extendFieldsConfig(subconfig, config) {\n  var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  for (var field in subconfig) {\n    _extendFieldConfig(subconfig[field], config, [].concat(_toConsumableArray(path), [field]));\n\n    if (subconfig[field].subfields) {\n      _extendFieldsConfig(subconfig[field].subfields, config, [].concat(_toConsumableArray(path), [field]));\n    }\n  }\n}\n\nfunction _extendFuncArgsConfig(subconfig, config) {\n  if (!subconfig) return;\n\n  for (var funcKey in subconfig) {\n    var funcDef = subconfig[funcKey];\n\n    if (funcDef.returnType) {\n      if (!config._funcsCntByType[funcDef.returnType]) config._funcsCntByType[funcDef.returnType] = 0;\n      config._funcsCntByType[funcDef.returnType]++;\n    }\n\n    for (var argKey in funcDef.args) {\n      _extendFieldConfig(funcDef.args[argKey], config, null, true);\n    } // isOptional can be only in the end\n\n\n    if (funcDef.args) {\n      var argKeys = Object.keys(funcDef.args);\n      var tmpIsOptional = true;\n\n      var _iterator2 = _createForOfIteratorHelper(argKeys.reverse()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _argKey = _step2.value;\n          var argDef = funcDef.args[_argKey];\n\n          if (!tmpIsOptional && argDef.isOptional) {\n            delete argDef.isOptional;\n          }\n\n          if (!argDef.isOptional) tmpIsOptional = false;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n\n    if (funcDef.subfields) {\n      _extendFuncArgsConfig(funcDef.subfields, config);\n    }\n  }\n}\n\nfunction _extendFieldConfig(fieldConfig, config) {\n  var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var isFuncArg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var operators = null,\n      defaultOperator = null;\n  var typeConfig = config.types[fieldConfig.type];\n  var excludeOperatorsForField = fieldConfig.excludeOperators || [];\n\n  if (fieldConfig.type != \"!struct\" && fieldConfig.type != \"!group\") {\n    var keysToPutInFieldSettings = [\"listValues\", \"allowCustomValues\", \"validateValue\"];\n    if (!fieldConfig.fieldSettings) fieldConfig.fieldSettings = {};\n\n    for (var _i = 0, _keysToPutInFieldSett = keysToPutInFieldSettings; _i < _keysToPutInFieldSett.length; _i++) {\n      var k = _keysToPutInFieldSett[_i];\n\n      if (fieldConfig[k]) {\n        fieldConfig.fieldSettings[k] = fieldConfig[k];\n        delete fieldConfig[k];\n      }\n    }\n\n    if (fieldConfig.fieldSettings.listValues) {\n      if (config.settings.normalizeListValues) {\n        fieldConfig.fieldSettings.listValues = config.settings.normalizeListValues(fieldConfig.fieldSettings.listValues, fieldConfig.type, fieldConfig.fieldSettings);\n      }\n    }\n\n    if (!typeConfig) {\n      //console.warn(`No type config for ${fieldConfig.type}`);\n      fieldConfig.disabled = true;\n      return;\n    }\n\n    if (!isFuncArg) {\n      if (!config._fieldsCntByType[fieldConfig.type]) config._fieldsCntByType[fieldConfig.type] = 0;\n      config._fieldsCntByType[fieldConfig.type]++;\n    }\n\n    if (!fieldConfig.widgets) fieldConfig.widgets = {};\n    if (isFuncArg) fieldConfig._isFuncArg = true;\n    fieldConfig.mainWidget = fieldConfig.mainWidget || typeConfig.mainWidget;\n    fieldConfig.valueSources = fieldConfig.valueSources || typeConfig.valueSources;\n    var excludeOperatorsForType = typeConfig.excludeOperators || [];\n\n    var _loop = function _loop() {\n      var fieldWidgetConfig = fieldConfig.widgets[widget] || {};\n      var typeWidgetConfig = typeConfig.widgets[widget] || {};\n\n      if (!isFuncArg) {\n        //todo: why I've excluded isFuncArg ?\n        var excludeOperators = [].concat(_toConsumableArray(excludeOperatorsForField), _toConsumableArray(excludeOperatorsForType));\n        var shouldIncludeOperators = fieldConfig.preferWidgets && (widget == \"field\" || fieldConfig.preferWidgets.includes(widget)) || excludeOperators.length > 0;\n\n        if (fieldWidgetConfig.operators) {\n          var addOperators = fieldWidgetConfig.operators.filter(function (o) {\n            return !excludeOperators.includes(o);\n          });\n          operators = [].concat(_toConsumableArray(operators || []), _toConsumableArray(addOperators));\n        } else if (shouldIncludeOperators && typeWidgetConfig.operators) {\n          var _addOperators = typeWidgetConfig.operators.filter(function (o) {\n            return !excludeOperators.includes(o);\n          });\n\n          operators = [].concat(_toConsumableArray(operators || []), _toConsumableArray(_addOperators));\n        }\n\n        if (fieldWidgetConfig.defaultOperator) defaultOperator = fieldWidgetConfig.defaultOperator;\n      }\n\n      if (widget == fieldConfig.mainWidget) {\n        fieldWidgetConfig = merge({}, {\n          widgetProps: fieldConfig.mainWidgetProps || {}\n        }, fieldWidgetConfig);\n      }\n\n      fieldConfig.widgets[widget] = fieldWidgetConfig;\n    };\n\n    for (var widget in typeConfig.widgets) {\n      _loop();\n    }\n\n    if (!isFuncArg) {\n      if (!fieldConfig.operators && operators) fieldConfig.operators = Array.from(new Set(operators));\n      if (!fieldConfig.defaultOperator && defaultOperator) fieldConfig.defaultOperator = defaultOperator;\n    }\n  }\n\n  var computedFieldName = computeFieldName(config, path);\n\n  if (computedFieldName) {\n    fieldConfig.fieldName = computedFieldName;\n  }\n\n  if (path && fieldConfig.fieldName) {\n    config.__fieldNames[fieldConfig.fieldName] = path;\n  }\n}\n\nexport var getFieldRawConfig = function getFieldRawConfig(config, field) {\n  var fieldsKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"fields\";\n  var subfieldsKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"subfields\";\n  if (!field) return null;\n\n  if (field == \"!case_value\") {\n    return {\n      type: \"case_value\",\n      mainWidget: \"case_value\",\n      widgets: {\n        \"case_value\": config.widgets[\"case_value\"]\n      }\n    };\n  }\n\n  var fieldSeparator = config.settings.fieldSeparator; //field = normalizeField(config, field);\n\n  var parts = Array.isArray(field) ? field : field.split(fieldSeparator);\n  var targetFields = config[fieldsKey];\n  if (!targetFields) return null;\n  var fields = targetFields;\n  var fieldConfig = null;\n  var path = [];\n\n  for (var i = 0; i < parts.length; i++) {\n    var part = parts[i];\n    path.push(part);\n    var pathKey = path.join(fieldSeparator);\n    fieldConfig = fields[pathKey];\n\n    if (i < parts.length - 1) {\n      if (fieldConfig && fieldConfig[subfieldsKey]) {\n        fields = fieldConfig[subfieldsKey];\n        path = [];\n      } else {\n        fieldConfig = null;\n      }\n    }\n  }\n\n  return fieldConfig;\n};\n\nvar computeFieldName = function computeFieldName(config, path) {\n  if (!path) return null;\n  var fieldSeparator = config.settings.fieldSeparator;\n\n  var l = _toConsumableArray(path),\n      r = [],\n      f,\n      fConfig;\n\n  while ((f = l.pop()) !== undefined && l.length > 0) {\n    r.unshift(f);\n    fConfig = getFieldRawConfig(config, l);\n\n    if (fConfig.fieldName) {\n      return [fConfig.fieldName].concat(r).join(fieldSeparator);\n    }\n  }\n\n  return null;\n};\n\nexport var normalizeField = function normalizeField(config, field) {\n  var fieldSeparator = config.settings.fieldSeparator;\n  var fieldStr = Array.isArray(field) ? field.join(fieldSeparator) : field;\n\n  if (config.__fieldNames[fieldStr]) {\n    return config.__fieldNames[fieldStr].join(fieldSeparator);\n  }\n\n  return fieldStr;\n};\nexport var getFuncConfig = function getFuncConfig(config, func) {\n  if (!func) return null;\n  var funcConfig = getFieldRawConfig(config, func, \"funcs\", \"subfields\");\n  if (!funcConfig) return null; //throw new Error(\"Can't find func \" + func + \", please check your config\");\n\n  return funcConfig;\n};\nexport var getFuncArgConfig = function getFuncArgConfig(config, funcKey, argKey) {\n  var funcConfig = getFuncConfig(config, funcKey);\n  if (!funcConfig) return null; //throw new Error(`Can't find func ${funcKey}, please check your config`);\n\n  var argConfig = funcConfig.args && funcConfig.args[argKey] || null;\n  if (!argConfig) return null; //throw new Error(`Can't find arg ${argKey} for func ${funcKey}, please check your config`);\n  //merge, but don't merge operators (rewrite instead)\n\n  var typeConfig = config.types[argConfig.type] || {};\n  var ret = mergeWith({}, typeConfig, argConfig || {}, function (objValue, srcValue, _key, _object, _source, _stack) {\n    if (Array.isArray(objValue)) {\n      return srcValue;\n    }\n  });\n  return ret;\n};\nexport var getFieldConfig = function getFieldConfig(config, field) {\n  if (!field) return null;\n  if (_typeof(field) == \"object\" && !field.func && !!field.type) return field;\n  if (_typeof(field) == \"object\" && field.func && field.arg) return getFuncArgConfig(config, field.func, field.arg);\n  var fieldConfig = getFieldRawConfig(config, field);\n  if (!fieldConfig) return null; //throw new Error(\"Can't find field \" + field + \", please check your config\");\n  //merge, but don't merge operators (rewrite instead)\n\n  var typeConfig = config.types[fieldConfig.type] || {};\n  var ret = mergeWith({}, typeConfig, fieldConfig || {}, function (objValue, srcValue, _key, _object, _source, _stack) {\n    if (Array.isArray(objValue)) {\n      return srcValue;\n    }\n  });\n  return ret;\n};\nexport var getOperatorConfig = function getOperatorConfig(config, operator) {\n  var field = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  if (!operator) return null;\n  var opConfig = config.operators[operator];\n\n  if (field) {\n    var fieldConfig = getFieldConfig(config, field);\n    var widget = getWidgetForFieldOp(config, field, operator);\n    var widgetConfig = config.widgets[widget] || {};\n    var fieldWidgetConfig = (fieldConfig && fieldConfig.widgets ? fieldConfig.widgets[widget] : {}) || {};\n    var widgetOpProps = (widgetConfig.opProps || {})[operator];\n    var fieldWidgetOpProps = (fieldWidgetConfig.opProps || {})[operator];\n    var mergedOpConfig = merge({}, opConfig, widgetOpProps, fieldWidgetOpProps);\n    return mergedOpConfig;\n  } else {\n    return opConfig;\n  }\n};\nexport var getFieldWidgetConfig = function getFieldWidgetConfig(config, field, operator) {\n  var widget = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var valueSrc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  if (!field) return null;\n  if (!(operator || widget) && valueSrc != \"const\" && field != \"!case_value\") return null;\n  var fieldConfig = getFieldConfig(config, field);\n  if (!widget) widget = getWidgetForFieldOp(config, field, operator, valueSrc);\n  var widgetConfig = config.widgets[widget] || {};\n  var fieldWidgetConfig = (fieldConfig && fieldConfig.widgets ? fieldConfig.widgets[widget] : {}) || {};\n  var fieldWidgetProps = fieldWidgetConfig.widgetProps || {};\n  var valueFieldSettings = (valueSrc == \"value\" || !valueSrc) && fieldConfig && fieldConfig.fieldSettings || {}; // useful to take 'validateValue'\n\n  var mergedConfig = merge({}, widgetConfig, fieldWidgetProps, valueFieldSettings);\n  return mergedConfig;\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/node_modules/@react-awesome-query-builder/core/esm/utils/configUtils.js"],"names":["_typeof","_toConsumableArray","_defineProperty","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","merge","uuid","mergeWith","settings","defaultSettings","moment","mergeArraysSmart","getWidgetForFieldOp","clone","extendConfig","config","configId","__configId","_fieldsCntByType","_funcsCntByType","types","_extendTypesConfig","fields","__fieldNames","_extendFieldsConfig","funcs","_extendFuncArgsConfig","locale","writable","typesConfig","type","typeConfig","_extendTypeConfig","operators","defaultOperator","mainWidget","widgets","w","widget","typeWidgetConfig","typeWidgetOperators","excludeOperators","op","includes","widgetProps","mainWidgetProps","valueSources","valueSourcesInfo","_iterator","_step","valueSrc","Set","subconfig","path","undefined","field","_extendFieldConfig","concat","subfields","funcKey","funcDef","returnType","argKey","args","argKeys","tmpIsOptional","_iterator2","reverse","_step2","_argKey","argDef","isOptional","fieldConfig","isFuncArg","excludeOperatorsForField","keysToPutInFieldSettings","fieldSettings","_i","_keysToPutInFieldSett","k","listValues","normalizeListValues","disabled","_isFuncArg","excludeOperatorsForType","_loop","fieldWidgetConfig","shouldIncludeOperators","preferWidgets","addOperators","_addOperators","computedFieldName","computeFieldName","fieldName","getFieldRawConfig","fieldsKey","subfieldsKey","fieldSeparator","parts","split","targetFields","part","pathKey","join","l","r","fConfig","pop","unshift","normalizeField","fieldStr","getFuncConfig","func","funcConfig","getFuncArgConfig","argConfig","ret","objValue","srcValue","_key","_object","_source","_stack","getFieldConfig","arg","getOperatorConfig","operator","opConfig","widgetConfig","widgetOpProps","opProps","fieldWidgetOpProps","mergedOpConfig","getFieldWidgetConfig","fieldWidgetProps","valueFieldSettings","mergedConfig"],"mappings":"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","sourcesContent":["import _typeof from \"@babel/runtime/helpers/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport merge from \"lodash/merge\";\nimport uuid from \"../utils/uuid\";\nimport mergeWith from \"lodash/mergeWith\";\nimport { settings as defaultSettings } from \"../config/default\";\nimport moment from \"moment\";\nimport { mergeArraysSmart } from \"./stuff\";\nimport { getWidgetForFieldOp } from \"./ruleUtils\";\nimport clone from \"clone\";\nexport var extendConfig = function extendConfig(config, configId) {\n  //operators, defaultOperator - merge\n  //widgetProps (including valueLabel, valuePlaceholder, hideOperator, operatorInlineLabel) - concrete by widget\n\n  if (config.__configId) {\n    return config;\n  }\n  config = _objectSpread({}, config);\n  config.settings = merge({}, defaultSettings, config.settings);\n  config._fieldsCntByType = {};\n  config._funcsCntByType = {};\n  config.types = clone(config.types);\n  _extendTypesConfig(config.types, config);\n  config.fields = clone(config.fields);\n  config.__fieldNames = {};\n  _extendFieldsConfig(config.fields, config);\n  config.funcs = clone(config.funcs);\n  _extendFuncArgsConfig(config.funcs, config);\n  moment.locale(config.settings.locale.moment);\n  Object.defineProperty(config, \"__configId\", {\n    enumerable: false,\n    writable: false,\n    value: configId || uuid()\n  });\n  return config;\n};\nfunction _extendTypesConfig(typesConfig, config) {\n  for (var type in typesConfig) {\n    var typeConfig = typesConfig[type];\n    _extendTypeConfig(type, typeConfig, config);\n  }\n}\nfunction _extendTypeConfig(type, typeConfig, config) {\n  var operators = null,\n    defaultOperator = null;\n  typeConfig.mainWidget = typeConfig.mainWidget || Object.keys(typeConfig.widgets).filter(function (w) {\n    return w != \"field\" && w != \"func\";\n  })[0];\n  for (var widget in typeConfig.widgets) {\n    var typeWidgetConfig = typeConfig.widgets[widget];\n    if (typeWidgetConfig.operators) {\n      var typeWidgetOperators = typeWidgetConfig.operators;\n      if (typeConfig.excludeOperators) {\n        typeWidgetOperators = typeWidgetOperators.filter(function (op) {\n          return !typeConfig.excludeOperators.includes(op);\n        });\n      }\n      operators = mergeArraysSmart(operators, typeWidgetOperators);\n    }\n    if (typeWidgetConfig.defaultOperator) defaultOperator = typeWidgetConfig.defaultOperator;\n    if (widget == typeConfig.mainWidget) {\n      typeWidgetConfig = merge({}, {\n        widgetProps: typeConfig.mainWidgetProps || {}\n      }, typeWidgetConfig);\n    }\n    typeConfig.widgets[widget] = typeWidgetConfig;\n  }\n  if (!typeConfig.valueSources) typeConfig.valueSources = Object.keys(config.settings.valueSourcesInfo);\n  var _iterator = _createForOfIteratorHelper(typeConfig.valueSources),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var valueSrc = _step.value;\n      if (valueSrc != \"value\" && !typeConfig.widgets[valueSrc]) {\n        typeConfig.widgets[valueSrc] = {};\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  if (!typeConfig.operators && operators) typeConfig.operators = Array.from(new Set(operators)); //unique\n  if (!typeConfig.defaultOperator && defaultOperator) typeConfig.defaultOperator = defaultOperator;\n}\nfunction _extendFieldsConfig(subconfig, config) {\n  var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  for (var field in subconfig) {\n    _extendFieldConfig(subconfig[field], config, [].concat(_toConsumableArray(path), [field]));\n    if (subconfig[field].subfields) {\n      _extendFieldsConfig(subconfig[field].subfields, config, [].concat(_toConsumableArray(path), [field]));\n    }\n  }\n}\nfunction _extendFuncArgsConfig(subconfig, config) {\n  if (!subconfig) return;\n  for (var funcKey in subconfig) {\n    var funcDef = subconfig[funcKey];\n    if (funcDef.returnType) {\n      if (!config._funcsCntByType[funcDef.returnType]) config._funcsCntByType[funcDef.returnType] = 0;\n      config._funcsCntByType[funcDef.returnType]++;\n    }\n    for (var argKey in funcDef.args) {\n      _extendFieldConfig(funcDef.args[argKey], config, null, true);\n    }\n\n    // isOptional can be only in the end\n    if (funcDef.args) {\n      var argKeys = Object.keys(funcDef.args);\n      var tmpIsOptional = true;\n      var _iterator2 = _createForOfIteratorHelper(argKeys.reverse()),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _argKey = _step2.value;\n          var argDef = funcDef.args[_argKey];\n          if (!tmpIsOptional && argDef.isOptional) {\n            delete argDef.isOptional;\n          }\n          if (!argDef.isOptional) tmpIsOptional = false;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    if (funcDef.subfields) {\n      _extendFuncArgsConfig(funcDef.subfields, config);\n    }\n  }\n}\nfunction _extendFieldConfig(fieldConfig, config) {\n  var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var isFuncArg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var operators = null,\n    defaultOperator = null;\n  var typeConfig = config.types[fieldConfig.type];\n  var excludeOperatorsForField = fieldConfig.excludeOperators || [];\n  if (fieldConfig.type != \"!struct\" && fieldConfig.type != \"!group\") {\n    var keysToPutInFieldSettings = [\"listValues\", \"allowCustomValues\", \"validateValue\"];\n    if (!fieldConfig.fieldSettings) fieldConfig.fieldSettings = {};\n    for (var _i = 0, _keysToPutInFieldSett = keysToPutInFieldSettings; _i < _keysToPutInFieldSett.length; _i++) {\n      var k = _keysToPutInFieldSett[_i];\n      if (fieldConfig[k]) {\n        fieldConfig.fieldSettings[k] = fieldConfig[k];\n        delete fieldConfig[k];\n      }\n    }\n    if (fieldConfig.fieldSettings.listValues) {\n      if (config.settings.normalizeListValues) {\n        fieldConfig.fieldSettings.listValues = config.settings.normalizeListValues(fieldConfig.fieldSettings.listValues, fieldConfig.type, fieldConfig.fieldSettings);\n      }\n    }\n    if (!typeConfig) {\n      //console.warn(`No type config for ${fieldConfig.type}`);\n      fieldConfig.disabled = true;\n      return;\n    }\n    if (!isFuncArg) {\n      if (!config._fieldsCntByType[fieldConfig.type]) config._fieldsCntByType[fieldConfig.type] = 0;\n      config._fieldsCntByType[fieldConfig.type]++;\n    }\n    if (!fieldConfig.widgets) fieldConfig.widgets = {};\n    if (isFuncArg) fieldConfig._isFuncArg = true;\n    fieldConfig.mainWidget = fieldConfig.mainWidget || typeConfig.mainWidget;\n    fieldConfig.valueSources = fieldConfig.valueSources || typeConfig.valueSources;\n    var excludeOperatorsForType = typeConfig.excludeOperators || [];\n    var _loop = function _loop() {\n      var fieldWidgetConfig = fieldConfig.widgets[widget] || {};\n      var typeWidgetConfig = typeConfig.widgets[widget] || {};\n      if (!isFuncArg) {\n        //todo: why I've excluded isFuncArg ?\n        var excludeOperators = [].concat(_toConsumableArray(excludeOperatorsForField), _toConsumableArray(excludeOperatorsForType));\n        var shouldIncludeOperators = fieldConfig.preferWidgets && (widget == \"field\" || fieldConfig.preferWidgets.includes(widget)) || excludeOperators.length > 0;\n        if (fieldWidgetConfig.operators) {\n          var addOperators = fieldWidgetConfig.operators.filter(function (o) {\n            return !excludeOperators.includes(o);\n          });\n          operators = [].concat(_toConsumableArray(operators || []), _toConsumableArray(addOperators));\n        } else if (shouldIncludeOperators && typeWidgetConfig.operators) {\n          var _addOperators = typeWidgetConfig.operators.filter(function (o) {\n            return !excludeOperators.includes(o);\n          });\n          operators = [].concat(_toConsumableArray(operators || []), _toConsumableArray(_addOperators));\n        }\n        if (fieldWidgetConfig.defaultOperator) defaultOperator = fieldWidgetConfig.defaultOperator;\n      }\n      if (widget == fieldConfig.mainWidget) {\n        fieldWidgetConfig = merge({}, {\n          widgetProps: fieldConfig.mainWidgetProps || {}\n        }, fieldWidgetConfig);\n      }\n      fieldConfig.widgets[widget] = fieldWidgetConfig;\n    };\n    for (var widget in typeConfig.widgets) {\n      _loop();\n    }\n    if (!isFuncArg) {\n      if (!fieldConfig.operators && operators) fieldConfig.operators = Array.from(new Set(operators));\n      if (!fieldConfig.defaultOperator && defaultOperator) fieldConfig.defaultOperator = defaultOperator;\n    }\n  }\n  var computedFieldName = computeFieldName(config, path);\n  if (computedFieldName) {\n    fieldConfig.fieldName = computedFieldName;\n  }\n  if (path && fieldConfig.fieldName) {\n    config.__fieldNames[fieldConfig.fieldName] = path;\n  }\n}\nexport var getFieldRawConfig = function getFieldRawConfig(config, field) {\n  var fieldsKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"fields\";\n  var subfieldsKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"subfields\";\n  if (!field) return null;\n  if (field == \"!case_value\") {\n    return {\n      type: \"case_value\",\n      mainWidget: \"case_value\",\n      widgets: {\n        \"case_value\": config.widgets[\"case_value\"]\n      }\n    };\n  }\n  var fieldSeparator = config.settings.fieldSeparator;\n  //field = normalizeField(config, field);\n  var parts = Array.isArray(field) ? field : field.split(fieldSeparator);\n  var targetFields = config[fieldsKey];\n  if (!targetFields) return null;\n  var fields = targetFields;\n  var fieldConfig = null;\n  var path = [];\n  for (var i = 0; i < parts.length; i++) {\n    var part = parts[i];\n    path.push(part);\n    var pathKey = path.join(fieldSeparator);\n    fieldConfig = fields[pathKey];\n    if (i < parts.length - 1) {\n      if (fieldConfig && fieldConfig[subfieldsKey]) {\n        fields = fieldConfig[subfieldsKey];\n        path = [];\n      } else {\n        fieldConfig = null;\n      }\n    }\n  }\n  return fieldConfig;\n};\nvar computeFieldName = function computeFieldName(config, path) {\n  if (!path) return null;\n  var fieldSeparator = config.settings.fieldSeparator;\n  var l = _toConsumableArray(path),\n    r = [],\n    f,\n    fConfig;\n  while ((f = l.pop()) !== undefined && l.length > 0) {\n    r.unshift(f);\n    fConfig = getFieldRawConfig(config, l);\n    if (fConfig.fieldName) {\n      return [fConfig.fieldName].concat(r).join(fieldSeparator);\n    }\n  }\n  return null;\n};\nexport var normalizeField = function normalizeField(config, field) {\n  var fieldSeparator = config.settings.fieldSeparator;\n  var fieldStr = Array.isArray(field) ? field.join(fieldSeparator) : field;\n  if (config.__fieldNames[fieldStr]) {\n    return config.__fieldNames[fieldStr].join(fieldSeparator);\n  }\n  return fieldStr;\n};\nexport var getFuncConfig = function getFuncConfig(config, func) {\n  if (!func) return null;\n  var funcConfig = getFieldRawConfig(config, func, \"funcs\", \"subfields\");\n  if (!funcConfig) return null; //throw new Error(\"Can't find func \" + func + \", please check your config\");\n  return funcConfig;\n};\nexport var getFuncArgConfig = function getFuncArgConfig(config, funcKey, argKey) {\n  var funcConfig = getFuncConfig(config, funcKey);\n  if (!funcConfig) return null; //throw new Error(`Can't find func ${funcKey}, please check your config`);\n  var argConfig = funcConfig.args && funcConfig.args[argKey] || null;\n  if (!argConfig) return null; //throw new Error(`Can't find arg ${argKey} for func ${funcKey}, please check your config`);\n\n  //merge, but don't merge operators (rewrite instead)\n  var typeConfig = config.types[argConfig.type] || {};\n  var ret = mergeWith({}, typeConfig, argConfig || {}, function (objValue, srcValue, _key, _object, _source, _stack) {\n    if (Array.isArray(objValue)) {\n      return srcValue;\n    }\n  });\n  return ret;\n};\nexport var getFieldConfig = function getFieldConfig(config, field) {\n  if (!field) return null;\n  if (_typeof(field) == \"object\" && !field.func && !!field.type) return field;\n  if (_typeof(field) == \"object\" && field.func && field.arg) return getFuncArgConfig(config, field.func, field.arg);\n  var fieldConfig = getFieldRawConfig(config, field);\n  if (!fieldConfig) return null; //throw new Error(\"Can't find field \" + field + \", please check your config\");\n\n  //merge, but don't merge operators (rewrite instead)\n  var typeConfig = config.types[fieldConfig.type] || {};\n  var ret = mergeWith({}, typeConfig, fieldConfig || {}, function (objValue, srcValue, _key, _object, _source, _stack) {\n    if (Array.isArray(objValue)) {\n      return srcValue;\n    }\n  });\n  return ret;\n};\nexport var getOperatorConfig = function getOperatorConfig(config, operator) {\n  var field = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  if (!operator) return null;\n  var opConfig = config.operators[operator];\n  if (field) {\n    var fieldConfig = getFieldConfig(config, field);\n    var widget = getWidgetForFieldOp(config, field, operator);\n    var widgetConfig = config.widgets[widget] || {};\n    var fieldWidgetConfig = (fieldConfig && fieldConfig.widgets ? fieldConfig.widgets[widget] : {}) || {};\n    var widgetOpProps = (widgetConfig.opProps || {})[operator];\n    var fieldWidgetOpProps = (fieldWidgetConfig.opProps || {})[operator];\n    var mergedOpConfig = merge({}, opConfig, widgetOpProps, fieldWidgetOpProps);\n    return mergedOpConfig;\n  } else {\n    return opConfig;\n  }\n};\nexport var getFieldWidgetConfig = function getFieldWidgetConfig(config, field, operator) {\n  var widget = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var valueSrc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  if (!field) return null;\n  if (!(operator || widget) && valueSrc != \"const\" && field != \"!case_value\") return null;\n  var fieldConfig = getFieldConfig(config, field);\n  if (!widget) widget = getWidgetForFieldOp(config, field, operator, valueSrc);\n  var widgetConfig = config.widgets[widget] || {};\n  var fieldWidgetConfig = (fieldConfig && fieldConfig.widgets ? fieldConfig.widgets[widget] : {}) || {};\n  var fieldWidgetProps = fieldWidgetConfig.widgetProps || {};\n  var valueFieldSettings = (valueSrc == \"value\" || !valueSrc) && fieldConfig && fieldConfig.fieldSettings || {}; // useful to take 'validateValue'\n  var mergedConfig = merge({}, widgetConfig, fieldWidgetProps, valueFieldSettings);\n  return mergedConfig;\n};"]},"metadata":{},"sourceType":"module"}