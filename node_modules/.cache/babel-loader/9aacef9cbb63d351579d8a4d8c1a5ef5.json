{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\QuaLISWeb\\\\src\\\\pages\\\\designtemplatemapping\\\\ConfigureExportFields.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport 'rc-tabs/assets/index.css';\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\nimport Tabs, { TabPane } from 'rc-tabs';\nimport ReactTooltip from 'react-tooltip';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { SampleType, formCode } from '../../components/Enumeration';\n\nclass ConfigureExportFields extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTabChange = tab => {\n      this.setState({\n        selectedScreen: this.state.screens.find(screen => screen.eventKey === tab) //,extractedColumnList:\n        //  tab==='sample'||tab==='master'?this.state.sampleColumnList:this.state.subsampleColumnList\n\n      });\n    };\n\n    if (this.props.selectedSampleType === SampleType.Masters) {\n      const screens = [{\n        eventKey: 'master',\n        name: this.props.formName\n      }];\n      let sampleColumnList = [{\n        \"title\": \"IDS_EXPORTFIELDS\",\n        \"field\": \"sampleexportfields\",\n        \"width\": \"600px\"\n      }];\n      this.state = {\n        screens,\n        sampleColumnList,\n        extractedColumnList: sampleColumnList,\n        selectedScreen: {\n          eventKey: 'master',\n          name: this.props.formName\n        }\n      };\n    } else if (this.props.selectedSampleType === SampleType.GOODSIN) {\n      const screens = [{\n        eventKey: 'master',\n        name: \"IDS_GOODSIN\"\n      }];\n      let sampleColumnList = [{\n        \"title\": \"IDS_EXPORTFIELDS\",\n        \"field\": \"sampleexportfields\",\n        \"width\": \"600px\"\n      }];\n      this.state = {\n        screens,\n        sampleColumnList,\n        extractedColumnList: sampleColumnList,\n        selectedScreen: {\n          eventKey: 'master',\n          name: \"IDS_GOODSIN\"\n        }\n      };\n    } else {\n      const screens = [{\n        eventKey: 'sample',\n        name: \"IDS_SAMPLE\"\n      }];\n      let sampleColumnList = [{\n        \"title\": \"IDS_EXPORTFIELDS\",\n        \"field\": \"sampleexportfields\",\n        \"width\": \"600px\"\n      }];\n\n      if (this.props.needSubSample) {\n        screens.push({\n          eventKey: 'subsample',\n          name: \"IDS_SUBSAMPLE\"\n        });\n      }\n\n      this.state = {\n        screens,\n        sampleColumnList,\n        extractedColumnList: sampleColumnList,\n        selectedScreen: {\n          eventKey: 'sample',\n          name: \"IDS_SAMPLE\"\n        }\n      };\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AtTabs, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      activeKey: this.state.selectedScreen.eventKey,\n      moreIcon: \"...\",\n      onChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }, this.state.screens.map(screen =>\n    /*#__PURE__*/\n    //{\n    React.createElement(TabPane, {\n      name: screen.eventKey,\n      tab: this.props.intl.formatMessage({\n        id: screen.name\n      }),\n      key: screen.eventKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      className: \"active-paging\",\n      style: {\n        height: '550px'\n      },\n      resizable: true,\n      reorderable: true,\n      scrollable: \"scrollable\",\n      data: this.props.dataResult[this.state.selectedScreen.eventKey] ? this.props.dataResult[this.state.selectedScreen.eventKey] : []\n    }, this.state.dataState, {\n      onDataStateChange: this.dataStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      field: \"label\",\n      title: this.props.intl.formatMessage({\n        id: \"IDS_FIELDS\"\n      }),\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"]['label'],\n        \"data-for\": \"tooltip-grid-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 61\n        }\n      }, row[\"dataItem\"]['label']),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 53\n      }\n    }), this.state.extractedColumnList.map(column => /*#__PURE__*/React.createElement(GridColumn, {\n      field: column.field,\n      title: this.props.intl.formatMessage({\n        id: column.title\n      }),\n      headerClassName: \"text-center\",\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        },\n        \"data-tip\": this.props.intl.formatMessage({\n          id: column.title\n        }),\n        \"data-for\": \"tooltip-grid-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][column.field],\n        onChange: event => this.props.onChangeToggle(event, row[\"dataItem\"], column.field, row.dataIndex, this.state.selectedScreen.eventKey, this.props.operation),\n        checked: row[\"dataItem\"][column.field] || false,\n        name: row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 73\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 61\n      }\n    })))))))) //}\n    ))));\n  }\n\n}\n\nexport default injectIntl(ConfigureExportFields);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/pages/designtemplatemapping/ConfigureExportFields.jsx"],"names":["React","FormattedMessage","injectIntl","AtTabs","Tabs","TabPane","ReactTooltip","Grid","GridColumn","CustomSwitch","LocalizationProvider","AtTableWrap","PerfectScrollbar","SampleType","formCode","ConfigureExportFields","Component","constructor","props","onTabChange","tab","setState","selectedScreen","state","screens","find","screen","eventKey","selectedSampleType","Masters","name","formName","sampleColumnList","extractedColumnList","GOODSIN","needSubSample","push","render","map","intl","formatMessage","id","height","dataResult","dataState","dataStateChange","row","column","field","title","textAlign","event","onChangeToggle","dataIndex","operation","columnIndex"],"mappings":"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","sourcesContent":["\r\nimport React from 'react'\r\nimport { FormattedMessage, injectIntl } from 'react-intl'\r\nimport 'rc-tabs/assets/index.css';\r\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\r\nimport Tabs, { TabPane } from 'rc-tabs';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { Grid,GridColumn } from '@progress/kendo-react-grid';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { SampleType, formCode } from '../../components/Enumeration';\r\n\r\nclass ConfigureExportFields extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        if (this.props.selectedSampleType === SampleType.Masters) {\r\n            const screens = [{ eventKey: 'master', name: this.props.formName }];\r\n\r\n            let sampleColumnList = [{ \"title\": \"IDS_EXPORTFIELDS\", \"field\": \"sampleexportfields\", \"width\": \"600px\" },\r\n            ];\r\n\r\n            this.state = {\r\n                screens, sampleColumnList, extractedColumnList: sampleColumnList,\r\n                selectedScreen: { eventKey: 'master', name: this.props.formName }\r\n            }\r\n\r\n        } else if(this.props.selectedSampleType === SampleType.GOODSIN) {\r\n            const screens = [{ eventKey: 'master', name: \"IDS_GOODSIN\" }];\r\n\r\n            let sampleColumnList = [{ \"title\": \"IDS_EXPORTFIELDS\", \"field\": \"sampleexportfields\", \"width\": \"600px\" },\r\n            ];\r\n\r\n            this.state = {\r\n                screens, sampleColumnList, extractedColumnList: sampleColumnList,\r\n                selectedScreen: { eventKey: 'master', name: \"IDS_GOODSIN\" }\r\n            }\r\n        } \r\n        else {\r\n            const screens = [{ eventKey: 'sample', name: \"IDS_SAMPLE\" }];\r\n\r\n            let sampleColumnList = [{ \"title\": \"IDS_EXPORTFIELDS\", \"field\": \"sampleexportfields\", \"width\": \"600px\" },\r\n            ];\r\n\r\n            if (this.props.needSubSample) {\r\n                screens.push({ eventKey: 'subsample', name: \"IDS_SUBSAMPLE\" });\r\n            }\r\n\r\n            this.state = {\r\n                screens, sampleColumnList, extractedColumnList: sampleColumnList,\r\n                selectedScreen: { eventKey: 'sample', name: \"IDS_SAMPLE\" }\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    onTabChange = (tab) => {\r\n        this.setState({\r\n            selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\r\n            //,extractedColumnList:\r\n          //  tab==='sample'||tab==='master'?this.state.sampleColumnList:this.state.subsampleColumnList\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <AtTabs>\r\n\r\n                    <Tabs activeKey={this.state.selectedScreen.eventKey} moreIcon=\"...\" onChange={this.onTabChange}>\r\n                        {this.state.screens.map(screen =>//{\r\n                            <TabPane name={screen.eventKey} tab={this.props.intl.formatMessage({ id: screen.name })} key={screen.eventKey}>\r\n\r\n                                <PerfectScrollbar>\r\n                                    {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                                    <AtTableWrap className=\"at-list-table\">\r\n                                        <LocalizationProvider language=\"lang\">\r\n                                            <>\r\n                                                <Grid\r\n                                                    className={\"active-paging\"}\r\n                                                    style={{ height: '550px' }}\r\n                                                    resizable\r\n                                                    reorderable\r\n                                                    scrollable={\"scrollable\"}\r\n                                                    data={this.props.dataResult[this.state.selectedScreen.eventKey]?this.props.dataResult[this.state.selectedScreen.eventKey]:[]}\r\n                                                    {...this.state.dataState}\r\n                                                    onDataStateChange={this.dataStateChange}>\r\n                                                    <GridColumn\r\n                                                        field=\"label\"\r\n                                                        title={this.props.intl.formatMessage({ id: \"IDS_FIELDS\" })}\r\n                                                        cell={(row) => (\r\n                                                            <td data-tip={row[\"dataItem\"]['label']} data-for=\"tooltip-grid-wrap\">\r\n                                                                {row[\"dataItem\"]['label']}\r\n                                                            </td>\r\n                                                        )}\r\n                                                    />\r\n                                                    {this.state.extractedColumnList.map(column =>\r\n                                                            <GridColumn\r\n                                                                field={column.field}\r\n                                                                title={this.props.intl.formatMessage({ id: column.title })}\r\n                                                                headerClassName=\"text-center\"\r\n                                                                cell={(row) => (\r\n                                                                    <td style={{ textAlign: \"center\" }} data-tip={this.props.intl.formatMessage({ id: column.title })} data-for=\"tooltip-grid-wrap\">\r\n                                                                        <CustomSwitch type=\"switch\" id={row[\"dataItem\"][column.field]}\r\n                                                                            onChange={(event) => this.props.onChangeToggle(event, row[\"dataItem\"], column.field,\r\n                                                                                row.dataIndex, this.state.selectedScreen.eventKey,\r\n                                                                                this.props.operation)}\r\n                                                                            checked={row[\"dataItem\"][column.field] || false}\r\n                                                                            name={row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n\r\n\r\n                                                                    </td>)}\r\n                                                            />\r\n\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n                                            </>\r\n\r\n                                        </LocalizationProvider>\r\n                                    </AtTableWrap>\r\n                                    {/* <ReactTooltip /> */}\r\n                                </PerfectScrollbar>\r\n\r\n                            </TabPane>\r\n                            //}\r\n                        )}\r\n                    </Tabs>\r\n                </AtTabs>\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default injectIntl(ConfigureExportFields)"]},"metadata":{},"sourceType":"module"}