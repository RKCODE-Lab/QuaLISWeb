{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\approval\\\\Approval.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { faBolt, faEye, faPencilAlt, faSync } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button, Card, Col, Nav, Row } from 'react-bootstrap';\nimport { ContentPanel } from '../../components/App.styles';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { ProductList } from '../testmanagement/testmaster-styled'; //import SplitPane from \"react-splitter-layout\";\n\nimport SplitterLayout from \"react-splitter-layout\";\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { getsubSampleDetail, getTestDetail, getTestChildTabDetail, performAction, updateStore, updateDecision, getRegistrationType, getRegistrationSubType, getFilterStatus, getApprovalSample, getStatusCombo, validateEsignCredential, crudMaster, validateEsignforApproval, getApprovalVersion, getParameterEdit, filterTransactionList, checkListRecord, generateCOAReport, getSampleChildTabDetail, getAttachmentCombo, viewAttachment, deleteAttachment, getCommentsCombo, previewSampleReport, getFilterBasedTest, getEnforceCommentsHistory } from '../../actions';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport ApprovalResultsTab from './ApprovalResultsTab';\nimport { getControlMap, listDataFromDynamicArray, showEsign, sortData, constructOptionList, getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport TransactionListMaster from '../../components/TransactionListMaster';\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\nimport ApprovalFilter from './ApprovalFilter';\nimport { designProperties, transactionStatus, RegistrationType, RegistrationSubType } from '../../components/Enumeration';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport SampleInfoGrid from './SampleInfoGrid';\nimport SampleInfoView from './SampleInfoView';\nimport ApprovalInstrumentTab from './ApprovalInstrumentTab';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport Esign from '../audittrail/Esign';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport EditApprovalParameter from './EditApprovalParameter'; //import ApprovalHistoryTab from './ApprovalHistoryTab';\n\nimport SampleApprovalHistory from './SampleApprovalHistory';\nimport ResultChangeHistoryTab from './ResultChangeHistoryTab';\nimport ApprovalTask from './ApprovalTask';\nimport { templateChangeHandler } from '../checklist/checklist/checklistMethods';\nimport TemplateForm from '../checklist/checklist/TemplateForm';\nimport Attachments from '../attachmentscomments/attachments/Attachments';\nimport { onSaveSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\nimport Comments from '../attachmentscomments/comments/Comments';\nimport { onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions'; //import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport CustomPopOver from '../../components/customPopover';\nimport ScrollBar from 'react-perfect-scrollbar';\nimport ApprovalPrintHistoryTab from './ApprovalPrintHistoryTab';\nimport ApprovalHistoryTab from './ApprovalHistoryTab';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport ReportHistoryTab from './ReportHistoryTab'; // import ReactTooltip from 'react-tooltip';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Approval extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.handleSubSamplePageChange = e => {\n      this.setState({\n        subSampleSkip: e.skip,\n        subSampleTake: e.take\n      });\n      setTimeout(() => {\n        this._scrollBarRef.updateScroll();\n      });\n    };\n\n    this.showAPSampleinfo = () => {\n      this.setState({\n        showSample: true,\n        showTest: false\n      });\n    };\n\n    this.sampleInfoDataStateChange = event => {\n      this.setState({\n        sampleGridDataState: event.dataState\n      });\n    };\n\n    this.verticalPaneSizeChange = val => {\n      console.log(\"val\", val);\n      this.setState({\n        initialVerticalWidth: val - 150\n      });\n    };\n\n    this.downloadReport = input => {\n      let inputParam = {\n        inputData: {\n          selectedRecord: { ...input.inputData\n          },\n          userinfo: this.props.Login.userInfo\n        },\n        classUrl: \"approval\",\n        operation: \"view\",\n        methodUrl: \"Report\"\n      };\n      this.props.viewAttachment(inputParam);\n    };\n\n    this.testTabDetail = () => {\n      const testTabMap = new Map();\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : this.props.Login.masterData.AP_TEST || [];\n      const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.APSelectedTest, \"ntransactiontestcode\"); // let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n\n      let ntransactiontestcode = this.props.Login.masterData.APSelectedTest ? this.props.Login.masterData.APSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n\n      if (this.state.showTest) {\n        testTabMap.set(\"IDS_RESULTS\", /*#__PURE__*/React.createElement(ApprovalResultsTab, {\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          inputParam: this.props.Login.inputParam,\n          dataState: this.state.resultDataState,\n          dataStateChange: this.testDataStateChange,\n          screenName: \"IDS_RESULTS\",\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          getStatusCombo: this.props.getStatusCombo,\n          selectedId: this.props.Login.masterData.selectedParamId,\n          viewFile: this.props.viewAttachment,\n          checkListRecord: this.props.checkListRecord,\n          getEnforceCommentsHistory: this.props.getEnforceCommentsHistory,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1489,\n            columnNumber: 43\n          }\n        }));\n        testTabMap.set(\"IDS_INSTRUMENT\", /*#__PURE__*/React.createElement(ApprovalInstrumentTab, {\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          inputParam: this.props.Login.inputParam,\n          dataState: this.state.instrumentDataState,\n          dataStateChange: this.testDataStateChange,\n          screenName: \"IDS_INSTRUMENT\",\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          selectedId: null,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1504,\n            columnNumber: 46\n          }\n        })); // testTabMap.set(\"IDS_MATERIAL\", <ApprovalResultsTab\n        //     userInfo={this.props.Login.userInfo}\n        //     masterData={this.props.Login.masterData}\n        //     inputParam={this.props.Login.inputParam}\n        //     dataState={this.state.dataState}\n        //     dataStateChange={this.testDataStateChange}\n        //     screenName=\"IDS_MATERIAL\"\n        //     controlMap={this.state.controlMap}\n        //     userRoleControlRights={this.state.userRoleControlRights}\n        //     selectedId={null}\n        // />)\n\n        testTabMap.set(\"IDS_TASK\", /*#__PURE__*/React.createElement(ApprovalTask, {\n          userInfo: this.props.Login.userInfo,\n          ResultUsedTasks: this.props.Login.masterData.ResultUsedTasks,\n          inputParam: this.props.Login.inputParam,\n          dataState: this.state.taskDataState,\n          dataStateChange: this.testDataStateChange,\n          screenName: \"IDS_TASK\",\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          selectedId: null,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1526,\n            columnNumber: 40\n          }\n        }));\n        testTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n          screenName: \"IDS_TESTATTACHMENTS\",\n          selectedMaster: selectedTestList,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n          deleteRecord: this.props.deleteAttachment,\n          fetchRecord: this.props.getAttachmentCombo,\n          onSaveClick: this.onAttachmentSaveClick,\n          masterList: selectedTestList,\n          masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n          addName: \"AddTestAttachment\",\n          editName: \"EditTestAttachment\",\n          deleteName: \"DeleteTestAttachment\",\n          viewName: \"ViewTestAttachment\",\n          methodUrl: \"TestAttachment\",\n          deleteParam: {\n            methodUrl: \"TestAttachment\",\n            ntransactiontestcode,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            esignRights: this.props.Login.userRoleControlRights,\n            screenName: \"IDS_TESTATTACHMENTS\"\n          },\n          editParam: {\n            methodUrl: \"TestAttachment\",\n            ntransactiontestcode,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            esignRights: this.props.Login.userRoleControlRights,\n            screenName: \"IDS_TESTATTACHMENTS\",\n            masterList: selectedTestList\n          },\n          selectedListName: \"IDS_TESTS\",\n          displayName: \"stestsynonym\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1537,\n            columnNumber: 51\n          }\n        }));\n        testTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n          screenName: \"IDS_TESTCOMMENTS\",\n          selectedMaster: selectedTestList,\n          onSaveClick: this.onCommentsSaveClick,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          Comments: this.props.Login.masterData.RegistrationTestComment || [],\n          fetchRecord: this.props.getCommentsCombo,\n          masterList: selectedTestList,\n          masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n          addName: \"AddTestComment\",\n          editName: \"EditTestComment\",\n          deleteName: \"DeleteTestComment\",\n          methodUrl: \"TestComment\",\n          isTestComment: false,\n          primaryKeyField: \"ntestcommentcode\",\n          dataState: this.state.testCommentDataState,\n          dataStateChange: this.testDataStateChange,\n          deleteParam: {\n            methodUrl: \"TestComment\",\n            ntransactiontestcode,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            esignRights: this.props.Login.userRoleControlRights,\n            screenName: \"IDS_TESTCOMMENTS\"\n          },\n          editParam: {\n            methodUrl: \"TestComment\",\n            ntransactiontestcode,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            esignRights: this.props.Login.userRoleControlRights,\n            screenName: \"IDS_TESTCOMMENTS\",\n            operation: \"update\",\n            masterList: selectedTestList,\n            ncontrolCode: editTestCommentsId\n          },\n          selectedListName: \"IDS_TESTS\",\n          displayName: \"stestsynonym\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1577,\n            columnNumber: 48\n          }\n        }));\n        testTabMap.set(\"IDS_RESULTCHANGEHISTORY\", /*#__PURE__*/React.createElement(ResultChangeHistoryTab, {\n          userInfo: this.props.Login.userInfo,\n          ApprovalResultChangeHistory: this.props.Login.masterData.ApprovalResultChangeHistory,\n          inputParam: this.props.Login.inputParam,\n          dataState: this.state.resultChangeDataState,\n          dataStateChange: this.testDataStateChange,\n          screenName: \"IDS_RESULTCHANGEHISTORY\",\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          selectedId: null,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1622,\n            columnNumber: 55\n          }\n        }));\n        testTabMap.set(\"IDS_TESTAPPROVALHISTORY\", /*#__PURE__*/React.createElement(ApprovalHistoryTab, {\n          userInfo: this.props.Login.userInfo,\n          ApprovalHistory: this.props.Login.masterData.ApprovalHistory,\n          inputParam: this.props.Login.inputParam,\n          dataState: this.state.historyDataState,\n          dataStateChange: this.testDataStateChange,\n          screenName: \"IDS_TESTAPPROVALHISTORY\",\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          selectedId: null,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1639,\n            columnNumber: 17\n          }\n        }));\n      }\n\n      return testTabMap;\n    };\n\n    this.onNumericInputOnChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (value === 0 || value === 0.0) {\n        selectedRecord[name] = \"\";\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        selectedRecord[name] = value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onTestTabChange = tabProps => {\n      const activeTestTab = tabProps.screenName;\n\n      if (activeTestTab !== this.props.Login.activeTestTab) {\n        if (this.props.Login.masterData.APSelectedTest && this.props.Login.masterData.APSelectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            APSelectedTest: this.props.Login.masterData.APSelectedTest,\n            ntransactiontestcode: this.props.Login.masterData.APSelectedTest ? String(this.props.Login.masterData.APSelectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n            npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            activeTestTab,\n            screenName: activeTestTab,\n            resultDataState: this.state.resultDataState,\n            instrumentDataState: this.state.instrumentDataState,\n            materialDataState: this.state.materialDataState,\n            taskDataState: this.state.taskDataState,\n            documentDataState: this.state.documentDataState,\n            historyDataState: this.state.historyDataState,\n            resultChangeDataState: this.state.resultChangeDataState,\n            testCommentDataState: this.state.testCommentDataState\n          };\n          this.props.getTestChildTabDetail(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      }\n    };\n\n    this.onSampleTabChange = tabProps => {\n      const activeSampleTab = tabProps.screenName;\n\n      if (activeSampleTab !== this.props.Login.activeSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedSample: this.props.Login.masterData.selectedSample,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSampleTab,\n          activeSampleTab\n        };\n        this.props.getSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n      setTimeout(() => {\n        this._scrollBarRef.updateScroll();\n      });\n    };\n\n    this.handleTestPageChange = e => {\n      this.setState({\n        testskip: e.skip,\n        testtake: e.take\n      });\n    };\n\n    this.checkRetestAction = (action, ncontrolCode) => {\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.AP_TEST];\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.APSelectedTest, \"ntransactiontestcode\");\n\n      if (selectedTestList.length > 0) {\n        if (action.ntransactionstatus === transactionStatus.RETEST) {\n          if (this.props.Login.masterData.retestcount && this.props.Login.masterData.retestcount > 1) {\n            if (selectedTestList.length > 1) {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_SELECTONETESTONLY\"\n              }));\n            } else {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  action,\n                  masterData: this.props.Login.masterData,\n                  openChildModal: true,\n                  screenName: \"IDS_RETESTCOUNT\",\n                  operation: \"dynamic\"\n                }\n              };\n              this.props.updateStore(updateInfo);\n            }\n          } else {\n            this.performTestActions(action, ncontrolCode);\n          }\n        } else {\n          this.performTestActions(action, ncontrolCode);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTEST\"\n        }));\n      }\n    };\n\n    this.performTestActions = (action, ncontrolCode) => {\n      if (action.ntransactionstatus === transactionStatus.RETEST && this.state.selectedRecord && this.state.selectedRecord.retestcount > this.props.Login.masterData.retestcount) {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_MAX\"\n        }) + \": \" + this.props.Login.masterData.retestcount);\n      } else {\n        let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        let ntransCode = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n\n        if (ntransCode === transactionStatus.ALL) {\n          ntransCode = this.props.Login.masterData.FilterStatus.map(status => status.ntransactionstatus).join(\",\");\n        } else {\n          ntransCode = ntransCode + \",\" + action.ntransactionstatus;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = this.state;\n        let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.AP_TEST];\n        testList = testList.slice(testskip, testskip + testtake);\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.APSelectedTest, \"ntransactiontestcode\");\n        const inputParam = {\n          inputData: {\n            'performaction': {\n              npreregno: selectedTestList.map(sample => sample.npreregno).join(\",\"),\n              ntransactionsamplecode: this.props.Login.masterData.APSelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n              ntransactiontestcode: selectedTestList.map(test => test.ntransactiontestcode).join(\",\"),\n              nsectioncode: this.props.Login.masterData.UserSectionValue ? this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.UserSectionValue.nsectioncode) : null,\n              ntestcode: this.props.Login.masterData.realTestValue && this.props.Login.masterData.realTestValue.ntestcode,\n              nTransStatus: action.ntransactionstatus,\n              ntransactionstatus: String(-1),\n              nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n              nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n              nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n              napprovalversioncode: this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode,\n              nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || false,\n              dfrom: obj.fromDate,\n              dto: obj.toDate,\n              nflag: 2,\n              ntype: 1,\n              userinfo: this.props.Login.userInfo,\n              APSelectedSample: this.props.Login.masterData.APSelectedSample,\n              APSelectedSubSample: this.props.Login.masterData.APSelectedSubSample,\n              APSelectedTest: this.props.Login.masterData.APSelectedTest,\n              retestcount: action.ntransactionstatus === transactionStatus.RETEST ? this.state.selectedRecord ? this.state.selectedRecord.retestcount || 1 : 1 : undefined,\n              ncontrolCode,\n              checkBoxOperation: 3\n            },\n            userinfo: this.props.Login.userInfo\n          },\n          masterData: this.props.Login.masterData,\n          methodUrl: \"performaction\",\n          postParamList: this.postParamList\n        };\n\n        if (action.nesignneed === transactionStatus.YES) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openChildModal: true,\n              screenName: \"performaction\",\n              operation: \"dynamic\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.performAction(inputParam);\n        }\n      }\n    };\n\n    this.updateDecision = action => {\n      let ntransCode = this.props.Login.masterData.realFilterStatusValue.ntransactionstatus;\n\n      if (ntransCode === transactionStatus.ALL) {\n        ntransCode = this.props.Login.masterData.FilterStatus.map(status => status.ntransactionstatus).join(\",\");\n      }\n\n      let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n      let {\n        skip,\n        take\n      } = this.state;\n      let sampleList = [...this.props.Login.masterData.AP_SAMPLE];\n      sampleList = sampleList.splice(skip, skip + take);\n      let selectedsampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (selectedsampleList.length > 0) {\n        const inputData = {\n          'updatedecision': {\n            npreregno: selectedsampleList.map(sample => sample.npreregno).join(\",\"),\n            nTransStatus: action.ntransactionstatus,\n            ntransactionstatus: String(ntransCode),\n            dfrom: obj.fromDate,\n            dto: obj.toDate,\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n            nsectioncode: this.props.Login.masterData.UserSectionValue ? this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.UserSectionValue.nsectioncode) : null,\n            ntestcode: this.props.Login.masterData.TestValue ? this.props.Login.masterData.TestValue.ntestcode : 0,\n            nflag: 1,\n            userinfo: this.props.Login.userInfo,\n            napprovalversioncode: String(selectedsampleList[0].napprovalversioncode),\n            napprovalconfigcode: selectedsampleList[0].napprovalconfigcode,\n            selectedSample: this.props.Login.masterData.selectedSample\n          },\n          userinfo: this.props.Login.userInfo\n        };\n        let inputParam = {\n          postParamList: this.postParamList,\n          inputData,\n          masterData: this.props.Login.masterData\n        };\n\n        if (action.nesignneed === transactionStatus.YES) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openChildModal: true,\n              screenName: \"updatedecision\",\n              operation: \"decision\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.updateDecision(inputParam);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLE\"\n        }));\n      }\n    };\n\n    this.onFilterComboChange = (comboData, fieldName) => {\n      if (comboData) {\n        let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n        let inputParamData = {};\n\n        if (fieldName === 'nsampletypecode') {\n          if (comboData.value !== this.props.Login.masterData.SampleTypeValue.nsampletypecode) {\n            inputParamData = {\n              nflag: 2,\n              dfrom: obj.fromDate,\n              dto: obj.toDate,\n              nsampletypecode: comboData.value,\n              userinfo: this.props.Login.userInfo,\n              masterData: this.props.Login.masterData,\n              SampleTypeValue: comboData.item\n            };\n            this.props.getRegistrationType(inputParamData);\n          }\n        } else if (fieldName === 'nregtypecode') {\n          if (comboData.value !== this.props.Login.masterData.RegTypeValue.nregtypecode) {\n            inputParamData = {\n              nflag: 3,\n              dfrom: obj.fromDate,\n              dto: obj.toDate,\n              nsampletypecode: this.props.Login.masterData.SampleTypeValue.nsampletypecode,\n              nregtypecode: comboData.value,\n              userinfo: this.props.Login.userInfo,\n              masterData: this.props.Login.masterData,\n              RegTypeValue: comboData.item\n            };\n            this.props.getRegistrationSubType(inputParamData);\n          }\n        } else if (fieldName === 'nregsubtypecode') {\n          if (comboData.value !== this.props.Login.masterData.RegSubTypeValue.nregsubtypecode) {\n            let inputData = {\n              nflag: 4,\n              dfrom: obj.fromDate,\n              dto: obj.toDate,\n              nsampletypecode: this.props.Login.masterData.SampleTypeValue.nsampletypecode,\n              nregtypecode: this.props.Login.masterData.RegTypeValue.nregtypecode,\n              nregsubtypecode: comboData.value,\n              userinfo: this.props.Login.userInfo,\n              nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode\n            };\n            inputParamData = {\n              inputData,\n              masterData: { ...this.props.Login.masterData,\n                RegSubTypeValue: comboData.item\n              }\n            };\n            this.props.getApprovalVersion(inputParamData);\n          }\n        } else if (fieldName === 'napproveconfversioncode') {\n          if (comboData.value !== this.props.Login.masterData.ApprovalVersionValue.napproveconfversioncode) {\n            // let masterData = { ...this.props.Login.masterData, ApprovalVersionValue: comboData.item }\n            // const updateInfo = {\n            //     typeName: DEFAULT_RETURN,\n            //     data: { masterData }\n            // }\n            // this.props.updateStore(updateInfo);\n            inputParamData = {\n              nflag: 4,\n              dfrom: obj.fromDate,\n              dto: obj.toDate,\n              nsampletypecode: this.props.Login.masterData.SampleTypeValue.nsampletypecode,\n              nregtypecode: this.props.Login.masterData.RegTypeValue.nregtypecode,\n              nregsubtypecode: this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\n              napprovalversioncode: comboData.value,\n              userinfo: this.props.Login.userInfo,\n              masterData: { ...this.props.Login.masterData,\n                ApprovalVersionValue: comboData.item\n              },\n              RegSubTypeValue: this.props.Login.masterData.RegSubTypeValue,\n              nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode\n            };\n            this.props.getFilterStatus(inputParamData);\n          }\n        } else if (fieldName === 'nsectioncode') {\n          if (comboData.value !== this.props.Login.masterData.UserSectionValue.nsectioncode) {\n            // let masterData = { ...this.props.Login.masterData, UserSectionValue: comboData.item }\n            inputParamData = {\n              dfrom: obj.fromDate,\n              dto: obj.toDate,\n              nsampletypecode: this.props.Login.masterData.SampleTypeValue.nsampletypecode,\n              nregtypecode: this.props.Login.masterData.RegTypeValue.nregtypecode,\n              nregsubtypecode: this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\n              napprovalversioncode: this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode,\n              userinfo: this.props.Login.userInfo,\n              masterData: { ...this.props.Login.masterData,\n                UserSectionValue: comboData.item\n              },\n              RegSubTypeValue: this.props.Login.masterData.RegSubTypeValue,\n              ntransactionstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n              nsectioncode: comboData.value === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : comboData.value,\n              stransactionstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.FilterStatusValue.ntransactionstatus\n            };\n            this.props.getFilterBasedTest(inputParamData);\n          }\n        } else if (fieldName === 'njobstatuscode') {\n          if (comboData.value !== this.props.Login.masterData.JobStatusValue.njobstatuscode) {\n            let masterData = { ...this.props.Login.masterData,\n              JobStatusValue: comboData.item\n            };\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        } else if (fieldName === 'ntestcode') {\n          if (comboData.value !== this.props.Login.masterData.TestValue.ntestcode) {\n            let masterData = { ...this.props.Login.masterData,\n              TestValue: comboData.item\n            };\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        } else {\n          if (comboData.value !== this.props.Login.masterData.FilterStatusValue.ntransactionstatus) {\n            //  let masterData = { ...this.props.Login.masterData, FilterStatusValue: comboData.item }\n            //  const updateInfo = {\n            //     typeName: DEFAULT_RETURN,\n            //    data: { masterData }\n            // }\n            inputParamData = {\n              dfrom: obj.fromDate,\n              dto: obj.toDate,\n              nsampletypecode: this.props.Login.masterData.SampleTypeValue.nsampletypecode,\n              nregtypecode: this.props.Login.masterData.RegTypeValue.nregtypecode,\n              nregsubtypecode: this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\n              napprovalversioncode: this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode,\n              userinfo: this.props.Login.userInfo,\n              masterData: { ...this.props.Login.masterData,\n                FilterStatusValue: comboData.item\n              },\n              RegSubTypeValue: this.props.Login.masterData.RegSubTypeValue,\n              ntransactionstatus: comboData.value,\n              stransactionstatus: comboData.value === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : comboData.value,\n              nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode\n            };\n            this.props.getFilterBasedTest(inputParamData);\n          }\n        }\n      }\n    };\n\n    this.onComboChange = comboData => {\n      if (comboData) {\n        let masterData = { ...this.props.Login.masterData,\n          GradeValue: comboData\n        };\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            masterData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChange = event => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      let dfrom = this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date();\n      let dto = this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date();\n      let obj = {};\n\n      if (dateName === 'fromDate') {\n        obj = convertDateValuetoString(dateValue, dto, this.props.Login.userInfo);\n        dfrom = obj.fromDate;\n        dto = obj.toDate;\n      } else {\n        obj = convertDateValuetoString(dfrom, dateValue, this.props.Login.userInfo);\n        dfrom = obj.fromDate;\n        dto = obj.toDate;\n      }\n\n      let inputParam = {\n        inputData: {\n          nflag: 2,\n          nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\n          dfrom: String(dfrom),\n          dto: String(dto),\n          userinfo: this.props.Login.userInfo\n        },\n        masterData: this.props.Login.masterData\n      };\n      this.props.getApprovalVersion(inputParam);\n    };\n\n    this.changeMandatory = (event, dataItem) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      let value = event.currentTarget.checked ? transactionStatus.YES : transactionStatus.NO;\n      selectedRecord[\"approvalParameterEdit\"] = { ...selectedRecord[\"approvalParameterEdit\"],\n        [dataItem.ntransactionresultcode]: value\n      };\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onReload = () => {\n      let {\n        realFromDate,\n        realToDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApprovalVersionValue,\n        realUserSectionValue,\n        realTestValue\n      } = this.props.Login.masterData;\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate,\n        realToDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApprovalVersionValue,\n        realUserSectionValue,\n        realTestValue\n      };\n      let inputData = {\n        npreregno: \"0\",\n        nneedsubsample: realRegSubTypeValue && realRegSubTypeValue.nneedsubsample || false,\n        nsampletypecode: realSampleTypeValue && realSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: realRegTypeValue && realRegTypeValue.nregtypecode || -1,\n        nregsubtypecode: realRegSubTypeValue && realRegSubTypeValue.nregsubtypecode || -1,\n        ntransactionstatus: realFilterStatusValue && realFilterStatusValue.ntransactionstatus !== undefined || realFilterStatusValue.ntransactionstatus !== '0' ? String(realFilterStatusValue.ntransactionstatus) : \"-1\",\n        napprovalconfigcode: realApprovalVersionValue ? realApprovalVersionValue.napprovalconfigcode || -1 : null,\n        napprovalversioncode: realApprovalVersionValue && realApprovalVersionValue.napprovalconfigversioncode ? String(realApprovalVersionValue.napprovalconfigversioncode) : null,\n        nsectioncode: realUserSectionValue ? realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(realUserSectionValue.nsectioncode) : null,\n        ntestcode: realTestValue && realTestValue.ntestcode ? realTestValue.ntestcode : -1,\n        userinfo: this.props.Login.userInfo,\n        activeTestTab: this.props.Login.activeTestTab || \"\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"\",\n        checkBoxOperation: 3,\n        ntype: 2\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.ntransactionstatus !== \"-1\" && inputData.napprovalconfigcode !== -1 && inputData.napprovalversioncode !== \"-1\" && realFilterStatusValue.sfilterstatus !== null) {\n        let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\n        inputData['dfrom'] = obj.fromDate;\n        inputData['dto'] = obj.toDate;\n        let inputParam = {\n          masterData,\n          inputData,\n          searchSampleRef: this.searchSampleRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchTestRef: this.searchTestRef,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake,\n          resultDataState: this.state.resultDataState,\n          instrumentDataState: this.state.instrumentDataState,\n          materialDataState: this.state.materialDataState,\n          taskDataState: this.state.taskDataState,\n          documentDataState: this.state.documentDataState,\n          resultChangeDataState: this.state.resultChangeDataState,\n          testCommentDataState: this.state.testCommentDataState,\n          historyDataState: this.state.historyDataState,\n          samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\n          sampleHistoryDataState: this.state.sampleHistoryDataState\n        };\n        this.props.getApprovalSample(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.onFilterSubmit = () => {\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n      let realFromDate = obj.fromDate;\n      let realToDate = obj.toDate; // let realFromDate = new Date(this.props.Login.masterData.fromDate)\n      // let realToDate = new Date(this.props.Login.masterData.toDate)\n\n      let realSampleTypeValue = this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue;\n      let realRegTypeValue = this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue;\n      let realRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue;\n      let realFilterStatusValue = this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue;\n      let realApprovalVersionValue = this.props.Login.masterData.ApprovalVersionValue && this.props.Login.masterData.ApprovalVersionValue;\n      let realUserSectionValue = this.props.Login.masterData.UserSectionValue && this.props.Login.masterData.UserSectionValue;\n      let realTestValue = this.props.Login.masterData.TestValue && this.props.Login.masterData.TestValue;\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate,\n        realToDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApprovalVersionValue,\n        realUserSectionValue,\n        realTestValue\n      };\n      let inputData = {\n        npreregno: \"0\",\n        nsampletypecode: this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode || -1,\n        nregtypecode: parseInt(this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode) || -1,\n        nregsubtypecode: parseInt(this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode) || -1,\n        ntransactionstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus !== undefined || this.props.Login.masterData.FilterStatusValue.ntransactionstatus !== '0' ? String(this.props.Login.masterData.FilterStatusValue.ntransactionstatus) : \"-1\",\n        napprovalconfigcode: this.props.Login.masterData.ApprovalVersionValue ? this.props.Login.masterData.ApprovalVersionValue.napprovalconfigcode || -1 : null,\n        napprovalversioncode: this.props.Login.masterData.ApprovalVersionValue && this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode ? String(this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode) : null,\n        nsectioncode: this.props.Login.masterData.UserSectionValue ? this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.UserSectionValue.nsectioncode) : null,\n        ntestcode: this.props.Login.masterData.TestValue ? this.props.Login.masterData.TestValue.ntestcode : -1,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample || -1,\n        userinfo: this.props.Login.userInfo,\n        activeTestTab: this.props.Login.activeTestTab,\n        activeSampleTab: this.props.Login.activeSampleTab,\n        checkBoxOperation: 3,\n        ntype: 2\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.ntransactionstatus !== \"-1\" && inputData.napprovalconfigcode !== -1 && inputData.napprovalversioncode !== \"-1\" && realFilterStatusValue.sfilterstatus !== null && inputData.ntestcode !== undefined) {\n        // let obj = this.covertDatetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate)\n        inputData['dfrom'] = obj.fromDate;\n        inputData['dto'] = obj.toDate;\n        let inputParam = {\n          masterData,\n          inputData,\n          searchSampleRef: this.searchSampleRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchTestRef: this.searchTestRef,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake,\n          resultDataState: this.state.resultDataState,\n          instrumentDataState: this.state.instrumentDataState,\n          materialDataState: this.state.materialDataState,\n          taskDataState: this.state.taskDataState,\n          documentDataState: this.state.documentDataState,\n          resultChangeDataState: this.state.resultChangeDataState,\n          testCommentDataState: this.state.testCommentDataState,\n          historyDataState: this.state.historyDataState,\n          samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\n          sampleHistoryDataState: this.state.sampleHistoryDataState\n        };\n        this.props.getApprovalSample(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.testDataStateChange = event => {\n      switch (this.props.Login.activeTestTab) {\n        case \"IDS_RESULTS\":\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          this.setState({\n            instrumentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_MATERIAL\":\n          this.setState({\n            materialDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TASK\":\n          this.setState({\n            taskDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            instrumentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          this.setState({\n            documentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          this.setState({\n            resultChangeDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTAPPROVALHISTORY\":\n          this.setState({\n            historyDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.sampleGridDataStateChange = event => {\n      this.setState({\n        sampleGridDataState: event.dataState\n      });\n    };\n\n    this.sampleDataStateChange = event => {\n      switch (this.props.Login.activeSampleTab) {\n        case \"IDS_SAMPLEINFO\":\n          this.setState({\n            sampleGridDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_SAMPLEAPPROVALHISTORY\":\n          this.setState({\n            sampleHistoryDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_PRINTHISTORY\":\n          this.setState({\n            samplePrintHistoryDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_REPORTHISTORY\":\n          this.setState({\n            reportHistoryDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            sampleGridDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      let ok = true;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n\n      if (this.props.Login.operation === 'enforce') {\n        inputData[\"enforcestatus\"] = {\n          ngradecode: this.props.Login.masterData.GradeValue.value || -1,\n          ntransactiontestcode: this.state.selectedRecord.ntransactiontestcode,\n          ntransactionresultcode: this.state.selectedRecord.ntransactionresultcode,\n          senforcestatuscomment: this.state.selectedRecord.senforcestatuscomment || \"\",\n          selectedTestCode: this.props.Login.masterData.APSelectedTest.map(test => test.ntransactiontestcode).join(\",\")\n        };\n        inputParam = {\n          methodUrl: \"EnforceStatus\",\n          classUrl: 'approval',\n          inputData: inputData,\n          postParam: {\n            selectedObject: \"APSelectedTest\",\n            primaryKeyField: \"ntransactiontestcode\"\n          },\n          operation: \"update\"\n        };\n      } else if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord: this.state.selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation\n        };\n        inputParam = onSaveSampleAttachment(saveParam);\n      } else {\n        let approvalparameter = [];\n\n        if (this.state.selectedRecord.approvalParameterEdit) {\n          Object.keys(this.state.selectedRecord.approvalParameterEdit).map(key => approvalparameter.push({\n            ntransactionresultcode: key,\n            nreportmandatory: this.state.selectedRecord.approvalParameterEdit[key]\n          }));\n          inputData[\"approvalparameter\"] = approvalparameter;\n          inputParam = {\n            methodUrl: \"ApprovalParameter\",\n            classUrl: 'approval',\n            inputData: inputData,\n            postParam: {\n              selectedObject: \"APSelectedTest\",\n              primaryKeyField: \"ntransactiontestcode\"\n            },\n            operation: \"update\"\n          };\n        } else {\n          ok = false;\n          this.handleClose();\n        }\n      }\n\n      if (ok) {\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openChildModal: true,\n              operation: this.props.Login.operation,\n              screenName: \"IDS_ENFORCESTATUS\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openChildModal\");\n        }\n      }\n    };\n\n    this.handleClose = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let openChildModal = this.props.Login.openChildModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let templateData = this.props.Login.templateData;\n      let operation = this.props.Login.operation;\n      let openTemplateModal = this.props.Login.openTemplateModal;\n\n      if (this.props.Login.loadEsign) {\n        if (operation === \"delete\" || operation === \"dynamic\" || operation === 'reportgeneration' || this.props.Login.operation === 'decision') {\n          loadEsign = false;\n          openModal = false;\n          openChildModal = false;\n          selectedRecord = {};\n          templateData = {};\n          operation = undefined;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openTemplateModal = false;\n        openModal = false;\n        openChildModal = false;\n        selectedRecord = {};\n        templateData = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          templateData,\n          selectedParamId: null,\n          operation,\n          openTemplateModal\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData,\n        operation: this.props.Login.operation\n      };\n\n      if (this.props.Login.operation === 'dynamic' || this.props.Login.operation === 'reportgeneration' || this.props.Login.operation === 'decision') {\n        this.props.validateEsignforApproval(inputParam, \"openChildModal\");\n      } else {\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\n      }\n    };\n\n    this.onTemplateInputChange = (event, control) => {\n      let selectedRecord = templateChangeHandler(1, this.state.selectedRecord, event, control);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTemplateComboChange = (comboData, control) => {\n      let selectedRecord = templateChangeHandler(2, this.state.selectedRecord, comboData, control);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTemplateDateChange = (dateData, control) => {\n      let selectedRecord = templateChangeHandler(3, this.state.selectedRecord, dateData, control);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.AP_TEST];\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.APSelectedTest, \"ntransactiontestcode\");\n\n      if (selectedTestList.length > 0) {\n        if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\n          let saveParam = {\n            userInfo: this.props.Login.userInfo,\n            isTestComment: this.props.isTestComment,\n            selectedRecord,\n            masterData: this.props.Login.masterData,\n            saveType,\n            formRef,\n            operation: this.props.Login.operation,\n            ntransactiontestcode: this.props.Login.masterData.APSelectedTest ? this.props.Login.masterData.APSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n          };\n          inputParam = onSaveTestComments(saveParam, selectedTestList);\n        }\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              operation: this.props.Login.operation,\n              screenName: this.props.Login.screenName\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTEST\"\n        }));\n      }\n    };\n\n    this.onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      let {\n        testskip,\n        testtake,\n        skip,\n        take\n      } = this.state;\n      let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.AP_TEST];\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.APSelectedTest, \"ntransactiontestcode\");\n      let sampleList = this.props.Login.masterData.searchedSample ? [...this.props.Login.masterData.searchedSample] : [...this.props.Login.masterData.AP_SAMPLE];\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let ok = true;\n\n      if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n\n        if (selectedSampleList.length > 0) {\n          inputParam = onSaveSampleAttachment(saveParam, selectedSampleList);\n        } else {\n          ok = false;\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTSAMPLE\"\n          }));\n        }\n      } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          ntransactiontestcode: this.props.Login.masterData.APSelectedTest ? this.props.Login.masterData.APSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n\n        if (selectedTestList.length > 0) {\n          inputParam = onSaveTestAttachment(saveParam, selectedTestList);\n        } else {\n          ok = false;\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTSAMPLE\"\n          }));\n        }\n      }\n\n      if (ok) {\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              operation: this.props.Login.operation,\n              screenName: this.props.Login.screenName\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\n        }\n      }\n    };\n\n    this.generateCOAReport = (inputData, ncontrolCode) => {\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        let inputParam = {\n          reporparam: inputData\n        };\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openChildModal: true,\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: \"reportgeneration\",\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.generateCOAReport(inputData);\n      }\n    };\n\n    this.searchSampleRef = React.createRef();\n    this.searchSubSampleRef = React.createRef();\n    this.searchTestRef = React.createRef();\n    this.formRef = React.createRef();\n    this.state = {\n      sampleGridDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      resultDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'ssamplearno'\n        }]\n      },\n      instrumentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'ssamplearno'\n        }]\n      },\n      materialDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'ssamplearno'\n        }]\n      },\n      taskDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'ssamplearno'\n        }]\n      },\n      testCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'stestsynonym'\n        }]\n      },\n      documentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'ssamplearno'\n        }]\n      },\n      resultChangeDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'ssamplearno'\n        }]\n      },\n      sampleHistoryDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      reportHistoryDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      historyDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'ssamplearno'\n        }, {\n          field: 'stestsynonym'\n        }]\n      },\n      dataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      samplePrintHistoryDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      masterStatus: \"\",\n      error: \"\",\n      oldComboData: {},\n      selectedRecord: {},\n      operation: \"\",\n      screenName: undefined,\n      showSample: false,\n      showTest: true,\n      sampleListColumns: [],\n      subSampleListColumns: [],\n      testListColumns: [],\n      TableExpandableItem: [],\n      SingleItem: [],\n      SampleGridItem: [],\n      SampleGridExpandableItem: [],\n      sampleListMainField: [],\n      subSampleListMainField: [],\n      testListMainField: [],\n      testMoreField: [],\n      firstPane: 0,\n      paneHeight: 0,\n      secondPaneHeight: 0,\n      tabPane: 0,\n      SampletypeList: [],\n      RegistrationTypeList: [],\n      RegistrationSubTypeList: [],\n      FilterStatusList: [],\n      ConfigVersionList: [],\n      UserSectionList: [],\n      TestList: [],\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      testskip: 0,\n      testtake: this.props.Login.settings && this.props.Login.settings[12],\n      splitChangeWidthPercentage: 22,\n      subSampleSkip: 0,\n      subSampleTake: 5\n    }; //this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.multilingualMsg !== undefined && props.Login.multilingualMsg !== \"\") {\n      toast.warn(props.intl.formatMessage({\n        id: props.Login.multilingualMsg\n      }));\n      props.Login.multilingualMsg = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  } // onSecondaryPaneSizeChange = (e, val) => {\n  //     this.setState({\n  //         firstPane: e - val,\n  //         tabPane: e - 80,\n  //         childPane: this.state.parentHeight - e - 80\n  //     })\n  // }\n\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  constructDesign(list) {\n    let newList = [];\n\n    if (list.length > 0) {\n      list.map(i => {\n        newList.push({\n          [designProperties.LABEL]: i,\n          [designProperties.VALUE]: i\n        });\n      });\n    }\n\n    return newList;\n  }\n\n  showAPTestList() {\n    this.setState({\n      showTest: true,\n      showSample: false\n    });\n  }\n\n  gridfillingColumn(data) {\n    //  const tempArray = [];\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n        \"dataField\": option[designProperties.VALUE],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\"\n      };\n    });\n    return temparray;\n  }\n\n  render() {\n    let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo); // let obj = this.covertDatetoString(this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date(), this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date())\n\n    let sampleSearchField = [\"sarno\", \"dregdate\", \"sdecisionstatus\", \"ssampletypestatus\", \"smanuflotno\", \"smanufname\", \"smanufsitename\", \"sproductcatname\", \"sproductname\", \"sspecname\"];\n\n    if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n      sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\", \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\", \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"];\n    }\n\n    const filterSampleParam = {\n      inputListName: \"AP_SAMPLE\",\n      selectedObject: \"APSelectedSample\",\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"approval/getApprovalSubSample\",\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTests\"\n      }],\n      fecthInputObject: {\n        ntype: 2,\n        nflag: 2,\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode || -1,\n        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode || -1,\n        nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || false,\n        ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus !== undefined ? String(this.props.Login.masterData.realFilterStatusValue.ntransactionstatus) : \"-1\",\n        napprovalconfigcode: this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigcode || -1 : null,\n        napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue && this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode ? String(this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode) : null,\n        nsectioncode: this.props.Login.masterData.realUserSectionValue ? this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.realUserSectionValue.nsectioncode) : null,\n        ntestcode: this.props.Login.masterData.TestValue && this.props.Login.masterData.TestValue.ntestcode,\n        dfrom: obj.fromDate,\n        dto: obj.toDate,\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      // searchFieldList: [\"sarno\", \"dregdate\", \"sdecisionstatus\", \"ssampletypestatus\", \"smanuflotno\", \"smanufname\", \"smanufsitename\", \"sproductcatname\", \"sproductname\", \"sspecname\"],\n      searchFieldList: sampleSearchField,\n      changeList: [\"AP_SUBSAMPLE\", \"AP_TEST\", \"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ApprovalHistory\", \"SampleApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\", \"selectedTest\", \"PrintHistory\", \"COAHistory\"]\n    };\n    const filterSubSampleParam = {\n      inputListName: \"AP_SUBSAMPLE\",\n      selectedObject: \"APSelectedSubSample\",\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"approval/getApprovalTest\",\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTests\"\n      }],\n      fecthInputObject: {\n        ntype: 3,\n        nflag: 2,\n        npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\"',\") : \"-1\",\n        nsampletypecode: this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode || -1,\n        nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode || -1,\n        nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode || -1,\n        nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || false,\n        ntransactionstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus !== undefined ? String(this.props.Login.masterData.FilterStatusValue.ntransactionstatus) : \"-1\",\n        napprovalconfigcode: this.props.Login.masterData.ApprovalVersionValue ? this.props.Login.masterData.ApprovalVersionValue.napprovalconfigcode || -1 : null,\n        napprovalversioncode: this.props.Login.masterData.ApprovalVersionValue && this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode ? this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode : null,\n        nsectioncode: this.props.Login.masterData.UserSectionValue ? this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.UserSectionValue.nsectioncode) : null,\n        dfrom: obj.fromDate,\n        dto: obj.toDate,\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"sarno\", \"ssamplearno\"],\n      changeList: [\"AP_TEST\", \"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSubSample\", \"selectedTest\"]\n    };\n    const filterTestParam = {\n      inputListName: \"AP_TEST\",\n      selectedObject: \"APSelectedTest\",\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      fecthInputObject: {\n        ntransactiontestcode: this.props.Login.masterData.APSelectedTest ? this.props.Login.masterData.APSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n        userinfo: this.props.Login.userInfo\n      },\n      isSingleSelect: false,\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"sarno\", \"ssamplearno\", \"stestsynonym\", \"dtransactiondate\", \"smethodname\", \"ssectionname\", \"ssourcename\", \"stransdisplaystatus\", \"sinstrumentcatname\", \"stestname\"],\n      changeList: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ApprovalHistory\", \"SampleApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"APSelectedTest\"]\n    };\n    let AP_SampleList = this.props.Login.masterData.AP_SAMPLE ? sortData(this.props.Login.masterData.AP_SAMPLE, 'descending', 'npreregno') : []; //let AP_SubSampleList = this.props.Login.masterData.AP_SUBSAMPLE ? sortData(this.props.Login.masterData.AP_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\n\n    let AP_SubSampleList = this.props.Login.masterData.AP_SUBSAMPLE ? this.props.Login.masterData.AP_SUBSAMPLE : [];\n    let AP_TestList = this.props.Login.masterData.AP_TEST ? this.props.Login.masterData.AP_TEST : [];\n    let decisionStatus = this.props.Login.masterData.decisionStatus ? sortData(this.props.Login.masterData.decisionStatus, 'ascending', 'ntransactionstatus') : [];\n    let actionStatus = this.props.Login.masterData.actionStatus ? sortData(this.props.Login.masterData.actionStatus, 'descending', 'ntransactionstatus') : [];\n    let subSampleGetParam = {\n      masterData: this.props.Login.masterData,\n      ntransactionstatus: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus : this.props.Login.masterData.FilterStatusValue ? this.props.Login.masterData.FilterStatusValue.ntransactionstatus : -1),\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      nsectioncode: this.props.Login.masterData.UserSectionValue ? this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.UserSectionValue.nsectioncode) : null,\n      ntestcode: this.props.Login.masterData.realTestValue ? this.props.Login.masterData.realTestValue.ntestcode : -1,\n      napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode : -1,\n      nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_RESULTS\",\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      screenName: this.props.Login.screenName,\n      searchSubSampleRef: this.searchSubSampleRef,\n      searchTestRef: this.searchTestRef,\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      subSampleSkip: this.state.subSampleSkip,\n      subSampleTake: this.state.subSampleTake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      historyDataState: this.state.historyDataState,\n      samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\n      sampleHistoryDataState: this.state.sampleHistoryDataState\n    };\n    let testGetParam = {\n      masterData: this.props.Login.masterData,\n      ntransactionstatus: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus : this.props.Login.masterData.FilterStatusValue ? this.props.Login.masterData.FilterStatusValue.ntransactionstatus : -1),\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      npreregno: this.props.Login.masterData.APSelectedSample && this.props.Login.masterData.APSelectedSample.map(sample => sample.npreregno).join(\",\"),\n      napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode : -1,\n      nsectioncode: this.props.Login.masterData.UserSectionValue ? this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.UserSectionValue.nsectioncode) : null,\n      ntestcode: this.props.Login.masterData.realTestValue ? this.props.Login.masterData.realTestValue.ntestcode : -1,\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_RESULTS\",\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEINFO\",\n      screenName: this.props.Login.screenName,\n      searchTestRef: this.searchTestRef\n    };\n    let testChildGetParam = {\n      masterData: this.props.Login.masterData,\n      ntransactionstatus: String(this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus),\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      npreregno: this.props.Login.masterData.APSelectedSample && this.props.Login.masterData.APSelectedSample.map(sample => sample.npreregno).join(\",\"),\n      ntransactionsamplecode: this.props.Login.masterData.APSelectedSubSample && this.props.Login.masterData.APSelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_RESULTS\",\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEINFO\",\n      screenName: this.props.Login.screenName,\n      postParamList: this.postParamList,\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      historyDataState: this.state.historyDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState\n    };\n    let breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": obj.breadCrumbFrom\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": obj.breadCrumbto\n    }, {\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.ssampletypename || \"NA\" : this.props.Login.masterData.SampleTypeValue ? this.props.Login.masterData.SampleTypeValue.ssampletypename || \"NA\" : \"NA\"\n    }, {\n      \"label\": \"IDS_REGTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" : this.props.Login.masterData.RegTypeValue ? this.props.Login.masterData.RegTypeValue.sregtypename || \"NA\" : \"NA\"\n    }, {\n      \"label\": \"IDS_REGSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename || \"-\" : this.props.Login.masterData.RegSubTypeValue ? this.props.Login.masterData.RegSubTypeValue.sregsubtypename : \"-\"\n    }, {\n      \"label\": \"IDS_CONFIGVERSION\",\n      \"value\": this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.sversionname || \"-\" : this.props.Login.masterData.ApprovalVersionValue ? this.props.Login.masterData.ApprovalVersionValue.sversionname || \"-\" : \"-\"\n    }, {\n      \"label\": \"IDS_SECTION\",\n      \"value\": this.props.Login.masterData.realUserSectionValue ? this.props.Login.masterData.realUserSectionValue.ssectionname || \"-\" : this.props.Login.masterData.UserSectionValue ? this.props.Login.masterData.UserSectionValue.ssectionname || \"-\" : \"-\"\n    }, {\n      \"label\": \"IDS_Test\",\n      \"value\": this.props.Login.masterData.realTestValue ? this.props.Login.masterData.realTestValue.stestsynonym || \"-\" : this.props.Login.masterData.TestValue ? this.props.Login.masterData.TestValue.stestsynonym || \"-\" : \"-\"\n    }, {\n      \"label\": \"IDS_FILTERSTATUS\",\n      \"value\": this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.sfilterstatus || \"-\" : this.props.Login.masterData.FilterStatusValue ? this.props.Login.masterData.FilterStatusValue.sfilterstatus || \"-\" : \"-\"\n    }]; // let obj={ntransactionstatus:21,sfilterstatus:this.props.intl.formatMessage({id:\"IDS_PARTIAL\"})\n    //    let selectFilterStatus={ntransactionstatus:21,sfilterstatus:this.props.intl.formatMessage({id:\"IDS_PARTIAL\"})}\n    //     let selectionList=\n    //         this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []\n    //     selectionList.push(selectFilterStatus);\n\n    const reportPreviewId = this.state.controlMap.has(\"SamplePreviewReport\") && this.state.controlMap.get(\"SamplePreviewReport\").ncontrolcode;\n    const editParamId = this.state.controlMap.has(\"EditReportMandatory\") && this.state.controlMap.get(\"EditReportMandatory\").ncontrolcode;\n    const TestDecisionActionId = this.state.controlMap.has(\"TestDecisionAction\") && this.state.controlMap.get(\"TestDecisionAction\").ncontrolcode;\n    const TestApprovalActionId = this.state.controlMap.has(\"TestApprovalAction\") && this.state.controlMap.get(\"TestApprovalAction\").ncontrolcode;\n    const reportGenerateId = this.state.controlMap.has(\"GenerateCOA\") && this.state.controlMap.get(\"GenerateCOA\").ncontrolcode;\n    this.postParamList = [{\n      filteredListName: \"searchedSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSampleRef,\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"approval/getApprovalSubSample\",\n      fecthInputObject: subSampleGetParam,\n      selectedObject: \"selectedSample\",\n      inputListName: \"AP_SAMPLE\",\n      updatedListname: \"updatedSample\",\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTests\"\n      }],\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\", \"SampletypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\", \"FilterStatusList\", \"UserSectionList\"]\n    }, {\n      filteredListName: \"searchedSubSample\",\n      updatedListname: \"updatedSubSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSubSampleRef,\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"approval/getApprovalTest\",\n      fecthInputObject: testGetParam,\n      selectedObject: \"selectedSubSample\",\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTests\"\n      }],\n      inputListName: \"AP_SUBSAMPLE\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\", \"SampletypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\", \"FilterStatusList\", \"UserSectionList\"]\n    }, {\n      filteredListName: \"searchedTests\",\n      clearFilter: \"no\",\n      searchRef: this.searchTestRef,\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      fecthInputObject: testChildGetParam,\n      selectedObject: \"APSelectedTest\",\n      inputListName: \"AP_TEST\",\n      updatedListname: \"updatedTest\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\", \"SampletypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\", \"FilterStatusList\", \"UserSectionList\", \"TestList\"]\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height sticky_head_parent\",\n      ref: parentHeight => {\n        this.parentHeight = parentHeight;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      needMultiSelect: true,\n      masterList: this.props.Login.masterData.searchedSample || AP_SampleList,\n      selectedMaster: this.props.Login.masterData.APSelectedSample,\n      primaryKeyField: \"npreregno\",\n      getMasterDetail: this.props.getsubSampleDetail,\n      inputParam: subSampleGetParam,\n      additionalParam: ['napprovalversioncode'],\n      mainField: 'sarno',\n      selectionList: this.state.selectedFilter,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"sfilterstatus\",\n      selectionColorField: \"stranscolor\",\n      selectedListName: \"APSelectedSample\",\n      objectName: \"sample\",\n      listName: \"IDS_SAMPLE\",\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedSample\",\n      needValidation: true,\n      validationKey: \"napprovalversioncode\",\n      validationFailMsg: \"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\",\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      subFields: this.state.DynamicSampleColumns,\n      moreField: this.state.sampleMoreField,\n      jsonDesignFields: true,\n      jsonField: 'jsondata',\n      showStatusLink: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\" //statusColor=\"sdecisioncolor\"\n      ,\n      statusColor: \"stranscolor\",\n      showStatusIcon: false,\n      showStatusName: true,\n      needFilter: true,\n      searchRef: this.searchSampleRef,\n      filterParam: filterSampleParam,\n      skip: this.state.skip,\n      take: this.state.take,\n      handlePageChange: this.handlePageChange,\n      splitModeClass: this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : '',\n      childTabsKey: [\"AP_SUBSAMPLE\", \"AP_TEST\", \"SampleApprovalHistory\", \"RegistrationAttachment\", \"PrintHistory\", \"COAHistory\"],\n      actionIcons: [this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ? {\n        title: \"Report\",\n        controlname: \"reports\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(reportPreviewId) === -1,\n        // onClick: ()=>this.previewSampleReport(reportPreviewId),\n        //inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }\n        onClick: this.props.previewSampleReport,\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: reportPreviewId\n        }\n      } : this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE ? {\n        title: \"Report\",\n        controlname: \"reports\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(reportGenerateId) === -1,\n        // onClick: ()=>this.previewSampleReport(reportPreviewId),\n        //inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }\n        onClick: obj => this.generateCOAReport(obj, reportGenerateId),\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: reportPreviewId,\n          nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode\n        }\n      } : {}],\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        onClick: () => this.onReload() // title={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 57\n        }\n      })), this.props.Login.masterData.decisionStatus && this.state.userRoleControlRights.indexOf(TestDecisionActionId) !== -1 && this.props.Login.masterData.decisionStatus.length > 0 ? /*#__PURE__*/React.createElement(CustomPopOver, {\n        icon: faBolt,\n        nav: true,\n        data: decisionStatus,\n        btnClasses: \"btn-circle btn_grey ml-2\",\n        textKey: \"sdecisionstatus\",\n        iconKey: \"ntransactionstatus\",\n        dynamicButton: value => this.updateDecision(value),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 57\n        }\n      }) : \"\")),\n      filterComponent: [{\n        \"Sample Filter\": /*#__PURE__*/React.createElement(ApprovalFilter, {\n          SampleType: this.state.SampletypeList || [],\n          SampleTypeValue: this.props.Login.masterData.SampleTypeValue || [],\n          RegType: this.state.RegistrationTypeList || [],\n          RegTypeValue: this.props.Login.masterData.RegTypeValue || [],\n          RegSubType: this.state.RegistrationSubTypeList || [],\n          RegSubTypeValue: this.props.Login.masterData.RegSubTypeValue || [],\n          ApprovalVersion: this.state.ConfigVersionList || [],\n          ApprovalVersionValue: this.props.Login.masterData.ApprovalVersionValue || [],\n          UserSection: this.state.UserSectionList || [],\n          UserSectionValue: this.props.Login.masterData.UserSectionValue || [],\n          JobStatus: this.props.Login.masterData.JobStatus || [],\n          Test: this.state.TestList || [],\n          TestValue: this.props.Login.masterData.TestValue || [],\n          FilterStatus: this.state.FilterStatusList || [],\n          FilterStatusValue: this.props.Login.masterData.FilterStatusValue || [],\n          fromDate: this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date(),\n          toDate: this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date(),\n          onFilterComboChange: this.onFilterComboChange,\n          handleDateChange: this.handleDateChange,\n          userInfo: this.props.Login.userInfo,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 66\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(ScrollBar, {\n      ref: ref => {\n        this._scrollBarRef = ref;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      customClassName: \"detailed-inner\",\n      vertical: true,\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      onSecondaryPaneSizeChange: this.verticalPaneSizeChange,\n      secondaryInitialSize: 400,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.showTest === true ? {\n        display: \"block\",\n        background: \"#FFFF\"\n      } : {\n        display: \"none\",\n        background: \"#FFFF\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 69\n      }\n    }, \"Sub Sample\"))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth,\n      masterList: this.props.Login.masterData.searchedSubSample || AP_SubSampleList,\n      selectedMaster: this.props.Login.masterData.APSelectedSubSample,\n      primaryKeyField: \"ntransactionsamplecode\",\n      getMasterDetail: this.props.getTestDetail,\n      inputParam: testGetParam,\n      additionalParam: [],\n      mainField: \"ssamplearno\",\n      selectedListName: \"APSelectedSubSample\",\n      objectName: \"subSample\",\n      listName: \"IDS_SUBSAMPLE\",\n      jsonField: 'jsondata',\n      jsonDesignFields: true,\n      showStatusLink: false,\n      showStatusName: true // statusFieldName=\"stransdisplaystatus\"\n      // statusField=\"ntransactionstatus\"\n      // selectionField=\"ntransactionstatus\"\n      // selectionFieldName=\"stransdisplaystatus\"\n      // selectionColorField=\"stranscolor\"\n      // statusColor=\"stranscolor\"\n      ,\n      subFields: this.state.DynamicSubSampleColumns,\n      moreField: this.state.subSampleMoreField,\n      needValidation: false,\n      needMultiSelect: true,\n      needFilter: false,\n      searchRef: this.searchSubSampleRef,\n      filterParam: filterSampleParam,\n      skip: this.state.subSampleSkip,\n      take: this.state.subSampleTake,\n      handlePageChange: this.handleSubSamplePageChange,\n      childTabsKey: [\"AP_TEST\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 65\n      }\n    }))), /*#__PURE__*/React.createElement(ContentPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 73\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showAPSampleinfo(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708,\n        columnNumber: 73\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth,\n      needMultiSelect: true,\n      masterList: this.props.Login.masterData.searchedTests || AP_TestList,\n      selectedMaster: this.props.Login.masterData.APSelectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: this.props.getTestChildTabDetail,\n      inputParam: testChildGetParam,\n      additionalParam: [],\n      mainField: 'stestsynonym',\n      selectedListName: \"APSelectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\",\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      showStatusIcon: false,\n      showStatusName: true,\n      subFieldsLabel: true,\n      jsonField: 'jsondata',\n      jsonDesignFields: false,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"sfilterstatus\",\n      selectionColorField: \"scolorhexcode\",\n      selectionList: this.props.Login.masterData.FilterStatus || [],\n      needSubFieldlabel: true,\n      subFields: this.state.DynamicTestColumns,\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTests\",\n      searchRef: this.searchTestRef,\n      filterParam: filterTestParam,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      showMoreResetList: true,\n      showMoreResetListName: \"AP_SAMPLE\",\n      handlePageChange: this.handleTestPageChange,\n      buttonCount: 5,\n      childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"ApprovalHistory\"],\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 764,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        hidden: this.state.userRoleControlRights.indexOf(editParamId) === -1,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_EDITREPORTMANDATORY\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-place\": \"left\",\n        className: \"btn btn-circle outline-grey\",\n        onClick: () => this.props.getParameterEdit({\n          APSelectedTest: this.props.Login.masterData.APSelectedTest,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 81\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPencilAlt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 773,\n          columnNumber: 85\n        }\n      })), this.props.Login.masterData.actionStatus && this.state.userRoleControlRights.indexOf(TestApprovalActionId) !== -1 && actionStatus.length > 0 ? /*#__PURE__*/React.createElement(CustomPopOver, {\n        icon: faBolt,\n        nav: true,\n        data: actionStatus,\n        btnClasses: \"btn-circle btn_grey ml-2\",\n        dynamicButton: value => this.checkRetestAction(value, TestApprovalActionId),\n        textKey: \"stransdisplaystatus\",\n        iconKey: \"ntransactionstatus\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 779,\n          columnNumber: 85\n        }\n      }) : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 69\n      }\n    })))))), /*#__PURE__*/React.createElement(ContentPanel, {\n      style: this.state.showSample === true ? {\n        display: \"block\"\n      } : {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 798,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 799,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 805,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 806,\n        columnNumber: 81\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showAPTestList(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 808,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811,\n        columnNumber: 81\n      }\n    }), \" \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 815,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(ScrollBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 816,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: this.state.initialVerticalWidth\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 817,\n        columnNumber: 81\n      }\n    }, this.props.Login.masterData.APSelectedSample && this.props.Login.masterData.APSelectedSample.length === 1 ? /*#__PURE__*/React.createElement(SampleInfoView, {\n      data: this.props.Login.masterData.APSelectedSample && this.props.Login.masterData.APSelectedSample.length > 0 ? this.props.Login.masterData.APSelectedSample[this.props.Login.masterData.APSelectedSample.length - 1] : {},\n      SingleItem: this.props.Login.masterData.APSelectedSample && this.props.Login.masterData.APSelectedSample ? this.state.SingleItem : [],\n      screenName: \"IDS_SAMPLEINFO\",\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 819,\n        columnNumber: 89\n      }\n    }) : /*#__PURE__*/React.createElement(SampleInfoGrid, {\n      selectedSample: this.props.Login.masterData.APSelectedSample,\n      userInfo: this.props.Login.userInfo || {},\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      dataState: this.state.sampleGridDataState,\n      dataStateChange: this.sampleInfoDataStateChange,\n      extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n      detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n      primaryKeyField: \"npreregno\",\n      expandField: \"expanded\",\n      screenName: \"IDS_SAMPLEINFO\",\n      jsonField: \"jsondata\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830,\n        columnNumber: 89\n      }\n    }))))))))))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 855,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(ScrollBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 856,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857,\n        columnNumber: 53\n      }\n    }, this.state.showSample ? /*#__PURE__*/React.createElement(CustomTabs, {\n      paneHeight: this.state.tabPane,\n      activeKey: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      tabDetail: this.sampleTabDetail(),\n      onTabChange: this.onSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 860,\n        columnNumber: 61\n      }\n    }) : this.state.showTest ? /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 864,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 865,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 866,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 867,\n        columnNumber: 77\n      }\n    }, \"Parameter Results\"))), /*#__PURE__*/React.createElement(CustomTabs, {\n      paneHeight: this.state.tabPane,\n      activeKey: this.props.Login.activeTestTab || \"IDS_RESULTS\",\n      tabDetail: this.testTabDetail(),\n      onTabChange: this.onTestTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870,\n        columnNumber: 69\n      }\n    })) : \"\")))))))))), this.props.Login.openChildModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.props.Login.operation === 'dynamic' ? () => this.performTestActions(this.props.Login.action, TestApprovalActionId) : this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: this.props.Login.screenName,\n      closeModal: this.handleClose,\n      show: this.props.Login.openChildModal,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.operation === 'enforce' ? [{\n        \"idsName\": \"IDS_COMMENTS\",\n        \"dataField\": \"senforcestatuscomment\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }] : [],\n      loginoperation: this.props.Login.operation === 'view' ? true : false //graphView={this.props.Login.operation !=='enforce' ? this.props.Login.operation:undefined}\n      ,\n      noSave: this.props.Login.operation === 'view' ? true : false,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1064,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === 'enforce' ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1072,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1073,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        name: \"ngradecode\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_STATUS\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_STATUS\"\n        }),\n        value: this.props.Login.masterData.GradeValue || [],\n        options: this.props.Login.masterData.Grade || [],\n        optionId: \"ngradecode\",\n        optionValue: \"sgradename\",\n        isMandatory: true,\n        isMulti: false,\n        isDisabled: false,\n        isSearchable: false,\n        closeMenuOnSelect: true,\n        isClearable: false,\n        onChange: event => this.onComboChange(event, 'ngradecode'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1074,\n          columnNumber: 41\n        }\n      }), /*#__PURE__*/React.createElement(FormTextarea, {\n        name: \"senforcestatuscomment\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_COMMENTS\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_COMMENTS\"\n        }),\n        value: this.state.selectedRecord ? this.state.selectedRecord[\"senforcestatuscomment\"] : \"\",\n        rows: \"2\",\n        isMandatory: true,\n        required: false,\n        maxLength: 255,\n        onChange: event => this.onInputOnChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1090,\n          columnNumber: 41\n        }\n      }))) : this.props.Login.operation === 'dynamic' ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1104,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1105,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormNumericInput, {\n        name: \"retestcount\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_RETESTCOUNT\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_MAX\"\n        }) + \": \" + this.props.Login.masterData.retestcount,\n        type: \"text\",\n        strict: true,\n        className: \"form-control\",\n        value: this.state.selectedRecord ? this.state.selectedRecord.retestcount : \"\",\n        maxLength: 6,\n        onChange: event => this.onNumericInputOnChange(event, 'retestcount'),\n        isMandatory: \"*\",\n        required: true,\n        noStyle: true // min={1}\n        // max={this.props.Login.masterData.retestcount}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1118,\n          columnNumber: 45\n        }\n      }))) : this.props.Login.operation === 'view' ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1137,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1138,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"nresultparamcommenthistorycode\",\n        data: this.props.Login.masterData.enforceCommentsHistory || [],\n        dataResult: this.props.Login.masterData.enforceCommentsHistory || [],\n        dataState: {\n          skip: 0,\n          take: this.props.Login.masterData.enforceCommentsHistory ? this.props.Login.masterData.enforceCommentsHistory.length : 0\n        } // dataStateChange={this.dataStateChange}\n        ,\n        extractedColumnList: [{\n          \"idsName\": \"IDS_ENFORCESTATUSCOMMENT\",\n          \"dataField\": \"senforcestatuscomment\",\n          \"width\": \"450px\"\n        }],\n        userInfo: this.props.Login.userInfo,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        inputParam: this.props.Login.inputParam,\n        pageable: false,\n        hideColumnFilter: true,\n        isActionRequired: false,\n        isToolBarRequired: false,\n        scrollable: \"scrollable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1139,\n          columnNumber: 49\n        }\n      }))) : /*#__PURE__*/React.createElement(EditApprovalParameter, {\n        ApprovalParamEdit: this.props.Login.ApprovalParamEdit || [],\n        changeMandatory: this.changeMandatory,\n        selectedRecord: this.state.selectedRecord.approvalParameterEdit || {},\n        nsubsampleneed: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nsubsampleneed,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1163,\n          columnNumber: 41\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1047,\n        columnNumber: 21\n      }\n    }) : \"\", this.props.Login.masterData.ChecklistData && this.props.Login.screenName === 'IDS_CHECKLISTRESULT' ? /*#__PURE__*/React.createElement(TemplateForm, {\n      templateData: this.props.Login.masterData.ChecklistData,\n      needSaveButton: false,\n      formRef: this.formRef,\n      onTemplateInputChange: this.onTemplateInputChange,\n      handleClose: this.handleClose,\n      onTemplateComboChange: this.onTemplateComboChange,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.props.onSaveCheckList,\n      Login: this.props.Login,\n      viewScreen: this.props.Login.openTemplateModal,\n      selectedRecord: this.state.selectedRecord || [],\n      onTemplateDateChange: this.onTemplateDateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1173,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      userRoleControlRights,\n      controlMap,\n      sampleListColumns,\n      subSampleListColumns,\n      testListColumns,\n      SingleItem,\n      sampleListMainField,\n      subSampleListMainField,\n      testListMainField,\n      SampleGridItem,\n      SampleGridExpandableItem,\n      testMoreField,\n      resultDataState,\n      instrumentDataState,\n      materialDataState,\n      taskDataState,\n      documentDataState,\n      resultChangeDataState,\n      historyDataState,\n      testCommentDataState,\n      samplePrintHistoryDataState,\n      sampleHistoryDataState,\n      selectedRecord,\n      SampletypeList,\n      RegistrationTypeList,\n      RegistrationSubTypeList,\n      FilterStatusList,\n      ConfigVersionList,\n      UserSectionList,\n      TestList,\n      skip,\n      take,\n      testskip,\n      testtake,\n      selectedFilter,\n      DynamicSampleColumns,\n      DynamicSubSampleColumns,\n      DynamicTestColumns,\n      DynamicGridItem,\n      DynamicGridMoreField\n    } = this.state;\n    let bool = false;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      bool = true; // this.setState({userRoleControlRights, controlMap});\n    }\n\n    if (this.props.Login.masterData.RegSubTypeValue !== previousProps.Login.masterData.RegSubTypeValue) {\n      if (this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nsubsampleneed === transactionStatus.NO) {\n        let dataState = {\n          skip: 0,\n          take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n          group: [{\n            field: 'sarno'\n          }]\n        };\n        resultDataState = dataState;\n        instrumentDataState = dataState;\n        materialDataState = dataState;\n        taskDataState = dataState;\n        documentDataState = dataState;\n        resultChangeDataState = dataState;\n        historyDataState = dataState;\n        testCommentDataState = dataState; // this.setState({\n        //     resultDataState: dataSate,instrumentDataState: dataSate,\n        //     materialDataState: dataSate,taskDataState: dataSate,instrumentDataState: dataSate,\n        //     instrumentDataState: dataSate,documentDataState: dataSate,resultChangeDataState: dataSate,\n        //     historyDataState: dataSate,resultDataState: dataSate,testCommentDataState:dataSate,\n        // });\n\n        bool = true;\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord; // this.setState({selectedRecord: this.props.Login.selectedRecord });\n\n      bool = true;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const SampletypeListMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'ascending', 'nsampletypecode', false);\n      const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.RegType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\n      const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.RegSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\n      const FilterStatusListMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", undefined, undefined, true);\n      const ConfigVersionListMap = constructOptionList(this.props.Login.masterData.ApprovalVersion || [], \"napprovalconfigversioncode\", \"sversionname\", 'descending', 'ntransactionstatus', false);\n      const UserSectionListMap = constructOptionList(this.props.Login.masterData.UserSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n      const TestListMap = constructOptionList(this.props.Login.masterData.Test || [], \"ntestcode\", \"stestsynonym\", undefined, undefined, true);\n      SampletypeList = SampletypeListMap.get(\"OptionList\");\n      RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\n      RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\n      FilterStatusList = FilterStatusListMap.get(\"OptionList\");\n      ConfigVersionList = ConfigVersionListMap.get(\"OptionList\");\n      UserSectionList = UserSectionListMap.get(\"OptionList\");\n      TestList = TestListMap.get(\"OptionList\");\n      bool = true;\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n      let selectFilterStatus = {\n        ntransactionstatus: transactionStatus.PARTIAL,\n        sfilterstatus: this.props.intl.formatMessage({\n          id: \"IDS_PARTIAL\"\n        }),\n        scolorhexcode: \"#800000\"\n      }; // const selectedFilters = this.props.Login.masterData.FilterStatusValue && \n      //     this.props.Login.masterData.FilterStatusValue.ntransactionstatus === transactionStatus.ALL ? \n      //   JSON.stringify (JSON.parse(this.props.Login.masterData.FilterStatus)) : []\n      // const selectedFilters = this.props.Login.masterData.FilterStatusValue &&\n      //     this.props.Login.masterData.FilterStatusValue.ntransactionstatus === transactionStatus.ALL ?\n      //     this.props.Login.masterData.FilterStatus : [];\n\n      const selectedFilters = this.props.Login.masterData.FilterStatus || [];\n      const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\n      const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL);\n\n      if (selectedFiltersNew.length > 0 && index === -1) {\n        selectedFiltersNew.push(selectFilterStatus);\n      }\n\n      selectedFilter = selectedFiltersNew;\n\n      if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\n        resultDataState = this.props.Login.resultDataState;\n      }\n\n      if (this.props.Login.instrumentDataState && this.props.Login.instrumentDataState !== previousProps.Login.instrumentDataState) {\n        instrumentDataState = this.props.Login.instrumentDataState;\n      }\n\n      if (this.props.Login.taskDataState && this.props.Login.taskDataState !== previousProps.Login.taskDataState) {\n        taskDataState = this.props.Login.taskDataState;\n      }\n\n      if (this.props.Login.resultChangeDataState && this.props.Login.resultChangeDataState !== previousProps.Login.resultChangeDataState) {\n        resultChangeDataState = this.props.Login.resultChangeDataState;\n      }\n\n      if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\n        historyDataState = this.props.Login.historyDataState;\n      }\n\n      if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\n        testCommentDataState = this.props.Login.testCommentDataState;\n      }\n\n      if (this.props.Login.samplePrintHistoryDataState && this.props.Login.samplePrintHistoryDataState !== previousProps.Login.samplePrintHistoryDataState) {\n        samplePrintHistoryDataState = this.props.Login.samplePrintHistoryDataState;\n      }\n\n      if (this.props.Login.sampleHistoryDataState && this.props.Login.sampleHistoryDataState !== previousProps.Login.sampleHistoryDataState) {\n        sampleHistoryDataState = this.props.Login.sampleHistoryDataState;\n      }\n    }\n\n    if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n      const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n      DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\n      DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n      DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n      DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n      DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n      SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\n      testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\n      testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n      bool = true; // sampleListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.LISTITEM);\n      // subSampleListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], designProperties.LISTITEM);\n      // testListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], designProperties.LISTITEM);\n      // sampleListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.LISTMAINFIELD);\n      // subSampleListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], designProperties.LISTMAINFIELD);\n      // testListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], designProperties.LISTMAINFIELD);\n      // SingleItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.SINGLEITEMDATA)\n      // SampleGridItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.GRIDITEM)\n      // SampleGridExpandableItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.GRIDEXPANDABLEITEM)\n      // testMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], designProperties.LISTMOREITEM)\n      // let {selectedRecord}=this.state\n\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n      selectedRecord['fromDate'] = obj.fromDate;\n      selectedRecord['toDate'] = obj.toDate; // this.setState({\n      //     sampleListColumns, subSampleListColumns, testListColumns, SingleItem,\n      //     sampleListMainField, subSampleListMainField, testListMainField,\n      //     SampleGridItem, SampleGridExpandableItem, testMoreField,selectedRecord\n      // })\n\n      bool = true;\n    }\n\n    if (bool) {\n      bool = false;\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        sampleListColumns,\n        subSampleListColumns,\n        testListColumns,\n        SingleItem,\n        sampleListMainField,\n        subSampleListMainField,\n        testListMainField,\n        SampleGridItem,\n        SampleGridExpandableItem,\n        testMoreField,\n        resultDataState,\n        instrumentDataState,\n        materialDataState,\n        taskDataState,\n        documentDataState,\n        resultChangeDataState,\n        historyDataState,\n        testCommentDataState,\n        samplePrintHistoryDataState,\n        sampleHistoryDataState,\n        selectedRecord,\n        SampletypeList,\n        RegistrationTypeList,\n        RegistrationSubTypeList,\n        FilterStatusList,\n        ConfigVersionList,\n        UserSectionList,\n        TestList,\n        skip,\n        take,\n        testskip,\n        testtake,\n        selectedFilter,\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        DynamicGridItem,\n        DynamicGridMoreField\n      });\n    }\n  } // previewSampleReport = (ncontrolCode) => {\n  //     console.log(\"report:\", this.props.Login.masterData.selectedSample);\n  //     const selectedSample = this.props.Login.masterData.selectedSample[0];\n  //     const inputData = {ndecisionstatus:selectedSample.ndecisionstatus,\n  //                         userinfo:this.props.Login.userInfo,\n  //                         nprimarykey: selectedSample.npreregno,\n  //                         ncoareporttypecode : reportCOAType.SAMPLECERTIFICATEPRIVIEW,\n  //                         nreporttypecode :REPORTTYPE.SAMPLEREPORT,\n  //                         sprimarykeyname :\"npreregno\",\n  //                         ncontrolcode : ncontrolCode,\n  //                         nregtypecode:selectedSample.nregtypecode,\n  //                         nregsubtypecode: selectedSample.nregsubtypecode\n  //                         }\n  //     this.props.previewSampleReport(inputData);\n  // }\n\n\n  sampleTabDetail() {\n    const tabMap = new Map();\n    let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n    tabMap.set(\"IDS_SAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n      screenName: \"IDS_SAMPLEATTACHMENTS\",\n      selectedMaster: this.props.Login.masterData.selectedSample,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      attachments: this.props.Login.masterData.RegistrationAttachment || [],\n      deleteRecord: this.props.deleteAttachment,\n      onSaveClick: this.onAttachmentSaveClick,\n      masterList: this.props.Login.masterData.selectedSample,\n      masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHEMENT\",\n      fetchRecord: this.props.getAttachmentCombo,\n      addName: \"AddSampleAttachment\",\n      editName: \"EditSampleAttachment\",\n      deleteName: \"DeleteSampleAttachment\",\n      viewName: \"ViewSampleAttachment\",\n      methodUrl: \"SampleAttachment\",\n      deleteParam: {\n        methodUrl: \"SampleAttachment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenName: this.props.Login.screenName\n      },\n      editParam: {\n        methodUrl: \"SampleAttachment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        masterList: this.props.Login.masterData.selectedSample\n      },\n      selectedListName: \"IDS_SAMPLES\",\n      displayName: \"sarno\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1389,\n        columnNumber: 13\n      }\n    }));\n    tabMap.set(\"IDS_SAMPLEAPPROVALHISTORY\", /*#__PURE__*/React.createElement(SampleApprovalHistory, {\n      userInfo: this.props.Login.userInfo,\n      ApprovalHistory: this.props.Login.masterData.SampleApprovalHistory,\n      inputParam: this.props.Login.inputParam,\n      dataState: this.state.sampleHistoryDataState,\n      dataStateChange: this.sampleDataStateChange,\n      screenName: \"IDS_SAMPLEAPPROVALHISTORY\",\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      selectedId: null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1429,\n        columnNumber: 13\n      }\n    }));\n    tabMap.set(\"IDS_PRINTHISTORY\", /*#__PURE__*/React.createElement(ApprovalPrintHistoryTab, {\n      userInfo: this.props.Login.userInfo,\n      ApprovalPrintHistory: this.props.Login.masterData.PrintHistory,\n      inputParam: this.props.Login.inputParam,\n      dataState: this.state.samplePrintHistoryDataState,\n      dataStateChange: this.sampleDataStateChange,\n      screenName: \"IDS_PRINTHISTORY\",\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      selectedId: null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1442,\n        columnNumber: 13\n      }\n    }));\n\n    if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n      tabMap.set(\"IDS_REPORTHISTORY\", /*#__PURE__*/React.createElement(ReportHistoryTab, {\n        userInfo: this.props.Login.userInfo,\n        COAHistory: this.props.Login.masterData.COAHistory,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.reportHistoryDataState,\n        dataStateChange: this.sampleDataStateChange,\n        screenName: \"IDS_REPORTHISTORY\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedId: null,\n        viewDownloadFile: this.downloadReport,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1455,\n          columnNumber: 17\n        }\n      }));\n    }\n\n    return tabMap;\n  }\n\n  showSampleInfo() {\n    this.setState({\n      showSample: true,\n      showTest: false\n    });\n  }\n\n  showTestList() {\n    this.setState({\n      showTest: true,\n      showSample: false\n    });\n  }\n\n  // covertDatetoString(startDateValue, endDateValue) {\n  //     const startDate = new Date(startDateValue);\n  //     const endDate = new Date(endDateValue);\n  //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\n  //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\n  //     const prevDay = validateTwoDigitDate(String(startDate.getDate()));\n  //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\n  //     const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay\n  //     const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay\n  //     const fromDate = fromDateOnly + \"T00:00:00\";\n  //     const toDate = toDateOnly + \"T23:59:59\";\n  //     return ({ fromDate, toDate, breadCrumbFrom: fromDateOnly, breadCrumbto: toDateOnly })\n  // }\n  getActiveTestURL() {\n    let url = \"approval/getapprovalparameter\";\n\n    switch (this.props.Login.activeTestTab) {\n      case \"IDS_RESULTS\":\n        url = \"approval/getapprovalparameter\";\n        break;\n\n      case \"IDS_INSTRUMENT\":\n        url = \"resultentrybysample/getResultUsedInstrument\";\n        break;\n\n      case \"IDS_MATERIAL\":\n        url = \"resultentrybysample/getResultUsedMaterial\";\n        break;\n\n      case \"IDS_TASK\":\n        url = \"resultentrybysample/getResultUsedTask\";\n        break;\n\n      case \"IDS_TESTATTACHMENTS\":\n        url = \"attachment/getTestAttachment\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        break;\n\n      case \"IDS_RESULTCHANGEHISTORY\":\n        url = \"approval/getApprovalResultChangeHistory\";\n        break;\n\n      case \"IDS_TESTAPPROVALHISTORY\":\n        url = \"approval/getApprovalHistory\";\n        break;\n\n      default:\n        url = \"approval/getapprovalparameter\";\n        break;\n    }\n\n    return url;\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  getsubSampleDetail,\n  getTestDetail,\n  getTestChildTabDetail,\n  performAction,\n  updateStore,\n  viewAttachment,\n  checkListRecord,\n  updateDecision,\n  getRegistrationType,\n  getRegistrationSubType,\n  getFilterStatus,\n  getApprovalSample,\n  getStatusCombo,\n  validateEsignCredential,\n  crudMaster,\n  validateEsignforApproval,\n  getApprovalVersion,\n  getParameterEdit,\n  filterTransactionList,\n  getSampleChildTabDetail,\n  getAttachmentCombo,\n  deleteAttachment,\n  getCommentsCombo,\n  previewSampleReport,\n  getFilterBasedTest,\n  generateCOAReport,\n  getEnforceCommentsHistory\n})(injectIntl(Approval));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/approval/Approval.jsx"],"names":["React","connect","injectIntl","faBolt","faEye","faPencilAlt","faSync","FontAwesomeIcon","Button","Card","Col","Nav","Row","ContentPanel","ListWrapper","ProductList","SplitterLayout","DEFAULT_RETURN","getsubSampleDetail","getTestDetail","getTestChildTabDetail","performAction","updateStore","updateDecision","getRegistrationType","getRegistrationSubType","getFilterStatus","getApprovalSample","getStatusCombo","validateEsignCredential","crudMaster","validateEsignforApproval","getApprovalVersion","getParameterEdit","filterTransactionList","checkListRecord","generateCOAReport","getSampleChildTabDetail","getAttachmentCombo","viewAttachment","deleteAttachment","getCommentsCombo","previewSampleReport","getFilterBasedTest","getEnforceCommentsHistory","CustomTabs","ApprovalResultsTab","getControlMap","listDataFromDynamicArray","showEsign","sortData","constructOptionList","getSameRecordFromTwoArrays","convertDateValuetoString","rearrangeDateFormat","toast","TransactionListMaster","TransactionListMasterJson","ApprovalFilter","designProperties","transactionStatus","RegistrationType","RegistrationSubType","BreadcrumbComponent","SampleInfoGrid","SampleInfoView","ApprovalInstrumentTab","FormSelectSearch","FormTextarea","Esign","SlideOutModal","EditApprovalParameter","SampleApprovalHistory","ResultChangeHistoryTab","ApprovalTask","templateChangeHandler","TemplateForm","Attachments","onSaveSampleAttachment","onSaveTestAttachment","Comments","onSaveTestComments","CustomPopOver","ScrollBar","ApprovalPrintHistoryTab","ApprovalHistoryTab","FormNumericInput","DataGrid","ReportHistoryTab","mapStateToProps","state","Login","Approval","Component","constructor","props","paneSizeChange","d","setState","splitChangeWidthPercentage","handleSubSamplePageChange","e","subSampleSkip","skip","subSampleTake","take","setTimeout","_scrollBarRef","updateScroll","showAPSampleinfo","showSample","showTest","sampleInfoDataStateChange","event","sampleGridDataState","dataState","verticalPaneSizeChange","val","console","log","initialVerticalWidth","downloadReport","input","inputParam","inputData","selectedRecord","userinfo","userInfo","classUrl","operation","methodUrl","testTabDetail","testTabMap","Map","testskip","testtake","testList","masterData","searchedTests","AP_TEST","editTestCommentsId","controlMap","has","get","ncontrolcode","slice","selectedTestList","APSelectedTest","ntransactiontestcode","map","test","join","set","resultDataState","testDataStateChange","userRoleControlRights","selectedParamId","instrumentDataState","ResultUsedTasks","taskDataState","RegistrationTestAttachment","onAttachmentSaveClick","esignRights","screenName","masterList","onCommentsSaveClick","RegistrationTestComment","testCommentDataState","ncontrolCode","ApprovalResultChangeHistory","resultChangeDataState","ApprovalHistory","historyDataState","onNumericInputOnChange","value","name","onTestTabChange","tabProps","activeTestTab","length","String","item","npreregno","selectedSample","materialDataState","documentDataState","warn","intl","formatMessage","id","onSampleTabChange","activeSampleTab","handlePageChange","handleTestPageChange","checkRetestAction","action","ntransactionstatus","RETEST","retestcount","updateInfo","typeName","data","openChildModal","performTestActions","info","obj","realFromDate","realToDate","ntransCode","FilterStatusValue","ALL","FilterStatus","status","sample","ntransactionsamplecode","APSelectedSubSample","nsectioncode","UserSectionValue","UserSection","section","ntestcode","realTestValue","nTransStatus","nsampletypecode","realSampleTypeValue","nregtypecode","realRegTypeValue","nregsubtypecode","realRegSubTypeValue","napprovalversioncode","ApprovalVersionValue","napprovalconfigversioncode","nneedsubsample","dfrom","fromDate","dto","toDate","nflag","ntype","APSelectedSample","undefined","checkBoxOperation","postParamList","nesignneed","YES","loadEsign","screenData","realFilterStatusValue","sampleList","AP_SAMPLE","splice","selectedsampleList","TestValue","napprovalconfigcode","onFilterComboChange","comboData","fieldName","inputParamData","SampleTypeValue","RegTypeValue","RegSubTypeValue","napproveconfversioncode","stransactionstatus","JobStatusValue","njobstatuscode","onComboChange","GradeValue","onInputOnChange","target","type","checked","NO","handleDateChange","dateName","dateValue","Date","changeMandatory","dataItem","currentTarget","ntransactionresultcode","onReload","realApprovalVersionValue","realUserSectionValue","sfilterstatus","searchSampleRef","searchSubSampleRef","searchTestRef","samplePrintHistoryDataState","sampleHistoryDataState","onFilterSubmit","parseInt","sampleGridDataStateChange","sampleDataStateChange","reportHistoryDataState","onSaveClick","saveType","formRef","ok","ngradecode","senforcestatuscomment","selectedTestCode","postParam","selectedObject","primaryKeyField","saveParam","approvalparameter","approvalParameterEdit","Object","keys","key","push","nreportmandatory","handleClose","nformcode","openModal","templateData","openTemplateModal","validateEsign","sreason","password","onTemplateInputChange","control","onTemplateComboChange","onTemplateDateChange","dateData","isTestComment","x","searchedSample","selectedSampleList","selectedMaster","reporparam","createRef","settings","group","field","masterStatus","error","oldComboData","sampleListColumns","subSampleListColumns","testListColumns","TableExpandableItem","SingleItem","SampleGridItem","SampleGridExpandableItem","sampleListMainField","subSampleListMainField","testListMainField","testMoreField","firstPane","paneHeight","secondPaneHeight","tabPane","SampletypeList","RegistrationTypeList","RegistrationSubTypeList","FilterStatusList","ConfigVersionList","UserSectionList","TestList","getDerivedStateFromProps","multilingualMsg","componentDidMount","parentHeight","height","clientHeight","constructDesign","list","newList","i","LABEL","VALUE","showAPTestList","gridfillingColumn","temparray","option","slanguagetypecode","render","sampleSearchField","ROUTINE","filterSampleParam","inputListName","fetchUrl","childRefs","ref","childFilteredListName","fecthInputObject","searchFieldList","changeList","filterSubSampleParam","filterTestParam","getActiveTestURL","isSingleSelect","AP_SampleList","AP_SubSampleList","AP_SUBSAMPLE","AP_TestList","decisionStatus","actionStatus","subSampleGetParam","testGetParam","testChildGetParam","breadCrumbData","breadCrumbFrom","breadCrumbto","ssampletypename","sregtypename","sregsubtypename","sversionname","ssectionname","stestsynonym","reportPreviewId","editParamId","TestDecisionActionId","TestApprovalActionId","reportGenerateId","filteredListName","clearFilter","searchRef","updatedListname","unchangeList","selectedFilter","showFilter","openFilter","closeFilter","DynamicSampleColumns","sampleMoreField","PLASMA_POOL","title","controlname","objectName","hidden","indexOf","onClick","JobStatus","display","background","borderBottom","marginTop","searchedSubSample","DynamicSubSampleColumns","subSampleMoreField","float","split","setting","DynamicTestColumns","DynamicGridItem","DynamicGridMoreField","sampleTabDetail","Grade","enforceCommentsHistory","ApprovalParamEdit","nsubsampleneed","ChecklistData","onSaveCheckList","componentDidUpdate","previousProps","bool","values","SampletypeListMap","SampleType","RegistrationTypeListMap","RegType","RegistrationSubTypeListMap","RegSubType","FilterStatusListMap","ConfigVersionListMap","ApprovalVersion","UserSectionListMap","TestListMap","Test","selectFilterStatus","PARTIAL","scolorhexcode","selectedFilters","selectedFiltersNew","JSON","parse","stringify","index","findIndex","DynamicDesign","dynamicColumn","jsondata","samplelistitem","subsamplelistitem","testlistitem","samplegriditem","samplegridmoreitem","sampledisplayfields","testlistmoreitems","tabMap","RegistrationAttachment","PrintHistory","COAHistory","showSampleInfo","showTestList","url"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { faBolt, faEye, faPencilAlt, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Button, Card, Col, Nav, Row, } from 'react-bootstrap';\r\nimport { ContentPanel } from '../../components/App.styles';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { ProductList } from '../testmanagement/testmaster-styled';\r\n//import SplitPane from \"react-splitter-layout\";\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport {\r\n    getsubSampleDetail, getTestDetail, getTestChildTabDetail, performAction, updateStore, updateDecision,\r\n    getRegistrationType, getRegistrationSubType, getFilterStatus, getApprovalSample, getStatusCombo, validateEsignCredential,\r\n    crudMaster, validateEsignforApproval, getApprovalVersion, getParameterEdit, filterTransactionList, checkListRecord, generateCOAReport,\r\n    getSampleChildTabDetail, getAttachmentCombo, viewAttachment, deleteAttachment, getCommentsCombo, previewSampleReport, getFilterBasedTest,\r\n    getEnforceCommentsHistory\r\n} from '../../actions'\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\nimport ApprovalResultsTab from './ApprovalResultsTab';\r\nimport { getControlMap, listDataFromDynamicArray, showEsign, sortData, constructOptionList, getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript';\r\nimport { toast } from 'react-toastify';\r\nimport TransactionListMaster from '../../components/TransactionListMaster';\r\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\r\nimport ApprovalFilter from './ApprovalFilter'\r\nimport { designProperties, transactionStatus, RegistrationType, RegistrationSubType } from '../../components/Enumeration';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport SampleInfoGrid from './SampleInfoGrid';\r\nimport SampleInfoView from './SampleInfoView';\r\nimport ApprovalInstrumentTab from './ApprovalInstrumentTab'\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport Esign from '../audittrail/Esign';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport EditApprovalParameter from './EditApprovalParameter';\r\n//import ApprovalHistoryTab from './ApprovalHistoryTab';\r\nimport SampleApprovalHistory from './SampleApprovalHistory';\r\nimport ResultChangeHistoryTab from './ResultChangeHistoryTab';\r\nimport ApprovalTask from './ApprovalTask';\r\nimport { templateChangeHandler } from '../checklist/checklist/checklistMethods';\r\nimport TemplateForm from '../checklist/checklist/TemplateForm';\r\nimport Attachments from '../attachmentscomments/attachments/Attachments';\r\nimport { onSaveSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\r\nimport Comments from '../attachmentscomments/comments/Comments';\r\nimport { onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\r\n//import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport CustomPopOver from '../../components/customPopover';\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\nimport ApprovalPrintHistoryTab from './ApprovalPrintHistoryTab';\r\nimport ApprovalHistoryTab from './ApprovalHistoryTab';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport ReportHistoryTab from './ReportHistoryTab';\r\n// import ReactTooltip from 'react-tooltip';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass Approval extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.searchSampleRef = React.createRef();\r\n        this.searchSubSampleRef = React.createRef();\r\n        this.searchTestRef = React.createRef();\r\n        this.formRef = React.createRef();\r\n        this.state = {\r\n            sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            resultDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'ssamplearno' }] },\r\n            instrumentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'ssamplearno' }] },\r\n            materialDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'ssamplearno' }] },\r\n            taskDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'ssamplearno' }] },\r\n            testCommentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'stestsynonym' }] },\r\n            documentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'ssamplearno' }] },\r\n            resultChangeDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'ssamplearno' }] },\r\n            sampleHistoryDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            reportHistoryDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            historyDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'ssamplearno' }, { field: 'stestsynonym' }] },\r\n            dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            samplePrintHistoryDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            oldComboData: {},\r\n            selectedRecord: {},\r\n            operation: \"\",\r\n            screenName: undefined,\r\n            showSample: false,\r\n            showTest: true,\r\n            sampleListColumns: [],\r\n            subSampleListColumns: [],\r\n            testListColumns: [],\r\n            TableExpandableItem: [],\r\n            SingleItem: [],\r\n            SampleGridItem: [],\r\n            SampleGridExpandableItem: [],\r\n            sampleListMainField: [],\r\n            subSampleListMainField: [],\r\n            testListMainField: [],\r\n            testMoreField: [],\r\n            firstPane: 0,\r\n            paneHeight: 0,\r\n            secondPaneHeight: 0,\r\n            tabPane: 0,\r\n            SampletypeList: [],\r\n            RegistrationTypeList: [],\r\n            RegistrationSubTypeList: [],\r\n            FilterStatusList: [],\r\n            ConfigVersionList: [],\r\n            UserSectionList: [],\r\n            TestList: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            testskip: 0,\r\n            testtake: this.props.Login.settings && this.props.Login.settings[12],\r\n            splitChangeWidthPercentage: 22,\r\n            subSampleSkip: 0,\r\n            subSampleTake :5,\r\n        }\r\n        //this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\r\n    }\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\") {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.multilingualMsg !== undefined && props.Login.multilingualMsg !== \"\") {\r\n            toast.warn(props.intl.formatMessage({ id: props.Login.multilingualMsg }));\r\n            props.Login.multilingualMsg = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n\r\n        return null;\r\n    }\r\n    // onSecondaryPaneSizeChange = (e, val) => {\r\n    //     this.setState({\r\n    //         firstPane: e - val,\r\n    //         tabPane: e - 80,\r\n    //         childPane: this.state.parentHeight - e - 80\r\n    //     })\r\n    // }\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n\r\n    constructDesign(list) {\r\n\r\n        let newList = []\r\n        if (list.length > 0) {\r\n            list.map((i) => {\r\n                newList.push({ [designProperties.LABEL]: i, [designProperties.VALUE]: i })\r\n            })\r\n        }\r\n        return newList;\r\n    }\r\n\r\n    handleSubSamplePageChange = e => {\r\n        this.setState({ subSampleSkip: e.skip,subSampleTake: e.take });\r\n\r\n        setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    }\r\n    \r\n    showAPSampleinfo = () => {\r\n\r\n        this.setState({ showSample: true, showTest: false })\r\n    }\r\n\r\n    showAPTestList() {\r\n      \r\n        this.setState({ showTest: true, showSample: false })\r\n    }\r\n\r\n    gridfillingColumn(data) {\r\n        //  const tempArray = [];\r\n        const temparray = data && data.map((option) => {\r\n            return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode], \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\" };\r\n        });\r\n        return temparray;\r\n    }\r\n\r\n    sampleInfoDataStateChange = (event) => {\r\n        this.setState({\r\n            sampleGridDataState: event.dataState\r\n        });\r\n    }\r\n    verticalPaneSizeChange = (val) => {\r\n        console.log(\"val\", val)\r\n        this.setState({\r\n            initialVerticalWidth: val - 150\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo)\r\n        // let obj = this.covertDatetoString(this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date(), this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date())\r\n        let sampleSearchField = [\"sarno\", \"dregdate\", \"sdecisionstatus\", \"ssampletypestatus\", \"smanuflotno\", \"smanufname\", \"smanufsitename\", \"sproductcatname\", \"sproductname\", \"sspecname\"];\r\n        if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n            sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\",\r\n                \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\",\r\n                \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"\r\n            ]\r\n        }\r\n        const filterSampleParam = {\r\n            inputListName: \"AP_SAMPLE\",\r\n            selectedObject: \"APSelectedSample\",\r\n            primaryKeyField: \"npreregno\",\r\n            fetchUrl: \"approval/getApprovalSubSample\",\r\n            childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchTestRef, childFilteredListName: \"searchedTests\" }],\r\n            fecthInputObject: {\r\n                ntype: 2,\r\n                nflag: 2,\r\n                nsampletypecode: (this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode) || -1,\r\n                nregtypecode: (this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode) || -1,\r\n                nregsubtypecode: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode) || -1,\r\n                nneedsubsample: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) || false,\r\n                ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus !== undefined ? String(this.props.Login.masterData.realFilterStatusValue.ntransactionstatus) : \"-1\",\r\n                napprovalconfigcode: this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigcode || -1 : null,\r\n                napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue && this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode ? String(this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode) : null,\r\n                nsectioncode: this.props.Login.masterData.realUserSectionValue ? this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.realUserSectionValue.nsectioncode) : null,\r\n                ntestcode: this.props.Login.masterData.TestValue && this.props.Login.masterData.TestValue.ntestcode,\r\n                dfrom: obj.fromDate,\r\n                dto: obj.toDate,\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            // searchFieldList: [\"sarno\", \"dregdate\", \"sdecisionstatus\", \"ssampletypestatus\", \"smanuflotno\", \"smanufname\", \"smanufsitename\", \"sproductcatname\", \"sproductname\", \"sspecname\"],\r\n            searchFieldList: sampleSearchField,\r\n            changeList: [\"AP_SUBSAMPLE\", \"AP_TEST\", \"ApprovalParameter\",\r\n                \"ApprovalResultChangeHistory\", \"ApprovalHistory\", \"SampleApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\", \"selectedTest\", \"PrintHistory\", \"COAHistory\"]\r\n        };\r\n        const filterSubSampleParam = {\r\n            inputListName: \"AP_SUBSAMPLE\",\r\n            selectedObject: \"APSelectedSubSample\",\r\n            primaryKeyField: \"ntransactionsamplecode\",\r\n            fetchUrl: \"approval/getApprovalTest\",\r\n            childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTests\" }],\r\n            fecthInputObject: {\r\n                ntype: 3,\r\n                nflag: 2,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\"',\") : \"-1\",\r\n                nsampletypecode: (this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode) || -1,\r\n                nregtypecode: (this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode) || -1,\r\n                nregsubtypecode: (this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode) || -1,\r\n                nneedsubsample: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) || false,\r\n                ntransactionstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus !== undefined ? String(this.props.Login.masterData.FilterStatusValue.ntransactionstatus) : \"-1\",\r\n                napprovalconfigcode: this.props.Login.masterData.ApprovalVersionValue ? this.props.Login.masterData.ApprovalVersionValue.napprovalconfigcode || -1 : null,\r\n                napprovalversioncode: this.props.Login.masterData.ApprovalVersionValue && this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode ? this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode : null,\r\n                nsectioncode: this.props.Login.masterData.UserSectionValue ? this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.UserSectionValue.nsectioncode) : null,\r\n                dfrom: obj.fromDate,\r\n                dto: obj.toDate,\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"sarno\", \"ssamplearno\"],\r\n            changeList: [\"AP_TEST\", \"ApprovalParameter\",\r\n                \"ApprovalResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"selectedSubSample\", \"selectedTest\"]\r\n        };\r\n\r\n        const filterTestParam = {\r\n            inputListName: \"AP_TEST\",\r\n            selectedObject: \"APSelectedTest\",\r\n            primaryKeyField: \"ntransactiontestcode\",\r\n            fetchUrl: this.getActiveTestURL(),\r\n            fecthInputObject: {\r\n                ntransactiontestcode: this.props.Login.masterData.APSelectedTest ? this.props.Login.masterData.APSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            isSingleSelect: false,\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"sarno\", \"ssamplearno\", \"stestsynonym\", \"dtransactiondate\", \"smethodname\", \"ssectionname\", \"ssourcename\", \"stransdisplaystatus\", \"sinstrumentcatname\", \"stestname\"],\r\n            changeList: [\"ApprovalParameter\",\r\n                \"ApprovalResultChangeHistory\", \"ApprovalHistory\", \"SampleApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"APSelectedTest\"]\r\n\r\n        };\r\n        let AP_SampleList = this.props.Login.masterData.AP_SAMPLE ? sortData(this.props.Login.masterData.AP_SAMPLE, 'descending', 'npreregno') : [];\r\n        //let AP_SubSampleList = this.props.Login.masterData.AP_SUBSAMPLE ? sortData(this.props.Login.masterData.AP_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\r\n        let AP_SubSampleList = this.props.Login.masterData.AP_SUBSAMPLE ? this.props.Login.masterData.AP_SUBSAMPLE : [];\r\n        let AP_TestList = this.props.Login.masterData.AP_TEST ? this.props.Login.masterData.AP_TEST : [];\r\n        let decisionStatus = this.props.Login.masterData.decisionStatus ? sortData(this.props.Login.masterData.decisionStatus, 'ascending', 'ntransactionstatus') : [];\r\n        let actionStatus = this.props.Login.masterData.actionStatus ? sortData(this.props.Login.masterData.actionStatus, 'descending', 'ntransactionstatus') : [];\r\n        let subSampleGetParam = {\r\n            masterData: this.props.Login.masterData,\r\n            ntransactionstatus: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus : this.props.Login.masterData.FilterStatusValue ? this.props.Login.masterData.FilterStatusValue.ntransactionstatus : -1),\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            nsectioncode: this.props.Login.masterData.UserSectionValue ? this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.UserSectionValue.nsectioncode) : null,\r\n            ntestcode: this.props.Login.masterData.realTestValue ? this.props.Login.masterData.realTestValue.ntestcode : -1,\r\n            napprovalversioncode : this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode : -1,\r\n            nneedsubsample:this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_RESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            screenName: this.props.Login.screenName,\r\n            searchSubSampleRef: this.searchSubSampleRef,\r\n            searchTestRef: this.searchTestRef,\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            subSampleSkip: this.state.subSampleSkip,\r\n            subSampleTake: this.state.subSampleTake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState,\r\n            samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\r\n            sampleHistoryDataState: this.state.sampleHistoryDataState\r\n        };\r\n        let testGetParam = {\r\n            masterData: this.props.Login.masterData,\r\n            ntransactionstatus: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus : this.props.Login.masterData.FilterStatusValue ? this.props.Login.masterData.FilterStatusValue.ntransactionstatus : -1),\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            npreregno: this.props.Login.masterData.APSelectedSample && this.props.Login.masterData.APSelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            napprovalversioncode : this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode : -1,\r\n            nsectioncode: this.props.Login.masterData.UserSectionValue ? this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.UserSectionValue.nsectioncode) : null,\r\n            ntestcode: this.props.Login.masterData.realTestValue ? this.props.Login.masterData.realTestValue.ntestcode : -1,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_RESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEINFO\",\r\n            screenName: this.props.Login.screenName,\r\n            searchTestRef: this.searchTestRef\r\n        };\r\n        let testChildGetParam = {\r\n            masterData: this.props.Login.masterData,\r\n            ntransactionstatus: String(this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus),\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            npreregno: this.props.Login.masterData.APSelectedSample && this.props.Login.masterData.APSelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            ntransactionsamplecode: this.props.Login.masterData.APSelectedSubSample && this.props.Login.masterData.APSelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_RESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEINFO\",\r\n            screenName: this.props.Login.screenName,\r\n            postParamList: this.postParamList,\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            historyDataState: this.state.historyDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n        };\r\n        let breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": obj.breadCrumbFrom\r\n            }, {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": obj.breadCrumbto\r\n            },\r\n            {\r\n                \"label\": \"IDS_SAMPLETYPE\",\r\n                \"value\": this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.ssampletypename || \"NA\" :\r\n                    this.props.Login.masterData.SampleTypeValue ? this.props.Login.masterData.SampleTypeValue.ssampletypename || \"NA\" : \"NA\"\r\n            }, {\r\n                \"label\": \"IDS_REGTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\r\n                    this.props.Login.masterData.RegTypeValue ? this.props.Login.masterData.RegTypeValue.sregtypename || \"NA\" : \"NA\"\r\n            }, {\r\n                \"label\": \"IDS_REGSUBTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename || \"-\" :\r\n                    this.props.Login.masterData.RegSubTypeValue ?\r\n                        this.props.Login.masterData.RegSubTypeValue.sregsubtypename : \"-\"\r\n            }, {\r\n                \"label\": \"IDS_CONFIGVERSION\",\r\n                \"value\": this.props.Login.masterData.realApprovalVersionValue ?\r\n                    this.props.Login.masterData.realApprovalVersionValue.sversionname || \"-\" :\r\n                    this.props.Login.masterData.ApprovalVersionValue ? this.props.Login.masterData.ApprovalVersionValue.sversionname || \"-\" : \"-\"\r\n            },\r\n            {\r\n                \"label\": \"IDS_SECTION\",\r\n                \"value\": this.props.Login.masterData.realUserSectionValue ?\r\n                    this.props.Login.masterData.realUserSectionValue.ssectionname || \"-\" :\r\n                    this.props.Login.masterData.UserSectionValue ?\r\n                        this.props.Login.masterData.UserSectionValue.ssectionname || \"-\" : \"-\"\r\n            },\r\n            {\r\n                \"label\": \"IDS_Test\",\r\n                \"value\": this.props.Login.masterData.realTestValue ?\r\n                    this.props.Login.masterData.realTestValue.stestsynonym || \"-\" :\r\n                    this.props.Login.masterData.TestValue ?\r\n                        this.props.Login.masterData.TestValue.stestsynonym || \"-\" : \"-\"\r\n            },\r\n            {\r\n                \"label\": \"IDS_FILTERSTATUS\",\r\n                \"value\": this.props.Login.masterData.realFilterStatusValue ?\r\n                    this.props.Login.masterData.realFilterStatusValue.sfilterstatus || \"-\" :\r\n                    this.props.Login.masterData.FilterStatusValue ?\r\n                        this.props.Login.masterData.FilterStatusValue.sfilterstatus || \"-\" : \"-\"\r\n            }\r\n        ];\r\n        // let obj={ntransactionstatus:21,sfilterstatus:this.props.intl.formatMessage({id:\"IDS_PARTIAL\"})\r\n        //    let selectFilterStatus={ntransactionstatus:21,sfilterstatus:this.props.intl.formatMessage({id:\"IDS_PARTIAL\"})}\r\n        //     let selectionList=\r\n        //         this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []\r\n\r\n        //     selectionList.push(selectFilterStatus);\r\n        const reportPreviewId = this.state.controlMap.has(\"SamplePreviewReport\") && this.state.controlMap.get(\"SamplePreviewReport\").ncontrolcode\r\n\r\n        const editParamId = this.state.controlMap.has(\"EditReportMandatory\") && this.state.controlMap.get(\"EditReportMandatory\").ncontrolcode;\r\n        const TestDecisionActionId = this.state.controlMap.has(\"TestDecisionAction\") && this.state.controlMap.get(\"TestDecisionAction\").ncontrolcode\r\n        const TestApprovalActionId = this.state.controlMap.has(\"TestApprovalAction\") && this.state.controlMap.get(\"TestApprovalAction\").ncontrolcode\r\n        const reportGenerateId = this.state.controlMap.has(\"GenerateCOA\") && this.state.controlMap.get(\"GenerateCOA\").ncontrolcode\r\n\r\n        this.postParamList = [\r\n            {\r\n                filteredListName: \"searchedSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSampleRef,\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"approval/getApprovalSubSample\",\r\n                fecthInputObject: subSampleGetParam,\r\n                selectedObject: \"selectedSample\",\r\n                inputListName: \"AP_SAMPLE\",\r\n                updatedListname: \"updatedSample\",\r\n                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchTestRef, childFilteredListName: \"searchedTests\" }],\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\",\r\n                    \"SampletypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\", \"FilterStatusList\", \"UserSectionList\"]\r\n            }, {\r\n                filteredListName: \"searchedSubSample\",\r\n                updatedListname: \"updatedSubSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSubSampleRef,\r\n                primaryKeyField: \"ntransactionsamplecode\",\r\n                fetchUrl: \"approval/getApprovalTest\",\r\n                fecthInputObject: testGetParam,\r\n                selectedObject: \"selectedSubSample\",\r\n                childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTests\" }],\r\n                inputListName: \"AP_SUBSAMPLE\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\",\r\n                    \"SampletypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\", \"FilterStatusList\", \"UserSectionList\"]\r\n            }, {\r\n                filteredListName: \"searchedTests\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchTestRef,\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: this.getActiveTestURL(),\r\n                fecthInputObject: testChildGetParam,\r\n                selectedObject: \"APSelectedTest\",\r\n                inputListName: \"AP_TEST\",\r\n                updatedListname: \"updatedTest\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\",\r\n                    \"SampletypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\", \"FilterStatusList\", \"UserSectionList\", \"TestList\"]\r\n            }]\r\n\r\n\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                    <Row noGutters={\"true\"}>\r\n                        <Col md={12} className='parent-port-height sticky_head_parent' ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n                            <ListWrapper>\r\n                                <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1} secondaryInitialSize={this.state.splitChangeWidthPercentage} onSecondaryPaneSizeChange={this.paneSizeChange} primaryMinSize={40} secondaryMinSize={20}>\r\n                                    <TransactionListMasterJson\r\n                                        splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                        needMultiSelect={true}\r\n                                        masterList={this.props.Login.masterData.searchedSample || AP_SampleList}\r\n                                        selectedMaster={this.props.Login.masterData.APSelectedSample}\r\n                                        primaryKeyField=\"npreregno\"\r\n                                        getMasterDetail={this.props.getsubSampleDetail}\r\n                                        inputParam={subSampleGetParam}\r\n                                        additionalParam={['napprovalversioncode']}\r\n                                        mainField={'sarno'}\r\n                                        selectionList={this.state.selectedFilter}\r\n                                        selectionField=\"ntransactionstatus\"\r\n                                        selectionFieldName=\"sfilterstatus\"\r\n                                        selectionColorField=\"stranscolor\"\r\n                                        selectedListName=\"APSelectedSample\"\r\n                                        objectName=\"sample\"\r\n                                        listName=\"IDS_SAMPLE\"\r\n                                        filterColumnData={this.props.filterTransactionList}\r\n                                        searchListName=\"searchedSample\"\r\n                                        needValidation={true}\r\n                                        validationKey=\"napprovalversioncode\"\r\n                                        validationFailMsg=\"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\"\r\n                                        showFilter={this.props.Login.showFilter}\r\n                                        openFilter={this.openFilter}\r\n                                        closeFilter={this.closeFilter}\r\n                                        onFilterSubmit={this.onFilterSubmit}\r\n                                        subFields={this.state.DynamicSampleColumns}\r\n                                        moreField={this.state.sampleMoreField}\r\n                                        jsonDesignFields={true}\r\n                                        jsonField={'jsondata'}\r\n                                        showStatusLink={true}\r\n                                        statusFieldName=\"stransdisplaystatus\"\r\n                                        statusField=\"ntransactionstatus\"\r\n                                        //statusColor=\"sdecisioncolor\"\r\n                                        statusColor=\"stranscolor\"\r\n                                        showStatusIcon={false}\r\n                                        showStatusName={true}\r\n                                        needFilter={true}\r\n                                        searchRef={this.searchSampleRef}\r\n                                        filterParam={filterSampleParam}\r\n                                        skip={this.state.skip}\r\n                                        take={this.state.take}\r\n                                        handlePageChange={this.handlePageChange}\r\n                                        splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                        childTabsKey={[\"AP_SUBSAMPLE\", \"AP_TEST\", \"SampleApprovalHistory\", \"RegistrationAttachment\", \"PrintHistory\", \"COAHistory\"]}\r\n                                        actionIcons={\r\n                                            [\r\n                                                this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ?\r\n                                                    {\r\n                                                        title: \"Report\",\r\n                                                        controlname: \"reports\",\r\n                                                        objectName: \"sample\",\r\n                                                        hidden: this.state.userRoleControlRights.indexOf(reportPreviewId) === -1,\r\n                                                        // onClick: ()=>this.previewSampleReport(reportPreviewId),\r\n                                                        //inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }\r\n                                                        onClick: this.props.previewSampleReport,\r\n                                                        inputData: {\r\n                                                            userinfo: this.props.Login.userInfo,\r\n                                                            ncontrolcode: reportPreviewId\r\n                                                        },\r\n                                                    } :\r\n                                                    this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE ?\r\n                                                        {\r\n                                                            title: \"Report\",\r\n                                                            controlname: \"reports\",\r\n                                                            objectName: \"sample\",\r\n                                                            hidden: this.state.userRoleControlRights.indexOf(reportGenerateId) === -1,\r\n                                                            // onClick: ()=>this.previewSampleReport(reportPreviewId),\r\n                                                            //inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }\r\n                                                            onClick: (obj) => this.generateCOAReport(obj, reportGenerateId),\r\n                                                            inputData: {\r\n                                                                userinfo: this.props.Login.userInfo,\r\n                                                                ncontrolcode: reportPreviewId,\r\n                                                                nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                                                                nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                                                            },\r\n                                                        }\r\n                                                        : {}\r\n                                            ]\r\n                                        }\r\n\r\n                                        commonActions={\r\n                                            <>\r\n                                                <ProductList className=\"d-flex product-category float-right\">\r\n                                                    {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                    <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                        onClick={() => this.onReload()}\r\n                                                        // title={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                        data-for=\"tooltip-common-wrap\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                        <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                    </Button>\r\n                                                    {/* </Tooltip> */}\r\n                                                    {this.props.Login.masterData.decisionStatus &&\r\n                                                        this.state.userRoleControlRights.indexOf(TestDecisionActionId) !== -1 &&\r\n                                                        this.props.Login.masterData.decisionStatus.length > 0 ?\r\n                                                        <CustomPopOver\r\n                                                            icon={faBolt}\r\n                                                            nav={true}\r\n                                                            data={decisionStatus}\r\n                                                            btnClasses=\"btn-circle btn_grey ml-2\"\r\n                                                            textKey=\"sdecisionstatus\"\r\n                                                            iconKey=\"ntransactionstatus\"\r\n                                                            dynamicButton={(value) => this.updateDecision(value)}\r\n                                                        >\r\n                                                        </CustomPopOver>\r\n\r\n                                                        : \"\"}\r\n                                                </ProductList>\r\n                                            </>\r\n                                        }\r\n                                        filterComponent={[\r\n                                            {\r\n                                                \"Sample Filter\": <ApprovalFilter\r\n                                                    SampleType={this.state.SampletypeList || []}\r\n                                                    SampleTypeValue={this.props.Login.masterData.SampleTypeValue || []}\r\n                                                    RegType={this.state.RegistrationTypeList || []}\r\n                                                    RegTypeValue={this.props.Login.masterData.RegTypeValue || []}\r\n                                                    RegSubType={this.state.RegistrationSubTypeList || []}\r\n                                                    RegSubTypeValue={this.props.Login.masterData.RegSubTypeValue || []}\r\n                                                    ApprovalVersion={this.state.ConfigVersionList || []}\r\n                                                    ApprovalVersionValue={this.props.Login.masterData.ApprovalVersionValue || []}\r\n                                                    UserSection={this.state.UserSectionList || []}\r\n                                                    UserSectionValue={this.props.Login.masterData.UserSectionValue || []}\r\n                                                    JobStatus={this.props.Login.masterData.JobStatus || []}\r\n                                                    Test={this.state.TestList || []}\r\n                                                    TestValue={this.props.Login.masterData.TestValue || []}\r\n                                                    FilterStatus={this.state.FilterStatusList || []}\r\n                                                    FilterStatusValue={this.props.Login.masterData.FilterStatusValue || []}\r\n                                                    fromDate={this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date()}\r\n                                                    toDate={this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date()}\r\n                                                    onFilterComboChange={this.onFilterComboChange}\r\n                                                    handleDateChange={this.handleDateChange}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    \r\n                                                />\r\n                                            }\r\n                                        ]}\r\n\r\n                                    />\r\n                                    <ScrollBar ref={(ref) => { this._scrollBarRef = ref; }}>\r\n                                        <SplitterLayout\r\n                                            customClassName=\"detailed-inner\"\r\n                                            vertical\r\n                                            borderColor=\"#999\"\r\n                                            primaryIndex={1}\r\n                                            onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\r\n                                            secondaryInitialSize={400}\r\n                                        >\r\n                                            <div>\r\n                                                <div style={this.state.showTest === true ? { display: \"block\", background: \"#FFFF\" } : { display: \"none\", background: \"#FFFF\" }} >\r\n                                                    <SplitterLayout borderColor=\"#999\"\r\n                                                        primaryIndex={1} percentage={true}\r\n                                                        secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                                        onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                                        primaryMinSize={40}\r\n                                                        secondaryMinSize={30}\r\n                                                    >\r\n                                                        <Card>\r\n                                                            <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                    <h4 className=\"card-title\">Sub Sample</h4>\r\n                                                                </span>\r\n                                                            </Card.Header>\r\n                                                            <Card.Body className='p-0'>\r\n                                                                <TransactionListMasterJson\r\n                                                                    paneHeight={this.state.initialVerticalWidth}\r\n                                                                    masterList={this.props.Login.masterData.searchedSubSample || AP_SubSampleList}\r\n                                                                    selectedMaster={this.props.Login.masterData.APSelectedSubSample}\r\n                                                                    primaryKeyField=\"ntransactionsamplecode\"\r\n                                                                    getMasterDetail={this.props.getTestDetail}\r\n                                                                    inputParam={testGetParam}\r\n                                                                    additionalParam={[]}\r\n                                                                    mainField=\"ssamplearno\"\r\n                                                                    selectedListName=\"APSelectedSubSample\"\r\n                                                                    objectName=\"subSample\"\r\n                                                                    listName=\"IDS_SUBSAMPLE\"\r\n                                                                    jsonField={'jsondata'}\r\n                                                                    jsonDesignFields={true}\r\n                                                                    showStatusLink={false}\r\n                                                                    showStatusName={true}\r\n                                                                    // statusFieldName=\"stransdisplaystatus\"\r\n                                                                    // statusField=\"ntransactionstatus\"\r\n                                                                    // selectionField=\"ntransactionstatus\"\r\n                                                                    // selectionFieldName=\"stransdisplaystatus\"\r\n                                                                    // selectionColorField=\"stranscolor\"\r\n                                                                    // statusColor=\"stranscolor\"\r\n                                                                    subFields={this.state.DynamicSubSampleColumns}\r\n                                                                    moreField={this.state.subSampleMoreField}\r\n                                                                    needValidation={false}\r\n                                                                    needMultiSelect={true}\r\n                                                                    needFilter={false}\r\n                                                                    searchRef={this.searchSubSampleRef}\r\n                                                                    filterParam={filterSampleParam}\r\n                                                                    skip={this.state.subSampleSkip}\r\n                                                                    take={this.state.subSampleTake}\r\n                                                                    handlePageChange={this.handleSubSamplePageChange}\r\n                                                                    childTabsKey={[\"AP_TEST\"]}\r\n                                                                />\r\n                                                            </Card.Body>\r\n                                                        </Card>\r\n                                                        <ContentPanel>\r\n                                                            <Card>\r\n                                                                <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                    <span style={{ display: \"inline-block\" }}>\r\n                                                                        <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                                                                    </span>\r\n                                                                    <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                        onClick={() => this.showAPSampleinfo()}\r\n                                                                    >\r\n                                                                        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                                                        {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                                                                    </button>\r\n                                                                    {/* </div> */}\r\n                                                                </Card.Header>\r\n                                                                <Card.Body className='p-0'>\r\n\r\n                                                                    <TransactionListMasterJson\r\n                                                                        paneHeight={this.state.initialVerticalWidth}\r\n                                                                        needMultiSelect={true}\r\n                                                                        masterList={this.props.Login.masterData.searchedTests || AP_TestList}\r\n                                                                        selectedMaster={this.props.Login.masterData.APSelectedTest}\r\n                                                                        primaryKeyField=\"ntransactiontestcode\"\r\n                                                                        getMasterDetail={this.props.getTestChildTabDetail}\r\n                                                                        inputParam={testChildGetParam}\r\n                                                                        additionalParam={[]}\r\n                                                                        mainField={'stestsynonym'}\r\n                                                                        selectedListName=\"APSelectedTest\"\r\n                                                                        objectName=\"test\"\r\n                                                                        listName=\"IDS_TEST\"\r\n                                                                        pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                                                                        showStatusLink={true}\r\n                                                                        statusFieldName=\"stransdisplaystatus\"\r\n                                                                        statusField=\"ntransactionstatus\"\r\n                                                                        showStatusIcon={false}\r\n                                                                        showStatusName={true}\r\n                                                                        subFieldsLabel={true}\r\n                                                                        jsonField={'jsondata'}\r\n                                                                        jsonDesignFields={false}\r\n                                                                        selectionField=\"ntransactionstatus\"\r\n                                                                        selectionFieldName=\"sfilterstatus\"\r\n                                                                        selectionColorField=\"scolorhexcode\"\r\n                                                                        selectionList={this.props.Login.masterData.FilterStatus || []}\r\n                                                                        needSubFieldlabel={true}\r\n                                                                        subFields={this.state.DynamicTestColumns}\r\n                                                                        moreField={this.state.testMoreField}\r\n                                                                        needValidation={false}\r\n                                                                        needFilter={false}\r\n                                                                        filterColumnData={this.props.filterTransactionList}\r\n                                                                        searchListName=\"searchedTests\"\r\n                                                                        searchRef={this.searchTestRef}\r\n                                                                        filterParam={filterTestParam}\r\n                                                                        skip={this.state.testskip}\r\n                                                                        take={this.state.testtake}\r\n                                                                        showMoreResetList={true}\r\n                                                                        showMoreResetListName=\"AP_SAMPLE\"\r\n                                                                        handlePageChange={this.handleTestPageChange}\r\n                                                                        buttonCount={5}\r\n                                                                        childTabsKey={\r\n                                                                            [\r\n                                                                                \"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                                                                                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"ApprovalHistory\"\r\n                                                                            ]\r\n                                                                        }\r\n                                                                        commonActions={\r\n\r\n                                                                            <ProductList className=\"d-flex product-category justify-content-end icon-group-wrap\">\r\n                                                                                <Nav.Link\r\n                                                                                    hidden={this.state.userRoleControlRights.indexOf(editParamId) === -1}\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EDITREPORTMANDATORY\" })}\r\n                                                                                    data-for=\"tooltip-common-wrap\"\r\n                                                                                    data-place=\"left\"\r\n                                                                                    className=\"btn btn-circle outline-grey\"\r\n                                                                                    onClick={() => this.props.getParameterEdit({ APSelectedTest: this.props.Login.masterData.APSelectedTest, userInfo: this.props.Login.userInfo, masterData: this.props.Login.masterData })}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                                                </Nav.Link>\r\n\r\n                                                                                {this.props.Login.masterData.actionStatus &&\r\n                                                                                    this.state.userRoleControlRights.indexOf(TestApprovalActionId) !== -1 &&\r\n                                                                                    actionStatus.length > 0 ?\r\n                                                                                    <CustomPopOver\r\n                                                                                        icon={faBolt}\r\n                                                                                        nav={true}\r\n                                                                                        data={actionStatus}\r\n                                                                                        btnClasses=\"btn-circle btn_grey ml-2\"\r\n                                                                                        dynamicButton={(value) => this.checkRetestAction(value, TestApprovalActionId)}\r\n                                                                                        textKey=\"stransdisplaystatus\"\r\n                                                                                        iconKey=\"ntransactionstatus\"\r\n                                                                                    >\r\n                                                                                    </CustomPopOver>\r\n                                                                                    : \"\"}\r\n                                                                            </ProductList>\r\n                                                                        }\r\n                                                                    />\r\n                                                                </Card.Body>\r\n                                                            </Card>\r\n                                                        </ContentPanel>\r\n                                                    </SplitterLayout>\r\n                                                </div>\r\n                                                <ContentPanel style={this.state.showSample === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                    <Card className=\"border-0\">\r\n                                                        <Card.Body className='p-0'>\r\n                                                            <Row>\r\n                                                                <Col md={12}>\r\n                                                                    <Card className='p-0'>\r\n                                                                        <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                            <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                                <h4 >{this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}</h4>\r\n                                                                            </span>\r\n                                                                            <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                                onClick={() => this.showAPTestList()}\r\n                                                                            >\r\n                                                                                <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                                {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                            </button>\r\n                                                                        </Card.Header>\r\n                                                                        <Card.Body>\r\n                                                                            <ScrollBar>\r\n                                                                                <div style={{ height: this.state.initialVerticalWidth }}>\r\n                                                                                    {this.props.Login.masterData.APSelectedSample && this.props.Login.masterData.APSelectedSample.length === 1 ?\r\n                                                                                        <SampleInfoView\r\n                                                                                            data={(this.props.Login.masterData.APSelectedSample && this.props.Login.masterData.APSelectedSample.length > 0) ?\r\n                                                                                                this.props.Login.masterData.APSelectedSample[this.props.Login.masterData.APSelectedSample.length - 1] : {}}\r\n                                                                                            SingleItem={this.props.Login.masterData.APSelectedSample && this.props.Login.masterData.APSelectedSample ?\r\n                                                                                                this.state.SingleItem : []}\r\n                                                                                            screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                            userInfo = {this.props.Login.userInfo}\r\n\r\n                                                                                        />\r\n\r\n                                                                                        :\r\n                                                                                        <SampleInfoGrid\r\n                                                                                            selectedSample={this.props.Login.masterData.APSelectedSample}\r\n                                                                                            userInfo={this.props.Login.userInfo || {}}\r\n                                                                                            masterData={this.props.Login.masterData}\r\n                                                                                            inputParam={this.props.Login.inputParam}\r\n                                                                                            dataState={this.state.sampleGridDataState}\r\n                                                                                            dataStateChange={this.sampleInfoDataStateChange}\r\n                                                                                            extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem)||[]}\r\n                                                                                            detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField)||[]}\r\n                                                                                            primaryKeyField={\"npreregno\"}\r\n                                                                                            expandField=\"expanded\"\r\n                                                                                            screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                            jsonField={\"jsondata\"}\r\n                                                                                        />\r\n                                                                                    }\r\n                                                                                </div>\r\n                                                                            </ScrollBar>\r\n                                                                        </Card.Body>\r\n                                                                    </Card>\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Card.Body>\r\n                                                    </Card>\r\n                                                </ContentPanel>\r\n                                            </div>\r\n                                            <div>\r\n                                                <ScrollBar>\r\n                                                    <div style={{ height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\" }}>\r\n                                                        {this.state.showSample ?\r\n\r\n                                                            <CustomTabs paneHeight={this.state.tabPane} activeKey={this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"}\r\n                                                                tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} /> :\r\n\r\n                                                            this.state.showTest ?\r\n                                                                <Card>\r\n                                                                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                            <h4 className=\"card-title\">Parameter Results</h4>\r\n                                                                        </span>\r\n                                                                    </Card.Header>\r\n                                                                    <CustomTabs paneHeight={this.state.tabPane} activeKey={this.props.Login.activeTestTab || \"IDS_RESULTS\"}\r\n                                                                        tabDetail={this.testTabDetail()} onTabChange={this.onTestTabChange} />\r\n                                                                </Card>\r\n                                                                : \"\"}\r\n                                                    </div>\r\n                                                </ScrollBar>\r\n                                            </div>\r\n                                        </SplitterLayout>\r\n                                        {/* <div className=\"fixed_list_height\">\r\n                                            <>\r\n                                                <div className=\"card_group\">\r\n                                                    <ContentPanel style={this.state.showTest === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                        <Card className=\"border-0\">\r\n                                                            <Card.Body className='p-0'>\r\n                                                                <Card>\r\n                                                                    <Card.Header className=\"d-flex justify-content-between\" style={{ borderBottom: \"0px\" }}>\r\n                                                                        <span>\r\n                                                                            <h4 >{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                                                                        </span>\r\n                                                                        <Button className=\"btn btn-primary\"\r\n                                                                            onClick={() => this.showSampleInfo()}>\r\n                                                                            <FontAwesomeIcon icon={faEye} />{\"  \"}\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n\r\n                                                                        </Button>\r\n                                                                    </Card.Header>\r\n                                                                    <Card.Body className=\"p-0\">\r\n                                                                        {this.state.showTest ?\r\n                                                                            <TransactionListMaster\r\n                                                                                needMultiSelect={true}\r\n                                                                                masterList={this.props.Login.masterData.searchedTests || AP_TestList}\r\n                                                                                selectedMaster={this.props.Login.masterData.selectedTest}\r\n                                                                                primaryKeyField=\"ntransactiontestcode\"\r\n                                                                                getMasterDetail={this.props.getTestChildTabDetail}\r\n                                                                                inputParam={testChildGetParam}\r\n                                                                                additionalParam={[]}\r\n                                                                                mainField={this.state.testListMainField.length > 0 && this.state.testListMainField[0]['2']}\r\n                                                                                selectedListName=\"selectedTest\"\r\n                                                                                objectName=\"test\"\r\n                                                                                listName=\"IDS_TEST\"\r\n                                                                                pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                                                                                showStatusLink={true}\r\n                                                                                statusFieldName=\"stransdisplaystatus\"\r\n                                                                                statusField=\"ntransactionstatus\"\r\n                                                                                showStatusIcon={false}\r\n                                                                                showStatusName={true}\r\n                                                                                subFieldsLabel={true}\r\n                                                                                selectionField=\"ntransactionstatus\"\r\n                                                                                selectionFieldName=\"sfilterstatus\"\r\n                                                                                selectionColorField=\"scolorhexcode\"\r\n                                                                                selectionList={this.props.Login.masterData.FilterStatus || []}\r\n                                                                                needSubFieldlabel={true}\r\n                                                                                subFields={this.state.testListColumns}\r\n                                                                                moreField={this.state.testMoreField}\r\n                                                                                needValidation={false}\r\n                                                                                needFilter={false}\r\n                                                                                filterColumnData={this.props.filterTransactionList}\r\n                                                                                searchListName=\"searchedTests\"\r\n                                                                                searchRef={this.searchTestRef}\r\n                                                                                filterParam={filterTestParam}\r\n                                                                                skip={this.state.testskip}\r\n                                                                                take={this.state.testtake}\r\n                                                                                showMoreResetList = {true}\r\n                                                                                showMoreResetListName=\"AP_SAMPLE\"\r\n                                                                                handlePageChange={this.handleTestPageChange}\r\n                                                                                buttonCount={5}\r\n                                                                                childTabsKey={\r\n                                                                                    [\r\n                                                                                        \"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                                                                                        \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"ApprovalHistory\"\r\n                                                                                    ]\r\n                                                                                }\r\n                                                                                commonActions={\r\n\r\n                                                                                    <ProductList className=\"d-flex product-category justify-content-end icon-group-wrap\">\r\n                                                                                        <Nav.Link\r\n                                                                                            hidden={this.state.userRoleControlRights.indexOf(editParamId) === -1}\r\n                                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_EDITREPORTMANDATORY\" })}\r\n                                                                                            data-for=\"tooltip-common-wrap\"\r\n                                                                                            data-place=\"left\"\r\n                                                                                            className=\"btn btn-circle outline-grey\"\r\n                                                                                            onClick={() => this.props.getParameterEdit({ selectedTest: this.props.Login.masterData.selectedTest, userInfo: this.props.Login.userInfo, masterData: this.props.Login.masterData })}\r\n                                                                                        >\r\n                                                                                        <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                                                        </Nav.Link>\r\n                                                                                        {this.props.Login.masterData.actionStatus &&\r\n                                                                                            this.state.userRoleControlRights.indexOf(TestApprovalActionId) !== -1 &&\r\n                                                                                            actionStatus.length > 0 ?\r\n                                                                                            <CustomPopOver\r\n                                                                                                icon={faBolt}\r\n                                                                                                nav={true}\r\n                                                                                                data={actionStatus}\r\n                                                                                                btnClasses=\"btn-circle btn_grey ml-2\"\r\n                                                                                                dynamicButton={(value) => this.checkRetestAction(value, TestApprovalActionId)}\r\n                                                                                                textKey=\"stransdisplaystatus\"\r\n                                                                                                iconKey=\"ntransactionstatus\"\r\n\r\n                                                                                            >\r\n                                                                                            </CustomPopOver>\r\n\r\n                                                                                            : \"\"}\r\n\r\n                                                                                    </ProductList>\r\n\r\n                                                                                }\r\n                                                                            />\r\n                                                                            : \"\"}\r\n                                                                    </Card.Body>\r\n                                                                </Card>\r\n                                                            </Card.Body>\r\n                                                        </Card>\r\n                                                    </ContentPanel>\r\n                                                    <ContentPanel style={this.state.showSample === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                        <Row noGutters={\"true\"}>\r\n                                                            <Col md={12}>\r\n                                                                <Card>\r\n                                                                    <Card.Header className=\"d-flex justify-content-between\">\r\n                                                                        <span>\r\n                                                                            <h4 >{this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}</h4>\r\n                                                                        </span>\r\n                                                                        <Button className=\"btn btn-primary\"\r\n                                                                            onClick={() => this.showTestList()}>\r\n                                                                            <FontAwesomeIcon icon={faEye} />{\"  \"}\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                        </Button>\r\n                                                                    </Card.Header>\r\n                                                                    {this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ?\r\n                                                                        < SampleInfoView\r\n                                                                            data={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 ? this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {}}\r\n                                                                            SingleItem={this.state.SingleItem}\r\n                                                                            screenName=\"IDS_SAMPLEINFO\"\r\n                                                                        />\r\n                                                                        :\r\n                                                                        this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 1 ?\r\n                                                                            <SampleInfoGrid\r\n                                                                                selectedSample={this.props.Login.masterData.selectedSample}\r\n                                                                                dataState={this.state.sampleGridDataState}\r\n                                                                                dataStateChange={this.sampleGridDataStateChange}\r\n                                                                                detailedFieldList={this.state.SampleGridExpandableItem}\r\n                                                                                extractedColumnList={this.state.SampleGridItem}\r\n                                                                                userInfo={this.props.Login.userInfo}\r\n                                                                                inputParam={this.props.Login.inputParam}\r\n                                                                                screenName=\"IDS_SAMPLEINFO\"\r\n                                                                            /> : \"\"\r\n                                                                    }\r\n                                                                </Card>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </ContentPanel>\r\n                                                    <ListWrapper>\r\n                                                        <ContentPanel className=\"panel-main-content\">\r\n                                                            <Card className=\"border-0\">\r\n                                                                <Card.Body className='p-0'>\r\n                                                                    <Row noGutters={\"true\"}>\r\n                                                                        <Col md={12}>\r\n                                                                            {this.state.showTest ?\r\n                                                                                <CustomTabs paneHeight={this.state.tabPane} activeKey={this.props.Login.activeTestTab || \"IDS_RESULTS\"} tabDetail={this.testTabDetail()} onTabChange={this.onTestTabChange} /> :\r\n                                                                                this.state.showSample ?\r\n                                                                                    <CustomTabs paneHeight={this.state.tabPane} activeKey={this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"} tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} />\r\n                                                                                    : \"\"}\r\n                                                                        </Col>\r\n                                                                    </Row>\r\n                                                                </Card.Body>\r\n                                                            </Card>\r\n                                                        </ContentPanel>\r\n                                                    </ListWrapper>\r\n                                                </div>\r\n                                            </>\r\n                                        </div> */}\r\n                                    </ScrollBar>\r\n\r\n                                </SplitterLayout>\r\n                            </ListWrapper >\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n                {this.props.Login.openChildModal ?\r\n                    <SlideOutModal\r\n                        onSaveClick={this.props.Login.operation === 'dynamic' ? () => this.performTestActions(this.props.Login.action, TestApprovalActionId) : this.onSaveClick}\r\n                        operation={this.props.Login.operation}\r\n                        screenName={this.props.Login.screenName}\r\n                        closeModal={this.handleClose}\r\n                        show={this.props.Login.openChildModal}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.operation === 'enforce' ? [{ \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"senforcestatuscomment\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }] : []}\r\n                        loginoperation={this.props.Login.operation === 'view' ? true : false}\r\n                        //graphView={this.props.Login.operation !=='enforce' ? this.props.Login.operation:undefined}\r\n                        noSave={this.props.Login.operation === 'view' ? true : false}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            this.props.Login.operation === 'enforce' ?\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <FormSelectSearch\r\n                                            name={\"ngradecode\"}\r\n                                            formLabel={this.props.intl.formatMessage({ id: \"IDS_STATUS\" })}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_STATUS\" })}\r\n                                            value={this.props.Login.masterData.GradeValue || []}\r\n                                            options={this.props.Login.masterData.Grade || []}\r\n                                            optionId=\"ngradecode\"\r\n                                            optionValue=\"sgradename\"\r\n                                            isMandatory={true}\r\n                                            isMulti={false}\r\n                                            isDisabled={false}\r\n                                            isSearchable={false}\r\n                                            closeMenuOnSelect={true}\r\n                                            isClearable={false}\r\n                                            onChange={(event) => this.onComboChange(event, 'ngradecode')}\r\n                                        />\r\n                                        <FormTextarea\r\n                                            name=\"senforcestatuscomment\"\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                                            value={this.state.selectedRecord ? this.state.selectedRecord[\"senforcestatuscomment\"] : \"\"}\r\n                                            rows=\"2\"\r\n                                            isMandatory={true}\r\n                                            required={false}\r\n                                            maxLength={255}\r\n                                            onChange={(event) => this.onInputOnChange(event)}\r\n                                        />\r\n                                    </Col>\r\n                                </Row> :\r\n                                this.props.Login.operation === 'dynamic' ?\r\n                                    <Row>\r\n                                        <Col md=\"12\">\r\n                                            {/* <FormNumericInput\r\n                                            name={\"retestcount\"}\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_RETESTCOUNT\" })}\r\n                                            type=\"number\"\r\n                                            onChange={(event) => this.onInputOnChange(event)}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_FILENAME\" })}\r\n                                            value={this.state.selectedRecord?this.state.selectedRecord.retestcount:\"\"}\r\n                                            isMandatory=\"*\" \r\n                                            required={true}\r\n                                            min={1}\r\n                                            max={10}\r\n                                        /> */}\r\n                                            <FormNumericInput\r\n                                                name=\"retestcount\"\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_RETESTCOUNT\" })}\r\n                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_MAX\" }) + \": \" + this.props.Login.masterData.retestcount}\r\n                                                type=\"text\"\r\n                                                strict={true}\r\n                                                className=\"form-control\"\r\n                                                value={this.state.selectedRecord ? this.state.selectedRecord.retestcount : \"\"}\r\n                                                maxLength={6}\r\n                                                onChange={(event) => this.onNumericInputOnChange(event, 'retestcount')}\r\n                                                isMandatory=\"*\"\r\n                                                required={true}\r\n                                                noStyle={true}\r\n                                            // min={1}\r\n                                            // max={this.props.Login.masterData.retestcount}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row> :\r\n                                    this.props.Login.operation === 'view' ?\r\n                                        <Row>\r\n                                            <Col md={12}>\r\n                                                <DataGrid\r\n                                                    primaryKeyField={\"nresultparamcommenthistorycode\"}\r\n                                                    data={this.props.Login.masterData.enforceCommentsHistory || []}\r\n                                                    dataResult={this.props.Login.masterData.enforceCommentsHistory || []}\r\n                                                    dataState={{ skip: 0, take: this.props.Login.masterData.enforceCommentsHistory ? this.props.Login.masterData.enforceCommentsHistory.length : 0 }}\r\n                                                    // dataStateChange={this.dataStateChange}\r\n                                                    extractedColumnList={\r\n                                                        [\r\n                                                            { \"idsName\": \"IDS_ENFORCESTATUSCOMMENT\", \"dataField\": \"senforcestatuscomment\", \"width\": \"450px\" }\r\n                                                        ]\r\n                                                    }\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    controlMap={this.state.controlMap}\r\n                                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                                    inputParam={this.props.Login.inputParam}\r\n                                                    pageable={false}\r\n                                                    hideColumnFilter={true}\r\n                                                    isActionRequired={false}\r\n                                                    isToolBarRequired={false}\r\n                                                    scrollable={\"scrollable\"}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                        :\r\n                                        <EditApprovalParameter\r\n                                            ApprovalParamEdit={this.props.Login.ApprovalParamEdit || []}\r\n                                            changeMandatory={this.changeMandatory}\r\n                                            selectedRecord={this.state.selectedRecord.approvalParameterEdit || {}}\r\n                                            nsubsampleneed={this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nsubsampleneed}\r\n                                        />\r\n                        }\r\n                    />\r\n                    : \"\"}\r\n                {this.props.Login.masterData.ChecklistData && this.props.Login.screenName === 'IDS_CHECKLISTRESULT' ?\r\n                    <TemplateForm\r\n                        templateData={this.props.Login.masterData.ChecklistData}\r\n                        needSaveButton={false}\r\n                        formRef={this.formRef}\r\n                        onTemplateInputChange={this.onTemplateInputChange}\r\n                        handleClose={this.handleClose}\r\n                        onTemplateComboChange={this.onTemplateComboChange}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.props.onSaveCheckList}\r\n                        Login={this.props.Login}\r\n                        viewScreen={this.props.Login.openTemplateModal}\r\n                        selectedRecord={this.state.selectedRecord || []}\r\n                        onTemplateDateChange={this.onTemplateDateChange}\r\n                    />\r\n                    : \"\"}\r\n            </>\r\n        )\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let { userRoleControlRights, controlMap,\r\n            sampleListColumns, subSampleListColumns, testListColumns, SingleItem,\r\n            sampleListMainField, subSampleListMainField, testListMainField,\r\n            SampleGridItem, SampleGridExpandableItem, testMoreField,\r\n            resultDataState, instrumentDataState,\r\n            materialDataState, taskDataState,\r\n            documentDataState, resultChangeDataState,\r\n            historyDataState, testCommentDataState,\r\n            samplePrintHistoryDataState, sampleHistoryDataState,\r\n            selectedRecord, SampletypeList, RegistrationTypeList,\r\n            RegistrationSubTypeList, FilterStatusList,\r\n            ConfigVersionList, UserSectionList, TestList, skip, take, testskip, testtake, selectedFilter,\r\n            DynamicSampleColumns, DynamicSubSampleColumns, DynamicTestColumns, DynamicGridItem,\r\n            DynamicGridMoreField } = this.state;\r\n        let bool = false;\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            bool = true;\r\n            // this.setState({userRoleControlRights, controlMap});\r\n        }\r\n        if (this.props.Login.masterData.RegSubTypeValue !== previousProps.Login.masterData.RegSubTypeValue) {\r\n            if (this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nsubsampleneed === transactionStatus.NO) {\r\n                let dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] }\r\n                resultDataState = dataState\r\n                instrumentDataState = dataState\r\n                materialDataState = dataState\r\n                taskDataState = dataState\r\n                documentDataState = dataState\r\n                resultChangeDataState = dataState\r\n                historyDataState = dataState\r\n                testCommentDataState = dataState\r\n                // this.setState({\r\n                //     resultDataState: dataSate,instrumentDataState: dataSate,\r\n                //     materialDataState: dataSate,taskDataState: dataSate,instrumentDataState: dataSate,\r\n                //     instrumentDataState: dataSate,documentDataState: dataSate,resultChangeDataState: dataSate,\r\n                //     historyDataState: dataSate,resultDataState: dataSate,testCommentDataState:dataSate,\r\n                // });\r\n                bool = true;\r\n            }\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n\r\n            selectedRecord = this.props.Login.selectedRecord\r\n            // this.setState({selectedRecord: this.props.Login.selectedRecord });\r\n            bool = true;\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const SampletypeListMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'ascending', 'nsampletypecode', false);\r\n            const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.RegType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\r\n            const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.RegSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\r\n            const FilterStatusListMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", undefined, undefined, true);\r\n            const ConfigVersionListMap = constructOptionList(this.props.Login.masterData.ApprovalVersion || [], \"napprovalconfigversioncode\", \"sversionname\", 'descending', 'ntransactionstatus', false);\r\n            const UserSectionListMap = constructOptionList(this.props.Login.masterData.UserSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\r\n            const TestListMap = constructOptionList(this.props.Login.masterData.Test || [], \"ntestcode\", \"stestsynonym\", undefined, undefined, true);\r\n            SampletypeList = SampletypeListMap.get(\"OptionList\");\r\n            RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\r\n            RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\r\n            FilterStatusList = FilterStatusListMap.get(\"OptionList\");\r\n            ConfigVersionList = ConfigVersionListMap.get(\"OptionList\");\r\n            UserSectionList = UserSectionListMap.get(\"OptionList\");\r\n            TestList = TestListMap.get(\"OptionList\");\r\n            bool = true;\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            let selectFilterStatus = { ntransactionstatus: transactionStatus.PARTIAL, sfilterstatus: this.props.intl.formatMessage({ id: \"IDS_PARTIAL\" }), scolorhexcode: \"#800000\" }\r\n\r\n            // const selectedFilters = this.props.Login.masterData.FilterStatusValue && \r\n            //     this.props.Login.masterData.FilterStatusValue.ntransactionstatus === transactionStatus.ALL ? \r\n            //   JSON.stringify (JSON.parse(this.props.Login.masterData.FilterStatus)) : []\r\n\r\n            // const selectedFilters = this.props.Login.masterData.FilterStatusValue &&\r\n            //     this.props.Login.masterData.FilterStatusValue.ntransactionstatus === transactionStatus.ALL ?\r\n            //     this.props.Login.masterData.FilterStatus : [];\r\n\r\n            const selectedFilters = this.props.Login.masterData.FilterStatus || [];\r\n\r\n            const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\r\n\r\n            const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL)\r\n            if (selectedFiltersNew.length > 0 && index === -1) {\r\n                selectedFiltersNew.push(selectFilterStatus)\r\n            }\r\n            selectedFilter = selectedFiltersNew;\r\n            if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\r\n                resultDataState = this.props.Login.resultDataState;\r\n            }\r\n            if (this.props.Login.instrumentDataState && this.props.Login.instrumentDataState !== previousProps.Login.instrumentDataState) {\r\n                instrumentDataState = this.props.Login.instrumentDataState;\r\n            }\r\n            if (this.props.Login.taskDataState && this.props.Login.taskDataState !== previousProps.Login.taskDataState) {\r\n                taskDataState = this.props.Login.taskDataState;\r\n            }\r\n            if (this.props.Login.resultChangeDataState && this.props.Login.resultChangeDataState !== previousProps.Login.resultChangeDataState) {\r\n                resultChangeDataState = this.props.Login.resultChangeDataState;\r\n            }\r\n            if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\r\n                historyDataState = this.props.Login.historyDataState;\r\n            }\r\n            if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\r\n                testCommentDataState = this.props.Login.testCommentDataState;\r\n            }\r\n            if (this.props.Login.samplePrintHistoryDataState && this.props.Login.samplePrintHistoryDataState !== previousProps.Login.samplePrintHistoryDataState) {\r\n                samplePrintHistoryDataState = this.props.Login.samplePrintHistoryDataState;\r\n            }\r\n            if (this.props.Login.sampleHistoryDataState && this.props.Login.sampleHistoryDataState !== previousProps.Login.sampleHistoryDataState) {\r\n                sampleHistoryDataState = this.props.Login.sampleHistoryDataState;\r\n            }\r\n        }\r\n\r\n        if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n            const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n            DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\r\n            DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\r\n            DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\r\n\r\n            DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n            DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n\r\n            SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\r\n            testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\r\n            testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\r\n            bool = true;\r\n            // sampleListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.LISTITEM);\r\n            // subSampleListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], designProperties.LISTITEM);\r\n            // testListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], designProperties.LISTITEM);\r\n            // sampleListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.LISTMAINFIELD);\r\n            // subSampleListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], designProperties.LISTMAINFIELD);\r\n            // testListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], designProperties.LISTMAINFIELD);\r\n            // SingleItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.SINGLEITEMDATA)\r\n            // SampleGridItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.GRIDITEM)\r\n            // SampleGridExpandableItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.GRIDEXPANDABLEITEM)\r\n            // testMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], designProperties.LISTMOREITEM)\r\n            // let {selectedRecord}=this.state\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n            selectedRecord['fromDate'] = obj.fromDate;\r\n            selectedRecord['toDate'] = obj.toDate;\r\n            // this.setState({\r\n            //     sampleListColumns, subSampleListColumns, testListColumns, SingleItem,\r\n            //     sampleListMainField, subSampleListMainField, testListMainField,\r\n            //     SampleGridItem, SampleGridExpandableItem, testMoreField,selectedRecord\r\n            // })\r\n            bool = true;\r\n        }\r\n        if (bool) {\r\n            bool = false;\r\n            this.setState({\r\n                userRoleControlRights, controlMap,\r\n                sampleListColumns, subSampleListColumns, testListColumns, SingleItem,\r\n                sampleListMainField, subSampleListMainField, testListMainField,\r\n                SampleGridItem, SampleGridExpandableItem, testMoreField,\r\n                resultDataState, instrumentDataState,\r\n                materialDataState, taskDataState,\r\n                documentDataState, resultChangeDataState,\r\n                historyDataState, testCommentDataState,\r\n                samplePrintHistoryDataState, sampleHistoryDataState,\r\n                selectedRecord, SampletypeList, RegistrationTypeList,\r\n                RegistrationSubTypeList, FilterStatusList,\r\n                ConfigVersionList, UserSectionList, TestList,\r\n                skip, take, testskip, testtake, selectedFilter,\r\n                DynamicSampleColumns, DynamicSubSampleColumns,\r\n                DynamicTestColumns, DynamicGridItem,\r\n                DynamicGridMoreField\r\n            });\r\n        }\r\n    }\r\n\r\n    // previewSampleReport = (ncontrolCode) => {\r\n\r\n    //     console.log(\"report:\", this.props.Login.masterData.selectedSample);\r\n    //     const selectedSample = this.props.Login.masterData.selectedSample[0];\r\n\r\n    //     const inputData = {ndecisionstatus:selectedSample.ndecisionstatus,\r\n    //                         userinfo:this.props.Login.userInfo,\r\n    //                         nprimarykey: selectedSample.npreregno,\r\n    //                         ncoareporttypecode : reportCOAType.SAMPLECERTIFICATEPRIVIEW,\r\n    //                         nreporttypecode :REPORTTYPE.SAMPLEREPORT,\r\n    //                         sprimarykeyname :\"npreregno\",\r\n    //                         ncontrolcode : ncontrolCode,\r\n    //                         nregtypecode:selectedSample.nregtypecode,\r\n    //                         nregsubtypecode: selectedSample.nregsubtypecode\r\n    //                         }\r\n    //     this.props.previewSampleReport(inputData);\r\n\r\n    // }\r\n\r\n    sampleTabDetail() {\r\n        const tabMap = new Map();\r\n        let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        tabMap.set(\"IDS_SAMPLEATTACHMENTS\",\r\n            <Attachments\r\n                screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n                selectedMaster={this.props.Login.masterData.selectedSample}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                masterList={this.props.Login.masterData.selectedSample}\r\n                masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHEMENT\"}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                addName={\"AddSampleAttachment\"}\r\n                editName={\"EditSampleAttachment\"}\r\n                deleteName={\"DeleteSampleAttachment\"}\r\n                viewName={\"ViewSampleAttachment\"}\r\n                methodUrl={\"SampleAttachment\"}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SampleAttachment\",\r\n                        npreregno,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: this.props.Login.screenName\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    masterList: this.props.Login.masterData.selectedSample\r\n\r\n                }}\r\n                selectedListName=\"IDS_SAMPLES\"\r\n                displayName=\"sarno\"\r\n            />)\r\n        tabMap.set(\"IDS_SAMPLEAPPROVALHISTORY\",\r\n            <SampleApprovalHistory\r\n                userInfo={this.props.Login.userInfo}\r\n                ApprovalHistory={this.props.Login.masterData.SampleApprovalHistory}\r\n                inputParam={this.props.Login.inputParam}\r\n                dataState={this.state.sampleHistoryDataState}\r\n                dataStateChange={this.sampleDataStateChange}\r\n                screenName=\"IDS_SAMPLEAPPROVALHISTORY\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                selectedId={null}\r\n            />)\r\n\r\n        tabMap.set(\"IDS_PRINTHISTORY\",\r\n            <ApprovalPrintHistoryTab\r\n                userInfo={this.props.Login.userInfo}\r\n                ApprovalPrintHistory={this.props.Login.masterData.PrintHistory}\r\n                inputParam={this.props.Login.inputParam}\r\n                dataState={this.state.samplePrintHistoryDataState}\r\n                dataStateChange={this.sampleDataStateChange}\r\n                screenName=\"IDS_PRINTHISTORY\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                selectedId={null}\r\n            />);\r\n        if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n            tabMap.set(\"IDS_REPORTHISTORY\",\r\n                <ReportHistoryTab\r\n                    userInfo={this.props.Login.userInfo}\r\n                    COAHistory={this.props.Login.masterData.COAHistory}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    dataState={this.state.reportHistoryDataState}\r\n                    dataStateChange={this.sampleDataStateChange}\r\n                    screenName=\"IDS_REPORTHISTORY\"\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    selectedId={null}\r\n                    viewDownloadFile={this.downloadReport}\r\n                />);\r\n        }\r\n        return tabMap;\r\n    }\r\n    downloadReport = (input) => {\r\n        let inputParam = {\r\n            inputData: { selectedRecord: { ...input.inputData }, userinfo: this.props.Login.userInfo },\r\n            classUrl: \"approval\",\r\n            operation: \"view\",\r\n            methodUrl: \"Report\"\r\n        }\r\n        this.props.viewAttachment(inputParam)\r\n    }\r\n    testTabDetail = () => {\r\n        const testTabMap = new Map();\r\n        let { testskip, testtake } = this.state\r\n        let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : this.props.Login.masterData.AP_TEST || [];\r\n        const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.APSelectedTest, \"ntransactiontestcode\");\r\n        // let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        let ntransactiontestcode = this.props.Login.masterData.APSelectedTest ? this.props.Login.masterData.APSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        if (this.state.showTest) {\r\n            testTabMap.set(\"IDS_RESULTS\", <ApprovalResultsTab\r\n                userInfo={this.props.Login.userInfo}\r\n                masterData={this.props.Login.masterData}\r\n                inputParam={this.props.Login.inputParam}\r\n                dataState={this.state.resultDataState}\r\n                dataStateChange={this.testDataStateChange}\r\n                screenName=\"IDS_RESULTS\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                getStatusCombo={this.props.getStatusCombo}\r\n                selectedId={this.props.Login.masterData.selectedParamId}\r\n                viewFile={this.props.viewAttachment}\r\n                checkListRecord={this.props.checkListRecord}\r\n                getEnforceCommentsHistory={this.props.getEnforceCommentsHistory}\r\n            />)\r\n            testTabMap.set(\"IDS_INSTRUMENT\", <ApprovalInstrumentTab\r\n                userInfo={this.props.Login.userInfo}\r\n                masterData={this.props.Login.masterData}\r\n                inputParam={this.props.Login.inputParam}\r\n                dataState={this.state.instrumentDataState}\r\n                dataStateChange={this.testDataStateChange}\r\n                screenName=\"IDS_INSTRUMENT\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                selectedId={null}\r\n            />)\r\n            // testTabMap.set(\"IDS_MATERIAL\", <ApprovalResultsTab\r\n            //     userInfo={this.props.Login.userInfo}\r\n            //     masterData={this.props.Login.masterData}\r\n            //     inputParam={this.props.Login.inputParam}\r\n            //     dataState={this.state.dataState}\r\n            //     dataStateChange={this.testDataStateChange}\r\n            //     screenName=\"IDS_MATERIAL\"\r\n            //     controlMap={this.state.controlMap}\r\n            //     userRoleControlRights={this.state.userRoleControlRights}\r\n            //     selectedId={null}\r\n            // />)\r\n            testTabMap.set(\"IDS_TASK\", <ApprovalTask\r\n                userInfo={this.props.Login.userInfo}\r\n                ResultUsedTasks={this.props.Login.masterData.ResultUsedTasks}\r\n                inputParam={this.props.Login.inputParam}\r\n                dataState={this.state.taskDataState}\r\n                dataStateChange={this.testDataStateChange}\r\n                screenName=\"IDS_TASK\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                selectedId={null}\r\n            />)\r\n            testTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n                screenName=\"IDS_TESTATTACHMENTS\"\r\n                selectedMaster={selectedTestList}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                masterList={selectedTestList}\r\n                masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n                addName={\"AddTestAttachment\"}\r\n                editName={\"EditTestAttachment\"}\r\n                deleteName={\"DeleteTestAttachment\"}\r\n                viewName={\"ViewTestAttachment\"}\r\n                methodUrl={\"TestAttachment\"}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"TestAttachment\",\r\n                        ntransactiontestcode,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\",\r\n                    masterList: selectedTestList\r\n\r\n                }}\r\n                selectedListName=\"IDS_TESTS\"\r\n                displayName=\"stestsynonym\"\r\n            />)\r\n            testTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n                screenName=\"IDS_TESTCOMMENTS\"\r\n                selectedMaster={selectedTestList}\r\n                onSaveClick={this.onCommentsSaveClick}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n                fetchRecord={this.props.getCommentsCombo}\r\n                masterList={selectedTestList}\r\n                masterAlertStatus={\"IDS_SELECTTESTTOADDCOMMENTS\"}\r\n                addName={\"AddTestComment\"}\r\n                editName={\"EditTestComment\"}\r\n                deleteName={\"DeleteTestComment\"}\r\n                methodUrl={\"TestComment\"}\r\n                isTestComment={false}\r\n                primaryKeyField={\"ntestcommentcode\"}\r\n                dataState={this.state.testCommentDataState}\r\n                dataStateChange={this.testDataStateChange}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"TestComment\",\r\n                        ntransactiontestcode,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: \"IDS_TESTCOMMENTS\"\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\",\r\n                    operation: \"update\",\r\n                    masterList: selectedTestList,\r\n                    ncontrolCode: editTestCommentsId\r\n\r\n                }}\r\n                selectedListName=\"IDS_TESTS\"\r\n                displayName=\"stestsynonym\"\r\n            />)\r\n\r\n            testTabMap.set(\"IDS_RESULTCHANGEHISTORY\", <ResultChangeHistoryTab\r\n                userInfo={this.props.Login.userInfo}\r\n                ApprovalResultChangeHistory={this.props.Login.masterData.ApprovalResultChangeHistory}\r\n                inputParam={this.props.Login.inputParam}\r\n                dataState={this.state.resultChangeDataState}\r\n                dataStateChange={this.testDataStateChange}\r\n                screenName=\"IDS_RESULTCHANGEHISTORY\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                selectedId={null}\r\n\r\n            />)\r\n\r\n\r\n\r\n\r\n            testTabMap.set(\"IDS_TESTAPPROVALHISTORY\",\r\n                <ApprovalHistoryTab\r\n                    userInfo={this.props.Login.userInfo}\r\n                    ApprovalHistory={this.props.Login.masterData.ApprovalHistory}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    dataState={this.state.historyDataState}\r\n                    dataStateChange={this.testDataStateChange}\r\n                    screenName=\"IDS_TESTAPPROVALHISTORY\"\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    selectedId={null}\r\n                />)\r\n        }\r\n\r\n        return testTabMap;\r\n    }\r\n    onNumericInputOnChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (value === 0 || value === 0.0) {\r\n            selectedRecord[name] = \"\";\r\n            this.setState({ selectedRecord });\r\n        } else {\r\n\r\n            selectedRecord[name] = value;\r\n            this.setState({ selectedRecord });\r\n\r\n        }\r\n    }\r\n    onTestTabChange = (tabProps) => {\r\n\r\n        const activeTestTab = tabProps.screenName;\r\n        if (activeTestTab !== this.props.Login.activeTestTab) {\r\n            if (this.props.Login.masterData.APSelectedTest && this.props.Login.masterData.APSelectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    APSelectedTest: this.props.Login.masterData.APSelectedTest,\r\n                    ntransactiontestcode: this.props.Login.masterData.APSelectedTest ?\r\n                        String(this.props.Login.masterData.APSelectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                    npreregno: this.props.Login.masterData.selectedSample ?\r\n                        this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestTab,\r\n                    screenName: activeTestTab,\r\n                    resultDataState: this.state.resultDataState,\r\n                    instrumentDataState: this.state.instrumentDataState,\r\n                    materialDataState: this.state.materialDataState,\r\n                    taskDataState: this.state.taskDataState,\r\n                    documentDataState: this.state.documentDataState,\r\n                    historyDataState: this.state.historyDataState,\r\n                    resultChangeDataState: this.state.resultChangeDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                }\r\n                this.props.getTestChildTabDetail(inputData, true)\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }))\r\n            }\r\n        }\r\n    }\r\n    onSampleTabChange = (tabProps) => {\r\n        const activeSampleTab = tabProps.screenName;\r\n        if (activeSampleTab !== this.props.Login.activeSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedSample: this.props.Login.masterData.selectedSample,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSampleTab,\r\n                activeSampleTab\r\n            }\r\n            this.props.getSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n    showSampleInfo() {\r\n        this.setState({ showSample: true, showTest: false })\r\n    }\r\n    showTestList() {\r\n        this.setState({ showTest: true, showSample: false })\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    };\r\n    handleTestPageChange = e => {\r\n        this.setState({\r\n            testskip: e.skip,\r\n            testtake: e.take\r\n        });\r\n    };\r\n    checkRetestAction = (action, ncontrolCode) => {\r\n        let { testskip, testtake } = this.state\r\n        let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.AP_TEST];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.APSelectedTest, \"ntransactiontestcode\");\r\n        if (selectedTestList.length > 0) {\r\n            if (action.ntransactionstatus === transactionStatus.RETEST) {\r\n\r\n                if (this.props.Login.masterData.retestcount && this.props.Login.masterData.retestcount > 1) {\r\n                    if (selectedTestList.length > 1) {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTONETESTONLY\" }));\r\n                    } else {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                action,\r\n                                masterData: this.props.Login.masterData,\r\n                                openChildModal: true,\r\n                                screenName: \"IDS_RETESTCOUNT\",\r\n                                operation: \"dynamic\"\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    }\r\n                } else {\r\n                    this.performTestActions(action, ncontrolCode);\r\n                }\r\n\r\n            } else {\r\n\r\n                this.performTestActions(action, ncontrolCode);\r\n\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }))\r\n        }\r\n    }\r\n    performTestActions = (action, ncontrolCode) => {\r\n        if (action.ntransactionstatus === transactionStatus.RETEST && this.state.selectedRecord && this.state.selectedRecord.retestcount > this.props.Login.masterData.retestcount) {\r\n\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_MAX\" }) + \": \" + this.props.Login.masterData.retestcount)\r\n\r\n        } else {\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo)\r\n            let ntransCode = this.props.Login.masterData.FilterStatusValue.ntransactionstatus\r\n            if (ntransCode === transactionStatus.ALL) {\r\n                ntransCode = this.props.Login.masterData.FilterStatus.map(status => status.ntransactionstatus).join(\",\");\r\n            } else {\r\n                ntransCode = ntransCode + \",\" + action.ntransactionstatus\r\n            }\r\n            let { testskip, testtake } = this.state\r\n            let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.AP_TEST];\r\n            testList = testList.slice(testskip, testskip + testtake);\r\n            let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.APSelectedTest, \"ntransactiontestcode\");\r\n            const inputParam = {\r\n                inputData: {\r\n                    'performaction': {\r\n                        npreregno: selectedTestList.map(sample => sample.npreregno).join(\",\"),\r\n                        ntransactionsamplecode: this.props.Login.masterData.APSelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n                        ntransactiontestcode: selectedTestList.map(test => test.ntransactiontestcode).join(\",\"),\r\n                        nsectioncode: this.props.Login.masterData.UserSectionValue ?\r\n                            this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ?\r\n                                this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') :\r\n                                String(this.props.Login.masterData.UserSectionValue.nsectioncode) :\r\n                            null,\r\n                        ntestcode: this.props.Login.masterData.realTestValue && this.props.Login.masterData.realTestValue.ntestcode,\r\n                        nTransStatus: action.ntransactionstatus,\r\n                        ntransactionstatus: String(-1),\r\n                        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                        napprovalversioncode: this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode,\r\n                        nneedsubsample:(this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) || false,\r\n                        dfrom: obj.fromDate,\r\n                        dto: obj.toDate,\r\n                        nflag: 2,\r\n                        ntype: 1,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        APSelectedSample: this.props.Login.masterData.APSelectedSample,\r\n                        APSelectedSubSample: this.props.Login.masterData.APSelectedSubSample,\r\n                        APSelectedTest: this.props.Login.masterData.APSelectedTest,\r\n                        retestcount: action.ntransactionstatus === transactionStatus.RETEST ? this.state.selectedRecord ? this.state.selectedRecord.retestcount || 1 : 1 : undefined,\r\n                        ncontrolCode,\r\n                        checkBoxOperation:3\r\n                    },\r\n                    userinfo: this.props.Login.userInfo\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                methodUrl: \"performaction\",\r\n                postParamList: this.postParamList\r\n            }\r\n            if (action.nesignneed === transactionStatus.YES) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openChildModal: true,\r\n                        screenName: \"performaction\",\r\n                        operation: \"dynamic\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.performAction(inputParam)\r\n            }\r\n        }\r\n    }\r\n    updateDecision = (action) => {\r\n        let ntransCode = this.props.Login.masterData.realFilterStatusValue.ntransactionstatus\r\n        if (ntransCode === transactionStatus.ALL) {\r\n            ntransCode = this.props.Login.masterData.FilterStatus.map(status => status.ntransactionstatus).join(\",\");\r\n        }\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo)\r\n        let { skip, take } = this.state\r\n        let sampleList = [...this.props.Login.masterData.AP_SAMPLE];\r\n        sampleList = sampleList.splice(skip, skip + take);\r\n        let selectedsampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n        if (selectedsampleList.length > 0) {\r\n            const inputData = {\r\n                'updatedecision': {\r\n                    npreregno: selectedsampleList.map(sample => sample.npreregno).join(\",\"),\r\n                    nTransStatus: action.ntransactionstatus,\r\n                    ntransactionstatus: String(ntransCode),\r\n                    dfrom: obj.fromDate,\r\n                    dto: obj.toDate,\r\n                    nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                    nsectioncode: this.props.Login.masterData.UserSectionValue ?\r\n                        this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ?\r\n                            this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') :\r\n                            String(this.props.Login.masterData.UserSectionValue.nsectioncode) :\r\n                        null,\r\n                    ntestcode: this.props.Login.masterData.TestValue ? this.props.Login.masterData.TestValue.ntestcode : 0,\r\n                    nflag: 1,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    napprovalversioncode: String(selectedsampleList[0].napprovalversioncode),\r\n                    napprovalconfigcode: selectedsampleList[0].napprovalconfigcode,\r\n                    selectedSample: this.props.Login.masterData.selectedSample,\r\n                }, userinfo: this.props.Login.userInfo\r\n\r\n            }\r\n            let inputParam = { postParamList: this.postParamList, inputData, masterData: this.props.Login.masterData }\r\n            if (action.nesignneed === transactionStatus.YES) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openChildModal: true,\r\n                        screenName: \"updatedecision\",\r\n                        operation: \"decision\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.updateDecision(inputParam)\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }))\r\n        }\r\n\r\n    }\r\n    onFilterComboChange = (comboData, fieldName) => {\r\n\r\n        if (comboData) {\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n            let inputParamData = {};\r\n            if (fieldName === 'nsampletypecode') {\r\n                if (comboData.value !== this.props.Login.masterData.SampleTypeValue.nsampletypecode) {\r\n                    inputParamData = {\r\n                        nflag: 2,\r\n                        dfrom: obj.fromDate,\r\n                        dto: obj.toDate,\r\n                        nsampletypecode: comboData.value,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        SampleTypeValue: comboData.item\r\n                    };\r\n                    this.props.getRegistrationType(inputParamData)\r\n                }\r\n            } else if (fieldName === 'nregtypecode') {\r\n                if (comboData.value !== this.props.Login.masterData.RegTypeValue.nregtypecode) {\r\n                    inputParamData = {\r\n                        nflag: 3,\r\n                        dfrom: obj.fromDate,\r\n                        dto: obj.toDate,\r\n                        nsampletypecode: this.props.Login.masterData.SampleTypeValue.nsampletypecode,\r\n                        nregtypecode: comboData.value,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        RegTypeValue: comboData.item\r\n                    }\r\n                    this.props.getRegistrationSubType(inputParamData)\r\n                }\r\n            } else if (fieldName === 'nregsubtypecode') {\r\n\r\n                if (comboData.value !== this.props.Login.masterData.RegSubTypeValue.nregsubtypecode) {\r\n                    let inputData = {\r\n                        nflag: 4,\r\n                        dfrom: obj.fromDate,\r\n                        dto: obj.toDate,\r\n                        nsampletypecode: this.props.Login.masterData.SampleTypeValue.nsampletypecode,\r\n                        nregtypecode: this.props.Login.masterData.RegTypeValue.nregtypecode,\r\n                        nregsubtypecode: comboData.value,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\r\n                    }\r\n                    inputParamData = {\r\n                        inputData,\r\n                        masterData: {\r\n                            ...this.props.Login.masterData,\r\n                            RegSubTypeValue: comboData.item\r\n                        }\r\n                    }\r\n                    this.props.getApprovalVersion(inputParamData)\r\n                }\r\n            }\r\n\r\n            else if (fieldName === 'napproveconfversioncode') {\r\n                if (comboData.value !== this.props.Login.masterData.ApprovalVersionValue.napproveconfversioncode) {\r\n                    // let masterData = { ...this.props.Login.masterData, ApprovalVersionValue: comboData.item }\r\n                    // const updateInfo = {\r\n                    //     typeName: DEFAULT_RETURN,\r\n                    //     data: { masterData }\r\n                    // }\r\n                    // this.props.updateStore(updateInfo);\r\n                    inputParamData = {\r\n                        nflag: 4,\r\n                        dfrom: obj.fromDate,\r\n                        dto: obj.toDate,\r\n                        nsampletypecode: this.props.Login.masterData.SampleTypeValue.nsampletypecode,\r\n                        nregtypecode: this.props.Login.masterData.RegTypeValue.nregtypecode,\r\n                        nregsubtypecode: this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\r\n                        napprovalversioncode: comboData.value,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        masterData: { ...this.props.Login.masterData, ApprovalVersionValue: comboData.item },\r\n                        RegSubTypeValue: this.props.Login.masterData.RegSubTypeValue,\r\n                        nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\r\n                    }\r\n                    this.props.getFilterStatus(inputParamData)\r\n                }\r\n            }\r\n            else if (fieldName === 'nsectioncode') {\r\n                if (comboData.value !== this.props.Login.masterData.UserSectionValue.nsectioncode) {\r\n                    // let masterData = { ...this.props.Login.masterData, UserSectionValue: comboData.item }\r\n                    inputParamData = {\r\n                        dfrom: obj.fromDate,\r\n                        dto: obj.toDate,\r\n                        nsampletypecode: this.props.Login.masterData.SampleTypeValue.nsampletypecode,\r\n                        nregtypecode: this.props.Login.masterData.RegTypeValue.nregtypecode,\r\n                        nregsubtypecode: this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\r\n                        napprovalversioncode: this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        masterData: { ...this.props.Login.masterData, UserSectionValue: comboData.item },\r\n                        RegSubTypeValue: this.props.Login.masterData.RegSubTypeValue,\r\n                        ntransactionstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n                        nsectioncode: comboData.value === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : comboData.value,\r\n                        stransactionstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n                    }\r\n\r\n                    this.props.getFilterBasedTest(inputParamData);\r\n                }\r\n            } else if (fieldName === 'njobstatuscode') {\r\n                if (comboData.value !== this.props.Login.masterData.JobStatusValue.njobstatuscode) {\r\n                    let masterData = { ...this.props.Login.masterData, JobStatusValue: comboData.item }\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { masterData }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n            }\r\n            else if (fieldName === 'ntestcode') {\r\n                if (comboData.value !== this.props.Login.masterData.TestValue.ntestcode) {\r\n                    let masterData = { ...this.props.Login.masterData, TestValue: comboData.item }\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { masterData }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n            }\r\n            else {\r\n                if (comboData.value !== this.props.Login.masterData.FilterStatusValue.ntransactionstatus) {\r\n                    //  let masterData = { ...this.props.Login.masterData, FilterStatusValue: comboData.item }\r\n                    //  const updateInfo = {\r\n                    //     typeName: DEFAULT_RETURN,\r\n                    //    data: { masterData }\r\n                    // }\r\n\r\n                    inputParamData = {\r\n                        dfrom: obj.fromDate,\r\n                        dto: obj.toDate,\r\n                        nsampletypecode: this.props.Login.masterData.SampleTypeValue.nsampletypecode,\r\n                        nregtypecode: this.props.Login.masterData.RegTypeValue.nregtypecode,\r\n                        nregsubtypecode: this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\r\n                        napprovalversioncode: this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        masterData: { ...this.props.Login.masterData, FilterStatusValue: comboData.item },\r\n                        RegSubTypeValue: this.props.Login.masterData.RegSubTypeValue,\r\n                        ntransactionstatus: comboData.value,\r\n                        stransactionstatus: comboData.value === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : comboData.value,\r\n                        nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\r\n                    }\r\n\r\n                    this.props.getFilterBasedTest(inputParamData);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onComboChange = (comboData) => {\r\n        if (comboData) {\r\n            let masterData = { ...this.props.Login.masterData, GradeValue: comboData }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { masterData }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    onInputOnChange = (event) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    handleDateChange = (dateName, dateValue) => {\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        let dfrom = this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date()\r\n        let dto = this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date()\r\n        let obj = {}\r\n        if (dateName === 'fromDate') {\r\n            obj = convertDateValuetoString(dateValue, dto, this.props.Login.userInfo)\r\n            dfrom = obj.fromDate\r\n            dto = obj.toDate\r\n        } else {\r\n            obj = convertDateValuetoString(dfrom, dateValue, this.props.Login.userInfo)\r\n            dfrom = obj.fromDate\r\n            dto = obj.toDate\r\n\r\n        }\r\n        let inputParam = {\r\n            inputData: {\r\n                nflag: 2,\r\n                nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\r\n                dfrom: String(dfrom),\r\n                dto: String(dto),\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            masterData: this.props.Login.masterData\r\n\r\n        }\r\n        this.props.getApprovalVersion(inputParam)\r\n    }\r\n    changeMandatory = (event, dataItem) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let value = event.currentTarget.checked ? transactionStatus.YES : transactionStatus.NO\r\n        selectedRecord[\"approvalParameterEdit\"] = { ...selectedRecord[\"approvalParameterEdit\"], [dataItem.ntransactionresultcode]: value }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onReload = () => {\r\n        let { realFromDate, realToDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue,\r\n            realFilterStatusValue, realApprovalVersionValue, realUserSectionValue, realTestValue } = this.props.Login.masterData\r\n        let masterData = { ...this.props.Login.masterData, realFromDate, realToDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realFilterStatusValue, realApprovalVersionValue, realUserSectionValue, realTestValue }\r\n        let inputData = {\r\n            npreregno: \"0\",\r\n            nneedsubsample: (realRegSubTypeValue && realRegSubTypeValue.nneedsubsample) || false,\r\n            nsampletypecode: (realSampleTypeValue && realSampleTypeValue.nsampletypecode) || -1,\r\n            nregtypecode: (realRegTypeValue && realRegTypeValue.nregtypecode) || -1,\r\n            nregsubtypecode: (realRegSubTypeValue && realRegSubTypeValue.nregsubtypecode) || -1,\r\n            ntransactionstatus: ((realFilterStatusValue && realFilterStatusValue.ntransactionstatus !== undefined) || realFilterStatusValue.ntransactionstatus !== '0') ? String(realFilterStatusValue.ntransactionstatus) : \"-1\",\r\n            napprovalconfigcode: realApprovalVersionValue ? realApprovalVersionValue.napprovalconfigcode || -1 : null,\r\n            napprovalversioncode: realApprovalVersionValue && realApprovalVersionValue.napprovalconfigversioncode ? String(realApprovalVersionValue.napprovalconfigversioncode) : null,\r\n            nsectioncode: realUserSectionValue ? realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(realUserSectionValue.nsectioncode) : null,\r\n            ntestcode: realTestValue && realTestValue.ntestcode ? realTestValue.ntestcode : -1,\r\n            userinfo: this.props.Login.userInfo,\r\n            activeTestTab: this.props.Login.activeTestTab || \"\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"\",\r\n            checkBoxOperation:3,\r\n            ntype:2\r\n        }\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1\r\n            && inputData.ntransactionstatus !== \"-1\" && inputData.napprovalconfigcode !== -1 && inputData.napprovalversioncode !== \"-1\"\r\n            && realFilterStatusValue.sfilterstatus !== null) {\r\n\r\n            let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo)\r\n            inputData['dfrom'] = obj.fromDate;\r\n            inputData['dto'] = obj.toDate;\r\n            let inputParam = {\r\n                masterData,\r\n                inputData,\r\n                searchSampleRef: this.searchSampleRef,\r\n                searchSubSampleRef: this.searchSubSampleRef,\r\n                searchTestRef: this.searchTestRef,\r\n                skip: this.state.skip,\r\n                take: this.state.take,\r\n                testskip: this.state.testskip,\r\n                testtake: this.state.testtake,\r\n                resultDataState: this.state.resultDataState,\r\n                instrumentDataState: this.state.instrumentDataState,\r\n                materialDataState: this.state.materialDataState,\r\n                taskDataState: this.state.taskDataState,\r\n                documentDataState: this.state.documentDataState,\r\n                resultChangeDataState: this.state.resultChangeDataState,\r\n                testCommentDataState: this.state.testCommentDataState,\r\n                historyDataState: this.state.historyDataState,\r\n                samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\r\n                sampleHistoryDataState: this.state.sampleHistoryDataState\r\n            }\r\n            this.props.getApprovalSample(inputParam)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }))\r\n        }\r\n    }\r\n    onFilterSubmit = () => {\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n        let realFromDate = obj.fromDate;\r\n        let realToDate = obj.toDate\r\n        // let realFromDate = new Date(this.props.Login.masterData.fromDate)\r\n        // let realToDate = new Date(this.props.Login.masterData.toDate)\r\n        let realSampleTypeValue = this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue\r\n        let realRegTypeValue = this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue\r\n        let realRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue\r\n        let realFilterStatusValue = this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue\r\n        let realApprovalVersionValue = this.props.Login.masterData.ApprovalVersionValue && this.props.Login.masterData.ApprovalVersionValue\r\n        let realUserSectionValue = this.props.Login.masterData.UserSectionValue && this.props.Login.masterData.UserSectionValue\r\n        let realTestValue = this.props.Login.masterData.TestValue && this.props.Login.masterData.TestValue\r\n        let masterData = { ...this.props.Login.masterData, realFromDate, realToDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realFilterStatusValue, realApprovalVersionValue, realUserSectionValue, realTestValue }\r\n        let inputData = {\r\n            npreregno: \"0\",\r\n            nsampletypecode: (this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode) || -1,\r\n            nregtypecode: parseInt(this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode) || -1,\r\n            nregsubtypecode: parseInt(this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode) || -1,\r\n            ntransactionstatus: ((this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus !== undefined) || this.props.Login.masterData.FilterStatusValue.ntransactionstatus !== '0') ? String(this.props.Login.masterData.FilterStatusValue.ntransactionstatus) : \"-1\",\r\n            napprovalconfigcode: this.props.Login.masterData.ApprovalVersionValue ? this.props.Login.masterData.ApprovalVersionValue.napprovalconfigcode || -1 : null,\r\n            napprovalversioncode: this.props.Login.masterData.ApprovalVersionValue && this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode ? String(this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode) : null,\r\n            nsectioncode: this.props.Login.masterData.UserSectionValue ? this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.UserSectionValue.nsectioncode) : null,\r\n            ntestcode: this.props.Login.masterData.TestValue ? this.props.Login.masterData.TestValue.ntestcode : -1,\r\n            nneedsubsample: (this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample) || -1,\r\n            userinfo: this.props.Login.userInfo,\r\n            activeTestTab: this.props.Login.activeTestTab,\r\n            activeSampleTab: this.props.Login.activeSampleTab,\r\n            checkBoxOperation: 3,\r\n            ntype:2\r\n        }\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1\r\n            && inputData.ntransactionstatus !== \"-1\" && inputData.napprovalconfigcode !== -1 && inputData.napprovalversioncode !== \"-1\"\r\n            && realFilterStatusValue.sfilterstatus !== null && inputData.ntestcode !== undefined) {\r\n\r\n            // let obj = this.covertDatetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate)\r\n            inputData['dfrom'] = obj.fromDate;\r\n            inputData['dto'] = obj.toDate;\r\n            let inputParam = {\r\n                masterData,\r\n                inputData,\r\n                searchSampleRef: this.searchSampleRef,\r\n                searchSubSampleRef: this.searchSubSampleRef,\r\n                searchTestRef: this.searchTestRef,\r\n                skip: this.state.skip,\r\n                take: this.state.take,\r\n                testskip: this.state.testskip,\r\n                testtake: this.state.testtake,\r\n                resultDataState: this.state.resultDataState,\r\n                instrumentDataState: this.state.instrumentDataState,\r\n                materialDataState: this.state.materialDataState,\r\n                taskDataState: this.state.taskDataState,\r\n                documentDataState: this.state.documentDataState,\r\n                resultChangeDataState: this.state.resultChangeDataState,\r\n                testCommentDataState: this.state.testCommentDataState,\r\n                historyDataState: this.state.historyDataState,\r\n                samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\r\n                sampleHistoryDataState: this.state.sampleHistoryDataState\r\n            }\r\n            this.props.getApprovalSample(inputParam)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }))\r\n        }\r\n\r\n    }\r\n    testDataStateChange = (event) => {\r\n\r\n        switch (this.props.Login.activeTestTab) {\r\n            case \"IDS_RESULTS\":\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                this.setState({\r\n                    instrumentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                this.setState({\r\n                    materialDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TASK\":\r\n                this.setState({\r\n                    taskDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    instrumentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                this.setState({\r\n                    documentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                this.setState({\r\n                    resultChangeDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTAPPROVALHISTORY\":\r\n                this.setState({\r\n                    historyDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n    sampleGridDataStateChange = (event) => {\r\n        this.setState({\r\n            sampleGridDataState: event.dataState\r\n        });\r\n    }\r\n    sampleDataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleTab) {\r\n            case \"IDS_SAMPLEINFO\":\r\n                this.setState({\r\n                    sampleGridDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_SAMPLEAPPROVALHISTORY\":\r\n                this.setState({\r\n                    sampleHistoryDataState: event.dataState\r\n                })\r\n                break;\r\n            case \"IDS_PRINTHISTORY\":\r\n                this.setState({\r\n                    samplePrintHistoryDataState: event.dataState\r\n                })\r\n                break;\r\n            case \"IDS_REPORTHISTORY\":\r\n                this.setState({\r\n                    reportHistoryDataState: event.dataState\r\n                })\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    sampleGridDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n    onSaveClick = (saveType, formRef) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        let ok = true;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        if (this.props.Login.operation === 'enforce') {\r\n            inputData[\"enforcestatus\"] = {\r\n                ngradecode: this.props.Login.masterData.GradeValue.value || -1,\r\n                ntransactiontestcode: this.state.selectedRecord.ntransactiontestcode,\r\n                ntransactionresultcode: this.state.selectedRecord.ntransactionresultcode,\r\n                senforcestatuscomment: this.state.selectedRecord.senforcestatuscomment || \"\",\r\n                selectedTestCode: this.props.Login.masterData.APSelectedTest.map(test => test.ntransactiontestcode).join(\",\")\r\n            }\r\n            inputParam = {\r\n                methodUrl: \"EnforceStatus\",\r\n                classUrl: 'approval',\r\n                inputData: inputData,\r\n                postParam: { selectedObject: \"APSelectedTest\", primaryKeyField: \"ntransactiontestcode\" },\r\n                operation: \"update\"\r\n            }\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord: this.state.selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation\r\n            }\r\n            inputParam = onSaveSampleAttachment(saveParam);\r\n        }\r\n        else {\r\n            let approvalparameter = []\r\n            if (this.state.selectedRecord.approvalParameterEdit) {\r\n                Object.keys(this.state.selectedRecord.approvalParameterEdit).map((key) =>\r\n                    approvalparameter.push(\r\n                        {\r\n                            ntransactionresultcode: key,\r\n                            nreportmandatory: this.state.selectedRecord.approvalParameterEdit[key]\r\n                        }\r\n                    )\r\n                )\r\n                inputData[\"approvalparameter\"] = approvalparameter\r\n                inputParam = {\r\n                    methodUrl: \"ApprovalParameter\",\r\n                    classUrl: 'approval',\r\n                    inputData: inputData,\r\n                    postParam: { selectedObject: \"APSelectedTest\", primaryKeyField: \"ntransactiontestcode\" },\r\n                    operation: \"update\"\r\n                }\r\n            } else {\r\n                ok = false;\r\n                this.handleClose()\r\n            }\r\n        }\r\n        if (ok) {\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData },\r\n                        openChildModal: true,\r\n                        operation: this.props.Login.operation,\r\n                        screenName: \"IDS_ENFORCESTATUS\",\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openChildModal\");\r\n            }\r\n        }\r\n    }\r\n    handleClose = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let openChildModal = this.props.Login.openChildModal\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let templateData = this.props.Login.templateData;\r\n        let operation = this.props.Login.operation;\r\n        let openTemplateModal = this.props.Login.openTemplateModal;\r\n        if (this.props.Login.loadEsign) {\r\n            if (operation === \"delete\" || operation === \"dynamic\" || operation === 'reportgeneration' || this.props.Login.operation === 'decision') {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n                templateData = {};\r\n                operation = undefined;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openTemplateModal = false;\r\n            openModal = false;\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n            templateData = {}\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, openChildModal, loadEsign, selectedRecord, templateData, selectedParamId: null, operation, openTemplateModal }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData,\r\n            operation: this.props.Login.operation\r\n        }\r\n        if (this.props.Login.operation === 'dynamic' || this.props.Login.operation === 'reportgeneration' || this.props.Login.operation === 'decision') {\r\n            this.props.validateEsignforApproval(inputParam, \"openChildModal\");\r\n        } else {\r\n            this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n        }\r\n    }\r\n    // covertDatetoString(startDateValue, endDateValue) {\r\n    //     const startDate = new Date(startDateValue);\r\n    //     const endDate = new Date(endDateValue);\r\n\r\n    //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\r\n    //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\r\n    //     const prevDay = validateTwoDigitDate(String(startDate.getDate()));\r\n    //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\r\n\r\n    //     const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay\r\n    //     const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay\r\n    //     const fromDate = fromDateOnly + \"T00:00:00\";\r\n    //     const toDate = toDateOnly + \"T23:59:59\";\r\n\r\n\r\n    //     return ({ fromDate, toDate, breadCrumbFrom: fromDateOnly, breadCrumbto: toDateOnly })\r\n    // }\r\n    getActiveTestURL() {\r\n        let url = \"approval/getapprovalparameter\"\r\n        switch (this.props.Login.activeTestTab) {\r\n            case \"IDS_RESULTS\":\r\n                url = \"approval/getapprovalparameter\"\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                url = \"resultentrybysample/getResultUsedInstrument\"\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                url = \"resultentrybysample/getResultUsedMaterial\"\r\n                break;\r\n            case \"IDS_TASK\":\r\n                url = \"resultentrybysample/getResultUsedTask\"\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                url = \"approval/getApprovalResultChangeHistory\"\r\n                break;\r\n            case \"IDS_TESTAPPROVALHISTORY\":\r\n                url = \"approval/getApprovalHistory\"\r\n                break;\r\n\r\n            default:\r\n                url = \"approval/getapprovalparameter\"\r\n                break;\r\n        }\r\n        return url;\r\n    }\r\n    onTemplateInputChange = (event, control) => {\r\n        let selectedRecord = templateChangeHandler(1, this.state.selectedRecord, event, control)\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTemplateComboChange = (comboData, control) => {\r\n        let selectedRecord = templateChangeHandler(2, this.state.selectedRecord, comboData, control)\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTemplateDateChange = (dateData, control) => {\r\n        let selectedRecord = templateChangeHandler(3, this.state.selectedRecord, dateData, control)\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let { testskip, testtake } = this.state\r\n        let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.AP_TEST];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.APSelectedTest, \"ntransactiontestcode\");\r\n        if (selectedTestList.length > 0) {\r\n\r\n            if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\r\n                let saveParam = {\r\n                    userInfo: this.props.Login.userInfo,\r\n                    isTestComment: this.props.isTestComment,\r\n                    selectedRecord,\r\n                    masterData: this.props.Login.masterData,\r\n                    saveType, formRef,\r\n                    operation: this.props.Login.operation,\r\n                    ntransactiontestcode: this.props.Login.masterData.APSelectedTest ? this.props.Login.masterData.APSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n                }\r\n                inputParam = onSaveTestComments(saveParam, selectedTestList);\r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData },\r\n                        operation: this.props.Login.operation,\r\n                        screenName: this.props.Login.screenName,\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\r\n            }\r\n\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }))\r\n        }\r\n    }\r\n    onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        let { testskip, testtake, skip, take } = this.state\r\n        let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.AP_TEST];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.APSelectedTest, \"ntransactiontestcode\");\r\n        let sampleList = this.props.Login.masterData.searchedSample ? [...this.props.Login.masterData.searchedSample] : [...this.props.Login.masterData.AP_SAMPLE];\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let ok = true;\r\n        if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            if (selectedSampleList.length > 0) {\r\n                inputParam = onSaveSampleAttachment(saveParam, selectedSampleList);\r\n            }\r\n            else {\r\n                ok = false\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }))\r\n            }\r\n        } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                ntransactiontestcode: this.props.Login.masterData.APSelectedTest ? this.props.Login.masterData.APSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            if (selectedTestList.length > 0) {\r\n                inputParam = onSaveTestAttachment(saveParam, selectedTestList);\r\n            }\r\n            else {\r\n                ok = false\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }))\r\n            }\r\n        }\r\n        if (ok) {\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData },\r\n                        operation: this.props.Login.operation,\r\n                        screenName: this.props.Login.screenName,\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\r\n            }\r\n        }\r\n    }\r\n\r\n    generateCOAReport = (inputData, ncontrolCode) => {\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            let inputParam = { reporparam: inputData }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openChildModal: true,\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: \"reportgeneration\",\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n\r\n        } else {\r\n\r\n            this.props.generateCOAReport(inputData);\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getsubSampleDetail, getTestDetail, getTestChildTabDetail, performAction, updateStore, viewAttachment, checkListRecord,\r\n    updateDecision, getRegistrationType, getRegistrationSubType, getFilterStatus, getApprovalSample, getStatusCombo,\r\n    validateEsignCredential, crudMaster, validateEsignforApproval, getApprovalVersion, getParameterEdit, filterTransactionList,\r\n    getSampleChildTabDetail, getAttachmentCombo, deleteAttachment, getCommentsCombo, previewSampleReport, getFilterBasedTest,\r\n    generateCOAReport, getEnforceCommentsHistory\r\n})(injectIntl(Approval))"]},"metadata":{},"sourceType":"module"}