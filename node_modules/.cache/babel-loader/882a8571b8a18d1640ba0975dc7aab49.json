{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\product\\\\Component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { ListWrapper, PrimaryHeader } from '../../components/client-group.styles';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { callService, crudMaster, fetchRecordComponent, updateStore, validateEsignCredential } from '../../actions';\nimport Esign from '../../pages/audittrail/Esign';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { showEsign, getControlMap } from '../../components/CommonScript';\nimport AddComponent from '../product/AddComponent';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { transactionStatus } from '../../components/Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Component extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleChange = (value, valueParam, isMandate) => {\n      if (value !== null) {\n        let checkValue = 0;\n        const selectedRecord = this.state.selectedRecord || {}; // selectedRecord[valueParam] = value.value;\n\n        selectedRecord[valueParam] = value;\n\n        if (isMandate === \"isMandate\") {\n          if (this.props.Login.productDescription.length > 0 && value.value !== undefined) {\n            //console.log(\" Find : \", this.props.Login.productDescription, parseInt(value.value));\n            this.props.Login.productDescription.map(item => {\n              // if (item.nproductdesccode === parseInt(value.value)) {\n              if (item.item.nproductdesccode === parseInt(value.value)) {\n                return checkValue = item.item.nproducttypemand === 3 ? 1 : 0;\n              }\n\n              return checkValue;\n            });\n          }\n        }\n\n        if (isMandate === \"isMandate\") {\n          this.setState({\n            requiredSymbol: checkValue,\n            selectedRecord\n          });\n        } else {\n          this.setState({\n            selectedRecord\n          });\n        }\n      } else {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[valueParam] = undefined;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      if (deleteParam.selectedRecord.expanded !== undefined) {\n        delete deleteParam.selectedRecord.expanded;\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\",\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo,\n          \"genericlabel\": this.props.Login.genericLabel\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\",\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      } // this.props.crudMaster(inputParam);\n\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          //\"nsitecode\": this.props.Login.userInfo.nmastersitecode \n          userinfo: this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit \n      let dataState = undefined;\n      let operation = \"\";\n      let inputData = [];\n      let selectedId = null;\n      let fieldList = [\"ncomponentcode\", \"scomponentname\", \"sdescription\"]; //\"ndefaultstatus\"];\n\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"genericlabel\"] = this.props.Login.genericLabel;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit    \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n\n        if (inputData[this.props.Login.inputParam.methodUrl.toLowerCase()].hasOwnProperty('esignpassword')) {\n          if (inputData[this.props.Login.inputParam.methodUrl.toLowerCase()]['esignpassword'] === '') {\n            delete inputData[this.props.Login.inputParam.methodUrl.toLowerCase()]['esigncomments'];\n            delete inputData[this.props.Login.inputParam.methodUrl.toLowerCase()]['esignpassword'];\n          }\n        }\n\n        fieldList.map(item => {\n          inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item];\n          return null;\n        });\n        operation = \"update\";\n        dataState = this.state.dataState;\n        selectedId = this.props.Login.selectedId;\n      } else {\n        //add             \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"ndefaultstatus\": this.state.selectedRecord.ndefaultstatus ? this.state.selectedRecord.ndefaultstatus : transactionStatus.NO\n        };\n        fieldList.map(item => {\n          inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item];\n          return null;\n        });\n        operation = \"create\";\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\",\n        inputData: inputData,\n        operation: operation,\n        saveType,\n        formRef,\n        dataState,\n        selectedId,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\",\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      // addScreen: false, \n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      requiredSymbol: 0,\n      storageCondition: [],\n      productDescription: [],\n      productType: [],\n      bulkType: [],\n      isOpen: false,\n      controlMap: new Map(),\n      userRoleControlRights: []\n    };\n    this.mandatoryColumnList = [{\n      \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\",\n      \"mandatory\": true,\n      \"dataField\": \"scomponentname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null; //{ addScreen: props.Login.showScreen }\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const addParam = {\n      screenName: this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\",\n      primaryKeyField,\n      undefined,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      addId\n    };\n    const editParam = {\n      screenName: this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\",\n      primaryKeyField: \"ncomponentcode\",\n      operation: \"update\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editID\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    this.extractedColumnList = [{\n      \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\",\n      \"dataField\": \"scomponentname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DESCRIPTION\",\n      \"dataField\": \"sdescription\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DEFAULTSTATUS\",\n      \"dataField\": \"sdisplaystatus\",\n      \"width\": \"200px\",\n      \"controlName\": \"ndefaultstatus\"\n    }];\n    this.detailedFieldList = [{\n      \"idsName\": \"IDS_STORAGECONDITION\",\n      \"dataField\": \"sstorageconditionname\",\n      \"columnSize\": \"4\"\n    }, {\n      \"idsName\": \"IDS_FINALPRODUCTUSAGE\",\n      \"dataField\": \"sfinalproduct\",\n      \"columnSize\": \"4\"\n    }, {\n      \"idsName\": \"IDS_UPSTREAMPRODUCTTYPE\",\n      \"dataField\": \"supstreamproduct\",\n      \"columnSize\": \"4\"\n    }, {\n      \"idsName\": \"IDS_BULKTYPE\",\n      \"dataField\": \"sbulktype\",\n      \"columnSize\": \"4\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      \"columnSize\": \"8\"\n    } // { \"idsName\": \"IDS_TRANSACTIONSTATUSACTIVE\", \"dataField\": \"sdisplaystatus\", \"width\": \"200px\", \"isIdsField\": true, \"controlName\": \"ntransactionstatus\" }\n    ];\n    primaryKeyField = \"ncomponentcode\";\n    const mandatoryFields = [];\n    this.mandatoryColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n\n    if (this.state.requiredSymbol === 1) {\n      mandatoryFields.push({\n        \"idsName\": \"IDS_UPSTREAMPRODUCTTYPE\",\n        \"mandatory\": true,\n        \"dataField\": \"nproducttypecode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(PrimaryHeader, {\n      className: \"d-flex justify-content-between mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 29\n      }\n    }), this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.fetchRecordComponent,\n      deleteRecord: this.deleteRecord,\n      addRecord: () => this.props.fetchRecordComponent(addParam),\n      deleteParam: deleteParam,\n      reloadData: this.reloadData,\n      editParam: editParam,\n      gridHeight: \"600px\",\n      isActionRequired: true,\n      isToolBarRequired: true,\n      isDownloadPDFRequired: true,\n      scrollable: \"scrollable\",\n      pageable: true,\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\",\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddComponent, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        handleChange: this.handleChange,\n        genericLabel: this.props.Login.genericLabel,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.state.dataState.take\n          };\n        }\n\n        if (this.state.dataResult.data) {\n          if (this.state.dataResult.data.length === 1) {\n            let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n            dataState = {\n              skip: skipcount,\n              take: this.state.dataState.take\n            };\n          }\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          selectedRecord: this.props.Login.selectedRecord,\n          isOpen: false,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord,\n        requiredSymbol: this.props.Login.requiredSymbol\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  fetchRecordComponent,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(Component));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/product/Component.jsx"],"names":["React","connect","injectIntl","ListWrapper","PrimaryHeader","Row","Col","toast","process","callService","crudMaster","fetchRecordComponent","updateStore","validateEsignCredential","Esign","DEFAULT_RETURN","DataGrid","showEsign","getControlMap","AddComponent","SlideOutModal","transactionStatus","mapStateToProps","state","Login","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","selectedId","operation","updateInfo","typeName","handleChange","value","valueParam","isMandate","checkValue","productDescription","length","undefined","map","item","nproductdesccode","parseInt","nproducttypemand","requiredSymbol","onInputOnChange","target","type","name","checked","YES","NO","deleteRecord","deleteParam","expanded","inputParam","classUrl","methodUrl","displayName","genericLabel","userInfo","slanguagetypecode","inputData","toLowerCase","userRoleControlRights","nformcode","ncontrolCode","screenData","masterData","screenName","reloadData","userinfo","onSaveClick","saveType","formRef","fieldList","JSON","parse","stringify","hasOwnProperty","nmastersitecode","ndefaultstatus","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","createRef","extractedColumnList","skip","take","settings","masterStatus","error","storageCondition","productType","bulkType","isOpen","controlMap","Map","mandatoryColumnList","getDerivedStateFromProps","warn","render","primaryKeyField","addId","has","concat","get","ncontrolcode","editID","addParam","editParam","detailedFieldList","mandatoryFields","forEach","mandatory","push","componentDidUpdate","previousProps","Object","values","skipcount"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { ListWrapper, PrimaryHeader } from '../../components/client-group.styles'\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { callService, crudMaster, fetchRecordComponent, updateStore, validateEsignCredential } from '../../actions';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { showEsign, getControlMap } from '../../components/CommonScript';\r\nimport AddComponent from '../product/AddComponent';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Component extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            // addScreen: false, \r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState, requiredSymbol: 0,\r\n            storageCondition: [], productDescription: [],\r\n            productType: [], bulkType: [],\r\n            isOpen: false, controlMap: new Map(), userRoleControlRights: []\r\n        }\r\n\r\n        this.mandatoryColumnList = [\r\n            { \"idsName\":this.props.Login.genericLabel ?  this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\", \"mandatory\": true, \"dataField\": \"scomponentname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n        ]\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId= null;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord,selectedId  }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;//{ addScreen: props.Login.showScreen }\r\n    }\r\n\r\n    handleChange = (value, valueParam, isMandate) => {\r\n\r\n        if (value !== null) {\r\n\r\n            let checkValue = 0;\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n\r\n            // selectedRecord[valueParam] = value.value;\r\n            selectedRecord[valueParam] = value;\r\n\r\n            if (isMandate === \"isMandate\") {\r\n                if (this.props.Login.productDescription.length > 0 && value.value !== undefined) {\r\n                    //console.log(\" Find : \", this.props.Login.productDescription, parseInt(value.value));\r\n                    this.props.Login.productDescription.map(item => {\r\n\r\n                        // if (item.nproductdesccode === parseInt(value.value)) {\r\n                        if (item.item.nproductdesccode === parseInt(value.value)) {\r\n                            return checkValue = item.item.nproducttypemand === 3 ? 1 : 0;\r\n                        }\r\n                        return checkValue;\r\n                    })\r\n                }\r\n            }\r\n            if (isMandate === \"isMandate\") {\r\n                this.setState({ requiredSymbol: checkValue, selectedRecord });\r\n            }\r\n            else {\r\n                this.setState({ selectedRecord });\r\n            }\r\n        }\r\n        else {\r\n\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[valueParam] = undefined;\r\n            this.setState({ selectedRecord });\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let primaryKeyField = \"\";\r\n\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const addParam = {\r\n            screenName: this.props.Login.genericLabel ?  this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\",\r\n            primaryKeyField, undefined, operation: \"create\", inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, addId\r\n        }\r\n        const editParam = {\r\n            screenName:  this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] :\"Component\", primaryKeyField: \"ncomponentcode\", operation: \"update\",\r\n            inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editID\r\n        };\r\n        const deleteParam = { operation: \"delete\" };\r\n\r\n\r\n\r\n        this.extractedColumnList = [\r\n            { \"idsName\":this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\", \"dataField\": \"scomponentname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DEFAULTSTATUS\", \"dataField\": \"sdisplaystatus\", \"width\": \"200px\",\"controlName\": \"ndefaultstatus\" }\r\n        ]\r\n        this.detailedFieldList = [\r\n            { \"idsName\": \"IDS_STORAGECONDITION\", \"dataField\": \"sstorageconditionname\", \"columnSize\": \"4\" },\r\n            { \"idsName\": \"IDS_FINALPRODUCTUSAGE\", \"dataField\": \"sfinalproduct\", \"columnSize\": \"4\" },\r\n            { \"idsName\": \"IDS_UPSTREAMPRODUCTTYPE\", \"dataField\": \"supstreamproduct\", \"columnSize\": \"4\" },\r\n            { \"idsName\": \"IDS_BULKTYPE\", \"dataField\": \"sbulktype\", \"columnSize\": \"4\" },\r\n            { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"columnSize\": \"8\" },\r\n\r\n            // { \"idsName\": \"IDS_TRANSACTIONSTATUSACTIVE\", \"dataField\": \"sdisplaystatus\", \"width\": \"200px\", \"isIdsField\": true, \"controlName\": \"ntransactionstatus\" }\r\n        ];\r\n        primaryKeyField = \"ncomponentcode\";\r\n        const mandatoryFields = [];\r\n        this.mandatoryColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n        if (this.state.requiredSymbol === 1) {\r\n            mandatoryFields.push({ \"idsName\": \"IDS_UPSTREAMPRODUCTTYPE\", \"mandatory\": true, \"dataField\": \"nproducttypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n        }\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            <PrimaryHeader className=\"d-flex justify-content-between mb-3\">\r\n                                {/* <HeaderName className=\"header-primary-md\">\r\n                                    {this.props.Login.inputParam ?\r\n                                        <FormattedMessage id={'IDS_COMPONENT'} /> : \"\"}\r\n                                </HeaderName> */}\r\n                                {/* <Button className=\"btn btn-user btn-primary-blue\"\r\n                                    hidden={this.props.Login.inputParam && this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                    onClick={() => this.props.fetchRecordComponent(addParam)} role=\"button\">\r\n                                    <FontAwesomeIcon icon={faPlus} /> { }\r\n                                    <FormattedMessage id={'IDS_ADD'} defaultMessage='Add' />\r\n                                </Button> */}\r\n                            </PrimaryHeader>\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.fetchRecordComponent}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    addRecord={() => this.props.fetchRecordComponent(addParam)}\r\n                                    deleteParam={deleteParam}\r\n                                    reloadData={this.reloadData}\r\n                                    editParam={editParam}\r\n                                    gridHeight={\"600px\"}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    isDownloadPDFRequired={true}\r\n                                    scrollable={\"scrollable\"}\r\n                                    pageable={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                />\r\n                                : \"\"}\r\n\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] :\"Component\"}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            <AddComponent\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                handleChange={this.handleChange}\r\n                                genericLabel={this.props.Login.genericLabel}\r\n                                userInfo={this.props.Login.userInfo}\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip:0,take:this.state.dataState.take }\r\n                }\r\n                if(this.state.dataResult.data){\r\n                    if(this.state.dataResult.data.length ===1){\r\n                       let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\r\n                       this.state.dataState.skip\r\n                        dataState={skip:skipcount,take:this.state.dataState.take}\r\n                    }\r\n                }\r\n                this.setState({\r\n                    data: this.props.Login.masterData, selectedRecord: this.props.Login.selectedRecord,\r\n                    isOpen: false,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord, requiredSymbol: this.props.Login.requiredSymbol });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    // deleteRecord = (selectedRecord, operation, ncontrolCode) => {\r\n    deleteRecord = (deleteParam) => {\r\n        if (deleteParam.selectedRecord.expanded !== undefined) {\r\n            delete deleteParam.selectedRecord.expanded;\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\",\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                \"genericlabel\" :this.props.Login.genericLabel\r\n            },\r\n            operation: deleteParam.operation,\r\n            dataState: this.state.dataState,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] :\"Component\",\r\n                    operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n        // this.props.crudMaster(inputParam);\r\n    }\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { //\"nsitecode\": this.props.Login.userInfo.nmastersitecode \r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.genericLabel ?  this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] :\"Component\",\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        //add / edit \r\n        let dataState = undefined;\r\n        let operation = \"\";\r\n        let inputData = [];\r\n        let selectedId = null;\r\n        let fieldList = [\"ncomponentcode\", \"scomponentname\", \"sdescription\"];\r\n        //\"ndefaultstatus\"];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"genericlabel\"] = this.props.Login.genericLabel;\r\n\r\n\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit    \r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n            if (inputData[this.props.Login.inputParam.methodUrl.toLowerCase()].hasOwnProperty('esignpassword')) {\r\n                if (inputData[this.props.Login.inputParam.methodUrl.toLowerCase()]['esignpassword'] === '') {\r\n                    delete inputData[this.props.Login.inputParam.methodUrl.toLowerCase()]['esigncomments']\r\n                    delete inputData[this.props.Login.inputParam.methodUrl.toLowerCase()]['esignpassword']\r\n                }\r\n            }\r\n            \r\n            fieldList.map(item => {\r\n                inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item];\r\n                return null;\r\n            })\r\n            operation = \"update\";\r\n            dataState = this.state.dataState;\r\n            selectedId = this.props.Login.selectedId;\r\n        }\r\n        else {\r\n            //add             \r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"ndefaultstatus\": this.state.selectedRecord.ndefaultstatus ? this.state.selectedRecord.ndefaultstatus:transactionStatus.NO };\r\n            fieldList.map(item => {\r\n                inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item] \r\n                return null;\r\n            })\r\n            operation = \"create\";\r\n        }\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.genericLabel ? this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"Component\",\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef, dataState, selectedId,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName:  this.props.Login.genericLabel ?  this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] :\"Component\",\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster, fetchRecordComponent, updateStore, validateEsignCredential })(injectIntl(Component));"]},"metadata":{},"sourceType":"module"}