{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { SqlString, sqlEmptyValue, mongoEmptyValue, spelEscape, spelFixList, stringifyForDisplay } from \"../utils/export\";\nimport { escapeRegExp } from \"../utils/stuff\";\nimport { getTitleInListValues } from \"../utils/listValues\";\nimport moment from \"moment\";\nimport { settings as defaultSettings } from \"./default\"; //----------------------------  conjunctions\n\nvar conjunctions = {\n  AND: {\n    label: \"And\",\n    mongoConj: \"$and\",\n    jsonLogicConj: \"and\",\n    sqlConj: \"AND\",\n    spelConj: \"and\",\n    spelConjs: [\"and\", \"&&\"],\n    reversedConj: \"OR\",\n    formatConj: function formatConj(children, conj, not, isForDisplay) {\n      return children.size > 1 ? (not ? \"NOT \" : \"\") + \"(\" + children.join(\" \" + (isForDisplay ? \"AND\" : \"&&\") + \" \") + \")\" : (not ? \"NOT (\" : \"\") + children.first() + (not ? \")\" : \"\");\n    },\n    sqlFormatConj: function sqlFormatConj(children, conj, not) {\n      return children.size > 1 ? (not ? \"NOT \" : \"\") + \"(\" + children.join(\" \" + \"AND\" + \" \") + \")\" : (not ? \"NOT (\" : \"\") + children.first() + (not ? \")\" : \"\");\n    },\n    spelFormatConj: function spelFormatConj(children, conj, not, omitBrackets) {\n      if (not) omitBrackets = false;\n      return children.size > 1 ? (not ? \"!\" : \"\") + (omitBrackets ? \"\" : \"(\") + children.join(\" \" + \"&&\" + \" \") + (omitBrackets ? \"\" : \")\") : (not ? \"!(\" : \"\") + children.first() + (not ? \")\" : \"\");\n    }\n  },\n  OR: {\n    label: \"Or\",\n    mongoConj: \"$or\",\n    jsonLogicConj: \"or\",\n    sqlConj: \"OR\",\n    spelConj: \"or\",\n    spelConjs: [\"or\", \"||\"],\n    reversedConj: \"AND\",\n    formatConj: function formatConj(children, conj, not, isForDisplay) {\n      return children.size > 1 ? (not ? \"NOT \" : \"\") + \"(\" + children.join(\" \" + (isForDisplay ? \"OR\" : \"||\") + \" \") + \")\" : (not ? \"NOT (\" : \"\") + children.first() + (not ? \")\" : \"\");\n    },\n    sqlFormatConj: function sqlFormatConj(children, conj, not) {\n      return children.size > 1 ? (not ? \"NOT \" : \"\") + \"(\" + children.join(\" \" + \"OR\" + \" \") + \")\" : (not ? \"NOT (\" : \"\") + children.first() + (not ? \")\" : \"\");\n    },\n    spelFormatConj: function spelFormatConj(children, conj, not, omitBrackets) {\n      if (not) omitBrackets = false;\n      return children.size > 1 ? (not ? \"!\" : \"\") + (omitBrackets ? \"\" : \"(\") + children.join(\" \" + \"||\" + \" \") + (omitBrackets ? \"\" : \")\") : (not ? \"!(\" : \"\") + children.first() + (not ? \")\" : \"\");\n    }\n  }\n}; //----------------------------  operators\n// helpers for mongo format\n\nexport var mongoFormatOp1 = function mongoFormatOp1(mop, mc, not, field, _op, value, useExpr, valueSrc, valueType, opDef, operatorOptions, fieldDef) {\n  var $field = typeof field == \"string\" && !field.startsWith(\"$\") ? \"$\" + field : field;\n  var mv = mc(value, fieldDef);\n  if (mv === undefined) return undefined;\n\n  if (not) {\n    if (!useExpr && (!mop || mop == \"$eq\")) return _defineProperty({}, field, {\n      \"$ne\": mv\n    }); // short form\n\n    return !useExpr ? _defineProperty({}, field, {\n      \"$not\": _defineProperty({}, mop, mv)\n    }) : {\n      \"$not\": _defineProperty({}, mop, [$field, mv])\n    };\n  } else {\n    if (!useExpr && (!mop || mop == \"$eq\")) return _defineProperty({}, field, mv); // short form\n\n    return !useExpr ? _defineProperty({}, field, _defineProperty({}, mop, mv)) : _defineProperty({}, mop, [$field, mv]);\n  }\n};\nexport var mongoFormatOp2 = function mongoFormatOp2(mops, not, field, _op, values, useExpr, valueSrcs, valueTypes, opDef, operatorOptions, fieldDef) {\n  var $field = typeof field == \"string\" && !field.startsWith(\"$\") ? \"$\" + field : field;\n\n  if (not) {\n    var _$not3;\n\n    return !useExpr ? _defineProperty({}, field, {\n      \"$not\": (_$not3 = {}, _defineProperty(_$not3, mops[0], values[0]), _defineProperty(_$not3, mops[1], values[1]), _$not3)\n    }) : {\n      \"$not\": {\n        \"$and\": [_defineProperty({}, mops[0], [$field, values[0]]), _defineProperty({}, mops[1], [$field, values[1]])]\n      }\n    };\n  } else {\n    var _field2;\n\n    return !useExpr ? _defineProperty({}, field, (_field2 = {}, _defineProperty(_field2, mops[0], values[0]), _defineProperty(_field2, mops[1], values[1]), _field2)) : {\n      \"$and\": [_defineProperty({}, mops[0], [$field, values[0]]), _defineProperty({}, mops[1], [$field, values[1]])]\n    };\n  }\n};\nvar operators = {\n  equal: {\n    label: \"==\",\n    labelForFormat: \"==\",\n    sqlOp: \"=\",\n    spelOp: \"==\",\n    spelOps: [\"==\", \"eq\"],\n    reversedOp: \"not_equal\",\n    formatOp: function formatOp(field, op, value, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay, fieldDef) {\n      var opStr = isForDisplay ? \"=\" : opDef.label;\n      if (valueTypes == \"boolean\" && isForDisplay) return value == \"No\" ? \"NOT \".concat(field) : \"\".concat(field);else return \"\".concat(field, \" \").concat(opStr, \" \").concat(value);\n    },\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$eq\", function (v) {\n      return v;\n    }, false),\n    jsonLogic: \"==\",\n    elasticSearchQueryType: \"term\"\n  },\n  not_equal: {\n    isNotOp: true,\n    label: \"!=\",\n    labelForFormat: \"!=\",\n    sqlOp: \"<>\",\n    spelOp: \"!=\",\n    spelOps: [\"!=\", \"ne\"],\n    reversedOp: \"equal\",\n    formatOp: function formatOp(field, op, value, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay, fieldDef) {\n      if (valueTypes == \"boolean\" && isForDisplay) return value == \"No\" ? \"\".concat(field) : \"NOT \".concat(field);else return \"\".concat(field, \" \").concat(opDef.label, \" \").concat(value);\n    },\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$ne\", function (v) {\n      return v;\n    }, false),\n    jsonLogic: \"!=\"\n  },\n  less: {\n    label: \"<\",\n    labelForFormat: \"<\",\n    sqlOp: \"<\",\n    spelOp: \"<\",\n    spelOps: [\"<\", \"lt\"],\n    reversedOp: \"greater_or_equal\",\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$lt\", function (v) {\n      return v;\n    }, false),\n    jsonLogic: \"<\",\n    elasticSearchQueryType: \"range\"\n  },\n  less_or_equal: {\n    label: \"<=\",\n    labelForFormat: \"<=\",\n    sqlOp: \"<=\",\n    spelOp: \"<=\",\n    spelOps: [\"<=\", \"le\"],\n    reversedOp: \"greater\",\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$lte\", function (v) {\n      return v;\n    }, false),\n    jsonLogic: \"<=\",\n    elasticSearchQueryType: \"range\"\n  },\n  greater: {\n    label: \">\",\n    labelForFormat: \">\",\n    sqlOp: \">\",\n    spelOp: \">\",\n    spelOps: [\">\", \"gt\"],\n    reversedOp: \"less_or_equal\",\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$gt\", function (v) {\n      return v;\n    }, false),\n    jsonLogic: \">\",\n    elasticSearchQueryType: \"range\"\n  },\n  greater_or_equal: {\n    label: \">=\",\n    labelForFormat: \">=\",\n    sqlOp: \">=\",\n    spelOp: \">=\",\n    spelOps: [\">=\", \"ge\"],\n    reversedOp: \"less\",\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$gte\", function (v) {\n      return v;\n    }, false),\n    jsonLogic: \">=\",\n    elasticSearchQueryType: \"range\"\n  },\n  like: {\n    label: \"Contains\",\n    labelForFormat: \"Contains\",\n    reversedOp: \"not_like\",\n    sqlOp: \"LIKE\",\n    spelOp: \".contains\",\n    spelOps: [\"matches\", \".contains\"],\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$regex\", function (v) {\n      return typeof v == \"string\" ? escapeRegExp(v) : undefined;\n    }, false),\n    //jsonLogic: (field, op, val) => ({ \"in\": [val, field] }),\n    jsonLogic: \"in\",\n    _jsonLogicIsRevArgs: true,\n    valueSources: [\"value\"],\n    elasticSearchQueryType: \"regexp\"\n  },\n  not_like: {\n    isNotOp: true,\n    label: \"Not contains\",\n    reversedOp: \"like\",\n    labelForFormat: \"Not Contains\",\n    sqlOp: \"NOT LIKE\",\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$regex\", function (v) {\n      return typeof v == \"string\" ? escapeRegExp(v) : undefined;\n    }, true),\n    valueSources: [\"value\"]\n  },\n  starts_with: {\n    label: \"Starts with\",\n    labelForFormat: \"Starts with\",\n    sqlOp: \"LIKE\",\n    spelOp: \".startsWith\",\n    spelOps: [\"matches\", \".startsWith\"],\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$regex\", function (v) {\n      return typeof v == \"string\" ? \"^\" + escapeRegExp(v) : undefined;\n    }, false),\n    jsonLogic: undefined,\n    // not supported\n    valueSources: [\"value\"]\n  },\n  ends_with: {\n    label: \"Ends with\",\n    labelForFormat: \"Ends with\",\n    sqlOp: \"LIKE\",\n    spelOp: \".endsWith\",\n    spelOps: [\"matches\", \".endsWith\"],\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$regex\", function (v) {\n      return typeof v == \"string\" ? escapeRegExp(v) + \"$\" : undefined;\n    }, false),\n    jsonLogic: undefined,\n    // not supported\n    valueSources: [\"value\"]\n  },\n  between: {\n    label: \"Between\",\n    labelForFormat: \"BETWEEN\",\n    sqlOp: \"BETWEEN\",\n    cardinality: 2,\n    formatOp: function formatOp(field, op, values, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay) {\n      var valFrom = values.first();\n      var valTo = values.get(1);\n      if (isForDisplay) return \"\".concat(field, \" BETWEEN \").concat(valFrom, \" AND \").concat(valTo);else return \"\".concat(field, \" >= \").concat(valFrom, \" && \").concat(field, \" <= \").concat(valTo);\n    },\n    spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {\n      var valFrom = values[0];\n      var valTo = values[1];\n      return \"\".concat(field, \" >= \").concat(valFrom, \" && \").concat(field, \" <= \").concat(valTo);\n    },\n    mongoFormatOp: mongoFormatOp2.bind(null, [\"$gte\", \"$lte\"], false),\n    valueLabels: [\"Value from\", \"Value to\"],\n    textSeparators: [null, \"and\"],\n    reversedOp: \"not_between\",\n    jsonLogic: \"<=\",\n    validateValues: function validateValues(values) {\n      if (values[0] != undefined && values[1] != undefined) {\n        return values[0] <= values[1] ? null : \"Invalid range\";\n      }\n\n      return null;\n    },\n    elasticSearchQueryType: function elasticSearchQueryType(type) {\n      return type === \"time\" ? \"filter\" : \"range\";\n    }\n  },\n  not_between: {\n    isNotOp: true,\n    label: \"Not between\",\n    labelForFormat: \"NOT BETWEEN\",\n    sqlOp: \"NOT BETWEEN\",\n    cardinality: 2,\n    formatOp: function formatOp(field, op, values, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay) {\n      var valFrom = values.first();\n      var valTo = values.get(1);\n      if (isForDisplay) return \"\".concat(field, \" NOT BETWEEN \").concat(valFrom, \" AND \").concat(valTo);else return \"(\".concat(field, \" < \").concat(valFrom, \" || \").concat(field, \" > \").concat(valTo, \")\");\n    },\n    spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {\n      var valFrom = values[0];\n      var valTo = values[1];\n      return \"(\".concat(field, \" < \").concat(valFrom, \" || \").concat(field, \" > \").concat(valTo, \")\");\n    },\n    mongoFormatOp: mongoFormatOp2.bind(null, [\"$gte\", \"$lte\"], true),\n    valueLabels: [\"Value from\", \"Value to\"],\n    textSeparators: [null, \"and\"],\n    reversedOp: \"between\",\n    validateValues: function validateValues(values) {\n      if (values[0] != undefined && values[1] != undefined) {\n        return values[0] <= values[1] ? null : \"Invalid range\";\n      }\n\n      return null;\n    }\n  },\n  is_empty: {\n    label: \"Is empty\",\n    labelForFormat: \"IS EMPTY\",\n    cardinality: 0,\n    reversedOp: \"is_not_empty\",\n    formatOp: function formatOp(field, op, value, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      return isForDisplay ? \"\".concat(field, \" IS EMPTY\") : \"!\".concat(field);\n    },\n    sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {\n      var empty = sqlEmptyValue(fieldDef);\n      return \"COALESCE(\".concat(field, \", \").concat(empty, \") = \").concat(empty);\n    },\n    spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {\n      //tip: is empty or null\n      return \"\".concat(field, \" <= ''\");\n    },\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$in\", function (v, fieldDef) {\n      return [mongoEmptyValue(fieldDef), null];\n    }, false),\n    jsonLogic: \"!\"\n  },\n  is_not_empty: {\n    isNotOp: true,\n    label: \"Is not empty\",\n    labelForFormat: \"IS NOT EMPTY\",\n    cardinality: 0,\n    reversedOp: \"is_empty\",\n    formatOp: function formatOp(field, op, value, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      return isForDisplay ? \"\".concat(field, \" IS NOT EMPTY\") : \"!!\".concat(field);\n    },\n    sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {\n      var empty = sqlEmptyValue(fieldDef);\n      return \"COALESCE(\".concat(field, \", \").concat(empty, \") <> \").concat(empty);\n    },\n    spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {\n      //tip: is not empty and not null\n      return \"\".concat(field, \" > ''\");\n    },\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$nin\", function (v, fieldDef) {\n      return [mongoEmptyValue(fieldDef), null];\n    }, false),\n    jsonLogic: \"!!\",\n    elasticSearchQueryType: \"exists\"\n  },\n  is_null: {\n    label: \"Is null\",\n    labelForFormat: \"IS NULL\",\n    sqlOp: \"IS NULL\",\n    cardinality: 0,\n    reversedOp: \"is_not_null\",\n    formatOp: function formatOp(field, op, value, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      return isForDisplay ? \"\".concat(field, \" IS NULL\") : \"!\".concat(field);\n    },\n    spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {\n      return \"\".concat(field, \" == null\");\n    },\n    // check if value is null OR not exists\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$eq\", function (v) {\n      return null;\n    }, false),\n    jsonLogic: \"==\"\n  },\n  is_not_null: {\n    label: \"Is not null\",\n    labelForFormat: \"IS NOT NULL\",\n    sqlOp: \"IS NOT NULL\",\n    cardinality: 0,\n    reversedOp: \"is_null\",\n    formatOp: function formatOp(field, op, value, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      return isForDisplay ? \"\".concat(field, \" IS NOT NULL\") : \"!!\".concat(field);\n    },\n    spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {\n      return \"\".concat(field, \" != null\");\n    },\n    // check if value exists and is not null\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$ne\", function (v) {\n      return null;\n    }, false),\n    jsonLogic: \"!=\",\n    elasticSearchQueryType: \"exists\"\n  },\n  select_equals: {\n    label: \"==\",\n    labelForFormat: \"==\",\n    sqlOp: \"=\",\n    // enum/set\n    formatOp: function formatOp(field, op, value, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      var opStr = isForDisplay ? \"=\" : \"==\";\n      return \"\".concat(field, \" \").concat(opStr, \" \").concat(value);\n    },\n    spelOp: \"==\",\n    spelOps: [\"==\", \"eq\"],\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$eq\", function (v) {\n      return v;\n    }, false),\n    reversedOp: \"select_not_equals\",\n    jsonLogic: \"==\",\n    elasticSearchQueryType: \"term\"\n  },\n  select_not_equals: {\n    isNotOp: true,\n    label: \"!=\",\n    labelForFormat: \"!=\",\n    sqlOp: \"<>\",\n    // enum/set\n    formatOp: function formatOp(field, op, value, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      return \"\".concat(field, \" != \").concat(value);\n    },\n    spelOp: \"!=\",\n    spelOps: [\"!=\", \"ne\"],\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$ne\", function (v) {\n      return v;\n    }, false),\n    reversedOp: \"select_equals\",\n    jsonLogic: \"!=\"\n  },\n  select_any_in: {\n    label: \"Any in\",\n    labelForFormat: \"IN\",\n    sqlOp: \"IN\",\n    formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      if (valueSrc == \"value\") return \"\".concat(field, \" IN (\").concat(values.join(\", \"), \")\");else return \"\".concat(field, \" IN (\").concat(values, \")\");\n    },\n    sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {\n      if (valueSrc == \"value\") {\n        return \"\".concat(field, \" IN (\").concat(values.join(\", \"), \")\");\n      } else return undefined; // not supported\n\n    },\n    spelOp: \"$contains\",\n    // tip: $ means first arg is object\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$in\", function (v) {\n      return v;\n    }, false),\n    reversedOp: \"select_not_any_in\",\n    jsonLogic: \"in\",\n    elasticSearchQueryType: \"term\"\n  },\n  select_not_any_in: {\n    isNotOp: true,\n    label: \"Not in\",\n    labelForFormat: \"NOT IN\",\n    sqlOp: \"NOT IN\",\n    formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      if (valueSrc == \"value\") return \"\".concat(field, \" NOT IN (\").concat(values.join(\", \"), \")\");else return \"\".concat(field, \" NOT IN (\").concat(values, \")\");\n    },\n    sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {\n      if (valueSrc == \"value\") {\n        return \"\".concat(field, \" NOT IN (\").concat(values.join(\", \"), \")\");\n      } else return undefined; // not supported\n\n    },\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$nin\", function (v) {\n      return v;\n    }, false),\n    reversedOp: \"select_any_in\"\n  },\n  // it's not \"contains all\", but \"contains any\" operator\n  multiselect_contains: {\n    label: \"Contains\",\n    labelForFormat: \"CONTAINS\",\n    formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      if (valueSrc == \"value\") return \"\".concat(field, \" CONTAINS [\").concat(values.join(\", \"), \"]\");else return \"\".concat(field, \" CONTAINS \").concat(values);\n    },\n    reversedOp: \"multiselect_not_contains\",\n    jsonLogic2: \"some-in\",\n    jsonLogic: function jsonLogic(field, op, vals) {\n      return {\n        \"some\": [field, {\n          \"in\": [{\n            \"var\": \"\"\n          }, vals]\n        }]\n      };\n    },\n    //spelOp: \".containsAll\",\n    spelOp: \"CollectionUtils.containsAny()\",\n    elasticSearchQueryType: \"term\",\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$in\", function (v) {\n      return v;\n    }, false)\n  },\n  multiselect_not_contains: {\n    isNotOp: true,\n    label: \"Not contains\",\n    labelForFormat: \"NOT CONTAINS\",\n    formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      if (valueSrc == \"value\") return \"\".concat(field, \" NOT CONTAINS [\").concat(values.join(\", \"), \"]\");else return \"\".concat(field, \" NOT CONTAINS \").concat(values);\n    },\n    reversedOp: \"multiselect_contains\"\n  },\n  multiselect_equals: {\n    label: \"Equals\",\n    labelForFormat: \"==\",\n    sqlOp: \"=\",\n    formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      var opStr = isForDisplay ? \"=\" : \"==\";\n      if (valueSrc == \"value\") return \"\".concat(field, \" \").concat(opStr, \" [\").concat(values.join(\", \"), \"]\");else return \"\".concat(field, \" \").concat(opStr, \" \").concat(values);\n    },\n    sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {\n      if (valueSrc == \"value\") // set\n        return \"\".concat(field, \" = '\").concat(values.map(function (v) {\n          return SqlString.trim(v);\n        }).join(\",\"), \"'\");else return undefined; //not supported\n    },\n    spelOp: \".equals\",\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$eq\", function (v) {\n      return v;\n    }, false),\n    reversedOp: \"multiselect_not_equals\",\n    jsonLogic2: \"all-in\",\n    jsonLogic: function jsonLogic(field, op, vals) {\n      return {\n        // it's not \"equals\", but \"includes\" operator - just for example\n        \"all\": [field, {\n          \"in\": [{\n            \"var\": \"\"\n          }, vals]\n        }]\n      };\n    },\n    elasticSearchQueryType: \"term\"\n  },\n  multiselect_not_equals: {\n    isNotOp: true,\n    label: \"Not equals\",\n    labelForFormat: \"!=\",\n    sqlOp: \"<>\",\n    formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      if (valueSrc == \"value\") return \"\".concat(field, \" != [\").concat(values.join(\", \"), \"]\");else return \"\".concat(field, \" != \").concat(values);\n    },\n    sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {\n      if (valueSrc == \"value\") // set\n        return \"\".concat(field, \" != '\").concat(values.map(function (v) {\n          return SqlString.trim(v);\n        }).join(\",\"), \"'\");else return undefined; //not supported\n    },\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$ne\", function (v) {\n      return v;\n    }, false),\n    reversedOp: \"multiselect_equals\"\n  },\n  proximity: {\n    label: \"Proximity search\",\n    cardinality: 2,\n    valueLabels: [{\n      label: \"Word 1\",\n      placeholder: \"Enter first word\"\n    }, {\n      label: \"Word 2\",\n      placeholder: \"Enter second word\"\n    }],\n    textSeparators: [//'Word 1',\n      //'Word 2'\n    ],\n    formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      var val1 = values.first();\n      var val2 = values.get(1);\n      var prox = operatorOptions.get(\"proximity\");\n      return \"\".concat(field, \" \").concat(val1, \" NEAR/\").concat(prox, \" \").concat(val2);\n    },\n    sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {\n      var val1 = values.first();\n      var val2 = values.get(1);\n      var aVal1 = SqlString.trim(val1);\n      var aVal2 = SqlString.trim(val2);\n      var prox = operatorOptions.get(\"proximity\");\n      return \"CONTAINS(\".concat(field, \", 'NEAR((\").concat(aVal1, \", \").concat(aVal2, \"), \").concat(prox, \")')\");\n    },\n    mongoFormatOp: undefined,\n    // not supported\n    jsonLogic: undefined,\n    // not supported\n    options: {\n      optionLabel: \"Near\",\n      // label on top of \"near\" selectbox (for config.settings.showLabels==true)\n      optionTextBefore: \"Near\",\n      // label before \"near\" selectbox (for config.settings.showLabels==false)\n      optionPlaceholder: \"Select words between\",\n      // placeholder for \"near\" selectbox\n      minProximity: 2,\n      maxProximity: 10,\n      defaults: {\n        proximity: 2\n      }\n    }\n  },\n  some: {\n    label: \"Some\",\n    labelForFormat: \"SOME\",\n    cardinality: 0,\n    jsonLogic: \"some\",\n    spelFormatOp: function spelFormatOp(filteredSize) {\n      return \"\".concat(filteredSize, \" > 0\");\n    },\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$gt\", function (v) {\n      return 0;\n    }, false)\n  },\n  all: {\n    label: \"All\",\n    labelForFormat: \"ALL\",\n    cardinality: 0,\n    jsonLogic: \"all\",\n    spelFormatOp: function spelFormatOp(filteredSize, op, fullSize) {\n      return \"\".concat(filteredSize, \" == \").concat(fullSize);\n    },\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$eq\", function (v) {\n      return v;\n    }, false)\n  },\n  none: {\n    label: \"None\",\n    labelForFormat: \"NONE\",\n    cardinality: 0,\n    jsonLogic: \"none\",\n    spelFormatOp: function spelFormatOp(filteredSize) {\n      return \"\".concat(filteredSize, \" == 0\");\n    },\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$eq\", function (v) {\n      return 0;\n    }, false)\n  }\n}; //----------------------------  widgets\n\nvar widgets = {\n  text: {\n    type: \"text\",\n    jsType: \"string\",\n    valueSrc: \"value\",\n    valueLabel: \"String\",\n    valuePlaceholder: \"Enter string\",\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay) {\n      return isForDisplay ? stringifyForDisplay(val) : JSON.stringify(val);\n    },\n    spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      if (opDef.spelOp == \"matches\" && op != \"regex\") {\n        var regex;\n\n        if (op == \"starts_with\") {\n          regex = \"(?s)^\".concat(escapeRegExp(val), \".*\");\n        } else if (op == \"ends_with\") {\n          regex = \"(?s).*\".concat(escapeRegExp(val), \"$\");\n        } else {\n          // op == 'like'\n          regex = \"(?s).*\".concat(escapeRegExp(val), \".*\"); //tip: can use (?sui) for case-insensitive\n        }\n\n        return spelEscape(regex);\n      } else {\n        return spelEscape(val);\n      }\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      if (opDef.sqlOp == \"LIKE\" || opDef.sqlOp == \"NOT LIKE\") {\n        return SqlString.escapeLike(val, op != \"starts_with\", op != \"ends_with\");\n      } else {\n        return SqlString.escape(val);\n      }\n    },\n    toJS: function toJS(val, fieldSettings) {\n      return val;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      return val;\n    }\n  },\n  textarea: {\n    type: \"text\",\n    jsType: \"string\",\n    valueSrc: \"value\",\n    valueLabel: \"Text\",\n    valuePlaceholder: \"Enter text\",\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay) {\n      return isForDisplay ? stringifyForDisplay(val) : JSON.stringify(val);\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      if (opDef.sqlOp == \"LIKE\" || opDef.sqlOp == \"NOT LIKE\") {\n        return SqlString.escapeLike(val, op != \"starts_with\", op != \"ends_with\");\n      } else {\n        return SqlString.escape(val);\n      }\n    },\n    spelFormatValue: function spelFormatValue(val) {\n      return spelEscape(val);\n    },\n    toJS: function toJS(val, fieldSettings) {\n      return val;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      return val;\n    },\n    fullWidth: true\n  },\n  number: {\n    type: \"number\",\n    jsType: \"number\",\n    valueSrc: \"value\",\n    valueLabel: \"Number\",\n    valuePlaceholder: \"Enter number\",\n    valueLabels: [{\n      label: \"Number from\",\n      placeholder: \"Enter number from\"\n    }, {\n      label: \"Number to\",\n      placeholder: \"Enter number to\"\n    }],\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay) {\n      return isForDisplay ? stringifyForDisplay(val) : JSON.stringify(val);\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      return SqlString.escape(val);\n    },\n    spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef) {\n      var isFloat = wgtDef.step && !Number.isInteger(wgtDef.step);\n      return spelEscape(val, isFloat);\n    },\n    toJS: function toJS(val, fieldSettings) {\n      return val;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      return val;\n    }\n  },\n  slider: {\n    type: \"number\",\n    jsType: \"number\",\n    valueSrc: \"value\",\n    valueLabel: \"Number\",\n    valuePlaceholder: \"Enter number or move slider\",\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay) {\n      return isForDisplay ? stringifyForDisplay(val) : JSON.stringify(val);\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      return SqlString.escape(val);\n    },\n    spelFormatValue: function spelFormatValue(val) {\n      return spelEscape(val);\n    },\n    toJS: function toJS(val, fieldSettings) {\n      return val;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      return val;\n    }\n  },\n  select: {\n    type: \"select\",\n    jsType: \"string\",\n    valueSrc: \"value\",\n    valueLabel: \"Value\",\n    valuePlaceholder: \"Select value\",\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay) {\n      var valLabel = getTitleInListValues(fieldDef.fieldSettings.listValues || fieldDef.asyncListValues, val);\n      return isForDisplay ? stringifyForDisplay(valLabel) : JSON.stringify(val);\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      return SqlString.escape(val);\n    },\n    spelFormatValue: function spelFormatValue(val) {\n      return spelEscape(val);\n    },\n    toJS: function toJS(val, fieldSettings) {\n      return val;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      return val;\n    }\n  },\n  multiselect: {\n    type: \"multiselect\",\n    jsType: \"array\",\n    valueSrc: \"value\",\n    valueLabel: \"Values\",\n    valuePlaceholder: \"Select values\",\n    formatValue: function formatValue(vals, fieldDef, wgtDef, isForDisplay) {\n      var valsLabels = vals.map(function (v) {\n        return getTitleInListValues(fieldDef.fieldSettings.listValues || fieldDef.asyncListValues, v);\n      });\n      return isForDisplay ? valsLabels.map(stringifyForDisplay) : vals.map(JSON.stringify);\n    },\n    sqlFormatValue: function sqlFormatValue(vals, fieldDef, wgtDef, op, opDef) {\n      return vals.map(function (v) {\n        return SqlString.escape(v);\n      });\n    },\n    spelFormatValue: function spelFormatValue(vals, fieldDef, wgtDef, op, opDef) {\n      var isCallable = opDef.spelOp && opDef.spelOp[0] == \"$\";\n      var res = spelEscape(vals); // inline list\n\n      if (isCallable) {\n        // `{1,2}.contains(1)` NOT works\n        // `{1,2}.?[true].contains(1)` works\n        res = spelFixList(res);\n      }\n\n      return res;\n    },\n    toJS: function toJS(val, fieldSettings) {\n      return val;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      return val;\n    }\n  },\n  date: {\n    type: \"date\",\n    jsType: \"string\",\n    valueSrc: \"value\",\n    dateFormat: \"DD.MM.YYYY\",\n    valueFormat: \"YYYY-MM-DD\",\n    useKeyboard: true,\n    valueLabel: \"Date\",\n    valuePlaceholder: \"Enter date\",\n    valueLabels: [{\n      label: \"Date from\",\n      placeholder: \"Enter date from\"\n    }, {\n      label: \"Date to\",\n      placeholder: \"Enter date to\"\n    }],\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return isForDisplay ? dateVal.format(wgtDef.dateFormat) : JSON.stringify(val);\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return SqlString.escape(dateVal.format(\"YYYY-MM-DD\"));\n    },\n    spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return \"new java.text.SimpleDateFormat('yyyy-MM-dd').parse('\".concat(dateVal.format(\"YYYY-MM-DD\"), \"')\");\n    },\n    jsonLogic: function jsonLogic(val, fieldDef, wgtDef) {\n      return moment(val, wgtDef.valueFormat).toDate();\n    },\n    toJS: function toJS(val, fieldSettings) {\n      var dateVal = moment(val, fieldSettings.valueFormat);\n      return dateVal.isValid() ? dateVal.toDate() : undefined;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return dateVal.isValid() ? dateVal.toDate() : undefined;\n    }\n  },\n  time: {\n    type: \"time\",\n    jsType: \"string\",\n    valueSrc: \"value\",\n    timeFormat: \"HH:mm\",\n    valueFormat: \"HH:mm:ss\",\n    use12Hours: false,\n    useKeyboard: true,\n    valueLabel: \"Time\",\n    valuePlaceholder: \"Enter time\",\n    valueLabels: [{\n      label: \"Time from\",\n      placeholder: \"Enter time from\"\n    }, {\n      label: \"Time to\",\n      placeholder: \"Enter time to\"\n    }],\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return isForDisplay ? dateVal.format(wgtDef.timeFormat) : JSON.stringify(val);\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return SqlString.escape(dateVal.format(\"HH:mm:ss\"));\n    },\n    spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return \"T(java.time.LocalTime).parse('\".concat(dateVal.format(\"HH:mm:ss\"), \"')\"); //return `new java.text.SimpleDateFormat('HH:mm:ss').parse('${dateVal.format(\"HH:mm:ss\")}')`;\n    },\n    jsonLogic: function jsonLogic(val, fieldDef, wgtDef) {\n      // return seconds of day\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return dateVal.get(\"hour\") * 60 * 60 + dateVal.get(\"minute\") * 60 + dateVal.get(\"second\");\n    },\n    toJS: function toJS(val, fieldSettings) {\n      // return seconds of day\n      var dateVal = moment(val, fieldSettings.valueFormat);\n      return dateVal.isValid() ? dateVal.get(\"hour\") * 60 * 60 + dateVal.get(\"minute\") * 60 + dateVal.get(\"second\") : undefined;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      // return seconds of day\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return dateVal.get(\"hour\") * 60 * 60 + dateVal.get(\"minute\") * 60 + dateVal.get(\"second\");\n    },\n    elasticSearchFormatValue: function elasticSearchFormatValue(queryType, value, operator, fieldName) {\n      return {\n        script: {\n          script: {\n            source: \"doc[\".concat(fieldName, \"][0].getHour() >== params.min && doc[\").concat(fieldName, \"][0].getHour() <== params.max\"),\n            params: {\n              min: value[0],\n              max: value[1]\n            }\n          }\n        }\n      };\n    }\n  },\n  datetime: {\n    type: \"datetime\",\n    jsType: \"string\",\n    valueSrc: \"value\",\n    timeFormat: \"HH:mm\",\n    dateFormat: \"DD.MM.YYYY\",\n    valueFormat: \"YYYY-MM-DD HH:mm:ss\",\n    use12Hours: false,\n    useKeyboard: true,\n    valueLabel: \"Datetime\",\n    valuePlaceholder: \"Enter datetime\",\n    valueLabels: [{\n      label: \"Datetime from\",\n      placeholder: \"Enter datetime from\"\n    }, {\n      label: \"Datetime to\",\n      placeholder: \"Enter datetime to\"\n    }],\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return isForDisplay ? dateVal.format(wgtDef.dateFormat + \" \" + wgtDef.timeFormat) : JSON.stringify(val);\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return SqlString.escape(dateVal.toDate());\n    },\n    spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return \"new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss').parse('\".concat(dateVal.format(\"YYYY-MM-DD HH:mm:ss\"), \"')\");\n    },\n    jsonLogic: function jsonLogic(val, fieldDef, wgtDef) {\n      return moment(val, wgtDef.valueFormat).toDate();\n    },\n    toJS: function toJS(val, fieldSettings) {\n      var dateVal = moment(val, fieldSettings.valueFormat);\n      return dateVal.isValid() ? dateVal.toDate() : undefined;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return dateVal.isValid() ? dateVal.toDate() : undefined;\n    }\n  },\n  \"boolean\": {\n    type: \"boolean\",\n    jsType: \"boolean\",\n    valueSrc: \"value\",\n    labelYes: \"Yes\",\n    labelNo: \"No\",\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay) {\n      return isForDisplay ? val ? \"Yes\" : \"No\" : JSON.stringify(!!val);\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      return SqlString.escape(val);\n    },\n    spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      return spelEscape(val);\n    },\n    defaultValue: false,\n    toJS: function toJS(val, fieldSettings) {\n      return val;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      return val;\n    }\n  },\n  field: {\n    valueSrc: \"field\",\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay, op, opDef, rightFieldDef) {\n      return isForDisplay ? rightFieldDef.label || val : val;\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef, rightFieldDef) {\n      return val;\n    },\n    spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      return val;\n    },\n    valueLabel: \"Field to compare\",\n    valuePlaceholder: \"Select field to compare\"\n  },\n  func: {\n    valueSrc: \"func\",\n    valueLabel: \"Function\",\n    valuePlaceholder: \"Select function\"\n  },\n  case_value: {\n    valueSrc: \"value\",\n    type: \"case_value\",\n    spelFormatValue: function spelFormatValue(val) {\n      return spelEscape(val === \"\" ? null : val);\n    },\n    spelImportValue: function spelImportValue(val) {\n      return [val.value, []];\n    }\n  }\n}; //----------------------------  types\n\nvar types = {\n  text: {\n    defaultOperator: \"equal\",\n    mainWidget: \"text\",\n    widgets: {\n      text: {\n        operators: [\"equal\", \"not_equal\", \"like\", \"not_like\", \"starts_with\", \"ends_with\", \"proximity\", \"is_empty\", \"is_not_empty\", \"is_null\", \"is_not_null\"],\n        widgetProps: {},\n        opProps: {}\n      },\n      textarea: {\n        operators: [\"equal\", \"not_equal\", \"like\", \"not_like\", \"starts_with\", \"ends_with\", \"is_empty\", \"is_not_empty\", \"is_null\", \"is_not_null\"],\n        widgetProps: {},\n        opProps: {}\n      },\n      field: {\n        operators: [//unary ops (like `is_empty`) will be excluded anyway, see getWidgetsForFieldOp()\n        \"equal\", \"not_equal\", \"proximity\" //can exclude if you want\n        ]\n      }\n    }\n  },\n  number: {\n    defaultOperator: \"equal\",\n    mainWidget: \"number\",\n    widgets: {\n      number: {\n        operators: [\"equal\", \"not_equal\", \"less\", \"less_or_equal\", \"greater\", \"greater_or_equal\", \"between\", \"not_between\", // \"is_empty\",\n        // \"is_not_empty\",\n        \"is_null\", \"is_not_null\"]\n      },\n      slider: {\n        operators: [\"equal\", \"not_equal\", \"less\", \"less_or_equal\", \"greater\", \"greater_or_equal\", // \"is_empty\",\n        // \"is_not_empty\",\n        \"is_null\", \"is_not_null\"]\n      }\n    }\n  },\n  date: {\n    defaultOperator: \"equal\",\n    widgets: {\n      date: {\n        operators: [\"equal\", \"not_equal\", \"less\", \"less_or_equal\", \"greater\", \"greater_or_equal\", \"between\", \"not_between\", // \"is_empty\",\n        // \"is_not_empty\",\n        \"is_null\", \"is_not_null\"]\n      }\n    }\n  },\n  time: {\n    defaultOperator: \"equal\",\n    widgets: {\n      time: {\n        operators: [\"equal\", \"not_equal\", \"less\", \"less_or_equal\", \"greater\", \"greater_or_equal\", \"between\", \"not_between\", // \"is_empty\",\n        // \"is_not_empty\",\n        \"is_null\", \"is_not_null\"]\n      }\n    }\n  },\n  datetime: {\n    defaultOperator: \"equal\",\n    widgets: {\n      datetime: {\n        operators: [\"equal\", \"not_equal\", \"less\", \"less_or_equal\", \"greater\", \"greater_or_equal\", \"between\", \"not_between\", // \"is_empty\",\n        // \"is_not_empty\",\n        \"is_null\", \"is_not_null\"]\n      }\n    }\n  },\n  select: {\n    mainWidget: \"select\",\n    defaultOperator: \"select_equals\",\n    widgets: {\n      select: {\n        operators: [\"select_equals\", \"select_not_equals\", // \"is_empty\",\n        // \"is_not_empty\",\n        \"is_null\", \"is_not_null\"]\n      },\n      multiselect: {\n        operators: [\"select_any_in\", \"select_not_any_in\", // \"is_empty\",\n        // \"is_not_empty\",\n        \"is_null\", \"is_not_null\"]\n      }\n    }\n  },\n  multiselect: {\n    defaultOperator: \"multiselect_equals\",\n    widgets: {\n      multiselect: {\n        operators: [\"multiselect_contains\", \"multiselect_not_contains\", \"multiselect_equals\", \"multiselect_not_equals\", // \"is_empty\",\n        // \"is_not_empty\",\n        \"is_null\", \"is_not_null\"]\n      }\n    }\n  },\n  \"boolean\": {\n    defaultOperator: \"equal\",\n    widgets: {\n      \"boolean\": {\n        operators: [\"equal\", \"not_equal\", \"is_null\", \"is_not_null\"],\n        widgetProps: {//you can enable this if you don't use fields as value sources\n          // hideOperator: true,\n          // operatorInlineLabel: \"is\",\n        }\n      },\n      field: {\n        operators: [\"equal\", \"not_equal\"]\n      }\n    }\n  },\n  \"!group\": {\n    defaultOperator: \"some\",\n    mainWidget: \"number\",\n    widgets: {\n      number: {\n        widgetProps: {\n          min: 0\n        },\n        operators: [// w/o operand\n        \"some\", \"all\", \"none\", // w/ operand - count\n        \"equal\", \"not_equal\", \"less\", \"less_or_equal\", \"greater\", \"greater_or_equal\", \"between\", \"not_between\"],\n        opProps: {\n          equal: {\n            label: \"Count ==\"\n          },\n          not_equal: {\n            label: \"Count !=\"\n          },\n          less: {\n            label: \"Count <\"\n          },\n          less_or_equal: {\n            label: \"Count <=\"\n          },\n          greater: {\n            label: \"Count >\"\n          },\n          greater_or_equal: {\n            label: \"Count >=\"\n          },\n          between: {\n            label: \"Count between\"\n          },\n          not_between: {\n            label: \"Count not between\"\n          }\n        }\n      }\n    }\n  },\n  \"case_value\": {\n    mainWidget: \"case_value\",\n    widgets: {\n      case_value: {}\n    }\n  }\n}; //----------------------------  settings\n\nvar settings = _objectSpread(_objectSpread({}, defaultSettings), {}, {\n  convertableWidgets: {\n    \"number\": [\"slider\", \"rangeslider\"],\n    \"slider\": [\"number\", \"rangeslider\"],\n    \"rangeslider\": [\"number\", \"slider\"],\n    \"text\": [\"textarea\"],\n    \"textarea\": [\"text\"]\n  },\n  formatSpelField: function formatSpelField(field, parentField, parts, partsExt, fieldDefinition, config) {\n    var fieldName = partsExt.map(function (_ref12, ind) {\n      var key = _ref12.key,\n          parent = _ref12.parent;\n\n      if (ind == 0) {\n        if (parent == \"[map]\") return \"#this[\".concat(spelEscape(key), \"]\");else if (parent == \"[class]\") return key;else return key;\n      } else {\n        if (parent == \"map\" || parent == \"[map]\") return \"[\".concat(spelEscape(key), \"]\");else if (parent == \"class\" || parent == \"[class]\") return \".\".concat(key);else return \".\".concat(key);\n      }\n    }).join(\"\");\n\n    if (fieldDefinition.isSpelVariable) {\n      fieldName = \"#\" + fieldName;\n    }\n\n    return fieldName;\n  },\n  sqlFormatReverse: function sqlFormatReverse(q) {\n    if (q == undefined) return undefined;\n    return \"NOT(\" + q + \")\";\n  },\n  spelFormatReverse: function spelFormatReverse(q) {\n    if (q == undefined) return undefined;\n    return \"!(\" + q + \")\";\n  },\n  formatReverse: function formatReverse(q, operator, reversedOp, operatorDefinition, revOperatorDefinition, isForDisplay) {\n    if (q == undefined) return undefined;\n    if (isForDisplay) return \"NOT (\" + q + \")\";else return \"!(\" + q + \")\";\n  },\n  formatAggr: function formatAggr(whereStr, aggrField, operator, value, valueSrc, valueType, opDef, operatorOptions, isForDisplay, aggrFieldDef) {\n    var labelForFormat = opDef.labelForFormat,\n        cardinality = opDef.cardinality;\n\n    if (cardinality == 0) {\n      var cond = whereStr ? \" HAVE \".concat(whereStr) : \"\";\n      return \"\".concat(labelForFormat, \" OF \").concat(aggrField).concat(cond);\n    } else if (cardinality == undefined || cardinality == 1) {\n      var _cond = whereStr ? \" WHERE \".concat(whereStr) : \"\";\n\n      return \"COUNT OF \".concat(aggrField).concat(_cond, \" \").concat(labelForFormat, \" \").concat(value);\n    } else if (cardinality == 2) {\n      var _cond2 = whereStr ? \" WHERE \".concat(whereStr) : \"\";\n\n      var valFrom = value.first();\n      var valTo = value.get(1);\n      return \"COUNT OF \".concat(aggrField).concat(_cond2, \" \").concat(labelForFormat, \" \").concat(valFrom, \" AND \").concat(valTo);\n    }\n  },\n  jsonLogic: {\n    groupVarKey: \"var\",\n    altVarKey: \"var\",\n    lockedOp: \"locked\"\n  },\n  canCompareFieldWithField: function canCompareFieldWithField(leftField, leftFieldConfig, rightField, rightFieldConfig) {\n    //for type == 'select'/'multiselect' you can check listValues\n    return true;\n  },\n  // enable compare fields\n  valueSourcesInfo: {\n    value: {\n      label: \"Value\"\n    },\n    field: {\n      label: \"Field\",\n      widget: \"field\"\n    },\n    func: {\n      label: \"Function\",\n      widget: \"func\"\n    }\n  }\n}); //----------------------------\n\n\nexport default {\n  conjunctions: conjunctions,\n  operators: operators,\n  widgets: widgets,\n  types: types,\n  settings: settings\n};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/node_modules/@react-awesome-query-builder/core/esm/config/index.js"],"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","SqlString","sqlEmptyValue","mongoEmptyValue","spelEscape","spelFixList","stringifyForDisplay","escapeRegExp","getTitleInListValues","moment","settings","defaultSettings","conjunctions","AND","label","mongoConj","jsonLogicConj","sqlConj","spelConj","spelConjs","reversedConj","formatConj","children","conj","not","isForDisplay","size","join","first","sqlFormatConj","spelFormatConj","omitBrackets","OR","mongoFormatOp1","mop","mc","field","_op","value","useExpr","valueSrc","valueType","opDef","operatorOptions","fieldDef","$field","startsWith","mv","undefined","mongoFormatOp2","mops","values","valueSrcs","valueTypes","_$not3","_field2","operators","equal","labelForFormat","sqlOp","spelOp","spelOps","reversedOp","formatOp","op","opStr","concat","mongoFormatOp","bind","v","jsonLogic","elasticSearchQueryType","not_equal","isNotOp","less","less_or_equal","greater","greater_or_equal","like","_jsonLogicIsRevArgs","valueSources","not_like","starts_with","ends_with","between","cardinality","valFrom","valTo","get","spelFormatOp","valueLabels","textSeparators","validateValues","type","not_between","is_empty","sqlFormatOp","empty","is_not_empty","is_null","is_not_null","select_equals","select_not_equals","select_any_in","select_not_any_in","multiselect_contains","jsonLogic2","vals","multiselect_not_contains","multiselect_equals","map","trim","multiselect_not_equals","proximity","placeholder","val1","val2","prox","aVal1","aVal2","options","optionLabel","optionTextBefore","optionPlaceholder","minProximity","maxProximity","defaults","some","filteredSize","all","fullSize","none","widgets","text","jsType","valueLabel","valuePlaceholder","formatValue","val","wgtDef","JSON","stringify","spelFormatValue","regex","sqlFormatValue","escapeLike","escape","toJS","fieldSettings","mongoFormatValue","textarea","fullWidth","number","isFloat","step","Number","isInteger","slider","select","valLabel","listValues","asyncListValues","multiselect","valsLabels","isCallable","res","date","dateFormat","valueFormat","useKeyboard","dateVal","format","toDate","isValid","time","timeFormat","use12Hours","elasticSearchFormatValue","queryType","operator","fieldName","script","params","min","max","datetime","labelYes","labelNo","defaultValue","rightFieldDef","func","case_value","spelImportValue","types","defaultOperator","mainWidget","widgetProps","opProps","convertableWidgets","formatSpelField","parentField","parts","partsExt","fieldDefinition","config","_ref12","ind","parent","isSpelVariable","sqlFormatReverse","q","spelFormatReverse","formatReverse","operatorDefinition","revOperatorDefinition","formatAggr","whereStr","aggrField","aggrFieldDef","cond","_cond","_cond2","groupVarKey","altVarKey","lockedOp","canCompareFieldWithField","leftField","leftFieldConfig","rightField","rightFieldConfig","valueSourcesInfo","widget"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { SqlString, sqlEmptyValue, mongoEmptyValue, spelEscape, spelFixList, stringifyForDisplay } from \"../utils/export\";\nimport { escapeRegExp } from \"../utils/stuff\";\nimport { getTitleInListValues } from \"../utils/listValues\";\nimport moment from \"moment\";\nimport { settings as defaultSettings } from \"./default\";\n\n//----------------------------  conjunctions\n\nvar conjunctions = {\n  AND: {\n    label: \"And\",\n    mongoConj: \"$and\",\n    jsonLogicConj: \"and\",\n    sqlConj: \"AND\",\n    spelConj: \"and\",\n    spelConjs: [\"and\", \"&&\"],\n    reversedConj: \"OR\",\n    formatConj: function formatConj(children, conj, not, isForDisplay) {\n      return children.size > 1 ? (not ? \"NOT \" : \"\") + \"(\" + children.join(\" \" + (isForDisplay ? \"AND\" : \"&&\") + \" \") + \")\" : (not ? \"NOT (\" : \"\") + children.first() + (not ? \")\" : \"\");\n    },\n    sqlFormatConj: function sqlFormatConj(children, conj, not) {\n      return children.size > 1 ? (not ? \"NOT \" : \"\") + \"(\" + children.join(\" \" + \"AND\" + \" \") + \")\" : (not ? \"NOT (\" : \"\") + children.first() + (not ? \")\" : \"\");\n    },\n    spelFormatConj: function spelFormatConj(children, conj, not, omitBrackets) {\n      if (not) omitBrackets = false;\n      return children.size > 1 ? (not ? \"!\" : \"\") + (omitBrackets ? \"\" : \"(\") + children.join(\" \" + \"&&\" + \" \") + (omitBrackets ? \"\" : \")\") : (not ? \"!(\" : \"\") + children.first() + (not ? \")\" : \"\");\n    }\n  },\n  OR: {\n    label: \"Or\",\n    mongoConj: \"$or\",\n    jsonLogicConj: \"or\",\n    sqlConj: \"OR\",\n    spelConj: \"or\",\n    spelConjs: [\"or\", \"||\"],\n    reversedConj: \"AND\",\n    formatConj: function formatConj(children, conj, not, isForDisplay) {\n      return children.size > 1 ? (not ? \"NOT \" : \"\") + \"(\" + children.join(\" \" + (isForDisplay ? \"OR\" : \"||\") + \" \") + \")\" : (not ? \"NOT (\" : \"\") + children.first() + (not ? \")\" : \"\");\n    },\n    sqlFormatConj: function sqlFormatConj(children, conj, not) {\n      return children.size > 1 ? (not ? \"NOT \" : \"\") + \"(\" + children.join(\" \" + \"OR\" + \" \") + \")\" : (not ? \"NOT (\" : \"\") + children.first() + (not ? \")\" : \"\");\n    },\n    spelFormatConj: function spelFormatConj(children, conj, not, omitBrackets) {\n      if (not) omitBrackets = false;\n      return children.size > 1 ? (not ? \"!\" : \"\") + (omitBrackets ? \"\" : \"(\") + children.join(\" \" + \"||\" + \" \") + (omitBrackets ? \"\" : \")\") : (not ? \"!(\" : \"\") + children.first() + (not ? \")\" : \"\");\n    }\n  }\n};\n\n//----------------------------  operators\n\n// helpers for mongo format\nexport var mongoFormatOp1 = function mongoFormatOp1(mop, mc, not, field, _op, value, useExpr, valueSrc, valueType, opDef, operatorOptions, fieldDef) {\n  var $field = typeof field == \"string\" && !field.startsWith(\"$\") ? \"$\" + field : field;\n  var mv = mc(value, fieldDef);\n  if (mv === undefined) return undefined;\n  if (not) {\n    if (!useExpr && (!mop || mop == \"$eq\")) return _defineProperty({}, field, {\n      \"$ne\": mv\n    }); // short form\n    return !useExpr ? _defineProperty({}, field, {\n      \"$not\": _defineProperty({}, mop, mv)\n    }) : {\n      \"$not\": _defineProperty({}, mop, [$field, mv])\n    };\n  } else {\n    if (!useExpr && (!mop || mop == \"$eq\")) return _defineProperty({}, field, mv); // short form\n    return !useExpr ? _defineProperty({}, field, _defineProperty({}, mop, mv)) : _defineProperty({}, mop, [$field, mv]);\n  }\n};\nexport var mongoFormatOp2 = function mongoFormatOp2(mops, not, field, _op, values, useExpr, valueSrcs, valueTypes, opDef, operatorOptions, fieldDef) {\n  var $field = typeof field == \"string\" && !field.startsWith(\"$\") ? \"$\" + field : field;\n  if (not) {\n    var _$not3;\n    return !useExpr ? _defineProperty({}, field, {\n      \"$not\": (_$not3 = {}, _defineProperty(_$not3, mops[0], values[0]), _defineProperty(_$not3, mops[1], values[1]), _$not3)\n    }) : {\n      \"$not\": {\n        \"$and\": [_defineProperty({}, mops[0], [$field, values[0]]), _defineProperty({}, mops[1], [$field, values[1]])]\n      }\n    };\n  } else {\n    var _field2;\n    return !useExpr ? _defineProperty({}, field, (_field2 = {}, _defineProperty(_field2, mops[0], values[0]), _defineProperty(_field2, mops[1], values[1]), _field2)) : {\n      \"$and\": [_defineProperty({}, mops[0], [$field, values[0]]), _defineProperty({}, mops[1], [$field, values[1]])]\n    };\n  }\n};\nvar operators = {\n  equal: {\n    label: \"==\",\n    labelForFormat: \"==\",\n    sqlOp: \"=\",\n    spelOp: \"==\",\n    spelOps: [\"==\", \"eq\"],\n    reversedOp: \"not_equal\",\n    formatOp: function formatOp(field, op, value, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay, fieldDef) {\n      var opStr = isForDisplay ? \"=\" : opDef.label;\n      if (valueTypes == \"boolean\" && isForDisplay) return value == \"No\" ? \"NOT \".concat(field) : \"\".concat(field);else return \"\".concat(field, \" \").concat(opStr, \" \").concat(value);\n    },\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$eq\", function (v) {\n      return v;\n    }, false),\n    jsonLogic: \"==\",\n    elasticSearchQueryType: \"term\"\n  },\n  not_equal: {\n    isNotOp: true,\n    label: \"!=\",\n    labelForFormat: \"!=\",\n    sqlOp: \"<>\",\n    spelOp: \"!=\",\n    spelOps: [\"!=\", \"ne\"],\n    reversedOp: \"equal\",\n    formatOp: function formatOp(field, op, value, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay, fieldDef) {\n      if (valueTypes == \"boolean\" && isForDisplay) return value == \"No\" ? \"\".concat(field) : \"NOT \".concat(field);else return \"\".concat(field, \" \").concat(opDef.label, \" \").concat(value);\n    },\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$ne\", function (v) {\n      return v;\n    }, false),\n    jsonLogic: \"!=\"\n  },\n  less: {\n    label: \"<\",\n    labelForFormat: \"<\",\n    sqlOp: \"<\",\n    spelOp: \"<\",\n    spelOps: [\"<\", \"lt\"],\n    reversedOp: \"greater_or_equal\",\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$lt\", function (v) {\n      return v;\n    }, false),\n    jsonLogic: \"<\",\n    elasticSearchQueryType: \"range\"\n  },\n  less_or_equal: {\n    label: \"<=\",\n    labelForFormat: \"<=\",\n    sqlOp: \"<=\",\n    spelOp: \"<=\",\n    spelOps: [\"<=\", \"le\"],\n    reversedOp: \"greater\",\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$lte\", function (v) {\n      return v;\n    }, false),\n    jsonLogic: \"<=\",\n    elasticSearchQueryType: \"range\"\n  },\n  greater: {\n    label: \">\",\n    labelForFormat: \">\",\n    sqlOp: \">\",\n    spelOp: \">\",\n    spelOps: [\">\", \"gt\"],\n    reversedOp: \"less_or_equal\",\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$gt\", function (v) {\n      return v;\n    }, false),\n    jsonLogic: \">\",\n    elasticSearchQueryType: \"range\"\n  },\n  greater_or_equal: {\n    label: \">=\",\n    labelForFormat: \">=\",\n    sqlOp: \">=\",\n    spelOp: \">=\",\n    spelOps: [\">=\", \"ge\"],\n    reversedOp: \"less\",\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$gte\", function (v) {\n      return v;\n    }, false),\n    jsonLogic: \">=\",\n    elasticSearchQueryType: \"range\"\n  },\n  like: {\n    label: \"Contains\",\n    labelForFormat: \"Contains\",\n    reversedOp: \"not_like\",\n    sqlOp: \"LIKE\",\n    spelOp: \".contains\",\n    spelOps: [\"matches\", \".contains\"],\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$regex\", function (v) {\n      return typeof v == \"string\" ? escapeRegExp(v) : undefined;\n    }, false),\n    //jsonLogic: (field, op, val) => ({ \"in\": [val, field] }),\n    jsonLogic: \"in\",\n    _jsonLogicIsRevArgs: true,\n    valueSources: [\"value\"],\n    elasticSearchQueryType: \"regexp\"\n  },\n  not_like: {\n    isNotOp: true,\n    label: \"Not contains\",\n    reversedOp: \"like\",\n    labelForFormat: \"Not Contains\",\n    sqlOp: \"NOT LIKE\",\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$regex\", function (v) {\n      return typeof v == \"string\" ? escapeRegExp(v) : undefined;\n    }, true),\n    valueSources: [\"value\"]\n  },\n  starts_with: {\n    label: \"Starts with\",\n    labelForFormat: \"Starts with\",\n    sqlOp: \"LIKE\",\n    spelOp: \".startsWith\",\n    spelOps: [\"matches\", \".startsWith\"],\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$regex\", function (v) {\n      return typeof v == \"string\" ? \"^\" + escapeRegExp(v) : undefined;\n    }, false),\n    jsonLogic: undefined,\n    // not supported\n    valueSources: [\"value\"]\n  },\n  ends_with: {\n    label: \"Ends with\",\n    labelForFormat: \"Ends with\",\n    sqlOp: \"LIKE\",\n    spelOp: \".endsWith\",\n    spelOps: [\"matches\", \".endsWith\"],\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$regex\", function (v) {\n      return typeof v == \"string\" ? escapeRegExp(v) + \"$\" : undefined;\n    }, false),\n    jsonLogic: undefined,\n    // not supported\n    valueSources: [\"value\"]\n  },\n  between: {\n    label: \"Between\",\n    labelForFormat: \"BETWEEN\",\n    sqlOp: \"BETWEEN\",\n    cardinality: 2,\n    formatOp: function formatOp(field, op, values, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay) {\n      var valFrom = values.first();\n      var valTo = values.get(1);\n      if (isForDisplay) return \"\".concat(field, \" BETWEEN \").concat(valFrom, \" AND \").concat(valTo);else return \"\".concat(field, \" >= \").concat(valFrom, \" && \").concat(field, \" <= \").concat(valTo);\n    },\n    spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {\n      var valFrom = values[0];\n      var valTo = values[1];\n      return \"\".concat(field, \" >= \").concat(valFrom, \" && \").concat(field, \" <= \").concat(valTo);\n    },\n    mongoFormatOp: mongoFormatOp2.bind(null, [\"$gte\", \"$lte\"], false),\n    valueLabels: [\"Value from\", \"Value to\"],\n    textSeparators: [null, \"and\"],\n    reversedOp: \"not_between\",\n    jsonLogic: \"<=\",\n    validateValues: function validateValues(values) {\n      if (values[0] != undefined && values[1] != undefined) {\n        return values[0] <= values[1] ? null : \"Invalid range\";\n      }\n      return null;\n    },\n    elasticSearchQueryType: function elasticSearchQueryType(type) {\n      return type === \"time\" ? \"filter\" : \"range\";\n    }\n  },\n  not_between: {\n    isNotOp: true,\n    label: \"Not between\",\n    labelForFormat: \"NOT BETWEEN\",\n    sqlOp: \"NOT BETWEEN\",\n    cardinality: 2,\n    formatOp: function formatOp(field, op, values, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay) {\n      var valFrom = values.first();\n      var valTo = values.get(1);\n      if (isForDisplay) return \"\".concat(field, \" NOT BETWEEN \").concat(valFrom, \" AND \").concat(valTo);else return \"(\".concat(field, \" < \").concat(valFrom, \" || \").concat(field, \" > \").concat(valTo, \")\");\n    },\n    spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {\n      var valFrom = values[0];\n      var valTo = values[1];\n      return \"(\".concat(field, \" < \").concat(valFrom, \" || \").concat(field, \" > \").concat(valTo, \")\");\n    },\n    mongoFormatOp: mongoFormatOp2.bind(null, [\"$gte\", \"$lte\"], true),\n    valueLabels: [\"Value from\", \"Value to\"],\n    textSeparators: [null, \"and\"],\n    reversedOp: \"between\",\n    validateValues: function validateValues(values) {\n      if (values[0] != undefined && values[1] != undefined) {\n        return values[0] <= values[1] ? null : \"Invalid range\";\n      }\n      return null;\n    }\n  },\n  is_empty: {\n    label: \"Is empty\",\n    labelForFormat: \"IS EMPTY\",\n    cardinality: 0,\n    reversedOp: \"is_not_empty\",\n    formatOp: function formatOp(field, op, value, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      return isForDisplay ? \"\".concat(field, \" IS EMPTY\") : \"!\".concat(field);\n    },\n    sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {\n      var empty = sqlEmptyValue(fieldDef);\n      return \"COALESCE(\".concat(field, \", \").concat(empty, \") = \").concat(empty);\n    },\n    spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {\n      //tip: is empty or null\n      return \"\".concat(field, \" <= ''\");\n    },\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$in\", function (v, fieldDef) {\n      return [mongoEmptyValue(fieldDef), null];\n    }, false),\n    jsonLogic: \"!\"\n  },\n  is_not_empty: {\n    isNotOp: true,\n    label: \"Is not empty\",\n    labelForFormat: \"IS NOT EMPTY\",\n    cardinality: 0,\n    reversedOp: \"is_empty\",\n    formatOp: function formatOp(field, op, value, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      return isForDisplay ? \"\".concat(field, \" IS NOT EMPTY\") : \"!!\".concat(field);\n    },\n    sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {\n      var empty = sqlEmptyValue(fieldDef);\n      return \"COALESCE(\".concat(field, \", \").concat(empty, \") <> \").concat(empty);\n    },\n    spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {\n      //tip: is not empty and not null\n      return \"\".concat(field, \" > ''\");\n    },\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$nin\", function (v, fieldDef) {\n      return [mongoEmptyValue(fieldDef), null];\n    }, false),\n    jsonLogic: \"!!\",\n    elasticSearchQueryType: \"exists\"\n  },\n  is_null: {\n    label: \"Is null\",\n    labelForFormat: \"IS NULL\",\n    sqlOp: \"IS NULL\",\n    cardinality: 0,\n    reversedOp: \"is_not_null\",\n    formatOp: function formatOp(field, op, value, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      return isForDisplay ? \"\".concat(field, \" IS NULL\") : \"!\".concat(field);\n    },\n    spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {\n      return \"\".concat(field, \" == null\");\n    },\n    // check if value is null OR not exists\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$eq\", function (v) {\n      return null;\n    }, false),\n    jsonLogic: \"==\"\n  },\n  is_not_null: {\n    label: \"Is not null\",\n    labelForFormat: \"IS NOT NULL\",\n    sqlOp: \"IS NOT NULL\",\n    cardinality: 0,\n    reversedOp: \"is_null\",\n    formatOp: function formatOp(field, op, value, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      return isForDisplay ? \"\".concat(field, \" IS NOT NULL\") : \"!!\".concat(field);\n    },\n    spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {\n      return \"\".concat(field, \" != null\");\n    },\n    // check if value exists and is not null\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$ne\", function (v) {\n      return null;\n    }, false),\n    jsonLogic: \"!=\",\n    elasticSearchQueryType: \"exists\"\n  },\n  select_equals: {\n    label: \"==\",\n    labelForFormat: \"==\",\n    sqlOp: \"=\",\n    // enum/set\n    formatOp: function formatOp(field, op, value, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      var opStr = isForDisplay ? \"=\" : \"==\";\n      return \"\".concat(field, \" \").concat(opStr, \" \").concat(value);\n    },\n    spelOp: \"==\",\n    spelOps: [\"==\", \"eq\"],\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$eq\", function (v) {\n      return v;\n    }, false),\n    reversedOp: \"select_not_equals\",\n    jsonLogic: \"==\",\n    elasticSearchQueryType: \"term\"\n  },\n  select_not_equals: {\n    isNotOp: true,\n    label: \"!=\",\n    labelForFormat: \"!=\",\n    sqlOp: \"<>\",\n    // enum/set\n    formatOp: function formatOp(field, op, value, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      return \"\".concat(field, \" != \").concat(value);\n    },\n    spelOp: \"!=\",\n    spelOps: [\"!=\", \"ne\"],\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$ne\", function (v) {\n      return v;\n    }, false),\n    reversedOp: \"select_equals\",\n    jsonLogic: \"!=\"\n  },\n  select_any_in: {\n    label: \"Any in\",\n    labelForFormat: \"IN\",\n    sqlOp: \"IN\",\n    formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      if (valueSrc == \"value\") return \"\".concat(field, \" IN (\").concat(values.join(\", \"), \")\");else return \"\".concat(field, \" IN (\").concat(values, \")\");\n    },\n    sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {\n      if (valueSrc == \"value\") {\n        return \"\".concat(field, \" IN (\").concat(values.join(\", \"), \")\");\n      } else return undefined; // not supported\n    },\n\n    spelOp: \"$contains\",\n    // tip: $ means first arg is object\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$in\", function (v) {\n      return v;\n    }, false),\n    reversedOp: \"select_not_any_in\",\n    jsonLogic: \"in\",\n    elasticSearchQueryType: \"term\"\n  },\n  select_not_any_in: {\n    isNotOp: true,\n    label: \"Not in\",\n    labelForFormat: \"NOT IN\",\n    sqlOp: \"NOT IN\",\n    formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      if (valueSrc == \"value\") return \"\".concat(field, \" NOT IN (\").concat(values.join(\", \"), \")\");else return \"\".concat(field, \" NOT IN (\").concat(values, \")\");\n    },\n    sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {\n      if (valueSrc == \"value\") {\n        return \"\".concat(field, \" NOT IN (\").concat(values.join(\", \"), \")\");\n      } else return undefined; // not supported\n    },\n\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$nin\", function (v) {\n      return v;\n    }, false),\n    reversedOp: \"select_any_in\"\n  },\n  // it's not \"contains all\", but \"contains any\" operator\n  multiselect_contains: {\n    label: \"Contains\",\n    labelForFormat: \"CONTAINS\",\n    formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      if (valueSrc == \"value\") return \"\".concat(field, \" CONTAINS [\").concat(values.join(\", \"), \"]\");else return \"\".concat(field, \" CONTAINS \").concat(values);\n    },\n    reversedOp: \"multiselect_not_contains\",\n    jsonLogic2: \"some-in\",\n    jsonLogic: function jsonLogic(field, op, vals) {\n      return {\n        \"some\": [field, {\n          \"in\": [{\n            \"var\": \"\"\n          }, vals]\n        }]\n      };\n    },\n    //spelOp: \".containsAll\",\n    spelOp: \"CollectionUtils.containsAny()\",\n    elasticSearchQueryType: \"term\",\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$in\", function (v) {\n      return v;\n    }, false)\n  },\n  multiselect_not_contains: {\n    isNotOp: true,\n    label: \"Not contains\",\n    labelForFormat: \"NOT CONTAINS\",\n    formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      if (valueSrc == \"value\") return \"\".concat(field, \" NOT CONTAINS [\").concat(values.join(\", \"), \"]\");else return \"\".concat(field, \" NOT CONTAINS \").concat(values);\n    },\n    reversedOp: \"multiselect_contains\"\n  },\n  multiselect_equals: {\n    label: \"Equals\",\n    labelForFormat: \"==\",\n    sqlOp: \"=\",\n    formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      var opStr = isForDisplay ? \"=\" : \"==\";\n      if (valueSrc == \"value\") return \"\".concat(field, \" \").concat(opStr, \" [\").concat(values.join(\", \"), \"]\");else return \"\".concat(field, \" \").concat(opStr, \" \").concat(values);\n    },\n    sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {\n      if (valueSrc == \"value\")\n        // set\n        return \"\".concat(field, \" = '\").concat(values.map(function (v) {\n          return SqlString.trim(v);\n        }).join(\",\"), \"'\");else return undefined; //not supported\n    },\n\n    spelOp: \".equals\",\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$eq\", function (v) {\n      return v;\n    }, false),\n    reversedOp: \"multiselect_not_equals\",\n    jsonLogic2: \"all-in\",\n    jsonLogic: function jsonLogic(field, op, vals) {\n      return {\n        // it's not \"equals\", but \"includes\" operator - just for example\n        \"all\": [field, {\n          \"in\": [{\n            \"var\": \"\"\n          }, vals]\n        }]\n      };\n    },\n    elasticSearchQueryType: \"term\"\n  },\n  multiselect_not_equals: {\n    isNotOp: true,\n    label: \"Not equals\",\n    labelForFormat: \"!=\",\n    sqlOp: \"<>\",\n    formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      if (valueSrc == \"value\") return \"\".concat(field, \" != [\").concat(values.join(\", \"), \"]\");else return \"\".concat(field, \" != \").concat(values);\n    },\n    sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {\n      if (valueSrc == \"value\")\n        // set\n        return \"\".concat(field, \" != '\").concat(values.map(function (v) {\n          return SqlString.trim(v);\n        }).join(\",\"), \"'\");else return undefined; //not supported\n    },\n\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$ne\", function (v) {\n      return v;\n    }, false),\n    reversedOp: \"multiselect_equals\"\n  },\n  proximity: {\n    label: \"Proximity search\",\n    cardinality: 2,\n    valueLabels: [{\n      label: \"Word 1\",\n      placeholder: \"Enter first word\"\n    }, {\n      label: \"Word 2\",\n      placeholder: \"Enter second word\"\n    }],\n    textSeparators: [\n      //'Word 1',\n      //'Word 2'\n    ],\n    formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {\n      var val1 = values.first();\n      var val2 = values.get(1);\n      var prox = operatorOptions.get(\"proximity\");\n      return \"\".concat(field, \" \").concat(val1, \" NEAR/\").concat(prox, \" \").concat(val2);\n    },\n    sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {\n      var val1 = values.first();\n      var val2 = values.get(1);\n      var aVal1 = SqlString.trim(val1);\n      var aVal2 = SqlString.trim(val2);\n      var prox = operatorOptions.get(\"proximity\");\n      return \"CONTAINS(\".concat(field, \", 'NEAR((\").concat(aVal1, \", \").concat(aVal2, \"), \").concat(prox, \")')\");\n    },\n    mongoFormatOp: undefined,\n    // not supported\n    jsonLogic: undefined,\n    // not supported\n    options: {\n      optionLabel: \"Near\",\n      // label on top of \"near\" selectbox (for config.settings.showLabels==true)\n      optionTextBefore: \"Near\",\n      // label before \"near\" selectbox (for config.settings.showLabels==false)\n      optionPlaceholder: \"Select words between\",\n      // placeholder for \"near\" selectbox\n      minProximity: 2,\n      maxProximity: 10,\n      defaults: {\n        proximity: 2\n      }\n    }\n  },\n  some: {\n    label: \"Some\",\n    labelForFormat: \"SOME\",\n    cardinality: 0,\n    jsonLogic: \"some\",\n    spelFormatOp: function spelFormatOp(filteredSize) {\n      return \"\".concat(filteredSize, \" > 0\");\n    },\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$gt\", function (v) {\n      return 0;\n    }, false)\n  },\n  all: {\n    label: \"All\",\n    labelForFormat: \"ALL\",\n    cardinality: 0,\n    jsonLogic: \"all\",\n    spelFormatOp: function spelFormatOp(filteredSize, op, fullSize) {\n      return \"\".concat(filteredSize, \" == \").concat(fullSize);\n    },\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$eq\", function (v) {\n      return v;\n    }, false)\n  },\n  none: {\n    label: \"None\",\n    labelForFormat: \"NONE\",\n    cardinality: 0,\n    jsonLogic: \"none\",\n    spelFormatOp: function spelFormatOp(filteredSize) {\n      return \"\".concat(filteredSize, \" == 0\");\n    },\n    mongoFormatOp: mongoFormatOp1.bind(null, \"$eq\", function (v) {\n      return 0;\n    }, false)\n  }\n};\n\n//----------------------------  widgets\n\nvar widgets = {\n  text: {\n    type: \"text\",\n    jsType: \"string\",\n    valueSrc: \"value\",\n    valueLabel: \"String\",\n    valuePlaceholder: \"Enter string\",\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay) {\n      return isForDisplay ? stringifyForDisplay(val) : JSON.stringify(val);\n    },\n    spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      if (opDef.spelOp == \"matches\" && op != \"regex\") {\n        var regex;\n        if (op == \"starts_with\") {\n          regex = \"(?s)^\".concat(escapeRegExp(val), \".*\");\n        } else if (op == \"ends_with\") {\n          regex = \"(?s).*\".concat(escapeRegExp(val), \"$\");\n        } else {\n          // op == 'like'\n          regex = \"(?s).*\".concat(escapeRegExp(val), \".*\"); //tip: can use (?sui) for case-insensitive\n        }\n\n        return spelEscape(regex);\n      } else {\n        return spelEscape(val);\n      }\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      if (opDef.sqlOp == \"LIKE\" || opDef.sqlOp == \"NOT LIKE\") {\n        return SqlString.escapeLike(val, op != \"starts_with\", op != \"ends_with\");\n      } else {\n        return SqlString.escape(val);\n      }\n    },\n    toJS: function toJS(val, fieldSettings) {\n      return val;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      return val;\n    }\n  },\n  textarea: {\n    type: \"text\",\n    jsType: \"string\",\n    valueSrc: \"value\",\n    valueLabel: \"Text\",\n    valuePlaceholder: \"Enter text\",\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay) {\n      return isForDisplay ? stringifyForDisplay(val) : JSON.stringify(val);\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      if (opDef.sqlOp == \"LIKE\" || opDef.sqlOp == \"NOT LIKE\") {\n        return SqlString.escapeLike(val, op != \"starts_with\", op != \"ends_with\");\n      } else {\n        return SqlString.escape(val);\n      }\n    },\n    spelFormatValue: function spelFormatValue(val) {\n      return spelEscape(val);\n    },\n    toJS: function toJS(val, fieldSettings) {\n      return val;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      return val;\n    },\n    fullWidth: true\n  },\n  number: {\n    type: \"number\",\n    jsType: \"number\",\n    valueSrc: \"value\",\n    valueLabel: \"Number\",\n    valuePlaceholder: \"Enter number\",\n    valueLabels: [{\n      label: \"Number from\",\n      placeholder: \"Enter number from\"\n    }, {\n      label: \"Number to\",\n      placeholder: \"Enter number to\"\n    }],\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay) {\n      return isForDisplay ? stringifyForDisplay(val) : JSON.stringify(val);\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      return SqlString.escape(val);\n    },\n    spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef) {\n      var isFloat = wgtDef.step && !Number.isInteger(wgtDef.step);\n      return spelEscape(val, isFloat);\n    },\n    toJS: function toJS(val, fieldSettings) {\n      return val;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      return val;\n    }\n  },\n  slider: {\n    type: \"number\",\n    jsType: \"number\",\n    valueSrc: \"value\",\n    valueLabel: \"Number\",\n    valuePlaceholder: \"Enter number or move slider\",\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay) {\n      return isForDisplay ? stringifyForDisplay(val) : JSON.stringify(val);\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      return SqlString.escape(val);\n    },\n    spelFormatValue: function spelFormatValue(val) {\n      return spelEscape(val);\n    },\n    toJS: function toJS(val, fieldSettings) {\n      return val;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      return val;\n    }\n  },\n  select: {\n    type: \"select\",\n    jsType: \"string\",\n    valueSrc: \"value\",\n    valueLabel: \"Value\",\n    valuePlaceholder: \"Select value\",\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay) {\n      var valLabel = getTitleInListValues(fieldDef.fieldSettings.listValues || fieldDef.asyncListValues, val);\n      return isForDisplay ? stringifyForDisplay(valLabel) : JSON.stringify(val);\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      return SqlString.escape(val);\n    },\n    spelFormatValue: function spelFormatValue(val) {\n      return spelEscape(val);\n    },\n    toJS: function toJS(val, fieldSettings) {\n      return val;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      return val;\n    }\n  },\n  multiselect: {\n    type: \"multiselect\",\n    jsType: \"array\",\n    valueSrc: \"value\",\n    valueLabel: \"Values\",\n    valuePlaceholder: \"Select values\",\n    formatValue: function formatValue(vals, fieldDef, wgtDef, isForDisplay) {\n      var valsLabels = vals.map(function (v) {\n        return getTitleInListValues(fieldDef.fieldSettings.listValues || fieldDef.asyncListValues, v);\n      });\n      return isForDisplay ? valsLabels.map(stringifyForDisplay) : vals.map(JSON.stringify);\n    },\n    sqlFormatValue: function sqlFormatValue(vals, fieldDef, wgtDef, op, opDef) {\n      return vals.map(function (v) {\n        return SqlString.escape(v);\n      });\n    },\n    spelFormatValue: function spelFormatValue(vals, fieldDef, wgtDef, op, opDef) {\n      var isCallable = opDef.spelOp && opDef.spelOp[0] == \"$\";\n      var res = spelEscape(vals); // inline list\n      if (isCallable) {\n        // `{1,2}.contains(1)` NOT works\n        // `{1,2}.?[true].contains(1)` works\n        res = spelFixList(res);\n      }\n      return res;\n    },\n    toJS: function toJS(val, fieldSettings) {\n      return val;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      return val;\n    }\n  },\n  date: {\n    type: \"date\",\n    jsType: \"string\",\n    valueSrc: \"value\",\n    dateFormat: \"DD.MM.YYYY\",\n    valueFormat: \"YYYY-MM-DD\",\n    useKeyboard: true,\n    valueLabel: \"Date\",\n    valuePlaceholder: \"Enter date\",\n    valueLabels: [{\n      label: \"Date from\",\n      placeholder: \"Enter date from\"\n    }, {\n      label: \"Date to\",\n      placeholder: \"Enter date to\"\n    }],\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return isForDisplay ? dateVal.format(wgtDef.dateFormat) : JSON.stringify(val);\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return SqlString.escape(dateVal.format(\"YYYY-MM-DD\"));\n    },\n    spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return \"new java.text.SimpleDateFormat('yyyy-MM-dd').parse('\".concat(dateVal.format(\"YYYY-MM-DD\"), \"')\");\n    },\n    jsonLogic: function jsonLogic(val, fieldDef, wgtDef) {\n      return moment(val, wgtDef.valueFormat).toDate();\n    },\n    toJS: function toJS(val, fieldSettings) {\n      var dateVal = moment(val, fieldSettings.valueFormat);\n      return dateVal.isValid() ? dateVal.toDate() : undefined;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return dateVal.isValid() ? dateVal.toDate() : undefined;\n    }\n  },\n  time: {\n    type: \"time\",\n    jsType: \"string\",\n    valueSrc: \"value\",\n    timeFormat: \"HH:mm\",\n    valueFormat: \"HH:mm:ss\",\n    use12Hours: false,\n    useKeyboard: true,\n    valueLabel: \"Time\",\n    valuePlaceholder: \"Enter time\",\n    valueLabels: [{\n      label: \"Time from\",\n      placeholder: \"Enter time from\"\n    }, {\n      label: \"Time to\",\n      placeholder: \"Enter time to\"\n    }],\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return isForDisplay ? dateVal.format(wgtDef.timeFormat) : JSON.stringify(val);\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return SqlString.escape(dateVal.format(\"HH:mm:ss\"));\n    },\n    spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return \"T(java.time.LocalTime).parse('\".concat(dateVal.format(\"HH:mm:ss\"), \"')\");\n      //return `new java.text.SimpleDateFormat('HH:mm:ss').parse('${dateVal.format(\"HH:mm:ss\")}')`;\n    },\n\n    jsonLogic: function jsonLogic(val, fieldDef, wgtDef) {\n      // return seconds of day\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return dateVal.get(\"hour\") * 60 * 60 + dateVal.get(\"minute\") * 60 + dateVal.get(\"second\");\n    },\n    toJS: function toJS(val, fieldSettings) {\n      // return seconds of day\n      var dateVal = moment(val, fieldSettings.valueFormat);\n      return dateVal.isValid() ? dateVal.get(\"hour\") * 60 * 60 + dateVal.get(\"minute\") * 60 + dateVal.get(\"second\") : undefined;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      // return seconds of day\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return dateVal.get(\"hour\") * 60 * 60 + dateVal.get(\"minute\") * 60 + dateVal.get(\"second\");\n    },\n    elasticSearchFormatValue: function elasticSearchFormatValue(queryType, value, operator, fieldName) {\n      return {\n        script: {\n          script: {\n            source: \"doc[\".concat(fieldName, \"][0].getHour() >== params.min && doc[\").concat(fieldName, \"][0].getHour() <== params.max\"),\n            params: {\n              min: value[0],\n              max: value[1]\n            }\n          }\n        }\n      };\n    }\n  },\n  datetime: {\n    type: \"datetime\",\n    jsType: \"string\",\n    valueSrc: \"value\",\n    timeFormat: \"HH:mm\",\n    dateFormat: \"DD.MM.YYYY\",\n    valueFormat: \"YYYY-MM-DD HH:mm:ss\",\n    use12Hours: false,\n    useKeyboard: true,\n    valueLabel: \"Datetime\",\n    valuePlaceholder: \"Enter datetime\",\n    valueLabels: [{\n      label: \"Datetime from\",\n      placeholder: \"Enter datetime from\"\n    }, {\n      label: \"Datetime to\",\n      placeholder: \"Enter datetime to\"\n    }],\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return isForDisplay ? dateVal.format(wgtDef.dateFormat + \" \" + wgtDef.timeFormat) : JSON.stringify(val);\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return SqlString.escape(dateVal.toDate());\n    },\n    spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return \"new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss').parse('\".concat(dateVal.format(\"YYYY-MM-DD HH:mm:ss\"), \"')\");\n    },\n    jsonLogic: function jsonLogic(val, fieldDef, wgtDef) {\n      return moment(val, wgtDef.valueFormat).toDate();\n    },\n    toJS: function toJS(val, fieldSettings) {\n      var dateVal = moment(val, fieldSettings.valueFormat);\n      return dateVal.isValid() ? dateVal.toDate() : undefined;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      var dateVal = moment(val, wgtDef.valueFormat);\n      return dateVal.isValid() ? dateVal.toDate() : undefined;\n    }\n  },\n  \"boolean\": {\n    type: \"boolean\",\n    jsType: \"boolean\",\n    valueSrc: \"value\",\n    labelYes: \"Yes\",\n    labelNo: \"No\",\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay) {\n      return isForDisplay ? val ? \"Yes\" : \"No\" : JSON.stringify(!!val);\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      return SqlString.escape(val);\n    },\n    spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      return spelEscape(val);\n    },\n    defaultValue: false,\n    toJS: function toJS(val, fieldSettings) {\n      return val;\n    },\n    mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {\n      return val;\n    }\n  },\n  field: {\n    valueSrc: \"field\",\n    formatValue: function formatValue(val, fieldDef, wgtDef, isForDisplay, op, opDef, rightFieldDef) {\n      return isForDisplay ? rightFieldDef.label || val : val;\n    },\n    sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef, rightFieldDef) {\n      return val;\n    },\n    spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {\n      return val;\n    },\n    valueLabel: \"Field to compare\",\n    valuePlaceholder: \"Select field to compare\"\n  },\n  func: {\n    valueSrc: \"func\",\n    valueLabel: \"Function\",\n    valuePlaceholder: \"Select function\"\n  },\n  case_value: {\n    valueSrc: \"value\",\n    type: \"case_value\",\n    spelFormatValue: function spelFormatValue(val) {\n      return spelEscape(val === \"\" ? null : val);\n    },\n    spelImportValue: function spelImportValue(val) {\n      return [val.value, []];\n    }\n  }\n};\n\n//----------------------------  types\n\nvar types = {\n  text: {\n    defaultOperator: \"equal\",\n    mainWidget: \"text\",\n    widgets: {\n      text: {\n        operators: [\"equal\", \"not_equal\", \"like\", \"not_like\", \"starts_with\", \"ends_with\", \"proximity\", \"is_empty\", \"is_not_empty\", \"is_null\", \"is_not_null\"],\n        widgetProps: {},\n        opProps: {}\n      },\n      textarea: {\n        operators: [\"equal\", \"not_equal\", \"like\", \"not_like\", \"starts_with\", \"ends_with\", \"is_empty\", \"is_not_empty\", \"is_null\", \"is_not_null\"],\n        widgetProps: {},\n        opProps: {}\n      },\n      field: {\n        operators: [\n        //unary ops (like `is_empty`) will be excluded anyway, see getWidgetsForFieldOp()\n        \"equal\", \"not_equal\", \"proximity\" //can exclude if you want\n        ]\n      }\n    }\n  },\n\n  number: {\n    defaultOperator: \"equal\",\n    mainWidget: \"number\",\n    widgets: {\n      number: {\n        operators: [\"equal\", \"not_equal\", \"less\", \"less_or_equal\", \"greater\", \"greater_or_equal\", \"between\", \"not_between\",\n        // \"is_empty\",\n        // \"is_not_empty\",\n        \"is_null\", \"is_not_null\"]\n      },\n      slider: {\n        operators: [\"equal\", \"not_equal\", \"less\", \"less_or_equal\", \"greater\", \"greater_or_equal\",\n        // \"is_empty\",\n        // \"is_not_empty\",\n        \"is_null\", \"is_not_null\"]\n      }\n    }\n  },\n  date: {\n    defaultOperator: \"equal\",\n    widgets: {\n      date: {\n        operators: [\"equal\", \"not_equal\", \"less\", \"less_or_equal\", \"greater\", \"greater_or_equal\", \"between\", \"not_between\",\n        // \"is_empty\",\n        // \"is_not_empty\",\n        \"is_null\", \"is_not_null\"]\n      }\n    }\n  },\n  time: {\n    defaultOperator: \"equal\",\n    widgets: {\n      time: {\n        operators: [\"equal\", \"not_equal\", \"less\", \"less_or_equal\", \"greater\", \"greater_or_equal\", \"between\", \"not_between\",\n        // \"is_empty\",\n        // \"is_not_empty\",\n        \"is_null\", \"is_not_null\"]\n      }\n    }\n  },\n  datetime: {\n    defaultOperator: \"equal\",\n    widgets: {\n      datetime: {\n        operators: [\"equal\", \"not_equal\", \"less\", \"less_or_equal\", \"greater\", \"greater_or_equal\", \"between\", \"not_between\",\n        // \"is_empty\",\n        // \"is_not_empty\",\n        \"is_null\", \"is_not_null\"]\n      }\n    }\n  },\n  select: {\n    mainWidget: \"select\",\n    defaultOperator: \"select_equals\",\n    widgets: {\n      select: {\n        operators: [\"select_equals\", \"select_not_equals\",\n        // \"is_empty\",\n        // \"is_not_empty\",\n        \"is_null\", \"is_not_null\"]\n      },\n      multiselect: {\n        operators: [\"select_any_in\", \"select_not_any_in\",\n        // \"is_empty\",\n        // \"is_not_empty\",\n        \"is_null\", \"is_not_null\"]\n      }\n    }\n  },\n  multiselect: {\n    defaultOperator: \"multiselect_equals\",\n    widgets: {\n      multiselect: {\n        operators: [\"multiselect_contains\", \"multiselect_not_contains\", \"multiselect_equals\", \"multiselect_not_equals\",\n        // \"is_empty\",\n        // \"is_not_empty\",\n        \"is_null\", \"is_not_null\"]\n      }\n    }\n  },\n  \"boolean\": {\n    defaultOperator: \"equal\",\n    widgets: {\n      \"boolean\": {\n        operators: [\"equal\", \"not_equal\", \"is_null\", \"is_not_null\"],\n        widgetProps: {\n          //you can enable this if you don't use fields as value sources\n          // hideOperator: true,\n          // operatorInlineLabel: \"is\",\n        }\n      },\n      field: {\n        operators: [\"equal\", \"not_equal\"]\n      }\n    }\n  },\n  \"!group\": {\n    defaultOperator: \"some\",\n    mainWidget: \"number\",\n    widgets: {\n      number: {\n        widgetProps: {\n          min: 0\n        },\n        operators: [\n        // w/o operand\n        \"some\", \"all\", \"none\",\n        // w/ operand - count\n        \"equal\", \"not_equal\", \"less\", \"less_or_equal\", \"greater\", \"greater_or_equal\", \"between\", \"not_between\"],\n        opProps: {\n          equal: {\n            label: \"Count ==\"\n          },\n          not_equal: {\n            label: \"Count !=\"\n          },\n          less: {\n            label: \"Count <\"\n          },\n          less_or_equal: {\n            label: \"Count <=\"\n          },\n          greater: {\n            label: \"Count >\"\n          },\n          greater_or_equal: {\n            label: \"Count >=\"\n          },\n          between: {\n            label: \"Count between\"\n          },\n          not_between: {\n            label: \"Count not between\"\n          }\n        }\n      }\n    }\n  },\n  \"case_value\": {\n    mainWidget: \"case_value\",\n    widgets: {\n      case_value: {}\n    }\n  }\n};\n\n//----------------------------  settings\n\nvar settings = _objectSpread(_objectSpread({}, defaultSettings), {}, {\n  convertableWidgets: {\n    \"number\": [\"slider\", \"rangeslider\"],\n    \"slider\": [\"number\", \"rangeslider\"],\n    \"rangeslider\": [\"number\", \"slider\"],\n    \"text\": [\"textarea\"],\n    \"textarea\": [\"text\"]\n  },\n  formatSpelField: function formatSpelField(field, parentField, parts, partsExt, fieldDefinition, config) {\n    var fieldName = partsExt.map(function (_ref12, ind) {\n      var key = _ref12.key,\n        parent = _ref12.parent;\n      if (ind == 0) {\n        if (parent == \"[map]\") return \"#this[\".concat(spelEscape(key), \"]\");else if (parent == \"[class]\") return key;else return key;\n      } else {\n        if (parent == \"map\" || parent == \"[map]\") return \"[\".concat(spelEscape(key), \"]\");else if (parent == \"class\" || parent == \"[class]\") return \".\".concat(key);else return \".\".concat(key);\n      }\n    }).join(\"\");\n    if (fieldDefinition.isSpelVariable) {\n      fieldName = \"#\" + fieldName;\n    }\n    return fieldName;\n  },\n  sqlFormatReverse: function sqlFormatReverse(q) {\n    if (q == undefined) return undefined;\n    return \"NOT(\" + q + \")\";\n  },\n  spelFormatReverse: function spelFormatReverse(q) {\n    if (q == undefined) return undefined;\n    return \"!(\" + q + \")\";\n  },\n  formatReverse: function formatReverse(q, operator, reversedOp, operatorDefinition, revOperatorDefinition, isForDisplay) {\n    if (q == undefined) return undefined;\n    if (isForDisplay) return \"NOT (\" + q + \")\";else return \"!(\" + q + \")\";\n  },\n  formatAggr: function formatAggr(whereStr, aggrField, operator, value, valueSrc, valueType, opDef, operatorOptions, isForDisplay, aggrFieldDef) {\n    var labelForFormat = opDef.labelForFormat,\n      cardinality = opDef.cardinality;\n    if (cardinality == 0) {\n      var cond = whereStr ? \" HAVE \".concat(whereStr) : \"\";\n      return \"\".concat(labelForFormat, \" OF \").concat(aggrField).concat(cond);\n    } else if (cardinality == undefined || cardinality == 1) {\n      var _cond = whereStr ? \" WHERE \".concat(whereStr) : \"\";\n      return \"COUNT OF \".concat(aggrField).concat(_cond, \" \").concat(labelForFormat, \" \").concat(value);\n    } else if (cardinality == 2) {\n      var _cond2 = whereStr ? \" WHERE \".concat(whereStr) : \"\";\n      var valFrom = value.first();\n      var valTo = value.get(1);\n      return \"COUNT OF \".concat(aggrField).concat(_cond2, \" \").concat(labelForFormat, \" \").concat(valFrom, \" AND \").concat(valTo);\n    }\n  },\n  jsonLogic: {\n    groupVarKey: \"var\",\n    altVarKey: \"var\",\n    lockedOp: \"locked\"\n  },\n  canCompareFieldWithField: function canCompareFieldWithField(leftField, leftFieldConfig, rightField, rightFieldConfig) {\n    //for type == 'select'/'multiselect' you can check listValues\n    return true;\n  },\n  // enable compare fields\n  valueSourcesInfo: {\n    value: {\n      label: \"Value\"\n    },\n    field: {\n      label: \"Field\",\n      widget: \"field\"\n    },\n    func: {\n      label: \"Function\",\n      widget: \"func\"\n    }\n  }\n});\n\n//----------------------------\n\nexport default {\n  conjunctions: conjunctions,\n  operators: operators,\n  widgets: widgets,\n  types: types,\n  settings: settings\n};"]},"metadata":{},"sourceType":"module"}