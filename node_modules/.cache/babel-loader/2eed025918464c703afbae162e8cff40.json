{"ast":null,"code":"import _objectSpread from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from'react';import{connect}from'react-redux';import{injectIntl}from'react-intl';import FormInput from'../form-input/form-input.component';import CustomButtom from'../custom-button/custom-button.component';import{changeLanguage,getLoginDetails,getUserSiteAndRole,updateStore,createPassword,changepassword,getUsersiteRole,checkPassword}from'../../actions';import CreatePassword from'../../pages/Login/CreatePassWord';import{clickOnLoginButton}from'../../actions';import{toast}from'react-toastify';import FormSelectSearch from'../form-select-search/form-select-search.component';import{validateLoginId}from'../CommonScript';import SlideOutModal from'../slide-out-modal/SlideOutModal';import{DEFAULT_RETURN}from'../../actions/LoginTypes';import ChangePassword from'../../pages/Login/ChangePassWord';import{changePasswordValidation,fnPassMessage,fnValidatePassword}from'../../pages/Login/LoginCommonFunction';import{LOGINTYPE,transactionStatus}from'../Enumeration';import{Form}from'react-bootstrap';var mapStateToProps=function mapStateToProps(state){return{Login:state.Login};};var SignIn=/*#__PURE__*/function(_React$Component){_inherits(SignIn,_React$Component);var _super=_createSuper(SignIn);function SignIn(props){var _this;_classCallCheck(this,SignIn);_this=_super.call(this,props);_this.closeModal=function(){var updateInfo={typeName:DEFAULT_RETURN,data:{openCPModal:false}};_this.props.updateStore(updateInfo);};_this.onCreatePassWord=function(){var selectedRecord=_this.state.selectedRecord;var createPwdRecord=_this.state.createPwdRecord;var snewpassword=createPwdRecord.snewpassword.trim();var sconfirmpassword=createPwdRecord.sconfirmpassword.trim();if(selectedRecord.sloginid===snewpassword){toast.warn(_this.props.intl.formatMessage({id:\"IDS_PASSWORDSHOULDNOTSAMEASLOGINID\"}));}else if(sconfirmpassword!==snewpassword){toast.warn(_this.props.intl.formatMessage({id:\"IDS_PASSWORDNOTMATCHED\"}));}else{var returnString=fnValidatePassword(_this.props.Login.passwordPolicy,snewpassword);if(returnString===0){var inputParam={spassword:snewpassword,nusersitecode:selectedRecord.nusersitecode.value,nusermultirolecode:selectedRecord.nusermultirolecode.value};_this.props.createPassword(inputParam);}else{toast.info(returnString);}}};_this.onChangePassword=function(){var selectedRecord=_this.state.selectedRecord;var createPwdRecord=_this.state.createPwdRecord;var returnMsg=changePasswordValidation(createPwdRecord,_this.props.Login.passwordPolicy,_this.state.selectedRecord.sloginid);if(returnMsg===0){var inputParam={spassword:createPwdRecord.snewpassword.trim(),sOldPassword:createPwdRecord.soldpassword.trim(),nusersitecode:selectedRecord.nusersitecode.value,isPasswordExpiry:true,userInfo:_objectSpread(_objectSpread({},_this.props.Login.userInfo),{},{slanguagefilename:selectedRecord.nlanguagecode.item.sfilename,sloginid:selectedRecord.sloginid,suserrolename:selectedRecord.nusermultirolecode.label}),slanguagetypecode:selectedRecord.nlanguagecode.item.slanguagetypecode};_this.props.changepassword(inputParam);}else{toast.info(returnMsg);}};_this.onSelectChange=function(ComboVal,fieldName){var selectedRecord=_this.state.selectedRecord||{};selectedRecord[fieldName]=ComboVal;if(fieldName===\"nlogintypecode\"&&ComboVal.value===LOGINTYPE.INTERNAL&&selectedRecord.sloginid&&selectedRecord.sloginid!==\"\"&&selectedRecord.nusermultirolecode&&selectedRecord.nusermultirolecode!==\"\"&&selectedRecord.nusersitecode&&selectedRecord.nusersitecode!==\"\"){var inputParam={sloginid:_this.state.selectedRecord.sloginid,Language:selectedRecord.nlanguagecode.item,nusermultisitecode:selectedRecord.nusersitecode.value,nusermultirolecode:selectedRecord.nusermultirolecode.value,nuserrolecode:selectedRecord.nusermultirolecode.item.nuserrolecode,nlogintypecode:ComboVal.value};_this.props.checkPassword(inputParam,selectedRecord);}else{_this.setState({selectedRecord:selectedRecord});}};_this.onChangeLanguage=function(ComboVal,fieldName){var selectedRecord=_this.state.selectedRecord||{};selectedRecord[fieldName]=ComboVal;_this.props.changeLanguage(ComboVal.item.slanguagetypecode,selectedRecord,_this.props.Login.loginTypes);};_this.onLoginEvent=function(event){if(event.keyCode===13){var inputValue=event.target.value;_this.setState({show:_this.props.Login.open});if(inputValue!==\"\"){_this.onLoginSubmit(inputValue);}}};_this.AutoLogin=function(event){if(event.keyCode===118){var nlogintypecode=1;var inputParam={nusermultisitecode:parseInt(-1),nusermultirolecode:parseInt(-1),slanguagetypecode:\"en-US\",spassword:\"123\",nusercode:-1,nlogintypecode:1,nuserrolecode:-1,url:nlogintypecode===1?\"/login/internallogin\":\"/login/adslogin\",navigation:\"home\"};_this.setState({nusermultisitecode:parseInt(-1),nusermultirolecode:parseInt(-1),slanguagetypecode:1,spassword:\"123\",nusercode:-1,nlogintypecode:1,nuserrolecode:-1});_this.props.clickOnLoginButton(inputParam,_this.props.Login.languageList);}};_this.state={PasswordPolicy:{},selectedRecord:{}};_this.loginRef=React.createRef();return _this;}_createClass(SignIn,[{key:\"render\",value:function render(){var _this2=this;var _this$props$Login=this.props.Login,loginTypeList=_this$props$Login.loginTypeList,languageList=_this$props$Login.languageList,loginUserSite=_this$props$Login.loginUserSite,loginUserRole=_this$props$Login.loginUserRole;return/*#__PURE__*/React.createElement(Form,{ref:this.loginRef},/*#__PURE__*/React.createElement(FormInput,{name:\"sloginid\",label:this.props.intl.formatMessage({id:\"IDS_LOGINID\"}),type:\"text\"// placeholder={this.props.intl.formatMessage({ id: \"IDS_LOGINID\" })}\n,required:true,isMandatory:\"*\",onChange:function onChange(event){return _this2.onLoginInputChange(event);},onBlur:function onBlur(event){return _this2.onFocusOutEvent(event);},onKeyUp:this.AutoLogin,value:this.state.selectedRecord.sloginid}),/*#__PURE__*/React.createElement(FormInput,{name:\"spassword\",label:this.props.intl.formatMessage({id:\"IDS_PASSWORD\"}),type:\"password\",required:true,isMandatory:\"*\"// placeholder={this.props.intl.formatMessage({ id: \"IDS_PASSWORD\" })}\n,onChange:function onChange(event){return _this2.selectInputOnChange(event);},onKeyUp:this.onLoginEvent,value:this.state.selectedRecord.spassword}),/*#__PURE__*/React.createElement(FormSelectSearch,{name:\"nusermultirolecode\",formLabel:this.props.intl.formatMessage({id:\"IDS_USERROLE\"}),isSearchable:false,isDisabled:false,placeholder:this.props.intl.formatMessage({id:\"IDS_SELECTRECORD\"}),isMandatory:true,options:loginUserRole||[],optionId:\"nusermultirolecode\",optionValue:\"suserrolename\",value:this.state.selectedRecord.nusermultirolecode?this.state.selectedRecord.nusermultirolecode:\"\",onChange:function onChange(value){return _this2.onSelectChange(value,\"nusermultirolecode\");}}),/*#__PURE__*/React.createElement(FormSelectSearch,{name:\"nlogintypecode\",formLabel:this.props.intl.formatMessage({id:\"IDS_LOGINTYPE\"}),isSearchable:false,isDisabled:false,placeholder:this.props.intl.formatMessage({id:\"IDS_SELECTRECORD\"}),isMandatory:true,options:loginTypeList||[],optionId:\"nlogintypecode\",optionValue:\"sdisplayname\",value:this.state.selectedRecord.nlogintypecode?this.state.selectedRecord.nlogintypecode:\"\",onChange:function onChange(value){return _this2.onSelectChange(value,\"nlogintypecode\");}}),/*#__PURE__*/React.createElement(FormSelectSearch,{name:\"nlanguagecode\",formLabel:this.props.intl.formatMessage({id:\"IDS_LANGUAGE\"}),isSearchable:false,isDisabled:false,placeholder:this.props.intl.formatMessage({id:\"IDS_SELECTRECORD\"}),isMandatory:true,options:languageList||[],optionId:\"nlanguagecode\",optionValue:\"slanguagename\",value:this.state.selectedRecord.nlanguagecode?this.state.selectedRecord.nlanguagecode:\"\",onChange:function onChange(value){return _this2.onChangeLanguage(value,\"nlanguagecode\");}}),/*#__PURE__*/React.createElement(CustomButtom,{name:\"loginbutton\",label:this.props.intl.formatMessage({id:\"IDS_LOGIN\"}),color:\"primary\",className:\"btn-user btn-primary-blue\",handleClick:function handleClick(){return _this2.onLoginSubmit();}}),this.props.Login.openCPModal&&this.props.Login.userInfo.nlogintypecode===LOGINTYPE.INTERNAL&&/*#__PURE__*/React.createElement(SlideOutModal,{show:this.props.Login.openCPModal,closeModal:this.closeModal,loginoperation:true,inputParam:{},screenName:this.props.Login.screenName,onSaveClick:this.props.Login.PassFlag===6?this.onCreatePassWord:this.onChangePassword,selectedRecord:this.state.createPwdRecord||{},mandatoryFields:this.mandatoryFieldFunction(this.props.Login.PassFlag),addComponent:this.props.Login.PassFlag===6?/*#__PURE__*/React.createElement(CreatePassword,{sloginid:this.state.selectedRecord.sloginid,createPwdRecord:this.state.createPwdRecord,msg:fnPassMessage(this.props.Login.passwordPolicy),onInputChange:function onInputChange(event){return _this2.onInputChange(event);}}):this.props.Login.PassFlag===transactionStatus.EXPIRED?/*#__PURE__*/React.createElement(ChangePassword,{sloginid:this.state.selectedRecord.sloginid,createPwdRecord:this.state.createPwdRecord,msg:fnPassMessage(this.props.Login.passwordPolicy),onInputChange:function onInputChange(event){return _this2.onInputChange(event);}}):\"\"}));}},{key:\"onUsersiteChange\",value:function onUsersiteChange(ComboVal,fieldName){var selectedRecord=this.state.selectedRecord||{};selectedRecord[fieldName]=ComboVal;var inputParam={selectedRecord:selectedRecord};this.props.getUsersiteRole(inputParam);}},{key:\"componentDidMount\",value:function componentDidMount(){this.loginRef.current[0].focus();this.props.getLoginDetails();}},{key:\"mandatoryFieldFunction\",value:function mandatoryFieldFunction(passFlag){var mandatoryField=[];if(passFlag===6){mandatoryField=[{\"idsName\":\"IDS_NEWPASSWORD\",\"dataField\":\"snewpassword\",\"mandatory\":false},{\"idsName\":\"IDS_CONFIRMPASSWORD\",\"dataField\":\"sconfirmpassword\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"}];}else{mandatoryField=[{\"idsName\":\"IDS_OLDPASSWORD\",\"dataField\":\"soldpassword\",\"mandatory\":false},{\"idsName\":\"IDS_NEWPASSWORD\",\"dataField\":\"snewpassword\",\"mandatory\":false},{\"idsName\":\"IDS_CONFIRMPASSWORD\",\"dataField\":\"sconfirmpassword\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"}];}return mandatoryField;}},{key:\"onLoginInputChange\",value:function onLoginInputChange(event){var selectedRecord=this.state.selectedRecord||{};var loginid=validateLoginId(event.target.value);if(loginid){selectedRecord[event.target.name]=event.target.value;}else{selectedRecord[event.target.name]=this.state.selectedRecord[event.target.name];}this.setState({selectedRecord:selectedRecord});}},{key:\"selectInputOnChange\",value:function selectInputOnChange(event){var selectedRecord=this.state.selectedRecord||{};selectedRecord[event.target.name]=event.target.value;this.setState({selectedRecord:selectedRecord});}},{key:\"onInputChange\",value:function onInputChange(event){var createPwdRecord=this.state.createPwdRecord||{};createPwdRecord[event.target.name]=event.target.value;this.setState({createPwdRecord:createPwdRecord});}},{key:\"onFocusOutEvent\",value:function onFocusOutEvent(event){var sloginid=event.target.value;if(sloginid!==\"\"){var selectedRecord=this.state.selectedRecord||{};var inputParam={sloginid:sloginid,Language:selectedRecord.nlanguagecode.item,logintype:this.props.Login.loginTypeList};this.props.getUserSiteAndRole(inputParam,selectedRecord);}}},{key:\"onLoginSubmit\",value:function onLoginSubmit(){var _this3=this;var selectedRecord=this.state.selectedRecord;var mandatoryField=[{\"idsName\":\"IDS_LOGINID\",\"dataField\":\"sloginid\",\"mandatory\":false},//Don't Remove the Commented line commented for NIBSC\n// { \"idsName\": \"IDS_SITE\", \"dataField\": \"nusersitecode\", \"mandatory\": true },\n{\"idsName\":\"IDS_ROLE\",\"dataField\":\"nusermultirolecode\",\"mandatory\":true},{\"idsName\":\"IDS_LOGINTYPE\",\"dataField\":\"nlogintypecode\",\"mandatory\":true},//Don't Remove the Commented line commented for NIBSC\n//{ \"idsName\": \"IDS_LANGUAGE\", \"dataField\": \"nlanguagecode\", \"mandatory\": true },\n{\"idsName\":\"IDS_PASSWORD\",\"dataField\":\"spassword\",\"mandatory\":true}];var failedControls=[];mandatoryField.map(function(item){if(selectedRecord[item.dataField]===undefined){failedControls.push(_this3.props.intl.formatMessage({id:item.idsName}));}else if(typeof selectedRecord[item.dataField]===\"object\"){//to validate FormSelectSearch component\nif(selectedRecord[item.dataField].length===0){failedControls.push(_this3.props.intl.formatMessage({id:item.idsName}));}}else if(typeof selectedRecord[item.dataField]===\"string\"){//to handle string field -- added trim function\nif(selectedRecord[item.dataField].trim().length===0){failedControls.push(_this3.props.intl.formatMessage({id:item.idsName}));}}return null;});if(failedControls.length===0){var nlogintypecode=selectedRecord.nlogintypecode.value;if(selectedRecord.nusercode===-1){nlogintypecode=LOGINTYPE.INTERNAL;}var inputParam={nusermultisitecode:selectedRecord.nusersitecode.value,nusermultirolecode:selectedRecord.nusermultirolecode.value,slanguagetypecode:selectedRecord.nlanguagecode.item.slanguagetypecode,slanguagefilename:selectedRecord.nlanguagecode.item.sfilename,spassword:selectedRecord.spassword,nusercode:selectedRecord.nusercode,nuserrolecode:selectedRecord.nusermultirolecode.item.nuserrolecode,sloginid:selectedRecord.sloginid,//nlogintypecode: nlogintypecode,\nnlogintypecode:1,//url: nlogintypecode === 1 ? \"/login/internallogin\" : \"/login/adsLogin\",\nurl:\"/login/internallogin\",navigation:\"home\"};this.props.clickOnLoginButton(inputParam,this.props.Login.languageList);}else{toast.info(\"\".concat(this.props.intl.formatMessage({id:\"IDS_ENTER\"}),\" \").concat(failedControls[0]));}}},{key:\"componentDidUpdate\",value:function componentDidUpdate(previousProps){if(this.props.Login.navigation===\"home\"){this.props.history.push('/');}var selectedRecord=this.state.selectedRecord||{};var createPwdRecord=this.state.createPwdRecord||{};var isStateChanged=false;if(this.props.Login.selectedRecord!==previousProps.Login.selectedRecord){selectedRecord=this.props.Login.selectedRecord;isStateChanged=true;}if(this.props.Login.createPwdRecord!==previousProps.Login.createPwdRecord){createPwdRecord=this.props.Login.createPwdRecord;isStateChanged=true;}if(isStateChanged){this.setState({selectedRecord:selectedRecord,createPwdRecord:createPwdRecord});}}}]);return SignIn;}(React.Component);export default connect(mapStateToProps,{clickOnLoginButton:clickOnLoginButton,changeLanguage:changeLanguage,getLoginDetails:getLoginDetails,getUserSiteAndRole:getUserSiteAndRole,updateStore:updateStore,createPassword:createPassword,changepassword:changepassword,getUsersiteRole:getUsersiteRole,checkPassword:checkPassword})(injectIntl(SignIn));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/sign-in/sign-in.component.jsx"],"names":["React","connect","injectIntl","FormInput","CustomButtom","changeLanguage","getLoginDetails","getUserSiteAndRole","updateStore","createPassword","changepassword","getUsersiteRole","checkPassword","CreatePassword","clickOnLoginButton","toast","FormSelectSearch","validateLoginId","SlideOutModal","DEFAULT_RETURN","ChangePassword","changePasswordValidation","fnPassMessage","fnValidatePassword","LOGINTYPE","transactionStatus","Form","mapStateToProps","state","Login","SignIn","props","closeModal","updateInfo","typeName","data","openCPModal","onCreatePassWord","selectedRecord","createPwdRecord","snewpassword","trim","sconfirmpassword","sloginid","warn","intl","formatMessage","id","returnString","passwordPolicy","inputParam","spassword","nusersitecode","value","nusermultirolecode","info","onChangePassword","returnMsg","sOldPassword","soldpassword","isPasswordExpiry","userInfo","slanguagefilename","nlanguagecode","item","sfilename","suserrolename","label","slanguagetypecode","onSelectChange","ComboVal","fieldName","INTERNAL","Language","nusermultisitecode","nuserrolecode","nlogintypecode","setState","onChangeLanguage","loginTypes","onLoginEvent","event","keyCode","inputValue","target","show","open","onLoginSubmit","AutoLogin","parseInt","nusercode","url","navigation","languageList","PasswordPolicy","loginRef","createRef","loginTypeList","loginUserSite","loginUserRole","onLoginInputChange","onFocusOutEvent","selectInputOnChange","screenName","PassFlag","mandatoryFieldFunction","onInputChange","EXPIRED","current","focus","passFlag","mandatoryField","loginid","name","logintype","failedControls","map","dataField","undefined","push","idsName","length","previousProps","history","isStateChanged","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormInput from '../form-input/form-input.component';\r\nimport CustomButtom from '../custom-button/custom-button.component';\r\nimport { changeLanguage, getLoginDetails, getUserSiteAndRole, updateStore, createPassword, changepassword, getUsersiteRole, checkPassword } from '../../actions';\r\nimport CreatePassword from '../../pages/Login/CreatePassWord';\r\nimport { clickOnLoginButton } from '../../actions'\r\nimport { toast } from 'react-toastify';\r\nimport FormSelectSearch from '../form-select-search/form-select-search.component';\r\nimport { validateLoginId } from '../CommonScript';\r\nimport SlideOutModal from '../slide-out-modal/SlideOutModal';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport ChangePassword from '../../pages/Login/ChangePassWord';\r\nimport { changePasswordValidation, fnPassMessage, fnValidatePassword } from '../../pages/Login/LoginCommonFunction';\r\nimport { LOGINTYPE, transactionStatus } from '../Enumeration'\r\nimport { Form } from 'react-bootstrap';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nclass SignIn extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            PasswordPolicy: {},\r\n            selectedRecord: {}\r\n        }\r\n        this.loginRef = React.createRef();\r\n    }\r\n\r\n    render() {\r\n        const { loginTypeList, languageList, loginUserSite, \r\n             loginUserRole } = this.props.Login;\r\n        return (\r\n            <Form ref={this.loginRef}>\r\n                <FormInput\r\n                    name=\"sloginid\"\r\n                    label={this.props.intl.formatMessage({ id: \"IDS_LOGINID\" })}\r\n                    type=\"text\"\r\n                    // placeholder={this.props.intl.formatMessage({ id: \"IDS_LOGINID\" })}\r\n                    required={true}\r\n                    isMandatory={\"*\"}\r\n                    onChange={(event) => this.onLoginInputChange(event)}\r\n                    onBlur={(event) => this.onFocusOutEvent(event)}\r\n                     onKeyUp={this.AutoLogin} \r\n                    value={this.state.selectedRecord.sloginid}\r\n                />\r\n                <FormInput\r\n                    name=\"spassword\"\r\n                    label={this.props.intl.formatMessage({ id: \"IDS_PASSWORD\" })}\r\n                    type=\"password\"\r\n                    required={true}\r\n                    isMandatory={\"*\"}\r\n                    // placeholder={this.props.intl.formatMessage({ id: \"IDS_PASSWORD\" })}\r\n                    onChange={(event) => this.selectInputOnChange(event)}\r\n                    onKeyUp={this.onLoginEvent}\r\n                    value={this.state.selectedRecord.spassword}\r\n                />\r\n                {/* Don't Remove the Commented line commented for NIBSC */}\r\n                {/* <FormSelectSearch\r\n                    name={\"nusersitecode\"}\r\n                    formLabel={this.props.intl.formatMessage({ id: \"IDS_SITE\" })}\r\n                    isSearchable={false}\r\n                    isDisabled={false}\r\n                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isMandatory={true}\r\n                    options={loginUserSite || []}\r\n                    optionId='nusersitecode'\r\n                    optionValue='ssitename'\r\n                    value={this.state.selectedRecord.nusersitecode ? this.state.selectedRecord.nusersitecode : \"\"}\r\n                    onChange={value => this.onUsersiteChange(value, \"nusersitecode\")}\r\n                >\r\n                </FormSelectSearch> */}\r\n                <FormSelectSearch\r\n                    name={\"nusermultirolecode\"}\r\n                    formLabel={this.props.intl.formatMessage({ id: \"IDS_USERROLE\" })}\r\n                    isSearchable={false}\r\n                    isDisabled={false}\r\n                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isMandatory={true}\r\n                    options={loginUserRole || []}\r\n                    optionId='nusermultirolecode'\r\n                    optionValue='suserrolename'\r\n                    value={this.state.selectedRecord.nusermultirolecode ? this.state.selectedRecord.nusermultirolecode : \"\"}\r\n                    onChange={value => this.onSelectChange(value, \"nusermultirolecode\")}\r\n                >\r\n                </FormSelectSearch>\r\n                <FormSelectSearch\r\n                    name={\"nlogintypecode\"}\r\n                    formLabel={this.props.intl.formatMessage({ id: \"IDS_LOGINTYPE\" })}\r\n                    isSearchable={false}\r\n                    isDisabled={false}\r\n                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isMandatory={true}\r\n                    options={loginTypeList || []}\r\n                    optionId='nlogintypecode'\r\n                    optionValue='sdisplayname'\r\n                    value={this.state.selectedRecord.nlogintypecode ? this.state.selectedRecord.nlogintypecode : \"\"}\r\n                    onChange={value => this.onSelectChange(value, \"nlogintypecode\")}\r\n                >\r\n                </FormSelectSearch>\r\n                {/* Don't Remove the Commented line commented for NIBSC */}\r\n                <FormSelectSearch\r\n                    name={\"nlanguagecode\"}\r\n                    formLabel={this.props.intl.formatMessage({ id: \"IDS_LANGUAGE\" })}\r\n                    isSearchable={false}\r\n                    isDisabled={false}\r\n                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isMandatory={true}\r\n                    options={languageList || []}\r\n                    optionId='nlanguagecode'\r\n                    optionValue='slanguagename'\r\n                    value={this.state.selectedRecord.nlanguagecode ? this.state.selectedRecord.nlanguagecode : \"\"}\r\n                    onChange={value => this.onChangeLanguage(value, \"nlanguagecode\")}\r\n                >\r\n                </FormSelectSearch>\r\n                <CustomButtom name=\"loginbutton\" label={this.props.intl.formatMessage({id:\"IDS_LOGIN\"})} color=\"primary\" className=\"btn-user btn-primary-blue\"\r\n                    handleClick={() => this.onLoginSubmit()}></CustomButtom>\r\n                { this.props.Login.openCPModal &&\r\n                    this.props.Login.userInfo.nlogintypecode === LOGINTYPE.INTERNAL &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openCPModal}\r\n                        closeModal={this.closeModal}\r\n                        loginoperation={true}\r\n                        inputParam={{}}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.props.Login.PassFlag === 6 ? this.onCreatePassWord : this.onChangePassword}\r\n                        selectedRecord={this.state.createPwdRecord || {}}\r\n                        mandatoryFields={this.mandatoryFieldFunction(this.props.Login.PassFlag)}\r\n                        addComponent={this.props.Login.PassFlag === 6 ?\r\n                            <CreatePassword\r\n                                sloginid={this.state.selectedRecord.sloginid}\r\n                                createPwdRecord={this.state.createPwdRecord}\r\n                                msg={fnPassMessage(this.props.Login.passwordPolicy)}\r\n                                onInputChange={(event) => this.onInputChange(event)}\r\n                            /> : this.props.Login.PassFlag === transactionStatus.EXPIRED ?\r\n                                <ChangePassword\r\n                                    sloginid={this.state.selectedRecord.sloginid}\r\n                                    createPwdRecord={this.state.createPwdRecord}\r\n                                    msg={fnPassMessage(this.props.Login.passwordPolicy)}\r\n                                    onInputChange={(event) => this.onInputChange(event)}\r\n                                /> : \"\"\r\n                        }\r\n                    />}\r\n            </Form>\r\n        );\r\n    }\r\n\r\n\r\n    onUsersiteChange(ComboVal, fieldName) {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = ComboVal;\r\n        const inputParam = {\r\n            selectedRecord\r\n        };\r\n        this.props.getUsersiteRole(inputParam);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loginRef.current[0].focus();\r\n        this.props.getLoginDetails();\r\n    }\r\n\r\n    mandatoryFieldFunction(passFlag) {\r\n        let mandatoryField = [];\r\n        if (passFlag === 6) {\r\n            mandatoryField = [\r\n                { \"idsName\": \"IDS_NEWPASSWORD\", \"dataField\": \"snewpassword\", \"mandatory\": false },\r\n                { \"idsName\": \"IDS_CONFIRMPASSWORD\", \"dataField\": \"sconfirmpassword\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}\r\n            ]\r\n        } else {\r\n            mandatoryField = [\r\n                { \"idsName\": \"IDS_OLDPASSWORD\", \"dataField\": \"soldpassword\", \"mandatory\": false},\r\n                { \"idsName\": \"IDS_NEWPASSWORD\", \"dataField\": \"snewpassword\", \"mandatory\": false },\r\n                { \"idsName\": \"IDS_CONFIRMPASSWORD\", \"dataField\": \"sconfirmpassword\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}\r\n            ]\r\n        }\r\n        return mandatoryField;\r\n    }\r\n\r\n    closeModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openCPModal: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onCreatePassWord = () => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const createPwdRecord = this.state.createPwdRecord;\r\n        const snewpassword = createPwdRecord.snewpassword.trim();\r\n        const sconfirmpassword = createPwdRecord.sconfirmpassword.trim();\r\n        if (selectedRecord.sloginid === snewpassword) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PASSWORDSHOULDNOTSAMEASLOGINID\" }));\r\n        } else if (sconfirmpassword !== snewpassword) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PASSWORDNOTMATCHED\" }));\r\n        } else {\r\n            const returnString = fnValidatePassword(this.props.Login.passwordPolicy, snewpassword)\r\n            if (returnString === 0) {\r\n                const inputParam = {\r\n                    spassword: snewpassword,\r\n                    nusersitecode: selectedRecord.nusersitecode.value,\r\n                    nusermultirolecode: selectedRecord.nusermultirolecode.value\r\n                };\r\n                this.props.createPassword(inputParam);\r\n            } else {\r\n                toast.info(returnString);\r\n            }\r\n        }\r\n    }\r\n\r\n    onChangePassword = () => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const createPwdRecord = this.state.createPwdRecord;\r\n        const returnMsg = changePasswordValidation(createPwdRecord, this.props.Login.passwordPolicy, this.state.selectedRecord.sloginid);\r\n        if (returnMsg === 0) {\r\n            const inputParam = {\r\n                spassword: createPwdRecord.snewpassword.trim(),\r\n                sOldPassword: createPwdRecord.soldpassword.trim(),\r\n                nusersitecode: selectedRecord.nusersitecode.value,\r\n                isPasswordExpiry: true,\r\n                userInfo: { ...this.props.Login.userInfo, slanguagefilename: selectedRecord.nlanguagecode.item.sfilename,\r\n                            sloginid:selectedRecord.sloginid, suserrolename:selectedRecord.nusermultirolecode.label },\r\n                slanguagetypecode: selectedRecord.nlanguagecode.item.slanguagetypecode\r\n            };\r\n\r\n            this.props.changepassword(inputParam);\r\n        } else {\r\n            toast.info(returnMsg);\r\n        }\r\n    }\r\n\r\n    onLoginInputChange(event) {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        const loginid = validateLoginId(event.target.value);\r\n        if (loginid) {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        } else {\r\n            selectedRecord[event.target.name] = this.state.selectedRecord[event.target.name];\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    selectInputOnChange(event) {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[event.target.name] = event.target.value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputChange(event) {\r\n        const createPwdRecord = this.state.createPwdRecord || {};\r\n        createPwdRecord[event.target.name] = event.target.value;\r\n        this.setState({ createPwdRecord });\r\n    }\r\n\r\n    onSelectChange = (ComboVal, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = ComboVal;\r\n        if (fieldName === \"nlogintypecode\" && ComboVal.value === LOGINTYPE.INTERNAL\r\n            && selectedRecord.sloginid && selectedRecord.sloginid !== \"\" \r\n            && selectedRecord.nusermultirolecode && selectedRecord.nusermultirolecode !== \"\"\r\n            && selectedRecord.nusersitecode && selectedRecord.nusersitecode !== \"\") {\r\n            const inputParam = {\r\n                sloginid: this.state.selectedRecord.sloginid,\r\n                Language: selectedRecord.nlanguagecode.item,\r\n                nusermultisitecode: selectedRecord.nusersitecode.value,\r\n                nusermultirolecode: selectedRecord.nusermultirolecode.value,\r\n                nuserrolecode: selectedRecord.nusermultirolecode.item.nuserrolecode,\r\n                nlogintypecode: ComboVal.value\r\n            };\r\n            this.props.checkPassword(inputParam, selectedRecord);\r\n        } else {\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    onChangeLanguage = (ComboVal, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = ComboVal;\r\n        this.props.changeLanguage(ComboVal.item.slanguagetypecode, selectedRecord,this.props.Login.loginTypes);\r\n    }\r\n\r\n    onFocusOutEvent(event) {\r\n        const sloginid = event.target.value;\r\n        if (sloginid !== \"\") {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            const inputParam = {\r\n                sloginid, Language: selectedRecord.nlanguagecode.item,\r\n                logintype: this.props.Login.loginTypeList\r\n            };\r\n            this.props.getUserSiteAndRole(inputParam, selectedRecord);\r\n        }\r\n    }\r\n\r\n    onLoginEvent = (event) => {\r\n        if (event.keyCode === 13) {\r\n            const inputValue = event.target.value;\r\n            this.setState({\r\n                show: this.props.Login.open\r\n            })\r\n            if (inputValue !== \"\") {\r\n                this.onLoginSubmit(inputValue);\r\n            }\r\n        }\r\n    }\r\n    AutoLogin = (event) => {\r\n        if (event.keyCode === 118) {\r\n            let nlogintypecode = 1;\r\n            const inputParam = {\r\n                nusermultisitecode: parseInt(-1),\r\n                nusermultirolecode: parseInt(-1),\r\n                slanguagetypecode: \"en-US\",\r\n                spassword: \"123\",\r\n                nusercode: -1,\r\n                nlogintypecode: 1,\r\n                nuserrolecode: -1,\r\n                url: nlogintypecode === 1 ? \"/login/internallogin\" : \"/login/adslogin\",\r\n                navigation: \"home\"\r\n            }\r\n            this.setState({\r\n                nusermultisitecode: parseInt(-1),\r\n                nusermultirolecode: parseInt(-1),\r\n                slanguagetypecode: 1,\r\n                spassword: \"123\",\r\n                nusercode: -1,\r\n                nlogintypecode: 1,\r\n                nuserrolecode: -1\r\n            })\r\n            this.props.clickOnLoginButton(inputParam,this.props.Login.languageList);\r\n        }\r\n    }\r\n    onLoginSubmit() {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const mandatoryField = [\r\n            { \"idsName\": \"IDS_LOGINID\", \"dataField\": \"sloginid\", \"mandatory\": false },\r\n            //Don't Remove the Commented line commented for NIBSC\r\n            // { \"idsName\": \"IDS_SITE\", \"dataField\": \"nusersitecode\", \"mandatory\": true },\r\n            { \"idsName\": \"IDS_ROLE\", \"dataField\": \"nusermultirolecode\", \"mandatory\": true },\r\n            { \"idsName\": \"IDS_LOGINTYPE\", \"dataField\": \"nlogintypecode\", \"mandatory\": true },\r\n            //Don't Remove the Commented line commented for NIBSC\r\n            //{ \"idsName\": \"IDS_LANGUAGE\", \"dataField\": \"nlanguagecode\", \"mandatory\": true },\r\n            { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"spassword\", \"mandatory\": true }\r\n        ];\r\n        const failedControls = [];\r\n        mandatoryField.map(item => {\r\n            if (selectedRecord[item.dataField] === undefined) {\r\n                failedControls.push(this.props.intl.formatMessage({ id: item.idsName }));\r\n            } else if (typeof selectedRecord[item.dataField] === \"object\") {\r\n                //to validate FormSelectSearch component\r\n                if (selectedRecord[item.dataField].length === 0) {\r\n                    failedControls.push(this.props.intl.formatMessage({ id: item.idsName }));\r\n                }\r\n            } else if (typeof selectedRecord[item.dataField] === \"string\") {\r\n                //to handle string field -- added trim function\r\n                if (selectedRecord[item.dataField].trim().length === 0) {\r\n                    failedControls.push(this.props.intl.formatMessage({ id: item.idsName }));\r\n                }\r\n            }\r\n            return null;\r\n        });\r\n        if (failedControls.length === 0) {\r\n            let nlogintypecode = selectedRecord.nlogintypecode.value;\r\n            if (selectedRecord.nusercode === -1) {\r\n                nlogintypecode = LOGINTYPE.INTERNAL;\r\n            }\r\n            const inputParam = {\r\n                nusermultisitecode: selectedRecord.nusersitecode.value,\r\n                nusermultirolecode: selectedRecord.nusermultirolecode.value,\r\n                slanguagetypecode: selectedRecord.nlanguagecode.item.slanguagetypecode,\r\n                slanguagefilename: selectedRecord.nlanguagecode.item.sfilename,\r\n                spassword: selectedRecord.spassword,\r\n                nusercode: selectedRecord.nusercode,\r\n                nuserrolecode: selectedRecord.nusermultirolecode.item.nuserrolecode,\r\n                sloginid: selectedRecord.sloginid,\r\n                //nlogintypecode: nlogintypecode,\r\n                nlogintypecode: 1,\r\n                //url: nlogintypecode === 1 ? \"/login/internallogin\" : \"/login/adsLogin\",\r\n                url: \"/login/internallogin\" ,\r\n                navigation: \"home\",\r\n            }\r\n            this.props.clickOnLoginButton(inputParam,this.props.Login.languageList);\r\n        } else {\r\n            toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${failedControls[0]}`);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.navigation === \"home\") {\r\n            this.props.history.push('/');\r\n        }\r\n\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let createPwdRecord = this.state.createPwdRecord || {};\r\n        let isStateChanged = false;\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            isStateChanged = true;\r\n        }\r\n\r\n        if (this.props.Login.createPwdRecord !== previousProps.Login.createPwdRecord) {\r\n            createPwdRecord = this.props.Login.createPwdRecord;\r\n            isStateChanged = true;\r\n        }\r\n\r\n        if (isStateChanged) {\r\n            this.setState({ selectedRecord, createPwdRecord });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    clickOnLoginButton, changeLanguage,\r\n    getLoginDetails, getUserSiteAndRole, updateStore, createPassword, changepassword, getUsersiteRole, checkPassword\r\n})(injectIntl(SignIn));\r\n"]},"metadata":{},"sourceType":"module"}