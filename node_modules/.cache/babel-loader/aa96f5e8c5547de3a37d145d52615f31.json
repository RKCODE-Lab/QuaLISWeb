{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\testgroup\\\\TestGroupTestTab.jsx\";\nimport React, { Component } from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport TestGroupParameterTab from './TestGroupParameterTab';\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport { showEsign } from '../../components/CommonScript';\nimport Esign from '../audittrail/Esign';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { parameterType, transactionStatus } from '../../components/Enumeration';\nimport EditTestGroupParameter from './EditTestGroupParameter';\nimport AddCodedResult from '../testmanagement/AddCodedResult';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport AddSpecification from '../testmanagement/AddSpecification';\nimport TemplateForm from '../checklist/checklist/TemplateForm';\nimport { toast } from 'react-toastify';\n\nclass TestGroupTestTab extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onTemplateInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTemplateComboChange = (comboData, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTemplateDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state.selectedRecord || {};\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleClose = () => {\n      let updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: {},\n          testGroupCheckList: {},\n          openTemplateModal: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.loadEsign;\n      let openChildModal = this.props.openChildModal;\n      let selectedRecord = this.props.selectedRecord;\n\n      if (this.props.loadEsign) {\n        if (this.props.operation === \"delete\" || this.props.operation === \"Default\") {\n          loadEsign = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord[\"agree\"] = 4;\n        }\n      } else {\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_PARAMETER\", /*#__PURE__*/React.createElement(TestGroupParameterTab, {\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        masterData: this.props.masterData,\n        deleteAction: this.deleteAction,\n        onSwitchChange: this.onSwitchChange,\n        addTestFile: this.props.addTestFile,\n        viewTestFile: this.viewTestFile,\n        defaultRecord: this.defaultRecord,\n        getTestGroupParameter: this.props.getTestGroupParameter,\n        editTestGroupParameter: this.props.editTestGroupParameter,\n        addTestGroupCodedResult: this.props.addTestGroupCodedResult,\n        viewTestGroupCheckList: this.props.viewTestGroupCheckList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }\n      }));\n      return tabMap;\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputParam = {}; // if(this.props.screenName === \"IDS_TEST\" \n      //     || this.props.screenName === \"IDS_EDITTESTGROUPTEST\") {\n      //     inputParam = this.onSaveTest(saveType, formRef);\n      // } else \n\n      if (this.props.screenName === \"IDS_FORMULA\") {\n        inputParam = this.onSaveFormula(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_PARAMETER\") {\n        inputParam = this.onSaveParameter(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_CODEDRESULT\") {\n        inputParam = this.onSaveCodedResult(saveType, formRef);\n      }\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", {});\n      }\n    };\n\n    this.onSaveParameter = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const parameterList = [\"ntestgrouptestparametercode\", \"ntestgrouptestcode\", \"ntestparametercode\", \"sparametersynonym\", \"nroundingdigits\", \"nresultmandatory\", \"nreportmandatory\", \"sspecdesc\", \"nsorter\"];\n      let testGroupTestParameter = {\n        nparametertypecode: selectedRecord.nparametertypecode.value,\n        nunitcode: selectedRecord.nunitcode.value,\n        nchecklistversioncode: selectedRecord.nchecklistversioncode.value\n      };\n      parameterList.map(item => {\n        return testGroupTestParameter[item] = selectedRecord[item] ? selectedRecord[item] : \"\";\n      });\n      let inputData = {\n        testgrouptestparameter: testGroupTestParameter,\n        userinfo: this.props.userInfo\n      };\n\n      if (selectedRecord.nparametertypecode.value === parameterType.NUMERIC) {\n        let testGroupTestNumericParameter = {};\n        const numericList = [\"sminlod\", \"smaxlod\", \"sminb\", \"smina\", \"smaxa\", \"smaxb\", \"sminloq\", \"smaxloq\", \"sdisregard\", \"sresultvalue\"];\n        testGroupTestNumericParameter[\"ntestgrouptestparametercode\"] = selectedRecord.ntestgrouptestparametercode;\n        numericList.map(item => {\n          return testGroupTestNumericParameter[item] = selectedRecord[item] ? selectedRecord[item] === \"0\" ? selectedRecord[item] : selectedRecord[item].replace(/^0+/, '') : null;\n        });\n        inputData[\"testgrouptestnumericparameter\"] = testGroupTestNumericParameter;\n\n        if (selectedRecord.ntestformulacode) {\n          const testFormula = selectedRecord.ntestformulacode.item;\n          const testgrouptestformula = {\n            ntestgrouptestparametercode: selectedRecord.ntestgrouptestparametercode,\n            ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\n            ntestformulacode: testFormula.ntestformulacode,\n            sformulacalculationcode: testFormula.sformulacalculationcode,\n            sformulacalculationdetail: testFormula.sformulacalculationdetail,\n            ntransactionstatus: transactionStatus.YES\n          };\n          inputData[\"testgrouptestformula\"] = testgrouptestformula;\n        } else {\n          inputData[\"testgrouptestformula\"] = null;\n        }\n      } else if (selectedRecord.nparametertypecode.value === parameterType.CHARACTER) {\n        const characterList = [\"ntestgrouptestparametercode\", \"scharname\"];\n        let testGroupTestCharParameter = {};\n        characterList.map(item => {\n          return testGroupTestCharParameter[item] = selectedRecord[item] ? selectedRecord[item] : \"\";\n        });\n        inputData[\"testgrouptestcharparameter\"] = testGroupTestCharParameter;\n      } else if (selectedRecord.nparametertypecode.value === parameterType.PREDEFINED) {\n        const testGroupTestPredefParameter = {\n          ntestgrouptestparametercode: selectedRecord.ntestgrouptestparametercode,\n          ngradecode: selectedRecord.ngradecode.value,\n          spredefinedname: selectedRecord.spredefinedname,\n          ntestgrouptestpredefcode: selectedRecord.ntestgrouptestpredefcode,\n          ndefaultstatus: selectedRecord.ndefaultstatus\n        };\n        inputData[\"testgrouptestpredefparameter\"] = testGroupTestPredefParameter;\n      }\n\n      console.log(\"input data:\", inputData);\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: \"update\",\n        methodUrl: \"TestGroupParameter\",\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        postParam: {\n          inputListName: \"TestGroupTest\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestgrouptestcode\",\n          primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\n          fetchUrl: \"testgroup/getTestGroupTest\",\n          fecthInputObject: {\n            userinfo: this.props.userInfo\n          },\n          masterData: this.props.masterData,\n          searchFieldList: this.searchFieldList\n        }\n      };\n      return inputParam;\n    };\n\n    this.onSaveFormula = (saveType, formRef) => {\n      const masterData = this.props.masterData;\n      const selectedRecord = this.state.selectedRecord;\n      const selectedParameter = masterData.selectedParameter;\n      const testFormulaArray = selectedRecord.ntestformulacode.map(test => {\n        return {\n          ntestgrouptestcode: selectedParameter.ntestgrouptestcode,\n          ntestgrouptestparametercode: selectedParameter.ntestgrouptestparametercode,\n          ntestformulacode: test.item.ntestformulacode,\n          sformulacalculationcode: test.item.sformulacalculationcode,\n          sformulacalculationdetail: test.item.sformulacalculationdetail,\n          ntransactionstatus: transactionStatus.NO\n        };\n      });\n      const inputData = {\n        testgroupspecification: masterData.SelectedSpecification,\n        testgrouptestformula: testFormulaArray,\n        userinfo: this.props.userInfo\n      };\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: this.props.operation,\n        methodUrl: \"TestGroupTestFormula\",\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        postParam: {\n          inputListName: \"TestGroupTest\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestgrouptestcode\",\n          primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\n          fetchUrl: \"testgroup/getTestGroupTest\",\n          fecthInputObject: {\n            userinfo: this.props.userInfo\n          },\n          masterData: this.props.masterData,\n          searchFieldList: this.searchFieldList\n        }\n      };\n      return inputParam;\n    };\n\n    this.onSaveCodedResult = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const testGroupPredefParameter = {\n        ndefaultstatus: transactionStatus.NO,\n        nstatus: transactionStatus.ACTIVE,\n        ntestgrouptestpredefcode: selectedRecord[\"ntestgrouptestpredefcode\"],\n        ntestgrouptestparametercode: this.props.masterData.selectedParameter[\"ntestgrouptestparametercode\"],\n        ngradecode: selectedRecord[\"ngradecode\"].value,\n        spredefinedname: selectedRecord[\"spredefinedname\"]\n      };\n      const inputParam = {\n        inputData: {\n          testgrouptestpredefinedparameter: testGroupPredefParameter,\n          userinfo: this.props.userInfo,\n          testgroupspecification: this.props.masterData.SelectedSpecification\n        },\n        classUrl: \"testgroup\",\n        operation: this.props.operation,\n        methodUrl: \"TestGroupPredefParameter\",\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        postParam: {\n          inputListName: \"TestGroupTest\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestgrouptestcode\",\n          primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\n          fetchUrl: \"testgroup/getTestGroupTest\",\n          fecthInputObject: {\n            userinfo: this.props.userInfo\n          },\n          masterData: this.props.masterData,\n          searchFieldList: this.searchFieldList\n        }\n      };\n      return inputParam;\n    };\n\n    this.deleteTest = deleteParam => {\n      const testgroupspecification = this.props.masterData.SelectedSpecification;\n\n      if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n        const screenName = deleteParam.screenName;\n        const inputParam = {\n          inputData: {\n            testgrouptest: deleteParam.selectedRecord,\n            userinfo: this.props.userInfo,\n            testgroupspecification,\n            treetemplatemanipulation: this.props.masterData.selectedNode\n          },\n          classUrl: \"testgroup\",\n          operation: \"delete\",\n          methodUrl: \"Test\",\n          screenName: \"IDS_TEST\",\n          postParam: {\n            inputListName: \"TestGroupTest\",\n            selectedObject: \"SelectedTest\",\n            primaryKeyField: \"ntestgrouptestcode\",\n            primaryKeyValue: deleteParam.selectedRecord.ntestgrouptestcode,\n            fetchUrl: \"testgroup/getTestGroupTest\",\n            fecthInputObject: {\n              userinfo: this.props.userInfo\n            },\n            masterData: this.props.masterData,\n            searchFieldList: this.searchFieldList\n          }\n        };\n        const masterData = this.props.masterData;\n\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: screenName,\n              operation: deleteParam.operation,\n              selectedRecord: {}\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\", {});\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n        }));\n      }\n    };\n\n    this.deleteAction = (item, operation, ncontrolCode, methodUrl, modalName) => {\n      const selected = item;\n      const inputParam = {\n        inputData: {\n          [methodUrl.toLowerCase()]: selected,\n          userinfo: this.props.userInfo,\n          testgroupspecification: this.props.masterData.SelectedSpecification\n        },\n        classUrl: \"testgroup\",\n        operation: operation,\n        methodUrl: methodUrl,\n        screenName: \"IDS_TEST\",\n        postParam: {\n          inputListName: \"TestGroupTest\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestgrouptestcode\",\n          primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\n          fetchUrl: \"testgroup/getTestGroupTest\",\n          fecthInputObject: {\n            userinfo: this.props.userInfo\n          },\n          masterData: this.props.masterData,\n          searchFieldList: this.searchFieldList\n        }\n      };\n      const masterData = this.props.masterData;\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            [modalName]: true,\n            screenName: \"IDS_TEST\",\n            operation: operation,\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\n      }\n    };\n\n    this.onSwitchChange = (item, key, methodUrl) => {\n      let dataItem = item;\n\n      if (methodUrl === \"TestGroupTestFormula\") {\n        dataItem[\"ntransactionstatus\"] = transactionStatus.YES;\n      } else {\n        dataItem[\"ndefaultstatus\"] = transactionStatus.YES;\n      }\n\n      const inputParam = {\n        inputData: {\n          [key]: dataItem,\n          userinfo: this.props.userInfo,\n          testgroupspecification: this.props.masterData.SelectedSpecification\n        },\n        classUrl: \"testgroup\",\n        operation: \"default\",\n        methodUrl: methodUrl\n      };\n      this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", {});\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 2:\n          selectedRecord[\"parameterTypeCode\"] = comboData.value;\n          selectedRecord[fieldName] = comboData;\n          const needRoundingDigit = comboData.value === parameterType.NUMERIC ? false : true;\n          const needUnit = comboData.value === parameterType.NUMERIC ? false : true;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord,\n              testGroupInputData: { ...this.props.testGroupInputData,\n                needRoundingDigit,\n                needUnit\n              }\n            }\n          };\n          this.props.updateStore(updateInfo);\n          break;\n\n        case 3:\n          selectedRecord[\"schecklistversionname\"] = comboData.item.schecklistversionname;\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.onInputOnChange = (event, caseNo, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (event.target.type === 'checkbox') {\n            selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\n          } else if (event.target.type === 'radio') {\n            selectedRecord[event.target.name] = optional;\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 2:\n          selectedRecord[event.target.name] = event.target.value;\n          const indexKey = Object.keys(optional)[0];\n          const value = Object.values(optional)[0];\n          const treeData = {\n            ntreeversiontempcode: value.ntreeversiontempcode,\n            npositioncode: value.nlevelno - 1,\n            sleveldescription: event.target.value,\n            ntemptranstestgroupcode: value.ntemptranstestgroupcode,\n            nformcode: 62,\n            schildnode: value.schildnode,\n            nnextchildcode: value.schildnode\n          };\n          let treetemplatemanipulation = selectedRecord.treetemplatemanipulation || [];\n          treetemplatemanipulation[indexKey] = treeData;\n          selectedRecord[\"treetemplatemanipulation\"] = treetemplatemanipulation;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 4:\n          const inputValue = event.target.value;\n\n          if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openChildModal\");\n    };\n\n    this.state = {\n      selectedRecord: {}\n    };\n    this.codedResultMandatory = [{\n      \"idsName\": \"IDS_CODEDRESULT\",\n      \"dataField\": \"spredefinedname\",\n      \"width\": \"200px\",\n      \"mandatory\": true\n    }, {\n      \"idsName\": \"IDS_ACTUALRESULT\",\n      \"dataField\": \"ngradecode\",\n      \"width\": \"200px\",\n      \"mandatory\": true\n    }];\n  }\n\n  render() {\n    this.paramColumnList = [{\n      \"idsName\": \"IDS_PARAMETERSYNONYM\",\n      \"dataField\": \"sparametersynonym\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_PARAMETERTYPE\",\n      \"dataField\": \"nparametertypecode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n\n    if (this.state.selectedRecord[\"parameterTypeCode\"] && this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC) {\n      this.paramColumnList = [{\n        \"idsName\": \"IDS_PARAMETERSYNONYM\",\n        \"dataField\": \"sparametersynonym\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_PARAMETERTYPE\",\n        \"dataField\": \"nparametertypecode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_ROUNDINGDIGITS\",\n        \"dataField\": \"nroundingdigits\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_UNI\",\n        \"dataField\": \"nunitcode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n    }\n\n    if (this.state.selectedRecord[\"parameterTypeCode\"] && this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED) {\n      this.paramColumnList = [{\n        \"idsName\": \"IDS_PARAMETERSYNONYM\",\n        \"dataField\": \"sparametersynonym\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_PARAMETERTYPE\",\n        \"dataField\": \"nparametertypecode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_CODEDRESULT\",\n        \"dataField\": \"spredefinedname\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_ACTUALRESULT\",\n        \"dataField\": \"ngradecode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n    }\n\n    const paramMandatoryFields = [];\n    this.paramColumnList.forEach(item => item.mandatory === true ? paramMandatoryFields.push(item) : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CustomTab, {\n      paneHeight: this.props.paneHeight,\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    })), this.props.openChildModal && this.props.screenName && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.operation,\n      inputParam: this.props.inputParam,\n      screenName: this.props.screenName,\n      esign: this.props.loadEsign,\n      validateEsign: this.validateEsign,\n      onSaveClick: this.onSaveClick,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.screenName === \"IDS_PARAMETER\" ? paramMandatoryFields : this.props.screenName === \"IDS_CODEDRESULT\" ? this.codedResultMandatory : [],\n      addComponent: this.props.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 29\n        }\n      }) : this.props.screenName === \"IDS_PARAMETER\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(EditTestGroupParameter, {\n        selectedRecord: this.state.selectedRecord || {},\n        testGroupInputData: this.props.testGroupInputData,\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 37\n        }\n      }), this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED || this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.CHARACTER || this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"horizontal-line\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 49\n        }\n      }))) : \"\", this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED && /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(AddCodedResult, {\n        onInputOnChange: this.onInputOnChange,\n        parameterData: this.props.parameterData,\n        selectedRecord: this.state.selectedRecord,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 45\n        }\n      })), this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.CHARACTER && /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormTextarea, {\n        name: \"scharname\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_TESTCHARACTER\"\n        }),\n        onChange: event => this.onInputOnChange(event, 1),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_TESTCHARACTER\"\n        }),\n        value: this.state.selectedRecord[\"scharname\"],\n        rows: \"2\",\n        required: false,\n        maxLength: 255,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 49\n        }\n      }))), this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC && /*#__PURE__*/React.createElement(AddSpecification, {\n        selectedRecord: this.state.selectedRecord,\n        onInputOnChange: this.onInputOnChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 41\n        }\n      })) : this.props.screenName === \"IDS_CODEDRESULT\" ? /*#__PURE__*/React.createElement(AddCodedResult, {\n        onInputOnChange: this.onInputOnChange,\n        parameterData: this.props.parameterData,\n        selectedRecord: this.state.selectedRecord,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 37\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    }), this.props.testGroupCheckList && this.props.testGroupCheckList.templateData && this.props.testGroupCheckList.templateData.length > 0 && /*#__PURE__*/React.createElement(TemplateForm, {\n      templateData: this.props.testGroupCheckList.templateData,\n      handleClose: this.handleClose,\n      screenName: \"IDS_VIEWCHECKLIST\",\n      needSaveButton: false,\n      viewScreen: this.props.openTemplateModal,\n      onTemplateInputChange: this.onTemplateInputChange,\n      onTemplateComboChange: this.onTemplateComboChange,\n      onTemplateDateChange: this.onTemplateDateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default injectIntl(TestGroupTestTab);","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/testgroup/TestGroupTestTab.jsx"],"names":["React","Component","injectIntl","Row","Col","PerfectScrollbar","DEFAULT_RETURN","TestGroupParameterTab","CustomTab","showEsign","Esign","SlideOutModal","parameterType","transactionStatus","EditTestGroupParameter","AddCodedResult","FormTextarea","AddSpecification","TemplateForm","toast","TestGroupTestTab","constructor","props","onTemplateInputChange","event","selectedRecord","state","target","type","name","checked","YES","NO","value","setState","onTemplateComboChange","comboData","fieldName","onTemplateDateChange","dateName","dateValue","Date","handleClose","updateInfo","typeName","data","testGroupCheckList","openTemplateModal","updateStore","closeModal","loadEsign","openChildModal","operation","onTabChange","tabProps","screenName","tabDetail","tabMap","Map","set","controlMap","userRoleControlRights","userInfo","inputParam","masterData","deleteAction","onSwitchChange","addTestFile","viewTestFile","defaultRecord","getTestGroupParameter","editTestGroupParameter","addTestGroupCodedResult","viewTestGroupCheckList","onSaveClick","saveType","formRef","onSaveFormula","onSaveParameter","onSaveCodedResult","esignRights","nformcode","ncontrolCode","screenData","crudMaster","parameterList","testGroupTestParameter","nparametertypecode","nunitcode","nchecklistversioncode","map","item","inputData","testgrouptestparameter","userinfo","NUMERIC","testGroupTestNumericParameter","numericList","ntestgrouptestparametercode","replace","ntestformulacode","testFormula","testgrouptestformula","ntestgrouptestcode","sformulacalculationcode","sformulacalculationdetail","ntransactionstatus","CHARACTER","characterList","testGroupTestCharParameter","PREDEFINED","testGroupTestPredefParameter","ngradecode","spredefinedname","ntestgrouptestpredefcode","ndefaultstatus","console","log","classUrl","methodUrl","searchRef","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","SelectedTest","fetchUrl","fecthInputObject","searchFieldList","selectedParameter","testFormulaArray","test","testgroupspecification","SelectedSpecification","testGroupPredefParameter","nstatus","ACTIVE","testgrouptestpredefinedparameter","deleteTest","deleteParam","napprovalstatus","DRAFT","CORRECTION","testgrouptest","treetemplatemanipulation","selectedNode","openModal","warn","intl","formatMessage","id","modalName","selected","toLowerCase","key","dataItem","onEsignInputOnChange","onComboChange","caseNo","needRoundingDigit","needUnit","testGroupInputData","schecklistversionname","onInputOnChange","optional","indexKey","Object","keys","values","treeData","ntreeversiontempcode","npositioncode","nlevelno","sleveldescription","ntemptranstestgroupcode","schildnode","nnextchildcode","inputValue","onNumericInputChange","validateEsign","sreason","password","validateEsignCredential","codedResultMandatory","render","paramColumnList","paramMandatoryFields","forEach","mandatory","push","paneHeight","parameterData","templateData","length","componentDidUpdate","previousProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport TestGroupParameterTab from './TestGroupParameterTab';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\r\nimport { showEsign } from '../../components/CommonScript';\r\nimport Esign from '../audittrail/Esign';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { parameterType, transactionStatus } from '../../components/Enumeration';\r\nimport EditTestGroupParameter from './EditTestGroupParameter';\r\nimport AddCodedResult from '../testmanagement/AddCodedResult';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport AddSpecification from '../testmanagement/AddSpecification';\r\nimport TemplateForm from '../checklist/checklist/TemplateForm';\r\nimport { toast } from 'react-toastify';\r\n\r\nclass TestGroupTestTab extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedRecord: {}\r\n        }\r\n        this.codedResultMandatory = [{ \"idsName\": \"IDS_CODEDRESULT\", \"dataField\": \"spredefinedname\", \"width\": \"200px\", \"mandatory\": true },\r\n        { \"idsName\": \"IDS_ACTUALRESULT\", \"dataField\": \"ngradecode\", \"width\": \"200px\", \"mandatory\": true }];\r\n    }\r\n\r\n    render() {\r\n        this.paramColumnList = [\r\n            { \"idsName\": \"IDS_PARAMETERSYNONYM\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_PARAMETERTYPE\", \"dataField\": \"nparametertypecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n        ]\r\n        if (this.state.selectedRecord[\"parameterTypeCode\"] && this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC) {\r\n            this.paramColumnList = [\r\n                { \"idsName\": \"IDS_PARAMETERSYNONYM\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_PARAMETERTYPE\", \"dataField\": \"nparametertypecode\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                { \"idsName\": \"IDS_ROUNDINGDIGITS\", \"dataField\": \"nroundingdigits\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                { \"idsName\": \"IDS_UNI\", \"dataField\": \"nunitcode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        }\r\n        if (this.state.selectedRecord[\"parameterTypeCode\"] && this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED) {\r\n            this.paramColumnList = [\r\n                { \"idsName\": \"IDS_PARAMETERSYNONYM\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_PARAMETERTYPE\", \"dataField\": \"nparametertypecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_CODEDRESULT\", \"dataField\": \"spredefinedname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_ACTUALRESULT\", \"dataField\": \"ngradecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        }\r\n        const paramMandatoryFields = [];\r\n\r\n        this.paramColumnList.forEach(item => item.mandatory === true ?\r\n            paramMandatoryFields.push(item) : \"\"\r\n        );\r\n        return (\r\n            <>\r\n                <PerfectScrollbar>\r\n                    <CustomTab paneHeight={this.props.paneHeight} tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                </PerfectScrollbar>\r\n\r\n                {this.props.openChildModal && this.props.screenName &&\r\n                    <SlideOutModal\r\n                        show={this.props.openChildModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.operation}\r\n                        inputParam={this.props.inputParam}\r\n                        screenName={this.props.screenName}\r\n                        esign={this.props.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        onSaveClick={this.onSaveClick}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.screenName === \"IDS_PARAMETER\" ? paramMandatoryFields :\r\n                            this.props.screenName === \"IDS_CODEDRESULT\" ? this.codedResultMandatory : []}\r\n                        addComponent={this.props.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.operation}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> :\r\n                            this.props.screenName === \"IDS_PARAMETER\" ?\r\n                                <>\r\n                                    <EditTestGroupParameter\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        testGroupInputData={this.props.testGroupInputData}\r\n                                        onComboChange={this.onComboChange}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onNumericInputChange={this.onNumericInputChange}\r\n                                    />\r\n                                    {this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED ||\r\n                                        this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.CHARACTER ||\r\n                                        this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC ?\r\n                                        <Row>\r\n                                            <Col>\r\n                                                <div className=\"horizontal-line\"></div>\r\n                                            </Col>\r\n                                        </Row> : \"\"\r\n                                    }\r\n\r\n                                    { this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED &&\r\n                                        <Row>\r\n                                            <AddCodedResult\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                parameterData={this.props.parameterData}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                onComboChange={this.onComboChange}\r\n                                            />\r\n                                        </Row>}\r\n                                    { this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.CHARACTER &&\r\n                                        <Row>\r\n                                            <Col md=\"12\">\r\n                                                <FormTextarea\r\n                                                    name={\"scharname\"}\r\n                                                    label={this.props.intl.formatMessage({ id: \"IDS_TESTCHARACTER\" })}\r\n                                                    onChange={(event) => this.onInputOnChange(event, 1)}\r\n                                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_TESTCHARACTER\" })}\r\n                                                    value={this.state.selectedRecord[\"scharname\"]}\r\n                                                    rows=\"2\"\r\n                                                    required={false}\r\n                                                    maxLength={255}\r\n                                                >\r\n                                                </FormTextarea>\r\n                                            </Col>\r\n                                        </Row>}\r\n                                    { this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC &&\r\n                                        <AddSpecification\r\n                                            selectedRecord={this.state.selectedRecord}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                        />}\r\n                                </> :\r\n                                this.props.screenName === \"IDS_CODEDRESULT\" ?\r\n                                    <AddCodedResult\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        parameterData={this.props.parameterData}\r\n                                        selectedRecord={this.state.selectedRecord}\r\n                                        onComboChange={this.onComboChange}\r\n                                    /> : \"\"\r\n                        }\r\n                    />\r\n                }\r\n                { this.props.testGroupCheckList && this.props.testGroupCheckList.templateData &&\r\n                    this.props.testGroupCheckList.templateData.length > 0 &&\r\n                    <TemplateForm\r\n                        templateData={this.props.testGroupCheckList.templateData}\r\n                        handleClose={this.handleClose}\r\n                        screenName=\"IDS_VIEWCHECKLIST\"\r\n                        needSaveButton={false}\r\n                        viewScreen={this.props.openTemplateModal}\r\n                        onTemplateInputChange={this.onTemplateInputChange}\r\n                        onTemplateComboChange={this.onTemplateComboChange}\r\n                        onTemplateDateChange={this.onTemplateDateChange}\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    onTemplateInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTemplateComboChange = (comboData, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTemplateDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state.selectedRecord || {};\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleClose = () => {\r\n        let updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: {},\r\n                testGroupCheckList: {},\r\n                openTemplateModal: false\r\n            }\r\n        };\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.loadEsign;\r\n        let openChildModal = this.props.openChildModal;\r\n        let selectedRecord = this.props.selectedRecord;\r\n        if (this.props.loadEsign) {\r\n            if (this.props.operation === \"delete\" || this.props.operation === \"Default\") {\r\n                loadEsign = false;\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord[\"agree\"] = 4;\r\n            }\r\n        } else {\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    tabDetail = () => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_PARAMETER\",\r\n            <TestGroupParameterTab\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                userInfo={this.props.userInfo}\r\n                inputParam={this.props.inputParam}\r\n                masterData={this.props.masterData}\r\n                deleteAction={this.deleteAction}\r\n                onSwitchChange={this.onSwitchChange}\r\n                addTestFile={this.props.addTestFile}\r\n                viewTestFile={this.viewTestFile}\r\n                defaultRecord={this.defaultRecord}\r\n                getTestGroupParameter={this.props.getTestGroupParameter}\r\n                editTestGroupParameter={this.props.editTestGroupParameter}\r\n                addTestGroupCodedResult={this.props.addTestGroupCodedResult}\r\n                viewTestGroupCheckList={this.props.viewTestGroupCheckList}\r\n            />);\r\n        return tabMap;\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputParam = {};\r\n        // if(this.props.screenName === \"IDS_TEST\" \r\n        //     || this.props.screenName === \"IDS_EDITTESTGROUPTEST\") {\r\n        //     inputParam = this.onSaveTest(saveType, formRef);\r\n        // } else \r\n        if (this.props.screenName === \"IDS_FORMULA\") {\r\n            inputParam = this.onSaveFormula(saveType, formRef);\r\n        } else if (this.props.screenName === \"IDS_PARAMETER\") {\r\n            inputParam = this.onSaveParameter(saveType, formRef);\r\n        } else if (this.props.screenName === \"IDS_CODEDRESULT\") {\r\n            inputParam = this.onSaveCodedResult(saveType, formRef);\r\n        }\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", {});\r\n        }\r\n    }\r\n\r\n    onSaveParameter = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const parameterList = [\"ntestgrouptestparametercode\", \"ntestgrouptestcode\", \"ntestparametercode\", \"sparametersynonym\", \"nroundingdigits\",\r\n            \"nresultmandatory\", \"nreportmandatory\", \"sspecdesc\", \"nsorter\"];\r\n        let testGroupTestParameter = {\r\n            nparametertypecode: selectedRecord.nparametertypecode.value,\r\n            nunitcode: selectedRecord.nunitcode.value,\r\n            nchecklistversioncode: selectedRecord.nchecklistversioncode.value\r\n        }\r\n        parameterList.map(item => {\r\n            return testGroupTestParameter[item] = selectedRecord[item] ? selectedRecord[item] : \"\";\r\n        });\r\n        let inputData = {\r\n            testgrouptestparameter: testGroupTestParameter,\r\n            userinfo: this.props.userInfo\r\n        };\r\n        if (selectedRecord.nparametertypecode.value === parameterType.NUMERIC) {\r\n            let testGroupTestNumericParameter = {};\r\n            const numericList = [\"sminlod\", \"smaxlod\", \"sminb\", \"smina\", \"smaxa\", \"smaxb\", \"sminloq\", \"smaxloq\", \"sdisregard\", \"sresultvalue\"];\r\n            testGroupTestNumericParameter[\"ntestgrouptestparametercode\"] = selectedRecord.ntestgrouptestparametercode;\r\n            numericList.map(item => {\r\n                return testGroupTestNumericParameter[item] = selectedRecord[item] ? selectedRecord[item] === \"0\" ? selectedRecord[item] : selectedRecord[item].replace(/^0+/, '') : null;\r\n            });\r\n            inputData[\"testgrouptestnumericparameter\"] = testGroupTestNumericParameter;\r\n            if (selectedRecord.ntestformulacode) {\r\n                const testFormula = selectedRecord.ntestformulacode.item;\r\n                const testgrouptestformula = {\r\n                    ntestgrouptestparametercode: selectedRecord.ntestgrouptestparametercode,\r\n                    ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\r\n                    ntestformulacode: testFormula.ntestformulacode,\r\n                    sformulacalculationcode: testFormula.sformulacalculationcode,\r\n                    sformulacalculationdetail: testFormula.sformulacalculationdetail,\r\n                    ntransactionstatus: transactionStatus.YES\r\n                };\r\n                inputData[\"testgrouptestformula\"] = testgrouptestformula;\r\n            } else {\r\n                inputData[\"testgrouptestformula\"] = null;\r\n            }\r\n        } else if (selectedRecord.nparametertypecode.value === parameterType.CHARACTER) {\r\n            const characterList = [\"ntestgrouptestparametercode\", \"scharname\"];\r\n            let testGroupTestCharParameter = {};\r\n            characterList.map(item => {\r\n                return testGroupTestCharParameter[item] = selectedRecord[item] ? selectedRecord[item] : \"\";\r\n            });\r\n            inputData[\"testgrouptestcharparameter\"] = testGroupTestCharParameter;\r\n        } else if (selectedRecord.nparametertypecode.value === parameterType.PREDEFINED) {\r\n            const testGroupTestPredefParameter = {\r\n                ntestgrouptestparametercode: selectedRecord.ntestgrouptestparametercode,\r\n                ngradecode: selectedRecord.ngradecode.value,\r\n                spredefinedname: selectedRecord.spredefinedname,\r\n                ntestgrouptestpredefcode: selectedRecord.ntestgrouptestpredefcode,\r\n                ndefaultstatus:selectedRecord.ndefaultstatus\r\n            }\r\n            inputData[\"testgrouptestpredefparameter\"] = testGroupTestPredefParameter;\r\n        }\r\n        console.log(\"input data:\", inputData);\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: \"update\",\r\n            methodUrl: \"TestGroupParameter\",\r\n            saveType, formRef, searchRef: this.searchRef,\r\n            postParam: {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n            }\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveFormula = (saveType, formRef) => {\r\n        const masterData = this.props.masterData;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const selectedParameter = masterData.selectedParameter;\r\n        const testFormulaArray = selectedRecord.ntestformulacode.map(test => {\r\n            return {\r\n                ntestgrouptestcode: selectedParameter.ntestgrouptestcode,\r\n                ntestgrouptestparametercode: selectedParameter.ntestgrouptestparametercode,\r\n                ntestformulacode: test.item.ntestformulacode,\r\n                sformulacalculationcode: test.item.sformulacalculationcode,\r\n                sformulacalculationdetail: test.item.sformulacalculationdetail,\r\n                ntransactionstatus: transactionStatus.NO\r\n            }\r\n        });\r\n        const inputData = {\r\n            testgroupspecification: masterData.SelectedSpecification,\r\n            testgrouptestformula: testFormulaArray,\r\n            userinfo: this.props.userInfo\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: this.props.operation,\r\n            methodUrl: \"TestGroupTestFormula\",\r\n            saveType, formRef, searchRef: this.searchRef,\r\n            postParam: {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n            }\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveCodedResult = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const testGroupPredefParameter = {\r\n            ndefaultstatus: transactionStatus.NO,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            ntestgrouptestpredefcode: selectedRecord[\"ntestgrouptestpredefcode\"],\r\n            ntestgrouptestparametercode: this.props.masterData.selectedParameter[\"ntestgrouptestparametercode\"],\r\n            ngradecode: selectedRecord[\"ngradecode\"].value,\r\n            spredefinedname: selectedRecord[\"spredefinedname\"]\r\n        };\r\n        const inputParam = {\r\n            inputData: {\r\n                testgrouptestpredefinedparameter: testGroupPredefParameter,\r\n                userinfo: this.props.userInfo,\r\n                testgroupspecification: this.props.masterData.SelectedSpecification\r\n            },\r\n            classUrl: \"testgroup\",\r\n            operation: this.props.operation,\r\n            methodUrl: \"TestGroupPredefParameter\",\r\n            saveType, formRef, searchRef: this.searchRef,\r\n            postParam: {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n            }\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    deleteTest = (deleteParam) => {\r\n        const testgroupspecification = this.props.masterData.SelectedSpecification;\r\n        if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n            || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n            const screenName = deleteParam.screenName;\r\n            const inputParam = {\r\n                inputData: {\r\n                    testgrouptest: deleteParam.selectedRecord,\r\n                    userinfo: this.props.userInfo,\r\n                    testgroupspecification,\r\n                    treetemplatemanipulation: this.props.masterData.selectedNode\r\n                },\r\n                classUrl: \"testgroup\",\r\n                operation: \"delete\",\r\n                methodUrl: \"Test\",\r\n                screenName: \"IDS_TEST\",\r\n                postParam: {\r\n                    inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                    primaryKeyValue: deleteParam.selectedRecord.ntestgrouptestcode,\r\n                    fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                    masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n                }\r\n            }\r\n            const masterData = this.props.masterData;\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: screenName, operation: deleteParam.operation, selectedRecord: {}\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n        }\r\n    }\r\n\r\n    deleteAction = (item, operation, ncontrolCode, methodUrl, modalName) => {\r\n        const selected = item;\r\n        const inputParam = {\r\n            inputData: {\r\n                [methodUrl.toLowerCase()]: selected,\r\n                userinfo: this.props.userInfo,\r\n                testgroupspecification: this.props.masterData.SelectedSpecification\r\n            },\r\n            classUrl: \"testgroup\",\r\n            operation: operation,\r\n            methodUrl: methodUrl,\r\n            screenName: \"IDS_TEST\",\r\n            postParam: {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n            }\r\n        }\r\n        const masterData = this.props.masterData;\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    [modalName]: true, screenName: \"IDS_TEST\", operation: operation, selectedRecord: {}\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\r\n        }\r\n    }\r\n\r\n    onSwitchChange = (item, key, methodUrl) => {\r\n        let dataItem = item;\r\n        if (methodUrl === \"TestGroupTestFormula\") {\r\n            dataItem[\"ntransactionstatus\"] = transactionStatus.YES;\r\n        } else {\r\n            dataItem[\"ndefaultstatus\"] = transactionStatus.YES;\r\n        }\r\n        const inputParam = {\r\n            inputData: {\r\n                [key]: dataItem,\r\n                userinfo: this.props.userInfo,\r\n                testgroupspecification: this.props.masterData.SelectedSpecification\r\n            },\r\n            classUrl: \"testgroup\",\r\n            operation: \"default\",\r\n            methodUrl: methodUrl\r\n        }\r\n        this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", {});\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, caseNo) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                selectedRecord[\"parameterTypeCode\"] = comboData.value;\r\n                selectedRecord[fieldName] = comboData;\r\n                const needRoundingDigit = comboData.value === parameterType.NUMERIC ? false : true;\r\n                const needUnit = comboData.value === parameterType.NUMERIC ? false : true;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        selectedRecord,\r\n                        testGroupInputData: {\r\n                            ...this.props.testGroupInputData,\r\n                            needRoundingDigit, needUnit\r\n                        }\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n                break;\r\n\r\n            case 3:\r\n                selectedRecord[\"schecklistversionname\"] = comboData.item.schecklistversionname;\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event, caseNo, optional) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (event.target.type === 'checkbox') {\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\r\n                } else if (event.target.type === 'radio') {\r\n                    selectedRecord[event.target.name] = optional;\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                selectedRecord[event.target.name] = event.target.value;\r\n                const indexKey = Object.keys(optional)[0];\r\n                const value = Object.values(optional)[0];\r\n                const treeData = {\r\n                    ntreeversiontempcode: value.ntreeversiontempcode,\r\n                    npositioncode: value.nlevelno - 1,\r\n                    sleveldescription: event.target.value,\r\n                    ntemptranstestgroupcode: value.ntemptranstestgroupcode,\r\n                    nformcode: 62,\r\n                    schildnode: value.schildnode,\r\n                    nnextchildcode: value.schildnode\r\n                }\r\n                let treetemplatemanipulation = selectedRecord.treetemplatemanipulation || [];\r\n                treetemplatemanipulation[indexKey] = treeData;\r\n                selectedRecord[\"treetemplatemanipulation\"] = treetemplatemanipulation;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 4:\r\n                const inputValue = event.target.value;\r\n                if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default injectIntl(TestGroupTestTab);"]},"metadata":{},"sourceType":"module"}