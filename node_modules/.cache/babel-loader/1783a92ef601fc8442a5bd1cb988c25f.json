{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript';\nimport { intl } from '../components/App';\nimport { transactionStatus } from '../components/Enumeration';\nexport function getClockMonitoringComboService(inputParam) {\n  return function (dispatch) {\n    // if (inputParam.selectedBatch.ntransactionstatus === transactionStatus.CERTIFIED){\n    //     toast.warn(intl.formatMessage({id: \"IDS_ALREADYCERTIFIED\"}));\n    // }\n    if (inputParam.selectedBatch.ntransactionstatus === transactionStatus.CERTIFIED || inputParam.selectedBatch.ntransactionstatus === transactionStatus.NULLIFIED || inputParam.selectedBatch.ntransactionstatus === transactionStatus.SENT) {\n      //const message = \"IDS_CANNOTDELETE\"+inputParam.selectedBatch.stransactionstatus.toUpperCase() +\"RECORD\";\n      toast.warn(intl.formatMessage({\n        id: \"IDS_CANNOTEDITCERTIFIEDCLOCK\"\n      }));\n    } else {\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      const utcTimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo: inputParam.userInfo\n      });\n      let urlArray = []; //let selectedId = null;\n\n      let valid = true;\n      let msg = \"IDS_CANNOTCREATEAUTOCLOCK\";\n      ;\n\n      if (inputParam.operation === \"create\") {\n        urlArray = [timeZoneService, utcTimeZoneService];\n      } else {\n        const editRow = inputParam.editRow;\n\n        if (editRow.nactiontype === transactionStatus.AUTO) {\n          valid = false;\n          msg = \"IDS_CANNOTEDITAUTOCLOCK\";\n        } else {\n          const activeClockById = rsapi.post(\"clockmonitoring/getActiveClockHistoryById\", {\n            [inputParam.primaryKeyField]: inputParam.primaryKeyValue,\n            \"userinfo\": inputParam.userInfo\n          });\n          urlArray = [timeZoneService, utcTimeZoneService, activeClockById]; //selectedId = inputParam.primaryKeyValue;\n        }\n      }\n\n      if (valid) {\n        dispatch(initRequest(true));\n        Axios.all(urlArray).then(response => {\n          const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n          const timeZoneList = timeZoneMap.get(\"OptionList\");\n          let selectedRecord = {};\n\n          if (inputParam.operation === \"update\") {\n            const selectedClock = response[2].data;\n            selectedRecord = JSON.parse(JSON.stringify(response[2].data));\n            const selectedTimeZone = response[0].data.filter(item => item.ntimezonecode === selectedRecord.ntzapproveddate);\n            selectedRecord[\"dapproveddate\"] = rearrangeDateFormat(inputParam.userInfo, selectedClock[\"sapproveddate\"]);\n            selectedRecord[\"ntzapproveddate\"] = {\n              \"value\": selectedTimeZone[0].ntimezonecode,\n              \"label\": selectedTimeZone[0].stimezoneid\n            };\n            selectedRecord[\"stzapproveddate\"] = selectedTimeZone[0].stimezoneid;\n          } else {\n            selectedRecord = {\n              \"dapproveddate\": rearrangeDateFormat(inputParam.userInfo, response[1].data),\n              \"ntzapproveddate\": {\n                \"value\": inputParam.userInfo.ntimezonecode,\n                \"label\": inputParam.userInfo.stimezoneid\n              },\n              \"stzapproveddate\": inputParam.userInfo.stimezoneid\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              timeZoneList,\n              operation: inputParam.operation,\n              screenName: inputParam.screenName,\n              selectedRecord,\n              openModal: true,\n              clockAction: inputParam.clockAction,\n              ncontrolCode: inputParam.ncontrolCode,\n              loading: false,\n              selectedId: inputParam.primaryKeyValue\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: msg\n        }));\n      }\n    }\n  };\n}\nexport function getClockBatchCreationDetail(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true)); //const batchParam = inputParam.batchParam;\n\n    let masterData = inputParam.masterData;\n    return rsapi.post(\"clockmonitoring/getClockMonitoring\", {\n      nreleasebatchcode: parseInt(inputParam.nreleasebatchcode),\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function reloadClockMonitoring(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"clockmonitoring/getClockMonitoring\", { ...inputParam.inputData\n    }).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\n        inputParam.searchRef.current.value = \"\";\n        masterData['searchedData'] = undefined;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/actions/ClockMonitoringAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","sortData","constructOptionList","rearrangeDateFormat","intl","transactionStatus","getClockMonitoringComboService","inputParam","dispatch","selectedBatch","ntransactionstatus","CERTIFIED","NULLIFIED","SENT","warn","formatMessage","id","timeZoneService","post","utcTimeZoneService","userinfo","userInfo","urlArray","valid","msg","operation","editRow","nactiontype","AUTO","activeClockById","primaryKeyField","primaryKeyValue","all","then","response","timeZoneMap","data","undefined","timeZoneList","get","selectedRecord","selectedClock","JSON","parse","stringify","selectedTimeZone","filter","item","ntimezonecode","ntzapproveddate","stimezoneid","type","payload","screenName","openModal","clockAction","ncontrolCode","loading","selectedId","catch","error","status","message","getClockBatchCreationDetail","masterData","nreleasebatchcode","parseInt","reloadClockMonitoring","inputData","responseData","searchRef","current","value","showFilter"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAAQC,cAAR,QAA6B,cAA7B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAAQC,QAAR,EAAkBC,mBAAlB,EAAuCC,mBAAvC,QAAiE,4BAAjE;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAAQC,iBAAR,QAAgC,2BAAhC;AAEA,OAAO,SAASC,8BAAT,CAAwCC,UAAxC,EAAmD;AACtD,SAAO,UAAUC,QAAV,EAAoB;AAEvB;AACA;AACA;AACA,QAAID,UAAU,CAACE,aAAX,CAAyBC,kBAAzB,KAAgDL,iBAAiB,CAACM,SAAlE,IACGJ,UAAU,CAACE,aAAX,CAAyBC,kBAAzB,KAAgDL,iBAAiB,CAACO,SADrE,IAEGL,UAAU,CAACE,aAAX,CAAyBC,kBAAzB,KAAgDL,iBAAiB,CAACQ,IAFzE,EAGA;AACI;AACAf,MAAAA,KAAK,CAACgB,IAAN,CAAWV,IAAI,CAACW,aAAL,CAAmB;AAACC,QAAAA,EAAE,EAAC;AAAJ,OAAnB,CAAX;AACH,KAND,MAQA;AACI,YAAMC,eAAe,GAAGrB,KAAK,CAACsB,IAAN,CAAW,sBAAX,CAAxB;AACA,YAAMC,kBAAkB,GAAGvB,KAAK,CAACsB,IAAN,CAAW,6BAAX,EAA0C;AAAEE,QAAAA,QAAQ,EAAEb,UAAU,CAACc;AAAvB,OAA1C,CAA3B;AACA,UAAIC,QAAQ,GAAG,EAAf,CAHJ,CAKI;;AACA,UAAIC,KAAK,GAAG,IAAZ;AACA,UAAIC,GAAG,GAAG,2BAAV;AAAsC;;AACtC,UAAIjB,UAAU,CAACkB,SAAX,KAAyB,QAA7B,EAAsC;AAClCH,QAAAA,QAAQ,GAAG,CAACL,eAAD,EAAkBE,kBAAlB,CAAX;AACH,OAFD,MAGI;AACA,cAAMO,OAAO,GAAGnB,UAAU,CAACmB,OAA3B;;AACA,YAAIA,OAAO,CAACC,WAAR,KAAwBtB,iBAAiB,CAACuB,IAA9C,EAAmD;AAC/CL,UAAAA,KAAK,GAAG,KAAR;AACAC,UAAAA,GAAG,GAAE,yBAAL;AACH,SAHD,MAII;AACA,gBAAMK,eAAe,GAAIjC,KAAK,CAACsB,IAAN,CAAW,2CAAX,EACb;AAAE,aAACX,UAAU,CAACuB,eAAZ,GAA8BvB,UAAU,CAACwB,eAA3C;AACI,wBAAYxB,UAAU,CAACc;AAD3B,WADa,CAAzB;AAGAC,UAAAA,QAAQ,GAAG,CAACL,eAAD,EAAkBE,kBAAlB,EAAsCU,eAAtC,CAAX,CAJA,CAKA;AACH;AACJ;;AACD,UAAGN,KAAH,EAAS;AACLf,QAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,QAAAA,KAAK,CAACiC,GAAN,CAAUV,QAAV,EAECW,IAFD,CAEMC,QAAQ,IAAE;AAEZ,gBAAMC,WAAW,GAAGjC,mBAAmB,CAACgC,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,IAAoB,EAArB,EAAyB,eAAzB,EACnB,aADmB,EACJC,SADI,EACOA,SADP,EACkB,IADlB,CAAvC;AAGA,gBAAMC,YAAY,GAAGH,WAAW,CAACI,GAAZ,CAAgB,YAAhB,CAArB;AAEA,cAAIC,cAAc,GAAI,EAAtB;;AAEA,cAAIjC,UAAU,CAACkB,SAAX,KAAyB,QAA7B,EAAsC;AAElC,kBAAMgB,aAAa,GAAGP,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAlC;AACAI,YAAAA,cAAc,GAAGE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeV,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAA3B,CAAX,CAAjB;AAEA,kBAAMS,gBAAgB,GAAGX,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBU,MAAjB,CAAwBC,IAAI,IAAEA,IAAI,CAACC,aAAL,KAAuBR,cAAc,CAACS,eAApE,CAAzB;AAGAT,YAAAA,cAAc,CAAC,eAAD,CAAd,GAAkCrC,mBAAmB,CAACI,UAAU,CAACc,QAAZ,EAAsBoB,aAAa,CAAC,eAAD,CAAnC,CAArD;AACAD,YAAAA,cAAc,CAAC,iBAAD,CAAd,GAAoC;AAAC,uBAASK,gBAAgB,CAAC,CAAD,CAAhB,CAAoBG,aAA9B;AACA,uBAASH,gBAAgB,CAAC,CAAD,CAAhB,CAAoBK;AAD7B,aAApC;AAEAV,YAAAA,cAAc,CAAC,iBAAD,CAAd,GAAoCK,gBAAgB,CAAC,CAAD,CAAhB,CAAoBK,WAAxD;AACH,WAZD,MAaI;AACAV,YAAAA,cAAc,GAAI;AAAC,+BAAkBrC,mBAAmB,CAACI,UAAU,CAACc,QAAZ,EAAqBa,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAjC,CAAtC;AACF,iCAAkB;AAAC,yBAAS7B,UAAU,CAACc,QAAX,CAAoB2B,aAA9B;AACE,yBAASzC,UAAU,CAACc,QAAX,CAAoB6B;AAD/B,eADhB;AAGF,iCAAkB3C,UAAU,CAACc,QAAX,CAAoB6B;AAHpC,aAAlB;AAKH;;AAED1C,UAAAA,QAAQ,CAAC;AAAC2C,YAAAA,IAAI,EAAEtD,cAAP;AAAuBuD,YAAAA,OAAO,EAAC;AACpBd,cAAAA,YADoB;AAEpBb,cAAAA,SAAS,EAAClB,UAAU,CAACkB,SAFD;AAEY4B,cAAAA,UAAU,EAAC9C,UAAU,CAAC8C,UAFlC;AAGpBb,cAAAA,cAHoB;AAIpBc,cAAAA,SAAS,EAAG,IAJQ;AAKpBC,cAAAA,WAAW,EAAChD,UAAU,CAACgD,WALH;AAMpBC,cAAAA,YAAY,EAACjD,UAAU,CAACiD,YANJ;AAOpBC,cAAAA,OAAO,EAAC,KAPY;AAOLC,cAAAA,UAAU,EAACnD,UAAU,CAACwB;AAPjB;AAA/B,WAAD,CAAR;AASH,SAzCD,EA0CC4B,KA1CD,CA0COC,KAAK,IAAE;AACVpD,UAAAA,QAAQ,CAAC;AAAC2C,YAAAA,IAAI,EAAEtD,cAAP;AAAuBuD,YAAAA,OAAO,EAAE;AAACK,cAAAA,OAAO,EAAC;AAAT;AAAhC,WAAD,CAAR;;AACA,cAAIG,KAAK,CAAC1B,QAAN,CAAe2B,MAAf,KAA0B,GAA9B,EAAkC;AAC9B/D,YAAAA,KAAK,CAAC8D,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,WAFD,MAGI;AACAhE,YAAAA,KAAK,CAACgB,IAAN,CAAW8C,KAAK,CAAC1B,QAAN,CAAeE,IAA1B;AACH;AACJ,SAlDD;AAmDH,OArDD,MAsDI;AACAtC,QAAAA,KAAK,CAACgB,IAAN,CAAWV,IAAI,CAACW,aAAL,CAAmB;AAACC,UAAAA,EAAE,EAAEQ;AAAL,SAAnB,CAAX;AACH;AACJ;AAER,GAjGG;AAiGF;AAEF,OAAO,SAASuC,2BAAT,CAAqCxD,UAArC,EAAiD;AACpD,SAAO,UAAUC,QAAV,EAAoB;AAC3BA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR,CAD2B,CAE3B;;AACA,QAAIgE,UAAU,GAAGzD,UAAU,CAACyD,UAA5B;AAEA,WAAOpE,KAAK,CAACsB,IAAN,CAAW,oCAAX,EAAiD;AAAC+C,MAAAA,iBAAiB,EAACC,QAAQ,CAAC3D,UAAU,CAAC0D,iBAAZ,CAA3B;AACxC7C,MAAAA,QAAQ,EAACb,UAAU,CAACc;AADoB,KAAjD,EAEPY,IAFO,CAEFC,QAAQ,IAAE;AAEX8B,MAAAA,UAAU,GAAG,EAAC,GAAGA,UAAJ;AAAgB,WAAG9B,QAAQ,CAACE;AAA5B,OAAb;AACAnC,MAAAA,QAAQ,CAAC+D,UAAD,CAAR;AACAxD,MAAAA,QAAQ,CAAC;AAAC2C,QAAAA,IAAI,EAAEtD,cAAP;AAAuBuD,QAAAA,OAAO,EAAC;AAACY,UAAAA,UAAD;AAAaP,UAAAA,OAAO,EAAC;AAArB;AAA/B,OAAD,CAAR;AACJ,KAPO,EAQPE,KARO,CAQDC,KAAK,IAAE;AACTpD,MAAAA,QAAQ,CAAC;AAAC2C,QAAAA,IAAI,EAAEtD,cAAP;AAAuBuD,QAAAA,OAAO,EAAE;AAACK,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACD,UAAIG,KAAK,CAAC1B,QAAN,CAAe2B,MAAf,KAA0B,GAA9B,EAAkC;AAC9B/D,QAAAA,KAAK,CAAC8D,KAAN,CAAYxD,IAAI,CAACW,aAAL,CAAmB;AAACC,UAAAA,EAAE,EAAE4C,KAAK,CAACE;AAAX,SAAnB,CAAZ;AACH,OAFD,MAGI;AACAhE,QAAAA,KAAK,CAACgB,IAAN,CAAWV,IAAI,CAACW,aAAL,CAAmB;AAACC,UAAAA,EAAE,EAAE4C,KAAK,CAAC1B,QAAN,CAAeE;AAApB,SAAnB,CAAX;AACH;AAEJ,KAjBO,CAAP;AAkBH,GAvBG;AAuBF;AAGF,OAAO,SAAS+B,qBAAT,CAA+B5D,UAA/B,EAA2C;AAC9C,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAJ,IAAAA,KAAK,CAACsB,IAAN,CAAW,oCAAX,EAAiD,EAAC,GAAGX,UAAU,CAAC6D;AAAf,KAAjD,EACKnC,IADL,CACUC,QAAQ,IAAI;AACd,UAAImC,YAAY,GAAG,EAAE,GAAGnC,QAAQ,CAACE;AAAd,OAAnB;AACAiC,MAAAA,YAAY,GAAGpE,QAAQ,CAACoE,YAAD,CAAvB;AACA,UAAIL,UAAU,GAAG,EACb,GAAGzD,UAAU,CAACyD,UADD;AAEb,WAAGK;AAFU,OAAjB;;AAIA,UAAI9D,UAAU,CAAC+D,SAAX,KAAyBjC,SAAzB,IAAsC9B,UAAU,CAAC+D,SAAX,CAAqBC,OAArB,KAAiC,IAA3E,EAAiF;AAC7EhE,QAAAA,UAAU,CAAC+D,SAAX,CAAqBC,OAArB,CAA6BC,KAA7B,GAAqC,EAArC;AACAR,QAAAA,UAAU,CAAC,cAAD,CAAV,GAA6B3B,SAA7B;AACH;;AACD7B,MAAAA,QAAQ,CAAC;AACL2C,QAAAA,IAAI,EAAEtD,cADD;AACiBuD,QAAAA,OAAO,EAAE;AAC3BY,UAAAA,UAD2B;AAE3BP,UAAAA,OAAO,EAAE,KAFkB;AAG3BgB,UAAAA,UAAU,EAAE;AAHe;AAD1B,OAAD,CAAR;AAOH,KAnBL,EAoBKd,KApBL,CAoBWC,KAAK,IAAI;AACZpD,MAAAA,QAAQ,CAAC;AAAE2C,QAAAA,IAAI,EAAEtD,cAAR;AAAwBuD,QAAAA,OAAO,EAAE;AAAEK,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIG,KAAK,CAAC1B,QAAN,CAAe2B,MAAf,KAA0B,GAA9B,EAAmC;AAC/B/D,QAAAA,KAAK,CAAC8D,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDhE,QAAAA,KAAK,CAACgB,IAAN,CAAW8C,KAAK,CAAC1B,QAAN,CAAeE,IAA1B;AACH;AACJ,KA5BL;AA6BH,GA/BD;AAgCH","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport {sortData, constructOptionList, rearrangeDateFormat} from '../components/CommonScript';\r\nimport { intl } from '../components/App';\r\nimport {transactionStatus} from '../components/Enumeration';\r\n\r\nexport function getClockMonitoringComboService(inputParam){   \r\n    return function (dispatch) {          \r\n\r\n        // if (inputParam.selectedBatch.ntransactionstatus === transactionStatus.CERTIFIED){\r\n        //     toast.warn(intl.formatMessage({id: \"IDS_ALREADYCERTIFIED\"}));\r\n        // }\r\n        if (inputParam.selectedBatch.ntransactionstatus === transactionStatus.CERTIFIED\r\n            || inputParam.selectedBatch.ntransactionstatus === transactionStatus.NULLIFIED\r\n            || inputParam.selectedBatch.ntransactionstatus === transactionStatus.SENT)\r\n        {\r\n            //const message = \"IDS_CANNOTDELETE\"+inputParam.selectedBatch.stransactionstatus.toUpperCase() +\"RECORD\";\r\n            toast.warn(intl.formatMessage({id:\"IDS_CANNOTEDITCERTIFIEDCLOCK\"}));\r\n        }\r\n        else\r\n        {\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\"); \r\n            const utcTimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputParam.userInfo });      \r\n            let urlArray = [];\r\n\r\n            //let selectedId = null;\r\n            let valid = true;\r\n            let msg = \"IDS_CANNOTCREATEAUTOCLOCK\";;\r\n            if (inputParam.operation === \"create\"){\r\n                urlArray = [timeZoneService, utcTimeZoneService];\r\n            }\r\n            else{\r\n                const editRow = inputParam.editRow;\r\n                if (editRow.nactiontype === transactionStatus.AUTO){\r\n                    valid = false;\r\n                    msg =\"IDS_CANNOTEDITAUTOCLOCK\";\r\n                }\r\n                else{\r\n                    const activeClockById =  rsapi.post(\"clockmonitoring/getActiveClockHistoryById\", \r\n                                { [inputParam.primaryKeyField] :inputParam.primaryKeyValue , \r\n                                    \"userinfo\": inputParam.userInfo} );\r\n                    urlArray = [timeZoneService, utcTimeZoneService, activeClockById];\r\n                    //selectedId = inputParam.primaryKeyValue;\r\n                }\r\n            }\r\n            if(valid){\r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n            \r\n                .then(response=>{   \r\n\r\n                    const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\",\r\n                                        \"stimezoneid\", undefined, undefined, true);\r\n\r\n                    const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n\r\n                    let selectedRecord =  {}; \r\n\r\n                    if (inputParam.operation === \"update\"){\r\n                    \r\n                        const selectedClock = response[2].data; \r\n                        selectedRecord = JSON.parse(JSON.stringify(response[2].data));\r\n\r\n                        const selectedTimeZone = response[0].data.filter(item=>item.ntimezonecode === selectedRecord.ntzapproveddate);\r\n\r\n                    \r\n                        selectedRecord[\"dapproveddate\"] = rearrangeDateFormat(inputParam.userInfo, selectedClock[\"sapproveddate\"]);\r\n                        selectedRecord[\"ntzapproveddate\"] = {\"value\": selectedTimeZone[0].ntimezonecode, \r\n                                                            \"label\": selectedTimeZone[0].stimezoneid};\r\n                        selectedRecord[\"stzapproveddate\"] = selectedTimeZone[0].stimezoneid;\r\n                    }\r\n                    else{\r\n                        selectedRecord =  {\"dapproveddate\" : rearrangeDateFormat(inputParam.userInfo,response[1].data),\r\n                                        \"ntzapproveddate\":{\"value\": inputParam.userInfo.ntimezonecode, \r\n                                                            \"label\": inputParam.userInfo.stimezoneid},\r\n                                        \"stzapproveddate\":inputParam.userInfo.stimezoneid\r\n                                    };\r\n                    }\r\n                                    \r\n                    dispatch({type: DEFAULT_RETURN, payload:{  \r\n                                        timeZoneList,                                                                                     \r\n                                        operation:inputParam.operation, screenName:inputParam.screenName,   \r\n                                        selectedRecord, \r\n                                        openModal : true,\r\n                                        clockAction:inputParam.clockAction,\r\n                                        ncontrolCode:inputParam.ncontrolCode,\r\n                                        loading:false, selectedId:inputParam.primaryKeyValue\r\n                                        }});\r\n                })\r\n                .catch(error=>{\r\n                    dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                    if (error.response.status === 500){\r\n                        toast.error(error.message);\r\n                    } \r\n                    else{               \r\n                        toast.warn(error.response.data);\r\n                    }  \r\n                }) \r\n            }\r\n            else{\r\n                toast.warn(intl.formatMessage({id: msg}));\r\n            }\r\n        }\r\n        \r\n}}\r\n\r\nexport function getClockBatchCreationDetail(inputParam) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true)); \r\n    //const batchParam = inputParam.batchParam;\r\n    let masterData = inputParam.masterData;\r\n   \r\n    return rsapi.post(\"clockmonitoring/getClockMonitoring\", {nreleasebatchcode:parseInt(inputParam.nreleasebatchcode), \r\n                    userinfo:inputParam.userInfo})\r\n   .then(response=>{ \r\n      \r\n        masterData = {...masterData, ...response.data};        \r\n        sortData(masterData);     \r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, loading:false}});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(intl.formatMessage({id: error.message}));\r\n       } \r\n       else{               \r\n           toast.warn(intl.formatMessage({id: error.response.data}));\r\n       }  \r\n  \r\n   })\r\n}}\r\n\r\n\r\nexport function reloadClockMonitoring(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"clockmonitoring/getClockMonitoring\", {...inputParam.inputData})\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\r\n                    inputParam.searchRef.current.value = \"\";\r\n                    masterData['searchedData'] = undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}