{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, getComboLabelValue, constructOptionList } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { transactionStatus, reportTypeEnum } from '../components/Enumeration';\nexport function getReportMasterComboService(inputParam) {\n  return function (dispatch) {\n    // if (inputParam.operation === \"create\" || (inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus !== transactionStatus.APPROVED))\n    // {      \n    dispatch(initRequest(true));\n    let nreportcode = null;\n\n    if (inputParam.operation === \"update\") {\n      nreportcode = inputParam.mastertoedit[inputParam.primaryKeyName];\n    }\n\n    return rsapi.post(\"reportconfig/getReportMasterComboData\", {\n      nreportcode,\n      userinfo: inputParam.userInfo,\n      filterreporttype: inputParam.filterReportType\n    }).then(response => {\n      const reportTypeMap = constructOptionList(response.data[\"ReportType\"] || [], \"nreporttypecode\", \"sdisplayname\", undefined, undefined, true);\n      const reportModuleMap = constructOptionList(response.data[\"ReportModule\"] || [], \"nreportmodulecode\", \"sdisplayname\", undefined, undefined, true);\n      const reportSubTypeMap = constructOptionList(response.data[\"COAReportType\"] || [], \"ncoareporttypecode\", \"scoareporttypename\", undefined, undefined, true);\n      const regTypeMap = constructOptionList(response.data[\"RegistrationType\"] || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, true);\n      const regSubTypeMap = constructOptionList(response.data[\"RegistrationSubType\"] || [], \"nregsubtypecode\", \"sregsubtypename\", undefined, undefined, true);\n      const sectionMap = constructOptionList(response.data[\"SectionList\"] || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n      const decisionTypeMap = constructOptionList(response.data[\"ReportDecisionType\"] || [], \"nreportdecisiontypecode\", \"sdecisiontypename\", undefined, undefined, true);\n      const certificateTypeMap = constructOptionList(response.data[\"CertificateType\"] || [], \"ncertificatetypecode\", \"scertificatetype\", undefined, undefined, true);\n      const controlScreenTypeMap = constructOptionList(response.data[\"ControlScreen\"] || [], \"nformcode\", \"sdisplaynames\", undefined, undefined, true);\n      const reportTypeList = reportTypeMap.get(\"OptionList\");\n      const reportModuleList = reportModuleMap.get(\"OptionList\");\n      const reportSubTypeList = reportSubTypeMap.get(\"OptionList\");\n      const regTypeList = regTypeMap.get(\"OptionList\");\n      const regSubTypeList = regSubTypeMap.get(\"OptionList\");\n      const sectionList = sectionMap.get(\"OptionList\");\n      const decisionTypeList = decisionTypeMap.get(\"OptionList\");\n      const certificateTypeList = certificateTypeMap.get(\"OptionList\");\n      const controlScreenTypeList = controlScreenTypeMap.get(\"OptionList\");\n      let selectedRecord = {\n        ntransactionstatus: transactionStatus.ACTIVE\n      };\n      let respObject = {\n        \"reportVersionStatus\": transactionStatus.DRAFT\n      };\n\n      if (inputParam.operation === \"update\") {\n        if (response.status === 202) {\n          respObject[\"reportVersionStatus\"] = transactionStatus.APPROVED;\n          respObject[\"ApprovedReportMaster\"] = response.data[\"SelectedReportDesigner\"];\n        }\n\n        selectedRecord = JSON.parse(JSON.stringify(response.data[\"SelectedReportDesigner\"]));\n\n        if (selectedRecord.nreporttypecode === reportTypeEnum.SAMPLE || selectedRecord.nreporttypecode === reportTypeEnum.COA) {\n          selectedRecord[\"nregtypecode\"] = {\n            value: response.data[\"SelectedReportDesigner\"].nregtypecode,\n            label: response.data[\"SelectedReportDesigner\"].sregtypename\n          };\n\n          if (response.data[\"SelectedReportDesigner\"].nregsubtypecode !== -1) {\n            selectedRecord[\"nregsubtypecode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].nregsubtypecode,\n              label: response.data[\"SelectedReportDesigner\"].sregsubtypename\n            };\n          } else {\n            selectedRecord[\"nregsubtypecode\"] = undefined;\n          }\n\n          if (response.data[\"SelectedReportDesigner\"].nsectioncode !== -1) {\n            selectedRecord[\"nsectioncode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].nsectioncode,\n              label: response.data[\"SelectedReportDesigner\"].ssectionname\n            };\n          } else {\n            selectedRecord[\"nsectioncode\"] = undefined;\n          }\n\n          if (response.data[\"SelectedReportDesigner\"].ncoareporttypecode !== -1) {\n            selectedRecord[\"ncoareporttypecode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].ncoareporttypecode,\n              label: response.data[\"SelectedReportDesigner\"].scoareporttypename\n            };\n          } else {\n            selectedRecord[\"ncoareporttypecode\"] = undefined;\n          }\n\n          if (selectedRecord.nreporttypecode === reportTypeEnum.SAMPLE) {\n            selectedRecord[\"nreportdecisiontypecode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].nreportdecisiontypecode,\n              label: response.data[\"SelectedReportDesigner\"].sdecisiontypename\n            };\n          }\n        } else if (selectedRecord.nreporttypecode === reportTypeEnum.MIS) {\n          selectedRecord[\"nreportmodulecode\"] = {\n            value: response.data[\"SelectedReportDesigner\"].nreportmodulecode,\n            label: response.data[\"SelectedReportDesigner\"].smoduledisplayname\n          };\n          selectedRecord[\"nreportmodule\"] = {\n            value: response.data[\"SelectedReportDesigner\"].smoduledisplayname,\n            label: response.data[\"SelectedReportDesigner\"].smoduledisplayname\n          };\n        } else if (selectedRecord.nreporttypecode === reportTypeEnum.SCREENWISE) {\n          selectedRecord[\"ncontrolcode\"] = {\n            value: response.data[\"SelectedReportDesigner\"].ncontrolcode,\n            label: response.data[\"SelectedReportDesigner\"].scontrolids\n          };\n          selectedRecord[\"nformcode\"] = {\n            value: response.data[\"SelectedReportDesigner\"].nformcode,\n            label: response.data[\"SelectedReportDesigner\"].sdisplayname\n          };\n        }\n\n        if (selectedRecord.nreporttypecode === reportTypeEnum.SAMPLE || selectedRecord.nreporttypecode === reportTypeEnum.BATCH) {\n          if (response.data[\"SelectedReportDesigner\"].ncoareporttypecode !== -1) {\n            selectedRecord[\"ncoareporttypecode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].ncoareporttypecode,\n              label: response.data[\"SelectedReportDesigner\"].scoareporttypename\n            };\n          } else {\n            selectedRecord[\"ncoareporttypecode\"] = undefined;\n          }\n\n          selectedRecord[\"ncertificatetypecode\"] = {\n            value: response.data[\"SelectedReportDesigner\"].ncertificatetypecode,\n            label: response.data[\"SelectedReportDesigner\"].scertificatetype\n          };\n          selectedRecord[\"sbatchtypename\"] = response.data[\"SelectedReportDesigner\"].sbatchtypename;\n        }\n\n        selectedRecord[\"ntransactionstatus\"] = response.data[\"SelectedReportDesigner\"].ntransactionstatus;\n        selectedRecord[\"nreporttypecode\"] = {\n          item: response.data[\"SelectedReportDesigner\"],\n          value: response.data[\"SelectedReportDesigner\"].nreporttypecode,\n          label: response.data[\"SelectedReportDesigner\"].sreportdisplayname\n        };\n      }\n\n      respObject = { ...respObject,\n        reportSubTypeList,\n        //:response.data[\"COAReportType\"]  || [], \n        regTypeList,\n        //:response.data[\"RegistrationType\"]  || [],                                                               \n        regSubTypeList,\n        //:response.data[\"RegistrationSubType\"]  || [],  \n        sectionList,\n        //:response.data[\"SectionList\"] || [],   \n        certificateTypeList,\n        reportDecisionTypeList: decisionTypeList,\n        controlScreen: controlScreenTypeList //masterData:{...inputParam.masterData, SelectedFilterReportType:response.data[\"SelectedReportType\"] }                                                             \n\n      };\n\n      if (inputParam.operation === \"create\") {\n        selectedRecord[\"nreporttypecode\"] = {\n          item: response.data[\"SelectedReportType\"],\n          label: response.data[\"SelectedReportType\"].sdisplayname,\n          value: response.data[\"SelectedReportType\"].nreporttypecode\n        };\n\n        if (selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE && selectedRecord[\"nreporttypecode\"]['item'].isneedregtype === transactionStatus.YES) {\n          selectedRecord[\"nregtypecode\"] = getComboLabelValue(response.data[\"SelectedRegType\"], response.data[\"RegistrationType\"], \"nregtypecode\", \"sregtypename\");\n\n          if (selectedRecord[\"nreporttypecode\"]['item'].isneedsection === transactionStatus.YES) {\n            selectedRecord[\"nsectioncode\"] = sectionMap.get(\"DefaultValue\");\n          }\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          reportTypeList,\n          //:response.data[\"ReportType\"] || [], \n          reportModuleList,\n          //:response.data[\"ReportModule\"] || [] ,\n          ...respObject,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          selectedRecord,\n          openModal: true,\n          ncontrolCode: inputParam.ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); // }\n    // else{       \n    //     toast.warn(intl.formatMessage({id: \"IDS_CANNOTUPDATEAPPROVEDREPORT\"}));\n    // }\n  };\n}\nexport function getReportDetailComboService(inputParam) {\n  return function (dispatch) {\n    if (inputParam.operation === \"create\" || inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus === transactionStatus.DRAFT) {\n      if (inputParam.masterData.SelectedReportMaster !== null) {\n        dispatch(initRequest(true));\n        let nreportdetailcode = null;\n\n        if (inputParam.operation === \"update\") {\n          nreportdetailcode = inputParam.detailtoedit[inputParam.primaryKeyName];\n        }\n\n        return rsapi.post(\"reportconfig/getReportDetailComboData\", {\n          nreportdetailcode,\n          reportmaster: inputParam.masterData.SelectedReportMaster,\n          userinfo: inputParam.userInfo\n        }).then(response => {\n          // const reportType = response.data[\"SelectedReportType\"];\n          // const reportSubTypeMap  = constructOptionList(response.data[\"COAReportType\"] ||[], \"ncoareporttypecode\",\n          //                             \"scoareporttypename\" , undefined, undefined, true);    \n          // const sectionMap  = constructOptionList(response.data[\"SectionList\"] ||[], \"nsectioncode\",\n          //                             \"ssectionname\", undefined, undefined, true);\n          // const decisionTypeMap  = constructOptionList(response.data[\"ReportDecisionType\"] ||[], \"nreportdecisiontypecode\",\n          //                             \"sdecisiontypename\" , undefined, undefined, true);   \n          // const certificateTypeMap  = constructOptionList(response.data[\"CertificateType\"] ||[], \"ncertificatetypecode\",\n          //                             \"scertificatetype\" , undefined, undefined, true);\n          // const  reportSubTypeList = reportSubTypeMap.get(\"OptionList\");\n          // const  sectionList = sectionMap.get(\"OptionList\"); \n          // const  decisionTypeList = decisionTypeMap.get(\"OptionList\");\n          // const  certificateTypeList = certificateTypeMap.get(\"OptionList\");  \n          let selectedRecord = {};\n          let respObject = {};\n\n          if (inputParam.operation === \"update\") {\n            selectedRecord = response.data[\"SelectedReportDetail\"];\n          }\n\n          selectedRecord[\"ntransactionstatus\"] = transactionStatus.DRAFT; //    console.log(\"selected in action:\", selectedRecord);\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...respObject,\n              operation: inputParam.operation,\n              screenName: inputParam.screenName,\n              selectedRecord,\n              openModal: true,\n              ncontrolCode: inputParam.ncontrolcode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_REPORTNOTFOUND\"\n        }));\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_CANNOTEDITAPPROVEDREPORT\"\n      }));\n    }\n  };\n}\nexport function getSelectedReportMasterDetail(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getReportDesigner\", {\n      nreportcode: parseInt(inputParam.nreportcode),\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      const masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSelectedReportDetail(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getReportDetail\", {\n      nreportdetailcode: parseInt(inputParam.nreportdetailcode),\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      const masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getConfigReportComboService(inputParam) {\n  return function (dispatch) {\n    if (inputParam.reportMaster.nreporttypecode === reportTypeEnum.MIS) {\n      if (inputParam.reportDetail.ntransactionstatus === transactionStatus.DRAFT) {\n        dispatch(initRequest(true));\n        return rsapi.post(\"reportconfig/getReportAddDesignComboData\", {\n          nreportdetailcode: parseInt(inputParam.reportDetail.nreportdetailcode),\n          userinfo: inputParam.userInfo\n        }).then(response => {\n          const parameterMap = constructOptionList(response.data[\"ReportParameter\"] || [], \"nreportparametercode\", \"sreportparametername\", undefined, undefined, true);\n          const reportParameterList = parameterMap.get(\"OptionList\");\n          const designComponentMap = constructOptionList(response.data[\"DesignComponents\"] || [], \"ndesigncomponentcode\", \"sdesigncomponentname\", undefined, undefined, true);\n          const designComponentList = designComponentMap.get(\"OptionList\");\n          const sqlQueryMap = constructOptionList(response.data[\"SQLQuery\"] || [], \"nsqlquerycode\", \"ssqlqueryname\", undefined, undefined, true);\n          const sqlQueryList = sqlQueryMap.get(\"OptionList\");\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              reportParameterList,\n              //:response.data[\"ReportParameter\"] || [], \n              designComponentList,\n              //:response.data[\"DesignComponents\"] || [],\n              sqlQueryList,\n              //:response.data[\"SQLQuery\"] || [], \n              operation: inputParam.operation,\n              screenName: inputParam.screenName,\n              //selectedRecord:{nmandatory:transactionStatus.YES}, \n              selectedRecord: {},\n              openModal: true,\n              ncontrolCode: inputParam.ncontrolCode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_CANNOTCONFIGUREAPPROVEDREPORT\"\n        }));\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_CANCONFIGUREMISREPORT\"\n      }));\n    }\n  };\n}\nexport function getParameterMappingComboService(inputParam) {\n  return function (dispatch) {\n    if (inputParam.reportMaster.nreporttypecode === reportTypeEnum.MIS) {\n      if (inputParam.reportDetail.ntransactionstatus === transactionStatus.DRAFT) {\n        dispatch(initRequest(true));\n        return rsapi.post(\"reportconfig/getReportParameterMappingComboData\", {\n          nreportdetailcode: parseInt(inputParam.reportDetail.nreportdetailcode),\n          userinfo: inputParam.userInfo\n        }).then(response => {\n          if (response.data[\"ChildComponentList\"].length > 0) {\n            const parentComponentMap = constructOptionList(response.data[\"ParentComponentList\"] || [], \"nreportdesigncode\", \"sdisplayname\", undefined, undefined, true);\n            const parentComponentList = parentComponentMap.get(\"OptionList\");\n            const childComponentMap = constructOptionList(response.data[\"ChildComponentList\"] || [], \"nreportdesigncode\", \"sdisplayname\", undefined, undefined, true);\n            const childComponentList = childComponentMap.get(\"OptionList\");\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                parentComponentList,\n                //:response.data[\"ParentComponenList\"] || [],\n                childComponentList,\n                //:response.data[\"ChildComponentList\"] || [], \n                operation: inputParam.operation,\n                screenName: inputParam.screenName,\n                selectedRecord: {},\n                openModal: true,\n                ncontrolCode: inputParam.ncontrolCode,\n                loading: false\n              }\n            });\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false\n              }\n            });\n            toast.warn(intl.formatMessage({\n              id: \"IDS_NOPARAMETERSTOMAP\"\n            }));\n          }\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_CANNOTMAPAPPROVEDREPORT\"\n        }));\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_CANMAPMISREPORT\"\n      }));\n    }\n  };\n}\nexport function viewReportDetail(reportmaster, userInfo, masterData) {\n  return function (dispatch) {\n    if (reportmaster !== undefined) {\n      dispatch(initRequest(true));\n      return rsapi.post(\"reportview/viewReport\", {\n        reportmaster,\n        userinfo: userInfo\n      }).then(response => {\n        // console.log(\"report action:\", response);\n        masterData = { ...masterData,\n          ...response.data\n        };\n\n        if (response.data[\"ViewReportDesignConfig\"] !== undefined) {\n          masterData[\"ReportPDFFile\"] = undefined;\n        } else {\n          document.getElementById(\"download_data\").setAttribute(\"href\", masterData[\"ReportPDFFile\"]);\n          document.getElementById(\"download_data\").click();\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_REPORTNOTFOUND\"\n      }));\n    }\n  };\n} // export function getActionMappingComboService(inputParam) {\n//     return function (dispatch) {   \n//     if (inputParam.reportDetail.ntransactionstatus === transactionStatus.DRAFT){\n//             dispatch(initRequest(true));\n//             return rsapi.post(\"reportconfig/getActionMappingComboData\", {nreportdetailcode:parseInt(inputParam.reportDetail.nreportdetailcode),\n//                                         userinfo:inputParam.userInfo})\n//         .then(response=>{ \n//             if (response.data[\"ActionMappingChild\"].length > 0)\n//             {     \n//                     dispatch({type: DEFAULT_RETURN, payload:{actionMappingParentList:response.data[\"ActionMappingParent\"] || [],\n//                                                             actionMappingChildList:response.data[\"ActionMappingChild\"] || [], \n//                                                             operation:inputParam.operation, \n//                                                             screenName:inputParam.screenName,   \n//                                                             selectedRecord:{}, \n//                                                             openModal : true,\n//                                                             ncontrolCode:inputParam.ncontrolCode,\n//                                                             loading:false\n//                                                             }}); \n//             }\n//             else{\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\n//                 toast.warn(intl.formatMessage({id:\"IDS_NOACTIONSTOMAP\"}))\n//             }\n//         })\n//         .catch(error=>{\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\n//             if (error.response.status === 500){\n//                 toast.error(error.message);\n//             } \n//             else{               \n//                 toast.warn(error.response.data);\n//             }  \n//         })\n//     }\n//     else{\n//         toast.warn(intl.formatMessage({id:\"IDS_CANNOTACTIONMAPAPPROVEDREPORT\"}))\n//     }\n// }}\n\nexport function getReportViewChildDataList(inputParam) {\n  return function (dispatch) {\n    // dispatch(initRequest(true));\n    return rsapi.post(\"reportview/getChildDataList\", { ...inputParam[\"inputData\"]\n    }).then(response => {\n      const controlList = inputParam.viewReportDesignConfigList;\n      const selectedRecord = inputParam.selectedRecord;\n      Object.keys(response.data).map(displayName => {\n        const index = controlList.findIndex(item => displayName === item.sdisplayname);\n        const comboMap = constructOptionList(response.data[displayName] || [], controlList[index].svaluemember, controlList[index].sdisplaymember, undefined, undefined, true);\n        const comboList = comboMap.get(\"OptionList\");\n        selectedRecord[controlList[index].svaluemember] = undefined;\n        return controlList[index][\"dataList\"] = comboList; //response.data[displayName]\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          viewReportDesignConfigList: controlList,\n          loading: false,\n          inputFieldData: inputParam.inputData.inputfielddata,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function viewReportDetailWithParameters(viewReportParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportview/viewReportWithParameters\", { ...viewReportParam\n    }).then(response => {\n      const masterData = { ...viewReportParam.masterData,\n        ReportPDFFile: response.data[\"ReportPDFFile\"],\n        SelectedReportDetails: response.data[\"SelectedReportDetails\"],\n        ReportPDFPath: response.data[\"ReportPDFPath\"],\n        ViewReportDesignConfig: undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false //openModal:false\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportsByModule(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportview/getReportView\", {\n      nreportmodulecode: inputParam.nreportmodulecode,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      const masterData = { ...inputParam.masterData,\n        ...response.data\n      }; // const  reportModuleMap  = constructOptionList(masterData.ViewReportModuleList ||[], \"nreportmodulecode\",\n      //                          \"smoduledisplayname\" , undefined, undefined, true);\n      // const  reportModuleList  = reportModuleMap.get(\"OptionList\");\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          //viewReportModuleList:reportModuleList,\n          operation: null,\n          modalName: undefined,\n          loading: false,\n          selectedRecord: inputParam.selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getControlButton(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getControlButton\", {\n      nformcode: inputParam.ControlScreen.nformcode,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      const controlButtonMap = constructOptionList(response.data || [], \"ncontrolcode\", \"scontrolids\", undefined, undefined, true);\n      const controlButtonList = controlButtonMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          controlButton: controlButtonList,\n          //: response.data,                                            \n          loading: false,\n          selectedRecord: { ...inputParam.selectedRecord,\n            nregsubtypecode: undefined //nregsubtypecode:{label:\"Please Select...\", value:-4}\n\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportRegSubType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getReportRegistrationSubType\", {\n      nregtypecode: inputParam.registrationType.nregtypecode,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      const regSubTypeMap = constructOptionList(response.data || [], \"nregsubtypecode\", \"sregsubtypename\", undefined, undefined, true);\n      const regSubTypeList = regSubTypeMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          regSubTypeList,\n          //: response.data,                                            \n          loading: false,\n          selectedRecord: { ...inputParam.selectedRecord,\n            nregsubtypecode: undefined //nregsubtypecode:{label:\"Please Select...\", value:-4}\n\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportSubType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getReportSubType\", {\n      nreporttypecode: inputParam.reportType.nreporttypecode,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      const reportSubTypeMap = constructOptionList(response.data.CoaReportType || [], \"ncoareporttypecode\", \"scoareporttypename\", undefined, undefined, true);\n      const reportSubTypeList = reportSubTypeMap.get(\"OptionList\");\n      const certificateTypeMap = constructOptionList(response.data.CertificateType || [], \"ncertificatetypecode\", \"scertificatetype\", undefined, undefined, true);\n      const certificateTypeList = certificateTypeMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          reportSubTypeList,\n          certificateTypeList,\n          loading: false,\n          selectedRecord: { ...inputParam.selectedRecord,\n            ncoareporttypecode: undefined,\n            ncertificatetypecode: \"\" // ncoareporttypecode:{label:\"Please Select...\", value:-4}\n\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getregtype(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getRegistrationtypeForSample\", {\n      nregtypecode: inputParam.nregtypecode,\n      nreporttypecode: inputParam.reportType.nreporttypecode,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      // const reportRegTypeMap  = constructOptionList(response.data.Regtype ||[], \"nregtypecode\",\n      //                          \"sregtypename\" , undefined, undefined, true);   \n      // const  reportRegTypeList = reportRegTypeMap.get(\"OptionList\");\n      // // const reportRegSubTypeMap  = constructOptionList(response.data.RegSubtype ||[], \"nregsubtypecode\",\n      // // \"sregsubtypename\" , undefined, undefined, true);   \n      // //   const  reportRegSubTypeList = reportRegSubTypeMap.get(\"OptionList\");\n      const regTypeMap = constructOptionList(response.data[\"RegistrationType\"] || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, true);\n      const regTypeList = regTypeMap.get(\"OptionList\");\n      const regSubTypeMap = constructOptionList(response.data[\"RegistrationSubType\"] || [], \"nregsubtypecode\", \"sregsubtypename\", undefined, undefined, true);\n      const regSubTypeList = regSubTypeMap.get(\"OptionList\");\n      const coaReportTypeMap = constructOptionList(response.data.COAReportType || [], \"ncoareporttypecode\", \"scoareporttypename\", undefined, undefined, true);\n      const reportSubTypeList = coaReportTypeMap.get(\"OptionList\");\n      const certificateType = constructOptionList(response.data.CertificateType || [], \"ncertificatetypecode\", \"scertificatetype\", undefined, undefined, true);\n      const certificateTypeList = certificateType.get(\"OptionList\");\n      const nregtypecode = getComboLabelValue(response.data[\"SelectedRegType\"], response.data[\"RegistrationType\"], \"nregtypecode\", \"sregtypename\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          regTypeList,\n          regSubTypeList,\n          reportSubTypeList,\n          loading: false,\n          certificateTypeList,\n          selectedRecord: { ...inputParam.selectedRecord,\n            nregtypecode: nregtypecode,\n            nregsubtypecode: undefined,\n            ncoareporttypecode: undefined,\n            ncertificatetypecode: \"\"\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/ReportDesignerAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","getComboLabelValue","constructOptionList","toast","initRequest","intl","transactionStatus","reportTypeEnum","getReportMasterComboService","inputParam","dispatch","nreportcode","operation","mastertoedit","primaryKeyName","post","userinfo","userInfo","filterreporttype","filterReportType","then","response","reportTypeMap","data","undefined","reportModuleMap","reportSubTypeMap","regTypeMap","regSubTypeMap","sectionMap","decisionTypeMap","certificateTypeMap","controlScreenTypeMap","reportTypeList","get","reportModuleList","reportSubTypeList","regTypeList","regSubTypeList","sectionList","decisionTypeList","certificateTypeList","controlScreenTypeList","selectedRecord","ntransactionstatus","ACTIVE","respObject","DRAFT","status","APPROVED","JSON","parse","stringify","nreporttypecode","SAMPLE","COA","value","nregtypecode","label","sregtypename","nregsubtypecode","sregsubtypename","nsectioncode","ssectionname","ncoareporttypecode","scoareporttypename","nreportdecisiontypecode","sdecisiontypename","MIS","nreportmodulecode","smoduledisplayname","SCREENWISE","ncontrolcode","scontrolids","nformcode","sdisplayname","BATCH","ncertificatetypecode","scertificatetype","sbatchtypename","item","sreportdisplayname","reportDecisionTypeList","controlScreen","isneedregtype","YES","isneedsection","type","payload","screenName","openModal","ncontrolCode","loading","catch","error","message","warn","getReportDetailComboService","detailtoedit","masterData","SelectedReportMaster","nreportdetailcode","reportmaster","formatMessage","id","getSelectedReportMasterDetail","parseInt","modalName","getSelectedReportDetail","getConfigReportComboService","reportMaster","reportDetail","parameterMap","reportParameterList","designComponentMap","designComponentList","sqlQueryMap","sqlQueryList","getParameterMappingComboService","length","parentComponentMap","parentComponentList","childComponentMap","childComponentList","viewReportDetail","document","getElementById","setAttribute","click","getReportViewChildDataList","controlList","viewReportDesignConfigList","Object","keys","map","displayName","index","findIndex","comboMap","svaluemember","sdisplaymember","comboList","inputFieldData","inputData","inputfielddata","viewReportDetailWithParameters","viewReportParam","ReportPDFFile","SelectedReportDetails","ReportPDFPath","ViewReportDesignConfig","getReportsByModule","getControlButton","ControlScreen","controlButtonMap","controlButtonList","controlButton","getReportRegSubType","registrationType","getReportSubType","reportType","CoaReportType","CertificateType","getregtype","coaReportTypeMap","COAReportType","certificateType"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAAQC,cAAR,QAA6B,cAA7B;AACA,SAAQC,QAAR,EAAkBC,kBAAlB,EAAsCC,mBAAtC,QAAgE,4BAAhE;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAAQC,iBAAR,EAA2BC,cAA3B,QAAgD,2BAAhD;AAEA,OAAO,SAASC,2BAAT,CAAqCC,UAArC,EAAgD;AACnD,SAAO,UAAUC,QAAV,EAAoB;AACvB;AACA;AACIA,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,QAAIO,WAAW,GAAG,IAAlB;;AACA,QAAIF,UAAU,CAACG,SAAX,KAAyB,QAA7B,EAAsC;AAClCD,MAAAA,WAAW,GAAGF,UAAU,CAACI,YAAX,CAAwBJ,UAAU,CAACK,cAAnC,CAAd;AACH;;AACD,WAAQhB,KAAK,CAACiB,IAAN,CAAW,uCAAX,EAAmD;AAACJ,MAAAA,WAAD;AACCK,MAAAA,QAAQ,EAACP,UAAU,CAACQ,QADrB;AAECC,MAAAA,gBAAgB,EAAGT,UAAU,CAACU;AAF/B,KAAnD,EAGPC,IAHO,CAGFC,QAAQ,IAAE;AAEZ,YAAMC,aAAa,GAAGpB,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc,YAAd,KAA+B,EAAhC,EAAoC,iBAApC,EACrB,cADqB,EACLC,SADK,EACMA,SADN,EACiB,IADjB,CAAzC;AAEA,YAAMC,eAAe,GAAIvB,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc,cAAd,KAAgC,EAAjC,EAAqC,mBAArC,EACxB,cADwB,EACPC,SADO,EACIA,SADJ,EACe,IADf,CAA5C;AAEA,YAAME,gBAAgB,GAAIxB,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc,eAAd,KAAiC,EAAlC,EAAsC,oBAAtC,EACzB,oBADyB,EACFC,SADE,EACSA,SADT,EACoB,IADpB,CAA7C;AAEA,YAAMG,UAAU,GAAIzB,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc,kBAAd,KAAoC,EAArC,EAAyC,cAAzC,EACnB,cADmB,EACFC,SADE,EACSA,SADT,EACoB,IADpB,CAAvC;AAEA,YAAMI,aAAa,GAAI1B,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc,qBAAd,KAAuC,EAAxC,EAA4C,iBAA5C,EACtB,iBADsB,EACFC,SADE,EACSA,SADT,EACoB,IADpB,CAA1C;AAEA,YAAMK,UAAU,GAAI3B,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc,aAAd,KAA+B,EAAhC,EAAoC,cAApC,EACnB,cADmB,EACHC,SADG,EACQA,SADR,EACmB,IADnB,CAAvC;AAEA,YAAMM,eAAe,GAAI5B,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc,oBAAd,KAAsC,EAAvC,EAA2C,yBAA3C,EACxB,mBADwB,EACFC,SADE,EACSA,SADT,EACoB,IADpB,CAA5C;AAEA,YAAMO,kBAAkB,GAAI7B,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc,iBAAd,KAAmC,EAApC,EAAwC,sBAAxC,EAC3B,kBAD2B,EACNC,SADM,EACKA,SADL,EACgB,IADhB,CAA/C;AAEA,YAAMQ,oBAAoB,GAAI9B,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc,eAAd,KAAiC,EAAlC,EAAsC,WAAtC,EAC7B,eAD6B,EACXC,SADW,EACAA,SADA,EACW,IADX,CAAjD;AAGA,YAAOS,cAAc,GAAIX,aAAa,CAACY,GAAd,CAAkB,YAAlB,CAAzB;AACA,YAAOC,gBAAgB,GAAGV,eAAe,CAACS,GAAhB,CAAoB,YAApB,CAA1B;AACA,YAAOE,iBAAiB,GAAGV,gBAAgB,CAACQ,GAAjB,CAAqB,YAArB,CAA3B;AACA,YAAOG,WAAW,GAAGV,UAAU,CAACO,GAAX,CAAe,YAAf,CAArB;AACA,YAAOI,cAAc,GAAGV,aAAa,CAACM,GAAd,CAAkB,YAAlB,CAAxB;AACA,YAAOK,WAAW,GAAGV,UAAU,CAACK,GAAX,CAAe,YAAf,CAArB;AACA,YAAOM,gBAAgB,GAAGV,eAAe,CAACI,GAAhB,CAAoB,YAApB,CAA1B;AACA,YAAOO,mBAAmB,GAAGV,kBAAkB,CAACG,GAAnB,CAAuB,YAAvB,CAA7B;AACA,YAAOQ,qBAAqB,GAAGV,oBAAoB,CAACE,GAArB,CAAyB,YAAzB,CAA/B;AAEA,UAAIS,cAAc,GAAI;AAACC,QAAAA,kBAAkB,EAACtC,iBAAiB,CAACuC;AAAtC,OAAtB;AACA,UAAIC,UAAU,GAAG;AAAC,+BAAuBxC,iBAAiB,CAACyC;AAA1C,OAAjB;;AAEA,UAAItC,UAAU,CAACG,SAAX,KAAyB,QAA7B,EAAsC;AAClC,YAAIS,QAAQ,CAAC2B,MAAT,KAAoB,GAAxB,EAA4B;AACxBF,UAAAA,UAAU,CAAC,qBAAD,CAAV,GAAoCxC,iBAAiB,CAAC2C,QAAtD;AACAH,UAAAA,UAAU,CAAC,sBAAD,CAAV,GAAqCzB,QAAQ,CAACE,IAAT,CAAc,wBAAd,CAArC;AACH;;AACDoB,QAAAA,cAAc,GAAGO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe/B,QAAQ,CAACE,IAAT,CAAc,wBAAd,CAAf,CAAX,CAAjB;;AACA,YAAIoB,cAAc,CAACU,eAAf,KAAmC9C,cAAc,CAAC+C,MAAlD,IACIX,cAAc,CAACU,eAAf,KAAmC9C,cAAc,CAACgD,GAD1D,EAEA;AACIZ,UAAAA,cAAc,CAAC,cAAD,CAAd,GAAgC;AAACa,YAAAA,KAAK,EAACnC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCkC,YAA/C;AACIC,YAAAA,KAAK,EAACrC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCoC;AADlD,WAAhC;;AAEA,cAAItC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCqC,eAAxC,KAA4D,CAAC,CAAjE,EACA;AACIjB,YAAAA,cAAc,CAAC,iBAAD,CAAd,GAAoC;AAACa,cAAAA,KAAK,EAAGnC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCqC,eAAjD;AACAF,cAAAA,KAAK,EAAErC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCsC;AAD/C,aAApC;AAEH,WAJD,MAKI;AACAlB,YAAAA,cAAc,CAAC,iBAAD,CAAd,GAAoCnB,SAApC;AACH;;AAED,cAAIH,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCuC,YAAxC,KAAyD,CAAC,CAA9D,EACA;AACInB,YAAAA,cAAc,CAAC,cAAD,CAAd,GAAiC;AAACa,cAAAA,KAAK,EAAGnC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCuC,YAAjD;AACGJ,cAAAA,KAAK,EAAErC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCwC;AADlD,aAAjC;AAEH,WAJD,MAKI;AACApB,YAAAA,cAAc,CAAC,cAAD,CAAd,GAAiCnB,SAAjC;AACF;;AAEF,cAAIH,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCyC,kBAAxC,KAA+D,CAAC,CAApE,EACA;AACKrB,YAAAA,cAAc,CAAC,oBAAD,CAAd,GAAuC;AAACa,cAAAA,KAAK,EAAGnC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCyC,kBAAjD;AACHN,cAAAA,KAAK,EAAErC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwC0C;AAD5C,aAAvC;AAEJ,WAJD,MAKI;AACCtB,YAAAA,cAAc,CAAC,oBAAD,CAAd,GAAuCnB,SAAvC;AACJ;;AAED,cAAImB,cAAc,CAACU,eAAf,KAAmC9C,cAAc,CAAC+C,MAAtD,EAA6D;AACzDX,YAAAA,cAAc,CAAC,yBAAD,CAAd,GAA4C;AAACa,cAAAA,KAAK,EAAGnC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwC2C,uBAAjD;AACAR,cAAAA,KAAK,EAAErC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwC4C;AAD/C,aAA5C;AAEH;AAEJ,SArCD,MAsCM,IAAIxB,cAAc,CAACU,eAAf,KAAmC9C,cAAc,CAAC6D,GAAtD,EACN;AACIzB,UAAAA,cAAc,CAAC,mBAAD,CAAd,GAAsC;AAACa,YAAAA,KAAK,EAAGnC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwC8C,iBAAjD;AACCX,YAAAA,KAAK,EAAErC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwC+C;AADhD,WAAtC;AAKA3B,UAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC;AAACa,YAAAA,KAAK,EAAGnC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwC+C,kBAAjD;AACEZ,YAAAA,KAAK,EAAErC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwC+C;AADjD,WAAlC;AAGH,SAVK,MAYA,IAAI3B,cAAc,CAACU,eAAf,KAAmC9C,cAAc,CAACgE,UAAtD,EACN;AACI5B,UAAAA,cAAc,CAAC,cAAD,CAAd,GAAiC;AAACa,YAAAA,KAAK,EAAGnC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCiD,YAAjD;AACSd,YAAAA,KAAK,EAAErC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCkD;AADxD,WAAjC;AAGA9B,UAAAA,cAAc,CAAC,WAAD,CAAd,GAA8B;AAACa,YAAAA,KAAK,EAAGnC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCmD,SAAjD;AACYhB,YAAAA,KAAK,EAAErC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCoD;AAD3D,WAA9B;AAEH;;AAEF,YAAIhC,cAAc,CAACU,eAAf,KAAmC9C,cAAc,CAAC+C,MAAlD,IACIX,cAAc,CAACU,eAAf,KAAmC9C,cAAc,CAACqE,KAD1D,EAEC;AACI,cAAIvD,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCyC,kBAAxC,KAA+D,CAAC,CAApE,EACA;AACKrB,YAAAA,cAAc,CAAC,oBAAD,CAAd,GAAuC;AAACa,cAAAA,KAAK,EAAGnC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCyC,kBAAjD;AACHN,cAAAA,KAAK,EAAErC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwC0C;AAD5C,aAAvC;AAEJ,WAJD,MAKI;AACCtB,YAAAA,cAAc,CAAC,oBAAD,CAAd,GAAuCnB,SAAvC;AACJ;;AACDmB,UAAAA,cAAc,CAAC,sBAAD,CAAd,GAAyC;AAACa,YAAAA,KAAK,EAAGnC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCsD,oBAAjD;AACGnB,YAAAA,KAAK,EAAErC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCuD;AADlD,WAAzC;AAGAnC,UAAAA,cAAc,CAAC,gBAAD,CAAd,GAAmCtB,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCwD,cAA3E;AACH;;AAEDpC,QAAAA,cAAc,CAAC,oBAAD,CAAd,GAAuCtB,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwCqB,kBAA/E;AAEAD,QAAAA,cAAc,CAAC,iBAAD,CAAd,GAAmC;AAACqC,UAAAA,IAAI,EAAC3D,QAAQ,CAACE,IAAT,CAAc,wBAAd,CAAN;AACCiC,UAAAA,KAAK,EAACnC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwC8B,eAD/C;AAECK,UAAAA,KAAK,EAACrC,QAAQ,CAACE,IAAT,CAAc,wBAAd,EAAwC0D;AAF/C,SAAnC;AAIH;;AAEDnC,MAAAA,UAAU,GAAG,EAAE,GAAGA,UAAL;AAAiBV,QAAAA,iBAAjB;AAAmC;AAC5BC,QAAAA,WADP;AACmB;AACZC,QAAAA,cAFP;AAEsB;AACfC,QAAAA,WAHP;AAGmB;AACZE,QAAAA,mBAJP;AAKOyC,QAAAA,sBAAsB,EAAC1C,gBAL9B;AAMO2C,QAAAA,aAAa,EAACzC,qBANrB,CAOO;;AAPP,OAAb;;AAUA,UAAIjC,UAAU,CAACG,SAAX,KAAyB,QAA7B,EACA;AACI+B,QAAAA,cAAc,CAAC,iBAAD,CAAd,GAAoC;AAACqC,UAAAA,IAAI,EAAC3D,QAAQ,CAACE,IAAT,CAAc,oBAAd,CAAN;AAA0CmC,UAAAA,KAAK,EAACrC,QAAQ,CAACE,IAAT,CAAc,oBAAd,EAAoCoD,YAApF;AACCnB,UAAAA,KAAK,EAAEnC,QAAQ,CAACE,IAAT,CAAc,oBAAd,EAAoC8B;AAD5C,SAApC;;AAGA,YAAIV,cAAc,CAAC,iBAAD,CAAd,CAAkCa,KAAlC,KAA4CjD,cAAc,CAAC+C,MAA3D,IACIX,cAAc,CAAC,iBAAD,CAAd,CAAkC,MAAlC,EAA0CyC,aAA1C,KAA4D9E,iBAAiB,CAAC+E,GADtF,EAC0F;AACtF1C,UAAAA,cAAc,CAAC,cAAD,CAAd,GAAkC1C,kBAAkB,CAAEoB,QAAQ,CAACE,IAAT,CAAc,iBAAd,CAAF,EACZF,QAAQ,CAACE,IAAT,CAAc,kBAAd,CADY,EACuB,cADvB,EACuC,cADvC,CAApD;;AAGA,cAAIoB,cAAc,CAAC,iBAAD,CAAd,CAAkC,MAAlC,EAA0C2C,aAA1C,KAA4DhF,iBAAiB,CAAC+E,GAAlF,EAAsF;AAClF1C,YAAAA,cAAc,CAAC,cAAD,CAAd,GAAiCd,UAAU,CAACK,GAAX,CAAe,cAAf,CAAjC;AACH;AACJ;AACJ;;AACDxB,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAC;AAACvD,UAAAA,cAAD;AAAgB;AAChBE,UAAAA,gBADA;AACiB;AACjB,aAAGW,UAFH;AAGAlC,UAAAA,SAAS,EAACH,UAAU,CAACG,SAHrB;AAIA6E,UAAAA,UAAU,EAAChF,UAAU,CAACgF,UAJtB;AAKA9C,UAAAA,cALA;AAMA+C,UAAAA,SAAS,EAAG,IANZ;AAOAC,UAAAA,YAAY,EAAClF,UAAU,CAAC+D,YAPxB;AAQAoB,UAAAA,OAAO,EAAC;AARR;AAA/B,OAAD,CAAR;AAWH,KAnKO,EAoKPC,KApKO,CAoKDC,KAAK,IAAE;AACVpF,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAE;AAACI,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACzE,QAAN,CAAe2B,MAAf,KAA0B,GAA9B,EAAkC;AAC9B7C,QAAAA,KAAK,CAAC2F,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAGI;AACA5F,QAAAA,KAAK,CAAC6F,IAAN,CAAWF,KAAK,CAACzE,QAAN,CAAeE,IAA1B;AACH;AACJ,KA5KO,CAAR,CARmB,CAqLnB;AACA;AACA;AACA;AAEX,GA1LG;AA0LF;AAEF,OAAO,SAAS0E,2BAAT,CAAqCxF,UAArC,EAAgD;AACnD,SAAO,UAAUC,QAAV,EAAoB;AAC3B,QAAID,UAAU,CAACG,SAAX,KAAyB,QAAzB,IAAsCH,UAAU,CAACG,SAAX,KAAyB,QAAzB,IAAqCH,UAAU,CAACyF,YAAX,CAAwBtD,kBAAxB,KAA+CtC,iBAAiB,CAACyC,KAAhJ,EACA;AACI,UAAItC,UAAU,CAAC0F,UAAX,CAAsBC,oBAAtB,KAA+C,IAAnD,EAAwD;AAChD1F,QAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,YAAIiG,iBAAiB,GAAG,IAAxB;;AACA,YAAI5F,UAAU,CAACG,SAAX,KAAyB,QAA7B,EAAsC;AAClCyF,UAAAA,iBAAiB,GAAG5F,UAAU,CAACyF,YAAX,CAAwBzF,UAAU,CAACK,cAAnC,CAApB;AACH;;AACD,eAAQhB,KAAK,CAACiB,IAAN,CAAW,uCAAX,EAAmD;AAACsF,UAAAA,iBAAD;AACnBC,UAAAA,YAAY,EAAC7F,UAAU,CAAC0F,UAAX,CAAsBC,oBADhB;AAEnBpF,UAAAA,QAAQ,EAACP,UAAU,CAACQ;AAFD,SAAnD,EAGPG,IAHO,CAGFC,QAAQ,IAAE;AAEZ;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA,cAAIsB,cAAc,GAAI,EAAtB;AACA,cAAIG,UAAU,GAAG,EAAjB;;AACA,cAAIrC,UAAU,CAACG,SAAX,KAAyB,QAA7B,EAAsC;AAClC+B,YAAAA,cAAc,GAAGtB,QAAQ,CAACE,IAAT,CAAc,sBAAd,CAAjB;AAEH;;AACDoB,UAAAA,cAAc,CAAC,oBAAD,CAAd,GAAwCrC,iBAAiB,CAACyC,KAA1D,CAzBY,CA2BZ;;AACArC,UAAAA,QAAQ,CAAC;AAAC6E,YAAAA,IAAI,EAAExF,cAAP;AAAuByF,YAAAA,OAAO,EAAC,EAAC,GAAG1C,UAAJ;AACIlC,cAAAA,SAAS,EAACH,UAAU,CAACG,SADzB;AAEI6E,cAAAA,UAAU,EAAChF,UAAU,CAACgF,UAF1B;AAGI9C,cAAAA,cAHJ;AAII+C,cAAAA,SAAS,EAAG,IAJhB;AAKIC,cAAAA,YAAY,EAAClF,UAAU,CAAC+D,YAL5B;AAMIoB,cAAAA,OAAO,EAAC;AANZ;AAA/B,WAAD,CAAR;AAQH,SAvCO,EAwCPC,KAxCO,CAwCDC,KAAK,IAAE;AACVpF,UAAAA,QAAQ,CAAC;AAAC6E,YAAAA,IAAI,EAAExF,cAAP;AAAuByF,YAAAA,OAAO,EAAE;AAACI,cAAAA,OAAO,EAAC;AAAT;AAAhC,WAAD,CAAR;;AACA,cAAIE,KAAK,CAACzE,QAAN,CAAe2B,MAAf,KAA0B,GAA9B,EAAkC;AAC9B7C,YAAAA,KAAK,CAAC2F,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,WAFD,MAGI;AACA5F,YAAAA,KAAK,CAAC6F,IAAN,CAAWF,KAAK,CAACzE,QAAN,CAAeE,IAA1B;AACH;AACJ,SAhDO,CAAR;AAiDH,OAvDL,MAwDQ;AACApB,QAAAA,KAAK,CAAC6F,IAAN,CAAW3F,IAAI,CAACkG,aAAL,CAAmB;AAACC,UAAAA,EAAE,EAAE;AAAL,SAAnB,CAAX;AACH;AACR,KA7DD,MA8DI;AACArG,MAAAA,KAAK,CAAC6F,IAAN,CAAW3F,IAAI,CAACkG,aAAL,CAAmB;AAACC,QAAAA,EAAE,EAAE;AAAL,OAAnB,CAAX;AACH;AACJ,GAlEG;AAkEF;AAEF,OAAO,SAASC,6BAAT,CAAwChG,UAAxC,EAAoD;AACvD,SAAO,UAAUC,QAAV,EAAoB;AAC3BA,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAON,KAAK,CAACiB,IAAN,CAAW,gCAAX,EAA6C;AAACJ,MAAAA,WAAW,EAAC+F,QAAQ,CAACjG,UAAU,CAACE,WAAZ,CAArB;AAC5CK,MAAAA,QAAQ,EAACP,UAAU,CAACQ;AADwB,KAA7C,EAEPG,IAFO,CAEFC,QAAQ,IAAE;AAEX,YAAM8E,UAAU,GAAG,EAAC,GAAG1F,UAAU,CAAC0F,UAAf;AAA2B,WAAG9E,QAAQ,CAACE;AAAvC,OAAnB;AAEAvB,MAAAA,QAAQ,CAACmG,UAAD,CAAR;AACAzF,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAC;AAACW,UAAAA,UAAD;AAAavF,UAAAA,SAAS,EAAC,IAAvB;AAA6B+F,UAAAA,SAAS,EAACnF,SAAvC;AACnCoE,UAAAA,OAAO,EAAC;AAD2B;AAA/B,OAAD,CAAR;AAEJ,KATO,EAUPC,KAVO,CAUDC,KAAK,IAAE;AACTpF,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAE;AAACI,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACD,UAAIE,KAAK,CAACzE,QAAN,CAAe2B,MAAf,KAA0B,GAA9B,EAAkC;AAC9B7C,QAAAA,KAAK,CAAC2F,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAGI;AACA5F,QAAAA,KAAK,CAAC6F,IAAN,CAAWF,KAAK,CAACzE,QAAN,CAAeE,IAA1B;AACH;AAEJ,KAnBO,CAAP;AAoBH,GAtBG;AAsBF;AAEF,OAAO,SAASqF,uBAAT,CAAkCnG,UAAlC,EAA8C;AACjD,SAAO,UAAUC,QAAV,EAAoB;AAC3BA,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAON,KAAK,CAACiB,IAAN,CAAW,8BAAX,EAA2C;AAACsF,MAAAA,iBAAiB,EAACK,QAAQ,CAACjG,UAAU,CAAC4F,iBAAZ,CAA3B;AAC1CrF,MAAAA,QAAQ,EAACP,UAAU,CAACQ;AADsB,KAA3C,EAEPG,IAFO,CAEFC,QAAQ,IAAE;AAEX,YAAM8E,UAAU,GAAG,EAAC,GAAG1F,UAAU,CAAC0F,UAAf;AAA2B,WAAG9E,QAAQ,CAACE;AAAvC,OAAnB;AAEAvB,MAAAA,QAAQ,CAACmG,UAAD,CAAR;AACAzF,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAC;AAACW,UAAAA,UAAD;AAAavF,UAAAA,SAAS,EAAC,IAAvB;AAA6B+F,UAAAA,SAAS,EAACnF,SAAvC;AACnCoE,UAAAA,OAAO,EAAC;AAD2B;AAA/B,OAAD,CAAR;AAEJ,KATO,EAUPC,KAVO,CAUDC,KAAK,IAAE;AACTpF,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAE;AAACI,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACD,UAAIE,KAAK,CAACzE,QAAN,CAAe2B,MAAf,KAA0B,GAA9B,EAAkC;AAC9B7C,QAAAA,KAAK,CAAC2F,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAGI;AACA5F,QAAAA,KAAK,CAAC6F,IAAN,CAAWF,KAAK,CAACzE,QAAN,CAAeE,IAA1B;AACH;AAEJ,KAnBO,CAAP;AAoBH,GAtBG;AAsBF;AAEF,OAAO,SAASsF,2BAAT,CAAsCpG,UAAtC,EAAkD;AACrD,SAAO,UAAUC,QAAV,EAAoB;AAE3B,QAAID,UAAU,CAACqG,YAAX,CAAwBzD,eAAxB,KAA6C9C,cAAc,CAAC6D,GAAhE,EACA;AACI,UAAI3D,UAAU,CAACsG,YAAX,CAAwBnE,kBAAxB,KAA+CtC,iBAAiB,CAACyC,KAArE,EAA2E;AACnErC,QAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,eAAON,KAAK,CAACiB,IAAN,CAAW,0CAAX,EAAuD;AAACsF,UAAAA,iBAAiB,EAACK,QAAQ,CAACjG,UAAU,CAACsG,YAAX,CAAwBV,iBAAzB,CAA3B;AAClCrF,UAAAA,QAAQ,EAACP,UAAU,CAACQ;AADc,SAAvD,EAENG,IAFM,CAEDC,QAAQ,IAAE;AAEZ,gBAAM2F,YAAY,GAAI9G,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc,iBAAd,KAAmC,EAApC,EAAwC,sBAAxC,EACrB,sBADqB,EACGC,SADH,EACcA,SADd,EACyB,IADzB,CAAzC;AAGA,gBAAOyF,mBAAmB,GAAID,YAAY,CAAC9E,GAAb,CAAiB,YAAjB,CAA9B;AAEA,gBAAMgF,kBAAkB,GAAIhH,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc,kBAAd,KAAoC,EAArC,EAAyC,sBAAzC,EAC3B,sBAD2B,EACHC,SADG,EACQA,SADR,EACmB,IADnB,CAA/C;AAGA,gBAAO2F,mBAAmB,GAAID,kBAAkB,CAAChF,GAAnB,CAAuB,YAAvB,CAA9B;AAEA,gBAAMkF,WAAW,GAAIlH,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc,UAAd,KAA4B,EAA7B,EAAiC,eAAjC,EACpB,eADoB,EACHC,SADG,EACQA,SADR,EACmB,IADnB,CAAxC;AAGA,gBAAO6F,YAAY,GAAID,WAAW,CAAClF,GAAZ,CAAgB,YAAhB,CAAvB;AAEAxB,UAAAA,QAAQ,CAAC;AAAC6E,YAAAA,IAAI,EAAExF,cAAP;AAAuByF,YAAAA,OAAO,EAAC;AAACyB,cAAAA,mBAAD;AAAqB;AACrBE,cAAAA,mBADA;AACoB;AACpBE,cAAAA,YAFA;AAEa;AACbzG,cAAAA,SAAS,EAACH,UAAU,CAACG,SAHrB;AAIA6E,cAAAA,UAAU,EAAChF,UAAU,CAACgF,UAJtB;AAKA;AACA9C,cAAAA,cAAc,EAAC,EANf;AAOA+C,cAAAA,SAAS,EAAG,IAPZ;AAQAC,cAAAA,YAAY,EAAClF,UAAU,CAACkF,YARxB;AASAC,cAAAA,OAAO,EAAC;AATR;AAA/B,WAAD,CAAR;AAWH,SA9BM,EA+BNC,KA/BM,CA+BAC,KAAK,IAAE;AACNpF,UAAAA,QAAQ,CAAC;AAAC6E,YAAAA,IAAI,EAAExF,cAAP;AAAuByF,YAAAA,OAAO,EAAE;AAACI,cAAAA,OAAO,EAAC;AAAT;AAAhC,WAAD,CAAR;;AACJ,cAAIE,KAAK,CAACzE,QAAN,CAAe2B,MAAf,KAA0B,GAA9B,EAAkC;AAC9B7C,YAAAA,KAAK,CAAC2F,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,WAFD,MAGI;AACA5F,YAAAA,KAAK,CAAC6F,IAAN,CAAWF,KAAK,CAACzE,QAAN,CAAeE,IAA1B;AACH;AAEJ,SAxCM,CAAP;AAyCP,OA3CD,MA4CI;AACApB,QAAAA,KAAK,CAAC6F,IAAN,CAAW3F,IAAI,CAACkG,aAAL,CAAmB;AAACC,UAAAA,EAAE,EAAC;AAAJ,SAAnB,CAAX;AACH;AACJ,KAjDD,MAkDI;AACArG,MAAAA,KAAK,CAAC6F,IAAN,CAAW3F,IAAI,CAACkG,aAAL,CAAmB;AAACC,QAAAA,EAAE,EAAC;AAAJ,OAAnB,CAAX;AACH;AACJ,GAvDG;AAuDF;AAEF,OAAO,SAASc,+BAAT,CAA0C7G,UAA1C,EAAsD;AACzD,SAAO,UAAUC,QAAV,EAAoB;AAEvB,QAAID,UAAU,CAACqG,YAAX,CAAwBzD,eAAxB,KAA6C9C,cAAc,CAAC6D,GAAhE,EACA;AACI,UAAI3D,UAAU,CAACsG,YAAX,CAAwBnE,kBAAxB,KAA+CtC,iBAAiB,CAACyC,KAArE,EAA2E;AACnErC,QAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,eAAON,KAAK,CAACiB,IAAN,CAAW,iDAAX,EAA8D;AAACsF,UAAAA,iBAAiB,EAACK,QAAQ,CAACjG,UAAU,CAACsG,YAAX,CAAwBV,iBAAzB,CAA3B;AACzCrF,UAAAA,QAAQ,EAACP,UAAU,CAACQ;AADqB,SAA9D,EAEVG,IAFU,CAELC,QAAQ,IAAE;AACZ,cAAIA,QAAQ,CAACE,IAAT,CAAc,oBAAd,EAAoCgG,MAApC,GAA6C,CAAjD,EAAmD;AAE3C,kBAAMC,kBAAkB,GAAItH,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc,qBAAd,KAAuC,EAAxC,EAA4C,mBAA5C,EAC3B,cAD2B,EACXC,SADW,EACAA,SADA,EACW,IADX,CAA/C;AAEA,kBAAMiG,mBAAmB,GAAID,kBAAkB,CAACtF,GAAnB,CAAuB,YAAvB,CAA7B;AAEA,kBAAMwF,iBAAiB,GAAIxH,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc,oBAAd,KAAsC,EAAvC,EAA2C,mBAA3C,EAClB,cADkB,EACFC,SADE,EACSA,SADT,EACoB,IADpB,CAA9C;AAEA,kBAAMmG,kBAAkB,GAAID,iBAAiB,CAACxF,GAAlB,CAAsB,YAAtB,CAA5B;AAEAxB,YAAAA,QAAQ,CAAC;AAAC6E,cAAAA,IAAI,EAAExF,cAAP;AAAuByF,cAAAA,OAAO,EAAC;AAACiC,gBAAAA,mBAAD;AAAqB;AACrBE,gBAAAA,kBADA;AACmB;AACnB/G,gBAAAA,SAAS,EAACH,UAAU,CAACG,SAFrB;AAGA6E,gBAAAA,UAAU,EAAChF,UAAU,CAACgF,UAHtB;AAIA9C,gBAAAA,cAAc,EAAC,EAJf;AAKA+C,gBAAAA,SAAS,EAAG,IALZ;AAMAC,gBAAAA,YAAY,EAAClF,UAAU,CAACkF,YANxB;AAOAC,gBAAAA,OAAO,EAAC;AAPR;AAA/B,aAAD,CAAR;AASP,WAnBD,MAoBI;AACAlF,YAAAA,QAAQ,CAAC;AAAC6E,cAAAA,IAAI,EAAExF,cAAP;AAAuByF,cAAAA,OAAO,EAAE;AAACI,gBAAAA,OAAO,EAAC;AAAT;AAAhC,aAAD,CAAR;AACAzF,YAAAA,KAAK,CAAC6F,IAAN,CAAW3F,IAAI,CAACkG,aAAL,CAAmB;AAACC,cAAAA,EAAE,EAAC;AAAJ,aAAnB,CAAX;AACH;AACJ,SA3BU,EA4BVX,KA5BU,CA4BJC,KAAK,IAAE;AACNpF,UAAAA,QAAQ,CAAC;AAAC6E,YAAAA,IAAI,EAAExF,cAAP;AAAuByF,YAAAA,OAAO,EAAE;AAACI,cAAAA,OAAO,EAAC;AAAT;AAAhC,WAAD,CAAR;;AACJ,cAAIE,KAAK,CAACzE,QAAN,CAAe2B,MAAf,KAA0B,GAA9B,EAAkC;AAC9B7C,YAAAA,KAAK,CAAC2F,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,WAFD,MAGI;AACA5F,YAAAA,KAAK,CAAC6F,IAAN,CAAWF,KAAK,CAACzE,QAAN,CAAeE,IAA1B;AACH;AAEJ,SArCU,CAAP;AAsCP,OAxCD,MAyCI;AACApB,QAAAA,KAAK,CAAC6F,IAAN,CAAW3F,IAAI,CAACkG,aAAL,CAAmB;AAACC,UAAAA,EAAE,EAAC;AAAJ,SAAnB,CAAX;AACH;AACJ,KA9CD,MA+CI;AACArG,MAAAA,KAAK,CAAC6F,IAAN,CAAW3F,IAAI,CAACkG,aAAL,CAAmB;AAACC,QAAAA,EAAE,EAAC;AAAJ,OAAnB,CAAX;AACH;AACR,GApDG;AAoDF;AAEF,OAAO,SAASoB,gBAAT,CAA0BtB,YAA1B,EAAwCrF,QAAxC,EAAkDkF,UAAlD,EAA8D;AACjE,SAAO,UAAUzF,QAAV,EAAoB;AACvB,QAAI4F,YAAY,KAAK9E,SAArB,EACA;AACId,MAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,aAAON,KAAK,CAACiB,IAAN,CAAW,uBAAX,EAAoC;AAACuF,QAAAA,YAAD;AAAetF,QAAAA,QAAQ,EAACC;AAAxB,OAApC,EACNG,IADM,CACDC,QAAQ,IAAE;AACb;AACC8E,QAAAA,UAAU,GAAG,EAAC,GAAGA,UAAJ;AAAgB,aAAG9E,QAAQ,CAACE;AAA5B,SAAb;;AAEA,YAAIF,QAAQ,CAACE,IAAT,CAAc,wBAAd,MAA4CC,SAAhD,EAA2D;AACvD2E,UAAAA,UAAU,CAAC,eAAD,CAAV,GAA8B3E,SAA9B;AACH,SAFD,MAGI;AACAqG,UAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCC,YAAzC,CAAsD,MAAtD,EAA8D5B,UAAU,CAAC,eAAD,CAAxE;AACA0B,UAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCE,KAAzC;AACH;;AAEDtH,QAAAA,QAAQ,CAAC;AAAC6E,UAAAA,IAAI,EAAExF,cAAP;AAAuByF,UAAAA,OAAO,EAAC;AAACW,YAAAA,UAAD;AAAaP,YAAAA,OAAO,EAAC;AAArB;AAA/B,SAAD,CAAR;AACH,OAdM,EAeNC,KAfM,CAeAC,KAAK,IAAE;AACNpF,QAAAA,QAAQ,CAAC;AAAC6E,UAAAA,IAAI,EAAExF,cAAP;AAAuByF,UAAAA,OAAO,EAAE;AAACI,YAAAA,OAAO,EAAC;AAAT;AAAhC,SAAD,CAAR;;AACJ,YAAIE,KAAK,CAACzE,QAAN,CAAe2B,MAAf,KAA0B,GAA9B,EAAkC;AAC9B7C,UAAAA,KAAK,CAAC2F,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,SAFD,MAGI;AACA5F,UAAAA,KAAK,CAAC6F,IAAN,CAAWF,KAAK,CAACzE,QAAN,CAAeE,IAA1B;AACH;AACJ,OAvBM,CAAP;AAwBH,KA3BD,MA4BI;AACApB,MAAAA,KAAK,CAAC6F,IAAN,CAAW3F,IAAI,CAACkG,aAAL,CAAmB;AAACC,QAAAA,EAAE,EAAC;AAAJ,OAAnB,CAAX;AACH;AACR,GAhCG;AAgCF,C,CAEF;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASyB,0BAAT,CAAoCxH,UAApC,EAAgD;AACnD,SAAO,UAAUC,QAAV,EAAoB;AACxB;AACC,WAAOZ,KAAK,CAACiB,IAAN,CAAW,6BAAX,EAA0C,EAAC,GAAGN,UAAU,CAAC,WAAD;AAAd,KAA1C,EACPW,IADO,CACFC,QAAQ,IAAE;AACX,YAAM6G,WAAW,GAAGzH,UAAU,CAAC0H,0BAA/B;AAEA,YAAMxF,cAAc,GAAGlC,UAAU,CAACkC,cAAlC;AAEAyF,MAAAA,MAAM,CAACC,IAAP,CAAYhH,QAAQ,CAACE,IAArB,EAA2B+G,GAA3B,CAA+BC,WAAW,IAAE;AACxC,cAAMC,KAAK,GAAGN,WAAW,CAACO,SAAZ,CAAsBzD,IAAI,IAAGuD,WAAW,KAAKvD,IAAI,CAACL,YAAlD,CAAd;AAEI,cAAM+D,QAAQ,GAAGxI,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAcgH,WAAd,KAA8B,EAA/B,EAAmCL,WAAW,CAACM,KAAD,CAAX,CAAmBG,YAAtD,EACpBT,WAAW,CAACM,KAAD,CAAX,CAAmBI,cADC,EACepH,SADf,EAC0BA,SAD1B,EACqC,IADrC,CAApC;AAGA,cAAMqH,SAAS,GAAGH,QAAQ,CAACxG,GAAT,CAAa,YAAb,CAAlB;AACAS,QAAAA,cAAc,CAACuF,WAAW,CAACM,KAAD,CAAX,CAAmBG,YAApB,CAAd,GAAkDnH,SAAlD;AAEJ,eAAO0G,WAAW,CAACM,KAAD,CAAX,CAAmB,UAAnB,IAAiCK,SAAxC,CATwC,CASU;AACrD,OAVD;AAWAnI,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAC;AAAC2C,UAAAA,0BAA0B,EAACD,WAA5B;AACCtC,UAAAA,OAAO,EAAC,KADT;AAECkD,UAAAA,cAAc,EAAGrI,UAAU,CAACsI,SAAX,CAAqBC,cAFvC;AAGCrG,UAAAA;AAHD;AAA/B,OAAD,CAAR;AAIJ,KArBO,EAsBPkD,KAtBO,CAsBDC,KAAK,IAAE;AACTpF,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAE;AAACI,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACD,UAAIE,KAAK,CAACzE,QAAN,CAAe2B,MAAf,KAA0B,GAA9B,EAAkC;AAC9B7C,QAAAA,KAAK,CAAC2F,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAGI;AACA5F,QAAAA,KAAK,CAAC6F,IAAN,CAAWF,KAAK,CAACzE,QAAN,CAAeE,IAA1B;AACH;AAEJ,KA/BO,CAAP;AAgCP,GAlCG;AAkCF;AAEF,OAAO,SAAS0H,8BAAT,CAAwCC,eAAxC,EAAyD;AAC5D,SAAO,UAAUxI,QAAV,EAAoB;AAC3BA,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAON,KAAK,CAACiB,IAAN,CAAW,qCAAX,EAAkD,EAAC,GAAGmI;AAAJ,KAAlD,EACP9H,IADO,CACFC,QAAQ,IAAE;AACX,YAAM8E,UAAU,GAAG,EAAC,GAAG+C,eAAe,CAAC/C,UAApB;AACCgD,QAAAA,aAAa,EAAC9H,QAAQ,CAACE,IAAT,CAAc,eAAd,CADf;AAEC6H,QAAAA,qBAAqB,EAAC/H,QAAQ,CAACE,IAAT,CAAc,uBAAd,CAFvB;AAGC8H,QAAAA,aAAa,EAAChI,QAAQ,CAACE,IAAT,CAAc,eAAd,CAHf;AAIC+H,QAAAA,sBAAsB,EAAE9H;AAJzB,OAAnB;AAMAd,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAC;AAACW,UAAAA,UAAD;AAAaP,UAAAA,OAAO,EAAC,KAArB,CAA4B;;AAA5B;AAA/B,OAAD,CAAR;AAEJ,KAVO,EAWPC,KAXO,CAWDC,KAAK,IAAE;AACTpF,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAE;AAACI,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACD,UAAIE,KAAK,CAACzE,QAAN,CAAe2B,MAAf,KAA0B,GAA9B,EAAkC;AAC9B7C,QAAAA,KAAK,CAAC2F,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAGI;AACA5F,QAAAA,KAAK,CAAC6F,IAAN,CAAWF,KAAK,CAACzE,QAAN,CAAeE,IAA1B;AACH;AAEJ,KApBO,CAAP;AAqBH,GAvBG;AAuBF;AAEF,OAAO,SAASgI,kBAAT,CAA4B9I,UAA5B,EAAwC;AAC3C,SAAO,UAAUC,QAAV,EAAoB;AAC3BA,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAON,KAAK,CAACiB,IAAN,CAAW,0BAAX,EAAuC;AAACsD,MAAAA,iBAAiB,EAAC5D,UAAU,CAAC4D,iBAA9B;AACtCrD,MAAAA,QAAQ,EAACP,UAAU,CAACQ;AADkB,KAAvC,EAEPG,IAFO,CAEFC,QAAQ,IAAE;AAEX,YAAM8E,UAAU,GAAG,EAAC,GAAG1F,UAAU,CAAC0F,UAAf;AAA2B,WAAG9E,QAAQ,CAACE;AAAvC,OAAnB,CAFW,CAIX;AACA;AACA;;AAEAvB,MAAAA,QAAQ,CAACmG,UAAD,CAAR;AACAzF,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAC;AAACW,UAAAA,UAAD;AAAa;AACbvF,UAAAA,SAAS,EAAC,IADV;AACgB+F,UAAAA,SAAS,EAACnF,SAD1B;AAEAoE,UAAAA,OAAO,EAAC,KAFR;AAEejD,UAAAA,cAAc,EAAElC,UAAU,CAACkC;AAF1C;AAA/B,OAAD,CAAR;AAGJ,KAdO,EAePkD,KAfO,CAeDC,KAAK,IAAE;AACTpF,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAE;AAACI,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACD,UAAIE,KAAK,CAACzE,QAAN,CAAe2B,MAAf,KAA0B,GAA9B,EAAkC;AAC9B7C,QAAAA,KAAK,CAAC2F,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAGI;AACA5F,QAAAA,KAAK,CAAC6F,IAAN,CAAWF,KAAK,CAACzE,QAAN,CAAeE,IAA1B;AACH;AAEJ,KAxBO,CAAP;AAyBH,GA3BG;AA2BF;AAGF,OAAO,SAASiI,gBAAT,CAA0B/I,UAA1B,EAAsC;AACzC,SAAO,UAAUC,QAAV,EAAoB;AAC3BA,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAON,KAAK,CAACiB,IAAN,CAAW,+BAAX,EAA4C;AAAC2D,MAAAA,SAAS,EAACjE,UAAU,CAACgJ,aAAX,CAAyB/E,SAApC;AAC3C1D,MAAAA,QAAQ,EAACP,UAAU,CAACQ;AADuB,KAA5C,EAEPG,IAFO,CAEFC,QAAQ,IAAE;AAEX,YAAMqI,gBAAgB,GAAIxJ,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,IAAgB,EAAjB,EAAqB,cAArB,EACrB,aADqB,EACLC,SADK,EACMA,SADN,EACiB,IADjB,CAA7C;AAEA,YAAOmI,iBAAiB,GAAGD,gBAAgB,CAACxH,GAAjB,CAAqB,YAArB,CAA3B;AACAxB,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAC;AAACoE,UAAAA,aAAa,EAACD,iBAAf;AAAiC;AACjC/D,UAAAA,OAAO,EAAC,KADR;AAEAjD,UAAAA,cAAc,EAAE,EAAC,GAAGlC,UAAU,CAACkC,cAAf;AACCiB,YAAAA,eAAe,EAAEpC,SADlB,CAEI;;AAFJ;AAFhB;AAA/B,OAAD,CAAR;AAQJ,KAfO,EAgBPqE,KAhBO,CAgBDC,KAAK,IAAE;AACTpF,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAE;AAACI,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACD,UAAIE,KAAK,CAACzE,QAAN,CAAe2B,MAAf,KAA0B,GAA9B,EAAkC;AAC9B7C,QAAAA,KAAK,CAAC2F,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAGI;AACA5F,QAAAA,KAAK,CAAC6F,IAAN,CAAWF,KAAK,CAACzE,QAAN,CAAeE,IAA1B;AACH;AAEJ,KAzBO,CAAP;AA0BH,GA5BG;AA4BF;AAEF,OAAO,SAASsI,mBAAT,CAA6BpJ,UAA7B,EAAyC;AAC5C,SAAO,UAAUC,QAAV,EAAoB;AAC3BA,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAON,KAAK,CAACiB,IAAN,CAAW,2CAAX,EAAwD;AAAC0C,MAAAA,YAAY,EAAChD,UAAU,CAACqJ,gBAAX,CAA4BrG,YAA1C;AACvDzC,MAAAA,QAAQ,EAACP,UAAU,CAACQ;AADmC,KAAxD,EAEPG,IAFO,CAEFC,QAAQ,IAAE;AAEX,YAAMO,aAAa,GAAI1B,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,IAAgB,EAAjB,EAAqB,iBAArB,EAClB,iBADkB,EACEC,SADF,EACaA,SADb,EACwB,IADxB,CAA1C;AAEA,YAAOc,cAAc,GAAGV,aAAa,CAACM,GAAd,CAAkB,YAAlB,CAAxB;AACAxB,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAC;AAAClD,UAAAA,cAAD;AAAgB;AAChBsD,UAAAA,OAAO,EAAC,KADR;AAEAjD,UAAAA,cAAc,EAAE,EAAC,GAAGlC,UAAU,CAACkC,cAAf;AACCiB,YAAAA,eAAe,EAAEpC,SADlB,CAEI;;AAFJ;AAFhB;AAA/B,OAAD,CAAR;AAQJ,KAfO,EAgBPqE,KAhBO,CAgBDC,KAAK,IAAE;AACTpF,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAE;AAACI,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACD,UAAIE,KAAK,CAACzE,QAAN,CAAe2B,MAAf,KAA0B,GAA9B,EAAkC;AAC9B7C,QAAAA,KAAK,CAAC2F,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAGI;AACA5F,QAAAA,KAAK,CAAC6F,IAAN,CAAWF,KAAK,CAACzE,QAAN,CAAeE,IAA1B;AACH;AAEJ,KAzBO,CAAP;AA0BH,GA5BG;AA4BF;AAEF,OAAO,SAASwI,gBAAT,CAA0BtJ,UAA1B,EAAsC;AACzC,SAAO,UAAUC,QAAV,EAAoB;AAC3BA,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAON,KAAK,CAACiB,IAAN,CAAW,+BAAX,EAA4C;AAACsC,MAAAA,eAAe,EAAC5C,UAAU,CAACuJ,UAAX,CAAsB3G,eAAvC;AAC3CrC,MAAAA,QAAQ,EAACP,UAAU,CAACQ;AADuB,KAA5C,EAGPG,IAHO,CAGFC,QAAQ,IAAE;AAEX,YAAMK,gBAAgB,GAAIxB,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc0I,aAAd,IAA8B,EAA/B,EAAmC,oBAAnC,EACpB,oBADoB,EACGzI,SADH,EACcA,SADd,EACyB,IADzB,CAA7C;AAEA,YAAOY,iBAAiB,GAAGV,gBAAgB,CAACQ,GAAjB,CAAqB,YAArB,CAA3B;AAEA,YAAMH,kBAAkB,GAAI7B,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc2I,eAAd,IAAgC,EAAjC,EAAqC,sBAArC,EAC/C,kBAD+C,EAC1B1I,SAD0B,EACfA,SADe,EACJ,IADI,CAA/C;AAEA,YAAOiB,mBAAmB,GAAGV,kBAAkB,CAACG,GAAnB,CAAuB,YAAvB,CAA7B;AACAxB,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAC;AAACpD,UAAAA,iBAAD;AACCK,UAAAA,mBADD;AAEAmD,UAAAA,OAAO,EAAC,KAFR;AAGAjD,UAAAA,cAAc,EAAE,EAAC,GAAGlC,UAAU,CAACkC,cAAf;AACZqB,YAAAA,kBAAkB,EAACxC,SADP;AAEZqD,YAAAA,oBAAoB,EAAC,EAFT,CAGb;;AAHa;AAHhB;AAA/B,OAAD,CAAR;AAUJ,KAtBO,EAuBPgB,KAvBO,CAuBDC,KAAK,IAAE;AACTpF,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAE;AAACI,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACD,UAAIE,KAAK,CAACzE,QAAN,CAAe2B,MAAf,KAA0B,GAA9B,EAAkC;AAC9B7C,QAAAA,KAAK,CAAC2F,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAGI;AACA5F,QAAAA,KAAK,CAAC6F,IAAN,CAAWF,KAAK,CAACzE,QAAN,CAAeE,IAA1B;AACH;AAEJ,KAhCO,CAAP;AAiCH,GAnCG;AAmCF;AAEF,OAAO,SAAS4I,UAAT,CAAoB1J,UAApB,EAAgC;AACnC,SAAO,UAAUC,QAAV,EAAoB;AAC3BA,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAON,KAAK,CAACiB,IAAN,CAAW,2CAAX,EAAwD;AAAC0C,MAAAA,YAAY,EAAChD,UAAU,CAACgD,YAAzB;AAAsCJ,MAAAA,eAAe,EAAC5C,UAAU,CAACuJ,UAAX,CAAsB3G,eAA5E;AACvDrC,MAAAA,QAAQ,EAACP,UAAU,CAACQ;AADmC,KAAxD,EAGPG,IAHO,CAGFC,QAAQ,IAAE;AAEX;AACA;AACA;AAEA;AACA;AACA;AAEA,YAAMM,UAAU,GAAIzB,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc,kBAAd,KAAoC,EAArC,EAAyC,cAAzC,EAClB,cADkB,EACDC,SADC,EACUA,SADV,EACqB,IADrB,CAAvC;AAEA,YAAOa,WAAW,GAAGV,UAAU,CAACO,GAAX,CAAe,YAAf,CAArB;AAEA,YAAMN,aAAa,GAAI1B,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc,qBAAd,KAAuC,EAAxC,EAA4C,iBAA5C,EAClB,iBADkB,EACEC,SADF,EACaA,SADb,EACwB,IADxB,CAA1C;AAEA,YAAOc,cAAc,GAAGV,aAAa,CAACM,GAAd,CAAkB,YAAlB,CAAxB;AAEA,YAAMkI,gBAAgB,GAAIlK,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc8I,aAAd,IAA8B,EAA/B,EAAmC,oBAAnC,EACnB,oBADmB,EACI7I,SADJ,EACeA,SADf,EAC0B,IAD1B,CAA7C;AAEA,YAAOY,iBAAiB,GAAGgI,gBAAgB,CAAClI,GAAjB,CAAqB,YAArB,CAA3B;AAEA,YAAMoI,eAAe,GAAIpK,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAc2I,eAAd,IAAgC,EAAjC,EAAqC,sBAArC,EAChB,kBADgB,EACK1I,SADL,EACgBA,SADhB,EAC2B,IAD3B,CAA5C;AAEA,YAAOiB,mBAAmB,GAAG6H,eAAe,CAACpI,GAAhB,CAAoB,YAApB,CAA7B;AAGA,YAAMuB,YAAY,GAAIxD,kBAAkB,CAAEoB,QAAQ,CAACE,IAAT,CAAc,iBAAd,CAAF,EACJF,QAAQ,CAACE,IAAT,CAAc,kBAAd,CADI,EAC+B,cAD/B,EAC+C,cAD/C,CAAxC;AAIAb,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAC;AACAnD,UAAAA,WADA;AAEAC,UAAAA,cAFA;AAGAF,UAAAA,iBAHA;AAIAwD,UAAAA,OAAO,EAAC,KAJR;AAKAnD,UAAAA,mBALA;AAMAE,UAAAA,cAAc,EAAE,EAAC,GAAGlC,UAAU,CAACkC,cAAf;AACAc,YAAAA,YAAY,EAACA,YADb;AAC2BG,YAAAA,eAAe,EAACpC,SAD3C;AAEAwC,YAAAA,kBAAkB,EAACxC,SAFnB;AAGAqD,YAAAA,oBAAoB,EAAC;AAHrB;AANhB;AAA/B,OAAD,CAAR;AAaJ,KA/CO,EAgDPgB,KAhDO,CAgDDC,KAAK,IAAE;AACTpF,MAAAA,QAAQ,CAAC;AAAC6E,QAAAA,IAAI,EAAExF,cAAP;AAAuByF,QAAAA,OAAO,EAAE;AAACI,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACD,UAAIE,KAAK,CAACzE,QAAN,CAAe2B,MAAf,KAA0B,GAA9B,EAAkC;AAC9B7C,QAAAA,KAAK,CAAC2F,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAGI;AACA5F,QAAAA,KAAK,CAAC6F,IAAN,CAAWF,KAAK,CAACzE,QAAN,CAAeE,IAA1B;AACH;AAEJ,KAzDO,CAAP;AA0DH,GA5DG;AA4DF","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {sortData, getComboLabelValue, constructOptionList} from '../components/CommonScript';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport {transactionStatus, reportTypeEnum} from '../components/Enumeration';\r\n\r\nexport function getReportMasterComboService(inputParam){ \r\n    return function (dispatch) {    \r\n        // if (inputParam.operation === \"create\" || (inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus !== transactionStatus.APPROVED))\r\n        // {      \r\n            dispatch(initRequest(true));\r\n            let nreportcode = null;\r\n            if (inputParam.operation === \"update\"){\r\n                nreportcode = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n            }\r\n            return  rsapi.post(\"reportconfig/getReportMasterComboData\",{nreportcode, \r\n                                                                        userinfo:inputParam.userInfo,\r\n                                                                        filterreporttype : inputParam.filterReportType})\r\n            .then(response=>{ \r\n\r\n                const reportTypeMap = constructOptionList(response.data[\"ReportType\"] || [], \"nreporttypecode\",\r\n                                    \"sdisplayname\", undefined, undefined, true);\r\n                const reportModuleMap  = constructOptionList(response.data[\"ReportModule\"] ||[], \"nreportmodulecode\",\r\n                                    \"sdisplayname\" , undefined, undefined, true);\r\n                const reportSubTypeMap  = constructOptionList(response.data[\"COAReportType\"] ||[], \"ncoareporttypecode\",\r\n                                    \"scoareporttypename\" , undefined, undefined, true);               \r\n                const regTypeMap  = constructOptionList(response.data[\"RegistrationType\"] ||[], \"nregtypecode\",\r\n                                    \"sregtypename\" , undefined, undefined, true);\r\n                const regSubTypeMap  = constructOptionList(response.data[\"RegistrationSubType\"] ||[], \"nregsubtypecode\",\r\n                                    \"sregsubtypename\" , undefined, undefined, true);\r\n                const sectionMap  = constructOptionList(response.data[\"SectionList\"] ||[], \"nsectioncode\",\r\n                                    \"ssectionname\", undefined, undefined, true);\r\n                const decisionTypeMap  = constructOptionList(response.data[\"ReportDecisionType\"] ||[], \"nreportdecisiontypecode\",\r\n                                    \"sdecisiontypename\" , undefined, undefined, true);                             \r\n                const certificateTypeMap  = constructOptionList(response.data[\"CertificateType\"] ||[], \"ncertificatetypecode\",\r\n                                    \"scertificatetype\" , undefined, undefined, true);\r\n                const controlScreenTypeMap  = constructOptionList(response.data[\"ControlScreen\"] ||[], \"nformcode\",\r\n                                    \"sdisplaynames\" , undefined, undefined, true);\r\n\r\n                const  reportTypeList  = reportTypeMap.get(\"OptionList\");\r\n                const  reportModuleList = reportModuleMap.get(\"OptionList\");\r\n                const  reportSubTypeList = reportSubTypeMap.get(\"OptionList\");\r\n                const  regTypeList = regTypeMap.get(\"OptionList\");                                                       \r\n                const  regSubTypeList = regSubTypeMap.get(\"OptionList\");\r\n                const  sectionList = sectionMap.get(\"OptionList\"); \r\n                const  decisionTypeList = decisionTypeMap.get(\"OptionList\"); \r\n                const  certificateTypeList = certificateTypeMap.get(\"OptionList\");     \r\n                const  controlScreenTypeList = controlScreenTypeMap.get(\"OptionList\");                              \r\n                             \r\n                let selectedRecord =  {ntransactionstatus:transactionStatus.ACTIVE};\r\n                let respObject = {\"reportVersionStatus\" :transactionStatus.DRAFT};\r\n                    \r\n                if (inputParam.operation === \"update\"){\r\n                    if (response.status === 202){\r\n                        respObject[\"reportVersionStatus\"] = transactionStatus.APPROVED;\r\n                        respObject[\"ApprovedReportMaster\"] = response.data[\"SelectedReportDesigner\"];\r\n                    }     \r\n                    selectedRecord = JSON.parse(JSON.stringify(response.data[\"SelectedReportDesigner\"]));\r\n                    if (selectedRecord.nreporttypecode === reportTypeEnum.SAMPLE\r\n                         || selectedRecord.nreporttypecode === reportTypeEnum.COA) \r\n                    {\r\n                        selectedRecord[\"nregtypecode\"] ={value:response.data[\"SelectedReportDesigner\"].nregtypecode,\r\n                                                            label:response.data[\"SelectedReportDesigner\"].sregtypename};\r\n                        if (response.data[\"SelectedReportDesigner\"].nregsubtypecode !== -1)\r\n                        {\r\n                            selectedRecord[\"nregsubtypecode\"] = {value : response.data[\"SelectedReportDesigner\"].nregsubtypecode,\r\n                                                                label: response.data[\"SelectedReportDesigner\"].sregsubtypename}; \r\n                        }\r\n                        else{\r\n                            selectedRecord[\"nregsubtypecode\"] = undefined;\r\n                        }\r\n\r\n                        if (response.data[\"SelectedReportDesigner\"].nsectioncode !== -1)\r\n                        {\r\n                            selectedRecord[\"nsectioncode\"] = {value : response.data[\"SelectedReportDesigner\"].nsectioncode,\r\n                                                                label: response.data[\"SelectedReportDesigner\"].ssectionname}; \r\n                        }\r\n                        else{\r\n                            selectedRecord[\"nsectioncode\"] = undefined;\r\n                         }\r\n\r\n                        if (response.data[\"SelectedReportDesigner\"].ncoareporttypecode !== -1)\r\n                        {\r\n                             selectedRecord[\"ncoareporttypecode\"] = {value : response.data[\"SelectedReportDesigner\"].ncoareporttypecode,\r\n                                                                 label: response.data[\"SelectedReportDesigner\"].scoareporttypename}; \r\n                        }\r\n                        else{\r\n                             selectedRecord[\"ncoareporttypecode\"] = undefined;\r\n                        }\r\n\r\n                        if (selectedRecord.nreporttypecode === reportTypeEnum.SAMPLE){\r\n                            selectedRecord[\"nreportdecisiontypecode\"] = {value : response.data[\"SelectedReportDesigner\"].nreportdecisiontypecode,\r\n                                                                        label: response.data[\"SelectedReportDesigner\"].sdecisiontypename};  \r\n                        }\r\n                      \r\n                    }   \r\n                    else  if (selectedRecord.nreporttypecode === reportTypeEnum.MIS) \r\n                    {\r\n                        selectedRecord[\"nreportmodulecode\"] = {value : response.data[\"SelectedReportDesigner\"].nreportmodulecode,\r\n                                                               label: response.data[\"SelectedReportDesigner\"].smoduledisplayname,\r\n                                                           \r\n                                                            } ;\r\n\r\n                        selectedRecord[\"nreportmodule\"] = {value : response.data[\"SelectedReportDesigner\"].smoduledisplayname,\r\n                                                            label: response.data[\"SelectedReportDesigner\"].smoduledisplayname}\r\n                     \r\n                    } \r\n                       \r\n                    else  if (selectedRecord.nreporttypecode === reportTypeEnum.SCREENWISE) \r\n                    {\r\n                        selectedRecord[\"ncontrolcode\"] = {value : response.data[\"SelectedReportDesigner\"].ncontrolcode,\r\n                                                                  label: response.data[\"SelectedReportDesigner\"].scontrolids};  \r\n\r\n                        selectedRecord[\"nformcode\"] = {value : response.data[\"SelectedReportDesigner\"].nformcode,\r\n                                                                  label: response.data[\"SelectedReportDesigner\"].sdisplayname};  \r\n                    }\r\n\r\n                   if (selectedRecord.nreporttypecode === reportTypeEnum.SAMPLE\r\n                        || selectedRecord.nreporttypecode === reportTypeEnum.BATCH) \r\n                    {\r\n                        if (response.data[\"SelectedReportDesigner\"].ncoareporttypecode !== -1)\r\n                        {\r\n                             selectedRecord[\"ncoareporttypecode\"] = {value : response.data[\"SelectedReportDesigner\"].ncoareporttypecode,\r\n                                                                 label: response.data[\"SelectedReportDesigner\"].scoareporttypename}; \r\n                        }\r\n                        else{\r\n                             selectedRecord[\"ncoareporttypecode\"] = undefined;\r\n                        }\r\n                        selectedRecord[\"ncertificatetypecode\"] = {value : response.data[\"SelectedReportDesigner\"].ncertificatetypecode,\r\n                                                                    label: response.data[\"SelectedReportDesigner\"].scertificatetype};  \r\n\r\n                        selectedRecord[\"sbatchtypename\"] = response.data[\"SelectedReportDesigner\"].sbatchtypename\r\n                    }\r\n\r\n                    selectedRecord[\"ntransactionstatus\"] = response.data[\"SelectedReportDesigner\"].ntransactionstatus;\r\n\r\n                    selectedRecord[\"nreporttypecode\"] ={item:response.data[\"SelectedReportDesigner\"],\r\n                                                        value:response.data[\"SelectedReportDesigner\"].nreporttypecode,\r\n                                                        label:response.data[\"SelectedReportDesigner\"].sreportdisplayname};\r\n                             \r\n                }\r\n                                   \r\n                respObject = { ...respObject, reportSubTypeList,//:response.data[\"COAReportType\"]  || [], \r\n                                    regTypeList,//:response.data[\"RegistrationType\"]  || [],                                                               \r\n                                    regSubTypeList,//:response.data[\"RegistrationSubType\"]  || [],  \r\n                                    sectionList,//:response.data[\"SectionList\"] || [],   \r\n                                    certificateTypeList,  \r\n                                    reportDecisionTypeList:decisionTypeList,\r\n                                    controlScreen:controlScreenTypeList  ,\r\n                                    //masterData:{...inputParam.masterData, SelectedFilterReportType:response.data[\"SelectedReportType\"] }                                                             \r\n                                };                  \r\n\r\n                if (inputParam.operation === \"create\")\r\n                {\r\n                    selectedRecord[\"nreporttypecode\"] = {item:response.data[\"SelectedReportType\"],label:response.data[\"SelectedReportType\"].sdisplayname,\r\n                                                         value: response.data[\"SelectedReportType\"].nreporttypecode}\r\n                   \r\n                    if (selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE\r\n                        &&  selectedRecord[\"nreporttypecode\"]['item'].isneedregtype === transactionStatus.YES){\r\n                        selectedRecord[\"nregtypecode\"] =  getComboLabelValue (response.data[\"SelectedRegType\"], \r\n                                                                response.data[\"RegistrationType\"], \"nregtypecode\", \"sregtypename\")                 \r\n                        \r\n                        if (selectedRecord[\"nreporttypecode\"]['item'].isneedsection === transactionStatus.YES){\r\n                            selectedRecord[\"nsectioncode\"] = sectionMap.get(\"DefaultValue\");\r\n                        }\r\n                    }\r\n                }\r\n                dispatch({type: DEFAULT_RETURN, payload:{reportTypeList,//:response.data[\"ReportType\"] || [], \r\n                                                        reportModuleList,//:response.data[\"ReportModule\"] || [] ,\r\n                                                        ...respObject,\r\n                                                        operation:inputParam.operation, \r\n                                                        screenName:inputParam.screenName,   \r\n                                                        selectedRecord, \r\n                                                        openModal : true,\r\n                                                        ncontrolCode:inputParam.ncontrolcode,\r\n                                                        loading:false\r\n                                                        }});\r\n                \r\n            })\r\n            .catch(error=>{\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }  \r\n            }) \r\n            // }\r\n            // else{       \r\n            //     toast.warn(intl.formatMessage({id: \"IDS_CANNOTUPDATEAPPROVEDREPORT\"}));\r\n            // }\r\n   \r\n}}\r\n\r\nexport function getReportDetailComboService(inputParam){ \r\n    return function (dispatch) {    \r\n    if (inputParam.operation === \"create\" || (inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus === transactionStatus.DRAFT))\r\n    {       \r\n        if (inputParam.masterData.SelectedReportMaster !== null){  \r\n                dispatch(initRequest(true));\r\n                let nreportdetailcode = null;\r\n                if (inputParam.operation === \"update\"){\r\n                    nreportdetailcode = inputParam.detailtoedit[inputParam.primaryKeyName];\r\n                }\r\n                return  rsapi.post(\"reportconfig/getReportDetailComboData\",{nreportdetailcode, \r\n                                                        reportmaster:inputParam.masterData.SelectedReportMaster, \r\n                                                        userinfo:inputParam.userInfo})\r\n                .then(response=>{                                  \r\n                    \r\n                    // const reportType = response.data[\"SelectedReportType\"];\r\n                    // const reportSubTypeMap  = constructOptionList(response.data[\"COAReportType\"] ||[], \"ncoareporttypecode\",\r\n                    //                             \"scoareporttypename\" , undefined, undefined, true);    \r\n                    // const sectionMap  = constructOptionList(response.data[\"SectionList\"] ||[], \"nsectioncode\",\r\n                    //                             \"ssectionname\", undefined, undefined, true);\r\n\r\n                    // const decisionTypeMap  = constructOptionList(response.data[\"ReportDecisionType\"] ||[], \"nreportdecisiontypecode\",\r\n                    //                             \"sdecisiontypename\" , undefined, undefined, true);   \r\n                                                \r\n                    // const certificateTypeMap  = constructOptionList(response.data[\"CertificateType\"] ||[], \"ncertificatetypecode\",\r\n                    //                             \"scertificatetype\" , undefined, undefined, true);\r\n                    \r\n                    // const  reportSubTypeList = reportSubTypeMap.get(\"OptionList\");\r\n                    // const  sectionList = sectionMap.get(\"OptionList\"); \r\n                    // const  decisionTypeList = decisionTypeMap.get(\"OptionList\");\r\n                    // const  certificateTypeList = certificateTypeMap.get(\"OptionList\");  \r\n                        \r\n                    let selectedRecord =  {};\r\n                    let respObject = {};\r\n                    if (inputParam.operation === \"update\"){\r\n                        selectedRecord = response.data[\"SelectedReportDetail\"];\r\n                \r\n                    }                        \r\n                    selectedRecord[\"ntransactionstatus\"]  = transactionStatus.DRAFT; \r\n                        \r\n                    //    console.log(\"selected in action:\", selectedRecord);\r\n                    dispatch({type: DEFAULT_RETURN, payload:{...respObject,\r\n                                                                operation:inputParam.operation, \r\n                                                                screenName:inputParam.screenName,   \r\n                                                                selectedRecord, \r\n                                                                openModal : true,\r\n                                                                ncontrolCode:inputParam.ncontrolcode,\r\n                                                                loading:false\r\n                                                                }});\r\n                })\r\n                .catch(error=>{\r\n                    dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                    if (error.response.status === 500){\r\n                        toast.error(error.message);\r\n                    } \r\n                    else{               \r\n                        toast.warn(error.response.data);\r\n                    }  \r\n                }) \r\n            }\r\n            else{\r\n                toast.warn(intl.formatMessage({id: \"IDS_REPORTNOTFOUND\"}));\r\n            }\r\n    }\r\n    else{       \r\n        toast.warn(intl.formatMessage({id: \"IDS_CANNOTEDITAPPROVEDREPORT\"}));\r\n    }\r\n}}\r\n\r\nexport function getSelectedReportMasterDetail (inputParam) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"reportconfig/getReportDesigner\", {nreportcode:parseInt(inputParam.nreportcode), \r\n            userinfo:inputParam.userInfo})\r\n   .then(response=>{      \r\n\r\n        const masterData = {...inputParam.masterData, ...response.data}; \r\n     \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, operation:null, modalName:undefined, \r\n             loading:false}});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}}\r\n\r\nexport function getSelectedReportDetail (inputParam) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"reportconfig/getReportDetail\", {nreportdetailcode:parseInt(inputParam.nreportdetailcode), \r\n            userinfo:inputParam.userInfo})\r\n   .then(response=>{      \r\n\r\n        const masterData = {...inputParam.masterData, ...response.data}; \r\n     \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, operation:null, modalName:undefined, \r\n             loading:false}});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}}\r\n\r\nexport function getConfigReportComboService (inputParam) {\r\n    return function (dispatch) {   \r\n        \r\n    if (inputParam.reportMaster.nreporttypecode ===  reportTypeEnum.MIS)\r\n    {\r\n        if (inputParam.reportDetail.ntransactionstatus === transactionStatus.DRAFT){\r\n                dispatch(initRequest(true));\r\n                return rsapi.post(\"reportconfig/getReportAddDesignComboData\", {nreportdetailcode:parseInt(inputParam.reportDetail.nreportdetailcode),\r\n                                            userinfo:inputParam.userInfo})\r\n                .then(response=>{     \r\n                    \r\n                    const parameterMap  = constructOptionList(response.data[\"ReportParameter\"] ||[], \"nreportparametercode\",\r\n                                        \"sreportparametername\", undefined, undefined, true);     \r\n\r\n                    const  reportParameterList  = parameterMap.get(\"OptionList\");\r\n\r\n                    const designComponentMap  = constructOptionList(response.data[\"DesignComponents\"] ||[], \"ndesigncomponentcode\",\r\n                                        \"sdesigncomponentname\", undefined, undefined, true);     \r\n\r\n                    const  designComponentList  = designComponentMap.get(\"OptionList\");\r\n\r\n                    const sqlQueryMap  = constructOptionList(response.data[\"SQLQuery\"] ||[], \"nsqlquerycode\",\r\n                                        \"ssqlqueryname\", undefined, undefined, true);     \r\n\r\n                    const  sqlQueryList  = sqlQueryMap.get(\"OptionList\");\r\n\r\n                    dispatch({type: DEFAULT_RETURN, payload:{reportParameterList,//:response.data[\"ReportParameter\"] || [], \r\n                                                            designComponentList,//:response.data[\"DesignComponents\"] || [],\r\n                                                            sqlQueryList,//:response.data[\"SQLQuery\"] || [], \r\n                                                            operation:inputParam.operation, \r\n                                                            screenName:inputParam.screenName,   \r\n                                                            //selectedRecord:{nmandatory:transactionStatus.YES}, \r\n                                                            selectedRecord:{},\r\n                                                            openModal : true,\r\n                                                            ncontrolCode:inputParam.ncontrolCode,\r\n                                                            loading:false\r\n                                                            }}); \r\n                })\r\n                .catch(error=>{\r\n                        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                    if (error.response.status === 500){\r\n                        toast.error(error.message);\r\n                    } \r\n                    else{               \r\n                        toast.warn(error.response.data);\r\n                    }  \r\n                \r\n                })\r\n        }\r\n        else{\r\n            toast.warn(intl.formatMessage({id:\"IDS_CANNOTCONFIGUREAPPROVEDREPORT\"}))\r\n        }\r\n    }\r\n    else{\r\n        toast.warn(intl.formatMessage({id:\"IDS_CANCONFIGUREMISREPORT\"}))\r\n    }\r\n}}\r\n\r\nexport function getParameterMappingComboService (inputParam) {\r\n    return function (dispatch) {   \r\n        \r\n        if (inputParam.reportMaster.nreporttypecode ===  reportTypeEnum.MIS)\r\n        {\r\n            if (inputParam.reportDetail.ntransactionstatus === transactionStatus.DRAFT){\r\n                    dispatch(initRequest(true));\r\n                    return rsapi.post(\"reportconfig/getReportParameterMappingComboData\", {nreportdetailcode:parseInt(inputParam.reportDetail.nreportdetailcode),\r\n                                                userinfo:inputParam.userInfo})\r\n                .then(response=>{  \r\n                    if (response.data[\"ChildComponentList\"].length > 0){    \r\n\r\n                            const parentComponentMap  = constructOptionList(response.data[\"ParentComponentList\"] ||[], \"nreportdesigncode\",\r\n                                                \"sdisplayname\", undefined, undefined, true);    \r\n                            const parentComponentList  = parentComponentMap.get(\"OptionList\");\r\n\r\n                            const childComponentMap  = constructOptionList(response.data[\"ChildComponentList\"] ||[], \"nreportdesigncode\",\r\n                                                        \"sdisplayname\", undefined, undefined, true);    \r\n                            const childComponentList  = childComponentMap.get(\"OptionList\");\r\n\r\n                            dispatch({type: DEFAULT_RETURN, payload:{parentComponentList,//:response.data[\"ParentComponenList\"] || [],\r\n                                                                    childComponentList,//:response.data[\"ChildComponentList\"] || [], \r\n                                                                    operation:inputParam.operation, \r\n                                                                    screenName:inputParam.screenName,   \r\n                                                                    selectedRecord:{}, \r\n                                                                    openModal : true,\r\n                                                                    ncontrolCode:inputParam.ncontrolCode,\r\n                                                                    loading:false\r\n                                                                    }}); \r\n                    }\r\n                    else{\r\n                        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                        toast.warn(intl.formatMessage({id:\"IDS_NOPARAMETERSTOMAP\"}))\r\n                    }\r\n                })\r\n                .catch(error=>{\r\n                        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                    if (error.response.status === 500){\r\n                        toast.error(error.message);\r\n                    } \r\n                    else{               \r\n                        toast.warn(error.response.data);\r\n                    }  \r\n                \r\n                })\r\n            }\r\n            else{\r\n                toast.warn(intl.formatMessage({id:\"IDS_CANNOTMAPAPPROVEDREPORT\"}))\r\n            }\r\n        }\r\n        else{\r\n            toast.warn(intl.formatMessage({id:\"IDS_CANMAPMISREPORT\"}))\r\n        }\r\n}}\r\n\r\nexport function viewReportDetail(reportmaster, userInfo, masterData) {\r\n    return function (dispatch) {   \r\n        if (reportmaster !== undefined)\r\n        {\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"reportview/viewReport\", {reportmaster, userinfo:userInfo})\r\n            .then(response=>{ \r\n               // console.log(\"report action:\", response);\r\n                masterData = {...masterData, ...response.data};\r\n\r\n                if (response.data[\"ViewReportDesignConfig\"] !== undefined ){\r\n                    masterData[\"ReportPDFFile\"] = undefined;\r\n                }\r\n                else{\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", masterData[\"ReportPDFFile\"]);\r\n                    document.getElementById(\"download_data\").click();\r\n                }\r\n            \r\n                dispatch({type: DEFAULT_RETURN, payload:{masterData, loading:false}});   \r\n            })\r\n            .catch(error=>{\r\n                    dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }             \r\n            })\r\n        }\r\n        else{\r\n            toast.warn(intl.formatMessage({id:\"IDS_REPORTNOTFOUND\"}))\r\n        }\r\n}}\r\n\r\n// export function getActionMappingComboService(inputParam) {\r\n//     return function (dispatch) {   \r\n        \r\n//     if (inputParam.reportDetail.ntransactionstatus === transactionStatus.DRAFT){\r\n//             dispatch(initRequest(true));\r\n//             return rsapi.post(\"reportconfig/getActionMappingComboData\", {nreportdetailcode:parseInt(inputParam.reportDetail.nreportdetailcode),\r\n//                                         userinfo:inputParam.userInfo})\r\n//         .then(response=>{ \r\n//             if (response.data[\"ActionMappingChild\"].length > 0)\r\n//             {     \r\n//                     dispatch({type: DEFAULT_RETURN, payload:{actionMappingParentList:response.data[\"ActionMappingParent\"] || [],\r\n//                                                             actionMappingChildList:response.data[\"ActionMappingChild\"] || [], \r\n//                                                             operation:inputParam.operation, \r\n//                                                             screenName:inputParam.screenName,   \r\n//                                                             selectedRecord:{}, \r\n//                                                             openModal : true,\r\n//                                                             ncontrolCode:inputParam.ncontrolCode,\r\n//                                                             loading:false\r\n//                                                             }}); \r\n//             }\r\n//             else{\r\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n//                 toast.warn(intl.formatMessage({id:\"IDS_NOACTIONSTOMAP\"}))\r\n//             }\r\n//         })\r\n//         .catch(error=>{\r\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n//             if (error.response.status === 500){\r\n//                 toast.error(error.message);\r\n//             } \r\n//             else{               \r\n//                 toast.warn(error.response.data);\r\n//             }  \r\n        \r\n//         })\r\n//     }\r\n//     else{\r\n//         toast.warn(intl.formatMessage({id:\"IDS_CANNOTACTIONMAPAPPROVEDREPORT\"}))\r\n//     }\r\n// }}\r\n\r\nexport function getReportViewChildDataList(inputParam) {\r\n    return function (dispatch) {   \r\n       // dispatch(initRequest(true));\r\n        return rsapi.post(\"reportview/getChildDataList\", {...inputParam[\"inputData\"]})\r\n       .then(response=>{     \r\n            const controlList = inputParam.viewReportDesignConfigList;\r\n\r\n            const selectedRecord = inputParam.selectedRecord;\r\n          \r\n            Object.keys(response.data).map(displayName=>{\r\n                const index = controlList.findIndex(item=> displayName === item.sdisplayname);   \r\n           \r\n                    const comboMap = constructOptionList(response.data[displayName] || [], controlList[index].svaluemember,\r\n                                    controlList[index].sdisplaymember, undefined, undefined, true);\r\n\r\n                    const comboList = comboMap.get(\"OptionList\");\r\n                    selectedRecord[controlList[index].svaluemember] = undefined;\r\n                        \r\n                return controlList[index][\"dataList\"] = comboList;//response.data[displayName]\r\n            })\r\n            dispatch({type: DEFAULT_RETURN, payload:{viewReportDesignConfigList:controlList, \r\n                                                     loading:false,\r\n                                                     inputFieldData : inputParam.inputData.inputfielddata, \r\n                                                     selectedRecord}});   \r\n       })\r\n       .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n           if (error.response.status === 500){\r\n               toast.error(error.message);\r\n           } \r\n           else{               \r\n               toast.warn(error.response.data);\r\n           }  \r\n      \r\n       })\r\n}}\r\n\r\nexport function viewReportDetailWithParameters(viewReportParam) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"reportview/viewReportWithParameters\", {...viewReportParam})\r\n   .then(response=>{     \r\n        const masterData = {...viewReportParam.masterData,  \r\n                            ReportPDFFile:response.data[\"ReportPDFFile\"],\r\n                            SelectedReportDetails:response.data[\"SelectedReportDetails\"],\r\n                            ReportPDFPath:response.data[\"ReportPDFPath\"],\r\n                            ViewReportDesignConfig :undefined} ;\r\n              \r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, loading:false, //openModal:false\r\n                }});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}}\r\n\r\nexport function getReportsByModule(inputParam) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"reportview/getReportView\", {nreportmodulecode:inputParam.nreportmodulecode, \r\n            userinfo:inputParam.userInfo})\r\n   .then(response=>{      \r\n\r\n        const masterData = {...inputParam.masterData, ...response.data}; \r\n\r\n        // const  reportModuleMap  = constructOptionList(masterData.ViewReportModuleList ||[], \"nreportmodulecode\",\r\n        //                          \"smoduledisplayname\" , undefined, undefined, true);\r\n        // const  reportModuleList  = reportModuleMap.get(\"OptionList\");\r\n     \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, //viewReportModuleList:reportModuleList,\r\n                                                operation:null, modalName:undefined, \r\n                                                loading:false, selectedRecord: inputParam.selectedRecord}});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}}\r\n\r\n\r\nexport function getControlButton(inputParam) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"reportconfig/getControlButton\", {nformcode:inputParam.ControlScreen.nformcode, \r\n            userinfo:inputParam.userInfo})\r\n   .then(response=>{     \r\n       \r\n        const controlButtonMap  = constructOptionList(response.data ||[], \"ncontrolcode\",\r\n                                \"scontrolids\" , undefined, undefined, true);\r\n        const  controlButtonList = controlButtonMap.get(\"OptionList\");\r\n        dispatch({type: DEFAULT_RETURN, payload:{controlButton:controlButtonList,//: response.data,                                            \r\n                                                loading:false, \r\n                                                selectedRecord: {...inputParam.selectedRecord, \r\n                                                                 nregsubtypecode :undefined\r\n                                                                    //nregsubtypecode:{label:\"Please Select...\", value:-4}\r\n                                                                }\r\n                                                }\r\n                                            });   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}}\r\n\r\nexport function getReportRegSubType(inputParam) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"reportconfig/getReportRegistrationSubType\", {nregtypecode:inputParam.registrationType.nregtypecode, \r\n            userinfo:inputParam.userInfo})\r\n   .then(response=>{     \r\n       \r\n        const regSubTypeMap  = constructOptionList(response.data ||[], \"nregsubtypecode\",\r\n                                \"sregsubtypename\" , undefined, undefined, true);\r\n        const  regSubTypeList = regSubTypeMap.get(\"OptionList\");\r\n        dispatch({type: DEFAULT_RETURN, payload:{regSubTypeList,//: response.data,                                            \r\n                                                loading:false, \r\n                                                selectedRecord: {...inputParam.selectedRecord, \r\n                                                                 nregsubtypecode :undefined\r\n                                                                    //nregsubtypecode:{label:\"Please Select...\", value:-4}\r\n                                                                }\r\n                                                }\r\n                                            });   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}}\r\n\r\nexport function getReportSubType(inputParam) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"reportconfig/getReportSubType\", {nreporttypecode:inputParam.reportType.nreporttypecode, \r\n            userinfo:inputParam.userInfo\r\n        })\r\n   .then(response=>{     \r\n       \r\n        const reportSubTypeMap  = constructOptionList(response.data.CoaReportType ||[], \"ncoareporttypecode\",\r\n                                 \"scoareporttypename\" , undefined, undefined, true);   \r\n        const  reportSubTypeList = reportSubTypeMap.get(\"OptionList\");\r\n\r\n        const certificateTypeMap  = constructOptionList(response.data.CertificateType ||[], \"ncertificatetypecode\",\r\n        \"scertificatetype\" , undefined, undefined, true);   \r\n        const  certificateTypeList = certificateTypeMap.get(\"OptionList\");\r\n        dispatch({type: DEFAULT_RETURN, payload:{reportSubTypeList,  \r\n                                                 certificateTypeList,                                         \r\n                                                loading:false, \r\n                                                selectedRecord: {...inputParam.selectedRecord, \r\n                                                    ncoareporttypecode:undefined,\r\n                                                    ncertificatetypecode:\"\"\r\n                                                   // ncoareporttypecode:{label:\"Please Select...\", value:-4}\r\n                                                                }\r\n                                                }\r\n                                            });   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}}\r\n\r\nexport function getregtype(inputParam) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"reportconfig/getRegistrationtypeForSample\", {nregtypecode:inputParam.nregtypecode,nreporttypecode:inputParam.reportType.nreporttypecode,\r\n            userinfo:inputParam.userInfo\r\n        })\r\n   .then(response=>{    \r\n        \r\n        // const reportRegTypeMap  = constructOptionList(response.data.Regtype ||[], \"nregtypecode\",\r\n        //                          \"sregtypename\" , undefined, undefined, true);   \r\n        // const  reportRegTypeList = reportRegTypeMap.get(\"OptionList\");\r\n\r\n        // // const reportRegSubTypeMap  = constructOptionList(response.data.RegSubtype ||[], \"nregsubtypecode\",\r\n        // // \"sregsubtypename\" , undefined, undefined, true);   \r\n        // //   const  reportRegSubTypeList = reportRegSubTypeMap.get(\"OptionList\");\r\n\r\n        const regTypeMap  = constructOptionList(response.data[\"RegistrationType\"] ||[], \"nregtypecode\",\r\n                             \"sregtypename\" , undefined, undefined, true);\r\n        const  regTypeList = regTypeMap.get(\"OptionList\");  \r\n\r\n        const regSubTypeMap  = constructOptionList(response.data[\"RegistrationSubType\"] ||[], \"nregsubtypecode\",\r\n                                \"sregsubtypename\" , undefined, undefined, true);\r\n        const  regSubTypeList = regSubTypeMap.get(\"OptionList\");\r\n\r\n        const coaReportTypeMap  = constructOptionList(response.data.COAReportType ||[], \"ncoareporttypecode\",\r\n                                  \"scoareporttypename\" , undefined, undefined, true);   \r\n        const  reportSubTypeList = coaReportTypeMap.get(\"OptionList\");\r\n\r\n        const certificateType  = constructOptionList(response.data.CertificateType ||[], \"ncertificatetypecode\",\r\n                                    \"scertificatetype\" , undefined, undefined, true);   \r\n        const  certificateTypeList = certificateType.get(\"OptionList\");                   \r\n        \r\n\r\n        const nregtypecode =  getComboLabelValue (response.data[\"SelectedRegType\"], \r\n                                            response.data[\"RegistrationType\"], \"nregtypecode\", \"sregtypename\")                 \r\n\r\n\r\n        dispatch({type: DEFAULT_RETURN, payload:{ \r\n                                                regTypeList,\r\n                                                regSubTypeList,\r\n                                                reportSubTypeList,\r\n                                                loading:false, \r\n                                                certificateTypeList,\r\n                                                selectedRecord: {...inputParam.selectedRecord, \r\n                                                                nregtypecode:nregtypecode, nregsubtypecode:undefined,\r\n                                                                ncoareporttypecode:undefined,\r\n                                                                ncertificatetypecode:\"\"\r\n                                                                }\r\n                                                }\r\n                                            });   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}}"]},"metadata":{},"sourceType":"module"}