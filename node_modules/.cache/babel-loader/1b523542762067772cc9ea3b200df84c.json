{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\credentialmanagement\\\\UserRoleConfiguration.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col, Button } from 'react-bootstrap';\nimport { Grid, GridColumn, GridToolbar } from '@progress/kendo-react-grid';\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify'; // import { css } from 'styled-components';\n\nimport ColumnMenu from '../../components/data-grid/ColumnMenu';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../../pages/audittrail/Esign';\nimport { callService, crudMaster, updateStore, validateEsignCredential } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap } from '../../components/CommonScript';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport ReactTooltip from 'react-tooltip';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSync } from '@fortawesome/free-solid-svg-icons';\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass UserRoleConfiguration extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        loadEsign = false;\n        openModal = false;\n        selectedRecord = {};\n        const data = [...this.state.data];\n\n        if (this.state.selectedUserRole[this.state.columnName] === transactionStatus.YES) {\n          data[this.state.rowIndex][this.state.columnName] = transactionStatus.NO;\n        } else {\n          data[this.state.rowIndex][this.state.columnName] = transactionStatus.YES;\n        }\n\n        this.setState({\n          data\n        });\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.name === \"agree\") {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (selectedRecord, saveType, formRef) => {\n      let operation = \"\";\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo; // edit    \n\n      inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = selectedRecord;\n      this.extractedColumnList.map(item => {\n        return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = selectedRecord[item] ? selectedRecord[item] : \"\";\n      });\n      operation = \"update\";\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: operation,\n        saveType,\n        formRef\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, 114)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: operation //this.props.Login.operation\n\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      } //this.props.crudMaster(inputParam);\n\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.columnWidth = [];\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      addScreen: false,\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      selectedUserRole: {},\n      columnName: '',\n      rowIndex: 0\n    };\n  }\n\n  render() {\n    //  loadMessages(messages[this.props.Login.userInfo.slanguagetypecode], \"lang\");\n    // this.columnWidth = [{ \"width\": \"35%\" },{ \"width\": \"35%\" },{ \"width\": \"35%\" },{ \"width\": \"35%\" }];\n    // this.columnWidth = [{ \"width\": \"20%\" },{ \"width\": \"20%\" },{ \"width\": \"20%\" },{ \"width\": \"20%\" },{ \"width\": \"20%\" }];\n    this.extractedColumnList = [\"nuserrolecode\", \"suserrolename\", \"nneedapprovalflow\", \"nneedresultflow\"]; //, \"nneedproductflow\", \"nwithdrawnmail\"\n\n    const pageSizes = this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting));\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: this.props.Login.userInfo.slanguagetypecode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid // className={this.setPercentage()}\n    // sortable\n    , Object.assign({\n      className: \"active-paging\",\n      style: {\n        height: '600px'\n      },\n      resizable: true,\n      reorderable: true //scrollable=\"none\"\n      ,\n      scrollable: \"scrollable\",\n      pageable: {\n        buttonCount: 5,\n        pageSizes: pageSizes,\n        previousNext: false\n      },\n      data: this.state.dataResult\n    }, this.state.dataState, {\n      onDataStateChange: this.dataStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(GridToolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REFRESH\"\n      }) // data-for=\"tooltip-grid-wrap\"\n      ,\n      onClick: () => this.reloadData(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSync,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 53\n      }\n    }))), /*#__PURE__*/React.createElement(GridColumn, {\n      field: \"suserrolename\",\n      columnMenu: ColumnMenu,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_USERROLENAME\"\n      }),\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"]['suserrolename'] // data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 49\n        }\n      }, row[\"dataItem\"]['suserrolename']),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      field: \"nneedapprovalflow\",\n      title: this.props.intl.formatMessage({\n        id: \"IDS_NEEDAPPROVALFLOW\"\n      }),\n      headerClassName: \"text-center\",\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        } // data-tip={\"kfkf\"} \n        //  data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][\"nneedapprovalflow\"],\n        onChange: event => this.onInputOnChangeRole(event, row[\"dataItem\"], \"nneedapprovalflow\", row.dataIndex),\n        checked: row[\"dataItem\"][\"nneedapprovalflow\"] === transactionStatus.YES ? true : false,\n        name: row[\"dataItem\"][\"nuserrolecode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 53\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      field: \"nneedresultflow\",\n      title: this.props.intl.formatMessage({\n        id: \"IDS_NEEDRESULTFLOW\"\n      }),\n      headerClassName: \"text-center\",\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        } //data-tip=\"jdjd\" \n        //  data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][\"nneedresultflow\"],\n        onChange: event => this.onInputOnChangeRole(event, row[\"dataItem\"], \"nneedresultflow\", row.dataIndex),\n        checked: row[\"dataItem\"][\"nneedresultflow\"] === transactionStatus.YES ? true : false,\n        name: row[\"dataItem\"][\"nuserrolecode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 53\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 41\n      }\n    })))))))), /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }\n      }) : /*#__PURE__*/React.createElement(React.Fragment, null),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }));\n  } // setPercentage = () => {\n  //     let styles = css;\n  //     let idx = 1;\n  //     this.columnWidth.forEach(item => {\n  //         styles += `.k-grid-header col:nth-of-type(${idx}){\n  //                 width: ${item.width}\n  //             }\n  //             .k-grid-table col:nth-of-type(${idx}){\n  //                 width: ${item.width}\n  //             }`\n  //         idx++;\n  //     })\n  // }\n\n\n  componentDidUpdate(previousProps) {\n    ReactTooltip.rebuild();\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        this.setState({\n          data: this.props.Login.masterData,\n          isOpen: false,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    } // if (this.props.Login.masterData !== previousProps.Login.masterData) {\n    //     this.setState({\n    //         data: this.props.Login.masterData,\n    //         addScreen: this.props.Login.showScreen,\n    //         dataResult: process(this.props.Login.masterData, this.state.dataState),\n    //     });\n    // }\n\n  }\n\n  onInputOnChangeRole(event, rowItem, columnName, rowIndex) {\n    const selectedRecord = rowItem || {};\n    const selectedUserRole = rowItem || {};\n    let isCheck = false;\n\n    if (columnName === \"nneedresultflow\") {\n      if (event.target.checked === true) {\n        if (rowItem[\"nneedapprovalflow\"] === transactionStatus.YES) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTAPPROVALFLOWORRESULTFLOW\"\n          }));\n        } else {\n          isCheck = true;\n        }\n      } else {\n        // toast.warn(\"If you want deselect, Select another role\");\n        isCheck = true;\n      }\n    } else if (columnName === \"nneedapprovalflow\") {\n      if (event.target.checked === true) {\n        if (rowItem[\"nneedresultflow\"] === transactionStatus.YES) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTAPPROVALFLOWORRESULTFLOW\"\n          }));\n        } else {\n          isCheck = true;\n        }\n      } else {\n        isCheck = true;\n      }\n    } else if (columnName === \"nneedproductflow\" || columnName === \"nwithdrawnmail\" || columnName === \"nfailmail\") {\n      isCheck = true;\n    }\n\n    if (isCheck === true) {\n      selectedRecord[columnName] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      selectedUserRole[columnName] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      this.onSaveClick(selectedRecord, undefined, undefined);\n      this.setState({\n        selectedUserRole,\n        columnName,\n        rowIndex\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(UserRoleConfiguration));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/credentialmanagement/UserRoleConfiguration.jsx"],"names":["React","connect","injectIntl","Row","Col","Button","Grid","GridColumn","GridToolbar","process","toast","ColumnMenu","CustomSwitch","SlideOutModal","Esign","callService","crudMaster","updateStore","validateEsignCredential","DEFAULT_RETURN","showEsign","getControlMap","transactionStatus","ListWrapper","LocalizationProvider","ReactTooltip","FontAwesomeIcon","faSync","AtTableWrap","mapStateToProps","state","Login","UserRoleConfiguration","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","selectedUserRole","columnName","YES","rowIndex","NO","updateInfo","typeName","onInputOnChange","target","name","checked","value","reloadData","inputParam","inputData","userInfo","classUrl","methodUrl","displayName","onSaveClick","saveType","formRef","operation","toLowerCase","extractedColumnList","map","item","userRoleControlRights","nformcode","screenData","masterData","screenName","intl","formatMessage","id","validateEsign","sreason","password","createRef","columnWidth","skip","take","settings","parseInt","addScreen","masterStatus","error","render","pageSizes","split","setting","slanguagetypecode","height","buttonCount","previousNext","row","textAlign","onInputOnChangeRole","dataIndex","columnIndex","componentDidUpdate","previousProps","rebuild","Object","values","push","ncontrolcode","controlMap","isOpen","rowItem","isCheck","warn","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col, Button } from 'react-bootstrap';\r\nimport { Grid, GridColumn, GridToolbar } from '@progress/kendo-react-grid';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\n// import { css } from 'styled-components';\r\nimport ColumnMenu from '../../components/data-grid/ColumnMenu';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport { callService, crudMaster, updateStore, validateEsignCredential } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap } from '../../components/CommonScript';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { ListWrapper } from '../../components/client-group.styles'\r\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass UserRoleConfiguration extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.columnWidth = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            addScreen: false, data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            selectedUserRole: {}, columnName: '', rowIndex: 0\r\n        }\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n\r\n            loadEsign = false;\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            const data = [...this.state.data];\r\n            if (this.state.selectedUserRole[this.state.columnName] === transactionStatus.YES) {\r\n                data[this.state.rowIndex][this.state.columnName] = transactionStatus.NO;\r\n\r\n            }\r\n            else {\r\n                data[this.state.rowIndex][this.state.columnName] = transactionStatus.YES;\r\n\r\n            }\r\n            this.setState({ data });\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    render() {\r\n        //  loadMessages(messages[this.props.Login.userInfo.slanguagetypecode], \"lang\");\r\n        // this.columnWidth = [{ \"width\": \"35%\" },{ \"width\": \"35%\" },{ \"width\": \"35%\" },{ \"width\": \"35%\" }];\r\n        // this.columnWidth = [{ \"width\": \"20%\" },{ \"width\": \"20%\" },{ \"width\": \"20%\" },{ \"width\": \"20%\" },{ \"width\": \"20%\" }];\r\n        this.extractedColumnList = [\"nuserrolecode\", \"suserrolename\", \"nneedapprovalflow\", \"nneedresultflow\"];\r\n        //, \"nneedproductflow\", \"nwithdrawnmail\"\r\n        const pageSizes = this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting))\r\n        return (<>\r\n            <Row>\r\n                <Col>\r\n                    <ListWrapper className=\"client-list-content\">\r\n                        {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                        \r\n                        <AtTableWrap className=\"at-list-table\">\r\n                            <LocalizationProvider language={this.props.Login.userInfo.slanguagetypecode}>\r\n                                <>\r\n                                    <Grid\r\n                                        // className={this.setPercentage()}\r\n                                        // sortable\r\n                                        className={\"active-paging\"}\r\n                                        style={{ height: '600px' }}\r\n                                        resizable\r\n                                        reorderable\r\n                                        //scrollable=\"none\"\r\n                                        scrollable={\"scrollable\"}\r\n                                        pageable={{ buttonCount: 5, pageSizes: pageSizes, previousNext: false }}\r\n                                        data={this.state.dataResult}\r\n                                        {...this.state.dataState}\r\n                                        onDataStateChange={this.dataStateChange}>\r\n                                        <GridToolbar>\r\n                                                <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}\r\n                                                    // data-for=\"tooltip-grid-wrap\"\r\n                                                    onClick={() => this.reloadData()}>\r\n                                                    <FontAwesomeIcon icon={faSync} />\r\n                                                </Button>\r\n                                        </GridToolbar>\r\n\r\n                                        <GridColumn\r\n                                            field=\"suserrolename\"\r\n                                            columnMenu={ColumnMenu}\r\n                                            title={this.props.intl.formatMessage({ id: \"IDS_USERROLENAME\" })}\r\n                                            cell={(row) => (\r\n                                                <td data-tip={row[\"dataItem\"]['suserrolename']}\r\n                                                // data-for=\"tooltip-grid-wrap\"\r\n                                                >\r\n                                                    {row[\"dataItem\"]['suserrolename']}\r\n                                                </td>\r\n                                            )}\r\n                                        />\r\n                                        <GridColumn\r\n                                            field={\"nneedapprovalflow\"}\r\n                                            title={this.props.intl.formatMessage({ id: \"IDS_NEEDAPPROVALFLOW\" })}\r\n                                            headerClassName=\"text-center\"\r\n                                            cell={(row) => (\r\n                                                <td style={{ textAlign: \"center\" }}\r\n                                                // data-tip={\"kfkf\"} \r\n                                                //  data-for=\"tooltip-grid-wrap\"\r\n                                                >\r\n                                                    <CustomSwitch type=\"switch\" id={row[\"dataItem\"][\"nneedapprovalflow\"]}\r\n                                                        onChange={(event) => this.onInputOnChangeRole(event, row[\"dataItem\"], \"nneedapprovalflow\", row.dataIndex)}\r\n                                                        checked={row[\"dataItem\"][\"nneedapprovalflow\"] === transactionStatus.YES ? true : false}\r\n                                                        name={row[\"dataItem\"][\"nuserrolecode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                </td>)}\r\n                                        />\r\n                                        <GridColumn\r\n                                            field={\"nneedresultflow\"}\r\n                                            title={this.props.intl.formatMessage({ id: \"IDS_NEEDRESULTFLOW\" })}\r\n                                            headerClassName=\"text-center\"\r\n                                            cell={(row) => (\r\n                                                <td style={{ textAlign: \"center\" }}\r\n                                                //data-tip=\"jdjd\" \r\n                                                //  data-for=\"tooltip-grid-wrap\"\r\n                                                >\r\n                                                    <CustomSwitch type=\"switch\" id={row[\"dataItem\"][\"nneedresultflow\"]}\r\n                                                        onChange={(event) => this.onInputOnChangeRole(event, row[\"dataItem\"], \"nneedresultflow\", row.dataIndex)}\r\n                                                        checked={row[\"dataItem\"][\"nneedresultflow\"] === transactionStatus.YES ? true : false}\r\n                                                        name={row[\"dataItem\"][\"nuserrolecode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                </td>)}\r\n                                        />\r\n                                        {/* <GridColumn\r\n                                            field={\"nneedproductflow\"}\r\n                                            title={this.props.intl.formatMessage({ id: \"IDS_NEEDPRODUCTFLOW\" })}\r\n                                            headerClassName=\"text-center\"\r\n                                            cell={(row) => (\r\n                                                <td style={{ textAlign: \"center\" }}>\r\n                                                    <CustomSwitch type=\"switch\" id={row[\"dataItem\"][\"nneedproductflow\"]}\r\n                                                        onChange={(event) => this.onInputOnChangeRole(event, row[\"dataItem\"], \"nneedproductflow\", row.dataIndex)}\r\n                                                        checked={row[\"dataItem\"][\"nneedproductflow\"] === transactionStatus.YES ? true : false}\r\n                                                        name={row[\"dataItem\"][\"nuserrolecode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                </td>)}\r\n                                        />\r\n                                        <GridColumn\r\n                                            field={\"nwithdrawnmail\"}\r\n                                            width=\"175px\"\r\n                                            title={this.props.intl.formatMessage({ id: \"IDS_WITHDRAWNEMAIL\" })}\r\n                                            headerClassName=\"text-center\"\r\n                                            cell={(row) => (\r\n                                                <td style={{ textAlign: \"center\" }}>\r\n                                                    <CustomSwitch type=\"switch\" id={row[\"dataItem\"][\"nwithdrawnmail\"]}\r\n                                                        onChange={(event) => this.onInputOnChangeRole(event, row[\"dataItem\"], \"nwithdrawnmail\", row.dataIndex)}\r\n                                                        checked={row[\"dataItem\"][\"nwithdrawnmail\"] === transactionStatus.YES ? true : false}\r\n                                                        name={row[\"dataItem\"][\"nuserrolecode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                </td>)}\r\n                                        />\r\n                                        <GridColumn\r\n                                            field={\"nfailmail\"}\r\n                                            width=\"175px\"\r\n                                            title={this.props.intl.formatMessage({ id: \"IDS_FAILEMAIL\" })}\r\n                                            headerClassName=\"text-center\"\r\n                                            cell={(row) => (\r\n                                                <td style={{ textAlign: \"center\" }}>\r\n                                                    <CustomSwitch type=\"switch\" id={row[\"dataItem\"][\"nfailmail\"]}\r\n                                                        onChange={(event) => this.onInputOnChangeRole(event, row[\"dataItem\"], \"nfailmail\", row.dataIndex)}\r\n                                                        checked={row[\"dataItem\"][\"nfailmail\"] === transactionStatus.YES ? true : false}\r\n                                                        name={row[\"dataItem\"][\"nuserrolecode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                </td>)}\r\n                                        /> */}\r\n                                    </Grid>\r\n                                </>\r\n                            </LocalizationProvider>\r\n                        </AtTableWrap>\r\n                        {/* <ReactTooltip/> */}\r\n                    </ListWrapper>\r\n                </Col>\r\n            </Row>\r\n            <SlideOutModal show={this.props.Login.openModal}\r\n                closeModal={this.closeModal}\r\n                operation={this.props.Login.operation}\r\n                inputParam={this.props.Login.inputParam}\r\n                screenName={this.props.Login.screenName}\r\n                onSaveClick={this.onSaveClick}\r\n                esign={this.props.Login.loadEsign}\r\n                validateEsign={this.validateEsign}\r\n                masterStatus={this.props.Login.masterStatus}\r\n                updateStore={this.props.updateStore}\r\n                selectedRecord={this.state.selectedRecord}\r\n                addComponent={this.props.Login.loadEsign ?\r\n                    <Esign operation={this.props.Login.operation}\r\n                        formatMessage={this.props.intl.formatMessage}\r\n                        onInputOnChange={this.onInputOnChange}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                    />\r\n                    :\r\n                    <>\r\n                    </>\r\n                }\r\n            />\r\n        </>\r\n        );\r\n    }\r\n\r\n    // setPercentage = () => {\r\n    //     let styles = css;\r\n    //     let idx = 1;\r\n    //     this.columnWidth.forEach(item => {\r\n    //         styles += `.k-grid-header col:nth-of-type(${idx}){\r\n    //                 width: ${item.width}\r\n    //             }\r\n    //             .k-grid-table col:nth-of-type(${idx}){\r\n    //                 width: ${item.width}\r\n    //             }`\r\n    //         idx++;\r\n    //     })\r\n    // }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        ReactTooltip.rebuild();\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    isOpen: false,\r\n                    selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n        }\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        // if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n        //     this.setState({\r\n        //         data: this.props.Login.masterData,\r\n        //         addScreen: this.props.Login.showScreen,\r\n        //         dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n        //     });\r\n        // }\r\n    }\r\n    onInputOnChangeRole(event, rowItem, columnName, rowIndex) {\r\n\r\n        const selectedRecord = rowItem || {};\r\n        const selectedUserRole = rowItem || {};\r\n        let isCheck = false;\r\n\r\n        if (columnName === \"nneedresultflow\") {\r\n            if (event.target.checked === true) {\r\n                if (rowItem[\"nneedapprovalflow\"] === transactionStatus.YES) {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTAPPROVALFLOWORRESULTFLOW\" }));\r\n                }\r\n                else {\r\n                    isCheck = true;\r\n                }\r\n            }\r\n            else {\r\n                // toast.warn(\"If you want deselect, Select another role\");\r\n                isCheck = true;\r\n            }\r\n\r\n        }\r\n        else if (columnName === \"nneedapprovalflow\") {\r\n            if (event.target.checked === true) {\r\n                if (rowItem[\"nneedresultflow\"] === transactionStatus.YES) {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTAPPROVALFLOWORRESULTFLOW\" }));\r\n                }\r\n                else {\r\n                    isCheck = true;\r\n                }\r\n            }\r\n            else {\r\n                isCheck = true;\r\n            }\r\n        }\r\n        else if (columnName === \"nneedproductflow\" || columnName === \"nwithdrawnmail\" || columnName === \"nfailmail\") {\r\n            isCheck = true;\r\n        }\r\n\r\n        if (isCheck === true) {\r\n            selectedRecord[columnName] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            selectedUserRole[columnName] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            this.onSaveClick(selectedRecord, undefined, undefined);\r\n            this.setState({ selectedUserRole, columnName, rowIndex });\r\n        }\r\n\r\n\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.name === \"agree\") {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n\r\n    reloadData = () => {\r\n\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n   \r\n\r\n    onSaveClick = (selectedRecord, saveType, formRef) => {\r\n\r\n        let operation = \"\";\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n\r\n        // edit    \r\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = selectedRecord;\r\n        this.extractedColumnList.map(item => {\r\n            return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = selectedRecord[item] ? selectedRecord[item] : \"\";\r\n        })\r\n        operation = \"update\";\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, 114)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: operation//this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n        //this.props.crudMaster(inputParam);\r\n\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster, updateStore, validateEsignCredential })(injectIntl(UserRoleConfiguration));"]},"metadata":{},"sourceType":"module"}