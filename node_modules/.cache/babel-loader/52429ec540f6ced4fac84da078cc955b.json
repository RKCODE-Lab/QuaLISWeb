{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\SampleStorageMaster.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faFileInvoice, faEye, faLink, faChevronRight, faComments, faLaptopHouse, faBoxOpen, faBoxTissue, faBox, faLocationArrow, faFolderMinus, faFolderOpen, faArrowRight } from '@fortawesome/free-solid-svg-icons';\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, getSampleMaster, openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, getContainerStorageCondition, getStorageConditionFromMaster, getSampleMasterDetails, getContainers, getselectedContainer, changeStorageCategoryFilterOnSampleMaster, openSampleStorageApprovedLocation, loadApprovedLocationOnCombo, filterColumnData, loadApprovedLocationOnTreeData, moveItems, saveSampleStorageMaster, getSelectedApprovedStorageVersion } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\nimport { mapTree, removeItems } from \"@progress/kendo-react-treelist\";\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport AddSample from '../basemaster/AddSample';\nimport AddContainerStorageCondition from './AddContainerStorageCondition';\nimport { ProductList } from '../product/product.styled';\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport StorageCategoryFilter from './StorageCategoryFilter';\nimport MoveSampleOrContainers from './MoveSampleOrContainers';\nimport { faFolder } from '@fortawesome/free-regular-svg-icons';\n\nclass SampleStorageMaster extends Component {\n  constructor(props) {\n    super(props);\n\n    this.openModal = () => {\n      if (this.props.Login.selectedItem && this.props.Login.selectedItem.containerlastnode === true) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal: true,\n            selectedRecord: {},\n            operation: \"create\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.closeModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: false,\n          selectedRecord: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeChildModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal: false,\n          selectedRecord: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[event.target.name] = event.target.value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onKeyUp = event => {\n      if (event.keyCode === 13) {\n        this.onSaveClickSample(2);\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.state.activeTabIndex === 1) {\n        this.onSaveClickSample(saveType, formRef);\n      } else {\n        this.onSaveClickContainer(saveType, formRef);\n      }\n    };\n\n    this.onSaveClickSample = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n\n      if (this.props.Login.operation === \"update\") {\n        inputData[\"sampleStorageMaster\"] = {\n          \"nsamplecode\": this.state.selectedRecord.nsamplecode ? this.state.selectedRecord.nsamplecode : -1,\n          \"ssampletraycode\": this.props.Login.sampleTrayCode ? this.props.Login.sampleTrayCode : \"\",\n          \"ssamplearno\": this.state.selectedRecord.ssamplearno ? this.state.selectedRecord.ssamplearno : \"\",\n          \"nsamplestoragelocationcode\": this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode\n        };\n      } else {\n        //add               \n        inputData[\"sampleStorageMaster\"] = {\n          \"ssampletraycode\": this.props.Login.sampleTrayCode ? this.props.Login.sampleTrayCode : \"\",\n          \"ssamplearno\": this.state.selectedRecord.ssamplearno ? this.state.selectedRecord.ssamplearno : \"\",\n          \"nsamplestoragelocationcode\": this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode\n        };\n      }\n\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef\n      };\n      const masterData = this.props.Login.masterData; // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n      //     const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: {\n      //             loadEsign: true, screenData: { inputParam, masterData }, saveType\n      //         }\n      //     }\n      //     this.props.updateStore(updateInfo);\n      // }\n      // else {\n      // this.props.crudMaster(inputParam, masterData, \"openModal\");\n\n      this.props.saveSampleStorageMaster(this.props.Login.userInfo, this.props.Login.masterData, this.state.selectedRecord, inputParam); // }\n    };\n\n    this.onSaveClickContainer = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"containerStorageCondition\"] = {\n        \"nstatus\": 1\n      };\n\n      if (this.props.Login.operation === \"update\") {\n        inputData[\"containerStorageCondition\"][\"ncontainerstoragecode\"] = this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== null ? this.props.Login.masterData.storageContainer.ncontainerstoragecode : -1;\n        inputData[\"containerStorageCondition\"][\"scontainercode\"] = this.props.Login.containerCode && this.props.Login.containerCode !== undefined ? this.props.Login.containerCode : \"\";\n        inputData[\"containerStorageCondition\"][\"nstorageconditioncode\"] = this.state.selectedRecord.nstorageconditioncode && this.state.selectedRecord.nstorageconditioncode !== undefined ? this.state.selectedRecord.nstorageconditioncode.value : -1;\n      }\n\n      inputData[\"containerStorageCondition\"][\"scontainercode\"] = this.props.Login.containerCode && this.props.Login.containerCode !== undefined ? this.props.Login.containerCode : \"\";\n      inputData[\"containerStorageCondition\"][\"nstorageconditioncode\"] = this.state.selectedRecord.nstorageconditioncode && this.state.selectedRecord.nstorageconditioncode !== undefined ? this.state.selectedRecord.nstorageconditioncode.value : -1;\n      const inputParam = {\n        methodUrl: \"ContainerStorageCondition\",\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef\n      };\n      const masterData = this.props.Login.masterData; // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n      //     const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: {\n      //             loadEsign: true, screenData: { inputParam, masterData }, saveType\n      //         }\n      //     }\n      //     this.props.updateStore(updateInfo);\n      // }\n      // else {\n\n      this.props.crudMaster(inputParam, masterData, \"openModal\"); // }\n    };\n\n    this.itemRenderView = clickedItem => {\n      let item = clickedItem.item;\n\n      if (!this.state.toggleActionView) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, item ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: `normal-node\n                            ${item.selected ? \"active-node\" : \"\"}\n                            ${item.expanded ? \"expand-node\" : \"collapse-node\"}\n                            `,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 29\n          }\n        }, item.containerfirstnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBoxOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 60\n          }\n        }) : item.locationlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faLocationArrow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 57\n          }\n        }) : item.containerlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 58\n          }\n        }) : item.expanded ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolderOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 50\n          }\n        }) : /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolder,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 93\n          }\n        }), item.text)) : \"\");\n      }\n    };\n\n    this.onItemClickView = event => {\n      if (this.state.selectedItem) {\n        this.state.selectedItem.selected = false;\n      }\n\n      event.item.selected = true;\n      this.setState({\n        selectedItem: event.item\n      }); // let newData = mapTree(this.state.treeDataView, \"items\", (item) => {\n      //     if (item.editable === true) {\n      //         item.editable = false;\n      //     } else if (item.id === event.item.id) {\n      //         item.editable = true;\n      //     }\n      //     return item;\n      // });\n      // this.setState({ treeDataView: newData });\n\n      if (event.item && event.item.containerlastnode && event.item.containerlastnode === true) {\n        this.props.getSampleMaster(event.item, this.props.Login.userInfo, this.props.Login.masterData);\n\n        if (this.state.activeTabIndex && this.state.activeTabIndex === false) {\n          this.changePropertyView(1);\n        } else if (this.state.activeTabIndex === undefined) {\n          this.changePropertyView(1);\n        } else if (this.state.activeTabIndex !== 1) {\n          this.changePropertyView(1);\n        }\n      } else if (event.item && event.item.containerfirstnode && event.item.containerfirstnode === true) {\n        let result = this.state.treeDataView;\n        const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\n        let itemText = \"\";\n\n        for (let i = 0; i < indices.length - 1; i++) {\n          result = result[indices[i]].items;\n          itemText = i > 0 ? itemText + \" -> \" + result[0].text : itemText + \"\" + result[0].text;\n        }\n\n        this.props.getContainerStorageCondition(event.item, this.props.Login.userInfo, this.props.Login.masterData, itemText);\n\n        if (this.state.activeTabIndex && this.state.activeTabIndex === false) {\n          this.changePropertyView(2);\n        } else if (this.state.activeTabIndex === undefined) {\n          this.changePropertyView(2);\n        } else if (this.state.activeTabIndex !== 2) {\n          this.changePropertyView(2);\n        }\n      } else if (event.item && event.item.locationlastnode && event.item.locationlastnode === true) {\n        let containers = [];\n        event.item.items.forEach(element => {\n          if (element.containerfirstnode === true) {\n            containers.push(element);\n          }\n        });\n        this.props.getContainers(event.item, this.props.Login.masterData, containers);\n\n        if (this.state.activeTabIndex && this.state.activeTabIndex === false) {\n          this.changePropertyView(3);\n        } else if (this.state.activeTabIndex === undefined) {\n          this.changePropertyView(3);\n        } else if (this.state.activeTabIndex !== 3) {\n          this.changePropertyView(3);\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedItem: event.item\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (caseNo === 3) {\n        let nfilterStorageCategory = this.state.nfilterStorageCategory || {};\n        nfilterStorageCategory = comboData;\n        this.searchRef.current.value = \"\";\n        this.setState({\n          nfilterStorageCategory\n        });\n      } else if (caseNo === 4) {\n        selectedRecord[fieldName] = comboData;\n        this.props.loadApprovedLocationOnCombo(this.props.Login.userInfo, this.props.Login.masterData, selectedRecord);\n      } else if (caseNo === 5) {\n        selectedRecord[fieldName] = comboData;\n        this.props.loadApprovedLocationOnTreeData(this.props.Login.userInfo, this.props.Login.masterData, selectedRecord);\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onExpandChangeView = event => {\n      event.item.expanded = !event.item.expanded;\n      this.forceUpdate();\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n      setTimeout(() => {\n        this._scrollBarRef.updateScroll();\n      });\n    };\n\n    this.moveItem = (userInfo, masterData) => {\n      if (this.state.activeTabIndex && this.state.activeTabIndex === 1) {\n        if (this.props.Login.masterData && this.props.Login.masterData.selectedSampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster[0] !== undefined) {\n          this.props.openSampleStorageApprovedLocation(userInfo, masterData);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTANYSAMPLE\"\n          }));\n        }\n      } else if (this.state.activeTabIndex && this.state.activeTabIndex === 3) {\n        if (this.props.Login.masterData && this.props.Login.masterData.selectedContainer && this.props.Login.masterData.selectedContainer[0] !== undefined) {\n          this.props.openSampleStorageApprovedLocation(userInfo, masterData);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTANYCONTAINER\"\n          }));\n        }\n      }\n    };\n\n    this.confirmDelete = ncontrolCode => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteSampleStorageMaster(ncontrolCode));\n    };\n\n    this.deleteSampleStorageMaster = ncontrolCode => {\n      let inputData = [];\n      let data = [];\n\n      if (this.props.Login.masterData && this.props.Login.masterData.selectedSampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster[0] !== undefined) {\n        this.props.Login.masterData.selectedSampleStorageMaster.forEach(item => {\n          data.push({\n            \"nsamplecode\": item.nsamplecode,\n            \"ssampletraycode\": item.ssampletraycode\n          });\n        });\n        inputData[\"sampleStorageMaster\"] = data;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        const inputParam = {\n          methodUrl: \"SampleStorageMaster\",\n          classUrl: \"samplestoragemaster\",\n          inputData: inputData,\n          operation: \"delete\",\n          searchRef: this.searchRef\n        };\n        const masterData = this.props.Login.masterData; // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        //     const updateInfo = {\n        //         typeName: DEFAULT_RETURN,\n        //         data: {\n        //             loadEsign: true, screenData: { inputParam, masterData }, operation: \"delete\", openModal: true,\n        //             screenName: this.props.Login.inputParam.displayName\n        //         }\n        //     }\n        //     this.props.updateStore(updateInfo);\n        // }\n        // else {\n\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\"); // }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYSAMPLE\"\n        }));\n      }\n    };\n\n    this.loadStorageCondition = () => {\n      if (this.props.Login.selectedItem && this.props.Login.selectedItem.containerfirstnode === true) {\n        this.props.getStorageConditionFromMaster(this.props.Login.userInfo, this.props.Login.masterData);\n      }\n    };\n\n    this.discardSampleStorageMaster = ncontrolCode => {\n      let inputData = [];\n      let data = [];\n\n      if (this.props.Login.masterData && this.props.Login.masterData.selectedSampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster[0] !== undefined) {\n        this.props.Login.masterData.selectedSampleStorageMaster.forEach(item => {\n          data.push({\n            \"nsamplecode\": item.nsamplecode,\n            \"ssampletraycode\": item.ssampletraycode,\n            \"npreregno\": item.npreregno,\n            \"ntransactionsamplecode\": item.ntransactionsamplecode,\n            \"sarno\": item.sarno,\n            \"ssamplearno\": item.ssamplearno\n          });\n        });\n        inputData[\"sampleStorageMaster\"] = data;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        const inputParam = {\n          methodUrl: \"SampleStorageMaster\",\n          classUrl: \"samplestoragemaster\",\n          inputData: inputData,\n          operation: \"discard\",\n          searchRef: this.searchRef\n        };\n        const masterData = this.props.Login.masterData; // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        //     const updateInfo = {\n        //         typeName: DEFAULT_RETURN,\n        //         data: {\n        //             loadEsign: true, screenData: { inputParam, masterData }, operation: \"discard\", openModal: true,\n        //             screenName: this.props.Login.inputParam.displayName\n        //         }\n        //     }\n        //     this.props.updateStore(updateInfo);\n        // }\n        // else {\n\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\"); // }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYSAMPLE\"\n        }));\n      }\n    };\n\n    this.sideNavDetail = screenName => {\n      const addId = this.state.controlMap.has(\"Add SampleStorageMaster\") && this.state.controlMap.get(\"Add SampleStorageMaster\").ncontrolcode;\n      const editId = this.state.controlMap.has(\"Edit SampleStorageMaster\") && this.state.controlMap.get(\"Edit SampleStorageMaster\").ncontrolcode;\n      const deleteId = this.state.controlMap.has(\"Delete SampleStorageMaster\") && this.state.controlMap.get(\"Delete SampleStorageMaster\").ncontrolcode;\n      const editContainerID = this.state.controlMap.has(\"Edit StorageContainer\") && this.state.controlMap.get(\"Edit StorageContainer\").ncontrolcode;\n      const moveId = this.state.controlMap.has(\"Move SampleStorageMaster\") && this.state.controlMap.get(\"Move SampleStorageMaster\").ncontrolcode;\n      const discardId = this.state.controlMap.has(\"Discard SampleStorageMaster\") && this.state.controlMap.get(\"Discard SampleStorageMaster\").ncontrolcode;\n      return screenName == \"IDS_SAMPLEDETAILS\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions-stripe\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"addsample\",\n        className: \"add-txt-btn\",\n        hidden: this.state.userRoleControlRights.indexOf(addId) === -1,\n        onClick: () => this.openModal(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 33\n        }\n      }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_SAMPLE\",\n        defaultMessage: \"Sample\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"deletesample\",\n        className: \"add-txt-btn\",\n        hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n        onClick: () => this.confirmDelete(deleteId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faTrashAlt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 33\n        }\n      }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_DELETE\",\n        defaultMessage: \"Delete\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"movesample\",\n        className: \"add-txt-btn\",\n        hidden: this.state.userRoleControlRights.indexOf(moveId) === -1,\n        onClick: () => this.moveItem(this.props.Login.userInfo, this.props.Login.masterData),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 33\n        }\n      }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_MOVE\",\n        defaultMessage: \"Move\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"discardsample\",\n        className: \"add-txt-btn\",\n        hidden: this.state.userRoleControlRights.indexOf(discardId) === -1,\n        onClick: () => this.discardSampleStorageMaster(discardId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faArrowRight,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 33\n        }\n      }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_DISCARD\",\n        defaultMessage: \"Discard\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 33\n        }\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"toolbar-top-inner\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n        listMasterShowIcon: 1,\n        clickIconGroup: false,\n        splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n        masterList: this.props.Login.masterData.sampleStorageMaster || [],\n        selectedMaster: this.props.Login.masterData.selectedSampleStorageMaster || [],\n        primaryKeyField: \"nsamplecode\",\n        filterColumnData: this.props.filterTransactionList,\n        getMasterDetail: this.props.getSampleMasterDetails,\n        inputParam: { ...this.props.Login.masterData\n        },\n        moreField: this.props.Login.masterData.sampleStorageMaster || [] // selectionList={this.props.Login.masterData.RealFilterStatusValue\n        //     && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\n        ,\n        selectionColorField: \"scolorhexcode\",\n        mainField: \"ssamplearno\",\n        showStatusLink: true,\n        showStatusName: true // statusFieldName=\"stransdisplaystatus\"\n        // statusField=\"ntransactionstatus\"\n        ,\n        selectedListName: \"selectedSampleStorageMaster\" // searchListName=\"searchedSample\"\n        // searchRef={this.searchSampleRef}\n        // objectName=\"sample\"\n        ,\n        listName: \"IDS_SAMPLE\" // selectionField=\"ntransactionstatus\"\n        // selectionFieldName=\"stransdisplaystatus\"\n        // showFilter={this.props.Login.showFilter}\n        // openFilter={this.openFilter}\n        // closeFilter={this.closeFilter}\n        // onFilterSubmit={this.onFilterSubmit}\n        // subFields={this.state.DynamicSampleColumns}                                                 \n        ,\n        needMultiSelect: false,\n        needSingleSelect: true,\n        subListName: \"columnlist\",\n        jsonfield: \"jsondata\",\n        showDynamicFields: true,\n        showStatusBlink: true // filterParam={{\n        //     ...this.state.filterSampleParam,\n        //     childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" },\n        //     { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\n        // }}\n        // subFieldsLabel={false}\n        ,\n        handlePageChange: this.handlePageChange,\n        skip: this.state.skip,\n        take: this.state.take,\n        needFilter: false,\n        hidePaging: false,\n        hideSearch: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 25\n        }\n      }))) : screenName == \"IDS_CONTAINERS\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions-stripe\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"addsample\",\n        className: \"add-txt-btn\",\n        hidden: this.state.userRoleControlRights.indexOf(moveId) === -1,\n        onClick: () => this.moveItem(this.props.Login.userInfo, this.props.Login.masterData),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 37\n        }\n      }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_MOVE\",\n        defaultMessage: \"Move\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 668,\n          columnNumber: 37\n        }\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"toolbar-top-inner container-tab\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n        listMasterShowIcon: 1,\n        clickIconGroup: false,\n        splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n        masterList: this.props.Login.masterData.containers || [],\n        selectedMaster: this.props.Login.masterData.selectedContainer || [],\n        primaryKeyField: \"id\",\n        filterColumnData: this.props.filterTransactionList,\n        getMasterDetail: this.props.getselectedContainer,\n        inputParam: { ...this.props.Login.masterData\n        },\n        selectionColorField: \"scolorhexcode\",\n        mainField: \"text\",\n        showStatusLink: true,\n        showStatusName: true,\n        selectedListName: \"selectedContainer\",\n        listName: \"IDS_SAMPLE\",\n        needMultiSelect: false,\n        needSingleSelect: true,\n        subListName: \"columnlist\",\n        jsonfield: \"jsondata\",\n        showDynamicFields: true,\n        showStatusBlink: true,\n        handlePageChange: this.handlePageChange,\n        skip: this.state.skip,\n        take: this.state.take,\n        needFilter: false,\n        hidePaging: false,\n        hideSearch: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 29\n        }\n      }))) : screenName == \"IDS_STORAGECONDITION\" ? /*#__PURE__*/React.createElement(ProductList, {\n        className: \"panel-main-content storage-tab\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        className: \"border-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        className: \"no-padding\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Card.Subtitle, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-inline\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"editUser\",\n        hidden: this.state.userRoleControlRights.indexOf(editContainerID) === -1,\n        className: \"btn btn-circle outline-grey mr-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        onClick: () => this.loadStorageCondition(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPencilAlt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 49\n        }\n      }))))), /*#__PURE__*/React.createElement(Card.Body, {\n        className: \"form-static-wrap no-padding\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 728,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_STORAGECONDITIONNAME\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 729,\n          columnNumber: 53\n        }\n      })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 49\n        }\n      }, this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== null ? this.props.Login.masterData.storageContainer.sstorageconditionname : \"\" || \"\"))), /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 738,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_STORAGELOCATIONNAME\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 53\n        }\n      })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 49\n        }\n      }, this.props.Login.containerLocation && this.props.Login.containerLocation))))))) : \"\";\n    };\n\n    this.changePropertyView = (index, event, status) => {\n      if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            activeTabIndex: this.state.activeTabIndex !== index ? index : 0 ? index : false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.changePropertyViewClose = id => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          activeTabIndex: undefined\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputSwitchOnChange = event => {\n      if (event.target.name == \"PopupNav\") {\n        this.setState({\n          enablePropertyPopup: !this.state.enablePropertyPopup\n        });\n      } else {\n        this.setState({\n          enableAutoClick: !this.state.enableAutoClick\n        });\n      }\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      if (this.state.nfilterStorageCategory.value) {\n        let inputParam = {\n          inputData: {\n            nstoragecategorycode: this.state.nfilterStorageCategory.value,\n            userinfo: this.props.Login.userInfo,\n            nfilterStorageCategory: this.state.nfilterStorageCategory\n          }\n        };\n        this.props.changeStorageCategoryFilterOnSampleMaster(inputParam, this.props.Login.masterData.filterStorageCategory);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_STORAGECATEGORYNOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.itemRender = clickedItem => {\n      if (!this.state.toggleAction) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, clickedItem.item ? /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"list-inline mb-0\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 846,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"li\", {\n          className: \"list-inline-item mr-3 \",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 847,\n            columnNumber: 29\n          }\n        }, clickedItem.item.text), clickedItem.item.editable ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"li\", {\n          className: \"list-inline-item \",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 850,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 851,\n            columnNumber: 41\n          }\n        }))) : null) : \"\");\n      }\n    };\n\n    this.onItemClick = event => {\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.editable === true) {\n          item.editable = false;\n        } else if (item.id === event.item.id) {\n          item.editable = true;\n        }\n\n        return item;\n      });\n      this.setState({\n        treeData: newData,\n        clickedItem: event.item\n      });\n    };\n\n    this.onExpandChange = event => {\n      event.item.expanded = !event.item.expanded;\n      this.forceUpdate();\n    };\n\n    this.onMoveClick = (saveType, formRef) => {\n      let inputParam = {};\n\n      if (this.state.activeTabIndex === 1) {\n        if (this.state.clickedItem && this.state.clickedItem.containerlastnode === true) {\n          if (this.state.clickedItem.id !== this.props.Login.sampleTrayCode) {\n            inputParam = {\n              selectedSamples: this.props.Login.masterData.selectedSampleStorageMaster,\n              moveTargetTrayCode: this.state.clickedItem.id,\n              nsamplestoragelocationcode: this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\n              moveContainers: false,\n              storageCategory: this.state.selectedRecord[\"nstoragecategorycode\"] && this.state.selectedRecord[\"nstoragecategorycode\"].value\n            };\n            this.props.moveItems(inputParam, this.props.Login.masterData);\n          }\n        }\n      } else if (this.state.activeTabIndex === 3) {\n        if (this.state.clickedItem && this.state.clickedItem.locationlastnode === true) {\n          if (this.state.clickedItem.id !== this.props.Login.locationCode) {\n            let getSampleTray = [];\n            let targetData = this.state.treeData || [];\n            let sourceData = this.state.treeDataView || [];\n            let newData = [];\n            let sameLocation = true;\n            let targetJsonData = {};\n            let SourceJsonData = {};\n\n            if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode === this.state.selectedRecord[\"nsamplestoragelocationcode\"].value) {\n              this.props.Login.masterData.selectedContainer.forEach(data => {\n                targetData = removeItems(targetData, \"items\", item => {\n                  return item.id === data.id;\n                });\n              });\n              newData = mapTree(targetData, \"items\", item => {\n                if (item.id === this.state.clickedItem.id) {\n                  item.items = item.items || [];\n                  item.items.push(...this.props.Login.masterData.selectedContainer);\n                }\n\n                return item;\n              });\n              targetJsonData[\"data\"] = newData;\n            } else {\n              this.props.Login.masterData.selectedContainer.forEach(data => {\n                sourceData = removeItems(sourceData, \"items\", item => {\n                  return item.id === data.id;\n                });\n              });\n              newData = mapTree(targetData, \"items\", item => {\n                if (item.id === this.state.clickedItem.id) {\n                  item.items = item.items || [];\n                  item.items.push(...this.props.Login.masterData.selectedContainer);\n                }\n\n                return item;\n              });\n              SourceJsonData[\"data\"] = sourceData;\n              targetJsonData[\"data\"] = newData;\n              this.props.Login.masterData.selectedContainer.forEach(data => {\n                mapTree([data], \"items\", item => {\n                  if (item.containerlastnode === true) {\n                    getSampleTray.push({\n                      id: item.id,\n                      text: item.text,\n                      nsamplestoragelocationcode: this.state.selectedRecord[\"nsamplestoragelocationcode\"].value\n                    });\n                  }\n                });\n              });\n              sameLocation = false;\n            }\n\n            inputParam = {\n              selectedSamples: getSampleTray,\n              sourceLocationCode: this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\n              sourceVersionCode: this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode,\n              nsamplestoragelocationcode: this.state.selectedRecord[\"nsamplestoragelocationcode\"].item.nsamplestoragelocationcode,\n              nsamplestorageversioncode: this.state.selectedRecord[\"nsamplestoragelocationcode\"].item.nsamplestorageversioncode,\n              SourceJsonData: SourceJsonData,\n              targetJsonData: targetJsonData,\n              moveContainers: true,\n              storageCategory: this.props.Login.masterData.selectedSampleStorageVersion.nstoragecategorycode,\n              sameLocation\n            };\n            this.props.moveItems(inputParam, this.props.Login.masterData);\n          }\n        }\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: \"samplestoragemaster\",\n        methodUrl: \"SampleStorageMaster\",\n        displayName: \"IDS_SAMPLESTORAGEMASTER\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.state = {\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      detailSkip: 0,\n      detailTake: 10,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      splitChangeWidthPercentage: 22,\n      enablePropertyPopup: false,\n      enableAutoClick: false,\n      treeDataView: undefined,\n      toggleActionView: false,\n      toggleAction: false,\n      propertyPopupWidth: \"60\",\n      splitChangeWidthPercentage: 28.6,\n      containers: [],\n      treeData: [],\n      selectedItem: undefined\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps) {\n    let isComponentUpdated = false;\n    let {\n      filterData\n    } = this.state;\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          controlMap,\n          userRoleControlRights\n        });\n      }\n    }\n\n    if (this.props.Login.masterData.approvedTreeData !== previousProps.Login.masterData.approvedTreeData) {\n      if (this.props.Login.masterData.approvedTreeData && this.props.Login.masterData.approvedTreeData !== undefined) {\n        this.setState({\n          treeData: this.props.Login.masterData.approvedTreeData\n        });\n      } //JSON.parse(this.props.Login.masterData.approvedTreeData[\"jsondata\"].value).data\n\n    }\n\n    if (this.props.Login.masterData.selectedSampleStorageVersion !== previousProps.Login.masterData.selectedSampleStorageVersion) {\n      if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined) {\n        this.setState({\n          treeDataView: JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data\n        });\n      }\n    }\n\n    let nfilterStorageCategory = this.state.nStorageCategory || {};\n    let filterStorageCategory = this.state.filterStorageCategory || {};\n\n    if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\n      if (this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined) {\n        const filterStorageCategoryMap = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\", \"sstoragecategoryname\", 'nstoragecategorycode', 'ascending', false);\n        filterStorageCategory = filterStorageCategoryMap.get(\"OptionList\");\n\n        if (filterStorageCategory && filterStorageCategory.length > 0) {\n          nfilterStorageCategory = filterStorageCategory[0];\n        }\n\n        isComponentUpdated = true;\n      }\n    } else if (this.props.Login.masterData.nfilterStorageCategory !== previousProps.Login.masterData.nfilterStorageCategory) {\n      if (this.props.Login.masterData.nfilterStorageCategory && this.props.Login.masterData.nfilterStorageCategory !== undefined) {\n        nfilterStorageCategory = this.props.Login.masterData.nfilterStorageCategory;\n        isComponentUpdated = true;\n      }\n    }\n\n    if (isComponentUpdated) {\n      this.setState({\n        nfilterStorageCategory,\n        filterStorageCategory\n      });\n    }\n\n    if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\n      this.setState({\n        activeTabIndex: this.props.Login.activeTabIndex\n      });\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const filterData = this.generateBreadCrumData();\n      this.setState({\n        filterData\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.filterStorageCategory) {\n      breadCrumbData.push({\n        \"label\": \"IDS_STORAGECATEGORY\",\n        \"value\": this.props.Login.masterData.approvedSampleStorageLocation ? this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined ? this.props.Login.masterData.selectedStorageCategoryName : \"NA\" : \"NA\"\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  render() {\n    let mandatoryFields = [];\n\n    if (this.state.activeTabIndex === 1) {\n      mandatoryFields.push({\n        \"idsName\": \"IDS_SAMPLE\",\n        \"dataField\": \"ssamplearno\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      });\n    } else if (this.state.activeTabIndex === 2) {\n      mandatoryFields.push({\n        \"idsName\": \"IDS_STORAGECONDITIONNAME\",\n        \"dataField\": \"nstorageconditioncode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      });\n    }\n\n    const filterParam = {\n      inputListName: \"approvedSampleStorageLocation\",\n      selectedObject: \"selectedSampleStorageVersion\",\n      primaryKeyField: \"nsamplestorageversioncode\",\n      fetchUrl: \"samplestoragelocation/getActiveSampleStorageVersion\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"ssamplestoragelocationname\"]\n    };\n    const breadCrumbData = this.state.filterData || [];\n    const confirmMessage = new ConfirmMessage();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1022,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1024,\n        columnNumber: 25\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      className: `toolbar-top ${this.state.activeTabIndex ? 'active-property-bar' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1026,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1027,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: `vertical-tab-top grid-master ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1028,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `tab-left-area ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1029,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_SAMPLESTORAGEMASTER\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.approvedSampleStorageLocation,\n      getMasterDetail: selectedItem => this.props.getSelectedApprovedStorageVersion(selectedItem, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedSampleStorageVersion,\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      mainField: \"ssamplestoragelocationname\" // firstField=\"sversionno\"\n      // secondField=\"stransdisplaystatus\"\n      ,\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      hideAddButton: true // addId={addId}\n      ,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: false // openModal={() => this.props.getDesignTemplateMappingComboService(addParam)}\n      ,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      filterComponent: [{\n        \"IDS_STORAGEFILTER\": /*#__PURE__*/React.createElement(StorageCategoryFilter, {\n          filterStorageCategory: this.state.filterStorageCategory || [],\n          nfilterStorageCategory: this.state.nfilterStorageCategory || {},\n          onComboChange: this.onComboChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1063,\n            columnNumber: 53\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1030,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tree-view-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1073,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(TreeViewEditable, {\n      id: \"samplestoragelocation\",\n      name: \"samplestoragelocation\" // label=\"Sample Storage Location\"\n      ,\n      data: this.state.treeDataView,\n      expandIcons: true,\n      item: this.itemRenderView,\n      selectField: 'activeNode',\n      onExpandChange: this.onExpandChangeView,\n      onItemClick: this.onItemClickView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1075,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.enablePropertyPopup ? 'active-popup' : \"\"} xs-grid-container vertical-tab ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1088,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      style: {\n        width: this.state.enablePropertyPopup ? this.state.propertyPopupWidth + '%' : \"\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1089,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: ` vertical-tab-close ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyViewClose(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1090,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faChevronRight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1090,\n        columnNumber: 178\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex === 1 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1091,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4 no-margin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1092,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEDETAILS\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex === 1 ? this.sideNavDetail(\"IDS_SAMPLEDETAILS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex === 2 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1097,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4 no-margin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1098,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_STORAGECONDITION\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex === 2 ? this.sideNavDetail(\"IDS_STORAGECONDITION\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex === 3 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1103,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4 no-margin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1104,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_CONTAINERS\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex === 3 ? this.sideNavDetail(\"IDS_CONTAINERS\") : \"\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tab-head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1112,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1113,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex === 1 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1114,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1115,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1116,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEDETAILS\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex === 2 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1120,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1121,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1122,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_STORAGECONDITION\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex === 3 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1126,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1127,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1128,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_CONTAINERS\"\n    })))))))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.intl.formatMessage({\n        id: this.state.activeTabIndex && this.state.activeTabIndex === 1 ? \"IDS_SAMPLE\" : \"IDS_STORAGECONDITIONNAME\"\n      }),\n      onSaveClick: this.onSaveClick,\n      selectedRecord: this.state.selectedRecord || {},\n      showSaveContinue: this.state.activeTabIndex && this.state.activeTabIndex === 1 ? true : false,\n      mandatoryFields: mandatoryFields,\n      addComponent: this.state.activeTabIndex && this.state.activeTabIndex === 1 ? /*#__PURE__*/React.createElement(AddSample, {\n        onInputChange: e => this.onInputChange(e),\n        selectedRecord: this.state.selectedRecord || {},\n        onKeyUp: e => this.onKeyUp(e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1177,\n          columnNumber: 33\n        }\n      }) : this.state.activeTabIndex && this.state.activeTabIndex === 2 ? /*#__PURE__*/React.createElement(AddContainerStorageCondition, {\n        selectedRecord: this.state.selectedRecord || {},\n        onComboChange: this.onComboChange,\n        storageCondition: this.props.Login.masterData.storageCondition || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1183,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(React.Fragment, null),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1165,\n        columnNumber: 21\n      }\n    }), this.props.Login.openChildModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openChildModal,\n      closeModal: this.closeChildModal,\n      operation: this.props.intl.formatMessage({\n        id: \"IDS_MOVE\"\n      }),\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.intl.formatMessage({\n        id: this.state.activeTabIndex && this.state.activeTabIndex == 1 ? \"IDS_SAMPLE\" : \"IDS_CONTAINERS\"\n      }),\n      onSaveClick: this.onMoveClick,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: /*#__PURE__*/React.createElement(MoveSampleOrContainers, {\n        treeData: this.state.treeData,\n        selectedRecord: this.state.selectedRecord || {},\n        itemRender: this.itemRender,\n        onExpandChange: this.onExpandChange,\n        onItemClick: this.onItemClick,\n        onComboChange: this.onComboChange,\n        storageCategory: this.props.Login.masterData.storageCategory || [],\n        approvedLocation: this.props.Login.masterData.approvedLocation || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1204,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1196,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  getSampleMaster,\n  filterColumnData,\n  getSelectedSampleStorageLocation,\n  openPropertyModal,\n  editSampleStorageLocation,\n  approveSampleStorageLocation,\n  getSelectedSampleStorageVersion,\n  getContainerStorageCondition,\n  getStorageConditionFromMaster,\n  getSampleMasterDetails,\n  getContainers,\n  getselectedContainer,\n  changeStorageCategoryFilterOnSampleMaster,\n  openSampleStorageApprovedLocation,\n  loadApprovedLocationOnCombo,\n  loadApprovedLocationOnTreeData,\n  moveItems,\n  saveSampleStorageMaster,\n  getSelectedApprovedStorageVersion\n})(injectIntl(SampleStorageMaster));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/basemaster/SampleStorageMaster.jsx"],"names":["React","Component","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","Form","Button","FontAwesomeIcon","faTrashAlt","faCopy","faPencilAlt","faSync","faPlus","faThumbsUp","faFileInvoice","faEye","faLink","faChevronRight","faComments","faLaptopHouse","faBoxOpen","faBoxTissue","faBox","faLocationArrow","faFolderMinus","faFolderOpen","faArrowRight","toast","ListMaster","constructOptionList","getControlMap","showEsign","ReadOnlyText","ContentPanel","SlideOutModal","callService","crudMaster","validateEsignCredential","updateStore","getSelectedSampleStorageLocation","getSampleMaster","openPropertyModal","editSampleStorageLocation","approveSampleStorageLocation","getSelectedSampleStorageVersion","getContainerStorageCondition","getStorageConditionFromMaster","getSampleMasterDetails","getContainers","getselectedContainer","changeStorageCategoryFilterOnSampleMaster","openSampleStorageApprovedLocation","loadApprovedLocationOnCombo","filterColumnData","loadApprovedLocationOnTreeData","moveItems","saveSampleStorageMaster","getSelectedApprovedStorageVersion","DEFAULT_RETURN","ListWrapper","TreeViewEditable","mapTree","removeItems","ConfirmMessage","CustomSwitch","AddSample","AddContainerStorageCondition","ProductList","TransactionListMasterJson","BreadcrumbComponent","StorageCategoryFilter","MoveSampleOrContainers","faFolder","SampleStorageMaster","constructor","props","openModal","Login","selectedItem","containerlastnode","updateInfo","typeName","data","selectedRecord","operation","closeModal","closeChildModal","openChildModal","onInputChange","event","state","target","name","value","setState","onKeyUp","keyCode","onSaveClickSample","onSaveClick","saveType","formRef","activeTabIndex","onSaveClickContainer","inputData","userInfo","nsamplecode","sampleTrayCode","ssamplearno","masterData","selectedSampleStorageVersion","nsamplestoragelocationcode","inputParam","methodUrl","classUrl","displayName","storageContainer","ncontainerstoragecode","containerCode","undefined","nstorageconditioncode","itemRenderView","clickedItem","item","toggleActionView","selected","expanded","containerfirstnode","locationlastnode","text","onItemClickView","changePropertyView","result","treeDataView","indices","itemHierarchicalIndex","split","map","index","Number","itemText","i","length","items","containers","forEach","element","push","onComboChange","comboData","fieldName","caseNo","nfilterStorageCategory","searchRef","current","onExpandChangeView","forceUpdate","handlePageChange","e","skip","take","setTimeout","_scrollBarRef","updateScroll","moveItem","selectedSampleStorageMaster","warn","intl","formatMessage","id","selectedContainer","confirmDelete","ncontrolCode","confirmMessage","confirm","deleteSampleStorageMaster","ssampletraycode","loadStorageCondition","discardSampleStorageMaster","npreregno","ntransactionsamplecode","sarno","sideNavDetail","screenName","addId","controlMap","has","get","ncontrolcode","editId","deleteId","editContainerID","moveId","discardId","userRoleControlRights","indexOf","splitChangeWidthPercentage","sampleStorageMaster","filterTransactionList","sstorageconditionname","containerLocation","status","window","innerWidth","enableAutoClick","changePropertyViewClose","onInputSwitchOnChange","enablePropertyPopup","openFilter","showFilter","closeFilter","onFilterSubmit","nstoragecategorycode","userinfo","filterStorageCategory","itemRender","toggleAction","editable","onItemClick","newData","treeData","onExpandChange","onMoveClick","selectedSamples","moveTargetTrayCode","moveContainers","storageCategory","locationCode","getSampleTray","targetData","sourceData","sameLocation","targetJsonData","SourceJsonData","sourceLocationCode","sourceVersionCode","nsamplestorageversioncode","reloadData","Map","detailSkip","detailTake","settings","propertyPopupWidth","createRef","getDerivedStateFromProps","masterStatus","error","componentDidUpdate","previousProps","isComponentUpdated","filterData","nformcode","Object","values","approvedTreeData","JSON","parse","nStorageCategory","filterStorageCategoryMap","generateBreadCrumData","breadCrumbData","approvedSampleStorageLocation","selectedStorageCategoryName","render","mandatoryFields","filterParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","searchFieldList","searchedData","width","storageCondition","approvedLocation","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faFileInvoice, faEye, faLink, faChevronRight, faComments, faLaptopHouse, faBoxOpen, faBoxTissue, faBox, faLocationArrow, faFolderMinus, faFolderOpen, faArrowRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, getSampleMaster,\r\n    openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, getContainerStorageCondition,\r\n    getStorageConditionFromMaster, getSampleMasterDetails, getContainers, getselectedContainer, changeStorageCategoryFilterOnSampleMaster,\r\n    openSampleStorageApprovedLocation, loadApprovedLocationOnCombo, filterColumnData,\r\n    loadApprovedLocationOnTreeData, moveItems, saveSampleStorageMaster, getSelectedApprovedStorageVersion\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\r\nimport { mapTree, removeItems } from \"@progress/kendo-react-treelist\";\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport AddSample from '../basemaster/AddSample';\r\nimport AddContainerStorageCondition from './AddContainerStorageCondition';\r\nimport { ProductList } from '../product/product.styled';\r\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport StorageCategoryFilter from './StorageCategoryFilter';\r\nimport MoveSampleOrContainers from './MoveSampleOrContainers';\r\nimport { faFolder } from '@fortawesome/free-regular-svg-icons';\r\n\r\nclass SampleStorageMaster extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedRecord: {},\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            detailSkip: 0,\r\n            detailTake: 10,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25,\r\n            splitChangeWidthPercentage: 22,\r\n            enablePropertyPopup: false,\r\n            enableAutoClick: false,\r\n            treeDataView: undefined,\r\n            toggleActionView: false,\r\n            toggleAction: false,\r\n            propertyPopupWidth: \"60\",\r\n            splitChangeWidthPercentage: 28.6,\r\n            containers: [],\r\n            treeData: [],\r\n            selectedItem:undefined\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    openModal = () => {\r\n        if (this.props.Login.selectedItem && this.props.Login.selectedItem.containerlastnode === true) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModal: true, selectedRecord: {},\r\n                    operation: \"create\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    closeModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: false, selectedRecord: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeChildModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openChildModal: false, selectedRecord: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[event.target.name] = event.target.value;\r\n        this.setState({ selectedRecord });\r\n    };\r\n    onKeyUp = (event) => {\r\n        if (event.keyCode === 13) {\r\n            this.onSaveClickSample(2);\r\n        }\r\n    };\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.state.activeTabIndex === 1) {\r\n            this.onSaveClickSample(saveType, formRef);\r\n        } else {\r\n            this.onSaveClickContainer(saveType, formRef);\r\n        }\r\n    }\r\n    onSaveClickSample = (saveType, formRef) => {\r\n        let inputData = [];\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        if (this.props.Login.operation === \"update\") {\r\n            inputData[\"sampleStorageMaster\"] = {\r\n                \"nsamplecode\": this.state.selectedRecord.nsamplecode ? this.state.selectedRecord.nsamplecode : -1,\r\n                \"ssampletraycode\": this.props.Login.sampleTrayCode ? this.props.Login.sampleTrayCode : \"\",\r\n                \"ssamplearno\": this.state.selectedRecord.ssamplearno ? this.state.selectedRecord.ssamplearno : \"\",\r\n                \"nsamplestoragelocationcode\": this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode\r\n            }\r\n        }\r\n        else {\r\n            //add               \r\n            inputData[\"sampleStorageMaster\"] = {\r\n                \"ssampletraycode\": this.props.Login.sampleTrayCode ? this.props.Login.sampleTrayCode : \"\",\r\n                \"ssamplearno\": this.state.selectedRecord.ssamplearno ? this.state.selectedRecord.ssamplearno : \"\",\r\n                \"nsamplestoragelocationcode\": this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode\r\n            }\r\n        }\r\n\r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n        //     const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: {\r\n        //             loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n        //         }\r\n        //     }\r\n        //     this.props.updateStore(updateInfo);\r\n        // }\r\n        // else {\r\n            // this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            this.props.saveSampleStorageMaster(this.props.Login.userInfo, this.props.Login.masterData, this.state.selectedRecord, inputParam);\r\n        // }\r\n\r\n    }\r\n\r\n    onSaveClickContainer = (saveType, formRef) => {\r\n        let inputData = [];\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        inputData[\"containerStorageCondition\"] = { \"nstatus\": 1 };\r\n        if (this.props.Login.operation === \"update\") {\r\n            inputData[\"containerStorageCondition\"][\"ncontainerstoragecode\"] = this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== null ?\r\n                this.props.Login.masterData.storageContainer.ncontainerstoragecode : -1\r\n            inputData[\"containerStorageCondition\"][\"scontainercode\"] = this.props.Login.containerCode && this.props.Login.containerCode !== undefined ? this.props.Login.containerCode : \"\"\r\n            inputData[\"containerStorageCondition\"][\"nstorageconditioncode\"] = this.state.selectedRecord.nstorageconditioncode && this.state.selectedRecord.nstorageconditioncode !== undefined ? this.state.selectedRecord.nstorageconditioncode.value : -1\r\n\r\n\r\n        }\r\n        inputData[\"containerStorageCondition\"][\"scontainercode\"] = this.props.Login.containerCode && this.props.Login.containerCode !== undefined ? this.props.Login.containerCode : \"\"\r\n        inputData[\"containerStorageCondition\"][\"nstorageconditioncode\"] = this.state.selectedRecord.nstorageconditioncode && this.state.selectedRecord.nstorageconditioncode !== undefined ? this.state.selectedRecord.nstorageconditioncode.value : -1\r\n\r\n        const inputParam = {\r\n            methodUrl: \"ContainerStorageCondition\",\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n        //     const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: {\r\n        //             loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n        //         }\r\n        //     }\r\n        //     this.props.updateStore(updateInfo);\r\n        // }\r\n        // else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        // }\r\n\r\n    }\r\n\r\n\r\n    itemRenderView = (clickedItem) => {\r\n        let item = clickedItem.item;\r\n        if (!this.state.toggleActionView) {\r\n            return (\r\n                <>\r\n                    {item ? (\r\n                        <>\r\n                            <span className={`normal-node\r\n                            ${item.selected ? \"active-node\" :\"\"}\r\n                            ${item.expanded ? \"expand-node\" :\"collapse-node\"}\r\n                            `}>\r\n                                {item.containerfirstnode ? <FontAwesomeIcon icon={faBoxOpen} /> : \r\n                                item.locationlastnode ? <FontAwesomeIcon icon={faLocationArrow} /> :  \r\n                                item.containerlastnode ? <FontAwesomeIcon icon={faBox} /> :\r\n                                item.expanded ?  <FontAwesomeIcon icon={faFolderOpen} /> :  <FontAwesomeIcon icon={faFolder} />}\r\n                                {item.text}\r\n                            </span>\r\n                        {/* <ul className=\"list-inline mb-0\"> */}\r\n                          {/* {console.log(clickedItem,'===>')} */}\r\n                            {/* {clickedItem.item.editable ? (\r\n                                <>\r\n                                    <li className=\"list-inline-item\"> */}\r\n                                        {/* <span\r\n                                            className=\"action-icon tree-toggle\"\r\n                                            onClick={(e) => this.setProperties(e, clickedItem)}\r\n                                        ></span> */}\r\n                                    {/* </li> */}\r\n                                {/* </> */}\r\n                             {/* ) : null} */}\r\n                        {/* </ul> */}\r\n                        </>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    };\r\n    \r\n    onItemClickView = (event) => {\r\n        if (this.state.selectedItem) {\r\n            this.state.selectedItem.selected = false;\r\n          }\r\n      \r\n          event.item.selected = true;\r\n          this.setState({\r\n            selectedItem : event.item\r\n        })\r\n        // let newData = mapTree(this.state.treeDataView, \"items\", (item) => {\r\n        //     if (item.editable === true) {\r\n        //         item.editable = false;\r\n        //     } else if (item.id === event.item.id) {\r\n        //         item.editable = true;\r\n        //     }\r\n        //     return item;\r\n        // });\r\n\r\n        // this.setState({ treeDataView: newData });\r\n\r\n        if (event.item && event.item.containerlastnode && event.item.containerlastnode === true) {\r\n\r\n            this.props.getSampleMaster(event.item, this.props.Login.userInfo, this.props.Login.masterData);\r\n\r\n            if (this.state.activeTabIndex && this.state.activeTabIndex === false) {\r\n                this.changePropertyView(1);\r\n            } else if (this.state.activeTabIndex === undefined) {\r\n                this.changePropertyView(1);\r\n            } else if (this.state.activeTabIndex !== 1) {\r\n                this.changePropertyView(1);\r\n            }\r\n\r\n\r\n        } else if (event.item && event.item.containerfirstnode && event.item.containerfirstnode === true) {\r\n\r\n            let result = this.state.treeDataView;\r\n\r\n\r\n\r\n            const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n            let itemText = \"\";\r\n            for (let i = 0; i < indices.length - 1; i++) {\r\n\r\n                result = result[indices[i]].items;\r\n\r\n                itemText = i > 0 ? itemText + \" -> \" + result[0].text : itemText + \"\" + result[0].text;\r\n\r\n            }\r\n\r\n            this.props.getContainerStorageCondition(event.item, this.props.Login.userInfo, this.props.Login.masterData, itemText);\r\n\r\n            if (this.state.activeTabIndex && this.state.activeTabIndex === false) {\r\n                this.changePropertyView(2);\r\n            } else if (this.state.activeTabIndex === undefined) {\r\n                this.changePropertyView(2);\r\n            } else if (this.state.activeTabIndex !== 2) {\r\n                this.changePropertyView(2);\r\n            }\r\n\r\n        } else if (event.item && event.item.locationlastnode && event.item.locationlastnode === true) {\r\n\r\n            let containers = [];\r\n            event.item.items.forEach(element => {\r\n                if (element.containerfirstnode === true) {\r\n                    containers.push(element);\r\n                }\r\n            });\r\n\r\n            this.props.getContainers(event.item, this.props.Login.masterData, containers);\r\n            if (this.state.activeTabIndex && this.state.activeTabIndex === false) {\r\n                this.changePropertyView(3);\r\n            } else if (this.state.activeTabIndex === undefined) {\r\n                this.changePropertyView(3);\r\n            } else if (this.state.activeTabIndex !== 3) {\r\n                this.changePropertyView(3);\r\n            }\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedItem: event.item\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n\r\n\r\n    };\r\n    onComboChange = (comboData, fieldName, caseNo) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (caseNo === 3) {\r\n\r\n            let nfilterStorageCategory = this.state.nfilterStorageCategory || {}\r\n            nfilterStorageCategory = comboData;\r\n            this.searchRef.current.value = \"\";\r\n            this.setState({ nfilterStorageCategory })\r\n\r\n        } else if (caseNo === 4) {\r\n\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.loadApprovedLocationOnCombo(this.props.Login.userInfo, this.props.Login.masterData, selectedRecord);\r\n\r\n        } else if (caseNo === 5) {\r\n\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.loadApprovedLocationOnTreeData(this.props.Login.userInfo, this.props.Login.masterData, selectedRecord);\r\n        } else {\r\n\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n    onExpandChangeView = (event) => {\r\n        event.item.expanded = !event.item.expanded;\r\n        this.forceUpdate();\r\n    };\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        let isComponentUpdated = false;\r\n        let { filterData } = this.state;\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({ controlMap, userRoleControlRights });\r\n            }\r\n        }\r\n        if (this.props.Login.masterData.approvedTreeData !== previousProps.Login.masterData.approvedTreeData) {\r\n            if (this.props.Login.masterData.approvedTreeData && this.props.Login.masterData.approvedTreeData !== undefined) {\r\n                this.setState({\r\n                    treeData:\r\n                        this.props.Login.masterData.approvedTreeData\r\n                });\r\n            } //JSON.parse(this.props.Login.masterData.approvedTreeData[\"jsondata\"].value).data\r\n        }\r\n\r\n        if (this.props.Login.masterData.selectedSampleStorageVersion !== previousProps.Login.masterData.selectedSampleStorageVersion) {\r\n            if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined) {\r\n                this.setState({\r\n                    treeDataView:\r\n                        JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data\r\n                });\r\n            }\r\n        }\r\n\r\n        let nfilterStorageCategory = this.state.nStorageCategory || {};\r\n        let filterStorageCategory = this.state.filterStorageCategory || {};\r\n\r\n        if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\r\n            if (this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined) {\r\n                const filterStorageCategoryMap = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\",\r\n                    \"sstoragecategoryname\", 'nstoragecategorycode', 'ascending', false);\r\n                filterStorageCategory = filterStorageCategoryMap.get(\"OptionList\");\r\n                if (filterStorageCategory && filterStorageCategory.length > 0) {\r\n                    nfilterStorageCategory = filterStorageCategory[0];\r\n                }\r\n                isComponentUpdated = true;\r\n            }\r\n        } else if (this.props.Login.masterData.nfilterStorageCategory !== previousProps.Login.masterData.nfilterStorageCategory) {\r\n            if (this.props.Login.masterData.nfilterStorageCategory && this.props.Login.masterData.nfilterStorageCategory !== undefined) {\r\n                nfilterStorageCategory = this.props.Login.masterData.nfilterStorageCategory;\r\n                isComponentUpdated = true;\r\n            }\r\n        }\r\n        if (isComponentUpdated) {\r\n            this.setState({ nfilterStorageCategory, filterStorageCategory });\r\n        }\r\n\r\n        if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\r\n            this.setState({ activeTabIndex: this.props.Login.activeTabIndex });\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({\r\n                selectedRecord: this.props.Login.selectedRecord\r\n            });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const filterData = this.generateBreadCrumData();\r\n            this.setState({ filterData });\r\n        }\r\n\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    };\r\n\r\n    moveItem = (userInfo, masterData) => {\r\n        if (this.state.activeTabIndex && this.state.activeTabIndex === 1) {\r\n            if (this.props.Login.masterData && this.props.Login.masterData.selectedSampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster[0] !== undefined) {\r\n                this.props.openSampleStorageApprovedLocation(userInfo, masterData);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYSAMPLE\" }));\r\n            }\r\n        } else if (this.state.activeTabIndex && this.state.activeTabIndex === 3) {\r\n            if (this.props.Login.masterData && this.props.Login.masterData.selectedContainer && this.props.Login.masterData.selectedContainer[0] !== undefined) {\r\n                this.props.openSampleStorageApprovedLocation(userInfo, masterData);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYCONTAINER\" }));\r\n            }\r\n        }\r\n\r\n    }\r\n    confirmDelete = (ncontrolCode) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\",\r\n            this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteSampleStorageMaster(ncontrolCode));\r\n    };\r\n    deleteSampleStorageMaster = (ncontrolCode) => {\r\n        let inputData = [];\r\n\r\n        let data = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.selectedSampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster[0] !== undefined) {\r\n            this.props.Login.masterData.selectedSampleStorageMaster.forEach(item => {\r\n                data.push({ \"nsamplecode\": item.nsamplecode, \"ssampletraycode\": item.ssampletraycode });\r\n            })\r\n\r\n            inputData[\"sampleStorageMaster\"] = data;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            const inputParam = {\r\n                methodUrl: \"SampleStorageMaster\",\r\n                classUrl: \"samplestoragemaster\",\r\n                inputData: inputData,\r\n                operation: \"delete\", searchRef: this.searchRef\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            //     const updateInfo = {\r\n            //         typeName: DEFAULT_RETURN,\r\n            //         data: {\r\n            //             loadEsign: true, screenData: { inputParam, masterData }, operation: \"delete\", openModal: true,\r\n            //             screenName: this.props.Login.inputParam.displayName\r\n            //         }\r\n            //     }\r\n            //     this.props.updateStore(updateInfo);\r\n            // }\r\n            // else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            // }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYSAMPLE\" }));\r\n        }\r\n    }\r\n    loadStorageCondition = () => {\r\n        if (this.props.Login.selectedItem && this.props.Login.selectedItem.containerfirstnode === true) {\r\n            this.props.getStorageConditionFromMaster(this.props.Login.userInfo, this.props.Login.masterData)\r\n        }\r\n    }\r\n    discardSampleStorageMaster = (ncontrolCode) => {\r\n        let inputData = [];\r\n\r\n        let data = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.selectedSampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster[0] !== undefined) {\r\n            this.props.Login.masterData.selectedSampleStorageMaster.forEach(item => {\r\n                data.push({\r\n                    \"nsamplecode\": item.nsamplecode, \"ssampletraycode\": item.ssampletraycode, \"npreregno\": item.npreregno,\r\n                    \"ntransactionsamplecode\": item.ntransactionsamplecode, \"sarno\": item.sarno, \"ssamplearno\": item.ssamplearno\r\n                });\r\n            })\r\n\r\n            inputData[\"sampleStorageMaster\"] = data;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            const inputParam = {\r\n                methodUrl: \"SampleStorageMaster\",\r\n                classUrl: \"samplestoragemaster\",\r\n                inputData: inputData,\r\n                operation: \"discard\", searchRef: this.searchRef\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            //     const updateInfo = {\r\n            //         typeName: DEFAULT_RETURN,\r\n            //         data: {\r\n            //             loadEsign: true, screenData: { inputParam, masterData }, operation: \"discard\", openModal: true,\r\n            //             screenName: this.props.Login.inputParam.displayName\r\n            //         }\r\n            //     }\r\n            //     this.props.updateStore(updateInfo);\r\n            // }\r\n            // else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            // }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYSAMPLE\" }));\r\n        }\r\n    }\r\n    sideNavDetail = (screenName) => {\r\n\r\n        const addId = this.state.controlMap.has(\"Add SampleStorageMaster\") && this.state.controlMap.get(\"Add SampleStorageMaster\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"Edit SampleStorageMaster\") && this.state.controlMap.get(\"Edit SampleStorageMaster\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"Delete SampleStorageMaster\") && this.state.controlMap.get(\"Delete SampleStorageMaster\").ncontrolcode;\r\n        const editContainerID = this.state.controlMap.has(\"Edit StorageContainer\") && this.state.controlMap.get(\"Edit StorageContainer\").ncontrolcode;\r\n        const moveId = this.state.controlMap.has(\"Move SampleStorageMaster\") && this.state.controlMap.get(\"Move SampleStorageMaster\").ncontrolcode;\r\n        const discardId = this.state.controlMap.has(\"Discard SampleStorageMaster\") && this.state.controlMap.get(\"Discard SampleStorageMaster\").ncontrolcode;\r\n\r\n        return (\r\n            screenName == \"IDS_SAMPLEDETAILS\" ?\r\n                <>\r\n                    <div className=\"actions-stripe\">\r\n                        <div className=\"d-flex justify-content-end\">\r\n                            <Nav.Link name=\"addsample\" className=\"add-txt-btn\"\r\n                                hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                onClick={() => this.openModal()}\r\n                            >\r\n                                <FontAwesomeIcon icon={faPlus} /> { }\r\n                                <FormattedMessage id=\"IDS_SAMPLE\" defaultMessage=\"Sample\" />\r\n                            </Nav.Link>\r\n\r\n                            <Nav.Link name=\"deletesample\" className=\"add-txt-btn\"\r\n                                hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                onClick={() => this.confirmDelete(deleteId)}\r\n                            >\r\n                                <FontAwesomeIcon icon={faTrashAlt} /> { }\r\n                                <FormattedMessage id=\"IDS_DELETE\" defaultMessage=\"Delete\" />\r\n                            </Nav.Link>\r\n\r\n                            <Nav.Link name=\"movesample\" className=\"add-txt-btn\"\r\n                                hidden={this.state.userRoleControlRights.indexOf(moveId) === -1}\r\n                                onClick={() => this.moveItem(this.props.Login.userInfo, this.props.Login.masterData)}\r\n                            >\r\n                                <FontAwesomeIcon icon={faPlus} /> { }\r\n                                <FormattedMessage id=\"IDS_MOVE\" defaultMessage=\"Move\" />\r\n                            </Nav.Link>\r\n\r\n                            <Nav.Link name=\"discardsample\" className=\"add-txt-btn\"\r\n                                hidden={this.state.userRoleControlRights.indexOf(discardId) === -1}\r\n                                onClick={() => this.discardSampleStorageMaster(discardId)}\r\n                            >\r\n                                <FontAwesomeIcon icon={faArrowRight} /> { }\r\n                                <FormattedMessage id=\"IDS_DISCARD\" defaultMessage=\"Discard\" />\r\n                            </Nav.Link>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className='toolbar-top-inner'>\r\n                        <TransactionListMasterJson\r\n                            listMasterShowIcon={1}\r\n                            clickIconGroup={false}\r\n                            splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                            masterList={this.props.Login.masterData.sampleStorageMaster || []}\r\n                            selectedMaster={this.props.Login.masterData.selectedSampleStorageMaster || []}\r\n                            primaryKeyField=\"nsamplecode\"\r\n                            filterColumnData={this.props.filterTransactionList}\r\n                            getMasterDetail={this.props.getSampleMasterDetails}\r\n                            inputParam={{\r\n                                ...this.props.Login.masterData\r\n                            }}\r\n                            moreField={this.props.Login.masterData.sampleStorageMaster || []}\r\n                            // selectionList={this.props.Login.masterData.RealFilterStatusValue\r\n                            //     && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                            selectionColorField=\"scolorhexcode\"\r\n                            mainField={\"ssamplearno\"}\r\n                            showStatusLink={true}\r\n                            showStatusName={true}\r\n                            // statusFieldName=\"stransdisplaystatus\"\r\n                            // statusField=\"ntransactionstatus\"\r\n                            selectedListName=\"selectedSampleStorageMaster\"\r\n                            // searchListName=\"searchedSample\"\r\n                            // searchRef={this.searchSampleRef}\r\n                            // objectName=\"sample\"\r\n                            listName=\"IDS_SAMPLE\"\r\n                            // selectionField=\"ntransactionstatus\"\r\n                            // selectionFieldName=\"stransdisplaystatus\"\r\n                            // showFilter={this.props.Login.showFilter}\r\n                            // openFilter={this.openFilter}\r\n                            // closeFilter={this.closeFilter}\r\n                            // onFilterSubmit={this.onFilterSubmit}\r\n                            // subFields={this.state.DynamicSampleColumns}                                                 \r\n                            needMultiSelect={false}\r\n                            needSingleSelect={true}\r\n                            subListName=\"columnlist\"\r\n                            jsonfield=\"jsondata\"\r\n                            showDynamicFields={true}\r\n                            showStatusBlink={true}\r\n                            // filterParam={{\r\n                            //     ...this.state.filterSampleParam,\r\n                            //     childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" },\r\n                            //     { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                            // }}\r\n                            // subFieldsLabel={false}\r\n                            handlePageChange={this.handlePageChange}\r\n                            skip={this.state.skip}\r\n                            take={this.state.take}\r\n                            needFilter={false}\r\n                            hidePaging={false}\r\n                            hideSearch={true}                           \r\n                        />\r\n                    </div>\r\n                </>\r\n                : screenName == \"IDS_CONTAINERS\" ?\r\n                    <>\r\n                        <div className=\"actions-stripe\">\r\n                            <div className=\"d-flex justify-content-end\">\r\n                                <Nav.Link name=\"addsample\" className=\"add-txt-btn\"\r\n                                    hidden={this.state.userRoleControlRights.indexOf(moveId) === -1}\r\n                                    onClick={() => this.moveItem(this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                >\r\n                                    <FontAwesomeIcon icon={faPlus} /> { }\r\n                                    <FormattedMessage id=\"IDS_MOVE\" defaultMessage=\"Move\" />\r\n                                </Nav.Link>\r\n                            </div>\r\n                        </div>\r\n                        <div className='toolbar-top-inner container-tab'>\r\n                            <TransactionListMasterJson\r\n                                listMasterShowIcon={1}\r\n                                clickIconGroup={false}\r\n                                splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                masterList={this.props.Login.masterData.containers || []}\r\n                                selectedMaster={this.props.Login.masterData.selectedContainer || []}\r\n                                primaryKeyField=\"id\"\r\n                                filterColumnData={this.props.filterTransactionList}\r\n                                getMasterDetail={this.props.getselectedContainer}\r\n                                inputParam={{\r\n                                    ...this.props.Login.masterData\r\n                                }}\r\n                                selectionColorField=\"scolorhexcode\"\r\n                                mainField={\"text\"}\r\n                                showStatusLink={true}\r\n                                showStatusName={true}\r\n                                selectedListName=\"selectedContainer\"\r\n                                listName=\"IDS_SAMPLE\"\r\n                                needMultiSelect={false}\r\n                                needSingleSelect={true}\r\n                                subListName=\"columnlist\"\r\n                                jsonfield=\"jsondata\"\r\n                                showDynamicFields={true}\r\n                                showStatusBlink={true}\r\n                                handlePageChange={this.handlePageChange}\r\n                                skip={this.state.skip}\r\n                                take={this.state.take}\r\n                                needFilter={false}\r\n                                hidePaging={false}\r\n                                hideSearch={true}\r\n\r\n                            />\r\n                        </div>\r\n                    </>\r\n                    : screenName == \"IDS_STORAGECONDITION\" ?\r\n                        <ProductList className=\"panel-main-content storage-tab\">\r\n                            {/* {this.props.Login.masterData.storageContainerCondition && this.props.Login.masterData.storageContainerCondition !== undefined ? */}\r\n                            <Card className=\"border-0\">\r\n                                <Card.Header className=\"no-padding\">\r\n                                    <Card.Subtitle>\r\n                                        <div className=\"d-inline\">\r\n                                            <Nav.Link name=\"editUser\" hidden={this.state.userRoleControlRights.indexOf(editContainerID) === -1}\r\n                                                className=\"btn btn-circle outline-grey mr-2\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                onClick={() => this.loadStorageCondition()}\r\n                                            >\r\n                                                <FontAwesomeIcon icon={faPencilAlt} />\r\n                                            </Nav.Link>\r\n                                        </div>\r\n                                    </Card.Subtitle>\r\n                                </Card.Header>\r\n                                <Card.Body className=\"form-static-wrap no-padding\">\r\n                                    <Row>\r\n                                        <Col md={12}>\r\n                                            <FormGroup>\r\n                                                <FormLabel>\r\n                                                    <FormattedMessage id=\"IDS_STORAGECONDITIONNAME\" />\r\n                                                </FormLabel>\r\n                                                <ReadOnlyText>\r\n                                                    {this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== null ? this.props.Login.masterData.storageContainer.sstorageconditionname : \"\" || \"\"}\r\n                                                </ReadOnlyText>\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                        <Col md={12}>\r\n                                            <FormGroup>\r\n                                                <FormLabel>\r\n                                                    <FormattedMessage id=\"IDS_STORAGELOCATIONNAME\" />\r\n                                                </FormLabel>\r\n                                                <ReadOnlyText>\r\n                                                    {this.props.Login.containerLocation && this.props.Login.containerLocation}\r\n                                                </ReadOnlyText>\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Card.Body>\r\n                            </Card>\r\n                            {/* : \"\"} */}\r\n\r\n                        </ProductList>\r\n                        : \"\"\r\n        )\r\n    }\r\n    changePropertyView = (index, event, status) => {\r\n        if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    activeTabIndex: this.state.activeTabIndex !== index ? index : 0 ? index : false\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    changePropertyViewClose = (id) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                activeTabIndex: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onInputSwitchOnChange = (event) => {\r\n        if (event.target.name == \"PopupNav\") {\r\n            this.setState({\r\n                enablePropertyPopup: !this.state.enablePropertyPopup\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                enableAutoClick: !this.state.enableAutoClick\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.filterStorageCategory) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_STORAGECATEGORY\",\r\n                    \"value\": this.props.Login.masterData.approvedSampleStorageLocation ? this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined ?\r\n                        this.props.Login.masterData.selectedStorageCategoryName : \"NA\" : \"NA\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        if (this.state.nfilterStorageCategory.value) {\r\n            let inputParam = {\r\n                inputData: {\r\n                    nstoragecategorycode: this.state.nfilterStorageCategory.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nfilterStorageCategory: this.state.nfilterStorageCategory\r\n\r\n                }\r\n            }\r\n            this.props.changeStorageCategoryFilterOnSampleMaster(inputParam, this.props.Login.masterData.filterStorageCategory);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_STORAGECATEGORYNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n\r\n    itemRender = (clickedItem) => {\r\n        if (!this.state.toggleAction) {\r\n            return (\r\n                <>\r\n                    {clickedItem.item ? (\r\n                        <ul className=\"list-inline mb-0\">\r\n                            <li className=\"list-inline-item mr-3 \">{clickedItem.item.text}</li>\r\n                            {clickedItem.item.editable ? (\r\n                                <>\r\n                                    <li className=\"list-inline-item \">\r\n                                        <span\r\n                                        // className=\"action-icon\"\r\n                                        // onClick={(e) => this.setProperties(e, clickedItem)}\r\n                                        ></span>\r\n                                    </li>\r\n                                </>\r\n                            ) : null}\r\n                        </ul>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    };\r\n\r\n    onItemClick = (event) => {\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.editable === true) {\r\n                item.editable = false;\r\n            } else if (item.id === event.item.id) {\r\n                item.editable = true;\r\n            }\r\n            return item;\r\n        });\r\n        this.setState({ treeData: newData, clickedItem: event.item });\r\n    };\r\n\r\n    onExpandChange = (event) => {\r\n        event.item.expanded = !event.item.expanded;\r\n        this.forceUpdate();\r\n    };\r\n\r\n    onMoveClick = (saveType, formRef) => {\r\n        let inputParam = {};\r\n        if (this.state.activeTabIndex === 1) {\r\n\r\n            if (this.state.clickedItem && this.state.clickedItem.containerlastnode === true) {\r\n                if (this.state.clickedItem.id !== this.props.Login.sampleTrayCode) {\r\n\r\n                    inputParam = {\r\n                        selectedSamples: this.props.Login.masterData.selectedSampleStorageMaster,\r\n                        moveTargetTrayCode: this.state.clickedItem.id,\r\n                        nsamplestoragelocationcode: this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\r\n                        moveContainers: false,\r\n                        storageCategory: this.state.selectedRecord[\"nstoragecategorycode\"] && this.state.selectedRecord[\"nstoragecategorycode\"].value\r\n                    }\r\n                    this.props.moveItems(inputParam, this.props.Login.masterData);\r\n                }\r\n            }\r\n\r\n\r\n        } else if (this.state.activeTabIndex === 3) {\r\n\r\n            if (this.state.clickedItem && this.state.clickedItem.locationlastnode === true) {\r\n                if (this.state.clickedItem.id !== this.props.Login.locationCode) {\r\n\r\n                    let getSampleTray = [];\r\n                    let targetData = this.state.treeData || [];\r\n                    let sourceData = this.state.treeDataView || [];\r\n                    let newData = [];\r\n                    let sameLocation = true;\r\n                    let targetJsonData = {};\r\n                    let SourceJsonData = {};\r\n\r\n\r\n\r\n                    if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode === this.state.selectedRecord[\"nsamplestoragelocationcode\"].value) {\r\n                        this.props.Login.masterData.selectedContainer.forEach(data => {\r\n                            targetData = removeItems(targetData, \"items\", (item) => {\r\n                                return item.id === data.id;\r\n                            });\r\n                        })\r\n\r\n\r\n                        newData = mapTree(targetData, \"items\", (item) => {\r\n                            if (item.id === this.state.clickedItem.id) {\r\n                                item.items = item.items || [];\r\n                                item.items.push(...this.props.Login.masterData.selectedContainer);\r\n                            }\r\n                            return item;\r\n                        });\r\n                        targetJsonData[\"data\"] = newData;\r\n                    } else {\r\n\r\n                        this.props.Login.masterData.selectedContainer.forEach(data => {\r\n                            sourceData = removeItems(sourceData, \"items\", (item) => {\r\n                                return item.id === data.id;\r\n                            });\r\n                        })\r\n\r\n\r\n                        newData = mapTree(targetData, \"items\", (item) => {\r\n                            if (item.id === this.state.clickedItem.id) {\r\n                                item.items = item.items || [];\r\n                                item.items.push(...this.props.Login.masterData.selectedContainer);\r\n                            }\r\n                            return item;\r\n                        });\r\n                        SourceJsonData[\"data\"] = sourceData;\r\n                        targetJsonData[\"data\"] = newData;\r\n                        this.props.Login.masterData.selectedContainer.forEach(data => {\r\n\r\n                            mapTree([data], \"items\", (item) => {\r\n                                if (item.containerlastnode === true) {\r\n                                    getSampleTray.push({ id: item.id, text: item.text, nsamplestoragelocationcode: this.state.selectedRecord[\"nsamplestoragelocationcode\"].value });\r\n                                }\r\n                            });\r\n                        })\r\n                        sameLocation = false;\r\n                    }\r\n\r\n\r\n                    inputParam = {\r\n                        selectedSamples: getSampleTray,\r\n                        sourceLocationCode: this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\r\n                        sourceVersionCode: this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode,\r\n                        nsamplestoragelocationcode: this.state.selectedRecord[\"nsamplestoragelocationcode\"].item.nsamplestoragelocationcode,\r\n                        nsamplestorageversioncode: this.state.selectedRecord[\"nsamplestoragelocationcode\"].item.nsamplestorageversioncode,\r\n                        SourceJsonData: SourceJsonData,\r\n                        targetJsonData: targetJsonData,\r\n                        moveContainers: true,\r\n                        storageCategory: this.props.Login.masterData.selectedSampleStorageVersion.nstoragecategorycode,\r\n                        sameLocation\r\n                    }\r\n                    this.props.moveItems(inputParam, this.props.Login.masterData);\r\n                }\r\n            }\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: \"samplestoragemaster\",\r\n            methodUrl: \"SampleStorageMaster\",\r\n            displayName: \"IDS_SAMPLESTORAGEMASTER\",\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n    render() {\r\n\r\n        let mandatoryFields = [];\r\n\r\n        if (this.state.activeTabIndex === 1) {\r\n            mandatoryFields.push({ \"idsName\": \"IDS_SAMPLE\", \"dataField\": \"ssamplearno\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" });\r\n        } else if (this.state.activeTabIndex === 2) {\r\n            mandatoryFields.push({ \"idsName\": \"IDS_STORAGECONDITIONNAME\", \"dataField\": \"nstorageconditioncode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n        }\r\n\r\n        const filterParam = {\r\n            inputListName: \"approvedSampleStorageLocation\", selectedObject: \"selectedSampleStorageVersion\", primaryKeyField: \"nsamplestorageversioncode\",\r\n            fetchUrl: \"samplestoragelocation/getActiveSampleStorageVersion\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"ssamplestoragelocationname\"]\r\n        };\r\n\r\n        const breadCrumbData = this.state.filterData || [];\r\n\r\n        const confirmMessage = new ConfirmMessage();\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        : \"\"}\r\n                    <Row noGutters={true} className={`toolbar-top ${this.state.activeTabIndex ? 'active-property-bar' :\"\"}`}>\r\n                        <Col md={12}>\r\n                            <ListWrapper className={`vertical-tab-top grid-master ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`}>\r\n                                <div className={`tab-left-area ${this.state.activeTabIndex ? 'active' : \"\"}`}>\r\n                                    <ListMaster\r\n                                        formatMessage={this.props.intl.formatMessage}\r\n                                        screenName={this.props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGEMASTER\" })}\r\n                                        masterData={this.props.Login.masterData}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.approvedSampleStorageLocation}\r\n                                        getMasterDetail={(selectedItem) =>\r\n                                            this.props.getSelectedApprovedStorageVersion(\r\n                                                selectedItem, this.props.Login.userInfo,\r\n                                                this.props.Login.masterData\r\n                                            )}\r\n                                        selectedMaster={this.props.Login.masterData.selectedSampleStorageVersion}\r\n                                        primaryKeyField=\"nsamplestoragelocationcode\"\r\n                                        mainField=\"ssamplestoragelocationname\"\r\n                                        // firstField=\"sversionno\"\r\n                                        // secondField=\"stransdisplaystatus\"\r\n                                        filterColumnData={this.props.filterColumnData}\r\n                                        filterParam={filterParam}\r\n                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                        hideAddButton={true}\r\n                                        // addId={addId}\r\n                                        searchRef={this.searchRef}\r\n                                        reloadData={this.reloadData}\r\n                                        hidePaging={false}\r\n                                        // openModal={() => this.props.getDesignTemplateMappingComboService(addParam)}\r\n                                        showFilterIcon={true}\r\n                                        showFilter={this.props.Login.showFilter}\r\n                                        openFilter={this.openFilter}\r\n                                        closeFilter={this.closeFilter}\r\n                                        onFilterSubmit={this.onFilterSubmit}\r\n                                        filterComponent={[\r\n                                            {\r\n                                                \"IDS_STORAGEFILTER\":\r\n                                                    <StorageCategoryFilter\r\n                                                        filterStorageCategory={this.state.filterStorageCategory || []}\r\n                                                        nfilterStorageCategory={this.state.nfilterStorageCategory || {}}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                    />\r\n                                            }\r\n                                        ]}\r\n                                    />\r\n\r\n                                </div>\r\n                                <div className='tree-view-container'>\r\n\r\n                                    <TreeViewEditable\r\n                                        id=\"samplestoragelocation\"\r\n                                        name=\"samplestoragelocation\"\r\n                                        // label=\"Sample Storage Location\"\r\n                                        data={this.state.treeDataView}\r\n                                        expandIcons={true}\r\n                                        item={this.itemRenderView}\r\n                                        selectField={'activeNode'}\r\n                                        onExpandChange={this.onExpandChangeView}\r\n                                        onItemClick={this.onItemClickView}\r\n                                    />\r\n\r\n                                </div>\r\n                                <div className={`${this.state.enablePropertyPopup ? 'active-popup' : \"\"} xs-grid-container vertical-tab ${this.state.activeTabIndex ? 'active' : \"\"}`} >\r\n                                    <div className={`${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${this.state.activeTabIndex ? 'active' : \"\"}`} style={{ width: this.state.enablePropertyPopup ? this.state.propertyPopupWidth + '%' : \"\" }}>\r\n                                        <span className={` vertical-tab-close ${this.state.activeTabIndex ? 'active' : \"\"}`} onClick={() => this.changePropertyViewClose(false)}><FontAwesomeIcon icon={faChevronRight} /> </span>\r\n                                        <div className={` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex === 1 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4 no-margin'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_SAMPLEDETAILS\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex === 1 ? this.sideNavDetail(\"IDS_SAMPLEDETAILS\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex === 2 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4 no-margin'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_STORAGECONDITION\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex === 2 ? this.sideNavDetail(\"IDS_STORAGECONDITION\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex === 3 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4 no-margin'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_CONTAINERS\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex === 3 ? this.sideNavDetail(\"IDS_CONTAINERS\") : \"\"}\r\n                                        </div>\r\n\r\n\r\n                                    </div>\r\n                                    <div className='tab-head'>\r\n                                        <ul>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex === 1 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(1)}>\r\n                                                <FontAwesomeIcon icon={faEye} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_SAMPLEDETAILS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex === 2 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(2)}>\r\n                                                <FontAwesomeIcon icon={faLink} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_STORAGECONDITION\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex === 3 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(3)}>\r\n                                                <FontAwesomeIcon icon={faComments} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_CONTAINERS\" })}\r\n                                                </span>\r\n                                            </li>\r\n\r\n                                        </ul>\r\n                                        {/* <span className='tab-click-toggle-btn'>\r\n                                            <CustomSwitch\r\n                                                label={\"Auto Show\"}\r\n                                                type=\"switch\"\r\n                                                name={\"Auto Click\"}\r\n                                                onChange={(event) => this.onInputSwitchOnChange(event)}\r\n                                                defaultValue={this.state.enableAutoClick}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                checked={this.state.enableAutoClick}\r\n                                            />\r\n                                        </span> */}\r\n                                        {/* <span className='tab-click-toggle-btn'>\r\n                                            <CustomSwitch\r\n                                                label={\"Popup Nav\"}\r\n                                                type=\"switch\"\r\n                                                name={\"PopupNav\"}\r\n                                                onChange={(event) => this.onInputSwitchOnChange(event)}\r\n                                                defaultValue={this.state.enablePropertyPopup}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                checked={this.state.enablePropertyPopup}\r\n                                            />\r\n                                        </span> */}\r\n                                    </div>\r\n                                </div>\r\n                            </ListWrapper>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.intl.formatMessage({ id: this.state.activeTabIndex && this.state.activeTabIndex === 1 ? \"IDS_SAMPLE\" : \"IDS_STORAGECONDITIONNAME\" })}\r\n                        onSaveClick={this.onSaveClick}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        showSaveContinue={this.state.activeTabIndex && this.state.activeTabIndex === 1 ? true : false}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={\r\n\r\n                            this.state.activeTabIndex && this.state.activeTabIndex === 1 ? (\r\n                                <AddSample\r\n                                    onInputChange={(e) => this.onInputChange(e)}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onKeyUp={(e) => this.onKeyUp(e)}\r\n                                />\r\n                            ) : this.state.activeTabIndex && this.state.activeTabIndex === 2 ? (\r\n                                <AddContainerStorageCondition\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onComboChange={this.onComboChange}\r\n                                    storageCondition={this.props.Login.masterData.storageCondition || []}\r\n                                />\r\n                            ) : (\r\n                                <></>\r\n                            )\r\n                        }\r\n                    />\r\n                }\r\n\r\n                {this.props.Login.openChildModal &&\r\n                    <SlideOutModal show={this.props.Login.openChildModal}\r\n                        closeModal={this.closeChildModal}\r\n                        operation={this.props.intl.formatMessage({ id: \"IDS_MOVE\" })}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.intl.formatMessage({ id: this.state.activeTabIndex && this.state.activeTabIndex == 1 ? \"IDS_SAMPLE\" : \"IDS_CONTAINERS\" })}\r\n                        onSaveClick={this.onMoveClick}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={\r\n                            <MoveSampleOrContainers\r\n                                treeData={this.state.treeData}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                itemRender={this.itemRender}\r\n                                onExpandChange={this.onExpandChange}\r\n                                onItemClick={this.onItemClick}\r\n                                onComboChange={this.onComboChange}\r\n                                storageCategory={this.props.Login.masterData.storageCategory || []}\r\n                                approvedLocation={this.props.Login.masterData.approvedLocation || []}\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential, getSampleMaster, filterColumnData,\r\n    getSelectedSampleStorageLocation, openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation,\r\n    getSelectedSampleStorageVersion, getContainerStorageCondition, getStorageConditionFromMaster, getSampleMasterDetails,\r\n    getContainers, getselectedContainer, changeStorageCategoryFilterOnSampleMaster, openSampleStorageApprovedLocation,\r\n    loadApprovedLocationOnCombo, loadApprovedLocationOnTreeData, moveItems, saveSampleStorageMaster, getSelectedApprovedStorageVersion\r\n})(injectIntl(SampleStorageMaster));"]},"metadata":{},"sourceType":"module"}