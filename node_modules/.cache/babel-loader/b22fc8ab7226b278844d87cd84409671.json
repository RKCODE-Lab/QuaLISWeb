{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { intl } from '../components/App';\nimport { constructOptionList } from '../components/CommonScript';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nexport function getComboService(addParam) {\n  return function (dispatch) {\n    const nsampletypecode = addParam.nsampletypecode;\n    const nregtypecode = addParam.nregtypecode;\n    const nregsubtypecode = addParam.nregsubtypecode;\n    const nformcode = addParam.nformcode;\n    let isValid = true;\n\n    if (nsampletypecode !== 4) {\n      if (nsampletypecode != -1 && nregtypecode != -1 && nregsubtypecode != -1 && nregsubtypecode !== undefined && nformcode != -1) {\n        isValid = true;\n      } else {\n        isValid = false;\n      }\n    }\n\n    if (nsampletypecode === 4) {\n      if (nsampletypecode != -1 && nformcode != -1) {\n        isValid = true;\n      } else {\n        isValid = false;\n      }\n    }\n\n    if (isValid) {\n      let urlArray = [];\n      const service1 = rsapi.post(\"/approvalstatusconfig/getStatusFunction\", {\n        userinfo: addParam.userInfo,\n        nformcode: addParam.nformcode\n      });\n      const service2 = rsapi.post(\"approvalstatusconfig/getTransactionStatus\", {\n        userinfo: addParam.userInfo\n      });\n      urlArray = [service1, service2];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let selectedId = null;\n        const statusFunctionMap = constructOptionList(response[0].data || [], \"nstatusfunctioncode\", \"sapprovalstatusfunctions\", undefined, undefined, true);\n        const statusFunctionList = statusFunctionMap.get(\"OptionList\");\n        selectedId = addParam.primaryKeyField;\n        const transactionsList = response[1].data;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            statusFunctionList,\n            transactionsList,\n            operation: addParam.operation,\n            screenName: addParam.screenName,\n            selectedRecord: {},\n            openModal: true,\n            ncontrolCode: addParam.ncontrolCode,\n            loading: false,\n            selectedId\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTALLVALUESINFILTER\"\n      }));\n    }\n  };\n}\nexport function getApprovalSubType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approvalstatusconfig/getApprovalSubType\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data,\n        defaultForms: inputParam.inputData.defaultForms\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegTypeBySampleType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"approvalstatusconfig/getRegTypeBySampleType\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data,\n        defaultSample: inputParam.inputData.defaultSample\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegSubTypeByRegtype(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"approvalstatusconfig/getRegSubTypeByRegtype\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data,\n        defaultRegType: inputParam.inputData.defaultRegType\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.warn(error.response.data);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTransactionForms(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"approvalstatusconfig/getTransactionForms\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data,\n        defaultRegSubType: inputParam.inputData.defaultRegSubType\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterSubmit(inputParam) {\n  return function (dispatch) {\n    const nsampletypecode = inputParam.inputData.nsampletypecode;\n    const nregtypecode = inputParam.inputData.nregtypecode;\n    const nregsubtypecode = inputParam.inputData.nregsubtypecode;\n    const nformcode = inputParam.inputData.nformcode;\n    let isValid = true;\n\n    if (nsampletypecode !== 4) {\n      if (nsampletypecode != -1 && nregtypecode != -1 && nregsubtypecode != -1 && nformcode != -1) {\n        isValid = true;\n      } else {\n        isValid = false;\n      }\n    }\n\n    if (nsampletypecode === 4) {\n      if (nsampletypecode != -1 && nformcode != -1) {\n        isValid = true;\n      } else {\n        isValid = false;\n      }\n    }\n\n    if (isValid) {\n      dispatch(initRequest(true));\n      return rsapi.post(\"approvalstatusconfig/getFilterSubmit\", inputParam.inputData).then(response => {\n        let masterData = { ...inputParam.masterData,\n          ...response.data\n        };\n        masterData = { ...masterData\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.warn(error.response.data);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTALLVALUESINFILTER\"\n      }));\n    }\n  };\n}\nexport function changeFilterSubmit(inputParam, SampleTypes, defaultSample, registrationTypes, defaultRegType, regSubTypeList, defaultRegSubType, qualisForms, defaultForms, approvalSubType, defaultApprovalSubType) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"approvalstatusconfig/closeFilterService\", inputParam.inputData).then(response => {\n      const masterData = { ...response.data,\n        ...inputParam.masterData\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData: { ...masterData,\n            SampleTypes,\n            defaultSample,\n            realSampleType: defaultSample,\n            defaultRegType,\n            realRegType: defaultRegType,\n            defaultRegSubType,\n            realRegSubType: defaultRegSubType,\n            defaultForms,\n            realdefaultForms: defaultForms,\n            defaultApprovalSubType,\n            realApprovalSubType: defaultApprovalSubType\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n}\nexport function closeFilterService(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"approvalstatusconfig/closeFilterService\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data,\n        defaultSample: inputParam.inputData.defaultSample,\n        defaultRegType: inputParam.inputData.defaultRegType,\n        defaultRegSubType: inputParam.inputData.defaultRegSubType,\n        defaultApprovalSubType: inputParam.inputData.defaultApprovalSubType,\n        defaultForms: inputParam.inputData.defaultForms\n      };\n      masterData = { ...masterData\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ApprovalStatusConfigAction.js"],"names":["rsapi","Axios","toast","intl","constructOptionList","DEFAULT_RETURN","initRequest","getComboService","addParam","dispatch","nsampletypecode","nregtypecode","nregsubtypecode","nformcode","isValid","undefined","urlArray","service1","post","userinfo","userInfo","service2","all","then","response","selectedId","statusFunctionMap","data","statusFunctionList","get","primaryKeyField","transactionsList","type","payload","operation","screenName","selectedRecord","openModal","ncontrolCode","loading","catch","error","status","message","warn","formatMessage","id","getApprovalSubType","inputParam","inputData","masterData","defaultForms","getRegTypeBySampleType","defaultSample","getRegSubTypeByRegtype","defaultRegType","getTransactionForms","defaultRegSubType","getFilterSubmit","changeFilterSubmit","SampleTypes","registrationTypes","regSubTypeList","qualisForms","approvalSubType","defaultApprovalSubType","realSampleType","realRegType","realRegSubType","realdefaultForms","realApprovalSubType","closeFilterService"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { intl } from '../components/App';\r\n\r\nimport {\r\n    constructOptionList\r\n} from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\n\r\n\r\n\r\nexport function getComboService(addParam) {\r\n    return function (dispatch) {\r\n        const nsampletypecode = addParam.nsampletypecode;\r\n        const nregtypecode = addParam.nregtypecode;\r\n        const nregsubtypecode = addParam.nregsubtypecode;\r\n\r\n        const nformcode = addParam.nformcode;\r\n        let isValid = true;\r\n        if (nsampletypecode !== 4) {\r\n            if ((nsampletypecode != -1) && (nregtypecode != -1) && (nregsubtypecode != -1) && (nregsubtypecode !== undefined) && nformcode != -1) {\r\n                isValid = true;\r\n            }\r\n            else {\r\n                isValid = false;\r\n            }\r\n        }\r\n        if (nsampletypecode === 4) {\r\n            if ((nsampletypecode != -1) && (nformcode != -1)) {\r\n                isValid = true;\r\n            }\r\n            else {\r\n                isValid = false;\r\n            }\r\n        }\r\n\r\n\r\n        if (isValid) {\r\n            let urlArray = [];\r\n\r\n            const service1 = rsapi.post(\"/approvalstatusconfig/getStatusFunction\", { userinfo: addParam.userInfo, nformcode: addParam.nformcode });\r\n\r\n            const service2 = rsapi.post(\"approvalstatusconfig/getTransactionStatus\", { userinfo: addParam.userInfo });\r\n\r\n            urlArray = [service1, service2]\r\n\r\n            dispatch(initRequest(true));\r\n\r\n            Axios.all(urlArray).then(response => {\r\n\r\n\r\n                let selectedId = null;\r\n                const statusFunctionMap = constructOptionList(response[0].data || [], \"nstatusfunctioncode\",\r\n                    \"sapprovalstatusfunctions\", undefined, undefined, true);\r\n                const statusFunctionList = statusFunctionMap.get(\"OptionList\");\r\n\r\n                selectedId = addParam.primaryKeyField;\r\n\r\n                const transactionsList = response[1].data;\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        statusFunctionList,\r\n                        transactionsList,\r\n                        operation: addParam.operation, screenName: addParam.screenName, selectedRecord: {},\r\n                        openModal: true,\r\n                        ncontrolCode: addParam.ncontrolCode,\r\n                        loading: false, selectedId\r\n                    }\r\n                });\r\n            })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function getApprovalSubType(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approvalstatusconfig/getApprovalSubType\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = { ...inputParam.masterData, ...response.data, defaultForms: inputParam.inputData.defaultForms }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegTypeBySampleType(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"approvalstatusconfig/getRegTypeBySampleType\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = { ...inputParam.masterData, ...response.data, defaultSample: inputParam.inputData.defaultSample }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false,\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getRegSubTypeByRegtype(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"approvalstatusconfig/getRegSubTypeByRegtype\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = { ...inputParam.masterData, ...response.data, defaultRegType: inputParam.inputData.defaultRegType }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getTransactionForms(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"approvalstatusconfig/getTransactionForms\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = { ...inputParam.masterData, ...response.data, defaultRegSubType: inputParam.inputData.defaultRegSubType }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getFilterSubmit(inputParam) {\r\n\r\n    return function (dispatch) {\r\n        const nsampletypecode = inputParam.inputData.nsampletypecode;\r\n        const nregtypecode = inputParam.inputData.nregtypecode;\r\n        const nregsubtypecode = inputParam.inputData.nregsubtypecode;\r\n\r\n        const nformcode = inputParam.inputData.nformcode;\r\n        let isValid = true;\r\n        if (nsampletypecode !== 4) {\r\n            if ((nsampletypecode != -1) && (nregtypecode != -1) && (nregsubtypecode != -1) && (nformcode != -1)) {\r\n                isValid = true;\r\n            }\r\n            else {\r\n                isValid = false;\r\n            }\r\n        }\r\n        if (nsampletypecode === 4) {\r\n            if ((nsampletypecode != -1) && (nformcode != -1)) {\r\n                isValid = true;\r\n            }\r\n            else {\r\n                isValid = false;\r\n            }\r\n        }\r\n\r\n        if (isValid) {\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"approvalstatusconfig/getFilterSubmit\", inputParam.inputData)\r\n                .then(response => {\r\n                    let masterData = { ...inputParam.masterData, ...response.data }\r\n                    masterData = { ...masterData }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData, loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                    if (error.response.status === 500) {\r\n                        toast.warn(error.response.data);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function changeFilterSubmit(inputParam, SampleTypes, defaultSample, registrationTypes, defaultRegType, regSubTypeList, defaultRegSubType, qualisForms, defaultForms, approvalSubType, defaultApprovalSubType\r\n) {\r\n\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"approvalstatusconfig/closeFilterService\", inputParam.inputData)\r\n            .then(response => {\r\n                const masterData = {...response.data,...inputParam.masterData}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            SampleTypes,\r\n                            defaultSample,\r\n                            realSampleType: defaultSample,\r\n                            defaultRegType,\r\n                            realRegType: defaultRegType,\r\n                            defaultRegSubType,\r\n                            realRegSubType: defaultRegSubType,\r\n                            defaultForms,\r\n                            realdefaultForms: defaultForms,\r\n                            defaultApprovalSubType,\r\n                            realApprovalSubType: defaultApprovalSubType\r\n\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport function closeFilterService(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"approvalstatusconfig/closeFilterService\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = { ...inputParam.masterData, ...response.data ,defaultSample: inputParam.inputData.defaultSample,defaultRegType: inputParam.inputData.defaultRegType,\r\n                    defaultRegSubType: inputParam.inputData.defaultRegSubType,\r\n                        defaultApprovalSubType: inputParam.inputData.defaultApprovalSubType,\r\n                        defaultForms:inputParam.inputData.defaultForms,}\r\n                masterData = { ...masterData }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}