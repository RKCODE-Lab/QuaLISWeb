{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\type3component\\\\Type3Component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport Esign from '../../pages/audittrail/Esign';\nimport SlideOutModal from '../slide-out-modal/SlideOutModal';\nimport { getFieldSpecification } from './Type3FieldSpecificationList';\nimport AddType3Component from './AddType3Component';\nimport { callService, crudMaster, updateStore, validateEsignCredential, fetchRecord } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, extractFieldHeader } from '../CommonScript';\nimport { ListWrapper } from '../client-group.styles';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Type3Component extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.openModal = ncontrolCode => {\n      // let selectedRecord = { \"ndefaultstatus\": 4 };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: {},\n          operation: \"create\",\n          ncontrolCode,\n          selectedId: null,\n          openModal: true,\n          screenName: this.props.Login.inputParam.displayName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName, item) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue, item) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputOnChange = (value, name, item) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        dataState = this.state.dataState;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = this.state.selectedRecord;\n        this.extractedColumnList.map(item => {\n          let fieldName = item.dataField;\n\n          if (item.controlType === \"checkbox\") {\n            fieldName = item.controlName;\n          }\n\n          if (item.isJsonField === true) {\n            return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName] = { ...inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName],\n              [fieldName]: this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\"\n            };\n          } else {\n            return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\n          }\n        });\n        selectedId = this.props.Login.selectedId;\n      } else {\n        //add               \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        this.extractedColumnList.map(item => {\n          let fieldName = item.dataField;\n\n          if (item.controlType === \"checkbox\") {\n            fieldName = item.controlName;\n          }\n\n          if (item.isJsonField === true) {\n            return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName] = { ...inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName],\n              [fieldName]: this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\"\n            };\n          } else {\n            return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\n          }\n        });\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        selectedId,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState\n      }; //console.log(\"input param:\", inputParam);\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.fieldList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n    let fieldList = {};\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n\n    if (this.props.Login.inputParam !== undefined) {\n      fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\n      this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\n      primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\n    }\n\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      operation: \"update\",\n      primaryKeyField,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    const mandatoryFields = [];\n    this.extractedColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.fetchRecord,\n      editParam: editParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: deleteParam,\n      reloadData: this.reloadData,\n      addRecord: () => this.openModal(addId),\n      pageable: true,\n      scrollable: 'scrollable' // isComponent={true}\n      ,\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields // addComponentParam={{}}                   \n      // addComponent={this.addComponent}\n      ,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddType3Component, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        extractedColumnList: this.extractedColumnList,\n        onNumericInputOnChange: this.onNumericInputOnChange,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.state.dataState.take\n          };\n        }\n\n        if (this.state.dataResult.data) {\n          if (this.state.dataResult.data.length === 1) {\n            let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n            dataState = {\n              skip: skipcount,\n              take: this.state.dataState.take\n            };\n          }\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  fetchRecord\n})(injectIntl(Type3Component));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/type3component/Type3Component.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DataGrid","Esign","SlideOutModal","getFieldSpecification","AddType3Component","callService","crudMaster","updateStore","validateEsignCredential","fetchRecord","DEFAULT_RETURN","showEsign","getControlMap","extractFieldHeader","ListWrapper","mapStateToProps","state","Login","Type3Component","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","openModal","ncontrolCode","updateInfo","typeName","selectedRecord","operation","selectedId","screenName","inputParam","displayName","closeModal","loadEsign","onInputOnChange","target","type","name","checked","value","onComboChange","comboData","fieldName","item","handleDateChange","dateName","dateValue","onNumericInputOnChange","deleteRecord","deleteParam","classUrl","methodUrl","inputData","toLowerCase","userInfo","esignNeeded","userRoleControlRights","nformcode","screenData","masterData","intl","formatMessage","id","reloadData","onSaveClick","saveType","formRef","undefined","extractedColumnList","map","dataField","controlType","controlName","isJsonField","jsonObjectName","nmastersitecode","validateEsign","sreason","password","createRef","fieldList","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","getDerivedStateFromProps","warn","render","primaryKeyField","addId","has","concat","get","ncontrolcode","Object","values","keys","length","editId","editParam","mandatoryFields","forEach","mandatory","push","componentDidUpdate","previousProps","skipcount"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {  injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport SlideOutModal from '../slide-out-modal/SlideOutModal';\r\nimport { getFieldSpecification } from './Type3FieldSpecificationList';\r\nimport AddType3Component from './AddType3Component';\r\nimport { callService, crudMaster, updateStore, validateEsignCredential, fetchRecord } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap, extractFieldHeader } from '../CommonScript';\r\nimport { ListWrapper} from '../client-group.styles';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Type3Component extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.fieldList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n        };\r\n    }\r\n\r\n    dataStateChange = (event) => { \r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    openModal = (ncontrolCode) => {\r\n       // let selectedRecord = { \"ndefaultstatus\": 4 };\r\n      \r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord:{}, operation: \"create\", ncontrolCode,selectedId:null,\r\n                openModal: true, screenName: this.props.Login.inputParam.displayName\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId:null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n        let fieldList = {};\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n            fieldList = getFieldSpecification().get(this.props.Login.inputParam.methodUrl) || [];\r\n            this.extractedColumnList = extractFieldHeader(Object.values(fieldList));\r\n            primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\r\n\r\n        }\r\n\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n               && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n    \r\n        const editParam = {screenName:this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation:\"update\",  primaryKeyField, \r\n            inputParam:this.props.Login.inputParam,   userInfo:this.props.Login.userInfo,  ncontrolCode:editId};\r\n\r\n        const deleteParam ={operation:\"delete\"};\r\n\r\n        const mandatoryFields=[];\r\n        this.extractedColumnList.forEach(item=>item.mandatory === true ? \r\n            mandatoryFields.push(item) :\"\"\r\n        );        \r\n\r\n        return(<>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                          \r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.fetchRecord}\r\n                                    editParam={editParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    deleteParam={deleteParam}\r\n                                    reloadData={this.reloadData}\r\n                                    addRecord = {() => this.openModal(addId)}\r\n                                    pageable={true}\r\n                                    scrollable={'scrollable'}\r\n                                    // isComponent={true}\r\n                                    gridHeight = {'600px'}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {this.props.Login.openModal ? \r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        // addComponentParam={{}}                   \r\n                        // addComponent={this.addComponent}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddType3Component\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                extractedColumnList={this.extractedColumnList}\r\n                                onNumericInputOnChange={this.onNumericInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                handleDateChange={this.handleDateChange}                               \r\n                                userInfo={this.props.Login.userInfo}\r\n                            />}\r\n                    />\r\n                :\"\"}\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let {dataState}=this.state;\r\n                if(this.props.Login.dataState===undefined){\r\n                    dataState={skip:0,take:this.state.dataState.take}\r\n                }\r\n                 if(this.state.dataResult.data){\r\n                     if(this.state.dataResult.data.length ===1){\r\n                        let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\r\n                        this.state.dataState.skip\r\n                         dataState={skip:skipcount,take:this.state.dataState.take}\r\n                     }\r\n                 } \r\n                this.setState({\r\n                    data: this.props.Login.masterData, selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        }\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }    \r\n\r\n    onComboChange = (comboData, fieldName, item) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });  \r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue, item) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n\r\n    onNumericInputOnChange = (value, name, item) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n \r\n    deleteRecord = (deleteParam) =>{\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation:deleteParam.operation,\r\n            dataState:this.state.dataState\r\n        }\r\n\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode,deleteParam.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation:deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n       \r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            let dataState = undefined;\r\n            let selectedId = null;\r\n            if (this.props.Login.operation === \"update\") {\r\n                // edit\r\n                dataState=this.state.dataState\r\n                inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = this.state.selectedRecord;\r\n                this.extractedColumnList.map(item => {\r\n                    let fieldName = item.dataField;\r\n                    if (item.controlType === \"checkbox\") {\r\n                        fieldName = item.controlName\r\n                    }\r\n                    if (item.isJsonField === true) {\r\n                        return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName] = {...inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName], [fieldName]:this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\" }\r\n                      }\r\n                      else {\r\n                          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\r\n                      }                  })\r\n                selectedId = this.props.Login.selectedId; \r\n            }\r\n            else {\r\n                //add               \r\n                inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n                this.extractedColumnList.map(item => {\r\n                    let fieldName = item.dataField;\r\n                    if (item.controlType === \"checkbox\") {\r\n                        fieldName = item.controlName\r\n                    }\r\n                    if (item.isJsonField === true) {\r\n                        return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName] = {...inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.jsonObjectName], [fieldName]:this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\" }\r\n                      }\r\n                      else {\r\n                          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\r\n                      }                })\r\n            }\r\n\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: this.props.Login.inputParam.methodUrl,\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: inputData, selectedId,\r\n                operation: this.props.Login.operation, saveType, formRef,dataState\r\n            }\r\n\r\n            //console.log(\"input param:\", inputParam);\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                        operation: this.props.Login.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n               this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n       \r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential,\r\n    fetchRecord\r\n})(injectIntl(Type3Component));"]},"metadata":{},"sourceType":"module"}