{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport { clone } from '@progress/kendo-react-common';\nimport * as React from 'react';\nimport { useSchedulerFieldsContext, useSchedulerViewSelectedItemsContext } from '../../context';\nimport { useControlledState } from '../../hooks/useControlledState';\nimport { DATA_ACTION } from '../../Scheduler';\nimport { getField, setField, slotDive } from '../../utils';\n/**\n * Represents the available `action` types for the `SchedulerItemResizeItemAction` objects.\n *\n * The available types are:\n * - `RESIZE_ITEM_SET`\n * - `RESIZE_ITEM_START`\n * - `RESIZE_ITEM_START_DRAG`\n * - `RESIZE_ITEM_START_DRAG_SELECTED`\n * - `RESIZE_ITEM_END_DRAG`\n * - `RESIZE_ITEM_END_DRAG_SELECTED`\n * - `RESIZE_ITEM_COMPLETE`\n * - `RESIZE_ITEM_COMPLETE_OCCURRENCE`\n * - `RESIZE_ITEM_COMPLETE_SERIES`\n * - `RESIZE_ITEM_RESET`\n */\n\nexport var RESIZE_ITEM_ACTION;\n\n(function (RESIZE_ITEM_ACTION) {\n  RESIZE_ITEM_ACTION[\"set\"] = \"RESIZE_ITEM_SET\";\n  RESIZE_ITEM_ACTION[\"start\"] = \"RESIZE_ITEM_START\";\n  RESIZE_ITEM_ACTION[\"startDrag\"] = \"RESIZE_ITEM_START_DRAG\";\n  RESIZE_ITEM_ACTION[\"startDragSelected\"] = \"RESIZE_ITEM_START_DRAG_SELECTED\";\n  RESIZE_ITEM_ACTION[\"endDrag\"] = \"RESIZE_ITEM_END_DRAG\";\n  RESIZE_ITEM_ACTION[\"endDragSelected\"] = \"RESIZE_ITEM_END_DRAG_SELECTED\";\n  RESIZE_ITEM_ACTION[\"complete\"] = \"RESIZE_ITEM_COMPLETE\";\n  RESIZE_ITEM_ACTION[\"completeOccurrence\"] = \"RESIZE_ITEM_COMPLETE_OCCURRENCE\";\n  RESIZE_ITEM_ACTION[\"completeSeries\"] = \"RESIZE_ITEM_COMPLETE_SERIES\";\n  RESIZE_ITEM_ACTION[\"reset\"] = \"RESIZE_ITEM_RESET\";\n})(RESIZE_ITEM_ACTION || (RESIZE_ITEM_ACTION = {}));\n\n;\n/** @hidden */\n\nexport var useResizeItem = function (config, state) {\n  var oldSlot = React.useRef(null);\n\n  var _a = useControlledState.apply(void 0, state),\n      resizeItem = _a[0],\n      setResizeItem = _a[1];\n\n  var selectedItems = useSchedulerViewSelectedItemsContext()[0];\n  var fields = useSchedulerFieldsContext();\n\n  var handleDragItemAction = function (action, event) {\n    var newResizeItem = resizeItem;\n\n    switch (action.type) {\n      case RESIZE_ITEM_ACTION.set:\n        newResizeItem = action.payload;\n        break;\n\n      case RESIZE_ITEM_ACTION.reset:\n        newResizeItem = null;\n        break;\n\n      case RESIZE_ITEM_ACTION.start:\n        {\n          event.stopPropagation();\n          var clientX = action.payload.x;\n          var clientY = action.payload.y;\n          var slot = slotDive(clientX, clientY, 7);\n\n          if (!slot) {\n            return;\n          }\n\n          if (slot === oldSlot.current) {\n            return;\n          }\n\n          var slotStart = slot.getAttribute('data-slot-start');\n          var newStart = new Date(Number(slotStart));\n          var dataItem = clone(config.dataItem);\n\n          if (newStart >= getField(dataItem, fields.end)) {\n            return;\n          }\n\n          setField(dataItem, fields.start, newStart);\n          oldSlot.current = slot;\n          newResizeItem = dataItem;\n          break;\n        }\n\n      case RESIZE_ITEM_ACTION.startDragSelected:\n        {\n          event.stopPropagation();\n          var clientX = action.payload.x;\n          var clientY = action.payload.y;\n          var dataItem = clone(config.dataItem);\n          var slot = slotDive(clientX, clientY, 7);\n\n          if (!slot) {\n            return;\n          }\n\n          if (slot === oldSlot.current) {\n            return;\n          }\n\n          var slotStart = slot.getAttribute('data-slot-start');\n          var itemStart = new Date(getField(dataItem, fields.start));\n          var newStart = new Date(Number(slotStart));\n          var distance_1 = newStart.getTime() - itemStart.getTime();\n          var unreachable_1 = false;\n          var newResizeItems = selectedItems.map(function (si) {\n            if (!si.current) {\n              return null;\n            }\n\n            var selectedDataItem = clone(si.current.props.dataItem);\n            var selectedStart = new Date(si.current.props.start.getTime() + distance_1);\n\n            if (selectedStart >= getField(selectedDataItem, fields.end)) {\n              unreachable_1 = true;\n              return;\n            }\n\n            setField(selectedDataItem, fields.start, selectedStart);\n            return selectedDataItem;\n          }).filter(Boolean);\n\n          if (!unreachable_1) {\n            newResizeItem = __spreadArray([], newResizeItems, true);\n          }\n\n          break;\n        }\n\n      case RESIZE_ITEM_ACTION.startDrag:\n        {\n          var clientX = action.payload.x;\n          var clientY = action.payload.y;\n          var slot = slotDive(clientX, clientY, 7);\n\n          if (!slot) {\n            return;\n          }\n\n          if (slot === oldSlot.current) {\n            return;\n          }\n\n          var slotStart = slot.getAttribute('data-slot-start');\n          var newStart = new Date(Number(slotStart));\n          var dataItem = clone(config.dataItem);\n\n          if (newStart >= dataItem.end) {\n            return;\n          }\n\n          setField(dataItem, fields.start, newStart);\n          oldSlot.current = slot;\n          newResizeItem = dataItem;\n          break;\n        }\n\n      case RESIZE_ITEM_ACTION.endDrag:\n        {\n          var clientX = action.payload.x;\n          var clientY = action.payload.y;\n          var slot = slotDive(clientX, clientY, 7);\n\n          if (!slot) {\n            return;\n          }\n\n          if (slot === oldSlot.current) {\n            return;\n          }\n\n          var slotEnd = slot.getAttribute('data-slot-end');\n          var newEnd = new Date(Number(slotEnd));\n          var dataItem = clone(config.dataItem);\n\n          if (newEnd <= dataItem.start) {\n            return;\n          }\n\n          setField(dataItem, fields.end, newEnd);\n          oldSlot.current = slot;\n          newResizeItem = dataItem;\n          break;\n        }\n\n      case RESIZE_ITEM_ACTION.endDragSelected:\n        {\n          event.stopPropagation();\n          var clientX = action.payload.x;\n          var clientY = action.payload.y;\n          var dataItem = clone(config.dataItem);\n          var slot = slotDive(clientX, clientY, 7);\n\n          if (!slot) {\n            return;\n          }\n\n          if (slot === oldSlot.current) {\n            return;\n          }\n\n          var slotEnd = slot.getAttribute('data-slot-start');\n          var itemEnd = new Date(getField(dataItem, fields.end));\n          var newEnd = new Date(Number(slotEnd));\n          var distance_2 = newEnd.getTime() - itemEnd.getTime();\n          var unreachable_2;\n          var newResizeItems = selectedItems.map(function (si) {\n            if (!si.current) {\n              return null;\n            }\n\n            var selectedDataItem = clone(si.current.props.dataItem);\n            var selectedEnd = new Date(si.current.props.end.getTime() + distance_2);\n\n            if (selectedEnd <= getField(selectedDataItem, fields.start)) {\n              unreachable_2 = true;\n              return;\n            }\n\n            setField(selectedDataItem, fields.end, selectedEnd);\n            return selectedDataItem;\n          }).filter(Boolean);\n\n          if (!unreachable_2) {\n            newResizeItem = __spreadArray([], newResizeItems, true);\n          }\n\n          break;\n        }\n\n      case RESIZE_ITEM_ACTION.complete:\n        {\n          newResizeItem = null;\n\n          if (config.onDataAction && resizeItem) {\n            config.onDataAction.call(undefined, {\n              type: DATA_ACTION.update,\n              series: false,\n              dataItem: resizeItem\n            });\n          }\n\n          break;\n        }\n\n      case RESIZE_ITEM_ACTION.completeOccurrence:\n        {\n          newResizeItem = null;\n\n          if (config.onDataAction && resizeItem) {\n            config.onDataAction.call(undefined, {\n              type: DATA_ACTION.update,\n              series: false,\n              dataItem: resizeItem\n            });\n          }\n\n          break;\n        }\n\n      case RESIZE_ITEM_ACTION.completeSeries:\n        {\n          newResizeItem = null;\n          var newDataItem = void 0;\n\n          if (Array.isArray(resizeItem)) {\n            newDataItem = resizeItem.map(function (item) {\n              var newItem = clone(item);\n              setField(newItem, fields.start, getField(item, fields.start));\n              setField(newItem, fields.end, getField(item, fields.end));\n              return newItem;\n            });\n          } else {\n            var newItem = clone(resizeItem);\n            setField(newItem, fields.start, getField(resizeItem, fields.start));\n            setField(newItem, fields.end, getField(resizeItem, fields.end));\n            newDataItem = newItem;\n          }\n\n          if (config.onDataAction && newDataItem) {\n            config.onDataAction.call(undefined, {\n              type: DATA_ACTION.update,\n              series: true,\n              dataItem: newDataItem\n            });\n          }\n\n          break;\n        }\n\n      default:\n        newResizeItem = null;\n        break;\n    }\n\n    setResizeItem(newResizeItem);\n  };\n\n  return [resizeItem, setResizeItem, handleDragItemAction];\n};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/node_modules/@progress/kendo-react-scheduler/dist/es/items/hooks/use-resize-item.js"],"names":["__spreadArray","to","from","pack","arguments","length","i","l","ar","Array","prototype","slice","call","concat","clone","React","useSchedulerFieldsContext","useSchedulerViewSelectedItemsContext","useControlledState","DATA_ACTION","getField","setField","slotDive","RESIZE_ITEM_ACTION","useResizeItem","config","state","oldSlot","useRef","_a","apply","resizeItem","setResizeItem","selectedItems","fields","handleDragItemAction","action","event","newResizeItem","type","set","payload","reset","start","stopPropagation","clientX","x","clientY","y","slot","current","slotStart","getAttribute","newStart","Date","Number","dataItem","end","startDragSelected","itemStart","distance_1","getTime","unreachable_1","newResizeItems","map","si","selectedDataItem","props","selectedStart","filter","Boolean","startDrag","endDrag","slotEnd","newEnd","endDragSelected","itemEnd","distance_2","unreachable_2","selectedEnd","complete","onDataAction","undefined","update","series","completeOccurrence","completeSeries","newDataItem","isArray","item","newItem"],"mappings":"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","sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { clone } from '@progress/kendo-react-common';\nimport * as React from 'react';\nimport { useSchedulerFieldsContext, useSchedulerViewSelectedItemsContext } from '../../context';\nimport { useControlledState } from '../../hooks/useControlledState';\nimport { DATA_ACTION } from '../../Scheduler';\nimport { getField, setField, slotDive } from '../../utils';\n/**\n * Represents the available `action` types for the `SchedulerItemResizeItemAction` objects.\n *\n * The available types are:\n * - `RESIZE_ITEM_SET`\n * - `RESIZE_ITEM_START`\n * - `RESIZE_ITEM_START_DRAG`\n * - `RESIZE_ITEM_START_DRAG_SELECTED`\n * - `RESIZE_ITEM_END_DRAG`\n * - `RESIZE_ITEM_END_DRAG_SELECTED`\n * - `RESIZE_ITEM_COMPLETE`\n * - `RESIZE_ITEM_COMPLETE_OCCURRENCE`\n * - `RESIZE_ITEM_COMPLETE_SERIES`\n * - `RESIZE_ITEM_RESET`\n */\nexport var RESIZE_ITEM_ACTION;\n(function (RESIZE_ITEM_ACTION) {\n    RESIZE_ITEM_ACTION[\"set\"] = \"RESIZE_ITEM_SET\";\n    RESIZE_ITEM_ACTION[\"start\"] = \"RESIZE_ITEM_START\";\n    RESIZE_ITEM_ACTION[\"startDrag\"] = \"RESIZE_ITEM_START_DRAG\";\n    RESIZE_ITEM_ACTION[\"startDragSelected\"] = \"RESIZE_ITEM_START_DRAG_SELECTED\";\n    RESIZE_ITEM_ACTION[\"endDrag\"] = \"RESIZE_ITEM_END_DRAG\";\n    RESIZE_ITEM_ACTION[\"endDragSelected\"] = \"RESIZE_ITEM_END_DRAG_SELECTED\";\n    RESIZE_ITEM_ACTION[\"complete\"] = \"RESIZE_ITEM_COMPLETE\";\n    RESIZE_ITEM_ACTION[\"completeOccurrence\"] = \"RESIZE_ITEM_COMPLETE_OCCURRENCE\";\n    RESIZE_ITEM_ACTION[\"completeSeries\"] = \"RESIZE_ITEM_COMPLETE_SERIES\";\n    RESIZE_ITEM_ACTION[\"reset\"] = \"RESIZE_ITEM_RESET\";\n})(RESIZE_ITEM_ACTION || (RESIZE_ITEM_ACTION = {}));\n;\n/** @hidden */\nexport var useResizeItem = function (config, state) {\n    var oldSlot = React.useRef(null);\n    var _a = useControlledState.apply(void 0, state), resizeItem = _a[0], setResizeItem = _a[1];\n    var selectedItems = useSchedulerViewSelectedItemsContext()[0];\n    var fields = useSchedulerFieldsContext();\n    var handleDragItemAction = function (action, event) {\n        var newResizeItem = resizeItem;\n        switch (action.type) {\n            case RESIZE_ITEM_ACTION.set:\n                newResizeItem = action.payload;\n                break;\n            case RESIZE_ITEM_ACTION.reset:\n                newResizeItem = null;\n                break;\n            case RESIZE_ITEM_ACTION.start: {\n                event.stopPropagation();\n                var clientX = action.payload.x;\n                var clientY = action.payload.y;\n                var slot = slotDive(clientX, clientY, 7);\n                if (!slot) {\n                    return;\n                }\n                if (slot === oldSlot.current) {\n                    return;\n                }\n                var slotStart = slot.getAttribute('data-slot-start');\n                var newStart = new Date(Number(slotStart));\n                var dataItem = clone(config.dataItem);\n                if (newStart >= getField(dataItem, fields.end)) {\n                    return;\n                }\n                setField(dataItem, fields.start, newStart);\n                oldSlot.current = slot;\n                newResizeItem = dataItem;\n                break;\n            }\n            case RESIZE_ITEM_ACTION.startDragSelected: {\n                event.stopPropagation();\n                var clientX = action.payload.x;\n                var clientY = action.payload.y;\n                var dataItem = clone(config.dataItem);\n                var slot = slotDive(clientX, clientY, 7);\n                if (!slot) {\n                    return;\n                }\n                if (slot === oldSlot.current) {\n                    return;\n                }\n                var slotStart = slot.getAttribute('data-slot-start');\n                var itemStart = new Date(getField(dataItem, fields.start));\n                var newStart = new Date(Number(slotStart));\n                var distance_1 = newStart.getTime() - itemStart.getTime();\n                var unreachable_1 = false;\n                var newResizeItems = selectedItems.map(function (si) {\n                    if (!si.current) {\n                        return null;\n                    }\n                    var selectedDataItem = clone(si.current.props.dataItem);\n                    var selectedStart = new Date(si.current.props.start.getTime() + distance_1);\n                    if (selectedStart >= getField(selectedDataItem, fields.end)) {\n                        unreachable_1 = true;\n                        return;\n                    }\n                    setField(selectedDataItem, fields.start, selectedStart);\n                    return selectedDataItem;\n                }).filter(Boolean);\n                if (!unreachable_1) {\n                    newResizeItem = __spreadArray([], newResizeItems, true);\n                }\n                break;\n            }\n            case RESIZE_ITEM_ACTION.startDrag: {\n                var clientX = action.payload.x;\n                var clientY = action.payload.y;\n                var slot = slotDive(clientX, clientY, 7);\n                if (!slot) {\n                    return;\n                }\n                if (slot === oldSlot.current) {\n                    return;\n                }\n                var slotStart = slot.getAttribute('data-slot-start');\n                var newStart = new Date(Number(slotStart));\n                var dataItem = clone(config.dataItem);\n                if (newStart >= dataItem.end) {\n                    return;\n                }\n                setField(dataItem, fields.start, newStart);\n                oldSlot.current = slot;\n                newResizeItem = dataItem;\n                break;\n            }\n            case RESIZE_ITEM_ACTION.endDrag: {\n                var clientX = action.payload.x;\n                var clientY = action.payload.y;\n                var slot = slotDive(clientX, clientY, 7);\n                if (!slot) {\n                    return;\n                }\n                if (slot === oldSlot.current) {\n                    return;\n                }\n                var slotEnd = slot.getAttribute('data-slot-end');\n                var newEnd = new Date(Number(slotEnd));\n                var dataItem = clone(config.dataItem);\n                if (newEnd <= dataItem.start) {\n                    return;\n                }\n                setField(dataItem, fields.end, newEnd);\n                oldSlot.current = slot;\n                newResizeItem = dataItem;\n                break;\n            }\n            case RESIZE_ITEM_ACTION.endDragSelected: {\n                event.stopPropagation();\n                var clientX = action.payload.x;\n                var clientY = action.payload.y;\n                var dataItem = clone(config.dataItem);\n                var slot = slotDive(clientX, clientY, 7);\n                if (!slot) {\n                    return;\n                }\n                if (slot === oldSlot.current) {\n                    return;\n                }\n                var slotEnd = slot.getAttribute('data-slot-start');\n                var itemEnd = new Date(getField(dataItem, fields.end));\n                var newEnd = new Date(Number(slotEnd));\n                var distance_2 = newEnd.getTime() - itemEnd.getTime();\n                var unreachable_2;\n                var newResizeItems = selectedItems.map(function (si) {\n                    if (!si.current) {\n                        return null;\n                    }\n                    var selectedDataItem = clone(si.current.props.dataItem);\n                    var selectedEnd = new Date(si.current.props.end.getTime() + distance_2);\n                    if (selectedEnd <= getField(selectedDataItem, fields.start)) {\n                        unreachable_2 = true;\n                        return;\n                    }\n                    setField(selectedDataItem, fields.end, selectedEnd);\n                    return selectedDataItem;\n                }).filter(Boolean);\n                if (!unreachable_2) {\n                    newResizeItem = __spreadArray([], newResizeItems, true);\n                }\n                break;\n            }\n            case RESIZE_ITEM_ACTION.complete: {\n                newResizeItem = null;\n                if (config.onDataAction && resizeItem) {\n                    config.onDataAction.call(undefined, {\n                        type: DATA_ACTION.update,\n                        series: false,\n                        dataItem: resizeItem\n                    });\n                }\n                break;\n            }\n            case RESIZE_ITEM_ACTION.completeOccurrence: {\n                newResizeItem = null;\n                if (config.onDataAction && resizeItem) {\n                    config.onDataAction.call(undefined, {\n                        type: DATA_ACTION.update,\n                        series: false,\n                        dataItem: resizeItem\n                    });\n                }\n                break;\n            }\n            case RESIZE_ITEM_ACTION.completeSeries: {\n                newResizeItem = null;\n                var newDataItem = void 0;\n                if (Array.isArray(resizeItem)) {\n                    newDataItem = resizeItem.map(function (item) {\n                        var newItem = clone(item);\n                        setField(newItem, fields.start, getField(item, fields.start));\n                        setField(newItem, fields.end, getField(item, fields.end));\n                        return newItem;\n                    });\n                }\n                else {\n                    var newItem = clone(resizeItem);\n                    setField(newItem, fields.start, getField(resizeItem, fields.start));\n                    setField(newItem, fields.end, getField(resizeItem, fields.end));\n                    newDataItem = newItem;\n                }\n                if (config.onDataAction && newDataItem) {\n                    config.onDataAction.call(undefined, {\n                        type: DATA_ACTION.update,\n                        series: true,\n                        dataItem: newDataItem\n                    });\n                }\n                break;\n            }\n            default:\n                newResizeItem = null;\n                break;\n        }\n        setResizeItem(newResizeItem);\n    };\n    return [resizeItem, setResizeItem, handleDragItemAction];\n};\n"]},"metadata":{},"sourceType":"module"}