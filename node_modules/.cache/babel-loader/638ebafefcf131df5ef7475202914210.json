{"ast":null,"code":"import { ResultEntry } from '../../components/Enumeration';\nexport function numberConversion(number, rounding) {\n  return Number.parseFloat(number).toFixed(rounding);\n}\nexport function numericGrade(parameter, sfinalresult) {\n  let result = parseFloat(sfinalresult);\n  let minA = parseFloat(parameter.smina);\n  let maxA = parseFloat(parameter.smaxa);\n  let minB = parseFloat(parameter.sminb);\n  let maxB = parseFloat(parameter.smaxb);\n  let minLoD = parseFloat(parameter.sminlod);\n  let maxLoD = parseFloat(parameter.smaxlod);\n  let minLOQ = parseFloat(parameter.sminloq);\n  let maxLOQ = parseFloat(parameter.smaxloq);\n  let disregard = parseFloat(parameter.sdisregard);\n\n  if (disregard !== \"null\" && disregard > sfinalresult) {\n    return ResultEntry.RESULTSTATUS_BELOWDISREGARD;\n  }\n  /* else if (!isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n      if (result >= minLOQ && result <= maxLOQ) {\r\n          return ResultEntry.RESULTSTATUS_BQL;\r\n      }\r\n      else if (!isNaN(minLoD) && !isNaN(maxLoD)) {\r\n          if (result >= minLoD && result <= maxLoD) {\r\n              return ResultEntry.RESULTSTATUS_BDL;\r\n          }\r\n          else {\r\n              return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n          }\r\n      } else {\r\n          return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n      }\r\n  } else if (!isNaN(minLoD) && !isNaN(maxLoD)) {\r\n      if (result >= minLoD && result <= maxLoD) {\r\n          return ResultEntry.RESULTSTATUS_BDL;\r\n      }\r\n      else {\r\n          return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n      }\r\n  } */\n  else if (!isNaN(minLoD) && !isNaN(minLOQ) && !isNaN(maxLoD) && !isNaN(maxLOQ)) {\n    if (result >= minLoD && result < minLOQ) {\n      return ResultEntry.RESULTSTATUS_LLOQ;\n    } else if (result <= minLoD) {\n      return ResultEntry.RESULTSTATUS_LLOD;\n    } else if (result > maxLOQ && result <= maxLoD) {\n      return ResultEntry.RESULTSTATUS_HLOQ;\n    } else if (result > maxLOQ) {\n      return ResultEntry.RESULTSTATUS_HLOD;\n    } else {\n      //return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\n      return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\n    }\n  } else if (!isNaN(minLoD) && !isNaN(minLOQ) && isNaN(maxLOQ) && isNaN(maxLoD)) {\n    if (result >= minLoD && result <= minLOQ) {\n      return ResultEntry.RESULTSTATUS_LLOQ;\n    } else if (result < minLoD) {\n      return ResultEntry.RESULTSTATUS_LLOD;\n    } else {\n      return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\n    }\n  } else if (!isNaN(minLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ) && isNaN(maxLoD)) {\n    if (result >= minLoD && result <= minLOQ) {\n      return ResultEntry.RESULTSTATUS_LLOQ;\n    } else if (result < minLoD) {\n      return ResultEntry.RESULTSTATUS_LLOD;\n    } else if (result > maxLOQ) {\n      return ResultEntry.RESULTSTATUS_HLOD;\n    } else if (result < maxLOQ && result > maxB) {\n      return ResultEntry.RESULTSTATUS_HOOS;\n    } else {\n      return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\n    }\n  } else if (!isNaN(minLoD) && !isNaN(minLOQ) && !isNaN(maxLoD) && isNaN(maxLOQ)) {\n    if (result >= minLoD && result <= minLOQ) {\n      return ResultEntry.RESULTSTATUS_LLOQ;\n    } else if (result < minLoD) {\n      return ResultEntry.RESULTSTATUS_LLOD;\n    } else if (result > maxLoD) {\n      return ResultEntry.RESULTSTATUS_HLOD;\n    } else if (result < maxLoD && result > maxB) {\n      return ResultEntry.RESULTSTATUS_HOOS;\n    } else {\n      return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\n    }\n  } else if (!isNaN(maxLoD) && !isNaN(maxLOQ) && isNaN(minLoD) && isNaN(minLOQ)) {\n    if (result <= maxLoD && result >= maxLOQ) {\n      return ResultEntry.RESULTSTATUS_HLOQ;\n    } else if (result > maxLoD) {\n      return ResultEntry.RESULTSTATUS_HLOD;\n    } else {\n      return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\n    }\n  } else if (!isNaN(maxLoD) && !isNaN(maxLOQ) && !isNaN(minLoD) && isNaN(minLOQ)) {\n    if (result <= maxLoD && result >= maxLOQ) {\n      return ResultEntry.RESULTSTATUS_HLOQ;\n    } else if (result > maxLoD) {\n      return ResultEntry.RESULTSTATUS_HLOD;\n    } else if (result < minLoD) {\n      return ResultEntry.RESULTSTATUS_LLOD;\n    } else if (result < minLoD && result > maxB) {\n      return ResultEntry.RESULTSTATUS_HOOS;\n    } else {\n      return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\n    }\n  } else if (!isNaN(maxLoD) && !isNaN(maxLOQ) && !isNaN(minLOQ) && isNaN(minLoD)) {\n    if (result <= maxLoD && result >= maxLOQ) {\n      return ResultEntry.RESULTSTATUS_HLOQ;\n    } else if (result > maxLoD) {\n      return ResultEntry.RESULTSTATUS_HLOD;\n    } else if (result < minLOQ) {\n      return ResultEntry.RESULTSTATUS_LLOQ;\n    } else if (result > minLOQ && result < minB) {\n      //return ResultEntry.RESULTSTATUS_BLOQ\n      return ResultEntry.RESULTSTATUS_OOS;\n    } else {\n      return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\n    }\n  } else {\n    return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\n  }\n}\n/*export function findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result) {\r\n    if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        return findGrade(minB, minA, maxA, maxB, result)\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLOQ && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else {\r\n        return findGrade(minB, minA, maxA, maxB, result);\r\n    }\r\n}*/\n\nexport function findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result) {\n  if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\n    return findGrade(minB, minA, maxA, maxB, result);\n  } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < minLoD) {\n      return ResultEntry.RESULTSTATUS_LLOD;\n    } else if (result === minLoD) {\n      //return ResultEntry.RESULTSTATUS_BLOQ\n      return ResultEntry.RESULTSTATUS_OOS;\n    } else if (result > minLoD && result < minB) {\n      //return ResultEntry.RESULTSTATUS_BLOQ\n      return ResultEntry.RESULTSTATUS_OOS;\n    } else if (result === minB) {\n      return ResultEntry.RESULTSTATUS_OOT;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < minLOQ) {\n      return ResultEntry.RESULTSTATUS_LLOQ;\n    } else if (result === minLOQ) {\n      //return ResultEntry.RESULTSTATUS_BLOQ\n      return ResultEntry.RESULTSTATUS_OOS;\n    } else if (result > minLOQ && result < minB) {\n      //return ResultEntry.RESULTSTATUS_BLOQ\n      return ResultEntry.RESULTSTATUS_OOS;\n    } else if (result === minB) {\n      return ResultEntry.RESULTSTATUS_OOT;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\n    if (result < minLOQ) {\n      return ResultEntry.RESULTSTATUS_LLOQ;\n    } else if (result === minLOQ) {\n      //return ResultEntry.RESULTSTATUS_BLOQ\n      return ResultEntry.RESULTSTATUS_OOS;\n    } else if (result > minLOQ && result < minB) {\n      //return ResultEntry.RESULTSTATUS_BLOQ\n      return ResultEntry.RESULTSTATUS_OOS;\n    } else if (result === minB) {\n      return ResultEntry.RESULTSTATUS_OOT;\n    } else if (result > maxLOQ) {\n      return ResultEntry.RESULTSTATUS_HLOQ;\n    } else if (result === maxLOQ) {\n      return ResultEntry.RESULTSTATUS_HOOS;\n    } else if (result < maxLOQ && result > maxB) {\n      //return ResultEntry.RESULTSTATUS_BQL\n      return ResultEntry.RESULTSTATUS_HOOS;\n    } else if (result === maxB) {\n      return ResultEntry.RESULTSTATUS_HOOT;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result > maxLoD) {\n      return ResultEntry.RESULTSTATUS_HLOD;\n    } //  else if (result === maxLoD) {\n    //     return ResultEntry.RESULTSTATUS_BQL\n    // } \n    else if (result < maxLoD && result > maxB) {\n      //return ResultEntry.RESULTSTATUS_BQL\n      return ResultEntry.RESULTSTATUS_HOOS;\n    } // else if (result === maxB) {\n    //     return ResultEntry.RESULTSTATUS_OOT\n    // } \n    else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (!isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result > maxLoD) {\n      return ResultEntry.RESULTSTATUS_HLOD;\n    } else if (result === maxLoD) {\n      return ResultEntry.RESULTSTATUS_HLOQ;\n    } else if (result < maxLoD && result > maxB) {\n      //return ResultEntry.RESULTSTATUS_BQL\n      return ResultEntry.RESULTSTATUS_HOOS;\n    } else if (result === maxB) {\n      return ResultEntry.RESULTSTATUS_HOOT;\n    } else if (result < minLoD) {\n      return ResultEntry.RESULTSTATUS_LLOD;\n    } else if (result === minLoD) {\n      //return ResultEntry.RESULTSTATUS_BLOQ\n      return ResultEntry.RESULTSTATUS_OOS;\n    } else if (result > minLoD && result < minB) {\n      //return ResultEntry.RESULTSTATUS_BLOQ\n      return ResultEntry.RESULTSTATUS_OOS;\n    } else if (result === minB) {\n      return ResultEntry.RESULTSTATUS_OOT;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\n    if (result > maxLOQ) {\n      return ResultEntry.RESULTSTATUS_HLOQ;\n    } else if (result === maxLOQ) {\n      return ResultEntry.RESULTSTATUS_HOOS;\n    } else if (result < maxLOQ && result > maxB) {\n      //return ResultEntry.RESULTSTATUS_BQL\n      return ResultEntry.RESULTSTATUS_HOOS;\n    } else if (result === maxB) {\n      return ResultEntry.RESULTSTATUS_HOOT;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  }\n  /*else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n      if (result < minLoD) {\r\n          return ResultEntry.RESULTSTATUS_BLOD  \r\n      } else if (result === minLoD) {\r\n          return ResultEntry.RESULTSTATUS_BLOQ\r\n      } else {\r\n          return findGrade(minB, minA, maxA, maxB, result);\r\n      }\r\n  } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n      if (result < minLOQ) {\r\n          return ResultEntry.RESULTSTATUS_BLOD\r\n      } else if (result === minLOQ) {\r\n          return ResultEntry.RESULTSTATUS_BLOQ\r\n      } else {\r\n          return findGrade(minB, minA, maxA, maxB, result);\r\n      }\r\n  } \r\n  else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n      if (result > maxLoD) {\r\n          return ResultEntry.RESULTSTATUS_BDL\r\n      } else if (result === maxLoD) {\r\n          return ResultEntry.RESULTSTATUS_BQL\r\n      } else {\r\n          return findGrade(minB, minA, maxA, maxB, result);\r\n      }\r\n  }\r\n  else if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n      if (result > maxLOQ) {\r\n          return ResultEntry.RESULTSTATUS_BDL\r\n      } else if (result === maxLOQ) {\r\n          return ResultEntry.RESULTSTATUS_BQL\r\n      } else {\r\n          return findGrade(minB, minA, maxA, maxB, result);\r\n      }\r\n  } else if (!isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n      if (result < minLoD) {\r\n          return ResultEntry.RESULTSTATUS_BLOD\r\n      } else if (result >= minLoD && result <= maxLoD) {\r\n          return ResultEntry.RESULTSTATUS_BLOQ\r\n      } else {\r\n          return findGrade(minB, minA, maxA, maxB, result);\r\n      }\r\n  } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n      if (result < minLoD) {\r\n          return ResultEntry.RESULTSTATUS_BLOD\r\n      } else if (result >= minLoD && result <= minLOQ) {\r\n          return ResultEntry.RESULTSTATUS_BLOQ\r\n      } else {\r\n          return findGrade(minB, minA, maxA, maxB, result);\r\n      }\r\n  } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n      if (result < minLoD) {\r\n          return ResultEntry.RESULTSTATUS_BLOD\r\n      } else if (result >= minLoD && result <= maxLOQ) {\r\n          return ResultEntry.RESULTSTATUS_BLOQ\r\n      } else {\r\n          return findGrade(minB, minA, maxA, maxB, result);\r\n      }\r\n  } else if (isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n      if (result < maxLoD) {\r\n          return ResultEntry.RESULTSTATUS_BLOD\r\n      } else if (result >= maxLoD && result <= minLOQ) {\r\n          return ResultEntry.RESULTSTATUS_BLOQ\r\n      } else {\r\n          return findGrade(minB, minA, maxA, maxB, result);\r\n      }\r\n  } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n      if (result < maxLoD) {\r\n          return ResultEntry.RESULTSTATUS_BLOD\r\n      } else if (result >= maxLoD && result <= maxLOQ) {\r\n          return ResultEntry.RESULTSTATUS_BLOQ\r\n      } else {\r\n          return findGrade(minB, minA, maxA, maxB, result);\r\n      }\r\n  } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n      if (result < minLOQ) {\r\n          return ResultEntry.RESULTSTATUS_BLOD\r\n      } else if (result >= minLOQ && result <= maxLOQ) {\r\n          return ResultEntry.RESULTSTATUS_BLOQ\r\n      } else {\r\n          return findGrade(minB, minA, maxA, maxB, result);\r\n      }\r\n  } else if (!isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n      if (result < minLoD) {\r\n          return ResultEntry.RESULTSTATUS_BLOD\r\n      } else if (result >= minLoD && result <= minLOQ) {\r\n          return ResultEntry.RESULTSTATUS_BLOQ\r\n      } else {\r\n          return findGrade(minB, minA, maxA, maxB, result);\r\n      }\r\n  } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n      if (result < maxLoD) {\r\n          return ResultEntry.RESULTSTATUS_BLOD\r\n      } else if (result >= maxLoD && result <= minLOQ) {\r\n          return ResultEntry.RESULTSTATUS_BLOQ\r\n      } else {\r\n          return findGrade(minB, minA, maxA, maxB, result);\r\n      }\r\n  } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n      if (result < minLoD) {\r\n          return ResultEntry.RESULTSTATUS_BLOD\r\n      } else if (result >= minLoD && result <= maxLOQ) {\r\n          return ResultEntry.RESULTSTATUS_BLOQ\r\n      } else {\r\n          return findGrade(minB, minA, maxA, maxB, result);\r\n      }\r\n  } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n      if (result < maxLoD) {\r\n          return ResultEntry.RESULTSTATUS_BLOD\r\n      } else if (result >= maxLoD && result <= maxLOQ) {\r\n          return ResultEntry.RESULTSTATUS_BLOQ\r\n      } else {\r\n          return findGrade(minB, minA, maxA, maxB, result);\r\n      }\r\n  } */\n  else {\n    return findGrade(minB, minA, maxA, maxB, result);\n  }\n}\nexport function findGrade(minB, minA, maxA, maxB, result) {\n  if (isNaN(minA) && isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\n    //ALPD-4502 - when spec limits are not provided in test group\n    return ResultEntry.RESULTSTATUS_PASS;\n  } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minB && result <= maxB) return ResultEntry.RESULTSTATUS_PASS; // else if (result < minB || maxB < result)\n    //     return ResultEntry.RESULTSTATUS_OOS;\n    else if (result < minB) return ResultEntry.RESULTSTATUS_OOS;else if (maxB < result) return ResultEntry.RESULTSTATUS_HOOS;else return ResultEntry.RESULTSTATUS_PASS;\n  } else if (!isNaN(minA) && isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\n    if (result >= minA && result <= maxA) return ResultEntry.RESULTSTATUS_PASS;else return ResultEntry.RESULTSTATUS_OOS;\n  } else if (isNaN(minA) && isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\n    if (result <= maxB) {\n      return ResultEntry.RESULTSTATUS_PASS;\n    } else if (result > maxB) {\n      // return ResultEntry.RESULTSTATUS_OOS;\n      return ResultEntry.RESULTSTATUS_HOOS;\n    }\n  } else if (isNaN(minA) && isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\n    if (result <= maxA) {\n      return ResultEntry.RESULTSTATUS_PASS;\n    } else if (result > maxA) {\n      // return ResultEntry.RESULTSTATUS_OOS;\n      return ResultEntry.RESULTSTATUS_HOOS;\n    }\n  } else if (isNaN(minA) && isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\n    if (result > maxA && result <= maxB) return ResultEntry.RESULTSTATUS_OOS;else if (result > maxB) // return ResultEntry.RESULTSTATUS_OOT;\n      return ResultEntry.RESULTSTATUS_HOOT;else if (result < maxA) return ResultEntry.RESULTSTATUS_PASS;\n  } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\n    if (result >= minB) return ResultEntry.RESULTSTATUS_PASS;else if (result < minB) return ResultEntry.RESULTSTATUS_OOS;\n  } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minA && result <= maxB) return ResultEntry.RESULTSTATUS_PASS;else if (result < minA) return ResultEntry.RESULTSTATUS_OOS;else if (result > maxB) // return ResultEntry.RESULTSTATUS_OOS;\n      return ResultEntry.RESULTSTATUS_HOOS;\n  } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minB) return ResultEntry.RESULTSTATUS_PASS;else if (result > maxA && result <= maxB) return ResultEntry.RESULTSTATUS_OOS;else if (result > maxB) // return ResultEntry.RESULTSTATUS_OOT;\n      return ResultEntry.RESULTSTATUS_HOOT;else if (result < minB) return ResultEntry.RESULTSTATUS_OOT;\n  } else if (!isNaN(minA) && isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\n    if (result >= minA) return ResultEntry.RESULTSTATUS_PASS;else if (result < minA) return ResultEntry.RESULTSTATUS_OOS;\n  } else if (!isNaN(minA) && isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minA && result <= maxA) return ResultEntry.RESULTSTATUS_PASS;else if (result >= minA && result <= maxB) return ResultEntry.RESULTSTATUS_OOS;else return ResultEntry.RESULTSTATUS_OOT;\n  } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\n    if (result >= minB && result <= maxA) return ResultEntry.RESULTSTATUS_PASS;else if (result < minB) return ResultEntry.RESULTSTATUS_OOS;else if (result > maxA) // return ResultEntry.RESULTSTATUS_OOS;\n      return ResultEntry.RESULTSTATUS_HOOS;\n  } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\n    if (result >= minB && result <= maxA) return ResultEntry.RESULTSTATUS_PASS;else if (result > maxA && result <= maxB) return ResultEntry.RESULTSTATUS_OOS; // else if (result > maxB || result < minB)\n    //     return ResultEntry.RESULTSTATUS_OOS;\n    else if (result > maxB) return ResultEntry.RESULTSTATUS_HOOS;else if (result < minB) return ResultEntry.RESULTSTATUS_OOS;\n  } else if (!isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minB && result < minA) return ResultEntry.RESULTSTATUS_OOS;else if (result < minB) return ResultEntry.RESULTSTATUS_OOS;else if (result >= minA) return ResultEntry.RESULTSTATUS_PASS;\n  } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minB && result < minA) return ResultEntry.RESULTSTATUS_OOS;else if (result >= minA && result <= maxB) return ResultEntry.RESULTSTATUS_PASS; // else if (result > maxB || result < minB)\n    //     return ResultEntry.RESULTSTATUS_OOT;\n    else if (result > maxB) return ResultEntry.RESULTSTATUS_HOOT;else if (result < minB) return ResultEntry.RESULTSTATUS_OOT;\n  } else if (!isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\n    if (result >= minB && result < minA) return ResultEntry.RESULTSTATUS_OOS;else if (result >= minA && result <= maxA) return ResultEntry.RESULTSTATUS_PASS;else if (result < minB) return ResultEntry.RESULTSTATUS_OOT;else if (result > maxA) //return ResultEntry.RESULTSTATUS_OOT;\n      return ResultEntry.RESULTSTATUS_HOOT;\n  } else if (!isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minA && result <= maxA) return ResultEntry.RESULTSTATUS_PASS; // else if (result >= minB && result <= maxB)\n    //     return ResultEntry.RESULTSTATUS_OOT;\n    else if (result >= minB && result < minA) return ResultEntry.RESULTSTATUS_OOT;else if (result <= maxB && result > maxA) return ResultEntry.RESULTSTATUS_HOOT; // else if ((result < minB || maxB < result) && (minB !== 0 && maxB !== 0))\n    //     return ResultEntry.RESULTSTATUS_OOS;\n    else if (result < minB && minB !== 0) return ResultEntry.RESULTSTATUS_OOS;else if (maxB < result && maxB !== 0) return ResultEntry.RESULTSTATUS_HOOS;else return ResultEntry.RESULTSTATUS_PASS;\n  }\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntryValidation.jsx"],"names":["ResultEntry","numberConversion","number","rounding","Number","parseFloat","toFixed","numericGrade","parameter","sfinalresult","result","minA","smina","maxA","smaxa","minB","sminb","maxB","smaxb","minLoD","sminlod","maxLoD","smaxlod","minLOQ","sminloq","maxLOQ","smaxloq","disregard","sdisregard","RESULTSTATUS_BELOWDISREGARD","isNaN","RESULTSTATUS_LLOQ","RESULTSTATUS_LLOD","RESULTSTATUS_HLOQ","RESULTSTATUS_HLOD","findLOQandLOD","RESULTSTATUS_HOOS","RESULTSTATUS_OOS","findGrade","RESULTSTATUS_OOT","RESULTSTATUS_HOOT","RESULTSTATUS_PASS"],"mappings":"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","sourcesContent":["import { ResultEntry } from '../../components/Enumeration';\r\n\r\nexport function numberConversion(number, rounding) {\r\n    return Number.parseFloat(number).toFixed(rounding);\r\n}\r\n\r\nexport function numericGrade(parameter, sfinalresult) {\r\n    let result = parseFloat(sfinalresult);\r\n    let minA = parseFloat(parameter.smina);\r\n    let maxA = parseFloat(parameter.smaxa);\r\n    let minB = parseFloat(parameter.sminb);\r\n    let maxB = parseFloat(parameter.smaxb);\r\n    let minLoD = parseFloat(parameter.sminlod);\r\n    let maxLoD = parseFloat(parameter.smaxlod);\r\n    let minLOQ = parseFloat(parameter.sminloq);\r\n    let maxLOQ = parseFloat(parameter.smaxloq);\r\n    let disregard = parseFloat(parameter.sdisregard);\r\n    if (disregard !== \"null\" && disregard > sfinalresult) {\r\n        return ResultEntry.RESULTSTATUS_BELOWDISREGARD;\r\n    }\r\n    /* else if (!isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result >= minLOQ && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BQL;\r\n        }\r\n        else if (!isNaN(minLoD) && !isNaN(maxLoD)) {\r\n            if (result >= minLoD && result <= maxLoD) {\r\n                return ResultEntry.RESULTSTATUS_BDL;\r\n            }\r\n            else {\r\n                return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n            }\r\n        } else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD)) {\r\n        if (result >= minLoD && result <= maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BDL;\r\n        }\r\n        else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n        }\r\n    } */\r\n    else if (!isNaN(minLoD) && !isNaN(minLOQ) && !isNaN(maxLoD) && !isNaN(maxLOQ)) {\r\n        if (result >= minLoD && result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_LLOQ;\r\n        }\r\n        else if(result <= minLoD)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_LLOD;\r\n        }\r\n\r\n        else if (result > maxLOQ && result <= maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_HLOQ;\r\n        }\r\n        else if(result > maxLOQ)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_HLOD;\r\n        }\r\n\r\n        else {\r\n            //return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\r\n        }\r\n    } \r\n\r\n    else if (!isNaN(minLoD) && !isNaN(minLOQ) && isNaN(maxLOQ) && isNaN(maxLoD)) {\r\n        if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_LLOQ;\r\n        }\r\n        else if(result < minLoD)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_LLOD;\r\n        }\r\n        else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\r\n        }\r\n    } \r\n\r\n\r\n    else if (!isNaN(minLoD) && !isNaN(minLOQ)  && !isNaN(maxLOQ) && isNaN(maxLoD))  {\r\n        if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_LLOQ;\r\n        }\r\n        else if(result < minLoD)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_LLOD;\r\n        }\r\n        else if(result > maxLOQ)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_HLOD;\r\n        }\r\n        else if(result < maxLOQ && result > maxB)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_HOOS;\r\n        }\r\n        else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\r\n        }\r\n    } \r\n\r\n\r\n    else if (!isNaN(minLoD) && !isNaN(minLOQ)  && !isNaN(maxLoD) && isNaN(maxLOQ) )  {\r\n        if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_LLOQ;\r\n        }\r\n        else if(result < minLoD)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_LLOD;\r\n        }\r\n        else if(result > maxLoD)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_HLOD;\r\n        }\r\n        else if(result < maxLoD && result > maxB)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_HOOS;\r\n        }\r\n        else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\r\n        }\r\n    }\r\n\r\n\r\n    else if (!isNaN(maxLoD) && !isNaN(maxLOQ)  && isNaN(minLoD)  && isNaN (minLOQ) ) {\r\n        if (result <= maxLoD && result >= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_HLOQ;\r\n        }\r\n        else if(result > maxLoD)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_HLOD;\r\n        }\r\n        else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\r\n        }\r\n    } \r\n\r\n\r\n    else if (!isNaN(maxLoD) && !isNaN(maxLOQ)  && !isNaN(minLoD)  && isNaN (minLOQ) ) {\r\n        if (result <= maxLoD && result >= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_HLOQ;\r\n        }\r\n        else if(result > maxLoD)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_HLOD;\r\n        }\r\n        else if(result < minLoD)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_LLOD;\r\n        }\r\n        else if(result < minLoD && result > maxB)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_HOOS;\r\n        }\r\n        else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\r\n        }\r\n    }\r\n    \r\n\r\n    else if (!isNaN(maxLoD) && !isNaN(maxLOQ) && !isNaN(minLOQ) && isNaN(minLoD)) {\r\n        if (result <= maxLoD && result >= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_HLOQ;\r\n        }\r\n        else if(result > maxLoD)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_HLOD;\r\n        }\r\n\r\n        else if(result < minLOQ)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_LLOQ;\r\n        }\r\n        else if (result > minLOQ && result < minB ) {\r\n            //return ResultEntry.RESULTSTATUS_BLOQ\r\n            return ResultEntry.RESULTSTATUS_OOS\r\n        } \r\n        else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\r\n        }\r\n    } \r\n\r\n\r\n\r\n\r\n    \r\n    else {\r\n        return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\r\n    }\r\n}\r\n\r\n\r\n/*export function findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result) {\r\n    if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        return findGrade(minB, minA, maxA, maxB, result)\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLOQ && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else {\r\n        return findGrade(minB, minA, maxA, maxB, result);\r\n    }\r\n}*/\r\n\r\nexport function findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result) {\r\n    if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        return findGrade(minB, minA, maxA, maxB, result)\r\n    } \r\n\r\n\r\n    else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_LLOD  \r\n        } else if (result === minLoD) {\r\n            //return ResultEntry.RESULTSTATUS_BLOQ\r\n            return ResultEntry.RESULTSTATUS_OOS\r\n        } \r\n        else if (result > minLoD && result < minB ) {\r\n            //return ResultEntry.RESULTSTATUS_BLOQ\r\n            return ResultEntry.RESULTSTATUS_OOS\r\n        } \r\n        else if (result === minB) {\r\n            return ResultEntry.RESULTSTATUS_OOT\r\n        } \r\n        else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } \r\n\r\n\r\n    else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_LLOQ  \r\n        } else if (result === minLOQ) {\r\n            //return ResultEntry.RESULTSTATUS_BLOQ\r\n            return ResultEntry.RESULTSTATUS_OOS\r\n        } \r\n        else if (result > minLOQ && result < minB ) {\r\n            //return ResultEntry.RESULTSTATUS_BLOQ\r\n            return ResultEntry.RESULTSTATUS_OOS\r\n        } \r\n        else if (result === minB) {\r\n            return ResultEntry.RESULTSTATUS_OOT\r\n        } \r\n        else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } \r\n\r\n\r\n    else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_LLOQ  \r\n        } else if (result === minLOQ) {\r\n            //return ResultEntry.RESULTSTATUS_BLOQ\r\n            return ResultEntry.RESULTSTATUS_OOS\r\n        } \r\n        else if (result > minLOQ && result < minB ) {\r\n            //return ResultEntry.RESULTSTATUS_BLOQ\r\n            return ResultEntry.RESULTSTATUS_OOS\r\n        } \r\n        else if (result === minB) {\r\n            return ResultEntry.RESULTSTATUS_OOT\r\n        } \r\n        else if (result > maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_HLOQ  \r\n        } else if (result === maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_HOOS\r\n        } \r\n        else if (result < maxLOQ && result > maxB ) {\r\n            //return ResultEntry.RESULTSTATUS_BQL\r\n            return ResultEntry.RESULTSTATUS_HOOS\r\n        } \r\n        else if (result === maxB) {\r\n            return ResultEntry.RESULTSTATUS_HOOT\r\n        } \r\n        else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    }\r\n\r\n    else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result > maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_HLOD  \r\n        }\r\n        //  else if (result === maxLoD) {\r\n        //     return ResultEntry.RESULTSTATUS_BQL\r\n        // } \r\n        else if (result < maxLoD && result > maxB ) {\r\n            //return ResultEntry.RESULTSTATUS_BQL\r\n            return ResultEntry.RESULTSTATUS_HOOS\r\n        } \r\n        // else if (result === maxB) {\r\n        //     return ResultEntry.RESULTSTATUS_OOT\r\n        // } \r\n        else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } \r\n    else if (!isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result > maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_HLOD  \r\n        } else if (result === maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_HLOQ\r\n        } \r\n        else if (result < maxLoD && result > maxB ) {\r\n            //return ResultEntry.RESULTSTATUS_BQL\r\n            return ResultEntry.RESULTSTATUS_HOOS\r\n        } \r\n        else if (result === maxB) {\r\n            return ResultEntry.RESULTSTATUS_HOOT\r\n        } \r\n        else if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_LLOD  \r\n        } else if (result === minLoD) {\r\n            //return ResultEntry.RESULTSTATUS_BLOQ\r\n            return ResultEntry.RESULTSTATUS_OOS\r\n        } \r\n        else if (result > minLoD && result < minB ) {\r\n            //return ResultEntry.RESULTSTATUS_BLOQ\r\n            return ResultEntry.RESULTSTATUS_OOS\r\n        } \r\n        else if (result === minB) {\r\n            return ResultEntry.RESULTSTATUS_OOT\r\n        }\r\n        else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } \r\n\r\n\r\n\r\n    else if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result > maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_HLOQ  \r\n        } else if (result === maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_HOOS\r\n        } \r\n        else if (result < maxLOQ && result > maxB ) {\r\n            //return ResultEntry.RESULTSTATUS_BQL\r\n            return ResultEntry.RESULTSTATUS_HOOS\r\n        } \r\n        else if (result === maxB) {\r\n            return ResultEntry.RESULTSTATUS_HOOT\r\n        } \r\n        else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    }\r\n\r\n\r\n    /*else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD  \r\n        } else if (result === minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } \r\n    else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result > maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BDL\r\n        } else if (result === maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BQL\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    }\r\n    else if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result > maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BDL\r\n        } else if (result === maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BQL\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLOQ && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } */else {\r\n        return findGrade(minB, minA, maxA, maxB, result);\r\n    }\r\n}\r\n\r\nexport function findGrade(minB, minA, maxA, maxB, result) {\r\n    if (isNaN(minA) && isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\r\n\t\t //ALPD-4502 - when spec limits are not provided in test group\r\n        return ResultEntry.RESULTSTATUS_PASS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minB && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        // else if (result < minB || maxB < result)\r\n        //     return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result < minB)\r\n        return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (maxB < result)\r\n        return ResultEntry.RESULTSTATUS_HOOS;\r\n        else\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n    } else if (!isNaN(minA) && isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minA && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (isNaN(minA) && isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result <= maxB) {\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        } else if (result > maxB) {\r\n            // return ResultEntry.RESULTSTATUS_OOS;\r\n            return ResultEntry.RESULTSTATUS_HOOS;\r\n        }\r\n    } else if (isNaN(minA) && isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result <= maxA) {\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        } else if (result > maxA) {\r\n            // return ResultEntry.RESULTSTATUS_OOS;\r\n            return ResultEntry.RESULTSTATUS_HOOS;\r\n        }\r\n    } else if (isNaN(minA) && isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result > maxA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxB)\r\n            // return ResultEntry.RESULTSTATUS_OOT;\r\n            return ResultEntry.RESULTSTATUS_HOOT;\r\n        else if (result < maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minB)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxB)\r\n            // return ResultEntry.RESULTSTATUS_OOS;\r\n            return ResultEntry.RESULTSTATUS_HOOS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minB)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result > maxA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxB)\r\n            // return ResultEntry.RESULTSTATUS_OOT;\r\n            return ResultEntry.RESULTSTATUS_HOOT;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n    } else if (!isNaN(minA) && isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (!isNaN(minA) && isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minA && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result >= minA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n    } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minB && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxA)\r\n            // return ResultEntry.RESULTSTATUS_OOS;\r\n            return ResultEntry.RESULTSTATUS_HOOS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minB && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result > maxA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        // else if (result > maxB || result < minB)\r\n        //     return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxB)\r\n            return ResultEntry.RESULTSTATUS_HOOS;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (!isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minB && result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result >= minA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minB && result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result >= minA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        // else if (result > maxB || result < minB)\r\n        //     return ResultEntry.RESULTSTATUS_OOT;\r\n        else if (result > maxB)\r\n        return ResultEntry.RESULTSTATUS_HOOT;\r\n        else if (result < minB)\r\n        return ResultEntry.RESULTSTATUS_OOT;\r\n    } else if (!isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minB && result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result >= minA && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n        else if (result > maxA)\r\n            //return ResultEntry.RESULTSTATUS_OOT;\r\n            return ResultEntry.RESULTSTATUS_HOOT;\r\n    } else if (!isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minA && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        // else if (result >= minB && result <= maxB)\r\n        //     return ResultEntry.RESULTSTATUS_OOT;\r\n        else if (result >= minB && result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n            else if (result <= maxB && result>maxA)\r\n            return ResultEntry.RESULTSTATUS_HOOT;\r\n        // else if ((result < minB || maxB < result) && (minB !== 0 && maxB !== 0))\r\n        //     return ResultEntry.RESULTSTATUS_OOS;\r\n        else if ((result < minB) && (minB !== 0))\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n         else if ((maxB < result) && (maxB !== 0))\r\n             return ResultEntry.RESULTSTATUS_HOOS;\r\n        else\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}