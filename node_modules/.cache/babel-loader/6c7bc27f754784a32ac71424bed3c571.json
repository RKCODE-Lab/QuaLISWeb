{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\QuaLISWeb\\\\src\\\\pages\\\\worklist\\\\WorkList.jsx\";\nimport React, { Component } from \"react\";\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck, faTrashAlt, faBolt } from \"@fortawesome/free-solid-svg-icons\";\nimport WorklistPreparationFilter from './WorklistPreparationFilter';\nimport { rearrangeDateFormat, convertDateValuetoString } from '../../components/CommonScript';\nimport { injectIntl } from \"react-intl\";\nimport Esign from \"../audittrail/Esign\";\nimport AddWorklistSection from '../worklist/AddWorklistSection';\nimport AddWorklistSample from '../worklist/AddWorklistSample';\nimport CustomTab from \"../../components/custom-tabs/custom-tabs.component\";\nimport WorklistHistoryTab from \"./WorklistHistoryTab\";\nimport WorklistSampleTab from \"./WorklistSampleTab\";\nimport { designProperties, transactionStatus, REPORTTYPE, SUBSAMPLEAUDITMULTILINGUALFIELDS, designComponents } from '../../components/Enumeration';\nimport SpecificationInfo from '../testgroup/SpecificationInfo'; //import { ReactComponent as Closure } from '../../assets/image/prepared-worklist.svg';\n\nimport { ReactComponent as Closure } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/prepared.svg\";\nimport { ReactComponent as ReportIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/report-Icon.svg\"; //import { ReactComponent as ReportIcon } from '../../assets/image/report-svgrepo-com.svg';\n\nimport { ReactComponent as Report } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/Report.svg\";\nimport { ReactComponent as SaveIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/save_icon.svg\";\nimport CustomPopover from '../../components/customPopover';\nimport ModalShow from '../../components/ModalShow';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSectionAndTest, getWorklistDetail, OpenDate, CloseDate, viewAttachment, getInstrumentCombo, getWorklistSample, getRegTypeTestWise, getRegTypeWorklist, getSectionbaseTest, onWorklistApproveClick, getWorklistDetailFilter, getEditSectionAndTest, createWorklistCreation, filterColumnData, getConfigVersionTestWise, ViewSampleDetails, getWorklisthistoryAction, reportWorklist, getRegSubTypeWise, insertWorklist, generateControlBasedReport, validateEsignforWorklist, getWorklistFilterDetails } from \"../../actions\";\nimport ListMaster from \"../../components/list-master/list-master.component\";\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\nimport SlideOutModal from \"../../components/slide-out-modal/SlideOutModal\";\nimport { showEsign, getControlMap, constructOptionList } from \"../../components/CommonScript\";\nimport { ContentPanel, MediaLabel } from \"../../components/App.styles\";\nimport { process } from \"@progress/kendo-data-query\";\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\nimport BreadcrumbComponent from \"../../components/Breadcrumb.Component\";\nimport { Affix } from \"rsuite\";\nimport DataGrid from '../../components/data-grid/data-grid.component';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass WorkList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sidebarExpandCollapse = () => {\n      this.setState({\n        sidebarview: true\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      if (dateValue === null) {\n        dateValue = new Date();\n      } // let toDate;\n      // let fromDate;\n\n\n      let fromdate = this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date();\n      let todate = this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date();\n      let obj = {};\n\n      if (dateName === 'fromDate') {\n        obj = convertDateValuetoString(dateValue, todate, this.props.Login.userInfo);\n        fromdate = obj.fromDate;\n        todate = obj.toDate;\n        let fromDate = obj.fromDate;\n        let toDate = obj.toDate;\n      } else {\n        obj = convertDateValuetoString(fromdate, dateValue, this.props.Login.userInfo);\n        fromdate = obj.fromDate;\n        todate = obj.toDate;\n        let fromDate = obj.fromDate;\n        let toDate = obj.toDate;\n      }\n\n      let inputParam = {\n        inputData: {\n          nflag: 2,\n          nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\n          nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n          fromdate: String(fromdate),\n          todate: String(todate),\n          userinfo: this.props.Login.userInfo,\n          realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n          realApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue\n        },\n        masterData: this.props.Login.masterData\n      };\n      this.props.getConfigVersionTestWise(inputParam);\n    };\n\n    this.onFilterComboChange = (comboData, fieldName) => {\n      if (comboData) {\n        let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n        let inputParamData = {};\n\n        if (fieldName === 'nsampletypecode') {\n          //if (comboData.value !== this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode) {\n          inputParamData = {\n            nflag: 2,\n            fromdate: obj.fromDate,\n            todate: obj.toDate,\n            nsampletypecode: comboData.value,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            defaultSampleTypeValue: comboData.item,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue\n          };\n          this.props.getRegTypeWorklist(inputParamData); // }\n        } else if (fieldName === 'nregtypecode') {\n          //  if (comboData.value !== this.props.Login.masterData.defaultRegTypeValue.nregtypecode) {\n          inputParamData = {\n            nflag: 3,\n            fromdate: obj.fromDate,\n            todate: obj.toDate,\n            nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode,\n            nregtypecode: comboData.value,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            nregtypecode: comboData.value,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue,\n            masterData: { ...this.props.Login.masterData,\n              RegTypeValue: comboData.item //RegistrationSubTypeList: inputParam.masterData.RegistrationSubTypeList\n\n            } //defaultRegTypeValue: comboData.item\n\n          };\n          this.props.getRegSubTypeWise(inputParamData); //  }\n        } else if (fieldName === 'nregsubtypecode') {\n          //  if (comboData.value !== this.props.Login.masterData.RegSubTypeValue.nregsubtypecode) {\n          let inputData = {\n            nflag: 4,\n            fromdate: obj.fromDate,\n            todate: obj.toDate,\n            nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode,\n            nregtypecode: this.props.Login.masterData.RegTypeValue.nregtypecode,\n            nneedtemplatebasedflow: comboData.item.nneedtemplatebasedflow,\n            nregsubtypecode: comboData.value,\n            userinfo: this.props.Login.userInfo,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue\n          };\n          inputParamData = {\n            inputData,\n            masterData: { ...this.props.Login.masterData,\n              RegSubTypeValue: comboData.item //RegistrationSubTypeList: inputParam.masterData.RegistrationSubTypeList\n\n            }\n          };\n          this.props.getConfigVersionTestWise(inputParamData); // }\n        } else if (fieldName === 'ntransactionstatus') {\n          // if (comboData.value !== this.props.Login.masterData.FilterStatusValue.ntransactionstatus) {\n          let masterData = { ...this.props.Login.masterData,\n            FilterStatusValue: comboData.item\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo); //   }\n        } else if (fieldName === 'napproveconfversioncode') {\n          // if (comboData.value !== this.props.Login.masterData.defaultApprovalVersionValue.napproveconfversioncode) {\n          let masterData = { ...this.props.Login.masterData,\n            defaultApprovalVersionValue: comboData.item\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo); //  }\n        } //\n\n      }\n    };\n\n    this.onInputOnChange = (event, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = optional;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      // this.searchRef.current.value = \"\";\n      let inputData = [];\n      let instSection = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromdate, this.props.Login.masterData.todate, this.props.Login.userInfo);\n      inputData['fromdate'] = obj.fromDate;\n      inputData['todate'] = obj.toDate;\n\n      if (this.props.Login.screenName === \"IDS_WORKLIST\") {\n        let postParam = undefined;\n        inputData[\"worklist\"] = {\n          nstatus: this.props.Login.userInfo.nmastersitecode\n        };\n        inputData[\"worklist\"][\"nsampletypecode\"] = this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode;\n        inputData[\"worklist\"][\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"].value;\n        inputData[\"worklist\"][\"ntestcode\"] = this.state.selectedRecord[\"ntestcode\"].value; //inputData[\"worklist\"][\"nregtypecode\"] = this.props.Login.masterData.RegTypeValue.nregtypecode\n\n        inputData[\"worklist\"][\"nregtypecode\"] = this.props.Login.masterData.defaultRegTypeValue.nregtypecode; //inputData[\"worklist\"][\"nregsubtypecode\"] = this.props.Login.masterData.RegSubTypeValue.nregsubtypecode\n\n        inputData[\"worklist\"][\"nregsubtypecode\"] = this.props.Login.masterData.defaultRegSubTypeValue.nregsubtypecode;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\n        inputData[\"napprovalconfigversioncode\"] = this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode;\n        inputData[\"ncontrolCode\"] = this.state.controlMap.has(\"AddSamples\") && this.state.controlMap.get(\"AddSamples\").ncontrolcode; // let defaultFilterStatusValue={};\n        // let FilterStatusValue={};\n\n        inputData[\"ntransactionstatus\"] = (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1; // this.props.Login.masterData.FilterStatus.map(item => {if(item.ntransactionstatus === transactionStatus.DRAFT){\n        //   defaultFilterStatusValue = item;\n        //   FilterStatusValue = item;}\n        // });\n        // let defaultFilterStatusValue=this.props.Login.masterData.FilterStatus[1];\n        // let FilterStatusValue=this.props.Login.masterData.FilterStatus[1];\n\n        if (this.props.Login.operation === \"update\") {\n          inputData[\"worklist\"][\"nworklistcode\"] = this.props.Login.masterData.selectedWorklist.nworklistcode;\n        }\n\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: \"Worklist\",\n          inputData: inputData,\n          operation: this.props.Login.operation,\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef\n        };\n        const masterData = { ...this.props.Login.masterData\n        }; // let masterData = {...this.props.Login.masterData\n        //   ,defaultFilterStatusValue,\n        //   FilterStatusValue      }\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: {\n                  masterData\n                }\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          //this.props.crudMaster(inputParam, masterData, \"openModal\");\n          this.props.insertWorklist(inputParam, masterData);\n        }\n      } //add / edit  \n\n\n      let validList = true;\n\n      if (this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\" && this.state.addedComponentList.length > 1000) {\n        validList = false;\n      }\n\n      if (validList) {\n        let saveList = [];\n\n        if (this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\") {\n          const compList = this.state.addComponentSortedList.map(x => {\n            delete x.selected; //return {...x, 'sregistereddate':formatInputDate(x.sregistereddate, false)}\n\n            return x;\n          }) || []; //compList.map(item=>saveList.push({\"npreregno\": item.npreregno}));\n\n          if (compList.length > 0) {\n            compList.map(item => saveList.indexOf(item.ntransactionsamplecode) === -1 ? saveList.push(item) : \"\");\n            const masterData = { ...this.props.Login.masterData\n            };\n            const inputData = {\n              worklistcompcreationlist: saveList,\n              userinfo: this.props.Login.userInfo,\n              worklistcreation: this.props.Login.masterData.selectedWorklist,\n              ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\n            };\n            let dataState = undefined;\n            let selectedId = null;\n            let postParam = undefined;\n            const inputParam = {\n              classUrl: \"worklist\",\n              methodUrl: \"WorklistCreation\",\n              inputData: inputData,\n              selectedId,\n              dataState,\n              postParam,\n              operation: \"create\",\n              saveType,\n              masterData\n            };\n\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData: masterData\n                  },\n                  saveType\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              //this.props.crudMaster(inputParam,masterData, \"openChildModal\");\n              this.props.createWorklistCreation(inputParam);\n            }\n          } else {\n            //this.props.crudMaster(inputParam,masterData, \"openChildModal\");\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELCETONESAMPLE\"\n            }));\n          }\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_EXCEEDSMAXINSERT\"\n        }));\n      }\n    };\n\n    this.DeleteWorklistSample = (operation, ncontrolCode) => {\n      let inputData = [];\n\n      if (operation.screenName === \"IDS_WORKLISTSAMPLE\") {\n        const dataState = this.state.sectionDataState;\n        inputData[\"worklistsample\"] = {\n          nsitecode: this.props.Login.userInfo.ntranssitecode\n        };\n        inputData[\"worklistsample\"][\"nworklistcode\"] = operation.selectedRecord.nworklistcode;\n        inputData[\"worklistsample\"][\"nworklistsamplecode\"] = operation.selectedRecord.nworklistsamplecode;\n        inputData[\"worklistsample\"][\"ntransactiontestcode\"] = operation.selectedRecord.ntransactiontestcode;\n        inputData[\"worklistsample\"][\"ntransactionsamplecode\"] = operation.selectedRecord.ntransactionsamplecode;\n        inputData[\"worklistsample\"][\"sarno\"] = operation.selectedRecord.sarno;\n        inputData[\"worklistsample\"][\"ssamplearno\"] = operation.selectedRecord.ssamplearno;\n        inputData[\"worklistsample\"][\"stestname\"] = operation.selectedRecord.stestsynonym;\n        inputData[\"worklistsample\"][\"nregsubtypecode\"] = operation.selectedRecord.nregsubtypecode;\n        inputData[\"worklistsample\"][\"nregtypecode\"] = operation.selectedRecord.nregtypecode;\n        inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        const inputParam = {\n          methodUrl: \"WorklistSample\",\n          classUrl: this.props.Login.inputParam.classUrl,\n          inputData: inputData,\n          operation: \"delete\",\n          dataState: dataState\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, operation.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openChildModal: true,\n              screenName: \"worklistSample\",\n              operation: operation.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openChildModal\");\n        }\n      }\n    };\n\n    this.dataStateChangeWorklistSample = event => {\n      // ADDed by Neeraj-ALPD-5136\n      //WorkList Screen -> Including filter in Data selection Kendo Grid \n      let updatedList = [];\n\n      if (event.dataState && event.dataState.filter === null) {\n        let addComponentDataListCopy = this.state.addComponentDataListCopy || this.state.addComponentDataList || [];\n        addComponentDataListCopy.forEach(x => {\n          // Check if x's ntransactiontestcode exists in addComponentSortedList\n          const exists = this.state.addComponentSortedList.some(item => item.ntransactiontestcode === x.ntransactiontestcode); // If it doesn't exist, add it to updatedList\n\n          if (!exists) {\n            updatedList.push(x);\n          }\n        });\n      } else {\n        updatedList = this.state.addComponentDataList || [];\n      }\n\n      this.setState({\n        dataResult: process(this.state.addComponentDataList || [], event.dataState),\n        dataState: event.dataState,\n        addComponentDataList: updatedList,\n        addSelectAll: event.dataState && event.dataState.filter === null ? this.valiateCheckAll(updatedList) : this.valiateCheckAll(process(updatedList || [], event.dataState).data)\n      });\n    };\n\n    this.selectionChange = event => {\n      let addedComponentList = this.state.addedComponentList || [];\n      const addComponentDataList = this.state.addComponentDataList.map(item => {\n        if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\n          item.selected = !event.dataItem.selected;\n\n          if (item.selected) {\n            const newItem = JSON.parse(JSON.stringify(item));\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            delete newItem['selected']; //newItem.selected = false;\n\n            newItem[\"jsondata\"]['worklist'] = item;\n            newItem[\"jsonuidata\"]['worklist'] = item;\n            addedComponentList.push(newItem);\n          } else {\n            addedComponentList = addedComponentList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode);\n          }\n        }\n\n        return item;\n      });\n      this.setState({\n        // ADDed by Neeraj-ALPD-5136\n        //WorkList Screen -> Including filter in Data selection Kendo Grid \n        addSelectAll: this.valiateCheckAll(this.state.dataState && this.state.dataState.filter && this.state.dataState.filter !== null && this.state.dataState.filter !== undefined ? process(addComponentDataList || [], this.state.dataState).data : addComponentDataList),\n        addComponentDataList,\n        addedComponentList,\n        //addSelectAll: this.valiateCheckAll(addComponentDataList),\n        deleteSelectAll: this.valiateCheckAll(addedComponentList),\n        addComponentDataListCopy: this.valiateCopy(this.state.addComponentSortedList || [], addComponentDataList || [], addedComponentList || [])\n      });\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataState: event.dataState\n      });\n    };\n\n    this.specificationReport = ncontrolCode => {\n      if (this.props.Login.masterData.selectedWorklist) {\n        const inputParam = {\n          stablename: \"worklistcode\",\n          primaryKeyField: \"nworklistcode\",\n          sreportlink: this.props.Login.reportSettings[15],\n          smrttemplatelink: this.props.Login.reportSettings[16],\n          nreporttypecode: REPORTTYPE.CONTROLBASED,\n          ncontrolcode: ncontrolCode,\n          primaryKeyValue: this.props.Login.masterData.selectedWorklist.nworklistcode,\n          nworklistcode: this.props.Login.masterData.selectedWorklist.nworklistcode,\n          nworklistcode_componentcode: REPORTTYPE.CONTROLBASED,\n          nworklistcode_componentname: designComponents.NUMBER,\n          ntranscode: this.props.Login.masterData.selectedWorklist.ntransactionstatus,\n          userinfo: this.props.Login.userInfo\n        }; //this.props.reportWorklist(inputParam['inputData']);\n\n        this.props.generateControlBasedReport(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_REPORTCANNOTGENERATEFORCOMPWITHOUTTEST\"\n        }));\n      }\n    };\n\n    this.headerSelectionChange = event => {\n      const checked = event.syntheticEvent.target.checked;\n      let addComponentDataList = //event.target.props.data \n      this.state.addComponentDataList || [];\n      let addedComponentList = [];\n\n      if (checked) {\n        const data = event.target.props.data.map(item => {\n          //  const data = addComponentDataList.map(item => {\n          if (addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\n            // addedComponentList.push({ ...item, selected: false });\n            item.selected = checked;\n            const newItem = JSON.parse(JSON.stringify(item));\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            delete newItem['selected']; //newItem.selected = false;\n\n            newItem[\"jsondata\"]['worklist'] = item;\n            newItem[\"jsonuidata\"]['worklist'] = item;\n            addedComponentList.push(newItem); //item.selected = false;\n\n            return item;\n          } else {\n            let olditem = JSON.parse(JSON.stringify(addedComponentList[addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]));\n            olditem.selected = checked;\n            let newItem = JSON.parse(JSON.stringify(olditem));\n            newItem.selected = false;\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            delete newItem['selected'];\n            newItem[\"jsondata\"]['worklist'] = olditem;\n            newItem[\"jsonuidata\"]['worklist'] = olditem;\n            addedComponentList.push(newItem);\n            return olditem;\n          }\n        });\n        this.setState({\n          addComponentDataList: data,\n          addedComponentList,\n          // ADDed by Neeraj-ALPD-5136\n          //WorkList Screen -> Including filter in Data selection Kendo Grid \n          addComponentDataListCopy: this.valiateCopy(this.state.addComponentSortedList || [], data || [], addedComponentList || []),\n          addSelectAll: this.valiateCheckAll(addedComponentList),\n          deleteSelectAll: this.valiateCheckAll(addedComponentList),\n          addSelectAll: checked,\n          deleteSelectAll: false\n        });\n      } //   if (checked) {\n      //     const data = event.dataItems.map(item => {\n      //         if (addComponentDataList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\n      //           addComponentDataList.push({ ...item, selected: false });\n      //             item.selected = checked;  \n      //             let newItem = JSON.parse(JSON.stringify(item));\n      //             newItem.selected = false;\n      //             newItem[\"jsondata\"]={};\n      //             newItem[\"jsonuidata\"]={};\n      //             newItem[\"jsondata\"]['worklist'] = item\n      //             newItem[\"jsonuidata\"]['worklist'] = item    \n      //             addedComponentList.push(newItem);\n      //             return item;\n      //         } else {\n      //             let olditem = JSON.parse(JSON.stringify(addComponentDataList[addComponentDataList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\n      //             olditem.selected = checked;\n      //             let newItem = JSON.parse(JSON.stringify(olditem));\n      //             newItem.selected = false;\n      //             newItem[\"jsondata\"]={};\n      //             newItem[\"jsonuidata\"]={};\n      //             newItem[\"jsondata\"]['worklist'] = olditem\n      //             newItem[\"jsonuidata\"]['worklist'] = olditem\n      //             addedComponentList.push(newItem);\n      //             return olditem;\n      //         }\n      //     });\n      //     this.setState({\n      //       addComponentDataList: data,\n      //         addedComponentList:addedComponentList,\n      //         addComponentDataList,\n      //         addSelectAll: checked,\n      //         deleteSelectAll: false\n      //     });\n      // }\n      else {\n        let addedComponentData = this.state.addedComponentList || [];\n        let deletedListdData = this.state.deletedList || [];\n        const data = event.target.props.data.map(item => {\n          addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== item.npreregno);\n          deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\n          item.selected = checked;\n          return item;\n        }); // console.log(\"data:\",data1, data2);\n\n        this.setState({\n          addComponentDataList: data,\n          addedComponentList: addedComponentData,\n          deletedList: deletedListdData,\n          addSelectAll: this.valiateCheckAll(addedComponentList),\n          deleteSelectAll: this.valiateCheckAll(addedComponentList),\n          addSelectAll: checked,\n          deleteSelectAll: false,\n          addComponentDataListCopy: this.valiateCopy(this.state.addComponentSortedList || [], data || [], addedComponentData || [])\n        });\n      }\n    };\n\n    this.addSaveDataGrid = () => {\n      let filterdata1 = this.state.dataState ? process(this.state.addComponentDataListCopy || [], { ...this.state.dataState,\n        take: this.state.addComponentDataList.length\n      }).data : [];\n      let sortListedData1 = filterdata1.filter(x => this.state.addedComponentList.some(item => item.ntransactiontestcode === x.ntransactiontestcode));\n      let exists = this.state.dataState && this.state.dataState.filter !== null && this.state.dataState.filter !== undefined ? sortListedData1.length > 0 ? true : false : true;\n\n      if (this.state.addedComponentList.length > 0 && exists) {\n        let addComponentSortedList = [];\n        let updatedList = [];\n        let ListedData = [];\n        let sortListedData = [];\n\n        if (this.state.dataState && this.state.dataState.filter !== null && this.state.dataState.filter !== undefined) {\n          let filterdata = process(this.state.addComponentDataListCopy || this.state.addComponentDataList || [], { ...this.state.dataState,\n            take: this.state.addComponentDataList.length\n          }).data;\n          sortListedData = filterdata.filter(x => this.state.addedComponentList.some(item => item.ntransactiontestcode === x.ntransactiontestcode));\n          updatedList = this.state.addComponentDataList.filter(item => !sortListedData.some(addedItem => addedItem.ntransactiontestcode === item.ntransactiontestcode));\n          updatedList.map(x => {\n            if (x.selected) {\n              ListedData.push(x);\n            }\n          });\n        } else {\n          updatedList = this.state.addComponentDataList.filter(item => !this.state.addedComponentList.some(addedItem => addedItem.ntransactiontestcode === item.ntransactiontestcode));\n          ListedData = [];\n          sortListedData = this.state.addedComponentList;\n        }\n\n        if (this.state.addComponentSortedList.length > 0) {\n          this.state.addComponentSortedList.map(item => {\n            const newItem = JSON.parse(JSON.stringify(item));\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            newItem[\"jsondata\"]['worklist'] = item;\n            newItem[\"jsonuidata\"]['worklist'] = item;\n            addComponentSortedList.push(newItem);\n          });\n        }\n\n        sortListedData.map(item => {\n          const newItem = JSON.parse(JSON.stringify(item));\n          newItem[\"jsondata\"] = {};\n          newItem[\"jsonuidata\"] = {};\n          newItem[\"jsondata\"]['worklist'] = item;\n          newItem[\"jsonuidata\"]['worklist'] = item;\n          addComponentSortedList.push(newItem);\n        });\n        this.setState({\n          addComponentDataList: updatedList,\n          addSelectAll: this.valiateCheckAll(updatedList),\n          addComponentSortedList: addComponentSortedList,\n          addedComponentList: ListedData,\n          addComponentDataListCopy: this.valiateCopy(addComponentSortedList || [], updatedList || [], ListedData || [])\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELCETONESAMPLE\"\n        }));\n      }\n    };\n\n    this.handleClickDelete = row => {\n      let updatedAddList = [];\n      const ntransactiontestcode = row.dataItem.ntransactiontestcode;\n      const updatedList = this.state.addComponentSortedList.filter(item => item.ntransactiontestcode !== ntransactiontestcode);\n      const exists = this.state.addComponentDataList.some(item => item.ntransactiontestcode === ntransactiontestcode);\n\n      if (!exists) {\n        updatedAddList = this.state.addComponentDataList.map(item => {\n          return item;\n        });\n        updatedAddList.push({ ...row.dataItem,\n          selected: false\n        });\n      }\n\n      this.setState({\n        addComponentDataList: updatedAddList,\n        addComponentSortedList: updatedList,\n        addComponentDataListCopy: this.valiateCopy(updatedList || [], updatedAddList || [])\n      });\n    };\n\n    this.validateEsign = () => {\n      let modalName = this.props.Login.screenName === \"worklistSample\" ? \"openChildModal\" : \"openModal\";\n      const inputParam = {\n        inputData: {\n          userinfo: { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n\n      if (this.props.Login.operation === \"prepare\") {\n        this.props.validateEsignforWorklist(inputParam, modalName, this.confirmMessage);\n      } else {\n        this.props.validateEsignCredential(inputParam, modalName);\n      } // this.props.validateEsignCredential(inputParam, \"openModal\");\n\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      const deleteSecId = this.state.controlMap.has(\"DeleteWorklistSample\") && this.state.controlMap.get(\"DeleteWorklistSample\").ncontrolcode;\n      const addSampleId = this.state.controlMap.has(\"AddSamples\") && this.state.controlMap.get(\"AddSamples\").ncontrolcode;\n      const viewSampleId = this.state.controlMap.has(\"ViewWorklistSample\") && this.state.controlMap.get(\"ViewWorklistSample\").ncontrolcode;\n      tabMap.set(\"IDS_WORKLISTSAMPLE\", /*#__PURE__*/React.createElement(WorklistSampleTab, {\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        dataState: this.state.WorklistSamples,\n        selectedWorklist: this.state.WorklistSamples,\n        extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n        detailedFieldList: this.gridfillingColumnGridMoreItem(this.state.DynamicGridMoreItem) || [],\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        deleteRecord: this.DeleteWorklistSample,\n        deleteSecId: deleteSecId,\n        defaultRecord: this.defaultRecord,\n        WorklistSamples: this.state.WorklistSamples || [],\n        viewSample: this.viewSample,\n        screenName: \"IDS_WORKLISTSAMPLE\",\n        selectedRecord: this.state.selectedRecord,\n        settings: this.props.Login.settings,\n        getWorklistSample: this.props.getWorklistSample,\n        masterData: this.props.Login.masterData,\n        addSampleId: addSampleId,\n        viewSampleId: viewSampleId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1150,\n          columnNumber: 7\n        }\n      }));\n      tabMap.set(\"IDS_WORKLISTHISTORY\", /*#__PURE__*/React.createElement(WorklistHistoryTab, {\n        dataState: this.props.Login.masterData.WorklistHistory,\n        selectedWorklistHistory: this.props.Login.masterData.WorklistHistory,\n        InstrumentSection: this.props.Login.masterData.WorklistHistory || [],\n        userInfo: this.props.Login.userInfo //inputParam={this.props.Login.inputParam}\n        // deleteRecord={this.DeleteWorklistSample}\n        // deleteSecId={deleteSecId}\n        // defaultSecId={defaultSecId}\n        // defaultRecord={this.defaultRecord}\n        ,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_WORKLISTHISTORY\",\n        selectedRecord: this.state.selectedRecord,\n        settings: this.props.Login.settings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1177,\n          columnNumber: 7\n        }\n      }));\n      return tabMap;\n    };\n\n    this.clickFilterDetail = value => {\n      //  if(this.props.Login.nfilternamecode!==value.nfilternamecode){\n      this.searchRef.current.value = \"\";\n      this.props.Login.change = false;\n      let masterData = this.props.Login.masterData;\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n      let inputData = {\n        userinfo: this.props.Login.userInfo,\n        FromDate: obj.fromDate,\n        ToDate: obj.toDate,\n        nfilternamecode: value && value.nfilternamecode ? value.nfilternamecode : -1,\n        npreregno: \"0\",\n        sampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode || -1,\n        regtypecode: parseInt(this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode) || -1,\n        regsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode) || -1,\n        approvalconfigurationcode: this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigcode || -1 : null,\n        napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue && this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode ? String(this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode) : -1,\n        userinfo: this.props.Login.userInfo,\n        designtemplatcode: this.props.Login.masterData.realDesignTemplateMappingValue && this.props.Login.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode || -1,\n        //ntranscode: this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus,         \n        ntranscode: this.props.Login.masterData.FilterStatusValue.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatusValue.ntransactionstatus : this.props.Login.masterData.FilterStatusValue.ntransactionstatus\n      };\n      const inputParam = {\n        masterData,\n        inputData\n      };\n      this.props.getWorklistFilterDetails(inputParam); // }\n      // else{\n      //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDFILTERALREADYLOADED\" }));  \n      // }\n    };\n\n    this.openFilterName = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          modalShow: true,\n          operation: \"create\",\n          isFilterDetail: true,\n          modalTitle: this.props.intl.formatMessage({\n            id: \"IDS_SAVEFILTER\"\n          })\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveModalFilterName = () => {\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n      const masterData = this.props.Login.masterData;\n      let inputData = {\n        userinfo: this.props.Login.userInfo,\n        dfrom: obj.fromDate,\n        dto: obj.toDate,\n        sfiltername: this.state.selectedRecord && this.state.selectedRecord.sfiltername !== null ? this.state.selectedRecord.sfiltername : \"\",\n        sampleTypeValue: this.props.Login.masterData && this.props.Login.masterData.RealSampleTypeValue,\n        regTypeValue: this.props.Login.masterData && this.props.Login.masterData.realRegTypeValue,\n        regSubTypeValue: this.props.Login.masterData && this.props.Login.masterData.realRegSubTypeValue,\n        filterStatusValue: this.props.Login.masterData && this.props.Login.masterData.RealFilterStatusValue,\n        approvalConfigValue: this.props.Login.masterData && this.props.Login.masterData.realApprovalVersionValue,\n        designTemplateMappingValue: this.props.Login.masterData && this.props.Login.masterData.realDesignTemplateMappingValue,\n        npreregno: \"0\",\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode) || -1,\n        nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode) || -1,\n        //ntranscode: ((this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus !== undefined) || this.props.Login.masterData.FilterStatusValue.ntransactionstatus !== '0') ? String(this.props.Login.masterData.FilterStatusValue.ntransactionstatus) + ',' + String(transactionStatus.worklist) : \"-1\",\n        // ntranscode: this.props.Login.masterData.FilterStatusValue\n        //  && (this.props.Login.masterData.FilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\"'\",\",\",\",\") : \"'\",this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\"'\"),\n        // //ntranscode: this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus,         \n        ntransactionstatusfilter: this.props.Login.masterData.FilterStatusValue.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => `${item.ntransactionstatus}`).join(\",\") : `${this.props.Login.masterData.FilterStatusValue.ntransactionstatus}`,\n        ntranscode: this.props.Login.masterData.FilterStatusValue.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatusValue.ntransactionstatus : this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n        napprovalconfigcode: this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigcode || -1 : null,\n        napproveconfversioncode: this.props.Login.masterData.realApprovalVersionValue && this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode : -1,\n        userinfo: this.props.Login.userInfo,\n        ndesigntemplatemappingcode: this.props.Login.masterData.realDesignTemplateMappingValue && this.props.Login.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode || -1,\n        needExtraKeys: true\n      };\n      let inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"FilterName\",\n        inputData: inputData,\n        operation: this.props.Login.operation\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.ntransactionstatus !== \"-1\" && inputData.napprovalconfigcode !== -1 && inputData.napprovalversioncode !== \"-1\") {\n        this.props.crudMaster(inputParam, masterData, \"modalShow\");\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n\n      if (screenName == \"IDS_WORKLISTHISTORY\") {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          nworklistcode: this.props.Login.masterData.selectedWorklist.nworklistcode\n        };\n        this.props.getWorklisthistoryAction(inputData, true);\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName,\n            activeKey: \"IDS_WORKLISTSAMPLE\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      this.props.Login.masterData.searchedData = undefined;\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromdate, this.props.Login.masterData.todate, this.props.Login.userInfo);\n      let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\n      let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\n      let defaultSampleTypeValue = this.props.Login.masterData.defaultSampleTypeValue;\n      let defaultRegTypeValue = this.props.Login.masterData.defaultRegTypeValue;\n      let defaultRegSubTypeValue = this.props.Login.masterData.defaultRegSubTypeValue;\n      let defaultFilterStatusValue = this.props.Login.masterData.defaultFilterStatusValue;\n      let defaultApprovalVersionValue = this.props.Login.masterData.defaultApprovalVersion;\n      let defaultApprovalVersion = this.props.Login.masterData.defaultApprovalVersionValue;\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate,\n        realToDate,\n        defaultSampleTypeValue,\n        defaultRegTypeValue,\n        defaultRegSubTypeValue,\n        defaultFilterStatusValue,\n        defaultApprovalVersionValue\n      };\n      let inputData = {\n        nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue && this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: parseInt(this.props.Login.masterData.defaultRegTypeValue && this.props.Login.masterData.defaultRegTypeValue.nregtypecode) || -1,\n        nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegSubTypeValue && this.props.Login.masterData.defaultRegSubTypeValue.nregsubtypecode) || -1,\n        //  ntransactionstatus: (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1,\n        ntransactionstatus: (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1,\n        userinfo: this.props.Login.userInfo,\n        napprovalconfigversioncode: this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode || -1\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalconfigversioncode !== -1 && inputData.ntransactionstatus !== \"-1\") {\n        inputData['fromdate'] = obj.fromDate;\n        inputData['todate'] = obj.toDate;\n        inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\n        let inputParam = {\n          masterData,\n          inputData,\n          searchTestRef: this.searchTestRef,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake,\n          isClearSearch: this.props.Login.isClearSearch\n        };\n        this.props.getWorklistDetailFilter(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.ConfirmDelete = (operation, deleteId) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.DeleteWorklist(operation, deleteId, operation.screenName ? operation.screenName : \"IDS_WORKLIST\"));\n    };\n\n    this.DeleteWorklist = (operation, ncontrolCode) => {\n      let inputData = [];\n      inputData[\"worklist\"] = this.props.Login.masterData.selectedWorklist;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromdate, this.props.Login.masterData.todate, this.props.Login.userInfo);\n      inputData['fromdate'] = obj.fromDate;\n      inputData['todate'] = obj.toDate;\n      inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\n      inputData[\"napprovalconfigversioncode\"] = this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode;\n      inputData[\"ntransactionstatus\"] = (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1;\n      const postParam = {\n        inputListName: \"Worklist\",\n        selectedObject: \"selectedWorklist\",\n        primaryKeyField: \"nworklistcode\",\n        primaryKeyValue: this.props.Login.masterData.selectedWorklist.nworklistcode,\n        fetchUrl: \"worklist/getWorklistSelectSample\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo,\n          ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n          nneedsampleandhistory: transactionStatus.YES\n        }\n      };\n      const inputParam = {\n        methodUrl: \"Worklist\",\n        postParam,\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        operation: operation.operation\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"Worklist\",\n            operation: operation.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onApproveClick = () => {\n      //onClick={() => this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, approvalId)}\n      //if (this.props.Login.masterData.SelectedSupplier.ntransactionstatus === transactionStatus.DRAFT) {\n      const ncontrolCode = this.state.controlMap.has(\"GenerateWorklist\") && this.state.controlMap.get(\"GenerateWorklist\").ncontrolcode;\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      const masterData = this.props.Login.masterData; // //add               \n\n      let postParam = undefined;\n      inputData[\"worklist\"] = masterData.selectedWorklist;\n      inputData[\"ncontrolCode\"] = ncontrolCode;\n      inputData[\"ndesigntemplatemappingcode\"] = masterData.ndesigntemplatemappingcode;\n      inputData[\"ntransactionstatus\"] = (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1; // inputData[\"supplier\"] = this.props.Login.masterData.SelectedSupplier;\n\n      postParam = {\n        inputListName: \"Worklist\",\n        selectedObject: \"selectedWorklist\",\n        primaryKeyField: \"nworklistcode\",\n        primaryKeyValue: this.props.Login.masterData.selectedWorklist.nworklistcode,\n        fetchUrl: \"worklist/getWorklistSelectSample\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo,\n          ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n          nneedsampleandhistory: transactionStatus.YES\n        }\n      };\n      const inputParam = {\n        classUrl: 'worklist',\n        methodUrl: \"Worklist\",\n        inputData: inputData,\n        operation: \"prepare\",\n        postParam\n      };\n      let saveType;\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            openModal: true,\n            operation: \"prepare\",\n            screenName: \"Worklist\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        //this.props.crudMaster(inputParam, masterData, \"openModal\");\n        this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, ncontrolCode);\n      }\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData !== null) {\n        switch (caseNo) {\n          case 1:\n            if (selectedRecord[fieldName] && selectedRecord[fieldName].value !== comboData.value) {\n              delete selectedRecord[\"ntestcode\"];\n            }\n\n            selectedRecord[fieldName] = comboData; //this.setState({selectedRecord});\n\n            this.props.getSectionbaseTest(selectedRecord, this.props.Login.userInfo, this.props.Login.masterData, this.props.Login.ncontrolCode);\n            break;\n\n          default:\n            break;\n        }\n      } else {\n        if (selectedRecord[\"nsectioncode\"]) {\n          delete selectedRecord[\"nsectioncode\"];\n          delete selectedRecord[\"nusercode\"];\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let modalShow = this.props.Login.modalShow;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let openChildModal = this.props.Login.openChildModal;\n\n      if (this.props.Login.loadEsign) {\n        if ((this.props.Login.operation.operation ? this.props.Login.operation.operation : this.props.Login.operation) === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false; // selectedRecord[\"agree\"] = transactionStatus.NO;\n\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n          modalShow = true;\n          openModal = false;\n          openChildModal = false;\n        }\n      } else {\n        openModal = false;\n        modalShow = false;\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          modalShow,\n          loadEsign,\n          selectedRecord,\n          selectedId: null,\n          openChildModal\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.viewSample = viewdetails => {\n      //let openModal = this.props.Login.openModal;\n      //let openModal = true;\n      //let screenName = 'IDS_VIEWDETAILS'\n      this.props.ViewSampleDetails(this.props.Login.masterData, \"IDS_PREVIOUSRESULTVIEW\", this.props.Login.userInfo, viewdetails);\n    };\n\n    this.closeModalShow = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let modalShow = this.props.Login.modalShow;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        loadEsign = false;\n      } else {\n        modalShow = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          modalShow,\n          selectedRecord,\n          selectedId: null,\n          loadEsign\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      let inputValues = {\n        RegistrationSubType: this.props.Login.masterData.realRegistrationSubTypeList || [],\n        RegistrationType: this.props.Login.masterData.realRegistrationTypeList || [],\n        FilterStatus: this.props.Login.masterData.realFilterStatusList || [],\n        SampleType: this.props.Login.masterData.realSampleTypeList || [],\n        ApprovalConfigVersion: this.props.Login.masterData.realApprovalConfigVersionList || [],\n        FilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\n        ApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue || {},\n        RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue || {},\n        RegTypeValue: this.props.Login.masterData.realRegTypeValue || {},\n        SampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\n        fromDate: this.props.Login.masterData.fromdate || new Date(),\n        // ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date(),\n        toDate: this.props.Login.masterData.todate || new Date(),\n        // ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date(),\n        defaultSampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\n        defaultApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue || {}\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false,\n          masterData: { ...this.props.Login.masterData,\n            ...inputValues\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.searchRef.current.value = \"\";\n      this.props.Login.masterData.searchedData = undefined;\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n      let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\n      let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\n      let fromdate = this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date();\n      let todate = this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date();\n      let defaultSampleTypeValue = this.props.Login.masterData.defaultSampleTypeValue;\n      let defaultRegTypeValue = this.props.Login.masterData.RegTypeValue;\n      let defaultRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue;\n      let defaultFilterStatusValue = this.props.Login.masterData.FilterStatusValue;\n      let defaultApprovalVersion = this.props.Login.masterData.defaultApprovalVersionValue;\n      let RealSampleTypeValue = this.props.Login.masterData.defaultSampleTypeValue;\n      let realApprovalVersionValue = this.props.Login.masterData.defaultApprovalVersionValue;\n      let realRegTypeValue = this.props.Login.masterData.RegTypeValue;\n      let realRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue;\n      let RealFilterStatusValue = this.props.Login.masterData.FilterStatusValue;\n      let realApprovalConfigVersionList = this.props.Login.masterData.ApprovalConfigVersion;\n      let realFilterStatusList = this.props.Login.masterData.FilterStatus;\n      let realRegistrationTypeList = this.props.Login.masterData.RegistrationType;\n      let realRegistrationSubTypeList = this.props.Login.masterData.RegistrationSubType;\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate,\n        realToDate,\n        defaultSampleTypeValue,\n        defaultRegTypeValue,\n        defaultRegSubTypeValue,\n        defaultFilterStatusValue,\n        defaultApprovalVersion,\n        fromdate,\n        todate,\n        RealSampleTypeValue,\n        realApprovalVersionValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        RealFilterStatusValue,\n        realApprovalConfigVersionList,\n        realFilterStatusList,\n        realRegistrationTypeList,\n        realRegistrationSubTypeList\n      };\n      let inputData = {\n        //npreregno: \"0\",\n        nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue && this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: parseInt(this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode) || -1,\n        nregsubtypecode: parseInt(this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode) || -1,\n        //ntransactionstatus: (this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus) || -1,\n        ntransactionstatus: this.props.Login.masterData.FilterStatusValue && (this.props.Login.masterData.FilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.FilterStatusValue.ntransactionstatus),\n        ntranscode: this.props.Login.masterData.FilterStatusValue && (this.props.Login.masterData.FilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.FilterStatusValue.ntransactionstatus),\n        napprovalconfigversioncode: this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode || -1,\n        napprovalversioncode: this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode || -1,\n        userinfo: this.props.Login.userInfo,\n        needExtraKeys: true,\n        saveFilterSubmit: true,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        sampleTypeValue: this.props.Login.masterData.defaultSampleTypeValue && this.props.Login.masterData.defaultSampleTypeValue,\n        regTypeValue: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue,\n        regSubTypeValue: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue,\n        filterStatusValue: this.props.Login.masterData && this.props.Login.masterData.RealFilterStatusValue,\n        approvalConfigValue: this.props.Login.masterData && this.props.Login.masterData.realApprovalVersionValue,\n        designTemplateMappingValue: this.props.Login.masterData.realDesignTemplateMappingValue && this.props.Login.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode || -1,\n        napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue && this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode ? String(this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode) : -1\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalconfigversioncode !== -1 && inputData.ntranscode !== \"-1\") {\n        inputData['fromdate'] = obj.fromDate;\n        inputData['todate'] = obj.toDate;\n        inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\n        let inputParam = {\n          masterData,\n          inputData,\n          searchTestRef: this.searchTestRef,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake\n        };\n        this.props.getWorklistDetailFilter(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    const sectionDataState = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      selectedRecord: {},\n      error: \"\",\n      userRoleControlRights: [],\n      selectedWorklist: undefined,\n      controlMap: new Map(),\n      Instrument: [],\n      sectionDataState,\n      addComponentDataList: [],\n      addedComponentList: [],\n      RegistrationSubTypeList: [],\n      FilterStatusList: [],\n      SampletypeList: [],\n      RegTypeValue: [],\n      ConfigVersionList: [],\n      sidebarview: false\n    };\n    this.searchRef = React.createRef();\n    this.searchFieldList = [\"sworklistno\", \"stestname\"];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  gridfillingColumn(data) {\n    const temparray = [];\n    data && data.map(option => {\n      if (option[designProperties.VALUE] !== \"dregdate\") {\n        temparray.push({\n          \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n          \"dataField\": option[designProperties.VALUE],\n          \"width\": \"200px\",\n          \"columnSize\": \"3\"\n        });\n      }\n    });\n\n    if (temparray) {\n      temparray.push({\n        \"idsName\": \"IDS_REGISTRATIONDATE\",\n        \"dataField\": \"sregistereddate\",\n        \"width\": \"250px\",\n        \"columnSize\": \"3\"\n      });\n    }\n\n    return temparray;\n  }\n\n  gridfillingColumnGridMoreItem(data) {\n    const temparray = [];\n    data && data.map(option => {\n      if (option[designProperties.VALUE] !== \"dregdate\") {\n        temparray.push({\n          \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n          \"dataField\": option[designProperties.VALUE],\n          \"width\": \"200px\",\n          \"columnSize\": \"3\"\n        });\n      }\n    });\n\n    if (temparray) {\n      temparray.push({\n        \"idsName\": \"IDS_REGISTRATIONDATE\",\n        \"dataField\": \"sregistereddate\",\n        \"width\": \"250px\",\n        \"columnSize\": \"3\"\n      });\n    }\n\n    return temparray;\n  } // onNumericInputOnChange = (value, name) => {\n  //   const selectedRecord = this.state.selectedRecord || {};\n  //   selectedRecord[name] = value;\n  //   this.setState({ selectedRecord });\n  // };\n\n\n  // ADDed by Neeraj-ALPD-5136\n  //WorkList Screen -> Including filter in Data selection Kendo Grid \n  valiateCopy(sortedList, addComponentDataList, addedComponentList) {\n    let addedComponentLists = addedComponentList || this.state.addedComponentList || [];\n    let listData = this.props.Login.addComponentDataList || [];\n    let copyingList = listData.filter(item1 => !sortedList.some(item2 => item1.ntransactiontestcode === item2.ntransactiontestcode)) || [];\n    let copyingListData = copyingList.map(item => {\n      const existsInAddComponentDataList = addedComponentLists.some(item1 => item1.ntransactiontestcode === item.ntransactiontestcode);\n\n      if (existsInAddComponentDataList) {\n        return { ...item,\n          selected: true\n        };\n      } else {\n        return { ...item,\n          selected: false\n        };\n      }\n    });\n    return copyingListData;\n  }\n\n  valiateCheckAll(data) {\n    let selectAll = true; // let checkRepeatComponent;\n    //  let addedComponentList = this.state.addedComponentList || [];\n\n    if (data && data.length > 0) {\n      data.forEach(dataItem => {\n        if (dataItem.selected) {\n          if (dataItem.selected === false) {\n            selectAll = false;\n          }\n        } else {\n          selectAll = false; // checkRepeatComponent=this.state.addComponentDataList.filter(item=>item.npreregno==data.npreregno)\n          // if(checkRepeatComponent.length>0){\n          //     selectAll = true;\n          // }else{\n          //     selectAll = false;\n          // }\n        }\n      });\n    } else {\n      //if (gridType === \"originalgrid\"){\n      selectAll = false; // }\n    }\n\n    return selectAll;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n    let mandatoryFields = []; // this.feildsForGrid =\n    //   [\n    //     // { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },       \n    //     { \"idsName\": \"IDS_PARAMETER\", \"dataField\": \"sparametersynonym\", \"width\": \"100px\" },\n    //     { \"idsName\": \"IDS_RESULT\", \"dataField\": \"sfinal\", \"width\": \"100px\" },\n    //     { \"idsName\": \"IDS_GRADE\", \"dataField\": \"sgradename\", \"width\": \"200px\" },\n    //   ];\n\n    this.feildsForGrid = [// { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\n    {\n      \"idsName\": \"IDS_REPORTREFNO\",\n      \"dataField\": \"sreportno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      \"dataField\": \"sarno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      \"dataField\": \"ssamplearno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PARAMETER\",\n      \"dataField\": \"sparametersynonym\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_RESULT\",\n      \"dataField\": \"sfinal\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_GRADE\",\n      \"dataField\": \"sgradename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_REGISTRATIONDATE\",\n      \"dataField\": \"sregdate\",\n      \"width\": \"200px\"\n    }];\n    this.extractedColumnList = [//  { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"350px\" },\n    {\n      \"idsName\": \"IDS_NEWCOMMENTS\",\n      \"dataField\": \"scomments\",\n      \"width\": \"350px\"\n    }, {\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_USERROLE\",\n      \"dataField\": \"suserrolename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ACTIONTYPE\",\n      \"dataField\": \"sactiontype\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_MODULENAME\",\n      \"dataField\": \"smodulename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_FORMNAME\",\n      \"dataField\": \"sformname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_REASON\",\n      \"dataField\": \"spredefinedreason\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ESIGNCOMMENTS\",\n      \"dataField\": \"sreason\",\n      \"width\": \"200px\"\n    }]; // const auditInfoFields = [{ \"fieldName\": \"sarno\", \"label\": \"IDS_ARNO\" }, \n    // { \"fieldName\": \"spatientid\", \"label\": \"IDS_PATIENTID\" },   \n    // { \"fieldName\": \"sfirstname\", \"label\": \"IDS_PATIENTNAME\" },\n    // { \"fieldName\": \"sage\", \"label\": \"IDS_AGE\" },\n    // { \"fieldName\": \"sgendername\", \"label\": \"IDS_GENDER\" },\n    // { \"fieldName\": \"stestsynonym\", \"label\": \"IDS_TEST\" },\n    // { \"fieldName\": \"sregdate\", \"label\": \"IDS_REGISTRATIONDATE\" },\n    // { \"fieldName\": \"scompletedate\", \"label\": \"IDS_COMPLETEDDATEANDTIME\" }\n    // ];\n\n    const auditInfoFields = [{\n      \"label\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      \"fieldName\": \"sarno\"\n    }, {\n      \"fieldName\": \"stestsynonym\",\n      \"label\": \"IDS_TEST\"\n    }, {\n      \"fieldName\": \"sfirstname\",\n      \"label\": \"IDS_PATIENTNAME\"\n    }, {\n      \"fieldName\": \"sgendername\",\n      \"label\": \"IDS_GENDER\"\n    }];\n\n    if (this.props.Login.screenName === \"IDS_WORKLIST\") {\n      mandatoryFields.push({\n        mandatory: true,\n        idsName: \"IDS_ADDSECTION\",\n        dataField: \"nsectioncode\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      }, {\n        mandatory: true,\n        idsName: \"IDS_TEST\",\n        dataField: \"ntestcode\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      });\n    }\n\n    const addId = this.state.controlMap.has(\"AddWorklist\") && this.state.controlMap.get(\"AddWorklist\").ncontrolcode; // const editId =\n    //   this.state.controlMap.has(\"EditWorklist\") &&\n    //   this.state.controlMap.get(\"EditWorklist\").ncontrolcode;\n\n    const deleteId = this.state.controlMap.has(\"DeleteWorklist\") && this.state.controlMap.get(\"DeleteWorklist\").ncontrolcode;\n    const approvalId = this.state.controlMap.has(\"GenerateWorklist\") && this.state.controlMap.get(\"GenerateWorklist\").ncontrolcode;\n    const reportId = this.state.controlMap.has(\"WorklistReport\") && this.state.controlMap.get(\"WorklistReport\").ncontrolcode; // const addSampleId =\n    //   this.state.controlMap.has(\"AddWorklistSample\") &&\n    //   this.state.controlMap.get(\"AddWorklistSample\").ncontrolcode;\n    // const deleteSampleId =\n    // this.state.controlMap.has(\"DeleteWorklistSample\") &&\n    // this.state.controlMap.get(\"DeleteWorklistSample\").ncontrolcode;\n\n    const {\n      selectedWorklist\n    } = this.props.Login.masterData;\n    const filterParam = {\n      inputListName: \"Worklist\",\n      selectedObject: \"selectedWorklist\",\n      primaryKeyField: \"nworklistcode\",\n      fetchUrl: \"worklist/getWorklistSample\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    const filterNameId = this.state.controlMap.has(\"FilterName\") ? this.state.controlMap.get(\"FilterName\").ncontrolcode : -1;\n    const filterDetailId = this.state.controlMap.has(\"FilterDetail\") ? this.state.controlMap.get(\"FilterDetail\").ncontrolcode : -1;\n    const mandatoryFieldsFilter = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_FILTERNAME\",\n      \"dataField\": \"sfiltername\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    const breadCrumbData = this.state.filterData || [];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap new-breadcrumb toolbar-top-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1322,\n        columnNumber: 9\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1324,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1325,\n        columnNumber: 15\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fixed-buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1330,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(filterNameId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_SAVEFILTER\"\n      }) //onClick={() => this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, approvalId)}\n      ,\n      onClick: () => this.openFilterName(filterNameId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1331,\n        columnNumber: 13\n      }\n    }, \"   \", /*#__PURE__*/React.createElement(SaveIcon, {\n      width: \"20px\",\n      height: \"20px\",\n      className: \"custom_icons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1336,\n        columnNumber: 17\n      }\n    })), this.state.userRoleControlRights.indexOf(filterDetailId) !== -1 && this.props.Login.masterData && this.props.Login.masterData.FilterName !== undefined && this.props.Login.masterData.FilterName.length > 0 ? /*#__PURE__*/React.createElement(CustomPopover, {\n      icon: faBolt,\n      nav: true,\n      data: this.props.Login.masterData.FilterName,\n      btnClasses: \"btn-circle btn_grey ml-2 spacesremovefromaction\" //dynamicButton={(value) => this.props.getAcceptTestTestWise(value,testGetParam,this.props.Login.masterData.MJSelectedTest,this.props.Login.userInfo)}\n      ,\n      dynamicButton: value => this.clickFilterDetail(value),\n      textKey: \"sfiltername\",\n      iconKey: \"nfiltercode\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1341,\n        columnNumber: 17\n      }\n    }) : \"\"), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1355,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1356,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: \"worklist\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.Worklist,\n      getMasterDetail: worklist => this.props.getWorklistDetail(worklist, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedWorklist,\n      primaryKeyField: \"nworklistcode\",\n      mainField: \"sworklistno\",\n      firstField: \"stestname\",\n      secondField: \"ssectionname\",\n      isIDSField: \"Yes\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      searchRef: this.searchRef,\n      addId: addId,\n      hideCheckLabel: true,\n      hidePaging: false,\n      reloadData: this.reloadData,\n      openModal: () => this.props.getSectionAndTest(\"IDS_WORKLIST\", \"create\", \"nworklistcode\", this.props.Login.masterData, this.props.Login.userInfo, addId),\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      callCloseFunction: true,\n      filterComponent: [{\n        IDS_WORKLISTFILTER: /*#__PURE__*/React.createElement(WorklistPreparationFilter, {\n          SampleTypeValue: this.props.Login.masterData.defaultSampleTypeValue || {},\n          RegTypeValue: this.props.Login.masterData.RegTypeValue || {},\n          RegSubTypeValue: this.props.Login.masterData.RegSubTypeValue || {},\n          RegSubType: this.state.RegistrationSubTypeList || [],\n          RegType: this.state.RegistrationTypeList || [],\n          userInfo: this.props.Login.userInfo || {},\n          ApprovalVersion: this.state.ConfigVersionList || [],\n          ApprovalVersionValue: this.props.Login.masterData.defaultApprovalVersionValue || [] //SampleType={this.state.stateSampleType || []}\n          ,\n          FilterStatusValue: this.props.Login.masterData.FilterStatusValue || {},\n          FilterStatus: this.state.FilterStatusList || [],\n          RegistrationType: this.state.stateRegistrationType || [],\n          RegistrationSubType: this.state.stateRegistrationSubType || [],\n          fromDate: this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date(),\n          toDate: this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date(),\n          handleDateChange: this.handleDateChange,\n          onFilterComboChange: this.onFilterComboChange,\n          SampleType: this.state.SampletypeList || [],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1406,\n            columnNumber: 23\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1357,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '8' : \"10\"}`,\n      className: \"position-relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1433,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1434,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn \",\n      onClick: this.props.parentFunction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1435,\n        columnNumber: 17\n      }\n    }, !this.props.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1437,\n        columnNumber: 21\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1438,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1442,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1443,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1444,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1445,\n        columnNumber: 21\n      }\n    }, this.props.Login.masterData.Worklist && this.props.Login.masterData.Worklist.length > 0 && this.props.Login.masterData.selectedWorklist ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1449,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1450,\n        columnNumber: 31\n      }\n    }, this.props.Login.masterData.selectedWorklist.sworklistno), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1456,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1457,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1458,\n        columnNumber: 35\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn btn-outlined ${this.props.Login.masterData.selectedWorklist.ntransactionstatus === 83 ? \"outline-success\" : \"outline-secondary\"} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1459,\n        columnNumber: 37\n      }\n    }, this.props.Login.masterData.selectedWorklist.ntransactionstatus === 83 && /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1460,\n        columnNumber: 114\n      }\n    }), this.props.Login.masterData.selectedWorklist.stransdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1464,\n        columnNumber: 35\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteWorklist\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //   data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.ConfirmDelete({\n        operation: \"delete\",\n        screenName: \"IDS_WORKLIST\"\n      }, deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1484,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1506,\n        columnNumber: 39\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approvalId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_PREPARED\"\n      }) //onClick={() => this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, approvalId)}\n      ,\n      onClick: () => this.onApproveClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1509,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Closure, {\n      className: \"custom_icons\",\n      width: \"18\",\n      height: \"23\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1516,\n        columnNumber: 39\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(reportId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REPORT\"\n      }) //onClick={() => this.specificationReport(reportId)}\n      ,\n      onClick: () => this.props.generateControlBasedReport(reportId, this.props.Login.masterData.selectedWorklist, this.props.Login, \"worklist\", this.props.Login.masterData.selectedWorklist.nworklistcode),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1520,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Report, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1527,\n        columnNumber: 39\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1537,\n        columnNumber: 29\n      }\n    }, selectedWorklist && /*#__PURE__*/React.createElement(CustomTab, {\n      activeKey: this.props.Login.activeKey ? this.props.Login.activeKey : \"IDS_WORKLISTSAMPLE\",\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1540,\n        columnNumber: 33\n      }\n    }))) : \"\"))))))), (this.props.Login.openModal || this.props.Login.openChildModal) && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal || this.props.Login.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      mandatoryFields: mandatoryFields,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      hideSave: this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" ? true : false,\n      size: this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" || this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\" ? \"xl\" : \"lg\",\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1582,\n          columnNumber: 17\n        }\n      }) : this.props.Login.screenName === \"IDS_WORKLIST\" ? /*#__PURE__*/React.createElement(AddWorklistSection //onNumericInputOnChange={this.onNumericInputOnChange}\n      , {\n        selectedRecord: this.props.Login.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        SectionValue: this.props.Login.Section,\n        TestValue: this.props.Login.Test,\n        handleDateChange: this.handleDateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1590,\n          columnNumber: 19\n        }\n      }) : this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\" ? /*#__PURE__*/React.createElement(AddWorklistSample, {\n        selectionChange: this.selectionChange,\n        headerSelectionChange: this.headerSelectionChange,\n        addComponentDataList: this.state.addComponentDataList || [],\n        addSelectAll: this.state.addSelectAll //onNumericInputOnChange={this.onNumericInputOnChange}\n        ,\n        selectedRecord: this.props.Login.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        TestValue: this.props.Login.Test,\n        userInfo: this.props.Login.userInfo,\n        handleDateChange: this.handleDateChange,\n        dataResult: this.state.dataResult ? this.state.dataResult : process(this.state.addComponentDataList || [], this.state.dataState ? this.state.dataState : {\n          skip: 0,\n          take: 10\n        }),\n        dataState: this.state.dataState ? this.state.dataState : {\n          skip: 0,\n          take: 10\n        },\n        dataStateChangeWorklistSample: this.dataStateChangeWorklistSample,\n        nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        addSaveDataGrid: this.addSaveDataGrid,\n        addComponentSortedList: this.state.addComponentSortedList || [],\n        handleClickDelete: this.handleClickDelete,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1603,\n          columnNumber: 21\n        }\n      }) : this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n        className: \"one\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1629,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1630,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(SpecificationInfo, {\n        controlMap: this.state.controlMap,\n        auditInfoFields: auditInfoFields,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedSpecification: this.props.Login.masterData.viewdetails,\n        userInfo: this.props.Login.userInfo,\n        selectedNode: this.props.Login.masterData.selectedNode,\n        selectedRecord: this.state.filterData,\n        approvalRoleActionDetail: this.props.Login.masterData.ApprovalRoleActionDetail,\n        screenName: \"IDS_PREVIOUSRESULTVIEW\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1631,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1645,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"ntransactiontestcode\",\n        data: this.props.Login.masterData.AuditModifiedComments || [],\n        detailedFieldList: this.feildsForGrid,\n        extractedColumnList: this.feildsForGrid,\n        dataResult: this.props.Login.masterData.AuditModifiedComments && this.props.Login.masterData.AuditModifiedComments.length > 0 && process(this.props.Login.masterData.AuditModifiedComments, this.state.dataState ? this.state.dataState : {\n          skip: 0,\n          take: 10\n        }) //dataState={{ skip: 0, take: 10 }}\n        ,\n        dataState: this.state.dataState ? this.state.dataState : {\n          skip: 0,\n          take: 10\n        },\n        selectionChange: this.selectionChange,\n        headerSelectionChange: this.headerSelectionChange,\n        pageable: true,\n        scrollable: 'scrollable',\n        dataStateChange: this.dataStateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1646,\n          columnNumber: 25\n        }\n      })) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1563,\n        columnNumber: 11\n      }\n    }), this.state.showConfirmAlert ? this.confirmAlert() : \"\", this.props.Login.modalShow ? /*#__PURE__*/React.createElement(ModalShow, {\n      modalShow: this.props.Login.modalShow,\n      closeModal: this.closeModalShow,\n      onSaveClick: this.onSaveModalFilterName,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      mandatoryFields: mandatoryFieldsFilter,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      modalTitle: this.props.Login.modalTitle,\n      modalBody: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1690,\n          columnNumber: 17\n        }\n      }) : /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1698,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FormTextarea, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_FILTERNAME\"\n        }),\n        name: \"sfiltername\" // type=\"text\"\n        ,\n        onChange: this.onInputOnChange,\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_FILTERNAME\"\n        }),\n        value: this.state.selectedRecord ? this.state.selectedRecord.sfiltername : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: \"50\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1699,\n          columnNumber: 19\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1678,\n        columnNumber: 11\n      }\n    }) : \"\");\n  } //Ate234 janakumar ALPD-5000 Work List -> To get previously saved filter details when click the filter name\n\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      selectedRecord,\n      addedComponentList,\n      userRoleControlRights,\n      controlMap,\n      filterData,\n      nfilterInstrumentCategory,\n      filterInstrumentCategory,\n      RegistrationSubTypeList,\n      FilterStatusList,\n      SampletypeList,\n      RegistrationTypeList,\n      DynamicGridItem,\n      DynamicGridMoreItem,\n      ConfigVersionList,\n      subsampleGridItem,\n      sampleGridItem,\n      testGridItem = [],\n      samplegridmoreitem,\n      testGridItems,\n      addSelectAll,\n      deleteSelectAll\n    } = this.state;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      updateState = true;\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      updateState = true;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\n      RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\n      const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\n      RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\n      const FilterStatusListMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\", \"stransdisplaystatus\", undefined, undefined, false);\n      FilterStatusList = FilterStatusListMap.get(\"OptionList\");\n      const SampletypeListMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'ascending', 'nsampletypecode', false);\n      SampletypeList = SampletypeListMap.get(\"OptionList\");\n      const ConfigVersionListMap = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], \"napprovalconfigversioncode\", \"sversionname\", 'descending', 'ntransactionstatus', false);\n      ConfigVersionList = ConfigVersionListMap.get(\"OptionList\");\n      nfilterInstrumentCategory = this.state.nfilterInstrumentCategory || {};\n      addSelectAll = false;\n      deleteSelectAll = true;\n\n      if (this.props.Login.masterData.SelectedInsCat && this.props.Login.masterData.SelectedInsCat !== previousProps.Login.masterData.SelectedInsCat) {\n        nfilterInstrumentCategory = {\n          label: this.props.Login.masterData.SelectedInsCat.stestsynonym,\n          value: this.props.Login.masterData.SelectedInsCat.ntestcode,\n          item: this.props.Login.masterData.SelectedInsCat\n        };\n      }\n\n      filterData = this.generateBreadCrumData();\n      updateState = true;\n    }\n\n    if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n      const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n      testGridItem[0] = dynamicColumn.testListFields.releasetestfields[0] ? dynamicColumn.testListFields.releasetestfields[0] : [];\n      sampleGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n      subsampleGridItem = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n      testGridItems = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : []; //testGridItem= dynamicColumn.conditionfields ? dynamicColumn.conditionfields : [];\n\n      DynamicGridItem = [...sampleGridItem, ...subsampleGridItem, ...testGridItems.slice(1), ...testGridItem];\n      samplegridmoreitem = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n      DynamicGridMoreItem = [...samplegridmoreitem]; //DynamicGridItem.push(dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [])\n    }\n\n    if (this.props.Login.masterData.filterInstrumentCategory !== previousProps.Login.masterData.filterInstrumentCategory) {\n      const insCategoryMap = constructOptionList(this.props.Login.masterData.filterInstrumentCategory || [], \"ntestcode\", \"stestsynonym\", \"ntestcategorycode\", \"ascending\", false);\n      filterInstrumentCategory = insCategoryMap.get(\"OptionList\");\n\n      if (insCategoryMap.get(\"DefaultValue\")) {\n        nfilterInstrumentCategory = insCategoryMap.get(\"DefaultValue\");\n      } else if (filterInstrumentCategory && filterInstrumentCategory.length > 0) {\n        nfilterInstrumentCategory = filterInstrumentCategory[0];\n      }\n\n      updateState = true;\n    } // let updateState = false;\n\n\n    let updateStateObject = {};\n\n    if (this.props.Login.addedComponentList !== previousProps.Login.addedComponentList) {\n      addSelectAll = false;\n      deleteSelectAll = true;\n      this.setState({\n        addedComponentList: this.props.Login.addedComponentList,\n        addSelectAll,\n        deleteSelectAll\n      });\n    }\n\n    if (this.props.addedComponentList !== previousProps.addedComponentList) {\n      // this.setState({ addedComponentList : this.props.addedComponentList});\n      updateState = true;\n      updateStateObject = { ...updateStateObject,\n        addedComponentList: this.props.addedComponentList\n      };\n    }\n\n    if (this.props.Login.dataState !== previousProps.Login.dataState) {\n      if (this.props.Login.dataState) {\n        delete this.props.Login.dataState.filter;\n        delete this.props.Login.dataState.sort;\n        this.setState({\n          dataState: this.props.Login.dataState\n        });\n      }\n    }\n\n    if (this.props.Login.addComponentDataList !== previousProps.Login.addComponentDataList) {\n      this.setState({\n        addComponentDataList: this.props.Login.addComponentDataList\n      });\n    }\n\n    if (this.props.Login.addComponentSortedList !== previousProps.Login.addComponentSortedList) {\n      this.setState({\n        addComponentSortedList: this.props.Login.addComponentSortedList\n      });\n    } //ADDed by Neeraj-ALPD-5136\n    //WorkList Screen -> Including filter in Data selection Kendo Grid\n\n\n    if (this.props.Login.masterData.WorklistSamples !== previousProps.Login.masterData.WorklistSamples) {\n      let worklistSamplesList = this.props.Login.masterData.WorklistSamples || [];\n      let updatedSortedList = worklistSamplesList.sort((a, b) => {\n        const A = a.nworklistsamplecode;\n        const B = b.nworklistsamplecode; // Corrected from 'a' to 'b'\n\n        return A - B; // Sort in ascending order\n      });\n      this.setState({\n        WorklistSamples: updatedSortedList\n      });\n    }\n\n    if (updateState) {\n      this.setState({\n        selectedRecord,\n        userRoleControlRights,\n        controlMap,\n        filterData,\n        nfilterInstrumentCategory,\n        filterInstrumentCategory,\n        RegistrationSubTypeList,\n        FilterStatusList,\n        SampletypeList,\n        RegistrationTypeList,\n        DynamicGridItem,\n        ConfigVersionList,\n        DynamicGridMoreItem,\n        addSelectAll,\n        deleteSelectAll\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    //obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.Worklist) {\n      const obj = convertDateValuetoString(this.props.Login.masterData.fromdate, this.props.Login.masterData.todate, this.props.Login.userInfo);\n      breadCrumbData.push({\n        \"label\": \"IDS_FROM\",\n        \"value\": obj.breadCrumbFrom\n      }, {\n        \"label\": \"IDS_TO\",\n        \"value\": obj.breadCrumbto\n      }, // {\n      //   \"label\": \"IDS_SAMPLETYPE\",\n      //   \"value\": this.props.Login.masterData.defaultSampleTypeValue ? this.props.Login.masterData.defaultSampleTypeValue.ssampletypename || \"NA\" :\n      //     this.props.Login.masterData.defaultSampleTypeValue ? this.props.Login.masterData.defaultSampleTypeValue.ssampletypename || \"NA\" : \"NA\"\n      // },\n      {\n        \"label\": \"IDS_REGTYPE\",\n        \"value\": this.props.Login.masterData.defaultRegTypeValue ? this.props.Login.masterData.defaultRegTypeValue.sregtypename || \"NA\" : this.props.Login.masterData.defaultRegTypeValue ? this.props.Login.masterData.defaultRegTypeValue.sregtypename || \"NA\" : \"NA\"\n      }, {\n        \"label\": \"IDS_REGSUBTYPE\",\n        \"value\": this.props.Login.masterData.defaultRegSubTypeValue ? this.props.Login.masterData.defaultRegSubTypeValue.sregsubtypename || \"NA\" : this.props.Login.masterData.defaultRegSubTypeValue ? this.props.Login.masterData.defaultRegSubTypeValue.sregsubtypename : \"NA\"\n      }, // {\n      //   \"label\": \"IDS_CONFIGVERSION\",\n      //   \"value\": this.props.Login.masterData.defaultApprovalVersion ?\n      //     this.props.Login.masterData.defaultApprovalVersion.sversionname || \"NA\" :\n      //     this.props.Login.masterData.defaultApprovalVersion ? this.props.Login.masterData.defaultApprovalVersion.sversionname || \"NA\" : \"NA\"\n      // },\n      {\n        \"label\": \"IDS_WORKLISTSTATUS\",\n        \"value\": this.props.Login.masterData.defaultFilterStatusValue ? this.props.Login.masterData.defaultFilterStatusValue.stransdisplaystatus || \"NA\" : this.props.Login.masterData.defaultFilterStatusValue ? this.props.Login.masterData.defaultFilterStatusValue.stransdisplaystatus || \"NA\" : \"NA\"\n      } //];\n      );\n    }\n\n    return breadCrumbData;\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  getWorklistDetail,\n  filterColumnData,\n  getSectionAndTest,\n  updateStore,\n  validateEsignCredential,\n  onWorklistApproveClick,\n  OpenDate,\n  CloseDate,\n  viewAttachment,\n  getInstrumentCombo,\n  getWorklistSample,\n  getRegTypeTestWise,\n  getRegTypeWorklist,\n  getSectionbaseTest,\n  getWorklistDetailFilter,\n  getEditSectionAndTest,\n  createWorklistCreation,\n  getConfigVersionTestWise,\n  ViewSampleDetails,\n  getWorklisthistoryAction,\n  reportWorklist,\n  getRegSubTypeWise,\n  insertWorklist,\n  generateControlBasedReport,\n  validateEsignforWorklist,\n  getWorklistFilterDetails\n})(injectIntl(WorkList));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/pages/worklist/WorkList.jsx"],"names":["React","Component","Row","Col","Card","Nav","FormGroup","FormLabel","connect","toast","FontAwesomeIcon","faCheck","faTrashAlt","faBolt","WorklistPreparationFilter","rearrangeDateFormat","convertDateValuetoString","injectIntl","Esign","AddWorklistSection","AddWorklistSample","CustomTab","WorklistHistoryTab","WorklistSampleTab","designProperties","transactionStatus","REPORTTYPE","SUBSAMPLEAUDITMULTILINGUALFIELDS","designComponents","SpecificationInfo","CustomPopover","ModalShow","FormTextarea","callService","crudMaster","validateEsignCredential","updateStore","getSectionAndTest","getWorklistDetail","OpenDate","CloseDate","viewAttachment","getInstrumentCombo","getWorklistSample","getRegTypeTestWise","getRegTypeWorklist","getSectionbaseTest","onWorklistApproveClick","getWorklistDetailFilter","getEditSectionAndTest","createWorklistCreation","filterColumnData","getConfigVersionTestWise","ViewSampleDetails","getWorklisthistoryAction","reportWorklist","getRegSubTypeWise","insertWorklist","generateControlBasedReport","validateEsignforWorklist","getWorklistFilterDetails","ListMaster","DEFAULT_RETURN","SlideOutModal","showEsign","getControlMap","constructOptionList","ContentPanel","MediaLabel","process","ConfirmMessage","BreadcrumbComponent","Affix","DataGrid","mapStateToProps","state","Login","WorkList","constructor","props","sidebarExpandCollapse","setState","sidebarview","handleDateChange","dateName","dateValue","Date","fromdate","masterData","fromDate","userInfo","todate","toDate","obj","inputParam","inputData","nflag","nregtypecode","RegTypeValue","nregsubtypecode","RegSubTypeValue","nneedtemplatebasedflow","String","userinfo","realApprovalConfigVersionList","realApprovalVersionValue","onFilterComboChange","comboData","fieldName","inputParamData","nsampletypecode","value","defaultSampleTypeValue","item","FilterStatusValue","updateInfo","typeName","data","defaultApprovalVersionValue","onInputOnChange","event","optional","selectedRecord","target","type","name","checked","onSaveClick","saveType","formRef","instSection","screenName","postParam","undefined","nstatus","nmastersitecode","defaultRegTypeValue","defaultRegSubTypeValue","ndesigntemplatemappingcode","napprovalconfigversioncode","controlMap","has","get","ncontrolcode","defaultFilterStatusValue","ntransactionstatus","ALL","FilterStatus","map","join","operation","selectedWorklist","nworklistcode","classUrl","methodUrl","searchRef","userRoleControlRights","nformcode","ncontrolCode","loadEsign","screenData","validList","addedComponentList","length","saveList","compList","addComponentSortedList","x","selected","indexOf","ntransactionsamplecode","push","worklistcompcreationlist","worklistcreation","dataState","selectedId","warn","intl","formatMessage","id","DeleteWorklistSample","sectionDataState","nsitecode","ntranssitecode","nworklistsamplecode","ntransactiontestcode","sarno","ssamplearno","stestsynonym","openChildModal","dataStateChangeWorklistSample","updatedList","filter","addComponentDataListCopy","addComponentDataList","forEach","exists","some","dataResult","addSelectAll","valiateCheckAll","selectionChange","dataItem","newItem","JSON","parse","stringify","item1","deleteSelectAll","valiateCopy","dataStateChange","specificationReport","stablename","primaryKeyField","sreportlink","reportSettings","smrttemplatelink","nreporttypecode","CONTROLBASED","primaryKeyValue","nworklistcode_componentcode","nworklistcode_componentname","NUMBER","ntranscode","headerSelectionChange","syntheticEvent","findIndex","olditem","addedComponentData","deletedListdData","deletedList","npreregno","addSaveDataGrid","filterdata1","take","sortListedData1","ListedData","sortListedData","filterdata","addedItem","handleClickDelete","row","updatedAddList","validateEsign","modalName","sreason","password","confirmMessage","tabDetail","tabMap","Map","deleteSecId","addSampleId","viewSampleId","set","WorklistSamples","gridfillingColumn","DynamicGridItem","gridfillingColumnGridMoreItem","DynamicGridMoreItem","defaultRecord","viewSample","settings","WorklistHistory","clickFilterDetail","current","change","FromDate","ToDate","nfilternamecode","sampletypecode","RealSampleTypeValue","regtypecode","parseInt","realRegTypeValue","regsubtypecode","realRegSubTypeValue","approvalconfigurationcode","napprovalconfigcode","napprovalversioncode","designtemplatcode","realDesignTemplateMappingValue","openFilterName","modalShow","isFilterDetail","modalTitle","onSaveModalFilterName","dfrom","dto","sfiltername","sampleTypeValue","regTypeValue","regSubTypeValue","filterStatusValue","RealFilterStatusValue","approvalConfigValue","designTemplateMappingValue","ntransactionstatusfilter","napproveconfversioncode","needExtraKeys","info","onTabChange","tabProps","activeKey","reloadData","searchedData","realFromDate","realToDate","defaultApprovalVersion","searchTestRef","skip","testskip","testtake","isClearSearch","ConfirmDelete","deleteId","confirm","DeleteWorklist","inputListName","selectedObject","fetchUrl","fecthInputObject","nneedsampleandhistory","YES","openModal","onApproveClick","esignNeeded","onComboChange","caseNo","closeModal","viewdetails","closeModalShow","openFilter","showFilter","closeFilter","inputValues","RegistrationSubType","realRegistrationSubTypeList","RegistrationType","realRegistrationTypeList","realFilterStatusList","SampleType","realSampleTypeList","ApprovalConfigVersion","ApprovalVersionValue","SampleTypeValue","onFilterSubmit","saveFilterSubmit","error","Instrument","RegistrationSubTypeList","FilterStatusList","SampletypeList","ConfigVersionList","createRef","searchFieldList","temparray","option","VALUE","LABEL","slanguagetypecode","sortedList","addedComponentLists","listData","copyingList","item2","copyingListData","existsInAddComponentDataList","selectAll","getDerivedStateFromProps","masterStatus","errorCode","render","mandatoryFields","feildsForGrid","genericLabel","extractedColumnList","auditInfoFields","mandatory","idsName","dataField","mandatoryLabel","controlType","addId","approvalId","reportId","filterParam","filterNameId","filterDetailId","mandatoryFieldsFilter","breadCrumbData","filterData","FilterName","Worklist","worklist","IDS_WORKLISTFILTER","RegistrationTypeList","stateRegistrationType","stateRegistrationSubType","parentFunction","sworklistno","stransdisplaystatus","Section","Test","nneedsubsample","selectedNode","ApprovalRoleActionDetail","AuditModifiedComments","showConfirmAlert","confirmAlert","onEsignInputOnChange","componentDidUpdate","previousProps","updateState","nfilterInstrumentCategory","filterInstrumentCategory","subsampleGridItem","sampleGridItem","testGridItem","samplegridmoreitem","testGridItems","Object","values","RegistrationSubTypeListMap","RegistrationTypeListMap","FilterStatusListMap","SampletypeListMap","ConfigVersionListMap","SelectedInsCat","label","ntestcode","generateBreadCrumData","DynamicDesign","dynamicColumn","jsondata","testListFields","releasetestfields","samplegriditem","subsamplelistitem","testlistitem","slice","insCategoryMap","updateStateObject","sort","worklistSamplesList","updatedSortedList","a","b","A","B","breadCrumbFrom","breadCrumbto","sregtypename","sregsubtypename"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck, faTrashAlt, faBolt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport WorklistPreparationFilter from './WorklistPreparationFilter'\r\nimport { rearrangeDateFormat, convertDateValuetoString } from '../../components/CommonScript';\r\nimport { injectIntl } from \"react-intl\";\r\nimport Esign from \"../audittrail/Esign\";\r\nimport AddWorklistSection from '../worklist/AddWorklistSection';\r\nimport AddWorklistSample from '../worklist/AddWorklistSample';\r\nimport CustomTab from \"../../components/custom-tabs/custom-tabs.component\";\r\nimport WorklistHistoryTab from \"./WorklistHistoryTab\";\r\nimport WorklistSampleTab from \"./WorklistSampleTab\";\r\nimport { designProperties, transactionStatus, REPORTTYPE, SUBSAMPLEAUDITMULTILINGUALFIELDS, designComponents } from '../../components/Enumeration';\r\nimport SpecificationInfo from '../testgroup/SpecificationInfo';\r\n//import { ReactComponent as Closure } from '../../assets/image/prepared-worklist.svg';\r\nimport { ReactComponent as Closure } from '../../assets/image/prepared.svg';\r\nimport { ReactComponent as ReportIcon } from '../../assets/image/report-Icon.svg';\r\n//import { ReactComponent as ReportIcon } from '../../assets/image/report-svgrepo-com.svg';\r\nimport { ReactComponent as Report } from '../../assets/image/Report.svg';\r\nimport { ReactComponent as SaveIcon } from '../../assets/image/save_icon.svg';\r\nimport CustomPopover from '../../components/customPopover';\r\nimport ModalShow from '../../components/ModalShow';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\n\r\nimport {\r\n  callService,\r\n  crudMaster,\r\n  validateEsignCredential,\r\n  updateStore,\r\n  getSectionAndTest,\r\n  getWorklistDetail,\r\n  OpenDate,\r\n  CloseDate, viewAttachment, getInstrumentCombo, getWorklistSample, getRegTypeTestWise,\r\n  getRegTypeWorklist, getSectionbaseTest, onWorklistApproveClick\r\n  , getWorklistDetailFilter, getEditSectionAndTest, createWorklistCreation, filterColumnData, getConfigVersionTestWise,\r\n  ViewSampleDetails, getWorklisthistoryAction, reportWorklist, getRegSubTypeWise,\r\n  insertWorklist, generateControlBasedReport, validateEsignforWorklist, getWorklistFilterDetails\r\n} from \"../../actions\";\r\n\r\nimport ListMaster from \"../../components/list-master/list-master.component\";\r\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\r\nimport SlideOutModal from \"../../components/slide-out-modal/SlideOutModal\";\r\n\r\nimport {\r\n  showEsign,\r\n  getControlMap,\r\n  constructOptionList,\r\n} from \"../../components/CommonScript\";\r\nimport { ContentPanel, MediaLabel } from \"../../components/App.styles\";\r\n\r\nimport { process } from \"@progress/kendo-data-query\";\r\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\r\n\r\nimport BreadcrumbComponent from \"../../components/Breadcrumb.Component\";\r\nimport { Affix } from \"rsuite\";\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nconst mapStateToProps = (state) => {\r\n  return { Login: state.Login };\r\n};\r\n\r\nclass WorkList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const sectionDataState = { skip: 0, take: 10 };\r\n    this.state = {\r\n      selectedRecord: {},\r\n      error: \"\",\r\n      userRoleControlRights: [],\r\n      selectedWorklist: undefined,\r\n      controlMap: new Map(),\r\n      Instrument: [],\r\n      sectionDataState,\r\n      addComponentDataList: [],\r\n      addedComponentList: [],\r\n      RegistrationSubTypeList: [], FilterStatusList: [], SampletypeList: [], RegTypeValue: [], ConfigVersionList: [],\r\n      sidebarview: false\r\n    };\r\n    this.searchRef = React.createRef();\r\n    this.searchFieldList = [\"sworklistno\", \"stestname\"];\r\n    this.confirmMessage = new ConfirmMessage();\r\n  }\r\n  sidebarExpandCollapse = () => {\r\n    this.setState({\r\n      sidebarview: true\r\n    })\r\n  }\r\n\r\n  handleDateChange = (dateName, dateValue) => {\r\n\r\n\r\n    if (dateValue === null) {\r\n      dateValue = new Date();\r\n    }\r\n    // let toDate;\r\n    // let fromDate;\r\n    let fromdate = this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date()\r\n    let todate = this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date()\r\n    let obj = {}\r\n    if (dateName === 'fromDate') {\r\n      obj = convertDateValuetoString(dateValue, todate, this.props.Login.userInfo)\r\n      fromdate = obj.fromDate\r\n      todate = obj.toDate\r\n      let fromDate = obj.fromDate\r\n      let toDate = obj.toDate\r\n    } else {\r\n      obj = convertDateValuetoString(fromdate, dateValue, this.props.Login.userInfo)\r\n      fromdate = obj.fromDate\r\n      todate = obj.toDate\r\n      let fromDate = obj.fromDate\r\n      let toDate = obj.toDate\r\n\r\n    }\r\n    let inputParam = {\r\n      inputData: {\r\n        nflag: 2,\r\n        nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\r\n        nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\r\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n        fromdate: String(fromdate),\r\n        todate: String(todate),\r\n        userinfo: this.props.Login.userInfo,\r\n        realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n        realApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue,\r\n      },\r\n      masterData: this.props.Login.masterData\r\n\r\n    }\r\n    this.props.getConfigVersionTestWise(inputParam)\r\n\r\n  };\r\n\r\n\r\n\r\n  onFilterComboChange = (comboData, fieldName) => {\r\n\r\n    if (comboData) {\r\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n      let inputParamData = {};\r\n      if (fieldName === 'nsampletypecode') {\r\n        //if (comboData.value !== this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode) {\r\n        inputParamData = {\r\n          nflag: 2,\r\n          fromdate: obj.fromDate,\r\n          todate: obj.toDate,\r\n          nsampletypecode: comboData.value,\r\n          userinfo: this.props.Login.userInfo,\r\n          masterData: this.props.Login.masterData,\r\n          defaultSampleTypeValue: comboData.item,\r\n          realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n          realApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue,\r\n        };\r\n        this.props.getRegTypeWorklist(inputParamData)\r\n        // }\r\n      } else if (fieldName === 'nregtypecode') {\r\n        //  if (comboData.value !== this.props.Login.masterData.defaultRegTypeValue.nregtypecode) {\r\n        inputParamData = {\r\n          nflag: 3,\r\n          fromdate: obj.fromDate,\r\n          todate: obj.toDate,\r\n          nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode,\r\n          nregtypecode: comboData.value,\r\n          userinfo: this.props.Login.userInfo,\r\n          masterData: this.props.Login.masterData,\r\n          nregtypecode: comboData.value,\r\n          realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n          realApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue,\r\n          masterData: {\r\n            ...this.props.Login.masterData,\r\n            RegTypeValue: comboData.item,\r\n            //RegistrationSubTypeList: inputParam.masterData.RegistrationSubTypeList\r\n          }\r\n          //defaultRegTypeValue: comboData.item\r\n\r\n\r\n        }\r\n        this.props.getRegSubTypeWise(inputParamData)\r\n        //  }\r\n\r\n\r\n\r\n      } else if (fieldName === 'nregsubtypecode') {\r\n\r\n        //  if (comboData.value !== this.props.Login.masterData.RegSubTypeValue.nregsubtypecode) {\r\n        let inputData = {\r\n          nflag: 4,\r\n          fromdate: obj.fromDate,\r\n          todate: obj.toDate,\r\n          nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode,\r\n          nregtypecode: this.props.Login.masterData.RegTypeValue.nregtypecode,\r\n          nneedtemplatebasedflow: comboData.item.nneedtemplatebasedflow,\r\n          nregsubtypecode: comboData.value,\r\n          userinfo: this.props.Login.userInfo,\r\n          realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n          realApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue,\r\n        }\r\n        inputParamData = {\r\n          inputData,\r\n          masterData: {\r\n            ...this.props.Login.masterData,\r\n            RegSubTypeValue: comboData.item,\r\n            //RegistrationSubTypeList: inputParam.masterData.RegistrationSubTypeList\r\n          }\r\n        }\r\n        this.props.getConfigVersionTestWise(inputParamData)\r\n        // }\r\n      }\r\n\r\n      else if (fieldName === 'ntransactionstatus') {\r\n        // if (comboData.value !== this.props.Login.masterData.FilterStatusValue.ntransactionstatus) {\r\n        let masterData = { ...this.props.Login.masterData, FilterStatusValue: comboData.item }\r\n        const updateInfo = {\r\n          typeName: DEFAULT_RETURN,\r\n          data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        //   }\r\n      }\r\n\r\n\r\n      else if (fieldName === 'napproveconfversioncode') {\r\n        // if (comboData.value !== this.props.Login.masterData.defaultApprovalVersionValue.napproveconfversioncode) {\r\n        let masterData = { ...this.props.Login.masterData, defaultApprovalVersionValue: comboData.item }\r\n        const updateInfo = {\r\n          typeName: DEFAULT_RETURN,\r\n          data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        //  }\r\n      }\r\n\r\n      //\r\n    }\r\n  }\r\n\r\n  onInputOnChange = (event, optional) => {\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n    if (event.target.type === \"checkbox\") {\r\n      selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n    } else if (event.target.type === 'radio') {\r\n      selectedRecord[event.target.name] = optional;\r\n    } else {\r\n      selectedRecord[event.target.name] = event.target.value;\r\n    }\r\n    this.setState({ selectedRecord });\r\n  };\r\n\r\n\r\n\r\n  onSaveClick = (saveType, formRef) => {\r\n    // this.searchRef.current.value = \"\";\r\n    let inputData = [];\r\n    let instSection = [];\r\n    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromdate, this.props.Login.masterData.todate, this.props.Login.userInfo)\r\n    inputData['fromdate'] = obj.fromDate;\r\n    inputData['todate'] = obj.toDate;\r\n    if (this.props.Login.screenName === \"IDS_WORKLIST\") {\r\n      let postParam = undefined;\r\n      inputData[\"worklist\"] = {\r\n        nstatus: this.props.Login.userInfo.nmastersitecode,\r\n      };\r\n      inputData[\"worklist\"][\"nsampletypecode\"] = this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode\r\n      inputData[\"worklist\"][\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"].value\r\n      inputData[\"worklist\"][\"ntestcode\"] = this.state.selectedRecord[\"ntestcode\"].value\r\n      //inputData[\"worklist\"][\"nregtypecode\"] = this.props.Login.masterData.RegTypeValue.nregtypecode\r\n      inputData[\"worklist\"][\"nregtypecode\"] = this.props.Login.masterData.defaultRegTypeValue.nregtypecode\r\n      //inputData[\"worklist\"][\"nregsubtypecode\"] = this.props.Login.masterData.RegSubTypeValue.nregsubtypecode\r\n      inputData[\"worklist\"][\"nregsubtypecode\"] = this.props.Login.masterData.defaultRegSubTypeValue.nregsubtypecode\r\n      inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode\r\n      inputData[\"napprovalconfigversioncode\"] = (this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode)\r\n      inputData[\"ncontrolCode\"] =\r\n        this.state.controlMap.has(\"AddSamples\") &&\r\n        this.state.controlMap.get(\"AddSamples\").ncontrolcode;\r\n      // let defaultFilterStatusValue={};\r\n      // let FilterStatusValue={};\r\n      inputData[\"ntransactionstatus\"] = (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1;\r\n      // this.props.Login.masterData.FilterStatus.map(item => {if(item.ntransactionstatus === transactionStatus.DRAFT){\r\n      //   defaultFilterStatusValue = item;\r\n      //   FilterStatusValue = item;}\r\n      // });\r\n      // let defaultFilterStatusValue=this.props.Login.masterData.FilterStatus[1];\r\n      // let FilterStatusValue=this.props.Login.masterData.FilterStatus[1];\r\n      if (this.props.Login.operation === \"update\") { inputData[\"worklist\"][\"nworklistcode\"] = this.props.Login.masterData.selectedWorklist.nworklistcode }\r\n\r\n      const inputParam = {\r\n        classUrl: this.props.Login.inputParam.classUrl,\r\n        methodUrl: \"Worklist\",\r\n        inputData: inputData,\r\n        operation: this.props.Login.operation,\r\n        saveType,\r\n        formRef,\r\n        postParam,\r\n        searchRef: this.searchRef,\r\n      };\r\n      const masterData = {...this.props.Login.masterData};\r\n      // let masterData = {...this.props.Login.masterData\r\n      //   ,defaultFilterStatusValue,\r\n      //   FilterStatusValue      }\r\n      if (\r\n        showEsign(\r\n          this.props.Login.userRoleControlRights,\r\n          this.props.Login.userInfo.nformcode,\r\n          this.props.Login.ncontrolCode\r\n        )\r\n      ) {\r\n        const updateInfo = {\r\n          typeName: DEFAULT_RETURN,\r\n          data: {\r\n            loadEsign: true,\r\n            screenData: {\r\n              inputParam, masterData: {\r\n                masterData\r\n              }\r\n            },\r\n            saveType,\r\n          },\r\n        };\r\n        this.props.updateStore(updateInfo);\r\n      } else {\r\n        //this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        this.props.insertWorklist(inputParam, masterData);\r\n      }\r\n    }\r\n\r\n\r\n\r\n    //add / edit  \r\n\r\n    let validList = true;\r\n    if (this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\" && this.state.addedComponentList.length > 1000) {\r\n      validList = false;\r\n    }\r\n\r\n    if (validList) {\r\n      let saveList = [];\r\n      if (this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\") {\r\n        const compList = this.state.addComponentSortedList.map(x => {\r\n          delete (x.selected);\r\n          //return {...x, 'sregistereddate':formatInputDate(x.sregistereddate, false)}\r\n          return x;\r\n        }) || [];\r\n        //compList.map(item=>saveList.push({\"npreregno\": item.npreregno}));\r\n        if (compList.length > 0) {\r\n\r\n          compList.map(item => saveList.indexOf(item.ntransactionsamplecode) === -1 ?\r\n            saveList.push(item) : \"\");\r\n          const masterData = {...this.props.Login.masterData};\r\n          const inputData = {\r\n            worklistcompcreationlist: saveList,\r\n            userinfo: this.props.Login.userInfo,\r\n            worklistcreation: this.props.Login.masterData.selectedWorklist,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\r\n          };\r\n\r\n          let dataState = undefined;\r\n          let selectedId = null;\r\n          let postParam = undefined;\r\n\r\n          const inputParam = {\r\n            classUrl: \"worklist\",\r\n            methodUrl: \"WorklistCreation\",\r\n            inputData: inputData, selectedId, dataState, postParam,\r\n            operation: \"create\", saveType, masterData\r\n          };\r\n\r\n\r\n\r\n          if (\r\n            showEsign(\r\n              this.props.Login.userRoleControlRights,\r\n              this.props.Login.userInfo.nformcode,\r\n              this.props.Login.ncontrolCode\r\n            )\r\n          ) {\r\n            const updateInfo = {\r\n              typeName: DEFAULT_RETURN,\r\n              data: {\r\n                loadEsign: true, screenData: { inputParam, masterData: masterData }, saveType\r\n              }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n          }\r\n          else {\r\n            //this.props.crudMaster(inputParam,masterData, \"openChildModal\");\r\n            this.props.createWorklistCreation(inputParam);\r\n          }\r\n\r\n\r\n        }\r\n        else {\r\n          //this.props.crudMaster(inputParam,masterData, \"openChildModal\");\r\n          toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELCETONESAMPLE\" }));\r\n        }\r\n\r\n\r\n      }\r\n\r\n\r\n\r\n\r\n    }\r\n    else {\r\n      toast.warn(this.props.intl.formatMessage({ id: \"IDS_EXCEEDSMAXINSERT\" }));\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  DeleteWorklistSample = (operation, ncontrolCode) => {\r\n    let inputData = [];\r\n    if (operation.screenName === \"IDS_WORKLISTSAMPLE\") {\r\n      const dataState = this.state.sectionDataState;\r\n      inputData[\"worklistsample\"] = {\r\n        nsitecode: this.props.Login.userInfo.ntranssitecode,\r\n      };\r\n      inputData[\"worklistsample\"][\"nworklistcode\"] =\r\n        operation.selectedRecord.nworklistcode;\r\n      inputData[\"worklistsample\"][\"nworklistsamplecode\"] =\r\n        operation.selectedRecord.nworklistsamplecode;\r\n      inputData[\"worklistsample\"][\"ntransactiontestcode\"] =\r\n        operation.selectedRecord.ntransactiontestcode;\r\n      inputData[\"worklistsample\"][\"ntransactionsamplecode\"] =\r\n        operation.selectedRecord.ntransactionsamplecode;\r\n      inputData[\"worklistsample\"][\"sarno\"] =\r\n        operation.selectedRecord.sarno;\r\n      inputData[\"worklistsample\"][\"ssamplearno\"] =\r\n        operation.selectedRecord.ssamplearno;\r\n      inputData[\"worklistsample\"][\"stestname\"] =\r\n        operation.selectedRecord.stestsynonym;\r\n      inputData[\"worklistsample\"][\"nregsubtypecode\"] =\r\n        operation.selectedRecord.nregsubtypecode;\r\n      inputData[\"worklistsample\"][\"nregtypecode\"] =\r\n        operation.selectedRecord.nregtypecode;\r\n      inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n\r\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n      const inputParam = {\r\n        methodUrl: \"WorklistSample\",\r\n        classUrl: this.props.Login.inputParam.classUrl,\r\n        inputData: inputData,\r\n        operation: \"delete\",\r\n        dataState: dataState,\r\n      };\r\n      const masterData = this.props.Login.masterData;\r\n      if (\r\n        showEsign(\r\n          this.props.Login.userRoleControlRights,\r\n          this.props.Login.userInfo.nformcode,\r\n          operation.ncontrolCode\r\n        )\r\n      ) {\r\n        const updateInfo = {\r\n          typeName: DEFAULT_RETURN,\r\n          data: {\r\n            loadEsign: true,\r\n            screenData: { inputParam, masterData },\r\n            openChildModal: true,\r\n            screenName: \"worklistSample\",\r\n            operation: operation.operation,\r\n          },\r\n        };\r\n        this.props.updateStore(updateInfo);\r\n      } else {\r\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\");\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  gridfillingColumn(data) {\r\n    const temparray = [];\r\n    data && data.map((option) => {\r\n      if (option[designProperties.VALUE] !== \"dregdate\") {\r\n        temparray.push({\r\n          \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\r\n          \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\"\r\n        })\r\n      }\r\n    });\r\n    if (temparray) {\r\n      temparray.push({ \"idsName\": \"IDS_REGISTRATIONDATE\", \"dataField\": \"sregistereddate\", \"width\": \"250px\", \"columnSize\": \"3\" })\r\n    }\r\n    return temparray;\r\n  }\r\n  gridfillingColumnGridMoreItem(data) {\r\n    const temparray = [];\r\n    data && data.map((option) => {\r\n      if (option[designProperties.VALUE] !== \"dregdate\") {\r\n        temparray.push({\r\n          \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\r\n          \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\"\r\n        })\r\n      }\r\n    });\r\n    if (temparray) {\r\n      temparray.push({ \"idsName\": \"IDS_REGISTRATIONDATE\", \"dataField\": \"sregistereddate\", \"width\": \"250px\", \"columnSize\": \"3\" })\r\n    }\r\n    return temparray;\r\n  }\r\n  // onNumericInputOnChange = (value, name) => {\r\n  //   const selectedRecord = this.state.selectedRecord || {};\r\n  //   selectedRecord[name] = value;\r\n  //   this.setState({ selectedRecord });\r\n  // };\r\n  dataStateChangeWorklistSample = (event) => {\r\n    // ADDed by Neeraj-ALPD-5136\r\n    //WorkList Screen -> Including filter in Data selection Kendo Grid \r\n      let updatedList = [];\r\n      if (event.dataState && event.dataState.filter === null) {\r\n        let addComponentDataListCopy = this.state.addComponentDataListCopy ||this.state.addComponentDataList|| [];\r\n        addComponentDataListCopy.forEach(x => {\r\n          // Check if x's ntransactiontestcode exists in addComponentSortedList\r\n          const exists = this.state.addComponentSortedList.some(\r\n            item => item.ntransactiontestcode === x.ntransactiontestcode\r\n          );\r\n          // If it doesn't exist, add it to updatedList\r\n          if (!exists) {\r\n            updatedList.push(x);\r\n          }\r\n        });\r\n      }else{\r\n        updatedList=this.state.addComponentDataList||[]\r\n      }      \r\n      \r\n        this.setState({\r\n          dataResult: process(this.state.addComponentDataList || [], event.dataState),\r\n          dataState: event.dataState,addComponentDataList:updatedList,addSelectAll:event.dataState && event.dataState.filter === null?\r\n          this.valiateCheckAll(updatedList): this.valiateCheckAll(process(updatedList || [], event.dataState).data)\r\n        });\r\n    }\r\n\r\n  // selectionChange = (event) => {\r\n  //   let addedComponentList = this.state.addedComponentList || [];\r\n  //   const addComponentDataList = this.props.Login.addComponentDataList.map(item => {\r\n  //     if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\r\n  //       item.selected = !event.dataItem.selected;\r\n  //       if (item.selected) {\r\n  //         const newItem = JSON.parse(JSON.stringify(item));\r\n  //         newItem[\"jsondata\"] = {}\r\n  //         newItem[\"jsonuidata\"] = {}\r\n  //         delete newItem['selected']\r\n  //         //newItem.selected = false;\r\n  //         newItem[\"jsondata\"]['worklist'] = item\r\n  //         newItem[\"jsonuidata\"]['worklist'] = item\r\n  //         addedComponentList.push(newItem);\r\n  //       }\r\n  //       else {\r\n  //         addedComponentList = addedComponentList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode)\r\n  //       }\r\n  //     }\r\n  //     return item;\r\n  //   });\r\n  //   this.setState({\r\n  //     addComponentDataList, addedComponentList,\r\n  //     addSelectAll: this.valiateCheckAll(addComponentDataList),\r\n  //     deleteSelectAll: this.valiateCheckAll(addedComponentList)\r\n  //   });\r\n  // }\r\n  selectionChange = (event) => {\r\n    let addedComponentList = this.state.addedComponentList || [];\r\n    const addComponentDataList = this.state.addComponentDataList.map(item => {\r\n      if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\r\n        item.selected = !event.dataItem.selected;\r\n        if (item.selected) {\r\n          const newItem = JSON.parse(JSON.stringify(item));\r\n          newItem[\"jsondata\"] = {}\r\n          newItem[\"jsonuidata\"] = {}\r\n          delete newItem['selected']\r\n          //newItem.selected = false;\r\n          newItem[\"jsondata\"]['worklist'] = item\r\n          newItem[\"jsonuidata\"]['worklist'] = item\r\n          addedComponentList.push(newItem);\r\n        }\r\n        else {\r\n          addedComponentList = addedComponentList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode)\r\n        }\r\n      }\r\n      return item;\r\n    });\r\n    this.setState({\r\n      // ADDed by Neeraj-ALPD-5136\r\n      //WorkList Screen -> Including filter in Data selection Kendo Grid \r\n           addSelectAll: this.valiateCheckAll(this.state.dataState && this.state.dataState.filter \r\n            && this.state.dataState.filter !== null && this.state.dataState.filter!==undefined\r\n         ? process(addComponentDataList || [], this.state.dataState).data : addComponentDataList),\r\n      addComponentDataList, addedComponentList,\r\n      //addSelectAll: this.valiateCheckAll(addComponentDataList),\r\n      deleteSelectAll: this.valiateCheckAll(addedComponentList),\r\n      addComponentDataListCopy:this.valiateCopy(this.state.addComponentSortedList||[],addComponentDataList||[],addedComponentList||[])\r\n    });\r\n  }\r\n\r\n  dataStateChange = (event) => {\r\n    this.setState({ dataState: event.dataState })\r\n  }\r\n\r\n\r\n  specificationReport = (ncontrolCode) => {\r\n    if (this.props.Login.masterData.selectedWorklist) {\r\n      const inputParam = {\r\n\r\n        stablename: \"worklistcode\",\r\n        primaryKeyField: \"nworklistcode\",\r\n        sreportlink: this.props.Login.reportSettings[15],\r\n        smrttemplatelink: this.props.Login.reportSettings[16],\r\n        nreporttypecode: REPORTTYPE.CONTROLBASED,\r\n        ncontrolcode: ncontrolCode,\r\n        primaryKeyValue: this.props.Login.masterData.selectedWorklist.nworklistcode,\r\n        nworklistcode: this.props.Login.masterData.selectedWorklist.nworklistcode,\r\n        nworklistcode_componentcode: REPORTTYPE.CONTROLBASED,\r\n        nworklistcode_componentname: designComponents.NUMBER,\r\n        ntranscode: this.props.Login.masterData.selectedWorklist.ntransactionstatus,\r\n        userinfo: this.props.Login.userInfo\r\n      }\r\n      //this.props.reportWorklist(inputParam['inputData']);\r\n      this.props.generateControlBasedReport(inputParam);\r\n\r\n    } else {\r\n      toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTCANNOTGENERATEFORCOMPWITHOUTTEST\" }));\r\n    }\r\n  }\r\n\r\n  // headerSelectionChange = (event) => {\r\n  //   const checked = event.syntheticEvent.target.checked;\r\n  //   let addComponentDataList = event.target.props.data //this.state.addedComponentList || [];\r\n  //   let addedComponentList = [];\r\n\r\n\r\n  //   if (checked) {\r\n  //     const data = event.target.props.data.map(item => {\r\n  //       //const data = this.state.addComponentDataList.map(item => {\r\n  //       if (addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\r\n\r\n\r\n  //         // addedComponentList.push({ ...item, selected: false });\r\n  //         item.selected = checked;\r\n  //         const newItem = JSON.parse(JSON.stringify(item));\r\n  //         newItem[\"jsondata\"] = {}\r\n  //         newItem[\"jsonuidata\"] = {}\r\n  //         delete newItem['selected']\r\n  //         //newItem.selected = false;\r\n  //         newItem[\"jsondata\"]['worklist'] = item\r\n  //         newItem[\"jsonuidata\"]['worklist'] = item\r\n  //         addedComponentList.push(newItem);\r\n  //         //item.selected = false;\r\n  //         return item;\r\n  //       } else {\r\n  //         let olditem = JSON.parse(JSON.stringify(addedComponentList[addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\r\n  //         olditem.selected = checked;\r\n  //         let newItem = JSON.parse(JSON.stringify(olditem));\r\n  //         newItem.selected = false;\r\n  //         newItem[\"jsondata\"] = {};\r\n  //         newItem[\"jsonuidata\"] = {};\r\n  //         delete newItem['selected']\r\n  //         newItem[\"jsondata\"]['worklist'] = olditem\r\n  //         newItem[\"jsonuidata\"]['worklist'] = olditem\r\n  //         addedComponentList.push(newItem);\r\n  //         return olditem;\r\n  //       }\r\n\r\n  //     });\r\n\r\n\r\n  //     this.setState({\r\n  //       addComponentDataList: data, addedComponentList,\r\n  //       addSelectAll: this.valiateCheckAll(addedComponentList),\r\n  //       deleteSelectAll: this.valiateCheckAll(addedComponentList),\r\n  //       addSelectAll: checked, deleteSelectAll: false\r\n  //     });\r\n  //   }\r\n\r\n\r\n  //   //   if (checked) {\r\n  //   //     const data = event.dataItems.map(item => {\r\n  //   //         if (addComponentDataList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\r\n  //   //           addComponentDataList.push({ ...item, selected: false });\r\n  //   //             item.selected = checked;   \r\n  //   //             let newItem = JSON.parse(JSON.stringify(item));\r\n  //   //             newItem.selected = false;\r\n  //   //             newItem[\"jsondata\"]={};\r\n  //   //             newItem[\"jsonuidata\"]={};\r\n  //   //             newItem[\"jsondata\"]['worklist'] = item\r\n  //   //             newItem[\"jsonuidata\"]['worklist'] = item    \r\n  //   //             addedComponentList.push(newItem);\r\n  //   //             return item;\r\n  //   //         } else {\r\n  //   //             let olditem = JSON.parse(JSON.stringify(addComponentDataList[addComponentDataList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\r\n  //   //             olditem.selected = checked;\r\n  //   //             let newItem = JSON.parse(JSON.stringify(olditem));\r\n  //   //             newItem.selected = false;\r\n  //   //             newItem[\"jsondata\"]={};\r\n  //   //             newItem[\"jsonuidata\"]={};\r\n  //   //             newItem[\"jsondata\"]['worklist'] = olditem\r\n  //   //             newItem[\"jsonuidata\"]['worklist'] = olditem\r\n  //   //             addedComponentList.push(newItem);\r\n  //   //             return olditem;\r\n\r\n  //   //         }\r\n\r\n  //   //     });\r\n\r\n\r\n  //   //     this.setState({\r\n  //   //       addComponentDataList: data,\r\n  //   //         addedComponentList:addedComponentList,\r\n  //   //         addComponentDataList,\r\n  //   //         addSelectAll: checked, \r\n  //   //         deleteSelectAll: false\r\n  //   //     });\r\n  //   // }\r\n  //   else {\r\n  //     let addedComponentData = this.state.addedComponentList || [];\r\n  //     let deletedListdData = this.state.deletedList || [];\r\n\r\n  //     const data = this.state.addComponentDataList.map(item => {\r\n  //       addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== item.npreregno);\r\n  //       deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\r\n  //       item.selected = checked;\r\n  //       return item;\r\n  //     });\r\n\r\n  //     // console.log(\"data:\",data1, data2);\r\n  //     this.setState({\r\n  //       addComponentDataList: data, addedComponentList: addedComponentData, deletedList: deletedListdData,\r\n  //       addSelectAll: this.valiateCheckAll(addedComponentList),\r\n  //       deleteSelectAll: this.valiateCheckAll(addedComponentList),\r\n  //       addSelectAll: checked, deleteSelectAll: false\r\n  //     });\r\n  //   }\r\n\r\n\r\n\r\n  // }\r\n\r\n  // onApproveClick = () => {\r\n  //   //if (this.props.Login.masterData.SelectedSupplier.ntransactionstatus === transactionStatus.DRAFT) {\r\n  //   const ncontrolCode = this.state.controlMap.has(\"ApproveSupplier\") && this.state.controlMap.get(\"ApproveSupplier\").ncontrolcode\r\n  //   let inputData = [];\r\n  //   inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n  //   //add               \r\n  //   let postParam = undefined;\r\n  //   inputData[\"supplier\"] = { \"nsuppliercode\": this.props.Login.masterData.SelectedSupplier[\"nsuppliercode\"] ? this.props.Login.masterData.SelectedSupplier[\"nsuppliercode\"].Value : \"\" };\r\n  //   inputData[\"supplier\"] = this.props.Login.masterData.SelectedSupplier;\r\n  //   postParam = { inputListName: \"Supplier\", selectedObject: \"SelectedSupplier\", primaryKeyField: \"nsuppliercode\" };\r\n  //   const inputParam = {\r\n  //     classUrl: 'supplier',\r\n  //     methodUrl: \"Supplier\",\r\n  //     inputData: inputData,\r\n  //     operation: \"approve\", postParam\r\n  //   }\r\n  //   let saveType;\r\n\r\n  //   const masterData = this.props.Login.masterData;\r\n\r\n  //   const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n  //   if (esignNeeded) {\r\n  //     const updateInfo = {\r\n  //       typeName: DEFAULT_RETURN,\r\n  //       data: {\r\n  //         loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"approve\"\r\n  //       }\r\n  //     }\r\n  //     this.props.updateStore(updateInfo);\r\n  //   }\r\n  //   else {\r\n  //     this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n  //   }\r\n\r\n  //   // }\r\n  //   // else {\r\n  //   //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTOAPPROVE\" }));\r\n  //   // }\r\n  // }\r\n\r\n  headerSelectionChange = (event) => {\r\n    const checked = event.syntheticEvent.target.checked;\r\n    let addComponentDataList = //event.target.props.data \r\n      this.state.addComponentDataList || [];\r\n    let addedComponentList = [];\r\n\r\n\r\n    if (checked) {\r\n      const data = event.target.props.data.map(item => {\r\n        //  const data = addComponentDataList.map(item => {\r\n        if (addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\r\n\r\n\r\n          // addedComponentList.push({ ...item, selected: false });\r\n          item.selected = checked;\r\n          const newItem = JSON.parse(JSON.stringify(item));\r\n          newItem[\"jsondata\"] = {}\r\n          newItem[\"jsonuidata\"] = {}\r\n          delete newItem['selected']\r\n          //newItem.selected = false;\r\n          newItem[\"jsondata\"]['worklist'] = item\r\n          newItem[\"jsonuidata\"]['worklist'] = item\r\n          addedComponentList.push(newItem);\r\n          //item.selected = false;\r\n          return item;\r\n        } else {\r\n          let olditem = JSON.parse(JSON.stringify(addedComponentList[addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\r\n          olditem.selected = checked;\r\n          let newItem = JSON.parse(JSON.stringify(olditem));\r\n          newItem.selected = false;\r\n          newItem[\"jsondata\"] = {};\r\n          newItem[\"jsonuidata\"] = {};\r\n          delete newItem['selected']\r\n          newItem[\"jsondata\"]['worklist'] = olditem\r\n          newItem[\"jsonuidata\"]['worklist'] = olditem\r\n          addedComponentList.push(newItem);\r\n          return olditem;\r\n        }\r\n\r\n      });\r\n      this.setState({\r\n        addComponentDataList: data, addedComponentList,\r\n        // ADDed by Neeraj-ALPD-5136\r\n        //WorkList Screen -> Including filter in Data selection Kendo Grid \r\n        addComponentDataListCopy: this.valiateCopy(this.state.addComponentSortedList||[],data||[],addedComponentList||[]) ,\r\n        addSelectAll: this.valiateCheckAll(addedComponentList),\r\n        deleteSelectAll: this.valiateCheckAll(addedComponentList),\r\n        addSelectAll: checked, deleteSelectAll: false\r\n      });\r\n    }\r\n\r\n\r\n    //   if (checked) {\r\n    //     const data = event.dataItems.map(item => {\r\n    //         if (addComponentDataList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\r\n    //           addComponentDataList.push({ ...item, selected: false });\r\n    //             item.selected = checked;  \r\n    //             let newItem = JSON.parse(JSON.stringify(item));\r\n    //             newItem.selected = false;\r\n    //             newItem[\"jsondata\"]={};\r\n    //             newItem[\"jsonuidata\"]={};\r\n    //             newItem[\"jsondata\"]['worklist'] = item\r\n    //             newItem[\"jsonuidata\"]['worklist'] = item    \r\n    //             addedComponentList.push(newItem);\r\n    //             return item;\r\n    //         } else {\r\n    //             let olditem = JSON.parse(JSON.stringify(addComponentDataList[addComponentDataList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\r\n    //             olditem.selected = checked;\r\n    //             let newItem = JSON.parse(JSON.stringify(olditem));\r\n    //             newItem.selected = false;\r\n    //             newItem[\"jsondata\"]={};\r\n    //             newItem[\"jsonuidata\"]={};\r\n    //             newItem[\"jsondata\"]['worklist'] = olditem\r\n    //             newItem[\"jsonuidata\"]['worklist'] = olditem\r\n    //             addedComponentList.push(newItem);\r\n    //             return olditem;\r\n\r\n    //         }\r\n\r\n    //     });\r\n\r\n\r\n    //     this.setState({\r\n    //       addComponentDataList: data,\r\n    //         addedComponentList:addedComponentList,\r\n    //         addComponentDataList,\r\n    //         addSelectAll: checked,\r\n    //         deleteSelectAll: false\r\n    //     });\r\n    // }\r\n    else {\r\n      let addedComponentData = this.state.addedComponentList || [];\r\n      let deletedListdData = this.state.deletedList || [];\r\n\r\n      const data = event.target.props.data.map(item => {\r\n        addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== item.npreregno);\r\n        deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\r\n        item.selected = checked;\r\n        return item;\r\n      });\r\n\r\n      // console.log(\"data:\",data1, data2);\r\n      this.setState({\r\n        addComponentDataList: data, addedComponentList: addedComponentData, deletedList: deletedListdData,\r\n        addSelectAll: this.valiateCheckAll(addedComponentList),\r\n        deleteSelectAll: this.valiateCheckAll(addedComponentList),\r\n        addSelectAll: checked, deleteSelectAll: false,\r\n        addComponentDataListCopy:  this.valiateCopy(this.state.addComponentSortedList||[],data||[],addedComponentData||[])   \r\n      });\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n    // ADDed by Neeraj-ALPD-5136\r\n  //WorkList Screen -> Including filter in Data selection Kendo Grid \r\n  addSaveDataGrid = () => {\r\n    let filterdata1=this.state.dataState ?process(this.state.addComponentDataListCopy || [], {...this.state.dataState,take:this.state.addComponentDataList.length}).data:[];\r\n    let sortListedData1 = filterdata1.filter(x => \r\n     this.state.addedComponentList.some(item => item.ntransactiontestcode === x.ntransactiontestcode)\r\n   );\r\n   let exists=this.state.dataState && this.state.dataState.filter!==null && this.state.dataState.filter!==undefined ? sortListedData1.length>0 ? true : false :true;\r\n    if (this.state.addedComponentList.length > 0 && exists) {\r\n      let addComponentSortedList = [];\r\n      let   updatedList =[];\r\n      let ListedData =[];\r\n      let sortListedData=[];\r\n      if(this.state.dataState && this.state.dataState.filter!==null && this.state.dataState.filter!==undefined){\r\n        let filterdata=process(this.state.addComponentDataListCopy|| this.state.addComponentDataList || [], {...this.state.dataState,take:this.state.addComponentDataList.length}).data;\r\n         sortListedData = filterdata.filter(x => \r\n          this.state.addedComponentList.some(item => item.ntransactiontestcode === x.ntransactiontestcode)\r\n        );\r\n         updatedList = this.state.addComponentDataList.filter(\r\n          (item) => !sortListedData.some(\r\n            (addedItem) => addedItem.ntransactiontestcode === item.ntransactiontestcode\r\n          )\r\n        );\r\n         updatedList.map(x =>{if(x.selected){ ListedData.push(x)}});\r\n\r\n      }else{\r\n       updatedList = this.state.addComponentDataList.filter(\r\n        (item) => !this.state.addedComponentList.some(\r\n          (addedItem) => addedItem.ntransactiontestcode === item.ntransactiontestcode\r\n        )\r\n      );\r\n      ListedData=[];\r\n      sortListedData= this.state.addedComponentList\r\n    }\r\n      if (this.state.addComponentSortedList.length > 0) {\r\n        this.state.addComponentSortedList.map(item => {\r\n          const newItem = JSON.parse(JSON.stringify(item));\r\n          newItem[\"jsondata\"] = {}\r\n          newItem[\"jsonuidata\"] = {}\r\n          newItem[\"jsondata\"]['worklist'] = item\r\n          newItem[\"jsonuidata\"]['worklist'] = item\r\n          addComponentSortedList.push(newItem)\r\n        })\r\n      }\r\n      sortListedData.map(item => {\r\n        const newItem = JSON.parse(JSON.stringify(item));\r\n        newItem[\"jsondata\"] = {}\r\n        newItem[\"jsonuidata\"] = {}\r\n        newItem[\"jsondata\"]['worklist'] = item\r\n        newItem[\"jsonuidata\"]['worklist'] = item\r\n        addComponentSortedList.push(newItem)\r\n      })\r\n      this.setState({\r\n        addComponentDataList: updatedList, addSelectAll: this.valiateCheckAll(updatedList)\r\n        , addComponentSortedList: addComponentSortedList\r\n        , addedComponentList: ListedData,\r\n        addComponentDataListCopy:this.valiateCopy(addComponentSortedList||[],updatedList||[],ListedData||[]) \r\n      })\r\n    } else {\r\n      toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELCETONESAMPLE\" }));\r\n    }\r\n  }\r\n  // ADDed by Neeraj-ALPD-5136\r\n  //WorkList Screen -> Including filter in Data selection Kendo Grid \r\n  handleClickDelete = (row) => {\r\n    let updatedAddList = [];\r\n    const ntransactiontestcode = row.dataItem.ntransactiontestcode;\r\n    const updatedList = this.state.addComponentSortedList.filter(\r\n      (item) => item.ntransactiontestcode !== ntransactiontestcode\r\n    );\r\n\r\n    const exists = this.state.addComponentDataList.some(\r\n      (item) => item.ntransactiontestcode === ntransactiontestcode\r\n    );\r\n    if (!exists) {\r\n      updatedAddList = this.state.addComponentDataList.map(item => {\r\n        return item\r\n      })\r\n      updatedAddList.push({ ...row.dataItem, selected: false });\r\n    }\r\n\r\n    this.setState({ addComponentDataList: updatedAddList, \r\n      addComponentSortedList: updatedList , addComponentDataListCopy:this.valiateCopy(updatedList||[],updatedAddList||[])})\r\n\r\n  }\r\n\r\n\r\n// ADDed by Neeraj-ALPD-5136\r\n  //WorkList Screen -> Including filter in Data selection Kendo Grid \r\n  valiateCopy(sortedList,addComponentDataList,addedComponentList){\r\n    let addedComponentLists=addedComponentList||this.state.addedComponentList||[];\r\n    let listData = this.props.Login.addComponentDataList || [];\r\n    let copyingList = listData.filter(item1 => \r\n      !sortedList.some(item2 => item1.ntransactiontestcode === item2.ntransactiontestcode)\r\n    ) ||[];\r\n    let copyingListData = copyingList.map(item => {\r\n      const existsInAddComponentDataList = addedComponentLists.some(\r\n        item1 => item1.ntransactiontestcode === item.ntransactiontestcode \r\n      );\r\n     \r\n      if(existsInAddComponentDataList){\r\n        return {...item,selected: true};\r\n      }else{\r\n        return {...item,selected: false};\r\n      }\r\n     \r\n    });\r\n    return copyingListData;\r\n  }\r\n\r\n\r\n\r\n\r\n  valiateCheckAll(data) {\r\n\r\n    let selectAll = true;\r\n\r\n    // let checkRepeatComponent;\r\n\r\n    //  let addedComponentList = this.state.addedComponentList || [];\r\n\r\n    if (data && data.length > 0) {\r\n\r\n      data.forEach(dataItem => {\r\n\r\n        if (dataItem.selected) {\r\n\r\n          if (dataItem.selected === false) {\r\n\r\n            selectAll = false;\r\n\r\n          }\r\n\r\n        }\r\n\r\n        else {\r\n\r\n          selectAll = false;\r\n\r\n          // checkRepeatComponent=this.state.addComponentDataList.filter(item=>item.npreregno==data.npreregno)\r\n\r\n          // if(checkRepeatComponent.length>0){\r\n\r\n          //     selectAll = true;\r\n\r\n          // }else{\r\n\r\n          //     selectAll = false;\r\n\r\n          // }\r\n\r\n        }\r\n\r\n      })\r\n\r\n    }\r\n\r\n    else {\r\n\r\n      //if (gridType === \"originalgrid\"){\r\n\r\n      selectAll = false;\r\n\r\n      // }\r\n\r\n    }\r\n\r\n    return selectAll;\r\n\r\n  }\r\n\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.Login.masterStatus !== \"\") {\r\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n        toast.warn(props.Login.masterStatus);\r\n        props.Login.masterStatus = \"\";\r\n      }\r\n    }\r\n    if (props.Login.error !== state.error) {\r\n      toast.error(props.Login.error);\r\n      props.Login.error = \"\";\r\n    }\r\n    if (props.Login.selectedRecord === undefined) {\r\n      return { selectedRecord: {} };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  validateEsign = () => {\r\n    let modalName = this.props.Login.screenName === \"worklistSample\" ? \"openChildModal\" : \"openModal\";\r\n    const inputParam = {\r\n      inputData: {\r\n        userinfo: {\r\n          ...this.props.Login.userInfo,\r\n          sreason: this.state.selectedRecord[\"esigncomments\"],\r\n        },\r\n        password: this.state.selectedRecord[\"esignpassword\"],\r\n      },\r\n      screenData: this.props.Login.screenData,\r\n    };\r\n    if (this.props.Login.operation === \"prepare\") {\r\n      this.props.validateEsignforWorklist(inputParam, modalName, this.confirmMessage);\r\n    }\r\n    else {\r\n      this.props.validateEsignCredential(inputParam, modalName);\r\n    }\r\n    // this.props.validateEsignCredential(inputParam, \"openModal\");\r\n\r\n  };\r\n\r\n\r\n\r\n  // onSwitchChange = (item, key, methodUrl) => {\r\n  //   let dataItem = item;\r\n  //   dataItem[\"ndefaultstatus\"] = 3;\r\n  //   const inputParam = {\r\n  //     inputData: {\r\n  //       [key]: dataItem,\r\n  //       userinfo: this.props.userInfo,\r\n  //     },\r\n  //     classUrl: \"testmaster\",\r\n  //     operation: \"setDefault\",\r\n  //     methodUrl: methodUrl,\r\n  //   };\r\n  //   this.props.crudMaster(\r\n  //     inputParam,\r\n  //     this.props.masterData,\r\n  //     \"openChildModal\",\r\n  //     {}\r\n  //   );\r\n  // };\r\n\r\n  tabDetail = () => {\r\n    const tabMap = new Map();\r\n    const deleteSecId =\r\n      this.state.controlMap.has(\"DeleteWorklistSample\") &&\r\n      this.state.controlMap.get(\"DeleteWorklistSample\").ncontrolcode;\r\n    const addSampleId =\r\n      this.state.controlMap.has(\"AddSamples\") &&\r\n      this.state.controlMap.get(\"AddSamples\").ncontrolcode;\r\n\r\n    const viewSampleId =\r\n      this.state.controlMap.has(\"ViewWorklistSample\") &&\r\n      this.state.controlMap.get(\"ViewWorklistSample\").ncontrolcode;\r\n\r\n    tabMap.set(\r\n      \"IDS_WORKLISTSAMPLE\",\r\n      <WorklistSampleTab\r\n        controlMap={this.state.controlMap}\r\n        userRoleControlRights={this.state.userRoleControlRights}\r\n        dataState={this.state.WorklistSamples}\r\n        selectedWorklist={this.state.WorklistSamples}\r\n        extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n        detailedFieldList={this.gridfillingColumnGridMoreItem(this.state.DynamicGridMoreItem) || []}\r\n\r\n        userInfo={this.props.Login.userInfo}\r\n        inputParam={this.props.Login.inputParam}\r\n        deleteRecord={this.DeleteWorklistSample}\r\n        deleteSecId={deleteSecId}\r\n        defaultRecord={this.defaultRecord}\r\n        WorklistSamples={this.state.WorklistSamples || []}\r\n        viewSample={this.viewSample}\r\n        screenName=\"IDS_WORKLISTSAMPLE\"\r\n        selectedRecord={this.state.selectedRecord}\r\n        settings={this.props.Login.settings}\r\n        getWorklistSample={this.props.getWorklistSample}\r\n        masterData={this.props.Login.masterData}\r\n        addSampleId={addSampleId}\r\n        viewSampleId={viewSampleId}\r\n      />\r\n\r\n    );\r\n    tabMap.set(\r\n      \"IDS_WORKLISTHISTORY\",\r\n      <WorklistHistoryTab\r\n        dataState={this.props.Login.masterData.WorklistHistory}\r\n        selectedWorklistHistory={this.props.Login.masterData.WorklistHistory}\r\n        InstrumentSection={this.props.Login.masterData.WorklistHistory || []}\r\n        userInfo={this.props.Login.userInfo}\r\n        //inputParam={this.props.Login.inputParam}\r\n        // deleteRecord={this.DeleteWorklistSample}\r\n        // deleteSecId={deleteSecId}\r\n        // defaultSecId={defaultSecId}\r\n        // defaultRecord={this.defaultRecord}\r\n        controlMap={this.state.controlMap}\r\n        userRoleControlRights={this.state.userRoleControlRights}\r\n        screenName=\"IDS_WORKLISTHISTORY\"\r\n        selectedRecord={this.state.selectedRecord}\r\n        settings={this.props.Login.settings}\r\n      />\r\n    );\r\n\r\n\r\n    return tabMap;\r\n  };\r\n\r\n\r\n\r\n  render() {\r\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n    let mandatoryFields = [];\r\n    // this.feildsForGrid =\r\n    //   [\r\n    //     // { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },       \r\n    //     { \"idsName\": \"IDS_PARAMETER\", \"dataField\": \"sparametersynonym\", \"width\": \"100px\" },\r\n    //     { \"idsName\": \"IDS_RESULT\", \"dataField\": \"sfinal\", \"width\": \"100px\" },\r\n    //     { \"idsName\": \"IDS_GRADE\", \"dataField\": \"sgradename\", \"width\": \"200px\" },\r\n    //   ];\r\n\r\n    this.feildsForGrid =\r\n      [\r\n        // { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_REPORTREFNO\", \"dataField\": \"sreportno\", \"width\": \"200px\" },\r\n        { \"idsName\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode], \"dataField\": \"sarno\", \"width\": \"200px\" },\r\n        { \"idsName\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode], \"dataField\": \"ssamplearno\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_PARAMETER\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_RESULT\", \"dataField\": \"sfinal\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_GRADE\", \"dataField\": \"sgradename\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_REGISTRATIONDATE\", \"dataField\": \"sregdate\", \"width\": \"200px\" },\r\n\r\n\r\n\r\n      ];\r\n    this.extractedColumnList = [\r\n\r\n      //  { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"350px\" },\r\n      { \"idsName\": \"IDS_NEWCOMMENTS\", \"dataField\": \"scomments\", \"width\": \"350px\" },\r\n      { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_ACTIONTYPE\", \"dataField\": \"sactiontype\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_MODULENAME\", \"dataField\": \"smodulename\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_FORMNAME\", \"dataField\": \"sformname\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_REASON\", \"dataField\": \"spredefinedreason\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_ESIGNCOMMENTS\", \"dataField\": \"sreason\", \"width\": \"200px\" },\r\n\r\n\r\n    ]\r\n\r\n    // const auditInfoFields = [{ \"fieldName\": \"sarno\", \"label\": \"IDS_ARNO\" }, \r\n    // { \"fieldName\": \"spatientid\", \"label\": \"IDS_PATIENTID\" },   \r\n    // { \"fieldName\": \"sfirstname\", \"label\": \"IDS_PATIENTNAME\" },\r\n    // { \"fieldName\": \"sage\", \"label\": \"IDS_AGE\" },\r\n    // { \"fieldName\": \"sgendername\", \"label\": \"IDS_GENDER\" },\r\n    // { \"fieldName\": \"stestsynonym\", \"label\": \"IDS_TEST\" },\r\n    // { \"fieldName\": \"sregdate\", \"label\": \"IDS_REGISTRATIONDATE\" },\r\n    // { \"fieldName\": \"scompletedate\", \"label\": \"IDS_COMPLETEDDATEANDTIME\" }\r\n\r\n    // ];\r\n    const auditInfoFields = [\r\n      { \"label\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode], \"fieldName\": \"sarno\", },\r\n      { \"fieldName\": \"stestsynonym\", \"label\": \"IDS_TEST\" },\r\n      { \"fieldName\": \"sfirstname\", \"label\": \"IDS_PATIENTNAME\" },\r\n      { \"fieldName\": \"sgendername\", \"label\": \"IDS_GENDER\" },\r\n\r\n\r\n    ];\r\n\r\n    if (this.props.Login.screenName === \"IDS_WORKLIST\") {\r\n      mandatoryFields.push(\r\n        {\r\n          mandatory: true,\r\n          idsName: \"IDS_ADDSECTION\",\r\n          dataField: \"nsectioncode\",\r\n          mandatoryLabel: \"IDS_SELECT\",\r\n          controlType: \"selectbox\",\r\n        }, {\r\n        mandatory: true,\r\n        idsName: \"IDS_TEST\",\r\n        dataField: \"ntestcode\",\r\n        mandatoryLabel: \"IDS_SELECT\",\r\n        controlType: \"selectbox\",\r\n      }\r\n      );\r\n\r\n    }\r\n\r\n    const addId =\r\n      this.state.controlMap.has(\"AddWorklist\") &&\r\n      this.state.controlMap.get(\"AddWorklist\").ncontrolcode;\r\n    // const editId =\r\n    //   this.state.controlMap.has(\"EditWorklist\") &&\r\n    //   this.state.controlMap.get(\"EditWorklist\").ncontrolcode;\r\n    const deleteId =\r\n      this.state.controlMap.has(\"DeleteWorklist\") &&\r\n      this.state.controlMap.get(\"DeleteWorklist\").ncontrolcode;\r\n\r\n    const approvalId =\r\n      this.state.controlMap.has(\"GenerateWorklist\") &&\r\n      this.state.controlMap.get(\"GenerateWorklist\").ncontrolcode;\r\n\r\n    const reportId =\r\n      this.state.controlMap.has(\"WorklistReport\") &&\r\n      this.state.controlMap.get(\"WorklistReport\").ncontrolcode;\r\n\r\n    // const addSampleId =\r\n    //   this.state.controlMap.has(\"AddWorklistSample\") &&\r\n    //   this.state.controlMap.get(\"AddWorklistSample\").ncontrolcode;\r\n    // const deleteSampleId =\r\n    // this.state.controlMap.has(\"DeleteWorklistSample\") &&\r\n    // this.state.controlMap.get(\"DeleteWorklistSample\").ncontrolcode;\r\n\r\n    const { selectedWorklist } = this.props.Login.masterData;\r\n    const filterParam = {\r\n      inputListName: \"Worklist\",\r\n      selectedObject: \"selectedWorklist\",\r\n      primaryKeyField: \"nworklistcode\",\r\n      fetchUrl: \"worklist/getWorklistSample\",\r\n      fecthInputObject: { userinfo: this.props.Login.userInfo, ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode },\r\n      masterData: this.props.Login.masterData,\r\n      searchFieldList: this.searchFieldList,\r\n\r\n    };\r\n    const filterNameId = this.state.controlMap.has(\"FilterName\") ? this.state.controlMap.get(\"FilterName\").ncontrolcode : -1;\r\n    const filterDetailId = this.state.controlMap.has(\"FilterDetail\") ? this.state.controlMap.get(\"FilterDetail\").ncontrolcode : -1;\r\n    const mandatoryFieldsFilter = [{ \"mandatory\": true, \"idsName\": \"IDS_FILTERNAME\", \"dataField\": \"sfiltername\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }]\r\n\r\n    const breadCrumbData = this.state.filterData || [];\r\n    return (\r\n      <>\r\n        <div className=\"client-listing-wrap new-breadcrumb toolbar-top-wrap mtop-4 screen-height-window\">\r\n          {breadCrumbData.length > 0 ? (\r\n            <Affix top={53}>\r\n              <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n            </Affix>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <div className='fixed-buttons'>\r\n            <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n              hidden={this.state.userRoleControlRights.indexOf(filterNameId) === -1}\r\n              data-tip={this.props.intl.formatMessage({ id: \"IDS_SAVEFILTER\" })}\r\n              //onClick={() => this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, approvalId)}\r\n              onClick={() => this.openFilterName(filterNameId)}\r\n            >   <SaveIcon width='20px' height='20px' className='custom_icons' /></Nav.Link>\r\n\r\n            {\r\n              this.state.userRoleControlRights.indexOf(filterDetailId) !== -1 &&\r\n                this.props.Login.masterData && this.props.Login.masterData.FilterName !== undefined && this.props.Login.masterData.FilterName.length > 0 ?\r\n                <CustomPopover\r\n                  icon={faBolt}\r\n                  nav={true}\r\n                  data={this.props.Login.masterData.FilterName}\r\n                  btnClasses=\"btn-circle btn_grey ml-2 spacesremovefromaction\"\r\n                  //dynamicButton={(value) => this.props.getAcceptTestTestWise(value,testGetParam,this.props.Login.masterData.MJSelectedTest,this.props.Login.userInfo)}\r\n                  dynamicButton={(value) => this.clickFilterDetail(value)}\r\n                  textKey=\"sfiltername\"\r\n                  iconKey=\"nfiltercode\"\r\n                >\r\n                </CustomPopover>\r\n                : \"\"\r\n            }\r\n          </div>\r\n          <Row noGutters={true}>\r\n            <Col md={`${!this.props.sidebarview ? '4' : \"2\"}`}>\r\n              <ListMaster\r\n                formatMessage={this.props.intl.formatMessage}\r\n                screenName={\"worklist\"}\r\n                masterData={this.props.Login.masterData}\r\n                userInfo={this.props.Login.userInfo}\r\n                masterList={\r\n                  this.props.Login.masterData.searchedData ||\r\n                  this.props.Login.masterData.Worklist\r\n                }\r\n                getMasterDetail={(worklist) =>\r\n                  this.props.getWorklistDetail(\r\n                    worklist,\r\n                    this.props.Login.userInfo,\r\n                    this.props.Login.masterData\r\n                  )\r\n                }\r\n                selectedMaster={this.props.Login.masterData.selectedWorklist}\r\n                primaryKeyField=\"nworklistcode\"\r\n                mainField=\"sworklistno\"\r\n                firstField=\"stestname\"\r\n                secondField=\"ssectionname\"\r\n                isIDSField=\"Yes\"\r\n                filterColumnData={this.props.filterColumnData}\r\n                filterParam={filterParam}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                searchRef={this.searchRef}\r\n                addId={addId}\r\n                hideCheckLabel={true}\r\n                hidePaging={false}\r\n                reloadData={this.reloadData}\r\n                openModal={() =>\r\n                  this.props.getSectionAndTest(\r\n                    \"IDS_WORKLIST\",\r\n                    \"create\",\r\n                    \"nworklistcode\",\r\n                    this.props.Login.masterData,\r\n                    this.props.Login.userInfo,\r\n                    addId\r\n                  )\r\n                }\r\n                openFilter={this.openFilter}\r\n                closeFilter={this.closeFilter}\r\n                onFilterSubmit={this.onFilterSubmit}\r\n                showFilterIcon={true}\r\n                showFilter={this.props.Login.showFilter}\r\n                callCloseFunction={true}\r\n                filterComponent={[\r\n                  {\r\n                    IDS_WORKLISTFILTER: (\r\n                      <WorklistPreparationFilter\r\n                        SampleTypeValue={this.props.Login.masterData.defaultSampleTypeValue || {}}\r\n                        RegTypeValue={this.props.Login.masterData.RegTypeValue || {}}\r\n                        RegSubTypeValue={this.props.Login.masterData.RegSubTypeValue || {}}\r\n                        RegSubType={this.state.RegistrationSubTypeList || []}\r\n                        RegType={this.state.RegistrationTypeList || []}\r\n                        userInfo={this.props.Login.userInfo || {}}\r\n                        ApprovalVersion={this.state.ConfigVersionList || []}\r\n                        ApprovalVersionValue={this.props.Login.masterData.defaultApprovalVersionValue || []}\r\n\r\n                        //SampleType={this.state.stateSampleType || []}\r\n                        FilterStatusValue={this.props.Login.masterData.FilterStatusValue || {}}\r\n                        FilterStatus={this.state.FilterStatusList || []}\r\n                        RegistrationType={this.state.stateRegistrationType || []}\r\n                        RegistrationSubType={this.state.stateRegistrationSubType || []}\r\n                        fromDate={this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date()}\r\n                        toDate={this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date()}\r\n                        handleDateChange={this.handleDateChange}\r\n                        onFilterComboChange={this.onFilterComboChange}\r\n                        SampleType={this.state.SampletypeList || []}\r\n\r\n                      />\r\n                    ),\r\n                  },\r\n                ]}\r\n              />\r\n            </Col>\r\n            <Col md={`${!this.props.sidebarview ? '8' : \"10\"}`} className=\"position-relative\">\r\n              <div className=\"sidebar-view-btn-block\">\r\n                <div className=\"sidebar-view-btn \" onClick={this.props.parentFunction}>\r\n                  {!this.props.sidebarview ?\r\n                    <i class=\"fa fa-less-than\"></i> :\r\n                    <i class=\"fa fa-greater-than\"></i>\r\n                  }\r\n                </div>\r\n              </div>\r\n              <Row>\r\n                <Col md={12}>\r\n                  <ContentPanel className=\"panel-main-content\">\r\n                    <Card className=\"border-0\">\r\n                      {this.props.Login.masterData.Worklist && this.props.Login.masterData.Worklist.length > 0 && this.props.Login.masterData.selectedWorklist\r\n                        ? (\r\n                          <>\r\n                            <Card.Header>\r\n                              <Card.Title className=\"product-title-main\">\r\n                                {\r\n                                  this.props.Login.masterData.selectedWorklist\r\n                                    .sworklistno\r\n                                }\r\n                              </Card.Title>\r\n                              <Card.Subtitle>\r\n                                <div className=\"d-flex product-category\">\r\n                                  <h2 className=\"product-title-sub flex-grow-1\">\r\n                                    <MediaLabel className={`btn btn-outlined ${this.props.Login.masterData.selectedWorklist.ntransactionstatus === 83 ? \"outline-success\" : \"outline-secondary\"} btn-sm ml-3`}>\r\n                                      {this.props.Login.masterData.selectedWorklist.ntransactionstatus === 83 && <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>}\r\n                                      {this.props.Login.masterData.selectedWorklist.stransdisplaystatus}\r\n                                    </MediaLabel>\r\n                                  </h2>\r\n                                  <div className=\"d-inline\">\r\n                                    {/* <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                    //    data-for=\"tooltip_list_wrap\"\r\n                                    hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                    onClick={() => this.props.getEditSectionAndTest(\r\n                                      \"IDS_WORKLIST\",\r\n                                      \"update\",\r\n                                      \"nworklistcode\",\r\n                                      this.props.Login.masterData,\r\n                                      this.props.Login.userInfo,\r\n                                      editId\r\n                                    )\r\n\r\n                                      //\"Checklist\",\"nchecklistcode\",this.props.Login.masterData.selectedchecklist.nchecklistcode)\r\n                                    }>\r\n                                    <FontAwesomeIcon icon={faPencilAlt} title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} />\r\n                                  </Nav.Link> */}\r\n\r\n\r\n                                    <Nav.Link\r\n                                      name=\"deleteWorklist\"\r\n                                      className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                      data-tip={this.props.intl.formatMessage({\r\n                                        id: \"IDS_DELETE\",\r\n                                      })}\r\n                                      //   data-for=\"tooltip_list_wrap\"\r\n                                      hidden={\r\n                                        this.state.userRoleControlRights.indexOf(\r\n                                          deleteId\r\n                                        ) === -1\r\n                                      }\r\n                                      onClick={() =>\r\n                                        this.ConfirmDelete(\r\n                                          {\r\n                                            operation: \"delete\",\r\n                                            screenName: \"IDS_WORKLIST\",\r\n                                          },\r\n                                          deleteId\r\n                                        )\r\n                                      }\r\n                                    >\r\n                                      <FontAwesomeIcon icon={faTrashAlt} />\r\n                                    </Nav.Link>\r\n\r\n                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                      hidden={this.state.userRoleControlRights.indexOf(approvalId) === -1}\r\n                                      data-tip={this.props.intl.formatMessage({ id: \"IDS_PREPARED\" })}\r\n                                      //onClick={() => this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, approvalId)}\r\n                                      onClick={() => this.onApproveClick()}\r\n                                    >\r\n                                      {/* <FontAwesomeIcon icon={faThumbsUp} title={this.props.intl.formatMessage({ id: \"IDS_PREPARED\" })} /> */}\r\n                                      <Closure className=\"custom_icons\" width=\"18\" height=\"23\" />\r\n                                    </Nav.Link>\r\n\r\n\r\n                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                      hidden={this.state.userRoleControlRights.indexOf(reportId) === -1}\r\n                                      data-tip={this.props.intl.formatMessage({ id: \"IDS_REPORT\" })}\r\n                                      //onClick={() => this.specificationReport(reportId)}\r\n                                      onClick={() => this.props.generateControlBasedReport(reportId, this.props.Login.masterData.selectedWorklist, this.props.Login, \"worklist\", this.props.Login.masterData.selectedWorklist.nworklistcode)}\r\n\r\n                                    >\r\n                                      <Report />\r\n                                      {/* <ReportIcon className=\"custom_icons\" width=\"17\" height=\"20\" /> */}\r\n                                    </Nav.Link>\r\n\r\n                                  </div>\r\n                                </div>\r\n                              </Card.Subtitle>\r\n                            </Card.Header>\r\n\r\n\r\n                            <Card.Body>\r\n\r\n                              {selectedWorklist && (\r\n                                <CustomTab\r\n                                  activeKey={this.props.Login.activeKey ? this.props.Login.activeKey : \"IDS_WORKLISTSAMPLE\"}\r\n                                  tabDetail={this.tabDetail()}\r\n                                  onTabChange={this.onTabChange}\r\n                                />\r\n                              )}\r\n                            </Card.Body>\r\n                          </>\r\n                        ) : (\r\n                          \"\"\r\n                        )\r\n                      }\r\n                    </Card>\r\n                  </ContentPanel>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n\r\n\r\n\r\n          </Row>\r\n        </div>\r\n        {(this.props.Login.openModal || this.props.Login.openChildModal) && (\r\n          <SlideOutModal\r\n            show={this.props.Login.openModal || this.props.Login.openChildModal}\r\n            closeModal={this.closeModal}\r\n            operation={this.props.Login.operation}\r\n            inputParam={this.props.Login.inputParam}\r\n            screenName={this.props.Login.screenName}\r\n            onSaveClick={this.onSaveClick}\r\n            esign={this.props.Login.loadEsign}\r\n            validateEsign={this.validateEsign}\r\n            masterStatus={this.props.Login.masterStatus}\r\n            mandatoryFields={mandatoryFields}\r\n            updateStore={this.props.updateStore}\r\n            selectedRecord={this.state.selectedRecord || {}}\r\n            hideSave={this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" ? true : false}\r\n            size={(this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" || this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\") ? \"xl\" : \"lg\"}\r\n\r\n\r\n            addComponent={\r\n              this.props.Login.loadEsign ? (\r\n                <Esign\r\n                  operation={this.props.Login.operation}\r\n                  onInputOnChange={this.onInputOnChange}\r\n                  inputParam={this.props.Login.inputParam}\r\n                  selectedRecord={this.state.selectedRecord || {}}\r\n                />\r\n              )\r\n                : this.props.Login.screenName === \"IDS_WORKLIST\" ? (\r\n                  <AddWorklistSection\r\n                    //onNumericInputOnChange={this.onNumericInputOnChange}\r\n                    selectedRecord={this.props.Login.selectedRecord || {}}\r\n                    onInputOnChange={this.onInputOnChange}\r\n                    onComboChange={this.onComboChange}\r\n                    SectionValue={this.props.Login.Section}\r\n                    TestValue={this.props.Login.Test}\r\n                    handleDateChange={this.handleDateChange}\r\n                  />\r\n                )\r\n\r\n\r\n                  : this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\" ? (\r\n                    <AddWorklistSample\r\n                      selectionChange={this.selectionChange}\r\n                      headerSelectionChange={this.headerSelectionChange}\r\n                      addComponentDataList={this.state.addComponentDataList || []}\r\n                      addSelectAll={this.state.addSelectAll}\r\n                      //onNumericInputOnChange={this.onNumericInputOnChange}\r\n                      selectedRecord={this.props.Login.selectedRecord || {}}\r\n                      onInputOnChange={this.onInputOnChange}\r\n                      onComboChange={this.onComboChange}\r\n                      TestValue={this.props.Login.Test}\r\n                      userInfo={this.props.Login.userInfo}\r\n                      handleDateChange={this.handleDateChange}\r\n                      dataResult={this.state.dataResult ? this.state.dataResult : process(this.state.addComponentDataList || [], this.state.dataState\r\n                        ? this.state.dataState : { skip: 0, take: 10 })}\r\n                      dataState={this.state.dataState\r\n                        ? this.state.dataState : { skip: 0, take: 10 }}\r\n                      dataStateChangeWorklistSample={this.dataStateChangeWorklistSample}\r\n                      nneedsubsample={this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                      addSaveDataGrid={this.addSaveDataGrid}\r\n                      addComponentSortedList={this.state.addComponentSortedList || []}\r\n                      handleClickDelete={this.handleClickDelete}\r\n                    />\r\n                  )\r\n                    : this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" ? (\r\n                      <>\r\n\r\n                        <Card className='one' >\r\n                          <Card.Body>\r\n                            <SpecificationInfo\r\n                              controlMap={this.state.controlMap}\r\n                              auditInfoFields={auditInfoFields}\r\n                              userRoleControlRights={this.state.userRoleControlRights}\r\n                              selectedSpecification={this.props.Login.masterData.viewdetails}\r\n                              userInfo={this.props.Login.userInfo}\r\n                              selectedNode={this.props.Login.masterData.selectedNode}\r\n                              selectedRecord={this.state.filterData}\r\n                              approvalRoleActionDetail={this.props.Login.masterData.ApprovalRoleActionDetail}\r\n                              screenName=\"IDS_PREVIOUSRESULTVIEW\"\r\n\r\n                            />\r\n                          </Card.Body>\r\n                        </Card>\r\n                        <br></br>\r\n                        <DataGrid\r\n                          primaryKeyField={\"ntransactiontestcode\"}\r\n                          data={this.props.Login.masterData.AuditModifiedComments || []}\r\n                          detailedFieldList={this.feildsForGrid}\r\n                          extractedColumnList={this.feildsForGrid}\r\n                          dataResult={this.props.Login.masterData.AuditModifiedComments && this.props.Login.masterData.AuditModifiedComments.length > 0\r\n                            && process(this.props.Login.masterData.AuditModifiedComments, this.state.dataState ? this.state.dataState : { skip: 0, take: 10 })}\r\n                          //dataState={{ skip: 0, take: 10 }}\r\n                          dataState={this.state.dataState\r\n                            ? this.state.dataState : { skip: 0, take: 10 }}\r\n                          selectionChange={this.selectionChange}\r\n                          headerSelectionChange={this.headerSelectionChange}\r\n                          pageable={true}\r\n                          scrollable={'scrollable'}\r\n                          dataStateChange={this.dataStateChange}\r\n\r\n                        />\r\n                      </>\r\n                    ) : (\r\n                      \"\"\r\n                    )\r\n            }\r\n          />\r\n\r\n        )}\r\n\r\n        {this.state.showConfirmAlert ? this.confirmAlert() : \"\"}\r\n        {/* //Ate234 janakumar ALPD-5000 Work List -> To get previously saved filter details when click the filter name \r\n          //ALPD-4912-To show the add popup to get input of filter name,done by Dhanushya RI\r\n        */}\r\n\r\n        {this.props.Login.modalShow ? ( \r\n          <ModalShow\r\n            modalShow={this.props.Login.modalShow}\r\n            closeModal={this.closeModalShow}\r\n            onSaveClick={this.onSaveModalFilterName}\r\n            validateEsign={this.validateEsign}\r\n            masterStatus={this.props.Login.masterStatus}\r\n            mandatoryFields={mandatoryFieldsFilter}\r\n            updateStore={this.props.updateStore}\r\n            selectedRecord={this.state.selectedRecord || {}}\r\n            modalTitle={this.props.Login.modalTitle}\r\n            modalBody={\r\n              this.props.Login.loadEsign ?\r\n                <Esign\r\n                  operation={this.props.Login.operation}\r\n                  onInputOnChange={this.onEsignInputOnChange}\r\n                  inputParam={this.props.Login.inputParam}\r\n                  selectedRecord={this.state.selectedRecord || {}}\r\n                />\r\n                :\r\n\r\n                <Col md={12}>\r\n                  <FormTextarea\r\n                    label={this.props.intl.formatMessage({ id: \"IDS_FILTERNAME\" })}\r\n                    name={\"sfiltername\"}\r\n                    // type=\"text\"\r\n                    onChange={this.onInputOnChange}\r\n                    placeholder={this.props.intl.formatMessage({ id: \"IDS_FILTERNAME\" })}\r\n                    value={this.state.selectedRecord ? this.state.selectedRecord.sfiltername : \"\"}\r\n                    isMandatory={true}\r\n                    required={true}\r\n                    maxLength={\"50\"}\r\n                  />\r\n                </Col>\r\n            }\r\n          />\r\n        )\r\n          : (\r\n            \"\"\r\n          )}\r\n      </>\r\n    );\r\n  }\r\n\r\n  \t//Ate234 janakumar ALPD-5000 Work List -> To get previously saved filter details when click the filter name\r\n  clickFilterDetail = (value) => {\r\n    //  if(this.props.Login.nfilternamecode!==value.nfilternamecode){\r\n    this.searchRef.current.value = \"\";\r\n    this.props.Login.change = false\r\n    let masterData = this.props.Login.masterData\r\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n\r\n    let inputData = {\r\n      userinfo: this.props.Login.userInfo,\r\n      FromDate: obj.fromDate,\r\n      ToDate: obj.toDate,\r\n      nfilternamecode: value && value.nfilternamecode ? value.nfilternamecode : -1,\r\n      npreregno: \"0\",\r\n      sampletypecode: (this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode) || -1,\r\n      regtypecode: parseInt(this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode) || -1,\r\n      regsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode) || -1,\r\n      approvalconfigurationcode: this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigcode || -1 : null,\r\n      napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue && this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode ? String(this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode) : -1,\r\n      userinfo: this.props.Login.userInfo,\r\n      designtemplatcode: (this.props.Login.masterData.realDesignTemplateMappingValue && this.props.Login.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode) || -1,\r\n      //ntranscode: this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus,         \r\n      ntranscode: this.props.Login.masterData.FilterStatusValue.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatusValue.ntransactionstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n    }\r\n    const inputParam = {\r\n      masterData, inputData\r\n\r\n    }\r\n    this.props.getWorklistFilterDetails(inputParam);\r\n    // }\r\n    // else{\r\n    //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDFILTERALREADYLOADED\" }));  \r\n    // }\r\n  }\r\n\r\n  //ALPD-4878 To open the save popup of filtername,done by Dhanushya RI\r\n  //Ate234 janakumar ALPD-5000 Work List -> To get previously saved filter details when click the filter name\r\n  openFilterName = () => {\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { modalShow: true, operation: \"create\", isFilterDetail: true, modalTitle: this.props.intl.formatMessage({ id: \"IDS_SAVEFILTER\" }) }\r\n    }\r\n    this.props.updateStore(updateInfo);\r\n  }\r\n\r\n\t\t//Ate234 janakumar ALPD-5000 Work List -> To get previously saved filter details when click the filter name\r\n  onSaveModalFilterName = () => {\r\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n\r\n    const masterData = this.props.Login.masterData;\r\n\r\n    let inputData = {\r\n      userinfo: this.props.Login.userInfo,\r\n      dfrom: obj.fromDate,\r\n      dto: obj.toDate,\r\n      sfiltername: this.state.selectedRecord && this.state.selectedRecord.sfiltername !== null\r\n        ? this.state.selectedRecord.sfiltername : \"\",\r\n      sampleTypeValue: this.props.Login.masterData && this.props.Login.masterData.RealSampleTypeValue,\r\n      regTypeValue: this.props.Login.masterData && this.props.Login.masterData.realRegTypeValue,\r\n      regSubTypeValue: this.props.Login.masterData && this.props.Login.masterData.realRegSubTypeValue,\r\n      filterStatusValue: this.props.Login.masterData && this.props.Login.masterData.RealFilterStatusValue,\r\n      approvalConfigValue: this.props.Login.masterData && this.props.Login.masterData.realApprovalVersionValue,\r\n      designTemplateMappingValue: this.props.Login.masterData && this.props.Login.masterData.realDesignTemplateMappingValue,\r\n      npreregno: \"0\",\r\n      nsampletypecode: (this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode) || -1,\r\n      nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode) || -1,\r\n      nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode) || -1,\r\n      //ntranscode: ((this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus !== undefined) || this.props.Login.masterData.FilterStatusValue.ntransactionstatus !== '0') ? String(this.props.Login.masterData.FilterStatusValue.ntransactionstatus) + ',' + String(transactionStatus.worklist) : \"-1\",\r\n      // ntranscode: this.props.Login.masterData.FilterStatusValue\r\n      //  && (this.props.Login.masterData.FilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\"'\",\",\",\",\") : \"'\",this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\"'\"),\r\n      // //ntranscode: this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus,         \r\n      ntransactionstatusfilter: this.props.Login.masterData.FilterStatusValue.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => `${item.ntransactionstatus}`).join(\",\"):`${this.props.Login.masterData.FilterStatusValue.ntransactionstatus}`,\r\n      ntranscode: this.props.Login.masterData.FilterStatusValue.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatusValue.ntransactionstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n      napprovalconfigcode: this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigcode || -1 : null,\r\n      napproveconfversioncode: this.props.Login.masterData.realApprovalVersionValue && this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode : -1,\r\n      userinfo: this.props.Login.userInfo,\r\n      ndesigntemplatemappingcode: (this.props.Login.masterData.realDesignTemplateMappingValue && this.props.Login.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode) || -1,\r\n      needExtraKeys: true,\r\n    }\r\n\r\n    let inputParam = {\r\n      classUrl: this.props.Login.inputParam.classUrl,\r\n      methodUrl: \"FilterName\",\r\n      inputData: inputData,\r\n      operation: this.props.Login.operation,\r\n    };\r\n    if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1\r\n      && inputData.ntransactionstatus !== \"-1\" && inputData.napprovalconfigcode !== -1 && inputData.napprovalversioncode !== \"-1\"\r\n      ) {\r\n\r\n      this.props.crudMaster(inputParam, masterData, \"modalShow\");\r\n\r\n\r\n    } else {\r\n      toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }))\r\n    }\r\n  }\r\n\r\n\r\n  onTabChange = (tabProps) => {\r\n    const screenName = tabProps.screenName;\r\n    if (screenName == \"IDS_WORKLISTHISTORY\") {\r\n      let inputData = {\r\n        masterData: this.props.Login.masterData,\r\n        userInfo: this.props.Login.userInfo,\r\n        nworklistcode: this.props.Login.masterData.selectedWorklist.nworklistcode\r\n      }\r\n      this.props.getWorklisthistoryAction(inputData, true);\r\n    } else {\r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: { screenName, activeKey: \"IDS_WORKLISTSAMPLE\" }\r\n      }\r\n\r\n      this.props.updateStore(updateInfo);\r\n\r\n    }\r\n  };\r\n\r\n\r\n  // dataStateChange = (event) => {\r\n  //   this.setState({\r\n  //     dataResult: process(\r\n  //       this.props.Login.masterData[\"selectedSection\"],\r\n  //       event.dataState\r\n  //     ),\r\n  //     sectionDataState: event.dataState,\r\n  //   });\r\n  // };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  reloadData = () => {\r\n    this.searchRef.current.value = \"\";\r\n    this.props.Login.masterData.searchedData = undefined;\r\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromdate, this.props.Login.masterData.todate, this.props.Login.userInfo)\r\n    let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\r\n    let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\r\n\r\n    let defaultSampleTypeValue = this.props.Login.masterData.defaultSampleTypeValue\r\n    let defaultRegTypeValue = this.props.Login.masterData.defaultRegTypeValue\r\n    let defaultRegSubTypeValue = this.props.Login.masterData.defaultRegSubTypeValue\r\n    let defaultFilterStatusValue = this.props.Login.masterData.defaultFilterStatusValue\r\n    let defaultApprovalVersionValue = this.props.Login.masterData.defaultApprovalVersion\r\n    let defaultApprovalVersion = this.props.Login.masterData.defaultApprovalVersionValue\r\n    let masterData = { ...this.props.Login.masterData, realFromDate, realToDate, defaultSampleTypeValue, defaultRegTypeValue, defaultRegSubTypeValue, defaultFilterStatusValue, defaultApprovalVersionValue }\r\n    let inputData = {\r\n      nsampletypecode: (this.props.Login.masterData.defaultSampleTypeValue && this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode) || -1,\r\n      nregtypecode: parseInt(this.props.Login.masterData.defaultRegTypeValue && this.props.Login.masterData.defaultRegTypeValue.nregtypecode) || -1,\r\n      nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegSubTypeValue && this.props.Login.masterData.defaultRegSubTypeValue.nregsubtypecode) || -1,\r\n      //  ntransactionstatus: (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1,\r\n      ntransactionstatus: (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1,\r\n\r\n      userinfo: this.props.Login.userInfo,\r\n      napprovalconfigversioncode: (this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode) || -1,\r\n\r\n    }\r\n    if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalconfigversioncode !== -1 && inputData.ntransactionstatus !== \"-1\") {\r\n\r\n      inputData['fromdate'] = obj.fromDate;\r\n      inputData['todate'] = obj.toDate;\r\n      inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n      let inputParam = {\r\n        masterData,\r\n        inputData,\r\n        searchTestRef: this.searchTestRef,\r\n        skip: this.state.skip,\r\n        take: this.state.take,\r\n        testskip: this.state.testskip,\r\n        testtake: this.state.testtake,\r\n        isClearSearch: this.props.Login.isClearSearch,\r\n\r\n\r\n      }\r\n      this.props.getWorklistDetailFilter(inputParam)\r\n    } else {\r\n      toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }))\r\n    }\r\n  };\r\n\r\n\r\n\r\n  ConfirmDelete = (operation, deleteId) => {\r\n    this.confirmMessage.confirm(\r\n      \"deleteMessage\",\r\n      this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n      () =>\r\n        this.DeleteWorklist(\r\n          operation,\r\n          deleteId,\r\n          operation.screenName ? operation.screenName : \"IDS_WORKLIST\"\r\n        )\r\n    );\r\n  };\r\n\r\n\r\n\r\n  DeleteWorklist = (operation, ncontrolCode) => {\r\n    let inputData = [];\r\n\r\n    inputData[\"worklist\"] = this.props.Login.masterData.selectedWorklist;\r\n    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromdate, this.props.Login.masterData.todate, this.props.Login.userInfo)\r\n    inputData['fromdate'] = obj.fromDate;\r\n    inputData['todate'] = obj.toDate;\r\n    inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n    inputData[\"napprovalconfigversioncode\"] = (this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode)\r\n    inputData[\"ntransactionstatus\"] = (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1\r\n    const postParam = {\r\n      inputListName: \"Worklist\",\r\n      selectedObject: \"selectedWorklist\",\r\n      primaryKeyField: \"nworklistcode\",\r\n      primaryKeyValue:\r\n        this.props.Login.masterData.selectedWorklist.nworklistcode,\r\n      fetchUrl: \"worklist/getWorklistSelectSample\",\r\n      fecthInputObject: { userinfo: this.props.Login.userInfo, ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode, nneedsampleandhistory: transactionStatus.YES },\r\n    };\r\n\r\n    const inputParam = {\r\n      methodUrl: \"Worklist\",\r\n      postParam,\r\n      classUrl: this.props.Login.inputParam.classUrl,\r\n      inputData: inputData,\r\n      operation: operation.operation,\r\n    };\r\n    const masterData = this.props.Login.masterData;\r\n    if (\r\n      showEsign(\r\n        this.props.Login.userRoleControlRights,\r\n        this.props.Login.userInfo.nformcode,\r\n        ncontrolCode\r\n      )\r\n    ) {\r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: {\r\n          loadEsign: true,\r\n          screenData: { inputParam, masterData },\r\n          openModal: true,\r\n          screenName: \"Worklist\",\r\n          operation: operation.operation,\r\n        },\r\n      };\r\n      this.props.updateStore(updateInfo);\r\n    } else {\r\n      this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n    }\r\n\r\n  };\r\n\r\n\r\n\r\n  onApproveClick = () => {\r\n\r\n\r\n    //onClick={() => this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, approvalId)}\r\n    //if (this.props.Login.masterData.SelectedSupplier.ntransactionstatus === transactionStatus.DRAFT) {\r\n    const ncontrolCode = this.state.controlMap.has(\"GenerateWorklist\") && this.state.controlMap.get(\"GenerateWorklist\").ncontrolcode\r\n    let inputData = [];\r\n    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    const masterData = this.props.Login.masterData;\r\n    // //add               \r\n    let postParam = undefined;\r\n    inputData[\"worklist\"] = masterData.selectedWorklist;\r\n    inputData[\"ncontrolCode\"] = ncontrolCode;\r\n    inputData[\"ndesigntemplatemappingcode\"] = masterData.ndesigntemplatemappingcode;\r\n    inputData[\"ntransactionstatus\"] = (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1;\r\n\r\n    // inputData[\"supplier\"] = this.props.Login.masterData.SelectedSupplier;\r\n    postParam = {\r\n      inputListName: \"Worklist\",\r\n      selectedObject: \"selectedWorklist\",\r\n      primaryKeyField: \"nworklistcode\",\r\n      primaryKeyValue:\r\n        this.props.Login.masterData.selectedWorklist.nworklistcode,\r\n      fetchUrl: \"worklist/getWorklistSelectSample\",\r\n      fecthInputObject: { userinfo: this.props.Login.userInfo, ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode, nneedsampleandhistory: transactionStatus.YES },\r\n    };\r\n    const inputParam = {\r\n      classUrl: 'worklist',\r\n      methodUrl: \"Worklist\",\r\n      inputData: inputData,\r\n      operation: \"prepare\", postParam\r\n    }\r\n    let saveType;\r\n\r\n\r\n\r\n    const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n    if (esignNeeded) {\r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: {\r\n          loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"prepare\", screenName: \"Worklist\"\r\n        }\r\n      }\r\n      this.props.updateStore(updateInfo);\r\n    }\r\n    else {\r\n      //this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n      this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, ncontrolCode)\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  onComboChange = (comboData, fieldName, caseNo) => {\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n\r\n    if (comboData !== null) {\r\n      switch (caseNo) {\r\n        case 1:\r\n          if (selectedRecord[fieldName] && selectedRecord[fieldName].value !== comboData.value) {\r\n            delete selectedRecord[\"ntestcode\"]\r\n          }\r\n          selectedRecord[fieldName] = comboData;\r\n          //this.setState({selectedRecord});\r\n          this.props.getSectionbaseTest(selectedRecord, this.props.Login.userInfo, this.props.Login.masterData, this.props.Login.ncontrolCode)\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    else {\r\n      if (selectedRecord[\"nsectioncode\"]) {\r\n        delete selectedRecord[\"nsectioncode\"];\r\n        delete selectedRecord[\"nusercode\"];\r\n\r\n      }\r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: { selectedRecord }\r\n      }\r\n      this.props.updateStore(updateInfo);\r\n    }\r\n  };\r\n\r\n  closeModal = () => {\r\n    let loadEsign = this.props.Login.loadEsign;\r\n    let openModal = this.props.Login.openModal;\r\n    let modalShow = this.props.Login.modalShow;\r\n    let selectedRecord = this.props.Login.selectedRecord;\r\n    let openChildModal = this.props.Login.openChildModal;\r\n    if (this.props.Login.loadEsign) {\r\n      if ((this.props.Login.operation.operation ? this.props.Login.operation.operation : this.props.Login.operation) === \"delete\") {\r\n        loadEsign = false;\r\n        openModal = false;\r\n        openChildModal = false;\r\n        selectedRecord = {};\r\n      } else {\r\n        loadEsign = false;\r\n        // selectedRecord[\"agree\"] = transactionStatus.NO;\r\n        selectedRecord['esignpassword'] = \"\"\r\n        selectedRecord['esigncomments'] = \"\"\r\n        selectedRecord['esignreason'] = \"\"\r\n        modalShow = true;\r\n        openModal = false;\r\n        openChildModal = false;\r\n\r\n      }\r\n    } else {\r\n      openModal = false;\r\n      modalShow = false;\r\n      openChildModal = false;\r\n      selectedRecord = {};\r\n    }\r\n\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { openModal, modalShow, loadEsign, selectedRecord, selectedId: null, openChildModal },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n\r\n\r\n  viewSample = (viewdetails) => {\r\n    //let openModal = this.props.Login.openModal;\r\n    //let openModal = true;\r\n    //let screenName = 'IDS_VIEWDETAILS'\r\n\r\n    this.props.ViewSampleDetails(this.props.Login.masterData, \"IDS_PREVIOUSRESULTVIEW\", this.props.Login.userInfo, viewdetails);\r\n  };\r\n\r\n  closeModalShow = () => {\r\n    let loadEsign = this.props.Login.loadEsign;\r\n\r\n    let modalShow = this.props.Login.modalShow;\r\n    let selectedRecord = this.props.Login.selectedRecord;\r\n    if (this.props.Login.loadEsign) {\r\n      loadEsign = false;\r\n    } else {\r\n      modalShow = false;\r\n      selectedRecord = {};\r\n    }\r\n\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { modalShow, selectedRecord, selectedId: null, loadEsign },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n  componentDidUpdate(previousProps) {\r\n    let updateState = false;\r\n    let {\r\n      selectedRecord, addedComponentList,\r\n      userRoleControlRights,\r\n      controlMap,\r\n      filterData,\r\n      nfilterInstrumentCategory,\r\n      filterInstrumentCategory, RegistrationSubTypeList, FilterStatusList, SampletypeList,\r\n      RegistrationTypeList, DynamicGridItem, DynamicGridMoreItem, ConfigVersionList, subsampleGridItem, sampleGridItem, testGridItem = [], samplegridmoreitem, testGridItems\r\n      , addSelectAll, deleteSelectAll } = this.state;\r\n    if (\r\n      this.props.Login.selectedRecord !== previousProps.Login.selectedRecord\r\n    ) {\r\n      selectedRecord = this.props.Login.selectedRecord;\r\n      updateState = true;\r\n    }\r\n    if (\r\n      this.props.Login.userInfo.nformcode !==\r\n      previousProps.Login.userInfo.nformcode\r\n    ) {\r\n      userRoleControlRights = [];\r\n      if (this.props.Login.userRoleControlRights) {\r\n        this.props.Login.userRoleControlRights[\r\n          this.props.Login.userInfo.nformcode\r\n        ] &&\r\n          Object.values(\r\n            this.props.Login.userRoleControlRights[\r\n            this.props.Login.userInfo.nformcode\r\n            ]\r\n          ).map((item) => userRoleControlRights.push(item.ncontrolcode));\r\n      }\r\n      controlMap = getControlMap(\r\n        this.props.Login.userRoleControlRights,\r\n        this.props.Login.userInfo.nformcode\r\n      );\r\n      updateState = true;\r\n    }\r\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n      const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\r\n      RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\r\n\r\n      const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\r\n      RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\r\n\r\n      const FilterStatusListMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\", \"stransdisplaystatus\", undefined, undefined, false);\r\n      FilterStatusList = FilterStatusListMap.get(\"OptionList\");\r\n\r\n      const SampletypeListMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'ascending', 'nsampletypecode', false);\r\n      SampletypeList = SampletypeListMap.get(\"OptionList\");\r\n      const ConfigVersionListMap = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], \"napprovalconfigversioncode\", \"sversionname\", 'descending', 'ntransactionstatus', false);\r\n      ConfigVersionList = ConfigVersionListMap.get(\"OptionList\");\r\n      nfilterInstrumentCategory = this.state.nfilterInstrumentCategory || {};\r\n      addSelectAll = false;\r\n      deleteSelectAll = true;\r\n      if (\r\n        this.props.Login.masterData.SelectedInsCat &&\r\n        this.props.Login.masterData.SelectedInsCat !==\r\n        previousProps.Login.masterData.SelectedInsCat\r\n      ) {\r\n        nfilterInstrumentCategory = {\r\n          label: this.props.Login.masterData.SelectedInsCat.stestsynonym,\r\n          value: this.props.Login.masterData.SelectedInsCat.ntestcode,\r\n          item: this.props.Login.masterData.SelectedInsCat,\r\n        };\r\n      }\r\n      filterData = this.generateBreadCrumData();\r\n      updateState = true;\r\n    }\r\n\r\n    if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n      const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n\r\n\r\n      testGridItem[0] = dynamicColumn.testListFields.releasetestfields[0] ? dynamicColumn.testListFields.releasetestfields[0] : [];\r\n      sampleGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n      subsampleGridItem = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\r\n      testGridItems = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : [];\r\n      //testGridItem= dynamicColumn.conditionfields ? dynamicColumn.conditionfields : [];\r\n\r\n      DynamicGridItem = [...sampleGridItem, ...subsampleGridItem, ...testGridItems.slice(1), ...testGridItem]\r\n      samplegridmoreitem = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n      DynamicGridMoreItem = [...samplegridmoreitem]\r\n      //DynamicGridItem.push(dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [])\r\n    }\r\n\r\n\r\n    if (\r\n      this.props.Login.masterData.filterInstrumentCategory !==\r\n      previousProps.Login.masterData.filterInstrumentCategory\r\n    ) {\r\n      const insCategoryMap = constructOptionList(\r\n        this.props.Login.masterData.filterInstrumentCategory || [],\r\n        \"ntestcode\",\r\n        \"stestsynonym\",\r\n        \"ntestcategorycode\",\r\n        \"ascending\",\r\n        false\r\n      );\r\n      filterInstrumentCategory = insCategoryMap.get(\"OptionList\");\r\n      if (insCategoryMap.get(\"DefaultValue\")) {\r\n        nfilterInstrumentCategory = insCategoryMap.get(\"DefaultValue\");\r\n      } else if (\r\n        filterInstrumentCategory &&\r\n        filterInstrumentCategory.length > 0\r\n      ) {\r\n        nfilterInstrumentCategory = filterInstrumentCategory[0];\r\n      }\r\n      updateState = true;\r\n    }\r\n\r\n\r\n    // let updateState = false;\r\n    let updateStateObject = {};\r\n    if (this.props.Login.addedComponentList !== previousProps.Login.addedComponentList) {\r\n\r\n      addSelectAll = false;\r\n      deleteSelectAll = true;\r\n\r\n      this.setState({\r\n        addedComponentList: this.props.Login.addedComponentList,\r\n        addSelectAll, deleteSelectAll\r\n      });\r\n    }\r\n\r\n    if (this.props.addedComponentList !== previousProps.addedComponentList) {\r\n      // this.setState({ addedComponentList : this.props.addedComponentList});\r\n      updateState = true;\r\n      updateStateObject = { ...updateStateObject, addedComponentList: this.props.addedComponentList };\r\n    }\r\n\r\n    if (this.props.Login.dataState !== previousProps.Login.dataState) {\r\n      if (this.props.Login.dataState) {\r\n        delete (this.props.Login.dataState.filter)\r\n        delete (this.props.Login.dataState.sort)\r\n        this.setState({ dataState: this.props.Login.dataState });\r\n      }\r\n    }\r\n\r\n    if (this.props.Login.addComponentDataList !== previousProps.Login.addComponentDataList) {\r\n      this.setState({ addComponentDataList: this.props.Login.addComponentDataList });\r\n    }\r\n    if (this.props.Login.addComponentSortedList !== previousProps.Login.addComponentSortedList) {\r\n      this.setState({ addComponentSortedList: this.props.Login.addComponentSortedList });\r\n    }\r\n    //ADDed by Neeraj-ALPD-5136\r\n    //WorkList Screen -> Including filter in Data selection Kendo Grid\r\n    if (this.props.Login.masterData.WorklistSamples !== previousProps.Login.masterData.WorklistSamples) {\r\n      let worklistSamplesList = this.props.Login.masterData.WorklistSamples || []\r\n      let updatedSortedList = worklistSamplesList.sort((a, b) => {\r\n        const A = a.nworklistsamplecode;\r\n        const B = b.nworklistsamplecode; // Corrected from 'a' to 'b'\r\n\r\n        return A - B; // Sort in ascending order\r\n      });\r\n      this.setState({ WorklistSamples: updatedSortedList });\r\n    }\r\n\r\n\r\n    if (updateState) {\r\n      this.setState({\r\n        selectedRecord,\r\n        userRoleControlRights,\r\n        controlMap,\r\n        filterData,\r\n        nfilterInstrumentCategory,\r\n        filterInstrumentCategory, RegistrationSubTypeList, FilterStatusList, SampletypeList,\r\n        RegistrationTypeList, DynamicGridItem, ConfigVersionList, DynamicGridMoreItem, addSelectAll, deleteSelectAll\r\n      });\r\n    }\r\n  }\r\n\r\n  generateBreadCrumData() {\r\n    //obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n\r\n    const breadCrumbData = [];\r\n    if (this.props.Login.masterData && this.props.Login.masterData.Worklist) {\r\n      const obj = convertDateValuetoString(this.props.Login.masterData.fromdate, this.props.Login.masterData.todate, this.props.Login.userInfo)\r\n\r\n      breadCrumbData.push({\r\n\r\n        \"label\": \"IDS_FROM\",\r\n        \"value\": obj.breadCrumbFrom\r\n      }, {\r\n        \"label\": \"IDS_TO\",\r\n        \"value\": obj.breadCrumbto\r\n      },\r\n        // {\r\n        //   \"label\": \"IDS_SAMPLETYPE\",\r\n        //   \"value\": this.props.Login.masterData.defaultSampleTypeValue ? this.props.Login.masterData.defaultSampleTypeValue.ssampletypename || \"NA\" :\r\n        //     this.props.Login.masterData.defaultSampleTypeValue ? this.props.Login.masterData.defaultSampleTypeValue.ssampletypename || \"NA\" : \"NA\"\r\n        // },\r\n        {\r\n          \"label\": \"IDS_REGTYPE\",\r\n          \"value\": this.props.Login.masterData.defaultRegTypeValue ? this.props.Login.masterData.defaultRegTypeValue.sregtypename || \"NA\" :\r\n            this.props.Login.masterData.defaultRegTypeValue ? this.props.Login.masterData.defaultRegTypeValue.sregtypename || \"NA\" : \"NA\"\r\n        }, {\r\n        \"label\": \"IDS_REGSUBTYPE\",\r\n        \"value\": this.props.Login.masterData.defaultRegSubTypeValue ? this.props.Login.masterData.defaultRegSubTypeValue.sregsubtypename || \"NA\" :\r\n          this.props.Login.masterData.defaultRegSubTypeValue ?\r\n            this.props.Login.masterData.defaultRegSubTypeValue.sregsubtypename : \"NA\"\r\n      },\r\n\r\n        // {\r\n        //   \"label\": \"IDS_CONFIGVERSION\",\r\n        //   \"value\": this.props.Login.masterData.defaultApprovalVersion ?\r\n        //     this.props.Login.masterData.defaultApprovalVersion.sversionname || \"NA\" :\r\n        //     this.props.Login.masterData.defaultApprovalVersion ? this.props.Login.masterData.defaultApprovalVersion.sversionname || \"NA\" : \"NA\"\r\n        // },\r\n\r\n\r\n        {\r\n          \"label\": \"IDS_WORKLISTSTATUS\",\r\n          \"value\": this.props.Login.masterData.defaultFilterStatusValue ?\r\n            this.props.Login.masterData.defaultFilterStatusValue.stransdisplaystatus || \"NA\" :\r\n            this.props.Login.masterData.defaultFilterStatusValue ?\r\n              this.props.Login.masterData.defaultFilterStatusValue.stransdisplaystatus || \"NA\" : \"NA\"\r\n        }\r\n        //];\r\n      );\r\n    }\r\n    return breadCrumbData;\r\n  }\r\n\r\n  openFilter = () => {\r\n    let showFilter = !this.props.Login.showFilter;\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { showFilter },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n  closeFilter = () => {\r\n    let inputValues = {\r\n      RegistrationSubType: this.props.Login.masterData.realRegistrationSubTypeList || [],\r\n      RegistrationType: this.props.Login.masterData.realRegistrationTypeList || [],\r\n      FilterStatus: this.props.Login.masterData.realFilterStatusList || [],\r\n      SampleType: this.props.Login.masterData.realSampleTypeList || [],\r\n      ApprovalConfigVersion: this.props.Login.masterData.realApprovalConfigVersionList || [],\r\n      FilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\r\n      ApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue || {},\r\n      RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue || {},\r\n      RegTypeValue: this.props.Login.masterData.realRegTypeValue || {},\r\n      SampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\r\n      fromDate: this.props.Login.masterData.fromdate || new Date(),// ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date(),\r\n      toDate: this.props.Login.masterData.todate || new Date(),// ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date(),\r\n      defaultSampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\r\n      defaultApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue || {},\r\n\r\n    }\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { showFilter: false, masterData: { ...this.props.Login.masterData, ...inputValues } },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n  //Ate234 janakumar ALPD-5000 Work List -> To get previously saved filter details when click the filter name\r\n  onFilterSubmit = () => {\r\n    this.searchRef.current.value = \"\";\r\n\r\n    this.props.Login.masterData.searchedData = undefined;\r\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n\r\n    let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\r\n    let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\r\n    let fromdate = this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date();\r\n    let todate = this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date();\r\n\r\n    let defaultSampleTypeValue = this.props.Login.masterData.defaultSampleTypeValue\r\n    let defaultRegTypeValue = this.props.Login.masterData.RegTypeValue\r\n    let defaultRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue\r\n    let defaultFilterStatusValue = this.props.Login.masterData.FilterStatusValue\r\n    let defaultApprovalVersion = this.props.Login.masterData.defaultApprovalVersionValue\r\n    let RealSampleTypeValue = this.props.Login.masterData.defaultSampleTypeValue\r\n    let realApprovalVersionValue = this.props.Login.masterData.defaultApprovalVersionValue\r\n    let realRegTypeValue = this.props.Login.masterData.RegTypeValue\r\n    let realRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue\r\n    let RealFilterStatusValue = this.props.Login.masterData.FilterStatusValue\r\n    let realApprovalConfigVersionList = this.props.Login.masterData.ApprovalConfigVersion\r\n    let realFilterStatusList = this.props.Login.masterData.FilterStatus\r\n    let realRegistrationTypeList = this.props.Login.masterData.RegistrationType\r\n    let realRegistrationSubTypeList = this.props.Login.masterData.RegistrationSubType\r\n    let masterData = {\r\n      ...this.props.Login.masterData, realFromDate, realToDate,\r\n      defaultSampleTypeValue, defaultRegTypeValue, defaultRegSubTypeValue, defaultFilterStatusValue, defaultApprovalVersion,\r\n      fromdate, todate, RealSampleTypeValue, realApprovalVersionValue, realRegTypeValue, realRegSubTypeValue, RealFilterStatusValue, realApprovalConfigVersionList,\r\n      realFilterStatusList, realRegistrationTypeList, realRegistrationSubTypeList\r\n    };\r\n\r\n    let inputData = {\r\n      //npreregno: \"0\",\r\n      nsampletypecode: (this.props.Login.masterData.defaultSampleTypeValue && this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode) || -1,\r\n      nregtypecode: parseInt(this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode) || -1,\r\n      nregsubtypecode: parseInt(this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode) || -1,\r\n      //ntransactionstatus: (this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus) || -1,\r\n      ntransactionstatus: this.props.Login.masterData.FilterStatusValue\r\n        && (this.props.Login.masterData.FilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.FilterStatusValue.ntransactionstatus),\r\n\r\n      ntranscode: this.props.Login.masterData.FilterStatusValue\r\n        && (this.props.Login.masterData.FilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.FilterStatusValue.ntransactionstatus),\r\n      napprovalconfigversioncode: (this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode) || -1,\r\n      napprovalversioncode: (this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode) || -1,\r\n      userinfo: this.props.Login.userInfo,\r\n      needExtraKeys: true,\r\n      saveFilterSubmit:true,\r\n      nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n      sampleTypeValue:this.props.Login.masterData.defaultSampleTypeValue && this.props.Login.masterData.defaultSampleTypeValue,\r\n      regTypeValue:this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue,\r\n      regSubTypeValue:this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue,\r\n      filterStatusValue:this.props.Login.masterData && this.props.Login.masterData.RealFilterStatusValue,\r\n      approvalConfigValue: this.props.Login.masterData && this.props.Login.masterData.realApprovalVersionValue,\r\n      designTemplateMappingValue: (this.props.Login.masterData.realDesignTemplateMappingValue && this.props.Login.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode) || -1,\r\n      napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue && this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode ? String(this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode) : -1,\r\n\r\n\r\n\r\n    }\r\n    if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalconfigversioncode !== -1\r\n      && inputData.ntranscode !== \"-1\") {\r\n\r\n      inputData['fromdate'] = obj.fromDate;\r\n      inputData['todate'] = obj.toDate;\r\n      inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n      let inputParam = {\r\n        masterData,\r\n        inputData,\r\n        searchTestRef: this.searchTestRef,\r\n        skip: this.state.skip,\r\n        take: this.state.take,\r\n        testskip: this.state.testskip,\r\n        testtake: this.state.testtake,\r\n\r\n\r\n      }\r\n      this.props.getWorklistDetailFilter(inputParam)\r\n    } else {\r\n      toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }))\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n  callService,\r\n  crudMaster,\r\n  getWorklistDetail,\r\n  filterColumnData,\r\n  getSectionAndTest,\r\n  updateStore,\r\n  validateEsignCredential,\r\n  onWorklistApproveClick,\r\n  OpenDate,\r\n  CloseDate, viewAttachment, getInstrumentCombo, getWorklistSample, getRegTypeTestWise, getRegTypeWorklist,\r\n  getSectionbaseTest, getWorklistDetailFilter, getEditSectionAndTest, createWorklistCreation, getConfigVersionTestWise,\r\n  ViewSampleDetails, getWorklisthistoryAction, reportWorklist, getRegSubTypeWise, insertWorklist,\r\n  generateControlBasedReport, validateEsignforWorklist, getWorklistFilterDetails\r\n})(injectIntl(WorkList));\r\n"]},"metadata":{},"sourceType":"module"}