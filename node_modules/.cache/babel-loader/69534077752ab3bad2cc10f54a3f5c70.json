{"ast":null,"code":"import { DEFAULT_RETURN } from './LoginTypes';\nimport rsapi from '../rsapi';\nimport { toast } from 'react-toastify';\nimport { sortData, constructOptionList } from '../components/CommonScript';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport Axios from 'axios';\nexport function getSiteDetail(Site, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"site/getSiteScreen\", {\n      nsitecode: Site.nsitecode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSiteCombo(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n\n    if (operation === \"create\") {\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      urlArray = [timeZoneService];\n    } else {\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      const SiteByID = rsapi.post(\"site/getActiveSiteById\", {\n        [primaryKeyName]: masterData.selectedSite[primaryKeyName],\n        \"userinfo\": userInfo\n      });\n      urlArray = [timeZoneService, SiteByID];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let timezone = [];\n      let selectedRecord = {};\n      const timezoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n      const TimeZoneList = timezoneMap.get(\"OptionList\");\n\n      if (operation === \"update\") {\n        selectedRecord = response[1].data;\n        timezone.push({\n          \"value\": response[1].data[\"ntimezonecode\"],\n          \"label\": response[1].data[\"stimezoneid\"]\n        });\n        selectedRecord[\"ntimezonecode\"] = timezone[0]; // edqmManufacturer.push({\n        //     label: response[1].data[\"sofficialmanufname\"],\n        //     value: response[1].data[\"nofficialmanufcode\"]\n        // });\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          TimeZoneList,\n          isOpen: true,\n          selectedRecord: operation === \"update\" ? selectedRecord : {\n            \"ntransactionstatus\": 1\n          },\n          timezone: timezone,\n          operation: operation,\n          screenName: screenName,\n          openModal: true,\n          ncontrolCode: ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/SiteAction.js"],"names":["DEFAULT_RETURN","rsapi","toast","sortData","constructOptionList","initRequest","intl","Axios","getSiteDetail","Site","userInfo","masterData","dispatch","post","nsitecode","userinfo","then","response","data","type","payload","operation","modalName","undefined","loading","dataState","catch","error","status","message","warn","getSiteCombo","screenName","primaryKeyName","ncontrolCode","urlArray","timeZoneService","SiteByID","selectedSite","all","timezone","selectedRecord","timezoneMap","TimeZoneList","get","push","isOpen","openModal","formatMessage","id"],"mappings":"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","sourcesContent":["import {DEFAULT_RETURN} from './LoginTypes';\r\nimport rsapi from '../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport {sortData,constructOptionList} from '../components/CommonScript';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport Axios from 'axios';\r\n\r\n\r\nexport function getSiteDetail (Site, userInfo, masterData) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"site/getSiteScreen\", {nsitecode:Site.nsitecode, userinfo:userInfo})\r\n   .then(response=>{      \r\n        masterData = {...masterData, ...response.data};        \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, operation:null, modalName:undefined, \r\n             loading:false,dataState:undefined}});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}}\r\n\r\nexport function getSiteCombo(screenName, operation, primaryKeyName,  masterData, userInfo, ncontrolCode) {\r\n    return function(dispatch){ \r\n       let urlArray = [];\r\n       if (operation === \"create\") {\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n           urlArray = [timeZoneService];\r\n       }\r\n       else {\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n\r\n           const SiteByID = rsapi.post(\"site/getActiveSiteById\", { [primaryKeyName] :masterData.selectedSite[primaryKeyName], \"userinfo\": userInfo });\r\n           urlArray = [timeZoneService,SiteByID];\r\n       }\r\n   \r\n       dispatch(initRequest(true));\r\n       Axios.all(urlArray)\r\n           .then(response => {\r\n   \r\n               let timezone = [];\r\n               let selectedRecord = {};\r\n           const timezoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\",\r\n            \"stimezoneid\", undefined, undefined, false);\r\n\r\n            const TimeZoneList = timezoneMap.get(\"OptionList\");\r\n               if (operation === \"update\") {\r\n   \r\n                selectedRecord = response[1].data;\r\n               timezone.push({ \"value\": response[1].data[\"ntimezonecode\"], \"label\": response[1].data[\"stimezoneid\"] });\r\n                \r\n                \r\n                 selectedRecord[\"ntimezonecode\"] = timezone[0];\r\n                \r\n                   // edqmManufacturer.push({\r\n                   //     label: response[1].data[\"sofficialmanufname\"],\r\n                   //     value: response[1].data[\"nofficialmanufcode\"]\r\n                   // });\r\n               }\r\n               dispatch({type: DEFAULT_RETURN, \r\n                   payload:{  \r\n                    TimeZoneList, isOpen: true,  \r\n                   selectedRecord: operation === \"update\" ? selectedRecord : {\"ntransactionstatus\": 1}, \r\n                   timezone: timezone ,\r\n                   operation: operation,\r\n                        screenName: screenName,\r\n                       openModal : true, ncontrolCode: ncontrolCode, loading:false\r\n               }});\r\n           })\r\n           .catch(error => {\r\n               dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n               if (error.response.status === 500) {\r\n                   toast.error(intl.formatMessage({ id: error.message }));\r\n               }\r\n               else {\r\n                   toast.warn(intl.formatMessage({ id: error.response.data }));\r\n               }\r\n           })\r\n       }\r\n   }\r\n"]},"metadata":{},"sourceType":"module"}