{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\PreRegisterSlideOutModal.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Button, Card, Col, Form, FormGroup, FormLabel, Modal, Nav, Row } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ModalInner, ReadOnlyText } from '../../components/App.styles';\nimport { RegistrationType, transactionStatus } from '../../components/Enumeration';\nimport { faCalculator, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { comboChild, convertDateTimetoString, getSameRecordFromTwoArrays } from '../../components/CommonScript';\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout';\nimport { HeaderSpan } from './registration.styled';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { process } from '@progress/kendo-data-query';\nimport AdvFilter from '../../components/AdvFilter';\nimport SpecFilter from './SpecFilter';\nimport RegistrationAdvanceFilter from './RegistrationAdvanceFilter';\nimport RegisterSlideOut from './RegisterSlideOut';\nimport AddSpecification from './AddSpecification';\nimport AddTest from './AddTest';\nimport { connect } from 'react-redux';\nimport { getPreviewTemplate, getChildValues, getNewRegSpecification, AddComponents, updateStore, EditComponent, getTest } from '../../actions';\nimport AddComponentPopUp from './AddComponentPopUp';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PreRegisterSlideOutModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formRef = React.createRef();\n    this.state = {\n      failedControls: [],\n      selectedRecord: this.props.Login.selectedRecord,\n      selectedSpec: this.props.Login.selectedSpec,\n      popUptestDataState: {\n        skip: 0,\n        take: 10\n      } // selectedRecord: {},\n      // selectComponent: {},\n      // selectedTest: {},\n      //  selectedTestData: {},\n      // selectedSpec: {},\n      //  selectComponent:this.props.Login.selectComponent\n\n    };\n\n    this.handleSaveClick = saveType => {\n      const failedControls = [];\n      const startLabel = [];\n      let label = \"IDS_ENTER\";\n      let mandatoryFields = [];\n      let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.loadComponent) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_RECEIVEDDATE\",\n          \"dataField\": \"dreceiveddate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_TIMEZONE\",\n          \"dataField\": \"ntzdreceivedate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.props.Login.selectComponent;\n      } else if (this.props.Login.loadTest) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_TEST\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.props.Login.selectedTestData;\n      } else if (this.props.Login.loadSpec) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_SPECIFICATION\",\n          \"dataField\": \"nallottedspeccode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n      } else {\n        this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": componentrow.label,\n                    \"dataField\": componentrow.label,\n                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                  });\n                }\n              }) : component.mandatory === true ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\";\n            });\n          });\n        });\n      }\n\n      if (this.props.esign) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_PASSWORD\",\n          \"dataField\": \"esignpassword\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"esigncomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      }\n\n      mandatoryFields.forEach(item => {\n        if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\n          const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n            id: item.idsName\n          }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n          failedControls.push(alertMessage);\n          startLabel.push(item.mandatoryLabel); //\"IDS_PROVIDE\";\n        } else {\n          if (item.validateFunction) {\n            const validateData = item.validateFunction;\n\n            if (validateData(selectedRecord[item.dataField]) === false) {\n              const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                id: item.idsName\n              }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n              failedControls.push(alertMessage);\n              startLabel.push(item.mandatoryLabel);\n            }\n          } else {\n            if (typeof selectedRecord[item.dataField] === \"object\") {\n              //to validate FormSelectSearch component\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel); //\"IDS_SELECT\";\n              }\n            } else if (typeof selectedRecord[item.dataField] === \"string\") {\n              //to handle string field -- added trim function\n              if (selectedRecord[item.dataField].trim().length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            } else {\n              //number field\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            }\n          }\n        } // else{\n        //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\n        //     failedControls.push(alertMessage);\n        // }\n\n      }); // console.log(\"validationPassed:\", failedControls);\n\n      if (failedControls.length === 0) {\n        if (saveType === 4) {\n          this.props.onExecuteClick(this.formRef);\n        } else if (saveType === 3) {\n          if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_CHECKAGREE\"\n            }));\n          } else {\n            this.props.validateEsign();\n          }\n        } else {\n          if (this.props.Login.loadSpec) {\n            let selectedSpec = this.state.selectedSpec;\n            selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\n            selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\n            selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"]; // this.setState({\n            //     selectedSpec, loadSpec: false\n            // })\n\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                selectedTestData: [],\n                loadSpec: false,\n                SelectedTest: [],\n                Test: [],\n                Component: []\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else if (this.props.Login.loadComponent) {\n            this.onSaveComponentClick(saveType, this.formRef);\n          } else if (this.props.Login.loadTest) {\n            this.onSaveTestClick(saveType, this.formRef);\n          } else {\n            this.props.onSaveClick(saveType, this.formRef);\n          }\n        }\n      } else {\n        //toast.info(`${this.props.intl.formatMessage({id:\"IDS_ENTER\"})} ${failedControls.join(\",\")}`);\n        label = startLabel[0] === undefined ? label : startLabel[0];\n        toast.info(`${this.props.intl.formatMessage({\n          id: label\n        })} ${failedControls[0]}`);\n      }\n    };\n\n    this.TestChange = (comboData, fieldName) => {\n      const selectedTestData = this.props.Login.selectedTestData || {};\n      selectedTestData[fieldName] = comboData; //this.setState({ selectedTestData });\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedTestData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      let parentList = [];\n      let childComboList = [];\n      let childColumnList = {};\n      let inputParem = {};\n      let comboName = customName || control.label;\n      const selectedRecord = this.state.selectedRecord || {};\n      let product = false;\n      let productCategory = false;\n      let nproductcatcode = -1;\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      if (control.name === 'Product') {\n        const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\n        const ncategorybasedflow = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label]['item']['ncategorybasedflow'];\n        nproductcatcode = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label].value;\n\n        if (ncategorybasedflow !== 3) {\n          product = true;\n        }\n      } else if (control.name === 'Product Category') {\n        // const ProductCategory=comboComponents.filetr(x=>x.name===\"Product Category\");\n        const ncategorybasedflow = comboData && comboData['item']['ncategorybasedflow'];\n\n        if (ncategorybasedflow === 3) {\n          productCategory = true;\n        }\n      }\n\n      if (control.child && control.child.length > 0) {\n        childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\");\n        childColumnList = {};\n        childComboList.map(columnList => {\n          const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\");\n        inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData.value,\n          item: comboData.item,\n          label: comboName\n        };\n        let nproductcode = -1;\n\n        if (product) {\n          nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n        }\n\n        const mapOfFilter = {\n          nproductcode,\n          nproductcatcode,\n          nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\n        };\n        this.props.getChildValues(inputParem, this.props.userInfo, selectedRecord, this.props.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter);\n      } else {\n        if (productCategory) {\n          const ncategorybasedflow = selectedRecord[comboName] && selectedRecord[comboName].value;\n        } else if (product) {\n          const nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n          const mapOfFilter = {\n            nproductcode,\n            nproductcatcode,\n            nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\n          };\n          this.props.getChildValues(inputParem, this.props.userInfo, selectedRecord, this.props.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter);\n        } else {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateValue, dateName, screenName) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (screenName === 'component') {\n        const selectComponent = this.props.Login.selectComponent;\n        selectComponent[dateName] = dateValue;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        selectedRecord[dateName] = dateValue;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.testdataStateChange = event => {\n      this.setState({\n        popUptestDataState: event.dataState\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.state.showFilter;\n      this.setState({\n        showFilter\n      });\n    };\n\n    this.closeFilter = () => {\n      this.setState({\n        showFilter: false\n      });\n    };\n\n    this.AddSpec = e => {\n      // this.setState({\n      //     loadSpec: true\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.addTestslide = selectedComponent => {\n      if (selectedComponent && Object.keys(selectedComponent).length > 0) {\n        delete selectedComponent[\"selected\"];\n        this.props.getTest(selectedComponent, this.props.Login);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTCOMPONENTTOADDTEST\"\n        }));\n      }\n    };\n\n    this.closeSpec = e => {\n      // this.setState({\n      //     loadSpec: false, selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec }\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: false,\n          selectedRecord: { ...this.state.selectedRecord,\n            ...this.state.selectedSpec\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeComponent = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadComponent: false,\n          selectComponent: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeTest = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadTest: false,\n          selectedTestData: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onspecChange = (event, fieldName) => {\n      if (event !== null) {\n        const selectedRecord = this.state.selectedRecord;\n        const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ? this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\n        selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\n        selectedRecord[\"nallottedspeccode\"] = event; //  if(this.props.Login.Component.length=== 0 ){\n\n        this.setState({\n          selectedRecord\n        }); // }else{\n        //     if(event.value!== oldpromarycode ){\n        //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n        //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\n        //     }\n        // }\n      }\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_REGISTRATION\",\n        operation: \"get\",\n        activeKey: event.key,\n        focusKey: event.key,\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedNode: event.item,\n        selectedRecord: this.state.selectedRecord,\n        primaryKey: event.primaryKey\n      };\n      this.props.getNewRegSpecification(inputParam, this.props.Login.masterData); // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\n      //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\n      // } else {\n      //     // if(event.key!== this.props.Login.ActiveKey ){\n      //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n      //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\n      //     // }\n      // }\n    };\n\n    this.selectSubSample = event => {\n      let selectedSubSample = event.dataItem;\n      let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedSubSample.ssamplename] ? this.props.Login.Test[selectedSubSample.ssamplename] : [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest,\n          selectedSubSample,\n          popUptestDataState: {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleComponentRowClick = event => {\n      let selectedComponent = event.dataItem;\n      let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest,\n          selectedComponent,\n          popUptestDataState: {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddComponent = () => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        this.props.AddComponents(Map);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onComponentChange = (comboData, fieldName) => {\n      if (comboData !== null) {\n        const selectComponent = this.props.Login.selectComponent || {};\n\n        if (fieldName === 'ntzdreceivedate') {\n          selectComponent[\"ntzdreceivedate\"] = comboData;\n        } else {\n          const oldspecsampletypecode = selectComponent.nspecsampletypecode;\n\n          if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {//selectComponent[\"nneedservice\"] = true;\n          }\n\n          selectComponent[\"ncomponentcode\"] = comboData;\n          selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputComponentOnChange = event => {\n      const selectComponent = this.props.Login.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectComponent\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveComponentClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.ComponentObjectAfterSave();\n        } else if (saveType === 2) {\n          this.ComponentObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\n        let selectedComponent = { ...this.props.Login.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        const dreceiveddate = selectedComponent[\"dreceiveddate\"];\n        objcomponent[\"dreceiveddate\"] = dreceiveddate;\n        objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n        objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\n        objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\n        selectedComponent = { ...selectedComponent,\n          ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadComponent: false,\n              openChildModal: false,\n              selectComponent: undefined,\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno]\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.editComponent = editselectedcomponent => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\n    };\n\n    this.deleteComponent = event => {\n      const dataItem = event;\n      const Component = this.props.Login.Component;\n      const Test = this.props.Login.Test;\n      let SelectedTest = this.props.Login.SelectedTest;\n      const index = Component.findIndex(x => x.slno === dataItem.slno);\n\n      if (index > -1) {\n        Component.splice(index, 1);\n      }\n\n      Test && Test[dataItem.slno] && delete Test[dataItem.slno];\n      SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0].slno];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: Component[0],\n          Test,\n          SelectedTest\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteTest = event => {\n      const dataItem = event;\n      let SelectedTest = this.props.Login.SelectedTest;\n      let selectedComponent = this.props.Login.selectedComponent;\n      const Test = this.props.Login.Test;\n      const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\n\n      if (index > -1) {\n        SelectedTest.splice(index, 1);\n      }\n\n      Test[selectedComponent.slno] = SelectedTest;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Test,\n          SelectedTest\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveTestClick = (saveType, formRef) => {\n      let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      selectedTestData.map(item => {\n        return selectedTestArray.push(item.item);\n      });\n      let selectedComponent = this.props.Login.selectedComponent;\n      let Test = this.props.Login.Test || [];\n      const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n      Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest: Test[selectedComponent.slno],\n          Test: Test,\n          selectedTestData: {},\n          loadTest: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.myRef = React.createRef();\n    this.componentColumnList = [{\n      \"idsName\": \"IDS_COMPONENTNAME\",\n      \"dataField\": \"scomponentname\",\n      width: \"200px\"\n    }, // { \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", width: \"200px\" },\n    // { \"idsName\": \"IDS_STORAGECONDITION\", \"dataField\": \"sstorageconditionname\", width: \"150px\" },\n    // { \"idsName\": \"IDS_STORAGELOCATION\", \"dataField\": \"sstoragelocationname\", width: \"150px\" },\n    // { \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\", width: \"150px\" },\n    {\n      \"idsName\": \"IDS_DATERECEIVED\",\n      \"dataField\": \"sreceiveddate\",\n      width: \"250px\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      width: \"200px\"\n    }];\n  }\n\n  componentDidUpdate(previousProps) {\n    let masterStatus = this.props.masterStatus;\n\n    if (this.props.Login.selectedTestData !== previousProps.Login.selectedTestData) {\n      this.setState({\n        selectedTestData: this.props.Login.selectedTestData\n      });\n    }\n\n    if (this.props.Login.selectComponent !== previousProps.Login.selectComponent) {\n      this.setState({\n        selectComponent: this.props.Login.selectComponent\n      });\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.selectedSpec !== previousProps.Login.selectedSpec) {\n      this.setState({\n        selectedSpec: this.props.Login.selectedSpec\n      });\n    }\n\n    if (masterStatus !== \"\" && masterStatus !== undefined) {\n      toast.warn(masterStatus);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterStatus: \"\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n      masterStatus = \"\";\n    }\n\n    if (this.props.innerPopup !== this.state.innerTop) {\n      setTimeout(() => {\n        let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\n\n        if (this.myRef && this.myRef.current) {\n          this.myRef.current.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n\n        if (scrollDoc) {\n          scrollDoc.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n      }, 100);\n      this.setState({\n        innerTop: this.props.innerPopup\n      });\n    }\n  }\n\n  ComponentObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.props.Login.selectComponent;\n    delete objcomponent.nneedservice;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      Component.unshift(saveComponent);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: {},\n          showSaveContinue: false,\n          loadComponent: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  ComponentObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    };\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      Component.unshift(saveComponent);\n      objcomponent1[\"scomments\"] = \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: objcomponent1\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  render() {\n    let saveType = 1;\n\n    if (this.props.ignoreFormValidation) {\n      saveType = 5;\n    }\n\n    let buttonLabel = \"Save\";\n    let idsLabel = \"IDS_SAVE\";\n\n    if (this.props.buttonLabel) {\n      buttonLabel = this.props.buttonLabel;\n      idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\n    }\n\n    const testColumnList = [{\n      \"idsName\": \"IDS_TESTNAME\",\n      \"dataField\": \"stestsynonym\",\n      width: \"200px\"\n    }, {\n      \"idsName\": \"IDS_SECTION\",\n      \"dataField\": \"ssectionname\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_SOURCE\",\n      \"dataField\": \"ssourcename\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_METHOD\",\n      \"dataField\": \"smethodname\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_INSTRUMENTCATEGORY\",\n      \"dataField\": \"sinstrumentcatname\",\n      width: \"200px\"\n    }];\n    const filterComponent = [{\n      \"specFIlter\": /*#__PURE__*/React.createElement(SpecFilter, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 830,\n          columnNumber: 27\n        }\n      })\n    }];\n    return /*#__PURE__*/React.createElement(Modal, {\n      size: this.props.Login.loadComponent ? 'lg' : this.state.loadSpec ? 'lg' : this.props.Login.loadTest ? 'lg' : 'xl' // size={this.props.templateData[0] ?\n      //     this.props.templateData[0].children ?\n      //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\n      ,\n      backdrop: \"static\",\n      className: this.props.className || \"\",\n      show: this.props.show,\n      onHide: this.props.closeModal,\n      enforceFocus: false,\n      dialogClassName: \"modal-dialog-slideout freakerstop\",\n      \"aria-labelledby\": \"add-user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 835,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 849,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add-user\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 850,\n        columnNumber: 21\n      }\n    }, this.props.graphView === true ? \"\" : this.props.inputParam ? this.props.esign === true ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ESIGN\",\n      defaultMessage: \"Esign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 853,\n        columnNumber: 33\n      }\n    }) : this.props.loginoperation ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 855,\n        columnNumber: 37\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, this.props.operation ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.operation && \"IDS_\".concat(this.props.operation.toUpperCase()),\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859,\n        columnNumber: 49\n      }\n    }), \" \", this.props.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 864,\n        columnNumber: 57\n      }\n    }) : \"\") : this.props.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870,\n        columnNumber: 49\n      }\n    }) : \"\") : \"\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.state.loadSpec ? this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ? this.closeComponent : this.props.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 875,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 879,\n        columnNumber: 25\n      }\n    })), this.props.esign === true ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 882,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 883,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SUBMIT\",\n      defaultMessage: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 884,\n        columnNumber: 29\n      }\n    })) : (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 889,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VALIDATE\",\n      defaultMessage: \"Validate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 890,\n        columnNumber: 33\n      }\n    })) : this.props.showCalculate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 893,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 894,\n        columnNumber: 37\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CALCULATE\",\n      defaultMessage: \"Calculate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 895,\n        columnNumber: 37\n      }\n    })) : this.props.showParam === true && this.props.showExecute ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 898,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCalculator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 899,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EXECUTE\",\n      defaultMessage: \"Execute\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 900,\n        columnNumber: 41\n      }\n    })) : this.props.noSave || this.props.graphView ? this.props.operation === \"view\" ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-user btn-primary-blue\",\n      role: \"button\",\n      onClick: this.props.resetView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 904,\n        columnNumber: 47\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RESET\",\n      defaultMessage: \"Reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 907,\n        columnNumber: 49\n      }\n    })) : this.props.hideSave ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 910,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 911,\n        columnNumber: 49\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: idsLabel,\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 912,\n        columnNumber: 49\n      }\n    })), this.props.operation === \"create\" && this.props.showSaveContinue ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 916,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 917,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVECONTINUE\",\n      defaultMessage: \"Save & Continue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 918,\n        columnNumber: 29\n      }\n    })) : \"\", (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 924,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 925,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 926,\n        columnNumber: 29\n      }\n    })) : \"\"), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 930,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalInner, {\n      ref: this.myRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 931,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 932,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 933,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      ref: this.formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 934,\n        columnNumber: 33\n      }\n    }, this.props.Login.loadSpec ? /*#__PURE__*/React.createElement(AddSpecification, {\n      AgaramTree: this.props.Login.AgaramTree,\n      openNodes: this.props.Login.OpenNodes,\n      handleTreeClick: this.onTreeClick,\n      focusKey: this.props.Login.FocusKey,\n      activeKey: this.props.Login.ActiveKey,\n      Specification: this.props.Login.Specification,\n      selectedRecord: this.state.selectedRecord,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      onSpecChange: this.onspecChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 937,\n        columnNumber: 45\n      }\n    }) : this.props.Login.loadTest ? /*#__PURE__*/React.createElement(AddTest, {\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.props.Login.selectedTestData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 950,\n        columnNumber: 49\n      }\n    }) : this.props.Login.loadComponent ? /*#__PURE__*/React.createElement(AddComponentPopUp, {\n      ref: this.myScrollRef,\n      selectComponent: this.props.Login.selectComponent || {},\n      RealSampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\n      RealRegTypeValue: this.props.Login.masterData.RealRegTypeValue || {},\n      RealRegSubTypeValue: this.props.Login.masterData.RealRegSubTypeValue || {},\n      RealFilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\n      formatMessage: this.props.intl.formatMessage,\n      handleDateChange: this.handleDateChange,\n      Component: this.props.Login.lstComponent || [],\n      onInputComponentOnChange: this.onInputComponentOnChange // onComboChange={this.onComponentComboChange}\n      ,\n      timeZoneList: this.props.Login.timeZoneList,\n      onComponentChange: this.onComponentChange,\n      userInfo: this.props.Login.userInfo,\n      sreceiveddate: this.props.Login.sreceiveddate || [],\n      CurrentTime: this.props.Login.CurrentTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 955,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(RegisterSlideOut, {\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      selectedComponent: this.props.Login.selectedComponent,\n      SelectedTest: this.props.Login.SelectedTest // selectedTestData={this.props.Login.selectedTestData}\n      ,\n      userRoleControlRights: this.props.userRoleControlRights,\n      templateData: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata,\n      handleChange: this.props.handleChange,\n      handleDateChange: this.props.handleDateChange,\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputChange: this.onNumericInputChange,\n      comboData: this.props.Login.comboData,\n      onComboChange: this.onComboChange,\n      userInfo: this.props.userInfo,\n      timeZoneList: this.props.timeZoneList,\n      defaultTimeZone: this.props.defaultTimeZone,\n      popUptestDataState: this.state.popUptestDataState,\n      dataState: this.state.popUptestDataState,\n      dataStateChange: this.state.testdataStateChange,\n      AddSpec: this.AddSpec,\n      addTest: this.addTestslide,\n      selectSubSample: this.selectSubSample,\n      handleComponentRowClick: this.handleComponentRowClick,\n      subSample: 4,\n      AddComponent: this.AddComponent,\n      deleteComponent: this.deleteComponent,\n      deleteTest: this.deleteTest,\n      editComponent: this.editComponent,\n      componentColumnList: this.componentColumnList,\n      Component: this.props.Login.Component,\n      TestChange: this.TestChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 973,\n        columnNumber: 55\n      }\n    })))))));\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  getChildValues,\n  getPreviewTemplate,\n  getNewRegSpecification,\n  AddComponents,\n  updateStore,\n  EditComponent,\n  getTest\n})(injectIntl(PreRegisterSlideOutModal));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/registration/PreRegisterSlideOutModal.jsx"],"names":["React","FormattedMessage","injectIntl","Button","Card","Col","Form","FormGroup","FormLabel","Modal","Nav","Row","FontAwesomeIcon","faSave","toast","DEFAULT_RETURN","ModalInner","ReadOnlyText","RegistrationType","transactionStatus","faCalculator","faPlus","comboChild","convertDateTimetoString","getSameRecordFromTwoArrays","DynamicSlideout","HeaderSpan","DataGrid","process","AdvFilter","SpecFilter","RegistrationAdvanceFilter","RegisterSlideOut","AddSpecification","AddTest","connect","getPreviewTemplate","getChildValues","getNewRegSpecification","AddComponents","updateStore","EditComponent","getTest","AddComponentPopUp","mapStateToProps","state","Login","PreRegisterSlideOutModal","Component","constructor","props","formRef","createRef","failedControls","selectedRecord","selectedSpec","popUptestDataState","skip","take","handleSaveClick","saveType","startLabel","label","mandatoryFields","loadComponent","selectComponent","loadTest","selectedTestData","loadSpec","masterData","registrationTemplate","jsondata","map","row","children","column","component","hasOwnProperty","componentrow","mandatory","push","inputtype","esign","forEach","item","dataField","undefined","alertMessage","alertPreFix","intl","formatMessage","id","idsName","alertSuffix","mandatoryLabel","validateFunction","validateData","length","trim","onExecuteClick","agree","NO","info","validateEsign","updateInfo","typeName","data","SelectedTest","Test","onSaveComponentClick","onSaveTestClick","onSaveClick","TestChange","comboData","fieldName","onComboChange","control","customName","parentList","childComboList","childColumnList","inputParem","comboName","product","productCategory","nproductcatcode","name","ProductCategory","comboComponents","filter","x","ncategorybasedflow","value","child","columnList","val","withoutCombocomponent","source","primarykeyField","valuemember","nproductcode","mapOfFilter","nsampletypecode","parseInt","RealSampleTypeValue","userInfo","onInputOnChange","event","target","type","checked","setState","onNumericInputChange","handleDateChange","dateValue","dateName","screenName","testdataStateChange","dataState","openFilter","showFilter","closeFilter","AddSpec","e","addTestslide","selectedComponent","Object","keys","warn","closeSpec","closeComponent","closeTest","onspecChange","oldpromarycode","sversion","onTreeClick","inputParam","methodUrl","operation","activeKey","key","focusKey","keyName","userinfo","selectedNode","primaryKey","selectSubSample","selectedSubSample","dataItem","ssamplename","settings","handleComponentRowClick","slno","AddComponent","Map","nallottedspeccode","ntemplatemanipulationcode","RealRegTypeValue","nregtypecode","onComponentChange","oldspecsampletypecode","nspecsampletypecode","onInputComponentOnChange","childoperation","ComponentObjectAfterSave","ComponentObject","testrequired","ntransactionstatus","objcomponent","dreceiveddate","index","findIndex","splice","getTestByComponentChange","nneedservice","openChildModal","parentPopUpSize","editComponent","editselectedcomponent","inputData","objComponent","deleteComponent","deleteTest","ntestgrouptestcode","selectedTestArray","ArrayTest","myRef","componentColumnList","width","componentDidUpdate","previousProps","masterStatus","innerPopup","innerTop","setTimeout","scrollDoc","modalEvent","document","getElementById","current","scrollIntoView","behavior","getTestfromDB","saveComponent","unshift","showSaveContinue","objcomponent1","render","ignoreFormValidation","buttonLabel","idsLabel","concat","toUpperCase","testColumnList","filterComponent","className","show","closeModal","graphView","loginoperation","showValidate","showCalculate","showParam","showExecute","noSave","resetView","hideSave","showSave","AgaramTree","OpenNodes","FocusKey","ActiveKey","Specification","TestCombined","myScrollRef","RealRegSubTypeValue","RealFilterStatusValue","lstComponent","timeZoneList","sreceiveddate","CurrentTime","userRoleControlRights","handleChange","defaultTimeZone"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Button, Card, Col, Form, FormGroup, FormLabel, Modal, Nav, Row } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ModalInner, ReadOnlyText } from '../../components/App.styles';\r\nimport { RegistrationType, transactionStatus } from '../../components/Enumeration';\r\nimport { faCalculator, faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { comboChild, convertDateTimetoString, getSameRecordFromTwoArrays } from '../../components/CommonScript';\r\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout';\r\nimport { HeaderSpan } from './registration.styled';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport AdvFilter from '../../components/AdvFilter';\r\nimport SpecFilter from './SpecFilter';\r\nimport RegistrationAdvanceFilter from './RegistrationAdvanceFilter';\r\nimport RegisterSlideOut from './RegisterSlideOut';\r\nimport AddSpecification from './AddSpecification';\r\nimport AddTest from './AddTest';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    getPreviewTemplate, getChildValues, getNewRegSpecification, AddComponents, updateStore, EditComponent, getTest\r\n} from '../../actions'\r\nimport AddComponentPopUp from './AddComponentPopUp';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nclass PreRegisterSlideOutModal extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.myRef = React.createRef()\r\n        this.componentColumnList = [\r\n            { \"idsName\": \"IDS_COMPONENTNAME\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n            // { \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", width: \"200px\" },\r\n            // { \"idsName\": \"IDS_STORAGECONDITION\", \"dataField\": \"sstorageconditionname\", width: \"150px\" },\r\n            // { \"idsName\": \"IDS_STORAGELOCATION\", \"dataField\": \"sstoragelocationname\", width: \"150px\" },\r\n            // { \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\", width: \"150px\" },\r\n            { \"idsName\": \"IDS_DATERECEIVED\", \"dataField\": \"sreceiveddate\", width: \"250px\" },\r\n            { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", width: \"200px\" },\r\n        ];\r\n    }\r\n    formRef = React.createRef();\r\n    state = {\r\n        failedControls: [],\r\n        selectedRecord: this.props.Login.selectedRecord,\r\n        selectedSpec: this.props.Login.selectedSpec,\r\n        popUptestDataState: { skip: 0, take: 10 },\r\n        // selectedRecord: {},\r\n        // selectComponent: {},\r\n        // selectedTest: {},\r\n        //  selectedTestData: {},\r\n        // selectedSpec: {},\r\n        //  selectComponent:this.props.Login.selectComponent\r\n    }\r\n\r\n\r\n\r\n    handleSaveClick = (saveType) => {\r\n        const failedControls = [];\r\n        const startLabel = [];\r\n        let label = \"IDS_ENTER\";\r\n        let mandatoryFields = [];\r\n        let selectedRecord = this.state.selectedRecord\r\n\r\n        if (this.props.Login.loadComponent) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n            selectedRecord = this.props.Login.selectComponent\r\n        }\r\n        else if (this.props.Login.loadTest) {\r\n            mandatoryFields = [{ \"idsName\": \"IDS_TEST\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },]\r\n            selectedRecord = this.props.Login.selectedTestData\r\n        }\r\n        else if (this.props.Login.loadSpec) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n        } else {\r\n            this.props.Login.masterData.registrationTemplate &&\r\n                this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                                if (componentrow.mandatory === true) {\r\n                                    mandatoryFields.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label, \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" })\r\n\r\n                                }\r\n                            })\r\n                                : component.mandatory === true ? mandatoryFields.push({ \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label, \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" }) : \"\"\r\n                        })\r\n                    })\r\n                })\r\n        }\r\n        if (this.props.esign) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"esignpassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"esigncomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        mandatoryFields.forEach(item => {\r\n            if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\r\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                failedControls.push(alertMessage);\r\n                startLabel.push(item.mandatoryLabel)//\"IDS_PROVIDE\";\r\n            }\r\n            else {\r\n                if (item.validateFunction) {\r\n                    const validateData = item.validateFunction;\r\n                    if (validateData(selectedRecord[item.dataField]) === false) {\r\n                        const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                        failedControls.push(alertMessage);\r\n                        startLabel.push(item.mandatoryLabel)\r\n                    }\r\n                }\r\n                else {\r\n                    if (typeof selectedRecord[item.dataField] === \"object\") {\r\n                        //to validate FormSelectSearch component\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)//\"IDS_SELECT\";\r\n                        }\r\n                    }\r\n                    else if (typeof selectedRecord[item.dataField] === \"string\") {\r\n                        //to handle string field -- added trim function\r\n                        if (selectedRecord[item.dataField].trim().length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //number field\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // else{\r\n            //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\r\n            //     failedControls.push(alertMessage);\r\n            // }\r\n        });\r\n        // console.log(\"validationPassed:\", failedControls);\r\n\r\n        if (failedControls.length === 0) {\r\n            if (saveType === 4) {\r\n                this.props.onExecuteClick(this.formRef);\r\n            }\r\n            else if (saveType === 3) {\r\n                if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\r\n\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_CHECKAGREE\" }));\r\n\r\n                } else {\r\n\r\n                    this.props.validateEsign();\r\n                }\r\n            }\r\n            else {\r\n                if (this.props.Login.loadSpec) {\r\n                    let selectedSpec = this.state.selectedSpec\r\n                    selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"]\r\n                    selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"]\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"]\r\n                    // this.setState({\r\n                    //     selectedSpec, loadSpec: false\r\n                    // })\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { selectedTestData:[],loadSpec:false,SelectedTest:[],Test:[],Component:[] }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n\r\n\r\n                }\r\n                else if (this.props.Login.loadComponent) {\r\n                    this.onSaveComponentClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadTest) {\r\n                    this.onSaveTestClick(saveType, this.formRef)\r\n                }\r\n                else {\r\n                    this.props.onSaveClick(saveType, this.formRef);\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n            //toast.info(`${this.props.intl.formatMessage({id:\"IDS_ENTER\"})} ${failedControls.join(\",\")}`);\r\n            label = startLabel[0] === undefined ? label : startLabel[0];\r\n            toast.info(`${this.props.intl.formatMessage({ id: label })} ${failedControls[0]}`);\r\n        }\r\n\r\n    }\r\n\r\n    TestChange = (comboData, fieldName) => {\r\n        const selectedTestData = this.props.Login.selectedTestData || {};\r\n        selectedTestData[fieldName] = comboData;\r\n        //this.setState({ selectedTestData });\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { selectedTestData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n        let parentList = []\r\n        let childComboList = []\r\n        let childColumnList = {}\r\n        let inputParem = {}\r\n        let comboName = customName || control.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let product = false;\r\n        let productCategory = false;\r\n        let nproductcatcode = -1\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n        }\r\n        if (control.name === 'Product') {\r\n            const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\r\n            const ncategorybasedflow = selectedRecord[ProductCategory[0].label] &&\r\n                selectedRecord[ProductCategory[0].label]['item']['ncategorybasedflow'];\r\n            nproductcatcode = selectedRecord[ProductCategory[0].label] &&\r\n                selectedRecord[ProductCategory[0].label].value\r\n            if (ncategorybasedflow !== 3) {\r\n                product = true\r\n            }\r\n\r\n        }\r\n        else if (control.name === 'Product Category') {\r\n            // const ProductCategory=comboComponents.filetr(x=>x.name===\"Product Category\");\r\n            const ncategorybasedflow = comboData &&\r\n                comboData['item']['ncategorybasedflow'];\r\n            if (ncategorybasedflow === 3) {\r\n                productCategory = true\r\n            }\r\n        }\r\n\r\n        if (control.child && control.child.length > 0) {\r\n            childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\")\r\n            childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\")\r\n\r\n            inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData.value,\r\n                item: comboData.item,\r\n                label: comboName\r\n            }\r\n            let nproductcode = -1\r\n            if (product) {\r\n                nproductcode = selectedRecord[comboName] &&\r\n                    selectedRecord[comboName].value;\r\n            }\r\n\r\n            const mapOfFilter = {\r\n                nproductcode, nproductcatcode,\r\n                nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode),\r\n            }\r\n            this.props.getChildValues(inputParem,\r\n                this.props.userInfo, selectedRecord, this.props.comboData,\r\n                childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                [...childComboList, ...parentList], productCategory, product, mapOfFilter)\r\n        } else {\r\n\r\n            if (productCategory) {\r\n                const ncategorybasedflow = selectedRecord[comboName] &&\r\n                    selectedRecord[comboName].value;\r\n\r\n            } else if (product) {\r\n                const nproductcode = selectedRecord[comboName] &&\r\n                    selectedRecord[comboName].value;\r\n                const mapOfFilter = {\r\n                    nproductcode, nproductcatcode,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode),\r\n                }\r\n\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.userInfo, selectedRecord, this.props.comboData,\r\n                    childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                    [...childComboList, ...parentList], productCategory, product, mapOfFilter)\r\n            } else {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    // onInputOnChange = (event, value) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     if (event.target.type === 'toggle') {\r\n    //         selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n    //     } else if (event.target.type === 'numeric') {\r\n    //         if (/\\D/.test(event.target.value))\r\n    //             selectedRecord[event.target.name] = event.target.value;\r\n    //     } else if (event.target.type === 'checkbox') {\r\n    //         selectedRecord[event.target.name] = value;\r\n    //     } else if (event.target.type === 'radio') {\r\n    //         selectedRecord[event.target.name] = value\r\n    //     } else {\r\n    //         selectedRecord[event.target.name] = event.target.value;\r\n    //     }\r\n    //     this.setState({ selectedRecord });\r\n    //     // this.saveComponentProperties()\r\n    // }\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    handleDateChange = (dateValue, dateName, screenName) => {\r\n        const { selectedRecord } = this.state;\r\n        if (screenName === 'component') {\r\n            const selectComponent = this.props.Login.selectComponent;\r\n            selectComponent[dateName] = dateValue;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectComponent\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            selectedRecord[dateName] = dateValue;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n    testdataStateChange = (event) => {\r\n        this.setState({\r\n            popUptestDataState: event.dataState\r\n        });\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let masterStatus = this.props.masterStatus;\r\n\r\n        if (this.props.Login.selectedTestData !== previousProps.Login.selectedTestData) {\r\n            this.setState({ selectedTestData: this.props.Login.selectedTestData });\r\n\r\n        }\r\n        if (this.props.Login.selectComponent !== previousProps.Login.selectComponent) {\r\n            this.setState({ selectComponent: this.props.Login.selectComponent });\r\n\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.selectedSpec !== previousProps.Login.selectedSpec) {\r\n            this.setState({ selectedSpec: this.props.Login.selectedSpec });\r\n        }\r\n\r\n        if (masterStatus !== \"\" && masterStatus !== undefined) {\r\n            toast.warn(masterStatus);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { masterStatus: \"\" }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            masterStatus = \"\";\r\n        }\r\n        if (this.props.innerPopup !== this.state.innerTop) {\r\n            setTimeout(() => {\r\n                let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\r\n                if (this.myRef && this.myRef.current) {\r\n                    this.myRef.current.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n                if (scrollDoc) {\r\n                    scrollDoc.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n            }, 100)\r\n            this.setState({\r\n                innerTop: this.props.innerPopup\r\n            })\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.state.showFilter\r\n        this.setState({\r\n            showFilter\r\n        })\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        this.setState({\r\n            showFilter: false\r\n        })\r\n    }\r\n    AddSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: true\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    // addTestslide = (e) => {\r\n    //     this.setState({\r\n    //         loadTest: true\r\n    //     })\r\n    // }\r\n\r\n    addTestslide = (selectedComponent) => {\r\n        if (selectedComponent && Object.keys(selectedComponent).length > 0) {\r\n            delete selectedComponent[\"selected\"];\r\n            this.props.getTest(selectedComponent, this.props.Login);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n        }\r\n    }\r\n\r\n    closeSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: false, selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec }\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: false,\r\n                selectedRecord:{ ...this.state.selectedRecord, ...this.state.selectedSpec }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeComponent = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadComponent: false,\r\n                selectComponent: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeTest = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadTest: false,\r\n                selectedTestData: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onspecChange = (event, fieldName) => {\r\n        if (event !== null) {\r\n            const selectedRecord = this.state.selectedRecord;\r\n            const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\r\n                this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\r\n            selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\r\n            selectedRecord[\"nallottedspeccode\"] = event;\r\n            //  if(this.props.Login.Component.length=== 0 ){\r\n            this.setState({ selectedRecord });\r\n            // }else{\r\n            //     if(event.value!== oldpromarycode ){\r\n            //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n            //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\r\n            //     }\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_REGISTRATION\",\r\n            operation: \"get\",\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedNode: event.item,\r\n            selectedRecord: this.state.selectedRecord,\r\n\r\n            primaryKey: event.primaryKey\r\n        };\r\n        this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\r\n\r\n        // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\r\n        //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\r\n        // } else {\r\n        //     // if(event.key!== this.props.Login.ActiveKey ){\r\n        //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n        //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\r\n        //     // }\r\n        // }\r\n    }\r\n    selectSubSample = (event) => {\r\n        let selectedSubSample = event.dataItem;\r\n        let SelectedTest = this.props.Login.Test &&\r\n            this.props.Login.Test[selectedSubSample.ssamplename] ?\r\n            this.props.Login.Test[selectedSubSample.ssamplename] : [];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                SelectedTest, selectedSubSample,\r\n                popUptestDataState: {\r\n                    skip: 0, take: this.props.Login.settings ?\r\n                        parseInt(this.props.Login.settings[14]) : 5\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    };\r\n\r\n\r\n    handleComponentRowClick = (event) => {\r\n        let selectedComponent = event.dataItem;\r\n        let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                SelectedTest, selectedComponent,\r\n                popUptestDataState: {\r\n                    skip: 0, take: this.props.Login.settings ?\r\n                        parseInt(this.props.Login.settings[14]) : 5\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    };\r\n\r\n\r\n    AddComponent = () => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            this.props.AddComponents(Map);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onComponentChange = (comboData, fieldName) => {\r\n        if (comboData !== null) {\r\n            const selectComponent = this.props.Login.selectComponent || {};\r\n            if (fieldName === 'ntzdreceivedate') {\r\n                selectComponent[\"ntzdreceivedate\"] = comboData;\r\n            } else {\r\n                const oldspecsampletypecode = selectComponent.nspecsampletypecode\r\n                if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\r\n                    //selectComponent[\"nneedservice\"] = true;\r\n                }\r\n                selectComponent[\"ncomponentcode\"] = comboData;\r\n                selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\r\n\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectComponent\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n    onInputComponentOnChange = (event) => {\r\n        const selectComponent = this.props.Login.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectComponent\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveComponentClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.ComponentObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.ComponentObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n\r\n            let selectedComponent = { ...this.props.Login.selectComponent };\r\n            let objcomponent = {};\r\n            objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = selectedComponent[\"dreceiveddate\"];\r\n            objcomponent[\"dreceiveddate\"] = dreceiveddate;\r\n            objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\r\n            objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\r\n\r\n            selectedComponent = { ...selectedComponent, ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component, selectedComponent: selectedComponent, loadComponent: false, openChildModal: false,\r\n                        selectComponent: undefined, parentPopUpSize: \"xl\", Test, SelectedTest: Test[selectedComponent.slno]\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    ComponentObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.props.Login.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            Component.unshift(saveComponent);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false, selectedComponent: saveComponent,\r\n                    SelectedTest: [], selectComponent: {}, showSaveContinue: false, loadComponent: false, parentPopUpSize: \"xl\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    ComponentObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            Component.unshift(saveComponent);\r\n            objcomponent1[\"scomments\"] = \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: saveComponent, SelectedTest: [], selectComponent: objcomponent1 }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    editComponent = (editselectedcomponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\r\n    }\r\n    deleteComponent = (event) => {\r\n        const dataItem = event;\r\n        const Component = this.props.Login.Component;\r\n        const Test = this.props.Login.Test;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n        const index = Component.findIndex(x => x.slno === dataItem.slno);\r\n        if (index > -1) {\r\n            Component.splice(index, 1);\r\n        }\r\n        Test && Test[dataItem.slno] && delete Test[dataItem.slno]\r\n        SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0].slno];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { Component, selectedComponent: Component[0], Test, SelectedTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    deleteTest = (event) => {\r\n        const dataItem = event;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n        const Test = this.props.Login.Test;\r\n        const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\r\n        if (index > -1) {\r\n            SelectedTest.splice(index, 1);\r\n        }\r\n        Test[selectedComponent.slno] = SelectedTest;\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { Test, SelectedTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveTestClick = (saveType, formRef) => {\r\n        let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\r\n        let selectedTestArray = [];\r\n        selectedTestData.map((item) => {\r\n            return selectedTestArray.push(item.item);\r\n        });\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n        let Test = this.props.Login.Test || [];\r\n\r\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n        //  ArrayTest.push(selectedTestArray);\r\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { SelectedTest: Test[selectedComponent.slno], Test: Test, selectedTestData: {}, loadTest: false, parentPopUpSize: \"xl\" }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let saveType = 1;\r\n        if (this.props.ignoreFormValidation) {\r\n            saveType = 5;\r\n        }\r\n        let buttonLabel = \"Save\";\r\n        let idsLabel = \"IDS_SAVE\";\r\n        if (this.props.buttonLabel) {\r\n            buttonLabel = this.props.buttonLabel;\r\n            idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\r\n        }\r\n        const testColumnList = [\r\n            { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\r\n            { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\r\n            { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\r\n            { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\r\n            { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\r\n\r\n        const filterComponent = [{\r\n            \"specFIlter\": <SpecFilter\r\n\r\n            />\r\n        }]\r\n        return (\r\n            <Modal\r\n                size={this.props.Login.loadComponent ?\r\n                    'lg' : this.state.loadSpec ? 'lg' :\r\n                        this.props.Login.loadTest ? 'lg' : 'xl'}\r\n                // size={this.props.templateData[0] ?\r\n                //     this.props.templateData[0].children ?\r\n                //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\r\n                backdrop=\"static\"\r\n                className={this.props.className || \"\"}\r\n                show={this.props.show}\r\n                onHide={this.props.closeModal}\r\n                enforceFocus={false}\r\n                dialogClassName=\"modal-dialog-slideout freakerstop\"\r\n                aria-labelledby=\"add-user\">\r\n                <Modal.Header className=\"d-flex align-items-center\">\r\n                    <Modal.Title id=\"add-user\" className=\"header-primary flex-grow-1\">\r\n                        {this.props.graphView === true ? \"\" : this.props.inputParam ?\r\n                            this.props.esign === true ?\r\n                                <FormattedMessage id={\"IDS_ESIGN\"} defaultMessage=\"Esign\" />\r\n                                : this.props.loginoperation ?\r\n                                    <FormattedMessage id={this.props.screenName} />\r\n                                    : <>\r\n                                        {this.props.operation ?\r\n                                            <>\r\n                                                <FormattedMessage id={this.props.operation && \"IDS_\".concat(this.props.operation.toUpperCase())}\r\n                                                    defaultMessage='Add' />\r\n                                                {\" \"}\r\n                                                {\r\n                                                    this.props.screenName ?\r\n                                                        <FormattedMessage id={this.props.screenName} />\r\n                                                        : \"\"\r\n                                                }\r\n                                            </>\r\n                                            :\r\n                                            this.props.screenName ?\r\n                                                <FormattedMessage id={this.props.screenName} />\r\n                                                : \"\"}\r\n                                    </>\r\n                            : \"\"}\r\n                    </Modal.Title>\r\n                    <Button className=\"btn-user btn-cancel\" variant=\"\" onClick={this.state.loadSpec ?\r\n                        this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ?\r\n                            this.closeComponent :\r\n                            this.props.closeModal}>\r\n                        <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                    </Button>\r\n                    {this.props.esign === true ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(3)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SUBMIT' defaultMessage='Submit' />\r\n                        </Button>\r\n                        :\r\n                        (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ?\r\n                            <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                <FormattedMessage id='IDS_VALIDATE' defaultMessage='Validate' />\r\n                            </Button> :\r\n                            this.props.showCalculate ?\r\n                                <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                    <FontAwesomeIcon icon={faSave} /> { }\r\n                                    <FormattedMessage id='IDS_CALCULATE' defaultMessage='Calculate' />\r\n                                </Button> :\r\n                                this.props.showParam === true && this.props.showExecute ?\r\n                                    <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                        <FontAwesomeIcon icon={faCalculator} /> { }\r\n                                        <FormattedMessage id='IDS_EXECUTE' defaultMessage='Execute' />\r\n                                    </Button> :\r\n                                    this.props.noSave || this.props.graphView ?\r\n                                        this.props.operation === \"view\" ? \"\"\r\n                                            : <Button className=\"btn btn-user btn-primary-blue\" role=\"button\"\r\n                                                onClick={this.props.resetView}\r\n                                            >\r\n                                                <FormattedMessage id={\"IDS_RESET\"} defaultMessage='Reset' />\r\n                                            </Button>\r\n                                        : this.props.hideSave ? \"\" :\r\n                                            <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                                <FormattedMessage id={idsLabel} defaultMessage={buttonLabel} />\r\n                                            </Button>\r\n                    }\r\n                    {this.props.operation === \"create\" && this.props.showSaveContinue ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(2)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVECONTINUE' defaultMessage='Save & Continue' />\r\n                        </Button>\r\n                        : \"\"\r\n                    }\r\n                    {(this.props.operation === \"create\" || this.props.operation === \"update\")\r\n                        && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(1)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVE' defaultMessage='Save' />\r\n                        </Button>\r\n                        : \"\"}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <ModalInner ref={this.myRef}>\r\n                        <Card.Body>\r\n                            <React.Fragment>\r\n                                <Form ref={this.formRef}>\r\n                                    {\r\n                                       this.props.Login.loadSpec ?\r\n                                            <AddSpecification\r\n                                                AgaramTree={this.props.Login.AgaramTree}\r\n                                                openNodes={this.props.Login.OpenNodes}\r\n                                                handleTreeClick={this.onTreeClick}\r\n                                                focusKey={this.props.Login.FocusKey}\r\n                                                activeKey={this.props.Login.ActiveKey}\r\n                                                Specification={this.props.Login.Specification}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                selectedSpec={this.state.selectedSpec}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                onSpecChange={this.onspecChange}\r\n                                            />\r\n                                            : this.props.Login.loadTest ?\r\n                                                <AddTest\r\n                                                    TestCombined={this.props.Login.TestCombined || []}\r\n                                                    TestChange={this.TestChange}\r\n                                                    selectedTestData={this.props.Login.selectedTestData}\r\n                                                /> : this.props.Login.loadComponent ?\r\n                                                    <AddComponentPopUp\r\n                                                        ref={this.myScrollRef}\r\n                                                        selectComponent={this.props.Login.selectComponent || {}}\r\n                                                        RealSampleTypeValue={this.props.Login.masterData.RealSampleTypeValue || {}}\r\n                                                        RealRegTypeValue={this.props.Login.masterData.RealRegTypeValue || {}}\r\n                                                        RealRegSubTypeValue={this.props.Login.masterData.RealRegSubTypeValue || {}}\r\n                                                        RealFilterStatusValue={this.props.Login.masterData.RealFilterStatusValue || {}}\r\n                                                        formatMessage={this.props.intl.formatMessage}\r\n                                                        handleDateChange={this.handleDateChange}\r\n                                                        Component={this.props.Login.lstComponent || []}\r\n                                                        onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                        // onComboChange={this.onComponentComboChange}\r\n                                                        timeZoneList={this.props.Login.timeZoneList}\r\n                                                        onComponentChange={this.onComponentChange}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        sreceiveddate={this.props.Login.sreceiveddate || []}\r\n                                                        CurrentTime={this.props.Login.CurrentTime}\r\n                                                    />\r\n                                                    : <RegisterSlideOut\r\n                                                        selectedSpec={this.state.selectedSpec}\r\n                                                        selectedRecord={this.state.selectedRecord}\r\n                                                        selectedComponent={this.props.Login.selectedComponent}\r\n                                                        SelectedTest={this.props.Login.SelectedTest}\r\n                                                        // selectedTestData={this.props.Login.selectedTestData}\r\n                                                        userRoleControlRights={this.props.userRoleControlRights}\r\n                                                        templateData={this.props.Login.masterData.registrationTemplate &&\r\n                                                            this.props.Login.masterData.registrationTemplate.jsondata}\r\n                                                        handleChange={this.props.handleChange}\r\n                                                        handleDateChange={this.props.handleDateChange}\r\n                                                        onInputOnChange={this.onInputOnChange}\r\n                                                        onNumericInputChange={this.onNumericInputChange}\r\n                                                        comboData={this.props.Login.comboData}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        userInfo={this.props.userInfo}\r\n                                                        timeZoneList={this.props.timeZoneList}\r\n                                                        defaultTimeZone={this.props.defaultTimeZone}\r\n                                                        popUptestDataState={this.state.popUptestDataState}\r\n                                                        dataState={this.state.popUptestDataState}\r\n                                                        dataStateChange={this.state.testdataStateChange}\r\n                                                        AddSpec={this.AddSpec}\r\n                                                        addTest={this.addTestslide}\r\n                                                        selectSubSample={this.selectSubSample}\r\n                                                        handleComponentRowClick={this.handleComponentRowClick}\r\n                                                        subSample={4}\r\n                                                        AddComponent={this.AddComponent}\r\n                                                        deleteComponent={this.deleteComponent}\r\n                                                        deleteTest={this.deleteTest}\r\n                                                        editComponent={this.editComponent}\r\n                                                        componentColumnList={this.componentColumnList}\r\n                                                        Component={this.props.Login.Component}\r\n                                                        TestChange={this.TestChange}\r\n                                                    />\r\n                                    }\r\n                                </Form>\r\n                            </React.Fragment>\r\n                        </Card.Body>\r\n                    </ModalInner>\r\n                </Modal.Body>\r\n            </Modal>\r\n        );\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getChildValues,\r\n    getPreviewTemplate, getNewRegSpecification, AddComponents, updateStore, EditComponent, getTest\r\n}\r\n)(injectIntl(PreRegisterSlideOutModal));"]},"metadata":{},"sourceType":"module"}