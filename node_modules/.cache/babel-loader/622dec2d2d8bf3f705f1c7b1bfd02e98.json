{"ast":null,"code":"import _createForOfIteratorHelper from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";import _toConsumableArray from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{constructOptionList,sortData}from'../components/CommonScript';//getComboLabelValue,, searchData\nimport{toast}from'react-toastify';import Axios from'axios';import{initRequest}from'./LoginAction';import{intl}from'../components/App';import{ColumnType,queryTypeFilter,transactionStatus}from'../components/Enumeration';import{format}from'date-fns';export function getTestGroupRulesEngineAdd(userInfo,testgrouprulesengine,inputParam,masterData){var testcomments=[];var reportcomments=[];var predefcomments=[];var sampletestcommentsList=[];var selectedRecord={};var addGroupList=[];return function(dispatch){if(masterData&&masterData.SelectedTest===null||masterData&&masterData.SelectedTest===undefined){toast.warn(intl.formatMessage({id:\"IDS_ADDTEST\"}));}else{//if (masterData.SelectedSpecification&&masterData.SelectedSpecification['napprovalstatus'] === transactionStatus.APPROVED) { \ndispatch(initRequest(true));var url=[];if(testgrouprulesengine){url.push(rsapi.post(\"/testgrouprulesengine/getdatabasetables\",{userinfo:userInfo}));}else{url.push(rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngineAdd\",{\"ntestgrouptestcode\":masterData.SelectedTest.ntestgrouptestcode,\"nspecsampletypecode\":masterData.SelectedComponent.nspecsampletypecode,\"napproveconfversioncode\":masterData.SelectedSpecification.napproveconfversioncode,\"nallottedspeccode\":masterData.SelectedSpecification.nallottedspeccode,userinfo:userInfo}));url.push(rsapi.post(\"/grade/getGrade\",{userinfo:userInfo}));url.push(rsapi.post(\"/site/getSite\",{userinfo:userInfo}));url.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\",{userinfo:userInfo}));url.push(rsapi.post(\"/sampletestcomments/getCommentType\",{userinfo:userInfo}));url.push(rsapi.post(\"/sampletestcomments/getCommentSubType\",{userinfo:userInfo}));}Axios.all(url).then(function(response){var DiagnosticCase=constructOptionList(response[0].data[\"DiagnosticCase\"]||[],\"ndiagnosticcasecode\",\"sdiagnosticcasename\",false,false,false);var Grade=constructOptionList(response[1].data||[],\"ngradecode\",\"sdisplaystatus\",false,false,false);var viewListMap=constructOptionList(response[0].data[\"TestParameter\"]||[],\"ntestgrouptestparametercode\",\"stestparametersynonym\",undefined,undefined,undefined);var resultType=constructOptionList(response[0].data[\"ResultType\"]||[],\"nresultypecode\",\"sdisplayname\",undefined,undefined,undefined);var site=constructOptionList(response[2].data||[],\"nsitecode\",\"ssitename\",false,false,false);var CommentType=constructOptionList(response[4].data['CommentType']||[],\"ncommenttypecode\",\"scommenttype\",false,false,false);var commentsubtypelst=response[5].data['CommentSubType'];var w=commentsubtypelst.filter(function(x){return x.ncommentsubtypecode===3||x.ncommentsubtypecode===6;});var CommentSubType=constructOptionList(w||[],\"ncommentsubtypecode\",\"scommentsubtype\",false,false,false);var testInitiateTestCombo=constructOptionList(masterData['TestGroupTest']||[],\"ntestgrouptestcode\",\"stestsynonym\",false,false,false);var commentlist=response[3].data;var x=commentlist.filter(function(x){return x.ncommentsubtypecode===1;});var y=commentlist.filter(function(x){return x.ncommentsubtypecode===4;});var z=commentlist.filter(function(x){return x.ncommentsubtypecode===3;});testcomments=constructOptionList(x||[],\"nsampletestcommentscode\",\"sdescription\",false,false,false).get(\"OptionList\");reportcomments=constructOptionList(y||[],\"nsampletestcommentscode\",\"sdescription\",false,false,false).get(\"OptionList\");predefcomments=constructOptionList(z||[],\"nsampletestcommentscode\",\"spredefinedname\",false,false,false).get(\"OptionList\");masterData['testParameter']={};masterData['testParameterComments']={};masterData['testParameterreportComments']={};masterData['testComments']={};masterData['reportComments']={};masterData['testSite']={};masterData['testRepeat']=[];masterData['testenforceTests']=[];masterData['GradeValues']=response[0].data.GradeValues;selectedRecord[\"groupList\"]=[];selectedRecord[\"groupList\"][0]=[];selectedRecord[\"groupList\"][0][\"button_and\"]=true;selectedRecord[\"groupList\"][0][0]={};addGroupList[0]=1;dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({loading:false,operation:'create',databaseviewList:viewListMap.get(\"OptionList\"),testcomments:testcomments,reportcomments:reportcomments,openPortalModal:true,screenName:\"IDS_ADDRULESENGINE\",testgrouprulesengine:testgrouprulesengine},inputParam),{},{siteObject:{},testCommentObject:{},reportCommentObject:{},testInitiateTests:[],testRepeatTests:[],testenforceTests:[],testCommentsTests:[],reportCommentsTests:[],reportCommentsTestsTab:[],activeTabIndex:0,masterData:_objectSpread(_objectSpread({},masterData),{},{testInitiateTestCombo:testInitiateTestCombo.get(\"OptionList\"),testCommentsTestCombo:testInitiateTestCombo.get(\"OptionList\"),testRepeatTestCombo:testInitiateTestCombo.get(\"OptionList\"),testenforceTestCombo:testInitiateTestCombo.get(\"OptionList\"),rulesOption:viewListMap.get(\"OptionList\"),DiagnosticCaseList:DiagnosticCase.get(\"OptionList\"),GradeList:Grade.get(\"OptionList\"),siteList:site.get(\"OptionList\"),resultTypeList:resultType.get(\"OptionList\"),testCommentsTestsTab:[],testInitiateSiteTab:[],PredefinedParameterOptions:[],testRepeatTestsTab:[],testenforceTestsTab:[]}),testInitiateTestOptions:viewListMap.get(\"OptionList\"),testCommentsTestOptions:viewListMap.get(\"OptionList\"),reportCommentsTestOptions:viewListMap.get(\"OptionList\"),CommentType:CommentType.get(\"OptionList\"),CommentSubType:CommentSubType.get(\"OptionList\"),predefcomments:predefcomments,openModalPopup:false,openmodalsavePopup:false,addGroupList:addGroupList,selectedRecord:selectedRecord,viewColumnListByRule:viewListMap.get(\"OptionList\"),isServiceNeed:true})});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});// }\n// else {\n//     toast.warn(intl.formatMessage({ id: \"IDS_RULESCANBEADDEDONLYFORAPPROVEDSPEC\" })); \n// }\n}};}export function getSpecificationTestGroupRulesEngine(inputParam,selectedRecord,ismodalcombochange,masterData,userInfo){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/testgrouprulesengine/getSpecificationTestGroupRulesEngine\",{'userinfo':userInfo,\"nproductcatcode\":inputParam.nproductcatcode.item.nproductcatcode}).then(function(response){var TestGroupSpecification=constructOptionList(response.data.TestGroupSpecification||[],\"nallottedspeccode\",\"sspecname\",undefined,undefined,undefined);var TestGroupSpecificationList=TestGroupSpecification.get(\"OptionList\");if(ismodalcombochange){selectedRecord=_objectSpread(_objectSpread(_objectSpread({},selectedRecord),inputParam),{},{'nallottedspeccode':TestGroupSpecificationList[0]});masterData=_objectSpread(_objectSpread({},masterData),response.data);}else{var selectedcombo=_objectSpread(_objectSpread({},inputParam),{},{'nallottedspeccode':TestGroupSpecificationList[0]});masterData=_objectSpread(_objectSpread(_objectSpread({},masterData),response.data),{},{selectedcombo:selectedcombo});}dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getComponentTestGroupRulesEngine(inputParam,selectedRecord,ismodalcombochange,masterData,userInfo){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/testgrouprulesengine/getComponentTestGroupRulesEngine\",{'userinfo':userInfo,\"nallottedspeccode\":inputParam.nallottedspeccode.item.nallottedspeccode}).then(function(response){var Component=constructOptionList(response.data.Component||[],\"ncomponentcode\",\"scomponentname\",undefined,undefined,undefined);var ComponentList=Component.get(\"OptionList\");if(ismodalcombochange){selectedRecord=_objectSpread(_objectSpread(_objectSpread({},selectedRecord),inputParam),{},{'ncomponentcode':ComponentList[0]});masterData=_objectSpread(_objectSpread({},masterData),response.data);}else{var selectedcombo=_objectSpread(_objectSpread({},inputParam),{},{'ncomponentcode':ComponentList[0]});masterData=_objectSpread(_objectSpread(_objectSpread({},masterData),response.data),{},{selectedcombo:selectedcombo});}dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getSelectedTestGroupRulesEngine(inputParam,userInfo,masterData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/testgrouprulesengine/getSelectedTestGroupRulesEngine\",{'userinfo':userInfo,\"ntestgrouprulesenginecode\":parseInt(inputParam.ntestgrouprulesenginecode)//, nproductcatcode: masterData.SelectedProductCategory.nproductcatcode\n,\"ntestgrouptestcode\":masterData.SelectedTest.ntestgrouptestcode}).then(function(response){masterData=_objectSpread(_objectSpread({},masterData),{},{SelectedRulesEngine:response.data[\"SelectedRulesEngine\"]});dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getTestGroupRulesEngine(nproductcatcode,nallottedspeccode,ncomponentcode,userInfo,masterData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngine\",{'userinfo':userInfo,\"nproductcatcode\":nproductcatcode,\"nallottedspeccode\":nallottedspeccode,\"ncomponentcode\":ncomponentcode}).then(function(response){masterData=_objectSpread({},response.data);sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getEditTestGroupRulesEngine(operation,masterData//,\n// ncontrolCode\n,userInfo){var testcomments=[];var reportcomments=[];var predefcomments=[];return function(dispatch){if(masterData['RulesEngine']&&masterData['RulesEngine'].length>0){var urlArray=[];var selectedRecord={};urlArray.push(rsapi.post(\"testgrouprulesengine/getEditTestGroupRulesEngine\",{'ntestgrouprulesenginecode':masterData.SelectedRulesEngine['ntestgrouprulesenginecode'],'masterData':masterData,\"userinfo\":userInfo}));urlArray.push(rsapi.post(\"/grade/getGrade\",{userinfo:userInfo}));urlArray.push(rsapi.post(\"/site/getSite\",{userinfo:userInfo}));urlArray.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\",{userinfo:userInfo}));urlArray.push(rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngineAdd\",{\"ntestgrouptestcode\":masterData.SelectedTest.ntestgrouptestcode,\"nspecsampletypecode\":masterData.SelectedComponent.nspecsampletypecode,\"napproveconfversioncode\":masterData.SelectedSpecification.napproveconfversioncode,\"nallottedspeccode\":masterData.SelectedSpecification.nallottedspeccode,userinfo:userInfo}));urlArray.push(rsapi.post(\"/productcategory/getProductCategory\",{userinfo:userInfo}));urlArray.push(rsapi.post(\"/sampletestcomments/getCommentType\",{userinfo:userInfo}));urlArray.push(rsapi.post(\"/sampletestcomments/getCommentSubType\",{userinfo:userInfo}));dispatch(initRequest(true));Axios.all(urlArray).then(function(response){masterData['testParameter']={};masterData['testParameterComments']={};masterData['testParameterreportComments']={};var responsedata=response[0].data;var srulename=responsedata['RulesEngineEdit'][0]['srulename'];//    let nruleexecorder = responsedata['RulesEngineEdit'][0]['nruleexecorder']\nvar groupList=responsedata['RulesEngineEdit'][0]['jsondata'];var outcomeList=responsedata['RulesEngineEdit'][0]['jsonuidata'];selectedRecord[\"groupList\"]=[];groupList.map(function(ruleslist,index){if(ruleslist.hasOwnProperty('button_or')){selectedRecord[\"groupList\"][index]=ruleslist[\"button_or\"];selectedRecord[\"groupList\"][index][\"button_or\"]=true;}if(ruleslist.hasOwnProperty('button_and')){selectedRecord[\"groupList\"][index]=ruleslist[\"button_and\"];selectedRecord[\"groupList\"][index][\"button_and\"]=true;}if(ruleslist.hasOwnProperty('button_not_button_and')){selectedRecord[\"groupList\"][index]=ruleslist[\"button_not_button_and\"];selectedRecord[\"groupList\"][index][\"button_and\"]=true;selectedRecord[\"groupList\"][index][\"button_not\"]=true;}if(ruleslist.hasOwnProperty('button_not_button_or')){selectedRecord[\"groupList\"][index]=ruleslist[\"button_not_button_or\"];selectedRecord[\"groupList\"][index][\"button_or\"]=true;selectedRecord[\"groupList\"][index][\"button_not\"]=true;}});// if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_and')) {\n//     selectedRecord[\"groupList\"]['button_not'] = true\n// }\n// if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_or')) {\n//     selectedRecord[\"groupList\"]['button_not'] = true\n// }\nif(responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_or')){selectedRecord[\"groupList\"]['button_or']=true;}else{selectedRecord[\"groupList\"]['button_and']=true;}selectedRecord['srulename']=srulename;selectedRecord['srulenamecopy']=srulename;//     selectedRecord['nruleexecordercopy'] = nruleexecorder\n// selectedRecord[\"groupList\"][0][\"button_and\"] = true\nvar addGroupList=[];addGroupList=responsedata['RulesEngineEdit'][0]['jsonuidata']['addGroupList'];var DiagnosticCase=constructOptionList(response[4].data[\"DiagnosticCase\"]||[],\"ndiagnosticcasecode\",\"sdiagnosticcasename\",false,false,false);var Grade=constructOptionList(response[1].data||[],\"ngradecode\",\"sdisplaystatus\",false,false,false);var viewListMap=constructOptionList(response[4].data[\"TestParameter\"]||[],\"ntestgrouptestparametercode\",\"stestparametersynonym\",undefined,undefined,undefined);var resultType=constructOptionList(response[4].data[\"ResultType\"]||[],\"nresultypecode\",\"sdisplayname\",undefined,undefined,undefined);var site=constructOptionList(response[2].data||[],\"nsitecode\",\"ssitename\",false,false,false);var CommentType=constructOptionList(response[6].data['CommentType']||[],\"ncommenttypecode\",\"scommenttype\",false,false,false);var testInitiateTestCombo=constructOptionList(masterData['TestGroupTest']||[],\"ntestgrouptestcode\",\"stestsynonym\",false,false,false);var commentsubtypelst=response[7].data['CommentSubType'];var w=commentsubtypelst.filter(function(x){return x.ncommentsubtypecode===3||x.ncommentsubtypecode===6;});var CommentSubType=constructOptionList(w||[],\"ncommentsubtypecode\",\"scommentsubtype\",false,false,false);var commentlist=response[3].data;var x=commentlist.filter(function(x){return x.ncommentsubtypecode===1;});var y=commentlist.filter(function(x){return x.ncommentsubtypecode===4;});var z=commentlist.filter(function(x){return x.ncommentsubtypecode===3;});testcomments=constructOptionList(x||[],\"nsampletestcommentscode\",\"sdescription\",false,false,false).get(\"OptionList\");reportcomments=constructOptionList(y||[],\"nsampletestcommentscode\",\"sdescription\",false,false,false).get(\"OptionList\");predefcomments=constructOptionList(z||[],\"nsampletestcommentscode\",\"spredefinedname\",false,false,false).get(\"OptionList\");masterData['testParameter']=outcomeList['testInitiateTests']&&outcomeList['testInitiateTests'];masterData['testRepeat']=outcomeList['testRepeatTests']&&outcomeList['testRepeatTests'];masterData['testenforceTests']=outcomeList['testenforceTests']&&outcomeList['testenforceTests'];masterData['testParameterComments']=outcomeList['testCommentsTests']&&outcomeList['testCommentsTests'];masterData['testParameterreportComments']=outcomeList['reportCommentsTests']&&outcomeList['reportCommentsTests'];masterData[\"testComments\"]=outcomeList['testCommentObject']&&outcomeList['testCommentObject'];masterData[\"reportComments\"]=outcomeList['reportCommentObject']&&outcomeList['reportCommentObject'];masterData[\"testSite\"]=outcomeList['siteObject']&&outcomeList['siteObject'];selectedRecord[\"nproductcatcode\"]=outcomeList['nproductcatcode']&&outcomeList['nproductcatcode'];selectedRecord[\"nallottedspeccode\"]=outcomeList['nallottedspeccode']&&outcomeList['nallottedspeccode'];selectedRecord[\"ncomponentcode\"]=outcomeList['ncomponentcode']&&outcomeList['ncomponentcode'];selectedRecord[\"groupListJoins\"]=outcomeList['groupListJoins']&&outcomeList['groupListJoins'];dispatch({type:DEFAULT_RETURN,payload:{operation:operation,screenName:\"IDS_EDITRULESENGINE\",selectedRecord:selectedRecord,openPortalModal:true,// ncontrolCode: ncontrolCode,\nloading:false,addGroupList:addGroupList,masterData:_objectSpread(_objectSpread({},masterData),{},{testInitiateTestCombo:testInitiateTestCombo.get(\"OptionList\"),testCommentsTestCombo:testInitiateTestCombo.get(\"OptionList\"),testRepeatTestCombo:testInitiateTestCombo.get(\"OptionList\"),testenforceTestCombo:testInitiateTestCombo.get(\"OptionList\"),rulesOption:viewListMap.get(\"OptionList\"),DiagnosticCaseList:DiagnosticCase.get(\"OptionList\"),GradeList:Grade.get(\"OptionList\"),siteList:site.get(\"OptionList\"),resultTypeList:resultType.get(\"OptionList\"),testCommentsTestsTab:outcomeList['testCommentsTestsTab'],testRepeatTestsTab:outcomeList['testRepeatTestsTab'],testenforceTestsTab:outcomeList['testenforceTestsTab'],PredefinedParameterOptions:outcomeList['PredefinedParameterOptions'],testInitiateSiteTab:outcomeList['testInitiateSiteTab'],reportCommentsTestsTab:outcomeList['reportCommentsTestsTab'],GradeValues:response[4].data.GradeValues}),viewColumnListByRule:viewListMap.get(\"OptionList\"),testcomments:testcomments,reportcomments:reportcomments,testInitiateTests:outcomeList['testInitiateTests']&&outcomeList['testInitiateTests'],testCommentsTests:outcomeList['testCommentsTests']&&outcomeList['testCommentsTests'],testRepeatTests:outcomeList['testRepeatTests']&&outcomeList['testRepeatTests'],testenforceTests:outcomeList['testenforceTests']&&outcomeList['testenforceTests'],reportCommentsTests:outcomeList['reportCommentsTests']&&outcomeList['reportCommentsTests'],siteObject:outcomeList['siteObject']&&outcomeList['siteObject'],testCommentObject:outcomeList['testCommentObject']&&outcomeList['testCommentObject'],reportCommentObject:outcomeList['reportCommentObject']&&outcomeList['reportCommentObject'],CommentType:CommentType.get(\"OptionList\"),CommentSubType:CommentSubType.get(\"OptionList\"),predefcomments:predefcomments,openModalPopup:false,openmodalsavePopup:false,activeTabIndex:0,action:\"update\",isServiceNeed:true}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response.data}));}});}else{toast.warn(intl.formatMessage({id:\"IDS_SELECTRULETOEDIT\"}));}};}export function getParameterforEnforce(selectedRecord,masterData,userInfo,activeTabIndex,action){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/testgrouprulesengine/getParameterRulesEngine\",{'userinfo':userInfo,\"ntestgrouptestcode\":selectedRecord['ntestgrouptestcode'].value,'tabIndex':activeTabIndex,'ntestgrouprulesenginecode':selectedRecord['ntestgrouprulesenginecode']}).then(function(response){var testGroupTestParameterRulesEngine=constructOptionList(response.data.TestGroupTestParameterRulesEngine||[],\"ntestgrouptestparametercode\",\"sparametersynonym\",undefined,undefined,undefined);var testGroupTestParameterRulesEngineList=testGroupTestParameterRulesEngine.get(\"OptionList\");masterData['testGroupTestParameterRulesEngine']=testGroupTestParameterRulesEngineList;//Start\n//end\n// let keylst = Object.keys(response.data.PredefinedValues)\n// keylst.map(ntestgrouptestparametercode => {\n//     response.data.PredefinedValues[ntestgrouptestparametercode] =\n//         constructOptionList(response.data.PredefinedValues[ntestgrouptestparametercode]\n//             || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\n//             undefined, undefined).get(\"OptionList\");\n// })\n// masterData['PredefinedValues'] = response.data.PredefinedValues\n// masterData['GradeValues'] = response.data.GradeValues\n// selectedRecord = { ...selectedRecord, 'ParameterRulesEngine': response.data.TestGroupTestParameterRulesEngine }\ndispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,selectedRecord:selectedRecord,loading:false,action:action,openmodalsavePopup:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getParameterRulesEngine(selectedRecord,masterData,userInfo,activeTabIndex,action,isParameterPopupChanged){return function(dispatch){var additionalInfo=[];//    dispatch(initRequest(true));\nrsapi.post(\"/testgrouprulesengine/getParameterRulesEngine\",{'userinfo':userInfo,\"ntestgrouptestcode\":selectedRecord['ntestgrouptestcode'].value,'tabIndex':activeTabIndex,'ntestgrouprulesenginecode':selectedRecord['ntestgrouprulesenginecode']}).then(function(response){var selectedResultGrade=[];var paremterResultcode=[];var parameterResults=response.data.TestGroupTestParameterRulesEngine;var tempparameterResults=_toConsumableArray(parameterResults);var predefDefaultFlag=false;var savedTest=masterData['testParameter'].filter(function(test){return test['ntestgrouptestcode']===selectedRecord['ntestgrouptestcode'].value;});if(savedTest.length>0){if(savedTest[0]['ParameterRulesEngine']){var savedTestParameterlist=savedTest[0]['ParameterRulesEngine'];tempparameterResults.map(function(param,index){var savedParameter=savedTestParameterlist.filter(function(x){return x['ntestgrouptestparametercode']===param['ntestgrouptestparametercode'];})[0];if(savedParameter&&savedParameter['sresult']!==''){//delete parameterResults[index]; \nvar removeIndex=parameterResults.findIndex(function(x){return x['ntestgrouptestparametercode']===savedParameter['ntestgrouptestparametercode'];});parameterResults.splice(removeIndex,1);}});}}if(parameterResults.length>0){parameterResults.map(function(param,index){selectedResultGrade[index]={ngradecode:param.ngradecode};paremterResultcode[index]=param.ntestgrouptestparametercode;// let jsondata=JSON.parse(param.jsondata['value'])\nif(param.hasOwnProperty('additionalInfo')){additionalInfo[param.ntestgrouptestparametercode]=param['additionalInfo'];}predefDefaultFlag=false;response.data.PredefinedValues&&response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode]&&response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode].map(function(predefinedvalue){// if (predefinedvalue.ndefaultstatus === transactionStatus.YES&&\n//     predefinedvalue.nneedresultentryalert=== transactionStatus.NO\n//      && predefinedvalue.nneedsubcodedresult=== transactionStatus.NO) {\n//     if (!predefDefaultFlag) {\n//         predefDefaultFlag = true;\n//         response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\n//             undefined, undefined).get(\"OptionList\");\n//     }\n//   //   if (response.data.TestGroupTestParameterRulesEngine[index].sresult === null) {\n//         response.data.TestGroupTestParameterRulesEngine[index].sresult =predefinedvalue.spredefinedname;\n//         response.data.TestGroupTestParameterRulesEngine[index].sresultpredefinedname = predefinedvalue.sresultpredefinedname;\n//         response.data.TestGroupTestParameterRulesEngine[index].sfinal = predefinedvalue.spredefinedsynonym;\n//         response.data.TestGroupTestParameterRulesEngine[index].editable = true;\n//         response.data.TestGroupTestParameterRulesEngine[index].ngradecode = predefinedvalue.ngradecode;\n//         response.data.TestGroupTestParameterRulesEngine[index].sgradename = predefinedvalue.sgradename; \n//         if (predefinedvalue.spredefinedcomments && predefinedvalue.spredefinedcomments !== null) {\n//             response.data.TestGroupTestParameterRulesEngine[index].sresultcomment = predefinedvalue.spredefinedcomments\n//                 && predefinedvalue.spredefinedcomments;\n//         }\n//  //  }\n// }\n// else {\nif(!predefDefaultFlag){predefDefaultFlag=true;response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode]=constructOptionList(response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode]||[],'sresultpredefinedname','sresultpredefinedname',undefined,undefined,undefined).get(\"OptionList\");}//}\n});response.data.TestGroupTestParameterRulesEngine[index].sresult=null;});}else{return toast.info(intl.formatMessage({id:\"IDS_NOMOREPARAMETERSAVAILABLEFORTHISTEST\"}));}if(parameterResults.length>0){dispatch({type:DEFAULT_RETURN,payload:{openModalPopup:true,modalParameterPopup:action===\"IDS_ADDPARAMETER\"?true:false,masterData:_objectSpread(_objectSpread(_objectSpread({},masterData),response.data),{},{paremterResultcode:paremterResultcode}),selectedRecord:_objectSpread(_objectSpread({},selectedRecord),{},{additionalInfo:additionalInfo.length>0?additionalInfo:[],selectedResultGrade:selectedResultGrade,ParameterRulesEngine:response.data.TestGroupTestParameterRulesEngine}),loading:false,action:action,openmodalsavePopup:false}});}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getPredefinedDataRulesEngine(inputData,selectedRecord,currentAlertResultCode,masterData){return function(dispatch){var inputParamData={ntestgrouptestpredefcode:inputData.ntestgrouptestpredefcode};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getPredefinedData\",inputParamData).then(function(response){var showMultiSelectCombo=false;var ResultParameter=selectedRecord['ParameterRulesEngine'];var onlyAlertMsgAvailable=false;var testgrouptestpredefsubresult=response.data['testgrouptestpredefsubresult'];if(inputData['nneedsubcodedresult']===transactionStatus.YES){showMultiSelectCombo=true;masterData['testgrouptestpredefsubresultOptions']=testgrouptestpredefsubresult;}else{onlyAlertMsgAvailable=true;}var _iterator=_createForOfIteratorHelper(ResultParameter),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var Parameter=_step.value;if(Parameter.additionalInfoUidata){if(Parameter.additionalInfoUidata||Parameter.additionalInfoUidata===\"\"){var additionalInfoUidata=typeof Parameter.additionalInfoUidata==='string'?Parameter.additionalInfoUidata===\"\"?\"\":JSON.parse(Parameter.additionalInfoUidata):Parameter.additionalInfoUidata;if(Parameter['ntestgrouptestparametercode']===currentAlertResultCode&&Parameter['ntestgrouptestpredefcode']===inputData['ntestgrouptestpredefcode']){if(Parameter.additionalInfoUidata){selectedRecord[\"ntestgrouptestpredefsubcode\"]=additionalInfoUidata['ntestgrouptestpredefsubcode'];break;}}else{if(selectedRecord[\"ntestgrouptestpredefsubcode\"]){delete selectedRecord[\"ntestgrouptestpredefsubcode\"];}}}}}}catch(err){_iterator.e(err);}finally{_iterator.f();};masterData['salertmessage']=inputData.salertmessage;dispatch({type:DEFAULT_RETURN,payload:{loading:false,masterData:masterData,showAlertGrid:inputData.nneedresultentryalert===transactionStatus.NO?false:true,showAlertForPredefined:true,showMultiSelectCombo:showMultiSelectCombo,onlyAlertMsgAvailable:onlyAlertMsgAvailable,additionalInfoView:false,selectedRecord:selectedRecord,showParameterGrid:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getParameterResultValue(combodata,groupIndex,index,PredefinedParameterOptions,selectedRecord,masterData,userInfo){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/testgrouprulesengine/getParameterResultValue\",{'userinfo':userInfo,\"nparametertypecode\":combodata['stestname']['item']['nparametertypecode'],'ntestgrouptestparametercode':combodata['stestname']['item']['ntestgrouptestparametercode']}).then(function(response){var PredefinedParameterRulesEngine=constructOptionList(response.data.PredefinedParameterRulesEngine||[],\"ntestgrouptestpredefcode\",\"spredefinedname\",undefined,undefined,undefined);if(PredefinedParameterOptions[groupIndex]===undefined){PredefinedParameterOptions[groupIndex]=[];}if(PredefinedParameterOptions[groupIndex][index]===undefined){PredefinedParameterOptions[groupIndex][index]=[];}PredefinedParameterOptions[groupIndex][index]=PredefinedParameterRulesEngine.get(\"OptionList\");masterData['PredefinedParameterOptions']=PredefinedParameterOptions;dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function saveExecutionOrder(testGroupRulesEngineList,masterData,userInfo){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/testgrouprulesengine/updateExecutionOrder\",{'userinfo':userInfo,'ntestgrouptestcode':testGroupRulesEngineList[0]['ntestgrouptestcode'],'TestGroupRulesEngine':testGroupRulesEngineList}).then(function(response){masterData['RulesEngine']=response.data.RulesEngine;masterData['RulesEngine'].map(function(x){if(x['ntestgrouprulesenginecode']===masterData['SelectedRulesEngine']['ntestgrouprulesenginecode']){x['selected']={};x['selected']=true;}});//  masterData['SelectedRulesEngine'] = response.data.SelectedRulesEngine\ndispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,masterList:response.data['RulesEngine']&&sortData(response.data['RulesEngine'],'ascending','nruleexecorder'),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/actions/TestGroupRuleEngineAction.js"],"names":["rsapi","DEFAULT_RETURN","constructOptionList","sortData","toast","Axios","initRequest","intl","ColumnType","queryTypeFilter","transactionStatus","format","getTestGroupRulesEngineAdd","userInfo","testgrouprulesengine","inputParam","masterData","testcomments","reportcomments","predefcomments","sampletestcommentsList","selectedRecord","addGroupList","dispatch","SelectedTest","undefined","warn","formatMessage","id","url","push","post","userinfo","ntestgrouptestcode","SelectedComponent","nspecsampletypecode","SelectedSpecification","napproveconfversioncode","nallottedspeccode","all","then","response","DiagnosticCase","data","Grade","viewListMap","resultType","site","CommentType","commentsubtypelst","w","filter","x","ncommentsubtypecode","CommentSubType","testInitiateTestCombo","commentlist","y","z","get","GradeValues","type","payload","loading","operation","databaseviewList","openPortalModal","screenName","siteObject","testCommentObject","reportCommentObject","testInitiateTests","testRepeatTests","testenforceTests","testCommentsTests","reportCommentsTests","reportCommentsTestsTab","activeTabIndex","testCommentsTestCombo","testRepeatTestCombo","testenforceTestCombo","rulesOption","DiagnosticCaseList","GradeList","siteList","resultTypeList","testCommentsTestsTab","testInitiateSiteTab","PredefinedParameterOptions","testRepeatTestsTab","testenforceTestsTab","testInitiateTestOptions","testCommentsTestOptions","reportCommentsTestOptions","openModalPopup","openmodalsavePopup","viewColumnListByRule","isServiceNeed","catch","error","status","message","getSpecificationTestGroupRulesEngine","ismodalcombochange","nproductcatcode","item","TestGroupSpecification","TestGroupSpecificationList","selectedcombo","getComponentTestGroupRulesEngine","Component","ComponentList","getSelectedTestGroupRulesEngine","parseInt","ntestgrouprulesenginecode","SelectedRulesEngine","getTestGroupRulesEngine","ncomponentcode","getEditTestGroupRulesEngine","length","urlArray","responsedata","srulename","groupList","outcomeList","map","ruleslist","index","hasOwnProperty","action","getParameterforEnforce","value","testGroupTestParameterRulesEngine","TestGroupTestParameterRulesEngine","testGroupTestParameterRulesEngineList","getParameterRulesEngine","isParameterPopupChanged","additionalInfo","selectedResultGrade","paremterResultcode","parameterResults","tempparameterResults","predefDefaultFlag","savedTest","test","savedTestParameterlist","param","savedParameter","removeIndex","findIndex","splice","ngradecode","ntestgrouptestparametercode","PredefinedValues","predefinedvalue","sresult","info","modalParameterPopup","ParameterRulesEngine","getPredefinedDataRulesEngine","inputData","currentAlertResultCode","inputParamData","ntestgrouptestpredefcode","showMultiSelectCombo","ResultParameter","onlyAlertMsgAvailable","testgrouptestpredefsubresult","YES","Parameter","additionalInfoUidata","JSON","parse","salertmessage","showAlertGrid","nneedresultentryalert","NO","showAlertForPredefined","additionalInfoView","showParameterGrid","getParameterResultValue","combodata","groupIndex","PredefinedParameterRulesEngine","saveExecutionOrder","testGroupRulesEngineList","RulesEngine","masterList"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    constructOptionList,\r\n    sortData\r\n} from '../components/CommonScript' //getComboLabelValue,, searchData\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport {\r\n    ColumnType,\r\n    queryTypeFilter,\r\n    transactionStatus\r\n} from '../components/Enumeration';\r\nimport { format } from 'date-fns';\r\n\r\nexport function getTestGroupRulesEngineAdd(userInfo, testgrouprulesengine, inputParam, masterData) {\r\n    let testcomments = []\r\n    let reportcomments = []\r\n    let predefcomments = []\r\n    let sampletestcommentsList = []\r\n    let selectedRecord = {}\r\n    let addGroupList = []\r\n    return function (dispatch) {\r\n        if (masterData && masterData.SelectedTest === null || masterData && masterData.SelectedTest === undefined) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_ADDTEST\" }));\r\n        }\r\n        else {\r\n            //if (masterData.SelectedSpecification&&masterData.SelectedSpecification['napprovalstatus'] === transactionStatus.APPROVED) { \r\n            dispatch(initRequest(true));\r\n            let url = [];\r\n            if (testgrouprulesengine) {\r\n                url.push(rsapi.post(\"/testgrouprulesengine/getdatabasetables\", {\r\n                    userinfo: userInfo\r\n                }));\r\n\r\n            } else {\r\n                url.push(rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngineAdd\", {\r\n                    \"ntestgrouptestcode\": masterData.SelectedTest.ntestgrouptestcode,\r\n                    \"nspecsampletypecode\": masterData.SelectedComponent.nspecsampletypecode,\r\n                    \"napproveconfversioncode\": masterData.SelectedSpecification.napproveconfversioncode,\r\n                    \"nallottedspeccode\": masterData.SelectedSpecification.nallottedspeccode,\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/grade/getGrade\", {\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/site/getSite\", {\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\", {\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/sampletestcomments/getCommentType\", {\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/sampletestcomments/getCommentSubType\", {\r\n                    userinfo: userInfo\r\n                }));\r\n            }\r\n            Axios.all(url)\r\n                .then(response => {\r\n                    const DiagnosticCase = constructOptionList(response[0].data[\"DiagnosticCase\"] || [], \"ndiagnosticcasecode\", \"sdiagnosticcasename\", false, false, false);\r\n                    const Grade = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false);\r\n                    const viewListMap = constructOptionList(response[0].data[\"TestParameter\"] || [], \"ntestgrouptestparametercode\", \"stestparametersynonym\", undefined, undefined, undefined);\r\n                    const resultType = constructOptionList(response[0].data[\"ResultType\"] || [], \"nresultypecode\", \"sdisplayname\", undefined, undefined, undefined);\r\n                    const site = constructOptionList(response[2].data || [], \"nsitecode\", \"ssitename\", false, false, false);\r\n                    const CommentType = constructOptionList(response[4].data['CommentType'] || [], \"ncommenttypecode\", \"scommenttype\", false, false, false);\r\n                    let commentsubtypelst = response[5].data['CommentSubType']\r\n                    let w = commentsubtypelst.filter(x => x.ncommentsubtypecode === 3 || x.ncommentsubtypecode === 6)\r\n                    const CommentSubType = constructOptionList(w || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, false);\r\n                    const testInitiateTestCombo = constructOptionList(masterData['TestGroupTest'] || [], \"ntestgrouptestcode\", \"stestsynonym\", false, false, false);\r\n\r\n                    let commentlist = response[3].data\r\n                    let x = commentlist.filter(x => x.ncommentsubtypecode === 1)\r\n                    let y = commentlist.filter(x => x.ncommentsubtypecode === 4)\r\n                    let z = commentlist.filter(x => x.ncommentsubtypecode === 3)\r\n\r\n                    testcomments = (constructOptionList(x || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    reportcomments = (constructOptionList(y || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    predefcomments = (constructOptionList(z || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, false)).get(\"OptionList\");\r\n\r\n                    masterData['testParameter'] = {}\r\n                    masterData['testParameterComments'] = {}\r\n                    masterData['testParameterreportComments'] = {}\r\n                    masterData['testComments'] = {}\r\n                    masterData['reportComments'] = {}\r\n                    masterData['testSite'] = {}\r\n                    masterData['testRepeat'] = []\r\n                    masterData['testenforceTests'] = []\r\n                    masterData['GradeValues'] = response[0].data.GradeValues\r\n                    selectedRecord[\"groupList\"] = [];\r\n                    selectedRecord[\"groupList\"][0] = [];\r\n                    selectedRecord[\"groupList\"][0][\"button_and\"] = true;\r\n                    selectedRecord[\"groupList\"][0][0] = {};\r\n                    addGroupList[0] = 1;\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            operation: 'create',\r\n                            databaseviewList: viewListMap.get(\"OptionList\"),\r\n                            testcomments,\r\n                            reportcomments,\r\n\r\n                            openPortalModal: true,\r\n                            screenName: \"IDS_ADDRULESENGINE\",\r\n                            testgrouprulesengine,\r\n                            ...inputParam,\r\n\r\n                            siteObject: {},\r\n                            testCommentObject: {},\r\n                            reportCommentObject: {},\r\n                            testInitiateTests: [],\r\n                            testRepeatTests: [],\r\n                            testenforceTests: [],\r\n                            testCommentsTests: [],\r\n                            reportCommentsTests: []\r\n                            ,\r\n                            reportCommentsTestsTab: [],\r\n\r\n                            activeTabIndex: 0,\r\n                            masterData: {\r\n                                ...masterData, testInitiateTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testCommentsTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testRepeatTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testenforceTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                rulesOption: viewListMap.get(\"OptionList\"),\r\n                                DiagnosticCaseList: DiagnosticCase.get(\"OptionList\"),\r\n                                GradeList: Grade.get(\"OptionList\"),\r\n                                siteList: site.get(\"OptionList\"),\r\n                                resultTypeList: resultType.get(\"OptionList\"),\r\n                                testCommentsTestsTab: [],\r\n                                testInitiateSiteTab: [],\r\n                                PredefinedParameterOptions: [],\r\n                                testRepeatTestsTab: [],\r\n                                testenforceTestsTab: [],\r\n                            },\r\n\r\n                            testInitiateTestOptions: viewListMap.get(\"OptionList\"),\r\n                            testCommentsTestOptions: viewListMap.get(\"OptionList\"),\r\n                            reportCommentsTestOptions: viewListMap.get(\"OptionList\"),\r\n                            CommentType: CommentType.get(\"OptionList\"),\r\n                            CommentSubType: CommentSubType.get(\"OptionList\"),\r\n                            predefcomments,\r\n                            openModalPopup: false,\r\n                            openmodalsavePopup: false,\r\n                            addGroupList,\r\n                            selectedRecord,\r\n                            viewColumnListByRule: viewListMap.get(\"OptionList\"),\r\n                            isServiceNeed:true\r\n                            \r\n                        }\r\n                    });\r\n                }\r\n                )\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n            // }\r\n            // else {\r\n            //     toast.warn(intl.formatMessage({ id: \"IDS_RULESCANBEADDEDONLYFORAPPROVEDSPEC\" })); \r\n            // }\r\n\r\n        }\r\n    }\r\n}\r\nexport function getSpecificationTestGroupRulesEngine(inputParam, selectedRecord, ismodalcombochange, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getSpecificationTestGroupRulesEngine\",\r\n            { 'userinfo': userInfo, \"nproductcatcode\": inputParam.nproductcatcode.item.nproductcatcode })\r\n            .then(response => {\r\n                const TestGroupSpecification = constructOptionList(response.data.TestGroupSpecification || [], \"nallottedspeccode\",\r\n                    \"sspecname\", undefined, undefined, undefined);\r\n                let TestGroupSpecificationList = TestGroupSpecification.get(\"OptionList\");\r\n                if (ismodalcombochange) {\r\n                    selectedRecord = { ...selectedRecord, ...inputParam, 'nallottedspeccode': TestGroupSpecificationList[0] }\r\n                    masterData = { ...masterData, ...response.data }\r\n                }\r\n                else {\r\n                    let selectedcombo = { ...inputParam, 'nallottedspeccode': TestGroupSpecificationList[0] }\r\n                    masterData = { ...masterData, ...response.data, selectedcombo }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function getComponentTestGroupRulesEngine(inputParam, selectedRecord, ismodalcombochange, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getComponentTestGroupRulesEngine\",\r\n            { 'userinfo': userInfo, \"nallottedspeccode\": inputParam.nallottedspeccode.item.nallottedspeccode })\r\n            .then(response => {\r\n                const Component = constructOptionList(response.data.Component || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, undefined);\r\n                let ComponentList = Component.get(\"OptionList\");\r\n                if (ismodalcombochange) {\r\n                    selectedRecord = { ...selectedRecord, ...inputParam, 'ncomponentcode': ComponentList[0] }\r\n                    masterData = { ...masterData, ...response.data }\r\n                }\r\n                else {\r\n                    let selectedcombo = { ...inputParam, 'ncomponentcode': ComponentList[0] }\r\n                    masterData = { ...masterData, ...response.data, selectedcombo }\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function getSelectedTestGroupRulesEngine(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getSelectedTestGroupRulesEngine\",\r\n            {\r\n                'userinfo': userInfo, \"ntestgrouprulesenginecode\": parseInt(inputParam.ntestgrouprulesenginecode)//, nproductcatcode: masterData.SelectedProductCategory.nproductcatcode\r\n                , \"ntestgrouptestcode\": masterData.SelectedTest.ntestgrouptestcode,\r\n            })\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData, SelectedRulesEngine: response.data[\"SelectedRulesEngine\"]\r\n                };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getTestGroupRulesEngine(nproductcatcode, nallottedspeccode, ncomponentcode, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngine\",\r\n            {\r\n                'userinfo': userInfo, \"nproductcatcode\": nproductcatcode\r\n                , \"nallottedspeccode\": nallottedspeccode\r\n                , \"ncomponentcode\": ncomponentcode\r\n            })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...response.data\r\n                };\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function getEditTestGroupRulesEngine(operation, masterData//,\r\n    // ncontrolCode\r\n    , userInfo) {\r\n    let testcomments = []\r\n    let reportcomments = []\r\n    let predefcomments = []\r\n    return function (dispatch) {\r\n        if (masterData['RulesEngine'] && masterData['RulesEngine'].length > 0) {\r\n            let urlArray = [];\r\n            let selectedRecord = {}\r\n            urlArray.push(rsapi.post(\"testgrouprulesengine/getEditTestGroupRulesEngine\", {\r\n                'ntestgrouprulesenginecode':\r\n                    masterData.SelectedRulesEngine['ntestgrouprulesenginecode'], 'masterData': masterData, \"userinfo\": userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/grade/getGrade\", {\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/site/getSite\", {\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\", {\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngineAdd\", {\r\n                \"ntestgrouptestcode\": masterData.SelectedTest.ntestgrouptestcode,\r\n                \"nspecsampletypecode\": masterData.SelectedComponent.nspecsampletypecode,\r\n                \"napproveconfversioncode\": masterData.SelectedSpecification.napproveconfversioncode,\r\n                \"nallottedspeccode\": masterData.SelectedSpecification.nallottedspeccode,\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/productcategory/getProductCategory\", {\r\n                userinfo: userInfo\r\n            }));\r\n\r\n            urlArray.push(rsapi.post(\"/sampletestcomments/getCommentType\", {\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/sampletestcomments/getCommentSubType\", {\r\n                userinfo: userInfo\r\n            }));\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    masterData['testParameter'] = {}\r\n                    masterData['testParameterComments'] = {}\r\n                    masterData['testParameterreportComments'] = {}\r\n                    let responsedata = response[0].data\r\n                    let srulename = responsedata['RulesEngineEdit'][0]['srulename']\r\n                    //    let nruleexecorder = responsedata['RulesEngineEdit'][0]['nruleexecorder']\r\n                    let groupList = responsedata['RulesEngineEdit'][0]['jsondata']\r\n                    let outcomeList = responsedata['RulesEngineEdit'][0]['jsonuidata']\r\n                    selectedRecord[\"groupList\"] = []\r\n                    groupList.map((ruleslist, index) => {\r\n\r\n                        if (ruleslist.hasOwnProperty('button_or')) {\r\n                            selectedRecord[\"groupList\"][index] = ruleslist[\"button_or\"]\r\n                            selectedRecord[\"groupList\"][index][\"button_or\"] = true\r\n                        }\r\n                        if (ruleslist.hasOwnProperty('button_and')) {\r\n                            selectedRecord[\"groupList\"][index] = ruleslist[\"button_and\"]\r\n                            selectedRecord[\"groupList\"][index][\"button_and\"] = true\r\n                        }\r\n                        if (ruleslist.hasOwnProperty('button_not_button_and')) {\r\n                            selectedRecord[\"groupList\"][index] = ruleslist[\"button_not_button_and\"]\r\n                            selectedRecord[\"groupList\"][index][\"button_and\"] = true\r\n                            selectedRecord[\"groupList\"][index][\"button_not\"] = true\r\n                        }\r\n                        if (ruleslist.hasOwnProperty('button_not_button_or')) {\r\n                            selectedRecord[\"groupList\"][index] = ruleslist[\"button_not_button_or\"]\r\n                            selectedRecord[\"groupList\"][index][\"button_or\"] = true\r\n                            selectedRecord[\"groupList\"][index][\"button_not\"] = true\r\n                        }\r\n                    })\r\n                    // if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_and')) {\r\n                    //     selectedRecord[\"groupList\"]['button_not'] = true\r\n                    // }\r\n                    // if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_or')) {\r\n                    //     selectedRecord[\"groupList\"]['button_not'] = true\r\n                    // }\r\n                    if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_or')) {\r\n                        selectedRecord[\"groupList\"]['button_or'] = true\r\n                    }\r\n                    else {\r\n                        selectedRecord[\"groupList\"]['button_and'] = true\r\n                    }\r\n                    selectedRecord['srulename'] = srulename\r\n                    selectedRecord['srulenamecopy'] = srulename\r\n                    //     selectedRecord['nruleexecordercopy'] = nruleexecorder\r\n                    // selectedRecord[\"groupList\"][0][\"button_and\"] = true\r\n                    let addGroupList = []\r\n                    addGroupList = responsedata['RulesEngineEdit'][0]['jsonuidata']['addGroupList']\r\n                    const DiagnosticCase = constructOptionList(response[4].data[\"DiagnosticCase\"] || [], \"ndiagnosticcasecode\", \"sdiagnosticcasename\", false, false, false);\r\n                    const Grade = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false);\r\n                    const viewListMap = constructOptionList(response[4].data[\"TestParameter\"] || [], \"ntestgrouptestparametercode\", \"stestparametersynonym\", undefined, undefined, undefined);\r\n                    const resultType = constructOptionList(response[4].data[\"ResultType\"] || [], \"nresultypecode\", \"sdisplayname\", undefined, undefined, undefined);\r\n                    const site = constructOptionList(response[2].data || [], \"nsitecode\", \"ssitename\", false, false, false);\r\n                    const CommentType = constructOptionList(response[6].data['CommentType'] || [], \"ncommenttypecode\", \"scommenttype\", false, false, false);\r\n                    const testInitiateTestCombo = constructOptionList(masterData['TestGroupTest'] || [], \"ntestgrouptestcode\", \"stestsynonym\", false, false, false);\r\n\r\n\r\n                    let commentsubtypelst = response[7].data['CommentSubType']\r\n                    let w = commentsubtypelst.filter(x => x.ncommentsubtypecode === 3 || x.ncommentsubtypecode === 6)\r\n                    const CommentSubType = constructOptionList(w || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, false);\r\n                    let commentlist = response[3].data\r\n                    let x = commentlist.filter(x => x.ncommentsubtypecode === 1)\r\n                    let y = commentlist.filter(x => x.ncommentsubtypecode === 4)\r\n                    let z = commentlist.filter(x => x.ncommentsubtypecode === 3)\r\n                    testcomments = (constructOptionList(x || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    reportcomments = (constructOptionList(y || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    predefcomments = (constructOptionList(z || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, false)).get(\"OptionList\");\r\n\r\n                    masterData['testParameter'] = outcomeList['testInitiateTests'] && outcomeList['testInitiateTests']\r\n                    masterData['testRepeat'] = outcomeList['testRepeatTests'] && outcomeList['testRepeatTests']\r\n                    masterData['testenforceTests'] = outcomeList['testenforceTests'] && outcomeList['testenforceTests']\r\n\r\n                    masterData['testParameterComments'] = outcomeList['testCommentsTests'] && outcomeList['testCommentsTests']\r\n                    masterData['testParameterreportComments'] = outcomeList['reportCommentsTests'] && outcomeList['reportCommentsTests']\r\n\r\n                    masterData[\"testComments\"] = outcomeList['testCommentObject'] && outcomeList['testCommentObject']\r\n                    masterData[\"reportComments\"] = outcomeList['reportCommentObject'] && outcomeList['reportCommentObject']\r\n                    masterData[\"testSite\"] = outcomeList['siteObject'] && outcomeList['siteObject']\r\n                    selectedRecord[\"nproductcatcode\"] = outcomeList['nproductcatcode'] && outcomeList['nproductcatcode']\r\n                    selectedRecord[\"nallottedspeccode\"] = outcomeList['nallottedspeccode'] && outcomeList['nallottedspeccode']\r\n                    selectedRecord[\"ncomponentcode\"] = outcomeList['ncomponentcode'] && outcomeList['ncomponentcode']\r\n                    selectedRecord[\"groupListJoins\"] = outcomeList['groupListJoins'] && outcomeList['groupListJoins']\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            operation: operation, screenName: \"IDS_EDITRULESENGINE\", selectedRecord,\r\n                            openPortalModal: true,// ncontrolCode: ncontrolCode,\r\n                            loading: false, addGroupList,\r\n                            masterData: {\r\n                                ...masterData, testInitiateTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testCommentsTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testRepeatTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testenforceTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                rulesOption: viewListMap.get(\"OptionList\"),\r\n                                DiagnosticCaseList: DiagnosticCase.get(\"OptionList\"),\r\n                                GradeList: Grade.get(\"OptionList\"),\r\n                                siteList: site.get(\"OptionList\"),\r\n                                resultTypeList: resultType.get(\"OptionList\"),\r\n                                testCommentsTestsTab: outcomeList['testCommentsTestsTab'],\r\n                                testRepeatTestsTab: outcomeList['testRepeatTestsTab'],\r\n                                testenforceTestsTab: outcomeList['testenforceTestsTab'],\r\n                                PredefinedParameterOptions: outcomeList['PredefinedParameterOptions'],\r\n                                testInitiateSiteTab: outcomeList['testInitiateSiteTab'],\r\n                                reportCommentsTestsTab: outcomeList['reportCommentsTestsTab'],\r\n                                GradeValues: response[4].data.GradeValues\r\n                            },\r\n                            viewColumnListByRule: viewListMap.get(\"OptionList\"),\r\n\r\n                            testcomments,\r\n                            reportcomments,\r\n\r\n                            testInitiateTests: outcomeList['testInitiateTests'] && outcomeList['testInitiateTests'],\r\n                            testCommentsTests: outcomeList['testCommentsTests'] && outcomeList['testCommentsTests'],\r\n                            testRepeatTests: outcomeList['testRepeatTests'] && outcomeList['testRepeatTests'],\r\n                            testenforceTests: outcomeList['testenforceTests'] && outcomeList['testenforceTests'],\r\n                            reportCommentsTests: outcomeList['reportCommentsTests'] && outcomeList['reportCommentsTests'],\r\n                            siteObject: outcomeList['siteObject'] && outcomeList['siteObject'],\r\n                            testCommentObject: outcomeList['testCommentObject'] && outcomeList['testCommentObject'],\r\n                            reportCommentObject: outcomeList['reportCommentObject'] && outcomeList['reportCommentObject'],\r\n\r\n                            CommentType: CommentType.get(\"OptionList\"),\r\n                            CommentSubType: CommentSubType.get(\"OptionList\"),\r\n                            predefcomments,\r\n                            openModalPopup: false,\r\n                            openmodalsavePopup: false,\r\n                            activeTabIndex: 0,\r\n                            action: \"update\",\r\n                            isServiceNeed:true\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTRULETOEDIT\" }));\r\n        }\r\n    }\r\n}\r\nexport function getParameterforEnforce(selectedRecord, masterData, userInfo, activeTabIndex,action) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getParameterRulesEngine\",\r\n            { 'userinfo': userInfo, \"ntestgrouptestcode\": selectedRecord['ntestgrouptestcode'].value, 'tabIndex': activeTabIndex,\r\n            'ntestgrouprulesenginecode':selectedRecord['ntestgrouprulesenginecode'] })\r\n            .then(response => {\r\n                const testGroupTestParameterRulesEngine = constructOptionList(response.data.TestGroupTestParameterRulesEngine || [], \"ntestgrouptestparametercode\",\r\n                    \"sparametersynonym\", undefined, undefined, undefined);\r\n                let testGroupTestParameterRulesEngineList = testGroupTestParameterRulesEngine.get(\"OptionList\");\r\n                masterData['testGroupTestParameterRulesEngine'] = testGroupTestParameterRulesEngineList\r\n                //Start\r\n\r\n                //end\r\n\r\n                // let keylst = Object.keys(response.data.PredefinedValues)\r\n                // keylst.map(ntestgrouptestparametercode => {\r\n                //     response.data.PredefinedValues[ntestgrouptestparametercode] =\r\n                //         constructOptionList(response.data.PredefinedValues[ntestgrouptestparametercode]\r\n                //             || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\r\n                //             undefined, undefined).get(\"OptionList\");\r\n                // })\r\n                // masterData['PredefinedValues'] = response.data.PredefinedValues\r\n                // masterData['GradeValues'] = response.data.GradeValues\r\n                // selectedRecord = { ...selectedRecord, 'ParameterRulesEngine': response.data.TestGroupTestParameterRulesEngine }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        loading: false,\r\n                        action,\r\n                        openmodalsavePopup:false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function getParameterRulesEngine(selectedRecord, masterData, userInfo, activeTabIndex, action,isParameterPopupChanged) {\r\n    return function (dispatch) {\r\n        let additionalInfo = []\r\n    //    dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getParameterRulesEngine\",\r\n            { 'userinfo': userInfo, \"ntestgrouptestcode\": selectedRecord['ntestgrouptestcode'].value, 'tabIndex': activeTabIndex,\r\n        'ntestgrouprulesenginecode':selectedRecord['ntestgrouprulesenginecode'] })\r\n            .then(response => {\r\n                let selectedResultGrade = [];\r\n                let paremterResultcode = [];\r\n                const parameterResults = response.data.TestGroupTestParameterRulesEngine\r\n                let tempparameterResults=[...parameterResults]\r\n                let predefDefaultFlag = false;\r\n                let savedTest = masterData['testParameter'].filter(test => test['ntestgrouptestcode'] === selectedRecord['ntestgrouptestcode'].value)\r\n                if (savedTest.length > 0) {\r\n                    if(savedTest[0]['ParameterRulesEngine']){\r\n                        let savedTestParameterlist = savedTest[0]['ParameterRulesEngine']\r\n                        tempparameterResults.map((param, index) => {\r\n                            let savedParameter = savedTestParameterlist.filter(x => x['ntestgrouptestparametercode'] === param['ntestgrouptestparametercode'])[0]\r\n                            if (savedParameter&&savedParameter['sresult'] !== '') {\r\n                                //delete parameterResults[index]; \r\n                                  let removeIndex=parameterResults.findIndex(x=>x['ntestgrouptestparametercode']===savedParameter['ntestgrouptestparametercode'])\r\n                                  parameterResults.splice(removeIndex,1);\r\n                            }\r\n                        });\r\n                    } \r\n                }\r\n                if(parameterResults.length>0){\r\n                parameterResults.map((param, index) => {\r\n                    selectedResultGrade[index] = {\r\n                        ngradecode:  param.ngradecode\r\n                    };\r\n                    paremterResultcode[index] = param.ntestgrouptestparametercode;\r\n                    // let jsondata=JSON.parse(param.jsondata['value'])\r\n                      if(param.hasOwnProperty('additionalInfo')){\r\n                        additionalInfo[param.ntestgrouptestparametercode]=param['additionalInfo'] \r\n                      }  \r\n                    predefDefaultFlag = false;\r\n                    (response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode]) &&\r\n                        response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode].map(predefinedvalue => {\r\n                            // if (predefinedvalue.ndefaultstatus === transactionStatus.YES&&\r\n                            //     predefinedvalue.nneedresultentryalert=== transactionStatus.NO\r\n                            //      && predefinedvalue.nneedsubcodedresult=== transactionStatus.NO) {\r\n                            //     if (!predefDefaultFlag) {\r\n                            //         predefDefaultFlag = true;\r\n                            //         response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\r\n                            //             undefined, undefined).get(\"OptionList\");\r\n                                        \r\n                            //     }\r\n                                \r\n                            //   //   if (response.data.TestGroupTestParameterRulesEngine[index].sresult === null) {\r\n                            //         response.data.TestGroupTestParameterRulesEngine[index].sresult =predefinedvalue.spredefinedname;\r\n                            //         response.data.TestGroupTestParameterRulesEngine[index].sresultpredefinedname = predefinedvalue.sresultpredefinedname;\r\n                            //         response.data.TestGroupTestParameterRulesEngine[index].sfinal = predefinedvalue.spredefinedsynonym;\r\n                            //         response.data.TestGroupTestParameterRulesEngine[index].editable = true;\r\n                            //         response.data.TestGroupTestParameterRulesEngine[index].ngradecode = predefinedvalue.ngradecode;\r\n                            //         response.data.TestGroupTestParameterRulesEngine[index].sgradename = predefinedvalue.sgradename; \r\n                            //         if (predefinedvalue.spredefinedcomments && predefinedvalue.spredefinedcomments !== null) {\r\n                            //             response.data.TestGroupTestParameterRulesEngine[index].sresultcomment = predefinedvalue.spredefinedcomments\r\n                            //                 && predefinedvalue.spredefinedcomments;\r\n                            //         }\r\n                            //  //  }\r\n                            // }\r\n                            // else {\r\n                               \r\n                                if (!predefDefaultFlag) {\r\n                                    predefDefaultFlag = true;\r\n                                    response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode] =\r\n                                        constructOptionList(response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode]\r\n                                            || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\r\n                                            undefined, undefined).get(\"OptionList\");\r\n                                }\r\n\r\n                            //}\r\n\r\n                        });\r\n                        response.data.TestGroupTestParameterRulesEngine[index].sresult=null\r\n                });\r\n            }\r\n            else\r\n            {\r\n              return  toast.info(intl.formatMessage({ id: \"IDS_NOMOREPARAMETERSAVAILABLEFORTHISTEST\" }));\r\n            }\r\n            if(parameterResults.length>0){\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openModalPopup: true,\r\n                        modalParameterPopup: action === \"IDS_ADDPARAMETER\" ? true : false,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            paremterResultcode\r\n\r\n                        },\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            additionalInfo: additionalInfo.length > 0 ? additionalInfo : [],\r\n                            selectedResultGrade: selectedResultGrade,\r\n                            ParameterRulesEngine: response.data.TestGroupTestParameterRulesEngine\r\n                        },\r\n                        loading: false,\r\n                        action,\r\n                        openmodalsavePopup:false\r\n                    }\r\n                })\r\n            }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function getPredefinedDataRulesEngine(inputData, selectedRecord, currentAlertResultCode, masterData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntestgrouptestpredefcode: inputData.ntestgrouptestpredefcode,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getPredefinedData\", inputParamData)\r\n            .then(response => {\r\n                let showMultiSelectCombo = false;\r\n                let ResultParameter = selectedRecord['ParameterRulesEngine']\r\n                let onlyAlertMsgAvailable = false;\r\n                let testgrouptestpredefsubresult = response.data['testgrouptestpredefsubresult']\r\n                if (inputData['nneedsubcodedresult'] === transactionStatus.YES) {\r\n                    showMultiSelectCombo = true\r\n                    masterData['testgrouptestpredefsubresultOptions'] = testgrouptestpredefsubresult\r\n                }\r\n                else {\r\n                    onlyAlertMsgAvailable = true;\r\n                }\r\n                for (const Parameter of ResultParameter) {\r\n                    if(Parameter.additionalInfoUidata){\r\n                        if (Parameter.additionalInfoUidata || Parameter.additionalInfoUidata === \"\") {\r\n                            let additionalInfoUidata = typeof Parameter.additionalInfoUidata === 'string' ? Parameter.additionalInfoUidata === \"\" ? \"\" : JSON.parse(Parameter.additionalInfoUidata) :\r\n                                Parameter.additionalInfoUidata\r\n                            if (Parameter['ntestgrouptestparametercode'] === currentAlertResultCode &&\r\n                                Parameter['ntestgrouptestpredefcode'] === inputData['ntestgrouptestpredefcode']) {\r\n                                if (Parameter.additionalInfoUidata) {\r\n                                    selectedRecord[\"ntestgrouptestpredefsubcode\"] = additionalInfoUidata['ntestgrouptestpredefsubcode']\r\n                                    break;\r\n                                }\r\n                            } else {\r\n                                if (selectedRecord[\"ntestgrouptestpredefsubcode\"]) {\r\n                                    delete selectedRecord[\"ntestgrouptestpredefsubcode\"]\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n              \r\n\r\n                };\r\n                masterData['salertmessage'] = inputData.salertmessage\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData,\r\n                        showAlertGrid: inputData.nneedresultentryalert === transactionStatus.NO ? false : true,\r\n                        showAlertForPredefined: true,\r\n                        showMultiSelectCombo,\r\n                        onlyAlertMsgAvailable,\r\n                        additionalInfoView: false,\r\n                        selectedRecord,\r\n                        showParameterGrid:false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function getParameterResultValue(combodata, groupIndex, index, PredefinedParameterOptions, selectedRecord, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getParameterResultValue\",\r\n            {\r\n                'userinfo': userInfo, \"nparametertypecode\": combodata['stestname']['item']['nparametertypecode'],\r\n                'ntestgrouptestparametercode': combodata['stestname']['item']['ntestgrouptestparametercode']\r\n            })\r\n            .then(response => {\r\n                const PredefinedParameterRulesEngine = constructOptionList(response.data.PredefinedParameterRulesEngine || [], \"ntestgrouptestpredefcode\",\r\n                    \"spredefinedname\", undefined, undefined, undefined);\r\n                if (PredefinedParameterOptions[groupIndex] === undefined) {\r\n                    PredefinedParameterOptions[groupIndex] = []\r\n                }\r\n                if (PredefinedParameterOptions[groupIndex][index] === undefined) {\r\n                    PredefinedParameterOptions[groupIndex][index] = []\r\n                }\r\n                PredefinedParameterOptions[groupIndex][index] = PredefinedParameterRulesEngine.get(\"OptionList\");\r\n                masterData['PredefinedParameterOptions'] = PredefinedParameterOptions\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function saveExecutionOrder(testGroupRulesEngineList, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/updateExecutionOrder\",\r\n            {\r\n                'userinfo': userInfo,\r\n                'ntestgrouptestcode': testGroupRulesEngineList[0]['ntestgrouptestcode'],\r\n                'TestGroupRulesEngine': testGroupRulesEngineList\r\n            })\r\n            .then(response => {\r\n                masterData['RulesEngine'] = response.data.RulesEngine\r\n                masterData['RulesEngine'].map(x => {\r\n                    if (x['ntestgrouprulesenginecode'] === masterData['SelectedRulesEngine']['ntestgrouprulesenginecode']) {\r\n                        x['selected'] = {};\r\n                        x['selected'] = true;\r\n                    }\r\n                });\r\n                //  masterData['SelectedRulesEngine'] = response.data.SelectedRulesEngine\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        masterList: response.data['RulesEngine'] && sortData(response.data['RulesEngine'], 'ascending', 'nruleexecorder'),\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}