{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { constructOptionList, replaceUpdatedObject } from '../components/CommonScript';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nimport { toast } from 'react-toastify';\nimport { sortData } from '../components/CommonScript';\nimport { saveAs, encodeBase64 } from '@progress/kendo-file-saver';\nexport function getSampleCertTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplecertification/getFilterSampleData\", Map).then(response => {\n      const regtypeMap = constructOptionList(response.data.RegTypeValue || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, false);\n      const RegTypeValue = regtypeMap.get(\"OptionList\");\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          RegTypeValue\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSampleCertRegSubTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    rsapi.post(\"/samplecertification/getFilterRegData\", Map).then(response => {\n      const regsubtypeMap = constructOptionList(response.data.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", undefined, undefined, false);\n      const RegSubTypeValue = regsubtypeMap.get(\"OptionList\");\n      masterData = { ...masterData,\n        ...response.data,\n        RegSubTypeValue,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestResultData(methodParam) {\n  return function (dispatch) {\n    return rsapi.post(\"/samplecertification/getParameterSampleResults\", {\n      transactiontestcode: methodParam.primaryKeyValue,\n      userinfo: methodParam.userInfo\n    }).then(response => {\n      let sampleTestResults = methodParam.masterData.sampleTestResults || new Map();\n      sampleTestResults.set(methodParam.primaryKeyValue, Object.values(response.data[\"ParameterSampleResults\"]));\n      const masterData = { ...methodParam.masterData,\n        sampleTestResults\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          //...masterData,\n          masterData: masterData,\n          dataState: methodParam.dataState,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getActiveSample(Sample, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"samplecertification/getSampleCertificationById\", {\n      npreregno: parseInt(Sample.npreregno),\n      userinfo: userInfo\n    }).then(response => {\n      const printHistory = response.data.printHistory;\n      const TransactionSampleResults = response.data.TransactionSampleResults;\n      const TransactionSampleTests = response.data.TransactionSampleTests;\n      const emailSentHistory = response.data.emailSentHistory;\n      masterData = { ...masterData,\n        ...response.data,\n        printHistory,\n        emailSentHistory,\n        TransactionSampleResults,\n        TransactionSampleTests\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function generateCertificateAction(inputParam) {\n  return function (dispatch) {\n    let urlArray = [];\n    const CertificateStatus = rsapi.post(\"/samplecertification/generateCertificationStatus\", {\n      \"registration\": inputParam.registration,\n      \"npreregno\": inputParam.npreregno,\n      \"nversioncode\": inputParam.nversioncode,\n      \"userinfo\": inputParam.userinfo,\n      \"ncontrolcode\": inputParam.ncontrolcode\n    });\n    urlArray = [CertificateStatus];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let SAMPLESTATUS = response[0].data.SAMPLESTATUS;\n      let REPORTSTATUS = response[0].data.REPORTSTATUS;\n      let SampleResponse = response[0].data.SampleResponse;\n      let ReportResponse = response[0].data.ReportResponse;\n\n      if (SAMPLESTATUS === 200) {\n        const masterData = { ...inputParam.masterData,\n          SelectedRegistration: response[0].data.SampleResponse.SelectedRegistration,\n          Registration: replaceUpdatedObject([response[0].data.SampleResponse.SelectedRegistration], inputParam.masterData.Registration, 'npreregno'),\n          CertificateHistoryView: response[0].data.SampleResponse.CertificateHistoryView,\n          ReportHistory: sortData(response[0].data.SampleResponse.ReportHistory || [])\n        }; // sortData(masterData);\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            dataState: undefined,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            openModal: false,\n            loadEsign: false,\n            dataState: undefined\n          }\n        });\n        toast.warn(SampleResponse);\n      }\n\n      if (REPORTSTATUS === 200) {\n        document.getElementById(\"download_data\").setAttribute(\"href\", ReportResponse.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(ReportResponse);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            openModal: false,\n            loadEsign: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function sentCertificateAction(SendData, operation, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"samplecertification/sendCertification\", {\n      npreregno: SendData.npreregno,\n      nregtypecode: SendData.nregtypecode,\n      nregsubtypecode: SendData.nregsubtypecode,\n      userinfo: SendData.userinfo,\n      ncontrolcode: SendData.ncontrolcode\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        SelectedRegistration: response.data.SelectedRegistration,\n        Registration: replaceUpdatedObject([response.data.SelectedRegistration], masterData.Registration, 'npreregno')\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function correctionCertificateAction(CorrectionData, operation, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"samplecertification/correctionCertificate\", {\n      npreregno: CorrectionData.npreregno,\n      userinfo: CorrectionData.userinfo,\n      fromDate: CorrectionData.fromDate,\n      toDate: CorrectionData.toDate,\n      nregtypecode: CorrectionData.nregtypecode,\n      nregsubtypecode: CorrectionData.nregsubtypecode,\n      napprovalversioncode: CorrectionData.napprovalversioncode\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function xmlExportAction(inputParam, masterData, inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"samplecertification/xmlExport\", {\n      npreregno: inputParam.npreregno,\n      userinfo: inputData.userinfo,\n      ncontrolcode: inputParam.ncontrolcode\n    }).then(response => {\n      // let value = \"\";\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          dataState: undefined\n        }\n      });\n      const dataURI = \"data:\" + response[\"headers\"][\"content-type\"] + \";base64,\" + encodeBase64(response[\"data\"]);\n      saveAs(dataURI, \"XMLFile\");\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getWholeFilterStatus(masterData, inputData, operation, searchRef) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"samplecertification/getFilterWholeStatus\", {\n      FromDate: inputData.FromDate,\n      ToDate: inputData.ToDate,\n      userinfo: inputData.userinfo,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      nfilterstatus: inputData.nfilterstatus,\n      napprovalversioncode: inputData.napprovalversioncode,\n      approvalVersionValue: inputData.approvalVersionValue\n    }).then(response => {\n      const SelectedRegistration = response.data.SelectedRegistration ? response.data.SelectedRegistration : \"\";\n      const Registration = response.data.Registration ? response.data.Registration : \"\";\n      const FilterStatusValue = response.data.FilterStatusValue ? response.data.FilterStatusValue : \"\";\n      const RegistrationSubTypeValue = response.data.RegistrationSubTypeValue ? response.data.RegistrationSubTypeValue : masterData.RegistrationSubTypeValue;\n      masterData = { ...masterData,\n        ...response.data,\n        Registration,\n        SelectedRegistration,\n        FilterStatusValue,\n        RegistrationSubTypeValue,\n        operation\n      };\n\n      if (searchRef.current !== null) {\n        searchRef.current.value = \"\";\n        masterData['searchedData'] = undefined;\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const validateXMLEsignCredential = (inputParam, modalName) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        }\n\n        if (inputParam[\"screenData\"][\"inputParam\"]['methodUrl'] === 'regenerateCertificate') {\n          dispatch(onClickReportSample(inputParam[\"screenData\"][\"inputParam\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"]['operation'] === 'xml') {\n          dispatch(xmlExportAction(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"masterData\"], inputParam[\"inputData\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"]['operation'] === 'generate') {\n          dispatch(generateCertificateAction(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport function getApprovalVersionSampleCertification(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"samplecertification/getApprovalVersion\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ApprovalVersion: response.data.ApprovalVersion,\n            ApprovalVersionValue: response.data.ApprovalVersionValue,\n            ...responseData,\n            FromDate: inputParam.inputData.FromDate,\n            ToDate: inputParam.inputData.ToDate\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n;\nexport function onClickReportSample(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(inputParam.classUrl + \"/\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showConfirmAlert: false\n        }\n      });\n      document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n      document.getElementById(\"download_data\").click();\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validateEsignforSampCerGen(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        }\n\n        dispatch(generateCertificateAction(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function viewReportForSample(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"samplecertification/viewCertificateReport\", inputParam.inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...response.data,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showReport: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function getApprovalVersionSampleCertificate(inputParam) {\n//     return function (dispatch) {\n//         dispatch(initRequest(true));\n//         rsapi.post(\"approval/getApprovalVersion\", inputParam.inputData)\n//             .then(response => {\n//                 let responseData = { ...response.data }\n//                 responseData = sortData(responseData)\n//                 dispatch({\n//                     type: DEFAULT_RETURN, payload: {\n//                         masterData: {\n//                             ...inputParam.masterData,\n//                             ...responseData,\n//                             fromDate: inputParam.inputData.dfrom,\n//                             toDate: inputParam.inputData.dto,\n//                         },\n//                         loading: false,\n//                     }\n//                 })\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/actions/SampleCertificationAction.js"],"names":["rsapi","Axios","constructOptionList","replaceUpdatedObject","DEFAULT_RETURN","initRequest","toast","sortData","saveAs","encodeBase64","getSampleCertTypeChange","Map","masterData","event","labelname","dispatch","post","then","response","regtypeMap","data","RegTypeValue","undefined","get","item","type","payload","loading","catch","error","status","message","warn","getSampleCertRegSubTypeChange","regsubtypeMap","RegistrationSubType","RegSubTypeValue","getTestResultData","methodParam","transactiontestcode","primaryKeyValue","userinfo","userInfo","sampleTestResults","set","Object","values","dataState","getActiveSample","Sample","npreregno","parseInt","printHistory","TransactionSampleResults","TransactionSampleTests","emailSentHistory","operation","modalName","generateCertificateAction","inputParam","urlArray","CertificateStatus","registration","nversioncode","ncontrolcode","all","SAMPLESTATUS","REPORTSTATUS","SampleResponse","ReportResponse","SelectedRegistration","Registration","CertificateHistoryView","ReportHistory","loadEsign","openModal","document","getElementById","setAttribute","filepath","click","sentCertificateAction","SendData","nregtypecode","nregsubtypecode","correctionCertificateAction","CorrectionData","fromDate","toDate","napprovalversioncode","xmlExportAction","inputData","dataURI","getWholeFilterStatus","searchRef","FromDate","ToDate","nsampletypecode","nfilterstatus","approvalVersionValue","FilterStatusValue","RegistrationSubTypeValue","current","value","showFilter","validateXMLEsignCredential","methodUrl","toLowerCase","onClickReportSample","getApprovalVersionSampleCertification","responseData","ApprovalVersion","ApprovalVersionValue","classUrl","showConfirmAlert","validateEsignforSampCerGen","viewReportForSample","showReport"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {\r\n    constructOptionList,\r\n    replaceUpdatedObject\r\n} from '../components/CommonScript'\r\n\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\n\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    sortData\r\n} from '../components/CommonScript';\r\n\r\nimport {\r\n    saveAs,\r\n    encodeBase64\r\n} from '@progress/kendo-file-saver';\r\n\r\nexport function getSampleCertTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplecertification/getFilterSampleData\", Map)\r\n            .then(response => {\r\n                const regtypeMap = constructOptionList(response.data.RegTypeValue || [], \"nregtypecode\",\r\n                    \"sregtypename\", undefined, undefined, false);\r\n                const RegTypeValue = regtypeMap.get(\"OptionList\");\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: {\r\n                        ...event.item\r\n                    }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        RegTypeValue\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getSampleCertRegSubTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        rsapi.post(\"/samplecertification/getFilterRegData\", Map)\r\n            .then(response => {\r\n                const regsubtypeMap = constructOptionList(response.data.RegistrationSubType || [], \"nregsubtypecode\",\r\n                    \"sregsubtypename\", undefined, undefined, false);\r\n                const RegSubTypeValue = regsubtypeMap.get(\"OptionList\");\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    RegSubTypeValue,\r\n                    [labelname]: {\r\n                        ...event.item\r\n                    }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestResultData(methodParam) {\r\n    return function (dispatch) {\r\n        return rsapi.post(\"/samplecertification/getParameterSampleResults\", {\r\n            transactiontestcode: methodParam.primaryKeyValue,\r\n            userinfo: methodParam.userInfo\r\n        })\r\n            .then(response => {\r\n                let sampleTestResults = methodParam.masterData.sampleTestResults||new Map();\r\n                sampleTestResults.set(methodParam.primaryKeyValue,\r\n                    Object.values(response.data[\"ParameterSampleResults\"]));\r\n                const masterData = {\r\n                    ...methodParam.masterData,\r\n                    sampleTestResults,\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        //...masterData,\r\n                        masterData: masterData,\r\n                        dataState: methodParam.dataState,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getActiveSample(Sample, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"samplecertification/getSampleCertificationById\", {\r\n            npreregno: parseInt(Sample.npreregno),\r\n            userinfo: userInfo\r\n        })\r\n            .then(response => {\r\n                const printHistory = response.data.printHistory;\r\n                const TransactionSampleResults = response.data.TransactionSampleResults\r\n                const TransactionSampleTests = response.data.TransactionSampleTests;\r\n                const emailSentHistory = response.data.emailSentHistory;\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    printHistory,\r\n                    emailSentHistory,\r\n                    TransactionSampleResults,\r\n                    TransactionSampleTests\r\n\r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        operation: null,\r\n                        modalName: undefined,\r\n                        loading: false,\r\n                        dataState:undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function generateCertificateAction(inputParam) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const CertificateStatus = rsapi.post(\"/samplecertification/generateCertificationStatus\", {\r\n            \"registration\": inputParam.registration,\r\n            \"npreregno\": inputParam.npreregno,\r\n            \"nversioncode\": inputParam.nversioncode,\r\n            \"userinfo\": inputParam.userinfo,\r\n            \"ncontrolcode\":inputParam.ncontrolcode\r\n        });\r\n        urlArray = [CertificateStatus];\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let SAMPLESTATUS = response[0].data.SAMPLESTATUS\r\n                let REPORTSTATUS = response[0].data.REPORTSTATUS\r\n                let SampleResponse = response[0].data.SampleResponse\r\n                let ReportResponse = response[0].data.ReportResponse\r\n\r\n            \r\n\r\n                if(SAMPLESTATUS === 200){\r\n                    const masterData  = {\r\n                        ...inputParam.masterData,\r\n                        SelectedRegistration: response[0].data.SampleResponse.SelectedRegistration,\r\n                        Registration: replaceUpdatedObject([response[0].data.SampleResponse.SelectedRegistration], inputParam.masterData.Registration, 'npreregno'),\r\n                        CertificateHistoryView: response[0].data.SampleResponse.CertificateHistoryView,\r\n                        ReportHistory:sortData(response[0].data.SampleResponse.ReportHistory||[])\r\n                    };\r\n                    // sortData(masterData);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false, dataState: undefined, loadEsign: false, openModal: false } });\r\n                }else{\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openModal: false, loadEsign: false,\r\n                        dataState:undefined } })\r\n                    toast.warn(SampleResponse);\r\n                }\r\n                if(REPORTSTATUS === 200){\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", ReportResponse.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                }else{\r\n                    toast.warn(ReportResponse);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openModal: false, loadEsign: false } })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function sentCertificateAction(SendData, operation, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"samplecertification/sendCertification\", {\r\n            npreregno: SendData.npreregno,\r\n            nregtypecode: SendData.nregtypecode,\r\n            nregsubtypecode: SendData.nregsubtypecode,\r\n            userinfo: SendData.userinfo,\r\n            ncontrolcode:SendData.ncontrolcode,\r\n\r\n        })\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    SelectedRegistration: response.data.SelectedRegistration,\r\n                    Registration: replaceUpdatedObject([response.data.SelectedRegistration], masterData.Registration, 'npreregno'),\r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        operation: null,\r\n                        modalName: undefined,\r\n                        loading: false,\r\n                        dataState:undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function correctionCertificateAction(CorrectionData, operation, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"samplecertification/correctionCertificate\", {\r\n            npreregno: CorrectionData.npreregno,\r\n            userinfo: CorrectionData.userinfo,\r\n            fromDate: CorrectionData.fromDate,\r\n            toDate: CorrectionData.toDate,\r\n            nregtypecode: CorrectionData.nregtypecode,\r\n            nregsubtypecode: CorrectionData.nregsubtypecode,\r\n            napprovalversioncode:CorrectionData.napprovalversioncode\r\n\r\n        })\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data\r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        operation: null,\r\n                        modalName: undefined,\r\n                        loading: false,\r\n                        dataState:undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function xmlExportAction(inputParam, masterData,inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"samplecertification/xmlExport\", {\r\n            npreregno: inputParam.npreregno,\r\n            userinfo:  inputData.userinfo,\r\n            ncontrolcode: inputParam.ncontrolcode\r\n        })\r\n            .then(response => {\r\n                // let value = \"\";\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        dataState:undefined\r\n                    }\r\n                })\r\n                const dataURI = \"data:\" + response[\"headers\"][\"content-type\"] + \";base64,\" + encodeBase64(response[\"data\"]);\r\n                saveAs(dataURI, \"XMLFile\");\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getWholeFilterStatus(masterData, inputData, operation, searchRef) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"samplecertification/getFilterWholeStatus\", {\r\n            FromDate: inputData.FromDate,\r\n            ToDate: inputData.ToDate,\r\n            userinfo: inputData.userinfo,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            nfilterstatus: inputData.nfilterstatus,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            approvalVersionValue:inputData.approvalVersionValue\r\n        })\r\n\r\n            .then(response => {\r\n                const SelectedRegistration = response.data.SelectedRegistration ? response.data.SelectedRegistration : \"\";\r\n                const Registration = response.data.Registration ? response.data.Registration : \"\";\r\n                const FilterStatusValue = response.data.FilterStatusValue ? response.data.FilterStatusValue : \"\";\r\n                const RegistrationSubTypeValue = response.data.RegistrationSubTypeValue ? response.data.RegistrationSubTypeValue : masterData.RegistrationSubTypeValue;\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    Registration,\r\n                    SelectedRegistration,\r\n                    FilterStatusValue,\r\n                    RegistrationSubTypeValue,\r\n                    operation,\r\n                };\r\n                if (searchRef.current !== null) {\r\n                    searchRef.current.value = \"\";\r\n                    masterData['searchedData'] = undefined\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        dataState:undefined\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const validateXMLEsignCredential = (inputParam, modalName) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n                    const methodUrl = \"\"\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];                          \r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n                    }\r\n                    if(inputParam[\"screenData\"][\"inputParam\"]['methodUrl'] === 'regenerateCertificate')\r\n                    {\r\n                        dispatch(onClickReportSample(inputParam[\"screenData\"][\"inputParam\"]));\r\n                    }\r\n                    else if(inputParam[\"screenData\"][\"inputParam\"]['operation'] === 'xml'){\r\n                        dispatch(xmlExportAction(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"masterData\"], inputParam[\"inputData\"]))\r\n                    }\r\n                    else if(inputParam[\"screenData\"][\"inputParam\"]['operation'] === 'generate'){\r\n                        dispatch(generateCertificateAction(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n};\r\n\r\nexport function getApprovalVersionSampleCertification(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"samplecertification/getApprovalVersion\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ApprovalVersion:response.data.ApprovalVersion,\r\n                            ApprovalVersionValue: response.data.ApprovalVersionValue,\r\n                            ...responseData,\r\n                            FromDate: inputParam.inputData.FromDate,\r\n                            ToDate: inputParam.inputData.ToDate,\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n};\r\n\r\nexport function onClickReportSample(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(inputParam.classUrl + \"/\" + inputParam.methodUrl,inputParam.inputData)\r\n            .then(response => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, loadEsign: false, openModal: false ,showConfirmAlert:false} })\r\n                document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                document.getElementById(\"download_data\").click();\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function validateEsignforSampCerGen(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n                    const methodUrl = \"\"\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n                    }\r\n                        dispatch(generateCertificateAction(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport function viewReportForSample(inputParam){\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"samplecertification/viewCertificateReport\",inputParam.inputData)\r\n          \r\n            .then(response => {\r\n                 dispatch({ type: DEFAULT_RETURN, \r\n                    payload: {\r\n                      ...response.data,\r\n                        loading: false, \r\n                        loadEsign: false, \r\n                        openModal: false ,\r\n                        showReport:true\r\n                    } \r\n                })\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n// export function getApprovalVersionSampleCertificate(inputParam) {\r\n//     return function (dispatch) {\r\n//         dispatch(initRequest(true));\r\n//         rsapi.post(\"approval/getApprovalVersion\", inputParam.inputData)\r\n//             .then(response => {\r\n//                 let responseData = { ...response.data }\r\n//                 responseData = sortData(responseData)\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, payload: {\r\n//                         masterData: {\r\n//                             ...inputParam.masterData,\r\n//                             ...responseData,\r\n//                             fromDate: inputParam.inputData.dfrom,\r\n//                             toDate: inputParam.inputData.dto,\r\n//                         },\r\n//                         loading: false,\r\n//                     }\r\n//                 })\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n//     }\r\n// }"]},"metadata":{},"sourceType":"module"}