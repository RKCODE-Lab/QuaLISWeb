{"ast":null,"code":"import Axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { intl } from \"../components/App\";\nimport { constructOptionList, replaceUpdatedObject, sortData, getFilterConditionsBasedonDataType } from \"../components/CommonScript\";\nimport { designProperties, reportCOAType, REPORTTYPE, SampleType, transactionStatus } from \"../components/Enumeration\";\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\nimport rsapi from \"../rsapi\";\nimport { initRequest } from \"./LoginAction\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nimport { crudMaster } from \"./ServiceAction\";\nimport { getFieldSpecification as getFieldSpecification3 } from '../components/type3component/Type3FieldSpecificationList';\nimport { filterObjectForReactAwesomeFilter } from \"./RegistrationAction\";\nimport { fileViewUrl, reportUrl } from '../rsapi'; // export function getReleasedSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\n\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nconst {\n  checkTree,\n  loadTree\n} = QbUtils; //     return function (dispatch) {\n//       if (inputData !== undefined &&inputData.npreregno!==\"\") {\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"release/updateRelease\",\n//             inputData\n//         )\n//             .then(response => {\n//                 if (response.data.statusCodeValue !== 200) {\n//                     toast.warn(intl.formatMessage({\n//                         id: response.data.body\n//                     }));\n//                     dispatch({\n//                         type: DEFAULT_RETURN,\n//                         payload: {\n//                             loading: false\n//                         }\n//                     });\n//                 }\n//                 else {\n//                     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\n//                         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\n//                     }\n//                     let masterData = {\n//                         ...Data1, ...response.data.body,\n//                     };\n//                     console.log(\"ReleasedTest,\", masterData);\n//                      sortData(masterData.ReleaseHistory,\"\",'sreportno');\n//                   //  dispatch(generateReport(inputData,masterData))\n//                     dispatch({\n//                         type: DEFAULT_RETURN, payload: {\n//                             masterData,\n//                             change: inputData.change,\n//                             loading: false,\n//                             openModal:false\n//                         }\n//                     });\n//                 }\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                     console.log(\"ErrorRelease,\", error);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//         }\n//         else {\n//             toast.warn(intl.formatMessage({\n//                 id: \"IDS_SELECTANYONESAMPLE\"\n//             }));\n//         }\n//     }\n// }\n\nexport function getReleasedRegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getRegistrationType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            SampleTypeValue: inputData.SampleTypeValue,\n            realSampleTypeList: inputData.realSampleTypeList || [],\n            realReportTypeList: inputData.realReportTypeList || [],\n            realRegTypeList: inputData.realRegTypeList || [],\n            realRegSubTypeList: inputData.realRegSubTypeList || [],\n            realFilterStatusList: inputData.realFilterStatusList || [],\n            realApprovalVersionList: inputData.realApprovalVersionList || [],\n            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedRegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getRegistrationSubType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegTypeValue: inputData.RegTypeValue,\n            realSampleTypeList: inputData.realSampleTypeList || [],\n            realReportTypeList: inputData.realReportTypeList || [],\n            realRegTypeList: inputData.realRegTypeList || [],\n            realRegSubTypeList: inputData.realRegSubTypeList || [],\n            realFilterStatusList: inputData.realFilterStatusList || [],\n            realApprovalVersionList: inputData.realApprovalVersionList || [],\n            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedFilterBasedTest(inputData) {\n  return function (dispatch) {\n    if (inputData.napprovalversioncode) {\n      dispatch(initRequest(true));\n      rsapi.post(\"release/getFilterBasedTest\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...responseData,\n              RegSubTypeValue: inputData.RegSubTypeValue,\n              ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n              DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n            },\n            loading: false\n          }\n        });\n\n        if (response.data.rtn) {\n          toast.warn(response.data.rtn);\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_PLSSELECTALLVALUESINFILTER\"\n      }));\n    }\n  };\n}\nexport function getReleasedApprovalVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovalVersion\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            realSampleTypeList: inputParam.inputData.realSampleTypeList || [],\n            realReportTypeList: inputParam.inputData.realReportTypeList || [],\n            realRegTypeList: inputParam.inputData.realRegTypeList || [],\n            realRegSubTypeList: inputParam.inputData.realRegSubTypeList || [],\n            realFilterStatusList: inputParam.inputData.realFilterStatusList || [],\n            realApprovalVersionList: inputParam.inputData.realApprovalVersionList || [],\n            realDesignTemplateMappingList: inputParam.inputData.realDesignTemplateMappingList || [] // fromDate: inputParam.inputData.dfrom,\n            // toDate: inputParam.inputData.dto,\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseSample\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = {};\n      let nsectioncode = {}; // if (response.data.ReleasedSampleDetails && response.data.ReleasedSampleDetails.length !== 0 ||\n      //     response.data.ReleaseSample && response.data.ReleaseSample.length === 0) {\n\n      masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (nsectioncode !== undefined) {\n        nsectioncode = inputParam.inputData.nsectioncode;\n      } // }\n      //     else {\n      //         responseData.ReleaseHistory = []\n      //         responseData.selectedReleaseHistory= []\n      //         masterData = {\n      //             ...inputParam.masterData,\n      //             ...responseData,\n      //         }\n      //     }\n\n\n      sortData(masterData, \"\", \"ncoaparentcode\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          nsectioncode: nsectioncode,\n          FilterQueryBuilder: false,\n          screenName: inputParam.inputData.screenName,\n          awesomeTree: inputParam.inputData.isClear ? undefined : inputParam.inputData.awesomeTree,\n          filterquery: inputParam.inputData.isClear ? undefined : inputParam.inputData.filterquery\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedSample(inputParam, ncontrolCode) {\n  if (inputParam.masterData.realReportTypeValue.ncoareporttypecode === reportCOAType.PATIENTWISE) {\n    let fieldList = [];\n    fieldList = getFieldSpecification3().get(\"ExternalOrder\") || [];\n    const languageTypeCode = inputParam.inputData.userinfo.slanguagetypecode;\n    const {\n      fields,\n      gridColumns\n    } = filterObjectForReactAwesomeFilter(fieldList[0].filterfields, languageTypeCode, undefined, undefined);\n    let awesomeTree = fieldList[0].awesomeTree ? checkTree(loadTree(fieldList[0].awesomeTree), fieldList[0].awesomeConfig) : undefined;\n    return function (dispatch) {\n      let urlArray = [];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let ProjectTypeList = [];\n        let sectionList = [];\n        let masterData = {};\n        let openModal = true;\n        masterData = { ...inputParam.masterData\n        };\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            fields,\n            gridColumns,\n            awesomeTree,\n            seletedFilterComponent: fieldList[0],\n            // awesomeTree:fieldList[0].awesomeTree,\n            awesomeConfig: undefined,\n            lstPatient: [],\n            kendoSkip: 0,\n            kendoTake: 5,\n            masterData,\n            expandCheck: false,\n            ProjectTypeList,\n            ncontrolCode,\n            isDeletePopup: false,\n            isComboCheck: false,\n            isEditPopup: false,\n            screenName: \"IDS_PATIENTSEARCH\",\n            sectionList,\n            loading: false,\n            showFilter: false,\n            openModal: openModal,\n            isAddPopup: true,\n            operation: \"save\"\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  } else {\n    return function (dispatch) {\n      let ismandatory = false;\n      inputParam.DynamicReportFilterTypeItem && inputParam.DynamicReportFilterTypeItem.map(x => {\n        if (x.ismandatory) {\n          ismandatory = true;\n        }\n      });\n\n      if (ismandatory) {\n        inputParam['inputData'] = { ...inputParam.inputData,\n          ismandatory: true\n        };\n      }\n\n      const screenName = \"\";\n      let urlArray = [];\n      inputParam.inputData['isAddPopup'] = true;\n      const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n\n      const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n      const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\n      const testList = rsapi.post(\"release/getTest\", inputParam.inputData);\n      const approvedReportTemplate = rsapi.post(\"release/getApprovedReportTemplate\", inputParam.inputData); // if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE ||\n      //     inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n      //     urlArray = [projectType,sectionType];\n      // }\n      // else if (inputParam.inputData.isneedsection === transactionStatus.YES || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n      //     urlArray = [sectionType];\n      // }\n      // else {\n      //     urlArray = [releaseSample\n      //         //,reportType\n      //     ];\n      // }\n\n      urlArray = [releaseSample, projectType, sectionType, testList, approvedReportTemplate];\n\n      if (inputParam.DynamicReportFilterTypeItem && inputParam.DynamicReportFilterTypeItem.length > 0) {\n        let itemList = [];\n        inputParam.DynamicReportFilterTypeItem.map(x => {\n          if (x[designProperties.LISTITEM] === \"combo\") {\n            itemList.push({\n              \"Pkey\": x[designProperties.PRIMARYKEY],\n              \"nquerybuildertablecode\": x[designProperties.QUERYBUILDERTABLECODE],\n              \"tablename\": x[designProperties.TABLENAME],\n              \"columnname\": x[designProperties.COLUMNNAME],\n              \"keyName\": x[designProperties.VALUE],\n              \"isMultiLingual\": x[designProperties.MULTILINGUAL],\n              \"languageTypeCode\": inputParam.inputData.userinfo.slanguagetypecode,\n              \"recordType\": x[designProperties.RECORDTYPE]\n            });\n          }\n        });\n        inputParam[\"inputData\"][\"itemList\"] = itemList;\n        const reportFilterType = rsapi.post(\"release/getComboValues\", { ...inputParam.inputData,\n          'userInfo': inputParam.inputData.userinfo\n        });\n        urlArray.push(reportFilterType);\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\n        //     \"scoareporttypename\", undefined, undefined, false);\n        // const ReportTypeList = reportTypeMap.get(\"OptionList\");\n        let ProjectTypeList = [];\n        let sectionList = []; // let selectedRecord = {\"ncoareporttypecode\": {\n        //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\n        //      \"label\": response[1].data.ReportType[0].scoareporttypename\n        // }\n        // };\n\n        let masterData = {};\n        let openModal = true;\n        let sectionvalue = [];\n        let comboValues = {};\n        let reportTemplateList = [];\n        let selectedRecord = inputParam.inputData.selectedRecord; // let selectedRecord = inputParam.selectedRecord;\n        // selectedRecord[\"nmultiplesampleinsinglerelease\"] = inputParam.realReportTypeValue[\"nmultiplesampleinsinglerelease\"];\n\n        const sectionTypeMap = constructOptionList(response[2].data.sectionList || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n        sectionList = sectionTypeMap.get(\"OptionList\");\n        sectionList.map(x => sectionvalue.push({\n          \"value\": x.value,\n          \"title\": x.label\n        }));\n        let testListMap = response[3] && response[3].data;\n        const reportTemplateMap = constructOptionList(response[4].data || [], \"nreporttemplatecode\", \"sreporttemplatename\", \"nreporttemplatecode\", \"ascending\", false);\n        reportTemplateList = reportTemplateMap.get(\"OptionList\");\n        let combovaluesListMap = response[5] && response[5].data;\n        let comboValueList = { ...testListMap,\n          ...combovaluesListMap\n        } || {};\n        comboValues = {\n          \"s.nsectioncode\": sectionvalue,\n          ...comboValueList\n        }; // if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE ||\n        //     inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n        //     const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\",\n        //         \"sprojecttypename\", undefined, undefined, false);\n        //     ProjectTypeList = projectTypeMap.get(\"OptionList\");\n        //     masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\n        //     if (inputParam.inputData.selectedRecord.nprojecttypecode) {\n        //         delete inputParam.inputData.selectedRecord.nprojecttypecode\n        //     }\n        //     if (inputParam.inputData.selectedRecord.nprojectmastercode) {\n        //         delete inputParam.inputData.selectedRecord.nprojectmastercode\n        //     }\n        //     const sectionTypeMap = constructOptionList(response[1].data.sectionList || [], \"nsectioncode\",\n        //     \"ssectionname\", undefined, undefined, false);\n        // sectionList = sectionTypeMap.get(\"OptionList\");\n        // sectionList.map(x=>sectionvalue.push({\"value\":x.value,\"title\":x.label}));\n        // let comboValueList=response[2] && response[2].data ||{};\n        //  comboValues={\"s.nsectioncode\":sectionvalue,...comboValueList}\n        // }\n        // else \n        // if (inputParam.inputData.isneedsection === transactionStatus.YES || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n        //     const sectionTypeMap = constructOptionList(response[0].data.sectionList || [], \"nsectioncode\",\n        //         \"ssectionname\", undefined, undefined, false);\n        //     sectionList = sectionTypeMap.get(\"OptionList\");\n        //     sectionList.map(x=>sectionvalue.push({\"value\":x.value,\"title\":x.label}));\n        //     let comboValueList=response[1] && response[1].data ||{};\n        //      comboValues={\"s.nsectioncode\":sectionvalue,...comboValueList}\n        //     masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\n        //     if (inputParam.inputData.selectedRecord.nsectioncode) {\n        //         delete inputParam.inputData.selectedRecord.nsectioncode\n        //     }\n        // }\n        // else {\n\n        if (ismandatory) {\n          masterData = { ...inputParam.masterData,\n            ReleaseSubSample: [],\n            ReleaseTest: [],\n            ReleaseSample: []\n          };\n        } else {\n          if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\n            let responseData = { ...response[0].data\n            };\n            masterData = { ...inputParam.masterData,\n              ...responseData\n            };\n          } else {\n            let responseData = { ...response[0].data\n            };\n            masterData = { ...inputParam.masterData,\n              ...responseData\n            };\n            openModal = false;\n            toast.warn(intl.formatMessage({\n              id: \"IDS_NOSAMPLESAREAVAILABLE\"\n            }));\n          }\n        } // }\n\n\n        let awesomeTree;\n        let filterquery;\n        let filterQueryTreeStr;\n        let fields = getFilterConditionsBasedonDataType(inputParam.extractedColumnList, comboValues);\n\n        if (inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.nsampletypecode === inputParam.inputData.nsampletypecode && inputParam.DynamicDefaultStructureItem.nregtypecode === inputParam.inputData.nregtypecode && inputParam.DynamicDefaultStructureItem.nregsubtypecode === inputParam.inputData.nregsubtypecode) {\n          awesomeTree = inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.awesomeTree && checkTree(loadTree(inputParam.DynamicDefaultStructureItem.awesomeTree), inputParam.DynamicDefaultStructureItem.awesomeConfig);\n          filterquery = inputParam.DynamicDefaultStructureItem.filterquery;\n          filterQueryTreeStr = inputParam.DynamicDefaultStructureItem.filterQueryTreeStr;\n        } else {\n          awesomeTree = undefined;\n        }\n\n        sortData(masterData);\n        masterData[\"reportTemplateList\"] = reportTemplateList;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            expandCheck: false,\n            ProjectTypeList,\n            ncontrolCode,\n            isDeletePopup: false,\n            isComboCheck: false,\n            isEditPopup: false,\n            screenName: inputParam.inputData.screenName,\n            sectionList,\n            loading: false,\n            showFilter: false,\n            openModal: openModal,\n            isAddPopup: true,\n            operation: \"save\",\n            kendoSkip: 0,\n            kendoTake: 5,\n            sectionvalue,\n            comboValues,\n            awesomeTree: awesomeTree,\n            filterquery,\n            fields,\n            filterQueryTreeStr,\n            FilterQueryBuilder: false,\n            screenNameCopy: inputParam.inputData.screenName,\n            ismandatory //awesomeConfig:undefined\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  }\n}\nexport function generateReleasedReport(inputData, Data, preventtb) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = []; //   const releaseSample = rsapi.post(\"release/updateRelease\", inputData)  ;\n    //   const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData)  ;\n\n    inputData['preventTbFlow'] = preventtb === true ? preventtb : false;\n\n    if (inputData.listStatus === transactionStatus.CORRECTION) {\n      const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData);\n      urlArray = [afterCorrection];\n    } else {\n      const releaseSample = rsapi.post(\"release/updateRelease\", inputData);\n      urlArray = [releaseSample];\n    }\n\n    Axios.all(urlArray).then(response => {\n      if (response[0].data.rtn === \"MappingNeeded\") {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            modalShow: false,\n            // selectedRecord: {}, \n            loadEsign: false //openModal: false,\n            // preventTbCheck:true\n\n          }\n        });\n        inputData.confirmMessage.confirm(\"PortalMapping\", intl.formatMessage({\n          id: \"IDS_SUBSAMPLEWASNOTMAPPED\"\n        }), intl.formatMessage({\n          id: \"IDS_DOYOUWANTTOCONTINUEWITHOUTSENDRESULTTOPREVENTTB\"\n        }), intl.formatMessage({\n          id: \"IDS_OK\"\n        }), intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => dispatch(generateReleasedReport(inputData, Data, true)), false, () => dispatch(cancelPopUp(inputData, Data)));\n      } else {\n        // if (response[0].data[\"isPortalData\"] && response[0].data[\"PortalStatus\"] && response[0].data[\"PortalStatus\"].length > 0) {\n        //     dispatch(UpdateExternalOrderStatus(response[0].data[\"PortalStatus\"], inputData));\n        // }\n        if (response[0].data[\"PreventTb\"]) {\n          toast.warn(response[0].data[\"PreventTb\"]);\n        }\n\n        let masterData = { ...Data,\n          ...response[0].data\n        };\n\n        if (response[0].data && response[0].data.rtn) {\n          if (response[0].data.rtn === \"Success\") {\n            document.getElementById(\"download_data\").setAttribute(\"href\", response[0].data.filepath);\n            document.getElementById(\"download_data\").click();\n          } else {\n            toast.warn(response[0].data.rtn);\n          }\n        }\n\n        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            change: inputData.change,\n            masterData,\n            modalShow: false,\n            selectedRecord: {},\n            loadEsign: false,\n            openModal: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        //toast.warn(error.response.data['rtn']);\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function cancelPopUp(inputData, Data) {\n  return function (dispatch) {\n    dispatch({\n      type: DEFAULT_RETURN,\n      payload: {\n        loading: false,\n        modalShow: false,\n        selectedRecord: {},\n        loadEsign: false,\n        openModal: false\n      }\n    });\n  };\n}\nexport function getReleasedFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseConfigVersionRegTemplateDesign\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedDataDetails(inputParam, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      dfrom: inputParam.inputData.dfrom,\n      dto: inputParam.inputData.dto,\n      nsampletypecode: inputParam.inputData.nsampletypecode,\n      nregtypecode: inputParam.inputData.nregtypecode,\n      nregsubtypecode: inputParam.inputData.nregsubtypecode,\n      ntransactionstatus: inputParam.inputData.ntransactionstatus,\n      nsectioncode: inputParam.inputData.nsectioncode,\n      ntestcode: inputParam.inputData.ntestcode,\n      napprovalversioncode: inputParam.inputData.napprovalversioncode,\n      napprovalconfigcode: inputParam.inputData.napprovalconfigcode,\n      userinfo: inputParam.inputData.userinfo,\n      nneedsubsample: inputParam.inputData.nneedsubsample,\n      // ncoaparentcode: inputParam.ncoaparentcode,\n      ncoaparentcode: inputParam.releaseno ? inputParam.releaseno.map(item => item.ncoaparentcode).join(\",\") : \"-1\",\n      npreregno: inputParam.npreregno,\n      ncoareporttypecode: inputParam.inputData.ncoareporttypecode,\n      isneedsection: inputParam.inputData.isneedsection,\n      ndesigntemplatemappingcode: inputParam.masterData.ndesigntemplatemappingcode,\n      isAddPopup: false\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseSample\", inputParamData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedProjectByProjectType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedProjectByProjectType\", inputData).then(response => {\n      const projectMasterMap = constructOptionList(response.data.projectMasterList || [], \"nprojectmastercode\", \"sprojectcode\", undefined, undefined, false);\n      const projectMasterList = projectMasterMap.get(\"OptionList\");\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          projectMasterList,\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            ReleaseSample: []\n          },\n          // selectedRecord: {},\n          loading: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedProjectType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedProjectType\", inputData).then(response => {\n      const projectTypeMap = constructOptionList(response.data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\n      const ProjectTypeList = projectTypeMap.get(\"OptionList\"); //     const projectMasterMap = constructOptionList(response.data || [], \"nprojecttypecode\",\n      //     \"sprojecttypename\", undefined, undefined, false);\n      // const projectMasterList = projectMasterMap.get(\"OptionList\");\n\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ProjectTypeList,\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            ProjectTypeValue: inputData.ProjectTypeValue\n          },\n          loading: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSectionForSectionWise(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getSection\", inputData.inputData).then(response => {\n      const sectionMap = constructOptionList(response.data.sectionList || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n      const sectionList = sectionMap.get(\"OptionList\");\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          sectionList,\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            ReleaseSample: []\n          },\n          loading: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportForPortal(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/SendToPortalReport\", inputData).then(response => {\n      if (response.data[\"rtn\"]) {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n\nfunction UpdateExternalOrderStatus(portallist, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(String(inputParam[\"url\"]) + \"/portal/UpdateMultiSampleStatus\", JSON.stringify(portallist), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response !== undefined && error.response.status === 500) {\n        toast.error(error.message);\n      } else if (error.response === undefined) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n\nexport function getApprovedRecordsAsDraft(inputData, Data1, seletedRecord) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/saveRelease\", inputData).then(response => {\n        if (response.data.rtn === \"Success\") {\n          let masterData = { ...Data1,\n            ...response.data,\n            searchedData: undefined\n          };\n          delete seletedRecord.nreporttemplatecode;\n          seletedRecord[\"nisarnowiserelease\"] = transactionStatus.NO;\n          sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false\n            }\n          });\n        } else {\n          toast.warn(response.data.rtn);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              //  masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function preliminaryReport(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true)); // const inputData = {\n    //     npreregno: inputParam.npreregno,\n    //  //   nsectioncode: inputParam.nsectioncode || -1,\n    //     userinfo: inputParam.userinfo,\n    //     nprimarykey: inputParam.npreregno,\n    //     nreporttypecode: REPORTTYPE.COAREPORT,\n    //     sprimarykeyname: \"npreregno\",\n    //     ncontrolcode: inputParam.ncontrolCode,\n    //     nregtypecode: inputParam.nregtypecode,\n    //     nregsubtypecode: inputParam.nregsubtypecode,\n    //     ntransactiontestcode:inputParam.ntransactiontestcode,\n    //     napproveconfversioncode: inputParam.napprovalversioncode,\n    //     ncoaparentcode: inputParam.ncoaparentcode,\n    //     ntransactionstatus:inputParam.ntransactionstatus\n    // }\n\n    rsapi.post(\"release/generateReleasedReport\", inputParam.inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n      sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false,\n          openModal: inputParam.inputData.openModal\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data['rtn']);\n      }\n    });\n  };\n}\nexport function previewAndFinalReport(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true)); // const inputData = {\n    //     npreregno: inputParam.npreregno,\n    //  //   nsectioncode: inputParam.nsectioncode || -1,\n    //     userinfo: inputParam.userinfo,\n    //     nprimarykey: inputParam.npreregno,\n    //     nreporttypecode: REPORTTYPE.COAREPORT,\n    //     sprimarykeyname: \"npreregno\",\n    //     ncontrolcode: inputParam.ncontrolCode,\n    //     nregtypecode: inputParam.nregtypecode,\n    //     nregsubtypecode: inputParam.nregsubtypecode,\n    //     ntransactiontestcode:inputParam.ntransactiontestcode,\n    //     napproveconfversioncode: inputParam.napprovalversioncode,\n    //     ncoaparentcode: inputParam.ncoaparentcode,\n    //     ntransactionstatus:inputParam.ntransactionstatus\n    // }\n\n    rsapi.post(\"release/generateReleasedReport\", inputParam.inputData).then(response => {\n      if (response.data.sexporttype === \"viewer\") {\n        if (response.data.sourceparameter != undefined && response.data.sourceparameter != \"\") {\n          let mrtfilePath = reportUrl() + \"?name=\" + inputParam.userinfo.sreportingtoolfilename //en-xml\n          + \"&slanguagetypecode=\" + inputParam.userinfo.sreportlanguagecode //en-us\n          + \"&foldername=\" + response.data.sreportname //\"Quotation-002\"//this.props.Login.masterData.SelectedReportDetails.sreportname\n          + \"&filename=\" + response.data.ssystemfilename //\"a6008692-3e1a-422b-b4da-5e9ad9cf3be6.mrt\"//\"b701dbc4-d90e-4840-b8e1-942649d6ec25.mrt\"//this.props.Login.masterData.SelectedReportDetails.ssystemfilename\n          + \"&sconnectionstring=\" + inputParam.userinfo.sconnectionString + \"&sreportlink=\" + inputParam.Login.reportSettings[15] //inputParam.sreportlink //\"//localhost:8090/SharedFolder/QuaLISjrxml\"//this.props.Login.reportSettings[15] //this.props.Login.userInfo.sreportLink  \n          + \"&smrttemplatelink=\" + inputParam.Login.reportSettings[16] //inputParam.smrttemplatelink //\"//localhost:8090//SharedFolder//ReportJSON//ReportTemplate.json\"//this.props.Login.reportSettings[16]//this.props.Login.userInfo.smrttemplateLink\n          + \"&sourceparameter=\" + encodeURIComponent(response.data.sourceparameter);\n          window.open(mrtfilePath);\n        }\n      }\n\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false,\n          openModal: inputParam.inputData.openModal\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data['rtn']);\n      }\n    });\n  };\n}\nexport function getRemoveApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    if (inputParam.masterData && inputParam.masterData.selectedReleaseHistory && inputParam.masterData.selectedReleaseHistory.length > 1) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_MULTISELECTAPPLICABLEONLYFORRELEASEACTION\"\n      }));\n    } else {\n      let urlArray = [];\n      inputParam.inputData['isPopup'] = true;\n\n      if (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES) {\n        // if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES && \n        // (inputParam.inputData['nneedsubsample'] === false || \n        // (inputParam.inputData['nneedsubsample'] === true && inputParam.inputData['ncoaparenttranscode'] === transactionStatus.DRAFT))){\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n        // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n        const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\n        urlArray = [releaseSample, statusService //,reportType\n        ];\n        dispatch(initRequest(true));\n        Axios.all(urlArray).then(response => {\n          if (response[1].data.Status === \"Success\") {\n            let masterData = {};\n            let selectedRecord = inputParam.inputData.selectedRecord;\n            let responseData = { ...response[0].data\n            };\n            masterData = { ...inputParam.masterData,\n              ...responseData\n            }; // responseData = sortData(responseData)\n\n            sortData(masterData);\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                masterData,\n                // selectedRecord,\n                isDeletePopup: true,\n                isComboCheck: true,\n                isEditPopup: false,\n                ncontrolCode,\n                loading: false,\n                showFilter: false,\n                openModal: true,\n                isAddPopup: false,\n                operation: \"delete\",\n                ncontrolCode: inputParam.inputData.ncontrolCode,\n                expandCheck: false,\n                screenName: inputParam.inputData.screenName\n              }\n            });\n          } else {\n            toast.warn(intl.formatMessage({\n              id: response[1].data.ValidationStatus\n            }));\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                ncontrolCode: ncontrolCode,\n                loading: false\n              }\n            });\n          }\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        }); // } else if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.NO || \n        //     (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES && inputParam.inputData['ncoaparenttranscode'] !== transactionStatus.DRAFT)){\n        //         toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\"\n        })); // toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" })+ \" \"+ intl.formatMessage({ id: \"IDS_FOR\" })+ \" \"+ inputParam.inputData['sregsubtypename']);\n      }\n    }\n  };\n}\nexport function getDeleteApprovedSample(inputData, Data1) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/deleteRelease\", inputData).then(response => {\n        if (response.data.rtn === \"Success\") {\n          let masterData = { ...Data1,\n            ...response.data\n          };\n          sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false\n            }\n          });\n        } else {\n          toast.warn(response.data.rtn);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              //    masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function getEditApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    if (inputParam.masterData && inputParam.masterData.selectedReleaseHistory && inputParam.masterData.selectedReleaseHistory.length > 1) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_MULTISELECTAPPLICABLEONLYFORRELEASEACTION\"\n      }));\n    } else {\n      let urlArray = [];\n      inputParam.inputData['isPopup'] = true;\n\n      if (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES) {\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n        //  const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n        const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\n        const testList = rsapi.post(\"release/getTest\", inputParam.inputData);\n        const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData); // if (inputParam.inputData.ncoareporttypecode === 7) {\n        //     urlArray = [ projectType,statusService];\n        // }\n        // else if (inputParam.inputData.ncoareporttypecode === 8) {\n        //     urlArray = [ releaseSample,statusService];\n        // }\n        // else {\n\n        urlArray = [releaseSample, statusService, testList, sectionType //,reportType\n        ];\n\n        if (inputParam.DynamicReportFilterTypeItem && inputParam.DynamicReportFilterTypeItem.length > 0) {\n          let itemList = [];\n          inputParam.DynamicReportFilterTypeItem.map(x => {\n            if (x[designProperties.LISTITEM] === \"combo\") {\n              itemList.push({\n                \"Pkey\": x[designProperties.PRIMARYKEY],\n                \"nquerybuildertablecode\": x[designProperties.QUERYBUILDERTABLECODE],\n                \"tablename\": x[designProperties.TABLENAME],\n                \"columnname\": x[designProperties.COLUMNNAME],\n                \"keyName\": x[designProperties.VALUE],\n                \"isMultiLingual\": x[designProperties.MULTILINGUAL],\n                \"languageTypeCode\": inputParam.inputData.userinfo.slanguagetypecode,\n                \"recordType\": x[designProperties.RECORDTYPE]\n              });\n            }\n          });\n          inputParam[\"inputData\"][\"itemList\"] = itemList;\n          const reportFilterType = rsapi.post(\"release/getComboValues\", { ...inputParam.inputData,\n            'userInfo': inputParam.inputData.userinfo\n          });\n          urlArray.push(reportFilterType);\n        } // }\n\n\n        dispatch(initRequest(true));\n        Axios.all(urlArray).then(response => {\n          // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\n          //     \"scoareporttypename\", undefined, undefined, false);\n          // const ReportTypeList = reportTypeMap.get(\"OptionList\");\n          if (response[1].data.Status === \"Success\") {\n            let ProjectTypeList = [];\n            let sectionList = [];\n            let comboValues = {};\n            let sectionvalue = [];\n            const sectionTypeMap = constructOptionList(response[3].data.sectionList || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n            sectionList = sectionTypeMap.get(\"OptionList\");\n            sectionList.map(x => sectionvalue.push({\n              \"value\": x.value,\n              \"title\": x.label\n            }));\n            let testListMap = response[2] && response[2].data;\n            let combovaluesListMap = response[4] && response[4].data;\n            let comboValueList = { ...testListMap,\n              ...combovaluesListMap\n            } || {};\n            comboValues = {\n              \"s.nsectioncode\": sectionvalue,\n              ...comboValueList\n            }; // let selectedRecord = {\"ncoareporttypecode\": {\n            //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\n            //      \"label\": response[1].data.ReportType[0].scoareporttypename\n            // }\n            // };\n\n            let masterData = {};\n            let openModal = true;\n            let selectedRecord = inputParam.inputData.selectedRecord;\n\n            if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\n              let responseData = { ...response[0].data\n              };\n              masterData = { ...inputParam.masterData,\n                ...responseData\n              };\n            } else {\n              let responseData = { ...response[0].data\n              };\n              masterData = { ...inputParam.masterData,\n                ...responseData\n              };\n              openModal = false;\n              toast.warn(intl.formatMessage({\n                id: \"IDS_NOSAMPLESAREAVAILABLE\"\n              }));\n            } // responseData = sortData(responseData)\n\n\n            let awesomeTree;\n            let filterquery;\n            let fields = getFilterConditionsBasedonDataType(inputParam.extractedColumnList, comboValues);\n\n            if (inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.nsampletypecode === inputParam.inputData.nsampletypecode && inputParam.DynamicDefaultStructureItem.nregtypecode === inputParam.inputData.nregtypecode && inputParam.DynamicDefaultStructureItem.nregsubtypecode === inputParam.inputData.nregsubtypecode) {\n              awesomeTree = inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.awesomeTree && checkTree(loadTree(inputParam.DynamicDefaultStructureItem.awesomeTree), inputParam.DynamicDefaultStructureItem.awesomeConfig);\n              filterquery = inputParam.DynamicDefaultStructureItem.filterquery;\n            } else {\n              awesomeTree = undefined;\n            }\n\n            sortData(masterData);\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                masterData,\n                // selectedRecord,\n                sectionList,\n                ncontrolCode: inputParam.inputData.ncontrolCode,\n                isDeletePopup: false,\n                isComboCheck: true,\n                isEditPopup: true,\n                ProjectTypeList,\n                loading: false,\n                showFilter: false,\n                openModal: openModal,\n                isAddPopup: false,\n                operation: \"append\",\n                expandCheck: false,\n                screenName: inputParam.inputData.screenName,\n                sectionvalue,\n                comboValues,\n                awesomeTree: awesomeTree,\n                filterquery,\n                fields,\n                screenNameCopy: inputParam.inputData.screenName\n              }\n            });\n          } else {\n            toast.warn(intl.formatMessage({\n              id: response[1].data.ValidationStatus\n            }));\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                ncontrolCode: ncontrolCode,\n                loading: false\n              }\n            });\n          }\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        }); // }  else if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.NO || \n        // (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES && inputParam.inputData['ncoaparenttranscode'] !== transactionStatus.DRAFT)){\n        //     toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\"\n        })); // toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" })+ \" \"+ intl.formatMessage({ id: \"IDS_FOR\" })+ \" \"+ inputParam.inputData['sregsubtypename']);\n      }\n    }\n  };\n}\nexport function UpdateApprovedSample(inputData, Data1) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/appendRelease\", inputData).then(response => {\n        if (response.data.rtn === \"Success\") {\n          let masterData = { ...Data1,\n            ...response.data\n          };\n          sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false\n            }\n          });\n        } else {\n          toast.warn(response.data.rtn);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              //  masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); // console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function getreportcomments(inputData, Data) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getreportcomments\", inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputData.change,\n          masterData,\n          screenName: \"IDS_REPORTINFOCOMMENT\",\n          openModal: true,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchReportInfoReleaseById(editParam) {\n  return function (dispatch) {\n    let additionalInfo = [];\n    let inputParamData = {\n      nreportinforeleasecode: editParam.editRow.nreportinforeleasecode,\n      userinfo: editParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getActiveReportInfoReleaseById\", inputParamData).then(response => {\n      // const parameterResults = response.data.ReleaseParameter\n      let selectedId = editParam.editRow.nreportinforeleasecode;\n      const selectedComment = { ...response.data\n      };\n      const masterData = { ...editParam.masterData,\n        selectedComment\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          screenName: \"IDS_REPORTINFOCOMMENTS\",\n          selectedId,\n          masterData,\n          //isParameterInitialRender: true,\n          loading: false,\n          openModal: true,\n          // modalShow: true,\n          ReportmodalShow: true,\n          operation: \"update\",\n          modalTitle: intl.formatMessage({\n            id: \"IDS_COMMENTS\"\n          })\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); //}\n  };\n}\nexport function UpdateReportComments(userInfo, Data1, inputData) {\n  let inputParamData = {\n    selectedComment: Data1.selectedComment,\n    userinfo: userInfo\n  };\n  return function (dispatch) {\n    //if (inputData !== undefined &&inputData.npreregno!==\"\") {\n    dispatch(initRequest(true));\n    return rsapi.post(\"release/updateReportComment\", inputParamData).then(response => {\n      let masterData = { ...Data1,\n        ...response.data,\n        selectedComment: {}\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          screenName: \"IDS_REPORTINFOCOMMENT\",\n          loading: false,\n          openModal: true,\n          expandCheck: false,\n          modalShow: false,\n          ReportmodalShow: false,\n          isComboCheck: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message); // console.log(\"ErrorRelease,\", error);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); // }\n    // else {\n    //     toast.warn(intl.formatMessage({\n    //         id: \"IDS_SELECTANYONESAMPLE\"\n    //     }));\n    //}\n  };\n}\nexport function getResultCorrectionData(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    if (inputParam.masterData && inputParam.masterData.selectedReleaseHistory && inputParam.masterData.selectedReleaseHistory.length > 1) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_MULTISELECTAPPLICABLEONLYFORRELEASEACTION\"\n      }));\n    } else {\n      let urlArray = [];\n      inputParam.inputData['isPopup'] = true;\n      const resultCorrection = rsapi.post(\"release/getResultCorrection\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n      // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n      const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\n      urlArray = [resultCorrection, statusService //,reportType\n      ];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        if (response[1].data.Status === \"Success\") {\n          let masterData = {};\n          let selectedRecord = inputParam.inputData.selectedRecord;\n          let responseData = { ...response[0].data\n          };\n          masterData = { ...inputParam.masterData,\n            ...responseData\n          };\n          sortData(masterData);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              // selectedRecord,\n              isDeletePopup: true,\n              isComboCheck: true,\n              isEditPopup: false,\n              loadEsign: false,\n              ncontrolCode,\n              loading: false,\n              showFilter: false,\n              openModal: true,\n              isCorrectionNeed: true,\n              isAddPopup: false,\n              operation: \"delete\",\n              ncontrolCode: inputParam.inputData.ncontrolCode,\n              expandCheck: false,\n              hideSave: true,\n              screenName: inputParam.inputData.screenName\n            }\n          });\n        } else {\n          toast.warn(intl.formatMessage({\n            id: response[1].data.ValidationStatus\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              ncontrolCode: ncontrolCode,\n              loading: false,\n              expandCheck: false,\n              loadEsign: false,\n              openModal: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n}\nexport function fetchParameterById(editParam) {\n  return function (dispatch) {\n    let additionalInfo = [];\n    let inputParamData = {\n      ntransactionresultcode: editParam.primaryKeyValue,\n      userinfo: editParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseResults\", inputParamData).then(response => {\n      let selectedResultGrade = [];\n      let paremterResultcode = [];\n      const parameterResults = response.data.ReleaseParameter;\n      let predefDefaultFlag = false;\n      parameterResults.map((param, index) => {\n        selectedResultGrade[index] = {\n          ngradecode: param.ngradecode\n        };\n        paremterResultcode[index] = param.ntransactionresultcode;\n        let jsondata = JSON.parse(param.jsondata['value']);\n\n        if (jsondata.hasOwnProperty('additionalInfo')) {\n          additionalInfo[param.ntransactionresultcode] = jsondata['additionalInfo'];\n        }\n\n        predefDefaultFlag = false;\n        response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\n          // if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\n          //     if (!predefDefaultFlag) {\n          //         predefDefaultFlag = true;\n          //         response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\n          //             undefined, undefined).get(\"OptionList\");\n          //     }\n          // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\n          //     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n          //         undefined, undefined).get(\"OptionList\");\n          //     if (response.data.ResultParameter[index].sresult === null) {\n          //         response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\n          //         response.data.ResultParameter[index].sresultpredefinedname = predefinedvalue.sresultpredefinedname;\n          //         response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedsynonym;\n          //         response.data.ResultParameter[index].editable = true;\n          //         response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\n          //         if(predefinedvalue.spredefinedcomments&&predefinedvalue.spredefinedcomments!==null){\n          //             response.data.ResultParameter[index].sresultcomment = predefinedvalue.spredefinedcomments\n          //             &&predefinedvalue.spredefinedcomments;\n          //         }\n          //     }\n          // }\n          //  else {\n          if (!predefDefaultFlag) {\n            predefDefaultFlag = true;\n            response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined, undefined, undefined).get(\"OptionList\");\n          } //   }\n          //return null;\n\n        });\n\n        if (parameterResults[index][\"nparametertypecode\"] == 1) {\n          parameterResults[index][\"nresultaccuracycode\"] = {\n            \"value\": parameterResults[index][\"nresultaccuracycode\"],\n            \"label\": parameterResults[index][\"sresultaccuracyname\"]\n          };\n          parameterResults[index][\"nunitcode\"] = {\n            \"value\": parameterResults[index][\"nunitcode\"],\n            \"label\": parameterResults[index][\"sunitname\"]\n          };\n        }\n\n        param['editable'] = false; //return null;\n        // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n        // undefined, undefined).get(\"OptionList\");\n      });\n      const ResultAccuracyList = constructOptionList(response.data[\"ResultAccuracy\"] || [], \"nresultaccuracycode\", \"sresultaccuracyname\", undefined, undefined, false);\n      const ResultAccuracy = ResultAccuracyList.get(\"OptionList\");\n      const UnitList = constructOptionList(response.data[\"Unit\"] || [], \"nunitcode\", \"sunitname\", undefined, undefined, false);\n      const Unit = UnitList.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...editParam.masterData,\n            //...sortData(response.data,\"desc\",\"ntransactiontestcode\"),\n            ...response.data,\n            paremterResultcode,\n            //,\n            selectedResultGrade,\n            ResultAccuracy,\n            Unit\n          },\n          selectedRecord: {\n            additionalInfo: additionalInfo.length > 0 ? additionalInfo : [],\n            selectedResultGrade: selectedResultGrade,\n            ReleaseParameter: response.data.ReleaseParameter\n          },\n          parameterResults: response.data.ReleaseParameter,\n          isParameterInitialRender: true,\n          loading: false,\n          // screenName: \"IDS_RESULTENTRY\",\n          openModal: true,\n          modalShow: true,\n          operation: \"update\",\n          modalTitle: intl.formatMessage({\n            id: \"IDS_CHANGERESULT\"\n          }),\n          selectedId: editParam.primaryKeyValue,\n          //activeTestKey: \"IDS_RESULTS\",\n          ncontrolcode: editParam.editResultId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); //}\n  };\n}\nexport function updateCorrectionStatus(inputData, Data, screenname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"release/updateCorrectionStatus\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        let masterData = { ...Data,\n          ...response.data\n        };\n        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            change: inputData.change,\n            openModal: false,\n            loading: false,\n            loadEsign: false,\n            screenName: screenname\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            // masterData,\n            //  change: inputData.change,\n            openModal: false,\n            loading: false,\n            loadEsign: false //  screenName:screenname\n\n          }\n        });\n        toast.warn(intl.formatMessage({\n          id: response.data\n        }));\n      } // }\n\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validateEsignforRelease(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"release\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        } //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\n\n\n        dispatch(dispatchMethods(inputParam[\"screenData\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\n\nfunction dispatchMethods(screenData) {\n  return dispatch => {\n    let doAction = screenData.inputParam.inputData.doAction;\n\n    switch (doAction) {\n      case \"appendsample\":\n        dispatch(UpdateApprovedSample(screenData.inputParam.inputData, screenData.masterData));\n        break;\n\n      case \"removesample\":\n        dispatch(getDeleteApprovedSample(screenData.inputParam.inputData, screenData.masterData, 'openModal'));\n        break;\n\n      case \"generate\":\n        dispatch(generateReleasedReport(screenData.inputParam.inputData, screenData.masterData));\n        break;\n\n      case \"download\":\n        dispatch(previewAndFinalReport(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"correction\":\n        dispatch(updateCorrectionStatus(screenData.inputParam.inputData, screenData.masterData, screenData.inputParam.inputData.screenName));\n        break;\n\n      case \"saveasdraft\":\n        dispatch(getApprovedRecordsAsDraft(screenData.inputParam.inputData, screenData.masterData, screenData.seletedRecord));\n        break;\n\n      case \"editresult\":\n        dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"modalShow\"));\n        break;\n\n      case \"preliminary\":\n        dispatch(preliminaryReport(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"editReleaseTestAttachment\":\n        dispatch(onSaveReleaseTestAttachment(screenData.inputParam));\n        break;\n\n      case \"deleteReleaseTestAttachment\":\n        dispatch(onDeleteReleaseTestAttachment(screenData.inputParam));\n        break;\n\n      case \"editReleaseTestComment\":\n        dispatch(onSaveReleaseTestComment(screenData.inputParam));\n        break;\n\n      case \"deleteReleaseTestComment\":\n        dispatch(onDeleteReleaseTestComment(screenData.inputParam));\n        break;\n\n      case \"editReportTemplate\":\n        dispatch(SaveReportTemplate(screenData.inputParam));\n\n      default:\n        break;\n    }\n  };\n}\n\nexport function viewReportHistory(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/viewReportHistory\", inputParam.inputData).then(response => {\n      let masterData = inputParam.masterData;\n      let PatientReports = response.data.PatientReports;\n      masterData = { ...masterData,\n        PatientReports\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          isPatientReports: true,\n          openModal: true,\n          hideSave: true,\n          isAddPopup: false,\n          isEditPopup: false,\n          isDeletePopup: false,\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function viewReleaseTestAttachment(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let methodUrl = \"\";\n\n    if (inputParam.inputData.actionName === \"IDS_RELEASETESTATTACHMENT\") {\n      methodUrl = \"getReleaseTestAttachment\";\n    } else {\n      methodUrl = \"getReleaseTestComment\";\n    }\n\n    rsapi.post(\"release/\" + methodUrl, inputParam.inputData).then(response => {\n      let masterData = inputParam.masterData;\n      const ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\n      const ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\n      const isReleaseTestAttachment = inputParam.inputData.actionName === \"IDS_RELEASETESTATTACHMENT\";\n      const isReleaseTestComment = inputParam.inputData.actionName === \"IDS_RELEASETESTCOMMENT\";\n      const lstRegistrationArno = constructOptionList(response.data.RegistrationArno || [], \"npreregno\", \"sarno\", false, false, true);\n      const RegistrationArno = lstRegistrationArno.get(\"OptionList\");\n      const lstRegistrationSampleArno = constructOptionList(response.data.RegistrationSampleArno || [], \"ntransactionsamplecode\", \"ssamplearno\", false, false, true);\n      const RegistrationSampleArno = lstRegistrationSampleArno.get(\"OptionList\");\n      const lstRegistrationTest = constructOptionList(response.data.RegistrationTest || [], \"ntransactiontestcode\", \"stestsynonym\", false, false, true);\n      const RegistrationTest = lstRegistrationTest.get(\"OptionList\");\n      const lstCommentSubType = constructOptionList(response.data.CommentSubType || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, true);\n      const CommentSubType = lstCommentSubType.get(\"OptionList\");\n      masterData = { ...masterData,\n        ReleaseTestAttachmentDetails,\n        ReleaseTestCommentDetails,\n        RegistrationArno,\n        RegistrationSampleArno,\n        RegistrationTest,\n        CommentSubType\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          isReleaseTestAttachment,\n          isReleaseTestComment,\n          openModal: true,\n          isAddPopup: false,\n          isEditPopup: false,\n          isDeletePopup: false,\n          masterData,\n          loading: false,\n          isAddReleaseTestAttachment: false,\n          isInitialRender: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n} // export function writeJSONTemplate(inputParam){ \n//     return function (dispatch) {    \n//         return rsapi.post(\"release/writeJSONTemplate\",\n//         { [inputParam.primaryKeyName] :inputParam.selectedReleaseHistory.ncoaparentcode , \n//             \"userinfo\": inputParam.userInfo}\n//     )\n//         .then(response => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN, payload: {\n//                         loading: false,\n//                         openModal: false,\n//                         expandCheck: false,\n//                     }\n//                 });\n//         })\n//         .catch(error => {\n//             dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//             if (error.response.status === 500) {\n//                 toast.error(error.message);\n//             }\n//             else {\n//                 toast.warn(error.response.data);\n//             }\n//         })\n// }\n// }\n\nexport function releaseReportHistory(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"release/getPreliminaryReportHistory\", inputParam).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...response.data\n          },\n          //hange: inputData.change,\n          openModal: true,\n          loading: false,\n          loadEsign: false,\n          screenName: inputParam.screenName\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function versionHistory(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"release/getVersionHistory\", inputParam).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...response.data\n          },\n          //hange: inputData.change,\n          openModal: true,\n          loading: false,\n          loadEsign: false,\n          openModalTitle: \"IDS_VERSIONHISTORY\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function downloadVersionReport(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/downloadVersionHistory\", inputParam.inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false,\n          openModal: inputParam.inputData.openModal\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function downloadHistory(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/downloadHistory\", inputParam.inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data['rtn']);\n      }\n    });\n  };\n}\nexport function getPatientFilterExecuteData(inputParam) {\n  return function (dispatch) {\n    let obj = { ...inputParam.component,\n      filterquery: inputParam.filterquery,\n      userinfo: inputParam.userinfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"/dynamicpreregdesign/getdynamicfilterexecutedata\", obj).then(response => {\n      const source = inputParam.component.source;\n      const languageTypeCode = inputParam.userinfo.slanguagetypecode;\n      const lstData = response.data[inputParam.component.label];\n      const multilingual = [];\n      inputParam.component.filterfields.map(item => {\n        if (item.ismultilingual) {\n          multilingual.push(item.columnname);\n        }\n      });\n      const optionList = lstData.map(item => {\n        const jsondata = item[source] ? item[source].value ? JSON.parse(item[source].value) : item.jsondata : item.jsondata;\n        multilingual.map(mul => {\n          jsondata[mul] = jsondata[mul][languageTypeCode] || jsondata[mul]['en-US'];\n        }); // let label = isMultiLingual ?\n        //   jsondata[optionValue]\n        //   [languageTypeCode] || jsondata[optionValue]['en-US']\n        //   : jsondata[optionValue];\n\n        return jsondata;\n      });\n\n      if (inputParam.userinfo.nformcode === 161) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            lstPatient: optionList,\n            onExecute: false,\n            loading: false,\n            screenName: \"IDS_PATIENTSEARCH\"\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            lstPatient: optionList,\n            // onExecute: false,\n            loading: false,\n            screenName: \"IDS_PATIENTSEARCH\"\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function getPatientWiseSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getPatientWiseSample\", inputParam).then(response => {\n      let openModal = true;\n      let screenName = \"IDS_ADDSAMPLE\";\n      let responseData = { ...response.data\n      };\n      let masterData = {};\n      let lstPatient = [];\n      masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (responseData && responseData.ReleaseSample.length !== 0) {\n        let responseData = { ...response.data\n        };\n        masterData = { ...inputParam.masterData,\n          ...responseData\n        };\n      } else {\n        let responseData = { ...response.data\n        };\n        masterData = { ...inputParam.masterData,\n          ...responseData\n        };\n        lstPatient = inputParam.Login.lstPatient; //openModal = false;\n\n        screenName = \"IDS_PATIENTSEARCH\";\n        toast.warn(intl.formatMessage({\n          id: \"IDS_NOSAMPLESAREAVAILABLE\"\n        }));\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // awesomeTree:fieldList[0].awesomeTree,\n          awesomeConfig: undefined,\n          lstPatient: lstPatient,\n          //lstPatient:[],\n          kendoSkip: 0,\n          kendoTake: 5,\n          masterData,\n          expandCheck: false,\n          isDeletePopup: false,\n          isComboCheck: false,\n          isEditPopup: false,\n          screenName: screenName,\n          //\"IDS_ADDSAMPLE\",\n          loading: false,\n          showFilter: false,\n          openModal: openModal,\n          isAddPopup: true,\n          operation: \"save\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onSaveReleaseTestAttachment(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.inputData.classUrl + \"/\" + inputParam.inputData.operation + inputParam.inputData.methodUrl, inputParam.inputData.formData).then(response => {\n      let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\n      let masterData = { ...inputParam.inputData.masterData,\n        ReleaseTestAttachmentDetails\n      };\n      let selectedRecord = {};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          isAddReleaseTestAttachment: false,\n          isReleaseTestAttachment: true,\n          loading: false,\n          screenName: inputParam.inputData.screenName,\n          masterData,\n          isInitialRender: false,\n          loadEsign: false,\n          loadEsignStateHandle: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response && error.response.status === 500) {\n        toast.error(error.message);\n      } else if (error.response === undefined) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onDeleteReleaseTestAttachment(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.inputData.url, {\n      \"releasetestattachment\": inputParam.inputData.releasetestattachment,\n      \"userinfo\": inputParam.inputData.userinfo\n    }).then(response => {\n      let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\n      let selectedRecord = { ...inputParam.inputData.selectedRecord,\n        ...response.data\n      };\n      let masterData = inputParam.inputData.masterData;\n      masterData[\"ReleaseTestAttachmentDetails\"] = ReleaseTestAttachmentDetails;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          isReleaseTestAttachment: true,\n          loading: false,\n          screenName: inputParam.inputData.screenName,\n          masterData,\n          loadEsignStateHandle: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response && error.response.status === 500) {\n        toast.error(error.message);\n      } else if (error.response === undefined) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onSaveReleaseTestComment(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.inputData.classUrl + \"/\" + inputParam.inputData.operation + inputParam.inputData.methodUrl, inputParam.inputData.formData).then(response => {\n      let ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\n      let masterData = { ...inputParam.inputData.masterData,\n        ReleaseTestCommentDetails\n      };\n      let selectedRecord = {};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          isAddReleaseTestComment: false,\n          isReleaseTestComment: true,\n          loading: false,\n          screenName: inputParam.inputData.screenName,\n          masterData,\n          isInitialRender: false,\n          loadEsignStateHandle: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response && error.response.status === 500) {\n        toast.error(error.message);\n      } else if (error.response === undefined) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onDeleteReleaseTestComment(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.inputData.url, {\n      \"releasetestcomment\": inputParam.inputData.releasetestcomment,\n      \"userinfo\": inputParam.inputData.userinfo\n    }).then(response => {\n      let ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\n      let selectedRecord = { ...inputParam.inputData.selectedRecord,\n        ...response.data\n      };\n      let masterData = inputParam.inputData.masterData;\n      masterData[\"ReleaseTestCommentDetails\"] = ReleaseTestCommentDetails;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          isReleaseTestComment: true,\n          loading: false,\n          screenName: inputParam.inputData.screenName,\n          masterData,\n          loadEsignStateHandle: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response && error.response.status === 500) {\n        toast.error(error.message);\n      } else if (error.response === undefined) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function generatereport(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/generateReport\", inputParam.inputData).then(response => {\n      // let masterData = {\n      //     ...Data,\n      //     ...response.data,\n      // }\n      // if (response.data.rtn === \"Success\") {\n      //     document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\n      //     document.getElementById(\"download_data\").click();\n      // } else {\n      //     toast.warn(response.data.rtn);\n      // }\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data['rtn']);\n      }\n    });\n  };\n}\nexport function editReportTemplate(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedReportTemplateById\", inputParam.inputData).then(response => {\n      let responseData = response.data;\n      let selectedRecord = inputParam.selectedRecord;\n      selectedRecord[\"nreporttemplatecode\"] = responseData.nreporttemplatecode;\n      const reportTemplateMap = constructOptionList(responseData.reportTemplateList || [], \"nreporttemplatecode\", \"sreporttemplatename\", \"nreporttemplatecode\", \"ascending\", false);\n      const reportTemplateList = reportTemplateMap.get(\"OptionList\");\n      let masterData = inputParam.masterData;\n      masterData[\"reportTemplateList\"] = reportTemplateList;\n      masterData[\"selectedReleaseHistory\"] = masterData.selectedReleaseHistory && masterData.selectedReleaseHistory.length > 0 && masterData.selectedReleaseHistory.filter(item => item.ncoaparentcode === inputParam.ncoaparentcode);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData,\n          screenName: intl.formatMessage({\n            id: \"IDS_REPORTTEMPLATE\"\n          }),\n          modalTitle: intl.formatMessage({\n            id: \"IDS_EDITREPORTTEMPLATE\"\n          }),\n          modalShow: true,\n          loadEsign: false,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function SaveReportTemplate(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/updateReportTemplate\", inputParam.inputData).then(response => {\n      let masterData = inputParam.masterData;\n      masterData.selectedReleaseHistory[0][\"nreporttemplatecode\"] = inputParam.inputData.nreporttemplatecode;\n      masterData.selectedReleaseHistory[0][\"sreporttemplatename\"] = inputParam.inputData.sreporttemplatename;\n      masterData.ReleaseHistory.map(item => {\n        if (item.ncoaparentcode === inputParam.inputData.ncoaparentcode) {\n          item[\"nreporttemplatecode\"] = inputParam.inputData.nreporttemplatecode;\n          item[\"sreporttemplatename\"] = inputParam.inputData.sreporttemplatename;\n        }\n      });\n      delete inputParam.selectedRecord.nreporttemplatecode;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData,\n          modalShow: false,\n          loadEsign: false,\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function deleteSamples(inputParam, data) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/deleteSamples\", inputParam.inputData).then(response => {\n      let masterData = { ...data,\n        ...response.data\n      };\n      sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ReleaseAction.js"],"names":["Axios","toast","intl","constructOptionList","replaceUpdatedObject","sortData","getFilterConditionsBasedonDataType","designProperties","reportCOAType","REPORTTYPE","SampleType","transactionStatus","TrainingUpdateChildTab","rsapi","initRequest","DEFAULT_RETURN","crudMaster","getFieldSpecification","getFieldSpecification3","filterObjectForReactAwesomeFilter","fileViewUrl","reportUrl","Utils","QbUtils","checkTree","loadTree","getReleasedRegistrationType","inputData","dispatch","post","then","response","responseData","data","type","payload","masterData","SampleTypeValue","realSampleTypeList","realReportTypeList","realRegTypeList","realRegSubTypeList","realFilterStatusList","realApprovalVersionList","realDesignTemplateMappingList","loading","catch","error","status","message","warn","getReleasedRegistrationSubType","RegTypeValue","getReleasedFilterBasedTest","napprovalversioncode","RegSubTypeValue","ndesigntemplatemappingcode","DesignTemplateMappingValue","rtn","formatMessage","id","getReleasedApprovalVersion","inputParam","getReleasedSample","nsectioncode","undefined","showFilter","FilterQueryBuilder","screenName","awesomeTree","isClear","filterquery","getApprovedSample","ncontrolCode","realReportTypeValue","ncoareporttypecode","PATIENTWISE","fieldList","get","languageTypeCode","userinfo","slanguagetypecode","fields","gridColumns","filterfields","awesomeConfig","urlArray","all","ProjectTypeList","sectionList","openModal","seletedFilterComponent","lstPatient","kendoSkip","kendoTake","expandCheck","isDeletePopup","isComboCheck","isEditPopup","isAddPopup","operation","ismandatory","DynamicReportFilterTypeItem","map","x","releaseSample","projectType","sectionType","testList","approvedReportTemplate","length","itemList","LISTITEM","push","PRIMARYKEY","QUERYBUILDERTABLECODE","TABLENAME","COLUMNNAME","VALUE","MULTILINGUAL","RECORDTYPE","reportFilterType","sectionvalue","comboValues","reportTemplateList","selectedRecord","sectionTypeMap","value","label","testListMap","reportTemplateMap","combovaluesListMap","comboValueList","ReleaseSubSample","ReleaseTest","ReleaseSample","filterQueryTreeStr","extractedColumnList","DynamicDefaultStructureItem","nsampletypecode","nregtypecode","nregsubtypecode","screenNameCopy","generateReleasedReport","Data","preventtb","listStatus","CORRECTION","afterCorrection","modalShow","loadEsign","confirmMessage","confirm","cancelPopUp","document","getElementById","setAttribute","filepath","click","ReleaseHistory","change","getReleasedFilterStatus","getReleasedDataDetails","isServiceRequired","inputParamData","dfrom","dto","ntransactionstatus","ntestcode","napprovalconfigcode","nneedsubsample","ncoaparentcode","releaseno","item","join","npreregno","isneedsection","getApprovedProjectByProjectType","projectMasterMap","projectMasterList","getApprovedProjectType","projectTypeMap","ProjectTypeValue","getSectionForSectionWise","sectionMap","getReportForPortal","UpdateExternalOrderStatus","portallist","String","JSON","stringify","headers","getApprovedRecordsAsDraft","Data1","seletedRecord","searchedData","nreporttemplatecode","NO","preliminaryReport","previewAndFinalReport","sexporttype","sourceparameter","mrtfilePath","sreportingtoolfilename","sreportlanguagecode","sreportname","ssystemfilename","sconnectionString","Login","reportSettings","encodeURIComponent","window","open","getRemoveApprovedSample","selectedReleaseHistory","YES","statusService","Status","ValidationStatus","getDeleteApprovedSample","getEditApprovedSample","UpdateApprovedSample","getreportcomments","fetchReportInfoReleaseById","editParam","additionalInfo","nreportinforeleasecode","editRow","userInfo","selectedId","selectedComment","ReportmodalShow","modalTitle","UpdateReportComments","getResultCorrectionData","resultCorrection","isCorrectionNeed","hideSave","fetchParameterById","ntransactionresultcode","primaryKeyValue","selectedResultGrade","paremterResultcode","parameterResults","ReleaseParameter","predefDefaultFlag","param","index","ngradecode","jsondata","parse","hasOwnProperty","PredefinedValues","predefinedvalue","ResultAccuracyList","ResultAccuracy","UnitList","Unit","isParameterInitialRender","ncontrolcode","editResultId","updateCorrectionStatus","screenname","validateEsignforRelease","methodUrl","toLowerCase","dispatchMethods","info","screenData","doAction","onSaveReleaseTestAttachment","onDeleteReleaseTestAttachment","onSaveReleaseTestComment","onDeleteReleaseTestComment","SaveReportTemplate","viewReportHistory","PatientReports","isPatientReports","viewReleaseTestAttachment","actionName","ReleaseTestAttachmentDetails","ReleaseTestCommentDetails","isReleaseTestAttachment","isReleaseTestComment","lstRegistrationArno","RegistrationArno","lstRegistrationSampleArno","RegistrationSampleArno","lstRegistrationTest","RegistrationTest","lstCommentSubType","CommentSubType","isAddReleaseTestAttachment","isInitialRender","releaseReportHistory","versionHistory","openModalTitle","downloadVersionReport","FilePath","downloadHistory","getPatientFilterExecuteData","obj","component","source","lstData","multilingual","ismultilingual","columnname","optionList","mul","nformcode","onExecute","getPatientWiseSample","classUrl","formData","loadEsignStateHandle","url","releasetestattachment","isAddReleaseTestComment","releasetestcomment","generatereport","editReportTemplate","filter","sreporttemplatename","deleteSamples"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { intl } from \"../components/App\";\r\nimport { constructOptionList, replaceUpdatedObject, sortData ,getFilterConditionsBasedonDataType} from \"../components/CommonScript\";\r\nimport { designProperties, reportCOAType, REPORTTYPE, SampleType, transactionStatus } from \"../components/Enumeration\";\r\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\r\nimport rsapi from \"../rsapi\";\r\nimport { initRequest } from \"./LoginAction\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\nimport { crudMaster } from \"./ServiceAction\";\r\nimport { getFieldSpecification as getFieldSpecification3 } from '../components/type3component/Type3FieldSpecificationList';\r\nimport { filterObjectForReactAwesomeFilter } from \"./RegistrationAction\";\r\nimport {fileViewUrl, reportUrl} from '../rsapi'\r\n\r\n// export function getReleasedSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\r\n    import { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\r\n    const { checkTree, loadTree } = QbUtils;\r\n\r\n//     return function (dispatch) {\r\n//       if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n//         dispatch(initRequest(true));\r\n//         return rsapi.post(\"release/updateRelease\",\r\n\r\n//             inputData\r\n//         )\r\n//             .then(response => {\r\n//                 if (response.data.statusCodeValue !== 200) {\r\n//                     toast.warn(intl.formatMessage({\r\n//                         id: response.data.body\r\n//                     }));\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN,\r\n//                         payload: {\r\n//                             loading: false\r\n//                         }\r\n//                     });\r\n\r\n\r\n//                 }\r\n//                 else {\r\n\r\n//                     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\r\n//                         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\r\n//                     }\r\n//                     let masterData = {\r\n\r\n//                         ...Data1, ...response.data.body,\r\n\r\n\r\n//                     };\r\n\r\n//                     console.log(\"ReleasedTest,\", masterData);\r\n//                      sortData(masterData.ReleaseHistory,\"\",'sreportno');\r\n//                   //  dispatch(generateReport(inputData,masterData))\r\n\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN, payload: {\r\n//                             masterData,\r\n//                             change: inputData.change,\r\n//                             loading: false,\r\n//                             openModal:false\r\n//                         }\r\n//                     });\r\n//                 }\r\n//             })\r\n\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                     console.log(\"ErrorRelease,\", error);\r\n\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n\r\n\r\n//         }\r\n//         else {\r\n//             toast.warn(intl.formatMessage({\r\n//                 id: \"IDS_SELECTANYONESAMPLE\"\r\n//             }));\r\n//         }\r\n//     }\r\n// }\r\nexport function getReleasedRegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            SampleTypeValue: inputData.SampleTypeValue,\r\n                            realSampleTypeList: inputData.realSampleTypeList || [],\r\n                            realReportTypeList: inputData.realReportTypeList || [],\r\n                            realRegTypeList: inputData.realRegTypeList || [],\r\n                            realRegSubTypeList: inputData.realRegSubTypeList || [],\r\n                            realFilterStatusList: inputData.realFilterStatusList || [],\r\n                            realApprovalVersionList: inputData.realApprovalVersionList || [],\r\n                            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedRegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getRegistrationSubType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegTypeValue: inputData.RegTypeValue,\r\n                            realSampleTypeList: inputData.realSampleTypeList || [],\r\n                            realReportTypeList: inputData.realReportTypeList || [],\r\n                            realRegTypeList: inputData.realRegTypeList || [],\r\n                            realRegSubTypeList: inputData.realRegSubTypeList || [],\r\n                            realFilterStatusList: inputData.realFilterStatusList || [],\r\n                            realApprovalVersionList: inputData.realApprovalVersionList || [],\r\n                            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReleasedFilterBasedTest(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.napprovalversioncode) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"release/getFilterBasedTest\", inputData)\r\n                .then(response => {\r\n\r\n\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...responseData,\r\n                                RegSubTypeValue: inputData.RegSubTypeValue,\r\n                                ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                                DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                            },\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (response.data.rtn) {\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_PLSSELECTALLVALUESINFILTER\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function getReleasedApprovalVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovalVersion\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            realSampleTypeList: inputParam.inputData.realSampleTypeList || [],\r\n                            realReportTypeList: inputParam.inputData.realReportTypeList || [],\r\n                            realRegTypeList: inputParam.inputData.realRegTypeList || [],\r\n                            realRegSubTypeList: inputParam.inputData.realRegSubTypeList || [],\r\n                            realFilterStatusList: inputParam.inputData.realFilterStatusList || [],\r\n                            realApprovalVersionList: inputParam.inputData.realApprovalVersionList || [],\r\n                            realDesignTemplateMappingList: inputParam.inputData.realDesignTemplateMappingList || []\r\n                            // fromDate: inputParam.inputData.dfrom,\r\n                            // toDate: inputParam.inputData.dto,\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseSample\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {}\r\n                let nsectioncode = {};\r\n\r\n                // if (response.data.ReleasedSampleDetails && response.data.ReleasedSampleDetails.length !== 0 ||\r\n                //     response.data.ReleaseSample && response.data.ReleaseSample.length === 0) {\r\n                masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (nsectioncode !== undefined) {\r\n                    nsectioncode = inputParam.inputData.nsectioncode;\r\n                }\r\n                // }\r\n                //     else {\r\n                //         responseData.ReleaseHistory = []\r\n                //         responseData.selectedReleaseHistory= []\r\n                //         masterData = {\r\n                //             ...inputParam.masterData,\r\n                //             ...responseData,\r\n                //         }\r\n                //     }\r\n\r\n                sortData(masterData, \"\", \"ncoaparentcode\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        nsectioncode: nsectioncode,\r\n                        FilterQueryBuilder:false,\r\n                        screenName:inputParam.inputData.screenName,\r\n                        awesomeTree:inputParam.inputData.isClear?undefined:inputParam.inputData.awesomeTree,\r\n                        filterquery:inputParam.inputData.isClear?undefined:inputParam.inputData.filterquery,\r\n                        \r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedSample(inputParam, ncontrolCode) {\r\n        if(inputParam.masterData.realReportTypeValue.ncoareporttypecode===reportCOAType.PATIENTWISE)\r\n        {\r\n          \r\n            let fieldList = [];\r\n            fieldList = getFieldSpecification3().get(\"ExternalOrder\") || [];\r\n            \r\n            const languageTypeCode = inputParam.inputData.userinfo.slanguagetypecode;\r\n            const { fields, gridColumns } = filterObjectForReactAwesomeFilter(fieldList[0].filterfields, languageTypeCode, undefined, undefined)\r\n            let awesomeTree = fieldList[0].awesomeTree ? checkTree(loadTree(fieldList[0].awesomeTree), fieldList[0].awesomeConfig) : undefined\r\n           \r\n            return function (dispatch) {\r\n                let urlArray = []; \r\n\r\n              \r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n        \r\n                    .then(response => {\r\n\r\n                        let ProjectTypeList = [];\r\n                        let sectionList = [];\r\n\r\n                        \r\n                        let masterData = {};\r\n                        let openModal = true;\r\n                      \r\n                masterData = {\r\n                    ...inputParam.masterData\r\n                }\r\n\r\n        \r\n                        \r\n                        sortData(masterData);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                fields,\r\n                                gridColumns,\r\n                                awesomeTree,\r\n                                seletedFilterComponent:fieldList[0],\r\n                                // awesomeTree:fieldList[0].awesomeTree,\r\n                                 awesomeConfig:undefined,\r\n                                lstPatient:[],\r\n                                kendoSkip: 0,\r\n                                kendoTake: 5,\r\n                                masterData,\r\n                                expandCheck: false,\r\n                                ProjectTypeList,\r\n                                ncontrolCode,\r\n                                isDeletePopup: false,\r\n                                isComboCheck: false,\r\n                                isEditPopup: false,\r\n                                screenName:\"IDS_PATIENTSEARCH\",\r\n                                sectionList,\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                openModal: openModal,\r\n                                isAddPopup: true,\r\n                                operation:\"save\"\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            }\r\n\r\n}\r\nelse{\r\n    return function (dispatch) {\r\n        let ismandatory=false\r\n        inputParam.DynamicReportFilterTypeItem && inputParam.DynamicReportFilterTypeItem.map(x=>{\r\n            if(x.ismandatory){\r\n                ismandatory=true\r\n            }})\r\n            if(ismandatory){\r\n                inputParam['inputData']={...inputParam.inputData,ismandatory:true}\r\n            }\r\n        const screenName=\"\";\r\n        let urlArray = [];\r\n        inputParam.inputData['isAddPopup'] = true\r\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n        //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n        const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\r\n        const testList=rsapi.post(\"release/getTest\", inputParam.inputData);\r\n        const approvedReportTemplate = rsapi.post(\"release/getApprovedReportTemplate\", inputParam.inputData);\r\n\r\n        // if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE ||\r\n        //     inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n\r\n        //     urlArray = [projectType,sectionType];\r\n        // }\r\n        // else if (inputParam.inputData.isneedsection === transactionStatus.YES || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n        //     urlArray = [sectionType];\r\n        // }\r\n        // else {\r\n        //     urlArray = [releaseSample\r\n        //         //,reportType\r\n        //     ];\r\n        // }\r\n        urlArray = [releaseSample,projectType,sectionType,testList,approvedReportTemplate];\r\n        if(inputParam.DynamicReportFilterTypeItem && inputParam.DynamicReportFilterTypeItem.length>0){\r\n            let itemList=[];\r\n            inputParam.DynamicReportFilterTypeItem.map(x=>{\r\n                if(x[designProperties.LISTITEM]===\"combo\"){\r\n                    itemList.push(\r\n                        {\"Pkey\":x[designProperties.PRIMARYKEY],\r\n                        \"nquerybuildertablecode\":x[designProperties.QUERYBUILDERTABLECODE],\r\n                     \"tablename\":x[designProperties.TABLENAME],\r\n                    \"columnname\":x[designProperties.COLUMNNAME],\r\n                \"keyName\":x[designProperties.VALUE],\r\n            \"isMultiLingual\":x[designProperties.MULTILINGUAL],\r\n             \"languageTypeCode\" :inputParam.inputData.userinfo.slanguagetypecode,\r\n            \"recordType\":x[designProperties.RECORDTYPE]})\r\n                }\r\n            })\r\n            inputParam[\"inputData\"][\"itemList\"]=itemList;\r\n             const reportFilterType = rsapi.post(\"release/getComboValues\", {...inputParam.inputData,'userInfo':inputParam.inputData.userinfo});\r\n            urlArray.push(reportFilterType);\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\r\n                //     \"scoareporttypename\", undefined, undefined, false);\r\n\r\n                // const ReportTypeList = reportTypeMap.get(\"OptionList\");\r\n                let ProjectTypeList = [];\r\n                let sectionList = [];\r\n\r\n                // let selectedRecord = {\"ncoareporttypecode\": {\r\n                //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\r\n                //      \"label\": response[1].data.ReportType[0].scoareporttypename\r\n                // }\r\n                // };\r\n                let masterData = {};\r\n                let openModal = true;\r\n                let sectionvalue=[];\r\n                let comboValues={};\r\n                let reportTemplateList = [];\r\n                let selectedRecord = inputParam.inputData.selectedRecord;\r\n                // let selectedRecord = inputParam.selectedRecord;\r\n                // selectedRecord[\"nmultiplesampleinsinglerelease\"] = inputParam.realReportTypeValue[\"nmultiplesampleinsinglerelease\"];\r\n                const sectionTypeMap = constructOptionList(response[2].data.sectionList || [], \"nsectioncode\",\r\n                \"ssectionname\", undefined, undefined, false);\r\n               sectionList = sectionTypeMap.get(\"OptionList\");\r\n                sectionList.map(x=>sectionvalue.push({\"value\":x.value,\"title\":x.label}));\r\n                let testListMap=response[3] && response[3].data;\r\n                const reportTemplateMap = constructOptionList(response[4].data || [], \"nreporttemplatecode\", \"sreporttemplatename\", \"nreporttemplatecode\", \r\n                    \"ascending\", false);\r\n                reportTemplateList = reportTemplateMap.get(\"OptionList\");\r\n                let combovaluesListMap=response[5] && response[5].data;\r\n                let comboValueList={...testListMap, ...combovaluesListMap} ||{};\r\n             comboValues={\"s.nsectioncode\":sectionvalue,...comboValueList};\r\n                // if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE ||\r\n                //     inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n                //     const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\",\r\n                //         \"sprojecttypename\", undefined, undefined, false);\r\n\r\n                //     ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n                //     masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                //     if (inputParam.inputData.selectedRecord.nprojecttypecode) {\r\n                //         delete inputParam.inputData.selectedRecord.nprojecttypecode\r\n                //     }\r\n                //     if (inputParam.inputData.selectedRecord.nprojectmastercode) {\r\n                //         delete inputParam.inputData.selectedRecord.nprojectmastercode\r\n                //     }\r\n                //     const sectionTypeMap = constructOptionList(response[1].data.sectionList || [], \"nsectioncode\",\r\n                //     \"ssectionname\", undefined, undefined, false);\r\n                // sectionList = sectionTypeMap.get(\"OptionList\");\r\n                // sectionList.map(x=>sectionvalue.push({\"value\":x.value,\"title\":x.label}));\r\n                // let comboValueList=response[2] && response[2].data ||{};\r\n                //  comboValues={\"s.nsectioncode\":sectionvalue,...comboValueList}\r\n                \r\n                // }\r\n                // else \r\n                // if (inputParam.inputData.isneedsection === transactionStatus.YES || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n                //     const sectionTypeMap = constructOptionList(response[0].data.sectionList || [], \"nsectioncode\",\r\n                //         \"ssectionname\", undefined, undefined, false);\r\n                //     sectionList = sectionTypeMap.get(\"OptionList\");\r\n                //     sectionList.map(x=>sectionvalue.push({\"value\":x.value,\"title\":x.label}));\r\n                //     let comboValueList=response[1] && response[1].data ||{};\r\n                //      comboValues={\"s.nsectioncode\":sectionvalue,...comboValueList}\r\n                //     masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                //     if (inputParam.inputData.selectedRecord.nsectioncode) {\r\n                //         delete inputParam.inputData.selectedRecord.nsectioncode\r\n                //     }\r\n\r\n                // }\r\n                // else {\r\n                    if(ismandatory){\r\n                        masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                    }else{\r\n                    if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\r\n\r\n                        let responseData = { ...response[0].data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                    }\r\n                    else {\r\n                        let responseData = { ...response[0].data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                        openModal = false;\r\n                        toast.warn(intl.formatMessage({ id: \"IDS_NOSAMPLESAREAVAILABLE\" }));\r\n                    }\r\n                }\r\n\r\n               // }\r\n               let awesomeTree;\r\n               let filterquery;\r\n               let filterQueryTreeStr;\r\n               let fields =getFilterConditionsBasedonDataType(inputParam.extractedColumnList,comboValues);\r\n               if(inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.nsampletypecode ===inputParam.inputData.nsampletypecode\r\n                && inputParam.DynamicDefaultStructureItem.nregtypecode ===inputParam.inputData.nregtypecode\r\n                 && inputParam.DynamicDefaultStructureItem.nregsubtypecode===inputParam.inputData.nregsubtypecode ){\r\n                awesomeTree=inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.awesomeTree && checkTree(loadTree(inputParam.DynamicDefaultStructureItem.awesomeTree), inputParam.DynamicDefaultStructureItem.awesomeConfig) \r\n                filterquery=inputParam.DynamicDefaultStructureItem.filterquery\r\n                filterQueryTreeStr=inputParam.DynamicDefaultStructureItem.filterQueryTreeStr\r\n                \r\n                 }else{\r\n                    awesomeTree=undefined;\r\n                 }\r\n\r\n                sortData(masterData);\r\n                masterData[\"reportTemplateList\"] = reportTemplateList;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        expandCheck: false,\r\n                        ProjectTypeList,\r\n                        ncontrolCode,\r\n                        isDeletePopup: false,\r\n                        isComboCheck: false,\r\n                        isEditPopup: false,\r\n                        screenName:inputParam.inputData.screenName,\r\n                        sectionList,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openModal: openModal,\r\n                        isAddPopup: true,\r\n                        operation: \"save\",\r\n                        kendoSkip: 0,\r\n                        kendoTake: 5,\r\n                        sectionvalue,\r\n                        comboValues,\r\n                        awesomeTree:awesomeTree,filterquery,fields,filterQueryTreeStr,\r\n                        FilterQueryBuilder:false,\r\n                        screenNameCopy:inputParam.inputData.screenName,\r\n                        ismandatory\r\n                        //awesomeConfig:undefined\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n}\r\n\r\nexport function generateReleasedReport(inputData, Data,preventtb) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        let urlArray = [];\r\n        //   const releaseSample = rsapi.post(\"release/updateRelease\", inputData)  ;\r\n        //   const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData)  ;\r\n        inputData['preventTbFlow']=preventtb===true?preventtb:false\r\n        if (inputData.listStatus === transactionStatus.CORRECTION) {\r\n\r\n            const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData);\r\n            urlArray = [afterCorrection];\r\n        }\r\n\r\n        else {\r\n            const releaseSample = rsapi.post(\"release/updateRelease\", inputData);\r\n\r\n            urlArray = [releaseSample];\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (response[0].data.rtn === \"MappingNeeded\") {\r\n                    \r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false,\r\n                            modalShow: false, \r\n                           // selectedRecord: {}, \r\n                            loadEsign: false,\r\n                            //openModal: false,\r\n                           // preventTbCheck:true\r\n                        }\r\n                    })\r\n\r\n                    inputData.confirmMessage.confirm(\"PortalMapping\", intl.formatMessage({ id: \"IDS_SUBSAMPLEWASNOTMAPPED\" }), intl.formatMessage({ id: \"IDS_DOYOUWANTTOCONTINUEWITHOUTSENDRESULTTOPREVENTTB\" }),\r\n                    intl.formatMessage({ id: \"IDS_OK\" }), intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                     () => dispatch(generateReleasedReport(inputData, Data,true))  ,false,()=>dispatch(cancelPopUp(inputData, Data)) )\r\n\r\n                } else {\r\n                    // if (response[0].data[\"isPortalData\"] && response[0].data[\"PortalStatus\"] && response[0].data[\"PortalStatus\"].length > 0) {\r\n                    //     dispatch(UpdateExternalOrderStatus(response[0].data[\"PortalStatus\"], inputData));\r\n                    // }\r\n\r\n                    if (response[0].data[\"PreventTb\"]) {\r\n                        toast.warn(response[0].data[\"PreventTb\"])\r\n                    }\r\n\r\n                    let masterData = {\r\n                        ...Data,\r\n                        ...response[0].data,\r\n                    }\r\n\r\n                    if(response[0].data && response[0].data.rtn){\r\n                        if (response[0].data.rtn === \"Success\") {\r\n                            document.getElementById(\"download_data\").setAttribute(\"href\", response[0].data.filepath);\r\n                            document.getElementById(\"download_data\").click();\r\n                        }\r\n                        else {\r\n                            toast.warn(response[0].data.rtn);\r\n                        }\r\n                    }\r\n                    sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, change: inputData.change, masterData,\r\n                            modalShow: false, selectedRecord: {}, loadEsign: false, openModal: false\r\n                        }\r\n                    })\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    //toast.warn(error.response.data['rtn']);\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function cancelPopUp(inputData,Data) {\r\n    return function (dispatch) {\r\n        dispatch({\r\n            type: DEFAULT_RETURN, payload: {\r\n                loading: false,\r\n                modalShow: false, selectedRecord: {}, loadEsign: false, openModal: false\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function getReleasedFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseConfigVersionRegTemplateDesign\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedDataDetails(inputParam, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            dfrom: inputParam.inputData.dfrom,\r\n            dto: inputParam.inputData.dto,\r\n\r\n            nsampletypecode: inputParam.inputData.nsampletypecode,\r\n            nregtypecode: inputParam.inputData.nregtypecode,\r\n            nregsubtypecode: inputParam.inputData.nregsubtypecode,\r\n            ntransactionstatus: inputParam.inputData.ntransactionstatus,\r\n            nsectioncode: inputParam.inputData.nsectioncode,\r\n            ntestcode: inputParam.inputData.ntestcode,\r\n            napprovalversioncode: inputParam.inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputParam.inputData.napprovalconfigcode,\r\n            userinfo: inputParam.inputData.userinfo,\r\n            nneedsubsample: inputParam.inputData.nneedsubsample,\r\n            // ncoaparentcode: inputParam.ncoaparentcode,\r\n            ncoaparentcode: inputParam.releaseno ? inputParam.releaseno.map(item => item.ncoaparentcode).join(\",\") : \"-1\",\r\n            npreregno: inputParam.npreregno,\r\n            ncoareporttypecode: inputParam.inputData.ncoareporttypecode,\r\n            isneedsection: inputParam.inputData.isneedsection,\r\n            ndesigntemplatemappingcode: inputParam.masterData.ndesigntemplatemappingcode,\r\n            isAddPopup: false\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseSample\", inputParamData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedProjectByProjectType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedProjectByProjectType\", inputData)\r\n            .then(response => {\r\n                const projectMasterMap = constructOptionList(response.data.projectMasterList || [], \"nprojectmastercode\",\r\n                    \"sprojectcode\", undefined, undefined, false);\r\n\r\n                const projectMasterList = projectMasterMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        projectMasterList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            ReleaseSample:[]\r\n                        },\r\n                       // selectedRecord: {},\r\n                        loading: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedProjectType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedProjectType\", inputData)\r\n            .then(response => {\r\n                const projectTypeMap = constructOptionList(response.data || [], \"nprojecttypecode\",\r\n                    \"sprojecttypename\", undefined, undefined, false);\r\n\r\n                const ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n\r\n                //     const projectMasterMap = constructOptionList(response.data || [], \"nprojecttypecode\",\r\n                //     \"sprojecttypename\", undefined, undefined, false);\r\n\r\n                // const projectMasterList = projectMasterMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        ProjectTypeList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            ProjectTypeValue: inputData.ProjectTypeValue\r\n                        },\r\n                        loading: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getSectionForSectionWise(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getSection\", inputData.inputData)\r\n            .then(response => {\r\n                const sectionMap = constructOptionList(response.data.sectionList || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, false);\r\n\r\n                const sectionList = sectionMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        sectionList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            ReleaseSample:[]\r\n                            \r\n                        },\r\n                        loading: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReportForPortal(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/SendToPortalReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data[\"rtn\"]) {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nfunction UpdateExternalOrderStatus(portallist, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post((String)(inputParam[\"url\"]) + \"/portal/UpdateMultiSampleStatus\", JSON.stringify(portallist), {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response !== undefined && error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else if (error.response === undefined) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedRecordsAsDraft(inputData, Data1, seletedRecord) {\r\n\r\n\r\n    return function (dispatch) {\r\n        if (inputData !== undefined && inputData.npreregno !== \"\") {\r\n\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"release/saveRelease\",\r\n\r\n                inputData\r\n            )\r\n                .then(response => {\r\n                    if (response.data.rtn === \"Success\") {\r\n                        let masterData = {\r\n\r\n                            ...Data1, ...response.data, searchedData: undefined\r\n\r\n\r\n                        };\r\n                        delete(seletedRecord.nreporttemplatecode);\r\n                        seletedRecord[\"nisarnowiserelease\"] = transactionStatus.NO;\r\n                        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false,\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.warn(response.data.rtn);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                //  masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false,\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                        //  console.log(\"ErrorRelease,\", error);\r\n\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n\r\n\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n} \r\nexport function preliminaryReport(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        // const inputData = {\r\n        //     npreregno: inputParam.npreregno,\r\n        //  //   nsectioncode: inputParam.nsectioncode || -1,\r\n        //     userinfo: inputParam.userinfo,\r\n        //     nprimarykey: inputParam.npreregno,\r\n        //     nreporttypecode: REPORTTYPE.COAREPORT,\r\n        //     sprimarykeyname: \"npreregno\",\r\n        //     ncontrolcode: inputParam.ncontrolCode,\r\n        //     nregtypecode: inputParam.nregtypecode,\r\n        //     nregsubtypecode: inputParam.nregsubtypecode,\r\n        //     ntransactiontestcode:inputParam.ntransactiontestcode,\r\n        //     napproveconfversioncode: inputParam.napprovalversioncode,\r\n        //     ncoaparentcode: inputParam.ncoaparentcode,\r\n        //     ntransactionstatus:inputParam.ntransactionstatus\r\n        // }\r\n        rsapi.post(\"release/generateReleasedReport\", inputParam.inputData)\r\n            .then(response => {\r\n                \r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, masterData, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false, openModal: inputParam.inputData.openModal\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data['rtn']);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function previewAndFinalReport(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        // const inputData = {\r\n        //     npreregno: inputParam.npreregno,\r\n        //  //   nsectioncode: inputParam.nsectioncode || -1,\r\n        //     userinfo: inputParam.userinfo,\r\n        //     nprimarykey: inputParam.npreregno,\r\n        //     nreporttypecode: REPORTTYPE.COAREPORT,\r\n        //     sprimarykeyname: \"npreregno\",\r\n        //     ncontrolcode: inputParam.ncontrolCode,\r\n        //     nregtypecode: inputParam.nregtypecode,\r\n        //     nregsubtypecode: inputParam.nregsubtypecode,\r\n        //     ntransactiontestcode:inputParam.ntransactiontestcode,\r\n        //     napproveconfversioncode: inputParam.napprovalversioncode,\r\n        //     ncoaparentcode: inputParam.ncoaparentcode,\r\n        //     ntransactionstatus:inputParam.ntransactionstatus\r\n        // }\r\n        rsapi.post(\"release/generateReleasedReport\", inputParam.inputData)\r\n            .then(response => {\r\n\r\n                if(response.data.sexporttype === \"viewer\")\r\n                {\r\n                if(response.data.sourceparameter!=undefined && response.data.sourceparameter!=\"\")\r\n                {\r\n                let mrtfilePath = reportUrl()\r\n                + \"?name=\" + inputParam.userinfo.sreportingtoolfilename     //en-xml\r\n                + \"&slanguagetypecode=\" + inputParam.userinfo.sreportlanguagecode    //en-us\r\n                + \"&foldername=\" + response.data.sreportname   //\"Quotation-002\"//this.props.Login.masterData.SelectedReportDetails.sreportname\r\n                + \"&filename=\" + response.data.ssystemfilename  //\"a6008692-3e1a-422b-b4da-5e9ad9cf3be6.mrt\"//\"b701dbc4-d90e-4840-b8e1-942649d6ec25.mrt\"//this.props.Login.masterData.SelectedReportDetails.ssystemfilename\r\n                + \"&sconnectionstring=\" + inputParam.userinfo.sconnectionString\r\n                + \"&sreportlink=\" + inputParam.Login.reportSettings[15] //inputParam.sreportlink //\"//localhost:8090/SharedFolder/QuaLISjrxml\"//this.props.Login.reportSettings[15] //this.props.Login.userInfo.sreportLink  \r\n                + \"&smrttemplatelink=\" + inputParam.Login.reportSettings[16]  //inputParam.smrttemplatelink //\"//localhost:8090//SharedFolder//ReportJSON//ReportTemplate.json\"//this.props.Login.reportSettings[16]//this.props.Login.userInfo.smrttemplateLink\r\n                + \"&sourceparameter=\" + encodeURIComponent(response.data.sourceparameter);\r\n\r\n             window.open(mrtfilePath);\r\n    }\r\n}\r\n\r\n\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, masterData, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false, openModal: inputParam.inputData.openModal\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data['rtn']);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRemoveApprovedSample(inputParam, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if(inputParam.masterData && inputParam.masterData.selectedReleaseHistory && inputParam.masterData.selectedReleaseHistory.length > 1){\r\n            toast.warn(intl.formatMessage({ id: \"IDS_MULTISELECTAPPLICABLEONLYFORRELEASEACTION\" }));\r\n        } else {\r\n            let urlArray = [];\r\n            inputParam.inputData['isPopup'] = true\r\n            if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES){\r\n            // if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES && \r\n            // (inputParam.inputData['nneedsubsample'] === false || \r\n            // (inputParam.inputData['nneedsubsample'] === true && inputParam.inputData['ncoaparenttranscode'] === transactionStatus.DRAFT))){\r\n                const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n                //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n                // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n                const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n\r\n                urlArray = [releaseSample, statusService\r\n                    //,reportType\r\n                ];\r\n\r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n\r\n                .then(response => {\r\n                    if (response[1].data.Status === \"Success\") {\r\n\r\n                        let masterData = {};\r\n                        let selectedRecord = inputParam.inputData.selectedRecord;\r\n\r\n                        let responseData = { ...response[0].data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n\r\n\r\n                        // responseData = sortData(responseData)\r\n\r\n\r\n                        sortData(masterData);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                // selectedRecord,\r\n                                isDeletePopup: true,\r\n                                isComboCheck: true,\r\n                                isEditPopup: false,\r\n                                ncontrolCode,\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                openModal: true,\r\n                                isAddPopup: false,\r\n                                operation: \"delete\",\r\n                                ncontrolCode: inputParam.inputData.ncontrolCode,\r\n                                expandCheck: false,\r\n                                screenName: inputParam.inputData.screenName,\r\n\r\n\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: response[1].data.ValidationStatus\r\n                        }));\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ncontrolCode: ncontrolCode,\r\n                                loading: false\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n            // } else if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.NO || \r\n            //     (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES && inputParam.inputData['ncoaparenttranscode'] !== transactionStatus.DRAFT)){\r\n            //         toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" }));\r\n            } else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" }));\r\n                // toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" })+ \" \"+ intl.formatMessage({ id: \"IDS_FOR\" })+ \" \"+ inputParam.inputData['sregsubtypename']);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function getDeleteApprovedSample(inputData, Data1) {\r\n\r\n\r\n    return function (dispatch) {\r\n        if (inputData !== undefined && inputData.npreregno !== \"\") {\r\n\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"release/deleteRelease\",\r\n\r\n                inputData\r\n            )\r\n                .then(response => {\r\n                    if (response.data.rtn === \"Success\") {\r\n\r\n                        let masterData = {\r\n                            ...Data1, ...response.data,\r\n                        };\r\n                        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false,\r\n\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.warn(response.data.rtn);\r\n\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                //    masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false,\r\n\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                        //  console.log(\"ErrorRelease,\", error);\r\n\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\nexport function getEditApprovedSample(inputParam, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if(inputParam.masterData && inputParam.masterData.selectedReleaseHistory && inputParam.masterData.selectedReleaseHistory.length > 1){\r\n            toast.warn(intl.formatMessage({ id: \"IDS_MULTISELECTAPPLICABLEONLYFORRELEASEACTION\" }));\r\n        } else {\r\n        let urlArray = [];\r\n        inputParam.inputData['isPopup'] = true\r\n        if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES){\r\n            const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n            //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n            //  const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n            const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n            const testList=rsapi.post(\"release/getTest\", inputParam.inputData)\r\n            const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\r\n\r\n                    // if (inputParam.inputData.ncoareporttypecode === 7) {\r\n\r\n            //     urlArray = [ projectType,statusService];\r\n            // }\r\n            // else if (inputParam.inputData.ncoareporttypecode === 8) {\r\n            //     urlArray = [ releaseSample,statusService];\r\n            // }\r\n            // else {\r\n            urlArray = [releaseSample, statusService,testList,sectionType\r\n                //,reportType\r\n            ];\r\n            if(inputParam.DynamicReportFilterTypeItem && inputParam.DynamicReportFilterTypeItem.length>0){\r\n                let itemList=[];\r\n                inputParam.DynamicReportFilterTypeItem.map(x=>{\r\n                    if(x[designProperties.LISTITEM]===\"combo\"){\r\n                        itemList.push(\r\n                            {\"Pkey\":x[designProperties.PRIMARYKEY],\r\n                            \"nquerybuildertablecode\":x[designProperties.QUERYBUILDERTABLECODE],\r\n                        \"tablename\":x[designProperties.TABLENAME],\r\n                        \"columnname\":x[designProperties.COLUMNNAME],\r\n                    \"keyName\":x[designProperties.VALUE],\r\n                \"isMultiLingual\":x[designProperties.MULTILINGUAL],\r\n                \"languageTypeCode\" :inputParam.inputData.userinfo.slanguagetypecode,\r\n                \"recordType\":x[designProperties.RECORDTYPE]})\r\n                    }\r\n                })\r\n                inputParam[\"inputData\"][\"itemList\"]=itemList;\r\n                const reportFilterType = rsapi.post(\"release/getComboValues\", {...inputParam.inputData,'userInfo':inputParam.inputData.userinfo});\r\n                urlArray.push(reportFilterType);\r\n            }\r\n            // }\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n\r\n                .then(response => {\r\n                    // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\r\n                    //     \"scoareporttypename\", undefined, undefined, false);\r\n\r\n                    // const ReportTypeList = reportTypeMap.get(\"OptionList\");\r\n                    if (response[1].data.Status === \"Success\") {\r\n\r\n                        let ProjectTypeList = [];\r\n                        let sectionList = [];\r\n                   let comboValues={};\r\n                   let sectionvalue=[];\r\n                    const sectionTypeMap = constructOptionList(response[3].data.sectionList || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, false);\r\n                   sectionList = sectionTypeMap.get(\"OptionList\");\r\n                    sectionList.map(x=>sectionvalue.push({\"value\":x.value,\"title\":x.label}));\r\n                    let testListMap=response[2] && response[2].data\r\n                    let combovaluesListMap=response[4] && response[4].data\r\n                    let comboValueList={...testListMap, ...combovaluesListMap} ||{};\r\n                 comboValues={\"s.nsectioncode\":sectionvalue,...comboValueList}\r\n                        // let selectedRecord = {\"ncoareporttypecode\": {\r\n                        //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\r\n                        //      \"label\": response[1].data.ReportType[0].scoareporttypename\r\n                        // }\r\n                        // };\r\n                        let masterData = {};\r\n                        let openModal = true;\r\n\r\n                        let selectedRecord = inputParam.inputData.selectedRecord;\r\n\r\n                        if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\r\n\r\n                            let responseData = { ...response[0].data }\r\n                            masterData = {\r\n                                ...inputParam.masterData, ...responseData\r\n                            }\r\n                        }\r\n                        else {\r\n                            let responseData = { ...response[0].data }\r\n                            masterData = {\r\n                                ...inputParam.masterData, ...responseData\r\n                            }\r\n                            openModal = false;\r\n                            toast.warn(intl.formatMessage({ id: \"IDS_NOSAMPLESAREAVAILABLE\" }));\r\n                        }\r\n                        // responseData = sortData(responseData)\r\n                    let awesomeTree;\r\n                    let filterquery;\r\n                    let fields =getFilterConditionsBasedonDataType(inputParam.extractedColumnList,comboValues);\r\n                    if(inputParam.DynamicDefaultStructureItem && \r\n                        inputParam.DynamicDefaultStructureItem.nsampletypecode ===inputParam.inputData.nsampletypecode\r\n                     && inputParam.DynamicDefaultStructureItem.nregtypecode ===inputParam.inputData.nregtypecode\r\n                      && inputParam.DynamicDefaultStructureItem.nregsubtypecode===inputParam.inputData.nregsubtypecode ){\r\n                     awesomeTree=inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.awesomeTree && checkTree(loadTree(inputParam.DynamicDefaultStructureItem.awesomeTree), inputParam.DynamicDefaultStructureItem.awesomeConfig) \r\n                     filterquery=inputParam.DynamicDefaultStructureItem.filterquery\r\n                      }else{\r\n                         awesomeTree=undefined;\r\n                      }\r\n\r\n                        sortData(masterData);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                // selectedRecord,\r\n                                sectionList,\r\n                                ncontrolCode: inputParam.inputData.ncontrolCode,\r\n                                isDeletePopup: false,\r\n                                isComboCheck: true,\r\n                                isEditPopup: true,\r\n                                ProjectTypeList,\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                openModal: openModal,\r\n                                isAddPopup: false,\r\n                                operation: \"append\",\r\n                                expandCheck: false,\r\n                                screenName: inputParam.inputData.screenName,\r\n                            sectionvalue,\r\n                            comboValues,\r\n                            awesomeTree:awesomeTree,filterquery,fields,\r\n                            screenNameCopy:inputParam.inputData.screenName,\r\n\r\n\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: response[1].data.ValidationStatus\r\n                        }));\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ncontrolCode: ncontrolCode,\r\n                                loading: false\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n            // }  else if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.NO || \r\n            // (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES && inputParam.inputData['ncoaparenttranscode'] !== transactionStatus.DRAFT)){\r\n            //     toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" }));\r\n            } else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" }));\r\n                // toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" })+ \" \"+ intl.formatMessage({ id: \"IDS_FOR\" })+ \" \"+ inputParam.inputData['sregsubtypename']);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function UpdateApprovedSample(inputData, Data1) {\r\n\r\n\r\n    return function (dispatch) {\r\n        if (inputData !== undefined && inputData.npreregno !== \"\") {\r\n\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"release/appendRelease\",\r\n\r\n                inputData\r\n            )\r\n                .then(response => {\r\n                    if (response.data.rtn === \"Success\") {\r\n\r\n                        let masterData = {\r\n                            ...Data1, ...response.data,\r\n                        };\r\n                        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.warn(response.data.rtn);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                //  masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                        // console.log(\"ErrorRelease,\", error);\r\n\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getreportcomments(inputData, Data) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n\r\n        rsapi.post(\"release/getreportcomments\", inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, change: inputData.change, masterData,\r\n                        screenName: \"IDS_REPORTINFOCOMMENT\",\r\n                        openModal: true, selectedRecord: {}, loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function fetchReportInfoReleaseById(editParam) {\r\n    return function (dispatch) {\r\n        let additionalInfo = [];\r\n\r\n        let inputParamData = {\r\n            nreportinforeleasecode: editParam.editRow.nreportinforeleasecode,\r\n            userinfo: editParam.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getActiveReportInfoReleaseById\", inputParamData)\r\n            .then(response => {\r\n\r\n                // const parameterResults = response.data.ReleaseParameter\r\n                let selectedId = editParam.editRow.nreportinforeleasecode;\r\n                const selectedComment = { ...response.data };\r\n                const masterData = {\r\n                    ...editParam.masterData,\r\n                    selectedComment\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n\r\n                    payload: {\r\n                        screenName: \"IDS_REPORTINFOCOMMENTS\",\r\n                        selectedId,\r\n                        masterData,\r\n                        //isParameterInitialRender: true,\r\n                        loading: false,\r\n                        openModal: true,\r\n                        // modalShow: true,\r\n                        ReportmodalShow: true,\r\n                        operation: \"update\",\r\n                        modalTitle: intl.formatMessage({ id: \"IDS_COMMENTS\" }),\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        //}\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function UpdateReportComments(userInfo, Data1, inputData) {\r\n    let inputParamData = {\r\n        selectedComment: Data1.selectedComment,\r\n        userinfo: userInfo\r\n    }\r\n\r\n    return function (dispatch) {\r\n        //if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/updateReportComment\",\r\n\r\n            inputParamData\r\n        )\r\n            .then(response => {\r\n                let masterData = {\r\n\r\n                    ...Data1, ...response.data,\r\n                    selectedComment: {},\r\n                };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        screenName: \"IDS_REPORTINFOCOMMENT\",\r\n                        loading: false,\r\n                        openModal: true,\r\n                        expandCheck: false,\r\n                        modalShow: false,\r\n                        ReportmodalShow: false,\r\n                        isComboCheck: true,\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    // console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        // }\r\n        // else {\r\n        //     toast.warn(intl.formatMessage({\r\n        //         id: \"IDS_SELECTANYONESAMPLE\"\r\n        //     }));\r\n        //}\r\n    }\r\n}\r\nexport function getResultCorrectionData(inputParam, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if(inputParam.masterData && inputParam.masterData.selectedReleaseHistory && inputParam.masterData.selectedReleaseHistory.length > 1){\r\n            toast.warn(intl.formatMessage({ id: \"IDS_MULTISELECTAPPLICABLEONLYFORRELEASEACTION\" }));\r\n        } else {\r\n            let urlArray = [];\r\n            inputParam.inputData['isPopup'] = true\r\n            const resultCorrection = rsapi.post(\"release/getResultCorrection\", inputParam.inputData);\r\n            //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n            // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n            const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n\r\n            urlArray = [resultCorrection, statusService\r\n                //,reportType\r\n            ];\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                if (response[1].data.Status === \"Success\") {\r\n\r\n                    let masterData = {};\r\n                    let selectedRecord = inputParam.inputData.selectedRecord;\r\n\r\n                    let responseData = { ...response[0].data }\r\n                    masterData = {\r\n                        ...inputParam.masterData, ...responseData\r\n                    }\r\n\r\n                    sortData(masterData);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            // selectedRecord,\r\n                            isDeletePopup: true,\r\n                            isComboCheck: true,\r\n                            isEditPopup: false,\r\n                            loadEsign: false,\r\n                            ncontrolCode,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            openModal: true,\r\n                            isCorrectionNeed: true,\r\n                            isAddPopup: false,\r\n                            operation: \"delete\",\r\n                            ncontrolCode: inputParam.inputData.ncontrolCode,\r\n                            expandCheck: false,\r\n                            hideSave: true,\r\n                            screenName: inputParam.inputData.screenName,\r\n\r\n\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[1].data.ValidationStatus\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false,\r\n                            expandCheck: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\nexport function fetchParameterById(editParam) {\r\n    return function (dispatch) {\r\n        let additionalInfo = [];\r\n\r\n        let inputParamData = {\r\n            ntransactionresultcode: editParam.primaryKeyValue,\r\n            userinfo: editParam.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseResults\", inputParamData)\r\n            .then(response => {\r\n                let selectedResultGrade = [];\r\n                let paremterResultcode = [];\r\n                const parameterResults = response.data.ReleaseParameter\r\n                let predefDefaultFlag = false;\r\n                parameterResults.map((param, index) => {\r\n                    selectedResultGrade[index] = { ngradecode: param.ngradecode };\r\n                    paremterResultcode[index] = param.ntransactionresultcode;\r\n                    let jsondata = JSON.parse(param.jsondata['value'])\r\n                    if (jsondata.hasOwnProperty('additionalInfo')) {\r\n                        additionalInfo[param.ntransactionresultcode] = jsondata['additionalInfo']\r\n                    }\r\n                    predefDefaultFlag = false;\r\n                    (response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]) &&\r\n                        response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\r\n                            // if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\r\n                            //     if (!predefDefaultFlag) {\r\n                            //         predefDefaultFlag = true;\r\n                            //         response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\r\n                            //             undefined, undefined).get(\"OptionList\");\r\n                            //     }\r\n                            // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\r\n                            //     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                            //         undefined, undefined).get(\"OptionList\");\r\n                            //     if (response.data.ResultParameter[index].sresult === null) {\r\n                            //         response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\r\n                            //         response.data.ResultParameter[index].sresultpredefinedname = predefinedvalue.sresultpredefinedname;\r\n                            //         response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedsynonym;\r\n                            //         response.data.ResultParameter[index].editable = true;\r\n                            //         response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\r\n                            //         if(predefinedvalue.spredefinedcomments&&predefinedvalue.spredefinedcomments!==null){\r\n                            //             response.data.ResultParameter[index].sresultcomment = predefinedvalue.spredefinedcomments\r\n                            //             &&predefinedvalue.spredefinedcomments;\r\n                            //         }\r\n                            //     }\r\n                            // }\r\n                            //  else {\r\n                            if (!predefDefaultFlag) {\r\n                                predefDefaultFlag = true;\r\n                                response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\r\n                                    undefined, undefined).get(\"OptionList\");\r\n                            }\r\n\r\n                            //   }\r\n                            //return null;\r\n\r\n                        });\r\n                        if( parameterResults[index][\"nparametertypecode\"] ==1) {\r\n                            parameterResults[index][\"nresultaccuracycode\"] ={\r\n                                \"value\": parameterResults[index][\"nresultaccuracycode\"],\r\n                                \"label\": parameterResults[index][\"sresultaccuracyname\"],\r\n                            };\r\n\r\n                            parameterResults[index][\"nunitcode\"] ={\r\n                                \"value\": parameterResults[index][\"nunitcode\"],\r\n                                \"label\": parameterResults[index][\"sunitname\"],\r\n                            };\r\n                        }\r\n                    param['editable'] = false;\r\n                    //return null;\r\n                    // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                    // undefined, undefined).get(\"OptionList\");\r\n                });\r\n\r\n                const ResultAccuracyList = constructOptionList(response.data[\"ResultAccuracy\"] || [], \"nresultaccuracycode\",\"sresultaccuracyname\", undefined, undefined, false);   \r\n                const ResultAccuracy = ResultAccuracyList.get(\"OptionList\");\r\n\r\n                const UnitList = constructOptionList(response.data[\"Unit\"] || [], \"nunitcode\",\"sunitname\", undefined, undefined, false);   \r\n                const Unit = UnitList.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...editParam.masterData,\r\n                            //...sortData(response.data,\"desc\",\"ntransactiontestcode\"),\r\n                            ...response.data,\r\n                            paremterResultcode,//,\r\n                            selectedResultGrade,\r\n                            ResultAccuracy,\r\n                            Unit\r\n\r\n                        },\r\n                        selectedRecord: {\r\n                            additionalInfo: additionalInfo.length > 0 ? additionalInfo : [],\r\n                            selectedResultGrade: selectedResultGrade,\r\n                            ReleaseParameter: response.data.ReleaseParameter\r\n\r\n                        },\r\n                        parameterResults: response.data.ReleaseParameter,\r\n                        isParameterInitialRender: true,\r\n                        loading: false,\r\n                        // screenName: \"IDS_RESULTENTRY\",\r\n                        openModal: true,\r\n                        modalShow: true,\r\n                        operation: \"update\",\r\n                        modalTitle: intl.formatMessage({ id: \"IDS_CHANGERESULT\" }),\r\n                        selectedId: editParam.primaryKeyValue,\r\n                        //activeTestKey: \"IDS_RESULTS\",\r\n                        ncontrolcode: editParam.editResultId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        //}\r\n\r\n\r\n    }\r\n\r\n}\r\nexport function updateCorrectionStatus(inputData, Data, screenname) {\r\n\r\n\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/updateCorrectionStatus\",\r\n\r\n            inputData\r\n        )\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n                    let masterData = {\r\n\r\n                        ...Data, ...response.data,\r\n                    };\r\n                    sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            change: inputData.change,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            screenName: screenname\r\n\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            // masterData,\r\n                            //  change: inputData.change,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n\r\n                            //  screenName:screenname\r\n\r\n                        }\r\n                    });\r\n                    toast.warn(intl.formatMessage({ id: response.data }));\r\n\r\n                }\r\n\r\n                // }\r\n            })\r\n\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    //  console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n\r\n\r\n\r\n    }\r\n}\r\nexport function validateEsignforRelease(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = \"release\";\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n                    dispatch(dispatchMethods(inputParam[\"screenData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\nfunction dispatchMethods(screenData) {\r\n    return (dispatch) => {\r\n        let doAction = screenData.inputParam.inputData.doAction\r\n        switch (doAction) {\r\n            case \"appendsample\":\r\n                dispatch(UpdateApprovedSample(screenData.inputParam.inputData, screenData.masterData));\r\n                break;\r\n            case \"removesample\":\r\n                dispatch(getDeleteApprovedSample(screenData.inputParam.inputData, screenData.masterData, 'openModal'));\r\n                break;\r\n            case \"generate\":\r\n                dispatch(generateReleasedReport(screenData.inputParam.inputData, screenData.masterData));\r\n                break;\r\n            case \"download\":\r\n                dispatch(previewAndFinalReport(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"correction\":\r\n                dispatch(updateCorrectionStatus(screenData.inputParam.inputData, screenData.masterData, screenData.inputParam.inputData.screenName));\r\n                break;\r\n            case \"saveasdraft\":\r\n                dispatch(getApprovedRecordsAsDraft(screenData.inputParam.inputData, screenData.masterData, screenData.seletedRecord));\r\n                break;\r\n            case \"editresult\":\r\n                dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"modalShow\"))\r\n                break;\r\n            case \"preliminary\":\r\n                dispatch(preliminaryReport(screenData.inputParam, screenData.masterData))\r\n                break;\r\n            case \"editReleaseTestAttachment\":\r\n                dispatch(onSaveReleaseTestAttachment(screenData.inputParam))\r\n                break;\r\n            case \"deleteReleaseTestAttachment\":\r\n                dispatch(onDeleteReleaseTestAttachment(screenData.inputParam))\r\n                break;\r\n            case \"editReleaseTestComment\":\r\n                dispatch(onSaveReleaseTestComment(screenData.inputParam))\r\n                break;\r\n            case \"deleteReleaseTestComment\":\r\n                dispatch(onDeleteReleaseTestComment(screenData.inputParam))\r\n                break;\r\n            case \"editReportTemplate\":\r\n                dispatch(SaveReportTemplate(screenData.inputParam))\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport function viewReportHistory(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/viewReportHistory\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = inputParam.masterData;\r\n                let PatientReports = response.data.PatientReports;\r\n                masterData = { ...masterData, PatientReports };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        isPatientReports: true,\r\n                        openModal: true,\r\n                        hideSave: true,\r\n                        isAddPopup: false,\r\n                        isEditPopup: false,\r\n                        isDeletePopup: false,\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function viewReleaseTestAttachment(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let methodUrl = \"\";\r\n        if(inputParam.inputData.actionName === \"IDS_RELEASETESTATTACHMENT\"){\r\n            methodUrl=\"getReleaseTestAttachment\";\r\n        } else {\r\n            methodUrl=\"getReleaseTestComment\";\r\n        }\r\n        rsapi.post(\"release/\"+methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = inputParam.masterData;\r\n                const ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\r\n                const ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\r\n                const isReleaseTestAttachment = inputParam.inputData.actionName === \"IDS_RELEASETESTATTACHMENT\";\r\n                const isReleaseTestComment = inputParam.inputData.actionName === \"IDS_RELEASETESTCOMMENT\";\r\n\r\n                const lstRegistrationArno = constructOptionList(response.data.RegistrationArno || [], \"npreregno\", \"sarno\", false, false, true);\r\n                const RegistrationArno = lstRegistrationArno.get(\"OptionList\");\r\n\r\n                const lstRegistrationSampleArno = constructOptionList(response.data.RegistrationSampleArno || [], \"ntransactionsamplecode\", \"ssamplearno\", false, false, true);\r\n                const RegistrationSampleArno = lstRegistrationSampleArno.get(\"OptionList\");\r\n\r\n                const lstRegistrationTest = constructOptionList(response.data.RegistrationTest || [], \"ntransactiontestcode\", \"stestsynonym\", false, false, true);\r\n                const RegistrationTest = lstRegistrationTest.get(\"OptionList\");\r\n\r\n                const lstCommentSubType = constructOptionList(response.data.CommentSubType || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, true);\r\n                const CommentSubType = lstCommentSubType.get(\"OptionList\");\r\n\r\n                masterData = { ...masterData, ReleaseTestAttachmentDetails, ReleaseTestCommentDetails, RegistrationArno, RegistrationSampleArno, RegistrationTest, CommentSubType };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        isReleaseTestAttachment,\r\n                        isReleaseTestComment,\r\n                        openModal: true,\r\n                        isAddPopup: false,\r\n                        isEditPopup: false,\r\n                        isDeletePopup: false,\r\n                        masterData,\r\n                        loading: false,\r\n                        isAddReleaseTestAttachment:false,\r\n                        isInitialRender : false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n// export function writeJSONTemplate(inputParam){ \r\n//     return function (dispatch) {    \r\n\r\n//         return rsapi.post(\"release/writeJSONTemplate\",\r\n\r\n//         { [inputParam.primaryKeyName] :inputParam.selectedReleaseHistory.ncoaparentcode , \r\n//             \"userinfo\": inputParam.userInfo}\r\n//     )\r\n//         .then(response => {\r\n\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, payload: {\r\n//                         loading: false,\r\n//                         openModal: false,\r\n//                         expandCheck: false,\r\n\r\n\r\n//                     }\r\n//                 });\r\n//         })\r\n//         .catch(error => {\r\n//             dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//             if (error.response.status === 500) {\r\n//                 toast.error(error.message);\r\n\r\n\r\n//             }\r\n//             else {\r\n//                 toast.warn(error.response.data);\r\n//             }\r\n//         })\r\n\r\n// }\r\n// }\r\n\r\nexport function releaseReportHistory(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/getPreliminaryReportHistory\", inputParam)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...response.data\r\n                        },\r\n                        //hange: inputData.change,\r\n                        openModal: true,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        screenName: inputParam.screenName\r\n                    }\r\n                });\r\n            }\r\n            )\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\nexport function versionHistory(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/getVersionHistory\", inputParam)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...response.data\r\n                        },\r\n                        //hange: inputData.change,\r\n                        openModal: true,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModalTitle: \"IDS_VERSIONHISTORY\"\r\n                    }\r\n                });\r\n            }\r\n            )\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\n\r\nexport function downloadVersionReport(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/downloadVersionHistory\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, masterData, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false, openModal: inputParam.inputData.openModal\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function downloadHistory(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/downloadHistory\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, masterData, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data['rtn']);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getPatientFilterExecuteData(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        let obj = { ...inputParam.component, filterquery: inputParam.filterquery, userinfo: inputParam.userinfo }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/dynamicpreregdesign/getdynamicfilterexecutedata\", obj)\r\n            .then(response => {\r\n                const source = inputParam.component.source\r\n                const languageTypeCode = inputParam.userinfo.slanguagetypecode\r\n                const lstData = response.data[inputParam.component.label]\r\n                const multilingual = []\r\n                inputParam.component.filterfields.map(item => {\r\n                    if (item.ismultilingual) {\r\n                        multilingual.push(item.columnname)\r\n                    }\r\n                })\r\n                const optionList = lstData.map(item => {\r\n                    const jsondata = item[source] ? item[source].value ?\r\n                        JSON.parse(item[source].value) : item.jsondata : item.jsondata\r\n\r\n                    multilingual.map(mul => {\r\n                        jsondata[mul] =\r\n                            jsondata[mul][languageTypeCode] || jsondata[mul]['en-US'];\r\n                    })\r\n                    // let label = isMultiLingual ?\r\n                    //   jsondata[optionValue]\r\n                    //   [languageTypeCode] || jsondata[optionValue]['en-US']\r\n                    //   : jsondata[optionValue];\r\n\r\n                    return jsondata\r\n                });\r\n                if (inputParam.userinfo.nformcode === 161) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            lstPatient: optionList,\r\n                            onExecute: false,\r\n                            loading: false,\r\n                            screenName:\"IDS_PATIENTSEARCH\"\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            lstPatient: optionList,\r\n                            // onExecute: false,\r\n                            loading: false,\r\n                            screenName:\"IDS_PATIENTSEARCH\"\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data.rtn);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getPatientWiseSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getPatientWiseSample\", inputParam)\r\n            .then(response => {\r\n                let openModal = true;\r\n                let screenName=\"IDS_ADDSAMPLE\";\r\n                let responseData = { ...response.data }\r\n            \r\n                let masterData = {} \r\n                let lstPatient=[]\r\n   masterData = {\r\n                        ...inputParam.masterData,\r\n                        ...responseData,\r\n                }\r\n               \r\n                    if (responseData && responseData.ReleaseSample.length !== 0) {\r\n                        \r\n                        let responseData = {  ...response.data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                    }\r\n                    else {\r\n                        let responseData = {  ...response.data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                        lstPatient=inputParam.Login.lstPatient\r\n                         //openModal = false;\r\n                          screenName=\"IDS_PATIENTSEARCH\";\r\n                        toast.warn(intl.formatMessage({ id: \"IDS_NOSAMPLESAREAVAILABLE\" }));\r\n                        }\r\n\r\n                \r\n\r\n            \r\n            sortData(masterData);\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    \r\n                  \r\n                    // awesomeTree:fieldList[0].awesomeTree,\r\n                     awesomeConfig:undefined,\r\n                     lstPatient:lstPatient,\r\n                    //lstPatient:[],\r\n                    kendoSkip: 0,\r\n                    kendoTake: 5,\r\n                    masterData,\r\n                    expandCheck: false,\r\n                    \r\n                    \r\n                    isDeletePopup: false,\r\n                    isComboCheck: false,\r\n                    isEditPopup: false,\r\n                    screenName:screenName,//\"IDS_ADDSAMPLE\",\r\n                    \r\n                    loading: false,\r\n                    showFilter: false,\r\n                    openModal: openModal,\r\n                    isAddPopup: true,\r\n                    operation:\"save\"\r\n                }\r\n            })\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function onSaveReleaseTestAttachment(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n       rsapi.post(inputParam.inputData.classUrl +\"/\" + inputParam.inputData.operation + inputParam.inputData.methodUrl, inputParam.inputData.formData)\r\n            .then(response => {\r\n                let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\r\n                let masterData = {...inputParam.inputData.masterData, ReleaseTestAttachmentDetails};\r\n                    let selectedRecord = {};\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            selectedRecord,\r\n                            isAddReleaseTestAttachment: false,\r\n                            isReleaseTestAttachment: true,\r\n                            loading: false,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            masterData,\r\n                            isInitialRender: false,\r\n                            loadEsign: false,\r\n                            loadEsignStateHandle: false\r\n                        }\r\n                    })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response && error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else if(error.response === undefined){\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function onDeleteReleaseTestAttachment(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.inputData.url, {\r\n            \"releasetestattachment\" : inputParam.inputData.releasetestattachment, \"userinfo\": inputParam.inputData.userinfo\r\n        })\r\n        .then(response => {\r\n            let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\r\n            let selectedRecord = {\r\n                ...inputParam.inputData.selectedRecord, ...response.data\r\n            };\r\n            let masterData = inputParam.inputData.masterData;\r\n            masterData[\"ReleaseTestAttachmentDetails\"] = ReleaseTestAttachmentDetails;\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    selectedRecord,\r\n                    isReleaseTestAttachment: true,\r\n                    loading: false,\r\n                    screenName: inputParam.inputData.screenName,\r\n                    masterData,\r\n                    loadEsignStateHandle: false\r\n                }\r\n            })\r\n        })\r\n        .catch(error => {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            if (error.response && error.response.status === 500) {\r\n                toast.error(error.message);\r\n            }\r\n            else if(error.response === undefined){\r\n                toast.error(error.message);\r\n            } \r\n            else {\r\n                toast.warn(error.response.data);\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function onSaveReleaseTestComment(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.inputData.classUrl +\"/\" + inputParam.inputData.operation + inputParam.inputData.methodUrl, inputParam.inputData.formData)\r\n        .then(response => {\r\n            let ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\r\n            let masterData = {...inputParam.inputData.masterData, ReleaseTestCommentDetails};\r\n            let selectedRecord = {};\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    selectedRecord,\r\n                    isAddReleaseTestComment: false,\r\n                    isReleaseTestComment: true,\r\n                    loading: false,\r\n                    screenName: inputParam.inputData.screenName,\r\n                    masterData,\r\n                    isInitialRender: false,\r\n                    loadEsignStateHandle: false\r\n                }\r\n            })\r\n        })\r\n        .catch(error => {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            if (error.response && error.response.status === 500) {\r\n                toast.error(error.message);\r\n            } else if (error.response === undefined){\r\n                toast.error(error.message);\r\n            }\r\n            else {\r\n                toast.warn(error.response.data);\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function onDeleteReleaseTestComment(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.inputData.url, {\r\n            \"releasetestcomment\" : inputParam.inputData.releasetestcomment, \"userinfo\": inputParam.inputData.userinfo\r\n        })\r\n        .then(response => {\r\n            let ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\r\n            let selectedRecord = {\r\n                ...inputParam.inputData.selectedRecord, ...response.data\r\n            };\r\n            let masterData = inputParam.inputData.masterData;\r\n            masterData[\"ReleaseTestCommentDetails\"] = ReleaseTestCommentDetails;\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    selectedRecord,\r\n                    isReleaseTestComment: true,\r\n                    loading: false,\r\n                    screenName: inputParam.inputData.screenName,\r\n                    masterData,\r\n                    loadEsignStateHandle: false\r\n                }\r\n            })\r\n        })\r\n        .catch(error => {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            if (error.response && error.response.status === 500) {\r\n                toast.error(error.message);\r\n            }\r\n            else if (error.response === undefined){\r\n                toast.error(error.message);\r\n            }\r\n            else {\r\n                toast.warn(error.response.data);\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function generatereport(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/generateReport\", inputParam.inputData)\r\n            .then(response => {\r\n                // let masterData = {\r\n                //     ...Data,\r\n                //     ...response.data,\r\n                // }\r\n                // if (response.data.rtn === \"Success\") {\r\n                //     document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\r\n                //     document.getElementById(\"download_data\").click();\r\n                // } else {\r\n                //     toast.warn(response.data.rtn);\r\n                // }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data['rtn']);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function editReportTemplate(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedReportTemplateById\", inputParam.inputData)\r\n        .then(response => {\r\n            let responseData = response.data;\r\n            let selectedRecord = inputParam.selectedRecord;\r\n            selectedRecord[\"nreporttemplatecode\"] = responseData.nreporttemplatecode;\r\n            const reportTemplateMap = constructOptionList(responseData.reportTemplateList || [], \"nreporttemplatecode\", \"sreporttemplatename\", \"nreporttemplatecode\", \r\n                    \"ascending\", false);\r\n            const reportTemplateList = reportTemplateMap.get(\"OptionList\");\r\n            let masterData = inputParam.masterData;\r\n            masterData[\"reportTemplateList\"] = reportTemplateList;\r\n            masterData[\"selectedReleaseHistory\"] = masterData.selectedReleaseHistory && masterData.selectedReleaseHistory.length > 0 && \r\n                masterData.selectedReleaseHistory.filter(item => item.ncoaparentcode === inputParam.ncoaparentcode)\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    loading: false,\r\n                    masterData,\r\n                    screenName: intl.formatMessage({ id: \"IDS_REPORTTEMPLATE\" }),\r\n                    modalTitle: intl.formatMessage({ id: \"IDS_EDITREPORTTEMPLATE\" }),\r\n                    modalShow: true,\r\n                    loadEsign: false,\r\n                    selectedRecord\r\n            }\r\n            })\r\n        })\r\n        .catch(error => {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            if (error.response.status === 500) {\r\n                toast.error(error.message);\r\n            }\r\n            else {\r\n                toast.warn(error.response.data);\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function SaveReportTemplate(inputParam){\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/updateReportTemplate\", inputParam.inputData)\r\n        .then(response => {\r\n            let masterData = inputParam.masterData;\r\n            masterData.selectedReleaseHistory[0][\"nreporttemplatecode\"] = inputParam.inputData.nreporttemplatecode;\r\n            masterData.selectedReleaseHistory[0][\"sreporttemplatename\"] = inputParam.inputData.sreporttemplatename;\r\n            masterData.ReleaseHistory.map(item => {\r\n                if(item.ncoaparentcode === inputParam.inputData.ncoaparentcode){\r\n                    item[\"nreporttemplatecode\"] = inputParam.inputData.nreporttemplatecode;\r\n                    item[\"sreporttemplatename\"] = inputParam.inputData.sreporttemplatename;\r\n                }\r\n            });\r\n            delete(inputParam.selectedRecord.nreporttemplatecode);\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    loading: false,\r\n                    masterData,\r\n                    modalShow: false,\r\n                    loadEsign: false,\r\n                    openModal: false\r\n            }\r\n            })\r\n        })\r\n        .catch(error => {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            if (error.response.status === 500) {\r\n                toast.error(error.message);\r\n            }\r\n            else {\r\n                toast.warn(error.response.data);\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function deleteSamples(inputParam, data){\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/deleteSamples\", inputParam.inputData)\r\n        .then(response => {\r\n            let masterData = {\r\n                ...data, ...response.data,\r\n            };\r\n            sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData,\r\n                    loading: false\r\n                }\r\n            });\r\n        })\r\n        .catch(error => {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            if (error.response.status === 500) {\r\n                toast.error(error.message);\r\n            }\r\n            else {\r\n                toast.warn(error.response.data);\r\n            }\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}