{"ast":null,"code":"import { toast } from 'react-toastify';\nimport rsapi from '../rsapi';\nimport { initRequest, updateStore } from './LoginAction';\nimport { DEFAULT_RETURN, REQUEST_FAILURE } from './LoginTypes';\nimport { sortData, searchData, searchJsonData, replaceUpdatedObject, constructOptionList, rearrangeDateFormat, Lims_JSON_stringify } from '../components/CommonScript';\nimport { intl } from '../components/App';\nimport { selectedDashBoardView } from './DashBoardTypeAction';\nimport Axios from \"axios\";\nimport { designComponents, transactionStatus } from '../components/Enumeration'; // import { getValidComponent } from '../components/droparea/helpers';\n//import { Engine } from 'json-rules-engine';\n//import employee from '../rules/Employee-Salary.json';\n\nexport const callService = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(inputParam.classUrl + \"/get\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      // console.log(\"res:\", response);\n      ///Start of Rule Engine code///////////////////////\n      // const decisions1 = [\n      //   {\n      //       \"conditions\": {\n      //           \"all\": [\n      //               {\n      //                   \"fact\": \"Designation\",\n      //                   \"operator\": \"equal\",\n      //                   \"value\": \"Manager\"\n      //               },\n      //               {\n      //                   \"fact\": \"Experience\",\n      //                   \"operator\": \"greaterThan\",\n      //                   \"value\": 10\n      //               }\n      //           ]\n      //       },\n      //       \"event\": {\n      //           \"type\": \"RS.1500000\",\n      //           \"params\": {message: 'Your Salary is 1500000/annum!'}\n      //       }\n      //   }\n      // ];\n      // console.log(\"decisions:\",decisions1);  \n      // const inputs1 = {Designation: 'Manager', Experience: 9 };\n      // const engine = new Engine(employee.decisions);   \n      // engine.run(inputs1)\n      // .then(results => {       \n      //   console.log(\"Rule output:\", results.events);\n      //   if ( results.events.length > 0){\n      //     const events = results.events;\n      //     events.map(event => console.log(\"Message:\",event.params.message)); \n      //     rsapi.post(\"section/getSection\" , inputParam.inputData)\n      //     .then(response => {\n      //       console.log(\"data:\", response);\n      //       let data = response.data;\n      //       sortData(data);\n      //       const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: { masterData: [], organisation: undefined, }\n      //       }\n      //       dispatch(updateStore(updateInfo))\n      //       dispatch({\n      //         type: DEFAULT_RETURN,\n      //         payload: {\n      //           masterData: data,\n      //           activeTestTab: data.activeTestTab,\n      //           activeTestKey: data.activeTestKey,\n      //           activeBCTab: data.activeBCTab,\n      //           inputParam: inputParam,\n      //           masterStatus: \"\",\n      //           userInfo: inputParam.inputData.userinfo,\n      //           loading: false, selectedId: null, selectedRecord: {},\n      //           dataState: undefined,\n      //           organisation: {\n      //             selectedNode: data.SelectedNode, selectedNodeName: data.SelectedNodeName,\n      //             primaryKeyValue: data.AddedChildPrimaryKey\n      //           },\n      //           displayName: inputParam.displayName,\n      //           reportFilePath: undefined\n      //         }\n      //       })\n      //     })\n      //     .catch(error => {\n      //       if (error.response === undefined && error === \"Network Error\") {\n      //         dispatch({\n      //           type: REQUEST_FAILURE,\n      //           payload: {\n      //             error: \"Network Error\",\n      //             loading: false,\n      //           }\n      //         });\n      //       } else if (error.response.status === 417) {\n      //         toast.warning(error.response.data);\n      //         dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } });\n      //       } else {\n      //         dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } })\n      //       }\n      //     })\n      //   }\n      //   else{\n      //     console.log(\"Message:\",\"Rules Failed\");\n      //     dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } });\n      //   }         \n      // })\n      ///End of Rule Engine code///////////////////////\n      ////uncomment below for Orginial Source start////////////////////\n      if (response.data[\"Success\"]) {\n        toast.warn(response.data.Success);\n      }\n\n      let data = response.data;\n      sortData(data);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData: [],\n          organisation: undefined\n        }\n      };\n      dispatch(updateStore(updateInfo));\n\n      if (response.data.rtn == \"IDS_USERNOTINRESULTENTRYFLOW\") {\n        toast.warning(intl.formatMessage({\n          id: \"IDS_USERNOTINRESULTENTRYFLOW\"\n        }));\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: data,\n          activeTestTab: data.activeTestTab,\n          activeTestKey: data.activeTestKey,\n          activeBCTab: data.activeBCTab,\n          inputParam: inputParam,\n          masterStatus: \"\",\n          userInfo: inputParam.inputData.userinfo,\n          loading: false,\n          selectedId: null,\n          selectedRecord: {},\n          dataState: undefined,\n          organisation: {\n            selectedNode: data.SelectedNode,\n            selectedNodeName: data.SelectedNodeName,\n            primaryKeyValue: data.AddedChildPrimaryKey\n          },\n          displayName: inputParam.displayName,\n          reportFilePath: undefined,\n          skip: 0,\n          take: undefined,\n          testskip: 0,\n          //testtake: 5,\n          testtake: inputParam.inputData.settings ? inputParam.inputData.settings[12] : 10 //  key:inputParam.key!==undefined?inputParam.key:\"\"\n\n        }\n      }); ///Uncomment till above for original source\n    }).catch(error => {\n      //console.log(\"error:\", error);\n      if (error.response === undefined && error === \"Network Error\") {\n        dispatch({\n          type: REQUEST_FAILURE,\n          payload: {\n            error: \"Network Error\",\n            loading: false\n          }\n        });\n      } else if (error.response.status === 417) {\n        toast.warning(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            displayName: inputParam.displayName,\n            userInfo: inputParam.inputData.userinfo\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            displayName: inputParam.displayName,\n            userInfo: inputParam.inputData.userinfo\n          }\n        });\n      }\n    });\n  };\n}; //Start- Add /Edit/Delete Master Data\n\nexport function crudMaster(inputParam, masterData, modalName, defaultInput) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let requestUrl = '';\n\n    if (inputParam.isFileupload) {\n      const formData = inputParam.formData;\n      formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\n      requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, formData);\n    } else {\n      requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData\n      });\n    }\n\n    return requestUrl.then(response => {\n      if (response.status === 202) {\n        //HttpStatus:Accepted\n        //Use this block when u need to display any success message\n        let selectedRecordObj = {};\n\n        if (inputParam.selectedRecord) {\n          selectedRecordObj = {\n            selectedRecord: inputParam.selectedRecord\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loadEsign: false,\n            [modalName]: false,\n            loading: false,\n            ...selectedRecordObj\n          }\n        });\n        toast.success(response.data);\n      } else if (response.status === 208) {\n        //HttpStatus:Accepted\n        //208-Already Reported\n        let selectedRecordObj = {};\n\n        if (inputParam.selectedRecord) {\n          selectedRecordObj = {\n            selectedRecord: inputParam.selectedRecord\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loadEsign: false,\n            [modalName]: false,\n            loading: false,\n            ...selectedRecordObj\n          }\n        });\n        toast.warn(response.data);\n      } else {\n        const retrievedData = sortData(response.data);\n\n        if (masterData === undefined || Array.isArray(retrievedData)) {\n          masterData = retrievedData;\n        } else {\n          masterData = { ...masterData,\n            ...retrievedData\n          };\n\n          if (modalName === \"openModal\" && inputParam.operation !== \"delete\" && inputParam.operation !== \"prepare\" && inputParam.operation !== \"create\" && inputParam.operation !== \"copy\") {\n            if (inputParam.postParam) {\n              if (masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]) {\n                const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]);\n                masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\n              } else {\n                const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][0][inputParam.postParam.primaryKeyField]);\n                masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject][0];\n              }\n            }\n          } else if (modalName === \"openModal\" && inputParam.operation === \"create\") {\n            if (inputParam.postParam && inputParam.postParam.isSingleGet) {\n              masterData[inputParam.postParam.inputListName].push(response.data[inputParam.postParam.selectedObject]); //masterData[inputParam.postParam.selectedObject] = response.data;\n\n              sortData(masterData);\n            }\n          } else if (modalName === \"openChildModal\" && inputParam.operation === \"create\") {\n            //searchedData\n            if (inputParam.postParam && inputParam.postParam.isSingleGet) {\n              const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]);\n              masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\n\n              if (masterData[\"searchedData\"] !== undefined) {\n                const foundIndex = masterData[\"searchedData\"].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]);\n                masterData[\"searchedData\"][foundIndex] = masterData[inputParam.postParam.selectedObject];\n              }\n\n              sortData(masterData);\n            }\n          } else if (modalName === \"openModal\" && inputParam.operation === \"copy\") {\n            if (inputParam.postParam && inputParam.postParam.isSingleGet) {\n              masterData[inputParam.postParam.inputListName].push(response.data[inputParam.postParam.selectedObject]);\n              masterData = { ...masterData,\n                ...response.data\n              };\n              sortData(masterData);\n            }\n          } else if (modalName === \"openModal\" && (inputParam.operation === \"delete\" || inputParam.operation === \"prepare\")) {\n            if (inputParam.postParam && inputParam.postParam.isSingleGet) {\n              if (inputParam.postParam.task === \"cancel\") {\n                const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]);\n                masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\n              } else {\n                const list = masterData[inputParam.postParam.inputListName].filter(item => item[inputParam.postParam.primaryKeyField] !== inputParam.postParam.primaryKeyValue);\n                masterData[inputParam.postParam.inputListName] = list; // const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\n                //   x => x[inputParam.postParam.primaryKeyField] === inputParam.postParam.primaryKeyField\n                // );\n                // masterData[inputParam.postParam.inputListName].splice(foundIndex, 1)         \n              }\n\n              masterData = { ...masterData,\n                ...response.data\n              };\n              sortData(masterData);\n            }\n          }\n        } // (masterData);\n\n\n        let openModal = false; // let openChildModal= false;\n\n        let selectedRecord = {};\n        let activeSampleTab = inputParam.activeSampleTab ? {\n          activeSampleTab: inputParam.activeSampleTab\n        } : '';\n        let activeTestKey = inputParam.activeTestKey ? {\n          activeTestKey: inputParam.activeTestKey\n        } : '';\n        let showSample = inputParam.showSample ? inputParam.showSample : '';\n        let respObject = {\n          masterData,\n          inputParam,\n          modalName,\n          //   openChildModal,\n          //modalName:undefined,\n          [modalName]: openModal,\n          operation: inputParam.operation,\n          masterStatus: \"\",\n          errorCode: undefined,\n          loadEsign: false,\n          showEsign: false,\n          selectedRecord,\n          loading: false,\n          dataState: inputParam.dataState,\n          selectedId: inputParam.selectedId,\n          ...activeSampleTab,\n          ...activeTestKey,\n          showSample,\n          design: [],\n          //organisation: undefined\n          organisation: inputParam.nextNode ? {\n            selectedNode: inputParam.nextNode,\n            selectedNodeName: masterData.SelectedNodeName,\n            primaryKeyValue: masterData.AddedChildPrimaryKey\n          } : undefined,\n          showConfirmAlert: inputParam.showConfirmAlert,\n          loadPoolSource: inputParam.loadPoolSource,\n          skip: inputParam.skip || undefined,\n          take: inputParam.take || undefined,\n          openPortal: false\n        };\n\n        if (inputParam.operation === \"create\" || inputParam.operation === \"copy\") {\n          if (inputParam.saveType === 2) {\n            openModal = true;\n            selectedRecord = defaultInput;\n          }\n\n          respObject = { ...respObject,\n            [modalName]: openModal,\n            selectedRecord\n          };\n        }\n\n        if ((modalName === \"openModal\" || modalName === \"openChildModal\") && Object.keys(masterData).indexOf(\"searchedData\") !== -1 && masterData[\"searchedData\"] !== undefined) {\n          dispatch(postCRUDOrganiseSearch(inputParam.postParam, respObject));\n        } else {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...respObject,\n              modalName: undefined\n            }\n          });\n        }\n      }\n    }).catch(response => {\n      console.log(\"error:\", response);\n\n      if (response.response.status === 500) {\n        dispatch({\n          type: REQUEST_FAILURE,\n          payload: {\n            error: response.message,\n            loading: false // openPortal:this.props.Login.openPortal,\n            //openModal:inputParam.openPortal?false:true\n\n          }\n        });\n      } else {\n        let obj = {};\n\n        if (inputParam.openPortal === true) {\n          obj = {\n            openModal: false\n          };\n        }\n\n        let selectedRecordObj = {};\n\n        if (inputParam.selectedRecord) {\n          selectedRecordObj = {\n            selectedRecord: inputParam.selectedRecord\n          };\n        }\n\n        if (inputParam.operation === \"delete\" || inputParam.operation === \"prepare\" || inputParam.operation === \"receive\" || inputParam.operation === 'approve' || inputParam.operation === 'Approve' || inputParam.operation === \"correction\" || inputParam.operation === \"complete\" || inputParam.operation === \"dynamic\" || inputParam.operation === \"setDefault\" || inputParam.operation === \"reset\" || inputParam.operation === \"retire\" || inputParam.operation === \"xml\" || inputParam.operation === 'blackList' || inputParam.operation === 'attendance' || inputParam.operation === 'certified' || inputParam.operation === 'competent' || inputParam.operation === \"invite\" || inputParam.operation === \"cancel\" || inputParam.operation === \"cancel\" || inputParam.operation === \"conduct\" || inputParam.operation === \"attend\" || inputParam.operation === \"certify\" || inputParam.operation === \"Competent\" || inputParam.operation === \"Create\" || inputParam.operation === \"check\") {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterStatus: response.response.data,\n              errorCode: response.response.status,\n              loadEsign: false,\n              [modalName]: false,\n              loading: false,\n              openPortal: false,\n              ...selectedRecordObj\n            }\n          });\n        } else {\n          // console.log('dispatch',obj)\n          if (inputParam.selectedRecord) {\n            selectedRecordObj = {\n              selectedRecord: inputParam.selectedRecord\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterStatus: response.response.data,\n              errorCode: response.response.status,\n              loadEsign: false,\n              loading: false,\n              ...obj,\n              ...selectedRecordObj\n            }\n          });\n        }\n      }\n    });\n  };\n}\nexport const validateEsignCredential = (inputParam, modalName) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n\n    if (inputParam && inputParam.inputData && inputParam.inputData.userinfo) {\n      inputParam.inputData[\"userinfo\"] = { ...inputParam.inputData.userinfo,\n        sformname: Lims_JSON_stringify(inputParam.inputData.userinfo.sformname),\n        smodulename: Lims_JSON_stringify(inputParam.inputData.userinfo.smodulename)\n      };\n    }\n\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = inputParam[\"screenData\"][\"inputParam\"][\"methodUrl\"];\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n\n          if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n          } // ALPD-2437 added for Type3 Component. Use selected record to clear esign values\n\n\n          if (inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"]) {\n            delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignreason\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignpassword\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esigncomments\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"agree\"];\n          }\n        }\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] && inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"sync\") {\n          dispatch(syncAction(inputParam[\"screenData\"][\"inputParam\"]));\n        } else {\n          dispatch(crudMaster(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"], modalName));\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const fetchRecord = fetchRecordParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    const url = fetchRecordParam.inputParam.classUrl + \"/getActive\" + fetchRecordParam.inputParam.methodUrl + \"ById\";\n    rsapi.post(url, {\n      [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue,\n      \"userinfo\": fetchRecordParam.userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: response.data,\n          screenName: fetchRecordParam.screenName,\n          operation: fetchRecordParam.operation,\n          openModal: true,\n          ncontrolCode: fetchRecordParam.ncontrolCode,\n          loading: false,\n          selectedId: fetchRecordParam.primaryKeyValue\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport function filterColumnData(filterValue, filterParam) {\n  return function (dispatch) {\n    let masterData = filterParam.masterData;\n    let primaryKeyValue = 0;\n    let searchedData = undefined;\n\n    if (filterValue === \"\") {\n      if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\n        // if(filterParam.isjsondata)\n        // {\n        //    primaryKeyValue = masterData[filterParam.inputListName][0][\"jsondata\"][filterParam.primaryKeyField]\n        //  }\n        //else\n        // {\n        primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField]; // }\n      }\n    } else {\n      if (filterParam.isjsondata) {\n        searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n      } else {\n        searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n      }\n\n      if (searchedData.length > 0) {\n        //  if(filterParam.isjsondata)\n        // {\n        //  primaryKeyValue = searchedData[0][\"jsondata\"][filterParam.primaryKeyField];\n        //  }\n        // else{\n        primaryKeyValue = searchedData[0][filterParam.primaryKeyField]; //  }\n      }\n    }\n\n    if (primaryKeyValue !== 0) {\n      dispatch(initRequest(true));\n      return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject,\n        [filterParam.primaryKeyField]: primaryKeyValue\n      }).then(response => {\n        masterData[\"searchedData\"] = searchedData;\n        masterData = { ...masterData,\n          ...response.data\n        };\n\n        if (filterParam.inputListName === \"DashBoardView\") {\n          dispatch(selectedDashBoardView(response, masterData));\n        } else {\n          if (filterParam.sortField) {\n            sortData(masterData, filterParam.sortOrder, filterParam.sortField);\n          } else {\n            sortData(masterData);\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              loading: false,\n              skip: 0,\n              take: 10,\n              selectedId: null\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      masterData[filterParam.selectedObject] = undefined;\n      masterData[\"searchedData\"] = [];\n      Object.keys(masterData).forEach(item => {\n        if (item !== filterParam.inputListName && item !== filterParam.selectedObject && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1) masterData[item] = [];\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function postCRUDOrganiseSearch(postParam, respObject) {\n  return function (dispatch) {\n    let masterData = respObject.masterData;\n\n    if (respObject.inputParam.operation === \"create\" || respObject.inputParam.operation === \"copy\") {\n      if (respObject.modalName === \"openModal\") {\n        if (respObject.inputParam.isChild === undefined) {\n          respObject.inputParam.searchRef.current.value = \"\";\n          masterData[\"searchedData\"] = undefined;\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...respObject,\n          masterData,\n          modalName: undefined\n        }\n      });\n    } else if (respObject.inputParam.operation === \"delete\" || respObject.inputParam.operation === \"prepare\") {\n      if (masterData[\"searchedData\"] !== undefined && respObject.modalName === \"openModal\") {\n        let temp = masterData[\"searchedData\"];\n        let primaryKeyValue = respObject.masterData[\"searchedData\"][0][postParam.primaryKeyField];\n\n        if (respObject.inputParam.isChild === undefined) {\n          temp = masterData[\"searchedData\"].filter(item => Array.isArray(postParam.primaryKeyValue) ? !postParam.primaryKeyValue.includes(item[postParam.primaryKeyField]) : item[postParam.primaryKeyField] !== postParam.primaryKeyValue);\n          primaryKeyValue = temp.length > 0 ? temp[0][postParam.primaryKeyField] : 0;\n        } else {\n          primaryKeyValue = masterData[postParam.selectedObject][postParam.primaryKeyField];\n        }\n\n        masterData[\"searchedData\"] = temp;\n        respObject = { ...respObject,\n          modalName: undefined\n        };\n\n        if (masterData[\"searchedData\"].length > 0) {\n          primaryKeyValue = masterData[\"searchedData\"][0][postParam.primaryKeyField];\n          return rsapi.post(postParam.fetchUrl, { ...postParam.fecthInputObject,\n            [postParam.primaryKeyField]: primaryKeyValue\n          }).then(response => {\n            masterData = { ...masterData,\n              ...response.data\n            };\n            sortData(masterData);\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: { ...respObject,\n                masterData\n              }\n            });\n          }).catch(error => {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: { ...respObject\n              }\n            });\n\n            if (error.response.status === 500) {\n              toast.error(intl.formatMessage({\n                id: error.message\n              }));\n            } else {\n              toast.warn(intl.formatMessage({\n                id: error.response.data\n              }));\n            }\n          });\n        } else {\n          masterData[postParam.selectedObject] = undefined;\n          masterData[\"searchedData\"] = [];\n          Object.keys(masterData).forEach(item => {\n            if (item !== postParam.inputListName && item !== postParam.selectedObject && postParam.unchangeList && postParam.unchangeList.indexOf(item) === -1) masterData[item] = [];\n          });\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...respObject,\n              masterData\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...respObject,\n            masterData,\n            modalName: undefined\n          }\n        });\n      }\n    } else if (respObject.inputParam.filtercombochange) {\n      respObject = { ...respObject,\n        modalName: undefined\n      };\n\n      if (masterData[\"searchedData\"] !== undefined) {\n        masterData[\"searchedData\"] = undefined;\n        respObject.inputParam.searchRef.current.value = \"\";\n      }\n\n      let Map = {};\n\n      if (postParam.selectedComboName !== undefined) {\n        Map = {\n          [postParam.selectedComboName]: {\n            [postParam.selectedComboId]: postParam.selectedCombo\n          }\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...respObject,\n          masterData,\n          ...Map\n        }\n      });\n    } else {\n      respObject = { ...respObject,\n        modalName: undefined\n      };\n\n      if (masterData[\"searchedData\"] !== undefined) {\n        if (masterData[postParam.selectedObject][postParam.primaryKeyField]) {\n          const foundIndex = masterData[\"searchedData\"].findIndex(x => x[postParam.primaryKeyField] === masterData[postParam.selectedObject][postParam.primaryKeyField]);\n          masterData[\"searchedData\"][foundIndex] = masterData[postParam.selectedObject];\n        } else {\n          const foundIndex = masterData[\"searchedData\"].findIndex(x => x[postParam.primaryKeyField] === masterData[postParam.selectedObject][0][postParam.primaryKeyField]);\n          masterData[\"searchedData\"][foundIndex] = masterData[postParam.selectedObject][0];\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...respObject,\n          masterData\n        }\n      });\n    }\n  };\n}\nexport const viewAttachment = inputParam => {\n  return dispatch => {\n    let inputData = { ...inputParam.inputData\n    };\n\n    if (inputData['selectedRecord']) {\n      delete inputData['selectedRecord']['expanded'];\n    }\n\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      let value = \"\";\n\n      if (response.data[\"AttachFile\"]) {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\n        document.getElementById(\"download_data\").click();\n      } else if (response.data[\"AttachLink\"]) {\n        value = response.data[\"AttachLink\"];\n        var win = window.open(value, '_blank');\n\n        if (win) {\n          win.focus();\n        } else {\n          intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\n        }\n      } else {\n        if (response.data[\"rtn\"]) {\n          toast.warn(intl.formatMessage({\n            id: response.data.rtn\n          }));\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport function filterTransactionList(filterValue, filterParam, filteredListName, param) {\n  return function (dispatch) {\n    let masterData = filterParam.masterData;\n    filteredListName = filteredListName || \"searchedData\";\n    let primaryKeyValue = 0;\n    let searchedData = undefined;\n    let selectedData = [];\n    filterParam.childRefs && filterParam.childRefs.map(childref => {\n      if (childref.ref !== undefined && childref.ref.current !== null) {\n        childref.ref.current.value = \"\";\n        masterData[childref.childFilteredListName] = undefined;\n      }\n\n      return null;\n    });\n\n    if (filterValue === \"\") {\n      if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\n        primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\n        selectedData.push(masterData[filterParam.inputListName][0]);\n      }\n    } else {\n      if (masterData[filterParam.inputListName]) {\n        searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n      } else {\n        searchedData = [];\n      }\n\n      if (searchedData.length > 0) {\n        primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\n        selectedData.push(searchedData[0]);\n      }\n    }\n\n    if (primaryKeyValue !== 0) {\n      primaryKeyValue = filterParam.isSingleSelect ? primaryKeyValue : String(primaryKeyValue);\n      dispatch(initRequest(true));\n      return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject,\n        [filterParam.primaryKeyField]: primaryKeyValue\n      }).then(response => {\n        const dataState = {\n          skip: 0,\n          take: 10\n        };\n        masterData[filteredListName] = searchedData;\n        masterData[filterParam.selectedObject] = selectedData;\n        masterData = { ...masterData,\n          ...response.data\n        };\n\n        if (filterParam.isSortable) {\n          sortData(masterData[filterParam.sortList], 'descending', filterParam.sortValue);\n        }\n\n        if (filterParam.isMultiSort) {\n          filterParam.multiSortData.forEach(item => {\n            sortData(masterData[item.list], 'descending', item.pkey);\n          });\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            // skip: 0, take: 10, testskip: 0, testtake: 10,dataState \n            skip: filterParam.skip,\n            take: filterParam.take,\n            sampleskip: filterParam.sampleskip,\n            sampletake: filterParam.sampletake,\n            subsampleskip: filterParam.subsampleskip,\n            subsampletake: filterParam.subsampletake,\n            testskip: filterParam.testskip,\n            testtake: filterParam.testtake,\n            dataState\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      masterData[filterParam.selectedObject] = undefined;\n      masterData[filteredListName] = [];\n      filterParam.changeList.map(name => masterData[name] = []);\n      param.map(item => masterData[item] = []); // Object.keys(masterData).forEach(item=> {\n      //   if (item !== filterParam.inputListName && item !== filterParam.selectedObject \n      //     && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) ===-1)\n      //       masterData[item] = [];\n      //   })   \n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function postCRUDOrganiseTransSearch(postParamList, respObject) {\n  return function (dispatch) {\n    let masterData = respObject.masterData;\n    postParamList && Array.isArray(postParamList) && postParamList.map((postParam, index) => {\n      if (postParam.clearFilter === 'yes') {\n        if (postParam.searchRef.current) {\n          postParam.searchRef.current.value = \"\";\n        }\n\n        masterData[postParam.filteredListName] = undefined;\n        postParam.childRefs && postParam.childRefs.map(childref => {\n          if (childref.ref !== undefined && childref.ref.current !== null) {\n            childref.ref.current.value = \"\";\n            masterData[childref.childFilteredListName] = undefined;\n          }\n\n          return null;\n        });\n      }\n\n      if (Object.keys(masterData).indexOf(postParam.filteredListName) !== -1 && masterData[postParam.filteredListName] !== undefined) {\n        if (postParam.clearFilter === 'check') {\n          if (masterData[postParam.filteredListName] !== undefined) {\n            const temp = masterData[postParam.filteredListName].filter(item => !Array.isArray(postParam.primaryKeyValue) ? postParam.primaryKeyValue : postParam.primaryKeyValue.includes(item[postParam.primaryKeyField]));\n            masterData[postParam.filteredListName] = temp;\n\n            if (masterData[postParam.filteredListName].length > 0) {\n              return rsapi.post(postParam.fetchUrl, { ...postParam.fecthInputObject.fecthInputObject,\n                [postParam.primaryKeyField]: String(respObject.masterData[postParam.filteredListName][0][postParam.primaryKeyField])\n              }).then(response => {\n                masterData = { ...masterData,\n                  ...response.data\n                };\n              });\n            }\n          }\n        } else {\n          if (masterData[postParam.filteredListName] !== undefined) {\n            masterData[postParam.filteredListName] = replaceUpdatedObject(masterData[postParam.updatedListname], masterData[postParam.filteredListName], postParam.primaryKeyField);\n          }\n        }\n      }\n\n      return null;\n    }); //sortData(masterData);\n\n    dispatch({\n      type: DEFAULT_RETURN,\n      payload: { ...respObject,\n        masterData\n      }\n    });\n  };\n}\nexport function showUnderDevelopment() {\n  return function (dispatch) {\n    toast.info(intl.formatMessage({\n      id: \"IDS_UNDERDEVELOPMENT\"\n    }));\n  };\n} //Fetch record when clicking add button in Type3Component\n// export function onComboLoad(operation, userInfo, inputParam, ncontrolCode, extractedColumnList,IntegrationSettings) {\n//   return function (dispatch) {\n//     dispatch(initRequest(true));\n//     let urlArray = [];\n//     extractedColumnList.map(item=>{\n//       if(item.elnget){\n//         //urlArray.push(rsapi.post(\"https://logilabelntest.azurewebsites.net\"+\"/\"+item.classUrl+\"/\"+item.methodUrl,{}))\n//         urlArray.push(rsapi.post(IntegrationSettings[0].slinkname+\"/\"+item.classUrl+\"/\"+item.methodUrl,{}))\n//       }\n//       else{\n//         urlArray.push(rsapi.post(item.classUrl+\"/\"+item.methodUrl, { userinfo: userInfo }))\n//       }\n//     }\n//       )\n//           Axios.all(urlArray)\n//               .then(response => {\n//                 let ComboFieldData = [];\n//                 let dataList = [];\n//                     extractedColumnList.map((item, index)=> {\n//                       if(item.ndesigncomponentcode == designComponents.COMBOBOX){\n//                         ComboFieldData = constructOptionList(item.objectValue === null ? response[index].data || [] : response[index].data[item.objectValue], item.foreignDataField,\n//                                 item.dataField, undefined, undefined, undefined);\n//                            dataList[item.dataField] = ComboFieldData.get(\"OptionList\");\n//                       }\n//     extractedColumnList.map(item =>\n//       urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, { userinfo: userInfo }))\n//     )\n//     Axios.all(urlArray)\n//       .then(response => {\n//         let ComboFieldData = [];\n//         let dataList = [];\n//         extractedColumnList.map((item, index) => {\n//           if (item.ndesigncomponentcode == designComponents.COMBOBOX) {\n//             ComboFieldData = constructOptionList(item.objectValue === null ? response[index].data || [] : response[index].data[item.objectValue], item.foreignDataField,\n//               item.dataField, undefined, undefined, undefined);\n//             dataList[item.dataField] = ComboFieldData.get(\"OptionList\");\n//           }\n//         });\n//         dispatch({\n//           type: DEFAULT_RETURN,\n//           payload: {\n//             dataList,\n//             operation,\n//             screenName: inputParam.displayName,\n//             openModal: true,\n//             ncontrolCode, loading: false\n//           }\n//         })\n//       })\n//       .catch(error => {\n//         dispatch(initRequest(false));\n//         if (error.response.status === 500) {\n//           toast.error(error.message);\n//         } else {\n//           toast.warn(intl.formatMessage({\n//             id: error.response.data\n//           }));\n//         }\n//       })\n//   }\n// }\n//Fetch record when clicking add button in Type3Component\n\nexport function onComboLoad(operation, userInfo, inputParam, ncontrolCode, extractedColumnList, IntegrationSettings) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    extractedColumnList.map(item => {\n      if (item.ndesigncomponentcode !== designComponents.CHECKBOX) {\n        if (item.elnget) {\n          //urlArray.push(rsapi.post(\"https://logilabelntest.azurewebsites.net\"+\"/\"+item.classUrl+\"/\"+item.methodUrl,{}))\n          urlArray.push(rsapi.post(IntegrationSettings[0].slinkname + \"/\" + item.classUrl + \"/\" + item.methodUrl, {}));\n        } else {\n          urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, {\n            userinfo: userInfo\n          }));\n        }\n      }\n    });\n    Axios.all(urlArray).then(response => {\n      let ComboFieldData = [];\n      let dataList = [];\n      let selectedRecord = {};\n      extractedColumnList.map((item, index) => {\n        if (item.ndesigncomponentcode == designComponents.COMBOBOX) {\n          ComboFieldData = constructOptionList(item.objectValue === null ? response[index].data || [] : response[index].data[item.objectValue], item.foreignDataField, item.dataField, undefined, undefined, undefined);\n          dataList[item.dataField] = ComboFieldData.get(\"OptionList\");\n        } else if (item.ndesigncomponentcode === designComponents.CHECKBOX && item.defaultvalue) {\n          selectedRecord[item.controlName] = transactionStatus.YES;\n        }\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          dataList,\n          operation,\n          screenName: inputParam.displayName,\n          openModal: true,\n          ncontrolCode,\n          loading: false,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch(initRequest(false));\n\n      if (error.response !== undefined && error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else if (error.response === undefined) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n} //Fetch record when clicking edit button in Type3Component\n\nexport const fetchRecordCombo = fetchRecordParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const url = fetchRecordParam.inputParam.classUrl + \"/getActive\" + fetchRecordParam.inputParam.methodUrl + \"ById\";\n    urlArray.push(rsapi.post(url, {\n      [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue,\n      \"userinfo\": fetchRecordParam.userInfo\n    }));\n    fetchRecordParam.extractedColumnList.map(item => {\n      if (item.elnget) {\n        urlArray.push(rsapi.post(fetchRecordParam.integrationSettings[0].slinkname + \"/\" + item.classUrl + \"/\" + item.methodUrl, {}));\n      } else if (item.classUrl && item.methodUrl) {\n        if (item.parentPrimaryField && item.parentPrimaryField !== null) {\n          urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, {\n            [item.foreignDataField]: fetchRecordParam.editRow[item.foreignDataField],\n            [item.parentPrimaryField]: fetchRecordParam.editRow[item.parentPrimaryField] || undefined,\n            \"userinfo\": fetchRecordParam.userInfo\n          }));\n        } else {\n          urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, {\n            [item.foreignDataField]: fetchRecordParam.editRow[item.foreignDataField],\n            \"userinfo\": fetchRecordParam.userInfo\n          }));\n        } // urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, {[item.parentPrimaryField]: fetchRecordParam.editRow.nprojecttypecode , \"userinfo\": fetchRecordParam.userInfo}))\n\n      }\n    });\n    Axios.all(urlArray).then(response => {\n      let ComboFieldData = [];\n      let dataList = [];\n      let selectedRecordData = { ...response[0].data\n      };\n      let responseData = [...response];\n      let extractedColumnData = [];\n      responseData.splice(0, 1);\n      fetchRecordParam.extractedColumnList.map(item => {\n        if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n          extractedColumnData.push(item);\n\n          if (!item.hideNARecord || selectedRecordData[item.tableDataField] !== -1) {\n            selectedRecordData[item.dataField] = {\n              value: selectedRecordData[item.foreignDataField],\n              label: selectedRecordData[item.dataField]\n            };\n          }\n        } else if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n          selectedRecordData[item.dataField] = rearrangeDateFormat(fetchRecordParam.userInfo, selectedRecordData[item.dataField]);\n        }\n      });\n      extractedColumnData.map((field, index) => {\n        responseData.map((item, indexValue) => {\n          if (index === indexValue) {\n            if (field.classUrl === 'limselnusermapping' && field.methodUrl === 'getLimsUsers' || field.classUrl === 'limselnsitemapping' && field.methodUrl === 'getLimsSite') {\n              responseData[index].data.push(response[0].data);\n            }\n\n            ComboFieldData = constructOptionList(field.objectValue === null ? responseData[index].data || [] : responseData[index].data[field.objectValue], field.foreignDataField, field.dataField, undefined, undefined, undefined);\n            dataList[field.dataField] = ComboFieldData.get(\"OptionList\");\n          }\n        });\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: selectedRecordData,\n          screenName: fetchRecordParam.screenName,\n          operation: fetchRecordParam.operation,\n          openModal: true,\n          ncontrolCode: fetchRecordParam.ncontrolCode,\n          loading: false,\n          selectedId: fetchRecordParam.primaryKeyValue,\n          dataList\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response !== undefined && error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else if (error.response === undefined) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}; //Fetch record when clicking edit button in Type3Component\n// export const fetchRecordCombo = (fetchRecordParam) => {\n//   return (dispatch) => {\n//     dispatch(initRequest(true));\n//     let urlArray = [];\n//     const url = fetchRecordParam.inputParam.classUrl + \"/getActive\" + fetchRecordParam.inputParam.methodUrl + \"ById\";\n//     urlArray.push(rsapi.post(url, { [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo }));\n//     fetchRecordParam.extractedColumnList.map(item => {\n//       if(item.classUrl && item.methodUrl){\n//         if(item.elnget){\n//           urlArray.push(rsapi.post(\"https://logilabelntest.azurewebsites.net\"+\"/\"+item.classUrl+\"/\"+item.methodUrl,{}))\n//         }\n//         else{\n//           urlArray.push(rsapi.post(item.classUrl+\"/\"+item.methodUrl, { \"userinfo\" : fetchRecordParam.userInfo }))\n//         }\n//         //urlArray.push(rsapi.post(item.classUrl+\"/\"+item.methodUrl, { \"userinfo\" : fetchRecordParam.userInfo }))\n//       if (item.classUrl && item.methodUrl) {\n//         urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, { \"userinfo\": fetchRecordParam.userInfo }))\n//       }\n//     });\n//     Axios.all(urlArray)\n//       .then(response => {\n//       fetchRecordParam.extractedColumnList.map((item) => {\n//         if(item.ndesigncomponentcode === designComponents.COMBOBOX){\n//           extractedColumnData.push(item);\n//           selectedRecordData[item.dataField] = {\n//             value:selectedRecordData[item.foreignDataField],\n//             label:selectedRecordData[item.dataField]\n//           }                      \n//         }\n//         else if(item.ndesigncomponentcode === designComponents.DATEPICKER){\n//           selectedRecordData[item.dataField] = rearrangeDateFormat(fetchRecordParam.userInfo, selectedRecordData[item.dataField]);\n//         }\n//       })\n//       extractedColumnData.map((field, index) => {\n//         responseData.map((item, indexValue) => {\n//           if(index === indexValue){\n//             if(field.classUrl==='limselnusermapping'&&field.methodUrl==='getLimsUsers'){\n//             responseData[index].data.push(response[0].data);}\n//             ComboFieldData = constructOptionList(field.objectValue === null ? responseData[index].data || [] : responseData[index].data[field.objectValue], field.foreignDataField,\n//               field.dataField, undefined, undefined, undefined);\n//          dataList[field.dataField] = ComboFieldData.get(\"OptionList\");\n//         let ComboFieldData = [];\n//         let dataList = [];\n//         let selectedRecordData = { ...response[0].data };\n//         let responseData = [...response];\n//         let extractedColumnData = [];\n//         responseData.splice(0, 1);\n//         fetchRecordParam.extractedColumnList.map((item) => {\n//           if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n//             extractedColumnData.push(item);\n//             selectedRecordData[item.dataField] = {\n//               value: selectedRecordData[item.foreignDataField],\n//               label: selectedRecordData[item.dataField]\n//             }\n//           }\n//           else if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n//             selectedRecordData[item.dataField] = rearrangeDateFormat(fetchRecordParam.userInfo, selectedRecordData[item.dataField]);\n//           }\n//         })\n//         extractedColumnData.map((field, index) => {\n//           responseData.map((item, indexValue) => {\n//             if (index === indexValue) {\n//               ComboFieldData = constructOptionList(field.objectValue === null ? responseData[index].data || [] : responseData[index].data[field.objectValue], field.foreignDataField,\n//                 field.dataField, undefined, undefined, undefined);\n//               dataList[field.dataField] = ComboFieldData.get(\"OptionList\");\n//             }\n//           })\n//         });\n//         dispatch({\n//           type: DEFAULT_RETURN,\n//           payload: {\n//             selectedRecord: selectedRecordData,\n//             screenName: fetchRecordParam.screenName,\n//             operation: fetchRecordParam.operation,\n//             openModal: true,\n//             ncontrolCode: fetchRecordParam.ncontrolCode,\n//             loading: false,\n//             selectedId: fetchRecordParam.primaryKeyValue,\n//             dataList\n//           }\n//         });\n//       })\n//       .catch(error => {\n//         dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//         if (error.response.status === 500) {\n//           toast.error(intl.formatMessage({ id: error.message }));\n//         } else {\n//           toast.warn(intl.formatMessage({ id: error.response.data }));\n//         }\n//       })\n//   }\n// }\n\nexport function onServiceLoad(userInfo, inputParam, ncontrolCode, comboColumnField, primarykeyvalue, inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    comboColumnField.map(item => {\n      urlArray.push(rsapi.post(item.classUrl + \"/\" + item.onChangeUrl, {\n        userinfo: userInfo,\n        [item.tableDataField]: primarykeyvalue[item.tableDataField],\n        \"parentPrimaryField\": inputData.selectedRecord[item.parentPrimaryField]\n      }));\n    } //dependentParentPrimaryField into parentPrimaryField\n    );\n    Axios.all(urlArray).then(response => {\n      let ComboFieldData = [];\n      let dataList = [];\n      let selectedRecord = { ...inputData.selectedRecord\n      };\n      comboColumnField.map((item, index) => {\n        if (item.ndesigncomponentcode == designComponents.COMBOBOX) {\n          ComboFieldData = constructOptionList(item.childObjectValue === null ? response[index].data || [] : response[index].data[item.childObjectValue], item.childPrimaryField, item.childdataField, undefined, undefined, undefined);\n          dataList[item.childdataField] = ComboFieldData.get(\"OptionList\");\n          selectedRecord[item.childdataField] = undefined;\n        }\n      });\n      dataList = { ...inputData.dataList,\n        ...dataList\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          dataList,\n          //  operation,\n          screenName: inputParam.displayName,\n          openModal: true,\n          ncontrolCode,\n          loading: false,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch(initRequest(false));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function dynamicFileDownload(filedata) {\n  return dispatch => {\n    if (filedata.viewName === 'InfoView') {\n      if (filedata && filedata[filedata.field[2] + ['_ssystemfilename_Sample']] !== undefined && filedata[filedata.field[2]] !== \"\") {\n        const inputParam = {\n          inputData: {\n            viewFile: {\n              ssystemfilename: filedata[filedata.field[2] + ['_ssystemfilename_Sample']],\n              npreregno: filedata.npreregno,\n              sarno: filedata.sarno,\n              sfilename: filedata[filedata.field[2]]\n            },\n            userinfo: filedata.userInfo\n          },\n          classUrl: \"registration\",\n          operation: \"view\",\n          methodUrl: \"RegistrationFile\" //screenName: filedata.displayName\n\n        };\n        dispatch(viewAttachment(inputParam));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_FILENOTUPLOADED\"\n        }));\n      }\n    } else if (filedata.viewName === 'subSample') {\n      if (filedata && filedata[filedata.field[2] + ['_ssystemfilename_subSample']] !== undefined && filedata[filedata.field[2]] !== \"\") {\n        const inputParam = {\n          inputData: {\n            viewFile: {\n              ssystemfilename: filedata[filedata.field[2] + ['_ssystemfilename_subSample']],\n              npreregno: filedata.npreregno,\n              ntransactionsamplecode: filedata.ntransactionsamplecode,\n              ssamplearno: filedata.ssamplearno,\n              sfilename: filedata[filedata.field[2]],\n              sarno: filedata.sarno\n            },\n            userinfo: filedata.userInfo\n          },\n          classUrl: \"registration\",\n          operation: \"view\",\n          methodUrl: \"RegistrationSubSampleFile\" //screenName: filedata.displayName\n\n        };\n        dispatch(viewAttachment(inputParam));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_FILENOTUPLOADED\"\n        }));\n      }\n    } else {\n      let isFileupload;\n\n      if (filedata && filedata[filedata['dataField'] + ['_ssystemfilename']] !== undefined && filedata[filedata['dataField']] !== \"\") {\n        isFileupload = true;\n      }\n\n      if (filedata && filedata[filedata.dataField + ['_ssystemfilename_Sample']] !== undefined && filedata[filedata.dataField] !== \"\") {\n        isFileupload = true;\n      }\n\n      if (isFileupload) {\n        const inputParam = {\n          inputData: {\n            viewFile: filedata.screenName === 'SampleRegistration' ? {\n              ssystemfilename: filedata[filedata.dataField + ['_ssystemfilename_Sample']],\n              npreregno: filedata.npreregno,\n              sarno: filedata.sarno,\n              sfilename: filedata[filedata.dataField]\n            } : {\n              ssystemfilename: filedata[filedata['dataField'] + ['_ssystemfilename']],\n              ndynamicmastercode: filedata.ndynamicmastercode,\n              ndesigntemplatemappingcode: filedata.ndesigntemplatemappingcode,\n              sfieldname: filedata.dataField,\n              sfilename: filedata[filedata.dataField]\n            },\n            userinfo: filedata.userInfo\n          },\n          classUrl: filedata.classUrl,\n          operation: \"view\",\n          methodUrl: filedata.methodUrl //screenName: filedata.displayName\n\n        };\n        dispatch(viewAttachment(inputParam));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_FILENOTUPLOADED\"\n        }));\n      }\n    }\n  };\n}\nexport function modalSave(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, inputParam.inputData).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n\n      if (inputParam.postParam) {\n        const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]);\n        masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\n\n        if (masterData[\"searchedData\"] !== undefined) {\n          const foundIndex = masterData[\"searchedData\"].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]);\n          masterData[\"searchedData\"][foundIndex] = masterData[inputParam.postParam.selectedObject];\n        } // sortData(masterData);\n\n      }\n\n      masterData = sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData,\n          modalShow: inputParam.modalShow,\n          openModal: false,\n          modalTitle: undefined,\n          operation: inputParam.operation\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadEsign: false,\n          loading: false,\n          modalShow: true,\n          openModal: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function openBarcodeModal(selectedMaster, ncontrolCode, userinfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const getPrinter = rsapi.post(\"barcode/getPrinter\", userinfo);\n    const getControlBasedBarcode = rsapi.post(\"barcodeconfiguration/checkConfiguration\", {\n      selectedMaster,\n      ncontrolCode,\n      userinfo,\n      Multiselect: Array.isArray(selectedMaster)\n    });\n    urlArray = [getPrinter, getControlBasedBarcode];\n    Axios.all(urlArray).then(response => {\n      const printer = constructOptionList(response[0].data || [], \"sprintername\", \"sprintername\", undefined, undefined, true).get(\"OptionList\");\n      const barcode = constructOptionList(response[1].data.Barcode || [], \"sbarcodename\", \"sbarcodename\", undefined, undefined, true).get(\"OptionList\");\n      const selectedRecord = {};\n      if (printer.length > 0) selectedRecord['sprintername'] = printer[0];\n      if (barcode.length > 0) selectedRecord['nbarcode'] = barcode[0];\n      selectedRecord['nbarcodeprint'] = 1;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          operation: \"barcode\",\n          BarcodeList: barcode,\n          Printer: printer,\n          loading: false,\n          ncontrolcode: ncontrolCode,\n          nbarcodeprint: response[1].data.nbarcodeprint,\n          barcodeSelectedRecord: selectedMaster,\n          selectedRecord: selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch(initRequest(false));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function barcodeGeneration(selectedMaster, ncontrolCode, userinfo, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let list = [];\n\n    if (Array.isArray(selectedMaster)) {\n      list = selectedMaster;\n    } else {\n      list.push(selectedMaster);\n    }\n\n    rsapi.post(\"barcodeconfiguration/barcodeGeneration\", {\n      selectedMaster: list,\n      ncontrolCode,\n      userinfo,\n      nbarcode: selectedRecord.nbarcode.item.nbarcode,\n      sprintername: selectedRecord.sprintername.value,\n      nbarcodeprintcount: selectedRecord.nbarcodeprintcount ? selectedRecord.nbarcodeprintcount : 1\n    }).then(response => {\n      toast.info(response.data);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: false,\n          operation: \"barcode\",\n          loading: false,\n          selectedRecord: {},\n          barcodeSelectedRecord: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch(initRequest(false));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport const syncAction = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, inputParam.inputData).then(response => {\n      let data = response.data;\n      sortData(data);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData: [],\n          operation: inputParam.operation,\n          organisation: undefined\n        }\n      };\n      dispatch(updateStore(updateInfo));\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: data,\n          operation: inputParam.operation,\n          activeTestTab: data.activeTestTab,\n          activeTestKey: data.activeTestKey,\n          activeBCTab: data.activeBCTab,\n          inputParam: inputParam,\n          masterStatus: \"\",\n          userInfo: inputParam.inputData.userinfo,\n          loading: false,\n          openModal: false,\n          selectedId: null,\n          selectedRecord: {},\n          dataState: undefined,\n          organisation: {\n            selectedNode: data.SelectedNode,\n            selectedNodeName: data.SelectedNodeName,\n            primaryKeyValue: data.AddedChildPrimaryKey\n          },\n          displayName: inputParam.displayName,\n          reportFilePath: undefined,\n          skip: 0,\n          take: undefined,\n          testskip: 0,\n          testtake: inputParam.inputData.settings ? inputParam.inputData.settings[12] : 10\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: false,\n          loadEsign: false\n        }\n      });\n\n      if (error.response.status === 503) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SYNCUNABLEOATTEMPT\"\n        }));\n      } else if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ServiceAction.js"],"names":["toast","rsapi","initRequest","updateStore","DEFAULT_RETURN","REQUEST_FAILURE","sortData","searchData","searchJsonData","replaceUpdatedObject","constructOptionList","rearrangeDateFormat","Lims_JSON_stringify","intl","selectedDashBoardView","Axios","designComponents","transactionStatus","callService","inputParam","dispatch","post","classUrl","methodUrl","inputData","then","response","data","warn","Success","updateInfo","typeName","masterData","organisation","undefined","rtn","warning","formatMessage","id","type","payload","activeTestTab","activeTestKey","activeBCTab","masterStatus","userInfo","userinfo","loading","selectedId","selectedRecord","dataState","selectedNode","SelectedNode","selectedNodeName","SelectedNodeName","primaryKeyValue","AddedChildPrimaryKey","displayName","reportFilePath","skip","take","testskip","testtake","settings","catch","error","status","crudMaster","modalName","defaultInput","requestUrl","isFileupload","formData","append","JSON","stringify","operation","selectedRecordObj","loadEsign","success","retrievedData","Array","isArray","postParam","selectedObject","primaryKeyField","foundIndex","inputListName","findIndex","x","isSingleGet","push","task","list","filter","item","openModal","activeSampleTab","showSample","respObject","errorCode","showEsign","design","nextNode","showConfirmAlert","loadPoolSource","openPortal","saveType","Object","keys","indexOf","postCRUDOrganiseSearch","console","log","message","obj","validateEsignCredential","sformname","smodulename","toLowerCase","syncAction","fetchRecord","fetchRecordParam","url","screenName","ncontrolCode","filterColumnData","filterValue","filterParam","searchedData","length","isjsondata","searchFieldList","fetchUrl","fecthInputObject","sortField","sortOrder","forEach","unchangeList","isChild","searchRef","current","value","temp","includes","filtercombochange","Map","selectedComboName","selectedComboId","selectedCombo","viewAttachment","document","getElementById","setAttribute","FilePath","click","win","window","open","focus","filterTransactionList","filteredListName","param","selectedData","childRefs","map","childref","ref","childFilteredListName","isSingleSelect","String","isSortable","sortList","sortValue","isMultiSort","multiSortData","pkey","sampleskip","sampletake","subsampleskip","subsampletake","changeList","name","postCRUDOrganiseTransSearch","postParamList","index","clearFilter","updatedListname","showUnderDevelopment","info","onComboLoad","extractedColumnList","IntegrationSettings","urlArray","ndesigncomponentcode","CHECKBOX","elnget","slinkname","all","ComboFieldData","dataList","COMBOBOX","objectValue","foreignDataField","dataField","get","defaultvalue","controlName","YES","fetchRecordCombo","integrationSettings","parentPrimaryField","editRow","selectedRecordData","responseData","extractedColumnData","splice","hideNARecord","tableDataField","label","DATEPICKER","field","indexValue","onServiceLoad","comboColumnField","primarykeyvalue","onChangeUrl","childObjectValue","childPrimaryField","childdataField","dynamicFileDownload","filedata","viewName","viewFile","ssystemfilename","npreregno","sarno","sfilename","ntransactionsamplecode","ssamplearno","ndynamicmastercode","ndesigntemplatemappingcode","sfieldname","modalSave","modalShow","modalTitle","openBarcodeModal","selectedMaster","getPrinter","getControlBasedBarcode","Multiselect","printer","barcode","Barcode","BarcodeList","Printer","ncontrolcode","nbarcodeprint","barcodeSelectedRecord","barcodeGeneration","nbarcode","sprintername","nbarcodeprintcount"],"mappings":"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","sourcesContent":["import { toast } from 'react-toastify';\r\nimport rsapi from '../rsapi';\r\nimport { initRequest, updateStore } from './LoginAction';\r\nimport { DEFAULT_RETURN, REQUEST_FAILURE } from './LoginTypes';\r\nimport { sortData, searchData, searchJsonData, replaceUpdatedObject, constructOptionList, rearrangeDateFormat, Lims_JSON_stringify } from '../components/CommonScript';\r\nimport { intl } from '../components/App';\r\nimport { selectedDashBoardView } from './DashBoardTypeAction';\r\nimport Axios from \"axios\";\r\nimport { designComponents, transactionStatus } from '../components/Enumeration';\r\n// import { getValidComponent } from '../components/droparea/helpers';\r\n//import { Engine } from 'json-rules-engine';\r\n//import employee from '../rules/Employee-Salary.json';\r\n\r\nexport const callService = (inputParam) => {\r\n  return (dispatch) => {\r\n    dispatch(initRequest(true));\r\n    return rsapi.post(inputParam.classUrl + \"/get\" + inputParam.methodUrl, inputParam.inputData)\r\n      .then(response => {\r\n\r\n        // console.log(\"res:\", response);\r\n\r\n        ///Start of Rule Engine code///////////////////////\r\n\r\n        // const decisions1 = [\r\n        //   {\r\n        //       \"conditions\": {\r\n        //           \"all\": [\r\n        //               {\r\n        //                   \"fact\": \"Designation\",\r\n        //                   \"operator\": \"equal\",\r\n        //                   \"value\": \"Manager\"\r\n        //               },\r\n        //               {\r\n        //                   \"fact\": \"Experience\",\r\n        //                   \"operator\": \"greaterThan\",\r\n        //                   \"value\": 10\r\n        //               }\r\n        //           ]\r\n        //       },\r\n        //       \"event\": {\r\n        //           \"type\": \"RS.1500000\",\r\n        //           \"params\": {message: 'Your Salary is 1500000/annum!'}\r\n        //       }\r\n        //   }\r\n        // ];\r\n        // console.log(\"decisions:\",decisions1);  \r\n        // const inputs1 = {Designation: 'Manager', Experience: 9 };\r\n\r\n        // const engine = new Engine(employee.decisions);   \r\n\r\n        // engine.run(inputs1)\r\n        // .then(results => {       \r\n        //   console.log(\"Rule output:\", results.events);\r\n        //   if ( results.events.length > 0){\r\n        //     const events = results.events;\r\n        //     events.map(event => console.log(\"Message:\",event.params.message)); \r\n\r\n\r\n        //     rsapi.post(\"section/getSection\" , inputParam.inputData)\r\n        //     .then(response => {\r\n        //       console.log(\"data:\", response);\r\n        //       let data = response.data;\r\n        //       sortData(data);\r\n\r\n        //       const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: { masterData: [], organisation: undefined, }\r\n        //       }\r\n        //       dispatch(updateStore(updateInfo))\r\n\r\n        //       dispatch({\r\n        //         type: DEFAULT_RETURN,\r\n        //         payload: {\r\n        //           masterData: data,\r\n        //           activeTestTab: data.activeTestTab,\r\n        //           activeTestKey: data.activeTestKey,\r\n        //           activeBCTab: data.activeBCTab,\r\n        //           inputParam: inputParam,\r\n        //           masterStatus: \"\",\r\n        //           userInfo: inputParam.inputData.userinfo,\r\n        //           loading: false, selectedId: null, selectedRecord: {},\r\n        //           dataState: undefined,\r\n        //           organisation: {\r\n        //             selectedNode: data.SelectedNode, selectedNodeName: data.SelectedNodeName,\r\n        //             primaryKeyValue: data.AddedChildPrimaryKey\r\n        //           },\r\n        //           displayName: inputParam.displayName,\r\n        //           reportFilePath: undefined\r\n        //         }\r\n        //       })\r\n\r\n        //     })\r\n        //     .catch(error => {\r\n        //       if (error.response === undefined && error === \"Network Error\") {\r\n        //         dispatch({\r\n        //           type: REQUEST_FAILURE,\r\n        //           payload: {\r\n        //             error: \"Network Error\",\r\n        //             loading: false,\r\n        //           }\r\n        //         });\r\n        //       } else if (error.response.status === 417) {\r\n        //         toast.warning(error.response.data);\r\n        //         dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } });\r\n        //       } else {\r\n        //         dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } })\r\n        //       }\r\n        //     })\r\n        //   }\r\n        //   else{\r\n        //     console.log(\"Message:\",\"Rules Failed\");\r\n        //     dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } });\r\n        //   }         \r\n        // })\r\n        ///End of Rule Engine code///////////////////////\r\n\r\n        ////uncomment below for Orginial Source start////////////////////\r\n\r\n        if (response.data[\"Success\"]) {\r\n          toast.warn(response.data.Success);\r\n        }\r\n\r\n        let data = response.data;\r\n        sortData(data);\r\n\r\n        const updateInfo = {\r\n          typeName: DEFAULT_RETURN,\r\n          data: { masterData: [], organisation: undefined, }\r\n        }\r\n        dispatch(updateStore(updateInfo))\r\n\r\n        if (response.data.rtn == \"IDS_USERNOTINRESULTENTRYFLOW\") {\r\n          toast.warning(intl.formatMessage({ id: \"IDS_USERNOTINRESULTENTRYFLOW\" }));\r\n        }\r\n\r\n        dispatch({\r\n          type: DEFAULT_RETURN,\r\n          payload: {\r\n            masterData: data,\r\n            activeTestTab: data.activeTestTab,\r\n            activeTestKey: data.activeTestKey,\r\n            activeBCTab: data.activeBCTab,\r\n            inputParam: inputParam,\r\n            masterStatus: \"\",\r\n            userInfo: inputParam.inputData.userinfo,\r\n            loading: false, selectedId: null, selectedRecord: {},\r\n            dataState: undefined,\r\n            organisation: {\r\n              selectedNode: data.SelectedNode, selectedNodeName: data.SelectedNodeName,\r\n              primaryKeyValue: data.AddedChildPrimaryKey\r\n            },\r\n            displayName: inputParam.displayName,\r\n            reportFilePath: undefined,\r\n            skip: 0, take: undefined,\r\n            testskip: 0,\r\n            //testtake: 5,\r\n            testtake: inputParam.inputData.settings ? inputParam.inputData.settings[12] : 10,\r\n            //  key:inputParam.key!==undefined?inputParam.key:\"\"\r\n          }\r\n        })\r\n\r\n        ///Uncomment till above for original source\r\n      })\r\n      .catch(error => {\r\n        //console.log(\"error:\", error);\r\n        if (error.response === undefined && error === \"Network Error\") {\r\n          dispatch({\r\n            type: REQUEST_FAILURE,\r\n            payload: {\r\n              error: \"Network Error\",\r\n              loading: false,\r\n            }\r\n          });\r\n        } else if (error.response.status === 417) {\r\n          toast.warning(error.response.data);\r\n          dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } });\r\n        } else {\r\n          dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } })\r\n        }\r\n      })\r\n\r\n  };\r\n};\r\n\r\n//Start- Add /Edit/Delete Master Data\r\nexport function crudMaster(inputParam, masterData, modalName, defaultInput) {\r\n\r\n  return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n    let requestUrl = '';\r\n    if (inputParam.isFileupload) {\r\n      const formData = inputParam.formData;\r\n      formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\r\n      requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, formData);\r\n    } else {\r\n      requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData });\r\n    }\r\n    return requestUrl\r\n      .then(response => {\r\n        if (response.status === 202) {\r\n          //HttpStatus:Accepted\r\n          //Use this block when u need to display any success message\r\n          let selectedRecordObj = {}\r\n          if (inputParam.selectedRecord) {\r\n            selectedRecordObj = { selectedRecord: inputParam.selectedRecord }\r\n          }\r\n\r\n          dispatch({\r\n            type: DEFAULT_RETURN, payload: {\r\n              loadEsign: false,\r\n              [modalName]: false,\r\n              loading: false,\r\n              ...selectedRecordObj\r\n            }\r\n          })\r\n          toast.success(response.data);\r\n        }\r\n        else if (response.status === 208) {\r\n          //HttpStatus:Accepted\r\n          //208-Already Reported\r\n          let selectedRecordObj = {}\r\n          if (inputParam.selectedRecord) {\r\n            selectedRecordObj = { selectedRecord: inputParam.selectedRecord }\r\n          }\r\n          dispatch({\r\n            type: DEFAULT_RETURN, payload: {\r\n              loadEsign: false,\r\n              [modalName]: false,\r\n              loading: false,\r\n              ...selectedRecordObj\r\n\r\n            }\r\n          })\r\n          toast.warn(response.data);\r\n        }\r\n        else {\r\n          const retrievedData = sortData(response.data);\r\n          if (masterData === undefined || Array.isArray(retrievedData)) {\r\n            masterData = retrievedData;\r\n          }\r\n          else {\r\n            masterData = {\r\n              ...masterData,\r\n              ...retrievedData\r\n            };\r\n            if (modalName === \"openModal\" && inputParam.operation !== \"delete\" && inputParam.operation !== \"prepare\"\r\n              && inputParam.operation !== \"create\" && inputParam.operation !== \"copy\") {\r\n\r\n              if (inputParam.postParam) {\r\n                if (masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]) {\r\n                  const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                    x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]\r\n                  );\r\n                  masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\r\n                } else {\r\n                  const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                    x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][0][inputParam.postParam.primaryKeyField]\r\n                  );\r\n                  masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject][0];\r\n                }\r\n              }\r\n            }\r\n            else if (modalName === \"openModal\" && inputParam.operation === \"create\") {\r\n              if (inputParam.postParam && inputParam.postParam.isSingleGet) {\r\n                masterData[inputParam.postParam.inputListName].push(response.data[inputParam.postParam.selectedObject]);\r\n                //masterData[inputParam.postParam.selectedObject] = response.data;\r\n                sortData(masterData);\r\n              }\r\n            }\r\n            else if (modalName === \"openChildModal\" && inputParam.operation === \"create\") {//searchedData\r\n              if (inputParam.postParam && inputParam.postParam.isSingleGet) {\r\n                const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                  x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]\r\n                );\r\n                masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\r\n\r\n                if (masterData[\"searchedData\"] !== undefined) {\r\n                  const foundIndex = masterData[\"searchedData\"].findIndex(\r\n                    x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]\r\n                  );\r\n                  masterData[\"searchedData\"][foundIndex] = masterData[inputParam.postParam.selectedObject];\r\n\r\n                }\r\n                sortData(masterData);\r\n              }\r\n            }\r\n            else if (modalName === \"openModal\" && inputParam.operation === \"copy\") {\r\n              if (inputParam.postParam && inputParam.postParam.isSingleGet) {\r\n                masterData[inputParam.postParam.inputListName].push(response.data[inputParam.postParam.selectedObject]);\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n              }\r\n            }\r\n            else if (modalName === \"openModal\" && (inputParam.operation === \"delete\" || inputParam.operation === \"prepare\")) {\r\n              if (inputParam.postParam && inputParam.postParam.isSingleGet) {\r\n                if (inputParam.postParam.task === \"cancel\") {\r\n                  const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                    x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]\r\n                  );\r\n                  masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\r\n                }\r\n                else {\r\n                  const list = masterData[inputParam.postParam.inputListName]\r\n                    .filter(item => item[inputParam.postParam.primaryKeyField] !== inputParam.postParam.primaryKeyValue)\r\n                  masterData[inputParam.postParam.inputListName] = list;\r\n\r\n                  // const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                  //   x => x[inputParam.postParam.primaryKeyField] === inputParam.postParam.primaryKeyField\r\n                  // );\r\n                  // masterData[inputParam.postParam.inputListName].splice(foundIndex, 1)         \r\n\r\n                }\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n              }\r\n            }\r\n          }\r\n          // (masterData);\r\n\r\n          let openModal = false;\r\n          // let openChildModal= false;\r\n\r\n          let selectedRecord = {};\r\n          let activeSampleTab = inputParam.activeSampleTab ? { activeSampleTab: inputParam.activeSampleTab } : ''\r\n          let activeTestKey = inputParam.activeTestKey ? { activeTestKey: inputParam.activeTestKey } : ''\r\n          let showSample = inputParam.showSample ? inputParam.showSample : ''\r\n          let respObject = {\r\n            masterData,\r\n            inputParam,\r\n            modalName,\r\n            //   openChildModal,\r\n            //modalName:undefined,\r\n            [modalName]: openModal,\r\n            operation: inputParam.operation,\r\n            masterStatus: \"\",\r\n            errorCode: undefined,\r\n            loadEsign: false,\r\n            showEsign: false,\r\n            selectedRecord,\r\n            loading: false,\r\n            dataState: inputParam.dataState,\r\n            selectedId: inputParam.selectedId,\r\n            ...activeSampleTab,\r\n            ...activeTestKey,\r\n            showSample,\r\n            design: [],\r\n\r\n            //organisation: undefined\r\n            organisation: inputParam.nextNode ? {\r\n              selectedNode: inputParam.nextNode,\r\n              selectedNodeName: masterData.SelectedNodeName,\r\n              primaryKeyValue: masterData.AddedChildPrimaryKey,\r\n\r\n            } : undefined,\r\n            showConfirmAlert: inputParam.showConfirmAlert,\r\n            loadPoolSource: inputParam.loadPoolSource,\r\n            skip: inputParam.skip || undefined,\r\n            take: inputParam.take || undefined,\r\n            openPortal: false,\r\n          }\r\n\r\n          if (inputParam.operation === \"create\" || inputParam.operation === \"copy\") {\r\n            if (inputParam.saveType === 2) {\r\n              openModal = true;\r\n              selectedRecord = defaultInput;\r\n\r\n            }\r\n            respObject = { ...respObject, [modalName]: openModal, selectedRecord };\r\n          }\r\n          if ((modalName === \"openModal\" || modalName === \"openChildModal\") && Object.keys(masterData).indexOf(\"searchedData\") !== -1\r\n            && masterData[\"searchedData\"] !== undefined) {\r\n            dispatch(postCRUDOrganiseSearch(inputParam.postParam, respObject))\r\n          }\r\n          else {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, modalName: undefined } })\r\n          }\r\n        }\r\n      })\r\n      .catch(response => {\r\n        console.log(\"error:\", response);\r\n        if (response.response.status === 500) {\r\n          dispatch({\r\n            type: REQUEST_FAILURE,\r\n            payload: {\r\n              error: response.message,\r\n              loading: false,\r\n              // openPortal:this.props.Login.openPortal,\r\n              //openModal:inputParam.openPortal?false:true\r\n            }\r\n          });\r\n        } else {\r\n\r\n          let obj = {}\r\n          if (inputParam.openPortal === true) {\r\n            obj = { openModal: false }\r\n          }\r\n          let selectedRecordObj = {}\r\n          if (inputParam.selectedRecord) {\r\n            selectedRecordObj = { selectedRecord: inputParam.selectedRecord }\r\n          }\r\n\r\n          if (inputParam.operation === \"delete\" || inputParam.operation === \"prepare\" || inputParam.operation === \"receive\" ||\r\n            inputParam.operation === 'approve' || inputParam.operation === 'Approve' || inputParam.operation === \"correction\"\r\n            || inputParam.operation === \"complete\" || inputParam.operation === \"dynamic\" \r\n            || inputParam.operation === \"setDefault\" || inputParam.operation === \"reset\" || inputParam.operation === \"retire\"\r\n            || inputParam.operation === \"xml\" || inputParam.operation === 'blackList' || inputParam.operation === 'attendance'\r\n            || inputParam.operation === 'certified' || inputParam.operation === 'competent' || inputParam.operation === \"invite\"\r\n            || inputParam.operation === \"cancel\" || inputParam.operation === \"cancel\" || inputParam.operation === \"conduct\"\r\n            || inputParam.operation === \"attend\" || inputParam.operation === \"certify\" || inputParam.operation === \"Competent\"\r\n            || inputParam.operation === \"Create\" || inputParam.operation === \"check\") {\r\n            dispatch({\r\n              type: DEFAULT_RETURN,\r\n              payload: {\r\n                masterStatus: response.response.data,\r\n                errorCode: response.response.status,\r\n                loadEsign: false,\r\n                [modalName]: false,\r\n                loading: false,\r\n                openPortal: false,\r\n                ...selectedRecordObj\r\n              }\r\n            });\r\n          } else {\r\n            // console.log('dispatch',obj)\r\n            if (inputParam.selectedRecord) {\r\n              selectedRecordObj = { selectedRecord: inputParam.selectedRecord }\r\n            }\r\n            dispatch({\r\n              type: DEFAULT_RETURN,\r\n              payload: {\r\n                masterStatus: response.response.data,\r\n                errorCode: response.response.status,\r\n                loadEsign: false, loading: false,\r\n                ...obj,\r\n                ...selectedRecordObj\r\n\r\n          \r\n              }\r\n            });\r\n          }\r\n\r\n        }\r\n      });\r\n  }\r\n}\r\n\r\nexport const validateEsignCredential = (inputParam, modalName) => {\r\n  return (dispatch) => {\r\n    dispatch(initRequest(true));\r\n    if (inputParam && inputParam.inputData && inputParam.inputData.userinfo) {\r\n      inputParam.inputData[\"userinfo\"] = {\r\n        ...inputParam.inputData.userinfo,\r\n        sformname: Lims_JSON_stringify(inputParam.inputData.userinfo.sformname),\r\n        smodulename: Lims_JSON_stringify(inputParam.inputData.userinfo.smodulename),\r\n      }\r\n    }\r\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n      .then(response => {\r\n        if (response.data === \"Success\") {\r\n\r\n          const methodUrl = inputParam[\"screenData\"][\"inputParam\"][\"methodUrl\"];\r\n          inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n          if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\r\n\r\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n\r\n            if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\r\n              delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n              delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n              delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n\r\n\r\n            }\r\n\r\n            // ALPD-2437 added for Type3 Component. Use selected record to clear esign values\r\n            if (inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"]) {\r\n\r\n              delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignreason\"];\r\n              delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignpassword\"];\r\n              delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esigncomments\"];\r\n              delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"agree\"];\r\n            }\r\n          }\r\n\r\n          if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]&&inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"sync\"){\r\n          dispatch(syncAction(inputParam[\"screenData\"][\"inputParam\"]))\r\n\r\n          }else{\r\n            dispatch(crudMaster(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"], modalName))\r\n\r\n          }\r\n        }\r\n      })\r\n      .catch(error => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n        if (error.response.status === 500) {\r\n          toast.error(intl.formatMessage({ id: error.message }));\r\n        } else {\r\n          toast.warn(intl.formatMessage({ id: error.response.data }));\r\n        }\r\n      })\r\n  };\r\n};\r\n\r\nexport const fetchRecord = (fetchRecordParam) => {\r\n  return (dispatch) => {\r\n\r\n    dispatch(initRequest(true));\r\n    const url = fetchRecordParam.inputParam.classUrl + \"/getActive\" + fetchRecordParam.inputParam.methodUrl + \"ById\";\r\n    rsapi.post(url, {\r\n      [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo\r\n    })\r\n      .then(response => {\r\n        dispatch({\r\n          type: DEFAULT_RETURN,\r\n          payload: {\r\n            selectedRecord: response.data,\r\n            screenName: fetchRecordParam.screenName,\r\n            operation: fetchRecordParam.operation,\r\n            openModal: true,\r\n            ncontrolCode: fetchRecordParam.ncontrolCode,\r\n            loading: false,\r\n            selectedId: fetchRecordParam.primaryKeyValue\r\n          }\r\n        });\r\n      })\r\n      .catch(error => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n        if (error.response.status === 500) {\r\n          toast.error(intl.formatMessage({ id: error.message }));\r\n        } else {\r\n          toast.warn(intl.formatMessage({ id: error.response.data }));\r\n        }\r\n      })\r\n  }\r\n}\r\n\r\nexport function filterColumnData(filterValue, filterParam) {\r\n  return function (dispatch) {\r\n\r\n    let masterData = filterParam.masterData;\r\n\r\n    let primaryKeyValue = 0;\r\n    let searchedData = undefined;\r\n    if (filterValue === \"\") {\r\n      if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\r\n        // if(filterParam.isjsondata)\r\n        // {\r\n        //    primaryKeyValue = masterData[filterParam.inputListName][0][\"jsondata\"][filterParam.primaryKeyField]\r\n\r\n        //  }\r\n        //else\r\n        // {\r\n        primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\r\n        // }\r\n      }\r\n    }\r\n    else {\r\n      if (filterParam.isjsondata) {\r\n        searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n      }\r\n      else {\r\n        searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n\r\n      }\r\n      if (searchedData.length > 0) {\r\n        //  if(filterParam.isjsondata)\r\n        // {\r\n        //  primaryKeyValue = searchedData[0][\"jsondata\"][filterParam.primaryKeyField];\r\n        //  }\r\n        // else{\r\n        primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\r\n        //  }\r\n      }\r\n    }\r\n\r\n    if (primaryKeyValue !== 0) {\r\n      dispatch(initRequest(true));\r\n      return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject, [filterParam.primaryKeyField]: primaryKeyValue })\r\n        .then(response => {\r\n          masterData[\"searchedData\"] = searchedData;\r\n          masterData = { ...masterData, ...response.data };\r\n\r\n          if (filterParam.inputListName === \"DashBoardView\") {\r\n            dispatch(selectedDashBoardView(response, masterData));\r\n          }\r\n          else {\r\n            if (filterParam.sortField) {\r\n              sortData(masterData, filterParam.sortOrder, filterParam.sortField);\r\n            }\r\n            else {\r\n              sortData(masterData);\r\n            }\r\n            dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false, skip: 0, take: 10, selectedId: null } });\r\n          }\r\n        })\r\n        .catch(error => {\r\n          dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n          if (error.response.status === 500) {\r\n            toast.error(intl.formatMessage({ id: error.message }));\r\n          }\r\n          else {\r\n            toast.warn(intl.formatMessage({ id: error.response.data }));\r\n          }\r\n        })\r\n    }\r\n    else {\r\n      masterData[filterParam.selectedObject] = undefined;\r\n      masterData[\"searchedData\"] = [];\r\n      Object.keys(masterData).forEach(item => {\r\n        if (item !== filterParam.inputListName && item !== filterParam.selectedObject\r\n          && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1)\r\n          masterData[item] = [];\r\n      })\r\n      dispatch({\r\n        type: DEFAULT_RETURN, payload: {\r\n          masterData, operation: null, modalName: undefined,\r\n          loading: false\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport function postCRUDOrganiseSearch(postParam, respObject) {\r\n  return function (dispatch) {\r\n\r\n    let masterData = respObject.masterData;\r\n\r\n    if (respObject.inputParam.operation === \"create\" || respObject.inputParam.operation === \"copy\") {\r\n      if (respObject.modalName === \"openModal\") {\r\n        if (respObject.inputParam.isChild === undefined) {\r\n          respObject.inputParam.searchRef.current.value = \"\";\r\n          masterData[\"searchedData\"] = undefined;\r\n        }\r\n      }\r\n      dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, masterData, modalName: undefined } })\r\n    }\r\n    else if (respObject.inputParam.operation === \"delete\" || respObject.inputParam.operation === \"prepare\") {\r\n\r\n      if (masterData[\"searchedData\"] !== undefined && respObject.modalName === \"openModal\") {\r\n        let temp = masterData[\"searchedData\"];\r\n        let primaryKeyValue = respObject.masterData[\"searchedData\"][0][postParam.primaryKeyField];\r\n        if (respObject.inputParam.isChild === undefined) {\r\n\r\n          temp = masterData[\"searchedData\"].filter(item => Array.isArray(postParam.primaryKeyValue) ?\r\n            !postParam.primaryKeyValue.includes(item[postParam.primaryKeyField])\r\n            : item[postParam.primaryKeyField] !== postParam.primaryKeyValue);\r\n          primaryKeyValue = temp.length > 0 ? temp[0][postParam.primaryKeyField] : 0;\r\n        }\r\n        else {\r\n          primaryKeyValue = masterData[postParam.selectedObject][postParam.primaryKeyField];\r\n        }\r\n        masterData[\"searchedData\"] = temp;\r\n        respObject = { ...respObject, modalName: undefined };\r\n        if (masterData[\"searchedData\"].length > 0) {\r\n          primaryKeyValue = masterData[\"searchedData\"][0][postParam.primaryKeyField];\r\n\r\n          return rsapi.post(postParam.fetchUrl, {\r\n            ...postParam.fecthInputObject, [postParam.primaryKeyField]: primaryKeyValue\r\n          })\r\n            .then(response => {\r\n              masterData = { ...masterData, ...response.data };\r\n              sortData(masterData);\r\n              dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, masterData } });\r\n            })\r\n            .catch(error => {\r\n              dispatch({ type: DEFAULT_RETURN, payload: { ...respObject } })\r\n              if (error.response.status === 500) {\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n              }\r\n              else {\r\n                toast.warn(intl.formatMessage({ id: error.response.data }));\r\n              }\r\n            })\r\n        }\r\n        else {\r\n          masterData[postParam.selectedObject] = undefined;\r\n          masterData[\"searchedData\"] = [];\r\n          Object.keys(masterData).forEach(item => {\r\n            if (item !== postParam.inputListName && item !== postParam.selectedObject\r\n              && postParam.unchangeList && postParam.unchangeList.indexOf(item) === -1)\r\n              masterData[item] = [];\r\n          })\r\n\r\n          dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, masterData } });\r\n        }\r\n      }\r\n      else {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, masterData, modalName: undefined } });\r\n      }\r\n    }\r\n    else if (respObject.inputParam.filtercombochange) {\r\n\r\n      respObject = { ...respObject, modalName: undefined };\r\n      if (masterData[\"searchedData\"] !== undefined) {\r\n        masterData[\"searchedData\"] = undefined;\r\n        respObject.inputParam.searchRef.current.value = \"\";\r\n      }\r\n\r\n      let Map = {}\r\n      if (postParam.selectedComboName !== undefined) {\r\n        Map = { [postParam.selectedComboName]: { [postParam.selectedComboId]: postParam.selectedCombo } }\r\n      }\r\n\r\n      dispatch({\r\n        type: DEFAULT_RETURN, payload: {\r\n          ...respObject, masterData, ...Map\r\n        }\r\n      });\r\n    }\r\n    else {\r\n      respObject = { ...respObject, modalName: undefined };\r\n      if (masterData[\"searchedData\"] !== undefined) {\r\n        if (masterData[postParam.selectedObject][postParam.primaryKeyField]) {\r\n\r\n          const foundIndex = masterData[\"searchedData\"].findIndex(\r\n            x => x[postParam.primaryKeyField] === masterData[postParam.selectedObject][postParam.primaryKeyField]\r\n          );\r\n          masterData[\"searchedData\"][foundIndex] = masterData[postParam.selectedObject];\r\n        } else {\r\n          const foundIndex = masterData[\"searchedData\"].findIndex(\r\n            x => x[postParam.primaryKeyField] === masterData[postParam.selectedObject][0][postParam.primaryKeyField]\r\n          );\r\n          masterData[\"searchedData\"][foundIndex] = masterData[postParam.selectedObject][0];\r\n        }\r\n      }\r\n      dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, masterData } });\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport const viewAttachment = (inputParam) => {\r\n  return (dispatch) => {\r\n    let inputData = { ...inputParam.inputData }\r\n    if (inputData['selectedRecord']) {\r\n      delete inputData['selectedRecord']['expanded'];\r\n    }\r\n    dispatch(initRequest(true));\r\n    rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, inputData)\r\n      .then(response => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n        let value = \"\";\r\n        if (response.data[\"AttachFile\"]) {\r\n          document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\r\n          document.getElementById(\"download_data\").click();\r\n        } else if (response.data[\"AttachLink\"]) {\r\n          value = response.data[\"AttachLink\"];\r\n          var win = window.open(value, '_blank');\r\n          if (win) {\r\n            win.focus();\r\n          } else {\r\n            intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\r\n          }\r\n        }\r\n        else {\r\n          if (response.data[\"rtn\"]) {\r\n            toast.warn(intl.formatMessage({ id: response.data.rtn }));\r\n          }\r\n\r\n        }\r\n      })\r\n      .catch(error => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n        if (error.response.status === 500) {\r\n          toast.error(error.message);\r\n        } else {\r\n          toast.warn(error.response.data);\r\n        }\r\n      });\r\n  }\r\n}\r\n\r\nexport function filterTransactionList(filterValue, filterParam, filteredListName,param) {\r\n  return function (dispatch) {\r\n    let masterData = filterParam.masterData;\r\n    filteredListName = filteredListName || \"searchedData\"\r\n    let primaryKeyValue = 0;\r\n    let searchedData = undefined;\r\n    let selectedData = []\r\n    filterParam.childRefs && filterParam.childRefs.map(childref => {\r\n      if (childref.ref !== undefined && childref.ref.current !== null) {\r\n        childref.ref.current.value = \"\";\r\n        masterData[childref.childFilteredListName] = undefined\r\n      }\r\n      return null;\r\n    })\r\n    if (filterValue === \"\") {\r\n      if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\r\n        primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\r\n        selectedData.push(masterData[filterParam.inputListName][0])\r\n      }\r\n    }\r\n    else {\r\n      if (masterData[filterParam.inputListName]) {\r\n        searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n      } else {\r\n        searchedData = []\r\n      }\r\n\r\n      if (searchedData.length > 0) {\r\n        primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\r\n        selectedData.push(searchedData[0])\r\n      }\r\n    }\r\n\r\n    if (primaryKeyValue !== 0) {\r\n      primaryKeyValue = filterParam.isSingleSelect ? primaryKeyValue : String(primaryKeyValue)\r\n      dispatch(initRequest(true));\r\n      return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject, [filterParam.primaryKeyField]: primaryKeyValue })\r\n        .then(response => {\r\n          const dataState = {\r\n            skip: 0,\r\n            take: 10\r\n          }\r\n          masterData[filteredListName] = searchedData;\r\n          masterData[filterParam.selectedObject] = selectedData\r\n          masterData = { ...masterData, ...response.data };\r\n          if (filterParam.isSortable) {\r\n            sortData(masterData[filterParam.sortList], 'descending', filterParam.sortValue);\r\n          }\r\n          if (filterParam.isMultiSort) {\r\n            filterParam.multiSortData.forEach(item => {\r\n              sortData(masterData[item.list], 'descending', item.pkey);\r\n            })\r\n          }\r\n          dispatch({\r\n            type: DEFAULT_RETURN, payload: {\r\n              masterData, loading: false,\r\n              // skip: 0, take: 10, testskip: 0, testtake: 10,dataState \r\n              skip: filterParam.skip, take: filterParam.take,\r\n              sampleskip : filterParam.sampleskip,\r\n              sampletake : filterParam.sampletake,\r\n              subsampleskip: filterParam.subsampleskip, subsampletake: filterParam.subsampletake,\r\n              testskip: filterParam.testskip, testtake: filterParam.testtake,\r\n              dataState\r\n            }\r\n          });\r\n        })\r\n        .catch(error => {\r\n          dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n          if (error.response.status === 500) {\r\n            toast.error(intl.formatMessage({ id: error.message }));\r\n          }\r\n          else {\r\n            toast.warn(intl.formatMessage({ id: error.response.data }));\r\n          }\r\n        })\r\n    }\r\n    else {\r\n      masterData[filterParam.selectedObject] = undefined;\r\n      masterData[filteredListName] = [];\r\n      filterParam.changeList.map(name => masterData[name] = [])\r\n      param.map(item=>masterData[item]=[])\r\n      // Object.keys(masterData).forEach(item=> {\r\n      //   if (item !== filterParam.inputListName && item !== filterParam.selectedObject \r\n      //     && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) ===-1)\r\n      //       masterData[item] = [];\r\n      //   })   \r\n      dispatch({\r\n        type: DEFAULT_RETURN, payload: {\r\n          masterData, operation: null, modalName: undefined,\r\n          loading: false\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function postCRUDOrganiseTransSearch(postParamList, respObject) {\r\n  return function (dispatch) {\r\n    let masterData = respObject.masterData;\r\n    postParamList && Array.isArray(postParamList) && postParamList.map((postParam, index) => {\r\n      if (postParam.clearFilter === 'yes') {\r\n\r\n        if (postParam.searchRef.current) {\r\n          postParam.searchRef.current.value = \"\";\r\n        }\r\n        masterData[postParam.filteredListName] = undefined;\r\n        postParam.childRefs && postParam.childRefs.map(childref => {\r\n          if (childref.ref !== undefined && childref.ref.current !== null) {\r\n            childref.ref.current.value = \"\";\r\n            masterData[childref.childFilteredListName] = undefined\r\n          }\r\n          return null;\r\n        })\r\n\r\n      }\r\n      if (Object.keys(masterData).indexOf(postParam.filteredListName) !== -1 && masterData[postParam.filteredListName] !== undefined) {\r\n\r\n        if (postParam.clearFilter === 'check') {\r\n          if (masterData[postParam.filteredListName] !== undefined) {\r\n            const temp = masterData[postParam.filteredListName].filter(item => !Array.isArray(postParam.primaryKeyValue) ? postParam.primaryKeyValue : postParam.primaryKeyValue.includes(item[postParam.primaryKeyField]));\r\n            masterData[postParam.filteredListName] = temp;\r\n\r\n            if (masterData[postParam.filteredListName].length > 0) {\r\n              return rsapi.post(postParam.fetchUrl, { ...postParam.fecthInputObject.fecthInputObject, [postParam.primaryKeyField]: String(respObject.masterData[postParam.filteredListName][0][postParam.primaryKeyField]) })\r\n                .then(response => {\r\n                  masterData = { ...masterData, ...response.data };\r\n                })\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          if (masterData[postParam.filteredListName] !== undefined) {\r\n            masterData[postParam.filteredListName] = replaceUpdatedObject(masterData[postParam.updatedListname], masterData[postParam.filteredListName], postParam.primaryKeyField)\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    })\r\n    //sortData(masterData);\r\n    dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, masterData } })\r\n  }\r\n}\r\n\r\nexport function showUnderDevelopment() {\r\n  return function (dispatch) {\r\n    toast.info(intl.formatMessage({ id: \"IDS_UNDERDEVELOPMENT\" }));\r\n  }\r\n}\r\n\r\n//Fetch record when clicking add button in Type3Component\r\n// export function onComboLoad(operation, userInfo, inputParam, ncontrolCode, extractedColumnList,IntegrationSettings) {\r\n//   return function (dispatch) {\r\n\r\n//     dispatch(initRequest(true));\r\n//     let urlArray = [];\r\n//     extractedColumnList.map(item=>{\r\n//       if(item.elnget){\r\n//         //urlArray.push(rsapi.post(\"https://logilabelntest.azurewebsites.net\"+\"/\"+item.classUrl+\"/\"+item.methodUrl,{}))\r\n//         urlArray.push(rsapi.post(IntegrationSettings[0].slinkname+\"/\"+item.classUrl+\"/\"+item.methodUrl,{}))\r\n//       }\r\n//       else{\r\n//         urlArray.push(rsapi.post(item.classUrl+\"/\"+item.methodUrl, { userinfo: userInfo }))\r\n//       }\r\n\r\n//     }\r\n\r\n//       )\r\n\r\n//           Axios.all(urlArray)\r\n//               .then(response => {\r\n//                 let ComboFieldData = [];\r\n//                 let dataList = [];\r\n\r\n//                     extractedColumnList.map((item, index)=> {\r\n//                       if(item.ndesigncomponentcode == designComponents.COMBOBOX){\r\n//                         ComboFieldData = constructOptionList(item.objectValue === null ? response[index].data || [] : response[index].data[item.objectValue], item.foreignDataField,\r\n//                                 item.dataField, undefined, undefined, undefined);\r\n//                            dataList[item.dataField] = ComboFieldData.get(\"OptionList\");\r\n//                       }\r\n//     extractedColumnList.map(item =>\r\n//       urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, { userinfo: userInfo }))\r\n//     )\r\n\r\n//     Axios.all(urlArray)\r\n//       .then(response => {\r\n//         let ComboFieldData = [];\r\n//         let dataList = [];\r\n\r\n//         extractedColumnList.map((item, index) => {\r\n//           if (item.ndesigncomponentcode == designComponents.COMBOBOX) {\r\n//             ComboFieldData = constructOptionList(item.objectValue === null ? response[index].data || [] : response[index].data[item.objectValue], item.foreignDataField,\r\n//               item.dataField, undefined, undefined, undefined);\r\n//             dataList[item.dataField] = ComboFieldData.get(\"OptionList\");\r\n//           }\r\n\r\n//         });\r\n\r\n//         dispatch({\r\n//           type: DEFAULT_RETURN,\r\n//           payload: {\r\n//             dataList,\r\n//             operation,\r\n//             screenName: inputParam.displayName,\r\n//             openModal: true,\r\n//             ncontrolCode, loading: false\r\n//           }\r\n//         })\r\n//       })\r\n//       .catch(error => {\r\n//         dispatch(initRequest(false));\r\n//         if (error.response.status === 500) {\r\n//           toast.error(error.message);\r\n//         } else {\r\n//           toast.warn(intl.formatMessage({\r\n//             id: error.response.data\r\n//           }));\r\n//         }\r\n//       })\r\n//   }\r\n// }\r\n\r\n\r\n//Fetch record when clicking add button in Type3Component\r\n\r\nexport function onComboLoad(operation, userInfo, inputParam, ncontrolCode, extractedColumnList, IntegrationSettings) {\r\n  return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n    let urlArray = [];\r\n    extractedColumnList.map(item => {\r\n      if(item.ndesigncomponentcode !== designComponents.CHECKBOX){\r\n      if (item.elnget) {\r\n        //urlArray.push(rsapi.post(\"https://logilabelntest.azurewebsites.net\"+\"/\"+item.classUrl+\"/\"+item.methodUrl,{}))\r\n        urlArray.push(rsapi.post(IntegrationSettings[0].slinkname + \"/\" + item.classUrl + \"/\" + item.methodUrl, {}))\r\n      }\r\n      else {\r\n          urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, { userinfo: userInfo }))\r\n      }\r\n\r\n    }\r\n    }\r\n    )\r\n    Axios.all(urlArray)\r\n      .then(response => {\r\n        let ComboFieldData = [];\r\n        let dataList = [];\r\n        let selectedRecord={};\r\n        extractedColumnList.map((item, index) => {\r\n          if (item.ndesigncomponentcode == designComponents.COMBOBOX) {\r\n            ComboFieldData = constructOptionList(item.objectValue === null ? response[index].data || [] : response[index].data[item.objectValue], item.foreignDataField,\r\n              item.dataField, undefined, undefined, undefined);\r\n            dataList[item.dataField] = ComboFieldData.get(\"OptionList\");\r\n          }else if(item.ndesigncomponentcode === designComponents.CHECKBOX  && item.defaultvalue){\r\n            selectedRecord[item.controlName]= transactionStatus.YES;\r\n\r\n          }\r\n        });\r\n        dispatch({\r\n          type: DEFAULT_RETURN,\r\n          payload: {\r\n            dataList,\r\n            operation,\r\n            screenName: inputParam.displayName,\r\n            openModal: true,\r\n            ncontrolCode, loading: false,selectedRecord\r\n          }\r\n        })\r\n      })\r\n\r\n      .catch(error => {\r\n\r\n        dispatch(initRequest(false));\r\n\r\n        if (error.response !== undefined && error.response.status === 500) {\r\n          toast.error(intl.formatMessage({ id: error.message }));\r\n        } else if (error.response === undefined) {\r\n          toast.error(intl.formatMessage({ id: error.message }));\r\n        } else {\r\n          toast.warn(intl.formatMessage({\r\n            id: error.response.data\r\n          }));\r\n\r\n        }\r\n\r\n      })\r\n\r\n  }\r\n\r\n}\r\n\r\n//Fetch record when clicking edit button in Type3Component\r\nexport const fetchRecordCombo = (fetchRecordParam) => {\r\n  return (dispatch) => {\r\n\r\n    dispatch(initRequest(true));\r\n    let urlArray = [];\r\n    const url = fetchRecordParam.inputParam.classUrl + \"/getActive\" + fetchRecordParam.inputParam.methodUrl + \"ById\";\r\n    urlArray.push(rsapi.post(url, { [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo }));\r\n    fetchRecordParam.extractedColumnList.map(item => {\r\n\r\n      if (item.elnget) {\r\n        urlArray.push(rsapi.post(fetchRecordParam.integrationSettings[0].slinkname + \"/\" + item.classUrl + \"/\" + item.methodUrl, {}))\r\n      }\r\n      else if (item.classUrl && item.methodUrl) {\r\n\r\n        if (item.parentPrimaryField && item.parentPrimaryField !== null) {\r\n          urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl,\r\n            {\r\n              [item.foreignDataField]: fetchRecordParam.editRow[item.foreignDataField],\r\n              [item.parentPrimaryField]: fetchRecordParam.editRow[item.parentPrimaryField] || undefined,\r\n              \"userinfo\": fetchRecordParam.userInfo\r\n            }))\r\n        }\r\n        else {\r\n          urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, {\r\n            [item.foreignDataField]:\r\n              fetchRecordParam.editRow[item.foreignDataField], \"userinfo\": fetchRecordParam.userInfo\r\n          }))\r\n        }\r\n\r\n        // urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, {[item.parentPrimaryField]: fetchRecordParam.editRow.nprojecttypecode , \"userinfo\": fetchRecordParam.userInfo}))\r\n      }\r\n    });\r\n\r\n    Axios.all(urlArray)\r\n      .then(response => {\r\n\r\n        let ComboFieldData = [];\r\n        let dataList = [];\r\n        let selectedRecordData = { ...response[0].data };\r\n        let responseData = [...response];\r\n        let extractedColumnData = [];\r\n        responseData.splice(0, 1);\r\n\r\n        fetchRecordParam.extractedColumnList.map((item) => {\r\n          if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n            extractedColumnData.push(item);\r\n            if (!item.hideNARecord || selectedRecordData[item.tableDataField]!==-1) {\r\n              selectedRecordData[item.dataField] = {\r\n                value: selectedRecordData[item.foreignDataField],\r\n                label: selectedRecordData[item.dataField]\r\n              }\r\n            }\r\n          }\r\n          else if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n            selectedRecordData[item.dataField] = rearrangeDateFormat(fetchRecordParam.userInfo, selectedRecordData[item.dataField]);\r\n          }\r\n        })\r\n\r\n        extractedColumnData.map((field, index) => {\r\n          responseData.map((item, indexValue) => {\r\n            if (index === indexValue) {\r\n              if ((field.classUrl === 'limselnusermapping' && field.methodUrl === 'getLimsUsers') || (field.classUrl === 'limselnsitemapping' && field.methodUrl === 'getLimsSite')) {\r\n                responseData[index].data.push(response[0].data);\r\n              }\r\n              ComboFieldData = constructOptionList(field.objectValue === null ? responseData[index].data || [] : responseData[index].data[field.objectValue], field.foreignDataField,\r\n                field.dataField, undefined, undefined, undefined);\r\n              dataList[field.dataField] = ComboFieldData.get(\"OptionList\");\r\n            }\r\n          })\r\n        });\r\n\r\n        dispatch({\r\n          type: DEFAULT_RETURN,\r\n          payload: {\r\n            selectedRecord: selectedRecordData,\r\n            screenName: fetchRecordParam.screenName,\r\n            operation: fetchRecordParam.operation,\r\n            openModal: true,\r\n            ncontrolCode: fetchRecordParam.ncontrolCode,\r\n            loading: false,\r\n            selectedId: fetchRecordParam.primaryKeyValue,\r\n            dataList\r\n          }\r\n        });\r\n      })\r\n      .catch(error => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n        if (error.response !== undefined && error.response.status === 500) {\r\n          toast.error(intl.formatMessage({ id: error.message }));\r\n        } else if (error.response === undefined) {\r\n          toast.error(intl.formatMessage({ id: error.message }));\r\n        } else {\r\n          toast.warn(intl.formatMessage({ id: error.response.data }));\r\n        }\r\n      })\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n//Fetch record when clicking edit button in Type3Component\r\n// export const fetchRecordCombo = (fetchRecordParam) => {\r\n//   return (dispatch) => {\r\n\r\n//     dispatch(initRequest(true));\r\n//     let urlArray = [];\r\n//     const url = fetchRecordParam.inputParam.classUrl + \"/getActive\" + fetchRecordParam.inputParam.methodUrl + \"ById\";\r\n//     urlArray.push(rsapi.post(url, { [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo }));\r\n//     fetchRecordParam.extractedColumnList.map(item => {\r\n//       if(item.classUrl && item.methodUrl){\r\n\r\n//         if(item.elnget){\r\n//           urlArray.push(rsapi.post(\"https://logilabelntest.azurewebsites.net\"+\"/\"+item.classUrl+\"/\"+item.methodUrl,{}))\r\n//         }\r\n//         else{\r\n//           urlArray.push(rsapi.post(item.classUrl+\"/\"+item.methodUrl, { \"userinfo\" : fetchRecordParam.userInfo }))\r\n//         }\r\n//         //urlArray.push(rsapi.post(item.classUrl+\"/\"+item.methodUrl, { \"userinfo\" : fetchRecordParam.userInfo }))\r\n//       if (item.classUrl && item.methodUrl) {\r\n//         urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, { \"userinfo\": fetchRecordParam.userInfo }))\r\n//       }\r\n//     });\r\n\r\n//     Axios.all(urlArray)\r\n//       .then(response => {\r\n\r\n//       fetchRecordParam.extractedColumnList.map((item) => {\r\n//         if(item.ndesigncomponentcode === designComponents.COMBOBOX){\r\n//           extractedColumnData.push(item);\r\n//           selectedRecordData[item.dataField] = {\r\n//             value:selectedRecordData[item.foreignDataField],\r\n//             label:selectedRecordData[item.dataField]\r\n//           }                      \r\n//         }\r\n//         else if(item.ndesigncomponentcode === designComponents.DATEPICKER){\r\n//           selectedRecordData[item.dataField] = rearrangeDateFormat(fetchRecordParam.userInfo, selectedRecordData[item.dataField]);\r\n//         }\r\n//       })\r\n\r\n//       extractedColumnData.map((field, index) => {\r\n//         responseData.map((item, indexValue) => {\r\n//           if(index === indexValue){\r\n//             if(field.classUrl==='limselnusermapping'&&field.methodUrl==='getLimsUsers'){\r\n//             responseData[index].data.push(response[0].data);}\r\n//             ComboFieldData = constructOptionList(field.objectValue === null ? responseData[index].data || [] : responseData[index].data[field.objectValue], field.foreignDataField,\r\n//               field.dataField, undefined, undefined, undefined);\r\n//          dataList[field.dataField] = ComboFieldData.get(\"OptionList\");\r\n//         let ComboFieldData = [];\r\n//         let dataList = [];\r\n//         let selectedRecordData = { ...response[0].data };\r\n//         let responseData = [...response];\r\n//         let extractedColumnData = [];\r\n//         responseData.splice(0, 1);\r\n\r\n//         fetchRecordParam.extractedColumnList.map((item) => {\r\n//           if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n//             extractedColumnData.push(item);\r\n//             selectedRecordData[item.dataField] = {\r\n//               value: selectedRecordData[item.foreignDataField],\r\n//               label: selectedRecordData[item.dataField]\r\n//             }\r\n//           }\r\n//           else if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n//             selectedRecordData[item.dataField] = rearrangeDateFormat(fetchRecordParam.userInfo, selectedRecordData[item.dataField]);\r\n//           }\r\n//         })\r\n\r\n//         extractedColumnData.map((field, index) => {\r\n//           responseData.map((item, indexValue) => {\r\n//             if (index === indexValue) {\r\n//               ComboFieldData = constructOptionList(field.objectValue === null ? responseData[index].data || [] : responseData[index].data[field.objectValue], field.foreignDataField,\r\n//                 field.dataField, undefined, undefined, undefined);\r\n//               dataList[field.dataField] = ComboFieldData.get(\"OptionList\");\r\n//             }\r\n//           })\r\n//         });\r\n\r\n//         dispatch({\r\n//           type: DEFAULT_RETURN,\r\n//           payload: {\r\n//             selectedRecord: selectedRecordData,\r\n//             screenName: fetchRecordParam.screenName,\r\n//             operation: fetchRecordParam.operation,\r\n//             openModal: true,\r\n//             ncontrolCode: fetchRecordParam.ncontrolCode,\r\n//             loading: false,\r\n//             selectedId: fetchRecordParam.primaryKeyValue,\r\n//             dataList\r\n//           }\r\n//         });\r\n//       })\r\n//       .catch(error => {\r\n//         dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//         if (error.response.status === 500) {\r\n//           toast.error(intl.formatMessage({ id: error.message }));\r\n//         } else {\r\n//           toast.warn(intl.formatMessage({ id: error.response.data }));\r\n//         }\r\n//       })\r\n//   }\r\n// }\r\nexport function onServiceLoad(userInfo, inputParam, ncontrolCode, comboColumnField, primarykeyvalue, inputData) {\r\n  return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n    let urlArray = [];\r\n\r\n\r\n    comboColumnField.map(item => {\r\n        urlArray.push(rsapi.post(item.classUrl + \"/\" + item.onChangeUrl, {\r\n          userinfo: userInfo,\r\n          [item.tableDataField]: primarykeyvalue[item.tableDataField], \"parentPrimaryField\": inputData.selectedRecord[item.parentPrimaryField]\r\n        }))\r\n    }  //dependentParentPrimaryField into parentPrimaryField\r\n\r\n    )\r\n    Axios.all(urlArray)\r\n      .then(response => {\r\n\r\n        let ComboFieldData = [];\r\n        let dataList = [];\r\n        let selectedRecord = { ...inputData.selectedRecord };\r\n        comboColumnField.map((item, index) => {\r\n          if (item.ndesigncomponentcode == designComponents.COMBOBOX) {\r\n            ComboFieldData = constructOptionList(item.childObjectValue === null ? response[index].data || [] : response[index].data[item.childObjectValue], item.childPrimaryField,\r\n              item.childdataField, undefined, undefined, undefined);\r\n            dataList[item.childdataField] = ComboFieldData.get(\"OptionList\");\r\n            selectedRecord[item.childdataField] = undefined;\r\n\r\n          }\r\n        });\r\n\r\n        dataList = { ...inputData.dataList, ...dataList }\r\n\r\n        dispatch({\r\n          type: DEFAULT_RETURN,\r\n          payload: {\r\n            dataList,\r\n            //  operation,\r\n            screenName: inputParam.displayName,\r\n            openModal: true,\r\n            ncontrolCode, loading: false,\r\n            selectedRecord\r\n          }\r\n        })\r\n      })\r\n\r\n      .catch(error => {\r\n\r\n        dispatch(initRequest(false));\r\n\r\n        if (error.response.status === 500) {\r\n\r\n          toast.error(error.message);\r\n\r\n        } else {\r\n\r\n          toast.warn(intl.formatMessage({\r\n\r\n            id: error.response.data\r\n\r\n          }));\r\n\r\n        }\r\n\r\n      })\r\n\r\n  }\r\n\r\n}\r\n\r\nexport function dynamicFileDownload(filedata) {\r\n  return (dispatch) => {\r\n    if (filedata.viewName === 'InfoView') {\r\n      if (filedata && filedata[filedata.field[2] + ['_ssystemfilename_Sample']] !== undefined && filedata[filedata.field[2]] !== \"\") {\r\n        const inputParam = {\r\n          inputData: {\r\n            viewFile: {\r\n              ssystemfilename: filedata[filedata.field[2] + ['_ssystemfilename_Sample']],\r\n              npreregno: filedata.npreregno,\r\n              sarno: filedata.sarno,\r\n              sfilename: filedata[filedata.field[2]]\r\n            },\r\n            userinfo: filedata.userInfo\r\n          },\r\n          classUrl: \"registration\",\r\n          operation: \"view\",\r\n          methodUrl: \"RegistrationFile\",\r\n          //screenName: filedata.displayName\r\n        }\r\n        dispatch(viewAttachment(inputParam));\r\n      } else {\r\n        toast.warn(intl.formatMessage({ id: \"IDS_FILENOTUPLOADED\" }))\r\n      }\r\n    } else if (filedata.viewName === 'subSample') {\r\n      if (filedata && filedata[filedata.field[2] + ['_ssystemfilename_subSample']] !== undefined && filedata[filedata.field[2]] !== \"\") {\r\n        const inputParam = {\r\n          inputData: {\r\n            viewFile: {\r\n              ssystemfilename: filedata[filedata.field[2] + ['_ssystemfilename_subSample']],\r\n              npreregno: filedata.npreregno,\r\n              ntransactionsamplecode: filedata.ntransactionsamplecode,\r\n              ssamplearno: filedata.ssamplearno,\r\n              sfilename: filedata[filedata.field[2]],\r\n              sarno: filedata.sarno\r\n            },\r\n            userinfo: filedata.userInfo\r\n          },\r\n          classUrl: \"registration\",\r\n          operation: \"view\",\r\n          methodUrl: \"RegistrationSubSampleFile\",\r\n          //screenName: filedata.displayName\r\n        }\r\n        dispatch(viewAttachment(inputParam));\r\n      } else {\r\n        toast.warn(intl.formatMessage({ id: \"IDS_FILENOTUPLOADED\" }))\r\n      }\r\n    } else {\r\n      let isFileupload;\r\n      if (filedata && filedata[filedata['dataField'] + ['_ssystemfilename']] !== undefined && filedata[filedata['dataField']] !== \"\") {\r\n        isFileupload = true;\r\n      }\r\n      if (filedata && filedata[filedata.dataField + ['_ssystemfilename_Sample']] !== undefined && filedata[filedata.dataField] !== \"\") {\r\n        isFileupload = true;\r\n      }\r\n      if (isFileupload) {\r\n        const inputParam = {\r\n          inputData: {\r\n            viewFile: filedata.screenName === 'SampleRegistration' ?\r\n              {\r\n                ssystemfilename: filedata[filedata.dataField + ['_ssystemfilename_Sample']],\r\n                npreregno: filedata.npreregno,\r\n                sarno: filedata.sarno,\r\n                sfilename: filedata[filedata.dataField]\r\n              } :\r\n              {\r\n                ssystemfilename: filedata[filedata['dataField'] + ['_ssystemfilename']],\r\n                ndynamicmastercode: filedata.ndynamicmastercode,\r\n                ndesigntemplatemappingcode: filedata.ndesigntemplatemappingcode,\r\n                sfieldname: filedata.dataField,\r\n                sfilename: filedata[filedata.dataField]\r\n              },\r\n            userinfo: filedata.userInfo\r\n          },\r\n          classUrl: filedata.classUrl,\r\n          operation: \"view\",\r\n          methodUrl: filedata.methodUrl,\r\n          //screenName: filedata.displayName\r\n        }\r\n        dispatch(viewAttachment(inputParam));\r\n      } else {\r\n        toast.warn(intl.formatMessage({ id: \"IDS_FILENOTUPLOADED\" }))\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function modalSave(inputParam, masterData) {\r\n\r\n  return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n    rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, inputParam.inputData).then(response => {\r\n\r\n      masterData = {\r\n        ...masterData,\r\n        ...response.data\r\n      }\r\n      if (inputParam.postParam) {\r\n\r\n        const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n\r\n          x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]\r\n\r\n        );\r\n\r\n        masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\r\n\r\n        if (masterData[\"searchedData\"] !== undefined) {\r\n\r\n          const foundIndex = masterData[\"searchedData\"].findIndex(\r\n\r\n            x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]\r\n\r\n          );\r\n          masterData[\"searchedData\"][foundIndex] = masterData[inputParam.postParam.selectedObject];\r\n        }\r\n        // sortData(masterData);\r\n      }\r\n      masterData = sortData(masterData);\r\n      dispatch({\r\n        type: DEFAULT_RETURN, payload: {\r\n\r\n          loading: false,\r\n          masterData,\r\n          modalShow: inputParam.modalShow,\r\n          openModal: false,\r\n          modalTitle: undefined,\r\n          operation: inputParam.operation\r\n        }\r\n      }\r\n      )\r\n    })\r\n      .catch(error => {\r\n\r\n        dispatch({\r\n          type: DEFAULT_RETURN,\r\n          payload: {\r\n            loadEsign: false,\r\n            loading: false,\r\n            modalShow: true,\r\n            openModal: false\r\n          }\r\n        })\r\n\r\n        if (error.response.status === 500) {\r\n          toast.error(error.message);\r\n        }\r\n        else {\r\n          toast.warn(error.response.data);\r\n        }\r\n      })\r\n  }\r\n\r\n}\r\n\r\nexport function openBarcodeModal(selectedMaster, ncontrolCode, userinfo) {\r\n  return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n\r\n\r\n    let urlArray = [];\r\n    const getPrinter = rsapi.post(\"barcode/getPrinter\", userinfo);\r\n    const getControlBasedBarcode = rsapi.post(\"barcodeconfiguration/checkConfiguration\", { selectedMaster, ncontrolCode, userinfo, Multiselect:Array.isArray(selectedMaster) });\r\n    urlArray = [getPrinter, getControlBasedBarcode]\r\n    Axios.all(urlArray).then(response => {\r\n\r\n      const printer = constructOptionList(response[0].data || [], \"sprintername\",\r\n        \"sprintername\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n      const barcode = constructOptionList(response[1].data.Barcode || [], \"sbarcodename\",\r\n        \"sbarcodename\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n       const selectedRecord={}\r\n\r\n       if(printer.length>0)\r\n       selectedRecord['sprintername']=printer[0];\r\n\r\n        if(barcode.length>0)selectedRecord['nbarcode']=barcode[0];\r\n        selectedRecord['nbarcodeprint']=1\r\n       \r\n\r\n      dispatch({\r\n        type: DEFAULT_RETURN,\r\n        payload: {\r\n          openModal: true,\r\n          operation: \"barcode\",\r\n          BarcodeList: barcode,\r\n          Printer: printer,\r\n          loading: false,\r\n          ncontrolcode: ncontrolCode,\r\n          nbarcodeprint: response[1].data.nbarcodeprint,\r\n          barcodeSelectedRecord: selectedMaster,\r\n          selectedRecord:selectedRecord\r\n        }\r\n      })\r\n    })\r\n\r\n      .catch(error => {\r\n\r\n        dispatch(initRequest(false));\r\n\r\n        if (error.response.status === 500) {\r\n\r\n          toast.error(error.message);\r\n\r\n        } else {\r\n\r\n          toast.warn(intl.formatMessage({\r\n\r\n            id: error.response.data\r\n\r\n          }));\r\n\r\n        }\r\n\r\n      })\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\nexport function barcodeGeneration(selectedMaster, ncontrolCode, userinfo, selectedRecord) {\r\n  return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n    let list = []\r\n    if (Array.isArray(selectedMaster)) {\r\n      list = selectedMaster\r\n    } else {\r\n      list.push(selectedMaster)\r\n    }\r\n    rsapi.post(\"barcodeconfiguration/barcodeGeneration\", {\r\n      selectedMaster: list, ncontrolCode,\r\n      userinfo, nbarcode: selectedRecord.nbarcode.item.nbarcode, sprintername: selectedRecord.sprintername.value,\r\n      nbarcodeprintcount: selectedRecord.nbarcodeprintcount ? selectedRecord.nbarcodeprintcount : 1\r\n    })\r\n      .then(response => {\r\n        toast.info(response.data)\r\n\r\n        dispatch({\r\n          type: DEFAULT_RETURN,\r\n          payload: {\r\n            openModal: false,\r\n            operation: \"barcode\",\r\n            loading: false,\r\n            selectedRecord: {},\r\n            barcodeSelectedRecord: undefined\r\n          }\r\n        })\r\n      })\r\n\r\n      .catch(error => {\r\n\r\n        dispatch(initRequest(false));\r\n\r\n        if (error.response.status === 500) {\r\n\r\n          toast.error(error.message);\r\n\r\n        } else {\r\n\r\n          toast.warn(intl.formatMessage({\r\n\r\n            id: error.response.data\r\n\r\n          }));\r\n\r\n        }\r\n\r\n      })\r\n\r\n  }\r\n\r\n}\r\n\r\nexport const syncAction = (inputParam) => {\r\n  return (dispatch) => {\r\n    dispatch(initRequest(true));\r\n    return rsapi.post(inputParam.classUrl + \"/\"+inputParam.operation+ inputParam.methodUrl, inputParam.inputData)\r\n      .then(response => {       \r\n \r\n        let data = response.data;\r\n        sortData(data);\r\n \r\n        const updateInfo = {\r\n          typeName: DEFAULT_RETURN,\r\n          data: { masterData: [],operation:inputParam.operation, organisation: undefined, }\r\n        }\r\n        dispatch(updateStore(updateInfo))\r\n \r\n       \r\n \r\n        dispatch({\r\n          type: DEFAULT_RETURN,\r\n          payload: {\r\n            masterData: data,\r\n            operation:inputParam.operation,\r\n            activeTestTab: data.activeTestTab,\r\n            activeTestKey: data.activeTestKey,\r\n            activeBCTab: data.activeBCTab,\r\n            inputParam: inputParam,\r\n            masterStatus: \"\",\r\n            userInfo: inputParam.inputData.userinfo,\r\n            loading: false, \r\n            openModal :false,\r\n            selectedId: null,\r\n            selectedRecord: {},\r\n            dataState: undefined,\r\n            organisation: {\r\n              selectedNode: data.SelectedNode, selectedNodeName: data.SelectedNodeName,\r\n              primaryKeyValue: data.AddedChildPrimaryKey\r\n            },\r\n            displayName: inputParam.displayName,\r\n            reportFilePath: undefined,\r\n            skip: 0, take: undefined,\r\n            testskip: 0,\r\n            testtake: inputParam.inputData.settings ? inputParam.inputData.settings[12] : 10,           \r\n          }\r\n        })\r\n \r\n      })\r\n      .catch(error => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false,openModal:false,loadEsign:false } })\r\n        if (error.response.status === 503) {         \r\n          toast.warn(intl.formatMessage({id:\"IDS_SYNCUNABLEOATTEMPT\"}));            \r\n        }else if(error.response.status === 500){\r\n          toast.error(error.message);\r\n        }else {\r\n          toast.warn(error.response.data);\r\n        }\r\n       \r\n      })\r\n \r\n  };\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}