{"ast":null,"code":"import _objectSpread from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _defineProperty from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _classCallCheck from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{injectIntl}from'react-intl';import{Row,Col}from'react-bootstrap';import PerfectScrollbar from'react-perfect-scrollbar';import{DEFAULT_RETURN}from'../../actions/LoginTypes';import TestGroupParameterTab from'./TestGroupParameterTab';import CustomTab from'../../components/custom-tabs/custom-tabs.component';import{showEsign}from'../../components/CommonScript';import Esign from'../audittrail/Esign';import SlideOutModal from'../../components/slide-out-modal/SlideOutModal';import{parameterType,transactionStatus}from'../../components/Enumeration';import EditTestGroupParameter from'./EditTestGroupParameter';import AddCodedResult from'../testmanagement/AddCodedResult';import FormTextarea from'../../components/form-textarea/form-textarea.component';import AddSpecification from'../testmanagement/AddSpecification';import TemplateForm from'../checklist/checklist/TemplateForm';import{toast}from'react-toastify';var TestGroupTestTab=/*#__PURE__*/function(_Component){_inherits(TestGroupTestTab,_Component);var _super=_createSuper(TestGroupTestTab);function TestGroupTestTab(props){var _this;_classCallCheck(this,TestGroupTestTab);_this=_super.call(this,props);_this.onTemplateInputChange=function(event){var selectedRecord=_this.state.selectedRecord||{};if(event.target.type==='checkbox'){selectedRecord[event.target.name]=event.target.checked===true?transactionStatus.YES:transactionStatus.NO;}else{selectedRecord[event.target.name]=event.target.value;}_this.setState({selectedRecord:selectedRecord});};_this.onTemplateComboChange=function(comboData,fieldName){var selectedRecord=_this.state.selectedRecord||{};selectedRecord[fieldName]=comboData;_this.setState({selectedRecord:selectedRecord});};_this.onTemplateDateChange=function(dateName,dateValue){var _ref=_this.state.selectedRecord||{},selectedRecord=_ref.selectedRecord;if(dateValue===null){dateValue=new Date();}selectedRecord[dateName]=dateValue;_this.setState({selectedRecord:selectedRecord});};_this.handleClose=function(){var updateInfo={typeName:DEFAULT_RETURN,data:{selectedRecord:{},testGroupCheckList:{},openTemplateModal:false}};_this.props.updateStore(updateInfo);};_this.closeModal=function(){var loadEsign=_this.props.loadEsign;var openChildModal=_this.props.openChildModal;var selectedRecord=_this.props.selectedRecord;if(_this.props.loadEsign){if(_this.props.operation===\"delete\"||_this.props.operation===\"Default\"){loadEsign=false;openChildModal=false;selectedRecord={};}else{loadEsign=false;selectedRecord[\"agree\"]=4;}}else{openChildModal=false;selectedRecord={};}var updateInfo={typeName:DEFAULT_RETURN,data:{openChildModal:openChildModal,loadEsign:loadEsign,selectedRecord:selectedRecord}};_this.props.updateStore(updateInfo);};_this.onTabChange=function(tabProps){var screenName=tabProps.screenName;var updateInfo={typeName:DEFAULT_RETURN,data:{screenName:screenName}};_this.props.updateStore(updateInfo);};_this.tabDetail=function(){var tabMap=new Map();tabMap.set(\"IDS_PARAMETER\",/*#__PURE__*/React.createElement(TestGroupParameterTab,{controlMap:_this.props.controlMap,userRoleControlRights:_this.props.userRoleControlRights,userInfo:_this.props.userInfo,inputParam:_this.props.inputParam,masterData:_this.props.masterData,deleteAction:_this.deleteAction,onSwitchChange:_this.onSwitchChange,addTestFile:_this.props.addTestFile,viewTestFile:_this.viewTestFile,defaultRecord:_this.defaultRecord,getTestGroupParameter:_this.props.getTestGroupParameter,editTestGroupParameter:_this.props.editTestGroupParameter,addTestGroupCodedResult:_this.props.addTestGroupCodedResult,viewTestGroupCheckList:_this.props.viewTestGroupCheckList}));return tabMap;};_this.onSaveClick=function(saveType,formRef){var inputParam={};// if(this.props.screenName === \"IDS_TEST\" \n//     || this.props.screenName === \"IDS_EDITTESTGROUPTEST\") {\n//     inputParam = this.onSaveTest(saveType, formRef);\n// } else \nif(_this.props.screenName===\"IDS_FORMULA\"){inputParam=_this.onSaveFormula(saveType,formRef);}else if(_this.props.screenName===\"IDS_PARAMETER\"){inputParam=_this.onSaveParameter(saveType,formRef);}else if(_this.props.screenName===\"IDS_CODEDRESULT\"){inputParam=_this.onSaveCodedResult(saveType,formRef);}if(showEsign(_this.props.esignRights,_this.props.userInfo.nformcode,_this.props.ncontrolCode)){var updateInfo={typeName:DEFAULT_RETURN,data:{loadEsign:true,screenData:{inputParam:inputParam,masterData:_this.props.masterData},saveType:saveType}};_this.props.updateStore(updateInfo);}else{_this.props.crudMaster(inputParam,_this.props.masterData,\"openChildModal\",{});}};_this.onSaveParameter=function(saveType,formRef){var selectedRecord=_this.state.selectedRecord;var parameterList=[\"ntestgrouptestparametercode\",\"ntestgrouptestcode\",\"ntestparametercode\",\"sparametersynonym\",\"nroundingdigits\",\"nresultmandatory\",\"nreportmandatory\",\"sspecdesc\",\"nsorter\"];var testGroupTestParameter={nparametertypecode:selectedRecord.nparametertypecode.value,nunitcode:selectedRecord.nunitcode.value,nchecklistversioncode:selectedRecord.nchecklistversioncode.value};parameterList.map(function(item){return testGroupTestParameter[item]=selectedRecord[item]?selectedRecord[item]:\"\";});var inputData={testgrouptestparameter:testGroupTestParameter,userinfo:_this.props.userInfo};if(selectedRecord.nparametertypecode.value===parameterType.NUMERIC){var testGroupTestNumericParameter={};var numericList=[\"sminlod\",\"smaxlod\",\"sminb\",\"smina\",\"smaxa\",\"smaxb\",\"sminloq\",\"smaxloq\",\"sdisregard\",\"sresultvalue\"];testGroupTestNumericParameter[\"ntestgrouptestparametercode\"]=selectedRecord.ntestgrouptestparametercode;numericList.map(function(item){return testGroupTestNumericParameter[item]=selectedRecord[item]?selectedRecord[item]===\"0\"?selectedRecord[item]:selectedRecord[item].replace(/^0+/,''):null;});inputData[\"testgrouptestnumericparameter\"]=testGroupTestNumericParameter;if(selectedRecord.ntestformulacode){var testFormula=selectedRecord.ntestformulacode.item;var testgrouptestformula={ntestgrouptestparametercode:selectedRecord.ntestgrouptestparametercode,ntestgrouptestcode:selectedRecord.ntestgrouptestcode,ntestformulacode:testFormula.ntestformulacode,sformulacalculationcode:testFormula.sformulacalculationcode,sformulacalculationdetail:testFormula.sformulacalculationdetail,ntransactionstatus:transactionStatus.YES};inputData[\"testgrouptestformula\"]=testgrouptestformula;}else{inputData[\"testgrouptestformula\"]=null;}}else if(selectedRecord.nparametertypecode.value===parameterType.CHARACTER){var characterList=[\"ntestgrouptestparametercode\",\"scharname\"];var testGroupTestCharParameter={};characterList.map(function(item){return testGroupTestCharParameter[item]=selectedRecord[item]?selectedRecord[item]:\"\";});inputData[\"testgrouptestcharparameter\"]=testGroupTestCharParameter;}else if(selectedRecord.nparametertypecode.value===parameterType.PREDEFINED){var testGroupTestPredefParameter={ntestgrouptestparametercode:selectedRecord.ntestgrouptestparametercode,ngradecode:selectedRecord.ngradecode.value,spredefinedname:selectedRecord.spredefinedname,ntestgrouptestpredefcode:selectedRecord.ntestgrouptestpredefcode,ndefaultstatus:selectedRecord.ndefaultstatus};inputData[\"testgrouptestpredefparameter\"]=testGroupTestPredefParameter;}console.log(\"input data:\",inputData);var inputParam={inputData:inputData,classUrl:\"testgroup\",operation:\"update\",methodUrl:\"TestGroupParameter\",saveType:saveType,formRef:formRef,searchRef:_this.searchRef,postParam:{inputListName:\"TestGroupTest\",selectedObject:\"SelectedTest\",primaryKeyField:\"ntestgrouptestcode\",primaryKeyValue:_this.props.masterData.SelectedTest.ntestgrouptestcode,fetchUrl:\"testgroup/getTestGroupTest\",fecthInputObject:{userinfo:_this.props.userInfo},masterData:_this.props.masterData,searchFieldList:_this.searchFieldList}};return inputParam;};_this.onSaveFormula=function(saveType,formRef){var masterData=_this.props.masterData;var selectedRecord=_this.state.selectedRecord;var selectedParameter=masterData.selectedParameter;var testFormulaArray=selectedRecord.ntestformulacode.map(function(test){return{ntestgrouptestcode:selectedParameter.ntestgrouptestcode,ntestgrouptestparametercode:selectedParameter.ntestgrouptestparametercode,ntestformulacode:test.item.ntestformulacode,sformulacalculationcode:test.item.sformulacalculationcode,sformulacalculationdetail:test.item.sformulacalculationdetail,ntransactionstatus:transactionStatus.NO};});var inputData={testgroupspecification:masterData.SelectedSpecification,testgrouptestformula:testFormulaArray,userinfo:_this.props.userInfo};var inputParam={inputData:inputData,classUrl:\"testgroup\",operation:_this.props.operation,methodUrl:\"TestGroupTestFormula\",saveType:saveType,formRef:formRef,searchRef:_this.searchRef,postParam:{inputListName:\"TestGroupTest\",selectedObject:\"SelectedTest\",primaryKeyField:\"ntestgrouptestcode\",primaryKeyValue:_this.props.masterData.SelectedTest.ntestgrouptestcode,fetchUrl:\"testgroup/getTestGroupTest\",fecthInputObject:{userinfo:_this.props.userInfo},masterData:_this.props.masterData,searchFieldList:_this.searchFieldList}};return inputParam;};_this.onSaveCodedResult=function(saveType,formRef){var selectedRecord=_this.state.selectedRecord;var testGroupPredefParameter={ndefaultstatus:transactionStatus.NO,nstatus:transactionStatus.ACTIVE,ntestgrouptestpredefcode:selectedRecord[\"ntestgrouptestpredefcode\"],ntestgrouptestparametercode:_this.props.masterData.selectedParameter[\"ntestgrouptestparametercode\"],ngradecode:selectedRecord[\"ngradecode\"].value,spredefinedname:selectedRecord[\"spredefinedname\"]};var inputParam={inputData:{testgrouptestpredefinedparameter:testGroupPredefParameter,userinfo:_this.props.userInfo,testgroupspecification:_this.props.masterData.SelectedSpecification},classUrl:\"testgroup\",operation:_this.props.operation,methodUrl:\"TestGroupPredefParameter\",saveType:saveType,formRef:formRef,searchRef:_this.searchRef,postParam:{inputListName:\"TestGroupTest\",selectedObject:\"SelectedTest\",primaryKeyField:\"ntestgrouptestcode\",primaryKeyValue:_this.props.masterData.SelectedTest.ntestgrouptestcode,fetchUrl:\"testgroup/getTestGroupTest\",fecthInputObject:{userinfo:_this.props.userInfo},masterData:_this.props.masterData,searchFieldList:_this.searchFieldList}};return inputParam;};_this.deleteTest=function(deleteParam){var testgroupspecification=_this.props.masterData.SelectedSpecification;if(testgroupspecification.napprovalstatus===transactionStatus.DRAFT||testgroupspecification.napprovalstatus===transactionStatus.CORRECTION){var screenName=deleteParam.screenName;var inputParam={inputData:{testgrouptest:deleteParam.selectedRecord,userinfo:_this.props.userInfo,testgroupspecification:testgroupspecification,treetemplatemanipulation:_this.props.masterData.selectedNode},classUrl:\"testgroup\",operation:\"delete\",methodUrl:\"Test\",screenName:\"IDS_TEST\",postParam:{inputListName:\"TestGroupTest\",selectedObject:\"SelectedTest\",primaryKeyField:\"ntestgrouptestcode\",primaryKeyValue:deleteParam.selectedRecord.ntestgrouptestcode,fetchUrl:\"testgroup/getTestGroupTest\",fecthInputObject:{userinfo:_this.props.userInfo},masterData:_this.props.masterData,searchFieldList:_this.searchFieldList}};var masterData=_this.props.masterData;if(showEsign(_this.props.esignRights,_this.props.userInfo.nformcode,_this.props.ncontrolCode)){var updateInfo={typeName:DEFAULT_RETURN,data:{loadEsign:true,screenData:{inputParam:inputParam,masterData:masterData},openModal:true,screenName:screenName,operation:deleteParam.operation,selectedRecord:{}}};_this.props.updateStore(updateInfo);}else{_this.props.crudMaster(inputParam,masterData,\"openModal\",{});}}else{toast.warn(_this.props.intl.formatMessage({id:\"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"}));}};_this.deleteAction=function(item,operation,ncontrolCode,methodUrl,modalName){var _inputData;var selected=item;var inputParam={inputData:(_inputData={},_defineProperty(_inputData,methodUrl.toLowerCase(),selected),_defineProperty(_inputData,\"userinfo\",_this.props.userInfo),_defineProperty(_inputData,\"testgroupspecification\",_this.props.masterData.SelectedSpecification),_inputData),classUrl:\"testgroup\",operation:operation,methodUrl:methodUrl,screenName:\"IDS_TEST\",postParam:{inputListName:\"TestGroupTest\",selectedObject:\"SelectedTest\",primaryKeyField:\"ntestgrouptestcode\",primaryKeyValue:_this.props.masterData.SelectedTest.ntestgrouptestcode,fetchUrl:\"testgroup/getTestGroupTest\",fecthInputObject:{userinfo:_this.props.userInfo},masterData:_this.props.masterData,searchFieldList:_this.searchFieldList}};var masterData=_this.props.masterData;if(showEsign(_this.props.esignRights,_this.props.userInfo.nformcode,ncontrolCode)){var _data;var updateInfo={typeName:DEFAULT_RETURN,data:(_data={loadEsign:true,screenData:{inputParam:inputParam,masterData:masterData}},_defineProperty(_data,modalName,true),_defineProperty(_data,\"screenName\",\"IDS_TEST\"),_defineProperty(_data,\"operation\",operation),_defineProperty(_data,\"selectedRecord\",{}),_data)};_this.props.updateStore(updateInfo);}else{_this.props.crudMaster(inputParam,masterData,\"openChildModal\",{});}};_this.onSwitchChange=function(item,key,methodUrl){var _inputData2;var dataItem=item;if(methodUrl===\"TestGroupTestFormula\"){dataItem[\"ntransactionstatus\"]=transactionStatus.YES;}else{dataItem[\"ndefaultstatus\"]=transactionStatus.YES;}var inputParam={inputData:(_inputData2={},_defineProperty(_inputData2,key,dataItem),_defineProperty(_inputData2,\"userinfo\",_this.props.userInfo),_defineProperty(_inputData2,\"testgroupspecification\",_this.props.masterData.SelectedSpecification),_inputData2),classUrl:\"testgroup\",operation:\"default\",methodUrl:methodUrl};_this.props.crudMaster(inputParam,_this.props.masterData,\"openChildModal\",{});};_this.onEsignInputOnChange=function(event){var selectedRecord=_this.state.selectedRecord||{};if(event.target.type==='checkbox'){selectedRecord[event.target.name]=event.target.checked===true?transactionStatus.YES:transactionStatus.NO;}else{selectedRecord[event.target.name]=event.target.value;}_this.setState({selectedRecord:selectedRecord});};_this.onComboChange=function(comboData,fieldName,caseNo){var selectedRecord=_this.state.selectedRecord||{};switch(caseNo){case 1:selectedRecord[fieldName]=comboData;_this.setState({selectedRecord:selectedRecord});break;case 2:selectedRecord[\"parameterTypeCode\"]=comboData.value;selectedRecord[fieldName]=comboData;var needRoundingDigit=comboData.value===parameterType.NUMERIC?false:true;var needUnit=comboData.value===parameterType.NUMERIC?false:true;var updateInfo={typeName:DEFAULT_RETURN,data:{selectedRecord:selectedRecord,testGroupInputData:_objectSpread(_objectSpread({},_this.props.testGroupInputData),{},{needRoundingDigit:needRoundingDigit,needUnit:needUnit})}};_this.props.updateStore(updateInfo);break;case 3:selectedRecord[\"schecklistversionname\"]=comboData.item.schecklistversionname;selectedRecord[fieldName]=comboData;_this.setState({selectedRecord:selectedRecord});break;default:break;}};_this.onInputOnChange=function(event,caseNo,optional){var selectedRecord=_this.state.selectedRecord||{};switch(caseNo){case 1:if(event.target.type==='checkbox'){selectedRecord[event.target.name]=event.target.checked===true?optional[0]:optional[1];}else if(event.target.type==='radio'){selectedRecord[event.target.name]=optional;}else{selectedRecord[event.target.name]=event.target.value;}_this.setState({selectedRecord:selectedRecord});break;case 2:selectedRecord[event.target.name]=event.target.value;var indexKey=Object.keys(optional)[0];var value=Object.values(optional)[0];var treeData={ntreeversiontempcode:value.ntreeversiontempcode,npositioncode:value.nlevelno-1,sleveldescription:event.target.value,ntemptranstestgroupcode:value.ntemptranstestgroupcode,nformcode:62,schildnode:value.schildnode,nnextchildcode:value.schildnode};var treetemplatemanipulation=selectedRecord.treetemplatemanipulation||[];treetemplatemanipulation[indexKey]=treeData;selectedRecord[\"treetemplatemanipulation\"]=treetemplatemanipulation;_this.setState({selectedRecord:selectedRecord});break;case 4:var inputValue=event.target.value;if(/^-?\\d*?\\.?\\d*?$/.test(inputValue)||inputValue===\"\"){selectedRecord[event.target.name]=event.target.value;}_this.setState({selectedRecord:selectedRecord});break;default:break;}};_this.onNumericInputChange=function(value,name){var selectedRecord=_this.state.selectedRecord||{};selectedRecord[name]=value;_this.setState({selectedRecord:selectedRecord});};_this.validateEsign=function(){var inputParam={inputData:{\"userinfo\":_objectSpread(_objectSpread({},_this.props.userInfo),{},{sreason:_this.state.selectedRecord[\"esigncomments\"]}),password:_this.state.selectedRecord[\"esignpassword\"]},screenData:_this.props.screenData};_this.props.validateEsignCredential(inputParam,\"openChildModal\");};_this.state={selectedRecord:{}};_this.codedResultMandatory=[{\"idsName\":\"IDS_CODEDRESULT\",\"dataField\":\"spredefinedname\",\"width\":\"200px\",\"mandatory\":true},{\"idsName\":\"IDS_ACTUALRESULT\",\"dataField\":\"ngradecode\",\"width\":\"200px\",\"mandatory\":true}];return _this;}_createClass(TestGroupTestTab,[{key:\"render\",value:function render(){var _this2=this;this.paramColumnList=[{\"idsName\":\"IDS_PARAMETERSYNONYM\",\"dataField\":\"sparametersynonym\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"},{\"idsName\":\"IDS_PARAMETERTYPE\",\"dataField\":\"nparametertypecode\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_SELECT\",\"controlType\":\"selectbox\"}];if(this.state.selectedRecord[\"parameterTypeCode\"]&&this.state.selectedRecord[\"parameterTypeCode\"]===parameterType.NUMERIC){this.paramColumnList=[{\"idsName\":\"IDS_PARAMETERSYNONYM\",\"dataField\":\"sparametersynonym\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"},{\"idsName\":\"IDS_PARAMETERTYPE\",\"dataField\":\"nparametertypecode\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_SELECT\",\"controlType\":\"selectbox\"},{\"idsName\":\"IDS_ROUNDINGDIGITS\",\"dataField\":\"nroundingdigits\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"},{\"idsName\":\"IDS_UNI\",\"dataField\":\"nunitcode\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_SELECT\",\"controlType\":\"selectbox\"}];}if(this.state.selectedRecord[\"parameterTypeCode\"]&&this.state.selectedRecord[\"parameterTypeCode\"]===parameterType.PREDEFINED){this.paramColumnList=[{\"idsName\":\"IDS_PARAMETERSYNONYM\",\"dataField\":\"sparametersynonym\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"},{\"idsName\":\"IDS_PARAMETERTYPE\",\"dataField\":\"nparametertypecode\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_SELECT\",\"controlType\":\"selectbox\"},{\"idsName\":\"IDS_CODEDRESULT\",\"dataField\":\"spredefinedname\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"},{\"idsName\":\"IDS_ACTUALRESULT\",\"dataField\":\"ngradecode\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_SELECT\",\"controlType\":\"selectbox\"}];}var paramMandatoryFields=[];this.paramColumnList.forEach(function(item){return item.mandatory===true?paramMandatoryFields.push(item):\"\";});return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(PerfectScrollbar,null,/*#__PURE__*/React.createElement(CustomTab,{paneHeight:this.props.paneHeight,tabDetail:this.tabDetail(),onTabChange:this.onTabChange})),this.props.openChildModal&&this.props.screenName&&/*#__PURE__*/React.createElement(SlideOutModal,{show:this.props.openChildModal,closeModal:this.closeModal,operation:this.props.operation,inputParam:this.props.inputParam,screenName:this.props.screenName,esign:this.props.loadEsign,validateEsign:this.validateEsign,onSaveClick:this.onSaveClick,selectedRecord:this.state.selectedRecord||{},mandatoryFields:this.props.screenName===\"IDS_PARAMETER\"?paramMandatoryFields:this.props.screenName===\"IDS_CODEDRESULT\"?this.codedResultMandatory:[],addComponent:this.props.loadEsign?/*#__PURE__*/React.createElement(Esign,{operation:this.props.operation,onInputOnChange:this.onEsignInputOnChange,inputParam:this.props.inputParam,selectedRecord:this.state.selectedRecord||{}}):this.props.screenName===\"IDS_PARAMETER\"?/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(EditTestGroupParameter,{selectedRecord:this.state.selectedRecord||{},testGroupInputData:this.props.testGroupInputData,onComboChange:this.onComboChange,onInputOnChange:this.onInputOnChange,onNumericInputChange:this.onNumericInputChange}),this.state.selectedRecord[\"parameterTypeCode\"]===parameterType.PREDEFINED||this.state.selectedRecord[\"parameterTypeCode\"]===parameterType.CHARACTER||this.state.selectedRecord[\"parameterTypeCode\"]===parameterType.NUMERIC?/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(\"div\",{className:\"horizontal-line\"}))):\"\",this.state.selectedRecord[\"parameterTypeCode\"]===parameterType.PREDEFINED&&/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(AddCodedResult,{onInputOnChange:this.onInputOnChange,parameterData:this.props.parameterData,selectedRecord:this.state.selectedRecord,onComboChange:this.onComboChange})),this.state.selectedRecord[\"parameterTypeCode\"]===parameterType.CHARACTER&&/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:\"12\"},/*#__PURE__*/React.createElement(FormTextarea,{name:\"scharname\",label:this.props.intl.formatMessage({id:\"IDS_TESTCHARACTER\"}),onChange:function onChange(event){return _this2.onInputOnChange(event,1);},placeholder:this.props.intl.formatMessage({id:\"IDS_TESTCHARACTER\"}),value:this.state.selectedRecord[\"scharname\"],rows:\"2\",required:false,maxLength:255}))),this.state.selectedRecord[\"parameterTypeCode\"]===parameterType.NUMERIC&&/*#__PURE__*/React.createElement(AddSpecification,{selectedRecord:this.state.selectedRecord,onInputOnChange:this.onInputOnChange})):this.props.screenName===\"IDS_CODEDRESULT\"?/*#__PURE__*/React.createElement(AddCodedResult,{onInputOnChange:this.onInputOnChange,parameterData:this.props.parameterData,selectedRecord:this.state.selectedRecord,onComboChange:this.onComboChange}):\"\"}),this.props.testGroupCheckList&&this.props.testGroupCheckList.templateData&&this.props.testGroupCheckList.templateData.length>0&&/*#__PURE__*/React.createElement(TemplateForm,{templateData:this.props.testGroupCheckList.templateData,handleClose:this.handleClose,screenName:\"IDS_VIEWCHECKLIST\",needSaveButton:false,viewScreen:this.props.openTemplateModal,onTemplateInputChange:this.onTemplateInputChange,onTemplateComboChange:this.onTemplateComboChange,onTemplateDateChange:this.onTemplateDateChange}));}},{key:\"componentDidUpdate\",value:function componentDidUpdate(previousProps){if(this.props.selectedRecord!==previousProps.selectedRecord){this.setState({selectedRecord:this.props.selectedRecord});}}}]);return TestGroupTestTab;}(Component);export default injectIntl(TestGroupTestTab);","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/testgroup/TestGroupTestTab.jsx"],"names":["React","Component","injectIntl","Row","Col","PerfectScrollbar","DEFAULT_RETURN","TestGroupParameterTab","CustomTab","showEsign","Esign","SlideOutModal","parameterType","transactionStatus","EditTestGroupParameter","AddCodedResult","FormTextarea","AddSpecification","TemplateForm","toast","TestGroupTestTab","props","onTemplateInputChange","event","selectedRecord","state","target","type","name","checked","YES","NO","value","setState","onTemplateComboChange","comboData","fieldName","onTemplateDateChange","dateName","dateValue","Date","handleClose","updateInfo","typeName","data","testGroupCheckList","openTemplateModal","updateStore","closeModal","loadEsign","openChildModal","operation","onTabChange","tabProps","screenName","tabDetail","tabMap","Map","set","controlMap","userRoleControlRights","userInfo","inputParam","masterData","deleteAction","onSwitchChange","addTestFile","viewTestFile","defaultRecord","getTestGroupParameter","editTestGroupParameter","addTestGroupCodedResult","viewTestGroupCheckList","onSaveClick","saveType","formRef","onSaveFormula","onSaveParameter","onSaveCodedResult","esignRights","nformcode","ncontrolCode","screenData","crudMaster","parameterList","testGroupTestParameter","nparametertypecode","nunitcode","nchecklistversioncode","map","item","inputData","testgrouptestparameter","userinfo","NUMERIC","testGroupTestNumericParameter","numericList","ntestgrouptestparametercode","replace","ntestformulacode","testFormula","testgrouptestformula","ntestgrouptestcode","sformulacalculationcode","sformulacalculationdetail","ntransactionstatus","CHARACTER","characterList","testGroupTestCharParameter","PREDEFINED","testGroupTestPredefParameter","ngradecode","spredefinedname","ntestgrouptestpredefcode","ndefaultstatus","console","log","classUrl","methodUrl","searchRef","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","SelectedTest","fetchUrl","fecthInputObject","searchFieldList","selectedParameter","testFormulaArray","test","testgroupspecification","SelectedSpecification","testGroupPredefParameter","nstatus","ACTIVE","testgrouptestpredefinedparameter","deleteTest","deleteParam","napprovalstatus","DRAFT","CORRECTION","testgrouptest","treetemplatemanipulation","selectedNode","openModal","warn","intl","formatMessage","id","modalName","selected","toLowerCase","key","dataItem","onEsignInputOnChange","onComboChange","caseNo","needRoundingDigit","needUnit","testGroupInputData","schecklistversionname","onInputOnChange","optional","indexKey","Object","keys","values","treeData","ntreeversiontempcode","npositioncode","nlevelno","sleveldescription","ntemptranstestgroupcode","schildnode","nnextchildcode","inputValue","onNumericInputChange","validateEsign","sreason","password","validateEsignCredential","codedResultMandatory","paramColumnList","paramMandatoryFields","forEach","mandatory","push","paneHeight","parameterData","templateData","length","previousProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport TestGroupParameterTab from './TestGroupParameterTab';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\r\nimport { showEsign } from '../../components/CommonScript';\r\nimport Esign from '../audittrail/Esign';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { parameterType, transactionStatus } from '../../components/Enumeration';\r\nimport EditTestGroupParameter from './EditTestGroupParameter';\r\nimport AddCodedResult from '../testmanagement/AddCodedResult';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport AddSpecification from '../testmanagement/AddSpecification';\r\nimport TemplateForm from '../checklist/checklist/TemplateForm';\r\nimport { toast } from 'react-toastify';\r\n\r\nclass TestGroupTestTab extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedRecord: {}\r\n        }\r\n        this.codedResultMandatory = [{ \"idsName\": \"IDS_CODEDRESULT\", \"dataField\": \"spredefinedname\", \"width\": \"200px\", \"mandatory\": true },\r\n        { \"idsName\": \"IDS_ACTUALRESULT\", \"dataField\": \"ngradecode\", \"width\": \"200px\", \"mandatory\": true }];\r\n    }\r\n\r\n    render() {\r\n        this.paramColumnList = [\r\n            { \"idsName\": \"IDS_PARAMETERSYNONYM\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_PARAMETERTYPE\", \"dataField\": \"nparametertypecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n        ]\r\n        if (this.state.selectedRecord[\"parameterTypeCode\"] && this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC) {\r\n            this.paramColumnList = [\r\n                { \"idsName\": \"IDS_PARAMETERSYNONYM\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_PARAMETERTYPE\", \"dataField\": \"nparametertypecode\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                { \"idsName\": \"IDS_ROUNDINGDIGITS\", \"dataField\": \"nroundingdigits\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                { \"idsName\": \"IDS_UNI\", \"dataField\": \"nunitcode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        }\r\n        if (this.state.selectedRecord[\"parameterTypeCode\"] && this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED) {\r\n            this.paramColumnList = [\r\n                { \"idsName\": \"IDS_PARAMETERSYNONYM\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_PARAMETERTYPE\", \"dataField\": \"nparametertypecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_CODEDRESULT\", \"dataField\": \"spredefinedname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_ACTUALRESULT\", \"dataField\": \"ngradecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        }\r\n        const paramMandatoryFields = [];\r\n\r\n        this.paramColumnList.forEach(item => item.mandatory === true ?\r\n            paramMandatoryFields.push(item) : \"\"\r\n        );\r\n        return (\r\n            <>\r\n                <PerfectScrollbar>\r\n                    <CustomTab paneHeight={this.props.paneHeight} tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                </PerfectScrollbar>\r\n\r\n                {this.props.openChildModal && this.props.screenName &&\r\n                    <SlideOutModal\r\n                        show={this.props.openChildModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.operation}\r\n                        inputParam={this.props.inputParam}\r\n                        screenName={this.props.screenName}\r\n                        esign={this.props.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        onSaveClick={this.onSaveClick}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.screenName === \"IDS_PARAMETER\" ? paramMandatoryFields :\r\n                            this.props.screenName === \"IDS_CODEDRESULT\" ? this.codedResultMandatory : []}\r\n                        addComponent={this.props.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.operation}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> :\r\n                            this.props.screenName === \"IDS_PARAMETER\" ?\r\n                                <>\r\n                                    <EditTestGroupParameter\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        testGroupInputData={this.props.testGroupInputData}\r\n                                        onComboChange={this.onComboChange}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onNumericInputChange={this.onNumericInputChange}\r\n                                    />\r\n                                    {this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED ||\r\n                                        this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.CHARACTER ||\r\n                                        this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC ?\r\n                                        <Row>\r\n                                            <Col>\r\n                                                <div className=\"horizontal-line\"></div>\r\n                                            </Col>\r\n                                        </Row> : \"\"\r\n                                    }\r\n\r\n                                    { this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.PREDEFINED &&\r\n                                        <Row>\r\n                                            <AddCodedResult\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                parameterData={this.props.parameterData}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                onComboChange={this.onComboChange}\r\n                                            />\r\n                                        </Row>}\r\n                                    { this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.CHARACTER &&\r\n                                        <Row>\r\n                                            <Col md=\"12\">\r\n                                                <FormTextarea\r\n                                                    name={\"scharname\"}\r\n                                                    label={this.props.intl.formatMessage({ id: \"IDS_TESTCHARACTER\" })}\r\n                                                    onChange={(event) => this.onInputOnChange(event, 1)}\r\n                                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_TESTCHARACTER\" })}\r\n                                                    value={this.state.selectedRecord[\"scharname\"]}\r\n                                                    rows=\"2\"\r\n                                                    required={false}\r\n                                                    maxLength={255}\r\n                                                >\r\n                                                </FormTextarea>\r\n                                            </Col>\r\n                                        </Row>}\r\n                                    { this.state.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC &&\r\n                                        <AddSpecification\r\n                                            selectedRecord={this.state.selectedRecord}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                        />}\r\n                                </> :\r\n                                this.props.screenName === \"IDS_CODEDRESULT\" ?\r\n                                    <AddCodedResult\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        parameterData={this.props.parameterData}\r\n                                        selectedRecord={this.state.selectedRecord}\r\n                                        onComboChange={this.onComboChange}\r\n                                    /> : \"\"\r\n                        }\r\n                    />\r\n                }\r\n                { this.props.testGroupCheckList && this.props.testGroupCheckList.templateData &&\r\n                    this.props.testGroupCheckList.templateData.length > 0 &&\r\n                    <TemplateForm\r\n                        templateData={this.props.testGroupCheckList.templateData}\r\n                        handleClose={this.handleClose}\r\n                        screenName=\"IDS_VIEWCHECKLIST\"\r\n                        needSaveButton={false}\r\n                        viewScreen={this.props.openTemplateModal}\r\n                        onTemplateInputChange={this.onTemplateInputChange}\r\n                        onTemplateComboChange={this.onTemplateComboChange}\r\n                        onTemplateDateChange={this.onTemplateDateChange}\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    onTemplateInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTemplateComboChange = (comboData, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTemplateDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state.selectedRecord || {};\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleClose = () => {\r\n        let updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: {},\r\n                testGroupCheckList: {},\r\n                openTemplateModal: false\r\n            }\r\n        };\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.loadEsign;\r\n        let openChildModal = this.props.openChildModal;\r\n        let selectedRecord = this.props.selectedRecord;\r\n        if (this.props.loadEsign) {\r\n            if (this.props.operation === \"delete\" || this.props.operation === \"Default\") {\r\n                loadEsign = false;\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord[\"agree\"] = 4;\r\n            }\r\n        } else {\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    tabDetail = () => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_PARAMETER\",\r\n            <TestGroupParameterTab\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                userInfo={this.props.userInfo}\r\n                inputParam={this.props.inputParam}\r\n                masterData={this.props.masterData}\r\n                deleteAction={this.deleteAction}\r\n                onSwitchChange={this.onSwitchChange}\r\n                addTestFile={this.props.addTestFile}\r\n                viewTestFile={this.viewTestFile}\r\n                defaultRecord={this.defaultRecord}\r\n                getTestGroupParameter={this.props.getTestGroupParameter}\r\n                editTestGroupParameter={this.props.editTestGroupParameter}\r\n                addTestGroupCodedResult={this.props.addTestGroupCodedResult}\r\n                viewTestGroupCheckList={this.props.viewTestGroupCheckList}\r\n            />);\r\n        return tabMap;\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputParam = {};\r\n        // if(this.props.screenName === \"IDS_TEST\" \r\n        //     || this.props.screenName === \"IDS_EDITTESTGROUPTEST\") {\r\n        //     inputParam = this.onSaveTest(saveType, formRef);\r\n        // } else \r\n        if (this.props.screenName === \"IDS_FORMULA\") {\r\n            inputParam = this.onSaveFormula(saveType, formRef);\r\n        } else if (this.props.screenName === \"IDS_PARAMETER\") {\r\n            inputParam = this.onSaveParameter(saveType, formRef);\r\n        } else if (this.props.screenName === \"IDS_CODEDRESULT\") {\r\n            inputParam = this.onSaveCodedResult(saveType, formRef);\r\n        }\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", {});\r\n        }\r\n    }\r\n\r\n    onSaveParameter = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const parameterList = [\"ntestgrouptestparametercode\", \"ntestgrouptestcode\", \"ntestparametercode\", \"sparametersynonym\", \"nroundingdigits\",\r\n            \"nresultmandatory\", \"nreportmandatory\", \"sspecdesc\", \"nsorter\"];\r\n        let testGroupTestParameter = {\r\n            nparametertypecode: selectedRecord.nparametertypecode.value,\r\n            nunitcode: selectedRecord.nunitcode.value,\r\n            nchecklistversioncode: selectedRecord.nchecklistversioncode.value\r\n        }\r\n        parameterList.map(item => {\r\n            return testGroupTestParameter[item] = selectedRecord[item] ? selectedRecord[item] : \"\";\r\n        });\r\n        let inputData = {\r\n            testgrouptestparameter: testGroupTestParameter,\r\n            userinfo: this.props.userInfo\r\n        };\r\n        if (selectedRecord.nparametertypecode.value === parameterType.NUMERIC) {\r\n            let testGroupTestNumericParameter = {};\r\n            const numericList = [\"sminlod\", \"smaxlod\", \"sminb\", \"smina\", \"smaxa\", \"smaxb\", \"sminloq\", \"smaxloq\", \"sdisregard\", \"sresultvalue\"];\r\n            testGroupTestNumericParameter[\"ntestgrouptestparametercode\"] = selectedRecord.ntestgrouptestparametercode;\r\n            numericList.map(item => {\r\n                return testGroupTestNumericParameter[item] = selectedRecord[item] ? selectedRecord[item] === \"0\" ? selectedRecord[item] : selectedRecord[item].replace(/^0+/, '') : null;\r\n            });\r\n            inputData[\"testgrouptestnumericparameter\"] = testGroupTestNumericParameter;\r\n            if (selectedRecord.ntestformulacode) {\r\n                const testFormula = selectedRecord.ntestformulacode.item;\r\n                const testgrouptestformula = {\r\n                    ntestgrouptestparametercode: selectedRecord.ntestgrouptestparametercode,\r\n                    ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\r\n                    ntestformulacode: testFormula.ntestformulacode,\r\n                    sformulacalculationcode: testFormula.sformulacalculationcode,\r\n                    sformulacalculationdetail: testFormula.sformulacalculationdetail,\r\n                    ntransactionstatus: transactionStatus.YES\r\n                };\r\n                inputData[\"testgrouptestformula\"] = testgrouptestformula;\r\n            } else {\r\n                inputData[\"testgrouptestformula\"] = null;\r\n            }\r\n        } else if (selectedRecord.nparametertypecode.value === parameterType.CHARACTER) {\r\n            const characterList = [\"ntestgrouptestparametercode\", \"scharname\"];\r\n            let testGroupTestCharParameter = {};\r\n            characterList.map(item => {\r\n                return testGroupTestCharParameter[item] = selectedRecord[item] ? selectedRecord[item] : \"\";\r\n            });\r\n            inputData[\"testgrouptestcharparameter\"] = testGroupTestCharParameter;\r\n        } else if (selectedRecord.nparametertypecode.value === parameterType.PREDEFINED) {\r\n            const testGroupTestPredefParameter = {\r\n                ntestgrouptestparametercode: selectedRecord.ntestgrouptestparametercode,\r\n                ngradecode: selectedRecord.ngradecode.value,\r\n                spredefinedname: selectedRecord.spredefinedname,\r\n                ntestgrouptestpredefcode: selectedRecord.ntestgrouptestpredefcode,\r\n                ndefaultstatus:selectedRecord.ndefaultstatus\r\n            }\r\n            inputData[\"testgrouptestpredefparameter\"] = testGroupTestPredefParameter;\r\n        }\r\n        console.log(\"input data:\", inputData);\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: \"update\",\r\n            methodUrl: \"TestGroupParameter\",\r\n            saveType, formRef, searchRef: this.searchRef,\r\n            postParam: {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n            }\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveFormula = (saveType, formRef) => {\r\n        const masterData = this.props.masterData;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const selectedParameter = masterData.selectedParameter;\r\n        const testFormulaArray = selectedRecord.ntestformulacode.map(test => {\r\n            return {\r\n                ntestgrouptestcode: selectedParameter.ntestgrouptestcode,\r\n                ntestgrouptestparametercode: selectedParameter.ntestgrouptestparametercode,\r\n                ntestformulacode: test.item.ntestformulacode,\r\n                sformulacalculationcode: test.item.sformulacalculationcode,\r\n                sformulacalculationdetail: test.item.sformulacalculationdetail,\r\n                ntransactionstatus: transactionStatus.NO\r\n            }\r\n        });\r\n        const inputData = {\r\n            testgroupspecification: masterData.SelectedSpecification,\r\n            testgrouptestformula: testFormulaArray,\r\n            userinfo: this.props.userInfo\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: this.props.operation,\r\n            methodUrl: \"TestGroupTestFormula\",\r\n            saveType, formRef, searchRef: this.searchRef,\r\n            postParam: {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n            }\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveCodedResult = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const testGroupPredefParameter = {\r\n            ndefaultstatus: transactionStatus.NO,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            ntestgrouptestpredefcode: selectedRecord[\"ntestgrouptestpredefcode\"],\r\n            ntestgrouptestparametercode: this.props.masterData.selectedParameter[\"ntestgrouptestparametercode\"],\r\n            ngradecode: selectedRecord[\"ngradecode\"].value,\r\n            spredefinedname: selectedRecord[\"spredefinedname\"]\r\n        };\r\n        const inputParam = {\r\n            inputData: {\r\n                testgrouptestpredefinedparameter: testGroupPredefParameter,\r\n                userinfo: this.props.userInfo,\r\n                testgroupspecification: this.props.masterData.SelectedSpecification\r\n            },\r\n            classUrl: \"testgroup\",\r\n            operation: this.props.operation,\r\n            methodUrl: \"TestGroupPredefParameter\",\r\n            saveType, formRef, searchRef: this.searchRef,\r\n            postParam: {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n            }\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    deleteTest = (deleteParam) => {\r\n        const testgroupspecification = this.props.masterData.SelectedSpecification;\r\n        if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n            || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n            const screenName = deleteParam.screenName;\r\n            const inputParam = {\r\n                inputData: {\r\n                    testgrouptest: deleteParam.selectedRecord,\r\n                    userinfo: this.props.userInfo,\r\n                    testgroupspecification,\r\n                    treetemplatemanipulation: this.props.masterData.selectedNode\r\n                },\r\n                classUrl: \"testgroup\",\r\n                operation: \"delete\",\r\n                methodUrl: \"Test\",\r\n                screenName: \"IDS_TEST\",\r\n                postParam: {\r\n                    inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                    primaryKeyValue: deleteParam.selectedRecord.ntestgrouptestcode,\r\n                    fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                    masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n                }\r\n            }\r\n            const masterData = this.props.masterData;\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: screenName, operation: deleteParam.operation, selectedRecord: {}\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n        }\r\n    }\r\n\r\n    deleteAction = (item, operation, ncontrolCode, methodUrl, modalName) => {\r\n        const selected = item;\r\n        const inputParam = {\r\n            inputData: {\r\n                [methodUrl.toLowerCase()]: selected,\r\n                userinfo: this.props.userInfo,\r\n                testgroupspecification: this.props.masterData.SelectedSpecification\r\n            },\r\n            classUrl: \"testgroup\",\r\n            operation: operation,\r\n            methodUrl: methodUrl,\r\n            screenName: \"IDS_TEST\",\r\n            postParam: {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: this.props.masterData.SelectedTest.ntestgrouptestcode,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.userInfo },\r\n                masterData: this.props.masterData, searchFieldList: this.searchFieldList\r\n            }\r\n        }\r\n        const masterData = this.props.masterData;\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    [modalName]: true, screenName: \"IDS_TEST\", operation: operation, selectedRecord: {}\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\r\n        }\r\n    }\r\n\r\n    onSwitchChange = (item, key, methodUrl) => {\r\n        let dataItem = item;\r\n        if (methodUrl === \"TestGroupTestFormula\") {\r\n            dataItem[\"ntransactionstatus\"] = transactionStatus.YES;\r\n        } else {\r\n            dataItem[\"ndefaultstatus\"] = transactionStatus.YES;\r\n        }\r\n        const inputParam = {\r\n            inputData: {\r\n                [key]: dataItem,\r\n                userinfo: this.props.userInfo,\r\n                testgroupspecification: this.props.masterData.SelectedSpecification\r\n            },\r\n            classUrl: \"testgroup\",\r\n            operation: \"default\",\r\n            methodUrl: methodUrl\r\n        }\r\n        this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", {});\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, caseNo) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                selectedRecord[\"parameterTypeCode\"] = comboData.value;\r\n                selectedRecord[fieldName] = comboData;\r\n                const needRoundingDigit = comboData.value === parameterType.NUMERIC ? false : true;\r\n                const needUnit = comboData.value === parameterType.NUMERIC ? false : true;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        selectedRecord,\r\n                        testGroupInputData: {\r\n                            ...this.props.testGroupInputData,\r\n                            needRoundingDigit, needUnit\r\n                        }\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n                break;\r\n\r\n            case 3:\r\n                selectedRecord[\"schecklistversionname\"] = comboData.item.schecklistversionname;\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event, caseNo, optional) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (event.target.type === 'checkbox') {\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\r\n                } else if (event.target.type === 'radio') {\r\n                    selectedRecord[event.target.name] = optional;\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                selectedRecord[event.target.name] = event.target.value;\r\n                const indexKey = Object.keys(optional)[0];\r\n                const value = Object.values(optional)[0];\r\n                const treeData = {\r\n                    ntreeversiontempcode: value.ntreeversiontempcode,\r\n                    npositioncode: value.nlevelno - 1,\r\n                    sleveldescription: event.target.value,\r\n                    ntemptranstestgroupcode: value.ntemptranstestgroupcode,\r\n                    nformcode: 62,\r\n                    schildnode: value.schildnode,\r\n                    nnextchildcode: value.schildnode\r\n                }\r\n                let treetemplatemanipulation = selectedRecord.treetemplatemanipulation || [];\r\n                treetemplatemanipulation[indexKey] = treeData;\r\n                selectedRecord[\"treetemplatemanipulation\"] = treetemplatemanipulation;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 4:\r\n                const inputValue = event.target.value;\r\n                if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default injectIntl(TestGroupTestTab);"]},"metadata":{},"sourceType":"module"}