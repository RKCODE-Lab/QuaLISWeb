{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\contactmaster\\\\ManufacturerSiteTab.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, Tab, Nav } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { FormattedMessage } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { process } from '@progress/kendo-data-query';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddContactInfoManufacturer from '../../pages/contactmaster/AddContactInfoManufacturer';\nimport AddSiteManufacturer from '../../pages/contactmaster/AddSiteManufacturer';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, validateEmail, validatePhoneNumber, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, Lims_JSON_stringify } from '../../components/CommonScript';\nimport Esign from '../audittrail/Esign';\nimport { transactionStatus, attachmentType } from '../../components/Enumeration';\nimport CustomAccordion from '../../components/custom-accordion/custom-accordion.component';\nimport ManufacturerTabsAccordion from './ManufacturerTabsAccordion';\nimport { toast } from 'react-toastify';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component'; //import ReactTooltip from 'react-tooltip';\n\nimport AddManufacturerFile from './AddManufacturerFile';\n\nclass ManufacturerSiteTab extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.ManufacturerContactInfo, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.openModalContact = input => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal: true,\n          operation: input.operation,\n          selectedRecord: {\n            \"ndefaultstatus\": transactionStatus.NO\n          },\n          defaultSite: undefined,\n          ncontrolCode: input.ncontrolCode,\n          screenName: \"IDS_SITECONTACT\",\n          loading: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.manufacturerSiteAccordion = manufacturerSiteAddress => {\n      let primaryKeyField = \"nmanufcontactcode\";\n      const addManufacturerContactId = this.props.controlMap.has(\"AddManufacturerContactInfo\") && this.props.controlMap.get(\"AddManufacturerContactInfo\").ncontrolcode;\n      const editManufacturerContactId = this.props.controlMap.has(\"EditManufacturerContactInfo\") && this.props.controlMap.get(\"EditManufacturerContactInfo\").ncontrolcode;\n      const editContactParam = {\n        screenName: \"ManufacturerContact\",\n        primaryKeyField: \"nmanufcontactcode\",\n        operation: \"update\",\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        ncontrolCode: editManufacturerContactId\n      };\n      const AddContactParam = {\n        screenName: \"ManufacturerContact\",\n        primaryKeyField,\n        undefined,\n        operation: \"create\",\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        ncontrolCode: addManufacturerContactId\n      };\n      const accordionMap = new Map();\n      manufacturerSiteAddress.map(siteAddress => accordionMap.set(siteAddress.nmanufsitecode, /*#__PURE__*/React.createElement(ManufacturerTabsAccordion, {\n        siteAddress: siteAddress,\n        getSiteManufacturerLoadEdit: this.props.getSiteManufacturerLoadEdit,\n        masterData: this.props.masterData,\n        ConfirmDelete: this.ConfirmDelete,\n        addManufacturerContactId: addManufacturerContactId,\n        AddContactParam: AddContactParam,\n        openModalContact: this.openModalContact // tabDetail={this.tabDetail(userSite)}   \n        ,\n        primaryKeyField: primaryKeyField,\n        expandField: \"expanded\",\n        detailedFieldList: this.detailedFieldList,\n        extractedColumnList: this.ContactColumns,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        data: this.state.ManufacturerContactInfo || [],\n        ManufacturerContactInfo: this.state.ManufacturerContactInfo || [],\n        dataState: this.state.dataState,\n        dataStateChange: this.dataStateChange,\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights || [],\n        methodUrl: \"ManufacturerContactInfo\",\n        getContactManufacturerLoadEdit: this.props.getContactManufacturerLoadEdit,\n        editParam: editContactParam,\n        deleteParam: {\n          operation: \"delete\"\n        },\n        deleteRecord: this.DeleteContact,\n        scrollable: \"scrollable\",\n        isActionRequired: true,\n        selectedId: this.props.selectedId,\n        hasDynamicColSize: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 17\n        }\n      })));\n      return accordionMap;\n    };\n\n    this.ConfirmDelete = obj => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.Delete(obj));\n    };\n\n    this.onInputOnChange = (event, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'ntransactionstatus') {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\n        } else if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        }\n      } else if (event.target.type === \"radio\") {\n        selectedRecord[event.target.name] = optional;\n      } else {\n        if (event.target.name === \"sphoneno\" || event.target.name === \"smobileno\" || event.target.name === \"sfaxno\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validatePhoneNumber(event.target.value);\n            selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        } // selectedRecord[event.target.name] = event.target.value;\n\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData; //.value;\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.loadEsign;\n      let openChildModal = this.props.openChildModal;\n      let selectedRecord = this.props.selectedRecord;\n\n      if (this.props.loadEsign) {\n        if (this.props.operation === \"delete\") {\n          loadEsign = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.state.selectedRecord['semail'] ? validateEmail(this.state.selectedRecord['semail']) : true) {\n        let inputParam = {};\n\n        if (this.props.screenName === \"IDS_MANUFACTURESITE\") {\n          inputParam = this.SaveSiteDetails(saveType, formRef);\n        } else if (this.props.screenName === \"IDS_SITECONTACT\") {\n          inputParam = this.SaveContactInfo(saveType, formRef);\n        } else {\n          inputParam = this.SaveManufacturerFile(saveType, formRef);\n        }\n\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALIDEMAIL\"\n        }));\n      }\n    };\n\n    this.DeleteContact = deleteParam => {\n      let inputData = [];\n\n      if (deleteParam.selectedRecord.expanded !== undefined) {\n        delete deleteParam.selectedRecord.expanded;\n      }\n\n      inputData[\"manufacturercontactinfo\"] = deleteParam.selectedRecord;\n      inputData[\"userinfo\"] = this.props.userInfo;\n      const inputParam = {\n        methodUrl: \"ContactInfo\",\n        classUrl: this.props.inputParam.classUrl,\n        inputData: inputData,\n        operation: \"delete\",\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            openChildModal: true,\n            screenName: \"Contact\",\n            operation: \"delete\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              openChildModal: true,\n              screenName: \"Contact\",\n              operation: \"delete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      }\n    };\n\n    this.Delete = deleteParam => {\n      let inputData = [];\n\n      if (deleteParam.selectedRecord.expanded && deleteParam.selectedRecord.expanded !== undefined) {\n        delete deleteParam.selectedRecord.expanded;\n      }\n\n      inputData[deleteParam.Type] = deleteParam.selectedRecord;\n      inputData[\"userinfo\"] = this.props.userInfo;\n      const inputParam = {\n        methodUrl: deleteParam.methodURL,\n        classUrl: this.props.inputParam.classUrl,\n        inputData: inputData,\n        operation: \"delete\"\n      };\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            openChildModal: true,\n            screenName: deleteParam.screenName,\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              openChildModal: true,\n              screenName: deleteParam.screenName,\n              operation: deleteParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      } //this.props.crudMaster(inputParam, this.props.masterData);\n\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openChildModal\");\n    };\n\n    this.onDropManufacturerFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    const dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      isSiteOpen: false,\n      isContactOpen: false,\n      siteSelectedRecord: {},\n      contactSelectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      ManufacturerContactInfo: this.props.masterData.ManufacturerContactInfo,\n      Country: [],\n      SiteCode: this.props.masterData.SiteCode,\n      selectedRecord: {},\n      countryCode: []\n    };\n    this.ContactColumns = [{\n      \"idsName\": \"IDS_CONTACTNAME\",\n      \"mandatory\": true,\n      \"dataField\": \"scontactname\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      dataField: \"semail\",\n      idsName: \"IDS_EMAILID\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      dataField: \"sdefaultContact\",\n      idsName: \"IDS_DEFAULT\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.siteColumns = [{\n      \"idsName\": \"IDS_MANUFSITENAME\",\n      \"mandatory\": true,\n      \"dataField\": \"smanufsitename\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_ADDRESS1\",\n      \"mandatory\": true,\n      \"dataField\": \"saddress1\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_COUNTRYNAME\",\n      \"mandatory\": true,\n      \"dataField\": \"ncountrycode\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.manufacturerFileFTP = [{\n      \"idsName\": \"IDS_FILE\",\n      \"dataField\": \"sfilename\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"file\"\n    }];\n    this.manufacturerFileLink = [{\n      \"idsName\": \"IDS_FILENAME\",\n      \"dataField\": \"slinkfilename\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"file\"\n    }, {\n      \"idsName\": \"IDS_LINKNAME\",\n      \"dataField\": \"nlinkcode\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.detailedFieldList = [{\n      \"dataField\": \"sphoneno\",\n      \"idsName\": \"IDS_PHONE\",\n      columnSize: \"4\"\n    }, {\n      \"idsName\": \"IDS_MOBILE\",\n      \"dataField\": \"smobileno\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"sfaxno\",\n      idsName: \"IDS_FAX\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"scomments\",\n      idsName: \"IDS_COMMENTS\",\n      columnSize: \"12\"\n    }];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  render() {\n    const addManufacturerSiteId = this.props.controlMap.has(\"AddManufacturerSiteAddress\") && this.props.controlMap.get(\"AddManufacturerSiteAddress\").ncontrolcode; // const editManufacturerSiteId = this.props.controlMap.has(\"EditManufacturerSiteAddress\") && this.props.controlMap.get(\"EditManufacturerSiteAddress\").ncontrolcode;\n    // const deleteManufacturerSiteId = this.props.controlMap.has(\"DeleteManufacturerSiteAddress\") && this.props.controlMap.get(\"DeleteManufacturerSiteAddress\").ncontrolcode\n    //const editManufacturerContactId = this.props.controlMap.has(\"EditManufacturerContactInfo\") && this.props.controlMap.get(\"EditManufacturerContactInfo\").ncontrolcode;\n    // const deleteManufacturerContactId = this.props.controlMap.has(\"DeleteManufacturerContactInfo\") && this.props.controlMap.get(\"DeleteManufacturerContactInfo\").ncontrolcode\n    //let primaryKeyField = \"nmanufcontactcode\";\n    // const editContactParam = {\n    //     screenName: \"ManufacturerContact\", primaryKeyField: \"nmanufcontactcode\", operation: \"update\",\n    //     inputParam: this.props.inputParam, userInfo: this.props.userInfo, ncontrolCode: editManufacturerContactId\n    // };\n    // const deleteParam = { operation: \"delete\" };\n\n    const mandatoryFields = [];\n\n    if (this.props.screenName === \"IDS_MANUFACTURESITE\") {\n      this.siteColumns.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    } else if (this.props.screenName === \"IDS_SITECONTACT\") {\n      this.ContactColumns.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    } else if (this.props.screenName === \"IDS_MANUFACTURERFILE\") {\n      //ALPD-898 Fix\n      if (this.props.selectedRecord.nattachmenttypecode === attachmentType.FTP) {\n        this.manufacturerFileFTP.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n      } else {\n        this.manufacturerFileLink.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Tab.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Tab.Pane, {\n      \"aria-labelledby\": \"Version-tab\",\n      className: \"p-0 active show\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters pt-2 pb-2 col-12 text-right border-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"add-txt-btn\",\n      hidden: this.props.userRoleControlRights.indexOf(addManufacturerSiteId) === -1,\n      onClick: () => this.props.getSiteManufacturerLoadEdit(\"SiteManufacturer\", \"create\", this.props.masterData.selectedManufacturer.nmanufcode, undefined, addManufacturerSiteId, this.props.userInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 53\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_MANUFACTURESITE\",\n      defaultMessage: \"Site Details\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 53\n      }\n    }))))), /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 41\n      }\n    }, this.props.masterData.ManufacturerSiteAddress && this.props.masterData.ManufacturerSiteAddress.length > 0 ? /*#__PURE__*/React.createElement(CustomAccordion, {\n      key: \"filter\",\n      accordionTitle: \"smanufsitename\",\n      accordionComponent: this.manufacturerSiteAccordion(this.props.masterData.ManufacturerSiteAddress),\n      inputParam: {\n        masterData: this.props.masterData,\n        userInfo: this.props.userInfo\n      },\n      accordionClick: this.props.getContactInfo,\n      accordionPrimaryKey: \"nmanufsitecode\",\n      accordionObjectName: \"siteAddress\",\n      selectedKey: this.props.masterData.selectedSite.nmanufsitecode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 49\n      }\n    }) : \"\"))))))), /*#__PURE__*/React.createElement(React.Fragment, null, this.props.openChildModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.operation,\n      inputParam: this.props.inputParam,\n      screenName: this.props.screenName,\n      onSaveClick: this.onSaveClick,\n      updateStore: this.props.updateStore,\n      esign: this.props.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.operation //  formatMessage={this.props.formatMessage}\n        ,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 33\n        }\n      }) : this.props.screenName === \"IDS_MANUFACTURESITE\" ? /*#__PURE__*/React.createElement(AddSiteManufacturer, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange //   formatMessage={this.props.formatMessage}\n        ,\n        Country: this.props.Country || [],\n        inputParam: this.props.inputParam // defaultValue={this.props.countryCode}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 37\n        }\n      }) : this.props.screenName === \"IDS_SITECONTACT\" ? /*#__PURE__*/React.createElement(AddContactInfoManufacturer, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange //  formatMessage={this.props.formatMessage}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 37\n        }\n      }) : this.props.screenName === \"IDS_MANUFACTURERFILE\" ?\n      /*#__PURE__*/\n      //ALPD-898 Fix\n      React.createElement(AddManufacturerFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onDrop: this.onDropManufacturerFile,\n        onDropAccepted: this.onDropAccepted,\n        deleteAttachment: this.deleteAttachment,\n        actionType: this.state.actionType,\n        onComboChange: this.onComboChange,\n        linkMaster: this.props.linkMaster,\n        editFiles: this.props.editFiles,\n        maxSize: 20 // maxFiles={this.props.operation === \"update\" ? 1 : 3}\n        // multiple={this.props.operation === \"update\" ? false : true}\n        ,\n        maxFiles: 1,\n        multiple: false,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_MANUFACTURERFILE\"\n        }),\n        name: \"manufacturerfilename\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 37\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 25\n      }\n    })));\n  }\n\n  SaveSiteDetails(saveType, formRef) {\n    let inputData = [];\n    let postParam = undefined;\n    inputData[\"userinfo\"] = this.props.userInfo;\n    let fieldList = [\"nmanufsitecode\", \"ncountrycode\", \"smanufsitename\", \"saddress1\", \"saddress2\", \"saddress3\", \"ndefaultstatus\"];\n\n    if (this.props.operation === \"update\") {\n      postParam = {\n        inputListName: \"SiteAddress\",\n        selectedObject: \"selectedSite\",\n        primaryKeyField: \"nmanufsitecode\"\n      };\n      inputData[\"manufacturersiteaddress\"] = {\n        \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode\n      };\n      fieldList.map(item => {\n        if (item === \"ncountrycode\") {\n          return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item].value : \"\";\n        } else {\n          return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n        }\n      });\n    } else {\n      inputData[\"manufacturersiteaddress\"] = {\n        \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode\n      };\n      fieldList.map(item => {\n        if (item === \"ncountrycode\") {\n          return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item].value;\n        } else {\n          return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item];\n        }\n      });\n    }\n\n    const inputParam = {\n      classUrl: this.props.inputParam.classUrl,\n      methodUrl: \"SiteAddress\",\n      inputData: inputData,\n      operation: this.props.operation,\n      saveType,\n      formRef,\n      postParam: postParam\n    };\n    return inputParam; //this.props.crudMaster(inputParam, this.props.masterData);\n  }\n\n  SaveContactInfo(saveType, formRef) {\n    let dataState = undefined;\n    let inputData = [];\n    let postParam = undefined;\n    inputData[\"userinfo\"] = this.props.userInfo;\n    let fieldList = [\"nmanufcontactcode\", \"scontactname\", \"sphoneno\", \"smobileno\", \"semail\", \"sfaxno\", \"scomments\", \"ndefaultstatus\"];\n    let selectedId = null;\n\n    if (this.props.operation === \"update\") {\n      postParam = {\n        inputListName: \"ContactInfo\",\n        selectedObject: \"selectedContact\",\n        primaryKeyField: \"nmanufcontactcode\"\n      };\n      inputData[\"manufacturercontactinfo\"] = {\n        \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode,\n        \"nmanufsitecode\": this.props.masterData.SiteCode\n      };\n      selectedId = this.props.selectedRecord.nmanufcontactcode;\n      fieldList.map(item => {\n        return inputData[\"manufacturercontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n      });\n      dataState = this.state.dataState;\n    } else {\n      inputData[\"manufacturercontactinfo\"] = {\n        \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode,\n        \"nmanufsitecode\": this.props.masterData.SiteCode\n      };\n      fieldList.map(item => {\n        return inputData[\"manufacturercontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n      });\n      inputData[\"manufacturercontactinfo\"]['ndefaultstatus'] = this.state.selectedRecord && this.state.selectedRecord.ndefaultstatus ? this.state.selectedRecord.ndefaultstatus : transactionStatus.YES;\n    }\n\n    const inputParam = {\n      classUrl: this.props.inputParam.classUrl,\n      methodUrl: \"ContactInfo\",\n      inputData: inputData,\n      selectedId,\n      operation: this.props.operation,\n      saveType,\n      formRef,\n      dataState,\n      postParam: postParam\n    };\n    return inputParam; // this.props.crudMaster(inputParam, this.props.masterData);\n  }\n\n  SaveManufacturerFile(saveType, formRef) {\n    const selectedRecord = this.state.selectedRecord;\n    const acceptedFiles = selectedRecord.sfilename;\n    const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n    let isFileEdited = transactionStatus.NO;\n    let manufacturerFileArray = [];\n    let manufacturerFile = {\n      nmanufcode: this.props.masterData.selectedManufacturer.nmanufcode,\n      nmanufacturerfilecode: selectedRecord.nmanufacturerfilecode ? selectedRecord.nmanufacturerfilecode : 0,\n      nstatus: transactionStatus.ACTIVE,\n      nattachmenttypecode,\n      ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\n    };\n    const formData = new FormData();\n\n    if (nattachmenttypecode === attachmentType.FTP) {\n      if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n        acceptedFiles.forEach((file, index) => {\n          const tempData = Object.assign({}, manufacturerFile);\n          const splittedFileName = file.name.split('.');\n          const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n          const ssystemfilename = selectedRecord.ssystemfilename && selectedRecord.ssystemfilename !== undefined ? selectedRecord.ssystemfilename.split('.') : create_UUID();\n          const filesystemfileext = selectedRecord.ssystemfilename && selectedRecord.ssystemfilename !== undefined ? file.name.split('.')[ssystemfilename.length - 1] : fileExtension;\n          const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.nmanufacturerfilecode && selectedRecord.nmanufacturerfilecode > 0 && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n          tempData[\"sfilename\"] = Lims_JSON_stringify(file.name, false);\n          tempData[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\", false);\n          tempData[\"nlinkcode\"] = transactionStatus.NA;\n          tempData[\"ssystemfilename\"] = uniquefilename;\n          tempData[\"nfilesize\"] = file.size;\n          formData.append(\"uploadedFile\" + index, file);\n          formData.append(\"uniquefilename\" + index, uniquefilename);\n          manufacturerFileArray.push(tempData);\n        });\n        formData.append(\"filecount\", acceptedFiles.length);\n        isFileEdited = transactionStatus.YES;\n      } else {\n        manufacturerFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.sfilename, false);\n        manufacturerFile[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\", false);\n        manufacturerFile[\"nlinkcode\"] = transactionStatus.NA;\n        manufacturerFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n        manufacturerFile[\"nfilesize\"] = selectedRecord.nfilesize;\n        manufacturerFileArray.push(manufacturerFile);\n      }\n    } else {\n      manufacturerFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.slinkfilename.trim(), false);\n      manufacturerFile[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\", false);\n      manufacturerFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n      manufacturerFile[\"ssystemfilename\"] = \"\";\n      manufacturerFile[\"nfilesize\"] = 0;\n      manufacturerFileArray.push(manufacturerFile);\n    }\n\n    formData.append(\"isFileEdited\", isFileEdited);\n    formData.append(\"manufacturerfile\", JSON.stringify(manufacturerFileArray)); // formData.append(\"userinfo\", JSON.stringify(this.props.userInfo));\n\n    let selectedId = null;\n    let postParam = undefined;\n\n    if (this.props.operation === \"update\") {\n      // edit\n      postParam = {\n        inputListName: \"Manufacturer\",\n        selectedObject: \"selectedManufacturer\",\n        primaryKeyField: \"nmanufcode\"\n      };\n      selectedId = selectedRecord[\"nmanufacturerfilecode\"];\n    }\n\n    const inputParam = {\n      inputData: {\n        userinfo: this.props.userInfo\n      },\n      formData: formData,\n      isFileupload: true,\n      operation: this.props.operation,\n      classUrl: \"manufacturer\",\n      saveType,\n      formRef,\n      methodUrl: \"ManufacturerFile\",\n      postParam\n    };\n    return inputParam;\n  } // DeleteContact = (e, selectedRecord, Type, methodURL,operation,screenName, ncontrolCode) => {\n\n\n  componentDidUpdate(previousProps) {\n    if (this.props.masterData !== previousProps.masterData) {\n      let {\n        dataState\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        dataState = {\n          skip: 0,\n          take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n        };\n      }\n\n      this.setState({\n        isSiteOpen: false,\n        isContactOpen: false,\n        ManufacturerContactInfo: this.props.masterData.ManufacturerContactInfo,\n        SiteCode: this.props.masterData.SiteCode,\n        Country: this.props.masterData.Country,\n        dataState\n      });\n    }\n\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default injectIntl(ManufacturerSiteTab);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/contactmaster/ManufacturerSiteTab.jsx"],"names":["React","Component","Row","Col","Card","Tab","Nav","injectIntl","FormattedMessage","FontAwesomeIcon","faPlus","process","SlideOutModal","AddContactInfoManufacturer","AddSiteManufacturer","DEFAULT_RETURN","showEsign","validateEmail","validatePhoneNumber","onDropAttachFileList","deleteAttachmentDropZone","create_UUID","Lims_JSON_stringify","Esign","transactionStatus","attachmentType","CustomAccordion","ManufacturerTabsAccordion","toast","ConfirmMessage","AddManufacturerFile","ManufacturerSiteTab","constructor","props","dataStateChange","event","setState","dataResult","state","ManufacturerContactInfo","dataState","openModalContact","input","updateInfo","typeName","data","openChildModal","operation","selectedRecord","NO","defaultSite","undefined","ncontrolCode","screenName","loading","updateStore","manufacturerSiteAccordion","manufacturerSiteAddress","primaryKeyField","addManufacturerContactId","controlMap","has","get","ncontrolcode","editManufacturerContactId","editContactParam","inputParam","userInfo","AddContactParam","accordionMap","Map","map","siteAddress","set","nmanufsitecode","getSiteManufacturerLoadEdit","masterData","ConfirmDelete","detailedFieldList","ContactColumns","userRoleControlRights","getContactManufacturerLoadEdit","DeleteContact","selectedId","obj","confirmMessage","confirm","intl","formatMessage","id","Delete","onInputOnChange","optional","target","type","name","checked","ACTIVE","DEACTIVE","YES","value","onComboChange","comboData","fieldName","closeModal","loadEsign","onSaveClick","saveType","formRef","SaveSiteDetails","SaveContactInfo","SaveManufacturerFile","esignRights","nformcode","screenData","crudMaster","warn","deleteParam","inputData","expanded","methodUrl","classUrl","Type","methodURL","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","validateEsignCredential","onDropManufacturerFile","attachedFiles","maxSize","actionType","deleteAttachment","file","skip","take","settings","parseInt","isSiteOpen","isContactOpen","siteSelectedRecord","contactSelectedRecord","Country","SiteCode","countryCode","dataField","idsName","siteColumns","manufacturerFileFTP","manufacturerFileLink","columnSize","render","addManufacturerSiteId","mandatoryFields","forEach","item","mandatory","push","nattachmenttypecode","FTP","indexOf","selectedManufacturer","nmanufcode","ManufacturerSiteAddress","length","getContactInfo","selectedSite","onDropAccepted","linkMaster","editFiles","postParam","fieldList","inputListName","selectedObject","nmanufcontactcode","ndefaultstatus","acceptedFiles","sfilename","isFileEdited","manufacturerFileArray","manufacturerFile","nmanufacturerfilecode","nstatus","LINK","formData","FormData","Array","isArray","index","tempData","Object","assign","splittedFileName","split","fileExtension","ssystemfilename","filesystemfileext","uniquefilename","sdescription","trim","NA","size","append","nfilesize","slinkfilename","slinkdescription","nlinkcode","JSON","stringify","userinfo","isFileupload","componentDidUpdate","previousProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,GAA9B,QAAyC,iBAAzC;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,MAAT,QAAuB,mCAAvB;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,OAAOC,aAAP,MAA0B,gDAA1B;AACA,OAAOC,0BAAP,MAAuC,sDAAvC;AACA,OAAOC,mBAAP,MAAgC,+CAAhC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAmCC,mBAAnC,EAAwDC,oBAAxD,EAA8EC,wBAA9E,EAAwGC,WAAxG,EAAqHC,mBAArH,QAAgJ,+BAAhJ;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,iBAAT,EAA4BC,cAA5B,QAAkD,8BAAlD;AACA,OAAOC,eAAP,MAA4B,8DAA5B;AACA,OAAOC,yBAAP,MAAsC,6BAAtC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,cAAP,MAA2B,0DAA3B,C,CACA;;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;;AAEA,MAAMC,mBAAN,SAAkC9B,SAAlC,CAA4C;AACxC+B,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA4CnBC,eA5CmB,GA4CAC,KAAD,IAAW;AACzB,WAAKC,QAAL,CAAc;AACVC,QAAAA,UAAU,EAAE1B,OAAO,CAAC,KAAK2B,KAAL,CAAWC,uBAAZ,EAAqCJ,KAAK,CAACK,SAA3C,CADT;AAEVA,QAAAA,SAAS,EAAEL,KAAK,CAACK;AAFP,OAAd;AAIH,KAjDkB;;AAAA,SAkDnBC,gBAlDmB,GAkDCC,KAAD,IAAW;AAC1B,YAAMC,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE7B,cADK;AAEf8B,QAAAA,IAAI,EAAE;AACFC,UAAAA,cAAc,EAAE,IADd;AACoBC,UAAAA,SAAS,EAAEL,KAAK,CAACK,SADrC;AAEFC,UAAAA,cAAc,EAAC;AAAC,8BAAiBxB,iBAAiB,CAACyB;AAApC,WAFb;AAGFC,UAAAA,WAAW,EAAEC,SAHX;AAGsBC,UAAAA,YAAY,EAAEV,KAAK,CAACU,YAH1C;AAIFC,UAAAA,UAAU,EAAE,iBAJV;AAI6BC,UAAAA,OAAO,EAAE;AAJtC;AAFS,OAAnB;AASA,WAAKrB,KAAL,CAAWsB,WAAX,CAAuBZ,UAAvB;AACH,KA7DkB;;AAAA,SAuPnBa,yBAvPmB,GAuPUC,uBAAD,IAA6B;AACrD,UAAIC,eAAe,GAAG,mBAAtB;AACA,YAAMC,wBAAwB,GAAG,KAAK1B,KAAL,CAAW2B,UAAX,CAAsBC,GAAtB,CAA0B,4BAA1B,KAA2D,KAAK5B,KAAL,CAAW2B,UAAX,CAAsBE,GAAtB,CAA0B,4BAA1B,EAAwDC,YAApJ;AACA,YAAMC,yBAAyB,GAAG,KAAK/B,KAAL,CAAW2B,UAAX,CAAsBC,GAAtB,CAA0B,6BAA1B,KAA4D,KAAK5B,KAAL,CAAW2B,UAAX,CAAsBE,GAAtB,CAA0B,6BAA1B,EAAyDC,YAAvJ;AACA,YAAME,gBAAgB,GAAG;AACrBZ,QAAAA,UAAU,EAAE,qBADS;AACcK,QAAAA,eAAe,EAAE,mBAD/B;AACoDX,QAAAA,SAAS,EAAE,QAD/D;AAErBmB,QAAAA,UAAU,EAAE,KAAKjC,KAAL,CAAWiC,UAFF;AAEcC,QAAAA,QAAQ,EAAE,KAAKlC,KAAL,CAAWkC,QAFnC;AAE6Cf,QAAAA,YAAY,EAAEY;AAF3D,OAAzB;AAIA,YAAMI,eAAe,GAAG;AACpBf,QAAAA,UAAU,EAAE,qBADQ;AACeK,QAAAA,eADf;AACgCP,QAAAA,SADhC;AAC2CJ,QAAAA,SAAS,EAAE,QADtD;AAEpBmB,QAAAA,UAAU,EAAE,KAAKjC,KAAL,CAAWiC,UAFH;AAEeC,QAAAA,QAAQ,EAAE,KAAKlC,KAAL,CAAWkC,QAFpC;AAE8Cf,QAAAA,YAAY,EAAEO;AAF5D,OAAxB;AAKA,YAAMU,YAAY,GAAG,IAAIC,GAAJ,EAArB;AACAb,MAAAA,uBAAuB,CAACc,GAAxB,CAA6BC,WAAD,IACxBH,YAAY,CAACI,GAAb,CAAiBD,WAAW,CAACE,cAA7B,eACI,oBAAC,yBAAD;AAA2B,QAAA,WAAW,EAAEF,WAAxC;AACI,QAAA,2BAA2B,EAAE,KAAKvC,KAAL,CAAW0C,2BAD5C;AAEI,QAAA,UAAU,EAAE,KAAK1C,KAAL,CAAW2C,UAF3B;AAGI,QAAA,aAAa,EAAE,KAAKC,aAHxB;AAII,QAAA,wBAAwB,EAAElB,wBAJ9B;AAKI,QAAA,eAAe,EAAES,eALrB;AAMI,QAAA,gBAAgB,EAAE,KAAK3B,gBAN3B,CAOI;AAPJ;AASI,QAAA,eAAe,EAAEiB,eATrB;AAUI,QAAA,WAAW,EAAC,UAVhB;AAWI,QAAA,iBAAiB,EAAE,KAAKoB,iBAX5B;AAYI,QAAA,mBAAmB,EAAE,KAAKC,cAZ9B;AAaI,QAAA,UAAU,EAAE,KAAK9C,KAAL,CAAWiC,UAb3B;AAcI,QAAA,QAAQ,EAAE,KAAKjC,KAAL,CAAWkC,QAdzB;AAeI,QAAA,IAAI,EAAE,KAAK7B,KAAL,CAAWC,uBAAX,IAAsC,EAfhD;AAgBI,QAAA,uBAAuB,EAAE,KAAKD,KAAL,CAAWC,uBAAX,IAAsC,EAhBnE;AAiBI,QAAA,SAAS,EAAE,KAAKD,KAAL,CAAWE,SAjB1B;AAkBI,QAAA,eAAe,EAAE,KAAKN,eAlB1B;AAmBI,QAAA,UAAU,EAAE,KAAKD,KAAL,CAAW2B,UAnB3B;AAoBI,QAAA,qBAAqB,EAAE,KAAK3B,KAAL,CAAW+C,qBAAX,IAAoC,EApB/D;AAqBI,QAAA,SAAS,EAAC,yBArBd;AAsBI,QAAA,8BAA8B,EAAE,KAAK/C,KAAL,CAAWgD,8BAtB/C;AAuBI,QAAA,SAAS,EAAEhB,gBAvBf;AAwBI,QAAA,WAAW,EAAE;AAAElB,UAAAA,SAAS,EAAE;AAAb,SAxBjB;AAyBI,QAAA,YAAY,EAAE,KAAKmC,aAzBvB;AA0BI,QAAA,UAAU,EAAE,YA1BhB;AA2BI,QAAA,gBAAgB,EAAE,IA3BtB;AA4BI,QAAA,UAAU,EAAE,KAAKjD,KAAL,CAAWkD,UA5B3B;AA6BI,QAAA,iBAAiB,EAAE,IA7BvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAkCA,aAAOd,YAAP;AACH,KAxSkB;;AAAA,SA0SnBQ,aA1SmB,GA0SFO,GAAD,IAAS;AACrB,WAAKC,cAAL,CAAoBC,OAApB,CAA4B,eAA5B,EAA6C,KAAKrD,KAAL,CAAWsD,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAA7C,EAAkG,KAAKxD,KAAL,CAAWsD,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAAlG,EACI,KAAKxD,KAAL,CAAWsD,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADJ,EACqD,KAAKxD,KAAL,CAAWsD,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADrD,EAEI,MAAM,KAAKC,MAAL,CAAYN,GAAZ,CAFV;AAGH,KA9SkB;;AAAA,SAgTnBO,eAhTmB,GAgTD,CAACxD,KAAD,EAAQyD,QAAR,KAAqB;AAEnC,YAAM5C,cAAc,GAAG,KAAKV,KAAL,CAAWU,cAAX,IAA6B,EAApD;;AACA,UAAIb,KAAK,CAAC0D,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClC,YAAI3D,KAAK,CAAC0D,MAAN,CAAaE,IAAb,KAAsB,oBAA1B,EAAgD;AAC5C/C,UAAAA,cAAc,CAACb,KAAK,CAAC0D,MAAN,CAAaE,IAAd,CAAd,GAAoC5D,KAAK,CAAC0D,MAAN,CAAaG,OAAb,KAAyB,IAAzB,GAAgCxE,iBAAiB,CAACyE,MAAlD,GAA2DzE,iBAAiB,CAAC0E,QAAjH;AACH,SAFD,MAGK,IAAI/D,KAAK,CAAC0D,MAAN,CAAaE,IAAb,KAAsB,OAA1B,EAAmC;AACpC/C,UAAAA,cAAc,CAACb,KAAK,CAAC0D,MAAN,CAAaE,IAAd,CAAd,GAAoC5D,KAAK,CAAC0D,MAAN,CAAaG,OAAb,KAAyB,IAAzB,GAAgCxE,iBAAiB,CAAC2E,GAAlD,GAAwD3E,iBAAiB,CAACyB,EAA9G;AACH,SAFI,MAEE;AACHD,UAAAA,cAAc,CAACb,KAAK,CAAC0D,MAAN,CAAaE,IAAd,CAAd,GAAoC5D,KAAK,CAAC0D,MAAN,CAAaG,OAAb,KAAyB,IAAzB,GAAgCxE,iBAAiB,CAAC2E,GAAlD,GAAwD3E,iBAAiB,CAACyB,EAA9G;AACH;AAEJ,OAVD,MAWK,IAAId,KAAK,CAAC0D,MAAN,CAAaC,IAAb,KAAsB,OAA1B,EAAkC;AACnC9C,QAAAA,cAAc,CAACb,KAAK,CAAC0D,MAAN,CAAaE,IAAd,CAAd,GAAoCH,QAApC;AACH,OAFI,MAIA;AAED,YAAIzD,KAAK,CAAC0D,MAAN,CAAaE,IAAb,KAAsB,UAAtB,IAAoC5D,KAAK,CAAC0D,MAAN,CAAaE,IAAb,KAAsB,WAA1D,IACG5D,KAAK,CAAC0D,MAAN,CAAaE,IAAb,KAAsB,QAD7B,EACuC;AAEnC,cAAI5D,KAAK,CAAC0D,MAAN,CAAaO,KAAb,KAAuB,EAA3B,EAA+B;AAC3BjE,YAAAA,KAAK,CAAC0D,MAAN,CAAaO,KAAb,GAAqBlF,mBAAmB,CAACiB,KAAK,CAAC0D,MAAN,CAAaO,KAAd,CAAxC;AACApD,YAAAA,cAAc,CAACb,KAAK,CAAC0D,MAAN,CAAaE,IAAd,CAAd,GAAoC5D,KAAK,CAAC0D,MAAN,CAAaO,KAAb,KAAuB,EAAvB,GAA4BjE,KAAK,CAAC0D,MAAN,CAAaO,KAAzC,GAAiDpD,cAAc,CAACb,KAAK,CAAC0D,MAAN,CAAaE,IAAd,CAAnG;AACH,WAHD,MAIK;AACD/C,YAAAA,cAAc,CAACb,KAAK,CAAC0D,MAAN,CAAaE,IAAd,CAAd,GAAoC5D,KAAK,CAAC0D,MAAN,CAAaO,KAAjD;AACH;AACJ,SAVD,MAUQ;AACJpD,UAAAA,cAAc,CAACb,KAAK,CAAC0D,MAAN,CAAaE,IAAd,CAAd,GAAoC5D,KAAK,CAAC0D,MAAN,CAAaO,KAAjD;AACH,SAdA,CAeD;;AACH;;AACD,WAAKhE,QAAL,CAAc;AAAEY,QAAAA;AAAF,OAAd;AACH,KApVkB;;AAAA,SAqVnBqD,aArVmB,GAqVH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACtC,UAAID,SAAS,KAAK,IAAlB,EAAwB;AACpB,cAAMtD,cAAc,GAAG,KAAKV,KAAL,CAAWU,cAAX,IAA6B,EAApD;AACAA,QAAAA,cAAc,CAACuD,SAAD,CAAd,GAA4BD,SAA5B,CAFoB,CAEkB;;AAEtC,aAAKlE,QAAL,CAAc;AAAEY,UAAAA;AAAF,SAAd;AACH;AAEJ,KA7VkB;;AAAA,SA8VnBwD,UA9VmB,GA8VN,MAAM;AACf,UAAIC,SAAS,GAAG,KAAKxE,KAAL,CAAWwE,SAA3B;AACA,UAAI3D,cAAc,GAAG,KAAKb,KAAL,CAAWa,cAAhC;AACA,UAAIE,cAAc,GAAG,KAAKf,KAAL,CAAWe,cAAhC;;AACA,UAAI,KAAKf,KAAL,CAAWwE,SAAf,EAA0B;AACtB,YAAI,KAAKxE,KAAL,CAAWc,SAAX,KAAyB,QAA7B,EAAuC;AACnC0D,UAAAA,SAAS,GAAG,KAAZ;AACA3D,UAAAA,cAAc,GAAG,KAAjB;AACAE,UAAAA,cAAc,GAAG,EAAjB;AAEH,SALD,MAMK;AACDyD,UAAAA,SAAS,GAAG,KAAZ;AACAzD,UAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACAA,UAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACAA,UAAAA,cAAc,CAAC,aAAD,CAAd,GAA8B,EAA9B;AACH;AACJ,OAbD,MAcK;AACDF,QAAAA,cAAc,GAAG,KAAjB;AACAE,QAAAA,cAAc,GAAG,EAAjB;AACH;;AAED,YAAML,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE7B,cADK;AAEf8B,QAAAA,IAAI,EAAE;AAAEC,UAAAA,cAAF;AAAkB2D,UAAAA,SAAlB;AAA6BzD,UAAAA,cAA7B;AAA6CmC,UAAAA,UAAU,EAAE;AAAzD;AAFS,OAAnB;AAIA,WAAKlD,KAAL,CAAWsB,WAAX,CAAuBZ,UAAvB;AAEH,KA3XkB;;AAAA,SA6XnB+D,WA7XmB,GA6XL,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACjC,UAAI,KAAKtE,KAAL,CAAWU,cAAX,CAA0B,QAA1B,IAAsC/B,aAAa,CAAC,KAAKqB,KAAL,CAAWU,cAAX,CAA0B,QAA1B,CAAD,CAAnD,GAA2F,IAA/F,EAAqG;AACjG,YAAIkB,UAAU,GAAG,EAAjB;;AAEA,YAAI,KAAKjC,KAAL,CAAWoB,UAAX,KAA0B,qBAA9B,EAAqD;AACjDa,UAAAA,UAAU,GAAG,KAAK2C,eAAL,CAAqBF,QAArB,EAA+BC,OAA/B,CAAb;AACH,SAFD,MAGK,IAAI,KAAK3E,KAAL,CAAWoB,UAAX,KAA0B,iBAA9B,EACL;AACIa,UAAAA,UAAU,GAAG,KAAK4C,eAAL,CAAqBH,QAArB,EAA+BC,OAA/B,CAAb;AACH,SAHI,MAIA;AACD1C,UAAAA,UAAU,GAAG,KAAK6C,oBAAL,CAA0BJ,QAA1B,EAAoCC,OAApC,CAAb;AACH;;AAED,YAAI5F,SAAS,CAAC,KAAKiB,KAAL,CAAW+E,WAAZ,EAAyB,KAAK/E,KAAL,CAAWkC,QAAX,CAAoB8C,SAA7C,EAAwD,KAAKhF,KAAL,CAAWmB,YAAnE,CAAb,EAA+F;AAC3F,gBAAMT,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAE7B,cADK;AAEf8B,YAAAA,IAAI,EAAE;AACF4D,cAAAA,SAAS,EAAE,IADT;AACeS,cAAAA,UAAU,EAAE;AAAEhD,gBAAAA,UAAF;AAAcU,gBAAAA,UAAU,EAAE,KAAK3C,KAAL,CAAW2C;AAArC,eAD3B;AAC8E+B,cAAAA;AAD9E;AAFS,WAAnB;AAMA,eAAK1E,KAAL,CAAWsB,WAAX,CAAuBZ,UAAvB;AACH,SARD,MASK;AACD,eAAKV,KAAL,CAAWkF,UAAX,CAAsBjD,UAAtB,EAAkC,KAAKjC,KAAL,CAAW2C,UAA7C,EAAyD,gBAAzD;AACH;AACJ,OA1BD,MA2BK;AACDhD,QAAAA,KAAK,CAACwF,IAAN,CAAW,KAAKnF,KAAL,CAAWsD,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KA5ZkB;;AAAA,SA+kBnBP,aA/kBmB,GA+kBFmC,WAAD,IAAiB;AAC7B,UAAIC,SAAS,GAAG,EAAhB;;AACA,UAAID,WAAW,CAACrE,cAAZ,CAA2BuE,QAA3B,KAAwCpE,SAA5C,EAAuD;AACnD,eAAOkE,WAAW,CAACrE,cAAZ,CAA2BuE,QAAlC;AACH;;AACDD,MAAAA,SAAS,CAAC,yBAAD,CAAT,GAAuCD,WAAW,CAACrE,cAAnD;AACAsE,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKrF,KAAL,CAAWkC,QAAnC;AACA,YAAMD,UAAU,GAAG;AACfsD,QAAAA,SAAS,EAAE,aADI;AAEfC,QAAAA,QAAQ,EAAE,KAAKxF,KAAL,CAAWiC,UAAX,CAAsBuD,QAFjB;AAGfH,QAAAA,SAAS,EAAEA,SAHI;AAIfvE,QAAAA,SAAS,EAAE,QAJI;AAKfP,QAAAA,SAAS,EAAE,KAAKF,KAAL,CAAWE;AALP,OAAnB;;AAOA,UAAIxB,SAAS,CAAC,KAAKiB,KAAL,CAAW+E,WAAZ,EAAyB,KAAK/E,KAAL,CAAWkC,QAAX,CAAoB8C,SAA7C,EAAwDI,WAAW,CAACjE,YAApE,CAAb,EAAgG;AAC5F,cAAMT,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE7B,cADK;AAEf8B,UAAAA,IAAI,EAAE;AACF4D,YAAAA,SAAS,EAAE,IADT;AACeS,YAAAA,UAAU,EAAE;AAAEhD,cAAAA,UAAF;AAAcU,cAAAA,UAAU,EAAE,KAAK3C,KAAL,CAAW2C;AAArC,aAD3B;AAEF9B,YAAAA,cAAc,EAAE,IAFd;AAEoBO,YAAAA,UAAU,EAAE,SAFhC;AAE2CN,YAAAA,SAAS,EAAE;AAFtD;AAFS,SAAnB;AAOA,aAAKd,KAAL,CAAWsB,WAAX,CAAuBZ,UAAvB;AACH,OATD,MAUK;AACD,YAAI3B,SAAS,CAAC,KAAKiB,KAAL,CAAW+C,qBAAZ,EAAmC,KAAK/C,KAAL,CAAWkC,QAAX,CAAoB8C,SAAvD,EAAkEI,WAAW,CAACjE,YAA9E,CAAb,EAA0G;AACtG,gBAAMT,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAE7B,cADK;AAEf8B,YAAAA,IAAI,EAAE;AACF4D,cAAAA,SAAS,EAAE,IADT;AACeS,cAAAA,UAAU,EAAE;AAAEhD,gBAAAA,UAAF;AAAcU,gBAAAA,UAAU,EAAE,KAAK3C,KAAL,CAAW2C;AAArC,eAD3B;AAEF9B,cAAAA,cAAc,EAAE,IAFd;AAEoBO,cAAAA,UAAU,EAAE,SAFhC;AAE2CN,cAAAA,SAAS,EAAE;AAFtD;AAFS,WAAnB;AAOA,eAAKd,KAAL,CAAWsB,WAAX,CAAuBZ,UAAvB;AACH,SATD,MAUK;AACD,eAAKV,KAAL,CAAWkF,UAAX,CAAsBjD,UAAtB,EAAkC,KAAKjC,KAAL,CAAW2C,UAA7C,EAAyD,gBAAzD;AACH;AACJ;AACJ,KAtnBkB;;AAAA,SAwnBnBc,MAxnBmB,GAwnBT2B,WAAD,IAAiB;AACtB,UAAIC,SAAS,GAAG,EAAhB;;AACA,UAAID,WAAW,CAACrE,cAAZ,CAA2BuE,QAA3B,IAAuCF,WAAW,CAACrE,cAAZ,CAA2BuE,QAA3B,KAAwCpE,SAAnF,EAA8F;AAC1F,eAAOkE,WAAW,CAACrE,cAAZ,CAA2BuE,QAAlC;AACH;;AACDD,MAAAA,SAAS,CAACD,WAAW,CAACK,IAAb,CAAT,GAA8BL,WAAW,CAACrE,cAA1C;AACAsE,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKrF,KAAL,CAAWkC,QAAnC;AACA,YAAMD,UAAU,GAAG;AACfsD,QAAAA,SAAS,EAAEH,WAAW,CAACM,SADR;AAEfF,QAAAA,QAAQ,EAAE,KAAKxF,KAAL,CAAWiC,UAAX,CAAsBuD,QAFjB;AAGfH,QAAAA,SAAS,EAAEA,SAHI;AAIfvE,QAAAA,SAAS,EAAE;AAJI,OAAnB;;AAMA,UAAI/B,SAAS,CAAC,KAAKiB,KAAL,CAAW+E,WAAZ,EAAyB,KAAK/E,KAAL,CAAWkC,QAAX,CAAoB8C,SAA7C,EAAwDI,WAAW,CAACjE,YAApE,CAAb,EAAgG;AAC5F,cAAMT,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE7B,cADK;AAEf8B,UAAAA,IAAI,EAAE;AACF4D,YAAAA,SAAS,EAAE,IADT;AACeS,YAAAA,UAAU,EAAE;AAAEhD,cAAAA,UAAF;AAAcU,cAAAA,UAAU,EAAE,KAAK3C,KAAL,CAAW2C;AAArC,aAD3B;AAEF9B,YAAAA,cAAc,EAAE,IAFd;AAEoBO,YAAAA,UAAU,EAAEgE,WAAW,CAAChE,UAF5C;AAEwDN,YAAAA,SAAS,EAAEsE,WAAW,CAACtE;AAF/E;AAFS,SAAnB;AAOA,aAAKd,KAAL,CAAWsB,WAAX,CAAuBZ,UAAvB;AACH,OATD,MAUK;AACD,YAAI3B,SAAS,CAAC,KAAKiB,KAAL,CAAW+C,qBAAZ,EAAmC,KAAK/C,KAAL,CAAWkC,QAAX,CAAoB8C,SAAvD,EAAkEI,WAAW,CAACjE,YAA9E,CAAb,EAA0G;AACtG,gBAAMT,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAE7B,cADK;AAEf8B,YAAAA,IAAI,EAAE;AACF4D,cAAAA,SAAS,EAAE,IADT;AACeS,cAAAA,UAAU,EAAE;AAAEhD,gBAAAA,UAAF;AAAcU,gBAAAA,UAAU,EAAE,KAAK3C,KAAL,CAAW2C;AAArC,eAD3B;AAEF9B,cAAAA,cAAc,EAAE,IAFd;AAEoBO,cAAAA,UAAU,EAAEgE,WAAW,CAAChE,UAF5C;AAEwDN,cAAAA,SAAS,EAAEsE,WAAW,CAACtE;AAF/E;AAFS,WAAnB;AAOA,eAAKd,KAAL,CAAWsB,WAAX,CAAuBZ,UAAvB;AACH,SATD,MAUK;AACD,eAAKV,KAAL,CAAWkF,UAAX,CAAsBjD,UAAtB,EAAkC,KAAKjC,KAAL,CAAW2C,UAA7C,EAAyD,gBAAzD;AACH;AACJ,OArCqB,CAsCtB;;AACH,KA/pBkB;;AAAA,SAorBnBgD,aAprBmB,GAorBH,MAAM;AAClB,YAAM1D,UAAU,GAAG;AACfoD,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAKrF,KAAL,CAAWkC,QADN;AAER0D,YAAAA,OAAO,EAAE,KAAKvF,KAAL,CAAWU,cAAX,CAA0B,eAA1B,CAFD;AAGR8E,YAAAA,WAAW,EAAC,KAAKxF,KAAL,CAAWU,cAAX,CAA0B,aAA1B,KAA4C,KAAKV,KAAL,CAAWU,cAAX,CAA0B,aAA1B,EAAyCoD,KAHzF;AAIR2B,YAAAA,iBAAiB,EAAC,KAAKzF,KAAL,CAAWU,cAAX,CAA0B,aAA1B,KAA4C,KAAKV,KAAL,CAAWU,cAAX,CAA0B,aAA1B,EAAyCgF;AAJ/F,WADL;AAQPC,UAAAA,QAAQ,EAAE,KAAK3F,KAAL,CAAWU,cAAX,CAA0B,eAA1B;AARH,SADI;AAWfkE,QAAAA,UAAU,EAAE,KAAKjF,KAAL,CAAWiF;AAXR,OAAnB;AAaA,WAAKjF,KAAL,CAAWiG,uBAAX,CAAmChE,UAAnC,EAA+C,gBAA/C;AACH,KAnsBkB;;AAAA,SAqsBnBiE,sBArsBmB,GAqsBM,CAACC,aAAD,EAAgB7B,SAAhB,EAA2B8B,OAA3B,KAAuC;AAE5D,UAAIrF,cAAc,GAAG,KAAKV,KAAL,CAAWU,cAAX,IAA6B,EAAlD;AACAA,MAAAA,cAAc,CAACuD,SAAD,CAAd,GAA4BpF,oBAAoB,CAAC6B,cAAc,CAACuD,SAAD,CAAf,EAA4B6B,aAA5B,EAA2CC,OAA3C,CAAhD;AACA,WAAKjG,QAAL,CAAc;AAAEY,QAAAA,cAAF;AAAkBsF,QAAAA,UAAU,EAAE;AAA9B,OAAd;AACH,KA1sBkB;;AAAA,SA4sBnBC,gBA5sBmB,GA4sBA,CAACpG,KAAD,EAAQqG,IAAR,EAAcjC,SAAd,KAA4B;AAC3C,UAAIvD,cAAc,GAAG,KAAKV,KAAL,CAAWU,cAAX,IAA6B,EAAlD;AACAA,MAAAA,cAAc,CAACuD,SAAD,CAAd,GAA4BnF,wBAAwB,CAAC4B,cAAc,CAACuD,SAAD,CAAf,EAA4BiC,IAA5B,CAApD;AAEA,WAAKpG,QAAL,CAAc;AACVY,QAAAA,cADU;AACMsF,QAAAA,UAAU,EAAE,QADlB,CAC2B;;AAD3B,OAAd;AAGH,KAntBkB;;AAGf,UAAM9F,SAAS,GAAG;AACdiG,MAAAA,IAAI,EAAE,CADQ;AAEdC,MAAAA,IAAI,EAAE,KAAKzG,KAAL,CAAW0G,QAAX,GAAsBC,QAAQ,CAAC,KAAK3G,KAAL,CAAW0G,QAAX,CAAoB,EAApB,CAAD,CAA9B,GAA0D;AAFlD,KAAlB;AAIA,SAAKrG,KAAL,GAAa;AACTuG,MAAAA,UAAU,EAAE,KADH;AACUC,MAAAA,aAAa,EAAE,KADzB;AACgCC,MAAAA,kBAAkB,EAAE,EADpD;AACwDC,MAAAA,qBAAqB,EAAE,EAD/E;AACmF3G,MAAAA,UAAU,EAAE,EAD/F;AAETG,MAAAA,SAAS,EAAEA,SAFF;AAEaD,MAAAA,uBAAuB,EAAE,KAAKN,KAAL,CAAW2C,UAAX,CAAsBrC,uBAF5D;AAEqF0G,MAAAA,OAAO,EAAE,EAF9F;AAGTC,MAAAA,QAAQ,EAAE,KAAKjH,KAAL,CAAW2C,UAAX,CAAsBsE,QAHvB;AAGiClG,MAAAA,cAAc,EAAE,EAHjD;AAGqDmG,MAAAA,WAAW,EAAE;AAHlE,KAAb;AAMA,SAAKpE,cAAL,GAAsB,CAAC;AAAE,iBAAW,iBAAb;AAAgC,mBAAa,IAA7C;AAAmD,mBAAa,cAAhE;AAAgF,eAAS,OAAzF;AAAmG,wBAAiB,WAApH;AAAiI,qBAAe;AAAhJ,KAAD,EACtB;AAAEqE,MAAAA,SAAS,EAAE,QAAb;AAAuBC,MAAAA,OAAO,EAAE,aAAhC;AAA8C,eAAS,OAAvD;AAAiE,wBAAiB,WAAlF;AAA+F,qBAAe;AAA9G,KADsB,EAEtB;AAAED,MAAAA,SAAS,EAAE,iBAAb;AAAgCC,MAAAA,OAAO,EAAE,aAAzC;AAAuD,eAAS,OAAhE;AAAyE,wBAAiB,YAA1F;AAAwG,qBAAe;AAAvH,KAFsB,CAAtB;AAOA,SAAKC,WAAL,GAAmB,CAAC;AAAE,iBAAW,mBAAb;AAAkC,mBAAa,IAA/C;AAAqD,mBAAa,gBAAlE;AAAoF,eAAS,OAA7F;AAAuG,wBAAiB,WAAxH;AAAqI,qBAAe;AAApJ,KAAD,EACnB;AAAE,iBAAW,cAAb;AAA6B,mBAAa,IAA1C;AAAgD,mBAAa,WAA7D;AAA0E,eAAS,OAAnF;AAA6F,wBAAiB,WAA9G;AAA2H,qBAAe;AAA1I,KADmB,EAEnB;AAAE,iBAAW,iBAAb;AAAgC,mBAAa,IAA7C;AAAmD,mBAAa,cAAhE;AAAgF,eAAS,OAAzF;AAAmG,wBAAiB,YAApH;AAAkI,qBAAe;AAAjJ,KAFmB,CAAnB;AAMA,SAAKC,mBAAL,GAA2B,CACvB;AAAE,iBAAW,UAAb;AAAyB,mBAAa,WAAtC;AAAmD,mBAAa,IAAhE;AAAuE,wBAAiB,YAAxF;AAAsG,qBAAe;AAArH,KADuB,CAA3B;AAIA,SAAKC,oBAAL,GAA4B,CACxB;AAAE,iBAAW,cAAb;AAA6B,mBAAa,eAA1C;AAA2D,mBAAa,IAAxE;AAA8E,wBAAiB,YAA/F;AAA6G,qBAAe;AAA5H,KADwB,EAExB;AAAE,iBAAW,cAAb;AAA6B,mBAAa,WAA1C;AAAuD,mBAAa,IAApE;AAA0E,wBAAiB,YAA3F;AAAyG,qBAAe;AAAxH,KAFwB,CAA5B;AAKA,SAAK1E,iBAAL,GAAyB,CACrB;AAAE,mBAAa,UAAf;AAA0B,iBAAW,WAArC;AAAmD2E,MAAAA,UAAU,EAAC;AAA9D,KADqB,EAErB;AAAE,iBAAW,YAAb;AAA2B,mBAAa,WAAxC;AAAsDA,MAAAA,UAAU,EAAC;AAAjE,KAFqB,EAGrB;AAAEL,MAAAA,SAAS,EAAE,QAAb;AAAuBC,MAAAA,OAAO,EAAE,SAAhC;AAA4CI,MAAAA,UAAU,EAAC;AAAvD,KAHqB,EAIrB;AAAEL,MAAAA,SAAS,EAAE,WAAb;AAA0BC,MAAAA,OAAO,EAAE,cAAnC;AAAmDI,MAAAA,UAAU,EAAC;AAA9D,KAJqB,CAAzB;AAOA,SAAKpE,cAAL,GAAsB,IAAIxD,cAAJ,EAAtB;AACH;;AAmBD6H,EAAAA,MAAM,GAAG;AAEL,UAAMC,qBAAqB,GAAG,KAAK1H,KAAL,CAAW2B,UAAX,CAAsBC,GAAtB,CAA0B,4BAA1B,KAA2D,KAAK5B,KAAL,CAAW2B,UAAX,CAAsBE,GAAtB,CAA0B,4BAA1B,EAAwDC,YAAjJ,CAFK,CAGL;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;AACA,UAAM6F,eAAe,GAAG,EAAxB;;AACA,QAAI,KAAK3H,KAAL,CAAWoB,UAAX,KAA0B,qBAA9B,EAAqD;AACjD,WAAKiG,WAAL,CAAiBO,OAAjB,CAAyBC,IAAI,IAAIA,IAAI,CAACC,SAAL,KAAmB,IAAnB,GAC7BH,eAAe,CAACI,IAAhB,CAAqBF,IAArB,CAD6B,GACA,EADjC;AAGH,KAJD,MAKK,IAAI,KAAK7H,KAAL,CAAWoB,UAAX,KAA0B,iBAA9B,EAAgD;AACjD,WAAK0B,cAAL,CAAoB8E,OAApB,CAA4BC,IAAI,IAAIA,IAAI,CAACC,SAAL,KAAmB,IAAnB,GAChCH,eAAe,CAACI,IAAhB,CAAqBF,IAArB,CADgC,GACH,EADjC;AAGH,KAJI,MAKA,IAAI,KAAK7H,KAAL,CAAWoB,UAAX,KAA0B,sBAA9B,EAAqD;AAAM;AAC5D,UAAG,KAAKpB,KAAL,CAAWe,cAAX,CAA0BiH,mBAA1B,KAAkDxI,cAAc,CAACyI,GAApE,EAAwE;AACpE,aAAKX,mBAAL,CAAyBM,OAAzB,CAAiCC,IAAI,IAAIA,IAAI,CAACC,SAAL,KAAmB,IAAnB,GACrCH,eAAe,CAACI,IAAhB,CAAqBF,IAArB,CADqC,GACR,EADjC;AAGH,OAJD,MAKK;AACD,aAAKN,oBAAL,CAA0BK,OAA1B,CAAkCC,IAAI,IAAIA,IAAI,CAACC,SAAL,KAAmB,IAAnB,GACtCH,eAAe,CAACI,IAAhB,CAAqBF,IAArB,CADsC,GACT,EADjC;AAGH;AAEJ;;AAED,wBACI,uDACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAC,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD,CAAK,OAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD,CAAK,IAAL;AAAU,yBAAgB,aAA1B;AAAwC,MAAA,SAAS,EAAC,iBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,sDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,aAApB;AAAkC,MAAA,MAAM,EAAE,KAAK7H,KAAL,CAAW+C,qBAAX,CAAiCmF,OAAjC,CAAyCR,qBAAzC,MAAoE,CAAC,CAA/G;AACI,MAAA,OAAO,EAAE,MAAM,KAAK1H,KAAL,CAAW0C,2BAAX,CAAuC,kBAAvC,EAA2D,QAA3D,EAAqE,KAAK1C,KAAL,CAAW2C,UAAX,CAAsBwF,oBAAtB,CAA2CC,UAAhH,EAA4HlH,SAA5H,EAAuIwG,qBAAvI,EAA8J,KAAK1H,KAAL,CAAWkC,QAAzK,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAEzD,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,oBAGI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,qBAArB;AAA2C,MAAA,cAAc,EAAC,cAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CAFJ,CADJ,CADJ,CAFJ,eAgBI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKuB,KAAL,CAAW2C,UAAX,CAAsB0F,uBAAtB,IAAiD,KAAKrI,KAAL,CAAW2C,UAAX,CAAsB0F,uBAAtB,CAA8CC,MAA9C,GAAuD,CAAxG,gBACG,oBAAC,eAAD;AAAiB,MAAA,GAAG,EAAC,QAArB;AACI,MAAA,cAAc,EAAE,gBADpB;AAEI,MAAA,kBAAkB,EAAE,KAAK/G,yBAAL,CAA+B,KAAKvB,KAAL,CAAW2C,UAAX,CAAsB0F,uBAArD,CAFxB;AAGI,MAAA,UAAU,EAAE;AAAE1F,QAAAA,UAAU,EAAE,KAAK3C,KAAL,CAAW2C,UAAzB;AAAoCT,QAAAA,QAAQ,EAAC,KAAKlC,KAAL,CAAWkC;AAAxD,OAHhB;AAII,MAAA,cAAc,EAAE,KAAKlC,KAAL,CAAWuI,cAJ/B;AAKI,MAAA,mBAAmB,EAAE,gBALzB;AAMI,MAAA,mBAAmB,EAAE,aANzB;AAOI,MAAA,WAAW,EAAE,KAAKvI,KAAL,CAAW2C,UAAX,CAAsB6F,YAAtB,CAAmC/F,cAPpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAUK,EAXV,CADJ,CAhBJ,CADJ,CADJ,CADJ,CADJ,CADJ,eAwEI,0CACK,KAAKzC,KAAL,CAAWa,cAAX,iBACG,oBAAC,aAAD;AAAe,MAAA,IAAI,EAAE,KAAKb,KAAL,CAAWa,cAAhC;AACI,MAAA,UAAU,EAAE,KAAK0D,UADrB;AAEI,MAAA,SAAS,EAAE,KAAKvE,KAAL,CAAWc,SAF1B;AAGI,MAAA,UAAU,EAAE,KAAKd,KAAL,CAAWiC,UAH3B;AAII,MAAA,UAAU,EAAE,KAAKjC,KAAL,CAAWoB,UAJ3B;AAKI,MAAA,WAAW,EAAE,KAAKqD,WALtB;AAMI,MAAA,WAAW,EAAE,KAAKzE,KAAL,CAAWsB,WAN5B;AAOI,MAAA,KAAK,EAAE,KAAKtB,KAAL,CAAWwE,SAPtB;AAQI,MAAA,aAAa,EAAE,KAAKmB,aARxB;AASI,MAAA,cAAc,EAAE,KAAKtF,KAAL,CAAWU,cAAX,IAA6B,EATjD;AAUI,MAAA,eAAe,EAAE4G,eAVrB;AAWI,MAAA,YAAY,EAAE,KAAK3H,KAAL,CAAWwE,SAAX,gBACV,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAE,KAAKxE,KAAL,CAAWc,SAA7B,CACI;AADJ;AAEI,QAAA,eAAe,EAAE,KAAK4C,eAF1B;AAGI,QAAA,UAAU,EAAE,KAAK1D,KAAL,CAAWiC,UAH3B;AAII,QAAA,cAAc,EAAE,KAAK5B,KAAL,CAAWU,cAAX,IAA6B,EAJjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU,GAOV,KAAKf,KAAL,CAAWoB,UAAX,KAA0B,qBAA1B,gBACI,oBAAC,mBAAD;AAAqB,QAAA,cAAc,EAAE,KAAKf,KAAL,CAAWU,cAAX,IAA6B,EAAlE;AACI,QAAA,eAAe,EAAE,KAAK2C,eAD1B;AAEI,QAAA,aAAa,EAAE,KAAKU,aAFxB,CAGI;AAHJ;AAII,QAAA,OAAO,EAAE,KAAKpE,KAAL,CAAWgH,OAAX,IAAsB,EAJnC;AAKI,QAAA,UAAU,EAAE,KAAKhH,KAAL,CAAWiC,UAL3B,CAMA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,GAUI,KAAKjC,KAAL,CAAWoB,UAAX,KAA0B,iBAA1B,gBACA,oBAAC,0BAAD;AACI,QAAA,cAAc,EAAE,KAAKf,KAAL,CAAWU,cAAX,IAA6B,EADjD;AAEI,QAAA,eAAe,EAAE,KAAK2C,eAF1B;AAGI,QAAA,aAAa,EAAE,KAAKU,aAHxB,CAIA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,GASA,KAAKpE,KAAL,CAAWoB,UAAX,KAA0B,sBAA1B;AAAA;AAAwD;AACxD,0BAAC,mBAAD;AACI,QAAA,cAAc,EAAE,KAAKf,KAAL,CAAWU,cAAX,IAA6B,EADjD;AAEI,QAAA,eAAe,EAAE,KAAK2C,eAF1B;AAGI,QAAA,MAAM,EAAE,KAAKwC,sBAHjB;AAII,QAAA,cAAc,EAAE,KAAKuC,cAJzB;AAKI,QAAA,gBAAgB,EAAE,KAAKnC,gBAL3B;AAMI,QAAA,UAAU,EAAE,KAAKjG,KAAL,CAAWgG,UAN3B;AAOI,QAAA,aAAa,EAAE,KAAKjC,aAPxB;AAQI,QAAA,UAAU,EAAE,KAAKpE,KAAL,CAAW0I,UAR3B;AASI,QAAA,SAAS,EAAE,KAAK1I,KAAL,CAAW2I,SAT1B;AAUI,QAAA,OAAO,EAAE,EAVb,CAWI;AACA;AAZJ;AAaI,QAAA,QAAQ,EAAE,CAbd;AAcI,QAAA,QAAQ,EAAE,KAdd;AAeI,QAAA,KAAK,EAAE,KAAK3I,KAAL,CAAWsD,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAfX;AAgBI,QAAA,IAAI,EAAC,sBAhBT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,GAkBK,EAvDjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFR,CAxEJ,CADJ;AA6IH;;AAuKDoB,EAAAA,eAAe,CAACF,QAAD,EAAWC,OAAX,EAAoB;AAC/B,QAAIU,SAAS,GAAG,EAAhB;AACA,QAAIuD,SAAS,GAAC1H,SAAd;AACAmE,IAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKrF,KAAL,CAAWkC,QAAnC;AACA,QAAI2G,SAAS,GAAG,CAAC,gBAAD,EAAmB,cAAnB,EAAmC,gBAAnC,EACZ,WADY,EACC,WADD,EACc,WADd,EAC2B,gBAD3B,CAAhB;;AAGA,QAAI,KAAK7I,KAAL,CAAWc,SAAX,KAAyB,QAA7B,EAAuC;AACnC8H,MAAAA,SAAS,GAAG;AACRE,QAAAA,aAAa,EAAE,aADP;AAERC,QAAAA,cAAc,EAAE,cAFR;AAGRtH,QAAAA,eAAe,EAAE;AAHT,OAAZ;AAMA4D,MAAAA,SAAS,CAAC,yBAAD,CAAT,GAAuC;AAAE,sBAAc,KAAKrF,KAAL,CAAW2C,UAAX,CAAsBwF,oBAAtB,CAA2CC;AAA3D,OAAvC;AACAS,MAAAA,SAAS,CAACvG,GAAV,CAAcuF,IAAI,IAAI;AAClB,YAAIA,IAAI,KAAK,cAAb,EAA6B;AACzB,iBAAOxC,SAAS,CAAC,yBAAD,CAAT,CAAqCwC,IAArC,IAA6C,KAAKxH,KAAL,CAAWU,cAAX,CAA0B8G,IAA1B,IAAkC,KAAKxH,KAAL,CAAWU,cAAX,CAA0B8G,IAA1B,EAAgC1D,KAAlE,GAA0E,EAA9H;AACH,SAFD,MAGK;AACD,iBAAOkB,SAAS,CAAC,yBAAD,CAAT,CAAqCwC,IAArC,IAA6C,KAAKxH,KAAL,CAAWU,cAAX,CAA0B8G,IAA1B,IAAkC,KAAKxH,KAAL,CAAWU,cAAX,CAA0B8G,IAA1B,CAAlC,GAAoE,EAAxH;AACH;AACJ,OAPD;AAQH,KAhBD,MAiBK;AAEDxC,MAAAA,SAAS,CAAC,yBAAD,CAAT,GAAuC;AAAE,sBAAc,KAAKrF,KAAL,CAAW2C,UAAX,CAAsBwF,oBAAtB,CAA2CC;AAA3D,OAAvC;AAEAS,MAAAA,SAAS,CAACvG,GAAV,CAAcuF,IAAI,IAAI;AAClB,YAAIA,IAAI,KAAK,cAAb,EAA6B;AACzB,iBAAOxC,SAAS,CAAC,yBAAD,CAAT,CAAqCwC,IAArC,IAA6C,KAAKxH,KAAL,CAAWU,cAAX,CAA0B8G,IAA1B,EAAgC1D,KAApF;AACH,SAFD,MAGK;AACD,iBAAOkB,SAAS,CAAC,yBAAD,CAAT,CAAqCwC,IAArC,IAA6C,KAAKxH,KAAL,CAAWU,cAAX,CAA0B8G,IAA1B,CAApD;AACH;AACJ,OAPD;AAQH;;AACD,UAAM5F,UAAU,GAAG;AACfuD,MAAAA,QAAQ,EAAE,KAAKxF,KAAL,CAAWiC,UAAX,CAAsBuD,QADjB;AAEfD,MAAAA,SAAS,EAAE,aAFI;AAGfF,MAAAA,SAAS,EAAEA,SAHI;AAIfvE,MAAAA,SAAS,EAAE,KAAKd,KAAL,CAAWc,SAJP;AAIkB4D,MAAAA,QAJlB;AAI4BC,MAAAA,OAJ5B;AAKfiE,MAAAA,SAAS,EAACA;AALK,KAAnB;AAOA,WAAO3G,UAAP,CA5C+B,CA6C/B;AACH;;AACD4C,EAAAA,eAAe,CAACH,QAAD,EAAWC,OAAX,EAAoB;AAE/B,QAAIpE,SAAS,GAAGW,SAAhB;AACA,QAAImE,SAAS,GAAG,EAAhB;AACA,QAAIuD,SAAS,GAAC1H,SAAd;AACAmE,IAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKrF,KAAL,CAAWkC,QAAnC;AACA,QAAI2G,SAAS,GAAG,CAAC,mBAAD,EAAsB,cAAtB,EACZ,UADY,EACA,WADA,EACa,QADb,EACuB,QADvB,EACiC,WADjC,EAC8C,gBAD9C,CAAhB;AAGA,QAAI3F,UAAU,GAAG,IAAjB;;AACA,QAAI,KAAKlD,KAAL,CAAWc,SAAX,KAAyB,QAA7B,EAAuC;AACnC8H,MAAAA,SAAS,GAAG;AACRE,QAAAA,aAAa,EAAE,aADP;AAERC,QAAAA,cAAc,EAAE,iBAFR;AAGRtH,QAAAA,eAAe,EAAE;AAHT,OAAZ;AAMA4D,MAAAA,SAAS,CAAC,yBAAD,CAAT,GAAuC;AACnC,sBAAc,KAAKrF,KAAL,CAAW2C,UAAX,CAAsBwF,oBAAtB,CAA2CC,UADtB;AAEnC,0BAAkB,KAAKpI,KAAL,CAAW2C,UAAX,CAAsBsE;AAFL,OAAvC;AAKA/D,MAAAA,UAAU,GAAG,KAAKlD,KAAL,CAAWe,cAAX,CAA0BiI,iBAAvC;AAEAH,MAAAA,SAAS,CAACvG,GAAV,CAAcuF,IAAI,IAAI;AAClB,eAAOxC,SAAS,CAAC,yBAAD,CAAT,CAAqCwC,IAArC,IAA6C,KAAKxH,KAAL,CAAWU,cAAX,CAA0B8G,IAA1B,IAAkC,KAAKxH,KAAL,CAAWU,cAAX,CAA0B8G,IAA1B,CAAlC,GAAoE,EAAxH;AACH,OAFD;AAGAtH,MAAAA,SAAS,GAAG,KAAKF,KAAL,CAAWE,SAAvB;AACH,KAlBD,MAmBK;AAED8E,MAAAA,SAAS,CAAC,yBAAD,CAAT,GAAuC;AACnC,sBAAc,KAAKrF,KAAL,CAAW2C,UAAX,CAAsBwF,oBAAtB,CAA2CC,UADtB;AAEnC,0BAAkB,KAAKpI,KAAL,CAAW2C,UAAX,CAAsBsE;AAFL,OAAvC;AAIA4B,MAAAA,SAAS,CAACvG,GAAV,CAAcuF,IAAI,IAAI;AAClB,eAAOxC,SAAS,CAAC,yBAAD,CAAT,CAAqCwC,IAArC,IAA6C,KAAKxH,KAAL,CAAWU,cAAX,CAA0B8G,IAA1B,IAAkC,KAAKxH,KAAL,CAAWU,cAAX,CAA0B8G,IAA1B,CAAlC,GAAoE,EAAxH;AACH,OAFD;AAGAxC,MAAAA,SAAS,CAAC,yBAAD,CAAT,CAAqC,gBAArC,IAAyD,KAAKhF,KAAL,CAAWU,cAAX,IAA6B,KAAKV,KAAL,CAAWU,cAAX,CAA0BkI,cAAvD,GACrD,KAAK5I,KAAL,CAAWU,cAAX,CAA0BkI,cAD2B,GAEnD1J,iBAAiB,CAAC2E,GAFxB;AAIH;;AACD,UAAMjC,UAAU,GAAG;AACfuD,MAAAA,QAAQ,EAAE,KAAKxF,KAAL,CAAWiC,UAAX,CAAsBuD,QADjB;AAEfD,MAAAA,SAAS,EAAE,aAFI;AAGfF,MAAAA,SAAS,EAAEA,SAHI;AAGOnC,MAAAA,UAHP;AAIfpC,MAAAA,SAAS,EAAE,KAAKd,KAAL,CAAWc,SAJP;AAIkB4D,MAAAA,QAJlB;AAI4BC,MAAAA,OAJ5B;AAIqCpE,MAAAA,SAJrC;AAKfqI,MAAAA,SAAS,EAACA;AALK,KAAnB;AAOA,WAAO3G,UAAP,CAlD+B,CAoD/B;AACH;;AAED6C,EAAAA,oBAAoB,CAACJ,QAAD,EAAWC,OAAX,EAAoB;AACpC,UAAM5D,cAAc,GAAG,KAAKV,KAAL,CAAWU,cAAlC;AACA,UAAMmI,aAAa,GAAGnI,cAAc,CAACoI,SAArC;AACA,UAAMnB,mBAAmB,GAAGjH,cAAc,CAACiH,mBAA3C;AACA,QAAIoB,YAAY,GAAG7J,iBAAiB,CAACyB,EAArC;AACA,QAAIqI,qBAAqB,GAAG,EAA5B;AACA,QAAIC,gBAAgB,GAAG;AACnBlB,MAAAA,UAAU,EAAE,KAAKpI,KAAL,CAAW2C,UAAX,CAAsBwF,oBAAtB,CAA2CC,UADpC;AAEnBmB,MAAAA,qBAAqB,EAAExI,cAAc,CAACwI,qBAAf,GAAuCxI,cAAc,CAACwI,qBAAtD,GAA8E,CAFlF;AAGnBC,MAAAA,OAAO,EAAEjK,iBAAiB,CAACyE,MAHR;AAInBgE,MAAAA,mBAJmB;AAKnBiB,MAAAA,cAAc,EAAElI,cAAc,CAACiH,mBAAmB,KAAKxI,cAAc,CAACiK,IAAvC,GAA8C,oBAA9C,GAAqE,gBAAtE,CAAd,GAAwG1I,cAAc,CAACiH,mBAAmB,KAAKxI,cAAc,CAACiK,IAAvC,GAA8C,oBAA9C,GAAqE,gBAAtE,CAAtH,GAAgN;AAL7M,KAAvB;AAOA,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;;AACA,QAAI3B,mBAAmB,KAAKxI,cAAc,CAACyI,GAA3C,EAAgD;AAC5C,UAAIiB,aAAa,IAAIU,KAAK,CAACC,OAAN,CAAcX,aAAd,CAAjB,IAAiDA,aAAa,CAACZ,MAAd,GAAuB,CAA5E,EAA+E;AAC3EY,QAAAA,aAAa,CAACtB,OAAd,CAAsB,CAACrB,IAAD,EAAOuD,KAAP,KAAiB;AACnC,gBAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,gBAAlB,CAAjB;AACA,gBAAMY,gBAAgB,GAAG3D,IAAI,CAACzC,IAAL,CAAUqG,KAAV,CAAgB,GAAhB,CAAzB;AACA,gBAAMC,aAAa,GAAG7D,IAAI,CAACzC,IAAL,CAAUqG,KAAV,CAAgB,GAAhB,EAAqBD,gBAAgB,CAAC5B,MAAjB,GAA0B,CAA/C,CAAtB;AACA,gBAAM+B,eAAe,GAAGtJ,cAAc,CAACsJ,eAAf,IAAkCtJ,cAAc,CAACsJ,eAAf,KAAkCnJ,SAApE,GAAgFH,cAAc,CAACsJ,eAAf,CAA+BF,KAA/B,CAAqC,GAArC,CAAhF,GAA6H/K,WAAW,EAAhK;AACA,gBAAMkL,iBAAiB,GAAGvJ,cAAc,CAACsJ,eAAf,IAAkCtJ,cAAc,CAACsJ,eAAf,KAAkCnJ,SAApE,GAAiFqF,IAAI,CAACzC,IAAL,CAAUqG,KAAV,CAAgB,GAAhB,EAAqBE,eAAe,CAAC/B,MAAhB,GAAyB,CAA9C,CAAjF,GAAoI8B,aAA9J;AACA,gBAAMG,cAAc,GAAGvC,mBAAmB,KAAKxI,cAAc,CAACyI,GAAvC,GAA6ClH,cAAc,CAACwI,qBAAf,IAAwCxI,cAAc,CAACwI,qBAAf,GAAuC,CAA/E,IAC7DxI,cAAc,CAACsJ,eAAf,KAAmC,EAD0B,GACrBA,eAAe,CAAC,CAAD,CAAf,GAAqB,GAArB,GAA2BC,iBADN,GAC0BlL,WAAW,KAAK,GAAhB,GAAsBgL,aAD7F,GAC6G,EADpI;AAEAL,UAAAA,QAAQ,CAAC,WAAD,CAAR,GAAuB1K,mBAAmB,CAACkH,IAAI,CAACzC,IAAN,EAAW,KAAX,CAA1C;AACAiG,UAAAA,QAAQ,CAAC,cAAD,CAAR,GAA0B1K,mBAAmB,CAAE0B,cAAc,CAACyJ,YAAf,GAA8BzJ,cAAc,CAACyJ,YAAf,CAA4BC,IAA5B,EAA9B,GAAmE,EAArE,EAAwE,KAAxE,CAA7C;AACAV,UAAAA,QAAQ,CAAC,WAAD,CAAR,GAAwBxK,iBAAiB,CAACmL,EAA1C;AACAX,UAAAA,QAAQ,CAAC,iBAAD,CAAR,GAA8BQ,cAA9B;AACAR,UAAAA,QAAQ,CAAC,WAAD,CAAR,GAAwBxD,IAAI,CAACoE,IAA7B;AACAjB,UAAAA,QAAQ,CAACkB,MAAT,CAAgB,iBAAiBd,KAAjC,EAAwCvD,IAAxC;AACAmD,UAAAA,QAAQ,CAACkB,MAAT,CAAgB,mBAAmBd,KAAnC,EAA0CS,cAA1C;AACAlB,UAAAA,qBAAqB,CAACtB,IAAtB,CAA2BgC,QAA3B;AACH,SAhBD;AAiBAL,QAAAA,QAAQ,CAACkB,MAAT,CAAgB,WAAhB,EAA6B1B,aAAa,CAACZ,MAA3C;AACAc,QAAAA,YAAY,GAAG7J,iBAAiB,CAAC2E,GAAjC;AACH,OApBD,MAoBO;AACHoF,QAAAA,gBAAgB,CAAC,WAAD,CAAhB,GAA+BjK,mBAAmB,CAAE0B,cAAc,CAACoI,SAAjB,EAA2B,KAA3B,CAAlD;AACAG,QAAAA,gBAAgB,CAAC,cAAD,CAAhB,GAAkCjK,mBAAmB,CAAC0B,cAAc,CAACyJ,YAAf,GAA8BzJ,cAAc,CAACyJ,YAAf,CAA4BC,IAA5B,EAA9B,GAAmE,EAApE,EAAuE,KAAvE,CAArD;AACAnB,QAAAA,gBAAgB,CAAC,WAAD,CAAhB,GAAgC/J,iBAAiB,CAACmL,EAAlD;AACApB,QAAAA,gBAAgB,CAAC,iBAAD,CAAhB,GAAsCvI,cAAc,CAACsJ,eAArD;AACAf,QAAAA,gBAAgB,CAAC,WAAD,CAAhB,GAAgCvI,cAAc,CAAC8J,SAA/C;AACAxB,QAAAA,qBAAqB,CAACtB,IAAtB,CAA2BuB,gBAA3B;AACH;AACJ,KA7BD,MA6BO;AACHA,MAAAA,gBAAgB,CAAC,WAAD,CAAhB,GAA+BjK,mBAAmB,CAAC0B,cAAc,CAAC+J,aAAf,CAA6BL,IAA7B,EAAD,EAAqC,KAArC,CAAlD;AACAnB,MAAAA,gBAAgB,CAAC,cAAD,CAAhB,GAAkCjK,mBAAmB,CAAC0B,cAAc,CAACgK,gBAAf,GAAkChK,cAAc,CAACgK,gBAAf,CAAgCN,IAAhC,EAAlC,GAA2E,EAA5E,EAA+E,KAA/E,CAArD;AACAnB,MAAAA,gBAAgB,CAAC,WAAD,CAAhB,GAAgCvI,cAAc,CAACiK,SAAf,CAAyB7G,KAAzB,GAAiCpD,cAAc,CAACiK,SAAf,CAAyB7G,KAA1D,GAAkE,CAAC,CAAnG;AACAmF,MAAAA,gBAAgB,CAAC,iBAAD,CAAhB,GAAsC,EAAtC;AACAA,MAAAA,gBAAgB,CAAC,WAAD,CAAhB,GAAgC,CAAhC;AACAD,MAAAA,qBAAqB,CAACtB,IAAtB,CAA2BuB,gBAA3B;AACH;;AACDI,IAAAA,QAAQ,CAACkB,MAAT,CAAgB,cAAhB,EAAgCxB,YAAhC;AACAM,IAAAA,QAAQ,CAACkB,MAAT,CAAgB,kBAAhB,EAAoCK,IAAI,CAACC,SAAL,CAAe7B,qBAAf,CAApC,EApDoC,CAqDpC;;AAIA,QAAInG,UAAU,GAAG,IAAjB;AACA,QAAI0F,SAAS,GAAG1H,SAAhB;;AACA,QAAI,KAAKlB,KAAL,CAAWc,SAAX,KAAyB,QAA7B,EAAuC;AACnC;AACA8H,MAAAA,SAAS,GAAG;AAAEE,QAAAA,aAAa,EAAE,cAAjB;AAAiCC,QAAAA,cAAc,EAAE,sBAAjD;AAAyEtH,QAAAA,eAAe,EAAE;AAA1F,OAAZ;AACAyB,MAAAA,UAAU,GAAGnC,cAAc,CAAC,uBAAD,CAA3B;AACH;;AACD,UAAMkB,UAAU,GAAG;AACfoD,MAAAA,SAAS,EAAE;AAAE8F,QAAAA,QAAQ,EAAE,KAAKnL,KAAL,CAAWkC;AAAvB,OADI;AAEfwH,MAAAA,QAAQ,EAAEA,QAFK;AAGf0B,MAAAA,YAAY,EAAE,IAHC;AAIftK,MAAAA,SAAS,EAAE,KAAKd,KAAL,CAAWc,SAJP;AAKf0E,MAAAA,QAAQ,EAAE,cALK;AAMfd,MAAAA,QANe;AAMLC,MAAAA,OANK;AAMIY,MAAAA,SAAS,EAAE,kBANf;AAMmCqD,MAAAA;AANnC,KAAnB;AAQA,WAAO3G,UAAP;AACH,GA7kBuC,CA+kBxC;;;AAkFAoJ,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAC9B,QAAI,KAAKtL,KAAL,CAAW2C,UAAX,KAA0B2I,aAAa,CAAC3I,UAA5C,EAAwD;AAEpD,UAAI;AAAEpC,QAAAA;AAAF,UAAgB,KAAKF,KAAzB;;AACA,UAAI,KAAKL,KAAL,CAAWO,SAAX,KAAyBW,SAA7B,EAAwC;AACpCX,QAAAA,SAAS,GAAG;AAAEiG,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE,KAAKzG,KAAL,CAAW0G,QAAX,GAAsBC,QAAQ,CAAC,KAAK3G,KAAL,CAAW0G,QAAX,CAAoB,EAApB,CAAD,CAA9B,GAA0D;AAA3E,SAAZ;AACH;;AAED,WAAKvG,QAAL,CAAc;AACVyG,QAAAA,UAAU,EAAE,KADF;AACSC,QAAAA,aAAa,EAAE,KADxB;AAEVvG,QAAAA,uBAAuB,EAAE,KAAKN,KAAL,CAAW2C,UAAX,CAAsBrC,uBAFrC;AAGV2G,QAAAA,QAAQ,EAAE,KAAKjH,KAAL,CAAW2C,UAAX,CAAsBsE,QAHtB;AAGgCD,QAAAA,OAAO,EAAE,KAAKhH,KAAL,CAAW2C,UAAX,CAAsBqE,OAH/D;AAGwEzG,QAAAA;AAHxE,OAAd;AAMH;;AAED,QAAI,KAAKP,KAAL,CAAWe,cAAX,KAA8BuK,aAAa,CAACvK,cAAhD,EAAgE;AAC5D,WAAKZ,QAAL,CAAc;AAAEY,QAAAA,cAAc,EAAE,KAAKf,KAAL,CAAWe;AAA7B,OAAd;AACH;AACJ;;AAprBuC;;AAstB5C,eAAgBzC,UAAU,CAACwB,mBAAD,CAA1B","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Card, Tab, Nav } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddContactInfoManufacturer from '../../pages/contactmaster/AddContactInfoManufacturer';\r\nimport AddSiteManufacturer from '../../pages/contactmaster/AddSiteManufacturer';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, validateEmail, validatePhoneNumber, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, Lims_JSON_stringify } from '../../components/CommonScript';\r\nimport Esign from '../audittrail/Esign';\r\nimport { transactionStatus, attachmentType } from '../../components/Enumeration';\r\nimport CustomAccordion from '../../components/custom-accordion/custom-accordion.component';\r\nimport ManufacturerTabsAccordion from './ManufacturerTabsAccordion';\r\nimport { toast } from 'react-toastify';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\n//import ReactTooltip from 'react-tooltip';\r\nimport AddManufacturerFile from './AddManufacturerFile';\r\n\r\nclass ManufacturerSiteTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take :this.props.settings ? parseInt(this.props.settings[14]) : 5\r\n        };\r\n        this.state = {\r\n            isSiteOpen: false, isContactOpen: false, siteSelectedRecord: {}, contactSelectedRecord: {}, dataResult: [],\r\n            dataState: dataState, ManufacturerContactInfo: this.props.masterData.ManufacturerContactInfo, Country: [],\r\n            SiteCode: this.props.masterData.SiteCode, selectedRecord: {}, countryCode: [],\r\n\r\n        };\r\n        this.ContactColumns = [{ \"idsName\": \"IDS_CONTACTNAME\", \"mandatory\": true, \"dataField\": \"scontactname\", \"width\": \"150px\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n        { dataField: \"semail\", idsName: \"IDS_EMAILID\",\"width\": \"150px\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n        { dataField: \"sdefaultContact\", idsName: \"IDS_DEFAULT\",\"width\": \"150px\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n     \r\n\r\n        ];\r\n\r\n        this.siteColumns = [{ \"idsName\": \"IDS_MANUFSITENAME\", \"mandatory\": true, \"dataField\": \"smanufsitename\", \"width\": \"150px\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n        { \"idsName\": \"IDS_ADDRESS1\", \"mandatory\": true, \"dataField\": \"saddress1\", \"width\": \"150px\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n        { \"idsName\": \"IDS_COUNTRYNAME\", \"mandatory\": true, \"dataField\": \"ncountrycode\", \"width\": \"150px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n\r\n        ];\r\n        \r\n        this.manufacturerFileFTP = [\r\n            { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_CHOOSE\", \"controlType\": \"file\"}\r\n        ];\r\n\r\n        this.manufacturerFileLink = [\r\n            { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"slinkfilename\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n            { \"idsName\": \"IDS_LINKNAME\", \"dataField\": \"nlinkcode\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n        ];\r\n\r\n        this.detailedFieldList = [\r\n            { \"dataField\": \"sphoneno\",\"idsName\": \"IDS_PHONE\" , columnSize:\"4\"},\r\n            { \"idsName\": \"IDS_MOBILE\", \"dataField\": \"smobileno\" , columnSize:\"4\"},\r\n            { dataField: \"sfaxno\", idsName: \"IDS_FAX\" , columnSize:\"4\"},\r\n            { dataField: \"scomments\", idsName: \"IDS_COMMENTS\", columnSize:\"12\" }\r\n          \r\n        ];\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.ManufacturerContactInfo, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    openModalContact = (input) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openChildModal: true, operation: input.operation,\r\n                selectedRecord:{\"ndefaultstatus\":transactionStatus.NO},\r\n                defaultSite: undefined, ncontrolCode: input.ncontrolCode,\r\n                screenName: \"IDS_SITECONTACT\", loading: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    render() {\r\n\r\n        const addManufacturerSiteId = this.props.controlMap.has(\"AddManufacturerSiteAddress\") && this.props.controlMap.get(\"AddManufacturerSiteAddress\").ncontrolcode\r\n        // const editManufacturerSiteId = this.props.controlMap.has(\"EditManufacturerSiteAddress\") && this.props.controlMap.get(\"EditManufacturerSiteAddress\").ncontrolcode;\r\n        // const deleteManufacturerSiteId = this.props.controlMap.has(\"DeleteManufacturerSiteAddress\") && this.props.controlMap.get(\"DeleteManufacturerSiteAddress\").ncontrolcode\r\n\r\n\r\n        //const editManufacturerContactId = this.props.controlMap.has(\"EditManufacturerContactInfo\") && this.props.controlMap.get(\"EditManufacturerContactInfo\").ncontrolcode;\r\n        // const deleteManufacturerContactId = this.props.controlMap.has(\"DeleteManufacturerContactInfo\") && this.props.controlMap.get(\"DeleteManufacturerContactInfo\").ncontrolcode\r\n\r\n        //let primaryKeyField = \"nmanufcontactcode\";\r\n\r\n        // const editContactParam = {\r\n        //     screenName: \"ManufacturerContact\", primaryKeyField: \"nmanufcontactcode\", operation: \"update\",\r\n        //     inputParam: this.props.inputParam, userInfo: this.props.userInfo, ncontrolCode: editManufacturerContactId\r\n        // };\r\n\r\n        // const deleteParam = { operation: \"delete\" };\r\n        const mandatoryFields = [];\r\n        if (this.props.screenName === \"IDS_MANUFACTURESITE\") {\r\n            this.siteColumns.forEach(item => item.mandatory === true ?\r\n                mandatoryFields.push(item) : \"\"\r\n            );\r\n        }\r\n        else if (this.props.screenName === \"IDS_SITECONTACT\"){\r\n            this.ContactColumns.forEach(item => item.mandatory === true ?\r\n                mandatoryFields.push(item) : \"\"\r\n            );\r\n        }\r\n        else if (this.props.screenName === \"IDS_MANUFACTURERFILE\"){     //ALPD-898 Fix\r\n            if(this.props.selectedRecord.nattachmenttypecode === attachmentType.FTP){\r\n                this.manufacturerFileFTP.forEach(item => item.mandatory === true ?\r\n                    mandatoryFields.push(item) : \"\"\r\n                );\r\n            }\r\n            else {\r\n                this.manufacturerFileLink.forEach(item => item.mandatory === true ?\r\n                    mandatoryFields.push(item) : \"\"\r\n                );\r\n            }\r\n\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Row noGutters={true}>\r\n                    <Col md='12'>\r\n                        <Card className=\"at-tabs\">\r\n                            <Tab.Content>\r\n                                <Tab.Pane aria-labelledby=\"Version-tab\" className=\"p-0 active show\">\r\n\r\n                                    <Row className=\"no-gutters pt-2 pb-2 col-12 text-right border-bottom\" >\r\n                                        <Col md={12}>\r\n                                            <div className=\"d-flex justify-content-end\">\r\n                                                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\"/> */}\r\n                                                <Nav.Link className=\"add-txt-btn\" hidden={this.props.userRoleControlRights.indexOf(addManufacturerSiteId) === -1}\r\n                                                    onClick={() => this.props.getSiteManufacturerLoadEdit(\"SiteManufacturer\", \"create\", this.props.masterData.selectedManufacturer.nmanufcode, undefined, addManufacturerSiteId, this.props.userInfo)}>\r\n                                                    <FontAwesomeIcon icon={faPlus} /> { }\r\n                                                    <FormattedMessage id='IDS_MANUFACTURESITE' defaultMessage='Site Details' />\r\n                                                </Nav.Link>\r\n                                            </div>\r\n                                        </Col>\r\n\r\n                                    </Row>\r\n\r\n                                    <Row className=\"no-gutters\">\r\n                                        <Col md={12}>\r\n                                            {this.props.masterData.ManufacturerSiteAddress && this.props.masterData.ManufacturerSiteAddress.length > 0 ?\r\n                                                <CustomAccordion key=\"filter\"\r\n                                                    accordionTitle={\"smanufsitename\"}\r\n                                                    accordionComponent={this.manufacturerSiteAccordion(this.props.masterData.ManufacturerSiteAddress)}\r\n                                                    inputParam={{ masterData: this.props.masterData,userInfo:this.props.userInfo }}\r\n                                                    accordionClick={this.props.getContactInfo}\r\n                                                    accordionPrimaryKey={\"nmanufsitecode\"}\r\n                                                    accordionObjectName={\"siteAddress\"}\r\n                                                    selectedKey={this.props.masterData.selectedSite.nmanufsitecode}\r\n                                                />\r\n                                                : \"\"}\r\n                                        </Col>\r\n                                    </Row>\r\n                                    {/* <Row>\r\n                                        <Col>\r\n                                            <DataGrid\r\n                                                primaryKeyField={primaryKeyField}\r\n                                                expandField=\"expanded\"\r\n                                                detailedFieldList={this.detailedFieldList}\r\n                                                extractedColumnList={this.ContactColumns}\r\n                                                inputParam={this.props.inputParam}\r\n                                                userInfo={this.props.userInfo}\r\n                                                // width=\"600px\"\r\n                                                data={this.state.ManufacturerContactInfo || []}\r\n                                                dataResult={process(this.state.ManufacturerContactInfo || [], this.state.dataState)}\r\n                                                dataState={this.state.dataState}\r\n                                                dataStateChange={this.dataStateChange}\r\n                                                controlMap={this.props.controlMap}\r\n                                                userRoleControlRights={this.props.userRoleControlRights || []}\r\n                                                methodUrl=\"ManufacturerContactInfo\"\r\n                                                fetchRecord={this.props.getContactManufacturerLoadEdit}\r\n                                                editParam={editContactParam}\r\n                                                deleteParam={{ operation: \"delete\" }}\r\n                                                deleteRecord={this.DeleteContact}\r\n                                                //pageable={false}\r\n                                                scrollable={\"scrollable\"}\r\n                                                isActionRequired={true}\r\n                                                selectedId={this.props.selectedId}\r\n                                            // isComponent={true}\r\n                                            >\r\n                                            </DataGrid>\r\n                                        </Col>\r\n                                    </Row> */}\r\n\r\n                                </Tab.Pane >\r\n                            </Tab.Content >\r\n                        </Card >\r\n                    </Col >\r\n                </Row >\r\n                <>\r\n                    {this.props.openChildModal &&\r\n                        <SlideOutModal show={this.props.openChildModal}\r\n                            closeModal={this.closeModal}\r\n                            operation={this.props.operation}\r\n                            inputParam={this.props.inputParam}\r\n                            screenName={this.props.screenName}\r\n                            onSaveClick={this.onSaveClick}\r\n                            updateStore={this.props.updateStore}\r\n                            esign={this.props.loadEsign}\r\n                            validateEsign={this.validateEsign}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                            mandatoryFields={mandatoryFields}\r\n                            addComponent={this.props.loadEsign ?\r\n                                <Esign operation={this.props.operation}\r\n                                    //  formatMessage={this.props.formatMessage}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    inputParam={this.props.inputParam}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                /> :\r\n                                this.props.screenName === \"IDS_MANUFACTURESITE\" ?\r\n                                    <AddSiteManufacturer selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onComboChange={this.onComboChange}\r\n                                        //   formatMessage={this.props.formatMessage}\r\n                                        Country={this.props.Country || []}\r\n                                        inputParam={this.props.inputParam}\r\n                                    // defaultValue={this.props.countryCode}\r\n                                    />\r\n                                    :\r\n                                    this.props.screenName === \"IDS_SITECONTACT\" ?\r\n                                    <AddContactInfoManufacturer\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onComboChange={this.onComboChange}\r\n                                    //  formatMessage={this.props.formatMessage}\r\n\r\n                                    />\r\n                                    :\r\n                                    this.props.screenName === \"IDS_MANUFACTURERFILE\" ?      //ALPD-898 Fix\r\n                                    <AddManufacturerFile\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onDrop={this.onDropManufacturerFile}\r\n                                        onDropAccepted={this.onDropAccepted}\r\n                                        deleteAttachment={this.deleteAttachment}\r\n                                        actionType={this.state.actionType}\r\n                                        onComboChange={this.onComboChange}\r\n                                        linkMaster={this.props.linkMaster}\r\n                                        editFiles={this.props.editFiles}\r\n                                        maxSize={20}\r\n                                        // maxFiles={this.props.operation === \"update\" ? 1 : 3}\r\n                                        // multiple={this.props.operation === \"update\" ? false : true}\r\n                                        maxFiles={1}\r\n                                        multiple={false}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_MANUFACTURERFILE\" })}\r\n                                        name=\"manufacturerfilename\"\r\n                                    /> : \"\"\r\n\r\n                                    \r\n                            }\r\n                        />\r\n\r\n                    }\r\n\r\n                </>\r\n            </>\r\n        );\r\n    }\r\n    manufacturerSiteAccordion = (manufacturerSiteAddress) => {\r\n        let primaryKeyField = \"nmanufcontactcode\";\r\n        const addManufacturerContactId = this.props.controlMap.has(\"AddManufacturerContactInfo\") && this.props.controlMap.get(\"AddManufacturerContactInfo\").ncontrolcode\r\n        const editManufacturerContactId = this.props.controlMap.has(\"EditManufacturerContactInfo\") && this.props.controlMap.get(\"EditManufacturerContactInfo\").ncontrolcode;\r\n        const editContactParam = {\r\n            screenName: \"ManufacturerContact\", primaryKeyField: \"nmanufcontactcode\", operation: \"update\",\r\n            inputParam: this.props.inputParam, userInfo: this.props.userInfo, ncontrolCode: editManufacturerContactId\r\n        };\r\n        const AddContactParam = {\r\n            screenName: \"ManufacturerContact\", primaryKeyField, undefined, operation: \"create\",\r\n            inputParam: this.props.inputParam, userInfo: this.props.userInfo, ncontrolCode: addManufacturerContactId\r\n        };\r\n\r\n        const accordionMap = new Map();\r\n        manufacturerSiteAddress.map((siteAddress) =>\r\n            accordionMap.set(siteAddress.nmanufsitecode,\r\n                <ManufacturerTabsAccordion siteAddress={siteAddress}\r\n                    getSiteManufacturerLoadEdit={this.props.getSiteManufacturerLoadEdit}\r\n                    masterData={this.props.masterData}\r\n                    ConfirmDelete={this.ConfirmDelete}\r\n                    addManufacturerContactId={addManufacturerContactId}\r\n                    AddContactParam={AddContactParam}\r\n                    openModalContact={this.openModalContact}\r\n                    // tabDetail={this.tabDetail(userSite)}   \r\n\r\n                    primaryKeyField={primaryKeyField}\r\n                    expandField=\"expanded\"\r\n                    detailedFieldList={this.detailedFieldList}\r\n                    extractedColumnList={this.ContactColumns}\r\n                    inputParam={this.props.inputParam}\r\n                    userInfo={this.props.userInfo}\r\n                    data={this.state.ManufacturerContactInfo || []}\r\n                    ManufacturerContactInfo={this.state.ManufacturerContactInfo || []}\r\n                    dataState={this.state.dataState}\r\n                    dataStateChange={this.dataStateChange}\r\n                    controlMap={this.props.controlMap}\r\n                    userRoleControlRights={this.props.userRoleControlRights || []}\r\n                    methodUrl=\"ManufacturerContactInfo\"\r\n                    getContactManufacturerLoadEdit={this.props.getContactManufacturerLoadEdit}\r\n                    editParam={editContactParam}\r\n                    deleteParam={{ operation: \"delete\" }}\r\n                    deleteRecord={this.DeleteContact}\r\n                    scrollable={\"scrollable\"}\r\n                    isActionRequired={true}\r\n                    selectedId={this.props.selectedId}\r\n                    hasDynamicColSize={true}\r\n                />)\r\n        )\r\n        return accordionMap;\r\n    }\r\n\r\n    ConfirmDelete = (obj) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.Delete(obj));\r\n    }\r\n\r\n    onInputOnChange = (event, optional) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'ntransactionstatus') {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            }\r\n            else if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n\r\n        }\r\n        else if (event.target.type === \"radio\"){\r\n            selectedRecord[event.target.name] = optional;\r\n        }\r\n\r\n        else {\r\n\r\n            if (event.target.name === \"sphoneno\" || event.target.name === \"smobileno\"\r\n                || event.target.name === \"sfaxno\") {\r\n\r\n                if (event.target.value !== \"\") {\r\n                    event.target.value = validatePhoneNumber(event.target.value);\r\n                    selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n                }\r\n                else {\r\n                    selectedRecord[event.target.name] = event.target.value\r\n                }\r\n            }  else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n            // selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;//.value;\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.loadEsign;\r\n        let openChildModal = this.props.openChildModal;\r\n        let selectedRecord = this.props.selectedRecord;\r\n        if (this.props.loadEsign) {\r\n            if (this.props.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        }\r\n        else {\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.state.selectedRecord['semail'] ? validateEmail(this.state.selectedRecord['semail']) : true) {\r\n            let inputParam = {};\r\n\r\n            if (this.props.screenName === \"IDS_MANUFACTURESITE\") {\r\n                inputParam = this.SaveSiteDetails(saveType, formRef);\r\n            }\r\n            else if (this.props.screenName === \"IDS_SITECONTACT\")\r\n            {\r\n                inputParam = this.SaveContactInfo(saveType, formRef);\r\n            }\r\n            else {\r\n                inputParam = this.SaveManufacturerFile(saveType, formRef);\r\n            }\r\n\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALIDEMAIL\" }));\r\n        }\r\n    }\r\n    SaveSiteDetails(saveType, formRef) {\r\n        let inputData = [];\r\n        let postParam=undefined;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        let fieldList = [\"nmanufsitecode\", \"ncountrycode\", \"smanufsitename\",\r\n            \"saddress1\", \"saddress2\", \"saddress3\", \"ndefaultstatus\"];\r\n\r\n        if (this.props.operation === \"update\") {\r\n            postParam = {\r\n                inputListName: \"SiteAddress\",\r\n                selectedObject: \"selectedSite\",\r\n                primaryKeyField: \"nmanufsitecode\",\r\n              };\r\n\r\n            inputData[\"manufacturersiteaddress\"] = { \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode };\r\n            fieldList.map(item => {\r\n                if (item === \"ncountrycode\") {\r\n                    return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item].value : \"\";\r\n                }\r\n                else {\r\n                    return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n                }\r\n            })\r\n        }\r\n        else {\r\n\r\n            inputData[\"manufacturersiteaddress\"] = { \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode };\r\n\r\n            fieldList.map(item => {\r\n                if (item === \"ncountrycode\") {\r\n                    return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item].value\r\n                }\r\n                else {\r\n                    return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item]\r\n                }\r\n            })\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"SiteAddress\",\r\n            inputData: inputData,\r\n            operation: this.props.operation, saveType, formRef,\r\n            postParam:postParam\r\n        }\r\n        return inputParam;\r\n        //this.props.crudMaster(inputParam, this.props.masterData);\r\n    }\r\n    SaveContactInfo(saveType, formRef) {\r\n\r\n        let dataState = undefined;\r\n        let inputData = [];\r\n        let postParam=undefined;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        let fieldList = [\"nmanufcontactcode\", \"scontactname\",\r\n            \"sphoneno\", \"smobileno\", \"semail\", \"sfaxno\", \"scomments\", \"ndefaultstatus\"];\r\n\r\n        let selectedId = null;\r\n        if (this.props.operation === \"update\") {\r\n            postParam = {\r\n                inputListName: \"ContactInfo\",\r\n                selectedObject: \"selectedContact\",\r\n                primaryKeyField: \"nmanufcontactcode\",\r\n              };\r\n\r\n            inputData[\"manufacturercontactinfo\"] = {\r\n                \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode,\r\n                \"nmanufsitecode\": this.props.masterData.SiteCode\r\n            };\r\n\r\n            selectedId = this.props.selectedRecord.nmanufcontactcode;\r\n\r\n            fieldList.map(item => {\r\n                return inputData[\"manufacturercontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            })\r\n            dataState = this.state.dataState;\r\n        }\r\n        else {\r\n\r\n            inputData[\"manufacturercontactinfo\"] = {\r\n                \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode,\r\n                \"nmanufsitecode\": this.props.masterData.SiteCode\r\n            };\r\n            fieldList.map(item => {\r\n                return inputData[\"manufacturercontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            })\r\n            inputData[\"manufacturercontactinfo\"]['ndefaultstatus'] = this.state.selectedRecord && this.state.selectedRecord.ndefaultstatus ?\r\n                this.state.selectedRecord.ndefaultstatus\r\n                : transactionStatus.YES\r\n\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"ContactInfo\",\r\n            inputData: inputData, selectedId,\r\n            operation: this.props.operation, saveType, formRef, dataState,\r\n            postParam:postParam\r\n        }\r\n        return inputParam;\r\n\r\n        // this.props.crudMaster(inputParam, this.props.masterData);\r\n    }\r\n\r\n    SaveManufacturerFile(saveType, formRef) {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let manufacturerFileArray = [];\r\n        let manufacturerFile = {\r\n            nmanufcode: this.props.masterData.selectedManufacturer.nmanufcode,\r\n            nmanufacturerfilecode: selectedRecord.nmanufacturerfilecode ? selectedRecord.nmanufacturerfilecode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            nattachmenttypecode,\r\n            ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\r\n        };\r\n        const formData = new FormData();\r\n        if (nattachmenttypecode === attachmentType.FTP) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, manufacturerFile);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const ssystemfilename = selectedRecord.ssystemfilename && selectedRecord.ssystemfilename !==undefined ? selectedRecord.ssystemfilename.split('.') :  create_UUID();\r\n                    const filesystemfileext = selectedRecord.ssystemfilename && selectedRecord.ssystemfilename !==undefined  ? file.name.split('.')[ssystemfilename.length - 1] : fileExtension;\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.nmanufacturerfilecode && selectedRecord.nmanufacturerfilecode > 0\r\n                        && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext:  create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] =Lims_JSON_stringify(file.name,false);\r\n                    tempData[\"sdescription\"] =Lims_JSON_stringify( selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\",false);\r\n                    tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    tempData[\"nfilesize\"] = file.size;\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    manufacturerFileArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                manufacturerFile[\"sfilename\"] =Lims_JSON_stringify( selectedRecord.sfilename,false);\r\n                manufacturerFile[\"sdescription\"] =Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\",false) ;\r\n                manufacturerFile[\"nlinkcode\"] = transactionStatus.NA;\r\n                manufacturerFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                manufacturerFile[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                manufacturerFileArray.push(manufacturerFile);\r\n            }\r\n        } else {\r\n            manufacturerFile[\"sfilename\"] =Lims_JSON_stringify(selectedRecord.slinkfilename.trim(),false);\r\n            manufacturerFile[\"sdescription\"] =Lims_JSON_stringify(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\",false)  ;\r\n            manufacturerFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n            manufacturerFile[\"ssystemfilename\"] = \"\";\r\n            manufacturerFile[\"nfilesize\"] = 0;\r\n            manufacturerFileArray.push(manufacturerFile);\r\n        }\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"manufacturerfile\", JSON.stringify(manufacturerFileArray));\r\n        // formData.append(\"userinfo\", JSON.stringify(this.props.userInfo));\r\n\r\n\r\n\r\n        let selectedId = null;\r\n        let postParam = undefined;\r\n        if (this.props.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"Manufacturer\", selectedObject: \"selectedManufacturer\", primaryKeyField: \"nmanufcode\" };\r\n            selectedId = selectedRecord[\"nmanufacturerfilecode\"];\r\n        }\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.operation,\r\n            classUrl: \"manufacturer\",\r\n            saveType, formRef, methodUrl: \"ManufacturerFile\", postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    // DeleteContact = (e, selectedRecord, Type, methodURL,operation,screenName, ncontrolCode) => {\r\n    DeleteContact = (deleteParam) => {\r\n        let inputData = [];\r\n        if (deleteParam.selectedRecord.expanded !== undefined) {\r\n            delete deleteParam.selectedRecord.expanded\r\n        }\r\n        inputData[\"manufacturercontactinfo\"] = deleteParam.selectedRecord;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        const inputParam = {\r\n            methodUrl: \"ContactInfo\",\r\n            classUrl: this.props.inputParam.classUrl,\r\n            inputData: inputData,\r\n            operation: \"delete\",\r\n            dataState: this.state.dataState\r\n        }\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                    openChildModal: true, screenName: \"Contact\", operation: \"delete\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                        openChildModal: true, screenName: \"Contact\", operation: \"delete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n            }\r\n        }\r\n    }\r\n    //Delete = (e, selectedRecord, Type, methodURL, operation, screenName, ncontrolCode) => {\r\n    Delete = (deleteParam) => {\r\n        let inputData = [];\r\n        if (deleteParam.selectedRecord.expanded && deleteParam.selectedRecord.expanded !== undefined) {\r\n            delete deleteParam.selectedRecord.expanded\r\n        }\r\n        inputData[deleteParam.Type] = deleteParam.selectedRecord;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        const inputParam = {\r\n            methodUrl: deleteParam.methodURL,\r\n            classUrl: this.props.inputParam.classUrl,\r\n            inputData: inputData,\r\n            operation: \"delete\"\r\n        }\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                    openChildModal: true, screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                        openChildModal: true, screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n            }\r\n        }\r\n        //this.props.crudMaster(inputParam, this.props.masterData);\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.masterData !== previousProps.masterData) {\r\n\r\n            let { dataState } = this.state;\r\n            if (this.props.dataState === undefined) {\r\n                dataState = { skip: 0 ,take :this.props.settings ? parseInt(this.props.settings[14]) : 5}\r\n            }\r\n\r\n            this.setState({\r\n                isSiteOpen: false, isContactOpen: false,\r\n                ManufacturerContactInfo: this.props.masterData.ManufacturerContactInfo,\r\n                SiteCode: this.props.masterData.SiteCode, Country: this.props.masterData.Country, dataState\r\n\r\n            });\r\n        }\r\n\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n    }\r\n\r\n    onDropManufacturerFile = (attachedFiles, fieldName, maxSize) => {\r\n\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n}\r\nexport default (injectIntl(ManufacturerSiteTab));"]},"metadata":{},"sourceType":"module"}