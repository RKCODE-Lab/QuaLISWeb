{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { sortData } from '../components/CommonScript';\nimport { intl } from '../components/App';\nimport Axios from 'axios';\nexport function getMISRightsDetail(MISRights, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"misrights/getMISRights\", {\n      nuserrolecode: MISRights.nuserrolecode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        updateDataState: true\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getDashBoardRightsComboDataService(DashBoardparam) {\n  return function (dispatch) {\n    const contactData = {\n      \"nuserrolecode\": DashBoardparam.masterData.SelectedMIS.nuserrolecode,\n      \"userinfo\": DashBoardparam.userInfo\n    };\n    const contactService = rsapi.post(\"misrights/getDashBoardTypeByUserRole\", contactData);\n    let urlArray = [];\n    urlArray = [contactService];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {}; //const   DashBoardType= constructOptionList(response[0].data  || [], \"ndashboardtypecode\", \"sdashboardtypename\", false, false, true).get(\"OptionList\"); \n\n      const DashBoardType = response[0].data;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          DashBoardType,\n          selectedDashBoardRights: [],\n          selectedRecord,\n          openChildModal: true,\n          operation: DashBoardparam.operation,\n          screenName: DashBoardparam.screenName,\n          ncontrolCode: DashBoardparam.ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getReportRightsComboDataService(ReportParamparam) {\n  return function (dispatch) {\n    const contactData = {\n      \"nuserrolecode\": ReportParamparam.masterData.SelectedMIS.nuserrolecode,\n      \"userinfo\": ReportParamparam.userInfo\n    };\n    const contactService = rsapi.post(\"misrights/getReportByUserRole\", contactData);\n    let urlArray = [];\n    urlArray = [contactService];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {}; //const   Reports= constructOptionList(response[0].data  || [], \"nreportcode\", \"sreportname\", false, false, true).get(\"OptionList\"); \n\n      const Reports = response[0].data;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Reports,\n          selectedReportRights: [],\n          selectedRecord,\n          openChildModal: true,\n          operation: ReportParamparam.operation,\n          screenName: ReportParamparam.screenName,\n          ncontrolCode: ReportParamparam.ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getAlertRightsComboDataService(AlertParamparam) {\n  return function (dispatch) {\n    const contactData = {\n      \"nuserrolecode\": AlertParamparam.masterData.SelectedMIS.nuserrolecode,\n      \"userinfo\": AlertParamparam.userInfo\n    };\n    const contactService = rsapi.post(\"misrights/getAlertByUserRole\", contactData);\n    let urlArray = [];\n    urlArray = [contactService];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {}; //const   Alert= constructOptionList(response[0].data  || [], \"nsqlquerycode\", \"sscreenheader\", false, false, true).get(\"OptionList\"); \n\n      const Alert = response[0].data;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Alert,\n          selectedAlertRights: [],\n          selectedRecord,\n          openChildModal: true,\n          operation: AlertParamparam.operation,\n          screenName: AlertParamparam.screenName,\n          ncontrolCode: AlertParamparam.ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getHomeRightsComboDataService(HomeParamparam) {\n  return function (dispatch) {\n    const contactData = {\n      \"nuserrolecode\": HomeParamparam.masterData.SelectedMIS.nuserrolecode,\n      \"userinfo\": HomeParamparam.userInfo\n    };\n    const contactService = rsapi.post(\"misrights/getHomeDashBoardRightsByUserRole\", contactData);\n    let urlArray = [];\n    urlArray = [contactService];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {}; // const   HomeRights= constructOptionList(response[0].data  || [], \"ndashboardhomeprioritycode\", \"sdashboardhomepagename\", false, false, true).get(\"OptionList\"); \n\n      const HomeRights = response[0].data;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          HomeRights,\n          selectedHomeRights: [],\n          selectedRecord,\n          openChildModal: true,\n          operation: HomeParamparam.operation,\n          screenName: HomeParamparam.screenName,\n          ncontrolCode: HomeParamparam.ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getAlertHomeRightsComboDataService(AlertHomeParamparam) {\n  return function (dispatch) {\n    const contactData = {\n      \"nuserrolecode\": AlertHomeParamparam.masterData.SelectedMIS.nuserrolecode,\n      \"userinfo\": AlertHomeParamparam.userInfo\n    };\n    const contactService = rsapi.post(\"misrights/getAlertHomeRightsByUserRole\", contactData);\n    let urlArray = [];\n    urlArray = [contactService];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {}; //const   AlertHomeRights= constructOptionList(response[0].data  || [], \"nsqlquerycode\", \"sscreenheader\", false, false, true).get(\"OptionList\"); \n\n      const AlertHomeRights = response[0].data;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          AlertHomeRights,\n          selectedAlertHomeRights: [],\n          selectedRecord,\n          openChildModal: true,\n          operation: AlertHomeParamparam.operation,\n          screenName: AlertHomeParamparam.screenName,\n          ncontrolCode: AlertHomeParamparam.ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/actions/MISRightsAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","sortData","intl","Axios","getMISRightsDetail","MISRights","userInfo","masterData","dispatch","post","nuserrolecode","userinfo","then","response","data","updateDataState","type","payload","operation","modalName","undefined","loading","catch","error","status","message","warn","getDashBoardRightsComboDataService","DashBoardparam","contactData","SelectedMIS","contactService","urlArray","all","selectedRecord","DashBoardType","selectedDashBoardRights","openChildModal","screenName","ncontrolCode","formatMessage","id","getReportRightsComboDataService","ReportParamparam","Reports","selectedReportRights","getAlertRightsComboDataService","AlertParamparam","Alert","selectedAlertRights","getHomeRightsComboDataService","HomeParamparam","HomeRights","selectedHomeRights","getAlertHomeRightsComboDataService","AlertHomeParamparam","AlertHomeRights","selectedAlertHomeRights"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest} from './LoginAction';\r\nimport { sortData} from '../components/CommonScript';\r\nimport { intl } from '../components/App';\r\nimport Axios from 'axios';\r\n\r\nexport function getMISRightsDetail (MISRights, userInfo, masterData) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"misrights/getMISRights\", {nuserrolecode:MISRights.nuserrolecode, userinfo:userInfo})\r\n   .then(response=>{     \r\n        masterData = {...masterData, ...response.data,updateDataState:true};       \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, operation:null, modalName:undefined, \r\n             loading:false}});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}}\r\n\r\nexport function getDashBoardRightsComboDataService(DashBoardparam) {\r\n    return function (dispatch) {\r\n            const contactData = {\r\n                \"nuserrolecode\": DashBoardparam.masterData.SelectedMIS.nuserrolecode,\r\n                \"userinfo\": DashBoardparam.userInfo\r\n\r\n            }\r\n            const contactService = rsapi.post(\"misrights/getDashBoardTypeByUserRole\", contactData);\r\n            let urlArray = [];\r\n                urlArray = [contactService];\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = {};\r\n                    //const   DashBoardType= constructOptionList(response[0].data  || [], \"ndashboardtypecode\", \"sdashboardtypename\", false, false, true).get(\"OptionList\"); \r\n                    const DashBoardType =response[0].data\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            DashBoardType,\r\n                            selectedDashBoardRights: [],\r\n                            selectedRecord,\r\n                            openChildModal: true,\r\n                            operation: DashBoardparam.operation, screenName: DashBoardparam.screenName,\r\n                            ncontrolCode: DashBoardparam.ncontrolCode, loading: false\r\n                        }\r\n                    });\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n       \r\n    }\r\n}\r\nexport function getReportRightsComboDataService(ReportParamparam) {\r\n    return function (dispatch) {\r\n            const contactData = {\r\n                \"nuserrolecode\": ReportParamparam.masterData.SelectedMIS.nuserrolecode,\r\n                \"userinfo\": ReportParamparam.userInfo\r\n\r\n            }\r\n            const contactService = rsapi.post(\"misrights/getReportByUserRole\", contactData);\r\n            let urlArray = [];\r\n                urlArray = [contactService];\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = {};\r\n                    //const   Reports= constructOptionList(response[0].data  || [], \"nreportcode\", \"sreportname\", false, false, true).get(\"OptionList\"); \r\n                    const Reports =response[0].data\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            Reports,\r\n                            selectedReportRights: [],\r\n                            selectedRecord,\r\n                            openChildModal: true,\r\n                            operation: ReportParamparam.operation, screenName: ReportParamparam.screenName,\r\n                            ncontrolCode: ReportParamparam.ncontrolCode, loading: false\r\n                        }\r\n                    });\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n       \r\n    }\r\n}\r\nexport function getAlertRightsComboDataService(AlertParamparam) {\r\n    return function (dispatch) {\r\n            const contactData = {\r\n                \"nuserrolecode\": AlertParamparam.masterData.SelectedMIS.nuserrolecode,\r\n                \"userinfo\": AlertParamparam.userInfo\r\n            }\r\n            const contactService = rsapi.post(\"misrights/getAlertByUserRole\", contactData);\r\n            let urlArray = [];\r\n                urlArray = [contactService];\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = {};\r\n                    //const   Alert= constructOptionList(response[0].data  || [], \"nsqlquerycode\", \"sscreenheader\", false, false, true).get(\"OptionList\"); \r\n                    const   Alert= response[0].data  \r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            Alert,\r\n                            selectedAlertRights: [],\r\n                            selectedRecord,\r\n                            openChildModal: true,\r\n                            operation: AlertParamparam.operation, screenName: AlertParamparam.screenName,\r\n                            ncontrolCode: AlertParamparam.ncontrolCode, loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n       \r\n    }\r\n}\r\n\r\nexport function getHomeRightsComboDataService(HomeParamparam) {\r\n    return function (dispatch) {\r\n            const contactData = {\r\n                \"nuserrolecode\": HomeParamparam.masterData.SelectedMIS.nuserrolecode,\r\n                \"userinfo\": HomeParamparam.userInfo\r\n            }\r\n            const contactService = rsapi.post(\"misrights/getHomeDashBoardRightsByUserRole\", contactData);\r\n            let urlArray = [];\r\n                urlArray = [contactService];\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = {};\r\n                   // const   HomeRights= constructOptionList(response[0].data  || [], \"ndashboardhomeprioritycode\", \"sdashboardhomepagename\", false, false, true).get(\"OptionList\"); \r\n                    const   HomeRights=response[0].data\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            HomeRights,\r\n                            selectedHomeRights: [],\r\n                            selectedRecord,\r\n                            openChildModal: true,\r\n                            operation: HomeParamparam.operation, screenName: HomeParamparam.screenName,\r\n                            ncontrolCode: HomeParamparam.ncontrolCode, loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n       \r\n    }\r\n}\r\n\r\n\r\nexport function getAlertHomeRightsComboDataService(AlertHomeParamparam) {\r\n    return function (dispatch) {\r\n            const contactData = {\r\n                \"nuserrolecode\": AlertHomeParamparam.masterData.SelectedMIS.nuserrolecode,\r\n                \"userinfo\": AlertHomeParamparam.userInfo\r\n            }\r\n            const contactService = rsapi.post(\"misrights/getAlertHomeRightsByUserRole\", contactData);\r\n            let urlArray = [];\r\n                urlArray = [contactService];\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = {};\r\n                    //const   AlertHomeRights= constructOptionList(response[0].data  || [], \"nsqlquerycode\", \"sscreenheader\", false, false, true).get(\"OptionList\"); \r\n                    const AlertHomeRights =response[0].data\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            AlertHomeRights,\r\n                            selectedAlertHomeRights: [],\r\n                            selectedRecord,\r\n                            openChildModal: true,\r\n                            operation: AlertHomeParamparam.operation, screenName: AlertHomeParamparam.screenName,\r\n                            ncontrolCode: AlertHomeParamparam.ncontrolCode, loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n       \r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}