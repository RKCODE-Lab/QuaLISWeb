{"ast":null,"code":"import Axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { intl } from \"../components/App\";\nimport { constructOptionList, replaceUpdatedObject, sortData } from \"../components/CommonScript\";\nimport { reportCOAType, REPORTTYPE } from \"../components/Enumeration\";\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\nimport rsapi from \"../rsapi\";\nimport { initRequest } from \"./LoginAction\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\"; // export function getReleasedSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\n//     return function (dispatch) {\n//       if (inputData !== undefined &&inputData.npreregno!==\"\") {\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"release/updateRelease\",\n//             inputData\n//         )\n//             .then(response => {\n//                 if (response.data.statusCodeValue !== 200) {\n//                     toast.warn(intl.formatMessage({\n//                         id: response.data.body\n//                     }));\n//                     dispatch({\n//                         type: DEFAULT_RETURN,\n//                         payload: {\n//                             loading: false\n//                         }\n//                     });\n//                 }\n//                 else {\n//                     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\n//                         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\n//                     }\n//                     let masterData = {\n//                         ...Data1, ...response.data.body,\n//                     };\n//                     console.log(\"ReleasedTest,\", masterData);\n//                      sortData(masterData.ReleaseHistory,\"\",'sreportno');\n//                   //  dispatch(generateReport(inputData,masterData))\n//                     dispatch({\n//                         type: DEFAULT_RETURN, payload: {\n//                             masterData,\n//                             change: inputData.change,\n//                             loading: false,\n//                             openModal:false\n//                         }\n//                     });\n//                 }\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                     console.log(\"ErrorRelease,\", error);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//         }\n//         else {\n//             toast.warn(intl.formatMessage({\n//                 id: \"IDS_SELECTANYONESAMPLE\"\n//             }));\n//         }\n//     }\n// }\n\nexport function getReleasedRegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getRegistrationType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            SampleTypeValue: inputData.SampleTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedRegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getRegistrationSubType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegTypeValue: inputData.RegTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedFilterBasedTest(inputData) {\n  return function (dispatch) {\n    if (inputData.napprovalversioncode) {\n      dispatch(initRequest(true));\n      rsapi.post(\"release/getFilterBasedTest\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...responseData,\n              RegSubTypeValue: inputData.RegSubTypeValue,\n              ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n              DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n            },\n            loading: false\n          }\n        });\n\n        if (response.data.rtn) {\n          toast.warn(response.data.rtn);\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_PLSSELECTALLVALUESINFILTER\"\n      }));\n    }\n  };\n}\nexport function getReleasedApprovalVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovalVersion\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData // fromDate: inputParam.inputData.dfrom,\n            // toDate: inputParam.inputData.dto,\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseSample\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = {}; // if (response.data.ReleasedSampleDetails && response.data.ReleasedSampleDetails.length !== 0 ||\n      //     response.data.ReleaseSample && response.data.ReleaseSample.length === 0) {\n\n      masterData = { ...inputParam.masterData,\n        ...responseData\n      }; // }\n      //     else {\n      //         responseData.ReleaseHistory = []\n      //         responseData.selectedReleaseHistory= []\n      //         masterData = {\n      //             ...inputParam.masterData,\n      //             ...responseData,\n      //         }\n      //     }\n\n      if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\n        inputParam.searchRef.current.value = \"\";\n        masterData['searchedData'] = undefined;\n      }\n\n      if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\n        inputParam.searchSampleRef.current.value = \"\";\n        masterData['searchedData'] = undefined;\n      }\n\n      if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\n        inputParam.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n        inputParam.searchTestRef.current.value = \"\"; // masterData['searchedTest'] = undefined\n\n        masterData['searchedTests'] = undefined;\n      }\n\n      sortData(masterData, \"\", \"ncoaparentcode\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          take: inputParam.take,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          resultDataState: { ...inputParam.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParam.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParam.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParam.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParam.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParam.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParam.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    inputParam.inputData['isAddPopup'] = true;\n    const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n\n    const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n    if (inputParam.inputData.ncoareporttypecode === 7) {\n      urlArray = [projectType];\n    } else {\n      urlArray = [releaseSample //,reportType\n      ];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\n      //     \"scoareporttypename\", undefined, undefined, false);\n      // const ReportTypeList = reportTypeMap.get(\"OptionList\");\n      let ProjectTypeList = []; // let selectedRecord = {\"ncoareporttypecode\": {\n      //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\n      //      \"label\": response[1].data.ReportType[0].scoareporttypename\n      // }\n      // };\n\n      let masterData = {};\n      let isAddPopup = true;\n      let openModal = true;\n      let selectedRecord = inputParam.inputData.selectedRecord;\n\n      if (inputParam.inputData.ncoareporttypecode === 7) {\n        const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\n        ProjectTypeList = projectTypeMap.get(\"OptionList\");\n        masterData = { ...inputParam.masterData,\n          ReleaseSubSample: [],\n          ReleaseTest: [],\n          ReleaseSample: []\n        };\n\n        if (inputParam.inputData.selectedRecord.nprojecttypecode) {\n          delete inputParam.inputData.selectedRecord.nprojecttypecode;\n        }\n\n        if (inputParam.inputData.selectedRecord.nprojectmastercode) {\n          delete inputParam.inputData.selectedRecord.nprojectmastercode;\n        }\n      } else {\n        if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\n          let responseData = { ...response[0].data\n          };\n          masterData = { ...inputParam.masterData,\n            ...responseData\n          };\n        } else {\n          isAddPopup = true;\n          let responseData = { ...response[0].data\n          };\n          masterData = { ...inputParam.masterData,\n            ...responseData\n          };\n          openModal = false;\n          toast.warn(intl.formatMessage({\n            id: \"IDS_NOSAMPLESAREAVAILABLE\"\n          }));\n        }\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          // selectedRecord,\n          // ReportTypeList,\n          ncontrolCode,\n          isDeletePopup: false,\n          isEditPopup: false,\n          ProjectTypeList,\n          loading: false,\n          showFilter: false,\n          openModal: openModal,\n          isAddPopup: isAddPopup,\n          operation: \"save\",\n          skip: 0,\n          take: inputParam.take,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          resultDataState: { ...inputParam.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParam.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParam.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParam.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParam.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParam.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParam.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function generateReleasedReport(inputData, Data, Preview) {\n  return function (dispatch) {\n    dispatch(initRequest(true)); // const inputData = {\n    //     npreregno: inputParam.npreregno,\n    //     ntransactionsamplecode: inputParam.ntransactionsamplecode,\n    //     ntransactiontestcode: inputParam.ntransactiontestcode,\n    //     url: inputParam.url,\n    //     nsampletypecode: inputParam.nsampletypecode,\n    //     nprimarykey: inputParam.npreregno,\n    //     ncoareporttypecode: reportCOAType.SAMPLEWISE,\n    //     nreporttypecode: REPORTTYPE.COAREPORT,\n    //     sprimarykeyname: \"npreregno\",\n    //     ncontrolcode: inputParam.ncontrolCode,\n    //     nregtypecode: inputParam.nregtypecode,\n    //     nregsubtypecode: inputParam.nregsubtypecode,\n    //     ntransactiontestcode:inputParam.ntransactiontestcode,\n    //     napproveconfversioncode: inputParam.napprovalversioncode,\n    //     action: inputParam.action,\n    //     ncoaparentcode: inputParam.ncoaparentcode,\n    //     ntransactionstatus:inputParam.ntransactionstatus,\n    //     Preview: Preview,\n    // }\n\n    rsapi.post(\"release/updateRelease\", inputData).then(response => {\n      if (response.data[\"PortalStatus\"] && response.data[\"PortalStatus\"].length > 0) {\n        dispatch(UpdateExternalOrderStatus(response.data[\"PortalStatus\"], inputData));\n      }\n\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputData.change,\n          masterData,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseConfigVersionRegTemplateDesign\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedDataDetails(inputParam, coahistory) {\n  return function (dispatch) {\n    let inputParamData = {\n      dfrom: inputParam.inputData.dfrom,\n      dto: inputParam.inputData.dto,\n      nsampletypecode: inputParam.inputData.nsampletypecode,\n      nregtypecode: inputParam.inputData.nregtypecode,\n      nregsubtypecode: inputParam.inputData.nregsubtypecode,\n      ntransactionstatus: inputParam.inputData.ntransactionstatus,\n      nsectioncode: inputParam.inputData.nsectioncode,\n      ntestcode: inputParam.inputData.ntestcode,\n      napprovalversioncode: inputParam.inputData.napprovalversioncode,\n      napprovalconfigcode: inputParam.inputData.napprovalconfigcode,\n      userinfo: inputParam.inputData.userinfo,\n      nneedsubsample: inputParam.inputData.nneedsubsample,\n      ncoaparentcode: inputParam.ncoaparentcode,\n      npreregno: inputParam.npreregno,\n      ncoareporttypecode: inputParam.inputData.ncoareporttypecode,\n      ndesigntemplatemappingcode: inputParam.masterData.ndesigntemplatemappingcode,\n      isAddPopup: false\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseSample\", inputParamData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\n        inputParam.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\n        inputParam.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n        inputParam.searchTestRef.current.value = \"\"; // masterData['searchedTest'] = undefined\n\n        masterData['searchedTests'] = undefined;\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          take: inputParam.take,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          resultDataState: { ...inputParam.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParam.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParam.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParam.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParam.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParam.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParam.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedProjectByProjectType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedProjectByProjectType\", inputData).then(response => {\n      const projectMasterMap = constructOptionList(response.data || [], \"nprojectmastercode\", \"sprojectcode\", undefined, undefined, false);\n      const projectMasterList = projectMasterMap.get(\"OptionList\");\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          projectMasterList,\n          masterData: { ...inputData.masterData,\n            ...responseData\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedProjectType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedProjectType\", inputData).then(response => {\n      const projectTypeMap = constructOptionList(response.data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\n      const ProjectTypeList = projectTypeMap.get(\"OptionList\"); //     const projectMasterMap = constructOptionList(response.data || [], \"nprojecttypecode\",\n      //     \"sprojecttypename\", undefined, undefined, false);\n      // const projectMasterList = projectMasterMap.get(\"OptionList\");\n\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ProjectTypeList,\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            ProjectTypeValue: inputData.ProjectTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportForPortal(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/SendToPortalReport\", inputData).then(response => {\n      if (response.data[\"rtn\"]) {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function UpdateExternalOrderStatus(portallist, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(String(inputParam[\"url\"]) + \"/portal/UpdateMultiSampleStatus\", JSON.stringify(portallist), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedRecordsAsDraft(userInfo, Data1, inputData) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/saveRelease\", inputData).then(response => {\n        //  if (response.data.statusCodeValue !== 200) {\n        // toast.warn(intl.formatMessage({\n        //     id: response.data.body\n        // }));\n        // dispatch({\n        //     type: DEFAULT_RETURN,\n        //     payload: {\n        //         loading: false\n        //     }\n        // });\n        //   }\n        // else {\n        //     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\n        //         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\n        //     }\n        let masterData = { ...Data1,\n          ...response.data\n        };\n        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            change: inputData.change,\n            loading: false,\n            openModal: false\n          }\n        }); // }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function previewAndFinalReport(inputParam, Data, Preview) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const inputData = {\n      npreregno: inputParam.npreregno,\n      //   nsectioncode: inputParam.nsectioncode || -1,\n      userinfo: inputParam.userinfo,\n      nprimarykey: inputParam.npreregno,\n      ncoareporttypecode: reportCOAType.SAMPLEWISE,\n      nreporttypecode: REPORTTYPE.COAREPORT,\n      sprimarykeyname: \"npreregno\",\n      ncontrolcode: inputParam.ncontrolCode,\n      nregtypecode: inputParam.nregtypecode,\n      nregsubtypecode: inputParam.nregsubtypecode,\n      ntransactiontestcode: inputParam.ntransactiontestcode,\n      napproveconfversioncode: inputParam.napprovalversioncode,\n      action: inputParam.action,\n      ncoaparentcode: inputParam.ncoaparentcode,\n      ntransactionstatus: inputParam.ntransactionstatus,\n      Preview: Preview\n    };\n    rsapi.post(\"release/generateReleasedReport\", inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRemoveApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    inputParam.inputData['isAddPopup'] = true;\n    const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n    // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n    const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\n    urlArray = [releaseSample, statusService //,reportType\n    ];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      if (response[1].data.Status === \"Success\") {\n        let masterData = {};\n        let selectedRecord = inputParam.inputData.selectedRecord;\n        let responseData = { ...response[0].data\n        };\n        masterData = { ...inputParam.masterData,\n          ...responseData\n        }; // responseData = sortData(responseData)\n\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            // selectedRecord,\n            isDeletePopup: true,\n            isEditPopup: false,\n            ncontrolCode,\n            loading: false,\n            showFilter: false,\n            openModal: true,\n            isAddPopup: true,\n            operation: \"delete\",\n            ncontrolCode: inputParam.inputData.ncontrolCode,\n            skip: 0,\n            take: inputParam.take,\n            testskip: 0,\n            testtake: inputParam.testtake,\n            resultDataState: { ...inputParam.resultDataState,\n              sort: undefined,\n              filter: undefined\n            },\n            instrumentDataState: { ...inputParam.instrumentDataState,\n              sort: undefined,\n              filter: undefined\n            },\n            materialDataState: { ...inputParam.materialDataState,\n              sort: undefined,\n              filter: undefined\n            },\n            taskDataState: { ...inputParam.taskDataState,\n              sort: undefined,\n              filter: undefined\n            },\n            documentDataState: { ...inputParam.documentDataState,\n              sort: undefined,\n              filter: undefined\n            },\n            resultChangeDataState: { ...inputParam.resultChangeDataState,\n              sort: undefined,\n              filter: undefined\n            },\n            testCommentDataState: { ...inputParam.testCommentDataState,\n              sort: undefined,\n              filter: undefined\n            },\n            historyDataState: { ...inputParam.historyDataState,\n              sort: undefined,\n              filter: undefined\n            },\n            samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState,\n              sort: undefined,\n              filter: undefined\n            },\n            sampleHistoryDataState: { ...inputParam.sampleHistoryDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[1].data.ValidationStatus\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getDeleteApprovedSample(userInfo, Data1, inputData) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/deleteRelease\", inputData).then(response => {\n        let masterData = { ...Data1,\n          ...response.data\n        };\n        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            change: inputData.change,\n            loading: false,\n            openModal: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function getEditApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    inputParam.inputData['isAddPopup'] = true;\n    const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n\n    const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n    const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\n\n    if (inputParam.inputData.ncoareporttypecode === 7) {\n      urlArray = [projectType, statusService];\n    } else {\n      urlArray = [releaseSample, statusService //,reportType\n      , projectType];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\n      //     \"scoareporttypename\", undefined, undefined, false);\n      // const ReportTypeList = reportTypeMap.get(\"OptionList\");\n      if (response[1].data.Status === \"Success\") {\n        let ProjectTypeList = []; // let selectedRecord = {\"ncoareporttypecode\": {\n        //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\n        //      \"label\": response[1].data.ReportType[0].scoareporttypename\n        // }\n        // };\n\n        let masterData = {};\n        let selectedRecord = inputParam.inputData.selectedRecord;\n\n        if (inputParam.inputData.ncoareporttypecode === 7) {\n          const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\n          ProjectTypeList = projectTypeMap.get(\"OptionList\");\n          masterData = { ...inputParam.masterData,\n            ReleaseSubSample: [],\n            ReleaseTest: [],\n            ReleaseSample: []\n          };\n\n          if (inputParam.inputData.selectedRecord.nprojecttypecode) {\n            delete inputParam.inputData.selectedRecord.nprojecttypecode;\n          }\n\n          if (inputParam.inputData.selectedRecord.nprojectmastercode) {\n            delete inputParam.inputData.selectedRecord.nprojectmastercode;\n          }\n        } else {\n          let responseData = { ...response[0].data\n          };\n          masterData = { ...inputParam.masterData,\n            ...responseData\n          };\n        } // responseData = sortData(responseData)\n\n\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            // selectedRecord,\n            // ReportTypeList,\n            ncontrolCode: inputParam.inputData.ncontrolCode,\n            isDeletePopup: false,\n            isEditPopup: true,\n            ProjectTypeList,\n            loading: false,\n            showFilter: false,\n            openModal: true,\n            isAddPopup: true,\n            operation: \"append\",\n            skip: 0,\n            take: inputParam.take,\n            testskip: 0,\n            testtake: inputParam.testtake,\n            resultDataState: { ...inputParam.resultDataState,\n              sort: undefined,\n              filter: undefined\n            },\n            instrumentDataState: { ...inputParam.instrumentDataState,\n              sort: undefined,\n              filter: undefined\n            },\n            materialDataState: { ...inputParam.materialDataState,\n              sort: undefined,\n              filter: undefined\n            },\n            taskDataState: { ...inputParam.taskDataState,\n              sort: undefined,\n              filter: undefined\n            },\n            documentDataState: { ...inputParam.documentDataState,\n              sort: undefined,\n              filter: undefined\n            },\n            resultChangeDataState: { ...inputParam.resultChangeDataState,\n              sort: undefined,\n              filter: undefined\n            },\n            testCommentDataState: { ...inputParam.testCommentDataState,\n              sort: undefined,\n              filter: undefined\n            },\n            historyDataState: { ...inputParam.historyDataState,\n              sort: undefined,\n              filter: undefined\n            },\n            samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState,\n              sort: undefined,\n              filter: undefined\n            },\n            sampleHistoryDataState: { ...inputParam.sampleHistoryDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[1].data.ValidationStatus\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function UpdateApprovedSample(userInfo, Data1, inputData) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/appendRelease\", inputData).then(response => {\n        let masterData = { ...Data1,\n          ...response.data\n        };\n        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            change: inputData.change,\n            loading: false,\n            openModal: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); // console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ReleaseAction.js"],"names":["Axios","toast","intl","constructOptionList","replaceUpdatedObject","sortData","reportCOAType","REPORTTYPE","TrainingUpdateChildTab","rsapi","initRequest","DEFAULT_RETURN","getReleasedRegistrationType","inputData","dispatch","post","then","response","responseData","data","type","payload","masterData","SampleTypeValue","loading","catch","error","status","message","warn","getReleasedRegistrationSubType","RegTypeValue","getReleasedFilterBasedTest","napprovalversioncode","RegSubTypeValue","ndesigntemplatemappingcode","DesignTemplateMappingValue","rtn","formatMessage","id","getReleasedApprovalVersion","inputParam","getReleasedSample","searchRef","undefined","current","value","searchSampleRef","searchSubSampleRef","searchTestRef","showFilter","skip","take","testskip","testtake","resultDataState","sort","filter","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","samplePrintHistoryDataState","sampleHistoryDataState","getApprovedSample","ncontrolCode","urlArray","releaseSample","projectType","ncoareporttypecode","all","ProjectTypeList","isAddPopup","openModal","selectedRecord","projectTypeMap","get","ReleaseSubSample","ReleaseTest","ReleaseSample","nprojecttypecode","nprojectmastercode","length","isDeletePopup","isEditPopup","operation","generateReleasedReport","Data","Preview","UpdateExternalOrderStatus","document","getElementById","setAttribute","filepath","click","ReleaseHistory","change","modalShow","loadEsign","getReleasedFilterStatus","getReleasedDataDetails","coahistory","inputParamData","dfrom","dto","nsampletypecode","nregtypecode","nregsubtypecode","ntransactionstatus","nsectioncode","ntestcode","napprovalconfigcode","userinfo","nneedsubsample","ncoaparentcode","npreregno","getApprovedProjectByProjectType","projectMasterMap","projectMasterList","getApprovedProjectType","ProjectTypeValue","getReportForPortal","portallist","String","JSON","stringify","headers","getApprovedRecordsAsDraft","userInfo","Data1","previewAndFinalReport","nprimarykey","SAMPLEWISE","nreporttypecode","COAREPORT","sprimarykeyname","ncontrolcode","ntransactiontestcode","napproveconfversioncode","action","getRemoveApprovedSample","statusService","Status","ValidationStatus","getDeleteApprovedSample","getEditApprovedSample","UpdateApprovedSample"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { intl } from \"../components/App\";\r\nimport { constructOptionList, replaceUpdatedObject, sortData } from \"../components/CommonScript\";\r\nimport { reportCOAType, REPORTTYPE } from \"../components/Enumeration\";\r\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\r\nimport rsapi from \"../rsapi\";\r\nimport { initRequest } from \"./LoginAction\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\n\r\n// export function getReleasedSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\r\n\r\n\r\n//     return function (dispatch) {\r\n//       if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n//         dispatch(initRequest(true));\r\n//         return rsapi.post(\"release/updateRelease\",\r\n\r\n//             inputData\r\n//         )\r\n//             .then(response => {\r\n//                 if (response.data.statusCodeValue !== 200) {\r\n//                     toast.warn(intl.formatMessage({\r\n//                         id: response.data.body\r\n//                     }));\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN,\r\n//                         payload: {\r\n//                             loading: false\r\n//                         }\r\n//                     });\r\n\r\n\r\n//                 }\r\n//                 else {\r\n         \r\n//                     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\r\n//                         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\r\n//                     }\r\n//                     let masterData = {\r\n\r\n//                         ...Data1, ...response.data.body,\r\n    \r\n\r\n//                     };\r\n\r\n//                     console.log(\"ReleasedTest,\", masterData);\r\n//                      sortData(masterData.ReleaseHistory,\"\",'sreportno');\r\n//                   //  dispatch(generateReport(inputData,masterData))\r\n\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN, payload: {\r\n//                             masterData,\r\n//                             change: inputData.change,\r\n//                             loading: false,\r\n//                             openModal:false\r\n//                         }\r\n//                     });\r\n//                 }\r\n//             })\r\n\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                     console.log(\"ErrorRelease,\", error);\r\n\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n\r\n\r\n//         }\r\n//         else {\r\n//             toast.warn(intl.formatMessage({\r\n//                 id: \"IDS_SELECTANYONESAMPLE\"\r\n//             }));\r\n//         }\r\n//     }\r\n// }\r\nexport function getReleasedRegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            SampleTypeValue: inputData.SampleTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedRegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getRegistrationSubType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegTypeValue: inputData.RegTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReleasedFilterBasedTest(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.napprovalversioncode) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"release/getFilterBasedTest\", inputData)\r\n                .then(response => {\r\n\r\n\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...responseData,\r\n                                RegSubTypeValue: inputData.RegSubTypeValue,\r\n                                ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                                DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                            },\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (response.data.rtn) {\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_PLSSELECTALLVALUESINFILTER\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function getReleasedApprovalVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovalVersion\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            // fromDate: inputParam.inputData.dfrom,\r\n                            // toDate: inputParam.inputData.dto,\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseSample\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {} \r\n               // if (response.data.ReleasedSampleDetails && response.data.ReleasedSampleDetails.length !== 0 ||\r\n               //     response.data.ReleaseSample && response.data.ReleaseSample.length === 0) {\r\n                    masterData = {\r\n                        ...inputParam.masterData,\r\n                        ...responseData,\r\n                    }\r\n            // }\r\n            //     else {\r\n            //         responseData.ReleaseHistory = []\r\n            //         responseData.selectedReleaseHistory= []\r\n            //         masterData = {\r\n            //             ...inputParam.masterData,\r\n            //             ...responseData,\r\n            //         }\r\n            //     }\r\n                if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\r\n                    inputParam.searchRef.current.value = \"\";\r\n                    masterData['searchedData'] = undefined\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedData'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTest'] = undefined\r\n                    masterData['searchedTests'] = undefined\r\n\r\n                }\r\n                sortData(masterData,\"\",\"ncoaparentcode\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        take: inputParam.take,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        resultDataState: { ...inputParam.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParam.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParam.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParam.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParam.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParam.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParam.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n    export function getApprovedSample(inputParam,ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = []; \r\n        inputParam.inputData['isAddPopup']=true\r\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n      //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n        const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        if (inputParam.inputData.ncoareporttypecode === 7) {\r\n\r\n            urlArray = [ projectType];\r\n        }\r\n        else {\r\n            urlArray = [releaseSample\r\n                //,reportType\r\n            ];\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\r\n                //     \"scoareporttypename\", undefined, undefined, false);\r\n\r\n                // const ReportTypeList = reportTypeMap.get(\"OptionList\");\r\n                let ProjectTypeList = [];\r\n                \r\n                // let selectedRecord = {\"ncoareporttypecode\": {\r\n                //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\r\n                //      \"label\": response[1].data.ReportType[0].scoareporttypename\r\n                // }\r\n                // };\r\n                let masterData = {};\r\n                let isAddPopup = true;\r\n                let openModal = true;\r\n                    let selectedRecord = inputParam.inputData.selectedRecord;\r\n                    if (inputParam.inputData.ncoareporttypecode === 7) {\r\n                        const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\",\r\n                            \"sprojecttypename\", undefined, undefined, false);\r\n                \r\n                        ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n                        masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                        if (inputParam.inputData.selectedRecord.nprojecttypecode) {\r\n                            delete inputParam.inputData.selectedRecord.nprojecttypecode\r\n                        }\r\n                        if (inputParam.inputData.selectedRecord.nprojectmastercode) {\r\n                            delete inputParam.inputData.selectedRecord.nprojectmastercode\r\n                        }\r\n                    } else {\r\n                        if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\r\n\r\n                            let responseData = { ...response[0].data }\r\n                            masterData = {\r\n                                ...inputParam.masterData, ...responseData\r\n                            }\r\n                        }\r\n                        else {\r\n                            isAddPopup = true;\r\n                            let responseData = { ...response[0].data }\r\n                            masterData = {\r\n                                ...inputParam.masterData, ...responseData\r\n                            }\r\n                            openModal = false;\r\n                            toast.warn(intl.formatMessage({ id: \"IDS_NOSAMPLESAREAVAILABLE\" }));\r\n                            }\r\n\r\n                    }\r\n\r\n                \r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                       // selectedRecord,\r\n                       // ReportTypeList,\r\n                        ncontrolCode,\r\n                        isDeletePopup: false,\r\n                        isEditPopup:false,\r\n                        ProjectTypeList,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openModal: openModal,\r\n                        isAddPopup: isAddPopup,\r\n                        operation:\"save\",\r\n                        skip: 0,\r\n                        take: inputParam.take,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        resultDataState: { ...inputParam.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParam.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParam.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParam.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParam.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParam.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParam.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function generateReleasedReport(inputData,Data,Preview) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        // const inputData = {\r\n        //     npreregno: inputParam.npreregno,\r\n        //     ntransactionsamplecode: inputParam.ntransactionsamplecode,\r\n        //     ntransactiontestcode: inputParam.ntransactiontestcode,\r\n        //     url: inputParam.url,\r\n        //     nsampletypecode: inputParam.nsampletypecode,\r\n        //     nprimarykey: inputParam.npreregno,\r\n        //     ncoareporttypecode: reportCOAType.SAMPLEWISE,\r\n        //     nreporttypecode: REPORTTYPE.COAREPORT,\r\n        //     sprimarykeyname: \"npreregno\",\r\n        //     ncontrolcode: inputParam.ncontrolCode,\r\n        //     nregtypecode: inputParam.nregtypecode,\r\n        //     nregsubtypecode: inputParam.nregsubtypecode,\r\n        //     ntransactiontestcode:inputParam.ntransactiontestcode,\r\n        //     napproveconfversioncode: inputParam.napprovalversioncode,\r\n        //     action: inputParam.action,\r\n        //     ncoaparentcode: inputParam.ncoaparentcode,\r\n        //     ntransactionstatus:inputParam.ntransactionstatus,\r\n        //     Preview: Preview,\r\n           \r\n        // }\r\n        rsapi.post(\"release/updateRelease\", inputData)\r\n            .then(response => {\r\n         \r\n                    if (response.data[\"PortalStatus\"] && response.data[\"PortalStatus\"].length > 0) {\r\n                        dispatch(UpdateExternalOrderStatus(response.data[\"PortalStatus\"],inputData));\r\n                    }\r\n\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                \r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                sortData(masterData.ReleaseHistory,\"\",'ncoaparentcode');\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false,change: inputData.change,masterData,\r\n                    modalShow: false, selectedRecord: {}, loadEsign: false\r\n                }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseConfigVersionRegTemplateDesign\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedDataDetails(inputParam,coahistory) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            dfrom: inputParam.inputData.dfrom,\r\n            dto: inputParam.inputData.dto,\r\n\r\n            nsampletypecode: inputParam.inputData.nsampletypecode,\r\n            nregtypecode: inputParam.inputData.nregtypecode,\r\n            nregsubtypecode: inputParam.inputData.nregsubtypecode,\r\n            ntransactionstatus: inputParam.inputData.ntransactionstatus,\r\n            nsectioncode: inputParam.inputData.nsectioncode,\r\n            ntestcode: inputParam.inputData.ntestcode,\r\n            napprovalversioncode: inputParam.inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputParam.inputData.napprovalconfigcode,          \r\n            userinfo: inputParam.inputData.userinfo,\r\n            nneedsubsample: inputParam.inputData.nneedsubsample,\r\n            ncoaparentcode:inputParam.ncoaparentcode,\r\n            npreregno: inputParam.npreregno,\r\n            ncoareporttypecode:inputParam.inputData.ncoareporttypecode,\r\n            ndesigntemplatemappingcode:inputParam.masterData.ndesigntemplatemappingcode,\r\n            isAddPopup:false\r\n            \r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseSample\", inputParamData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTest'] = undefined\r\n                    masterData['searchedTests'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        take: inputParam.take,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        resultDataState: { ...inputParam.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParam.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParam.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParam.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParam.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParam.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParam.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedProjectByProjectType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedProjectByProjectType\", inputData)\r\n            .then(response => {\r\n                     const projectMasterMap = constructOptionList(response.data || [], \"nprojectmastercode\",\r\n                \"sprojectcode\", undefined, undefined, false);\r\n                \r\n            const projectMasterList = projectMasterMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        projectMasterList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedProjectType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedProjectType\", inputData)\r\n            .then(response => {\r\n                const projectTypeMap = constructOptionList(response.data || [], \"nprojecttypecode\",\r\n                \"sprojecttypename\", undefined, undefined, false);\r\n                \r\n            const ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n\r\n            //     const projectMasterMap = constructOptionList(response.data || [], \"nprojecttypecode\",\r\n            //     \"sprojecttypename\", undefined, undefined, false);\r\n                \r\n            // const projectMasterList = projectMasterMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        ProjectTypeList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            ProjectTypeValue: inputData.ProjectTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReportForPortal(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/SendToPortalReport\", inputData)\r\n            .then(response => {\r\n                \r\n                if (response.data[\"rtn\"]) {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function UpdateExternalOrderStatus(portallist,inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post((String)(inputParam[\"url\"])+\"/portal/UpdateMultiSampleStatus\",JSON.stringify(portallist),{\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => {\r\n                \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedRecordsAsDraft(userInfo, Data1, inputData) {\r\n\r\n\r\n    return function (dispatch) {\r\n      if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/saveRelease\",\r\n\r\n            inputData\r\n        )\r\n            .then(response => {\r\n              //  if (response.data.statusCodeValue !== 200) {\r\n                    // toast.warn(intl.formatMessage({\r\n                    //     id: response.data.body\r\n                    // }));\r\n                    // dispatch({\r\n                    //     type: DEFAULT_RETURN,\r\n                    //     payload: {\r\n                    //         loading: false\r\n                    //     }\r\n                    // });\r\n\r\n\r\n             //   }\r\n                // else {\r\n         \r\n                //     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\r\n                //         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\r\n                //     }\r\n                    let masterData = {\r\n\r\n                        ...Data1, ...response.data,\r\n    \r\n\r\n                    };\r\n\r\n                     sortData(masterData.ReleaseHistory,\"\",'ncoaparentcode');\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            change: inputData.change,\r\n                            loading: false,\r\n                            openModal:false\r\n                        }\r\n                    });\r\n                // }\r\n            })\r\n\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                  //  console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n\r\n\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\nexport function previewAndFinalReport(inputParam,Data,Preview) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: inputParam.npreregno,\r\n         //   nsectioncode: inputParam.nsectioncode || -1,\r\n            userinfo: inputParam.userinfo,\r\n            nprimarykey: inputParam.npreregno,\r\n            ncoareporttypecode: reportCOAType.SAMPLEWISE,\r\n            nreporttypecode: REPORTTYPE.COAREPORT,\r\n            sprimarykeyname: \"npreregno\",\r\n            ncontrolcode: inputParam.ncontrolCode,\r\n            nregtypecode: inputParam.nregtypecode,\r\n            nregsubtypecode: inputParam.nregsubtypecode,\r\n            ntransactiontestcode:inputParam.ntransactiontestcode,\r\n            napproveconfversioncode: inputParam.napprovalversioncode,\r\n            action: inputParam.action,\r\n            ncoaparentcode: inputParam.ncoaparentcode,\r\n            ntransactionstatus:inputParam.ntransactionstatus,\r\n            Preview:Preview\r\n        }\r\n        rsapi.post(\"release/generateReleasedReport\", inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n               \r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false,change: inputParam.change,masterData,\r\n                    modalShow: false, selectedRecord: {}, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRemoveApprovedSample(inputParam,ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = []; \r\n        inputParam.inputData['isAddPopup']=true\r\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n      //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n       // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n        \r\n            urlArray = [releaseSample,statusService\r\n                //,reportType\r\n            ];\r\n        \r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                if (response[1].data.Status === \"Success\") {\r\n\r\n                    let masterData = {};\r\n                    let selectedRecord = inputParam.inputData.selectedRecord;\r\n                    \r\n                        let responseData = { ...response[0].data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                    \r\n            \r\n                    // responseData = sortData(responseData)\r\n\r\n                \r\n                    sortData(masterData);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            // selectedRecord,\r\n                            isDeletePopup: true,\r\n                            isEditPopup: false,\r\n                            ncontrolCode,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            openModal: true,\r\n                            isAddPopup: true,\r\n                            operation: \"delete\",\r\n                            ncontrolCode:inputParam.inputData.ncontrolCode,\r\n                            skip: 0,\r\n                            take: inputParam.take,\r\n                            testskip: 0,\r\n                            testtake: inputParam.testtake,\r\n                            resultDataState: { ...inputParam.resultDataState, sort: undefined, filter: undefined },\r\n                            instrumentDataState: { ...inputParam.instrumentDataState, sort: undefined, filter: undefined },\r\n                            materialDataState: { ...inputParam.materialDataState, sort: undefined, filter: undefined },\r\n                            taskDataState: { ...inputParam.taskDataState, sort: undefined, filter: undefined },\r\n                            documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                            resultChangeDataState: { ...inputParam.resultChangeDataState, sort: undefined, filter: undefined },\r\n                            testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                            historyDataState: { ...inputParam.historyDataState, sort: undefined, filter: undefined },\r\n                            samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                            sampleHistoryDataState: { ...inputParam.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[1].data.ValidationStatus\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getDeleteApprovedSample(userInfo, Data1, inputData) {\r\n\r\n\r\n    return function (dispatch) {\r\n      if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/deleteRelease\",\r\n\r\n            inputData\r\n        )\r\n            .then(response => {\r\n                    let masterData = {\r\n                        ...Data1, ...response.data,\r\n                    };\r\n                    sortData(masterData.ReleaseHistory,\"\",'ncoaparentcode');\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            change: inputData.change,\r\n                            loading: false,\r\n                            openModal: false\r\n\r\n                        }\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                  //  console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\nexport function getEditApprovedSample(inputParam,ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = []; \r\n        inputParam.inputData['isAddPopup']=true\r\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n      //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n        const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n\r\n        if (inputParam.inputData.ncoareporttypecode === 7) {\r\n\r\n            urlArray = [ projectType,statusService];\r\n        }\r\n        else {\r\n            urlArray = [releaseSample,statusService\r\n                //,reportType\r\n                , projectType\r\n            ];\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\r\n                //     \"scoareporttypename\", undefined, undefined, false);\r\n\r\n                // const ReportTypeList = reportTypeMap.get(\"OptionList\");\r\n                if (response[1].data.Status === \"Success\") {\r\n\r\n                let ProjectTypeList = [];\r\n                \r\n                // let selectedRecord = {\"ncoareporttypecode\": {\r\n                //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\r\n                //      \"label\": response[1].data.ReportType[0].scoareporttypename\r\n                // }\r\n                // };\r\n                let masterData = {};\r\n                let selectedRecord = inputParam.inputData.selectedRecord;\r\n                if (inputParam.inputData.ncoareporttypecode === 7) {\r\n                    const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\",\r\n                    \"sprojecttypename\", undefined, undefined, false);\r\n                \r\n                 ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n                    masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                    if(inputParam.inputData.selectedRecord.nprojecttypecode){\r\n                        delete inputParam.inputData.selectedRecord.nprojecttypecode\r\n                }\r\n                   if(inputParam.inputData.selectedRecord.nprojectmastercode){\r\n                        delete inputParam.inputData.selectedRecord.nprojectmastercode\r\n                   }\r\n                } else {\r\n                    let responseData = { ...response[0].data }\r\n                    masterData = {\r\n                       ...inputParam.masterData,...responseData\r\n                   }\r\n                }\r\n            \r\n                // responseData = sortData(responseData)\r\n\r\n                \r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                       // selectedRecord,\r\n                       // ReportTypeList,\r\n                        ncontrolCode:inputParam.inputData.ncontrolCode,\r\n                        isDeletePopup: false,\r\n                        isEditPopup:true,\r\n                        ProjectTypeList,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openModal: true,\r\n                        isAddPopup: true,\r\n                        operation:\"append\",\r\n                        skip: 0,\r\n                        take: inputParam.take,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        resultDataState: { ...inputParam.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParam.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParam.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParam.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParam.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParam.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParam.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: response[1].data.ValidationStatus\r\n                }));\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ncontrolCode: ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function UpdateApprovedSample (userInfo, Data1, inputData) {\r\n\r\n\r\n    return function (dispatch) {\r\n      if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/appendRelease\",\r\n\r\n            inputData\r\n        )\r\n            .then(response => {\r\n                    let masterData = {\r\n                        ...Data1, ...response.data,\r\n                    };\r\n                    sortData(masterData.ReleaseHistory,\"\",'ncoaparentcode');\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            change: inputData.change,\r\n                            loading: false,\r\n                            openModal:false\r\n                        }\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                   // console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}