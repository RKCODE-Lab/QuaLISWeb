{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\ResultEntryBySample\\\\ResultEntryCompleteForm.jsx\";\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { intl } from '../../components/App';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { updateStore } from '../../actions';\nimport { connect } from 'react-redux';\n\nclass ResultEntryCompleteForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onComboChange = comboData => {\n      let selectedRecordCompleteForm = this.state.selectedRecordCompleteForm || {};\n\n      if (comboData) {\n        selectedRecordCompleteForm['nusercode'] = comboData;\n      } else {\n        selectedRecordCompleteForm['nusercode'] = [];\n      } //Sync Child Component data with Parent Component     \n\n\n      this.props.onChildDataChange(selectedRecordCompleteForm);\n      this.setState({\n        selectedRecordCompleteForm\n      });\n    };\n\n    this.state = {\n      selectedRecordCompleteForm: this.props.selectedRecordCompleteForm,\n      Users: this.props.Users,\n      loading: false\n    };\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        isCompleteInitialRender: false\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.selectedRecordCompleteForm !== previousProps.selectedRecordCompleteForm) {\n      this.setState({\n        selectedRecordCompleteForm: this.props.selectedRecordCompleteForm\n      });\n    }\n\n    if (this.props.Users !== previousProps.Users) {\n      this.setState({\n        Users: this.props.Users\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: intl.formatMessage({\n        id: \"IDS_USER\"\n      }),\n      placeholder: intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isSearchable: false,\n      name: \"nusercode\",\n      isDisabled: false,\n      isMandatory: true,\n      options: this.state.Users || [],\n      optionId: \"nusercode\",\n      optionValue: \"susername\",\n      value: this.state.selectedRecordCompleteForm ? this.state.selectedRecordCompleteForm.nusercode : \"\",\n      showOption: true,\n      required: true,\n      onChange: event => this.onComboChange(event, 'nusercode'),\n      isMulti: false,\n      closeMenuOnSelect: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default connect(null, {\n  updateStore\n})(injectIntl(ResultEntryCompleteForm));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntryCompleteForm.jsx"],"names":["React","injectIntl","intl","FormSelectSearch","DEFAULT_RETURN","updateStore","connect","ResultEntryCompleteForm","Component","constructor","props","onComboChange","comboData","selectedRecordCompleteForm","state","onChildDataChange","setState","Users","loading","componentWillUnmount","updateInfo","typeName","data","isCompleteInitialRender","componentDidUpdate","previousProps","render","formatMessage","id","nusercode","event"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {injectIntl } from 'react-intl';\r\nimport { intl } from '../../components/App';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport {updateStore} from '../../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nclass ResultEntryCompleteForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedRecordCompleteForm: this.props.selectedRecordCompleteForm,     \r\n            Users: this.props.Users,   \r\n            loading: false\r\n        }\r\n\r\n    }\r\n    onComboChange = (comboData) => {\r\n        let selectedRecordCompleteForm = this.state.selectedRecordCompleteForm || {};\r\n        if (comboData) {\r\n            selectedRecordCompleteForm['nusercode'] = comboData;\r\n        } else {\r\n            selectedRecordCompleteForm['nusercode'] = []\r\n        }\r\n        //Sync Child Component data with Parent Component     \r\n        this.props.onChildDataChange(selectedRecordCompleteForm);\r\n        this.setState({ selectedRecordCompleteForm });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { isCompleteInitialRender: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.selectedRecordCompleteForm !== previousProps.selectedRecordCompleteForm) {\r\n            this.setState({ selectedRecordCompleteForm: this.props.selectedRecordCompleteForm });\r\n        }\r\n        if (this.props.Users !== previousProps.Users) {\r\n            this.setState({ Users: this.props.Users });\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <FormSelectSearch\r\n                    formLabel={intl.formatMessage({ id: \"IDS_USER\" })}\r\n                    placeholder={intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isSearchable={false}\r\n                    name={\"nusercode\"}\r\n                    isDisabled={false}\r\n                    isMandatory={true}\r\n                    options={this.state.Users || []}\r\n                    optionId='nusercode'\r\n                    optionValue='susername'\r\n                    value={this.state.selectedRecordCompleteForm ? this.state.selectedRecordCompleteForm.nusercode : \"\"}\r\n                    showOption={true}\r\n                    required={true}\r\n                    onChange={(event) => this.onComboChange(event, 'nusercode')}\r\n                    isMulti={false}\r\n                    closeMenuOnSelect={true}\r\n                />                         \r\n                    \r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\nexport default connect(null, {updateStore})(injectIntl(ResultEntryCompleteForm));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}