{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\attachmentscomments\\\\comments\\\\Comments.jsx\";\nimport { process } from '@progress/kendo-data-query';\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport DataGrid from '../../../components/data-grid/data-grid.component';\nimport { transactionStatus } from '../../../components/Enumeration';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../../audittrail/Esign';\nimport AddComment from './AddComment';\nimport { updateStore, viewAttachment, validateEsignCredential, crudMaster, getCommentsCombo, deleteComment } from '../../../actions';\nimport { connect } from 'react-redux';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { Nav } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Comments extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onComboChange = (comboData, comboName) => {\n      if (comboData) {\n        let selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[comboName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onInputOnChange = event => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      // const masterData = this.props.Login.masterData;\n      // let inputData = {}\n      // let inputParam = {}\n      // inputData[\"userinfo\"] = this.props.Login.userInfo;\n      // if(this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\n      //     // let saveParam={userInfo:this.props.Login.userInfo,\n      //     //     selectedRecord:this.state.selectedRecord,\n      //     //     masterData:this.props.Login.masterData,\n      //     //     saveType, formRef,\n      //     //     operation:this.props.Login.operation\n      //     // }\n      //     // inputParam = onSaveSampleAttachment(saveParam);\n      // }else if(this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\n      //     let saveParam={\n      //         userInfo:this.props.Login.userInfo,\n      //         isTestComment:this.props.isTestComment,\n      //         selectedRecord:this.state.selectedRecord,\n      //         masterData:this.props.Login.masterData,\n      //         saveType, formRef,\n      //         operation:this.props.Login.operation,\n      //         selectedMaster:this.props.selectedMaster\n      //     }\n      //     inputParam = onSaveTestComments(saveParam);\n      // }\n      // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      //     const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: {\n      //             loadEsign: true,\n      //             screenData: { inputParam, masterData },\n      //             operation: this.props.Login.operation,\n      //             screenName: this.props.Login.screenName,\n      //         }\n      //     }\n      //     this.props.updateStore(updateInfo);\n      // }\n      // else {\n      //     this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\n      // }\n      this.props.onSaveClick(saveType, formRef, this.state.selectedRecord);\n    };\n\n    this.handleClose = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openCommentModal = this.props.Login.openCommentModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let operation = this.props.Login.operation;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openCommentModal = false;\n          selectedRecord = {};\n          operation = undefined;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openCommentModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openCommentModal,\n          loadEsign,\n          selectedRecord,\n          selectedParamId: null,\n          operation\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n\n      if (this.props.Login.operation === 'dynamic') {\n        this.props.validateEsignforApproval(inputParam, \"openChildModal\");\n      } else {\n        this.props.validateEsignCredential(inputParam, \"openCommentModal\");\n      }\n    };\n\n    this.state = {\n      selectedRecord: {}\n    };\n  }\n\n  render() {\n    const extractedColumnList = [];\n\n    if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\n      extractedColumnList = [{\n        \"idsName\": \"IDS_ARNUMBER\",\n        \"dataField\": \"sarno\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_COMMENTS\",\n        \"dataField\": \"scomments\",\n        \"width\": \"200px\",\n        jsonField: true\n      }, // { \"idsName\": \"IDS_SAMPLETESTCOMMENTS\", \"dataField\": \"ssampletestcommentname\", \"width\": \"400px\" },\n      {\n        \"idsName\": \"IDS_SCREENNAME\",\n        \"dataField\": \"sdisplayname\",\n        \"width\": \"150px\"\n      }, {\n        \"idsName\": \"IDS_USERNAME\",\n        \"dataField\": \"susername\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_USERROLE\",\n        \"dataField\": \"suserrolename\",\n        \"width\": \"200px\"\n      }];\n    } else {\n      extractedColumnList = [// {\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\",\"width\":\"100px\"},\n      // {\"idsName\":\"IDS_SAMPLEARNO\",\"dataField\":\"ssamplearno\",\"width\":\"100px\"},\n      {\n        \"idsName\": \"IDS_TESTNAME\",\n        \"dataField\": \"stestsynonym\",\n        \"width\": \"200px\",\n        jsonField: true\n      }, {\n        \"idsName\": \"IDS_COMMENTS\",\n        \"dataField\": \"scomments\",\n        \"width\": \"200px\",\n        jsonField: true\n      }, // { \"idsName\": \"IDS_SAMPLETESTCOMMENTS\", \"dataField\": \"ssampletestcommentname\", \"width\": \"400px\" },\n      {\n        \"idsName\": \"IDS_SCREENNAME\",\n        \"dataField\": \"sdisplayname\",\n        \"width\": \"150px\"\n      }, {\n        \"idsName\": \"IDS_USERNAME\",\n        \"dataField\": \"susername\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_USERROLE\",\n        \"dataField\": \"suserrolename\",\n        \"width\": \"200px\"\n      }];\n    }\n\n    let addFileId = this.props.controlMap.has(this.props.addName) && this.props.controlMap.get(this.props.addName).ncontrolcode;\n    let mandatoryFields = [];\n\n    if (this.props.isTestComment) {\n      mandatoryFields = [{\n        \"idsName\": \"IDS_SAMPLETESTCOMMENTS\",\n        \"dataField\": \"nsamplecommentscode\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_COMMENT\",\n        \"dataField\": \"scomments\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }];\n    } else {\n      mandatoryFields = [{\n        \"idsName\": \"IDS_COMMENT\",\n        \"dataField\": \"scomments\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }];\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actions-stripe border-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: `add_${this.props.Login.screenName}_comment`,\n      className: \"add-txt-btn\",\n      hidden: this.props.userRoleControlRights.indexOf(addFileId) === -1,\n      onClick: () => this.props.getCommentsCombo({\n        userInfo: this.props.Login.userInfo,\n        operation: \"create\",\n        ncontrolCode: addFileId,\n        screenName: this.props.screenName,\n        modalName: \"openCommentModal\",\n        masterList: this.props.masterList,\n        masterAlertStatus: this.props.masterAlertStatus\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_COMMENT\",\n      defaultMessage: \" Comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 29\n      }\n    })))), /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: this.props.primaryKeyField,\n      data: this.props.Comments,\n      dataResult: process(this.props.Comments || [], this.props.dataState),\n      dataState: this.props.dataState,\n      dataStateChange: this.props.dataStateChange,\n      extractedColumnList: extractedColumnList,\n      userInfo: this.props.userInfo,\n      controlMap: this.props.controlMap,\n      userRoleControlRights: this.props.userRoleControlRights,\n      inputParam: this.props.inputParam,\n      pageable: true,\n      expandField: \"expanded\",\n      hideDetailBand: true,\n      isActionRequired: this.props.isActionRequired !== undefined ? this.props.isActionRequired : true,\n      deleteParam: this.props.deleteParam || \"\",\n      fetchRecord: this.props.fetchRecord || \"\",\n      editParam: { ...this.props.editParam,\n        modalName: \"openCommentModal\"\n      } || \"\",\n      deleteRecord: this.props.deleteComment || \"\",\n      selectedId: this.props.selectedId,\n      isToolBarRequired: false,\n      scrollable: \"scrollable\",\n      gridHeight: \"550px\",\n      methodUrl: this.props.methodUrl,\n      jsonField: \"jsondata\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }), this.props.Login.openCommentModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: this.props.Login.screenName,\n      closeModal: this.handleClose,\n      show: this.props.Login.openCommentModal,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(AddComment, {\n        selectedRecord: this.state.selectedRecord,\n        jsonField: \"jsondata\",\n        SampleTestComments: this.props.Login.sampleTestComments,\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        isTestComment: this.props.isTestComment,\n        maxSize: 20,\n        maxFiles: 3,\n        operation: this.props.Login.operation,\n        selectedListName: this.props.selectedListName,\n        displayName: this.props.displayName,\n        masterList: this.props.masterList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 33\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  updateStore,\n  viewAttachment,\n  validateEsignCredential,\n  crudMaster,\n  getCommentsCombo,\n  deleteComment\n})(injectIntl(Comments));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/attachmentscomments/comments/Comments.jsx"],"names":["process","React","FormattedMessage","injectIntl","DEFAULT_RETURN","DataGrid","transactionStatus","SlideOutModal","Esign","AddComment","updateStore","viewAttachment","validateEsignCredential","crudMaster","getCommentsCombo","deleteComment","connect","faPlus","Nav","FontAwesomeIcon","mapStateToProps","state","Login","Comments","Component","constructor","props","onComboChange","comboData","comboName","selectedRecord","setState","onInputOnChange","event","target","type","name","checked","YES","NO","value","onSaveClick","saveType","formRef","handleClose","loadEsign","openCommentModal","operation","undefined","updateInfo","typeName","data","selectedParamId","validateEsign","inputParam","inputData","userInfo","sreason","password","screenData","validateEsignforApproval","render","extractedColumnList","screenName","jsonField","addFileId","controlMap","has","addName","get","ncontrolcode","mandatoryFields","isTestComment","userRoleControlRights","indexOf","ncontrolCode","modalName","masterList","masterAlertStatus","primaryKeyField","dataState","dataStateChange","isActionRequired","deleteParam","fetchRecord","editParam","selectedId","methodUrl","masterStatus","sampleTestComments","selectedListName","displayName","componentDidUpdate","previousProps"],"mappings":"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","sourcesContent":["import { process } from '@progress/kendo-data-query';\r\nimport React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport DataGrid from '../../../components/data-grid/data-grid.component';\r\nimport { transactionStatus } from '../../../components/Enumeration';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../../audittrail/Esign';\r\nimport AddComment from './AddComment';\r\nimport { updateStore, viewAttachment, validateEsignCredential, crudMaster, getCommentsCombo, deleteComment } from '../../../actions'\r\nimport { connect } from 'react-redux';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { Nav } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass Comments extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedRecord: {}\r\n        }\r\n    }\r\n    render() {\r\n        const extractedColumnList = []\r\n        if(this.props.Login.screenName===\"IDS_SAMPLECOMMENTS\"){\r\n             extractedColumnList = [\r\n                 {\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\",\"width\":\"100px\"},\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"200px\",jsonField:true },\r\n                // { \"idsName\": \"IDS_SAMPLETESTCOMMENTS\", \"dataField\": \"ssampletestcommentname\", \"width\": \"400px\" },\r\n                { \"idsName\": \"IDS_SCREENNAME\", \"dataField\": \"sdisplayname\", \"width\": \"150px\" },\r\n                { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"200px\" },\r\n            ];\r\n        }else{\r\n             extractedColumnList = [\r\n                // {\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\",\"width\":\"100px\"},\r\n                // {\"idsName\":\"IDS_SAMPLEARNO\",\"dataField\":\"ssamplearno\",\"width\":\"100px\"},\r\n                { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\",jsonField:true },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"200px\",jsonField:true },\r\n                // { \"idsName\": \"IDS_SAMPLETESTCOMMENTS\", \"dataField\": \"ssampletestcommentname\", \"width\": \"400px\" },\r\n                { \"idsName\": \"IDS_SCREENNAME\", \"dataField\": \"sdisplayname\", \"width\": \"150px\" },\r\n                { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"200px\" },\r\n            ];\r\n        }\r\n       \r\n        let addFileId = this.props.controlMap.has(this.props.addName) && this.props.controlMap.get(this.props.addName).ncontrolcode;\r\n        let mandatoryFields = [];\r\n        if (this.props.isTestComment) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_SAMPLETESTCOMMENTS\", \"dataField\": \"nsamplecommentscode\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENT\", \"dataField\": \"scomments\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ];\r\n        } else {\r\n\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_COMMENT\", \"dataField\": \"scomments\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            ];\r\n\r\n        }\r\n        return (\r\n\r\n            <>\r\n                <div className=\"actions-stripe border-bottom\">\r\n                    <div className=\"d-flex justify-content-end\">\r\n                        <Nav.Link name={`add_${this.props.Login.screenName}_comment`} className=\"add-txt-btn\" hidden={this.props.userRoleControlRights.indexOf(addFileId) === -1}\r\n                            onClick={() => this.props.getCommentsCombo({ userInfo: this.props.Login.userInfo, operation: \"create\", ncontrolCode: addFileId, screenName: this.props.screenName, modalName: \"openCommentModal\", masterList: this.props.masterList, masterAlertStatus: this.props.masterAlertStatus })}>\r\n                            <FontAwesomeIcon icon={faPlus} /> { }\r\n                            <FormattedMessage id=\"IDS_COMMENT\" defaultMessage=\" Comment\" />\r\n                        </Nav.Link>\r\n                    </div>\r\n                </div>\r\n                <DataGrid\r\n                    primaryKeyField={this.props.primaryKeyField}\r\n                    data={this.props.Comments}\r\n                    dataResult={process(this.props.Comments || [], this.props.dataState)}\r\n                    dataState={this.props.dataState}\r\n                    dataStateChange={this.props.dataStateChange}\r\n                    extractedColumnList={extractedColumnList}\r\n                    userInfo={this.props.userInfo}\r\n                    controlMap={this.props.controlMap}\r\n                    userRoleControlRights={this.props.userRoleControlRights}\r\n                    inputParam={this.props.inputParam}\r\n                    pageable={true}\r\n                    expandField=\"expanded\"\r\n                    hideDetailBand={true}\r\n                    isActionRequired={this.props.isActionRequired !== undefined ? this.props.isActionRequired : true}\r\n                    deleteParam={this.props.deleteParam || \"\"}\r\n                    fetchRecord={this.props.fetchRecord || \"\"}\r\n                    editParam={{ ...this.props.editParam, modalName: \"openCommentModal\" } || \"\"}\r\n                    deleteRecord={this.props.deleteComment || \"\"}\r\n                    selectedId={this.props.selectedId}\r\n                    isToolBarRequired={false}\r\n                    scrollable={\"scrollable\"}\r\n                    gridHeight={\"550px\"}\r\n                    methodUrl={this.props.methodUrl}\r\n                    jsonField = {\"jsondata\"}\r\n                />\r\n                {\r\n                    this.props.Login.openCommentModal ?\r\n                        <SlideOutModal\r\n                            onSaveClick={this.onSaveClick}\r\n                            operation={this.props.Login.operation}\r\n                            screenName={this.props.Login.screenName}\r\n                            closeModal={this.handleClose}\r\n                            show={this.props.Login.openCommentModal}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            esign={this.props.Login.loadEsign}\r\n                            validateEsign={this.validateEsign}\r\n                            masterStatus={this.props.Login.masterStatus}\r\n                            updateStore={this.props.updateStore}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                            mandatoryFields={mandatoryFields}\r\n                            addComponent={this.props.Login.loadEsign ?\r\n                                <Esign\r\n                                    operation={this.props.Login.operation}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                />\r\n                                :\r\n                                <AddComment\r\n                                    selectedRecord={this.state.selectedRecord}\r\n                                    jsonField = {\"jsondata\"}\r\n                                    SampleTestComments={this.props.Login.sampleTestComments}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    isTestComment={this.props.isTestComment}\r\n                                    maxSize={20}\r\n                                    maxFiles={3}\r\n                                    operation={this.props.Login.operation}\r\n                                    selectedListName={this.props.selectedListName}\r\n                                    displayName={this.props.displayName}\r\n                                    masterList={this.props.masterList}\r\n                                />\r\n                            }\r\n                        />\r\n                        : \"\"\r\n                }\r\n            </>\r\n        )\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n    onComboChange = (comboData, comboName) => {\r\n        if (comboData) {\r\n            let selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[comboName] = comboData\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n    onInputOnChange = (event) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onSaveClick = (saveType, formRef) => {\r\n        // const masterData = this.props.Login.masterData;\r\n        // let inputData = {}\r\n        // let inputParam = {}\r\n        // inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        // if(this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\r\n        //     // let saveParam={userInfo:this.props.Login.userInfo,\r\n        //     //     selectedRecord:this.state.selectedRecord,\r\n        //     //     masterData:this.props.Login.masterData,\r\n        //     //     saveType, formRef,\r\n        //     //     operation:this.props.Login.operation\r\n        //     // }\r\n        //     // inputParam = onSaveSampleAttachment(saveParam);\r\n        // }else if(this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\r\n        //     let saveParam={\r\n        //         userInfo:this.props.Login.userInfo,\r\n        //         isTestComment:this.props.isTestComment,\r\n        //         selectedRecord:this.state.selectedRecord,\r\n        //         masterData:this.props.Login.masterData,\r\n        //         saveType, formRef,\r\n        //         operation:this.props.Login.operation,\r\n        //         selectedMaster:this.props.selectedMaster\r\n        //     }\r\n        //     inputParam = onSaveTestComments(saveParam);\r\n        // }\r\n        // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n        //     const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: {\r\n        //             loadEsign: true,\r\n        //             screenData: { inputParam, masterData },\r\n        //             operation: this.props.Login.operation,\r\n        //             screenName: this.props.Login.screenName,\r\n        //         }\r\n        //     }\r\n        //     this.props.updateStore(updateInfo);\r\n        // }\r\n        // else {\r\n        //     this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\r\n        // }\r\n        this.props.onSaveClick(saveType, formRef, this.state.selectedRecord)\r\n    }\r\n    handleClose = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openCommentModal = this.props.Login.openCommentModal\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let operation = this.props.Login.operation;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openCommentModal = false;\r\n                selectedRecord = {};\r\n                operation = undefined;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openCommentModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openCommentModal, loadEsign, selectedRecord, selectedParamId: null, operation }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        if (this.props.Login.operation === 'dynamic') {\r\n            this.props.validateEsignforApproval(inputParam, \"openChildModal\");\r\n        } else {\r\n            this.props.validateEsignCredential(inputParam, \"openCommentModal\");\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { updateStore, viewAttachment, validateEsignCredential, crudMaster, getCommentsCombo, deleteComment })(injectIntl(Comments));"]},"metadata":{},"sourceType":"module"}