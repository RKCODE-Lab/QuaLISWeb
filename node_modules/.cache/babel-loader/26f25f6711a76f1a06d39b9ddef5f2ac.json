{"ast":null,"code":"import { intl } from '../../components/App';\nimport { convertDateTimetoString, convertDateTimetoStringDBFormat, formatInputDate, rearrangeDateFormat } from '../../components/CommonScript';\nimport { transactionStatus } from '../../components/Enumeration';\nexport function fnCheckBatchComponentMandatory(Components) {\n  // Components.map(component => {\n  for (var i = 0; i < Components.length; i++) {\n    if (Components[i].smanuflotno.length <= 0) {\n      // alert('IDS_ENTERMANUFLOTNOFOR ' + Components[i].scomponentname);\n      return intl.formatMessage({\n        id: \"IDS_ENTERMANUFLOTNOFOR\"\n      }) + Components[i].scomponentname;\n    } else if (Components[i].nnoofcontainer && Components[i].nnoofcontainer.length <= 0) {\n      // alert('IDS_ENTERNOOFCONTFOR' + Components[i].scomponentname);\n      return intl.formatMessage({\n        id: \"IDS_ENTERNOOFCONTFOR\"\n      }) + Components[i].scomponentname; // return ('IDS_ENTERNOOFCONTFOR' + Components[i].scomponentname);\n    } else if (Components[i].dreceiveddate === null) {\n      // alert('IDS_ENTERMANUFLOTNOFOR' + Components[i].scomponentname);\n      return intl.formatMessage({\n        id: \"IDS_ENTERMANUFLOTNOFOR\"\n      }) + Components[i].scomponentname; // return ('IDS_ENTERMANUFLOTNOFOR' + Components[i].scomponentname);\n    }\n  }\n\n  return true;\n}\nexport function fnCheckBatchProtocolComponentMandatory(Components) {\n  //Components.map(component => {\n  for (var i = 0; i < Components.length; i++) {\n    if (Components[i].smanuflotno.length <= 0) {\n      // alert('IDS_ENTERMANUFLOTNOFOR ' + {} + component.scomponentname);\n      //return (intl.formatMessage({ id: 'IDS_ENTERMANUFLOTNOFOR ' }) + {} + Components[i].scomponentname);\n      return intl.formatMessage({\n        id: \"IDS_ENTERMANUFLOTNOFOR\"\n      }) + Components[i].scomponentname;\n    } else if (Components[i].dreceiveddate === null) {\n      // alert('IDS_ENTERMANUFLOTNOFOR' + component.scomponentname);\n      return intl.formatMessage({\n        id: \"IDS_ENTERMANUFLOTNOFOR\"\n      }) + Components[i].scomponentname;\n    } //return null;\n    //});\n\n  }\n\n  return true;\n}\nexport function checkDuplicateComponentandManufLot(Components) {\n  let copiedArrays = [...Components];\n  let DuplicateComponent = [];\n  let bReturnFlag = true;\n  Components.map(component => {\n    copiedArrays.forEach(componentArray => {\n      component.slno !== componentArray.slno && component.smanuflotno === componentArray.smanuflotno && component.scomponentname === componentArray.scomponentname && DuplicateComponent.push(component);\n    });\n    return null;\n  });\n\n  if (DuplicateComponent.length > 0) {\n    let smanuflotno = DuplicateComponent[0].smanuflotno;\n    let scomponentname = DuplicateComponent[0].scomponentname; // Alert.show(resourceManager.getString('LocalizedStrings', 'IDS_DUPLICATEMANFNO') + \" \" + smanuflotno + \" for \" + scomponentname, resourceManager.getString('LocalizedStrings', 'IDS_WARNING'));\n\n    bReturnFlag = intl.formatMessage({\n      id: 'IDS_DUPLICATEMANFNO'\n    }) + \" \" + smanuflotno + \" \" + intl.formatMessage({\n      id: 'IDS_FOR'\n    }) + \" \" + scomponentname;\n  }\n\n  return bReturnFlag;\n}\nexport function TestListManipulation(Components, Test) {\n  let ArrayList = [];\n  Components.map(component => {\n    return ArrayList = Test && Test[component.slno] ? [...ArrayList, ...Test[component.slno]] : ArrayList;\n  }); //    ArrayList.map(item=>{\n  //        item['jsondata']={}\n  //       // if(item==='nsectioncode'||item==='nmethodcode'){\n  //         item['jsondata']['nsectioncode']={value:item['nsectioncode'],label:item['ssectionname']}\n  //         item['jsondata']['nmethodcode']={value:item['nmethodcode'],label:item['smethodname']}\n  //         item['jsondata']['ninstrumentcatcode']={value:item['ninstrumentcatcode'],label:item['sinstrumentcatname']}\n  //         item['jsondata']['ntestcode']=item['ntestcode']\n  //         item['jsondata']['ncost']=item['ncost']\n  //       // }\n  //    })\n\n  return ArrayList ? ArrayList : [];\n}\nexport function getRegistration(masterData, selectedRecord, selectedSpec, templateList, userInfo, defaulttimezone, operation) {\n  let sampleRegistration = {};\n  let dateList = [];\n  sampleRegistration[\"nsampletypecode\"] = masterData.RealSampleTypeValue.nsampletypecode;\n  sampleRegistration[\"nregtypecode\"] = masterData.RealRegTypeValue.nregtypecode;\n  sampleRegistration[\"nregsubtypecode\"] = masterData.RealRegSubTypeValue.nregsubtypecode;\n  sampleRegistration[\"nproductcatcode\"] = selectedRecord['Product Category'] ? selectedRecord['Product Category'].value : -1;\n  sampleRegistration[\"nproductcode\"] = selectedRecord['Product'] ? selectedRecord['Product'].value : -1;\n  sampleRegistration[\"ntemplatemanipulationcode\"] = selectedSpec.ntemplatemanipulationcode;\n  sampleRegistration[\"nallottedspeccode\"] = selectedSpec.nallottedspeccode.value;\n  sampleRegistration[\"jsondata\"] = {};\n  templateList && templateList.map(row => {\n    row.children.map(column => {\n      column.children.map(component => {\n        if (component.hasOwnProperty(\"children\")) {\n          let componentrowlabel = '';\n          let componentrowvalue = '';\n          component.children.map(componentrow => {\n            if (componentrow.inputtype === \"combo\") {\n              sampleRegistration[\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ? {\n                value: selectedRecord[componentrow.label].value,\n                label: selectedRecord[componentrow.label].label\n              } : -1;\n\n              if (componentrow.mandatory || selectedRecord[componentrow.label]) {\n                componentrowlabel = componentrowlabel + '&' + componentrow.label;\n                componentrowvalue = componentrowvalue + ' ' + selectedRecord[componentrow.label].label;\n              }\n            } else if (componentrow.inputtype === \"date\") {\n              if (componentrow.mandatory) {\n                sampleRegistration[\"jsondata\"][componentrow.label] = typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\";\n              } else {\n                sampleRegistration[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\" : selectedRecord[componentrow.label] ? typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\" : \"\";\n              }\n\n              if (componentrow.timezone) {\n                sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ? {\n                  value: selectedRecord[`tz${componentrow.label}`].value,\n                  label: selectedRecord[`tz${componentrow.label}`].label\n                } : defaulttimezone ? defaulttimezone : -1;\n              }\n\n              dateList.push(componentrow.label);\n            } else {\n              sampleRegistration[\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\";\n\n              if (selectedRecord[componentrow.label]) {\n                componentrowlabel = componentrowlabel + '&' + componentrow.label;\n                componentrowvalue = componentrowvalue + ' ' + selectedRecord[componentrow.label];\n              }\n            }\n          });\n          sampleRegistration[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue;\n        } else {\n          if (component.inputtype === \"combo\") {\n            sampleRegistration[\"jsondata\"][component.label] = selectedRecord[component.label] ? {\n              value: selectedRecord[component.label].value,\n              label: selectedRecord[component.label].label\n            } : -1;\n          } else if (component.inputtype === \"date\") {\n            if (component.mandatory) {\n              sampleRegistration[\"jsondata\"][component.label] = typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ? selectedRecord[component.label] : \"\";\n            } else {\n              sampleRegistration[\"jsondata\"][component.label] = component.loadcurrentdate ? typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ? selectedRecord[component.label] : \"\" : selectedRecord[component.label] ? typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ? selectedRecord[component.label] : \"\" : \"\";\n            }\n\n            if (component.timezone) {\n              sampleRegistration[\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ? {\n                value: selectedRecord[`tz${component.label}`].value,\n                label: selectedRecord[`tz${component.label}`].label\n              } : defaulttimezone ? defaulttimezone : -1;\n            }\n\n            dateList.push(component.label);\n          } else {\n            sampleRegistration[\"jsondata\"][component.label] = selectedRecord[component.label] ? selectedRecord[component.label] : \"\";\n          }\n        }\n      });\n    });\n  });\n  const param = {\n    sampleRegistration,\n    dateList\n  };\n  return param;\n} // export function getComponentListfromUnwantedAttr(Components) {\n//     Components.map(component => {\n//         // if (component.ncomponentcode !== null && typeof component.ncomponentcode === \"object\") {\n//         //     component.ncomponentcode = component.ncomponentcode.value;\n//         // }\n//         // component['jsondata']['ssubsamplename'] = component['ssubsamplename'] ? component['ssubsamplename'] : \"\"\n//         // component['jsondata']['ssampleqty'] = component['ssampleqty'] ? component['ssampleqty'] : \"\"\n//         // component['jsondata']['nunitcode'] = { value: component.nunitcode, label: component.sunitname };\n//         // component['jsondata']['scomments'] = component['scomments'] ? component['scomments'] : \"\"\n//         return component;\n//     });\n//     return Components;\n// }\n\nexport function getRegistrationSubSample(masterData, selectedRecord, selectedSpec, templateList, userInfo, defaulttimezone, operation) {\n  let sampleRegistration = {};\n  let dateList = [];\n  sampleRegistration[\"ntemplatemanipulationcode\"] = selectedSpec.ntemplatemanipulationcode;\n  sampleRegistration[\"nallottedspeccode\"] = selectedSpec.nallottedspeccode.value;\n  sampleRegistration[\"jsondata\"] = {};\n  templateList && templateList.map(row => {\n    row.children.map(column => {\n      column.children.map(component => {\n        if (component.hasOwnProperty(\"children\")) {\n          let componentrowlabel = '';\n          let componentrowvalue = '';\n          component.children.map(componentrow => {\n            if (componentrow.inputtype === \"combo\") {\n              sampleRegistration[\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ? {\n                value: selectedRecord[componentrow.label].value,\n                label: selectedRecord[componentrow.label].label\n              } : -1;\n\n              if (componentrow.mandatory || selectedRecord[componentrow.label]) {\n                componentrowlabel = componentrowlabel + '&' + componentrow.label;\n                componentrowvalue = componentrowvalue + ' ' + selectedRecord[componentrow.label].label;\n              }\n            } else if (componentrow.inputtype === \"date\") {\n              if (componentrow.mandatory) {\n                sampleRegistration[\"jsondata\"][componentrow.label] = typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\";\n              } else {\n                sampleRegistration[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\" : selectedRecord[componentrow.label] ? typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\" : \"\";\n              }\n\n              if (componentrow.timezone) {\n                sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ? {\n                  value: selectedRecord[`tz${componentrow.label}`].value,\n                  label: selectedRecord[`tz${componentrow.label}`].label\n                } : defaulttimezone ? defaulttimezone : -1;\n              }\n\n              dateList.push(componentrow.label);\n            } else {\n              sampleRegistration[\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\";\n\n              if (selectedRecord[componentrow.label]) {\n                componentrowlabel = componentrowlabel + '&' + componentrow.label;\n                componentrowvalue = componentrowvalue + ' ' + selectedRecord[componentrow.label];\n              }\n            }\n          });\n          sampleRegistration[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue;\n        } else {\n          if (component.inputtype === \"combo\") {\n            sampleRegistration[\"jsondata\"][component.label] = selectedRecord[component.label] ? {\n              value: selectedRecord[component.label].value,\n              label: selectedRecord[component.label].label\n            } : -1;\n          } else if (component.inputtype === \"date\") {\n            if (component.mandatory) {\n              sampleRegistration[\"jsondata\"][component.label] = typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ? selectedRecord[component.label] : \"\";\n            } else {\n              sampleRegistration[\"jsondata\"][component.label] = component.loadcurrentdate ? typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ? selectedRecord[component.label] : \"\" : selectedRecord[component.label] ? typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ? selectedRecord[component.label] : \"\" : \"\";\n            }\n\n            if (component.timezone) {\n              sampleRegistration[\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ? {\n                value: selectedRecord[`tz${component.label}`].value,\n                label: selectedRecord[`tz${component.label}`].label\n              } : defaulttimezone ? defaulttimezone : -1;\n            }\n\n            dateList.push(component.label);\n          } else {\n            sampleRegistration[\"jsondata\"][component.label] = selectedRecord[component.label] ? selectedRecord[component.label] : \"\";\n          }\n        }\n      });\n    });\n  });\n  const param = {\n    sampleRegistration,\n    dateList\n  };\n  return param;\n}\nexport function checkTestPresent(Test, Samples) {\n  const filterArray = Samples.filter(function (x) {\n    return !Test.some(function (y) {\n      return x[\"npreregno\"] === y[\"npreregno\"] && y[\"ntransactionstatus\"] !== transactionStatus.REJECT && y[\"ntransactionstatus\"] !== transactionStatus.CANCELLED;\n    });\n  });\n  return filterArray.length > 0 ? false : true;\n} // //added by perumalraj on 23/12/2020\n// //compare two arrays of object and filter the record which are not present in the second array and vice versa\n// export function filterStatusBasedOnTwoArrays(firstArray, secondArray, PrimaryKey) {\n//     const filterArray = firstArray.filter(function (x) {\n//         return secondArray.some(function (y) {\n//             return x[PrimaryKey] === y[PrimaryKey]\n//         })\n//     });\n//     return filterArray;\n// }\n\nexport function getRegistrationRoutine(selectedRecord) {\n  let sampleRegistrationRoutine = {};\n  sampleRegistrationRoutine[\"nclientcode\"] = selectedRecord.nclientcode ? selectedRecord.nclientcode.value : -1;\n  sampleRegistrationRoutine[\"nmanufcode\"] = selectedRecord.nmanufcode ? selectedRecord.nmanufcode.value : -1;\n  sampleRegistrationRoutine[\"nsuppliercode\"] = selectedRecord.nsuppliercode ? selectedRecord.nsuppliercode.value : -1;\n  sampleRegistrationRoutine[\"ssamplecondition\"] = selectedRecord.ssamplecondition ? selectedRecord.ssamplecondition : '';\n  sampleRegistrationRoutine[\"nstorageconditioncode\"] = selectedRecord.nstorageconditioncode ? selectedRecord.nstorageconditioncode.value : -1;\n  sampleRegistrationRoutine[\"dreceiveddate\"] = selectedRecord[\"dreceiveddate\"] ? formatInputDate(selectedRecord[\"dreceiveddate\"], false) : 'null';\n  sampleRegistrationRoutine[\"sreceiveddate\"] = selectedRecord[\"dreceiveddate\"] ? formatInputDate(selectedRecord[\"dreceiveddate\"], false) : 'null';\n  sampleRegistrationRoutine[\"ntzdreceivedate\"] = selectedRecord.ntzdreceivedate ? selectedRecord.ntzdreceivedate.value : -1;\n  sampleRegistrationRoutine[\"stzdreceivedate\"] = selectedRecord.stzdreceivedate ? selectedRecord.stzdreceivedate.label : -1;\n  sampleRegistrationRoutine[\"ncontainertypecode\"] = selectedRecord.ncontainertypecode ? selectedRecord.ncontainertypecode.value : -1;\n  sampleRegistrationRoutine[\"sourfile\"] = selectedRecord.sourfile ? selectedRecord.sourfile : '';\n  sampleRegistrationRoutine[\"sbatchno\"] = selectedRecord.sbatchno ? selectedRecord.sbatchno : '';\n  sampleRegistrationRoutine[\"slotno\"] = selectedRecord.slotno ? selectedRecord.slotno : '';\n  sampleRegistrationRoutine[\"ndisposition\"] = selectedRecord.ndisposition ? selectedRecord.ndisposition.value : -1;\n  sampleRegistrationRoutine[\"stotalqty\"] = selectedRecord.stotalqty ? selectedRecord.stotalqty : '0';\n  sampleRegistrationRoutine[\"ntotalunitcode\"] = selectedRecord.ntotalunitcode ? selectedRecord.ntotalunitcode.value : -1;\n  sampleRegistrationRoutine[\"npriority\"] = selectedRecord.npriority ? selectedRecord.npriority.value : -1;\n  sampleRegistrationRoutine[\"sdeadline\"] = selectedRecord.sdeadline ? selectedRecord.sdeadline : '0';\n  sampleRegistrationRoutine[\"nperiodconfigcode\"] = selectedRecord.nperiodconfigcode ? selectedRecord.nperiodconfigcode.value : -1;\n  sampleRegistrationRoutine[\"sremarks\"] = selectedRecord.sremarks ? selectedRecord.sremarks : null;\n  sampleRegistrationRoutine[\"sreportremarks\"] = selectedRecord.sreportremarks ? selectedRecord.sreportremarks : null;\n  sampleRegistrationRoutine[\"sdeviationcomments\"] = selectedRecord.sdeviationcomments ? selectedRecord.sdeviationcomments : null;\n  return sampleRegistrationRoutine;\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/registration/RegistrationValidation.jsx"],"names":["intl","convertDateTimetoString","convertDateTimetoStringDBFormat","formatInputDate","rearrangeDateFormat","transactionStatus","fnCheckBatchComponentMandatory","Components","i","length","smanuflotno","formatMessage","id","scomponentname","nnoofcontainer","dreceiveddate","fnCheckBatchProtocolComponentMandatory","checkDuplicateComponentandManufLot","copiedArrays","DuplicateComponent","bReturnFlag","map","component","forEach","componentArray","slno","push","TestListManipulation","Test","ArrayList","getRegistration","masterData","selectedRecord","selectedSpec","templateList","userInfo","defaulttimezone","operation","sampleRegistration","dateList","RealSampleTypeValue","nsampletypecode","RealRegTypeValue","nregtypecode","RealRegSubTypeValue","nregsubtypecode","value","ntemplatemanipulationcode","nallottedspeccode","row","children","column","hasOwnProperty","componentrowlabel","componentrowvalue","componentrow","inputtype","label","mandatory","Date","loadcurrentdate","timezone","substring","param","getRegistrationSubSample","checkTestPresent","Samples","filterArray","filter","x","some","y","REJECT","CANCELLED","getRegistrationRoutine","sampleRegistrationRoutine","nclientcode","nmanufcode","nsuppliercode","ssamplecondition","nstorageconditioncode","ntzdreceivedate","stzdreceivedate","ncontainertypecode","sourfile","sbatchno","slotno","ndisposition","stotalqty","ntotalunitcode","npriority","sdeadline","nperiodconfigcode","sremarks","sreportremarks","sdeviationcomments"],"mappings":"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","sourcesContent":["\r\nimport { intl } from '../../components/App';\r\nimport { convertDateTimetoString, convertDateTimetoStringDBFormat, formatInputDate, rearrangeDateFormat } from '../../components/CommonScript';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nexport function fnCheckBatchComponentMandatory(Components) {\r\n    // Components.map(component => {\r\n    for (var i = 0; i < Components.length; i++) {\r\n        if ((\r\n            Components[i].smanuflotno).length <= 0) {\r\n            // alert('IDS_ENTERMANUFLOTNOFOR ' + Components[i].scomponentname);\r\n            return (intl.formatMessage({ id: \"IDS_ENTERMANUFLOTNOFOR\" }) + Components[i].scomponentname);\r\n\r\n        } else if (Components[i].nnoofcontainer && (Components[i].nnoofcontainer).length <= 0) {\r\n            // alert('IDS_ENTERNOOFCONTFOR' + Components[i].scomponentname);\r\n            return (intl.formatMessage({ id: \"IDS_ENTERNOOFCONTFOR\" }) + Components[i].scomponentname);\r\n            // return ('IDS_ENTERNOOFCONTFOR' + Components[i].scomponentname);\r\n        } else if (Components[i].dreceiveddate === null) {\r\n            // alert('IDS_ENTERMANUFLOTNOFOR' + Components[i].scomponentname);\r\n            return (intl.formatMessage({ id: \"IDS_ENTERMANUFLOTNOFOR\" }) + Components[i].scomponentname);\r\n            // return ('IDS_ENTERMANUFLOTNOFOR' + Components[i].scomponentname);\r\n        }\r\n    }\r\n    return true;\r\n}\r\nexport function fnCheckBatchProtocolComponentMandatory(Components) {\r\n    //Components.map(component => {\r\n    for (var i = 0; i < Components.length; i++) {\r\n        if ((Components[i].smanuflotno).length <= 0) {\r\n            // alert('IDS_ENTERMANUFLOTNOFOR ' + {} + component.scomponentname);\r\n            //return (intl.formatMessage({ id: 'IDS_ENTERMANUFLOTNOFOR ' }) + {} + Components[i].scomponentname);\r\n            return (intl.formatMessage({ id: \"IDS_ENTERMANUFLOTNOFOR\" }) + Components[i].scomponentname);\r\n        } else if (Components[i].dreceiveddate === null) {\r\n            // alert('IDS_ENTERMANUFLOTNOFOR' + component.scomponentname);\r\n            return (intl.formatMessage({ id: \"IDS_ENTERMANUFLOTNOFOR\" }) + Components[i].scomponentname);\r\n        }\r\n        //return null;\r\n        //});\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function checkDuplicateComponentandManufLot(Components) {\r\n    let copiedArrays = [...Components];\r\n    let DuplicateComponent = [];\r\n    let bReturnFlag = true;\r\n    Components.map(component => {\r\n        copiedArrays.forEach(componentArray => {\r\n            (component.slno !== componentArray.slno && component.smanuflotno === componentArray.smanuflotno &&\r\n                component.scomponentname === componentArray.scomponentname) && DuplicateComponent.push(component);\r\n        })\r\n        return null;\r\n    });\r\n    if (DuplicateComponent.length > 0) {\r\n        let smanuflotno = DuplicateComponent[0].smanuflotno;\r\n        let scomponentname = DuplicateComponent[0].scomponentname;\r\n        // Alert.show(resourceManager.getString('LocalizedStrings', 'IDS_DUPLICATEMANFNO') + \" \" + smanuflotno + \" for \" + scomponentname, resourceManager.getString('LocalizedStrings', 'IDS_WARNING'));\r\n        bReturnFlag = intl.formatMessage({ id: 'IDS_DUPLICATEMANFNO' }) + \" \" + smanuflotno + \" \" + intl.formatMessage({ id: 'IDS_FOR' }) + \" \" + scomponentname;\r\n    }\r\n    return bReturnFlag;\r\n}\r\nexport function TestListManipulation(Components, Test) {\r\n    let ArrayList = [];\r\n    Components.map(component => {\r\n        return ArrayList = Test && Test[component.slno] ? [...ArrayList, ...Test[component.slno]] : ArrayList;\r\n    });\r\n\r\n    //    ArrayList.map(item=>{\r\n    //        item['jsondata']={}\r\n    //       // if(item==='nsectioncode'||item==='nmethodcode'){\r\n    //         item['jsondata']['nsectioncode']={value:item['nsectioncode'],label:item['ssectionname']}\r\n    //         item['jsondata']['nmethodcode']={value:item['nmethodcode'],label:item['smethodname']}\r\n    //         item['jsondata']['ninstrumentcatcode']={value:item['ninstrumentcatcode'],label:item['sinstrumentcatname']}\r\n    //         item['jsondata']['ntestcode']=item['ntestcode']\r\n    //         item['jsondata']['ncost']=item['ncost']\r\n    //       // }\r\n    //    })\r\n    return ArrayList ? ArrayList : [];\r\n}\r\n\r\n\r\nexport function getRegistration(masterData, selectedRecord, selectedSpec,\r\n    templateList, userInfo, defaulttimezone, operation) {\r\n    let sampleRegistration = {};\r\n    let dateList = []\r\n    sampleRegistration[\"nsampletypecode\"] = masterData.RealSampleTypeValue.nsampletypecode;\r\n    sampleRegistration[\"nregtypecode\"] = masterData.RealRegTypeValue.nregtypecode;\r\n    sampleRegistration[\"nregsubtypecode\"] = masterData.RealRegSubTypeValue.nregsubtypecode;\r\n    sampleRegistration[\"nproductcatcode\"] = selectedRecord['Product Category'] ? selectedRecord['Product Category'].value : -1;\r\n    sampleRegistration[\"nproductcode\"] = selectedRecord['Product'] ? selectedRecord['Product'].value : -1;\r\n    sampleRegistration[\"ntemplatemanipulationcode\"] = selectedSpec.ntemplatemanipulationcode;\r\n    sampleRegistration[\"nallottedspeccode\"] = selectedSpec.nallottedspeccode.value;\r\n    sampleRegistration[\"jsondata\"] = {}\r\n    templateList && templateList.map(row => {\r\n        row.children.map(column => {\r\n            column.children.map(component => {\r\n                if (component.hasOwnProperty(\"children\")) {\r\n                    let componentrowlabel = ''\r\n                    let componentrowvalue = ''\r\n                    component.children.map(componentrow => {\r\n\r\n                        if (componentrow.inputtype === \"combo\") {\r\n                            sampleRegistration[\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ?\r\n                                { value: selectedRecord[componentrow.label].value, label: selectedRecord[componentrow.label].label } : -1\r\n                            if (componentrow.mandatory || selectedRecord[componentrow.label]) {\r\n                                componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n                                componentrowvalue = componentrowvalue + ' ' + selectedRecord[componentrow.label].label\r\n                            }\r\n\r\n                        }\r\n                        else if (componentrow.inputtype === \"date\") {\r\n                            if (componentrow.mandatory) {\r\n                                sampleRegistration[\"jsondata\"][componentrow.label] = typeof selectedRecord[componentrow.label] === \"object\" ?\r\n                                    convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                        selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ?\r\n                                        selectedRecord[componentrow.label] : \"\";\r\n                            } else {\r\n                                sampleRegistration[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                    typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                        selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ?\r\n                                        selectedRecord[componentrow.label] : \"\" :\r\n                                    selectedRecord[componentrow.label] ? typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                        selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ?\r\n                                        selectedRecord[componentrow.label] : \"\" : \"\";\r\n                            }\r\n                            if (componentrow.timezone) {\r\n                                sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                                    { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                                    defaulttimezone ? defaulttimezone : -1\r\n                            }\r\n                            dateList.push(componentrow.label)\r\n                        }\r\n\r\n                        else {\r\n                            sampleRegistration[\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ?\r\n                                selectedRecord[componentrow.label] : \"\"\r\n                            if (selectedRecord[componentrow.label]) {\r\n                                componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n                                componentrowvalue = componentrowvalue + ' ' + selectedRecord[componentrow.label]\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                    sampleRegistration[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n                }\r\n                else {\r\n                    if (component.inputtype === \"combo\") {\r\n                        sampleRegistration[\"jsondata\"][component.label] = selectedRecord[component.label] ?\r\n                            { value: selectedRecord[component.label].value, label: selectedRecord[component.label].label } : -1\r\n                    }\r\n                    else if (component.inputtype === \"date\") {\r\n                        if (component.mandatory) {\r\n                            sampleRegistration[\"jsondata\"][component.label] = typeof selectedRecord[component.label] === \"object\" ?\r\n                                convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                    selectedRecord[component.label] : new Date(), userInfo) :\r\n                                selectedRecord[component.label] ?\r\n                                    selectedRecord[component.label] : \"\";\r\n                        } else {\r\n                            sampleRegistration[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                    selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ?\r\n                                    selectedRecord[component.label] : \"\" :\r\n                                selectedRecord[component.label] ? typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                    selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ?\r\n                                    selectedRecord[component.label] : \"\" : \"\";\r\n                        }\r\n                        if (component.timezone) {\r\n                            sampleRegistration[\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ?\r\n                                { value: selectedRecord[`tz${component.label}`].value, label: selectedRecord[`tz${component.label}`].label } :\r\n                                defaulttimezone ? defaulttimezone : -1\r\n                        }\r\n                        dateList.push(component.label)\r\n                    }\r\n                    else {\r\n                        sampleRegistration[\"jsondata\"][component.label] = selectedRecord[component.label] ?\r\n                            selectedRecord[component.label] : \"\"\r\n                    }\r\n                }\r\n\r\n            }\r\n            )\r\n        })\r\n    })\r\n    const param = { sampleRegistration, dateList }\r\n    return param;\r\n}\r\n// export function getComponentListfromUnwantedAttr(Components) {\r\n//     Components.map(component => {\r\n//         // if (component.ncomponentcode !== null && typeof component.ncomponentcode === \"object\") {\r\n//         //     component.ncomponentcode = component.ncomponentcode.value;\r\n//         // }\r\n\r\n//         // component['jsondata']['ssubsamplename'] = component['ssubsamplename'] ? component['ssubsamplename'] : \"\"\r\n//         // component['jsondata']['ssampleqty'] = component['ssampleqty'] ? component['ssampleqty'] : \"\"\r\n//         // component['jsondata']['nunitcode'] = { value: component.nunitcode, label: component.sunitname };\r\n//         // component['jsondata']['scomments'] = component['scomments'] ? component['scomments'] : \"\"\r\n\r\n\r\n//         return component;\r\n//     });\r\n//     return Components;\r\n// }\r\n\r\n\r\nexport function getRegistrationSubSample(masterData, selectedRecord, selectedSpec,\r\n    templateList, userInfo, defaulttimezone, operation) {\r\n    let sampleRegistration = {};\r\n    let dateList = []\r\n    sampleRegistration[\"ntemplatemanipulationcode\"] = selectedSpec.ntemplatemanipulationcode;\r\n    sampleRegistration[\"nallottedspeccode\"] = selectedSpec.nallottedspeccode.value;\r\n    sampleRegistration[\"jsondata\"] = {}\r\n    templateList && templateList.map(row => {\r\n        row.children.map(column => {\r\n            column.children.map(component => {\r\n                if (component.hasOwnProperty(\"children\")) {\r\n                    let componentrowlabel = ''\r\n                    let componentrowvalue = ''\r\n                    component.children.map(componentrow => {\r\n\r\n                        if (componentrow.inputtype === \"combo\") {\r\n                            sampleRegistration[\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ?\r\n                                { value: selectedRecord[componentrow.label].value, label: selectedRecord[componentrow.label].label } : -1\r\n                            if (componentrow.mandatory || selectedRecord[componentrow.label]) {\r\n                                componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n                                componentrowvalue = componentrowvalue + ' ' + selectedRecord[componentrow.label].label\r\n                            }\r\n\r\n                        }\r\n                        else if (componentrow.inputtype === \"date\") {\r\n                            if (componentrow.mandatory) {\r\n                                sampleRegistration[\"jsondata\"][componentrow.label] = typeof selectedRecord[componentrow.label] === \"object\" ?\r\n                                    convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                        selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ?\r\n                                        selectedRecord[componentrow.label] : \"\";\r\n                            } else {\r\n                                sampleRegistration[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                    typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                        selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ?\r\n                                        selectedRecord[componentrow.label] : \"\" :\r\n                                    selectedRecord[componentrow.label] ? typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                        selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ?\r\n                                        selectedRecord[componentrow.label] : \"\" : \"\";\r\n                            }\r\n                            if (componentrow.timezone) {\r\n                                sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                                    { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                                    defaulttimezone ? defaulttimezone : -1\r\n                            }\r\n                            dateList.push(componentrow.label)\r\n                        }\r\n\r\n                        else {\r\n                            sampleRegistration[\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ?\r\n                                selectedRecord[componentrow.label] : \"\"\r\n                            if (selectedRecord[componentrow.label]) {\r\n                                componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n                                componentrowvalue = componentrowvalue + ' ' + selectedRecord[componentrow.label]\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                    sampleRegistration[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n                }\r\n                else {\r\n                    if (component.inputtype === \"combo\") {\r\n                        sampleRegistration[\"jsondata\"][component.label] = selectedRecord[component.label] ?\r\n                            { value: selectedRecord[component.label].value, label: selectedRecord[component.label].label } : -1\r\n                    }\r\n                    else if (component.inputtype === \"date\") {\r\n                        if (component.mandatory) {\r\n                            sampleRegistration[\"jsondata\"][component.label] = typeof selectedRecord[component.label] === \"object\" ?\r\n                                convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                    selectedRecord[component.label] : new Date(), userInfo) :\r\n                                selectedRecord[component.label] ?\r\n                                    selectedRecord[component.label] : \"\";\r\n                        } else {\r\n                            sampleRegistration[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                    selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ?\r\n                                    selectedRecord[component.label] : \"\" :\r\n                                selectedRecord[component.label] ? typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                    selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ?\r\n                                    selectedRecord[component.label] : \"\" : \"\";\r\n                        }\r\n                        if (component.timezone) {\r\n                            sampleRegistration[\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ?\r\n                                { value: selectedRecord[`tz${component.label}`].value, label: selectedRecord[`tz${component.label}`].label } :\r\n                                defaulttimezone ? defaulttimezone : -1\r\n                        }\r\n                        dateList.push(component.label)\r\n                    }\r\n                    else {\r\n                        sampleRegistration[\"jsondata\"][component.label] = selectedRecord[component.label] ?\r\n                            selectedRecord[component.label] : \"\"\r\n                    }\r\n                }\r\n\r\n            }\r\n            )\r\n        })\r\n    })\r\n    const param = { sampleRegistration, dateList }\r\n    return param;\r\n}\r\nexport function checkTestPresent(Test, Samples) {\r\n\r\n    const filterArray = Samples.filter(function (x) {\r\n        return !Test.some(function (y) {\r\n            return x[\"npreregno\"] === y[\"npreregno\"] && (y[\"ntransactionstatus\"] !== transactionStatus.REJECT && y[\"ntransactionstatus\"] !== transactionStatus.CANCELLED)\r\n        });\r\n    });\r\n    return filterArray.length > 0 ? false : true\r\n}\r\n\r\n// //added by perumalraj on 23/12/2020\r\n// //compare two arrays of object and filter the record which are not present in the second array and vice versa\r\n// export function filterStatusBasedOnTwoArrays(firstArray, secondArray, PrimaryKey) {\r\n\r\n//     const filterArray = firstArray.filter(function (x) {\r\n//         return secondArray.some(function (y) {\r\n//             return x[PrimaryKey] === y[PrimaryKey]\r\n//         })\r\n//     });\r\n//     return filterArray;\r\n// }\r\n\r\nexport function getRegistrationRoutine(selectedRecord) {\r\n\r\n    let sampleRegistrationRoutine = {};\r\n    sampleRegistrationRoutine[\"nclientcode\"] = selectedRecord.nclientcode ? selectedRecord.nclientcode.value : -1;\r\n    sampleRegistrationRoutine[\"nmanufcode\"] = selectedRecord.nmanufcode ? selectedRecord.nmanufcode.value : -1;\r\n    sampleRegistrationRoutine[\"nsuppliercode\"] = selectedRecord.nsuppliercode ? selectedRecord.nsuppliercode.value : -1;\r\n    sampleRegistrationRoutine[\"ssamplecondition\"] = selectedRecord.ssamplecondition ? selectedRecord.ssamplecondition : '';\r\n    sampleRegistrationRoutine[\"nstorageconditioncode\"] = selectedRecord.nstorageconditioncode ? selectedRecord.nstorageconditioncode.value : -1;\r\n    sampleRegistrationRoutine[\"dreceiveddate\"] = selectedRecord[\"dreceiveddate\"] ? formatInputDate(selectedRecord[\"dreceiveddate\"], false) : 'null';\r\n    sampleRegistrationRoutine[\"sreceiveddate\"] = selectedRecord[\"dreceiveddate\"] ? formatInputDate(selectedRecord[\"dreceiveddate\"], false) : 'null';\r\n    sampleRegistrationRoutine[\"ntzdreceivedate\"] = selectedRecord.ntzdreceivedate ? selectedRecord.ntzdreceivedate.value : -1;\r\n    sampleRegistrationRoutine[\"stzdreceivedate\"] = selectedRecord.stzdreceivedate ? selectedRecord.stzdreceivedate.label : -1;\r\n    sampleRegistrationRoutine[\"ncontainertypecode\"] = selectedRecord.ncontainertypecode ? selectedRecord.ncontainertypecode.value : -1;\r\n    sampleRegistrationRoutine[\"sourfile\"] = selectedRecord.sourfile ? selectedRecord.sourfile : '';\r\n    sampleRegistrationRoutine[\"sbatchno\"] = selectedRecord.sbatchno ? selectedRecord.sbatchno : '';\r\n    sampleRegistrationRoutine[\"slotno\"] = selectedRecord.slotno ? selectedRecord.slotno : '';\r\n    sampleRegistrationRoutine[\"ndisposition\"] = selectedRecord.ndisposition ? selectedRecord.ndisposition.value : -1;\r\n    sampleRegistrationRoutine[\"stotalqty\"] = selectedRecord.stotalqty ? selectedRecord.stotalqty : '0';\r\n    sampleRegistrationRoutine[\"ntotalunitcode\"] = selectedRecord.ntotalunitcode ? selectedRecord.ntotalunitcode.value : -1;\r\n    sampleRegistrationRoutine[\"npriority\"] = selectedRecord.npriority ? selectedRecord.npriority.value : -1;\r\n    sampleRegistrationRoutine[\"sdeadline\"] = selectedRecord.sdeadline ? selectedRecord.sdeadline : '0';\r\n    sampleRegistrationRoutine[\"nperiodconfigcode\"] = selectedRecord.nperiodconfigcode ? selectedRecord.nperiodconfigcode.value : -1;\r\n    sampleRegistrationRoutine[\"sremarks\"] = selectedRecord.sremarks ? selectedRecord.sremarks : null;\r\n    sampleRegistrationRoutine[\"sreportremarks\"] = selectedRecord.sreportremarks ? selectedRecord.sreportremarks : null;\r\n    sampleRegistrationRoutine[\"sdeviationcomments\"] = selectedRecord.sdeviationcomments ? selectedRecord.sdeviationcomments : null;\r\n\r\n    return sampleRegistrationRoutine;\r\n}"]},"metadata":{},"sourceType":"module"}