{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\competencemanagement\\\\trainingupdate\\\\TrainingUpdateChildTab.jsx\";\nimport React, { version } from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { process } from '@progress/kendo-data-query';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport { constructOptionList, onDropAttachFileList, deleteAttachmentDropZone, showEsign, create_UUID, Lims_JSON_stringify } from '../../../components/CommonScript';\nimport CustomTabs from '../../../components/custom-tabs/custom-tabs.component';\nimport { connect } from 'react-redux';\nimport TrainingParticipantsTab from './TrainingParticipantsTab';\nimport TrainingDocTab from './TrainingDocTab';\nimport AddTrainingDocFile from './AddTrainingDocFile';\nimport AddTraineeDocFile from './AddTraineeDocFile';\nimport Esign from '../../audittrail/Esign';\nimport { attachmentType, FORMULAFIELDTYPE, transactionStatus } from '../../../components/Enumeration';\nimport AddParticipantsStatus from '../trainingcertificate/AddParticipantsStatus';\nimport { addtraineedocfile, viewAttachment } from '../../../actions';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass TrainingUpdateChildTab extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.TrainingDocumentDataStateChange = event => {\n      this.setState({\n        dataState: event.dataState\n      });\n    };\n\n    this.ParticipantsDataStateChange = event => {\n      this.setState({\n        dataStateParticipants: event.dataState\n      });\n    };\n\n    this.handleChange = (value, valueParam, isSection) => {\n      if (value !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[valueParam] = value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.viewTraineeDocumentFile = filedata => {\n      const inputParam = {\n        inputData: {\n          traineefile: filedata,\n          userinfo: this.props.userInfo\n        },\n        classUrl: \"trainingupdate\",\n        operation: \"view\",\n        methodUrl: \"AttachedTraineeFile\",\n        screenName: \"IDS_TRAINEEDOCUMENT\"\n      };\n      this.props.viewAttachment(inputParam);\n    };\n\n    this.viewTrainingDocumentFile = filedata => {\n      const inputParam = {\n        inputData: {\n          trainingfile: filedata,\n          userinfo: this.props.userInfo\n        },\n        classUrl: \"trainingupdate\",\n        operation: \"view\",\n        methodUrl: \"AttachedTrainingFile\",\n        screenName: \"IDS_TRAININGDOCUMENT\"\n      };\n      this.props.viewAttachment(inputParam);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_PARTICIPANTS\", /*#__PURE__*/React.createElement(TrainingParticipantsTab, {\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        screenName: \" TrainieeDocuments\",\n        updateStore: this.props.updateStore,\n        primaryKeyField: \"nparticipantcode\",\n        masterData: this.props.masterData,\n        primaryList: \"Participants\",\n        dataResult: process(this.props.Login.masterData[(\"Participants\", \"TraineeDocuments\")] || [], this.state.dataStateParticipants),\n        dataState: this.props.screenName === undefined || this.props.screenName === \"Participants\" ? this.state.dataStateParticipants : {\n          skip: 0\n        },\n        dataStateChange: event => this.setState({\n          dataStateParticipants: event.data\n        }),\n        columnList: this.participantsColumnList,\n        methodUrl: \"TrainingParticipants\",\n        fetchParticipantsRecordByID: this.fetchParticipantsRecordByID,\n        deleteRecord: this.deleteRecord,\n        getAvailableData: this.props.getAvailableData,\n        addtraineedoc: this.addtraineedoc,\n        selectedRecord: this.state.selectedRecord || {},\n        getTrainingParticipantsAttended: this.props.getTrainingParticipantsAttended,\n        getTrainingParticipantsCompetent: this.props.getTrainingParticipantsCompetent,\n        getTrainingParticipantsCertified: this.props.getTrainingParticipantsCertified,\n        viewTraineeDocumentFile: this.viewTraineeDocumentFile,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 40\n        }\n      }));\n      tabMap.set(\"IDS_TRAININGDOCUMENTS\", /*#__PURE__*/React.createElement(TrainingDocTab, {\n        screenName: \"TrainingDocuments\",\n        onInputOnChange: this.onInputOnChange,\n        controlMap: this.props.controlMap,\n        updateStore: this.props.updateStore,\n        userRoleControlRights: this.props.userRoleControlRights,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        deleteRecord: this.deleteRecord,\n        TrainingDocument: this.props.masterData.TrainingDocument || [],\n        getAvailableData: this.props.getAvailableData,\n        settings: this.props.settings,\n        selectedRecord: this.state.selectedRecord || {},\n        viewTrainingDocumentFile: this.viewTrainingDocumentFile,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 45\n        }\n      }));\n      return tabMap;\n    };\n\n    this.onInputOnChange = (event, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = optional;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.addtraineedoc = ncontrolcode => {\n      let openChildModal = this.props.Login.openChildModal;\n      let operation = \"create\";\n      let screenName = this.props.Login.screenName;\n      screenName = \"IDS_TRAINEEDOCUMENTS\";\n      openChildModal = true;\n      const selectedRecord = this.props.selectedRecord;\n      const updateInfo = {\n        userInfo: this.props.Login.userInfo,\n        operation,\n        selectedRecord,\n        ncontrolcode,\n        screenName\n      };\n      this.props.addtraineedocfile(updateInfo); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         openModal: true,\n      //         operation: \"create\",\n      //         selectedRecord: {},\n      //         ncontrolcode: ncontrolcode,\n      //         screenName : \"IDS_TRAINEEDOCUMENTS\" \n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openChildModal = this.props.Login.openChildModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || //this.props.Login.operation === \"certify\" ||\n        //this.props.Login.operation === \"attend\" ||\n        //this.props.Login.operation === \"competent\" ||\n        this.props.Login.operation === \"complete\") {\n          loadEsign = false; // if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"complete\") {\n\n          openChildModal = false;\n          selectedRecord = {}; //}                 \n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onDropTrainingDoc = (attachedFiles, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.onDropTrainieeDoc = (attachedFiles, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openChildModal\");\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\"\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      const methodUrl = deleteParam.methodUrl;\n      const selected = deleteParam.selectedRecord;\n      let dataState = undefined;\n      const inputParam = {\n        inputData: {\n          [methodUrl.toLowerCase()]: selected,\n          userinfo: this.props.userInfo\n        },\n        classUrl: \"trainingupdate\",\n        operation: deleteParam.operation,\n        methodUrl: methodUrl,\n        dataState\n      };\n      const masterData = this.props.masterData;\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openChildModal: true,\n            operation: deleteParam.operation,\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputParam = {};\n      let defaultInput = {};\n      let isValidRequest = true;\n      let openModal = \"openChildModal\";\n\n      if (this.props.screenName === \"IDS_TRAININGDOCUMENTS\") {\n        inputParam = this.onSaveTrainingDoc(saveType, formRef);\n      }\n\n      if (this.props.screenName === \"IDS_TRAINEEDOCUMENTS\") {\n        inputParam = this.onSaveTrainieeDoc(saveType, formRef);\n      }\n\n      if (this.props.screenName === \"IDS_ATTENDPARTICIPANTSDETAILS\") {\n        inputParam = this.onSaveAttended(saveType, formRef);\n      }\n\n      if (this.props.screenName === \"IDS_CERTIFYPARTICIPANTSDETAILS\") {\n        inputParam = this.onSaveCertified(saveType, formRef);\n      }\n\n      if (this.props.screenName === \"IDS_COMPETENTPARTICIPANTSDETAILS\") {\n        inputParam = this.onSaveCompetent(saveType, formRef);\n      }\n\n      if (isValidRequest) {\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, openModal, defaultInput);\n        }\n      }\n    };\n\n    this.onSaveAttended = (saveType, formRef) => {\n      let inputData = [];\n      let trainingupdate = [];\n      let dataState = undefined;\n      let postParam = {\n        inputListName: \"TechniqueList\",\n        selectedObject: \"SelectedTrainingUpdate\",\n        primaryKeyField: \"ntrainingcode\"\n      };\n      inputData[\"userinfo\"] = this.props.userInfo;\n      this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\n        trainingupdate.push({\n          ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\n          // nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\n          nparticipantcode: participants.item.nparticipantcode,\n          ntransactionstatus: transactionStatus.ATTENDED,\n          ncertifiedstatus: transactionStatus.NO,\n          ncompetencystatus: transactionStatus.NO,\n          nusercode: participants.item.nusercode,\n          ntechniquecode: this.props.masterData.selectedTechinque.ntechniquecode\n        });\n      });\n      inputData[\"trainingupdate\"] = trainingupdate;\n      const inputParam = {\n        classUrl: 'trainingupdate',\n        methodUrl: \"TrainingParticipants\",\n        inputData: inputData,\n        operation: \"attend\",\n        saveType,\n        formRef,\n        dataState,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onSaveCertified = (saveType, formRef) => {\n      let inputData = [];\n      let trainingupdate = [];\n      let dataState = undefined;\n      let postParam = {\n        inputListName: \"TechniqueList\",\n        selectedObject: \"SelectedTrainingUpdate\",\n        primaryKeyField: \"ntrainingcode\"\n      };\n      inputData[\"userinfo\"] = this.props.userInfo;\n      this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\n        trainingupdate.push({\n          ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\n          // nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\n          nparticipantcode: participants.item.nparticipantcode,\n          ntransactionstatus: transactionStatus.ATTENDED,\n          ncertifiedstatus: transactionStatus.YES,\n          ncompetencystatus: transactionStatus.NO,\n          nusercode: participants.item.nusercode,\n          ntechniquecode: this.props.masterData.selectedTechinque.ntechniquecode\n        });\n      });\n      inputData[\"trainingupdate\"] = trainingupdate;\n      const inputParam = {\n        classUrl: 'trainingupdate',\n        methodUrl: \"TrainingParticipants\",\n        inputData: inputData,\n        operation: \"certify\",\n        saveType,\n        formRef,\n        dataState,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onSaveCompetent = (saveType, formRef) => {\n      let inputData = [];\n      let trainingupdate = [];\n      let dataState = undefined;\n      let postParam = {\n        inputListName: \"TechniqueList\",\n        selectedObject: \"SelectedTrainingUpdate\",\n        primaryKeyField: \"ntrainingcode\"\n      };\n      inputData[\"userinfo\"] = this.props.userInfo;\n      this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\n        trainingupdate.push({\n          ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\n          // nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\n          nparticipantcode: participants.item.nparticipantcode,\n          ntransactionstatus: transactionStatus.ATTENDED,\n          ncertifiedstatus: transactionStatus.YES,\n          ncompetencystatus: transactionStatus.YES,\n          nusercode: participants.item.nusercode,\n          ntechniquecode: this.props.masterData.selectedTechinque.ntechniquecode\n        });\n      });\n      inputData[\"trainingupdate\"] = trainingupdate;\n      const inputParam = {\n        classUrl: 'trainingupdate',\n        methodUrl: \"TrainingParticipants\",\n        inputData: inputData,\n        operation: \"competent\",\n        saveType,\n        formRef,\n        dataState,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onSaveTrainingDoc = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let trainingdocArray = [];\n      let trainingdoc = {\n        ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\n        ntrainingdoccode: selectedRecord.ntrainingdoccode ? selectedRecord.ntrainingdoccode : 0,\n        nstatus: transactionStatus.ACTIVE\n      };\n      let postParam = {\n        inputListName: \"TechniqueList\",\n        selectedObject: \"SelectedTrainingUpdate\",\n        primaryKeyField: \"ntrainingcode\"\n      };\n      const formData = new FormData();\n\n      if (nattachmenttypecode === attachmentType.FTP) {\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          acceptedFiles.forEach((file, index) => {\n            const tempData = Object.assign({}, trainingdoc);\n            const splittedFileName = file.name.split('.');\n            const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n            const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\n            const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\n            const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntrainingdoccode && selectedRecord.ntrainingdoccode > 0 && selectedRecord.ssystemfilename !== \"\" && selectedRecord.ssystemfilename !== undefined ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n            tempData[\"sfilename\"] = Lims_JSON_stringify(file.name.trim(), false);\n            tempData[\"sfiledesc\"] = Lims_JSON_stringify(selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\", false);\n            tempData[\"ssystemfilename\"] = uniquefilename;\n            tempData[\"nfilesize\"] = file.size;\n            tempData[\"nlinkcode\"] = transactionStatus.NA;\n            tempData[\"nattachmenttypecode\"] = 1; // tempData[\"dcreateddate\"] = this.props.Login.userInfo;\n\n            formData.append(\"uploadedFile\" + index, file);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            trainingdocArray.push(tempData);\n          });\n          formData.append(\"filecount\", acceptedFiles.length);\n          isFileEdited = transactionStatus.YES;\n        } else {\n          trainingdoc[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.sfilename, false);\n          trainingdoc[\"sfiledesc\"] = Lims_JSON_stringify(selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\", false);\n          trainingdoc[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n          trainingdoc[\"nlinkcode\"] = transactionStatus.NA;\n          trainingdoc[\"nfilesize\"] = selectedRecord.nfilesize; //trainingdoc[\"dcreateddate\"] = this.props.Login.userInfo;\n\n          trainingdoc[\"nattachmenttypecode\"] = 1;\n          trainingdocArray.push(trainingdoc);\n        }\n      } else {\n        trainingdoc[\"ssystemfilename\"] = \"\";\n        trainingdoc[\"nattachmenttypecode\"] = 2;\n        trainingdoc[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.slinkfilename, false);\n        trainingdoc[\"sfiledesc\"] = Lims_JSON_stringify(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\", false);\n        trainingdoc[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n        trainingdoc[\"nfilesize\"] = 0;\n        trainingdocArray.push(trainingdoc);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"trainingdoc\", JSON.stringify(trainingdocArray));\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sformname: Lims_JSON_stringify(this.props.userInfo.sformname),\n            smodulename: Lims_JSON_stringify(this.props.userInfo.smodulename),\n            //ALPD-1708(while saving the file,audit trail is not captured respective language..)\n            slanguagename: Lims_JSON_stringify(this.props.Login.userInfo.slanguagename)\n          }\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.operation,\n        classUrl: \"trainingupdate\",\n        saveType,\n        formRef,\n        methodUrl: \"TrainingDoc\",\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onSaveTrainieeDoc = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let trainieedocArray = [];\n      let postParam = {\n        inputListName: \"TechniqueList\",\n        selectedObject: \"SelectedTrainingUpdate\",\n        primaryKeyField: \"ntrainingcode\"\n      };\n      let trainieedoc = {\n        nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\n        ntraineedoccode: selectedRecord.ntraineedoccode ? selectedRecord.ntraineedoccode : 0,\n        nstatus: transactionStatus.ACTIVE,\n        ntrainingcode: this.props.masterData.selectedParticipants.ntrainingcode\n      };\n      const formData = new FormData();\n\n      if (nattachmenttypecode === attachmentType.FTP) {\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          acceptedFiles.forEach((file, index) => {\n            const tempData = Object.assign({}, trainieedoc);\n            const splittedFileName = file.name.split('.');\n            const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n            const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\n            const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\n            const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntraineedoccode && selectedRecord.ntraineedoccode > 0 && selectedRecord.ssystemfilename !== \"\" && selectedRecord.ssystemfilename !== undefined ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n            tempData[\"sfilename\"] = Lims_JSON_stringify(file.name, false);\n            tempData[\"sfiledesc\"] = Lims_JSON_stringify(selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\", false);\n            tempData[\"ssystemfilename\"] = uniquefilename;\n            tempData[\"nfilesize\"] = file.size;\n            tempData[\"nlinkcode\"] = transactionStatus.NA;\n            tempData[\"nattachmenttypecode\"] = 1; // tempData[\"dcreateddate\"] = this.props.Login.userInfo;\n\n            formData.append(\"uploadedFile\" + index, file);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            trainieedocArray.push(tempData);\n          });\n          formData.append(\"filecount\", acceptedFiles.length);\n          isFileEdited = transactionStatus.YES;\n        } else {\n          trainieedoc[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.sfilename, false);\n          trainieedoc[\"sfiledesc\"] = Lims_JSON_stringify(selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\", false);\n          trainieedoc[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n          trainieedoc[\"nlinkcode\"] = transactionStatus.NA;\n          trainieedoc[\"nfilesize\"] = selectedRecord.nfilesize; //  trainieedoc[\"dcreateddate\"] = this.props.Login.userInfo;\n\n          trainieedoc[\"nattachmenttypecode\"] = 1;\n          trainieedocArray.push(trainieedoc);\n        }\n      } else {\n        trainieedoc[\"ssystemfilename\"] = \"\";\n        trainieedoc[\"nattachmenttypecode\"] = 2;\n        trainieedoc[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.slinkfilename, false);\n        trainieedoc[\"sfiledesc\"] = Lims_JSON_stringify(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\", false);\n        trainieedoc[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n        trainieedoc[\"nfilesize\"] = 0;\n        trainieedocArray.push(trainieedoc);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"trainieedoc\", JSON.stringify(trainieedocArray));\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sformname: Lims_JSON_stringify(this.props.userInfo.sformname),\n            smodulename: Lims_JSON_stringify(this.props.userInfo.smodulename),\n            //ALPD-1708(while saving the file,audit trail is not captured respective language..)\n            slanguagename: Lims_JSON_stringify(this.props.Login.userInfo.slanguagename)\n          }\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.operation,\n        classUrl: \"trainingupdate\",\n        saveType,\n        formRef,\n        methodUrl: \"TrainieeDoc\",\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.fetchParticipantsRecordByID = (operation, version, ncontrolCode) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"trainingparticipants\"] = {\n        \"nusercode\": version.nusercode,\n        \"nparticipantcode\": version.nparticipantcode,\n        \"ntrainingcode\": version.ntrainingcode,\n        \"ncertifiedstatus\": version.ncertifiedstatus,\n        \"ncompetencystatus\": version.ncompetencystatus,\n        \"ntransactionstatus\": version.ntransactionstatus\n      };\n      const postParam = {\n        inputListName: \"TechniqueList\",\n        selectedObject: \"SelectedTrainingUpdate\",\n        primaryKeyField: \"ntrainingcode\",\n        primaryKeyValue: this.props.Login.masterData.TechniqueList.ntrainingcode,\n        fetchUrl: \"trainingupdate/getTraningUpdateByTechnique\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        methodUrl: \"TrainingParticipants\",\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        postParam,\n        operation\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openChildModal: true,\n            operation,\n            screenName: '',\n            id: 'ParticipantsStatus'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\");\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    const _dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    const dataStateParticipants = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      isOpen: false,\n      selectedRecord: {},\n      dataResult: [],\n      activeTab: 'Trainingdoc-tab',\n      dataState: _dataState,\n      dataStateParticipants: dataStateParticipants,\n      trainingDocument: [],\n      participants: []\n    };\n    this.trainingDocumentFieldList = ['ntrainingdoccode', 'nparticipantcode', 'ntrainingcode', 'sfilename', 'ntechniquecode', 'sfullname', 'nstatus', 'ntransactionstatus'];\n    this.trainingDocumentColumnList = [{\n      \"idsName\": \"IDS_TRAININGDOCUMENTNAME\",\n      \"dataField\": \"sfilename\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    this.participantsColumnList = [{\n      \"idsName\": \"IDS_PARTICIPANTSNAME\",\n      \"dataField\": \"sfullname\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }]; // this.validationTrainingDocumentColumnList = [{ \"idsName\": \"IDS_TRAININGDOCUMENTNAME\", \"dataField\": \"sfilename\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }];\n\n    this.validationParticipantsColumnList = [{\n      \"idsName\": \"IDS_PARTICIPANTS\",\n      \"dataField\": \"sfullname\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n  }\n\n  render() {\n    // const mandatoryFields = [];\n    // this.validationTrainingDocumentColumnList.forEach(item => item.mandatory === true ?\n    //    mandatoryFields.push(item) : \"\"\n    //  );\n    let mandatoryFields = [];\n\n    if (this.props.screenName === \"IDS_TRAININGDOCUMENTS\" || this.props.screenName === \"IDS_TRAINEEDOCUMENTS\") {\n      if (this.state.selectedRecord && this.state.selectedRecord.nattachmenttypecode === attachmentType.LINK) {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_FILENAME\",\n          \"dataField\": \"slinkfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }, {\n          \"idsName\": \"IDS_LINKNAME\",\n          \"dataField\": \"nlinkcode\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        });\n      } else {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        });\n      }\n    } else {\n      mandatoryFields.push({\n        mandatory: true,\n        idsName: \"IDS_PARTICIPANTNAME\",\n        dataField: \"nusercode\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CustomTabs, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 29\n      }\n    })))), this.props.Login.openChildModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 29\n        }\n      }) : this.props.screenName === \"IDS_TRAININGDOCUMENTS\" ? /*#__PURE__*/React.createElement(AddTrainingDocFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onDrop: this.onDropTrainingDoc,\n        onInputOnChange: this.onInputOnChange,\n        deleteAttachment: this.deleteAttachment,\n        formatMessage: this.props.intl.formatMessage,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_FILENAME\"\n        }),\n        operation: this.props.Login.operation,\n        userLogged: this.props.Login.userLogged,\n        inputParam: this.props.Login.inputParam,\n        selectedId: this.props.Login.selectedId,\n        maxSize: 20,\n        maxFiles: 1,\n        linkMaster: this.props.Login.linkMaster,\n        onComboChange: this.props.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 33\n        }\n      }) : this.props.screenName === \"IDS_TRAINEEDOCUMENTS\" ? /*#__PURE__*/React.createElement(AddTraineeDocFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onDrop: this.onDropTrainieeDoc,\n        onInputOnChange: this.onInputOnChange,\n        deleteAttachment: this.deleteAttachment,\n        formatMessage: this.props.intl.formatMessage,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_FILENAME\"\n        }),\n        operation: this.props.Login.operation,\n        userLogged: this.props.Login.userLogged,\n        inputParam: this.props.Login.inputParam,\n        selectedId: this.props.Login.selectedId,\n        linkMaster: this.props.Login.linkMaster,\n        onComboChange: this.props.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 37\n        }\n      }) : /*#__PURE__*/React.createElement(AddParticipantsStatus, {\n        selectedRecord: this.props.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        handleChange: this.handleChange,\n        formatMessage: this.props.formatMessage,\n        usersStatus: this.props.usersStatus || [],\n        nusercode: this.props.nusercode || [],\n        selectedTrainingParticipants: this.props.masterData.SelectedTrainingParticipants || {},\n        extractedColumnList: this.extractedColumnList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 39\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.masterData !== previousProps.masterData) {\n      let isOpen = false;\n\n      if (this.props.errorCode !== undefined && (this.state.operation === \"create\" || this.state.operation === \"update\")) {\n        isOpen = true;\n      }\n\n      let {\n        dataState,\n        dataStateParticipants\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        dataState = {\n          skip: 0,\n          take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\n          filter: undefined,\n          sort: undefined\n        };\n        dataStateParticipants = {\n          skip: 0,\n          take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\n          filter: undefined,\n          sort: undefined\n        };\n      }\n\n      this.setState({\n        isOpen,\n        activeTab: 'Trainingdocument-tab',\n        dataState,\n        dataStateParticipants\n      });\n    }\n\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n\n    let {\n      dataState,\n      dataStateParticipants\n    } = this.state;\n\n    if (this.props.dataState !== previousProps.dataState && this.props.dataState !== dataState) {\n      dataState = {\n        skip: 0,\n        take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n      };\n      dataStateParticipants = {\n        skip: 0,\n        take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n      };\n      this.setState({\n        dataState,\n        dataStateParticipants\n      });\n    }\n\n    if (this.props.trainingDocument !== previousProps.trainingDocument || this.props.participants !== previousProps.participants) {\n      const participants = constructOptionList(this.props.participants || [], \"nparticipantcode\", \"sfullname\", undefined, undefined, undefined);\n      const participantsList = participants.get(\"OptionList\");\n      this.setState({\n        participants: participantsList\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  addtraineedocfile,\n  viewAttachment\n})(injectIntl(TrainingUpdateChildTab));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/competencemanagement/trainingupdate/TrainingUpdateChildTab.jsx"],"names":["React","version","Row","Col","Card","injectIntl","process","SlideOutModal","DEFAULT_RETURN","constructOptionList","onDropAttachFileList","deleteAttachmentDropZone","showEsign","create_UUID","Lims_JSON_stringify","CustomTabs","connect","TrainingParticipantsTab","TrainingDocTab","AddTrainingDocFile","AddTraineeDocFile","Esign","attachmentType","FORMULAFIELDTYPE","transactionStatus","AddParticipantsStatus","addtraineedocfile","viewAttachment","mapStateToProps","state","Login","TrainingUpdateChildTab","Component","constructor","props","TrainingDocumentDataStateChange","event","setState","dataState","ParticipantsDataStateChange","dataStateParticipants","handleChange","value","valueParam","isSection","selectedRecord","viewTraineeDocumentFile","filedata","inputParam","inputData","traineefile","userinfo","userInfo","classUrl","operation","methodUrl","screenName","viewTrainingDocumentFile","trainingfile","tabDetail","tabMap","Map","set","userRoleControlRights","controlMap","updateStore","masterData","undefined","skip","data","participantsColumnList","fetchParticipantsRecordByID","deleteRecord","getAvailableData","addtraineedoc","getTrainingParticipantsAttended","getTrainingParticipantsCompetent","getTrainingParticipantsCertified","onInputOnChange","TrainingDocument","settings","optional","target","type","name","checked","ncontrolcode","openChildModal","updateInfo","closeModal","loadEsign","typeName","selectedId","onDropTrainingDoc","attachedFiles","fieldName","actionType","onDropTrainieeDoc","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","screenData","validateEsignCredential","deleteAttachment","file","deleteParam","selected","toLowerCase","esignRights","nformcode","ncontrolCode","crudMaster","onSaveClick","saveType","formRef","defaultInput","isValidRequest","openModal","onSaveTrainingDoc","onSaveTrainieeDoc","onSaveAttended","onSaveCertified","onSaveCompetent","trainingupdate","postParam","inputListName","selectedObject","primaryKeyField","nusercode","map","participants","push","ntrainingcode","SelectedTrainingUpdate","nparticipantcode","item","ntransactionstatus","ATTENDED","ncertifiedstatus","NO","ncompetencystatus","ntechniquecode","selectedTechinque","YES","acceptedFiles","sfilename","nattachmenttypecode","isFileEdited","trainingdocArray","trainingdoc","ntrainingdoccode","nstatus","ACTIVE","formData","FormData","FTP","Array","isArray","length","forEach","index","tempData","Object","assign","splittedFileName","split","fileExtension","ssystemfilename","filesystemfileext","uniquefilename","trim","sfiledesc","size","NA","append","nfilesize","slinkfilename","slinkdescription","nlinkcode","JSON","stringify","sformname","smodulename","slanguagename","isFileupload","trainieedocArray","trainieedoc","selectedParticipants","ntraineedoccode","primaryKeyValue","TechniqueList","fetchUrl","fecthInputObject","id","onTabChange","tabProps","take","parseInt","isOpen","dataResult","activeTab","trainingDocument","trainingDocumentFieldList","trainingDocumentColumnList","validationParticipantsColumnList","render","mandatoryFields","LINK","mandatory","idsName","dataField","mandatoryLabel","controlType","masterStatus","intl","formatMessage","userLogged","linkMaster","onComboChange","usersStatus","SelectedTrainingParticipants","extractedColumnList","componentDidUpdate","previousProps","errorCode","filter","sort","participantsList","get"],"mappings":"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","sourcesContent":["import React, { version } from 'react'\r\nimport { Row, Col, Card } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport { constructOptionList, onDropAttachFileList, deleteAttachmentDropZone, showEsign, create_UUID, Lims_JSON_stringify } from '../../../components/CommonScript';\r\nimport CustomTabs from '../../../components/custom-tabs/custom-tabs.component';\r\nimport { connect } from 'react-redux';\r\nimport TrainingParticipantsTab from './TrainingParticipantsTab';\r\nimport TrainingDocTab from './TrainingDocTab';\r\nimport AddTrainingDocFile from './AddTrainingDocFile';\r\nimport AddTraineeDocFile from './AddTraineeDocFile';\r\nimport Esign from '../../audittrail/Esign';\r\nimport { attachmentType, FORMULAFIELDTYPE, transactionStatus } from '../../../components/Enumeration';\r\nimport AddParticipantsStatus from '../trainingcertificate/AddParticipantsStatus';\r\nimport { addtraineedocfile, viewAttachment } from '../../../actions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass TrainingUpdateChildTab extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5\r\n        };\r\n        const dataStateParticipants = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5\r\n        };\r\n        this.state = {\r\n            isOpen: false, selectedRecord: {}, dataResult: [],\r\n            activeTab: 'Trainingdoc-tab',\r\n            dataState: dataState,\r\n            dataStateParticipants: dataStateParticipants, trainingDocument: [], participants: []\r\n        };\r\n        this.trainingDocumentFieldList = ['ntrainingdoccode', 'nparticipantcode', 'ntrainingcode', 'sfilename', 'ntechniquecode', 'sfullname',\r\n            'nstatus', 'ntransactionstatus'];\r\n        this.trainingDocumentColumnList = [{ \"idsName\": \"IDS_TRAININGDOCUMENTNAME\", \"dataField\": \"sfilename\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }];\r\n        this.participantsColumnList = [{ \"idsName\": \"IDS_PARTICIPANTSNAME\", \"dataField\": \"sfullname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }];\r\n        // this.validationTrainingDocumentColumnList = [{ \"idsName\": \"IDS_TRAININGDOCUMENTNAME\", \"dataField\": \"sfilename\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }];\r\n        this.validationParticipantsColumnList = [{ \"idsName\": \"IDS_PARTICIPANTS\", \"dataField\": \"sfullname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }];\r\n    }\r\n    TrainingDocumentDataStateChange = (event) => {\r\n        this.setState({\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    ParticipantsDataStateChange = (event) => {\r\n        this.setState({\r\n            dataStateParticipants: event.dataState\r\n        });\r\n    }\r\n    handleChange = (value, valueParam, isSection) => {\r\n\r\n        if (value !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n\r\n            selectedRecord[valueParam] = value;\r\n\r\n            this.setState({ selectedRecord });\r\n\r\n\r\n        }\r\n    }\r\n\r\n    viewTraineeDocumentFile = (filedata) => {\r\n        const inputParam = {\r\n            inputData: {\r\n                traineefile: filedata,\r\n                userinfo: this.props.userInfo\r\n            },\r\n            classUrl: \"trainingupdate\",\r\n            operation: \"view\",\r\n            methodUrl: \"AttachedTraineeFile\",\r\n            screenName: \"IDS_TRAINEEDOCUMENT\"\r\n        }\r\n        this.props.viewAttachment(inputParam);\r\n    }\r\n\r\n    viewTrainingDocumentFile = (filedata) => {\r\n        const inputParam = {\r\n            inputData: {\r\n                trainingfile: filedata,\r\n                userinfo: this.props.userInfo\r\n            },\r\n            classUrl: \"trainingupdate\",\r\n            operation: \"view\",\r\n            methodUrl: \"AttachedTrainingFile\",\r\n            screenName: \"IDS_TRAININGDOCUMENT\"\r\n        }\r\n        this.props.viewAttachment(inputParam);\r\n    }\r\n\r\n    render() {\r\n        // const mandatoryFields = [];\r\n        // this.validationTrainingDocumentColumnList.forEach(item => item.mandatory === true ?\r\n        //    mandatoryFields.push(item) : \"\"\r\n        //  );\r\n        let mandatoryFields = [];\r\n        if (this.props.screenName === \"IDS_TRAININGDOCUMENTS\" || this.props.screenName === \"IDS_TRAINEEDOCUMENTS\") {\r\n            if (this.state.selectedRecord && this.state.selectedRecord.nattachmenttypecode === attachmentType.LINK) {\r\n                mandatoryFields.push(\r\n                    { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"slinkfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                    { \"idsName\": \"IDS_LINKNAME\", \"dataField\": \"nlinkcode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                );\r\n            } else {\r\n                mandatoryFields.push(\r\n                    { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" }\r\n                );\r\n            }\r\n        }\r\n        else {\r\n            mandatoryFields.push(\r\n                {\r\n                    mandatory: true,\r\n                    idsName: \"IDS_PARTICIPANTNAME\",\r\n                    dataField: \"nusercode\",\r\n                    mandatoryLabel: \"IDS_SELECT\",\r\n                    controlType: \"selectbox\",\r\n                });\r\n        }\r\n        return (\r\n            <>\r\n                <Row className=\"no-gutters\">\r\n                    <Col md={12}>\r\n                        <Card className=\"at-tabs\">\r\n                            <CustomTabs tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openChildModal &&\r\n                    <SlideOutModal show={this.props.Login.openChildModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.screenName === \"IDS_TRAININGDOCUMENTS\" ?\r\n                                <AddTrainingDocFile\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onDrop={this.onDropTrainingDoc}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    deleteAttachment={this.deleteAttachment}\r\n                                    formatMessage={this.props.intl.formatMessage}\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_FILENAME\" })}\r\n                                    operation={this.props.Login.operation}\r\n                                    userLogged={this.props.Login.userLogged}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    maxSize={20}\r\n                                    maxFiles={1}\r\n                                    linkMaster={this.props.Login.linkMaster}\r\n                                    onComboChange={this.props.onComboChange}\r\n                                />\r\n                                : this.props.screenName === \"IDS_TRAINEEDOCUMENTS\" ?\r\n                                    <AddTraineeDocFile\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        onDrop={this.onDropTrainieeDoc}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        deleteAttachment={this.deleteAttachment}\r\n                                        formatMessage={this.props.intl.formatMessage}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_FILENAME\" })}\r\n                                        operation={this.props.Login.operation}\r\n                                        userLogged={this.props.Login.userLogged}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        selectedId={this.props.Login.selectedId}\r\n                                        linkMaster={this.props.Login.linkMaster}\r\n                                        onComboChange={this.props.onComboChange}\r\n                                    />\r\n                                    : <AddParticipantsStatus\r\n                                        selectedRecord={this.props.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        handleChange={this.handleChange}\r\n                                        formatMessage={this.props.formatMessage}\r\n                                        usersStatus={this.props.usersStatus || []}\r\n                                        nusercode={this.props.nusercode || []}\r\n                                        selectedTrainingParticipants={this.props.masterData.SelectedTrainingParticipants || {}}\r\n                                        extractedColumnList={this.extractedColumnList}\r\n                                    />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n\r\n        )\r\n\r\n    }\r\n\r\n\r\n    tabDetail = () => {\r\n\r\n        const tabMap = new Map();\r\n\r\n        tabMap.set(\"IDS_PARTICIPANTS\", <TrainingParticipantsTab\r\n\r\n            userRoleControlRights={this.props.userRoleControlRights}\r\n            controlMap={this.props.controlMap}\r\n            inputParam={this.props.inputParam}\r\n            userInfo={this.props.userInfo}\r\n            screenName={\" TrainieeDocuments\"}\r\n            updateStore={this.props.updateStore}\r\n            primaryKeyField={\"nparticipantcode\"}\r\n            masterData={this.props.masterData}\r\n            primaryList={\"Participants\"}\r\n            dataResult={process(this.props.Login.masterData[\"Participants\", \"TraineeDocuments\"] || [], this.state.dataStateParticipants)}\r\n            dataState={(this.props.screenName === undefined || this.props.screenName === \"Participants\") ? this.state.dataStateParticipants : { skip: 0 }}\r\n            dataStateChange={(event) => this.setState({ dataStateParticipants: event.data })}\r\n            columnList={this.participantsColumnList}\r\n            methodUrl={\"TrainingParticipants\"}\r\n            fetchParticipantsRecordByID={this.fetchParticipantsRecordByID}\r\n            deleteRecord={this.deleteRecord}\r\n            getAvailableData={this.props.getAvailableData}\r\n            addtraineedoc={this.addtraineedoc}\r\n            selectedRecord={this.state.selectedRecord || {}}\r\n            getTrainingParticipantsAttended={this.props.getTrainingParticipantsAttended}\r\n            getTrainingParticipantsCompetent={this.props.getTrainingParticipantsCompetent}\r\n            getTrainingParticipantsCertified={this.props.getTrainingParticipantsCertified}\r\n            viewTraineeDocumentFile={this.viewTraineeDocumentFile}\r\n\r\n        />)\r\n        tabMap.set(\"IDS_TRAININGDOCUMENTS\", <TrainingDocTab\r\n            screenName={\"TrainingDocuments\"}\r\n            onInputOnChange={this.onInputOnChange}\r\n            controlMap={this.props.controlMap}\r\n            updateStore={this.props.updateStore}\r\n            userRoleControlRights={this.props.userRoleControlRights}\r\n            userInfo={this.props.userInfo}\r\n            inputParam={this.props.inputParam}\r\n            deleteRecord={this.deleteRecord}\r\n            TrainingDocument={this.props.masterData.TrainingDocument || []}\r\n            getAvailableData={this.props.getAvailableData}\r\n            settings={this.props.settings}\r\n            selectedRecord={this.state.selectedRecord || {}}\r\n            viewTrainingDocumentFile={this.viewTrainingDocumentFile}\r\n        />)\r\n\r\n        return tabMap;\r\n    }\r\n\r\n\r\n    onInputOnChange = (event, optional) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\r\n        } else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = optional;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n\r\n    }\r\n\r\n    addtraineedoc = (ncontrolcode) => {\r\n        let openChildModal = this.props.Login.openChildModal;\r\n        let operation = \"create\";\r\n        let screenName = this.props.Login.screenName;\r\n        screenName = \"IDS_TRAINEEDOCUMENTS\";\r\n        openChildModal = true;\r\n        const selectedRecord = this.props.selectedRecord;\r\n        const updateInfo = {\r\n            userInfo: this.props.Login.userInfo, operation, selectedRecord, ncontrolcode, screenName\r\n        };\r\n        this.props.addtraineedocfile(updateInfo);\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         openModal: true,\r\n        //         operation: \"create\",\r\n        //         selectedRecord: {},\r\n        //         ncontrolcode: ncontrolcode,\r\n        //         screenName : \"IDS_TRAINEEDOCUMENTS\" \r\n\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openChildModal = this.props.Login.openChildModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" ||\r\n                //this.props.Login.operation === \"certify\" ||\r\n                //this.props.Login.operation === \"attend\" ||\r\n                //this.props.Login.operation === \"competent\" ||\r\n                this.props.Login.operation === \"complete\") {\r\n                loadEsign = false;\r\n                // if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"complete\") {\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n                //}                 \r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\";\r\n                selectedRecord['esigncomments'] = \"\";\r\n                selectedRecord['esignreason'] = \"\";\r\n            }\r\n        }\r\n        else {\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n    onDropTrainingDoc = (attachedFiles, fieldName) => {\r\n\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n    onDropTrainieeDoc = (attachedFiles, fieldName) => {\r\n\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n    }\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\"\r\n        });\r\n    }\r\n\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        const methodUrl = deleteParam.methodUrl;\r\n        const selected = deleteParam.selectedRecord;\r\n        let dataState = undefined;\r\n        const inputParam =\r\n        {\r\n            inputData: {\r\n\r\n                [methodUrl.toLowerCase()]: selected,\r\n                userinfo: this.props.userInfo\r\n            },\r\n            classUrl: \"trainingupdate\",\r\n            operation: deleteParam.operation,\r\n            methodUrl: methodUrl,\r\n            dataState\r\n        }\r\n\r\n        const masterData = this.props.masterData;\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openChildModal: true, operation: deleteParam.operation, selectedRecord: {}\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\r\n        }\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputParam = {};\r\n        let defaultInput = {};\r\n        let isValidRequest = true;\r\n        let openModal = \"openChildModal\";\r\n        if (this.props.screenName === \"IDS_TRAININGDOCUMENTS\") {\r\n            inputParam = this.onSaveTrainingDoc(saveType, formRef);\r\n\r\n        }\r\n        if (this.props.screenName === \"IDS_TRAINEEDOCUMENTS\") {\r\n            inputParam = this.onSaveTrainieeDoc(saveType, formRef);\r\n\r\n        }\r\n        if (this.props.screenName === \"IDS_ATTENDPARTICIPANTSDETAILS\") {\r\n            inputParam = this.onSaveAttended(saveType, formRef);\r\n        }\r\n        if (this.props.screenName === \"IDS_CERTIFYPARTICIPANTSDETAILS\") {\r\n            inputParam = this.onSaveCertified(saveType, formRef);\r\n        }\r\n        if (this.props.screenName === \"IDS_COMPETENTPARTICIPANTSDETAILS\") {\r\n            inputParam = this.onSaveCompetent(saveType, formRef);\r\n        }\r\n        if (isValidRequest) {\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, openModal, defaultInput);\r\n            }\r\n        }\r\n    }\r\n    onSaveAttended = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let trainingupdate = [];\r\n        let dataState = undefined;\r\n        let postParam = { inputListName: \"TechniqueList\", selectedObject: \"SelectedTrainingUpdate\", primaryKeyField: \"ntrainingcode\" };\r\n\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\r\n            trainingupdate.push({\r\n                ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\r\n                // nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\r\n                nparticipantcode: participants.item.nparticipantcode,\r\n                ntransactionstatus: transactionStatus.ATTENDED,\r\n                ncertifiedstatus: transactionStatus.NO,\r\n                ncompetencystatus: transactionStatus.NO,\r\n                nusercode: participants.item.nusercode,\r\n                ntechniquecode: this.props.masterData.selectedTechinque.ntechniquecode\r\n            })\r\n\r\n        })\r\n        inputData[\"trainingupdate\"] = trainingupdate\r\n\r\n        const inputParam = {\r\n            classUrl: 'trainingupdate',\r\n            methodUrl: \"TrainingParticipants\",\r\n            inputData: inputData,\r\n            operation: \"attend\", saveType, formRef, dataState,\r\n            postParam\r\n        }\r\n        return inputParam;\r\n\r\n    }\r\n    onSaveCertified = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let trainingupdate = [];\r\n        let dataState = undefined;\r\n        let postParam = { inputListName: \"TechniqueList\", selectedObject: \"SelectedTrainingUpdate\", primaryKeyField: \"ntrainingcode\" };\r\n\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\r\n            trainingupdate.push({\r\n                ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\r\n                // nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\r\n                nparticipantcode: participants.item.nparticipantcode,\r\n                ntransactionstatus: transactionStatus.ATTENDED,\r\n                ncertifiedstatus: transactionStatus.YES,\r\n                ncompetencystatus: transactionStatus.NO,\r\n                nusercode: participants.item.nusercode,\r\n                ntechniquecode: this.props.masterData.selectedTechinque.ntechniquecode\r\n\r\n            })\r\n\r\n        })\r\n        inputData[\"trainingupdate\"] = trainingupdate\r\n\r\n        const inputParam = {\r\n            classUrl: 'trainingupdate',\r\n            methodUrl: \"TrainingParticipants\",\r\n            inputData: inputData,\r\n            operation: \"certify\", saveType, formRef, dataState, postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n    onSaveCompetent = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let trainingupdate = [];\r\n        let dataState = undefined;\r\n        let postParam = { inputListName: \"TechniqueList\", selectedObject: \"SelectedTrainingUpdate\", primaryKeyField: \"ntrainingcode\" };\r\n\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\r\n            trainingupdate.push({\r\n                ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\r\n                // nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\r\n                nparticipantcode: participants.item.nparticipantcode,\r\n                ntransactionstatus: transactionStatus.ATTENDED,\r\n                ncertifiedstatus: transactionStatus.YES,\r\n                ncompetencystatus: transactionStatus.YES,\r\n                nusercode: participants.item.nusercode,\r\n                ntechniquecode: this.props.masterData.selectedTechinque.ntechniquecode\r\n\r\n            })\r\n\r\n        })\r\n        inputData[\"trainingupdate\"] = trainingupdate\r\n\r\n        const inputParam = {\r\n            classUrl: 'trainingupdate',\r\n            methodUrl: \"TrainingParticipants\",\r\n            inputData: inputData,\r\n            operation: \"competent\", saveType, formRef, dataState, postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n    onSaveTrainingDoc = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let trainingdocArray = [];\r\n        let trainingdoc = {\r\n            ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\r\n            ntrainingdoccode: selectedRecord.ntrainingdoccode ? selectedRecord.ntrainingdoccode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n\r\n        };\r\n        let postParam = { inputListName: \"TechniqueList\", selectedObject: \"SelectedTrainingUpdate\", primaryKeyField: \"ntrainingcode\" };\r\n\r\n        const formData = new FormData();\r\n        if (nattachmenttypecode === attachmentType.FTP) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, trainingdoc);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\r\n                    const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntrainingdoccode && selectedRecord.ntrainingdoccode > 0\r\n                        && selectedRecord.ssystemfilename !== \"\" && selectedRecord.ssystemfilename !== undefined ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] = Lims_JSON_stringify(file.name.trim(), false);\r\n                    tempData[\"sfiledesc\"] = Lims_JSON_stringify(selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\", false);\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    tempData[\"nfilesize\"] = file.size;\r\n                    tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"nattachmenttypecode\"] = 1;\r\n                    // tempData[\"dcreateddate\"] = this.props.Login.userInfo;\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    trainingdocArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                trainingdoc[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.sfilename, false);\r\n                trainingdoc[\"sfiledesc\"] = Lims_JSON_stringify(selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\", false);\r\n                trainingdoc[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                trainingdoc[\"nlinkcode\"] = transactionStatus.NA;\r\n                trainingdoc[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                //trainingdoc[\"dcreateddate\"] = this.props.Login.userInfo;\r\n                trainingdoc[\"nattachmenttypecode\"] = 1;\r\n                trainingdocArray.push(trainingdoc);\r\n            }\r\n        } else {\r\n            trainingdoc[\"ssystemfilename\"] = \"\";\r\n            trainingdoc[\"nattachmenttypecode\"] = 2;\r\n            trainingdoc[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.slinkfilename, false);\r\n            trainingdoc[\"sfiledesc\"] = Lims_JSON_stringify(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\", false);\r\n            trainingdoc[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n            trainingdoc[\"nfilesize\"] = 0;\r\n            trainingdocArray.push(trainingdoc);\r\n        }\r\n\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"trainingdoc\", JSON.stringify(trainingdocArray));\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sformname: Lims_JSON_stringify(this.props.userInfo.sformname),\r\n                    smodulename: Lims_JSON_stringify(this.props.userInfo.smodulename),\r\n\r\n\t\t\t\t\t//ALPD-1708(while saving the file,audit trail is not captured respective language..)\r\n                    slanguagename: Lims_JSON_stringify(this.props.Login.userInfo.slanguagename)\r\n\r\n                }\r\n            },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.operation,\r\n            classUrl: \"trainingupdate\",\r\n            saveType, formRef, methodUrl: \"TrainingDoc\",\r\n            postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveTrainieeDoc = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let trainieedocArray = [];\r\n        let postParam = { inputListName: \"TechniqueList\", selectedObject: \"SelectedTrainingUpdate\", primaryKeyField: \"ntrainingcode\" };\r\n        let trainieedoc = {\r\n            nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\r\n            ntraineedoccode: selectedRecord.ntraineedoccode ? selectedRecord.ntraineedoccode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            ntrainingcode: this.props.masterData.selectedParticipants.ntrainingcode\r\n        };\r\n        const formData = new FormData();\r\n        if (nattachmenttypecode === attachmentType.FTP) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, trainieedoc);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\r\n                    const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntraineedoccode && selectedRecord.ntraineedoccode > 0\r\n                        && selectedRecord.ssystemfilename !== \"\" && selectedRecord.ssystemfilename !== undefined ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] = Lims_JSON_stringify(file.name, false);\r\n                    tempData[\"sfiledesc\"] = Lims_JSON_stringify(selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\", false);\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    tempData[\"nfilesize\"] = file.size;\r\n                    tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"nattachmenttypecode\"] = 1;\r\n                    // tempData[\"dcreateddate\"] = this.props.Login.userInfo;\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    trainieedocArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                trainieedoc[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.sfilename, false);\r\n                trainieedoc[\"sfiledesc\"] = Lims_JSON_stringify(selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\", false);\r\n                trainieedoc[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                trainieedoc[\"nlinkcode\"] = transactionStatus.NA;\r\n                trainieedoc[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                //  trainieedoc[\"dcreateddate\"] = this.props.Login.userInfo;\r\n                trainieedoc[\"nattachmenttypecode\"] = 1;\r\n                trainieedocArray.push(trainieedoc);\r\n            }\r\n        } else {\r\n            trainieedoc[\"ssystemfilename\"] = \"\";\r\n            trainieedoc[\"nattachmenttypecode\"] = 2;\r\n            trainieedoc[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.slinkfilename, false);\r\n            trainieedoc[\"sfiledesc\"] = Lims_JSON_stringify(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\", false);\r\n            trainieedoc[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n            trainieedoc[\"nfilesize\"] = 0;\r\n            trainieedocArray.push(trainieedoc);\r\n        }\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"trainieedoc\", JSON.stringify(trainieedocArray));\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sformname: Lims_JSON_stringify(this.props.userInfo.sformname),\r\n                    smodulename: Lims_JSON_stringify(this.props.userInfo.smodulename),\r\n\t\t\t\t\t//ALPD-1708(while saving the file,audit trail is not captured respective language..)\r\n                    slanguagename: Lims_JSON_stringify(this.props.Login.userInfo.slanguagename)\r\n                }\r\n            },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.operation,\r\n            classUrl: \"trainingupdate\",\r\n            saveType, formRef, methodUrl: \"TrainieeDoc\",\r\n            postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    // fetchParticipantsRecordByID = (operation,version,ncontrolCode) => {\r\n\r\n    //     let inputData = [];\r\n    //     inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    //     inputData[\"trainingparticipants\"] = {\r\n    //         \"nusercode\": version.nusercode,\r\n    //         \"nparticipantcode\": version.nparticipantcode,\r\n    //         \"ntrainingcode\": version.ntrainingcode,\r\n    //         \"ncertifiedstatus\" : version.ncertifiedstatus,\r\n    //         \"ncompetencystatus\" : version.ncompetencystatus,\r\n    //         \"ntransactionstatus\" : version.ntransactionstatus\r\n\r\n    //     }\r\n    //     const postParam = {\r\n    //         inputListName: \"TechniqueList\", \r\n    //         selectedObject: \"SelectedTrainingUpdate\",\r\n    //         primaryKeyField: \"ntrainingcode\",\r\n    //         primaryKeyValue: this.props.Login.masterData.TechniqueList.ntrainingcode,\r\n    //         fetchUrl: \"trainingupdate/getTraningUpdateByTechnique\",\r\n    //         fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n    //     }\r\n    //     const inputParam = {\r\n    //         methodUrl: \"TrainingParticipants\",\r\n    //         classUrl: this.props.Login.inputParam.classUrl,\r\n    //         inputData: inputData, postParam,\r\n    //         operation\r\n    //     }\r\n    //     const masterData = this.props.Login.masterData;\r\n\r\n    //     if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n    //         const updateInfo = {\r\n    //             typeName: DEFAULT_RETURN,\r\n    //             data: {\r\n    //                 loadEsign: true, \r\n    //                 screenData: { inputParam, masterData }, \r\n    //                 openModal: true, \r\n    //                 operation, \r\n    //                 screenName: '', \r\n    //                 id: 'ParticipantsStatus'\r\n    //             }\r\n    //         }\r\n    //         this.props.updateStore(updateInfo);\r\n    //     }\r\n    //     else {\r\n    //         this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n    //     }\r\n    // }\r\n\r\n    fetchParticipantsRecordByID = (operation, version, ncontrolCode) => {\r\n\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"trainingparticipants\"] = {\r\n            \"nusercode\": version.nusercode,\r\n            \"nparticipantcode\": version.nparticipantcode,\r\n            \"ntrainingcode\": version.ntrainingcode,\r\n            \"ncertifiedstatus\": version.ncertifiedstatus,\r\n            \"ncompetencystatus\": version.ncompetencystatus,\r\n            \"ntransactionstatus\": version.ntransactionstatus\r\n\r\n        }\r\n        const postParam = {\r\n            inputListName: \"TechniqueList\",\r\n            selectedObject: \"SelectedTrainingUpdate\",\r\n            primaryKeyField: \"ntrainingcode\",\r\n            primaryKeyValue: this.props.Login.masterData.TechniqueList.ntrainingcode,\r\n            fetchUrl: \"trainingupdate/getTraningUpdateByTechnique\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        }\r\n        const inputParam = {\r\n            methodUrl: \"TrainingParticipants\",\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            inputData: inputData, postParam,\r\n            operation\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    openChildModal: true,\r\n                    operation,\r\n                    screenName: '',\r\n                    id: 'ParticipantsStatus'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\");\r\n        }\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.masterData !== previousProps.masterData) {\r\n\r\n            let isOpen = false;\r\n            if (this.props.errorCode !== undefined && (this.state.operation === \"create\" || this.state.operation === \"update\")) {\r\n                isOpen = true;\r\n            }\r\n            let { dataState, dataStateParticipants } = this.state;\r\n            if (this.props.dataState === undefined) {\r\n                dataState = { skip: 0, take: this.props.settings ? parseInt(this.props.settings[14]) : 5, filter: undefined, sort: undefined }\r\n                dataStateParticipants = { skip: 0, take: this.props.settings ? parseInt(this.props.settings[14]) : 5, filter: undefined, sort: undefined }\r\n            }\r\n            this.setState({ isOpen, activeTab: 'Trainingdocument-tab', dataState, dataStateParticipants });\r\n        }\r\n\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n        let { dataState, dataStateParticipants } = this.state;\r\n        if (this.props.dataState !== previousProps.dataState && this.props.dataState !== dataState) {\r\n            dataState = { skip: 0, take: this.props.settings ? parseInt(this.props.settings[14]) : 5 }\r\n            dataStateParticipants = { skip: 0, take: this.props.settings ? parseInt(this.props.settings[14]) : 5 }\r\n            this.setState({ dataState, dataStateParticipants });\r\n        }\r\n\r\n\r\n        if (this.props.trainingDocument !== previousProps.trainingDocument || this.props.participants !== previousProps.participants) {\r\n\r\n\r\n            const participants = constructOptionList(this.props.participants || [], \"nparticipantcode\",\r\n                \"sfullname\", undefined, undefined, undefined);\r\n            const participantsList = participants.get(\"OptionList\");\r\n\r\n            this.setState({\r\n                participants: participantsList\r\n            });\r\n        }\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, { addtraineedocfile, viewAttachment })(injectIntl(TrainingUpdateChildTab));\r\n\r\n"]},"metadata":{},"sourceType":"module"}