{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testmanagement\\\\TestView.jsx\";\nimport React, { Component } from 'react';\nimport { toast } from 'react-toastify';\nimport { injectIntl } from 'react-intl';\nimport rsapi from '../../rsapi';\nimport { process } from '@progress/kendo-data-query';\nimport { Row } from 'react-bootstrap';\nimport '../../assets/styles/lims-global-theme.css';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddSpecification from './AddSpecification';\nimport AddCodedResult from './AddCodedResult';\nimport AddParameter from './AddParameter';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, create_UUID, onDropAttachFileList, deleteAttachmentDropZone } from '../../components/CommonScript';\nimport Esign from '../audittrail/Esign';\nimport AddTestSection from './AddTestSection';\nimport AddTestMethod from './AddTestMethod';\nimport AddTestInstrumentCategory from './AddTestInstrumentCategory';\nimport AddFormula from './AddFormula';\nimport ValidateFormula from './ValidateFormula';\nimport AddFile from './AddFile';\nimport { parameterType, transactionStatus, operators, attachmentType, FORMULAFIELDTYPE } from '../../components/Enumeration';\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport TestSectionTab from './TestSectionTab';\nimport TestMethodTab from './TestMethodTab';\nimport TestInstrumentCategoryTab from './TestInstrumentCategoryTab';\nimport TestFileTab from './TestFileTab';\nimport AddTestContainerType from './AddTestContainerType';\nimport TestContainerTypeTab from './TestContainerTypeTab';\nimport ParameterTab from './ParameterTab';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { ChartLegendTitle } from '@progress/kendo-react-charts';\nimport TestPackageTab from './TestPackageTab';\nimport AddTestPackageTest from './AddTestPackageTest';\n\nclass TestView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_PARAMETER\", /*#__PURE__*/React.createElement(ParameterTab, {\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        TestParameter: this.props.masterData.TestParameter,\n        masterData: this.props.masterData,\n        userInfo: this.props.userInfo,\n        getTestDetails: this.props.getTestDetails,\n        inputParam: this.props.inputParam,\n        addParameter: this.props.addParameter,\n        deleteAction: this.props.deleteAction,\n        ConfirmDelete: this.ConfirmDelete,\n        addCodedResult: this.props.addCodedResult,\n        addFormula: this.props.addFormula,\n        onSwitchChange: this.onSwitchChange,\n        addParameterSpecification: this.props.addParameterSpecification,\n        screenName: \"IDS_PARAMETER\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_SECTION\", /*#__PURE__*/React.createElement(TestSectionTab, {\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        dataResult: process(this.props.masterData[\"TestSection\"], this.props.screenName === undefined || this.props.screenName === \"IDS_SECTION\" ? this.state.sectionDataState : {\n          skip: 0,\n          take: 10\n        }),\n        dataState: this.props.screenName === undefined || this.props.screenName === \"IDS_SECTION\" ? this.state.sectionDataState : {\n          skip: 0,\n          take: 10\n        },\n        dataStateChange: event => this.setState({\n          sectionDataState: event.dataState\n        }),\n        selectedTest: this.props.masterData.SelectedTest,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        deleteRecord: this.deleteRecord,\n        defaultRecord: this.defaultRecord,\n        getAvailableData: this.props.getAvailableData,\n        TestSection: this.props.masterData.TestSection || [],\n        screenName: \"IDS_SECTION\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_METHOD\", /*#__PURE__*/React.createElement(TestMethodTab, {\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        dataResult: process(this.props.masterData[\"TestMethod\"], this.props.screenName === undefined || this.props.screenName === \"IDS_METHOD\" ? this.state.methodDataState : {\n          skip: 0,\n          take: 10\n        }),\n        dataState: this.props.screenName === undefined || this.props.screenName === \"IDS_METHOD\" ? this.state.methodDataState : {\n          skip: 0,\n          take: 10\n        },\n        dataStateChange: event => this.setState({\n          methodDataState: event.dataState\n        }),\n        selectedTest: this.props.masterData.SelectedTest,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        deleteRecord: this.deleteRecord,\n        defaultRecord: this.defaultRecord,\n        getAvailableData: this.props.getAvailableData,\n        TestMethod: this.props.masterData.TestMethod || [],\n        screenName: \"IDS_METHOD\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_FILE\", /*#__PURE__*/React.createElement(TestFileTab, {\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        deleteRecord: this.deleteRecord,\n        TestFile: this.props.masterData.TestFile || [],\n        getAvailableData: this.props.getAvailableData,\n        addTestFile: this.props.addTestFile,\n        viewTestFile: this.viewTestFile,\n        defaultRecord: this.defaultRecord,\n        screenName: \"IDS_FILE\",\n        settings: this.props.settings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_INSTRUMENTCATEGORY\", /*#__PURE__*/React.createElement(TestInstrumentCategoryTab, {\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        dataResult: process(this.props.masterData[\"TestInstrumentCategory\"], this.props.screenName === undefined || this.props.screenName === \"IDS_INSTRUMENTCATEGORY\" ? this.state.instrumentCatDataState : {\n          skip: 0,\n          take: 10\n        }),\n        dataState: this.props.screenName === undefined || this.props.screenName === \"IDS_INSTRUMENTCATEGORY\" ? this.state.instrumentCatDataState : {\n          skip: 0,\n          take: 10\n        },\n        dataStateChange: event => this.setState({\n          instrumentCatDataState: event.dataState\n        }),\n        selectedTest: this.props.masterData.SelectedTest,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        deleteRecord: this.deleteRecord,\n        defaultRecord: this.defaultRecord,\n        getAvailableData: this.props.getAvailableData,\n        TestInstrumentCategory: this.props.masterData.TestInstrumentCategory,\n        screenName: \"IDS_INSTRUMENTCATEGORY\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_PACKAGE\", /*#__PURE__*/React.createElement(TestPackageTab, {\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        dataResult: process(this.props.masterData[\"TestPackage\"] || [], this.props.screenName === undefined || this.props.screenName === \"IDS_INSTRUMENTCATEGORY\" ? this.state.instrumentCatDataState : {\n          skip: 0,\n          take: 10\n        }),\n        dataState: this.props.screenName === undefined || this.props.screenName === \"IDS_PACKAGE\" ? this.state.instrumentCatDataState : {\n          skip: 0,\n          take: 10\n        },\n        dataStateChange: event => this.setState({\n          instrumentCatDataState: event.dataState\n        }),\n        selectedTest: this.props.masterData.SelectedTest,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        deleteRecord: this.deleteRecord,\n        defaultRecord: this.defaultRecord,\n        getAvailableData: this.props.getAvailableData,\n        TestPackage: this.props.masterData.TestPackage,\n        screenName: \"IDS_PACKAGE\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 9\n        }\n      }));\n      tabMap.set(\"IDS_CONTAINERTYPE\", /*#__PURE__*/React.createElement(TestContainerTypeTab, {\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        dataResult: process(this.props.masterData[\"Containertype\"], this.props.screenName === undefined || this.props.screenName === \"IDS_CONTAINERTYPE\" ? this.state.containerTypeDataState : {\n          skip: 0,\n          take: 10\n        }),\n        dataState: this.props.screenName === undefined || this.props.screenName === \"IDS_CONTAINERTYPE\" ? this.state.containerTypeDataState : {\n          skip: 0,\n          take: 10\n        },\n        dataStateChange: event => this.setState({\n          containerTypeDataState: event.dataState\n        }),\n        selectedTest: this.props.masterData.SelectedTest,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        deleteRecord: this.deleteRecord,\n        defaultRecord: this.defaultRecord,\n        getAvailableData: this.props.getAvailableData,\n        TestContainerType: this.props.masterData.Containertype,\n        getActiveTestContainerTypeById: this.props.getActiveTestContainerTypeById,\n        intl: this.props.intl,\n        screenName: \"IDS_CONTAINERTYPE\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 9\n        }\n      }));\n      return tabMap;\n    };\n\n    this.viewTestFile = filedata => {\n      const inputParam = {\n        inputData: {\n          testfile: filedata,\n          userinfo: this.props.userInfo\n        },\n        classUrl: \"testmaster\",\n        operation: \"view\",\n        methodUrl: \"AttachedTestFile\",\n        screenName: \"IDS_TEST\"\n      };\n      this.props.viewAttachment(inputParam);\n    };\n\n    this.deleteRecord = deleteParam => {\n      const methodUrl = deleteParam.methodUrl;\n      const selected = deleteParam.selectedRecord;\n      let dataState = undefined;\n\n      if (this.props.screenName === \"IDS_SECTION\") {\n        dataState = this.state.sectionDataState;\n      } else if (this.props.screenName === \"IDS_METHOD\") {\n        dataState = this.state.methodDataState;\n      } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\n        dataState = this.state.instrumentCatDataState;\n      } else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\n        dataState = this.state.containerTypeDataState;\n      }\n\n      const inputParam = {\n        inputData: {\n          [methodUrl.toLowerCase()]: selected,\n          userinfo: this.props.userInfo\n        },\n        classUrl: \"testmaster\",\n        operation: deleteParam.operation,\n        methodUrl: methodUrl,\n        screenName: \"IDS_TEST\",\n        dataState\n      };\n      const masterData = this.props.masterData;\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openChildModal: true,\n            screenName: \"IDS_TEST\",\n            operation: deleteParam.operation,\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\n      }\n    };\n\n    this.defaultRecord = (defaultParam, event) => {\n      const methodUrl = defaultParam.methodUrl;\n      let dataItem = defaultParam.selectedRecord; // dataItem[\"ndefaultstatus\"] = transactionStatus.YES;\n\n      let dataState = undefined;\n\n      if (this.props.screenName === \"IDS_SECTION\") {\n        dataState = this.state.sectionDataState;\n      } else if (this.props.screenName === \"IDS_METHOD\") {\n        dataState = this.state.methodDataState;\n      } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\n        dataState = this.state.instrumentCatDataState;\n      } else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\n        dataState = this.state.containerTypeDataState;\n      }\n\n      let postParam = {\n        inputListName: \"TestMaster\",\n        selectedObject: \"SelectedTest\",\n        primaryKeyField: \"ntestcode\"\n      };\n      const inputParam = {\n        inputData: {\n          [methodUrl.toLowerCase()]: dataItem,\n          userinfo: this.props.userInfo\n        },\n        classUrl: \"testmaster\",\n        operation: \"setDefault\",\n        methodUrl: methodUrl,\n        dataState,\n        postParam\n      };\n      const masterData = this.props.masterData;\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, defaultParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openChildModal: true,\n            screenName: \"Test\",\n            operation: defaultParam.operation,\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\n      }\n    };\n\n    this.onSwitchChange = (item, key, methodUrl, event) => {\n      let dataItem = item; // dataItem[\"ndefaultstatus\"] = 3;\n\n      dataItem['ndefaultstatus'] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      const inputParam = {\n        inputData: {\n          [key]: dataItem,\n          userinfo: this.props.userInfo\n        },\n        classUrl: \"testmaster\",\n        operation: \"setDefault\",\n        methodUrl: methodUrl\n      };\n      this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", {});\n    };\n\n    this.hideValidateFormula = () => {\n      this.setState({\n        openValidate: false,\n        showCalculate: false,\n        formulaScreenName: \"\",\n        validateFormulaMandyFields: []\n      });\n    };\n\n    this.validateFormula = testData => {\n      const sformulacalculationcode = this.state.selectedRecord.sformulacalculationcode;\n\n      if (sformulacalculationcode) {\n        if (sformulacalculationcode.includes(\"$D\") || sformulacalculationcode.includes(\"$P\")) {\n          rsapi.post(\"/testmaster/validateTestFormula\", {\n            ntestcode: testData.ntestcode,\n            \"sformula\": sformulacalculationcode,\n            userinfo: this.props.userInfo\n          }).then(response => {\n            let selectedRecord = this.state.selectedRecord || {};\n            selectedRecord[\"formulainput\"] = {};\n            const validateFormulaMandyFields = response.data.map((item, index) => {\n              return {\n                \"idsName\": \"IDS_FILLALLFIELDS\",\n                \"dataField\": \"dynamicformulafield_\" + index,\n                \"mandatory\": true\n              };\n            });\n            this.setState({\n              openValidate: true,\n              DynamicFields: response.data,\n              dynamicField: [],\n              selectedRecord,\n              formulaScreenName: \"IDS_VALIDATEFORMULA\",\n              showCalculate: true,\n              validateFormulaMandyFields\n            });\n          }).catch(error => {\n            toast.error(error.message);\n          });\n        } else {\n          const inputParam = {\n            dynamicformulafields: [],\n            sformulacalculationcode: this.state.selectedRecord.sformulacalculationcode,\n            userinfo: this.props.userInfo\n          };\n          this.calculateFormulaFunction(inputParam);\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ENTERFORMULA\"\n        }));\n      }\n    };\n\n    this.calculateFormula = () => {\n      const dynamicField = this.state.dynamicField;\n      const dynamicformulafields = Object.keys(dynamicField).map(keyname => {\n        return dynamicField[keyname];\n      });\n      const inputParam = {\n        dynamicformulafields: dynamicformulafields,\n        sformulacalculationcode: this.state.selectedRecord.sformulacalculationcode,\n        userinfo: this.props.userInfo\n      };\n      this.calculateFormulaFunction(inputParam);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.loadEsign;\n      let openChildModal = this.props.openChildModal;\n      let selectedRecord = this.props.selectedRecord;\n\n      if (this.props.loadEsign) {\n        if (this.props.operation === \"delete\" || this.props.operation === \"Default\") {\n          loadEsign = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord[\"agree\"] = 4;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (fieldName === \"sparametername\") {\n            selectedRecord[fieldName] = comboData;\n            selectedRecord[\"sparametersynonym\"] = comboData.value;\n          } else {\n            selectedRecord[fieldName] = comboData;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 2:\n          const parameterData = this.props.parameterData;\n          let item = comboData['item'];\n          let needUnit = true;\n          let needRoundingDigit = true;\n          let needCodedResult = true;\n          let needActualResult = true;\n          let npredefinedcode = 4;\n\n          if (item[\"nunitrequired\"] === 3) {\n            needUnit = false;\n            selectedRecord[\"nunitcode\"] = this.props.parameterData.defaultUnit;\n          } else {\n            selectedRecord[\"nunitcode\"] = \"\";\n          }\n\n          if (item[\"nroundingrequired\"] === 3) {\n            needRoundingDigit = false;\n          } else {\n            selectedRecord[\"nroundingdigits\"] = \"\";\n          }\n\n          if (item[\"npredefinedrequired\"] === 3) {\n            needCodedResult = false;\n            npredefinedcode = item[\"npredefinedrequired\"];\n          } else {\n            selectedRecord[\"spredefinedname\"] = \"\";\n          }\n\n          if (item[\"ngraderequired\"] === 3) {\n            needActualResult = false;\n            selectedRecord[\"ngradecode\"] = this.props.parameterData.defaultGrade;\n          } else {\n            selectedRecord[\"ngradecode\"] = \"\";\n          }\n\n          selectedRecord[fieldName] = comboData;\n          const parameterInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord,\n              parameterData: { ...parameterData,\n                needUnit,\n                needRoundingDigit,\n                needCodedResult,\n                needActualResult,\n                npredefinedcode\n              }\n            }\n          };\n          this.props.updateStore(parameterInfo);\n          break;\n\n        case 3:\n          selectedRecord[fieldName] = comboData;\n          this.props.formulaChangeFunction({\n            ntestcategorycode: comboData.value,\n            nFlag: 2,\n            userinfo: this.props.userInfo\n          }, this.props.formulaData, 1, selectedRecord, '/changeTestCatgoryInFormula');\n          break;\n\n        case 4:\n          selectedRecord[fieldName] = comboData;\n          this.props.formulaChangeFunction({\n            ntestcode: comboData.value,\n            nFlag: 3,\n            userinfo: this.props.userInfo\n          }, this.props.formulaData, 2, selectedRecord, '/changeTestInFormula');\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = (event, caseNo, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (event.target.type === 'checkbox') {\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n          } else if (event.target.type === 'radio') {\n            selectedRecord[event.target.name] = optional; //  selectedRecord[\"sfilename\"]=\"\";\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 4:\n          const inputValue = event.target.value;\n\n          if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 5:\n          if (optional.ndynamicformulafieldcode === FORMULAFIELDTYPE.INTEGER && optional.sdescription.indexOf('P$') === -1) {\n            const value = event.target.value.replace(/[^-^0-9]/g, '');\n            const dynamicField = this.state.dynamicField || [];\n\n            if (/^-?\\d*?$/.test(value)) {\n              if (!selectedRecord['formulainput']) {\n                selectedRecord['formulainput'] = {};\n              }\n\n              selectedRecord['formulainput'][event.target.name] = value;\n              dynamicField[event.target.name] = {\n                sparameter: optional.sdescription,\n                svalues: value\n              };\n            } else if (value === \"\") {\n              if (!selectedRecord['formulainput']) {\n                selectedRecord['formulainput'] = {};\n              }\n\n              selectedRecord['formulainput'][event.target.name] = value;\n              dynamicField[event.target.name] = {\n                sparameter: optional.sdescription,\n                svalues: value\n              };\n            }\n\n            this.setState({\n              dynamicField,\n              selectedRecord\n            });\n            break;\n          } else {\n            const value = event.target.value.replace(/[^-^0-9.]/g, '');\n            const dynamicField = this.state.dynamicField || [];\n\n            if (/^-?\\d*?\\.?\\d*?$/.test(value) || value !== \"\") {\n              if (!selectedRecord['formulainput']) {\n                selectedRecord['formulainput'] = {};\n              }\n\n              selectedRecord['formulainput'][event.target.name] = value;\n              dynamicField[event.target.name] = {\n                sparameter: optional.sdescription,\n                svalues: value\n              };\n            }\n\n            this.setState({\n              dynamicField,\n              selectedRecord\n            });\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      console.log(\"value:\", value, name);\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (name === \"nroundingdigits\") {\n        const values = value.target.value.replace(/[^-^0-9]/g, '');\n\n        if (/^-?\\d*?$/.test(values) || values === \"\") {\n          console.log(\"val:\", values);\n          selectedRecord[name] = values;\n        }\n      } else {\n        selectedRecord[name] = value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputParam = {};\n      let defaultInput = {};\n      let isValidRequest = true;\n\n      if (this.props.screenName === \"IDS_PARAMETER\") {\n        inputParam = this.onSaveParameter(saveType, formRef);\n        defaultInput = {\n          nparametertypecode: this.state.selectedRecord.nparametertypecode,\n          ngradecode: this.state.selectedRecord.ngradecode,\n          nunitcode: \"\"\n        };\n      } else if (this.props.screenName === \"IDS_CODEDRESULT\") {\n        inputParam = this.onSaveCodedResult(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_SPECIFICATION\") {\n        const selectedRecord = this.props.selectedRecord;\n\n        if (selectedRecord[\"sminb\"] || selectedRecord[\"smina\"] || selectedRecord[\"smaxa\"] || selectedRecord[\"smaxa\"] || selectedRecord[\"sminlod\"] || selectedRecord[\"smaxlod\"] || selectedRecord[\"sminloq\"] || selectedRecord[\"smaxloq\"] || selectedRecord[\"sdisregard\"] || selectedRecord[\"sresultvalue\"]) {\n          inputParam = this.onSaveSpecification(saveType, formRef);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_ENTERSPECLIMIT\"\n          }));\n          isValidRequest = false;\n        }\n      } else if (this.props.screenName === \"IDS_FORMULA\") {\n        inputParam = this.onSaveFormula(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_TESTFILE\") {\n        inputParam = this.onSaveTestFile(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\n        inputParam = this.saveContainerType(saveType, formRef);\n      } else {\n        inputParam = this.saveTestData(saveType, formRef);\n      }\n\n      if (isValidRequest) {\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", defaultInput);\n        }\n      }\n    };\n\n    this.onSaveParameter = (saveType, formRef) => {\n      const storeData = this.props;\n      let inputData = {};\n      let customobject = null;\n      const userInfo = storeData.userInfo;\n      let postParam = undefined;\n      const selectedRecord = this.state.selectedRecord;\n      let testColumns = [{\n        \"ntestparametercode\": \"int\"\n      }, {\n        \"nparametertypecode\": \"input\"\n      }, {\n        \"nunitcode\": \"input\"\n      }, {\n        \"sparametername\": \"input\"\n      }, {\n        \"sparametersynonym\": \"string\"\n      }, {\n        \"nroundingdigits\": \"int\"\n      }, {\n        \"objPredefinedParameter\": \"customobject\"\n      }];\n\n      if (storeData.operation === \"create\") {\n        inputData = {\n          \"testparameter\": {\n            nisadhocparameter: transactionStatus.NO,\n            nisvisible: transactionStatus.YES,\n            nstatus: transactionStatus.ACTIVE\n          }\n        };\n      } else {\n        inputData = {\n          \"testparameter\": {}\n        };\n        let selectedId = null;\n\n        if (storeData.operation === \"update\") {\n          // edit\n          postParam = {\n            inputListName: \"TestMaster\",\n            selectedObject: \"SelectedTest\",\n            primaryKeyField: \"ntestcode\"\n          };\n          selectedId = selectedRecord[\"ntestparametercode\"];\n        }\n      }\n\n      if (selectedRecord[\"nparametertypecode\"]) {\n        if (this.props.parameterData.npredefinedcode === transactionStatus.YES) {\n          customobject = {};\n          customobject[\"ntestparametercode\"] = selectedRecord[\"ntestparametercode\"];\n          customobject[\"ntestpredefinedcode\"] = selectedRecord[\"ntestpredefinedcode\"];\n          customobject[\"spredefinedname\"] = selectedRecord[\"spredefinedname\"].trim();\n          customobject[\"nstatus\"] = 1;\n          customobject[\"ndefaultstatus\"] = transactionStatus.YES;\n          customobject[\"ngradecode\"] = selectedRecord[\"ngradecode\"] ? selectedRecord[\"ngradecode\"].value ? selectedRecord[\"ngradecode\"].value : -1 : -1;\n        }\n\n        inputData[\"userinfo\"] = userInfo;\n        testColumns.map(item => {\n          const key = Object.keys(item)[0];\n          const value = Object.values(item)[0];\n\n          if (value === \"input\") {\n            return inputData[\"testparameter\"][key] = selectedRecord[key] ? selectedRecord[key].value ? selectedRecord[key].value : -1 : -1;\n          } else if (value === \"int\") {\n            return inputData[\"testparameter\"][key] = selectedRecord[key] ? selectedRecord[key] : 0;\n          } else if (value === \"string\") {\n            return inputData[\"testparameter\"][key] = selectedRecord[key] ? selectedRecord[key].trim() : \"\";\n          } else if (value === \"customobject\") {\n            return inputData[\"testparameter\"][key] = customobject;\n          } else {\n            return null;\n          }\n        });\n        inputData[\"testparameter\"][\"ntestcode\"] = storeData.masterData[\"SelectedTest\"][\"ntestcode\"];\n      }\n\n      const inputParam = {\n        inputData,\n        classUrl: \"testmaster\",\n        operation: storeData.operation,\n        methodUrl: \"TestParameter\",\n        saveType,\n        formRef,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onSaveSpecification = (saveType, formRef) => {\n      const selectedRecord = this.props.selectedRecord;\n      const columns = [{\n        \"ntestparametercode\": \"int\"\n      }, {\n        \"ntestparamnumericcode\": \"int\"\n      }, {\n        \"sminb\": \"string\"\n      }, {\n        \"smina\": \"string\"\n      }, {\n        \"smaxa\": \"string\"\n      }, {\n        \"smaxb\": \"string\"\n      }, {\n        \"sminlod\": \"string\"\n      }, {\n        \"smaxlod\": \"string\"\n      }, {\n        \"sminloq\": \"string\"\n      }, {\n        \"smaxloq\": \"string\"\n      }, {\n        \"sdisregard\": \"string\"\n      }, {\n        \"sresultvalue\": \"string\"\n      }];\n      let inputData = {\n        \"testparameternumeric\": {\n          nstatus: 1\n        },\n        userinfo: this.props.userInfo\n      };\n      columns.map(item => {\n        const key = Object.keys(item)[0];\n        const value = Object.values(item)[0];\n\n        if (value === \"int\") {\n          return inputData[\"testparameternumeric\"][key] = selectedRecord[key] ? selectedRecord[key] : 0;\n        } else if (value === \"string\") {\n          return inputData[\"testparameternumeric\"][key] = selectedRecord[key] ? selectedRecord[key] === \"0\" ? selectedRecord[key] : selectedRecord[key].replace(/^0+/, '') : null;\n        } else {\n          return null;\n        }\n      });\n      let selectedId = null;\n      let postParam = undefined;\n\n      if (this.props.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"TestMaster\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestcode\"\n        };\n        selectedId = selectedRecord[\"ntestparametercode\"];\n      }\n\n      const inputParam = {\n        inputData,\n        classUrl: \"testmaster\",\n        operation: this.props.operation,\n        methodUrl: \"TestParameterNumeric\",\n        saveType,\n        formRef,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onSaveCodedResult = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const testPredefinedParameter = {\n        spredefinedname: selectedRecord[\"spredefinedname\"].trim(),\n        ngradecode: selectedRecord[\"ngradecode\"] ? selectedRecord[\"ngradecode\"].value ? selectedRecord[\"ngradecode\"].value : -1 : -1,\n        ntestparametercode: selectedRecord[\"ntestparametercode\"],\n        ntestpredefinedcode: selectedRecord[\"ntestpredefinedcode\"],\n        nstatus: transactionStatus.ACTIVE,\n        ndefaultstatus: selectedRecord[\"ndefaultstatus\"] //transactionStatus.NO\n\n      }; //let selectedId = null;\n\n      let postParam = undefined;\n\n      if (this.props.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"TestMaster\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestcode\"\n        }; //selectedId = selectedRecord[\"ntestparametercode\"];               \n      }\n\n      const inputParam = {\n        inputData: {\n          testpredefinedparameter: testPredefinedParameter,\n          userinfo: this.props.userInfo\n        },\n        classUrl: \"testmaster\",\n        operation: this.props.operation,\n        methodUrl: \"TestPredefinedParameter\",\n        saveType,\n        formRef,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onSaveFormula = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const formulafield = [\"sformulaname\", \"sformulacalculationcode\", \"sformulacalculationdetail\"];\n      const selectedParameter = this.props.masterData.selectedParameter;\n      let testformula = {\n        ntestcode: selectedParameter[\"ntestcode\"],\n        ntestparametercode: selectedParameter[\"ntestparametercode\"],\n        ndefaultstatus: transactionStatus.NO,\n        nstatus: transactionStatus.ACTIVE\n      };\n      formulafield.map(field => {\n        return testformula[field] = selectedRecord[field].trim();\n      });\n      let selectedId = null;\n      let postParam = undefined;\n\n      if (this.props.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"TestMaster\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestcode\"\n        };\n        selectedId = selectedRecord[\"ntestparametercode\"];\n      }\n\n      const inputParam = {\n        inputData: {\n          testformula: testformula,\n          userinfo: this.props.userInfo\n        },\n        classUrl: \"testmaster\",\n        operation: \"create\",\n        methodUrl: \"TestFormula\",\n        saveType,\n        formRef,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.clearFormula = () => {\n      const selectedRecord = this.state.selectedRecord;\n      selectedRecord[\"sformulacalculationcode\"] = \"\";\n      selectedRecord[\"sformulacalculationdetail\"] = \"\";\n      selectedRecord[\"userinput\"] = \"\";\n      this.setState({\n        fieldFlag: true,\n        operatorFlag: false,\n        functionFlag: true,\n        selectedRecord,\n        query: \"\",\n        result: \"\",\n        openValidate: false,\n        sfunctionsyntax: \"\"\n      });\n    };\n\n    this.onUserInputs = event => {\n      const value = event.target.value.replace(/^0+/, '');\n      let selectedRecord = this.state.selectedRecord || {};\n\n      if (event.keyCode === 13) {\n        if (this.state.fieldFlag) {\n          const sformulacalculationdetail = selectedRecord.sformulacalculationdetail ? selectedRecord.sformulacalculationdetail : \"\";\n          const sformulacalculationcode = selectedRecord.sformulacalculationcode ? selectedRecord.sformulacalculationcode : \"\";\n          selectedRecord[\"sformulacalculationcode\"] = `${sformulacalculationcode}$V${value}V$`;\n          selectedRecord[\"sformulacalculationdetail\"] = `${sformulacalculationdetail} ${value}`;\n          selectedRecord[event.target.name] = \"\";\n          this.setState({\n            fieldFlag: false,\n            functionFlag: false,\n            operatorFlag: true,\n            selectedRecord\n          });\n        }\n      }\n    };\n\n    this.getSyntax = event => {\n      this.setState({\n        sfunctionsyntax: event.dataItem.sfunctionsyntax\n      });\n    };\n\n    this.onSaveTestFile = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let testFileArray = [];\n      let testFile = {\n        ntestcode: this.props.masterData.SelectedTest.ntestcode,\n        ntestfilecode: selectedRecord.ntestfilecode ? selectedRecord.ntestfilecode : 0,\n        nstatus: transactionStatus.ACTIVE,\n        nattachmenttypecode,\n        ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\n      };\n      const formData = new FormData();\n\n      if (nattachmenttypecode === attachmentType.FTP) {\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          acceptedFiles.forEach((file, index) => {\n            const tempData = Object.assign({}, testFile);\n            const splittedFileName = file.name.split('.');\n            const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n            const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\n            const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\n            const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntestfilecode && selectedRecord.ntestfilecode > 0 && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n            tempData[\"sfilename\"] = file.name;\n            tempData[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\n            tempData[\"nlinkcode\"] = transactionStatus.NA;\n            tempData[\"ssystemfilename\"] = uniquefilename;\n            tempData[\"nfilesize\"] = file.size;\n            formData.append(\"uploadedFile\" + index, file);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            testFileArray.push(tempData);\n          });\n          formData.append(\"filecount\", acceptedFiles.length);\n          isFileEdited = transactionStatus.YES;\n        } else {\n          testFile[\"sfilename\"] = selectedRecord.sfilename;\n          testFile[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\n          testFile[\"nlinkcode\"] = transactionStatus.NA;\n          testFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n          testFile[\"nfilesize\"] = selectedRecord.nfilesize;\n          testFileArray.push(testFile);\n        }\n      } else {\n        testFile[\"sfilename\"] = selectedRecord.slinkfilename.trim();\n        testFile[\"sdescription\"] = selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\";\n        testFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n        testFile[\"ssystemfilename\"] = \"\";\n        testFile[\"nfilesize\"] = 0;\n        testFileArray.push(testFile);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"testfile\", JSON.stringify(testFileArray)); // formData.append(\"userinfo\", JSON.stringify(this.props.userInfo));\n\n      let selectedId = null;\n      let postParam = undefined;\n\n      if (this.props.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"TestMaster\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestcode\"\n        };\n        selectedId = selectedRecord[\"ntestfilecode\"];\n      }\n\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.operation,\n        classUrl: \"testmaster\",\n        saveType,\n        formRef,\n        methodUrl: \"TestFile\",\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onDropTestFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openChildModal\");\n    };\n\n    this.ConfirmDelete = (item, operation, ncontrolCode, methodUrl, modalName) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.props.deleteAction(item, operation, ncontrolCode, methodUrl, modalName));\n    };\n\n    this.state = {\n      selectedRecord: {},\n      fieldFlag: true,\n      operatorFlag: false,\n      functionFlag: true,\n      sectionDataState: {\n        skip: 0,\n        take: 10\n      },\n      methodDataState: {\n        skip: 0,\n        take: 10\n      },\n      instrumentCatDataState: {\n        skip: 0,\n        take: 10\n      },\n      containerTypeDataState: {\n        skip: 0,\n        take: 10\n      },\n      formulaScreenName: \"\"\n    };\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  render() {\n    const {\n      SelectedTest\n    } = this.props.masterData;\n\n    if (this.props.openChildModal || this.state.openValidate) {\n      this.mandatoryFields = this.findMandatoryFields(this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.state.formulaScreenName : this.props.screenName, this.state.selectedRecord, this.state.formulaScreenName);\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, SelectedTest && /*#__PURE__*/React.createElement(CustomTab, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 34\n      }\n    }), this.props.openChildModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.state.openValidate : this.props.openChildModal,\n      size: this.props.screenName === \"IDS_FORMULA\" ? 'xl' : 'lg',\n      closeModal: this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.hideValidateFormula : this.closeModal,\n      operation: this.props.operation,\n      inputParam: this.props.inputParam,\n      screenName: this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.state.formulaScreenName : this.props.screenName,\n      esign: this.props.loadEsign,\n      validateEsign: this.validateEsign,\n      onSaveClick: this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.calculateFormula : this.onSaveClick,\n      showCalculate: this.state.showCalculate,\n      showSaveContinue: this.props.showSaveContinue,\n      selectedRecord: this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.state.selectedRecord['formulainput'] : this.state.selectedRecord || {},\n      mandatoryFields: this.mandatoryFields,\n      addComponent: this.props.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 29\n        }\n      }) : this.props.screenName === \"IDS_PARAMETER\" ? /*#__PURE__*/React.createElement(AddParameter, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        onComboChange: this.onComboChange,\n        parameterData: this.props.parameterData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 33\n        }\n      }) : this.props.screenName === \"IDS_CODEDRESULT\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(AddCodedResult, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        parameterData: this.props.parameterData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 41\n        }\n      })) : this.props.screenName === \"IDS_SPECIFICATION\" ? /*#__PURE__*/React.createElement(AddSpecification, {\n        selectedRecord: this.props.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 41\n        }\n      }) : this.props.screenName === \"IDS_SECTION\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(AddTestSection, {\n        selectedRecord: this.state.selectedRecord || {},\n        section: this.props.otherTestData.section,\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        isMulti: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 49\n        }\n      })) : this.props.screenName === \"IDS_METHOD\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(AddTestMethod, {\n        selectedRecord: this.state.selectedRecord || {},\n        method: this.props.otherTestData.method,\n        onComboChange: this.onComboChange,\n        isMulti: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 53\n        }\n      })) : this.state.formulaScreenName === \"\" && this.props.screenName === \"IDS_FORMULA\" ? /*#__PURE__*/React.createElement(AddFormula, {\n        selectedRecord: this.state.selectedRecord || {},\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        onFormulaDrop: this.onFormulaDrop.bind(this),\n        validateFormula: () => this.validateFormula(this.props.masterData.selectedParameter, this.state.selectedRecord, this.props.formulaData),\n        clearFormula: this.clearFormula,\n        onUserInputs: this.onUserInputs,\n        operators: this.props.formulaData.operators,\n        functions: this.props.formulaData.functions,\n        testCategory: this.props.formulaData.testCategory,\n        testMaster: this.props.formulaData.testMaster,\n        dynamicFormulaFields: this.props.formulaData.dynamicFormulaFields,\n        result: this.state.result ? this.state.result : \"\",\n        query: this.state.query ? this.state.query : \"\",\n        getSyntax: this.getSyntax,\n        sfunctionsyntax: this.state.sfunctionsyntax,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 53\n        }\n      }) : this.props.screenName === \"IDS_INSTRUMENTCATEGORY\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(AddTestInstrumentCategory, {\n        selectedRecord: this.state.selectedRecord || {},\n        instrumentcategory: this.props.otherTestData.instrumentcategory,\n        onComboChange: this.onComboChange,\n        isMulti: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 61\n        }\n      })) : this.props.screenName === \"IDS_PACKAGE\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 55\n        }\n      }, /*#__PURE__*/React.createElement(AddTestPackageTest, {\n        selectedRecord: this.state.selectedRecord || {},\n        package: this.props.otherTestData.package,\n        onComboChange: this.onComboChange,\n        isMulti: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 54\n        }\n      })) : this.props.screenName === \"IDS_CONTAINERTYPE\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(AddTestContainerType, {\n        selectedRecord: this.state.selectedRecord || {},\n        containertype: this.props.otherTestData.containertype,\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        isMulti: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 61\n        }\n      })) : this.props.screenName === \"IDS_TESTFILE\" ? /*#__PURE__*/React.createElement(AddFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onDrop: this.onDropTestFile,\n        onDropAccepted: this.onDropAccepted,\n        deleteAttachment: this.deleteAttachment,\n        actionType: this.state.actionType,\n        onComboChange: this.onComboChange,\n        linkMaster: this.props.linkMaster,\n        editFiles: this.props.editFiles,\n        maxSize: 20 // maxFiles={this.props.operation === \"update\" ? 1 : 3}\n        // multiple={this.props.operation === \"update\" ? false : true}\n        ,\n        maxFiles: 1,\n        multiple: false,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_TESTFILE\"\n        }),\n        name: \"testfilename\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 61\n        }\n      }) : this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? /*#__PURE__*/React.createElement(ValidateFormula, {\n        DynamicFormulaFields: this.state.DynamicFields,\n        selectedRecord: this.state.selectedRecord,\n        onInputOnChange: this.onInputOnChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 65\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  findMandatoryFields(screenName, selectedRecord, optional) {\n    let mandyFields = [];\n\n    if (screenName === \"IDS_SECTION\") {\n      mandyFields = [{\n        \"idsName\": \"IDS_SECTION\",\n        \"dataField\": \"availableData\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n    } else if (screenName === \"IDS_METHOD\") {\n      mandyFields = [{\n        \"idsName\": \"IDS_METHOD\",\n        \"dataField\": \"availableData\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n    } else if (screenName === \"IDS_INSTRUMENTCATEGORY\") {\n      mandyFields = [{\n        \"idsName\": \"IDS_INSTRUMENTCATEGORY\",\n        \"dataField\": \"availableData\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n    } else if (screenName === \"IDS_FORMULA\" && optional === \"\") {\n      mandyFields = [{\n        \"idsName\": \"IDS_FORMULANAME\",\n        \"dataField\": \"sformulaname\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_FORMULA\",\n        \"dataField\": \"sformulacalculationdetail\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }];\n    } else if (screenName === \"IDS_PARAMETER\") {\n      mandyFields = [{\n        \"idsName\": \"IDS_PARAMETERNAME\",\n        \"dataField\": \"sparametername\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_PARAMETERSYNONYM\",\n        \"dataField\": \"sparametersynonym\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_PARAMETERTYPE\",\n        \"dataField\": \"nparametertypecode\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n\n      if (selectedRecord && Object.values(selectedRecord).length > 0 && selectedRecord[\"nparametertypecode\"]) {\n        if (selectedRecord[\"nparametertypecode\"].value === parameterType.NUMERIC) {\n          mandyFields.push({\n            \"idsName\": \"IDS_ROUNDINGDIGITS\",\n            \"dataField\": \"nroundingdigits\",\n            \"mandatory\": true,\n            \"mandatoryLabel\": \"IDS_ENTER\",\n            \"controlType\": \"textbox\"\n          }, {\n            \"idsName\": \"IDS_UNIT\",\n            \"dataField\": \"nunitcode\",\n            \"mandatory\": true,\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n        } else if (selectedRecord[\"nparametertypecode\"].value === parameterType.PREDEFINED) {\n          mandyFields.push({\n            \"idsName\": \"IDS_CODEDRESULT\",\n            \"dataField\": \"spredefinedname\",\n            \"mandatory\": true,\n            \"mandatoryLabel\": \"IDS_ENTER\",\n            \"controlType\": \"textbox\"\n          }, {\n            \"idsName\": \"IDS_ACTUALRESULT\",\n            \"dataField\": \"ngradecode\",\n            \"mandatory\": true,\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n        }\n      }\n    } else if (screenName === \"IDS_VALIDATEFORMULA\") {\n      mandyFields = this.state.validateFormulaMandyFields;\n    } else if (screenName === \"IDS_TESTFILE\") {\n      if (this.state.selectedRecord && this.state.selectedRecord.nattachmenttypecode === attachmentType.LINK) {\n        mandyFields = [{\n          \"idsName\": \"IDS_FILENAME\",\n          \"dataField\": \"slinkfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }, {\n          \"idsName\": \"IDS_LINKNAME\",\n          \"dataField\": \"nlinkcode\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      } else {\n        // if (this.props.operation !== 'update') {\n        mandyFields = [{\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }]; // }\n      }\n    } else if (screenName === \"IDS_CONTAINERTYPE\") {\n      mandyFields = [{\n        \"idsName\": \"IDS_CONTAINERTYPE\",\n        \"dataField\": \"ncontainertypecode\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_QUANTITY\",\n        \"dataField\": \"nquantity\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }];\n    } else {\n      return [];\n    }\n\n    let finalMandyFields = [];\n    mandyFields.forEach(item => item.mandatory === true && finalMandyFields.push(item));\n    return finalMandyFields;\n  }\n\n  calculateFormulaFunction(inputParam) {\n    rsapi.post(\"/testmaster/calculateFormula\", { ...inputParam\n    }).then(response => {\n      this.setState({\n        openValidate: false,\n        query: response.data[\"Query\"],\n        result: response.data[\"Result\"],\n        showCalculate: false,\n        formulaScreenName: \"\"\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        //toast.warn(error.response.data);\n        toast.warn(error.response.data[\"Result\"]);\n      }\n    });\n  }\n\n  saveContainerType(saveType, formRef) {\n    let inputData = {};\n    let methodUrl = \"TestContainerType\";\n\n    if (this.props.operation == \"create\") {\n      this.state.selectedRecord['ncontainertypecode']['item']['nquantity'] = Number.parseFloat(this.state.selectedRecord.nquantity).toFixed(3);\n      this.state.selectedRecord['ncontainertypecode']['item']['noutsourcecode'] = parseInt(this.state.selectedRecord.noutsourcecode);\n      inputData = {\n        [methodUrl.toLocaleLowerCase()]: this.state.selectedRecord.ncontainertypecode.item,\n        ntestcontainertypecode: this.state.selectedRecord.ntestcontainertypecode,\n        ntestcode: this.state.selectedRecord.ntestcode,\n        userinfo: this.props.userInfo,\n        testcode: this.props.masterData.SelectedTest.ntestcode\n      };\n    } else {\n      inputData = {\n        ntestcontainertypecode: this.state.selectedRecord.ntestcontainertypecode,\n        ntestcode: this.state.selectedRecord.ntestcode,\n        ncontainertypecode: this.state.selectedRecord.ncontainertypecode.value,\n        nquantity: parseInt(Number.parseFloat(this.state.selectedRecord.nquantity).toFixed(3)),\n        noutsourcecode: this.state.selectedRecord.noutsourcecode,\n        userinfo: this.props.userInfo,\n        testcode: this.props.masterData.SelectedTest.ntestcode\n      };\n    }\n\n    const inputParam = {\n      inputData: inputData,\n      classUrl: \"testmaster\",\n      operation: this.props.operation,\n      methodUrl: methodUrl,\n      saveType,\n      formRef\n    };\n    return inputParam;\n  }\n\n  saveTestData(saveType, formRef) {\n    let availableData = [];\n    this.state.selectedRecord.availableData.map(data => {\n      return availableData.push(data.item);\n    });\n    let methodUrl = \"\";\n\n    if (this.props.screenName === \"IDS_SECTION\") {\n      //Test Section\n      methodUrl = \"TestSection\";\n    } else if (this.props.screenName === \"IDS_METHOD\") {\n      //Test Method\n      methodUrl = \"TestMethod\";\n    } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\n      //Test Instrument Category\n      methodUrl = \"TestInstrumentCategory\";\n    } else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\n      //Test Instrument Category\n      methodUrl = \"TestContainerType\";\n    } else if (this.props.screenName === \"IDS_PACKAGE\") {\n      //Test Package\n      methodUrl = \"Testpackage\";\n    } // let selectedId = null;\n\n\n    let postParam = undefined;\n\n    if (this.props.operation === \"update\") {\n      // edit\n      postParam = {\n        inputListName: \"TestMaster\",\n        selectedObject: \"SelectedTest\",\n        primaryKeyField: \"ntestcode\"\n      }; //  selectedId = selectedRecord[\"ntestparametercode\"];               \n    }\n\n    const inputParam = {\n      inputData: {\n        [methodUrl.toLocaleLowerCase()]: availableData,\n        userinfo: this.props.userInfo\n      },\n      classUrl: \"testmaster\",\n      operation: \"create\",\n      methodUrl: methodUrl,\n      saveType,\n      formRef,\n      postParam\n    };\n    return inputParam;\n  }\n\n  onFormulaDrop(data) {\n    let selectedRecord = this.state.selectedRecord;\n    let formulaName = \"\";\n    let formulaCalculationCode = \"\";\n    let fieldFlag = this.state.fieldFlag;\n    let functionFlag = this.state.functionFlag;\n    let operatorFlag = this.state.operatorFlag;\n    let sfunctionsyntax = \"\";\n    let isDropped = false;\n\n    if (data['testfields'] !== \"\") {\n      const testfields = JSON.parse(data['testfields']);\n\n      if (this.state.fieldFlag) {\n        let sformulacalculationdetail = selectedRecord.sformulacalculationdetail ? selectedRecord.sformulacalculationdetail : \"\";\n        let sformulacalculationcode = selectedRecord.sformulacalculationcode ? selectedRecord.sformulacalculationcode : \"\";\n        const sparametername = testfields.sparametername;\n        const ntestparametercode = testfields.ntestparametercode;\n\n        if (sparametername !== \"Parameter-Field\" && sparametername !== \"Formula-Field\" && sparametername !== \"Dynamic-Field\") {\n          if (testfields.isformula === 1) {\n            formulaName = `${sformulacalculationdetail} (${sparametername}) `;\n            formulaCalculationCode = `${sformulacalculationcode}$O20O$${ntestparametercode}$O18O$`;\n          } else {\n            formulaName = `${sformulacalculationdetail} ${sparametername}`;\n            formulaCalculationCode = `${sformulacalculationcode}$P${ntestparametercode}P$`;\n          }\n        } else if (sparametername !== \"Formula-Field\") {\n          formulaName = `${sformulacalculationdetail} ${testfields.stestname}`;\n          formulaCalculationCode = `${sformulacalculationcode}$D${ntestparametercode}D$`;\n        } else {\n          formulaName = `${sformulacalculationdetail} ${testfields.stestname}`;\n          formulaCalculationCode = `${sformulacalculationcode}${testfields.sformulacalculationcode}`;\n        }\n\n        fieldFlag = false;\n        functionFlag = false;\n        operatorFlag = true;\n        isDropped = true;\n      }\n    } else if (data['operatorfields'] !== \"\") {\n      const operatorfields = JSON.parse(data['operatorfields']);\n      const noperatorcode = operatorfields.noperatorcode;\n      const sformulacalculationdetail = selectedRecord.sformulacalculationdetail ? selectedRecord.sformulacalculationdetail : \"\";\n      const sformulacalculationcode = selectedRecord.sformulacalculationcode ? selectedRecord.sformulacalculationcode : \"\";\n\n      if (this.state.operatorFlag) {\n        formulaName = `${sformulacalculationdetail} ${operatorfields.soperator}`;\n        formulaCalculationCode = `${sformulacalculationcode}$O${noperatorcode}O$`;\n\n        if (noperatorcode === operators.OPENPARENTHESIS) {\n          fieldFlag = true;\n          functionFlag = true;\n          operatorFlag = false;\n        } else if (noperatorcode === operators.CLOSEPARENTHESIS) {\n          fieldFlag = false;\n          functionFlag = false;\n          operatorFlag = true;\n        } else {\n          fieldFlag = true;\n          functionFlag = true;\n          operatorFlag = false;\n        }\n\n        isDropped = true;\n      } else if (noperatorcode === operators.OPENPARENTHESIS) {\n        formulaName = `${sformulacalculationdetail} ${operatorfields.soperator}`;\n        formulaCalculationCode = `${sformulacalculationcode}$O${noperatorcode}O$`;\n        fieldFlag = true;\n        functionFlag = true;\n        operatorFlag = false;\n        isDropped = true;\n      } else if (noperatorcode === operators.CLOSEPARENTHESIS) {\n        formulaName = `${sformulacalculationdetail} ${operatorfields.soperator}`;\n        formulaCalculationCode = `${sformulacalculationcode}$O${noperatorcode}O$`;\n        fieldFlag = false;\n        functionFlag = false;\n        operatorFlag = true;\n        isDropped = true;\n      }\n    } else if (data['functionfields'] !== \"\") {\n      if (this.state.functionFlag) {\n        const functionfields = JSON.parse(data['functionfields']);\n        const sformulacalculationdetail = selectedRecord.sformulacalculationdetail ? selectedRecord.sformulacalculationdetail : \"\";\n        const sformulacalculationcode = selectedRecord.sformulacalculationcode ? selectedRecord.sformulacalculationcode : \"\";\n        formulaName = `${sformulacalculationdetail}${functionfields.sfunctionname}(`;\n        formulaCalculationCode = `${sformulacalculationcode}$F${functionfields.nfunctioncode}F$$O20O$`;\n        fieldFlag = true;\n        functionFlag = false;\n        operatorFlag = false;\n        sfunctionsyntax = functionfields.sfunctionsyntax;\n        isDropped = true;\n      }\n    }\n\n    if (isDropped) {\n      const sliceFormulaName = formulaName.slice(0, 512);\n\n      if (sliceFormulaName.length <= 512) {\n        selectedRecord[\"sformulacalculationcode\"] = formulaCalculationCode;\n        selectedRecord[\"sformulacalculationdetail\"] = sliceFormulaName;\n        this.setState({\n          fieldFlag,\n          functionFlag,\n          operatorFlag,\n          sfunctionsyntax,\n          selectedRecord\n        });\n      } else {\n        selectedRecord[\"sformulacalculationdetail\"] = sliceFormulaName;\n        this.setState({\n          fieldFlag,\n          functionFlag,\n          operatorFlag,\n          sfunctionsyntax,\n          selectedRecord\n        });\n      }\n    }\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.isFormulaOpen) {\n      this.setState({\n        fieldFlag: true,\n        operatorFlag: false,\n        functionFlag: true\n      });\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          isFormulaOpen: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n\n    if (this.props.masterData !== previousProps.masterData) {\n      let {\n        sectionDataState,\n        methodDataState,\n        instrumentCatDataState,\n        containerTypeDataState,\n        selectedRecord\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        if (this.props.screenName === \"IDS_SECTION\") {\n          sectionDataState = {\n            skip: 0,\n            take: 10\n          };\n        } else if (this.props.screenName === \"IDS_METHOD\") {\n          methodDataState = {\n            skip: 0,\n            take: 10\n          };\n        } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\n          instrumentCatDataState = {\n            skip: 0,\n            take: 10\n          };\n        } else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\n          containerTypeDataState = {\n            skip: 0,\n            take: 10\n          };\n        } else {\n          sectionDataState = {\n            skip: 0,\n            take: 10\n          };\n          methodDataState = {\n            skip: 0,\n            take: 10\n          };\n          instrumentCatDataState = {\n            skip: 0,\n            take: 10\n          };\n        }\n      }\n\n      this.setState({\n        sectionDataState,\n        methodDataState,\n        instrumentCatDataState,\n        containerTypeDataState,\n        selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default injectIntl(TestView);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testmanagement/TestView.jsx"],"names":["React","Component","toast","injectIntl","rsapi","process","Row","SlideOutModal","AddSpecification","AddCodedResult","AddParameter","DEFAULT_RETURN","showEsign","create_UUID","onDropAttachFileList","deleteAttachmentDropZone","Esign","AddTestSection","AddTestMethod","AddTestInstrumentCategory","AddFormula","ValidateFormula","AddFile","parameterType","transactionStatus","operators","attachmentType","FORMULAFIELDTYPE","CustomTab","TestSectionTab","TestMethodTab","TestInstrumentCategoryTab","TestFileTab","AddTestContainerType","TestContainerTypeTab","ParameterTab","ConfirmMessage","ChartLegendTitle","TestPackageTab","AddTestPackageTest","TestView","constructor","props","deleteAttachment","event","file","fieldName","selectedRecord","state","setState","actionType","onTabChange","tabProps","screenName","updateInfo","typeName","data","updateStore","tabDetail","tabMap","Map","set","controlMap","userRoleControlRights","masterData","TestParameter","userInfo","getTestDetails","inputParam","addParameter","deleteAction","ConfirmDelete","addCodedResult","addFormula","onSwitchChange","addParameterSpecification","undefined","sectionDataState","skip","take","dataState","SelectedTest","deleteRecord","defaultRecord","getAvailableData","TestSection","methodDataState","TestMethod","TestFile","addTestFile","viewTestFile","settings","instrumentCatDataState","TestInstrumentCategory","TestPackage","containerTypeDataState","Containertype","getActiveTestContainerTypeById","intl","filedata","inputData","testfile","userinfo","classUrl","operation","methodUrl","viewAttachment","deleteParam","selected","toLowerCase","esignRights","nformcode","ncontrolCode","loadEsign","screenData","openChildModal","crudMaster","defaultParam","dataItem","postParam","inputListName","selectedObject","primaryKeyField","item","key","target","checked","YES","NO","hideValidateFormula","openValidate","showCalculate","formulaScreenName","validateFormulaMandyFields","validateFormula","testData","sformulacalculationcode","includes","post","ntestcode","then","response","map","index","DynamicFields","dynamicField","catch","error","message","dynamicformulafields","calculateFormulaFunction","info","formatMessage","id","calculateFormula","Object","keys","keyname","closeModal","onComboChange","comboData","caseNo","value","parameterData","needUnit","needRoundingDigit","needCodedResult","needActualResult","npredefinedcode","defaultUnit","defaultGrade","parameterInfo","formulaChangeFunction","ntestcategorycode","nFlag","formulaData","onEsignInputOnChange","type","name","onInputOnChange","optional","inputValue","test","ndynamicformulafieldcode","INTEGER","sdescription","indexOf","replace","sparameter","svalues","onNumericInputChange","console","log","values","onSaveClick","saveType","formRef","defaultInput","isValidRequest","onSaveParameter","nparametertypecode","ngradecode","nunitcode","onSaveCodedResult","onSaveSpecification","warn","onSaveFormula","onSaveTestFile","saveContainerType","saveTestData","storeData","customobject","testColumns","nisadhocparameter","nisvisible","nstatus","ACTIVE","selectedId","trim","columns","testPredefinedParameter","spredefinedname","ntestparametercode","ntestpredefinedcode","ndefaultstatus","testpredefinedparameter","formulafield","selectedParameter","testformula","field","clearFormula","fieldFlag","operatorFlag","functionFlag","query","result","sfunctionsyntax","onUserInputs","keyCode","sformulacalculationdetail","getSyntax","acceptedFiles","sfilename","nattachmenttypecode","isFileEdited","testFileArray","testFile","ntestfilecode","LINK","formData","FormData","FTP","Array","isArray","length","forEach","tempData","assign","splittedFileName","split","fileExtension","ssystemfilename","filesystemfileext","uniquefilename","NA","size","append","push","nfilesize","slinkfilename","slinkdescription","nlinkcode","JSON","stringify","isFileupload","onDropTestFile","attachedFiles","maxSize","validateEsign","sreason","password","validateEsignCredential","modalName","confirmMessage","confirm","render","mandatoryFields","findMandatoryFields","showSaveContinue","otherTestData","section","method","onFormulaDrop","bind","functions","testCategory","testMaster","dynamicFormulaFields","instrumentcategory","package","containertype","onDropAccepted","linkMaster","editFiles","mandyFields","NUMERIC","PREDEFINED","finalMandyFields","mandatory","status","Number","parseFloat","nquantity","toFixed","parseInt","noutsourcecode","toLocaleLowerCase","ncontainertypecode","ntestcontainertypecode","testcode","availableData","formulaName","formulaCalculationCode","isDropped","testfields","parse","sparametername","isformula","stestname","operatorfields","noperatorcode","soperator","OPENPARENTHESIS","CLOSEPARENTHESIS","functionfields","sfunctionname","nfunctioncode","sliceFormulaName","slice","componentDidUpdate","previousProps","isFormulaOpen"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAO,2CAAP;AACA,OAAOC,aAAP,MAA0B,gDAA1B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,oBAAjC,EAAuDC,wBAAvD,QAAuF,+BAAvF;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,yBAAP,MAAsC,6BAAtC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,aAAT,EAAwBC,iBAAxB,EAA2CC,SAA3C,EAAsDC,cAAtD,EAAsEC,gBAAtE,QAA8F,8BAA9F;AACA,OAAOC,SAAP,MAAsB,oDAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,yBAAP,MAAsC,6BAAtC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,0DAA3B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AACA,MAAMC,QAAN,SAAuBvC,SAAvB,CAAiC;AAE7BwC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA8KnBC,gBA9KmB,GA8KA,CAACC,KAAD,EAAQC,IAAR,EAAcC,SAAd,KAA4B;AAC3C,UAAIC,cAAc,GAAG,KAAKC,KAAL,CAAWD,cAAX,IAA6B,EAAlD;AACAA,MAAAA,cAAc,CAACD,SAAD,CAAd,GAA4B/B,wBAAwB,CAACgC,cAAc,CAACD,SAAD,CAAf,EAA4BD,IAA5B,CAApD;AAEA,WAAKI,QAAL,CAAc;AACVF,QAAAA,cADU;AACMG,QAAAA,UAAU,EAAE,QADlB,CAC2B;;AAD3B,OAAd;AAGH,KArLkB;;AAAA,SA8PnBC,WA9PmB,GA8PJC,QAAD,IAAc;AACxB,YAAMC,UAAU,GAAGD,QAAQ,CAACC,UAA5B;AACA,YAAMC,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE5C,cADK;AAEf6C,QAAAA,IAAI,EAAE;AAAEH,UAAAA;AAAF;AAFS,OAAnB;AAIA,WAAKX,KAAL,CAAWe,WAAX,CAAuBH,UAAvB;AACH,KArQkB;;AAAA,SAuQnBI,SAvQmB,GAuQP,MAAM;AACd,YAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf;AACAD,MAAAA,MAAM,CAACE,GAAP,CAAW,eAAX,eACI,oBAAC,YAAD;AACI,QAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWoB,UAD3B;AAEI,QAAA,qBAAqB,EAAE,KAAKpB,KAAL,CAAWqB,qBAFtC;AAGI,QAAA,aAAa,EAAE,KAAKrB,KAAL,CAAWsB,UAAX,CAAsBC,aAHzC;AAII,QAAA,UAAU,EAAE,KAAKvB,KAAL,CAAWsB,UAJ3B;AAKI,QAAA,QAAQ,EAAE,KAAKtB,KAAL,CAAWwB,QALzB;AAMI,QAAA,cAAc,EAAE,KAAKxB,KAAL,CAAWyB,cAN/B;AAOI,QAAA,UAAU,EAAE,KAAKzB,KAAL,CAAW0B,UAP3B;AAQI,QAAA,YAAY,EAAE,KAAK1B,KAAL,CAAW2B,YAR7B;AASI,QAAA,YAAY,EAAE,KAAK3B,KAAL,CAAW4B,YAT7B;AAUI,QAAA,aAAa,EAAE,KAAKC,aAVxB;AAWI,QAAA,cAAc,EAAE,KAAK7B,KAAL,CAAW8B,cAX/B;AAYI,QAAA,UAAU,EAAE,KAAK9B,KAAL,CAAW+B,UAZ3B;AAaI,QAAA,cAAc,EAAE,KAAKC,cAbzB;AAcI,QAAA,yBAAyB,EAAE,KAAKhC,KAAL,CAAWiC,yBAd1C;AAeI,QAAA,UAAU,EAAC,eAff;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAmBAhB,MAAAA,MAAM,CAACE,GAAP,CAAW,aAAX,eACI,oBAAC,cAAD;AACI,QAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWoB,UAD3B;AAEI,QAAA,qBAAqB,EAAE,KAAKpB,KAAL,CAAWqB,qBAFtC;AAGI,QAAA,UAAU,EAAE1D,OAAO,CAAC,KAAKqC,KAAL,CAAWsB,UAAX,CAAsB,aAAtB,CAAD,EAAwC,KAAKtB,KAAL,CAAWW,UAAX,KAA0BuB,SAA1B,IAAuC,KAAKlC,KAAL,CAAWW,UAAX,KAA0B,aAAlE,GAAmF,KAAKL,KAAL,CAAW6B,gBAA9F,GAAiH;AAAEC,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SAAxJ,CAHvB;AAII,QAAA,SAAS,EAAG,KAAKrC,KAAL,CAAWW,UAAX,KAA0BuB,SAA1B,IAAuC,KAAKlC,KAAL,CAAWW,UAAX,KAA0B,aAAlE,GAAmF,KAAKL,KAAL,CAAW6B,gBAA9F,GAAiH;AAAEC,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SAJhI;AAKI,QAAA,eAAe,EAAGnC,KAAD,IAAW,KAAKK,QAAL,CAAc;AAAE4B,UAAAA,gBAAgB,EAAEjC,KAAK,CAACoC;AAA1B,SAAd,CALhC;AAMI,QAAA,YAAY,EAAE,KAAKtC,KAAL,CAAWsB,UAAX,CAAsBiB,YANxC;AAOI,QAAA,QAAQ,EAAE,KAAKvC,KAAL,CAAWwB,QAPzB;AAQI,QAAA,UAAU,EAAE,KAAKxB,KAAL,CAAW0B,UAR3B;AASI,QAAA,YAAY,EAAE,KAAKc,YATvB;AAUI,QAAA,aAAa,EAAE,KAAKC,aAVxB;AAWI,QAAA,gBAAgB,EAAE,KAAKzC,KAAL,CAAW0C,gBAXjC;AAYI,QAAA,WAAW,EAAE,KAAK1C,KAAL,CAAWsB,UAAX,CAAsBqB,WAAtB,IAAqC,EAZtD;AAaI,QAAA,UAAU,EAAC,aAbf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAgBA1B,MAAAA,MAAM,CAACE,GAAP,CAAW,YAAX,eACI,oBAAC,aAAD;AACI,QAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWoB,UAD3B;AAEI,QAAA,qBAAqB,EAAE,KAAKpB,KAAL,CAAWqB,qBAFtC;AAGI,QAAA,UAAU,EAAE1D,OAAO,CAAC,KAAKqC,KAAL,CAAWsB,UAAX,CAAsB,YAAtB,CAAD,EAAuC,KAAKtB,KAAL,CAAWW,UAAX,KAA0BuB,SAA1B,IAAuC,KAAKlC,KAAL,CAAWW,UAAX,KAA0B,YAAlE,GAAkF,KAAKL,KAAL,CAAWsC,eAA7F,GAA+G;AAAER,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SAArJ,CAHvB;AAII,QAAA,SAAS,EAAG,KAAKrC,KAAL,CAAWW,UAAX,KAA0BuB,SAA1B,IAAuC,KAAKlC,KAAL,CAAWW,UAAX,KAA0B,YAAlE,GAAkF,KAAKL,KAAL,CAAWsC,eAA7F,GAA+G;AAAER,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SAJ9H;AAKI,QAAA,eAAe,EAAGnC,KAAD,IAAW,KAAKK,QAAL,CAAc;AAAEqC,UAAAA,eAAe,EAAE1C,KAAK,CAACoC;AAAzB,SAAd,CALhC;AAMI,QAAA,YAAY,EAAE,KAAKtC,KAAL,CAAWsB,UAAX,CAAsBiB,YANxC;AAOI,QAAA,QAAQ,EAAE,KAAKvC,KAAL,CAAWwB,QAPzB;AAQI,QAAA,UAAU,EAAE,KAAKxB,KAAL,CAAW0B,UAR3B;AASI,QAAA,YAAY,EAAE,KAAKc,YATvB;AAUI,QAAA,aAAa,EAAE,KAAKC,aAVxB;AAWI,QAAA,gBAAgB,EAAE,KAAKzC,KAAL,CAAW0C,gBAXjC;AAYI,QAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWsB,UAAX,CAAsBuB,UAAtB,IAAoC,EAZpD;AAaI,QAAA,UAAU,EAAC,YAbf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAiBA5B,MAAAA,MAAM,CAACE,GAAP,CAAW,UAAX,eACI,oBAAC,WAAD;AACI,QAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWoB,UAD3B;AAEI,QAAA,qBAAqB,EAAE,KAAKpB,KAAL,CAAWqB,qBAFtC;AAGI,QAAA,QAAQ,EAAE,KAAKrB,KAAL,CAAWwB,QAHzB;AAII,QAAA,UAAU,EAAE,KAAKxB,KAAL,CAAW0B,UAJ3B;AAKI,QAAA,YAAY,EAAE,KAAKc,YALvB;AAMI,QAAA,QAAQ,EAAE,KAAKxC,KAAL,CAAWsB,UAAX,CAAsBwB,QAAtB,IAAkC,EANhD;AAOI,QAAA,gBAAgB,EAAE,KAAK9C,KAAL,CAAW0C,gBAPjC;AAQI,QAAA,WAAW,EAAE,KAAK1C,KAAL,CAAW+C,WAR5B;AASI,QAAA,YAAY,EAAE,KAAKC,YATvB;AAUI,QAAA,aAAa,EAAE,KAAKP,aAVxB;AAWI,QAAA,UAAU,EAAC,UAXf;AAYI,QAAA,QAAQ,EAAI,KAAKzC,KAAL,CAAWiD,QAZ3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAeAhC,MAAAA,MAAM,CAACE,GAAP,CAAW,wBAAX,eACI,oBAAC,yBAAD;AACI,QAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWoB,UAD3B;AAEI,QAAA,qBAAqB,EAAE,KAAKpB,KAAL,CAAWqB,qBAFtC;AAGI,QAAA,UAAU,EAAE1D,OAAO,CAAC,KAAKqC,KAAL,CAAWsB,UAAX,CAAsB,wBAAtB,CAAD,EAAmD,KAAKtB,KAAL,CAAWW,UAAX,KAA0BuB,SAA1B,IAAuC,KAAKlC,KAAL,CAAWW,UAAX,KAA0B,wBAAlE,GAA8F,KAAKL,KAAL,CAAW4C,sBAAzG,GAAkI;AAAEd,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SAApL,CAHvB;AAII,QAAA,SAAS,EAAG,KAAKrC,KAAL,CAAWW,UAAX,KAA0BuB,SAA1B,IAAuC,KAAKlC,KAAL,CAAWW,UAAX,KAA0B,wBAAlE,GAA8F,KAAKL,KAAL,CAAW4C,sBAAzG,GAAkI;AAAEd,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SAJjJ;AAKI,QAAA,eAAe,EAAGnC,KAAD,IAAW,KAAKK,QAAL,CAAc;AAAE2C,UAAAA,sBAAsB,EAAEhD,KAAK,CAACoC;AAAhC,SAAd,CALhC;AAMI,QAAA,YAAY,EAAE,KAAKtC,KAAL,CAAWsB,UAAX,CAAsBiB,YANxC;AAOI,QAAA,QAAQ,EAAE,KAAKvC,KAAL,CAAWwB,QAPzB;AAQI,QAAA,UAAU,EAAE,KAAKxB,KAAL,CAAW0B,UAR3B;AASI,QAAA,YAAY,EAAE,KAAKc,YATvB;AAUI,QAAA,aAAa,EAAE,KAAKC,aAVxB;AAWI,QAAA,gBAAgB,EAAE,KAAKzC,KAAL,CAAW0C,gBAXjC;AAYI,QAAA,sBAAsB,EAAE,KAAK1C,KAAL,CAAWsB,UAAX,CAAsB6B,sBAZlD;AAaI,QAAA,UAAU,EAAC,wBAbf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAkBAlC,MAAAA,MAAM,CAACE,GAAP,CAAW,aAAX,eACA,oBAAC,cAAD;AACI,QAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWoB,UAD3B;AAEI,QAAA,qBAAqB,EAAE,KAAKpB,KAAL,CAAWqB,qBAFtC;AAGI,QAAA,UAAU,EAAE1D,OAAO,CAAC,KAAKqC,KAAL,CAAWsB,UAAX,CAAsB,aAAtB,KAAwC,EAAzC,EAA8C,KAAKtB,KAAL,CAAWW,UAAX,KAA0BuB,SAA1B,IAAuC,KAAKlC,KAAL,CAAWW,UAAX,KAA0B,wBAAlE,GAA8F,KAAKL,KAAL,CAAW4C,sBAAzG,GAAkI;AAAEd,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SAA/K,CAHvB;AAII,QAAA,SAAS,EAAG,KAAKrC,KAAL,CAAWW,UAAX,KAA0BuB,SAA1B,IAAuC,KAAKlC,KAAL,CAAWW,UAAX,KAA0B,aAAlE,GAAmF,KAAKL,KAAL,CAAW4C,sBAA9F,GAAuH;AAAEd,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SAJtI;AAKI,QAAA,eAAe,EAAGnC,KAAD,IAAW,KAAKK,QAAL,CAAc;AAAE2C,UAAAA,sBAAsB,EAAEhD,KAAK,CAACoC;AAAhC,SAAd,CALhC;AAMI,QAAA,YAAY,EAAE,KAAKtC,KAAL,CAAWsB,UAAX,CAAsBiB,YANxC;AAOI,QAAA,QAAQ,EAAE,KAAKvC,KAAL,CAAWwB,QAPzB;AAQI,QAAA,UAAU,EAAE,KAAKxB,KAAL,CAAW0B,UAR3B;AASI,QAAA,YAAY,EAAE,KAAKc,YATvB;AAUI,QAAA,aAAa,EAAE,KAAKC,aAVxB;AAWI,QAAA,gBAAgB,EAAE,KAAKzC,KAAL,CAAW0C,gBAXjC;AAYI,QAAA,WAAW,EAAE,KAAK1C,KAAL,CAAWsB,UAAX,CAAsB8B,WAZvC;AAaI,QAAA,UAAU,EAAC,aAbf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA;AAkBAnC,MAAAA,MAAM,CAACE,GAAP,CAAW,mBAAX,eACA,oBAAC,oBAAD;AACI,QAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWoB,UAD3B;AAEI,QAAA,qBAAqB,EAAE,KAAKpB,KAAL,CAAWqB,qBAFtC;AAGI,QAAA,UAAU,EAAE1D,OAAO,CAAC,KAAKqC,KAAL,CAAWsB,UAAX,CAAsB,eAAtB,CAAD,EAA0C,KAAKtB,KAAL,CAAWW,UAAX,KAA0BuB,SAA1B,IAAuC,KAAKlC,KAAL,CAAWW,UAAX,KAA0B,mBAAlE,GAAyF,KAAKL,KAAL,CAAW+C,sBAApG,GAA6H;AAAEjB,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SAAtK,CAHvB;AAII,QAAA,SAAS,EAAG,KAAKrC,KAAL,CAAWW,UAAX,KAA0BuB,SAA1B,IAAuC,KAAKlC,KAAL,CAAWW,UAAX,KAA0B,mBAAlE,GAAyF,KAAKL,KAAL,CAAW+C,sBAApG,GAA6H;AAAEjB,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SAJ5I;AAKI,QAAA,eAAe,EAAGnC,KAAD,IAAW,KAAKK,QAAL,CAAc;AAAE8C,UAAAA,sBAAsB,EAAEnD,KAAK,CAACoC;AAAhC,SAAd,CALhC;AAMI,QAAA,YAAY,EAAE,KAAKtC,KAAL,CAAWsB,UAAX,CAAsBiB,YANxC;AAOI,QAAA,QAAQ,EAAE,KAAKvC,KAAL,CAAWwB,QAPzB;AAQI,QAAA,UAAU,EAAE,KAAKxB,KAAL,CAAW0B,UAR3B;AASI,QAAA,YAAY,EAAE,KAAKc,YATvB;AAUI,QAAA,aAAa,EAAE,KAAKC,aAVxB;AAWI,QAAA,gBAAgB,EAAE,KAAKzC,KAAL,CAAW0C,gBAXjC;AAYI,QAAA,iBAAiB,EAAE,KAAK1C,KAAL,CAAWsB,UAAX,CAAsBgC,aAZ7C;AAaI,QAAA,8BAA8B,EAAE,KAAKtD,KAAL,CAAWuD,8BAb/C;AAcI,QAAA,IAAI,EAAE,KAAKvD,KAAL,CAAWwD,IAdrB;AAeI,QAAA,UAAU,EAAC,mBAff;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA;AAoBA,aAAOvC,MAAP;AACH,KArYkB;;AAAA,SAuYnB+B,YAvYmB,GAuYHS,QAAD,IAAc;AACzB,YAAM/B,UAAU,GAAG;AACfgC,QAAAA,SAAS,EAAE;AACPC,UAAAA,QAAQ,EAAEF,QADH;AAEPG,UAAAA,QAAQ,EAAE,KAAK5D,KAAL,CAAWwB;AAFd,SADI;AAKfqC,QAAAA,QAAQ,EAAE,YALK;AAMfC,QAAAA,SAAS,EAAE,MANI;AAOfC,QAAAA,SAAS,EAAE,kBAPI;AAQfpD,QAAAA,UAAU,EAAE;AARG,OAAnB;AAUA,WAAKX,KAAL,CAAWgE,cAAX,CAA0BtC,UAA1B;AACH,KAnZkB;;AAAA,SAqZnBc,YArZmB,GAqZHyB,WAAD,IAAiB;AAC5B,YAAMF,SAAS,GAAGE,WAAW,CAACF,SAA9B;AACA,YAAMG,QAAQ,GAAGD,WAAW,CAAC5D,cAA7B;AACA,UAAIiC,SAAS,GAAGJ,SAAhB;;AACA,UAAI,KAAKlC,KAAL,CAAWW,UAAX,KAA0B,aAA9B,EAA6C;AACzC2B,QAAAA,SAAS,GAAG,KAAKhC,KAAL,CAAW6B,gBAAvB;AACH,OAFD,MAEO,IAAI,KAAKnC,KAAL,CAAWW,UAAX,KAA0B,YAA9B,EAA4C;AAC/C2B,QAAAA,SAAS,GAAG,KAAKhC,KAAL,CAAWsC,eAAvB;AACH,OAFM,MAEA,IAAI,KAAK5C,KAAL,CAAWW,UAAX,KAA0B,wBAA9B,EAAwD;AAC3D2B,QAAAA,SAAS,GAAG,KAAKhC,KAAL,CAAW4C,sBAAvB;AACH,OAFM,MAGF,IAAI,KAAKlD,KAAL,CAAWW,UAAX,KAA0B,mBAA9B,EAAmD;AACpD2B,QAAAA,SAAS,GAAG,KAAKhC,KAAL,CAAW+C,sBAAvB;AACH;;AAED,YAAM3B,UAAU,GAAG;AACfgC,QAAAA,SAAS,EAAE;AACP,WAACK,SAAS,CAACI,WAAV,EAAD,GAA2BD,QADpB;AAEPN,UAAAA,QAAQ,EAAE,KAAK5D,KAAL,CAAWwB;AAFd,SADI;AAKfqC,QAAAA,QAAQ,EAAE,YALK;AAMfC,QAAAA,SAAS,EAAEG,WAAW,CAACH,SANR;AAOfC,QAAAA,SAAS,EAAEA,SAPI;AAQfpD,QAAAA,UAAU,EAAE,UARG;AAQS2B,QAAAA;AART,OAAnB;AAUA,YAAMhB,UAAU,GAAG,KAAKtB,KAAL,CAAWsB,UAA9B;;AACA,UAAIpD,SAAS,CAAC,KAAK8B,KAAL,CAAWoE,WAAZ,EAAyB,KAAKpE,KAAL,CAAWwB,QAAX,CAAoB6C,SAA7C,EAAwDJ,WAAW,CAACK,YAApE,CAAb,EAAgG;AAC5F,cAAM1D,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE5C,cADK;AAEf6C,UAAAA,IAAI,EAAE;AACFyD,YAAAA,SAAS,EAAE,IADT;AACeC,YAAAA,UAAU,EAAE;AAAE9C,cAAAA,UAAF;AAAcJ,cAAAA;AAAd,aAD3B;AAEFmD,YAAAA,cAAc,EAAE,IAFd;AAEoB9D,YAAAA,UAAU,EAAE,UAFhC;AAE4CmD,YAAAA,SAAS,EAAEG,WAAW,CAACH,SAFnE;AAE8EzD,YAAAA,cAAc,EAAE;AAF9F;AAFS,SAAnB;AAOA,aAAKL,KAAL,CAAWe,WAAX,CAAuBH,UAAvB;AACH,OATD,MASO;AACH,aAAKZ,KAAL,CAAW0E,UAAX,CAAsBhD,UAAtB,EAAkCJ,UAAlC,EAA8C,gBAA9C,EAAgE,EAAhE;AACH;AACJ,KA3bkB;;AAAA,SA6bnBmB,aA7bmB,GA6bH,CAACkC,YAAD,EAAezE,KAAf,KAAyB;AACrC,YAAM6D,SAAS,GAAGY,YAAY,CAACZ,SAA/B;AACA,UAAIa,QAAQ,GAAGD,YAAY,CAACtE,cAA5B,CAFqC,CAGrC;;AACA,UAAIiC,SAAS,GAAGJ,SAAhB;;AACA,UAAI,KAAKlC,KAAL,CAAWW,UAAX,KAA0B,aAA9B,EAA6C;AACzC2B,QAAAA,SAAS,GAAG,KAAKhC,KAAL,CAAW6B,gBAAvB;AACH,OAFD,MAEO,IAAI,KAAKnC,KAAL,CAAWW,UAAX,KAA0B,YAA9B,EAA4C;AAC/C2B,QAAAA,SAAS,GAAG,KAAKhC,KAAL,CAAWsC,eAAvB;AACH,OAFM,MAEA,IAAI,KAAK5C,KAAL,CAAWW,UAAX,KAA0B,wBAA9B,EAAwD;AAC3D2B,QAAAA,SAAS,GAAG,KAAKhC,KAAL,CAAW4C,sBAAvB;AACH,OAFM,MAGF,IAAI,KAAKlD,KAAL,CAAWW,UAAX,KAA0B,mBAA9B,EAAmD;AACpD2B,QAAAA,SAAS,GAAG,KAAKhC,KAAL,CAAW+C,sBAAvB;AACH;;AAED,UAAIwB,SAAS,GAAI;AAAEC,QAAAA,aAAa,EAAG,YAAlB;AAAgCC,QAAAA,cAAc,EAAG,cAAjD;AAAiEC,QAAAA,eAAe,EAAG;AAAnF,OAAjB;AAEA,YAAMtD,UAAU,GAAG;AACfgC,QAAAA,SAAS,EAAE;AACP,WAACK,SAAS,CAACI,WAAV,EAAD,GAA2BS,QADpB;AAEPhB,UAAAA,QAAQ,EAAE,KAAK5D,KAAL,CAAWwB;AAFd,SADI;AAKfqC,QAAAA,QAAQ,EAAE,YALK;AAMfC,QAAAA,SAAS,EAAE,YANI;AAOfC,QAAAA,SAAS,EAAEA,SAPI;AAOOzB,QAAAA,SAPP;AAOiBuC,QAAAA;AAPjB,OAAnB;AASA,YAAMvD,UAAU,GAAG,KAAKtB,KAAL,CAAWsB,UAA9B;;AACA,UAAIpD,SAAS,CAAC,KAAK8B,KAAL,CAAWoE,WAAZ,EAAyB,KAAKpE,KAAL,CAAWwB,QAAX,CAAoB6C,SAA7C,EAAwDM,YAAY,CAACL,YAArE,CAAb,EAAiG;AAC7F,cAAM1D,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE5C,cADK;AAEf6C,UAAAA,IAAI,EAAE;AACFyD,YAAAA,SAAS,EAAE,IADT;AACeC,YAAAA,UAAU,EAAE;AAAE9C,cAAAA,UAAF;AAAcJ,cAAAA;AAAd,aAD3B;AAEFmD,YAAAA,cAAc,EAAE,IAFd;AAEoB9D,YAAAA,UAAU,EAAE,MAFhC;AAEwCmD,YAAAA,SAAS,EAAEa,YAAY,CAACb,SAFhE;AAE2EzD,YAAAA,cAAc,EAAE;AAF3F;AAFS,SAAnB;AAOA,aAAKL,KAAL,CAAWe,WAAX,CAAuBH,UAAvB;AACH,OATD,MASO;AACH,aAAKZ,KAAL,CAAW0E,UAAX,CAAsBhD,UAAtB,EAAkCJ,UAAlC,EAA8C,gBAA9C,EAAgE,EAAhE;AACH;AACJ,KArekB;;AAAA,SAuenBU,cAvemB,GAueF,CAACiD,IAAD,EAAOC,GAAP,EAAYnB,SAAZ,EAAsB7D,KAAtB,KAAgC;AAC7C,UAAI0E,QAAQ,GAAGK,IAAf,CAD6C,CAE7C;;AACAL,MAAAA,QAAQ,CAAC,gBAAD,CAAR,GAA6B1E,KAAK,CAACiF,MAAN,CAAaC,OAAb,KAAyB,IAAzB,GAAgCtG,iBAAiB,CAACuG,GAAlD,GAAwDvG,iBAAiB,CAACwG,EAAvG;AACA,YAAM5D,UAAU,GAAG;AACfgC,QAAAA,SAAS,EAAE;AACP,WAACwB,GAAD,GAAON,QADA;AAEPhB,UAAAA,QAAQ,EAAE,KAAK5D,KAAL,CAAWwB;AAFd,SADI;AAKfqC,QAAAA,QAAQ,EAAE,YALK;AAMfC,QAAAA,SAAS,EAAE,YANI;AAOfC,QAAAA,SAAS,EAAEA;AAPI,OAAnB;AASA,WAAK/D,KAAL,CAAW0E,UAAX,CAAsBhD,UAAtB,EAAkC,KAAK1B,KAAL,CAAWsB,UAA7C,EAAyD,gBAAzD,EAA2E,EAA3E;AACH,KArfkB;;AAAA,SAufnBiE,mBAvfmB,GAufG,MAAM;AACxB,WAAKhF,QAAL,CAAc;AAAEiF,QAAAA,YAAY,EAAE,KAAhB;AAAuBC,QAAAA,aAAa,EAAE,KAAtC;AAA6CC,QAAAA,iBAAiB,EAAE,EAAhE;AAAoEC,QAAAA,0BAA0B,EAAE;AAAhG,OAAd;AACH,KAzfkB;;AAAA,SA2fnBC,eA3fmB,GA2fAC,QAAD,IAAc;AAC5B,YAAMC,uBAAuB,GAAG,KAAKxF,KAAL,CAAWD,cAAX,CAA0ByF,uBAA1D;;AACA,UAAIA,uBAAJ,EAA6B;AACzB,YAAIA,uBAAuB,CAACC,QAAxB,CAAiC,IAAjC,KAA0CD,uBAAuB,CAACC,QAAxB,CAAiC,IAAjC,CAA9C,EAAsF;AAClFrI,UAAAA,KAAK,CAACsI,IAAN,CAAW,iCAAX,EAA8C;AAAEC,YAAAA,SAAS,EAAEJ,QAAQ,CAACI,SAAtB;AAAiC,wBAAYH,uBAA7C;AAAsElC,YAAAA,QAAQ,EAAE,KAAK5D,KAAL,CAAWwB;AAA3F,WAA9C,EACK0E,IADL,CACUC,QAAQ,IAAI;AACd,gBAAI9F,cAAc,GAAG,KAAKC,KAAL,CAAWD,cAAX,IAA6B,EAAlD;AACAA,YAAAA,cAAc,CAAC,cAAD,CAAd,GAAiC,EAAjC;AACA,kBAAMsF,0BAA0B,GAAGQ,QAAQ,CAACrF,IAAT,CAAcsF,GAAd,CAAkB,CAACnB,IAAD,EAAOoB,KAAP,KAAiB;AAClE,qBAAO;AAAE,2BAAW,mBAAb;AAAkC,6BAAa,yBAAyBA,KAAxE;AAA+E,6BAAa;AAA5F,eAAP;AACH,aAFkC,CAAnC;AAGA,iBAAK9F,QAAL,CAAc;AACViF,cAAAA,YAAY,EAAE,IADJ;AAEVc,cAAAA,aAAa,EAAEH,QAAQ,CAACrF,IAFd;AAGVyF,cAAAA,YAAY,EAAE,EAHJ;AAIVlG,cAAAA,cAJU;AAKVqF,cAAAA,iBAAiB,EAAE,qBALT;AAMVD,cAAAA,aAAa,EAAE,IANL;AAMWE,cAAAA;AANX,aAAd;AAQH,WAfL,EAgBKa,KAhBL,CAgBWC,KAAK,IAAI;AACZjJ,YAAAA,KAAK,CAACiJ,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,WAlBL;AAmBH,SApBD,MAoBO;AACH,gBAAMhF,UAAU,GAAG;AACfiF,YAAAA,oBAAoB,EAAE,EADP;AAEfb,YAAAA,uBAAuB,EAAE,KAAKxF,KAAL,CAAWD,cAAX,CAA0ByF,uBAFpC;AAGflC,YAAAA,QAAQ,EAAE,KAAK5D,KAAL,CAAWwB;AAHN,WAAnB;AAKA,eAAKoF,wBAAL,CAA8BlF,UAA9B;AACH;AACJ,OA7BD,MA6BO;AACHlE,QAAAA,KAAK,CAACqJ,IAAN,CAAW,KAAK7G,KAAL,CAAWwD,IAAX,CAAgBsD,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KA7hBkB;;AAAA,SAqjBnBC,gBArjBmB,GAqjBA,MAAM;AACrB,YAAMT,YAAY,GAAG,KAAKjG,KAAL,CAAWiG,YAAhC;AACA,YAAMI,oBAAoB,GAAGM,MAAM,CAACC,IAAP,CAAYX,YAAZ,EAA0BH,GAA1B,CAA+Be,OAAD,IAAa;AACpE,eAAOZ,YAAY,CAACY,OAAD,CAAnB;AACH,OAF4B,CAA7B;AAGA,YAAMzF,UAAU,GAAG;AACfiF,QAAAA,oBAAoB,EAAEA,oBADP;AAEfb,QAAAA,uBAAuB,EAAE,KAAKxF,KAAL,CAAWD,cAAX,CAA0ByF,uBAFpC;AAGflC,QAAAA,QAAQ,EAAE,KAAK5D,KAAL,CAAWwB;AAHN,OAAnB;AAKA,WAAKoF,wBAAL,CAA8BlF,UAA9B;AACH,KAhkBkB;;AAAA,SAkkBnB0F,UAlkBmB,GAkkBN,MAAM;AACf,UAAI7C,SAAS,GAAG,KAAKvE,KAAL,CAAWuE,SAA3B;AACA,UAAIE,cAAc,GAAG,KAAKzE,KAAL,CAAWyE,cAAhC;AACA,UAAIpE,cAAc,GAAG,KAAKL,KAAL,CAAWK,cAAhC;;AACA,UAAI,KAAKL,KAAL,CAAWuE,SAAf,EAA0B;AACtB,YAAI,KAAKvE,KAAL,CAAW8D,SAAX,KAAyB,QAAzB,IAAqC,KAAK9D,KAAL,CAAW8D,SAAX,KAAyB,SAAlE,EAA6E;AACzES,UAAAA,SAAS,GAAG,KAAZ;AACAE,UAAAA,cAAc,GAAG,KAAjB;AACApE,UAAAA,cAAc,GAAG,EAAjB;AACH,SAJD,MAIO;AACHkE,UAAAA,SAAS,GAAG,KAAZ;AACAlE,UAAAA,cAAc,CAAC,OAAD,CAAd,GAA0B,CAA1B;AACAA,UAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACAA,UAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACH;AACJ,OAXD,MAWO;AACHoE,QAAAA,cAAc,GAAG,KAAjB;AACApE,QAAAA,cAAc,GAAG,EAAjB;AACH;;AACD,YAAMO,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE5C,cADK;AAEf6C,QAAAA,IAAI,EAAE;AAAE2D,UAAAA,cAAF;AAAkBF,UAAAA,SAAlB;AAA6BlE,UAAAA;AAA7B;AAFS,OAAnB;AAIA,WAAKL,KAAL,CAAWe,WAAX,CAAuBH,UAAvB;AACH,KA1lBkB;;AAAA,SA4lBnByG,aA5lBmB,GA4lBH,CAACC,SAAD,EAAYlH,SAAZ,EAAuBmH,MAAvB,KAAkC;AAC9C,UAAIlH,cAAc,GAAG,KAAKC,KAAL,CAAWD,cAAX,IAA6B,EAAlD;;AACA,cAAQkH,MAAR;AACI,aAAK,CAAL;AACI,cAAInH,SAAS,KAAK,gBAAlB,EAAoC;AAChCC,YAAAA,cAAc,CAACD,SAAD,CAAd,GAA4BkH,SAA5B;AACAjH,YAAAA,cAAc,CAAC,mBAAD,CAAd,GAAsCiH,SAAS,CAACE,KAAhD;AACH,WAHD,MAGO;AACHnH,YAAAA,cAAc,CAACD,SAAD,CAAd,GAA4BkH,SAA5B;AACH;;AACD,eAAK/G,QAAL,CAAc;AAAEF,YAAAA;AAAF,WAAd;AACA;;AAEJ,aAAK,CAAL;AACI,gBAAMoH,aAAa,GAAG,KAAKzH,KAAL,CAAWyH,aAAjC;AACA,cAAIxC,IAAI,GAAGqC,SAAS,CAAC,MAAD,CAApB;AACA,cAAII,QAAQ,GAAG,IAAf;AACA,cAAIC,iBAAiB,GAAG,IAAxB;AACA,cAAIC,eAAe,GAAG,IAAtB;AACA,cAAIC,gBAAgB,GAAG,IAAvB;AACA,cAAIC,eAAe,GAAG,CAAtB;;AACA,cAAI7C,IAAI,CAAC,eAAD,CAAJ,KAA0B,CAA9B,EAAiC;AAC7ByC,YAAAA,QAAQ,GAAG,KAAX;AACArH,YAAAA,cAAc,CAAC,WAAD,CAAd,GAA8B,KAAKL,KAAL,CAAWyH,aAAX,CAAyBM,WAAvD;AACH,WAHD,MAGO;AACH1H,YAAAA,cAAc,CAAC,WAAD,CAAd,GAA8B,EAA9B;AACH;;AACD,cAAI4E,IAAI,CAAC,mBAAD,CAAJ,KAA8B,CAAlC,EAAqC;AACjC0C,YAAAA,iBAAiB,GAAG,KAApB;AACH,WAFD,MAEO;AACHtH,YAAAA,cAAc,CAAC,iBAAD,CAAd,GAAoC,EAApC;AACH;;AACD,cAAI4E,IAAI,CAAC,qBAAD,CAAJ,KAAgC,CAApC,EAAuC;AACnC2C,YAAAA,eAAe,GAAG,KAAlB;AACAE,YAAAA,eAAe,GAAG7C,IAAI,CAAC,qBAAD,CAAtB;AACH,WAHD,MAGO;AACH5E,YAAAA,cAAc,CAAC,iBAAD,CAAd,GAAoC,EAApC;AACH;;AACD,cAAI4E,IAAI,CAAC,gBAAD,CAAJ,KAA2B,CAA/B,EAAkC;AAC9B4C,YAAAA,gBAAgB,GAAG,KAAnB;AACAxH,YAAAA,cAAc,CAAC,YAAD,CAAd,GAA+B,KAAKL,KAAL,CAAWyH,aAAX,CAAyBO,YAAxD;AACH,WAHD,MAGO;AACH3H,YAAAA,cAAc,CAAC,YAAD,CAAd,GAA+B,EAA/B;AACH;;AACDA,UAAAA,cAAc,CAACD,SAAD,CAAd,GAA4BkH,SAA5B;AACA,gBAAMW,aAAa,GAAG;AAClBpH,YAAAA,QAAQ,EAAE5C,cADQ;AAElB6C,YAAAA,IAAI,EAAE;AAAET,cAAAA,cAAF;AAAkBoH,cAAAA,aAAa,EAAE,EAAE,GAAGA,aAAL;AAAoBC,gBAAAA,QAApB;AAA8BC,gBAAAA,iBAA9B;AAAiDC,gBAAAA,eAAjD;AAAkEC,gBAAAA,gBAAlE;AAAoFC,gBAAAA;AAApF;AAAjC;AAFY,WAAtB;AAIA,eAAK9H,KAAL,CAAWe,WAAX,CAAuBkH,aAAvB;AACA;;AAEJ,aAAK,CAAL;AACI5H,UAAAA,cAAc,CAACD,SAAD,CAAd,GAA4BkH,SAA5B;AACA,eAAKtH,KAAL,CAAWkI,qBAAX,CAAiC;AAAEC,YAAAA,iBAAiB,EAAEb,SAAS,CAACE,KAA/B;AAAsCY,YAAAA,KAAK,EAAE,CAA7C;AAAgDxE,YAAAA,QAAQ,EAAE,KAAK5D,KAAL,CAAWwB;AAArE,WAAjC,EAAkH,KAAKxB,KAAL,CAAWqI,WAA7H,EAA0I,CAA1I,EAA6IhI,cAA7I,EAA6J,6BAA7J;AACA;;AAEJ,aAAK,CAAL;AACIA,UAAAA,cAAc,CAACD,SAAD,CAAd,GAA4BkH,SAA5B;AACA,eAAKtH,KAAL,CAAWkI,qBAAX,CAAiC;AAAEjC,YAAAA,SAAS,EAAEqB,SAAS,CAACE,KAAvB;AAA8BY,YAAAA,KAAK,EAAE,CAArC;AAAwCxE,YAAAA,QAAQ,EAAE,KAAK5D,KAAL,CAAWwB;AAA7D,WAAjC,EAA0G,KAAKxB,KAAL,CAAWqI,WAArH,EAAkI,CAAlI,EAAqIhI,cAArI,EAAqJ,sBAArJ;AACA;;AAEJ;AACI;AA7DR;AA+DH,KA7pBkB;;AAAA,SA+pBnBiI,oBA/pBmB,GA+pBKpI,KAAD,IAAW;AAC9B,YAAMG,cAAc,GAAG,KAAKC,KAAL,CAAWD,cAAX,IAA6B,EAApD;;AACA,UAAIH,KAAK,CAACiF,MAAN,CAAaoD,IAAb,KAAsB,UAA1B,EAAsC;AAClClI,QAAAA,cAAc,CAACH,KAAK,CAACiF,MAAN,CAAaqD,IAAd,CAAd,GAAoCtI,KAAK,CAACiF,MAAN,CAAaC,OAAb,KAAyB,IAAzB,GAAgC,CAAhC,GAAoC,CAAxE;AACH,OAFD,MAEO;AACH/E,QAAAA,cAAc,CAACH,KAAK,CAACiF,MAAN,CAAaqD,IAAd,CAAd,GAAoCtI,KAAK,CAACiF,MAAN,CAAaqC,KAAjD;AACH;;AACD,WAAKjH,QAAL,CAAc;AAAEF,QAAAA;AAAF,OAAd;AACH,KAvqBkB;;AAAA,SAyqBnBoI,eAzqBmB,GAyqBD,CAACvI,KAAD,EAAQqH,MAAR,EAAgBmB,QAAhB,KAA6B;AAC3C,YAAMrI,cAAc,GAAG,KAAKC,KAAL,CAAWD,cAAX,IAA6B,EAApD;;AACA,cAAQkH,MAAR;AACI,aAAK,CAAL;AACI,cAAIrH,KAAK,CAACiF,MAAN,CAAaoD,IAAb,KAAsB,UAA1B,EAAsC;AAClClI,YAAAA,cAAc,CAACH,KAAK,CAACiF,MAAN,CAAaqD,IAAd,CAAd,GAAoCtI,KAAK,CAACiF,MAAN,CAAaC,OAAb,KAAyB,IAAzB,GAAgCtG,iBAAiB,CAACuG,GAAlD,GAAwDvG,iBAAiB,CAACwG,EAA9G;AACH,WAFD,MAEO,IAAIpF,KAAK,CAACiF,MAAN,CAAaoD,IAAb,KAAsB,OAA1B,EAAmC;AACtClI,YAAAA,cAAc,CAACH,KAAK,CAACiF,MAAN,CAAaqD,IAAd,CAAd,GAAoCE,QAApC,CADsC,CAExC;AACD,WAHM,MAGA;AACHrI,YAAAA,cAAc,CAACH,KAAK,CAACiF,MAAN,CAAaqD,IAAd,CAAd,GAAoCtI,KAAK,CAACiF,MAAN,CAAaqC,KAAjD;AACH;;AACD,eAAKjH,QAAL,CAAc;AAAEF,YAAAA;AAAF,WAAd;AACA;;AAEJ,aAAK,CAAL;AACI,gBAAMsI,UAAU,GAAGzI,KAAK,CAACiF,MAAN,CAAaqC,KAAhC;;AACA,cAAI,kBAAkBoB,IAAlB,CAAuBD,UAAvB,KAAsCA,UAAU,KAAK,EAAzD,EAA6D;AACzDtI,YAAAA,cAAc,CAACH,KAAK,CAACiF,MAAN,CAAaqD,IAAd,CAAd,GAAoCtI,KAAK,CAACiF,MAAN,CAAaqC,KAAjD;AACH;;AACD,eAAKjH,QAAL,CAAc;AAAEF,YAAAA;AAAF,WAAd;AACA;;AAEJ,aAAK,CAAL;AACI,cAAGqI,QAAQ,CAACG,wBAAT,KAAsC5J,gBAAgB,CAAC6J,OAAvD,IAAkEJ,QAAQ,CAACK,YAAT,CAAsBC,OAAtB,CAA8B,IAA9B,MAAwC,CAAC,CAA9G,EAAgH;AACxG,kBAAMxB,KAAK,GAAGtH,KAAK,CAACiF,MAAN,CAAaqC,KAAb,CAAmByB,OAAnB,CAA2B,WAA3B,EAAwC,EAAxC,CAAd;AACA,kBAAM1C,YAAY,GAAG,KAAKjG,KAAL,CAAWiG,YAAX,IAA2B,EAAhD;;AACA,gBAAK,WAAWqC,IAAX,CAAgBpB,KAAhB,CAAL,EAA8B;AAC1B,kBAAI,CAACnH,cAAc,CAAC,cAAD,CAAnB,EAAqC;AACjCA,gBAAAA,cAAc,CAAC,cAAD,CAAd,GAAiC,EAAjC;AACH;;AACDA,cAAAA,cAAc,CAAC,cAAD,CAAd,CAA+BH,KAAK,CAACiF,MAAN,CAAaqD,IAA5C,IAAoDhB,KAApD;AACAjB,cAAAA,YAAY,CAACrG,KAAK,CAACiF,MAAN,CAAaqD,IAAd,CAAZ,GAAkC;AAC9BU,gBAAAA,UAAU,EAAER,QAAQ,CAACK,YADS;AAE9BI,gBAAAA,OAAO,EAAE3B;AAFqB,eAAlC;AAIH,aATD,MASM,IAAGA,KAAK,KAAK,EAAb,EAAgB;AAClB,kBAAI,CAACnH,cAAc,CAAC,cAAD,CAAnB,EAAqC;AACjCA,gBAAAA,cAAc,CAAC,cAAD,CAAd,GAAiC,EAAjC;AACH;;AACDA,cAAAA,cAAc,CAAC,cAAD,CAAd,CAA+BH,KAAK,CAACiF,MAAN,CAAaqD,IAA5C,IAAoDhB,KAApD;AACAjB,cAAAA,YAAY,CAACrG,KAAK,CAACiF,MAAN,CAAaqD,IAAd,CAAZ,GAAkC;AAC9BU,gBAAAA,UAAU,EAAER,QAAQ,CAACK,YADS;AAE9BI,gBAAAA,OAAO,EAAE3B;AAFqB,eAAlC;AAIH;;AACD,iBAAKjH,QAAL,CAAc;AAAEgG,cAAAA,YAAF;AAAgBlG,cAAAA;AAAhB,aAAd;AACA;AACP,WAxBD,MAwBK;AACD,kBAAMmH,KAAK,GAAGtH,KAAK,CAACiF,MAAN,CAAaqC,KAAb,CAAmByB,OAAnB,CAA2B,YAA3B,EAAyC,EAAzC,CAAd;AACA,kBAAM1C,YAAY,GAAG,KAAKjG,KAAL,CAAWiG,YAAX,IAA2B,EAAhD;;AACA,gBAAK,kBAAkBqC,IAAlB,CAAuBpB,KAAvB,CAAD,IAAmCA,KAAK,KAAK,EAAjD,EAAqD;AACjD,kBAAI,CAACnH,cAAc,CAAC,cAAD,CAAnB,EAAqC;AACjCA,gBAAAA,cAAc,CAAC,cAAD,CAAd,GAAiC,EAAjC;AACH;;AACDA,cAAAA,cAAc,CAAC,cAAD,CAAd,CAA+BH,KAAK,CAACiF,MAAN,CAAaqD,IAA5C,IAAoDhB,KAApD;AACAjB,cAAAA,YAAY,CAACrG,KAAK,CAACiF,MAAN,CAAaqD,IAAd,CAAZ,GAAkC;AAC9BU,gBAAAA,UAAU,EAAER,QAAQ,CAACK,YADS;AAE9BI,gBAAAA,OAAO,EAAE3B;AAFqB,eAAlC;AAIH;;AACD,iBAAKjH,QAAL,CAAc;AAAEgG,cAAAA,YAAF;AAAgBlG,cAAAA;AAAhB,aAAd;AACA;AACH;;AAEL;AACI;AAhER;AAkEH,KA7uBkB;;AAAA,SAqvBnB+I,oBArvBmB,GAqvBI,CAAC5B,KAAD,EAAQgB,IAAR,KAAiB;AACpCa,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB9B,KAAtB,EAA6BgB,IAA7B;AACA,YAAMnI,cAAc,GAAG,KAAKC,KAAL,CAAWD,cAAX,IAA6B,EAApD;;AACA,UAAImI,IAAI,KAAK,iBAAb,EAAgC;AAC5B,cAAMe,MAAM,GAAG/B,KAAK,CAACrC,MAAN,CAAaqC,KAAb,CAAmByB,OAAnB,CAA2B,WAA3B,EAAwC,EAAxC,CAAf;;AACA,YAAI,WAAWL,IAAX,CAAgBW,MAAhB,KAA2BA,MAAM,KAAK,EAA1C,EAA8C;AAC1CF,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBC,MAApB;AACAlJ,UAAAA,cAAc,CAACmI,IAAD,CAAd,GAAuBe,MAAvB;AACH;AACJ,OAND,MAOK;AACDlJ,QAAAA,cAAc,CAACmI,IAAD,CAAd,GAAuBhB,KAAvB;AACH;;AAED,WAAKjH,QAAL,CAAc;AAAEF,QAAAA;AAAF,OAAd;AACH,KApwBkB;;AAAA,SAswBnBmJ,WAtwBmB,GAswBL,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACjC,UAAIhI,UAAU,GAAG,EAAjB;AACA,UAAIiI,YAAY,GAAG,EAAnB;AACA,UAAIC,cAAc,GAAG,IAArB;;AACA,UAAI,KAAK5J,KAAL,CAAWW,UAAX,KAA0B,eAA9B,EAA+C;AAC3Ce,QAAAA,UAAU,GAAG,KAAKmI,eAAL,CAAqBJ,QAArB,EAA+BC,OAA/B,CAAb;AACAC,QAAAA,YAAY,GAAG;AACXG,UAAAA,kBAAkB,EAAE,KAAKxJ,KAAL,CAAWD,cAAX,CAA0ByJ,kBADnC;AAEXC,UAAAA,UAAU,EAAE,KAAKzJ,KAAL,CAAWD,cAAX,CAA0B0J,UAF3B;AAGXC,UAAAA,SAAS,EAAE;AAHA,SAAf;AAKH,OAPD,MAOO,IAAI,KAAKhK,KAAL,CAAWW,UAAX,KAA0B,iBAA9B,EAAiD;AACpDe,QAAAA,UAAU,GAAG,KAAKuI,iBAAL,CAAuBR,QAAvB,EAAiCC,OAAjC,CAAb;AACH,OAFM,MAEA,IAAI,KAAK1J,KAAL,CAAWW,UAAX,KAA0B,mBAA9B,EAAmD;AACtD,cAAMN,cAAc,GAAG,KAAKL,KAAL,CAAWK,cAAlC;;AACA,YAAIA,cAAc,CAAC,OAAD,CAAd,IAA2BA,cAAc,CAAC,OAAD,CAAzC,IAAsDA,cAAc,CAAC,OAAD,CAApE,IAAiFA,cAAc,CAAC,OAAD,CAA/F,IACGA,cAAc,CAAC,SAAD,CADjB,IACgCA,cAAc,CAAC,SAAD,CAD9C,IAC6DA,cAAc,CAAC,SAAD,CAD3E,IAC0FA,cAAc,CAAC,SAAD,CADxG,IAEGA,cAAc,CAAC,YAAD,CAFjB,IAEmCA,cAAc,CAAC,cAAD,CAFrD,EAEuE;AACnEqB,UAAAA,UAAU,GAAG,KAAKwI,mBAAL,CAAyBT,QAAzB,EAAmCC,OAAnC,CAAb;AACH,SAJD,MAIO;AACHlM,UAAAA,KAAK,CAAC2M,IAAN,CAAW,KAAKnK,KAAL,CAAWwD,IAAX,CAAgBsD,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAAX;AACA6C,UAAAA,cAAc,GAAG,KAAjB;AACH;AACJ,OAVM,MAUA,IAAI,KAAK5J,KAAL,CAAWW,UAAX,KAA0B,aAA9B,EAA6C;AAChDe,QAAAA,UAAU,GAAG,KAAK0I,aAAL,CAAmBX,QAAnB,EAA6BC,OAA7B,CAAb;AACH,OAFM,MAEA,IAAI,KAAK1J,KAAL,CAAWW,UAAX,KAA0B,cAA9B,EAA8C;AACjDe,QAAAA,UAAU,GAAG,KAAK2I,cAAL,CAAoBZ,QAApB,EAA8BC,OAA9B,CAAb;AACH,OAFM,MAED,IAAI,KAAK1J,KAAL,CAAWW,UAAX,KAA0B,mBAA9B,EAAmD;AACrDe,QAAAA,UAAU,GAAG,KAAK4I,iBAAL,CAAuBb,QAAvB,EAAiCC,OAAjC,CAAb;AACH,OAFK,MAGA;AACFhI,QAAAA,UAAU,GAAG,KAAK6I,YAAL,CAAkBd,QAAlB,EAA4BC,OAA5B,CAAb;AACH;;AACD,UAAIE,cAAJ,EAAoB;AAChB,YAAI1L,SAAS,CAAC,KAAK8B,KAAL,CAAWoE,WAAZ,EAAyB,KAAKpE,KAAL,CAAWwB,QAAX,CAAoB6C,SAA7C,EAAwD,KAAKrE,KAAL,CAAWsE,YAAnE,CAAb,EAA+F;AAC3F,gBAAM1D,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAE5C,cADK;AAEf6C,YAAAA,IAAI,EAAE;AACFyD,cAAAA,SAAS,EAAE,IADT;AACeC,cAAAA,UAAU,EAAE;AAAE9C,gBAAAA,UAAF;AAAcJ,gBAAAA,UAAU,EAAE,KAAKtB,KAAL,CAAWsB;AAArC,eAD3B;AAC8EmI,cAAAA;AAD9E;AAFS,WAAnB;AAMA,eAAKzJ,KAAL,CAAWe,WAAX,CAAuBH,UAAvB;AACH,SARD,MASK;AACD,eAAKZ,KAAL,CAAW0E,UAAX,CAAsBhD,UAAtB,EAAkC,KAAK1B,KAAL,CAAWsB,UAA7C,EAAyD,gBAAzD,EAA2EqI,YAA3E;AACH;AACJ;AACJ,KArzBkB;;AAAA,SAk4BnBE,eAl4BmB,GAk4BD,CAACJ,QAAD,EAAWC,OAAX,KAAuB;AACrC,YAAMc,SAAS,GAAG,KAAKxK,KAAvB;AACA,UAAI0D,SAAS,GAAG,EAAhB;AACA,UAAI+G,YAAY,GAAG,IAAnB;AACA,YAAMjJ,QAAQ,GAAGgJ,SAAS,CAAChJ,QAA3B;AACA,UAAIqD,SAAS,GAAG3C,SAAhB;AACA,YAAM7B,cAAc,GAAG,KAAKC,KAAL,CAAWD,cAAlC;AACA,UAAIqK,WAAW,GAAG,CAAC;AAAE,8BAAsB;AAAxB,OAAD,EAAkC;AAAE,8BAAsB;AAAxB,OAAlC,EAAqE;AAAE,qBAAa;AAAf,OAArE,EAA+F;AAAE,0BAAkB;AAApB,OAA/F,EAClB;AAAE,6BAAqB;AAAvB,OADkB,EACiB;AAAE,2BAAmB;AAArB,OADjB,EAC+C;AAAE,kCAA0B;AAA5B,OAD/C,CAAlB;;AAEA,UAAIF,SAAS,CAAC1G,SAAV,KAAwB,QAA5B,EAAsC;AAClCJ,QAAAA,SAAS,GAAG;AACR,2BAAiB;AACbiH,YAAAA,iBAAiB,EAAE7L,iBAAiB,CAACwG,EADxB;AAEbsF,YAAAA,UAAU,EAAE9L,iBAAiB,CAACuG,GAFjB;AAGbwF,YAAAA,OAAO,EAAE/L,iBAAiB,CAACgM;AAHd;AADT,SAAZ;AAOH,OARD,MAQO;AACHpH,QAAAA,SAAS,GAAG;AAAE,2BAAiB;AAAnB,SAAZ;AACA,YAAIqH,UAAU,GAAG,IAAjB;;AAEA,YAAKP,SAAS,CAAC1G,SAAV,KAAwB,QAA7B,EAAsC;AAClC;AACAe,UAAAA,SAAS,GAAI;AAAEC,YAAAA,aAAa,EAAG,YAAlB;AAAgCC,YAAAA,cAAc,EAAG,cAAjD;AAAiEC,YAAAA,eAAe,EAAG;AAAnF,WAAb;AACA+F,UAAAA,UAAU,GAAG1K,cAAc,CAAC,oBAAD,CAA3B;AACH;AACJ;;AACD,UAAIA,cAAc,CAAC,oBAAD,CAAlB,EAA0C;AACtC,YAAI,KAAKL,KAAL,CAAWyH,aAAX,CAAyBK,eAAzB,KAA6ChJ,iBAAiB,CAACuG,GAAnE,EAAwE;AACpEoF,UAAAA,YAAY,GAAG,EAAf;AACAA,UAAAA,YAAY,CAAC,oBAAD,CAAZ,GAAqCpK,cAAc,CAAC,oBAAD,CAAnD;AACAoK,UAAAA,YAAY,CAAC,qBAAD,CAAZ,GAAsCpK,cAAc,CAAC,qBAAD,CAApD;AACAoK,UAAAA,YAAY,CAAC,iBAAD,CAAZ,GAAkCpK,cAAc,CAAC,iBAAD,CAAd,CAAkC2K,IAAlC,EAAlC;AACAP,UAAAA,YAAY,CAAC,SAAD,CAAZ,GAA0B,CAA1B;AACAA,UAAAA,YAAY,CAAC,gBAAD,CAAZ,GAAiC3L,iBAAiB,CAACuG,GAAnD;AACAoF,UAAAA,YAAY,CAAC,YAAD,CAAZ,GAA6BpK,cAAc,CAAC,YAAD,CAAd,GAA+BA,cAAc,CAAC,YAAD,CAAd,CAA6BmH,KAA7B,GAAqCnH,cAAc,CAAC,YAAD,CAAd,CAA6BmH,KAAlE,GAA0E,CAAC,CAA1G,GAA8G,CAAC,CAA5I;AACH;;AACD9D,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwBlC,QAAxB;AACAkJ,QAAAA,WAAW,CAACtE,GAAZ,CAAgBnB,IAAI,IAAI;AACpB,gBAAMC,GAAG,GAAG+B,MAAM,CAACC,IAAP,CAAYjC,IAAZ,EAAkB,CAAlB,CAAZ;AACA,gBAAMuC,KAAK,GAAGP,MAAM,CAACsC,MAAP,CAActE,IAAd,EAAoB,CAApB,CAAd;;AACA,cAAIuC,KAAK,KAAK,OAAd,EAAuB;AACnB,mBAAO9D,SAAS,CAAC,eAAD,CAAT,CAA2BwB,GAA3B,IAAkC7E,cAAc,CAAC6E,GAAD,CAAd,GAAsB7E,cAAc,CAAC6E,GAAD,CAAd,CAAoBsC,KAApB,GAA4BnH,cAAc,CAAC6E,GAAD,CAAd,CAAoBsC,KAAhD,GAAwD,CAAC,CAA/E,GAAmF,CAAC,CAA7H;AACH,WAFD,MAEO,IAAIA,KAAK,KAAK,KAAd,EAAqB;AACxB,mBAAO9D,SAAS,CAAC,eAAD,CAAT,CAA2BwB,GAA3B,IAAkC7E,cAAc,CAAC6E,GAAD,CAAd,GAAsB7E,cAAc,CAAC6E,GAAD,CAApC,GAA4C,CAArF;AACH,WAFM,MAEA,IAAIsC,KAAK,KAAK,QAAd,EAAwB;AAC3B,mBAAO9D,SAAS,CAAC,eAAD,CAAT,CAA2BwB,GAA3B,IAAkC7E,cAAc,CAAC6E,GAAD,CAAd,GAAsB7E,cAAc,CAAC6E,GAAD,CAAd,CAAoB8F,IAApB,EAAtB,GAAmD,EAA5F;AACH,WAFM,MAEA,IAAIxD,KAAK,KAAK,cAAd,EAA8B;AACjC,mBAAO9D,SAAS,CAAC,eAAD,CAAT,CAA2BwB,GAA3B,IAAkCuF,YAAzC;AACH,WAFM,MAEA;AACH,mBAAO,IAAP;AACH;AACJ,SAdD;AAeA/G,QAAAA,SAAS,CAAC,eAAD,CAAT,CAA2B,WAA3B,IAA0C8G,SAAS,CAAClJ,UAAV,CAAqB,cAArB,EAAqC,WAArC,CAA1C;AACH;;AACD,YAAMI,UAAU,GAAG;AACfgC,QAAAA,SADe;AAEfG,QAAAA,QAAQ,EAAE,YAFK;AAGfC,QAAAA,SAAS,EAAE0G,SAAS,CAAC1G,SAHN;AAIfC,QAAAA,SAAS,EAAE,eAJI;AAKf0F,QAAAA,QALe;AAKLC,QAAAA,OALK;AAKG7E,QAAAA;AALH,OAAnB;AAOA,aAAOnD,UAAP;AACH,KAj8BkB;;AAAA,SAm8BnBwI,mBAn8BmB,GAm8BG,CAACT,QAAD,EAAWC,OAAX,KAAuB;AACzC,YAAMrJ,cAAc,GAAG,KAAKL,KAAL,CAAWK,cAAlC;AACA,YAAM4K,OAAO,GAAG,CAAC;AAAE,8BAAsB;AAAxB,OAAD,EAAkC;AAAE,iCAAyB;AAA3B,OAAlC,EAAsE;AAAE,iBAAS;AAAX,OAAtE,EAChB;AAAE,iBAAS;AAAX,OADgB,EACO;AAAE,iBAAS;AAAX,OADP,EAC8B;AAAE,iBAAS;AAAX,OAD9B,EACqD;AAAE,mBAAW;AAAb,OADrD,EAC8E;AAAE,mBAAW;AAAb,OAD9E,EAEhB;AAAE,mBAAW;AAAb,OAFgB,EAES;AAAE,mBAAW;AAAb,OAFT,EAEkC;AAAE,sBAAc;AAAhB,OAFlC,EAE8D;AAAE,wBAAgB;AAAlB,OAF9D,CAAhB;AAGA,UAAIvH,SAAS,GAAG;AACZ,gCAAwB;AACpBmH,UAAAA,OAAO,EAAE;AADW,SADZ;AAIZjH,QAAAA,QAAQ,EAAE,KAAK5D,KAAL,CAAWwB;AAJT,OAAhB;AAMAyJ,MAAAA,OAAO,CAAC7E,GAAR,CAAYnB,IAAI,IAAI;AAChB,cAAMC,GAAG,GAAG+B,MAAM,CAACC,IAAP,CAAYjC,IAAZ,EAAkB,CAAlB,CAAZ;AACA,cAAMuC,KAAK,GAAGP,MAAM,CAACsC,MAAP,CAActE,IAAd,EAAoB,CAApB,CAAd;;AACA,YAAIuC,KAAK,KAAK,KAAd,EAAqB;AACjB,iBAAO9D,SAAS,CAAC,sBAAD,CAAT,CAAkCwB,GAAlC,IAAyC7E,cAAc,CAAC6E,GAAD,CAAd,GAAsB7E,cAAc,CAAC6E,GAAD,CAApC,GAA4C,CAA5F;AACH,SAFD,MAEO,IAAIsC,KAAK,KAAK,QAAd,EAAwB;AAC3B,iBAAO9D,SAAS,CAAC,sBAAD,CAAT,CAAkCwB,GAAlC,IAAyC7E,cAAc,CAAC6E,GAAD,CAAd,GAC5C7E,cAAc,CAAC6E,GAAD,CAAd,KAAwB,GAAxB,GAA8B7E,cAAc,CAAC6E,GAAD,CAA5C,GAAoD7E,cAAc,CAAC6E,GAAD,CAAd,CAAoB+D,OAApB,CAA4B,KAA5B,EAAmC,EAAnC,CADR,GACiD,IADjG;AAEH,SAHM,MAGA;AACH,iBAAO,IAAP;AACH;AACJ,OAXD;AAYA,UAAI8B,UAAU,GAAG,IAAjB;AACA,UAAIlG,SAAS,GAAG3C,SAAhB;;AACA,UAAK,KAAKlC,KAAL,CAAW8D,SAAX,KAAyB,QAA9B,EAAuC;AACnC;AACAe,QAAAA,SAAS,GAAI;AAAEC,UAAAA,aAAa,EAAG,YAAlB;AAAgCC,UAAAA,cAAc,EAAG,cAAjD;AAAiEC,UAAAA,eAAe,EAAG;AAAnF,SAAb;AACA+F,QAAAA,UAAU,GAAG1K,cAAc,CAAC,oBAAD,CAA3B;AACH;;AACD,YAAMqB,UAAU,GAAG;AACfgC,QAAAA,SADe;AAEfG,QAAAA,QAAQ,EAAE,YAFK;AAGfC,QAAAA,SAAS,EAAE,KAAK9D,KAAL,CAAW8D,SAHP;AAIfC,QAAAA,SAAS,EAAE,sBAJI;AAKf0F,QAAAA,QALe;AAKLC,QAAAA,OALK;AAKG7E,QAAAA;AALH,OAAnB;AAOA,aAAOnD,UAAP;AACH,KAz+BkB;;AAAA,SA2+BnBuI,iBA3+BmB,GA2+BC,CAACR,QAAD,EAAWC,OAAX,KAAuB;AACvC,YAAMrJ,cAAc,GAAG,KAAKC,KAAL,CAAWD,cAAlC;AACA,YAAM6K,uBAAuB,GAAE;AACHC,QAAAA,eAAe,EAAE9K,cAAc,CAAC,iBAAD,CAAd,CAAkC2K,IAAlC,EADd;AAEHjB,QAAAA,UAAU,EAAE1J,cAAc,CAAC,YAAD,CAAd,GAA+BA,cAAc,CAAC,YAAD,CAAd,CAA6BmH,KAA7B,GAAqCnH,cAAc,CAAC,YAAD,CAAd,CAA6BmH,KAAlE,GAA0E,CAAC,CAA1G,GAA8G,CAAC,CAFxH;AAGH4D,QAAAA,kBAAkB,EAAE/K,cAAc,CAAC,oBAAD,CAH/B;AAIHgL,QAAAA,mBAAmB,EAAEhL,cAAc,CAAC,qBAAD,CAJhC;AAKHwK,QAAAA,OAAO,EAAE/L,iBAAiB,CAACgM,MALxB;AAMHQ,QAAAA,cAAc,EAAEjL,cAAc,CAAC,gBAAD,CAN3B,CAM8C;;AAN9C,OAA/B,CAFuC,CAYvC;;AACA,UAAIwE,SAAS,GAAG3C,SAAhB;;AACA,UAAK,KAAKlC,KAAL,CAAW8D,SAAX,KAAyB,QAA9B,EAAuC;AACnC;AACAe,QAAAA,SAAS,GAAI;AAAEC,UAAAA,aAAa,EAAG,YAAlB;AAAgCC,UAAAA,cAAc,EAAG,cAAjD;AAAiEC,UAAAA,eAAe,EAAG;AAAnF,SAAb,CAFmC,CAGnC;AACH;;AACD,YAAMtD,UAAU,GAAG;AACfgC,QAAAA,SAAS,EAAE;AACP6H,UAAAA,uBAAuB,EAAEL,uBADlB;AAEPtH,UAAAA,QAAQ,EAAE,KAAK5D,KAAL,CAAWwB;AAFd,SADI;AAKfqC,QAAAA,QAAQ,EAAE,YALK;AAMfC,QAAAA,SAAS,EAAE,KAAK9D,KAAL,CAAW8D,SANP;AAOfC,QAAAA,SAAS,EAAE,yBAPI;AAQf0F,QAAAA,QARe;AAQLC,QAAAA,OARK;AAQG7E,QAAAA;AARH,OAAnB;AAUA,aAAOnD,UAAP;AACH,KAzgCkB;;AAAA,SA2gCnB0I,aA3gCmB,GA2gCH,CAACX,QAAD,EAAWC,OAAX,KAAuB;AACnC,YAAMrJ,cAAc,GAAG,KAAKC,KAAL,CAAWD,cAAlC;AACA,YAAMmL,YAAY,GAAG,CAAC,cAAD,EAAiB,yBAAjB,EAA4C,2BAA5C,CAArB;AACA,YAAMC,iBAAiB,GAAG,KAAKzL,KAAL,CAAWsB,UAAX,CAAsBmK,iBAAhD;AACA,UAAIC,WAAW,GAAG;AACdzF,QAAAA,SAAS,EAAEwF,iBAAiB,CAAC,WAAD,CADd;AAEdL,QAAAA,kBAAkB,EAAEK,iBAAiB,CAAC,oBAAD,CAFvB;AAGdH,QAAAA,cAAc,EAAExM,iBAAiB,CAACwG,EAHpB;AAIduF,QAAAA,OAAO,EAAE/L,iBAAiB,CAACgM;AAJb,OAAlB;AAMAU,MAAAA,YAAY,CAACpF,GAAb,CAAiBuF,KAAK,IAAI;AACtB,eAAOD,WAAW,CAACC,KAAD,CAAX,GAAqBtL,cAAc,CAACsL,KAAD,CAAd,CAAsBX,IAAtB,EAA5B;AACH,OAFD;AAIA,UAAID,UAAU,GAAG,IAAjB;AACA,UAAIlG,SAAS,GAAG3C,SAAhB;;AACA,UAAK,KAAKlC,KAAL,CAAW8D,SAAX,KAAyB,QAA9B,EAAuC;AACnC;AACAe,QAAAA,SAAS,GAAI;AAAEC,UAAAA,aAAa,EAAG,YAAlB;AAAgCC,UAAAA,cAAc,EAAG,cAAjD;AAAiEC,UAAAA,eAAe,EAAG;AAAnF,SAAb;AACA+F,QAAAA,UAAU,GAAG1K,cAAc,CAAC,oBAAD,CAA3B;AACH;;AACD,YAAMqB,UAAU,GAAG;AACfgC,QAAAA,SAAS,EAAE;AACPgI,UAAAA,WAAW,EAAEA,WADN;AAEP9H,UAAAA,QAAQ,EAAE,KAAK5D,KAAL,CAAWwB;AAFd,SADI;AAKfqC,QAAAA,QAAQ,EAAE,YALK;AAMfC,QAAAA,SAAS,EAAE,QANI;AAOfC,QAAAA,SAAS,EAAE,aAPI;AAOW0F,QAAAA,QAPX;AAOqBC,QAAAA,OAPrB;AAO6B7E,QAAAA;AAP7B,OAAnB;AASA,aAAOnD,UAAP;AACH,KA1iCkB;;AAAA,SA4iCnBkK,YA5iCmB,GA4iCJ,MAAM;AACjB,YAAMvL,cAAc,GAAG,KAAKC,KAAL,CAAWD,cAAlC;AACAA,MAAAA,cAAc,CAAC,yBAAD,CAAd,GAA4C,EAA5C;AACAA,MAAAA,cAAc,CAAC,2BAAD,CAAd,GAA8C,EAA9C;AACAA,MAAAA,cAAc,CAAC,WAAD,CAAd,GAA8B,EAA9B;AACA,WAAKE,QAAL,CAAc;AACVsL,QAAAA,SAAS,EAAE,IADD;AAEVC,QAAAA,YAAY,EAAE,KAFJ;AAGVC,QAAAA,YAAY,EAAE,IAHJ;AAIV1L,QAAAA,cAJU;AAKV2L,QAAAA,KAAK,EAAE,EALG;AAMVC,QAAAA,MAAM,EAAE,EANE;AAOVzG,QAAAA,YAAY,EAAE,KAPJ;AAQV0G,QAAAA,eAAe,EAAE;AARP,OAAd;AAUH,KA3jCkB;;AAAA,SAiqCnBC,YAjqCmB,GAiqCHjM,KAAD,IAAW;AACtB,YAAMsH,KAAK,GAAGtH,KAAK,CAACiF,MAAN,CAAaqC,KAAb,CAAmByB,OAAnB,CAA2B,KAA3B,EAAkC,EAAlC,CAAd;AACA,UAAI5I,cAAc,GAAG,KAAKC,KAAL,CAAWD,cAAX,IAA6B,EAAlD;;AACA,UAAIH,KAAK,CAACkM,OAAN,KAAkB,EAAtB,EAA0B;AACtB,YAAI,KAAK9L,KAAL,CAAWuL,SAAf,EAA0B;AACtB,gBAAMQ,yBAAyB,GAAGhM,cAAc,CAACgM,yBAAf,GAA2ChM,cAAc,CAACgM,yBAA1D,GAAsF,EAAxH;AACA,gBAAMvG,uBAAuB,GAAGzF,cAAc,CAACyF,uBAAf,GAAyCzF,cAAc,CAACyF,uBAAxD,GAAkF,EAAlH;AACAzF,UAAAA,cAAc,CAAC,yBAAD,CAAd,GAA6C,GAAEyF,uBAAwB,KAAI0B,KAAM,IAAjF;AACAnH,UAAAA,cAAc,CAAC,2BAAD,CAAd,GAA+C,GAAEgM,yBAA0B,IAAG7E,KAAM,EAApF;AACAnH,UAAAA,cAAc,CAACH,KAAK,CAACiF,MAAN,CAAaqD,IAAd,CAAd,GAAoC,EAApC;AACA,eAAKjI,QAAL,CAAc;AACVsL,YAAAA,SAAS,EAAE,KADD;AAEVE,YAAAA,YAAY,EAAE,KAFJ;AAGVD,YAAAA,YAAY,EAAE,IAHJ;AAIVzL,YAAAA;AAJU,WAAd;AAMH;AACJ;AACJ,KAnrCkB;;AAAA,SAqrCnBiM,SArrCmB,GAqrCNpM,KAAD,IAAW;AACnB,WAAKK,QAAL,CAAc;AAAE2L,QAAAA,eAAe,EAAEhM,KAAK,CAAC0E,QAAN,CAAesH;AAAlC,OAAd;AACH,KAvrCkB;;AAAA,SAyrCnB7B,cAzrCmB,GAyrCF,CAACZ,QAAD,EAAWC,OAAX,KAAuB;AACpC,YAAMrJ,cAAc,GAAG,KAAKC,KAAL,CAAWD,cAAlC;AACA,YAAMkM,aAAa,GAAGlM,cAAc,CAACmM,SAArC;AACA,YAAMC,mBAAmB,GAAGpM,cAAc,CAACoM,mBAA3C;AACA,UAAIC,YAAY,GAAG5N,iBAAiB,CAACwG,EAArC;AACA,UAAIqH,aAAa,GAAG,EAApB;AACA,UAAIC,QAAQ,GAAG;AACX3G,QAAAA,SAAS,EAAE,KAAKjG,KAAL,CAAWsB,UAAX,CAAsBiB,YAAtB,CAAmC0D,SADnC;AAEX4G,QAAAA,aAAa,EAAExM,cAAc,CAACwM,aAAf,GAA+BxM,cAAc,CAACwM,aAA9C,GAA8D,CAFlE;AAGXhC,QAAAA,OAAO,EAAE/L,iBAAiB,CAACgM,MAHhB;AAIX2B,QAAAA,mBAJW;AAKXnB,QAAAA,cAAc,EAAEjL,cAAc,CAACoM,mBAAmB,KAAKzN,cAAc,CAAC8N,IAAvC,GAA4C,oBAA5C,GAAiE,gBAAlE,CAAd,GAAoGzM,cAAc,CAACoM,mBAAmB,KAAKzN,cAAc,CAAC8N,IAAvC,GAA4C,oBAA5C,GAAiE,gBAAlE,CAAlH,GAAwM;AAL7M,OAAf;AAOA,YAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;;AACA,UAAIP,mBAAmB,KAAKzN,cAAc,CAACiO,GAA3C,EAAgD;AAC5C,YAAIV,aAAa,IAAIW,KAAK,CAACC,OAAN,CAAcZ,aAAd,CAAjB,IAAiDA,aAAa,CAACa,MAAd,GAAuB,CAA5E,EAA+E;AAC3Eb,UAAAA,aAAa,CAACc,OAAd,CAAsB,CAAClN,IAAD,EAAOkG,KAAP,KAAiB;AACnC,kBAAMiH,QAAQ,GAAGrG,MAAM,CAACsG,MAAP,CAAc,EAAd,EAAkBX,QAAlB,CAAjB;AACA,kBAAMY,gBAAgB,GAAGrN,IAAI,CAACqI,IAAL,CAAUiF,KAAV,CAAgB,GAAhB,CAAzB;AACA,kBAAMC,aAAa,GAAGvN,IAAI,CAACqI,IAAL,CAAUiF,KAAV,CAAgB,GAAhB,EAAqBD,gBAAgB,CAACJ,MAAjB,GAA0B,CAA/C,CAAtB;AACA,kBAAMO,eAAe,GAAGtN,cAAc,CAACsN,eAAf,GAAiCtN,cAAc,CAACsN,eAAf,CAA+BF,KAA/B,CAAqC,GAArC,CAAjC,GAA6E,EAArG;AACA,kBAAMG,iBAAiB,GAAGvN,cAAc,CAACsN,eAAf,GAAiCxN,IAAI,CAACqI,IAAL,CAAUiF,KAAV,CAAgB,GAAhB,EAAqBE,eAAe,CAACP,MAAhB,GAAyB,CAA9C,CAAjC,GAAoF,EAA9G;AACA,kBAAMS,cAAc,GAAGpB,mBAAmB,KAAKzN,cAAc,CAACiO,GAAvC,GAA6C5M,cAAc,CAACwM,aAAf,IAAgCxM,cAAc,CAACwM,aAAf,GAA+B,CAA/D,IAC7DxM,cAAc,CAACsN,eAAf,KAAmC,EAD0B,GACrBA,eAAe,CAAC,CAAD,CAAf,GAAqB,GAArB,GAA2BC,iBADN,GAC0BzP,WAAW,KAAK,GAAhB,GAAsBuP,aAD7F,GAC6G,EADpI;AAEAJ,YAAAA,QAAQ,CAAC,WAAD,CAAR,GAAwBnN,IAAI,CAACqI,IAA7B;AACA8E,YAAAA,QAAQ,CAAC,cAAD,CAAR,GAA2BjN,cAAc,CAAC0I,YAAf,GAA8B1I,cAAc,CAAC0I,YAAf,CAA4BiC,IAA5B,EAA9B,GAAmE,EAA9F;AACAsC,YAAAA,QAAQ,CAAC,WAAD,CAAR,GAAwBxO,iBAAiB,CAACgP,EAA1C;AACAR,YAAAA,QAAQ,CAAC,iBAAD,CAAR,GAA8BO,cAA9B;AACAP,YAAAA,QAAQ,CAAC,WAAD,CAAR,GAAwBnN,IAAI,CAAC4N,IAA7B;AACAhB,YAAAA,QAAQ,CAACiB,MAAT,CAAgB,iBAAiB3H,KAAjC,EAAwClG,IAAxC;AACA4M,YAAAA,QAAQ,CAACiB,MAAT,CAAgB,mBAAmB3H,KAAnC,EAA0CwH,cAA1C;AACAlB,YAAAA,aAAa,CAACsB,IAAd,CAAmBX,QAAnB;AACH,WAhBD;AAiBAP,UAAAA,QAAQ,CAACiB,MAAT,CAAgB,WAAhB,EAA6BzB,aAAa,CAACa,MAA3C;AACAV,UAAAA,YAAY,GAAG5N,iBAAiB,CAACuG,GAAjC;AACH,SApBD,MAoBO;AACHuH,UAAAA,QAAQ,CAAC,WAAD,CAAR,GAAwBvM,cAAc,CAACmM,SAAvC;AACAI,UAAAA,QAAQ,CAAC,cAAD,CAAR,GAA2BvM,cAAc,CAAC0I,YAAf,GAA8B1I,cAAc,CAAC0I,YAAf,CAA4BiC,IAA5B,EAA9B,GAAmE,EAA9F;AACA4B,UAAAA,QAAQ,CAAC,WAAD,CAAR,GAAwB9N,iBAAiB,CAACgP,EAA1C;AACAlB,UAAAA,QAAQ,CAAC,iBAAD,CAAR,GAA8BvM,cAAc,CAACsN,eAA7C;AACAf,UAAAA,QAAQ,CAAC,WAAD,CAAR,GAAwBvM,cAAc,CAAC6N,SAAvC;AACAvB,UAAAA,aAAa,CAACsB,IAAd,CAAmBrB,QAAnB;AACH;AACJ,OA7BD,MA6BO;AACHA,QAAAA,QAAQ,CAAC,WAAD,CAAR,GAAwBvM,cAAc,CAAC8N,aAAf,CAA6BnD,IAA7B,EAAxB;AACA4B,QAAAA,QAAQ,CAAC,cAAD,CAAR,GAA2BvM,cAAc,CAAC+N,gBAAf,GAAkC/N,cAAc,CAAC+N,gBAAf,CAAgCpD,IAAhC,EAAlC,GAA2E,EAAtG;AACA4B,QAAAA,QAAQ,CAAC,WAAD,CAAR,GAAwBvM,cAAc,CAACgO,SAAf,CAAyB7G,KAAzB,GAAiCnH,cAAc,CAACgO,SAAf,CAAyB7G,KAA1D,GAAkE,CAAC,CAA3F;AACAoF,QAAAA,QAAQ,CAAC,iBAAD,CAAR,GAA8B,EAA9B;AACAA,QAAAA,QAAQ,CAAC,WAAD,CAAR,GAAwB,CAAxB;AACAD,QAAAA,aAAa,CAACsB,IAAd,CAAmBrB,QAAnB;AACH;;AACDG,MAAAA,QAAQ,CAACiB,MAAT,CAAgB,cAAhB,EAAgCtB,YAAhC;AACAK,MAAAA,QAAQ,CAACiB,MAAT,CAAgB,UAAhB,EAA4BM,IAAI,CAACC,SAAL,CAAe5B,aAAf,CAA5B,EApDoC,CAqDpC;;AAIA,UAAI5B,UAAU,GAAG,IAAjB;AACA,UAAIlG,SAAS,GAAG3C,SAAhB;;AACA,UAAK,KAAKlC,KAAL,CAAW8D,SAAX,KAAyB,QAA9B,EAAuC;AACnC;AACAe,QAAAA,SAAS,GAAI;AAAEC,UAAAA,aAAa,EAAG,YAAlB;AAAgCC,UAAAA,cAAc,EAAG,cAAjD;AAAiEC,UAAAA,eAAe,EAAG;AAAnF,SAAb;AACA+F,QAAAA,UAAU,GAAG1K,cAAc,CAAC,eAAD,CAA3B;AACH;;AACD,YAAMqB,UAAU,GAAG;AACfgC,QAAAA,SAAS,EAAE;AAAEE,UAAAA,QAAQ,EAAE,KAAK5D,KAAL,CAAWwB;AAAvB,SADI;AAEfuL,QAAAA,QAAQ,EAAEA,QAFK;AAGfyB,QAAAA,YAAY,EAAE,IAHC;AAIf1K,QAAAA,SAAS,EAAE,KAAK9D,KAAL,CAAW8D,SAJP;AAKfD,QAAAA,QAAQ,EAAE,YALK;AAMf4F,QAAAA,QANe;AAMLC,QAAAA,OANK;AAMI3F,QAAAA,SAAS,EAAE,UANf;AAM0Bc,QAAAA;AAN1B,OAAnB;AAQA,aAAOnD,UAAP;AACH,KAlwCkB;;AAAA,SAowCnB+M,cApwCmB,GAowCF,CAACC,aAAD,EAAgBtO,SAAhB,EAA2BuO,OAA3B,KAAuC;AAEpD,UAAItO,cAAc,GAAG,KAAKC,KAAL,CAAWD,cAAX,IAA6B,EAAlD;AACAA,MAAAA,cAAc,CAACD,SAAD,CAAd,GAA4BhC,oBAAoB,CAACiC,cAAc,CAACD,SAAD,CAAf,EAA4BsO,aAA5B,EAA2CC,OAA3C,CAAhD;AACA,WAAKpO,QAAL,CAAc;AAAEF,QAAAA,cAAF;AAAkBG,QAAAA,UAAU,EAAE;AAA9B,OAAd;AACH,KAzwCkB;;AAAA,SA2wCnBoO,aA3wCmB,GA2wCH,MAAM;AAClB,YAAMlN,UAAU,GAAG;AACfgC,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAK1D,KAAL,CAAWwB,QADN;AAERqN,YAAAA,OAAO,EAAE,KAAKvO,KAAL,CAAWD,cAAX,CAA0B,eAA1B;AAFD,WADL;AAKPyO,UAAAA,QAAQ,EAAE,KAAKxO,KAAL,CAAWD,cAAX,CAA0B,eAA1B;AALH,SADI;AAQfmE,QAAAA,UAAU,EAAE,KAAKxE,KAAL,CAAWwE;AARR,OAAnB;AAUA,WAAKxE,KAAL,CAAW+O,uBAAX,CAAmCrN,UAAnC,EAA+C,gBAA/C;AACH,KAvxCkB;;AAAA,SAwxCnBG,aAxxCmB,GAwxCH,CAACoD,IAAD,EAAOnB,SAAP,EAAkBQ,YAAlB,EAAgCP,SAAhC,EAA2CiL,SAA3C,KAAyD;AACrE,WAAKC,cAAL,CAAoBC,OAApB,CAA4B,eAA5B,EAA6C,KAAKlP,KAAL,CAAWwD,IAAX,CAAgBsD,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAA7C,EAAkG,KAAK/G,KAAL,CAAWwD,IAAX,CAAgBsD,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAAlG,EACI,KAAK/G,KAAL,CAAWwD,IAAX,CAAgBsD,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADJ,EACqD,KAAK/G,KAAL,CAAWwD,IAAX,CAAgBsD,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADrD,EAEI,MAAM,KAAK/G,KAAL,CAAW4B,YAAX,CAAwBqD,IAAxB,EAA8BnB,SAA9B,EAAyCQ,YAAzC,EAAuDP,SAAvD,EAAkEiL,SAAlE,CAFV;AAGH,KA5xCkB;;AAEf,SAAK1O,KAAL,GAAc;AACVD,MAAAA,cAAc,EAAE,EADN;AAEVwL,MAAAA,SAAS,EAAE,IAFD;AAGVC,MAAAA,YAAY,EAAE,KAHJ;AAIVC,MAAAA,YAAY,EAAE,IAJJ;AAKV5J,MAAAA,gBAAgB,EAAE;AAAEC,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE;AAAjB,OALR;AAMVO,MAAAA,eAAe,EAAE;AAAER,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE;AAAjB,OANP;AAOVa,MAAAA,sBAAsB,EAAE;AAAEd,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE;AAAjB,OAPd;AAQVgB,MAAAA,sBAAsB,EAAC;AAAEjB,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE;AAAjB,OARb;AASVqD,MAAAA,iBAAiB,EAAE;AATT,KAAd;AAWA,SAAKuJ,cAAL,GAAsB,IAAIvP,cAAJ,EAAtB;AACH;;AAEDyP,EAAAA,MAAM,GAAG;AACL,UAAM;AAAE5M,MAAAA;AAAF,QAAmB,KAAKvC,KAAL,CAAWsB,UAApC;;AACA,QAAI,KAAKtB,KAAL,CAAWyE,cAAX,IAA6B,KAAKnE,KAAL,CAAWkF,YAA5C,EAA0D;AACtD,WAAK4J,eAAL,GAAuB,KAAKC,mBAAL,CAAyB,KAAK/O,KAAL,CAAWoF,iBAAX,KAAiC,qBAAjC,GAAyD,KAAKpF,KAAL,CAAWoF,iBAApE,GAC5C,KAAK1F,KAAL,CAAWW,UADQ,EACI,KAAKL,KAAL,CAAWD,cADf,EAC+B,KAAKC,KAAL,CAAWoF,iBAD1C,CAAvB;AAEH;;AAED,wBACI,0CACKnD,YAAY,iBAAI,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAE,KAAKvB,SAAL,EAAtB;AAAwC,MAAA,WAAW,EAAE,KAAKP,WAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADrB,EAGK,KAAKT,KAAL,CAAWyE,cAAX,iBACG,oBAAC,aAAD;AACI,MAAA,IAAI,EAAE,KAAKnE,KAAL,CAAWoF,iBAAX,KAAiC,qBAAjC,GAAyD,KAAKpF,KAAL,CAAWkF,YAApE,GAAmF,KAAKxF,KAAL,CAAWyE,cADxG;AAEI,MAAA,IAAI,EAAE,KAAKzE,KAAL,CAAWW,UAAX,KAA0B,aAA1B,GAA0C,IAA1C,GAAiD,IAF3D;AAGI,MAAA,UAAU,EAAE,KAAKL,KAAL,CAAWoF,iBAAX,KAAiC,qBAAjC,GAAyD,KAAKH,mBAA9D,GAAoF,KAAK6B,UAHzG;AAII,MAAA,SAAS,EAAE,KAAKpH,KAAL,CAAW8D,SAJ1B;AAKI,MAAA,UAAU,EAAE,KAAK9D,KAAL,CAAW0B,UAL3B;AAMI,MAAA,UAAU,EAAE,KAAKpB,KAAL,CAAWoF,iBAAX,KAAiC,qBAAjC,GAAyD,KAAKpF,KAAL,CAAWoF,iBAApE,GAAwF,KAAK1F,KAAL,CAAWW,UANnH;AAOI,MAAA,KAAK,EAAE,KAAKX,KAAL,CAAWuE,SAPtB;AAQI,MAAA,aAAa,EAAE,KAAKqK,aARxB;AASI,MAAA,WAAW,EAAE,KAAKtO,KAAL,CAAWoF,iBAAX,KAAiC,qBAAjC,GAAyD,KAAKsB,gBAA9D,GAAiF,KAAKwC,WATvG;AAUI,MAAA,aAAa,EAAE,KAAKlJ,KAAL,CAAWmF,aAV9B;AAWI,MAAA,gBAAgB,EAAE,KAAKzF,KAAL,CAAWsP,gBAXjC;AAYI,MAAA,cAAc,EAAE,KAAKhP,KAAL,CAAWoF,iBAAX,KAAiC,qBAAjC,GAAyD,KAAKpF,KAAL,CAAWD,cAAX,CAA0B,cAA1B,CAAzD,GAAqG,KAAKC,KAAL,CAAWD,cAAX,IAA6B,EAZtJ;AAaI,MAAA,eAAe,EAAE,KAAK+O,eAb1B;AAcI,MAAA,YAAY,EAAE,KAAKpP,KAAL,CAAWuE,SAAX,gBACV,oBAAC,KAAD;AACI,QAAA,SAAS,EAAE,KAAKvE,KAAL,CAAW8D,SAD1B;AAEI,QAAA,eAAe,EAAE,KAAKwE,oBAF1B;AAGI,QAAA,UAAU,EAAE,KAAKtI,KAAL,CAAW0B,UAH3B;AAII,QAAA,cAAc,EAAE,KAAKpB,KAAL,CAAWD,cAAX,IAA6B,EAJjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU,GAML,KAAKL,KAAL,CAAWW,UAAX,KAA0B,eAA1B,gBACD,oBAAC,YAAD;AACI,QAAA,cAAc,EAAE,KAAKL,KAAL,CAAWD,cAAX,IAA6B,EADjD;AAEI,QAAA,eAAe,EAAE,KAAKoI,eAF1B;AAGI,QAAA,oBAAoB,EAAE,KAAKW,oBAH/B;AAII,QAAA,aAAa,EAAE,KAAK/B,aAJxB;AAKI,QAAA,aAAa,EAAE,KAAKrH,KAAL,CAAWyH,aAL9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADC,GAQC,KAAKzH,KAAL,CAAWW,UAAX,KAA0B,iBAA1B,gBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,cAAD;AACI,QAAA,cAAc,EAAE,KAAKL,KAAL,CAAWD,cAAX,IAA6B,EADjD;AAEI,QAAA,eAAe,EAAE,KAAKoI,eAF1B;AAGI,QAAA,aAAa,EAAE,KAAKpB,aAHxB;AAII,QAAA,aAAa,EAAE,KAAKrH,KAAL,CAAWyH,aAJ9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADF,GASI,KAAKzH,KAAL,CAAWW,UAAX,KAA0B,mBAA1B,gBACE,oBAAC,gBAAD;AACI,QAAA,cAAc,EAAE,KAAKX,KAAL,CAAWK,cAAX,IAA6B,EADjD;AAEI,QAAA,eAAe,EAAE,KAAKoI,eAF1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,GAKI,KAAKzI,KAAL,CAAWW,UAAX,KAA0B,aAA1B,gBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,cAAD;AACI,QAAA,cAAc,EAAE,KAAKL,KAAL,CAAWD,cAAX,IAA6B,EADjD;AAEI,QAAA,OAAO,EAAE,KAAKL,KAAL,CAAWuP,aAAX,CAAyBC,OAFtC;AAGI,QAAA,aAAa,EAAE,KAAKnI,aAHxB;AAII,QAAA,eAAe,EAAE,KAAKoB,eAJ1B;AAKI,QAAA,OAAO,EAAE,IALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADF,GAUI,KAAKzI,KAAL,CAAWW,UAAX,KAA0B,YAA1B,gBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,aAAD;AACI,QAAA,cAAc,EAAE,KAAKL,KAAL,CAAWD,cAAX,IAA6B,EADjD;AAEI,QAAA,MAAM,EAAE,KAAKL,KAAL,CAAWuP,aAAX,CAAyBE,MAFrC;AAGI,QAAA,aAAa,EAAE,KAAKpI,aAHxB;AAII,QAAA,OAAO,EAAE,IAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADF,GASI,KAAK/G,KAAL,CAAWoF,iBAAX,KAAiC,EAAjC,IAAuC,KAAK1F,KAAL,CAAWW,UAAX,KAA0B,aAAjE,gBACE,oBAAC,UAAD;AACI,QAAA,cAAc,EAAE,KAAKL,KAAL,CAAWD,cAAX,IAA6B,EADjD;AAEI,QAAA,aAAa,EAAE,KAAKgH,aAFxB;AAGI,QAAA,eAAe,EAAE,KAAKoB,eAH1B;AAII,QAAA,oBAAoB,EAAE,KAAKW,oBAJ/B;AAKI,QAAA,aAAa,EAAE,KAAKsG,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CALnB;AAMI,QAAA,eAAe,EAAE,MAAM,KAAK/J,eAAL,CAAqB,KAAK5F,KAAL,CAAWsB,UAAX,CAAsBmK,iBAA3C,EAA8D,KAAKnL,KAAL,CAAWD,cAAzE,EAAyF,KAAKL,KAAL,CAAWqI,WAApG,CAN3B;AAOI,QAAA,YAAY,EAAE,KAAKuD,YAPvB;AAQI,QAAA,YAAY,EAAE,KAAKO,YARvB;AASI,QAAA,SAAS,EAAE,KAAKnM,KAAL,CAAWqI,WAAX,CAAuBtJ,SATtC;AAUI,QAAA,SAAS,EAAE,KAAKiB,KAAL,CAAWqI,WAAX,CAAuBuH,SAVtC;AAWI,QAAA,YAAY,EAAE,KAAK5P,KAAL,CAAWqI,WAAX,CAAuBwH,YAXzC;AAYI,QAAA,UAAU,EAAE,KAAK7P,KAAL,CAAWqI,WAAX,CAAuByH,UAZvC;AAaI,QAAA,oBAAoB,EAAE,KAAK9P,KAAL,CAAWqI,WAAX,CAAuB0H,oBAbjD;AAcI,QAAA,MAAM,EAAE,KAAKzP,KAAL,CAAW2L,MAAX,GAAoB,KAAK3L,KAAL,CAAW2L,MAA/B,GAAwC,EAdpD;AAeI,QAAA,KAAK,EAAE,KAAK3L,KAAL,CAAW0L,KAAX,GAAmB,KAAK1L,KAAL,CAAW0L,KAA9B,GAAsC,EAfjD;AAgBI,QAAA,SAAS,EAAE,KAAKM,SAhBpB;AAiBI,QAAA,eAAe,EAAE,KAAKhM,KAAL,CAAW4L,eAjBhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,GAoBI,KAAKlM,KAAL,CAAWW,UAAX,KAA0B,wBAA1B,gBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,yBAAD;AACI,QAAA,cAAc,EAAE,KAAKL,KAAL,CAAWD,cAAX,IAA6B,EADjD;AAEI,QAAA,kBAAkB,EAAE,KAAKL,KAAL,CAAWuP,aAAX,CAAyBS,kBAFjD;AAGI,QAAA,aAAa,EAAE,KAAK3I,aAHxB;AAII,QAAA,OAAO,EAAE,IAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADF,GAUE,KAAKrH,KAAL,CAAWW,UAAX,KAA0B,aAA1B,gBACF,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACD,oBAAC,kBAAD;AACA,QAAA,cAAc,EAAE,KAAKL,KAAL,CAAWD,cAAX,IAA6B,EAD7C;AAEA,QAAA,OAAO,EAAE,KAAKL,KAAL,CAAWuP,aAAX,CAAyBU,OAFlC;AAGA,QAAA,aAAa,EAAE,KAAK5I,aAHpB;AAIG,QAAA,OAAO,EAAE,IAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADC,CADE,GAUE,KAAKrH,KAAL,CAAWW,UAAX,KAA0B,mBAA1B,gBACF,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,oBAAD;AACI,QAAA,cAAc,EAAE,KAAKL,KAAL,CAAWD,cAAX,IAA6B,EADjD;AAEI,QAAA,aAAa,EAAE,KAAKL,KAAL,CAAWuP,aAAX,CAAyBW,aAF5C;AAGI,QAAA,aAAa,EAAE,KAAK7I,aAHxB;AAII,QAAA,eAAe,EAAE,KAAKoB,eAJ1B;AAKI,QAAA,OAAO,EAAE,KALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADE,GAUA,KAAKzI,KAAL,CAAWW,UAAX,KAA0B,cAA1B,gBACE,oBAAC,OAAD;AACI,QAAA,cAAc,EAAE,KAAKL,KAAL,CAAWD,cAAX,IAA6B,EADjD;AAEI,QAAA,eAAe,EAAE,KAAKoI,eAF1B;AAGI,QAAA,MAAM,EAAE,KAAKgG,cAHjB;AAII,QAAA,cAAc,EAAE,KAAK0B,cAJzB;AAKI,QAAA,gBAAgB,EAAE,KAAKlQ,gBAL3B;AAMI,QAAA,UAAU,EAAE,KAAKK,KAAL,CAAWE,UAN3B;AAOI,QAAA,aAAa,EAAE,KAAK6G,aAPxB;AAQI,QAAA,UAAU,EAAE,KAAKrH,KAAL,CAAWoQ,UAR3B;AASI,QAAA,SAAS,EAAE,KAAKpQ,KAAL,CAAWqQ,SAT1B;AAUI,QAAA,OAAO,EAAE,EAVb,CAWI;AACA;AAZJ;AAaI,QAAA,QAAQ,EAAE,CAbd;AAcI,QAAA,QAAQ,EAAE,KAdd;AAeI,QAAA,KAAK,EAAE,KAAKrQ,KAAL,CAAWwD,IAAX,CAAgBsD,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAfX;AAgBI,QAAA,IAAI,EAAC,cAhBT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,GAmBI,KAAKzG,KAAL,CAAWoF,iBAAX,KAAiC,qBAAjC,gBACE,oBAAC,eAAD;AACI,QAAA,oBAAoB,EAAE,KAAKpF,KAAL,CAAWgG,aADrC;AAEI,QAAA,cAAc,EAAE,KAAKhG,KAAL,CAAWD,cAF/B;AAGI,QAAA,eAAe,EAAE,KAAKoI,eAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,GAMI,EAxI9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJR,CADJ;AAmJH;;AAeD4G,EAAAA,mBAAmB,CAAC1O,UAAD,EAAaN,cAAb,EAA6BqI,QAA7B,EAAuC;AACtD,QAAI4H,WAAW,GAAG,EAAlB;;AACA,QAAI3P,UAAU,KAAK,aAAnB,EAAkC;AAC9B2P,MAAAA,WAAW,GAAG,CACV;AAAE,mBAAW,aAAb;AAA4B,qBAAa,eAAzC;AAA0D,qBAAa,IAAvE;AAA6E,0BAAiB,YAA9F;AAA4G,uBAAe;AAA3H,OADU,CAAd;AAGH,KAJD,MAIO,IAAI3P,UAAU,KAAK,YAAnB,EAAiC;AACpC2P,MAAAA,WAAW,GAAG,CACV;AAAE,mBAAW,YAAb;AAA2B,qBAAa,eAAxC;AAAyD,qBAAa,IAAtE;AAA4E,0BAAiB,YAA7F;AAA2G,uBAAe;AAA1H,OADU,CAAd;AAGH,KAJM,MAIA,IAAI3P,UAAU,KAAK,wBAAnB,EAA6C;AAChD2P,MAAAA,WAAW,GAAG,CACV;AAAE,mBAAW,wBAAb;AAAuC,qBAAa,eAApD;AAAqE,qBAAa,IAAlF;AAAwF,0BAAiB,YAAzG;AAAuH,uBAAe;AAAtI,OADU,CAAd;AAGH,KAJM,MAIA,IAAI3P,UAAU,KAAK,aAAf,IAAgC+H,QAAQ,KAAK,EAAjD,EAAqD;AACxD4H,MAAAA,WAAW,GAAG,CACV;AAAE,mBAAW,iBAAb;AAAgC,qBAAa,cAA7C;AAA6D,qBAAa,IAA1E;AAAgF,0BAAiB,WAAjG;AAA8G,uBAAe;AAA7H,OADU,EAEV;AAAE,mBAAW,aAAb;AAA4B,qBAAa,2BAAzC;AAAsE,qBAAa,IAAnF;AAAyF,0BAAiB,WAA1G;AAAuH,uBAAe;AAAtI,OAFU,CAAd;AAIH,KALM,MAKA,IAAI3P,UAAU,KAAK,eAAnB,EAAoC;AACvC2P,MAAAA,WAAW,GAAG,CACV;AAAE,mBAAW,mBAAb;AAAkC,qBAAa,gBAA/C;AAAiE,qBAAa,IAA9E;AAAoF,0BAAiB,WAArG;AAAkH,uBAAe;AAAjI,OADU,EAEV;AAAE,mBAAW,sBAAb;AAAqC,qBAAa,mBAAlD;AAAuE,qBAAa,IAApF;AAA2F,0BAAiB,WAA5G;AAAyH,uBAAe;AAAxI,OAFU,EAGV;AAAE,mBAAW,mBAAb;AAAkC,qBAAa,oBAA/C;AAAqE,qBAAa,IAAlF;AAAwF,0BAAiB,YAAzG;AAAuH,uBAAe;AAAtI,OAHU,CAAd;;AAKA,UAAIjQ,cAAc,IAAI4G,MAAM,CAACsC,MAAP,CAAclJ,cAAd,EAA8B+M,MAA9B,GAAuC,CAAzD,IAA8D/M,cAAc,CAAC,oBAAD,CAAhF,EAAwG;AACpG,YAAIA,cAAc,CAAC,oBAAD,CAAd,CAAqCmH,KAArC,KAA+C3I,aAAa,CAAC0R,OAAjE,EAA0E;AACtED,UAAAA,WAAW,CAACrC,IAAZ,CACI;AAAE,uBAAW,oBAAb;AAAmC,yBAAa,iBAAhD;AAAmE,yBAAa,IAAhF;AAAsF,8BAAiB,WAAvG;AAAoH,2BAAe;AAAnI,WADJ,EAEI;AAAE,uBAAW,UAAb;AAAyB,yBAAa,WAAtC;AAAmD,yBAAa,IAAhE;AAAsE,8BAAiB,YAAvF;AAAqG,2BAAe;AAApH,WAFJ;AAIH,SALD,MAKO,IAAI5N,cAAc,CAAC,oBAAD,CAAd,CAAqCmH,KAArC,KAA+C3I,aAAa,CAAC2R,UAAjE,EAA6E;AAChFF,UAAAA,WAAW,CAACrC,IAAZ,CACI;AAAE,uBAAW,iBAAb;AAAgC,yBAAa,iBAA7C;AAAgE,yBAAa,IAA7E;AAAmF,8BAAiB,WAApG;AAAiH,2BAAe;AAAhI,WADJ,EAEI;AAAE,uBAAW,kBAAb;AAAiC,yBAAa,YAA9C;AAA4D,yBAAa,IAAzE;AAA+E,8BAAiB,YAAhG;AAA8G,2BAAe;AAA7H,WAFJ;AAIH;AACJ;AACJ,KAnBM,MAmBA,IAAItN,UAAU,KAAK,qBAAnB,EAA0C;AAC7C2P,MAAAA,WAAW,GAAG,KAAKhQ,KAAL,CAAWqF,0BAAzB;AACH,KAFM,MAEA,IAAIhF,UAAU,KAAK,cAAnB,EAAmC;AACtC,UAAI,KAAKL,KAAL,CAAWD,cAAX,IAA6B,KAAKC,KAAL,CAAWD,cAAX,CAA0BoM,mBAA1B,KAAkDzN,cAAc,CAAC8N,IAAlG,EAAwG;AACpGwD,QAAAA,WAAW,GAAG,CACV;AAAE,qBAAW,cAAb;AAA6B,uBAAa,eAA1C;AAA2D,uBAAa,IAAxE;AAA8E,4BAAiB,YAA/F;AAA6G,yBAAe;AAA5H,SADU,EAEV;AAAE,qBAAW,cAAb;AAA6B,uBAAa,WAA1C;AAAuD,uBAAa,IAApE;AAA0E,4BAAiB,YAA3F;AAAyG,yBAAe;AAAxH,SAFU,CAAd;AAIH,OALD,MAKO;AACH;AACAA,QAAAA,WAAW,GAAG,CACV;AAAE,qBAAW,UAAb;AAAyB,uBAAa,WAAtC;AAAmD,uBAAa,IAAhE;AAAuE,4BAAiB,YAAxF;AAAsG,yBAAe;AAArH,SADU,CAAd,CAFG,CAKH;AACH;AACJ,KAbM,MAcF,IAAI3P,UAAU,KAAK,mBAAnB,EAAwC;AACzC2P,MAAAA,WAAW,GAAG,CACV;AAAE,mBAAW,mBAAb;AAAkC,qBAAa,oBAA/C;AAAqE,qBAAa,IAAlF;AAAwF,0BAAiB,YAAzG;AAAuH,uBAAe;AAAtI,OADU,EAEV;AAAE,mBAAW,cAAb;AAA6B,qBAAa,WAA1C;AAAuD,qBAAa,IAApE;AAA0E,0BAAiB,WAA3F;AAAwG,uBAAe;AAAvH,OAFU,CAAd;AAKH,KANI,MAOA;AACD,aAAO,EAAP;AACH;;AACD,QAAIG,gBAAgB,GAAG,EAAvB;AACAH,IAAAA,WAAW,CAACjD,OAAZ,CAAoBpI,IAAI,IAAIA,IAAI,CAACyL,SAAL,KAAmB,IAAnB,IAA2BD,gBAAgB,CAACxC,IAAjB,CAAsBhJ,IAAtB,CAAvD;AACA,WAAOwL,gBAAP;AACH;;AAmSD7J,EAAAA,wBAAwB,CAAClF,UAAD,EAAa;AACjChE,IAAAA,KAAK,CAACsI,IAAN,CAAW,8BAAX,EAA2C,EACvC,GAAGtE;AADoC,KAA3C,EAGKwE,IAHL,CAGUC,QAAQ,IAAI;AACd,WAAK5F,QAAL,CAAc;AACViF,QAAAA,YAAY,EAAE,KADJ;AAEVwG,QAAAA,KAAK,EAAE7F,QAAQ,CAACrF,IAAT,CAAc,OAAd,CAFG;AAGVmL,QAAAA,MAAM,EAAE9F,QAAQ,CAACrF,IAAT,CAAc,QAAd,CAHE;AAIV2E,QAAAA,aAAa,EAAE,KAJL;AAIYC,QAAAA,iBAAiB,EAAE;AAJ/B,OAAd;AAMH,KAVL,EAWKc,KAXL,CAWWC,KAAK,IAAI;AACZ,UAAIA,KAAK,CAACN,QAAN,CAAewK,MAAf,KAA0B,GAA9B,EAAmC;AAC/BnT,QAAAA,KAAK,CAACiJ,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAEO;AACH;AACAlJ,QAAAA,KAAK,CAAC2M,IAAN,CAAW1D,KAAK,CAACN,QAAN,CAAerF,IAAf,CAAoB,QAApB,CAAX;AACH;AACJ,KAlBL;AAmBH;;AAmQDwJ,EAAAA,iBAAiB,CAACb,QAAD,EAAWC,OAAX,EAAoB;AACxC,QAAIhG,SAAS,GAAC,EAAd;AACO,QAAIK,SAAS,GAAG,mBAAhB;;AACA,QAAG,KAAK/D,KAAL,CAAW8D,SAAX,IAAsB,QAAzB,EAAkC;AAClC,WAAKxD,KAAL,CAAWD,cAAX,CAA0B,oBAA1B,EAAgD,MAAhD,EAAwD,WAAxD,IAAuEuQ,MAAM,CAACC,UAAP,CAAkB,KAAKvQ,KAAL,CAAWD,cAAX,CAA0ByQ,SAA5C,EAAuDC,OAAvD,CAA+D,CAA/D,CAAvE;AACA,WAAKzQ,KAAL,CAAWD,cAAX,CAA0B,oBAA1B,EAAgD,MAAhD,EAAwD,gBAAxD,IAA4E2Q,QAAQ,CAAC,KAAK1Q,KAAL,CAAWD,cAAX,CAA0B4Q,cAA3B,CAApF;AACAvN,MAAAA,SAAS,GAAE;AACP,SAACK,SAAS,CAACmN,iBAAV,EAAD,GAAiC,KAAK5Q,KAAL,CAAWD,cAAX,CAA0B8Q,kBAA1B,CAA6ClM,IADvE;AAEPmM,QAAAA,sBAAsB,EAAC,KAAK9Q,KAAL,CAAWD,cAAX,CAA0B+Q,sBAF1C;AAGPnL,QAAAA,SAAS,EAAC,KAAK3F,KAAL,CAAWD,cAAX,CAA0B4F,SAH7B;AAMPrC,QAAAA,QAAQ,EAAE,KAAK5D,KAAL,CAAWwB,QANd;AAOP6P,QAAAA,QAAQ,EAAC,KAAKrR,KAAL,CAAWsB,UAAX,CAAsBiB,YAAtB,CAAmC0D;AAPrC,OAAX;AASE,KAZF,MAcC;AAGGvC,MAAAA,SAAS,GAAE;AACP0N,QAAAA,sBAAsB,EAAC,KAAK9Q,KAAL,CAAWD,cAAX,CAA0B+Q,sBAD1C;AAEPnL,QAAAA,SAAS,EAAC,KAAK3F,KAAL,CAAWD,cAAX,CAA0B4F,SAF7B;AAGPkL,QAAAA,kBAAkB,EAAG,KAAK7Q,KAAL,CAAWD,cAAX,CAA0B8Q,kBAA1B,CAA6C3J,KAH3D;AAIPsJ,QAAAA,SAAS,EAACE,QAAQ,CAACJ,MAAM,CAACC,UAAP,CAAkB,KAAKvQ,KAAL,CAAWD,cAAX,CAA0ByQ,SAA5C,EAAuDC,OAAvD,CAA+D,CAA/D,CAAD,CAJX;AAKPE,QAAAA,cAAc,EAAC,KAAK3Q,KAAL,CAAWD,cAAX,CAA0B4Q,cALlC;AAMPrN,QAAAA,QAAQ,EAAE,KAAK5D,KAAL,CAAWwB,QANd;AAOP6P,QAAAA,QAAQ,EAAC,KAAKrR,KAAL,CAAWsB,UAAX,CAAsBiB,YAAtB,CAAmC0D;AAPrC,OAAX;AASF;;AACF,UAAMvE,UAAU,GAAG;AACfgC,MAAAA,SAAS,EAACA,SADK;AAEfG,MAAAA,QAAQ,EAAE,YAFK;AAGfC,MAAAA,SAAS,EAAE,KAAK9D,KAAL,CAAW8D,SAHP;AAIfC,MAAAA,SAAS,EAAEA,SAJI;AAIO0F,MAAAA,QAJP;AAIiBC,MAAAA;AAJjB,KAAnB;AAMA,WAAOhI,UAAP;AACH;;AACD6I,EAAAA,YAAY,CAACd,QAAD,EAAWC,OAAX,EAAoB;AAC5B,QAAI4H,aAAa,GAAG,EAApB;AACA,SAAKhR,KAAL,CAAWD,cAAX,CAA0BiR,aAA1B,CAAwClL,GAAxC,CAA4CtF,IAAI,IAAI;AAChD,aAAOwQ,aAAa,CAACrD,IAAd,CAAmBnN,IAAI,CAACmE,IAAxB,CAAP;AACH,KAFD;AAGA,QAAIlB,SAAS,GAAG,EAAhB;;AACA,QAAI,KAAK/D,KAAL,CAAWW,UAAX,KAA0B,aAA9B,EAA6C;AAAE;AAC3CoD,MAAAA,SAAS,GAAG,aAAZ;AACH,KAFD,MAEO,IAAI,KAAK/D,KAAL,CAAWW,UAAX,KAA0B,YAA9B,EAA4C;AAAE;AACjDoD,MAAAA,SAAS,GAAG,YAAZ;AACH,KAFM,MAEA,IAAI,KAAK/D,KAAL,CAAWW,UAAX,KAA0B,wBAA9B,EAAwD;AAAE;AAC7DoD,MAAAA,SAAS,GAAG,wBAAZ;AACH,KAFM,MAED,IAAI,KAAK/D,KAAL,CAAWW,UAAX,KAA0B,mBAA9B,EAAmD;AAAE;AACvDoD,MAAAA,SAAS,GAAG,mBAAZ;AACH,KAFK,MAGD,IAAI,KAAK/D,KAAL,CAAWW,UAAX,KAA0B,aAA9B,EAA6C;AAAE;AAChDoD,MAAAA,SAAS,GAAG,aAAZ;AACH,KAjB2B,CAmB3B;;;AACA,QAAIc,SAAS,GAAG3C,SAAhB;;AACA,QAAK,KAAKlC,KAAL,CAAW8D,SAAX,KAAyB,QAA9B,EAAuC;AACnC;AACAe,MAAAA,SAAS,GAAI;AAAEC,QAAAA,aAAa,EAAG,YAAlB;AAAgCC,QAAAA,cAAc,EAAG,cAAjD;AAAiEC,QAAAA,eAAe,EAAG;AAAnF,OAAb,CAFmC,CAGrC;AACD;;AACF,UAAMtD,UAAU,GAAG;AACfgC,MAAAA,SAAS,EAAE;AACP,SAACK,SAAS,CAACmN,iBAAV,EAAD,GAAiCI,aAD1B;AAEP1N,QAAAA,QAAQ,EAAE,KAAK5D,KAAL,CAAWwB;AAFd,OADI;AAKfqC,MAAAA,QAAQ,EAAE,YALK;AAMfC,MAAAA,SAAS,EAAE,QANI;AAOfC,MAAAA,SAAS,EAAEA,SAPI;AAOO0F,MAAAA,QAPP;AAOiBC,MAAAA,OAPjB;AAOyB7E,MAAAA;AAPzB,KAAnB;AASA,WAAOnD,UAAP;AACH;;AA6LDgO,EAAAA,aAAa,CAAC5O,IAAD,EAAO;AAChB,QAAIT,cAAc,GAAG,KAAKC,KAAL,CAAWD,cAAhC;AACA,QAAIkR,WAAW,GAAG,EAAlB;AACA,QAAIC,sBAAsB,GAAG,EAA7B;AACA,QAAI3F,SAAS,GAAG,KAAKvL,KAAL,CAAWuL,SAA3B;AACA,QAAIE,YAAY,GAAG,KAAKzL,KAAL,CAAWyL,YAA9B;AACA,QAAID,YAAY,GAAG,KAAKxL,KAAL,CAAWwL,YAA9B;AACA,QAAII,eAAe,GAAG,EAAtB;AACA,QAAIuF,SAAS,GAAG,KAAhB;;AACA,QAAI3Q,IAAI,CAAC,YAAD,CAAJ,KAAuB,EAA3B,EAA+B;AAC3B,YAAM4Q,UAAU,GAAGpD,IAAI,CAACqD,KAAL,CAAW7Q,IAAI,CAAC,YAAD,CAAf,CAAnB;;AACA,UAAI,KAAKR,KAAL,CAAWuL,SAAf,EAA0B;AACtB,YAAIQ,yBAAyB,GAAGhM,cAAc,CAACgM,yBAAf,GAA2ChM,cAAc,CAACgM,yBAA1D,GAAsF,EAAtH;AACA,YAAIvG,uBAAuB,GAAGzF,cAAc,CAACyF,uBAAf,GAAyCzF,cAAc,CAACyF,uBAAxD,GAAkF,EAAhH;AACA,cAAM8L,cAAc,GAAGF,UAAU,CAACE,cAAlC;AACA,cAAMxG,kBAAkB,GAAGsG,UAAU,CAACtG,kBAAtC;;AACA,YAAIwG,cAAc,KAAK,iBAAnB,IAAwCA,cAAc,KAAK,eAA3D,IAA8EA,cAAc,KAAK,eAArG,EAAsH;AAClH,cAAIF,UAAU,CAACG,SAAX,KAAyB,CAA7B,EAAgC;AAC5BN,YAAAA,WAAW,GAAI,GAAElF,yBAA0B,KAAIuF,cAAe,IAA9D;AACAJ,YAAAA,sBAAsB,GAAI,GAAE1L,uBAAwB,SAAQsF,kBAAmB,QAA/E;AACH,WAHD,MAGO;AACHmG,YAAAA,WAAW,GAAI,GAAElF,yBAA0B,IAAGuF,cAAe,EAA7D;AACAJ,YAAAA,sBAAsB,GAAI,GAAE1L,uBAAwB,KAAIsF,kBAAmB,IAA3E;AACH;AACJ,SARD,MAQO,IAAIwG,cAAc,KAAK,eAAvB,EAAwC;AAC3CL,UAAAA,WAAW,GAAI,GAAElF,yBAA0B,IAAGqF,UAAU,CAACI,SAAU,EAAnE;AACAN,UAAAA,sBAAsB,GAAI,GAAE1L,uBAAwB,KAAIsF,kBAAmB,IAA3E;AACH,SAHM,MAGA;AACHmG,UAAAA,WAAW,GAAI,GAAElF,yBAA0B,IAAGqF,UAAU,CAACI,SAAU,EAAnE;AACAN,UAAAA,sBAAsB,GAAI,GAAE1L,uBAAwB,GAAE4L,UAAU,CAAC5L,uBAAwB,EAAzF;AACH;;AACD+F,QAAAA,SAAS,GAAG,KAAZ;AACAE,QAAAA,YAAY,GAAG,KAAf;AACAD,QAAAA,YAAY,GAAG,IAAf;AACA2F,QAAAA,SAAS,GAAG,IAAZ;AACH;AACJ,KA3BD,MA2BO,IAAI3Q,IAAI,CAAC,gBAAD,CAAJ,KAA2B,EAA/B,EAAmC;AACtC,YAAMiR,cAAc,GAAGzD,IAAI,CAACqD,KAAL,CAAW7Q,IAAI,CAAC,gBAAD,CAAf,CAAvB;AACA,YAAMkR,aAAa,GAAGD,cAAc,CAACC,aAArC;AACA,YAAM3F,yBAAyB,GAAGhM,cAAc,CAACgM,yBAAf,GAA2ChM,cAAc,CAACgM,yBAA1D,GAAsF,EAAxH;AACA,YAAMvG,uBAAuB,GAAGzF,cAAc,CAACyF,uBAAf,GAAyCzF,cAAc,CAACyF,uBAAxD,GAAkF,EAAlH;;AACA,UAAI,KAAKxF,KAAL,CAAWwL,YAAf,EAA6B;AACzByF,QAAAA,WAAW,GAAI,GAAElF,yBAA0B,IAAG0F,cAAc,CAACE,SAAU,EAAvE;AACAT,QAAAA,sBAAsB,GAAI,GAAE1L,uBAAwB,KAAIkM,aAAc,IAAtE;;AACA,YAAIA,aAAa,KAAKjT,SAAS,CAACmT,eAAhC,EAAiD;AAC7CrG,UAAAA,SAAS,GAAG,IAAZ;AACAE,UAAAA,YAAY,GAAG,IAAf;AACAD,UAAAA,YAAY,GAAG,KAAf;AACH,SAJD,MAIO,IAAIkG,aAAa,KAAKjT,SAAS,CAACoT,gBAAhC,EAAkD;AACrDtG,UAAAA,SAAS,GAAG,KAAZ;AACAE,UAAAA,YAAY,GAAG,KAAf;AACAD,UAAAA,YAAY,GAAG,IAAf;AACH,SAJM,MAIA;AACHD,UAAAA,SAAS,GAAG,IAAZ;AACAE,UAAAA,YAAY,GAAG,IAAf;AACAD,UAAAA,YAAY,GAAG,KAAf;AACH;;AACD2F,QAAAA,SAAS,GAAG,IAAZ;AACH,OAjBD,MAiBO,IAAIO,aAAa,KAAKjT,SAAS,CAACmT,eAAhC,EAAiD;AACpDX,QAAAA,WAAW,GAAI,GAAElF,yBAA0B,IAAG0F,cAAc,CAACE,SAAU,EAAvE;AACAT,QAAAA,sBAAsB,GAAI,GAAE1L,uBAAwB,KAAIkM,aAAc,IAAtE;AACAnG,QAAAA,SAAS,GAAG,IAAZ;AACAE,QAAAA,YAAY,GAAG,IAAf;AACAD,QAAAA,YAAY,GAAG,KAAf;AACA2F,QAAAA,SAAS,GAAG,IAAZ;AACH,OAPM,MAOA,IAAIO,aAAa,KAAKjT,SAAS,CAACoT,gBAAhC,EAAkD;AACrDZ,QAAAA,WAAW,GAAI,GAAElF,yBAA0B,IAAG0F,cAAc,CAACE,SAAU,EAAvE;AACAT,QAAAA,sBAAsB,GAAI,GAAE1L,uBAAwB,KAAIkM,aAAc,IAAtE;AACAnG,QAAAA,SAAS,GAAG,KAAZ;AACAE,QAAAA,YAAY,GAAG,KAAf;AACAD,QAAAA,YAAY,GAAG,IAAf;AACA2F,QAAAA,SAAS,GAAG,IAAZ;AACH;AACJ,KArCM,MAqCA,IAAI3Q,IAAI,CAAC,gBAAD,CAAJ,KAA2B,EAA/B,EAAmC;AACtC,UAAI,KAAKR,KAAL,CAAWyL,YAAf,EAA6B;AACzB,cAAMqG,cAAc,GAAG9D,IAAI,CAACqD,KAAL,CAAW7Q,IAAI,CAAC,gBAAD,CAAf,CAAvB;AACA,cAAMuL,yBAAyB,GAAGhM,cAAc,CAACgM,yBAAf,GAA2ChM,cAAc,CAACgM,yBAA1D,GAAsF,EAAxH;AACA,cAAMvG,uBAAuB,GAAGzF,cAAc,CAACyF,uBAAf,GAAyCzF,cAAc,CAACyF,uBAAxD,GAAkF,EAAlH;AACAyL,QAAAA,WAAW,GAAI,GAAElF,yBAA0B,GAAE+F,cAAc,CAACC,aAAc,GAA1E;AACAb,QAAAA,sBAAsB,GAAI,GAAE1L,uBAAwB,KAAIsM,cAAc,CAACE,aAAc,UAArF;AACAzG,QAAAA,SAAS,GAAG,IAAZ;AACAE,QAAAA,YAAY,GAAG,KAAf;AACAD,QAAAA,YAAY,GAAG,KAAf;AACAI,QAAAA,eAAe,GAAGkG,cAAc,CAAClG,eAAjC;AACAuF,QAAAA,SAAS,GAAG,IAAZ;AACH;AACJ;;AACD,QAAIA,SAAJ,EAAe;AACX,YAAMc,gBAAgB,GAAGhB,WAAW,CAACiB,KAAZ,CAAkB,CAAlB,EAAqB,GAArB,CAAzB;;AACA,UAAID,gBAAgB,CAACnF,MAAjB,IAA2B,GAA/B,EAAoC;AAChC/M,QAAAA,cAAc,CAAC,yBAAD,CAAd,GAA4CmR,sBAA5C;AACAnR,QAAAA,cAAc,CAAC,2BAAD,CAAd,GAA8CkS,gBAA9C;AACA,aAAKhS,QAAL,CAAc;AAAEsL,UAAAA,SAAF;AAAaE,UAAAA,YAAb;AAA2BD,UAAAA,YAA3B;AAAyCI,UAAAA,eAAzC;AAA0D7L,UAAAA;AAA1D,SAAd;AACH,OAJD,MAIO;AACHA,QAAAA,cAAc,CAAC,2BAAD,CAAd,GAA8CkS,gBAA9C;AACA,aAAKhS,QAAL,CAAc;AAAEsL,UAAAA,SAAF;AAAaE,UAAAA,YAAb;AAA2BD,UAAAA,YAA3B;AAAyCI,UAAAA,eAAzC;AAA0D7L,UAAAA;AAA1D,SAAd;AACH;AACJ;AACJ;;AA8HDoS,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAC9B,QAAI,KAAK1S,KAAL,CAAW2S,aAAf,EAA8B;AAC1B,WAAKpS,QAAL,CAAc;AACVsL,QAAAA,SAAS,EAAE,IADD;AAEVC,QAAAA,YAAY,EAAE,KAFJ;AAGVC,QAAAA,YAAY,EAAE;AAHJ,OAAd;AAKA,YAAMnL,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE5C,cADK;AAEf6C,QAAAA,IAAI,EAAE;AAAE6R,UAAAA,aAAa,EAAE;AAAjB;AAFS,OAAnB;AAIA,WAAK3S,KAAL,CAAWe,WAAX,CAAuBH,UAAvB;AACH;;AACD,QAAI,KAAKZ,KAAL,CAAWK,cAAX,KAA8BqS,aAAa,CAACrS,cAAhD,EAAgE;AAC5D,WAAKE,QAAL,CAAc;AAAEF,QAAAA,cAAc,EAAE,KAAKL,KAAL,CAAWK;AAA7B,OAAd;AACH;;AACD,QAAI,KAAKL,KAAL,CAAWsB,UAAX,KAA0BoR,aAAa,CAACpR,UAA5C,EAAwD;AACpD,UAAI;AAAEa,QAAAA,gBAAF;AAAoBS,QAAAA,eAApB;AAAqCM,QAAAA,sBAArC;AAA4DG,QAAAA,sBAA5D;AAAmFhD,QAAAA;AAAnF,UAAsG,KAAKC,KAA/G;;AACA,UAAI,KAAKN,KAAL,CAAWsC,SAAX,KAAyBJ,SAA7B,EAAwC;AACpC,YAAI,KAAKlC,KAAL,CAAWW,UAAX,KAA0B,aAA9B,EAA6C;AACzCwB,UAAAA,gBAAgB,GAAG;AAAEC,YAAAA,IAAI,EAAE,CAAR;AAAWC,YAAAA,IAAI,EAAE;AAAjB,WAAnB;AACH,SAFD,MAEO,IAAI,KAAKrC,KAAL,CAAWW,UAAX,KAA0B,YAA9B,EAA4C;AAC/CiC,UAAAA,eAAe,GAAG;AAAER,YAAAA,IAAI,EAAE,CAAR;AAAWC,YAAAA,IAAI,EAAE;AAAjB,WAAlB;AACH,SAFM,MAEA,IAAI,KAAKrC,KAAL,CAAWW,UAAX,KAA0B,wBAA9B,EAAwD;AAC3DuC,UAAAA,sBAAsB,GAAG;AAAEd,YAAAA,IAAI,EAAE,CAAR;AAAWC,YAAAA,IAAI,EAAE;AAAjB,WAAzB;AACH,SAFM,MAGF,IAAI,KAAKrC,KAAL,CAAWW,UAAX,KAA0B,mBAA9B,EAAmD;AACpD0C,UAAAA,sBAAsB,GAAG;AAAEjB,YAAAA,IAAI,EAAE,CAAR;AAAWC,YAAAA,IAAI,EAAE;AAAjB,WAAzB;AACH,SAFI,MAEC;AACFF,UAAAA,gBAAgB,GAAG;AAAEC,YAAAA,IAAI,EAAE,CAAR;AAAWC,YAAAA,IAAI,EAAE;AAAjB,WAAnB;AACAO,UAAAA,eAAe,GAAG;AAAER,YAAAA,IAAI,EAAE,CAAR;AAAWC,YAAAA,IAAI,EAAE;AAAjB,WAAlB;AACAa,UAAAA,sBAAsB,GAAG;AAAEd,YAAAA,IAAI,EAAE,CAAR;AAAWC,YAAAA,IAAI,EAAE;AAAjB,WAAzB;AACH;AACJ;;AACD,WAAK9B,QAAL,CAAc;AAAE4B,QAAAA,gBAAF;AAAoBS,QAAAA,eAApB;AAAqCM,QAAAA,sBAArC;AAA4DG,QAAAA,sBAA5D;AAAoFhD,QAAAA;AAApF,OAAd;AACH;AACJ;;AAn0C4B;;AAs0CjC,eAAe5C,UAAU,CAACqC,QAAD,CAAzB","sourcesContent":["import React, { Component } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { injectIntl } from 'react-intl';\r\nimport rsapi from '../../rsapi';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { Row } from 'react-bootstrap';\r\nimport '../../assets/styles/lims-global-theme.css';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddSpecification from './AddSpecification';\r\nimport AddCodedResult from './AddCodedResult';\r\nimport AddParameter from './AddParameter';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, create_UUID, onDropAttachFileList, deleteAttachmentDropZone } from '../../components/CommonScript';\r\nimport Esign from '../audittrail/Esign';\r\nimport AddTestSection from './AddTestSection';\r\nimport AddTestMethod from './AddTestMethod';\r\nimport AddTestInstrumentCategory from './AddTestInstrumentCategory';\r\nimport AddFormula from './AddFormula';\r\nimport ValidateFormula from './ValidateFormula';\r\nimport AddFile from './AddFile';\r\nimport { parameterType, transactionStatus, operators, attachmentType, FORMULAFIELDTYPE } from '../../components/Enumeration';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component'\r\nimport TestSectionTab from './TestSectionTab';\r\nimport TestMethodTab from './TestMethodTab';\r\nimport TestInstrumentCategoryTab from './TestInstrumentCategoryTab';\r\nimport TestFileTab from './TestFileTab';\r\nimport AddTestContainerType from './AddTestContainerType';\r\nimport TestContainerTypeTab from './TestContainerTypeTab';\r\nimport ParameterTab from './ParameterTab';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { ChartLegendTitle } from '@progress/kendo-react-charts';\r\nimport TestPackageTab from './TestPackageTab';\r\nimport AddTestPackageTest from './AddTestPackageTest';\r\nclass TestView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ({\r\n            selectedRecord: {},\r\n            fieldFlag: true,\r\n            operatorFlag: false,\r\n            functionFlag: true,\r\n            sectionDataState: { skip: 0, take: 10 },\r\n            methodDataState: { skip: 0, take: 10 },\r\n            instrumentCatDataState: { skip: 0, take: 10 },\r\n            containerTypeDataState:{ skip: 0, take: 10 },\r\n            formulaScreenName: \"\"\r\n        });\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n\r\n    render() {\r\n        const { SelectedTest } = this.props.masterData;\r\n        if (this.props.openChildModal || this.state.openValidate) {\r\n            this.mandatoryFields = this.findMandatoryFields(this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.state.formulaScreenName :\r\n                this.props.screenName, this.state.selectedRecord, this.state.formulaScreenName)\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {SelectedTest && <CustomTab tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />}\r\n\r\n                {this.props.openChildModal &&\r\n                    <SlideOutModal\r\n                        show={this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.state.openValidate : this.props.openChildModal}\r\n                        size={this.props.screenName === \"IDS_FORMULA\" ? 'xl' : 'lg'}\r\n                        closeModal={this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.hideValidateFormula : this.closeModal}\r\n                        operation={this.props.operation}\r\n                        inputParam={this.props.inputParam}\r\n                        screenName={this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.state.formulaScreenName : this.props.screenName}\r\n                        esign={this.props.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        onSaveClick={this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.calculateFormula : this.onSaveClick}\r\n                        showCalculate={this.state.showCalculate}\r\n                        showSaveContinue={this.props.showSaveContinue}\r\n                        selectedRecord={this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ? this.state.selectedRecord['formulainput'] : this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.mandatoryFields}\r\n                        addComponent={this.props.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.operation}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> : this.props.screenName === \"IDS_PARAMETER\" ?\r\n                                <AddParameter\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onNumericInputChange={this.onNumericInputChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    parameterData={this.props.parameterData}\r\n                                />\r\n                                : this.props.screenName === \"IDS_CODEDRESULT\" ?\r\n                                    <Row>\r\n                                        <AddCodedResult\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onComboChange={this.onComboChange}\r\n                                            parameterData={this.props.parameterData}\r\n                                        />\r\n                                    </Row>\r\n                                    : this.props.screenName === \"IDS_SPECIFICATION\" ?\r\n                                        <AddSpecification\r\n                                            selectedRecord={this.props.selectedRecord || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                        />\r\n                                        : this.props.screenName === \"IDS_SECTION\" ?\r\n                                            <Row>\r\n                                                <AddTestSection\r\n                                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                                    section={this.props.otherTestData.section}\r\n                                                    onComboChange={this.onComboChange}\r\n                                                    onInputOnChange={this.onInputOnChange}\r\n                                                    isMulti={true}\r\n                                                />\r\n                                            </Row>\r\n                                            : this.props.screenName === \"IDS_METHOD\" ?\r\n                                                <Row>\r\n                                                    <AddTestMethod\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                        method={this.props.otherTestData.method}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        isMulti={true}\r\n                                                    />\r\n                                                </Row>\r\n                                                : this.state.formulaScreenName === \"\" && this.props.screenName === \"IDS_FORMULA\" ?\r\n                                                    <AddFormula\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        onInputOnChange={this.onInputOnChange}\r\n                                                        onNumericInputChange={this.onNumericInputChange}\r\n                                                        onFormulaDrop={this.onFormulaDrop.bind(this)}\r\n                                                        validateFormula={() => this.validateFormula(this.props.masterData.selectedParameter, this.state.selectedRecord, this.props.formulaData)}\r\n                                                        clearFormula={this.clearFormula}\r\n                                                        onUserInputs={this.onUserInputs}\r\n                                                        operators={this.props.formulaData.operators}\r\n                                                        functions={this.props.formulaData.functions}\r\n                                                        testCategory={this.props.formulaData.testCategory}\r\n                                                        testMaster={this.props.formulaData.testMaster}\r\n                                                        dynamicFormulaFields={this.props.formulaData.dynamicFormulaFields}\r\n                                                        result={this.state.result ? this.state.result : \"\"}\r\n                                                        query={this.state.query ? this.state.query : \"\"}\r\n                                                        getSyntax={this.getSyntax}\r\n                                                        sfunctionsyntax={this.state.sfunctionsyntax}\r\n                                                    />\r\n                                                    : this.props.screenName === \"IDS_INSTRUMENTCATEGORY\" ?\r\n                                                        <Row>\r\n                                                            <AddTestInstrumentCategory\r\n                                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                                instrumentcategory={this.props.otherTestData.instrumentcategory}\r\n                                                                onComboChange={this.onComboChange}\r\n                                                                isMulti={true}\r\n                                                            />\r\n                                                        </Row>\r\n\r\n                                                      : this.props.screenName === \"IDS_PACKAGE\" ?\r\n                                                      <Row>\r\n                                                     <AddTestPackageTest\r\n                                                     selectedRecord={this.state.selectedRecord || {}}\r\n                                                     package={this.props.otherTestData.package}\r\n                                                     onComboChange={this.onComboChange}\r\n                                                        isMulti={true}\r\n                                                   />\r\n                                                 </Row>\r\n                                                        \r\n                                                        : this.props.screenName === \"IDS_CONTAINERTYPE\" ?\r\n                                                        <Row>\r\n                                                            <AddTestContainerType\r\n                                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                                containertype={this.props.otherTestData.containertype}\r\n                                                                onComboChange={this.onComboChange}\r\n                                                                onInputOnChange={this.onInputOnChange}\r\n                                                                isMulti={false}\r\n                                                            />\r\n                                                        </Row>\r\n                                                        : this.props.screenName === \"IDS_TESTFILE\" ?\r\n                                                            <AddFile\r\n                                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                                onInputOnChange={this.onInputOnChange}\r\n                                                                onDrop={this.onDropTestFile}\r\n                                                                onDropAccepted={this.onDropAccepted}\r\n                                                                deleteAttachment={this.deleteAttachment}\r\n                                                                actionType={this.state.actionType}\r\n                                                                onComboChange={this.onComboChange}\r\n                                                                linkMaster={this.props.linkMaster}\r\n                                                                editFiles={this.props.editFiles}\r\n                                                                maxSize={20}\r\n                                                                // maxFiles={this.props.operation === \"update\" ? 1 : 3}\r\n                                                                // multiple={this.props.operation === \"update\" ? false : true}\r\n                                                                maxFiles={1 }\r\n                                                                multiple={false}\r\n                                                                label={this.props.intl.formatMessage({ id: \"IDS_TESTFILE\" })}\r\n                                                                name=\"testfilename\"\r\n                                                            />\r\n                                                            : this.state.formulaScreenName === \"IDS_VALIDATEFORMULA\" ?\r\n                                                                <ValidateFormula\r\n                                                                    DynamicFormulaFields={this.state.DynamicFields}\r\n                                                                    selectedRecord={this.state.selectedRecord}\r\n                                                                    onInputOnChange={this.onInputOnChange}\r\n                                                                />\r\n                                                                : \"\"\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n\r\n\r\n    findMandatoryFields(screenName, selectedRecord, optional) {\r\n        let mandyFields = [];\r\n        if (screenName === \"IDS_SECTION\") {\r\n            mandyFields = [\r\n                { \"idsName\": \"IDS_SECTION\", \"dataField\": \"availableData\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        } else if (screenName === \"IDS_METHOD\") {\r\n            mandyFields = [\r\n                { \"idsName\": \"IDS_METHOD\", \"dataField\": \"availableData\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        } else if (screenName === \"IDS_INSTRUMENTCATEGORY\") {\r\n            mandyFields = [\r\n                { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"availableData\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        } else if (screenName === \"IDS_FORMULA\" && optional === \"\") {\r\n            mandyFields = [\r\n                { \"idsName\": \"IDS_FORMULANAME\", \"dataField\": \"sformulaname\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_FORMULA\", \"dataField\": \"sformulacalculationdetail\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        } else if (screenName === \"IDS_PARAMETER\") {\r\n            mandyFields = [\r\n                { \"idsName\": \"IDS_PARAMETERNAME\", \"dataField\": \"sparametername\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_PARAMETERSYNONYM\", \"dataField\": \"sparametersynonym\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                { \"idsName\": \"IDS_PARAMETERTYPE\", \"dataField\": \"nparametertypecode\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n            if (selectedRecord && Object.values(selectedRecord).length > 0 && selectedRecord[\"nparametertypecode\"]) {\r\n                if (selectedRecord[\"nparametertypecode\"].value === parameterType.NUMERIC) {\r\n                    mandyFields.push(\r\n                        { \"idsName\": \"IDS_ROUNDINGDIGITS\", \"dataField\": \"nroundingdigits\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                        { \"idsName\": \"IDS_UNIT\", \"dataField\": \"nunitcode\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    );\r\n                } else if (selectedRecord[\"nparametertypecode\"].value === parameterType.PREDEFINED) {\r\n                    mandyFields.push(\r\n                        { \"idsName\": \"IDS_CODEDRESULT\", \"dataField\": \"spredefinedname\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                        { \"idsName\": \"IDS_ACTUALRESULT\", \"dataField\": \"ngradecode\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                    );\r\n                }\r\n            }\r\n        } else if (screenName === \"IDS_VALIDATEFORMULA\") {\r\n            mandyFields = this.state.validateFormulaMandyFields;\r\n        } else if (screenName === \"IDS_TESTFILE\") {\r\n            if (this.state.selectedRecord && this.state.selectedRecord.nattachmenttypecode === attachmentType.LINK) {\r\n                mandyFields = [\r\n                    { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"slinkfilename\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                    { \"idsName\": \"IDS_LINKNAME\", \"dataField\": \"nlinkcode\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                ];\r\n            } else {\r\n                // if (this.props.operation !== 'update') {\r\n                mandyFields = [\r\n                    { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_CHOOSE\", \"controlType\": \"file\"},\r\n                ];\r\n                // }\r\n            }\r\n        } \r\n        else if (screenName === \"IDS_CONTAINERTYPE\") {\r\n            mandyFields = [\r\n                { \"idsName\": \"IDS_CONTAINERTYPE\", \"dataField\": \"ncontainertypecode\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_QUANTITY\", \"dataField\": \"nquantity\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n\r\n            ]\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n        let finalMandyFields = [];\r\n        mandyFields.forEach(item => item.mandatory === true && finalMandyFields.push(item));\r\n        return finalMandyFields;\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    tabDetail = () => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_PARAMETER\",\r\n            <ParameterTab\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                TestParameter={this.props.masterData.TestParameter}\r\n                masterData={this.props.masterData}\r\n                userInfo={this.props.userInfo}\r\n                getTestDetails={this.props.getTestDetails}\r\n                inputParam={this.props.inputParam}\r\n                addParameter={this.props.addParameter}\r\n                deleteAction={this.props.deleteAction}\r\n                ConfirmDelete={this.ConfirmDelete}\r\n                addCodedResult={this.props.addCodedResult}\r\n                addFormula={this.props.addFormula}\r\n                onSwitchChange={this.onSwitchChange}\r\n                addParameterSpecification={this.props.addParameterSpecification}\r\n                screenName=\"IDS_PARAMETER\"\r\n            />\r\n        );\r\n        tabMap.set(\"IDS_SECTION\",\r\n            <TestSectionTab\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                dataResult={process(this.props.masterData[\"TestSection\"], (this.props.screenName === undefined || this.props.screenName === \"IDS_SECTION\") ? this.state.sectionDataState : { skip: 0, take: 10 })}\r\n                dataState={(this.props.screenName === undefined || this.props.screenName === \"IDS_SECTION\") ? this.state.sectionDataState : { skip: 0, take: 10 }}\r\n                dataStateChange={(event) => this.setState({ sectionDataState: event.dataState })}\r\n                selectedTest={this.props.masterData.SelectedTest}\r\n                userInfo={this.props.userInfo}\r\n                inputParam={this.props.inputParam}\r\n                deleteRecord={this.deleteRecord}\r\n                defaultRecord={this.defaultRecord}\r\n                getAvailableData={this.props.getAvailableData}\r\n                TestSection={this.props.masterData.TestSection || []}\r\n                screenName=\"IDS_SECTION\"\r\n            />);\r\n        tabMap.set(\"IDS_METHOD\",\r\n            <TestMethodTab\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                dataResult={process(this.props.masterData[\"TestMethod\"], (this.props.screenName === undefined || this.props.screenName === \"IDS_METHOD\") ? this.state.methodDataState : { skip: 0, take: 10 })}\r\n                dataState={(this.props.screenName === undefined || this.props.screenName === \"IDS_METHOD\") ? this.state.methodDataState : { skip: 0, take: 10 }}\r\n                dataStateChange={(event) => this.setState({ methodDataState: event.dataState })}\r\n                selectedTest={this.props.masterData.SelectedTest}\r\n                userInfo={this.props.userInfo}\r\n                inputParam={this.props.inputParam}\r\n                deleteRecord={this.deleteRecord}\r\n                defaultRecord={this.defaultRecord}\r\n                getAvailableData={this.props.getAvailableData}\r\n                TestMethod={this.props.masterData.TestMethod || []}\r\n                screenName=\"IDS_METHOD\"\r\n            />\r\n        );\r\n        tabMap.set(\"IDS_FILE\",\r\n            <TestFileTab\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                userInfo={this.props.userInfo}\r\n                inputParam={this.props.inputParam}\r\n                deleteRecord={this.deleteRecord}\r\n                TestFile={this.props.masterData.TestFile || []}\r\n                getAvailableData={this.props.getAvailableData}\r\n                addTestFile={this.props.addTestFile}\r\n                viewTestFile={this.viewTestFile}\r\n                defaultRecord={this.defaultRecord}\r\n                screenName=\"IDS_FILE\"\r\n                settings = {this.props.settings}\r\n            />);\r\n        tabMap.set(\"IDS_INSTRUMENTCATEGORY\",\r\n            <TestInstrumentCategoryTab\r\n                controlMap={this.props.controlMap}\r\n                userRoleControlRights={this.props.userRoleControlRights}\r\n                dataResult={process(this.props.masterData[\"TestInstrumentCategory\"], (this.props.screenName === undefined || this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") ? this.state.instrumentCatDataState : { skip: 0, take: 10 })}\r\n                dataState={(this.props.screenName === undefined || this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") ? this.state.instrumentCatDataState : { skip: 0, take: 10 }}\r\n                dataStateChange={(event) => this.setState({ instrumentCatDataState: event.dataState })}\r\n                selectedTest={this.props.masterData.SelectedTest}\r\n                userInfo={this.props.userInfo}\r\n                inputParam={this.props.inputParam}\r\n                deleteRecord={this.deleteRecord}\r\n                defaultRecord={this.defaultRecord}\r\n                getAvailableData={this.props.getAvailableData}\r\n                TestInstrumentCategory={this.props.masterData.TestInstrumentCategory}\r\n                screenName=\"IDS_INSTRUMENTCATEGORY\"\r\n            />\r\n        );\r\n\r\n        tabMap.set(\"IDS_PACKAGE\",\r\n        <TestPackageTab\r\n            controlMap={this.props.controlMap}\r\n            userRoleControlRights={this.props.userRoleControlRights}\r\n            dataResult={process(this.props.masterData[\"TestPackage\"] || [], (this.props.screenName === undefined || this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") ? this.state.instrumentCatDataState : { skip: 0, take: 10 })}\r\n            dataState={(this.props.screenName === undefined || this.props.screenName === \"IDS_PACKAGE\") ? this.state.instrumentCatDataState : { skip: 0, take: 10 }}\r\n            dataStateChange={(event) => this.setState({ instrumentCatDataState: event.dataState })}\r\n            selectedTest={this.props.masterData.SelectedTest}\r\n            userInfo={this.props.userInfo}\r\n            inputParam={this.props.inputParam}\r\n            deleteRecord={this.deleteRecord}\r\n            defaultRecord={this.defaultRecord}\r\n            getAvailableData={this.props.getAvailableData}\r\n            TestPackage={this.props.masterData.TestPackage}\r\n            screenName=\"IDS_PACKAGE\"\r\n        />\r\n    );\r\n\r\n        tabMap.set(\"IDS_CONTAINERTYPE\",\r\n        <TestContainerTypeTab\r\n            controlMap={this.props.controlMap}\r\n            userRoleControlRights={this.props.userRoleControlRights}\r\n            dataResult={process(this.props.masterData[\"Containertype\"], (this.props.screenName === undefined || this.props.screenName === \"IDS_CONTAINERTYPE\") ? this.state.containerTypeDataState : { skip: 0, take: 10 })}\r\n            dataState={(this.props.screenName === undefined || this.props.screenName === \"IDS_CONTAINERTYPE\") ? this.state.containerTypeDataState : { skip: 0, take: 10 }}\r\n            dataStateChange={(event) => this.setState({ containerTypeDataState: event.dataState })}\r\n            selectedTest={this.props.masterData.SelectedTest}\r\n            userInfo={this.props.userInfo}\r\n            inputParam={this.props.inputParam}\r\n            deleteRecord={this.deleteRecord}\r\n            defaultRecord={this.defaultRecord}\r\n            getAvailableData={this.props.getAvailableData}\r\n            TestContainerType={this.props.masterData.Containertype}\r\n            getActiveTestContainerTypeById={this.props.getActiveTestContainerTypeById}\r\n            intl={this.props.intl}\r\n            screenName=\"IDS_CONTAINERTYPE\"\r\n        />\r\n    );\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    viewTestFile = (filedata) => {\r\n        const inputParam = {\r\n            inputData: {\r\n                testfile: filedata,\r\n                userinfo: this.props.userInfo\r\n            },\r\n            classUrl: \"testmaster\",\r\n            operation: \"view\",\r\n            methodUrl: \"AttachedTestFile\",\r\n            screenName: \"IDS_TEST\"\r\n        }\r\n        this.props.viewAttachment(inputParam);\r\n    }\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        const methodUrl = deleteParam.methodUrl;\r\n        const selected = deleteParam.selectedRecord;\r\n        let dataState = undefined;\r\n        if (this.props.screenName === \"IDS_SECTION\") {\r\n            dataState = this.state.sectionDataState;\r\n        } else if (this.props.screenName === \"IDS_METHOD\") {\r\n            dataState = this.state.methodDataState;\r\n        } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\r\n            dataState = this.state.instrumentCatDataState;\r\n        }\r\n        else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\r\n            dataState = this.state.containerTypeDataState;\r\n        }\r\n          \r\n        const inputParam = {\r\n            inputData: {\r\n                [methodUrl.toLowerCase()]: selected,\r\n                userinfo: this.props.userInfo\r\n            },\r\n            classUrl: \"testmaster\",\r\n            operation: deleteParam.operation,\r\n            methodUrl: methodUrl,\r\n            screenName: \"IDS_TEST\", dataState\r\n        }\r\n        const masterData = this.props.masterData;\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openChildModal: true, screenName: \"IDS_TEST\", operation: deleteParam.operation, selectedRecord: {}\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\r\n        }\r\n    }\r\n\r\n    defaultRecord = (defaultParam, event) => {\r\n        const methodUrl = defaultParam.methodUrl;\r\n        let dataItem = defaultParam.selectedRecord;\r\n        // dataItem[\"ndefaultstatus\"] = transactionStatus.YES;\r\n        let dataState = undefined;\r\n        if (this.props.screenName === \"IDS_SECTION\") {\r\n            dataState = this.state.sectionDataState;\r\n        } else if (this.props.screenName === \"IDS_METHOD\") {\r\n            dataState = this.state.methodDataState;\r\n        } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\r\n            dataState = this.state.instrumentCatDataState;\r\n        }\r\n        else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\r\n            dataState = this.state.containerTypeDataState;\r\n        }\r\n\r\n        let postParam =  { inputListName : \"TestMaster\", selectedObject : \"SelectedTest\", primaryKeyField : \"ntestcode\" };\r\n      \r\n        const inputParam = {\r\n            inputData: {\r\n                [methodUrl.toLowerCase()]: dataItem,\r\n                userinfo: this.props.userInfo\r\n            },\r\n            classUrl: \"testmaster\",\r\n            operation: \"setDefault\",\r\n            methodUrl: methodUrl, dataState,postParam\r\n        }\r\n        const masterData = this.props.masterData;\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, defaultParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openChildModal: true, screenName: \"Test\", operation: defaultParam.operation, selectedRecord: {}\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\r\n        }\r\n    }\r\n\r\n    onSwitchChange = (item, key, methodUrl,event) => {\r\n        let dataItem = item;\r\n        // dataItem[\"ndefaultstatus\"] = 3;\r\n        dataItem['ndefaultstatus'] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        const inputParam = {\r\n            inputData: {\r\n                [key]: dataItem,\r\n                userinfo: this.props.userInfo\r\n            },\r\n            classUrl: \"testmaster\",\r\n            operation: \"setDefault\",\r\n            methodUrl: methodUrl\r\n        }\r\n        this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", {});\r\n    }\r\n\r\n    hideValidateFormula = () => {\r\n        this.setState({ openValidate: false, showCalculate: false, formulaScreenName: \"\", validateFormulaMandyFields: [] });\r\n    }\r\n\r\n    validateFormula = (testData) => {\r\n        const sformulacalculationcode = this.state.selectedRecord.sformulacalculationcode;\r\n        if (sformulacalculationcode) {\r\n            if (sformulacalculationcode.includes(\"$D\") || sformulacalculationcode.includes(\"$P\")) {\r\n                rsapi.post(\"/testmaster/validateTestFormula\", { ntestcode: testData.ntestcode, \"sformula\": sformulacalculationcode, userinfo: this.props.userInfo })\r\n                    .then(response => {\r\n                        let selectedRecord = this.state.selectedRecord || {};\r\n                        selectedRecord[\"formulainput\"] = {};\r\n                        const validateFormulaMandyFields = response.data.map((item, index) => {\r\n                            return { \"idsName\": \"IDS_FILLALLFIELDS\", \"dataField\": \"dynamicformulafield_\" + index, \"mandatory\": true }\r\n                        });\r\n                        this.setState({\r\n                            openValidate: true,\r\n                            DynamicFields: response.data,\r\n                            dynamicField: [],\r\n                            selectedRecord,\r\n                            formulaScreenName: \"IDS_VALIDATEFORMULA\",\r\n                            showCalculate: true, validateFormulaMandyFields\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        toast.error(error.message)\r\n                    });\r\n            } else {\r\n                const inputParam = {\r\n                    dynamicformulafields: [],\r\n                    sformulacalculationcode: this.state.selectedRecord.sformulacalculationcode,\r\n                    userinfo: this.props.userInfo\r\n                }\r\n                this.calculateFormulaFunction(inputParam);\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERFORMULA\" }))\r\n        }\r\n    }\r\n\r\n    calculateFormulaFunction(inputParam) {\r\n        rsapi.post(\"/testmaster/calculateFormula\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                this.setState({\r\n                    openValidate: false,\r\n                    query: response.data[\"Query\"],\r\n                    result: response.data[\"Result\"],\r\n                    showCalculate: false, formulaScreenName: \"\"\r\n                })\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    //toast.warn(error.response.data);\r\n                    toast.warn(error.response.data[\"Result\"]);\r\n                }\r\n            });\r\n    }\r\n\r\n    calculateFormula = () => {\r\n        const dynamicField = this.state.dynamicField;\r\n        const dynamicformulafields = Object.keys(dynamicField).map((keyname) => {\r\n            return dynamicField[keyname];\r\n        });\r\n        const inputParam = {\r\n            dynamicformulafields: dynamicformulafields,\r\n            sformulacalculationcode: this.state.selectedRecord.sformulacalculationcode,\r\n            userinfo: this.props.userInfo\r\n        }\r\n        this.calculateFormulaFunction(inputParam);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.loadEsign;\r\n        let openChildModal = this.props.openChildModal;\r\n        let selectedRecord = this.props.selectedRecord;\r\n        if (this.props.loadEsign) {\r\n            if (this.props.operation === \"delete\" || this.props.operation === \"Default\") {\r\n                loadEsign = false;\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord[\"agree\"] = 4;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        } else {\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, caseNo) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (fieldName === \"sparametername\") {\r\n                    selectedRecord[fieldName] = comboData;\r\n                    selectedRecord[\"sparametersynonym\"] = comboData.value;\r\n                } else {\r\n                    selectedRecord[fieldName] = comboData;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                const parameterData = this.props.parameterData;\r\n                let item = comboData['item'];\r\n                let needUnit = true;\r\n                let needRoundingDigit = true;\r\n                let needCodedResult = true;\r\n                let needActualResult = true;\r\n                let npredefinedcode = 4;\r\n                if (item[\"nunitrequired\"] === 3) {\r\n                    needUnit = false;\r\n                    selectedRecord[\"nunitcode\"] = this.props.parameterData.defaultUnit;\r\n                } else {\r\n                    selectedRecord[\"nunitcode\"] = \"\";\r\n                }\r\n                if (item[\"nroundingrequired\"] === 3) {\r\n                    needRoundingDigit = false;\r\n                } else {\r\n                    selectedRecord[\"nroundingdigits\"] = \"\";\r\n                }\r\n                if (item[\"npredefinedrequired\"] === 3) {\r\n                    needCodedResult = false;\r\n                    npredefinedcode = item[\"npredefinedrequired\"];\r\n                } else {\r\n                    selectedRecord[\"spredefinedname\"] = \"\";\r\n                }\r\n                if (item[\"ngraderequired\"] === 3) {\r\n                    needActualResult = false;\r\n                    selectedRecord[\"ngradecode\"] = this.props.parameterData.defaultGrade;\r\n                } else {\r\n                    selectedRecord[\"ngradecode\"] = \"\";\r\n                }\r\n                selectedRecord[fieldName] = comboData;\r\n                const parameterInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord, parameterData: { ...parameterData, needUnit, needRoundingDigit, needCodedResult, needActualResult, npredefinedcode } }\r\n                }\r\n                this.props.updateStore(parameterInfo);\r\n                break;\r\n\r\n            case 3:\r\n                selectedRecord[fieldName] = comboData;\r\n                this.props.formulaChangeFunction({ ntestcategorycode: comboData.value, nFlag: 2, userinfo: this.props.userInfo }, this.props.formulaData, 1, selectedRecord, '/changeTestCatgoryInFormula');\r\n                break;\r\n\r\n            case 4:\r\n                selectedRecord[fieldName] = comboData;\r\n                this.props.formulaChangeFunction({ ntestcode: comboData.value, nFlag: 3, userinfo: this.props.userInfo }, this.props.formulaData, 2, selectedRecord, '/changeTestInFormula');\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChange = (event, caseNo, optional) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (event.target.type === 'checkbox') {\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n                } else if (event.target.type === 'radio') {\r\n                    selectedRecord[event.target.name] = optional;\r\n                  //  selectedRecord[\"sfilename\"]=\"\";\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 4:\r\n                const inputValue = event.target.value;\r\n                if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 5:\r\n                if(optional.ndynamicformulafieldcode === FORMULAFIELDTYPE.INTEGER && optional.sdescription.indexOf('P$') === -1){\r\n                        const value = event.target.value.replace(/[^-^0-9]/g, '');\r\n                        const dynamicField = this.state.dynamicField || [];\r\n                        if ((/^-?\\d*?$/.test(value))) {\r\n                            if (!selectedRecord['formulainput']) {\r\n                                selectedRecord['formulainput'] = {};\r\n                            }\r\n                            selectedRecord['formulainput'][event.target.name] = value;\r\n                            dynamicField[event.target.name] = {\r\n                                sparameter: optional.sdescription,\r\n                                svalues: value\r\n                            };\r\n                        }else if(value === \"\"){\r\n                            if (!selectedRecord['formulainput']) {\r\n                                selectedRecord['formulainput'] = {};\r\n                            }\r\n                            selectedRecord['formulainput'][event.target.name] = value;\r\n                            dynamicField[event.target.name] = {\r\n                                sparameter: optional.sdescription,\r\n                                svalues: value\r\n                            };\r\n                        }\r\n                        this.setState({ dynamicField, selectedRecord });\r\n                        break;\r\n                }else{\r\n                    const value = event.target.value.replace(/[^-^0-9.]/g, '');\r\n                    const dynamicField = this.state.dynamicField || [];\r\n                    if ((/^-?\\d*?\\.?\\d*?$/.test(value)) || value !== \"\") {\r\n                        if (!selectedRecord['formulainput']) {\r\n                            selectedRecord['formulainput'] = {};\r\n                        }\r\n                        selectedRecord['formulainput'][event.target.name] = value;\r\n                        dynamicField[event.target.name] = {\r\n                            sparameter: optional.sdescription,\r\n                            svalues: value\r\n                        };\r\n                    }\r\n                    this.setState({ dynamicField, selectedRecord });\r\n                    break;\r\n                }\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    // onNumericInputChange = (value, name) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     selectedRecord[name] = value;\r\n    //     this.setState({ selectedRecord });\r\n    // }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        console.log(\"value:\", value, name);\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (name === \"nroundingdigits\") {\r\n            const values = value.target.value.replace(/[^-^0-9]/g, '');\r\n            if (/^-?\\d*?$/.test(values) || values === \"\") {\r\n                console.log(\"val:\", values);\r\n                selectedRecord[name] = values;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[name] = value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputParam = {};\r\n        let defaultInput = {};\r\n        let isValidRequest = true;\r\n        if (this.props.screenName === \"IDS_PARAMETER\") {\r\n            inputParam = this.onSaveParameter(saveType, formRef);\r\n            defaultInput = {\r\n                nparametertypecode: this.state.selectedRecord.nparametertypecode,\r\n                ngradecode: this.state.selectedRecord.ngradecode,\r\n                nunitcode: \"\"\r\n            };\r\n        } else if (this.props.screenName === \"IDS_CODEDRESULT\") {\r\n            inputParam = this.onSaveCodedResult(saveType, formRef);\r\n        } else if (this.props.screenName === \"IDS_SPECIFICATION\") {\r\n            const selectedRecord = this.props.selectedRecord;\r\n            if (selectedRecord[\"sminb\"] || selectedRecord[\"smina\"] || selectedRecord[\"smaxa\"] || selectedRecord[\"smaxa\"]\r\n                || selectedRecord[\"sminlod\"] || selectedRecord[\"smaxlod\"] || selectedRecord[\"sminloq\"] || selectedRecord[\"smaxloq\"]\r\n                || selectedRecord[\"sdisregard\"] || selectedRecord[\"sresultvalue\"]) {\r\n                inputParam = this.onSaveSpecification(saveType, formRef);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERSPECLIMIT\" }));\r\n                isValidRequest = false;\r\n            }\r\n        } else if (this.props.screenName === \"IDS_FORMULA\") {\r\n            inputParam = this.onSaveFormula(saveType, formRef);\r\n        } else if (this.props.screenName === \"IDS_TESTFILE\") {\r\n            inputParam = this.onSaveTestFile(saveType, formRef);\r\n        }else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\r\n            inputParam = this.saveContainerType(saveType, formRef);\r\n        } \r\n         else {\r\n            inputParam = this.saveTestData(saveType, formRef);\r\n        }\r\n        if (isValidRequest) {\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", defaultInput);\r\n            }\r\n        }\r\n    }\r\n    saveContainerType(saveType, formRef) {\r\n let inputData={};\r\n        let methodUrl = \"TestContainerType\";\r\n        if(this.props.operation==\"create\"){\r\n        this.state.selectedRecord['ncontainertypecode']['item']['nquantity'] = Number.parseFloat(this.state.selectedRecord.nquantity).toFixed(3);\r\n        this.state.selectedRecord['ncontainertypecode']['item']['noutsourcecode'] = parseInt(this.state.selectedRecord.noutsourcecode);\r\n        inputData= {\r\n            [methodUrl.toLocaleLowerCase()]: this.state.selectedRecord.ncontainertypecode.item,\r\n            ntestcontainertypecode:this.state.selectedRecord.ntestcontainertypecode,\r\n            ntestcode:this.state.selectedRecord.ntestcode,\r\n\r\n\r\n            userinfo: this.props.userInfo,\r\n            testcode:this.props.masterData.SelectedTest.ntestcode\r\n        }\r\n         }\r\n         else\r\n         {\r\n    \r\n\r\n            inputData= {\r\n                ntestcontainertypecode:this.state.selectedRecord.ntestcontainertypecode,\r\n                ntestcode:this.state.selectedRecord.ntestcode,\r\n                ncontainertypecode : this.state.selectedRecord.ncontainertypecode.value,\r\n                nquantity:parseInt(Number.parseFloat(this.state.selectedRecord.nquantity).toFixed(3)),\r\n                noutsourcecode:this.state.selectedRecord.noutsourcecode,\r\n                userinfo: this.props.userInfo,\r\n                testcode:this.props.masterData.SelectedTest.ntestcode\r\n            }\r\n         }\r\n        const inputParam = {\r\n            inputData:inputData ,\r\n            classUrl: \"testmaster\",\r\n            operation: this.props.operation,\r\n            methodUrl: methodUrl, saveType, formRef\r\n        }\r\n        return inputParam;\r\n    }\r\n    saveTestData(saveType, formRef) {\r\n        let availableData = [];\r\n        this.state.selectedRecord.availableData.map(data => {\r\n            return availableData.push(data.item);\r\n        });\r\n        let methodUrl = \"\";\r\n        if (this.props.screenName === \"IDS_SECTION\") { //Test Section\r\n            methodUrl = \"TestSection\";\r\n        } else if (this.props.screenName === \"IDS_METHOD\") { //Test Method\r\n            methodUrl = \"TestMethod\";\r\n        } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") { //Test Instrument Category\r\n            methodUrl = \"TestInstrumentCategory\";\r\n        }else if (this.props.screenName === \"IDS_CONTAINERTYPE\") { //Test Instrument Category\r\n            methodUrl = \"TestContainerType\";\r\n        }\r\n        else if (this.props.screenName === \"IDS_PACKAGE\") { //Test Package\r\n            methodUrl = \"Testpackage\";\r\n        }\r\n\r\n         // let selectedId = null;\r\n         let postParam = undefined;\r\n         if ( this.props.operation === \"update\"){\r\n             // edit\r\n             postParam =  { inputListName : \"TestMaster\", selectedObject : \"SelectedTest\", primaryKeyField : \"ntestcode\" };\r\n           //  selectedId = selectedRecord[\"ntestparametercode\"];               \r\n         }\r\n        const inputParam = {\r\n            inputData: {\r\n                [methodUrl.toLocaleLowerCase()]: availableData,\r\n                userinfo: this.props.userInfo\r\n            },\r\n            classUrl: \"testmaster\",\r\n            operation: \"create\",\r\n            methodUrl: methodUrl, saveType, formRef,postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveParameter = (saveType, formRef) => {\r\n        const storeData = this.props;\r\n        let inputData = {};\r\n        let customobject = null;\r\n        const userInfo = storeData.userInfo;\r\n        let postParam = undefined;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        let testColumns = [{ \"ntestparametercode\": \"int\" }, { \"nparametertypecode\": \"input\" }, { \"nunitcode\": \"input\" }, { \"sparametername\": \"input\" },\r\n        { \"sparametersynonym\": \"string\" }, { \"nroundingdigits\": \"int\" }, { \"objPredefinedParameter\": \"customobject\" }]\r\n        if (storeData.operation === \"create\") {\r\n            inputData = {\r\n                \"testparameter\": {\r\n                    nisadhocparameter: transactionStatus.NO,\r\n                    nisvisible: transactionStatus.YES,\r\n                    nstatus: transactionStatus.ACTIVE\r\n                }\r\n            };\r\n        } else {\r\n            inputData = { \"testparameter\": {} }\r\n            let selectedId = null;\r\n    \r\n            if ( storeData.operation === \"update\"){\r\n                // edit\r\n                postParam =  { inputListName : \"TestMaster\", selectedObject : \"SelectedTest\", primaryKeyField : \"ntestcode\" };\r\n                selectedId = selectedRecord[\"ntestparametercode\"];               \r\n            }\r\n        }\r\n        if (selectedRecord[\"nparametertypecode\"]) {\r\n            if (this.props.parameterData.npredefinedcode === transactionStatus.YES) {\r\n                customobject = {};\r\n                customobject[\"ntestparametercode\"] = selectedRecord[\"ntestparametercode\"];\r\n                customobject[\"ntestpredefinedcode\"] = selectedRecord[\"ntestpredefinedcode\"];\r\n                customobject[\"spredefinedname\"] = selectedRecord[\"spredefinedname\"].trim();\r\n                customobject[\"nstatus\"] = 1;\r\n                customobject[\"ndefaultstatus\"] = transactionStatus.YES;\r\n                customobject[\"ngradecode\"] = selectedRecord[\"ngradecode\"] ? selectedRecord[\"ngradecode\"].value ? selectedRecord[\"ngradecode\"].value : -1 : -1;\r\n            }\r\n            inputData[\"userinfo\"] = userInfo;\r\n            testColumns.map(item => {\r\n                const key = Object.keys(item)[0];\r\n                const value = Object.values(item)[0];\r\n                if (value === \"input\") {\r\n                    return inputData[\"testparameter\"][key] = selectedRecord[key] ? selectedRecord[key].value ? selectedRecord[key].value : -1 : -1;\r\n                } else if (value === \"int\") {\r\n                    return inputData[\"testparameter\"][key] = selectedRecord[key] ? selectedRecord[key] : 0;\r\n                } else if (value === \"string\") {\r\n                    return inputData[\"testparameter\"][key] = selectedRecord[key] ? selectedRecord[key].trim() : \"\";\r\n                } else if (value === \"customobject\") {\r\n                    return inputData[\"testparameter\"][key] = customobject;\r\n                } else {\r\n                    return null;\r\n                }\r\n            });\r\n            inputData[\"testparameter\"][\"ntestcode\"] = storeData.masterData[\"SelectedTest\"][\"ntestcode\"];\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testmaster\",\r\n            operation: storeData.operation,\r\n            methodUrl: \"TestParameter\",\r\n            saveType, formRef,postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveSpecification = (saveType, formRef) => {\r\n        const selectedRecord = this.props.selectedRecord;\r\n        const columns = [{ \"ntestparametercode\": \"int\" }, { \"ntestparamnumericcode\": \"int\" }, { \"sminb\": \"string\" },\r\n        { \"smina\": \"string\" }, { \"smaxa\": \"string\" }, { \"smaxb\": \"string\" }, { \"sminlod\": \"string\" }, { \"smaxlod\": \"string\" },\r\n        { \"sminloq\": \"string\" }, { \"smaxloq\": \"string\" }, { \"sdisregard\": \"string\" }, { \"sresultvalue\": \"string\" }];\r\n        let inputData = {\r\n            \"testparameternumeric\": {\r\n                nstatus: 1\r\n            },\r\n            userinfo: this.props.userInfo\r\n        };\r\n        columns.map(item => {\r\n            const key = Object.keys(item)[0];\r\n            const value = Object.values(item)[0];\r\n            if (value === \"int\") {\r\n                return inputData[\"testparameternumeric\"][key] = selectedRecord[key] ? selectedRecord[key] : 0;\r\n            } else if (value === \"string\") {\r\n                return inputData[\"testparameternumeric\"][key] = selectedRecord[key] ?\r\n                    selectedRecord[key] === \"0\" ? selectedRecord[key] : selectedRecord[key].replace(/^0+/, '') : null;\r\n            } else {\r\n                return null;\r\n            }\r\n        });\r\n        let selectedId = null;\r\n        let postParam = undefined;\r\n        if ( this.props.operation === \"update\"){\r\n            // edit\r\n            postParam =  { inputListName : \"TestMaster\", selectedObject : \"SelectedTest\", primaryKeyField : \"ntestcode\" };\r\n            selectedId = selectedRecord[\"ntestparametercode\"];               \r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testmaster\",\r\n            operation: this.props.operation,\r\n            methodUrl: \"TestParameterNumeric\",\r\n            saveType, formRef,postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveCodedResult = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const testPredefinedParameter= {            \r\n                                    spredefinedname: selectedRecord[\"spredefinedname\"].trim(),\r\n                                    ngradecode: selectedRecord[\"ngradecode\"] ? selectedRecord[\"ngradecode\"].value ? selectedRecord[\"ngradecode\"].value : -1 : -1,\r\n                                    ntestparametercode: selectedRecord[\"ntestparametercode\"],\r\n                                    ntestpredefinedcode: selectedRecord[\"ntestpredefinedcode\"],\r\n                                    nstatus: transactionStatus.ACTIVE,\r\n                                    ndefaultstatus: selectedRecord[\"ndefaultstatus\"],//transactionStatus.NO\r\n                            \r\n                                }                            \r\n\r\n        //let selectedId = null;\r\n        let postParam = undefined;\r\n        if ( this.props.operation === \"update\"){\r\n            // edit\r\n            postParam =  { inputListName : \"TestMaster\", selectedObject : \"SelectedTest\", primaryKeyField : \"ntestcode\" };\r\n            //selectedId = selectedRecord[\"ntestparametercode\"];               \r\n        }\r\n        const inputParam = {\r\n            inputData: {\r\n                testpredefinedparameter: testPredefinedParameter,\r\n                userinfo: this.props.userInfo\r\n            },\r\n            classUrl: \"testmaster\",\r\n            operation: this.props.operation,\r\n            methodUrl: \"TestPredefinedParameter\",\r\n            saveType, formRef,postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveFormula = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const formulafield = [\"sformulaname\", \"sformulacalculationcode\", \"sformulacalculationdetail\"];\r\n        const selectedParameter = this.props.masterData.selectedParameter;\r\n        let testformula = {\r\n            ntestcode: selectedParameter[\"ntestcode\"],\r\n            ntestparametercode: selectedParameter[\"ntestparametercode\"],\r\n            ndefaultstatus: transactionStatus.NO,\r\n            nstatus: transactionStatus.ACTIVE\r\n        }\r\n        formulafield.map(field => {\r\n            return testformula[field] = selectedRecord[field].trim()\r\n        })\r\n\r\n        let selectedId = null;\r\n        let postParam = undefined;\r\n        if ( this.props.operation === \"update\"){\r\n            // edit\r\n            postParam =  { inputListName : \"TestMaster\", selectedObject : \"SelectedTest\", primaryKeyField : \"ntestcode\" };\r\n            selectedId = selectedRecord[\"ntestparametercode\"];               \r\n        }\r\n        const inputParam = {\r\n            inputData: {\r\n                testformula: testformula,\r\n                userinfo: this.props.userInfo\r\n            },\r\n            classUrl: \"testmaster\",\r\n            operation: \"create\",\r\n            methodUrl: \"TestFormula\", saveType, formRef,postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    clearFormula = () => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        selectedRecord[\"sformulacalculationcode\"] = \"\";\r\n        selectedRecord[\"sformulacalculationdetail\"] = \"\";\r\n        selectedRecord[\"userinput\"] = \"\";\r\n        this.setState({\r\n            fieldFlag: true,\r\n            operatorFlag: false,\r\n            functionFlag: true,\r\n            selectedRecord,\r\n            query: \"\",\r\n            result: \"\",\r\n            openValidate: false,\r\n            sfunctionsyntax: \"\"\r\n        })\r\n    }\r\n\r\n    onFormulaDrop(data) {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let formulaName = \"\";\r\n        let formulaCalculationCode = \"\";\r\n        let fieldFlag = this.state.fieldFlag;\r\n        let functionFlag = this.state.functionFlag;\r\n        let operatorFlag = this.state.operatorFlag;\r\n        let sfunctionsyntax = \"\";\r\n        let isDropped = false;\r\n        if (data['testfields'] !== \"\") {\r\n            const testfields = JSON.parse(data['testfields']);\r\n            if (this.state.fieldFlag) {\r\n                let sformulacalculationdetail = selectedRecord.sformulacalculationdetail ? selectedRecord.sformulacalculationdetail : \"\";\r\n                let sformulacalculationcode = selectedRecord.sformulacalculationcode ? selectedRecord.sformulacalculationcode : \"\";\r\n                const sparametername = testfields.sparametername;\r\n                const ntestparametercode = testfields.ntestparametercode;\r\n                if (sparametername !== \"Parameter-Field\" && sparametername !== \"Formula-Field\" && sparametername !== \"Dynamic-Field\") {\r\n                    if (testfields.isformula === 1) {\r\n                        formulaName = `${sformulacalculationdetail} (${sparametername}) `;\r\n                        formulaCalculationCode = `${sformulacalculationcode}$O20O$${ntestparametercode}$O18O$`;\r\n                    } else {\r\n                        formulaName = `${sformulacalculationdetail} ${sparametername}`;\r\n                        formulaCalculationCode = `${sformulacalculationcode}$P${ntestparametercode}P$`;\r\n                    }\r\n                } else if (sparametername !== \"Formula-Field\") {\r\n                    formulaName = `${sformulacalculationdetail} ${testfields.stestname}`;\r\n                    formulaCalculationCode = `${sformulacalculationcode}$D${ntestparametercode}D$`;\r\n                } else {\r\n                    formulaName = `${sformulacalculationdetail} ${testfields.stestname}`;\r\n                    formulaCalculationCode = `${sformulacalculationcode}${testfields.sformulacalculationcode}`;\r\n                }\r\n                fieldFlag = false;\r\n                functionFlag = false;\r\n                operatorFlag = true;\r\n                isDropped = true;\r\n            }\r\n        } else if (data['operatorfields'] !== \"\") {\r\n            const operatorfields = JSON.parse(data['operatorfields']);\r\n            const noperatorcode = operatorfields.noperatorcode;\r\n            const sformulacalculationdetail = selectedRecord.sformulacalculationdetail ? selectedRecord.sformulacalculationdetail : \"\";\r\n            const sformulacalculationcode = selectedRecord.sformulacalculationcode ? selectedRecord.sformulacalculationcode : \"\";\r\n            if (this.state.operatorFlag) {\r\n                formulaName = `${sformulacalculationdetail} ${operatorfields.soperator}`;\r\n                formulaCalculationCode = `${sformulacalculationcode}$O${noperatorcode}O$`;\r\n                if (noperatorcode === operators.OPENPARENTHESIS) {\r\n                    fieldFlag = true;\r\n                    functionFlag = true;\r\n                    operatorFlag = false;\r\n                } else if (noperatorcode === operators.CLOSEPARENTHESIS) {\r\n                    fieldFlag = false\r\n                    functionFlag = false;\r\n                    operatorFlag = true;\r\n                } else {\r\n                    fieldFlag = true;\r\n                    functionFlag = true;\r\n                    operatorFlag = false;\r\n                }\r\n                isDropped = true;\r\n            } else if (noperatorcode === operators.OPENPARENTHESIS) {\r\n                formulaName = `${sformulacalculationdetail} ${operatorfields.soperator}`;\r\n                formulaCalculationCode = `${sformulacalculationcode}$O${noperatorcode}O$`;\r\n                fieldFlag = true;\r\n                functionFlag = true;\r\n                operatorFlag = false;\r\n                isDropped = true;\r\n            } else if (noperatorcode === operators.CLOSEPARENTHESIS) {\r\n                formulaName = `${sformulacalculationdetail} ${operatorfields.soperator}`;\r\n                formulaCalculationCode = `${sformulacalculationcode}$O${noperatorcode}O$`;\r\n                fieldFlag = false;\r\n                functionFlag = false;\r\n                operatorFlag = true;\r\n                isDropped = true;\r\n            }\r\n        } else if (data['functionfields'] !== \"\") {\r\n            if (this.state.functionFlag) {\r\n                const functionfields = JSON.parse(data['functionfields']);\r\n                const sformulacalculationdetail = selectedRecord.sformulacalculationdetail ? selectedRecord.sformulacalculationdetail : \"\";\r\n                const sformulacalculationcode = selectedRecord.sformulacalculationcode ? selectedRecord.sformulacalculationcode : \"\";\r\n                formulaName = `${sformulacalculationdetail}${functionfields.sfunctionname}(`;\r\n                formulaCalculationCode = `${sformulacalculationcode}$F${functionfields.nfunctioncode}F$$O20O$`;\r\n                fieldFlag = true;\r\n                functionFlag = false;\r\n                operatorFlag = false;\r\n                sfunctionsyntax = functionfields.sfunctionsyntax;\r\n                isDropped = true;\r\n            }\r\n        }\r\n        if (isDropped) {\r\n            const sliceFormulaName = formulaName.slice(0, 512);\r\n            if (sliceFormulaName.length <= 512) {\r\n                selectedRecord[\"sformulacalculationcode\"] = formulaCalculationCode;\r\n                selectedRecord[\"sformulacalculationdetail\"] = sliceFormulaName;\r\n                this.setState({ fieldFlag, functionFlag, operatorFlag, sfunctionsyntax, selectedRecord });\r\n            } else {\r\n                selectedRecord[\"sformulacalculationdetail\"] = sliceFormulaName;\r\n                this.setState({ fieldFlag, functionFlag, operatorFlag, sfunctionsyntax, selectedRecord });\r\n            }\r\n        }\r\n    }\r\n\r\n    onUserInputs = (event) => {\r\n        const value = event.target.value.replace(/^0+/, '');\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (event.keyCode === 13) {\r\n            if (this.state.fieldFlag) {\r\n                const sformulacalculationdetail = selectedRecord.sformulacalculationdetail ? selectedRecord.sformulacalculationdetail : \"\";\r\n                const sformulacalculationcode = selectedRecord.sformulacalculationcode ? selectedRecord.sformulacalculationcode : \"\";\r\n                selectedRecord[\"sformulacalculationcode\"] = `${sformulacalculationcode}$V${value}V$`;\r\n                selectedRecord[\"sformulacalculationdetail\"] = `${sformulacalculationdetail} ${value}`;\r\n                selectedRecord[event.target.name] = \"\";\r\n                this.setState({\r\n                    fieldFlag: false,\r\n                    functionFlag: false,\r\n                    operatorFlag: true,\r\n                    selectedRecord\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    getSyntax = (event) => {\r\n        this.setState({ sfunctionsyntax: event.dataItem.sfunctionsyntax })\r\n    }\r\n\r\n    onSaveTestFile = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let testFileArray = [];\r\n        let testFile = {\r\n            ntestcode: this.props.masterData.SelectedTest.ntestcode,\r\n            ntestfilecode: selectedRecord.ntestfilecode ? selectedRecord.ntestfilecode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            nattachmenttypecode,\r\n            ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK?\"nlinkdefaultstatus\":\"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK?\"nlinkdefaultstatus\":\"ndefaultstatus\"] : 4\r\n        };\r\n        const formData = new FormData();\r\n        if (nattachmenttypecode === attachmentType.FTP) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, testFile);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\r\n                    const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntestfilecode && selectedRecord.ntestfilecode > 0\r\n                        && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] = file.name;\r\n                    tempData[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\r\n                    tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    tempData[\"nfilesize\"] = file.size;\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    testFileArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                testFile[\"sfilename\"] = selectedRecord.sfilename;\r\n                testFile[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\r\n                testFile[\"nlinkcode\"] = transactionStatus.NA;\r\n                testFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                testFile[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                testFileArray.push(testFile);\r\n            }\r\n        } else {\r\n            testFile[\"sfilename\"] = selectedRecord.slinkfilename.trim();\r\n            testFile[\"sdescription\"] = selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\";\r\n            testFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n            testFile[\"ssystemfilename\"] = \"\";\r\n            testFile[\"nfilesize\"] = 0;\r\n            testFileArray.push(testFile);\r\n        }\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"testfile\", JSON.stringify(testFileArray));\r\n        // formData.append(\"userinfo\", JSON.stringify(this.props.userInfo));\r\n\r\n\r\n        \r\n        let selectedId = null;\r\n        let postParam = undefined;\r\n        if ( this.props.operation === \"update\"){\r\n            // edit\r\n            postParam =  { inputListName : \"TestMaster\", selectedObject : \"SelectedTest\", primaryKeyField : \"ntestcode\" };\r\n            selectedId = selectedRecord[\"ntestfilecode\"];               \r\n        }\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.operation,\r\n            classUrl: \"testmaster\",\r\n            saveType, formRef, methodUrl: \"TestFile\",postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onDropTestFile = (attachedFiles, fieldName, maxSize) => {\r\n\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n    }\r\n    ConfirmDelete = (item, operation, ncontrolCode, methodUrl, modalName) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.props.deleteAction(item, operation, ncontrolCode, methodUrl, modalName));\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.isFormulaOpen) {\r\n            this.setState({\r\n                fieldFlag: true,\r\n                operatorFlag: false,\r\n                functionFlag: true\r\n            });\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { isFormulaOpen: false }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n        if (this.props.masterData !== previousProps.masterData) {\r\n            let { sectionDataState, methodDataState, instrumentCatDataState,containerTypeDataState,selectedRecord } = this.state;\r\n            if (this.props.dataState === undefined) {\r\n                if (this.props.screenName === \"IDS_SECTION\") {\r\n                    sectionDataState = { skip: 0, take: 10 };\r\n                } else if (this.props.screenName === \"IDS_METHOD\") {\r\n                    methodDataState = { skip: 0, take: 10 };\r\n                } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\r\n                    instrumentCatDataState = { skip: 0, take: 10 };\r\n                } \r\n                else if (this.props.screenName === \"IDS_CONTAINERTYPE\") {\r\n                    containerTypeDataState = { skip: 0, take: 10 };\r\n                }else {\r\n                    sectionDataState = { skip: 0, take: 10 };\r\n                    methodDataState = { skip: 0, take: 10 };\r\n                    instrumentCatDataState = { skip: 0, take: 10 };\r\n                }\r\n            }\r\n            this.setState({ sectionDataState, methodDataState, instrumentCatDataState,containerTypeDataState ,selectedRecord});\r\n        }\r\n    }\r\n}\r\n\r\nexport default injectIntl(TestView);"]},"metadata":{},"sourceType":"module"}