{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\ResultEntryBySample\\\\ResultEntry.jsx\";\nimport React, { Component } from 'react';\nimport { faPlay, faAddressBook, faCheckCircle, faEye, faPencilRuler, faFileImport, faSync } from '@fortawesome/free-solid-svg-icons';\nimport { Card, Col, Row, Nav, Button } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport SplitterLayout from \"react-splitter-layout\";\nimport { ContentPanel } from '../../components/App.styles';\nimport { crudMaster, updateStore, getsubSampleREDetail, getTestREDetail, getTestChildTabREDetail, resultGetModule, fetchMaterialRecord, completeTest, testMethodSourceEdit, addREInstrument, addREMaterial, deleteInstrumentRecord, fetchInstrumentRecord, deleteTaskRecord, fetchTaskRecord, parameterRecord, checkListRecord, onSaveCheckList, defaultTest, getFormula, getRERegistrationType, getRERegistrationSubType, getREApprovalConfigVersion, getResultEntryDetails, calculateFormula, getREFilterStatus, getREFilterTestData, getREJobStatus, viewAttachment, validateEsignCredentialComplete, getAttachmentCombo, deleteAttachment, getCommentsCombo, updateTestMethodSource, resultImportFile, filterTransactionList, validateEsignCredential, getSampleChildTabREDetail, updateParameterComments, getREMaterialCategoryByType, getREMaterialByCategory, getREMaterialInvertoryByMaterial, previewSampleReport, getMeanCalculationTestParameter, getAvailableMaterialQuantity } from '../../actions';\nimport { sortData, create_UUID, getControlMap, listDataFromDynamicArray, formatInputDate, validateTwoDigitDate, showEsign, constructOptionList, deleteAttachmentDropZone } from '../../components/CommonScript';\nimport rsapi from '../../rsapi';\nimport { toast } from 'react-toastify';\nimport { parameterType, grade, transactionStatus, RegistrationType, RegistrationSubType, FORMULAFIELDTYPE, designProperties } from '../../components/Enumeration';\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\nimport { ProductList } from '../product/product.styled';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport ResultEntryResultsTab from './ResultEntryResultsTab';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport ResultEntryFilter from './ResultEntryFilter';\nimport ResultEntryInstrumentForm from './ResultEntryInstrumentForm';\nimport ResultEntryForm from './ResultEntryForm';\nimport TestEditForm from './TestEditForm';\nimport SampleInfoView from '../approval/SampleInfoView';\nimport SampleInfoGrid from '../approval/SampleInfoGrid';\nimport ApprovalInstrumentTab from '../approval/ApprovalInstrumentTab';\nimport ResultEntryTaskTab from './ResultEntryTaskTab';\nimport ResultEntryTaskForm from './ResultEntryTaskForm';\nimport ResultEntryParamCommetsForm from './ResultEntryParamCommetsForm';\nimport TemplateForm from '../checklist/checklist/TemplateForm';\nimport { templateChangeHandler } from '../checklist/checklist/checklistMethods';\nimport { numberConversion, numericGrade } from './ResultEntryValidation';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport ResultEntryFormulaForm from './ResultEntryFormulaForm';\nimport SampleApprovalHistory from '../approval/SampleApprovalHistory';\nimport ResultChangeHistoryTab from '../approval/ResultChangeHistoryTab';\nimport Attachments from '../attachmentscomments/attachments/Attachments';\nimport Comments from '../attachmentscomments/comments/Comments';\nimport { onSaveSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\nimport { onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\nimport ResultEntryImport from './ResultEntryImport';\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript'; // import ReactTooltip from 'react-tooltip';\n\nimport ResultEntryMean from './ResultEntryMean';\nimport ScrollBar from 'react-perfect-scrollbar';\nimport ResultEntryMaterialForm from './ResultEntryMaterialForm';\nimport UsedMaterial from './UsedMaterial';\n\nclass ResultEntry extends Component {\n  constructor(props) {\n    super(props);\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.props.Login.masterData.selectedImportFile;\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData: { ...this.props.Login.masterData,\n            selectedImportFile: selectedRecord\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let openTemplateModal = this.props.Login.openTemplateModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let screenName = this.props.Login.screenName;\n      let operation = this.props.Login.operation;\n      let loadFile = this.props.Login.loadFile;\n      let updateInfo = {};\n\n      if (screenName === \"IDS_RESULTFORMULA\") {\n        screenName = \"IDS_RESULTENTRY\";\n        operation = \"update\";\n        let showValidate = !this.props.Login.showValidate;\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName,\n            operation,\n            showValidate,\n            validateFormulaMandyFields: []\n          }\n        };\n      } else {\n        if (this.props.Login.loadEsign) {\n          if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"complete\" || this.props.Login.operation === \"default\" || this.props.Login.operation === \"deleteTask\" || this.props.Login.operation === \"deleteInstrument\") {\n            loadEsign = false;\n            openModal = false;\n            selectedRecord = {};\n          } else if (this.props.Login.operation === \"updatechecklist\") {\n            loadEsign = false;\n            openModal = false;\n          } else {\n            loadEsign = false;\n          }\n        } else {\n          openModal = false;\n          openTemplateModal = false;\n          selectedRecord = {};\n          loadFile = false;\n        }\n\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal,\n            screenName,\n            loadEsign,\n            selectedRecord,\n            openTemplateModal,\n            loadFile\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterComboChange = (event, fieldname) => {\n      if (event !== null) {\n        let inputData = [];\n\n        if (fieldname === \"fromDate\") {\n          let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            fromdate: dateObj.fromDate,\n            //this.OnDateConverstion(event, fieldname),\n            todate: dateObj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREApprovalConfigVersion(inputData);\n        }\n\n        if (fieldname === \"toDate\") {\n          let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            fromdate: dateObj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: dateObj.toDate,\n            //this.OnDateConverstion(event, fieldname),\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREApprovalConfigVersion(inputData);\n        } // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \n        //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \n\n\n        if (fieldname === \"nsampletypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"] || this.props.Login.masterData.fromDate, this.state.selectedRecord && this.state.selectedRecord[\"toDate\"] || this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            nsampletypecode: parseInt(event.value),\n            fromdate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            userinfo: this.props.Login.userInfo,\n            defaultSampleType: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getRERegistrationType(inputData);\n        } else if (fieldname === \"nregtypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"] || this.props.Login.masterData.fromDate, this.state.selectedRecord && this.state.selectedRecord[\"toDate\"] || this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 3,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            fromdate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            nregtypecode: parseInt(event.value),\n            userinfo: this.props.Login.userInfo,\n            defaultRegistrationType: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getRERegistrationSubType(inputData);\n        } else if (fieldname === \"nregsubtypecode\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 4,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultRegistrationSubType: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREApprovalConfigVersion(inputData);\n        } else if (fieldname === \"version\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 4,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultApprovalConfigVersion: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREJobStatus(inputData);\n        } else if (fieldname === \"jobstatus\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 5,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\n            njobstatuscode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultjobstatus: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREFilterStatus(inputData);\n        } else if (fieldname === \"filter\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 5,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\n            njobstatuscode: 1,\n            // parseInt(this.props.Login.masterData.defaultjobstatus.njobstatuscode),\n            ntranscode: String(event.value),\n            userinfo: this.props.Login.userInfo,\n            defaultFilterStatus: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREFilterTestData(inputData);\n        } else if (fieldname === \"test\") {\n          let defaultTestvalues = event.item;\n          this.props.Login.masterData.defaultTestvalues = defaultTestvalues;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData: { ...this.props.Login.masterData\n              }\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {}\n      }\n    };\n\n    this.OnDateConverstion = (date, fieldname) => {\n      const month = validateTwoDigitDate(String(date.getMonth() + 1));\n      const day = validateTwoDigitDate(String(date.getDate()));\n\n      if (fieldname === \"fromDate\") {\n        date = date.getFullYear() + '-' + month + '-' + day + \"T00:00:00\";\n      } else {\n        date = date.getFullYear() + '-' + month + '-' + day + \"T23:59:00\";\n      }\n\n      return date;\n    };\n\n    this.onReload = () => {\n      let {\n        realFromDate,\n        realToDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realApproveConfigVersion,\n        realFilterStatusValue,\n        realTestcodeValue\n      } = this.props.Login.masterData; //let obj = this.covertDatetoString(realFromDate, realToDate)\n\n      let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate: obj.fromDate,\n        realToDate: obj.toDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApproveConfigVersion,\n        realTestcodeValue\n      };\n      let inputData = {\n        nsampletypecode: realSampleTypeValue && realSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: realRegTypeValue && realRegTypeValue.nregtypecode || -1,\n        nregsubtypecode: realRegSubTypeValue && realRegSubTypeValue.nregsubtypecode || -1,\n        napprovalversioncode: realApproveConfigVersion && realApproveConfigVersion.napprovalconfigversioncode || -1,\n        ntranscode: String(realFilterStatusValue ? realFilterStatusValue.ntransactionstatus : -1),\n        ntestcode: realTestcodeValue ? realTestcodeValue.ntestcode : -1,\n        ntransactiontestcode: 0,\n        njobstatuscode: this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode || 1,\n        fromdate: obj.fromDate,\n        todate: obj.toDate,\n        userinfo: this.props.Login.userInfo,\n        activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\n        showTest: true,\n        showSample: false,\n        checkBoxOperation: 3,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\n      };\n      const inpuParamData = {\n        inputData,\n        masterData,\n        refs: {\n          searchSampleRef: this.searchSampleRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchTestRef: this.searchTestRef\n        },\n        resultDataState: this.state.resultDataState,\n        instrumentDataState: this.state.instrumentDataState,\n        materialDataState: this.state.materialDataState,\n        taskDataState: this.state.taskDataState,\n        documentDataState: this.state.documentDataState,\n        resultChangeDataState: this.state.resultChangeDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        historyDataState: this.state.historyDataState\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1 && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== -1) {\n        this.props.getResultEntryDetails(inpuParamData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onREFilterSubmit = event => {\n      // let realFromDate = new Date(this.props.Login.masterData.fromDate)\n      // let realToDate = new Date(this.props.Login.masterData.toDate)\n      let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\n      let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\n      let realSampleTypeValue = this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType;\n      let realRegTypeValue = this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType;\n      let realRegSubTypeValue = this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType;\n      let realApproveConfigVersion = this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion;\n      let realFilterStatusValue = this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus;\n      let realTestcodeValue = this.props.Login.masterData.defaultTestvalues && this.props.Login.masterData.defaultTestvalues; //let obj = this.covertDatetoString(realFromDate, realToDate)\n\n      let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate: obj.fromDate,\n        realToDate: obj.toDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApproveConfigVersion,\n        realTestcodeValue\n      };\n      let inputData = {\n        nsampletypecode: this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType.nsampletypecode || -1,\n        nregtypecode: this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType.nregtypecode || -1,\n        nregsubtypecode: this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode || -1,\n        napprovalversioncode: this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode || -1,\n        ntranscode: String(this.props.Login.masterData.defaultFilterStatus ? this.props.Login.masterData.defaultFilterStatus.ntransactionstatus : -1),\n        ntestcode: this.props.Login.masterData.defaultTestvalues ? this.props.Login.masterData.defaultTestvalues.ntestcode : -1,\n        ntransactiontestcode: 0,\n        njobstatuscode: this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode || 1,\n        fromdate: obj.fromDate,\n        todate: obj.toDate,\n        userinfo: this.props.Login.userInfo,\n        activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\n        showTest: true,\n        showSample: false,\n        nneedsubsample: this.props.Login.masterData.nneedsubsample || false,\n        checkBoxOperation: 3,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\n      };\n      const inpuParamData = {\n        inputData,\n        masterData,\n        refs: {\n          searchSampleRef: this.searchSampleRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchTestRef: this.searchTestRef\n        },\n        resultDataState: this.state.resultDataState,\n        instrumentDataState: this.state.instrumentDataState,\n        materialDataState: this.state.materialDataState,\n        taskDataState: this.state.taskDataState,\n        documentDataState: this.state.documentDataState,\n        resultChangeDataState: this.state.resultChangeDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        historyDataState: this.state.historyDataState\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1 && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== undefined) {\n        this.props.getResultEntryDetails(inpuParamData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onSecondaryPaneSizeChange = (e, val) => {// let hGrand = this.state.grandparentheight\n      // let check = e - 400;\n      // if (check > 1) {\n      //     hGrand = this.state.parentHeight + check\n      // }\n      // this.setState({\n      //     paneHeight: e - val,\n      //     secondPaneHeight: hGrand - e - 70,\n      //     grandparentheight: hGrand\n      // })\n      // this.setState({\n      //     paneHeight: e - val,\n      //     secondPaneHeight: this.state.parentHeight - e - 70\n      // })\n    };\n\n    this.onComboCategoryChange = (event, fieldname) => {\n      if (event !== null) {\n        let uRL = \"\";\n        let inputData = [];\n        uRL = 'resultentrybysample/getResultUsedInstrumentCombo';\n\n        if (fieldname === \"ninstrumentcatcode\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 2,\n            ninstrumentcatcode: event.value,\n            ncalibrationRequired: event.item.ncalibrationreq\n          };\n        }\n\n        rsapi.post(uRL, inputData).then(response => {\n          const TagInstrument = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, undefined);\n          const TagListInstrument = TagInstrument.get(\"OptionList\");\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData: { ...this.props.Login.masterData,\n                Instrument: TagListInstrument\n              },\n              selectedRecord: { ...this.props.Login.selectedRecord,\n                [fieldname]: event,\n                ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : []\n              }\n            }\n          };\n          this.props.updateStore(updateInfo); // const selectedRecord = this.state.selectedRecord || {};\n          // selectedRecord[fieldname] = event;\n          // this.setState({ selectedRecord });\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      }\n    };\n\n    this.showRESampleInfo = () => {\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         showSample: true, \n      //         showTest: false \n      //         }\n      //     }\n      // this.props.updateStore(updateInfo);\n      this.setState({\n        showSample: true,\n        showTest: false\n      });\n    };\n\n    this.testRETabDetail = () => {\n      const testTabMap = new Map(); //let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n\n      let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = this.props.Login.masterData.RE_TEST || [];\n      testList = testList.slice(testskip, testskip + testtake);\n      const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode;\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      testTabMap.set(\"IDS_RESULTS\", /*#__PURE__*/React.createElement(ResultEntryResultsTab, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultDataState,\n        dataStateChange: this.dataStateChange,\n        fetchRecord: this.props.parameterRecord,\n        controlMap: this.state.controlMap,\n        parameterParam: {\n          primaryKeyField: \"ntransactionresultcode\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        checkListRecord: this.checkListRecord,\n        checklistParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        selectedId: this.props.Login.selectedId || null,\n        viewFile: this.props.viewAttachment,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_RESULTS\",\n        getMeanTestParameter: this.props.getMeanCalculationTestParameter,\n        meanParam: {\n          \"userInfo\": this.props.Login.userInfo,\n          ncontrolCode: meanControlId\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 39\n        }\n      }));\n      testTabMap.set(\"IDS_INSTRUMENT\", /*#__PURE__*/React.createElement(ApprovalInstrumentTab, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedInstrument\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.instrumentDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteInstrumentRecord,\n        fetchRecord: this.fetchInstrumentRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_INSTRUMENT\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 42\n        }\n      }));\n      testTabMap.set(\"IDS_MATERIAL\", /*#__PURE__*/React.createElement(UsedMaterial, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedMaterial\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.materialDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteMaterialRecord,\n        fetchRecord: this.props.fetchMaterialRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_MATERIAL\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 40\n        }\n      }));\n      testTabMap.set(\"IDS_TASK\", /*#__PURE__*/React.createElement(ResultEntryTaskTab, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedTask\",\n        addResultEntryTask: this.addResultEntryTask,\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\n        },\n        dataState: this.state.taskDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteTaskRecord,\n        fetchRecord: this.fetchTaskRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_TASK\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 36\n        }\n      }));\n      testTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_TESTATTACHMENTS\",\n        selectedMaster: \"RESelectedTest\",\n        onSaveClick: this.onAttachmentSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n        attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddTestAttachment\",\n        editName: \"EditTestAttachment\",\n        deleteName: \"DeleteTestAttachment\",\n        viewName: \"ViewTestAttachment\",\n        methodUrl: \"TestAttachment\",\n        nsubsampleneed: this.props.Login.masterData.nneedsubsample,\n        subFields: [{\n          [designProperties.VALUE]: \"stestsynonym\"\n        }, {\n          [designProperties.VALUE]: \"dcreateddate\"\n        }],\n        deleteParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\",\n          masterList: this.props.Login.masterData.RESelectedTest\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 47\n        }\n      }));\n      testTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_TESTCOMMENTS\",\n        selectedMaster: \"RESelectedTest\",\n        onSaveClick: this.onCommentsSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationTestComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddTestComment\",\n        editName: \"EditTestComment\",\n        deleteName: \"DeleteTestComment\",\n        methodUrl: \"TestComment\",\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        primaryKeyField: \"ntestcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.dataStateChange,\n        isTestComment: true,\n        deleteParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          masterList: this.props.Login.masterData.RESelectedTest,\n          ncontrolCode: this.state.controlMap.has(\"DeleteTestComment\") && this.state.controlMap.get(\"DeleteTestComment\").ncontrolcode\n        },\n        editParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RESelectedTest,\n          ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 44\n        }\n      }));\n      testTabMap.set(\"IDS_RESULTCHANGEHISTORY\", /*#__PURE__*/React.createElement(ResultChangeHistoryTab, {\n        userInfo: this.props.Login.userInfo,\n        ApprovalResultChangeHistory: this.props.Login.masterData.ResultChangeHistory || [],\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultChangeDataState,\n        dataStateChange: this.dataStateChange,\n        screenName: \"IDS_RESULTCHANGEHISTORY\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedId: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 51\n        }\n      }));\n      return testTabMap;\n    };\n\n    this.sampleDataStateChange = event => {\n      switch (this.props.Login.activeSampleKey) {\n        case \"IDS_APPROVALHISTORY\":\n          this.setState({\n            sampleHistoryDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            sampleGridDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.sampleGridDataStateChange = event => {\n      this.setState({\n        sampleGridDataState: event.dataState\n      });\n    };\n\n    this.dataStateChange = event => {\n      switch (this.props.Login.activeTestKey) {\n        case \"IDS_RESULTS\":\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          this.setState({\n            instrumentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_MATERIAL\":\n          this.setState({\n            materialDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TASK\":\n          this.setState({\n            taskDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            instrumentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          this.setState({\n            documentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          this.setState({\n            resultChangeDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.sampleTabDetail = () => {\n      const tabMap = new Map();\n      let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\"; //let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n\n      tabMap.set(\"IDS_SAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SAMPLEATTACHMENTS\",\n        selectedMaster: \"RESelectedSample\",\n        onSaveClick: this.onAttachmentSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        fetchRecord: this.props.getAttachmentCombo,\n        masterList: this.props.Login.masterData.RESelectedSample,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHMENT\",\n        addName: \"AddSampleAttachment\",\n        editName: \"EditSampleAttachment\",\n        deleteName: \"DeleteSampleAttachment\",\n        viewName: \"ViewSampleAttachment\",\n        methodUrl: \"SampleAttachment\",\n        deleteParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: this.props.Login.screenName\n        },\n        editParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        selectedListName: \"IDS_SAMPLE\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 880,\n          columnNumber: 45\n        }\n      }));\n      tabMap.set(\"IDS_APPROVALHISTORY\", /*#__PURE__*/React.createElement(SampleApprovalHistory, {\n        userInfo: this.props.Login.userInfo,\n        ApprovalHistory: this.props.Login.masterData.SampleApprovalHistory,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.sampleHistoryDataState,\n        dataStateChange: this.sampleDataStateChange,\n        screenName: \"IDS_APPROVALHISTORY\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedId: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 919,\n          columnNumber: 43\n        }\n      })); // tabMap.set(\"IDS_SAMPLEATTACHMENTS\", <></>)\n      // tabMap.set(\"IDS_SAMPLECOMMENTS\", <></>)\n      // tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <></>)\n      // tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <></>)\n\n      return tabMap;\n    };\n\n    this.onSampleTabChange = tabProps => {\n      if (this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0) {\n        const activeSampleKey = tabProps.screenName;\n\n        if (activeSampleKey !== this.props.Login.activeSampleKey) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\n            ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(subsamplecode => subsamplecode.ntransactionsamplecode).join(\",\").toString() : \"\",\n            RESelectedSample: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample : \"\",\n            userinfo: this.props.Login.userInfo,\n            activeSampleKey: activeSampleKey,\n            screenName: activeSampleKey\n          };\n          this.props.getSampleChildTabREDetail(inputData);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLE\"\n        }));\n      }\n    };\n\n    this.onTestTabChange = tabProps => {\n      const activeTestKey = tabProps.screenName;\n\n      if (activeTestKey !== this.props.Login.activeTestKey) {\n        if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\n            RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\n            // ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\n            //     this.props.Login.masterData.selectedTestCode : this.props.Login.masterData.RESelectedTest ?\n            //         String(this.props.Login.masterData.RESelectedTest.ntransactiontestcode) : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            activeTestKey: activeTestKey,\n            screenName: activeTestKey,\n            resultDataState: this.state.resultDataState,\n            instrumentDataState: this.state.instrumentDataState,\n            materialDataState: this.state.materialDataState,\n            taskDataState: this.state.taskDataState,\n            documentDataState: this.state.documentDataState,\n            resultChangeDataState: this.state.resultChangeDataState,\n            testCommentDataState: this.state.testCommentDataState\n          };\n          this.props.getTestChildTabREDetail(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      }\n    };\n\n    this.testMethodSourceEdit = test => {\n      this.props.testMethodSourceEdit(test);\n    };\n\n    this.addREInstrument = test => {\n      this.props.addREInstrument(test);\n    };\n\n    this.deleteInstrumentRecord = test => {\n      let inputParam = {\n        inputData: { ...test,\n          'userinfo': this.props.Login.userInfo\n        },\n        // formData: formData,\n        // isFileupload: true,\n        operation: \"deleteInstrument\",\n        screenName: \"deleteInstrumentAction\",\n        displayName: this.props.Login.inputParam.displayName //, postParam,\n        //test: test\n\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"deleteInstrumentAction\",\n            operation: \"deleteInstrument\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.deleteInstrumentRecord(test);\n      }\n    };\n\n    this.fetchInstrumentRecord = test => {\n      this.props.fetchInstrumentRecord(test);\n    };\n\n    this.deleteTaskRecord = test => {\n      let inputParam = {\n        inputData: { ...test,\n          'userinfo': this.props.Login.userInfo\n        },\n        // formData: formData,\n        // isFileupload: true,\n        operation: \"deleteTask\",\n        displayName: this.props.Login.inputParam.displayName //, postParam,\n        //test: test\n\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"deleteTaskaction\",\n            operation: \"deleteTask\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.deleteTaskRecord(test);\n      }\n    };\n\n    this.fetchTaskRecord = test => {\n      this.props.fetchTaskRecord(test);\n    };\n\n    this.addResultEntryTask = inputData => {\n      let selectedRecord = {};\n      selectedRecord = {\n        npreregno: inputData.npreregno,\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        stestsynonym: inputData.stestsynonym\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: selectedRecord,\n          operation: \"create\",\n          screenName: \"IDS_TASK\",\n          openModal: true,\n          activeTestKey: \"IDS_TASK\",\n          ncontrolcode: inputData.addResultUsedTaskId,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.checkListRecord = parameterData => {\n      this.props.checkListRecord(parameterData, this.props.Login.userInfo);\n    };\n\n    this.getFormula = (parameterData, userInfo, masterData, index, event) => {\n      this.setState({\n        modalEvent: event.currentTarget\n      });\n      this.props.getFormula(parameterData, userInfo, masterData, index, this.state.selectedRecord);\n    };\n\n    this.calculateFormula = () => {\n      const selectedRecord = this.state.selectedRecord || [];\n      const selectedForumulaInput = selectedRecord.selectedForumulaInput || [];\n      let lstDynamicFields = [];\n\n      if (selectedForumulaInput) {\n        selectedForumulaInput.map(dynamicfields => lstDynamicFields.push(dynamicfields));\n        const inputData = {\n          masterData: this.props.Login.masterData,\n          lstDynamicFields: lstDynamicFields,\n          userInfo: this.props.Login.userInfo,\n          selectedRecord: selectedRecord,\n          selectedResultGrade: this.state.selectedRecord.selectedResultGrade,\n          ResultParameter: this.state.selectedRecord.ResultParameter || {}\n        };\n        this.props.calculateFormula(inputData);\n      }\n    };\n\n    this.resultImport = () => {\n      this.props.Login.masterData.selectedImportFile = [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          operation: \"create\",\n          screenName: \"IDS_RESULTIMPORTFILE\",\n          openModal: true,\n          loadFile: true,\n          activeTestKey: \"IDS_RESULTS\",\n          masterData: this.props.Login.masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n      setTimeout(() => {\n        this._scrollBarRef.updateScroll();\n      });\n    };\n\n    this.handleSubSamplePageChange = e => {\n      this.setState({\n        subSampleSkip: e.skip,\n        subSampleTake: e.take\n      });\n      setTimeout(() => {\n        this._scrollBarRef.updateScroll();\n      });\n    };\n\n    this.handleTestPageChange = e => {\n      this.setState({\n        testskip: e.skip,\n        testtake: e.take,\n        sampletakeDataState: e.take\n      });\n    };\n\n    this.verticalPaneSizeChange = val => {\n      this.setState({\n        initialVerticalWidth: val - 150\n      });\n    };\n\n    this.defaultActions = (testChildGetREParam, RESelectedTest, RESelectedSample, setDefaultId, testskip, testtake) => {\n      const nregtypecode = this.props.Login.masterData.realRegTypeValue.nregtypecode;\n      const nregsubtypecode = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\n      let TestList = [...this.props.Login.masterData.RE_TEST];\n      TestList = TestList.splice(testskip, testskip + testtake);\n      let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (acceptTestList && acceptTestList.length > 0) {\n        let inputParam = {\n          classUrl: 'resultentrybysample',\n          methodUrl: \"completeTest\",\n          inputData: {\n            'userinfo': this.props.Login.userInfo,\n            'nregtypecode': nregtypecode,\n            'nregsubtypecode': nregsubtypecode,\n            'ncontrolcode': setDefaultId\n          },\n          // formData: formData,\n          // isFileupload: true,\n          operation: \"default\",\n          displayName: this.props.Login.inputParam.displayName,\n          //, postParam,\n          testChildGetREParam: { ...testChildGetREParam,\n            ncontrolcode: setDefaultId\n          },\n          RESelectedTest: acceptTestList,\n          RESelectedSample: RESelectedSample\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, setDefaultId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"defaultaction\",\n              operation: \"default\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.defaultTest(inputParam.testChildGetREParam, acceptTestList, RESelectedSample, nregtypecode, nregsubtypecode);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTTEST\"\n        }));\n      }\n    };\n\n    this.completeActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake) => {\n      let TestList = [...this.props.Login.masterData.RE_TEST];\n      TestList = TestList.splice(testskip, testskip + testtake);\n      let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (acceptTestList && acceptTestList.length > 0) {\n        let inputParam = {\n          classUrl: 'resultentrybysample',\n          methodUrl: \"completeTest\",\n          inputData: {\n            'userinfo': this.props.Login.userInfo,\n            'ncontrolcode': completeResultId\n          },\n          // formData: formData,\n          // isFileupload: true,\n          operation: \"complete\",\n          postParamList: this.postParamList,\n          displayName: this.props.Login.inputParam.displayName,\n          //, postParam,\n          testChildGetREParam: testChildGetREParam,\n          RESelectedTest: acceptTestList,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"complete\",\n              operation: \"complete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.completeTest(inputParam, acceptTestList, userInfo, completeResultId);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCOMPLETE\"\n        }));\n      }\n    };\n\n    this.onSaveCheckList = (selectedRecord, userInfo, nregtypecode, nregsubtypecode) => {\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        let inputParam = {\n          \"inputData\": {\n            userinfo: userInfo\n          }\n        };\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              selectedRecord,\n              userInfo,\n              nregtypecode,\n              nregsubtypecode,\n              inputParam,\n              operation: \"updatechecklist\"\n            },\n            openModal: true,\n            operation: \"updatechecklist\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode);\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n\n      if (this.props.Login.operation === 'complete' || this.props.Login.operation === 'default' || this.props.Login.operation === \"updatechecklist\" || this.props.Login.operation === 'deleteInstrument' || this.props.Login.operation === 'createMethod' || this.props.Login.operation === 'deleteTask' || this.props.Login.operation === 'updateParameterComments') {\n        this.props.validateEsignCredentialComplete(inputParam, \"openModal\");\n      } else {\n        this.props.validateEsignCredential(inputParam, \"openModal\");\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveFileClick = (saveType, formRef) => {\n      const selectedImportFile = this.props.Login.masterData.selectedImportFile;\n      const acceptedFile = selectedImportFile ? selectedImportFile.sfilename : [];\n      const formData = new FormData(); // if(nattachmenttypecode === attachmentType.FTP) {\n\n      if (acceptedFile && acceptedFile.length > 0) {\n        acceptedFile.forEach((file, index) => {\n          formData.append(\"uploadedFile\" + index, file);\n        });\n        formData.append(\"filecount\", acceptedFile.length);\n      } else {\n        return toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYONEFILETOSUBMIT\"\n        }));\n      }\n\n      formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n      formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.realRegTypeValue.nregtypecode));\n      formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode));\n      formData.append(\"stransactiontestcode\", JSON.stringify(this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"));\n      this.props.resultImportFile(formData, this.props.Login.masterData);\n    };\n\n    this.onDropFile = acceptedFile => {\n      // let selectedImportFile = this.props.Login.masterData.selectedImportFile || [];\n      // selectedImportFile['sfilename'] = acceptedFile;\n      this.props.Login.masterData.selectedImportFile['sfilename'] = acceptedFile;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData: this.props.Login.masterData\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({selectedImportFile});\n    };\n\n    this.onFormulaInputChange = (event, index, fields) => {\n      let selectedRecord = this.state.selectedRecord;\n      let selectedForumulaInput = this.state.selectedRecord.selectedForumulaInput || [];\n      let selectedMandatory = this.state.selectedRecord.selectedMandatory || [];\n      let dynamicformulafields = {};\n\n      if (event) {\n        if (fields.ndynamicformulafieldcode === FORMULAFIELDTYPE.INTEGER) {\n          const value = event.target.value.replace(/[^-^0-9]/g, '');\n\n          if (/^-?\\d*?$/.test(value) || value === \"\") {\n            if (this.state.selectedRecord.formulainput) {\n              dynamicformulafields.svalues = value;\n              dynamicformulafields.sparameter = fields.sdescription;\n              selectedForumulaInput[index] = dynamicformulafields;\n              selectedMandatory[index] = event.target.value;\n            }\n          }\n\n          selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\n          selectedRecord[\"selectedMandatory\"] = selectedMandatory;\n          this.setState({\n            selectedRecord: selectedRecord\n          });\n        } else {\n          const value = event.target.value.replace(/[^-^0-9.]/g, '');\n\n          if (/^-?\\d*?\\.?\\d*?$/.test(value) || value === \"\") {\n            if (this.state.selectedRecord.formulainput) {\n              dynamicformulafields.svalues = value;\n              dynamicformulafields.sparameter = fields.sdescription;\n              selectedForumulaInput[index] = dynamicformulafields;\n              selectedMandatory[index] = event.target.value;\n            }\n          } // else {\n          //     dynamicformulafields.svalues = selectedForumulaInput.length > 0 ? selectedForumulaInput[index].svalues : \"\";\n          //     selectedForumulaInput[index].svalues = selectedForumulaInput.length > 0 ? selectedForumulaInput[index].svalues : \"\";\n          // }\n\n\n          selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\n          selectedRecord[\"selectedMandatory\"] = selectedMandatory;\n          this.setState({\n            selectedRecord: selectedRecord\n          });\n        }\n      }\n    };\n\n    this.onTemplateInputChange = (event, control) => {\n      let selectedRecord = templateChangeHandler(1, this.state.selectedRecord, event, control);\n      this.setState({\n        selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onTemplateComboChange = (comboData, control) => {\n      let selectedRecord = templateChangeHandler(2, this.state.selectedRecord, comboData, control);\n      this.setState({\n        selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onTemplateDateChange = (dateData, control) => {\n      let selectedRecord = templateChangeHandler(3, this.state.selectedRecord, dateData, control); //this.setState({selectedRecord});\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputChange = (Data, name) => {\n      const selectedRecord = this.state.selectedRecord || [];\n\n      if (Data) {\n        selectedRecord[name] = Data.target.value; //this.setState({selectedRecord});\n      } else {\n        selectedRecord[name] = []; //this.setState({selectedRecord});\n      }\n\n      this.setState({\n        selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onNumericChange = (numericData, numericName) => {\n      const selectedRecord = this.state.selectedRecord || [];\n\n      if (numericData) {\n        if (numericName !== \"scomments\") {\n          selectedRecord[numericName] = numericData; //this.setState({selectedRecord});\n        } else {\n          selectedRecord[numericName] = numericData.target.value; //this.setState({selectedRecord});\n        }\n      } else {\n        selectedRecord[numericName] = \"\"; //this.setState({selectedRecord});\n      }\n\n      this.setState({\n        selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onDateChange = (dateName, dateValue) => {\n      const selectedRecord = this.state.selectedRecord || [];\n      selectedRecord[dateName] = dateValue;\n\n      if (dateName === \"dfromdate\" || dateName === \"dtodate\") {\n        this.setState({\n          selectedRecord\n        }); // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: { selectedRecord: selectedRecord }\n        // }\n        //this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.headerSelectionChange = event => {\n      const checked = event.syntheticEvent.target.checked;\n      let meanTestParameterList = this.state.meanTestParameterList || [];\n      let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\n\n      if (checked) {\n        const data = meanTestParameterList.map(item => {\n          item.selected = checked;\n          selectedMeanTestParam.set(item.ntransactionresultcode, item.sresult);\n          return item;\n        });\n        let selectedTestParam = \"\";\n        let selectedTestParamMean = 0;\n        let size = 0;\n\n        if (selectedMeanTestParam.size > 0) {\n          [...selectedMeanTestParam.values()].forEach(item => item !== null && item !== \"\" ? (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item, size = size + 1, selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\");\n          selectedTestParamMean = selectedTestParamMean / size;\n        }\n\n        this.setState({\n          meanTestParameterList: data,\n          selectedMeanTestParam,\n          selectedTestParam,\n          testMean: selectedTestParamMean,\n          selectAll: checked\n        });\n      } else {\n        const data = meanTestParameterList.map(item => {\n          item.selected = checked;\n          return item;\n        });\n        this.setState({\n          meanTestParameterList: data,\n          selectedMeanTestParam: new Map(),\n          selectedTestParam: \"\",\n          testMean: \"\",\n          selectAll: checked\n        });\n      }\n    };\n\n    this.selectionChange = event => {\n      let meanTestParameterList = this.state.meanTestParameterList || [];\n      let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\n      meanTestParameterList.map(item => {\n        if (item.ntransactionresultcode === event.dataItem.ntransactionresultcode) {\n          item.selected = !event.dataItem.selected;\n        }\n\n        return item;\n      });\n\n      if (event.dataItem.selected) {\n        selectedMeanTestParam.set(event.dataItem.ntransactionresultcode, event.dataItem.sresult);\n      } else {\n        if (selectedMeanTestParam.has(event.dataItem.ntransactionresultcode)) {\n          selectedMeanTestParam.delete(event.dataItem.ntransactionresultcode);\n        }\n      }\n\n      let selectedTestParam = \"\";\n      let selectedTestParamMean = 0;\n      let size = 0;\n\n      if (selectedMeanTestParam.size > 0) {\n        [...selectedMeanTestParam.values()].forEach(item => item !== null && item !== \"\" ? (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item, size = size + 1, selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\");\n        selectedTestParamMean = selectedTestParamMean / size;\n      }\n\n      this.setState({\n        meanTestParameterList,\n        selectedMeanTestParam,\n        selectedTestParam,\n        testMean: selectedTestParamMean,\n        selectAll: this.valiateCheckAll(meanTestParameterList)\n      });\n    };\n\n    this.onMeanComboChange = (comboData, comboName) => {\n      const selectedMeanTestParam = this.state.selectedMeanTestParam || [];\n      selectedMeanTestParam[comboName] = comboData[0];\n      let data = \"\";\n\n      if (selectedMeanTestParam[\"parametervalue\"] === undefined) {\n        data = comboData[0].value;\n      } else {\n        data = selectedMeanTestParam[\"parametervalue\"] + \"+\" + comboData[0].value;\n      }\n\n      selectedMeanTestParam[\"parametervalue\"] = data;\n      this.setState({\n        selectedMeanTestParam\n      });\n    };\n\n    this.onMaterialComboChange = (comboData, comboName) => {\n      const selectedRecord = this.state.selectedRecord || [];\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData; //this.setState({ selectedRecord });\n      } else {\n        selectedRecord[comboName] = []; //this.setState({ selectedRecord });\n      }\n\n      switch (comboName) {\n        case 'nmaterialtypecode':\n          this.props.getREMaterialCategoryByType({\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        case 'nmaterialcatcode':\n          this.props.getREMaterialByCategory({\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        case 'nmaterialcode':\n          this.props.getREMaterialInvertoryByMaterial({\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        default:\n          this.props.getAvailableMaterialQuantity({\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n      }\n    };\n\n    this.onComboChange = (comboData, comboName) => {\n      const selectedRecord = this.state.selectedRecord || [];\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData; //this.setState({ selectedRecord });\n      } else {\n        selectedRecord[comboName] = []; //this.setState({ selectedRecord });\n      }\n\n      this.setState({\n        selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onGradeEvent = (ResultParameter, index, parameter) => {\n      if (ResultParameter.length > 0 && ResultParameter[index] !== undefined && ResultParameter[index].sresult !== null) {\n        let selectedRecord = this.state.selectedRecord || [];\n        let selectedResultGrade = this.state.selectedRecord.selectedResultGrade || [];\n\n        if (parameter.nparametertypecode === parameterType.NUMERIC) {\n          selectedResultGrade[index] = {\n            ngradecode: ResultParameter[index].sresult !== \"\" ? numericGrade(parameter, numberConversion(parseFloat(ResultParameter[index].sresult), parseInt(parameter.nroundingdigits))) : -1\n          };\n        }\n\n        if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n          if (ResultParameter[index].sresult !== null) {\n            selectedResultGrade[index] = {\n              ngradecode: ResultParameter[index].ngradecode\n            };\n          } else {\n            selectedResultGrade[index] = {\n              ngradecode: 0\n            };\n          }\n        }\n\n        if (parameter.nparametertypecode === parameterType.CHARACTER) {\n          if (ResultParameter[index].sresult !== null) {\n            selectedResultGrade[index] = {\n              ngradecode: ResultParameter[index].ngradecode\n            };\n          } else {\n            selectedResultGrade[index] = {\n              ngradecode: 4\n            };\n          }\n        } //this.props.Login.masterData[\"selectedResultGrade\"] = selectedResultGrade;\n\n\n        selectedRecord.selectedResultGrade = selectedResultGrade;\n        this.setState({\n          selectedRecord\n        }); // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: { masterData: this.props.Login.masterData }\n        // }\n        // this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = [...this.props.Login.masterData.RE_TEST];\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestComments(saveParam, selectedTestList);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\n      }\n    };\n\n    this.onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let {\n        testskip,\n        testtake,\n        skip,\n        take\n      } = this.state;\n      let testList = [...this.props.Login.masterData.RE_TEST];\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      let sampleList = [...this.props.Login.masterData.RE_SAMPLE];\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\n\n      if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleAttachment(saveParam, selectedSampleList);\n      } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestAttachment(saveParam, selectedTestList);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\n      }\n    };\n\n    this.onKeyPress = (event, index, paremterResultcode) => {\n      if (event.keyCode === 13) {\n        for (let i = 0; i < event.target.form.elements.length; i++) {\n          if (parseInt(event.target.form.elements[i].id) === paremterResultcode[index + 1]) {\n            event.target.form.elements[i].focus();\n            break;\n          }\n        }\n\n        event.preventDefault();\n      }\n    };\n\n    this.onResultInputChange = (event, index, parameter) => {\n      //let ResultParameter = this.props.Login.masterData.ResultParameter ? this.props.Login.masterData.ResultParameter : [];\n      let selectedRecord = this.state.selectedRecord || [];\n      let ResultParameter = this.state.selectedRecord.ResultParameter ? this.state.selectedRecord.ResultParameter : [];\n      let sresult = \"\";\n      let value = -1;\n      let acceptedFile = [];\n      let ncalculatedresult;\n\n      if (parameter.nparametertypecode === parameterType.NUMERIC) {\n        if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value) || event.target.value === \"\") {\n          sresult = event.target.value;\n          ncalculatedresult = 4;\n        } else {\n          sresult = ResultParameter[index]['sresult'] === null ? \"\" : ResultParameter[index]['sresult'];\n          ncalculatedresult = ResultParameter[index]['ncalculatedresult'];\n        }\n      }\n\n      if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n        if (event != null) {\n          sresult = event.item.spredefinedname;\n          value = event.item.ngradecode;\n          ncalculatedresult = 4;\n        } else {\n          sresult = \"\";\n          value = -1;\n          ncalculatedresult = 4;\n        }\n      }\n\n      if (parameter.nparametertypecode === parameterType.CHARACTER) {\n        sresult = event.target.value;\n        ncalculatedresult = 4;\n      }\n\n      if (parameter.nparametertypecode === parameterType.ATTACHMENT) {\n        sresult = event[0].name;\n        acceptedFile = event;\n        ncalculatedresult = 4;\n      }\n\n      ResultParameter[index]['sresult'] = sresult;\n      ResultParameter[index]['sfinal'] = sresult;\n      ResultParameter[index]['acceptedFile'] = acceptedFile;\n      ResultParameter[index]['editable'] = true;\n      ResultParameter[index]['ngradecode'] = value;\n      ResultParameter[index]['ncalculatedresult'] = ncalculatedresult; // this.props.Login.masterData.ResultParameter = ResultParameter;\n\n      selectedRecord.ResultParameter = ResultParameter;\n      this.setState({\n        selectedRecord: selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { masterData: this.props.Login.masterData }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveMean = saveType => {\n      const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\n      const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n      let resultParameter = this.props.Login.selectedTestParameterMean || {}; //let resultParameter = { };\n\n      resultParameter[\"ncalculatedresult\"] = 4;\n      resultParameter[\"sresult\"] = this.state.testMean;\n      resultParameter[\"sfinal\"] = numberConversion(parseFloat(this.state.testMean), parseInt(resultParameter.nroundingdigit));\n      resultParameter[\"ngradecode\"] = numericGrade(resultParameter, parseInt(this.state.testMean));\n      resultParameter['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n      resultParameter['nenteredby'] = this.props.Login.userInfo.nusercode; // resultParameter['ntransactionresultcode'] = meanParameter.ntransactionresultcode;\n      // resultParameter['ntransactiontestcode'] = meanParameter.ntransactiontestcode;\n      // resultParameter['nparametertypecode'] = meanParameter.nparametertypecode;\n      //console.log(\"result:\", resultParameter);\n\n      const formData = new FormData();\n      formData.append(\"filecount\", 0);\n      formData.append(\"nregtypecode\", nregtypecode);\n      formData.append(\"nregsubtypecode\", nregsubtypecode);\n      formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\n      formData.append(\"transactiontestcode\", resultParameter.ntransactiontestcode);\n      formData.append(\"resultData\", JSON.stringify([resultParameter]));\n      const inputParam = {\n        classUrl: \"resultentrybysample\",\n        methodUrl: \"TestParameterResult\",\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: \"update\",\n        displayName: this.props.Login.inputParam.displayName,\n        saveType\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveClick = saveType => {\n      if (this.props.Login.screenName === \"IDS_MEANPARAMETER\") {\n        this.onSaveMean(saveType);\n      } else {\n        let ResultParameter = this.state.selectedRecord.ResultParameter || [];\n        let selectedRecord = this.state.selectedRecord || {};\n        let selectedId = this.props.Login.selectedId || null;\n        const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\n        const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n        const classUrl = \"resultentrybysample\";\n        const formData = new FormData();\n        let neditable = 0;\n        let resultParameters = [];\n        let inputParam = {};\n        let inputData = [];\n        let i = 0; //const postParam = {inputListName: \"RESelectedTest\", selectedObject: \"RESelectedTest\", primaryKeyField: \"ntransactionstestcode\" };\n\n        if (this.props.Login.screenName === \"IDS_RESULTENTRY\") {\n          if (ResultParameter.length > 0 && ResultParameter !== undefined) {\n            ResultParameter.map((resultData, index) => {\n              let results = {};\n\n              if (resultData.editable === true) {\n                neditable = 1;\n\n                switch (resultData.nparametertypecode) {\n                  case 1:\n                    results[\"jsondata\"] = {\n                      ncalculatedresult: resultData[\"ncalculatedresult\"],\n                      sresult: resultData.sresult,\n                      sfinal: resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\"\n                    };\n                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                    results[\"ncalculatedresult\"] = resultData[\"ncalculatedresult\"];\n                    results[\"sresult\"] = resultData.sresult;\n                    results[\"sfinal\"] = resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\";\n                    results[\"ngradecode\"] = resultData.sresult !== \"\" ? numericGrade(resultData, results[\"sfinal\"]) : -1;\n                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\n                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n                    results['nparametertypecode'] = resultData.nparametertypecode;\n                    break;\n\n                  case 2:\n                    results[\"jsondata\"] = {\n                      ncalculatedresult: 4,\n                      sresult: resultData.sresult,\n                      sfinal: resultData.sresult\n                    };\n                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                    results[\"sresult\"] = resultData.sresult;\n                    results[\"ncalculatedresult\"] = 4;\n                    results[\"sfinal\"] = resultData.sresult;\n                    results[\"ngradecode\"] = resultData.ngradecode;\n                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\n                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n                    results['nparametertypecode'] = resultData.nparametertypecode;\n                    break;\n\n                  case 3:\n                    results[\"jsondata\"] = {\n                      ncalculatedresult: 4,\n                      sresult: resultData.sresult,\n                      sfinal: resultData.sresult\n                    };\n                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                    results[\"sresult\"] = resultData.sresult;\n                    results[\"ncalculatedresult\"] = 4;\n                    results[\"sfinal\"] = resultData.sresult;\n                    results[\"ngradecode\"] = grade.FIO;\n                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\n                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n                    results['nparametertypecode'] = resultData.nparametertypecode;\n                    break;\n\n                  case 4:\n                    if (resultData.acceptedFile !== undefined) {\n                      const splittedFileName = resultData.acceptedFile ? resultData.acceptedFile[0].name.split('.') : \"\";\n                      const fileExtension = resultData.acceptedFile ? resultData.acceptedFile[0].name.split('.')[splittedFileName.length - 1] : \"\";\n                      const uniquefilename = create_UUID() + '.' + fileExtension;\n                      results[\"jsondata\"] = {\n                        ssystemfilename: uniquefilename,\n                        nfilesize: resultData.acceptedFile[0].size,\n                        ncalculatedresult: 4,\n                        sresult: resultData.sresult,\n                        sfinal: resultData.sresult\n                      };\n                      results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                      results[\"ncalculatedresult\"] = 4;\n                      results[\"sresult\"] = resultData.sresult;\n                      results[\"sfinal\"] = resultData.sresult;\n                      results[\"ngradecode\"] = grade.FIO;\n                      results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\n                      results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\n                      results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\n                      results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\n                      results['nparametertypecode'] = resultData.nparametertypecode;\n                      results[\"ssystemfilename\"] = uniquefilename;\n                      results[\"nfilesize\"] = resultData.acceptedFile[0].size;\n                      formData.append(\"uploadedFile\" + index, resultData.acceptedFile[0]);\n                      formData.append(\"uniquefilename\" + index, uniquefilename);\n                      formData.append(\"ntransactiontestcode\", resultData.ntransactiontestcode);\n                      i++;\n                    }\n\n                    break;\n\n                  default:\n                    break;\n                }\n\n                if (Object.values(results).length > 0) {\n                  resultParameters.push(results);\n                }\n              }\n\n              return null;\n            });\n\n            if (neditable === 0) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loading: false,\n                  openModal: false\n                }\n              };\n              return this.props.updateStore(updateInfo);\n            }\n\n            formData.append(\"filecount\", i);\n            formData.append(\"nregtypecode\", nregtypecode);\n            formData.append(\"nregsubtypecode\", nregsubtypecode);\n            formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\n            formData.append(\"resultData\", JSON.stringify(resultParameters));\n            const tests = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\";\n            formData.append(\"transactiontestcode\", tests); //let postParam = {inputListName: \"RE_TEST\", selectedObject: \"\", primaryKeyField: \"ntransactionresultcode\" };\n\n            inputParam = {\n              classUrl: classUrl,\n              methodUrl: \"TestParameterResult\",\n              inputData: {\n                userinfo: this.props.Login.userInfo\n              },\n              formData: formData,\n              isFileupload: true,\n              operation: \"update\",\n              displayName: this.props.Login.inputParam.displayName,\n              saveType //, postParam\n\n            };\n          } else {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loading: false,\n                openModal: false\n              }\n            };\n            return this.props.updateStore(updateInfo);\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_TESTMETHODSOURCE\") {\n          inputData = {\n            ntype: 3,\n            nflag: 3,\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n            nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n            ntranscode: this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString(),\n            ntestcode: this.props.Login.masterData.realTestcodeValue.ntestcode,\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n            ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n            nmethodcode: selectedRecord.nmethodcode.value,\n            nsourcecode: selectedRecord.nsourcecode.value,\n            ntransactiontestcode: selectedRecord.ntransactiontestcode,\n            userinfo: this.props.Login.userInfo,\n            activeTestKey: \"IDS_RESULTS\",\n            ncontrolcode: this.props.Login.ncontrolcode\n          }; // inputParam = {\n          //     classUrl: classUrl,\n          //     methodUrl: \"TestMethodSource\",\n          //     inputData: inputData,\n          //     isFileupload: false,\n          //     operation: \"update\",\n          //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\n          // }\n\n          this.updateTestMethodSource(inputData, this.props.Login.masterData, this.props.Login.ncontrolcode);\n          return;\n        }\n\n        if (this.props.Login.screenName === \"IDS_INSTRUMENT\") {\n          let inputData = [];\n\n          if (this.props.Login.operation === \"update\") {\n            inputData = {\n              ResultUsedInstrument: {\n                nresultusedinstrumentcode: selectedRecord.nresultusedinstrumentcode,\n                npreregno: selectedRecord.npreregno,\n                ninstrumentcatcode: selectedRecord.ninstrumentcatcode.value,\n                ninstrumentcode: selectedRecord.ninstrumentcode.value,\n                dfromdate: formatInputDate(selectedRecord.dfromdate, false),\n                dtodate: formatInputDate(selectedRecord.dtodate, false),\n                stzfromdate: selectedRecord.ntzfromdate.label,\n                stztodate: selectedRecord.ntztodate.label,\n                ntzfromdate: selectedRecord.ntzfromdate.value,\n                ntztodate: selectedRecord.ntztodate.value,\n                ntransactiontestcode: selectedRecord.ntransactiontestcode\n              },\n              userinfo: this.props.Login.userInfo,\n              nregtypecode: nregtypecode,\n              nregsubtypecode: nregsubtypecode,\n              ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\"\n            };\n          } else {\n            inputData = {\n              ResultUsedInstrument: {\n                ntransactiontestcode: selectedRecord.ntransactiontestcode,\n                npreregno: selectedRecord.npreregno,\n                ninstrumentcatcode: selectedRecord.ninstrumentcatcode.value,\n                ninstrumentcode: selectedRecord.ninstrumentcode.value,\n                dfromdate: formatInputDate(selectedRecord.dfromdate, false),\n                dtodate: formatInputDate(selectedRecord.dtodate, false),\n                stzfromdate: selectedRecord.ntzfromdate.label,\n                stztodate: selectedRecord.ntztodate.label,\n                ntzfromdate: selectedRecord.ntzfromdate.value,\n                ntztodate: selectedRecord.ntztodate.value\n              },\n              userinfo: this.props.Login.userInfo,\n              nregtypecode: nregtypecode,\n              nregsubtypecode: nregsubtypecode,\n              transactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\"\n            };\n          }\n\n          inputParam = {\n            classUrl: classUrl,\n            methodUrl: \"ResultUsedInstrument\",\n            inputData: inputData,\n            selectedId,\n            isFileupload: false,\n            activeTestKey: \"IDS_INSTRUMENT\",\n            operation: this.props.Login.operation,\n            displayName: this.props.Login.inputParam.displayName,\n            saveType //postParam\n\n          };\n        }\n\n        if (this.props.Login.screenName === \"IDS_MATERIAL\") {\n          let inputData = [];\n\n          if (parseFloat(this.state.selectedRecord.susedquantity) <= parseFloat(this.state.selectedRecord.savailablequantity)) {\n            if (this.props.Login.operation === \"update\") {\n              inputData = {\n                ResultUsedMaterial: {\n                  nresultusedmaterialcode: selectedRecord.nresultusedmaterialcode,\n                  ntransactiontestcode: selectedRecord.ntransactiontestcode,\n                  npreregno: selectedRecord.npreregno,\n                  nmaterialtypecode: selectedRecord.nmaterialtypecode.value,\n                  nmaterialcategorycode: selectedRecord,\n                  nmaterialcode: selectedRecord.nmaterialcode.value,\n                  ninventorycode: selectedRecord.nmaterialinventorycode.value,\n                  nsectioncode: selectedRecord.nsectioncode,\n                  jsondata: {\n                    sarno: selectedRecord.sarno,\n                    ssamplearno: selectedRecord.ssamplearno,\n                    stestsynonym: selectedRecord.stestsynonym,\n                    smaterialcatname: selectedRecord.nmaterialcatcode.label,\n                    smaterialname: selectedRecord.nmaterialcode.label,\n                    sinventoryid: selectedRecord.nmaterialinventorycode.label,\n                    nqtyused: selectedRecord.susedquantity,\n                    scarriergas: selectedRecord.scarriergas,\n                    smobilephase: selectedRecord.smobilephase,\n                    sremarks: selectedRecord.sremarks\n                  }\n                },\n                MaterialInventoryTrans: {\n                  nmaterialinventorycode: selectedRecord.nmaterialinventorycode.value,\n                  nsectioncode: selectedRecord.nsectioncode,\n                  jsondata: {\n                    IDS_INVENTORYID: selectedRecord.nmaterialinventorycode.label,\n                    nqtyused: selectedRecord.susedquantity\n                  }\n                },\n                userinfo: this.props.Login.userInfo,\n                nregtypecode: nregtypecode,\n                nregsubtypecode: nregsubtypecode,\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\"\n              };\n            } else {\n              inputData = {\n                ResultUsedMaterial: {\n                  ntransactiontestcode: selectedRecord.ntransactiontestcode,\n                  npreregno: selectedRecord.npreregno,\n                  nmaterialtypecode: selectedRecord.nmaterialtypecode.value,\n                  nmaterialcategorycode: selectedRecord.nmaterialcatcode.value,\n                  nmaterialcode: selectedRecord.nmaterialcode.value,\n                  ninventorycode: selectedRecord.nmaterialinventorycode.value,\n                  nsectioncode: selectedRecord.nsectioncode,\n                  jsondata: {\n                    sarno: selectedRecord.sarno,\n                    ssamplearno: selectedRecord.ssamplearno,\n                    stestsynonym: selectedRecord.stestsynonym,\n                    smaterialcatname: selectedRecord.nmaterialcatcode.label,\n                    smaterialname: selectedRecord.nmaterialcode.label,\n                    sinventoryid: selectedRecord.nmaterialinventorycode.label,\n                    nqtyused: selectedRecord.susedquantity,\n                    scarriergas: selectedRecord.scarriergas,\n                    smobilephase: selectedRecord.smobilephase,\n                    sremarks: selectedRecord.sremarks\n                  }\n                },\n                MaterialInventoryTrans: {\n                  nmaterialinventorycode: selectedRecord.nmaterialinventorycode.value,\n                  nsectioncode: selectedRecord.nsectioncode,\n                  jsondata: {\n                    nqtyused: selectedRecord.susedquantity,\n                    IDS_INVENTORYID: selectedRecord.nmaterialinventorycode.label\n                  }\n                },\n                userinfo: this.props.Login.userInfo,\n                nregtypecode: nregtypecode,\n                nregsubtypecode: nregsubtypecode,\n                transactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\"\n              };\n            }\n\n            inputParam = {\n              classUrl: classUrl,\n              methodUrl: \"ResultUsedMaterial\",\n              inputData: inputData,\n              selectedId,\n              isFileupload: false,\n              activeTestKey: \"IDS_MATERIAL\",\n              operation: this.props.Login.operation,\n              displayName: this.props.Login.inputParam.displayName,\n              saveType //postParam\n\n            };\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"Quantity Not available\"\n            }));\n            return null;\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_TASK\") {\n          if (selectedRecord.sanalysistime && selectedRecord.sanalysistime !== \"\" || selectedRecord.smisctime && selectedRecord.smisctime !== \"\" || selectedRecord.spreanalysistime && selectedRecord.spreanalysistime !== \"\" || selectedRecord.spreparationtime && selectedRecord.spreparationtime !== \"\" || selectedRecord.scomments && selectedRecord.scomments !== \"\") {\n            if (this.props.Login.operation === \"update\") {\n              inputData = {\n                ResultUsedTasks: {\n                  nresultusedtaskcode: selectedRecord.nresultusedtaskcode,\n                  sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\n                  sanalyst: this.props.Login.userInfo.susername,\n                  smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\n                  spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\n                  spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\n                  scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\"\n                },\n                userinfo: this.props.Login.userInfo,\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\n                nregtypecode: nregtypecode,\n                nregsubtypecode: nregsubtypecode\n              };\n            } else {\n              inputData = {\n                ResultUsedTasks: {\n                  ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\n                  sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\n                  sanalyst: this.props.Login.userInfo.susername,\n                  smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\n                  spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\n                  spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\n                  scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\"\n                },\n                userinfo: this.props.Login.userInfo,\n                transactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\n                nregtypecode: nregtypecode,\n                nregsubtypecode: nregsubtypecode\n              };\n            }\n\n            inputParam = {\n              classUrl: classUrl,\n              methodUrl: \"ResultUsedTasks\",\n              inputData: inputData,\n              selectedId,\n              activeTestKey: \"IDS_TASK\",\n              isFileupload: false,\n              operation: this.props.Login.operation,\n              displayName: this.props.Login.inputParam.displayName,\n              saveType //postParam\n\n            };\n          } else {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_ENTERTASKTIME\"\n            }));\n            return;\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_PARAMETERCOMMENTS\") {\n          inputData = {\n            ntransactiontestcode: selectedRecord.ntransactiontestcode,\n            ntransactionresultcode: selectedRecord.ntransactionresultcode,\n            sresultcomment: selectedRecord.sresultcomment,\n            transactiontestcode: selectedRecord.transactiontestcode,\n            userinfo: this.props.Login.userInfo,\n            nregtypecode: nregtypecode,\n            nregsubtypecode: nregsubtypecode,\n            ncontrolcode: this.props.Login.ncontrolcode\n          }; // inputParam = {\n          //     classUrl: classUrl,\n          //     methodUrl: \"ParameterComments\",\n          //     inputData: inputData, selectedId,\n          //     isFileupload: false,\n          //     operation: this.props.Login.operation,\n          //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\n          // }\n\n          this.updateParameterComments(inputData, this.props.Login.masterData, selectedRecord.ncontrolcode);\n          return;\n        }\n\n        if (this.props.Login.screenName === \"IDS_CHECKLISTRESULT\") {\n          let lstResultCheckList = [];\n\n          if (selectedRecord && selectedRecord.editedQB) {\n            selectedRecord.editedQB.map(qbcode => lstResultCheckList.push(selectedRecord[qbcode]));\n            inputData = {\n              ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\n              ntransactionresultcode: selectedRecord.ntransactionresultcode,\n              transactiontestcode: selectedRecord.transactiontestcode,\n              ResultCheckList: lstResultCheckList,\n              userinfo: this.props.Login.userInfo,\n              nregtypecode: nregtypecode,\n              nregsubtypecode: nregsubtypecode\n            };\n            inputParam = {\n              classUrl: classUrl,\n              methodUrl: \"ResultEntryChecklist\",\n              inputData: inputData,\n              selectedId,\n              isFileupload: false,\n              operation: this.props.Login.operation,\n              displayName: this.props.Login.inputParam.displayName,\n              saveType //postParam\n\n            };\n          }\n        }\n\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.searchSampleRef = React.createRef();\n    this.searchSubSampleRef = React.createRef();\n    this.searchTestRef = React.createRef();\n    this.state = {\n      sampleGridDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      resultDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      instrumentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      materialDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      taskDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      documentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      resultChangeDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      testCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      historyDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'stestsynonym'\n        }]\n      },\n      sampleHistoryDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      // historyDataState: { skip: 0, take: 5, group: [{ field: 'ArNo' }, { field: 'stestsynonym' }] },\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      masterStatus: \"\",\n      error: \"\",\n      operation: \"\",\n      showSample: false,\n      showTest: true,\n      sampleListColumns: [],\n      subSampleListColumns: [],\n      testListColumns: [],\n      TableExpandableItem: [],\n      SingleItem: [],\n      SampleGridItem: [],\n      SampleGridExpandableItem: [],\n      sampleListMainField: [],\n      subSampleListMainField: [],\n      testListMainField: [],\n      testMoreField: [],\n      selectedRecord: {},\n      validateFormulaMandyFields: [],\n      splitChangeWidthPercentage: 22,\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      subSampleSkip: 0,\n      subSampleTake: 5,\n      testskip: 0,\n      testtake: this.props.Login.settings && this.props.Login.settings[12]\n    };\n    this.formRef = React.createRef(); //this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\n  }\n\n  showRETestList() {\n    // const updateInfo = {\n    //     typeName: DEFAULT_RETURN,\n    //     data: {\n    //         showSample: false, \n    //         showTest: true \n    //         }\n    //     }\n    // this.props.updateStore(updateInfo);\n    this.setState({\n      showTest: true,\n      showSample: false\n    });\n  } // getMeanTestParameter =(meanParam)=>{\n  //     const inputData = {npreregno:meanParam.selectedRecord.npreregno,\n  //                        userinfo:this.props.Login.userInfo}\n  //     return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\n  //         .then(response => {\n  //            const list =  response.data || [];\n  //            const optionList = [];\n  //            list.map(item=>{optionList.push({item:item, label:item.stestsynonym+\"-\"+item.sparametername+\"-\"+item.sresult, value:item.ntransactiontestresultcode})})\n  //            this.setState({meanTestParameterList:optionList});                \n  //         })\n  //         .catch(error => {\n  //             if (error.response.status === 500) {\n  //                 toast.error(error.message);\n  //             } else {\n  //                 toast.warn(error.response.data);\n  //             }\n  //         })\n  // }\n\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height\n      });\n    }\n  }\n\n  getActiveTestURL() {\n    let url = \"resultentrybysample/getTestbasedParameter\";\n\n    switch (this.props.Login.activeTestKey) {\n      case \"IDS_RESULTS\":\n        url = \"resultentrybysample/getTestbasedParameter\";\n        break;\n\n      case \"IDS_INSTRUMENT\":\n        url = \"resultentrybysample/getResultUsedInstrument\";\n        break;\n\n      case \"IDS_MATERIAL\":\n        url = \"resultentrybysample/getResultUsedMaterial\";\n        break;\n\n      case \"IDS_TASK\":\n        url = \"resultentrybysample/getResultUsedTask\";\n        break;\n\n      case \"IDS_TESTATTACHMENTS\":\n        url = \"attachment/getTestAttachment\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        break;\n\n      case \"IDS_DOCUMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      case \"IDS_RESULTCHANGEHISTORY\":\n        url = \"resultentrybysample/getResultChangeHistory\";\n        break;\n\n      case \"IDS_APPROVALHISTORY\":\n        url = \"resultentrybysample/getSampleApprovalHistory\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      default:\n        url = \"resultentrybysample/getTestbasedParameter\";\n        break;\n    }\n\n    return url;\n  }\n\n  render() {\n    let sampleListRE = this.props.Login.masterData.RE_SAMPLE ? sortData(this.props.Login.masterData.RE_SAMPLE, \"descending\", \"npreregno\") : [];\n    let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : []; // let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\n\n    let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : [];\n    const startDate = this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date();\n    const endDate = this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date(); // let obj = this.covertDatetoString(startDate, endDate)\n\n    let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\n    const fromDate = obj.fromDate;\n    const toDate = obj.toDate;\n    let subSampleGetREParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n      ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n      ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n      npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n      fromdate: fromDate,\n      todate: toDate,\n      activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\n      activeSampleKey: this.props.Login.activeSampleKey || 'IDS_IDS_SAMPLEINFO',\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      searchSubSampleRef: this.searchSubSampleRef,\n      searchTestRef: this.searchTestRef\n    };\n    let testGetREParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n      ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n      ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n      npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n      activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\n      activeSampleKey: this.props.Login.activeSampleKey || 'IDS_IDS_SAMPLEINFO',\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\n    };\n    let testChildGetREParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n      ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n      ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n      npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n      ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n      activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\n      fromdate: fromDate,\n      todate: toDate,\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\n    };\n    let sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"seprotocolname\", \"stransdisplaystatus\", \"sstorageconditionname\", \"sdecisionstatus\", \"scomponentname\", \"splasmafilenumber\", \"sversion\", \"sbulkvolume\", \"sregsubtypename\", \"smanuflotno\", \"sregtypename\", \"sspecname\", \"saddress1\", \"sclientname\", \"smanufsitename\", \"sproductcertificatename\", \"smanufname\", \"sstoragelocationname\", \"dregdate\"];\n\n    if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n      sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\", \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\", \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"];\n    }\n\n    const filterSampleParam = {\n      inputListName: \"RE_SAMPLE\",\n      selectedObject: \"RESelectedSample\",\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"resultentrybysample/getResultEntryDetails\",\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      fecthInputObject: {\n        ntype: 2,\n        nflag: 2,\n        ntransactiontestcode: 0,\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n        napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n        ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\n        ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n        //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n        fromdate: fromDate,\n        todate: toDate,\n        activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\n        nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        checkBoxOperation: 3\n      },\n      masterData: this.props.Login.masterData,\n      // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\n      searchFieldList: sampleSearchField,\n      changeList: [\"RE_SUBSAMPLE\", \"RE_TEST\", \"TestParameters\", \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"RESelectedSample\", \"RESelectedSubSample\", \"RESelectedTest\"]\n    };\n    const filterSubSampleParam = {\n      inputListName: \"RE_SUBSAMPLE\",\n      selectedObject: \"RESelectedSubSample\",\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"resultentrybysample/getResultEntrySubSampleDetails\",\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      fecthInputObject: {\n        ntype: 2,\n        nflag: 2,\n        ntransactiontestcode: 0,\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n        napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n        ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\n        ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n        //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n        fromdate: fromDate,\n        todate: toDate,\n        activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\n        nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        checkBoxOperation: 3\n      },\n      masterData: this.props.Login.masterData,\n      // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\n      searchFieldList: ['ssamplearno'],\n      changeList: [\"RE_TEST\", \"TestParameters\", \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"RESelectedSubSample\", \"RESelectedTest\"]\n    };\n    let filterTestParam = {\n      inputListName: \"RE_TEST\",\n      selectedObject: \"RESelectedTest\",\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      fecthInputObject: {\n        ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"sarno\", \"stestsynonym\", \"dtransactiondate\", \"ssectionname\", \"ssourcename\", \"ntestrepeatno\", \"ntestretestno\", \"stransdisplaystatus\", \"stestsynonym\"],\n      changeList: [\"TestParameters\", \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"RESelectedTest\"],\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      checkBoxOperation: 3\n    };\n    this.postParamList = [{\n      filteredListName: \"searchedSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSampleRef,\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"resultentrybysample/getResultEntryDetails\",\n      fecthInputObject: filterSampleParam,\n      selectedObject: \"RESelectedSample\",\n      inputListName: \"RE_SAMPLE\",\n      updatedListname: \"\",\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedSubSample\",\n      updatedListname: \"updatedSubSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSubSampleRef,\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"resultentrybysample/getResultEntryDetails\",\n      fecthInputObject: testGetREParam,\n      selectedObject: \"RESelectedSubSample\",\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      inputListName: \"RE_SUBSAMPLE\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedTest\",\n      clearFilter: \"yes\",\n      searchRef: this.searchTestRef,\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchSampleRef,\n        childFilteredListName: \"\"\n      }],\n      fecthInputObject: testChildGetREParam,\n      selectedObject: \"RESelectedTest\",\n      inputListName: \"RE_TEST\",\n      updatedListname: \"updatedTest\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }];\n    this.breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": obj.breadCrumbFrom\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": obj.breadCrumbto\n    }, {\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\n    }, {\n      \"label\": \"IDS_REGISTRATIONTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"Batch\"\n    }, {\n      \"label\": \"IDS_REGISTRATIONSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"EU\"\n    }, {\n      \"label\": \"IDS_CONFIGVERSION\",\n      \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\n    }, {\n      \"label\": \"IDS_FILTERSTATUS\",\n      \"value\": this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.sfilterstatus : \"NA\"\n    }, {\n      \"label\": \"IDS_TEST\",\n      \"value\": this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.stestsynonym ? this.props.Login.masterData.realTestcodeValue.stestsynonym : \"NA\"\n    }];\n    const testStartId = this.state.controlMap.has(\"TestStart\") && this.state.controlMap.get(\"TestStart\").ncontrolcode;\n    const resultEnterId = this.state.controlMap.has(\"ResultEnter\") && this.state.controlMap.get(\"ResultEnter\").ncontrolcode;\n    const completeResultId = this.state.controlMap.has(\"CompleteResult\") && this.state.controlMap.get(\"CompleteResult\").ncontrolcode;\n    const setDefaultId = this.state.controlMap.has(\"SetDefaultResult\") && this.state.controlMap.get(\"SetDefaultResult\").ncontrolcode;\n    const editSourceMethodId = this.state.controlMap.has(\"EditSourceMethod\") && this.state.controlMap.get(\"EditSourceMethod\").ncontrolcode;\n    const addResultUsedInstrumentId = this.state.controlMap.has(\"AddResultUsedInstrument\") && this.state.controlMap.get(\"AddResultUsedInstrument\").ncontrolcode;\n    const addResultUsedMaterailId = this.state.controlMap.has(\"AddResultUsedMaterial\") && this.state.controlMap.get(\"AddResultUsedMaterial\").ncontrolcode; //const addResultUsedTaskId = this.state.controlMap.has(\"AddResultUsedTask\") && this.state.controlMap.get(\"AddResultUsedTask\").ncontrolcode\n    //const parameterCommentsId = this.state.controlMap.has(\"AddParameterComments\") && this.state.controlMap.get(\"AddParameterComments\").ncontrolcode\n\n    const mandatoryFieldsInstrument = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_INSTRUMENTCATEGORY\",\n      \"dataField\": \"ninstrumentcatcode\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_INSTRUMENT\",\n      \"dataField\": \"ninstrumentcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_FORMDATE\",\n      \"dataField\": \"dfromdate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TODATE\",\n      \"dataField\": \"dtodate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TIMEZONE\",\n      \"dataField\": \"ntzfromdate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TIMEZONE\",\n      \"dataField\": \"ntztodate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryFieldsTask = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PREANALYSISTIME\",\n      \"dataField\": \"spreanalysistime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PREPARATIONTIME\",\n      \"dataField\": \"spreparationtime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_ANALYSISTIME\",\n      \"dataField\": \"sanalysistime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_MISCTIME\",\n      \"dataField\": \"smisctime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    } //{ \"mandatory\": true, \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\" }\n    ];\n    const mandatoryFieldsTestMethodSource = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_SOURCE\",\n      \"dataField\": \"nsourcecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_METHOD\",\n      \"dataField\": \"nmethodcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }]; // const mandatoryFieldsCheckList=[{\"mandatory\": true, \"idsName\": \"IDS_SOURCE\", \"dataField\": \"nsourcecode\" },\n    //    { \"mandatory\": true, \"idsName\": \"IDS_METHOD\", \"dataField\": \"nmethodcode\"}]\n\n    const mandatoryFieldsParameter = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PARAMETERCOMMENTS\",\n      \"dataField\": \"sresultcomment\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    const validateFormulaMandyFields = this.state.validateFormulaMandyFields; // const mandatoryFieldsTask = [{ \"mandatory\": true, \"idsName\": \"IDS_PREANALYSISTIME\", \"dataField\": \"spreanalysistime\" },\n    // { \"mandatory\": true, \"idsName\": \"IDS_PREPARATIONTIME\", \"dataField\": \"spreparationtime\" },\n    // { \"mandatory\": true, \"idsName\": \"IDS_ANALYSISTIME\", \"dataField\": \"sanalysistime\" },\n    // { \"mandatory\": true, \"idsName\": \"IDS_MISCTIME\", \"dataField\": \"smisctime\" }]\n\n    const reportPreviewId = this.state.controlMap.has(\"SamplePreviewReport\") && this.state.controlMap.get(\"SamplePreviewReport\").ncontrolcode;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1525,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1526,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1527,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1529,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1530,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1531,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson // paneHeight={this.state.parentHeight}\n    , {\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      masterList: this.props.Login.masterData.searchedSample || sampleListRE,\n      selectedMaster: this.props.Login.masterData.RESelectedSample,\n      primaryKeyField: \"npreregno\",\n      getMasterDetail: this.props.getsubSampleREDetail,\n      inputParam: subSampleGetREParam,\n      additionalParam: ['napprovalversioncode'],\n      mainField: \"sarno\",\n      selectedListName: \"RESelectedSample\",\n      objectName: \"sample\",\n      listName: \"IDS_SAMPLE\",\n      needValidation: false,\n      validationKey: \"napprovalversioncode\",\n      validationFailMsg: \"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\",\n      subFields: this.state.DynamicSampleColumns || [],\n      moreField: this.state.sampleMoreField,\n      needFilter: true,\n      needMultiSelect: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onREFilterSubmit,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedSample\",\n      searchRef: this.searchSampleRef,\n      handlePageChange: this.handlePageChange,\n      filterParam: filterSampleParam,\n      skip: this.state.skip,\n      take: this.state.take,\n      hidePaging: false,\n      showStatusLink: true,\n      showStatusName: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      selectionFieldName: \"sfilterstatus\",\n      splitModeClass: this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : '',\n      childTabsKey: [\"RegistrationAttachment\", \"RE_SUBSAMPLE\", \"RE_TEST\", \"SampleApprovalHistory\"],\n      selectionList: this.state.selectedFilter,\n      selectionColorField: \"scolorhexcode\",\n      selectionField: \"ntransactionstatus\",\n      jsonField: 'jsondata',\n      jsonDesignFields: true,\n      filterComponent: [{\n        \"Sample Filter\": /*#__PURE__*/React.createElement(ResultEntryFilter, {\n          fromDate: this.props.Login.masterData.fromDate ? //new Date(this.props.Login.masterData.fromDate) \n          rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date(),\n          toDate: this.props.Login.masterData.toDate ? //new Date(this.props.Login.masterData.toDate) \n          rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date(),\n          SampleType: this.state.SampleType || [],\n          SampleTypeValue: this.props.Login.masterData.defaultSampleType || [],\n          RegType: this.state.RegistrationType || [],\n          RegTypeValue: this.props.Login.masterData.defaultRegistrationType || [],\n          RegSubType: this.state.RegistrationSubType || [],\n          RegSubTypeValue: this.props.Login.masterData.defaultRegistrationSubType || [],\n          FilterStatus: this.state.REFilterStatus || [],\n          FilterStatusValue: this.props.Login.masterData.defaultFilterStatus || [],\n          ApprovalVersion: this.state.ApprovalConfigVersion || [],\n          ApprovalVersionValue: this.props.Login.masterData.defaultApprovalConfigVersion || [],\n          REJobStatus: this.state.REJobStatus || [],\n          JobStatusValue: this.props.Login.masterData.defaultjobstatus || [],\n          Test: this.state.Testvalues || [],\n          TestValue: this.props.Login.masterData.defaultTestvalues || [],\n          onFilterComboChange: this.onFilterComboChange,\n          handleDateChange: this.handleDateChange,\n          userInfo: this.props.Login.userInfo,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1578,\n            columnNumber: 66\n          }\n        })\n      }],\n      actionIcons: [this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ? {\n        title: \"Report\",\n        controlname: \"reports\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(reportPreviewId) === -1,\n        onClick: this.props.previewSampleReport,\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: reportPreviewId\n        }\n      } : {}],\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1623,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        onClick: () => this.onReload(),\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1626,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1630,\n          columnNumber: 57\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1532,\n        columnNumber: 37\n      }\n    }), this.props.Login.masterData.nneedsubsample ? /*#__PURE__*/React.createElement(ScrollBar, {\n      ref: ref => {\n        this._scrollBarRef = ref;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1638,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      customClassName: \"detailed-inner\",\n      vertical: true,\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      onSecondaryPaneSizeChange: this.verticalPaneSizeChange,\n      secondaryInitialSize: 400,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1639,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1647,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.showTest === true ? {\n        display: \"block\",\n        background: \"#FFFF\"\n      } : {\n        display: \"none\",\n        background: \"#FFFF\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1648,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1649,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1656,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1657,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1658,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1659,\n        columnNumber: 73\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SUBSAMPLE\"\n    })))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0 spliterHeight\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1662,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth,\n      masterList: this.props.Login.masterData.searchedSubSample || subSampleListRE,\n      selectedMaster: this.props.Login.masterData.RESelectedSubSample,\n      primaryKeyField: \"ntransactionsamplecode\",\n      getMasterDetail: this.props.getTestREDetail,\n      inputParam: testGetREParam,\n      additionalParam: [],\n      mainField: \"ssamplearno\",\n      selectedListName: \"RESelectedSubSample\",\n      objectName: \"subSample\",\n      listName: \"IDS_SUBSAMPLE\",\n      jsonField: 'jsondata',\n      jsonDesignFields: true,\n      subFields: this.state.DynamicSubSampleColumns,\n      moreField: this.state.subSampleMoreField,\n      needValidation: false,\n      needMultiSelect: true,\n      needFilter: false,\n      skip: this.state.subSampleSkip,\n      take: this.state.subSampleTake,\n      handlePageChange: this.handleSubSamplePageChange,\n      showStatusLink: true,\n      showStatusName: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      childTabsKey: [\"RE_TEST\"],\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedSubSample\",\n      searchRef: this.searchSubSampleRef,\n      filterParam: filterSubSampleParam,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1663,\n        columnNumber: 69\n      }\n    }))), /*#__PURE__*/React.createElement(ContentPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1697,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1698,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1699,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1700,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1701,\n        columnNumber: 77\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary headerBtn\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showRESampleInfo(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1703,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1705,\n        columnNumber: 77\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1709,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth // paneHeight={`${testListRE && testListRE !== null && testListRE.length > 0 ? testListRE.length * 13 : 5}vh`}\n      ,\n      masterList: this.props.Login.masterData.searchedTest || testListRE,\n      selectedMaster: this.props.Login.masterData.RESelectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: this.props.getTestChildTabREDetail,\n      inputParam: testChildGetREParam,\n      additionalParam: [],\n      mainField: \"stestsynonym\",\n      selectedListName: \"RESelectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\",\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      showStatusName: true,\n      selectionFieldName: \"sfilterstatus\",\n      childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"],\n      selectionList: this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.REFilterStatus : [],\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      handlePageChange: this.handleTestPageChange,\n      selectionColorField: \"scolorhexcode\",\n      showMoreResetList: true,\n      showMoreResetListName: \"RE_SAMPLE\",\n      buttonCount: 5,\n      jsonField: 'jsondata',\n      jsonDesignFields: true,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDITMETHODSSOURCE\"\n        }),\n        controlname: \"faPencilAlt\",\n        dataplace: \"left\",\n        hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1,\n        onClick: this.testMethodSourceEdit,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editSourceMethodId\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADDINSTRUMENT\"\n        }),\n        controlname: \"faMicroscope\",\n        hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1,\n        onClick: this.addREInstrument,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          addResultUsedInstrumentId\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADDMATERIAL\"\n        }),\n        controlname: \"faFlask\",\n        hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1,\n        onClick: this.props.addREMaterial,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          addResultUsedMaterailId\n        }\n      } // { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }\n      ],\n      commonActions:\n      /*#__PURE__*/\n      // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\n      React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1761,\n          columnNumber: 81\n        }\n      }, testListRE.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Nav.Link, {\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_TESTSTART\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(testStartId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1765,\n          columnNumber: 93\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1766,\n          columnNumber: 97\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ENTERRESULT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(resultEnterId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.props.resultGetModule(this.props.Login.masterData, this.props.Login.userInfo, resultEnterId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1768,\n          columnNumber: 93\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faAddressBook,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1769,\n          columnNumber: 97\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_FILLDEFAULTRESULT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(setDefaultId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.defaultActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.masterData.RESelectedSample, setDefaultId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1771,\n          columnNumber: 93\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPencilRuler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1772,\n          columnNumber: 97\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_COMPLETE\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(completeResultId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1774,\n          columnNumber: 93\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCheckCircle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1775,\n          columnNumber: 97\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_IMPORTRESULT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(completeResultId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.resultImport(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1777,\n          columnNumber: 93\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faFileImport,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1778,\n          columnNumber: 97\n        }\n      }))) : \"\") // </Tooltip>\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1711,\n        columnNumber: 73\n      }\n    })))))), /*#__PURE__*/React.createElement(ContentPanel, {\n      style: this.state.showSample === true ? {\n        display: \"block\"\n      } : {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1793,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1794,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1795,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1796,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1797,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1798,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1799,\n        columnNumber: 77\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showRETestList(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1801,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1803,\n        columnNumber: 77\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1807,\n        columnNumber: 69\n      }\n    }, this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ? /*#__PURE__*/React.createElement(SampleInfoView, {\n      data: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0 ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {},\n      SingleItem: this.state.SingleItem,\n      screenName: \"IDS_SAMPLEINFO\",\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1809,\n        columnNumber: 77\n      }\n    }) : /*#__PURE__*/React.createElement(SampleInfoGrid, {\n      selectedSample: this.props.Login.masterData.RESelectedSample,\n      dataState: this.state.sampleGridDataState,\n      dataStateChange: this.sampleGridDataStateChange,\n      extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n      detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n      userInfo: this.props.Login.userInfo,\n      inputParam: this.props.Login.inputParam,\n      screenName: \"IDS_SAMPLEGRID\",\n      jsonField: \"jsondata\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1817,\n        columnNumber: 77\n      }\n    }))))))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1836,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1837,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1838,\n        columnNumber: 57\n      }\n    }, this.state.showTest ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\n      tabDetail: this.testRETabDetail(),\n      onTabChange: this.onTestTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1840,\n        columnNumber: 65\n      }\n    }) : /*#__PURE__*/React.createElement(CustomTabs, {\n      tabDetail: this.sampleTabDetail(),\n      onTabChange: this.onSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1843,\n        columnNumber: 65\n      }\n    })))))) : /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      ref: ref => {\n        this._scrollBarRef = ref;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1851,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      vertical: true,\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      secondaryInitialSize: 400,\n      customClassName: \"fixed_list_height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1853,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1855,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card_group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1859,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      style: this.state.showTest === true ? {\n        display: \"block\"\n      } : {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1860,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1861,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1862,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1863,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1864,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1865,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1866,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1867,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1868,\n        columnNumber: 93\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showRESampleInfo(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1870,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1872,\n        columnNumber: 93\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1876,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: `${testListRE && testListRE !== null && testListRE.length > 0 ? testListRE.length * 13 : 5}vh`,\n      masterList: this.props.Login.masterData.searchedTest || testListRE,\n      selectedMaster: this.props.Login.masterData.RESelectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: this.props.getTestChildTabREDetail,\n      inputParam: testChildGetREParam,\n      additionalParam: [],\n      mainField: \"stestsynonym\",\n      selectedListName: \"RESelectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\",\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      showStatusName: true,\n      selectionFieldName: \"sfilterstatus\",\n      childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"],\n      selectionList: this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.REFilterStatus : [],\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      handlePageChange: this.handleTestPageChange,\n      selectionColorField: \"scolorhexcode\",\n      showMoreResetList: true,\n      showMoreResetListName: \"RE_SAMPLE\",\n      buttonCount: 5,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDITMETHODSSOURCE\"\n        }),\n        controlname: \"faPencilAlt\",\n        dataplace: \"left\",\n        hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1,\n        onClick: this.testMethodSourceEdit,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editSourceMethodId\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADDINSTRUMENT\"\n        }),\n        controlname: \"faMicroscope\",\n        hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1,\n        onClick: this.addREInstrument,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          addResultUsedInstrumentId\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADDMATERIAL\"\n        }),\n        controlname: \"faFlask\",\n        hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1,\n        onClick: this.props.addREMaterial,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          addResultUsedMaterailId\n        }\n      } // { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }\n      ],\n      commonActions:\n      /*#__PURE__*/\n      // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\n      React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1925,\n          columnNumber: 97\n        }\n      }, testListRE.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Nav.Link, {\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_TESTSTART\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(testStartId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1929,\n          columnNumber: 109\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1930,\n          columnNumber: 113\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ENTERRESULT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(resultEnterId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.props.resultGetModule(this.props.Login.masterData, this.props.Login.userInfo, resultEnterId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1932,\n          columnNumber: 109\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faAddressBook,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1933,\n          columnNumber: 113\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_FILLDEFAULTRESULT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(setDefaultId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.defaultActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.masterData.RESelectedSample, setDefaultId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1935,\n          columnNumber: 109\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPencilRuler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1936,\n          columnNumber: 113\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_COMPLETE\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(completeResultId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1938,\n          columnNumber: 109\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCheckCircle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1939,\n          columnNumber: 113\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_IMPORTRESULT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(completeResultId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.resultImport(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1941,\n          columnNumber: 109\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faFileImport,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1942,\n          columnNumber: 113\n        }\n      }))) : \"\") // </Tooltip>\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1878,\n        columnNumber: 89\n      }\n    })))))))), /*#__PURE__*/React.createElement(ContentPanel, {\n      style: this.state.showSample === true ? {\n        display: \"block\"\n      } : {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1960,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1961,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1962,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1963,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1964,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1965,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1966,\n        columnNumber: 85\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showRETestList(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1968,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1970,\n        columnNumber: 85\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1974,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ? /*#__PURE__*/React.createElement(SampleInfoView, {\n      data: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0 ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {},\n      SingleItem: this.state.SingleItem,\n      screenName: \"IDS_SAMPLEINFO\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1976,\n        columnNumber: 85\n      }\n    }) : /*#__PURE__*/React.createElement(SampleInfoGrid, {\n      selectedSample: this.props.Login.masterData.RESelectedSample,\n      dataState: this.state.sampleGridDataState,\n      dataStateChange: this.sampleGridDataStateChange,\n      extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n      detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n      userInfo: this.props.Login.userInfo,\n      inputParam: this.props.Login.inputParam,\n      screenName: \"IDS_SAMPLEGRID\",\n      jsonField: \"jsondata\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1982,\n        columnNumber: 85\n      }\n    })))))), this.state.showTest ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\n      tabDetail: this.testRETabDetail(),\n      onTabChange: this.onTestTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2033,\n        columnNumber: 65\n      }\n    }) : /*#__PURE__*/React.createElement(CustomTabs, {\n      tabDetail: this.sampleTabDetail(),\n      onTabChange: this.onSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2036,\n        columnNumber: 65\n      }\n    }))))))))))), /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      size: this.props.Login.screenName === 'IDS_MEANPARAMETER' ? \"xl\" : \"lg\",\n      closeModal: this.closeModal,\n      operation: this.props.Login.screenName === 'IDS_RESULTENTRY' ? \"\" : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      selectedRecord: this.props.Login.screenName === 'IDS_RESULTFORMULA' ? this.state.selectedRecord.selectedMandatory : this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.screenName === 'IDS_INSTRUMENT' ? mandatoryFieldsInstrument : this.props.Login.screenName === 'IDS_TASK' ? mandatoryFieldsTask : this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ? mandatoryFieldsTestMethodSource : this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ? mandatoryFieldsParameter : this.props.Login.screenName === 'IDS_RESULTFORMULA' ? validateFormulaMandyFields : [],\n      esign: this.props.Login.loadEsign,\n      innerPopup: this.props.Login.screenName,\n      validateEsign: this.validateEsign,\n      onSaveClick: this.props.Login.showValidate ? this.calculateFormula : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ? this.onSaveFileClick : this.onSaveClick,\n      showValidate: this.props.Login.showValidate,\n      modalEvent: this.state.modalEvent,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2082,\n          columnNumber: 25\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTENTRY' ? /*#__PURE__*/React.createElement(ResultEntryForm, {\n        predefinedValues: this.props.Login.masterData.PredefinedValues,\n        defaultPredefinedValues: this.props.Login.masterData.PredefinedValues,\n        gradeValues: this.props.Login.masterData.GradeValues || [],\n        selectedNumericData: this.props.Login.masterData.selectedNumericData,\n        selectedResultGrade: this.state.selectedRecord.selectedResultGrade || [],\n        paremterResultcode: this.props.Login.masterData.paremterResultcode || [],\n        parameterResults: this.state.selectedRecord.ResultParameter || [],\n        Login: this.props.Login,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        onResultInputChange: this.onResultInputChange,\n        onGradeEvent: this.onGradeEvent,\n        getFormula: this.getFormula,\n        onDropTestFile: this.onDropTestFile,\n        onKeyPress: this.onKeyPress,\n        needSubSample: this.props.Login.masterData.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2089,\n          columnNumber: 29\n        }\n      }) : this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ? /*#__PURE__*/React.createElement(TestEditForm, {\n        methodValues: this.props.Login.masterData.MethodData,\n        sourceValues: this.props.Login.masterData.SourceData,\n        selecteRecord: this.state.selectedRecord || {},\n        onComboChange: this.onComboChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2108,\n          columnNumber: 33\n        }\n      }) : this.props.Login.screenName === 'IDS_INSTRUMENT' ? /*#__PURE__*/React.createElement(ResultEntryInstrumentForm, {\n        instrumentcatValue: this.props.Login.masterData.InstrumentCategory,\n        instrumentValue: this.props.Login.masterData.Instrument,\n        selecteRecord: this.state.selectedRecord || {},\n        timeZoneListData: this.props.Login.timeZoneList || [],\n        onComboChange: this.onComboChange,\n        onComboCategoryChange: this.onComboCategoryChange,\n        onDateChange: this.onDateChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        userInfo: this.props.Login.userInfo,\n        needSubSample: this.props.Login.masterData.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2117,\n          columnNumber: 37\n        }\n      }) : this.props.Login.screenName === 'IDS_MATERIAL' ? /*#__PURE__*/React.createElement(ResultEntryMaterialForm, {\n        materialType: this.props.Login.materialType,\n        materialCategory: this.props.Login.materialCat,\n        material: this.props.Login.material,\n        materialInventory: this.props.Login.materialInventory,\n        selectedRecord: this.state.selectedRecord || {},\n        onMaterialComboChange: this.onMaterialComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onDateChange: this.onDateChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        userInfo: this.props.Login.userInfo,\n        needSubSample: this.props.Login.masterData.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2131,\n          columnNumber: 41\n        }\n      }) : this.props.Login.screenName === 'IDS_TASK' ? /*#__PURE__*/React.createElement(ResultEntryTaskForm, {\n        selecteRecord: this.state.selectedRecord || {},\n        onNumericChange: this.onNumericChange,\n        onInputChange: this.onInputChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2146,\n          columnNumber: 45\n        }\n      }) : this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ? /*#__PURE__*/React.createElement(ResultEntryParamCommetsForm, {\n        selecteRecord: this.state.selectedRecord || {},\n        onInputChange: this.onInputChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2154,\n          columnNumber: 49\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTFORMULA' ? /*#__PURE__*/React.createElement(ResultEntryFormulaForm, {\n        DynamicFields: this.props.Login.masterData.DynamicFormulaFields // formRef={this.formRef}\n        ,\n        handleClose: this.handleClose,\n        screenName: this.props.Login.screenName //selectedForumulaInput={this.state.selectedForumulaInput || []}\n        ,\n        onFormulaInputChange: this.onFormulaInputChange,\n        Login: this.props.Login,\n        showValidate: this.props.Login.showValidate,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2160,\n          columnNumber: 53\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ? /*#__PURE__*/React.createElement(ResultEntryImport, {\n        handleClose: this.handleClose,\n        screenName: this.props.Login.screenName,\n        onDropFile: this.onDropFile,\n        selectedImportFile: this.props.Login.masterData.selectedImportFile || {},\n        deleteAttachment: this.deleteAttachment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2172,\n          columnNumber: 57\n        }\n      }) : this.props.Login.screenName === 'IDS_MEANPARAMETER' ? /*#__PURE__*/React.createElement(ResultEntryMean // onInputOnChange={this.onMeanInputOnChange}\n      // onComboChange={this.onMeanComboChange}\n      , {\n        screenName: this.props.Login.screenName,\n        headerSelectionChange: this.headerSelectionChange,\n        selectionChange: this.selectionChange,\n        selectAll: this.state.selectAll,\n        testMean: this.state.testMean,\n        meanTestParameterList: this.state.meanTestParameterList || [],\n        selectedTestParam: this.state.selectedTestParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2180,\n          columnNumber: 61\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2059,\n        columnNumber: 17\n      }\n    }), this.props.Login.masterData.ChecklistData && this.props.Login.screenName === 'IDS_CHECKLISTRESULT' ? /*#__PURE__*/React.createElement(TemplateForm, {\n      templateData: this.props.Login.masterData.ChecklistData,\n      nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode),\n      nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode),\n      needSaveButton: this.props.Login.needSaveButton,\n      formRef: this.formRef,\n      onTemplateInputChange: this.onTemplateInputChange,\n      handleClose: this.closeModal,\n      onTemplateComboChange: this.onTemplateComboChange,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveCheckList,\n      Login: this.props.Login,\n      viewScreen: this.props.Login.openTemplateModal,\n      selectedRecord: this.state.selectedRecord || [],\n      onTemplateDateChange: this.onTemplateDateChange,\n      needValidation: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2195,\n        columnNumber: 25\n      }\n    }) : \"\");\n  }\n\n  valiateCheckAll(data) {\n    let selectAll = true;\n\n    if (data && data.length > 0) {\n      data.forEach(dataItem => {\n        if (dataItem.selected) {\n          if (dataItem.selected === false) {\n            selectAll = false;\n          }\n        } else {\n          selectAll = false;\n        }\n      });\n    } else {\n      selectAll = false;\n    }\n\n    return selectAll;\n  }\n\n  updateTestMethodSource(inputData, masterData, ncontrolcode) {\n    let inputParam = {\n      inputData: { ...inputData,\n        'userinfo': this.props.Login.userInfo,\n        ncontrolcode\n      },\n      // formData: formData,\n      // isFileupload: true,\n      operation: \"createMethod\",\n      screenName: \"IDS_TESTMETHODSOURCE\",\n      displayName: this.props.Login.inputParam.displayName,\n      //, postParam,\n      //inputData1: inputData,\n      masterData: masterData\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          openModal: true,\n          //screenName: \"completeaction\",\n          operation: \"createMethod\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.updateTestMethodSource(inputData, masterData);\n    }\n  }\n\n  updateParameterComments(inputData, masterData, ncontrolcode) {\n    // let inputData1 = { ...inputData, ncontrolcode }\n    let inputParam = {\n      inputData: { ...inputData,\n        ncontrolcode,\n        'userinfo': this.props.Login.userInfo\n      },\n      operation: this.props.Login.operation,\n      screenName: \"IDS_RESULT\",\n      displayName: this.props.Login.inputParam.displayName,\n      //, postParam,\n      //inputData: inputData1,\n      masterData: masterData\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          openModal: true,\n          //screenName: \"completeaction\",\n          operation: \"updateParameterComments\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.updateParameterComments(inputData, masterData);\n    }\n  }\n\n  gridfillingColumn(data) {\n    //  const tempArray = [];\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n        \"dataField\": option[designProperties.VALUE],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\"\n      };\n    });\n    return temparray;\n  }\n\n  constructDesign(list) {\n    let newList = [];\n\n    if (list.length > 0) {\n      list.map(i => {\n        newList.push({\n          [designProperties.LABEL]: i,\n          [designProperties.VALUE]: i\n        });\n      });\n    }\n\n    return newList;\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      showTest,\n      showSample,\n      userRoleControlRights,\n      controlMap,\n      resultDataState,\n      instrumentDataState,\n      materialDataState,\n      taskDataState,\n      documentDataState,\n      resultChangeDataState,\n      testCommentDataState,\n      historyDataState,\n      sampleListColumns,\n      subSampleListColumns,\n      testListColumns,\n      SingleItem,\n      sampleListMainField,\n      subSampleListMainField,\n      testListMainField,\n      SampleGridItem,\n      SampleGridExpandableItem,\n      sampleMoreField,\n      subSampleMoreField,\n      testMoreField,\n      selectedRecord,\n      SampleType,\n      RegistrationType,\n      RegistrationSubType,\n      REFilterStatus,\n      REJobStatus,\n      Testvalues,\n      ApprovalConfigVersion,\n      DynamicSampleColumns,\n      DynamicSubSampleColumns,\n      DynamicTestColumns,\n      DynamicGridItem,\n      DynamicGridMoreField,\n      validateFormulaMandyFields,\n      skip,\n      take,\n      testskip,\n      testtake,\n      selectedFilter\n    } = this.state;\n    let bool = false;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        bool = true;\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n    }\n\n    if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n      const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n      DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\n      DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n      DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n      DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n      DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n      SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\n      testMoreField = dynamicColumn.testlistmoreitem ? dynamicColumn.testlistmoreitem : [];\n      testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n      bool = true;\n    }\n\n    if (this.props.Login.masterData.RegistrationSubType && this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\n      let dataSate = {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}`\n        }]\n      };\n      bool = true;\n      resultDataState = dataSate;\n      instrumentDataState = dataSate;\n      materialDataState = dataSate;\n      taskDataState = dataSate;\n      documentDataState = dataSate;\n      resultChangeDataState = dataSate;\n      historyDataState = dataSate;\n      testCommentDataState = dataSate;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      bool = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.validateFormulaMandyFields !== previousProps.Login.validateFormulaMandyFields) {\n      bool = true;\n      validateFormulaMandyFields = this.props.Login.validateFormulaMandyFields;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\n      RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\n      RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\n      REFilterStatus = constructOptionList(this.props.Login.masterData.REFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", 'descending', \"ntransactionstatus\", false);\n      REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\n      Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestsynonym', 'ascending', 'ntestcode', false);\n      ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname', 'ascending', 'napprovalconfigversioncode', false);\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n\n      if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\n        resultDataState = this.props.Login.resultDataState;\n      }\n\n      if (this.props.Login.instrumentDataState && this.props.Login.instrumentDataState !== previousProps.Login.instrumentDataState) {\n        instrumentDataState = this.props.Login.instrumentDataState;\n      }\n\n      if (this.props.Login.taskDataState && this.props.Login.taskDataState !== previousProps.Login.taskDataState) {\n        taskDataState = this.props.Login.taskDataState;\n      }\n\n      if (this.props.Login.resultChangeDataState && this.props.Login.resultChangeDataState !== previousProps.Login.resultChangeDataState) {\n        resultChangeDataState = this.props.Login.resultChangeDataState;\n      }\n\n      if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\n        historyDataState = this.props.Login.historyDataState;\n      }\n\n      if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\n        testCommentDataState = this.props.Login.testCommentDataState;\n      } // if (this.props.Login.masterData.DynamicColumns && this.props.Login.masterData.DynamicColumns !== previousProps.Login.masterData.DynamicColumns) {\n      //     bool = true;\n      //     sampleListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 3);\n      //     subSampleListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], 3);\n      //     testListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], 3);\n      //     sampleListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 8);\n      //     subSampleListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], 8);\n      //     testListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], 8);\n      //     SingleItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 4)\n      //     SampleGridItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 5)\n      //     SampleGridExpandableItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 6)\n      //     sampleMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 7)\n      //     subSampleMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], 7)\n      //     testMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], 7)\n      // }\n\n\n      let selectFilterStatus = {\n        ntransactionstatus: transactionStatus.PARTIAL,\n        sfilterstatus: this.props.intl.formatMessage({\n          id: \"IDS_PARTIAL\"\n        }),\n        scolorhexcode: \"#800000\"\n      };\n      const selectedFilters = this.props.Login.masterData.REFilterStatus || [];\n      const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\n      const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL);\n\n      if (selectedFiltersNew.length > 0 && index === -1) {\n        selectedFiltersNew.push(selectFilterStatus);\n      }\n\n      selectedFilter = selectedFiltersNew; // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {masterData: this.props.Login.masterData,showTest,showSample }\n      // }\n      // this.props.updateStore(updateInfo);\n\n      SampleType = SampleType.get(\"OptionList\");\n      RegistrationType = RegistrationType.get(\"OptionList\");\n      RegistrationSubType = RegistrationSubType.get(\"OptionList\");\n      REFilterStatus = REFilterStatus.get(\"OptionList\");\n      REJobStatus = REJobStatus.get(\"OptionList\");\n      Testvalues = Testvalues.get(\"OptionList\");\n      ApprovalConfigVersion = ApprovalConfigVersion.get(\"OptionList\");\n    }\n\n    if (bool) {\n      this.setState({\n        showTest,\n        showSample,\n        userRoleControlRights,\n        controlMap,\n        resultDataState,\n        instrumentDataState,\n        materialDataState,\n        taskDataState,\n        documentDataState,\n        resultChangeDataState,\n        testCommentDataState,\n        historyDataState,\n        sampleListColumns,\n        subSampleListColumns,\n        testListColumns,\n        SingleItem,\n        sampleListMainField,\n        subSampleListMainField,\n        testListMainField,\n        SampleGridItem,\n        SampleGridExpandableItem,\n        sampleMoreField,\n        subSampleMoreField,\n        testMoreField,\n        selectedRecord,\n        SampleType,\n        RegistrationType,\n        RegistrationSubType,\n        REFilterStatus,\n        REJobStatus,\n        Testvalues,\n        ApprovalConfigVersion,\n        validateFormulaMandyFields,\n        skip,\n        take,\n        testskip,\n        testtake,\n        selectedFilter,\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        DynamicGridItem,\n        DynamicGridMoreField\n      });\n    }\n\n    if (this.props.Login.meanTestParameterList !== previousProps.Login.meanTestParameterList) {\n      this.setState({\n        meanTestParameterList: this.props.Login.meanTestParameterList\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    } // if (props.Login.selectedRecord !== state.selectedRecord) {\n    //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\n    // }\n\n\n    return null;\n  }\n\n}\n\nconst mapStatetoProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStatetoProps, {\n  crudMaster,\n  updateStore,\n  getsubSampleREDetail,\n  getTestREDetail,\n  getTestChildTabREDetail,\n  resultGetModule,\n  completeTest,\n  testMethodSourceEdit,\n  addREInstrument,\n  addREMaterial,\n  deleteInstrumentRecord,\n  fetchInstrumentRecord,\n  deleteTaskRecord,\n  fetchTaskRecord,\n  parameterRecord,\n  checkListRecord,\n  onSaveCheckList,\n  defaultTest,\n  getFormula,\n  getRERegistrationType,\n  getRERegistrationSubType,\n  fetchMaterialRecord,\n  getREApprovalConfigVersion,\n  getResultEntryDetails,\n  calculateFormula,\n  getREFilterStatus,\n  getREFilterTestData,\n  getREJobStatus,\n  getSampleChildTabREDetail,\n  viewAttachment,\n  getAttachmentCombo,\n  deleteAttachment,\n  resultImportFile,\n  validateEsignCredentialComplete,\n  getCommentsCombo,\n  updateTestMethodSource,\n  filterTransactionList,\n  validateEsignCredential,\n  updateParameterComments,\n  previewSampleReport,\n  getMeanCalculationTestParameter,\n  getREMaterialCategoryByType,\n  getREMaterialByCategory,\n  getREMaterialInvertoryByMaterial,\n  getAvailableMaterialQuantity\n})(injectIntl(ResultEntry));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntry.jsx"],"names":["React","Component","faPlay","faAddressBook","faCheckCircle","faEye","faPencilRuler","faFileImport","faSync","Card","Col","Row","Nav","Button","injectIntl","connect","ListWrapper","FontAwesomeIcon","SplitterLayout","ContentPanel","crudMaster","updateStore","getsubSampleREDetail","getTestREDetail","getTestChildTabREDetail","resultGetModule","fetchMaterialRecord","completeTest","testMethodSourceEdit","addREInstrument","addREMaterial","deleteInstrumentRecord","fetchInstrumentRecord","deleteTaskRecord","fetchTaskRecord","parameterRecord","checkListRecord","onSaveCheckList","defaultTest","getFormula","getRERegistrationType","getRERegistrationSubType","getREApprovalConfigVersion","getResultEntryDetails","calculateFormula","getREFilterStatus","getREFilterTestData","getREJobStatus","viewAttachment","validateEsignCredentialComplete","getAttachmentCombo","deleteAttachment","getCommentsCombo","updateTestMethodSource","resultImportFile","filterTransactionList","validateEsignCredential","getSampleChildTabREDetail","updateParameterComments","getREMaterialCategoryByType","getREMaterialByCategory","getREMaterialInvertoryByMaterial","previewSampleReport","getMeanCalculationTestParameter","getAvailableMaterialQuantity","sortData","create_UUID","getControlMap","listDataFromDynamicArray","formatInputDate","validateTwoDigitDate","showEsign","constructOptionList","deleteAttachmentDropZone","rsapi","toast","parameterType","grade","transactionStatus","RegistrationType","RegistrationSubType","FORMULAFIELDTYPE","designProperties","TransactionListMasterJson","ProductList","CustomTabs","ResultEntryResultsTab","DEFAULT_RETURN","SlideOutModal","Esign","BreadcrumbComponent","ResultEntryFilter","ResultEntryInstrumentForm","ResultEntryForm","TestEditForm","SampleInfoView","SampleInfoGrid","ApprovalInstrumentTab","ResultEntryTaskTab","ResultEntryTaskForm","ResultEntryParamCommetsForm","TemplateForm","templateChangeHandler","numberConversion","numericGrade","PerfectScrollbar","ResultEntryFormulaForm","SampleApprovalHistory","ResultChangeHistoryTab","Attachments","Comments","onSaveSampleAttachment","onSaveTestAttachment","onSaveTestComments","ResultEntryImport","getSameRecordFromTwoArrays","convertDateValuetoString","rearrangeDateFormat","ResultEntryMean","ScrollBar","ResultEntryMaterialForm","UsedMaterial","ResultEntry","constructor","props","paneSizeChange","d","setState","splitChangeWidthPercentage","event","file","fieldName","selectedRecord","Login","masterData","selectedImportFile","updateInfo","typeName","data","closeModal","loadEsign","openModal","openTemplateModal","screenName","operation","loadFile","showValidate","validateFormulaMandyFields","onFilterComboChange","fieldname","inputData","dateObj","toDate","userInfo","nflag","fromdate","fromDate","todate","nsampletypecode","parseInt","defaultSampleType","nregtypecode","defaultRegistrationType","nregsubtypecode","defaultRegistrationSubType","ntranscode","String","defaultFilterStatus","ntransactionstatus","userinfo","obj","state","value","item","napprovalversioncode","defaultApprovalConfigVersion","napprovalconfigversioncode","njobstatuscode","defaultjobstatus","defaultTestvalues","OnDateConverstion","date","month","getMonth","day","getDate","getFullYear","onReload","realFromDate","realToDate","realSampleTypeValue","realRegTypeValue","realRegSubTypeValue","realApproveConfigVersion","realFilterStatusValue","realTestcodeValue","ntestcode","ntransactiontestcode","activeTestKey","showTest","showSample","checkBoxOperation","ndesigntemplatemappingcode","inpuParamData","refs","searchSampleRef","searchSubSampleRef","searchTestRef","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","warn","intl","formatMessage","id","onREFilterSubmit","nneedsubsample","undefined","onSecondaryPaneSizeChange","e","val","onComboCategoryChange","uRL","ninstrumentcatcode","ncalibrationRequired","ncalibrationreq","post","then","response","TagInstrument","Instrument","TagListInstrument","get","ninstrumentcode","catch","error","status","message","showRESampleInfo","testRETabDetail","testTabMap","Map","RESelectedTest","map","test","join","testskip","testtake","testList","RE_TEST","slice","meanControlId","controlMap","has","ncontrolcode","selectedTestList","set","inputParam","dataStateChange","primaryKeyField","selectedId","userRoleControlRights","ncontrolCode","deleteMaterialRecord","addResultEntryTask","onAttachmentSaveClick","RegistrationTestAttachment","VALUE","methodUrl","esignRights","masterList","onCommentsSaveClick","RegistrationTestComment","ResultChangeHistory","sampleDataStateChange","activeSampleKey","sampleHistoryDataState","dataState","sampleGridDataState","sampleGridDataStateChange","sampleTabDetail","tabMap","npreregno","RESelectedSample","sample","RegistrationAttachment","onSampleTabChange","tabProps","length","toString","preregno","ntransactionsamplecode","RESelectedSubSample","subsamplecode","onTestTabChange","displayName","nformcode","screenData","stestsynonym","addResultUsedTaskId","parameterData","index","modalEvent","currentTarget","selectedForumulaInput","lstDynamicFields","dynamicfields","push","selectedResultGrade","ResultParameter","resultImport","closeFilter","showFilter","handlePageChange","skip","take","setTimeout","_scrollBarRef","updateScroll","handleSubSamplePageChange","subSampleSkip","subSampleTake","handleTestPageChange","sampletakeDataState","verticalPaneSizeChange","initialVerticalWidth","defaultActions","testChildGetREParam","setDefaultId","TestList","splice","acceptTestList","classUrl","completeActions","completeResultId","postParamList","validateEsign","sreason","password","onEsignInputOnChange","target","type","name","checked","YES","NO","onInputOnChange","onSaveFileClick","saveType","formRef","acceptedFile","sfilename","formData","FormData","forEach","append","JSON","stringify","x","onDropFile","onFormulaInputChange","fields","selectedMandatory","dynamicformulafields","ndynamicformulafieldcode","INTEGER","replace","formulainput","svalues","sparameter","sdescription","onTemplateInputChange","control","onTemplateComboChange","comboData","onTemplateDateChange","dateData","handleDateChange","dateName","dateValue","Date","onInputChange","Data","onNumericChange","numericData","numericName","onDateChange","headerSelectionChange","syntheticEvent","meanTestParameterList","selectedMeanTestParam","selected","ntransactionresultcode","sresult","selectedTestParam","selectedTestParamMean","size","values","testMean","selectAll","selectionChange","dataItem","delete","valiateCheckAll","onMeanComboChange","comboName","onMaterialComboChange","onComboChange","onGradeEvent","parameter","nparametertypecode","NUMERIC","ngradecode","parseFloat","nroundingdigits","PREDEFINED","CHARACTER","saveParam","isTestComment","sampleList","RE_SAMPLE","selectedSampleList","selectedMaster","onKeyPress","paremterResultcode","keyCode","i","form","elements","focus","preventDefault","onResultInputChange","ncalculatedresult","spredefinedname","ATTACHMENT","onSaveMean","resultParameter","selectedTestParameterMean","nroundingdigit","nuserrole","nusercode","isFileupload","onSaveClick","neditable","resultParameters","resultData","results","editable","sfinal","FIO","splittedFileName","split","fileExtension","uniquefilename","ssystemfilename","nfilesize","Object","loading","tests","ntype","nmethodcode","nsourcecode","ResultUsedInstrument","nresultusedinstrumentcode","dfromdate","dtodate","stzfromdate","ntzfromdate","label","stztodate","ntztodate","transactiontestcode","susedquantity","savailablequantity","ResultUsedMaterial","nresultusedmaterialcode","nmaterialtypecode","nmaterialcategorycode","nmaterialcode","ninventorycode","nmaterialinventorycode","nsectioncode","jsondata","sarno","ssamplearno","smaterialcatname","nmaterialcatcode","smaterialname","sinventoryid","nqtyused","scarriergas","smobilephase","sremarks","MaterialInventoryTrans","IDS_INVENTORYID","sanalysistime","smisctime","spreanalysistime","spreparationtime","scomments","ResultUsedTasks","nresultusedtaskcode","sanalyst","susername","info","sresultcomment","lstResultCheckList","editedQB","qbcode","ResultCheckList","createRef","settings","group","field","masterStatus","sampleListColumns","subSampleListColumns","testListColumns","TableExpandableItem","SingleItem","SampleGridItem","SampleGridExpandableItem","sampleListMainField","subSampleListMainField","testListMainField","testMoreField","showRETestList","componentDidMount","parentHeight","height","clientHeight","firstPane","getActiveTestURL","url","render","sampleListRE","subSampleListRE","RE_SUBSAMPLE","testListRE","startDate","endDate","subSampleGetREParam","testGetREParam","sampleSearchField","ROUTINE","filterSampleParam","inputListName","selectedObject","fetchUrl","childRefs","ref","childFilteredListName","fecthInputObject","searchFieldList","changeList","filterSubSampleParam","filterTestParam","filteredListName","clearFilter","searchRef","updatedListname","unchangeList","breadCrumbData","breadCrumbFrom","breadCrumbto","ssampletypename","sregtypename","sregsubtypename","sversionname","sfilterstatus","testStartId","resultEnterId","editSourceMethodId","addResultUsedInstrumentId","addResultUsedMaterailId","mandatoryFieldsInstrument","mandatoryFieldsTask","mandatoryFieldsTestMethodSource","mandatoryFieldsParameter","reportPreviewId","searchedSample","DynamicSampleColumns","sampleMoreField","openFilter","selectedFilter","SampleType","REFilterStatus","ApprovalConfigVersion","REJobStatus","Testvalues","PLASMA_POOL","title","controlname","objectName","hidden","indexOf","onClick","display","background","borderBottom","searchedSubSample","DynamicSubSampleColumns","subSampleMoreField","float","searchedTest","setting","ALL","dataplace","marginTop","gridfillingColumn","DynamicGridItem","DynamicGridMoreField","PredefinedValues","GradeValues","selectedNumericData","handleClose","onDropTestFile","MethodData","SourceData","InstrumentCategory","timeZoneList","materialType","materialCat","material","materialInventory","DynamicFormulaFields","ChecklistData","needSaveButton","temparray","option","LABEL","slanguagetypecode","constructDesign","list","newList","componentDidUpdate","previousProps","DynamicTestColumns","bool","DynamicDesign","dynamicColumn","parse","samplelistitem","subsamplelistitem","testlistitem","samplegriditem","samplegridmoreitem","sampledisplayfields","testlistmoreitem","dataSate","selectFilterStatus","PARTIAL","scolorhexcode","selectedFilters","selectedFiltersNew","findIndex","componentWillUnmount","getDerivedStateFromProps","errorCode","mapStatetoProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,aAAjB,EAAgCC,aAAhC,EAA+CC,KAA/C,EAAsDC,aAAtD,EAAqEC,YAArE,EAAmFC,MAAnF,QAAiG,mCAAjG;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,MAA9B,QAA4C,iBAA5C;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,WAAT,QAA4B,sCAA5B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SACIC,UADJ,EACgBC,WADhB,EAC6BC,oBAD7B,EACmDC,eADnD,EACoEC,uBADpE,EAC6FC,eAD7F,EAC6GC,mBAD7G,EAEIC,YAFJ,EAEkBC,oBAFlB,EAEwCC,eAFxC,EAEyDC,aAFzD,EAEwEC,sBAFxE,EAEgGC,qBAFhG,EAEuHC,gBAFvH,EAGIC,eAHJ,EAGqBC,eAHrB,EAGsCC,eAHtC,EAGuDC,eAHvD,EAGwEC,WAHxE,EAGqFC,UAHrF,EAGiGC,qBAHjG,EAGwHC,wBAHxH,EAIIC,0BAJJ,EAIgCC,qBAJhC,EAIuDC,gBAJvD,EAIyEC,iBAJzE,EAI4FC,mBAJ5F,EAIiHC,cAJjH,EAKIC,cALJ,EAKoBC,+BALpB,EAKqDC,kBALrD,EAKyEC,gBALzE,EAK2FC,gBAL3F,EAK6GC,sBAL7G,EAKqIC,gBALrI,EAMIC,qBANJ,EAM2BC,uBAN3B,EAMoDC,yBANpD,EAM+EC,uBAN/E,EAMwGC,2BANxG,EAMqIC,uBANrI,EAM8JC,gCAN9J,EAOIC,mBAPJ,EAOyBC,+BAPzB,EAO0DC,4BAP1D,QAQO,eARP;AASA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,aAAhC,EAA+CC,wBAA/C,EAAyEC,eAAzE,EAA0FC,oBAA1F,EAAgHC,SAAhH,EAA2HC,mBAA3H,EAAgJC,wBAAhJ,QAAgL,+BAAhL;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,iBAA/B,EAAkDC,gBAAlD,EAAoEC,mBAApE,EAAyFC,gBAAzF,EAA2GC,gBAA3G,QAAmI,8BAAnI;AACA,OAAOC,yBAAP,MAAsC,4CAAtC;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,OAAOC,UAAP,MAAuB,oDAAvB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,OAAOC,aAAP,MAA0B,gDAA1B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,yBAAP,MAAsC,6BAAtC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,qBAAP,MAAkC,mCAAlC;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,2BAAP,MAAwC,+BAAxC;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,SAASC,qBAAT,QAAsC,yCAAtC;AACA,SAASC,gBAAT,EAA2BC,YAA3B,QAA+C,yBAA/C;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,qBAAP,MAAkC,mCAAlC;AACA,OAAOC,sBAAP,MAAmC,oCAAnC;AACA,OAAOC,WAAP,MAAwB,gDAAxB;AACA,OAAOC,QAAP,MAAqB,0CAArB;AACA,SAASC,sBAAT,EAAiCC,oBAAjC,QAA6D,wDAA7D;AACA,SAASC,kBAAT,QAAmC,kDAAnC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,0BAAT,EAAqCC,wBAArC,EAA+DC,mBAA/D,QAA0F,+BAA1F,C,CACA;;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,uBAAP,MAAoC,2BAApC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,WAAN,SAA0BzH,SAA1B,CAAoC;AAChC0H,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAiDnBC,cAjDmB,GAiDDC,CAAD,IAAO;AACpB,WAAKC,QAAL,CAAc;AACVC,QAAAA,0BAA0B,EAAEF;AADlB,OAAd;AAGH,KArDkB;;AAAA,SAsDnB3E,gBAtDmB,GAsDA,CAAC8E,KAAD,EAAQC,IAAR,EAAcC,SAAd,KAA4B;AAC3C,UAAIC,cAAc,GAAG,KAAKR,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BC,kBAAjD;AACAH,MAAAA,cAAc,CAACD,SAAD,CAAd,GAA4B1D,wBAAwB,CAAC2D,cAAc,CAACD,SAAD,CAAf,EAA4BD,IAA5B,CAApD;AACA,YAAMM,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAElD,cADK;AAEfmD,QAAAA,IAAI,EAAE;AAAEJ,UAAAA,UAAU,EAAE,EAAE,GAAG,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAAtB;AAAkCC,YAAAA,kBAAkB,EAAEH;AAAtD;AAAd;AAFS,OAAnB;AAIA,WAAKR,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB;AAEH,KA/DkB;;AAAA,SAgEnBG,UAhEmB,GAgEN,MAAM;AACf,UAAIC,SAAS,GAAG,KAAKhB,KAAL,CAAWS,KAAX,CAAiBO,SAAjC;AACA,UAAIC,SAAS,GAAG,KAAKjB,KAAL,CAAWS,KAAX,CAAiBQ,SAAjC;AACA,UAAIC,iBAAiB,GAAG,KAAKlB,KAAL,CAAWS,KAAX,CAAiBS,iBAAzC;AACA,UAAIV,cAAc,GAAG,KAAKR,KAAL,CAAWS,KAAX,CAAiBD,cAAtC;AACA,UAAIW,UAAU,GAAG,KAAKnB,KAAL,CAAWS,KAAX,CAAiBU,UAAlC;AACA,UAAIC,SAAS,GAAG,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SAAjC;AACA,UAAIC,QAAQ,GAAG,KAAKrB,KAAL,CAAWS,KAAX,CAAiBY,QAAhC;AACA,UAAIT,UAAU,GAAG,EAAjB;;AACA,UAAIO,UAAU,KAAK,mBAAnB,EAAwC;AACpCA,QAAAA,UAAU,GAAG,iBAAb;AACAC,QAAAA,SAAS,GAAG,QAAZ;AACA,YAAIE,YAAY,GAAG,CAAC,KAAKtB,KAAL,CAAWS,KAAX,CAAiBa,YAArC;AACAV,QAAAA,UAAU,GAAG;AACTC,UAAAA,QAAQ,EAAElD,cADD;AAETmD,UAAAA,IAAI,EAAE;AAAEK,YAAAA,UAAF;AAAcC,YAAAA,SAAd;AAAyBE,YAAAA,YAAzB;AAAuCC,YAAAA,0BAA0B,EAAE;AAAnE;AAFG,SAAb;AAIH,OARD,MASK;AACD,YAAI,KAAKvB,KAAL,CAAWS,KAAX,CAAiBO,SAArB,EAAgC;AAC5B,cAAI,KAAKhB,KAAL,CAAWS,KAAX,CAAiBW,SAAjB,KAA+B,QAA/B,IACG,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SAAjB,KAA+B,UADlC,IAEG,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SAAjB,KAA+B,SAFlC,IAGG,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SAAjB,KAA+B,YAHlC,IAIG,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SAAjB,KAA+B,kBAJtC,EAI0D;AACtDJ,YAAAA,SAAS,GAAG,KAAZ;AACAC,YAAAA,SAAS,GAAG,KAAZ;AACAT,YAAAA,cAAc,GAAG,EAAjB;AACH,WARD,MASK,IAAI,KAAKR,KAAL,CAAWS,KAAX,CAAiBW,SAAjB,KAA+B,iBAAnC,EAAsD;AACvDJ,YAAAA,SAAS,GAAG,KAAZ;AACAC,YAAAA,SAAS,GAAG,KAAZ;AACH,WAHI,MAIA;AACDD,YAAAA,SAAS,GAAG,KAAZ;AACH;AACJ,SAjBD,MAiBO;AACHC,UAAAA,SAAS,GAAG,KAAZ;AACAC,UAAAA,iBAAiB,GAAG,KAApB;AACAV,UAAAA,cAAc,GAAG,EAAjB;AACAa,UAAAA,QAAQ,GAAG,KAAX;AACH;;AACDT,QAAAA,UAAU,GAAG;AACTC,UAAAA,QAAQ,EAAElD,cADD;AAETmD,UAAAA,IAAI,EAAE;AAAEG,YAAAA,SAAF;AAAaE,YAAAA,UAAb;AAAyBH,YAAAA,SAAzB;AAAoCR,YAAAA,cAApC;AAAoDU,YAAAA,iBAApD;AAAuEG,YAAAA;AAAvE;AAFG,SAAb;AAIH;;AACD,WAAKrB,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB;AACH,KAhHkB;;AAAA,SAiHnBY,mBAjHmB,GAiHG,CAACnB,KAAD,EAAQoB,SAAR,KAAsB;AACxC,UAAIpB,KAAK,KAAK,IAAd,EAAoB;AAChB,YAAIqB,SAAS,GAAG,EAAhB;;AAEA,YAAID,SAAS,KAAK,UAAlB,EAA8B;AAC1B,cAAIE,OAAO,GAAGnC,wBAAwB,CAACa,KAAD,EAAQ,KAAKL,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BkB,MAApC,EAA4C,KAAK5B,KAAL,CAAWS,KAAX,CAAiBoB,QAA7D,CAAtC;AACAH,UAAAA,SAAS,GAAG;AACRI,YAAAA,KAAK,EAAE,CADC;AAERC,YAAAA,QAAQ,EAAEJ,OAAO,CAACK,QAFV;AAEmB;AAC3BC,YAAAA,MAAM,EAAEN,OAAO,CAACC,MAHR;AAGe;AACvBM,YAAAA,eAAe,EAAEC,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0B,iBAA5B,CAA8CF,eAA/C,CAJjB;AAKRG,YAAAA,YAAY,EAAEF,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4B,uBAA5B,CAAoDD,YAArD,CALd;AAMRE,YAAAA,eAAe,EAAEJ,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B8B,0BAA5B,CAAuDD,eAAxD,CANjB;AAORE,YAAAA,UAAU,EAAEC,MAAM,CAAC,KAAK1C,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiC,mBAA5B,CAAgDC,kBAAjD,CAPV;AAQRJ,YAAAA,0BAA0B,EAAE,KAAKxC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B8B,0BARhD;AASRK,YAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QATnB;AAURnB,YAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC;AAVrB,WAAZ;AAYA,eAAKV,KAAL,CAAWlF,0BAAX,CAAsC4G,SAAtC;AACH;;AACD,YAAID,SAAS,KAAK,QAAlB,EAA4B;AAExB,cAAIE,OAAO,GAAGnC,wBAAwB,CAAC,KAAKQ,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BsB,QAA7B,EAAuC3B,KAAvC,EAA8C,KAAKL,KAAL,CAAWS,KAAX,CAAiBoB,QAA/D,CAAtC;AAEAH,UAAAA,SAAS,GAAG;AACRI,YAAAA,KAAK,EAAE,CADC;AAERC,YAAAA,QAAQ,EAAEJ,OAAO,CAACK,QAFV;AAEmB;AAC3BC,YAAAA,MAAM,EAAEN,OAAO,CAACC,MAHR;AAGe;AACvBM,YAAAA,eAAe,EAAEC,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0B,iBAA5B,CAA8CF,eAA/C,CAJjB;AAKRG,YAAAA,YAAY,EAAEF,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4B,uBAA5B,CAAoDD,YAArD,CALd;AAMRE,YAAAA,eAAe,EAAEJ,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B8B,0BAA5B,CAAuDD,eAAxD,CANjB;AAORE,YAAAA,UAAU,EAAEC,MAAM,CAAC,KAAK1C,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiC,mBAA5B,CAAgDC,kBAAjD,CAPV;AAQRJ,YAAAA,0BAA0B,EAAE,KAAKxC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B8B,0BARhD;AASRK,YAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QATnB;AAURnB,YAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC;AAVrB,WAAZ;AAYA,eAAKV,KAAL,CAAWlF,0BAAX,CAAsC4G,SAAtC;AACH,SApCe,CAsChB;AACA;;;AAEA,YAAID,SAAS,KAAK,iBAAlB,EAAqC;AAEjC,cAAIqB,GAAG,GAAGtD,wBAAwB,CAAE,KAAKuD,KAAL,CAAWvC,cAAX,IAA6B,KAAKuC,KAAL,CAAWvC,cAAX,CAA0B,UAA1B,CAA9B,IAAwE,KAAKR,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BsB,QAArG,EAC7B,KAAKe,KAAL,CAAWvC,cAAX,IAA6B,KAAKuC,KAAL,CAAWvC,cAAX,CAA0B,QAA1B,CAA9B,IAAsE,KAAKR,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BkB,MADpE,EAC4E,KAAK5B,KAAL,CAAWS,KAAX,CAAiBoB,QAD7F,CAAlC;AAGAH,UAAAA,SAAS,GAAG;AACRI,YAAAA,KAAK,EAAE,CADC;AAERI,YAAAA,eAAe,EAAEC,QAAQ,CAAC9B,KAAK,CAAC2C,KAAP,CAFjB;AAGRjB,YAAAA,QAAQ,EAAEe,GAAG,CAACd,QAHN;AAGe;AACvBC,YAAAA,MAAM,EAAEa,GAAG,CAAClB,MAJJ;AAIW;AACnBiB,YAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QALnB;AAMRO,YAAAA,iBAAiB,EAAE/B,KAAK,CAAC4C,IANjB;AAORvC,YAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC;AAPrB,WAAZ;AASA,eAAKV,KAAL,CAAWpF,qBAAX,CAAiC8G,SAAjC;AACH,SAfD,MAgBK,IAAID,SAAS,KAAK,cAAlB,EAAkC;AAEnC,cAAIqB,GAAG,GAAGtD,wBAAwB,CAAE,KAAKuD,KAAL,CAAWvC,cAAX,IAA6B,KAAKuC,KAAL,CAAWvC,cAAX,CAA0B,UAA1B,CAA9B,IAAwE,KAAKR,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BsB,QAArG,EAC7B,KAAKe,KAAL,CAAWvC,cAAX,IAA6B,KAAKuC,KAAL,CAAWvC,cAAX,CAA0B,QAA1B,CAA9B,IAAsE,KAAKR,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BkB,MADpE,EAC4E,KAAK5B,KAAL,CAAWS,KAAX,CAAiBoB,QAD7F,CAAlC;AAIAH,UAAAA,SAAS,GAAG;AACRI,YAAAA,KAAK,EAAE,CADC;AAERI,YAAAA,eAAe,EAAEC,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0B,iBAA5B,CAA8CF,eAA/C,CAFjB;AAGRH,YAAAA,QAAQ,EAAEe,GAAG,CAACd,QAHN;AAGe;AACvBC,YAAAA,MAAM,EAAEa,GAAG,CAAClB,MAJJ;AAIW;AACnBS,YAAAA,YAAY,EAAEF,QAAQ,CAAC9B,KAAK,CAAC2C,KAAP,CALd;AAMRH,YAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QANnB;AAORS,YAAAA,uBAAuB,EAAEjC,KAAK,CAAC4C,IAPvB;AAQRvC,YAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC;AARrB,WAAZ;AAUA,eAAKV,KAAL,CAAWnF,wBAAX,CAAoC6G,SAApC;AACH,SAjBI,MAkBA,IAAID,SAAS,KAAK,iBAAlB,EAAqC;AAEtC,cAAIqB,GAAG,GAAGtD,wBAAwB,CAAC,KAAKQ,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BsB,QAA7B,EAC9B,KAAKhC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BkB,MADE,EACM,KAAK5B,KAAL,CAAWS,KAAX,CAAiBoB,QADvB,CAAlC;AAGAH,UAAAA,SAAS,GAAG;AACRI,YAAAA,KAAK,EAAE,CADC;AAERC,YAAAA,QAAQ,EAAEe,GAAG,CAACd,QAFN;AAEe;AACvBC,YAAAA,MAAM,EAAEa,GAAG,CAAClB,MAHJ;AAGW;AACnBM,YAAAA,eAAe,EAAEC,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0B,iBAA5B,CAA8CF,eAA/C,CAJjB;AAKRG,YAAAA,YAAY,EAAEF,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4B,uBAA5B,CAAoDD,YAArD,CALd;AAMRE,YAAAA,eAAe,EAAElC,KAAK,CAAC2C,KANf;AAORH,YAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QAPnB;AAQRW,YAAAA,0BAA0B,EAAEnC,KAAK,CAAC4C,IAR1B;AASRvC,YAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC;AATrB,WAAZ;AAWA,eAAKV,KAAL,CAAWlF,0BAAX,CAAsC4G,SAAtC;AACH,SAjBI,MAkBA,IAAID,SAAS,KAAK,SAAlB,EAA6B;AAE9B,cAAIqB,GAAG,GAAGtD,wBAAwB,CAAC,KAAKQ,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BsB,QAA7B,EAC9B,KAAKhC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BkB,MADE,EACM,KAAK5B,KAAL,CAAWS,KAAX,CAAiBoB,QADvB,CAAlC;AAGAH,UAAAA,SAAS,GAAG;AACRI,YAAAA,KAAK,EAAE,CADC;AAERC,YAAAA,QAAQ,EAAEe,GAAG,CAACd,QAFN;AAEe;AACvBC,YAAAA,MAAM,EAAEa,GAAG,CAAClB,MAHJ;AAGW;AACnBM,YAAAA,eAAe,EAAEC,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0B,iBAA5B,CAA8CF,eAA/C,CAJjB;AAKRG,YAAAA,YAAY,EAAEF,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4B,uBAA5B,CAAoDD,YAArD,CALd;AAMRE,YAAAA,eAAe,EAAEJ,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B8B,0BAA5B,CAAuDD,eAAxD,CANjB;AAORW,YAAAA,oBAAoB,EAAE7C,KAAK,CAAC2C,KAPpB;AAQRH,YAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QARnB;AASRsB,YAAAA,4BAA4B,EAAE9C,KAAK,CAAC4C,IAT5B;AAURvC,YAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC;AAVrB,WAAZ;AAYA,eAAKV,KAAL,CAAW7E,cAAX,CAA0BuG,SAA1B;AACH,SAlBI,MAmBA,IAAID,SAAS,KAAK,WAAlB,EAA+B;AAEhC,cAAIqB,GAAG,GAAGtD,wBAAwB,CAAC,KAAKQ,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BsB,QAA7B,EAC9B,KAAKhC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BkB,MADE,EACM,KAAK5B,KAAL,CAAWS,KAAX,CAAiBoB,QADvB,CAAlC;AAGAH,UAAAA,SAAS,GAAG;AACRI,YAAAA,KAAK,EAAE,CADC;AAERC,YAAAA,QAAQ,EAAEe,GAAG,CAACd,QAFN;AAEe;AACvBC,YAAAA,MAAM,EAAEa,GAAG,CAAClB,MAHJ;AAGW;AACnBM,YAAAA,eAAe,EAAEC,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0B,iBAA5B,CAA8CF,eAA/C,CAJjB;AAKRG,YAAAA,YAAY,EAAEF,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4B,uBAA5B,CAAoDD,YAArD,CALd;AAMRE,YAAAA,eAAe,EAAEJ,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B8B,0BAA5B,CAAuDD,eAAxD,CANjB;AAORW,YAAAA,oBAAoB,EAAEf,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByC,4BAA5B,CAAyDC,0BAA1D,CAPtB;AAQRC,YAAAA,cAAc,EAAEhD,KAAK,CAAC2C,KARd;AASRH,YAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QATnB;AAURyB,YAAAA,gBAAgB,EAAEjD,KAAK,CAAC4C,IAVhB;AAWRvC,YAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC;AAXrB,WAAZ;AAaA,eAAKV,KAAL,CAAW/E,iBAAX,CAA6ByG,SAA7B;AACH,SAnBI,MAoBA,IAAID,SAAS,KAAK,QAAlB,EAA4B;AAE7B,cAAIqB,GAAG,GAAGtD,wBAAwB,CAAC,KAAKQ,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BsB,QAA7B,EAC9B,KAAKhC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BkB,MADE,EACM,KAAK5B,KAAL,CAAWS,KAAX,CAAiBoB,QADvB,CAAlC;AAGAH,UAAAA,SAAS,GAAG;AACRI,YAAAA,KAAK,EAAE,CADC;AAERC,YAAAA,QAAQ,EAAEe,GAAG,CAACd,QAFN;AAEe;AACvBC,YAAAA,MAAM,EAAEa,GAAG,CAAClB,MAHJ;AAGW;AACnBM,YAAAA,eAAe,EAAEC,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0B,iBAA5B,CAA8CF,eAA/C,CAJjB;AAKRG,YAAAA,YAAY,EAAEF,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4B,uBAA5B,CAAoDD,YAArD,CALd;AAMRE,YAAAA,eAAe,EAAEJ,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B8B,0BAA5B,CAAuDD,eAAxD,CANjB;AAORW,YAAAA,oBAAoB,EAAEf,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByC,4BAA5B,CAAyDC,0BAA1D,CAPtB;AAQRC,YAAAA,cAAc,EAAE,CARR;AAQU;AAClBZ,YAAAA,UAAU,EAAEC,MAAM,CAACrC,KAAK,CAAC2C,KAAP,CATV;AAURH,YAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QAVnB;AAWRc,YAAAA,mBAAmB,EAAEtC,KAAK,CAAC4C,IAXnB;AAYRvC,YAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC;AAZrB,WAAZ;AAcA,eAAKV,KAAL,CAAW9E,mBAAX,CAA+BwG,SAA/B;AACH,SApBI,MAqBA,IAAID,SAAS,KAAK,MAAlB,EAA0B;AAE3B,cAAI8B,iBAAiB,GAAGlD,KAAK,CAAC4C,IAA9B;AACA,eAAKjD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6C,iBAA5B,GAAgDA,iBAAhD;AACA,gBAAM3C,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAElD,cADK;AAEfmD,YAAAA,IAAI,EAAE;AAAEJ,cAAAA,UAAU,EAAE,EAAE,GAAG,KAAKV,KAAL,CAAWS,KAAX,CAAiBC;AAAtB;AAAd;AAFS,WAAnB;AAIA,eAAKV,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB;AACH,SATI,MAUA,CAEJ;AACJ;AACJ,KAzRkB;;AAAA,SA0RnB4C,iBA1RmB,GA0RC,CAACC,IAAD,EAAOhC,SAAP,KAAqB;AACrC,YAAMiC,KAAK,GAAGhH,oBAAoB,CAACgG,MAAM,CAACe,IAAI,CAACE,QAAL,KAAkB,CAAnB,CAAP,CAAlC;AACA,YAAMC,GAAG,GAAGlH,oBAAoB,CAACgG,MAAM,CAACe,IAAI,CAACI,OAAL,EAAD,CAAP,CAAhC;;AACA,UAAIpC,SAAS,KAAK,UAAlB,EAA8B;AAC1BgC,QAAAA,IAAI,GAAGA,IAAI,CAACK,WAAL,KAAqB,GAArB,GAA2BJ,KAA3B,GAAmC,GAAnC,GAAyCE,GAAzC,GAA+C,WAAtD;AACH,OAFD,MAGK;AACDH,QAAAA,IAAI,GAAGA,IAAI,CAACK,WAAL,KAAqB,GAArB,GAA2BJ,KAA3B,GAAmC,GAAnC,GAAyCE,GAAzC,GAA+C,WAAtD;AACH;;AACD,aAAOH,IAAP;AACH,KApSkB;;AAAA,SAqSnBM,QArSmB,GAqSR,MAAM;AACb,UAAI;AAAEC,QAAAA,YAAF;AAAgBC,QAAAA,UAAhB;AAA4BC,QAAAA,mBAA5B;AAAiDC,QAAAA,gBAAjD;AAAmEC,QAAAA,mBAAnE;AAAwFC,QAAAA,wBAAxF;AACAC,QAAAA,qBADA;AACuBC,QAAAA;AADvB,UAC6C,KAAKvE,KAAL,CAAWS,KAAX,CAAiBC,UADlE,CADa,CAGb;;AACA,UAAIoC,GAAG,GAAGtD,wBAAwB,CAACwE,YAAD,EAAeC,UAAf,EAA2B,KAAKjE,KAAL,CAAWS,KAAX,CAAiBoB,QAA5C,CAAlC;AACA,UAAInB,UAAU,GAAG,EAAE,GAAG,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAAtB;AAAkCsD,QAAAA,YAAY,EAAElB,GAAG,CAACd,QAApD;AAA8DiC,QAAAA,UAAU,EAAEnB,GAAG,CAAClB,MAA9E;AAAsFsC,QAAAA,mBAAtF;AAA2GC,QAAAA,gBAA3G;AAA6HC,QAAAA,mBAA7H;AAAkJE,QAAAA,qBAAlJ;AAAyKD,QAAAA,wBAAzK;AAAmME,QAAAA;AAAnM,OAAjB;AACA,UAAI7C,SAAS,GAAG;AACZQ,QAAAA,eAAe,EAAGgC,mBAAmB,IAAIA,mBAAmB,CAAChC,eAA5C,IAAgE,CAAC,CADtE;AAEZG,QAAAA,YAAY,EAAG8B,gBAAgB,IAAIA,gBAAgB,CAAC9B,YAAtC,IAAuD,CAAC,CAF1D;AAGZE,QAAAA,eAAe,EAAG6B,mBAAmB,IAAIA,mBAAmB,CAAC7B,eAA5C,IAAgE,CAAC,CAHtE;AAIZW,QAAAA,oBAAoB,EAAGmB,wBAAwB,IAAIA,wBAAwB,CAACjB,0BAAtD,IAAqF,CAAC,CAJhG;AAKZX,QAAAA,UAAU,EAAEC,MAAM,CAAC4B,qBAAqB,GAAGA,qBAAqB,CAAC1B,kBAAzB,GAA8C,CAAC,CAArE,CALN;AAMZ4B,QAAAA,SAAS,EAAED,iBAAiB,GAAGA,iBAAiB,CAACC,SAArB,GAAiC,CAAC,CANlD;AAOZC,QAAAA,oBAAoB,EAAE,CAPV;AAQZpB,QAAAA,cAAc,EAAG,KAAKrD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4C,gBAA5B,IAAgD,KAAKtD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4C,gBAA5B,CAA6CD,cAA9F,IAAiH,CARrH;AASZtB,QAAAA,QAAQ,EAAEe,GAAG,CAACd,QATF;AAUZC,QAAAA,MAAM,EAAEa,GAAG,CAAClB,MAVA;AAWZiB,QAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QAXf;AAYZ6C,QAAAA,aAAa,EAAE,KAAK1E,KAAL,CAAWS,KAAX,CAAiBiE,aAAjB,IAAkC,aAZrC;AAaZC,QAAAA,QAAQ,EAAE,IAbE;AAcZC,QAAAA,UAAU,EAAE,KAdA;AAeZC,QAAAA,iBAAiB,EAAE,CAfP;AAgBZC,QAAAA,0BAA0B,EAAE,KAAK9E,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BoE;AAhB5C,OAAhB;AAkBA,YAAMC,aAAa,GAAG;AAClBrD,QAAAA,SADkB;AAElBhB,QAAAA,UAFkB;AAGlBsE,QAAAA,IAAI,EAAE;AAAEC,UAAAA,eAAe,EAAE,KAAKA,eAAxB;AAAyCC,UAAAA,kBAAkB,EAAE,KAAKA,kBAAlE;AAAsFC,UAAAA,aAAa,EAAE,KAAKA;AAA1G,SAHY;AAIlBC,QAAAA,eAAe,EAAE,KAAKrC,KAAL,CAAWqC,eAJV;AAKlBC,QAAAA,mBAAmB,EAAE,KAAKtC,KAAL,CAAWsC,mBALd;AAMlBC,QAAAA,iBAAiB,EAAE,KAAKvC,KAAL,CAAWuC,iBANZ;AAOlBC,QAAAA,aAAa,EAAE,KAAKxC,KAAL,CAAWwC,aAPR;AAQlBC,QAAAA,iBAAiB,EAAE,KAAKzC,KAAL,CAAWyC,iBARZ;AASlBC,QAAAA,qBAAqB,EAAE,KAAK1C,KAAL,CAAW0C,qBAThB;AAUlBC,QAAAA,oBAAoB,EAAE,KAAK3C,KAAL,CAAW2C,oBAVf;AAWlBC,QAAAA,gBAAgB,EAAE,KAAK5C,KAAL,CAAW4C;AAXX,OAAtB;;AAaA,UAAIjE,SAAS,CAACQ,eAAV,KAA8B,CAAC,CAA/B,IAAoCR,SAAS,CAACW,YAAV,KAA2B,CAAC,CAAhE,IAAqEX,SAAS,CAACa,eAAV,KAA8B,CAAC,CAApG,IAAyGb,SAAS,CAACwB,oBAAV,KAAmC,CAAC,CAA7I,IACGxB,SAAS,CAACe,UAAV,KAAyB,CAAC,CAD7B,IACkCf,SAAS,CAAC2B,cAAV,KAA6B,CAAC,CADhE,IACqE3B,SAAS,CAAC8C,SAAV,KAAwB,CAAC,CADlG,EACqG;AACjG,aAAKxE,KAAL,CAAWjF,qBAAX,CAAiCgK,aAAjC;AACH,OAHD,MAIK;AACDhI,QAAAA,KAAK,CAAC6I,IAAN,CAAW,KAAK5F,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KAjVkB;;AAAA,SAkVnBC,gBAlVmB,GAkVC3F,KAAD,IAAW;AAC1B;AACA;AACA,UAAI2D,YAAY,GAAGvE,mBAAmB,CAAC,KAAKO,KAAL,CAAWS,KAAX,CAAiBoB,QAAlB,EAA4B,KAAK7B,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BsB,QAAxD,CAAtC;AACA,UAAIiC,UAAU,GAAGxE,mBAAmB,CAAC,KAAKO,KAAL,CAAWS,KAAX,CAAiBoB,QAAlB,EAA4B,KAAK7B,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BkB,MAAxD,CAApC;AACA,UAAIsC,mBAAmB,GAAG,KAAKlE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0B,iBAA5B,IAAiD,KAAKpC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0B,iBAAvG;AACA,UAAI+B,gBAAgB,GAAG,KAAKnE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4B,uBAA5B,IAAuD,KAAKtC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4B,uBAA1G;AACA,UAAI8B,mBAAmB,GAAG,KAAKpE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B8B,0BAA5B,IAA0D,KAAKxC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B8B,0BAAhH;AACA,UAAI6B,wBAAwB,GAAG,KAAKrE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByC,4BAA5B,IAA4D,KAAKnD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByC,4BAAvH;AACA,UAAImB,qBAAqB,GAAG,KAAKtE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiC,mBAA5B,IAAmD,KAAK3C,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiC,mBAA3G;AACA,UAAI4B,iBAAiB,GAAG,KAAKvE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6C,iBAA5B,IAAiD,KAAKvD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6C,iBAArG,CAV0B,CAY1B;;AACA,UAAIT,GAAG,GAAGtD,wBAAwB,CAACwE,YAAD,EAAeC,UAAf,EAA2B,KAAKjE,KAAL,CAAWS,KAAX,CAAiBoB,QAA5C,CAAlC;AACA,UAAInB,UAAU,GAAG,EAAE,GAAG,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAAtB;AAAkCsD,QAAAA,YAAY,EAAElB,GAAG,CAACd,QAApD;AAA8DiC,QAAAA,UAAU,EAAEnB,GAAG,CAAClB,MAA9E;AAAsFsC,QAAAA,mBAAtF;AAA2GC,QAAAA,gBAA3G;AAA6HC,QAAAA,mBAA7H;AAAkJE,QAAAA,qBAAlJ;AAAyKD,QAAAA,wBAAzK;AAAmME,QAAAA;AAAnM,OAAjB;AACA,UAAI7C,SAAS,GAAG;AACZQ,QAAAA,eAAe,EAAG,KAAKlC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0B,iBAA5B,IAAiD,KAAKpC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0B,iBAA5B,CAA8CF,eAAhG,IAAoH,CAAC,CAD1H;AAEZG,QAAAA,YAAY,EAAG,KAAKrC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4B,uBAA5B,IAAuD,KAAKtC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4B,uBAA5B,CAAoDD,YAA5G,IAA6H,CAAC,CAFhI;AAGZE,QAAAA,eAAe,EAAG,KAAKvC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B8B,0BAA5B,IAA0D,KAAKxC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B8B,0BAA5B,CAAuDD,eAAlH,IAAsI,CAAC,CAH5I;AAIZW,QAAAA,oBAAoB,EAAG,KAAKlD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByC,4BAA5B,IAA4D,KAAKnD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByC,4BAA5B,CAAyDC,0BAAtH,IAAqJ,CAAC,CAJhK;AAKZX,QAAAA,UAAU,EAAEC,MAAM,CAAC,KAAK1C,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiC,mBAA5B,GAAkD,KAAK3C,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiC,mBAA5B,CAAgDC,kBAAlG,GAAuH,CAAC,CAAzH,CALN;AAMZ4B,QAAAA,SAAS,EAAE,KAAKxE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6C,iBAA5B,GAAgD,KAAKvD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6C,iBAA5B,CAA8CiB,SAA9F,GAA0G,CAAC,CAN1G;AAOZC,QAAAA,oBAAoB,EAAE,CAPV;AAQZpB,QAAAA,cAAc,EAAG,KAAKrD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4C,gBAA5B,IAAgD,KAAKtD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4C,gBAA5B,CAA6CD,cAA9F,IAAiH,CARrH;AASZtB,QAAAA,QAAQ,EAAEe,GAAG,CAACd,QATF;AAUZC,QAAAA,MAAM,EAAEa,GAAG,CAAClB,MAVA;AAWZiB,QAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QAXf;AAYZ6C,QAAAA,aAAa,EAAE,KAAK1E,KAAL,CAAWS,KAAX,CAAiBiE,aAAjB,IAAkC,aAZrC;AAaZC,QAAAA,QAAQ,EAAE,IAbE;AAcZC,QAAAA,UAAU,EAAE,KAdA;AAeZqB,QAAAA,cAAc,EAAE,KAAKjG,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BuF,cAA5B,IAA8C,KAflD;AAgBZpB,QAAAA,iBAAiB,EAAE,CAhBP;AAiBZC,QAAAA,0BAA0B,EAAE,KAAK9E,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BoE;AAjB5C,OAAhB;AAmBA,YAAMC,aAAa,GAAG;AAClBrD,QAAAA,SADkB;AAElBhB,QAAAA,UAFkB;AAGlBsE,QAAAA,IAAI,EAAE;AAAEC,UAAAA,eAAe,EAAE,KAAKA,eAAxB;AAAyCC,UAAAA,kBAAkB,EAAE,KAAKA,kBAAlE;AAAsFC,UAAAA,aAAa,EAAE,KAAKA;AAA1G,SAHY;AAIlBC,QAAAA,eAAe,EAAE,KAAKrC,KAAL,CAAWqC,eAJV;AAKlBC,QAAAA,mBAAmB,EAAE,KAAKtC,KAAL,CAAWsC,mBALd;AAMlBC,QAAAA,iBAAiB,EAAE,KAAKvC,KAAL,CAAWuC,iBANZ;AAOlBC,QAAAA,aAAa,EAAE,KAAKxC,KAAL,CAAWwC,aAPR;AAQlBC,QAAAA,iBAAiB,EAAE,KAAKzC,KAAL,CAAWyC,iBARZ;AASlBC,QAAAA,qBAAqB,EAAE,KAAK1C,KAAL,CAAW0C,qBAThB;AAUlBC,QAAAA,oBAAoB,EAAE,KAAK3C,KAAL,CAAW2C,oBAVf;AAWlBC,QAAAA,gBAAgB,EAAE,KAAK5C,KAAL,CAAW4C;AAXX,OAAtB;;AAcA,UAAIjE,SAAS,CAACQ,eAAV,KAA8B,CAAC,CAA/B,IAAoCR,SAAS,CAACW,YAAV,KAA2B,CAAC,CAAhE,IAAqEX,SAAS,CAACa,eAAV,KAA8B,CAAC,CAApG,IAAyGb,SAAS,CAACwB,oBAAV,KAAmC,CAAC,CAA7I,IACGxB,SAAS,CAACe,UAAV,KAAyB,CAAC,CAD7B,IACkCf,SAAS,CAAC2B,cAAV,KAA6B,CAAC,CADhE,IACqE3B,SAAS,CAAC8C,SAAV,KAAwB0B,SADjG,EAC4G;AACxG,aAAKlG,KAAL,CAAWjF,qBAAX,CAAiCgK,aAAjC;AACH,OAHD,MAIK;AACDhI,QAAAA,KAAK,CAAC6I,IAAN,CAAW,KAAK5F,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KAzYkB;;AAAA,SA2ZnBI,yBA3ZmB,GA2ZS,CAACC,CAAD,EAAIC,GAAJ,KAAY,CAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KA3akB;;AAAA,SA6anBC,qBA7amB,GA6aK,CAACjG,KAAD,EAAQoB,SAAR,KAAsB;AAC1C,UAAIpB,KAAK,KAAK,IAAd,EAAoB;AAChB,YAAIkG,GAAG,GAAG,EAAV;AACA,YAAI7E,SAAS,GAAG,EAAhB;AACA6E,QAAAA,GAAG,GAAG,kDAAN;;AACA,YAAI9E,SAAS,KAAK,oBAAlB,EAAwC;AACpCC,UAAAA,SAAS,GAAG;AACRmB,YAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QADnB;AAERC,YAAAA,KAAK,EAAE,CAFC;AAGR0E,YAAAA,kBAAkB,EAAEnG,KAAK,CAAC2C,KAHlB;AAIRyD,YAAAA,oBAAoB,EAAEpG,KAAK,CAAC4C,IAAN,CAAWyD;AAJzB,WAAZ;AAMH;;AACD5J,QAAAA,KAAK,CAAC6J,IAAN,CAAWJ,GAAX,EAAgB7E,SAAhB,EACKkF,IADL,CACUC,QAAQ,IAAI;AACd,gBAAMC,aAAa,GAAGlK,mBAAmB,CAACiK,QAAQ,CAAC/F,IAAT,CAAciG,UAAd,IAA4B,EAA7B,EAAiC,iBAAjC,EACrC,eADqC,EACpBb,SADoB,EACTA,SADS,EACEA,SADF,CAAzC;AAEA,gBAAMc,iBAAiB,GAAGF,aAAa,CAACG,GAAd,CAAkB,YAAlB,CAA1B;AAEA,gBAAMrG,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAElD,cADK;AAEfmD,YAAAA,IAAI,EAAE;AACFJ,cAAAA,UAAU,EAAE,EAAE,GAAG,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAAtB;AAAkCqG,gBAAAA,UAAU,EAAEC;AAA9C,eADV;AAEFxG,cAAAA,cAAc,EAAE,EACZ,GAAG,KAAKR,KAAL,CAAWS,KAAX,CAAiBD,cADR;AAEZ,iBAACiB,SAAD,GAAapB,KAFD;AAGZ6G,gBAAAA,eAAe,EAAEJ,aAAa,CAACG,GAAd,CAAkB,cAAlB,IAAoCH,aAAa,CAACG,GAAd,CAAkB,cAAlB,CAApC,GAAwE;AAH7E;AAFd;AAFS,WAAnB;AAYA,eAAKjH,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB,EAjBc,CAmBd;AACA;AACA;AAEH,SAxBL,EAyBKuG,KAzBL,CAyBWC,KAAK,IAAI;AACZ,cAAIA,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/BtK,YAAAA,KAAK,CAACqK,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,WAFD,MAGK;AACDvK,YAAAA,KAAK,CAAC6I,IAAN,CAAWwB,KAAK,CAACP,QAAN,CAAe/F,IAA1B;AACH;AACJ,SAhCL;AAiCH;AACJ,KA5dkB;;AAAA,SA+dnByG,gBA/dmB,GA+dA,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,WAAKpH,QAAL,CAAc;AAAEyE,QAAAA,UAAU,EAAE,IAAd;AAAoBD,QAAAA,QAAQ,EAAE;AAA9B,OAAd;AACH,KA1ekB;;AAAA,SA4gBnB6C,eA5gBmB,GA4gBD,MAAM;AACpB,YAAMC,UAAU,GAAG,IAAIC,GAAJ,EAAnB,CADoB,CAEpB;;AACA,UAAIjD,oBAAoB,GAAG,KAAKzE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,GAA6C,KAAK3H,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,CAA2CC,GAA3C,CAA+CC,IAAI,IAAIA,IAAI,CAACpD,oBAA5D,EAAkFqD,IAAlF,CAAuF,GAAvF,CAA7C,GAA2I,IAAtK;AACA,UAAI;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAAyB,KAAKjF,KAAlC;AACA,UAAIkF,QAAQ,GAAG,KAAKjI,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwH,OAA5B,IAAuC,EAAtD;AACAD,MAAAA,QAAQ,GAAGA,QAAQ,CAACE,KAAT,CAAeJ,QAAf,EAAyBA,QAAQ,GAAGC,QAApC,CAAX;AAEA,YAAMI,aAAa,GAAG,KAAKrF,KAAL,CAAWsF,UAAX,CAAsBC,GAAtB,CAA0B,eAA1B,KAA8C,KAAKvF,KAAL,CAAWsF,UAAX,CAAsBpB,GAAtB,CAA0B,eAA1B,EAA2CsB,YAA/G;AAEA,UAAIC,gBAAgB,GAAGjJ,0BAA0B,CAAC0I,QAAD,EAAW,KAAKjI,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAAvC,EAAuD,sBAAvD,CAAjD;AACAF,MAAAA,UAAU,CAACgB,GAAX,CAAe,aAAf,eAA8B,oBAAC,qBAAD;AAC1B,QAAA,QAAQ,EAAE,KAAKzI,KAAL,CAAWS,KAAX,CAAiBoB,QADD;AAE1B,QAAA,UAAU,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBC,UAFH;AAG1B,QAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBiI,UAHH;AAI1B,QAAA,SAAS,EAAE,KAAK3F,KAAL,CAAWqC,eAJI;AAK1B,QAAA,eAAe,EAAE,KAAKuD,eALI;AAM1B,QAAA,WAAW,EAAE,KAAK3I,KAAL,CAAWzF,eANE;AAO1B,QAAA,UAAU,EAAE,KAAKwI,KAAL,CAAWsF,UAPG;AAQ1B,QAAA,cAAc,EAAE;AAAEO,UAAAA,eAAe,EAAE,wBAAnB;AAA6ClI,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAA1E;AAAsFmB,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB;AAAjH,SARU;AAS1B,QAAA,eAAe,EAAE,KAAKrH,eATI;AAU1B,QAAA,cAAc,EAAE;AAAEkG,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAA/B;AAA2CmB,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB;AAAtE,SAVU;AAW1B,QAAA,UAAU,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoI,UAAjB,IAA+B,IAXjB;AAY1B,QAAA,QAAQ,EAAE,KAAK7I,KAAL,CAAW5E,cAZK;AAa1B,QAAA,qBAAqB,EAAE,KAAK2H,KAAL,CAAW+F,qBAbR;AAc1B,QAAA,UAAU,EAAC,aAde;AAe1B,QAAA,oBAAoB,EAAE,KAAK9I,KAAL,CAAW7D,+BAfP;AAgB1B,QAAA,SAAS,EAAE;AAAE,sBAAY,KAAK6D,KAAL,CAAWS,KAAX,CAAiBoB,QAA/B;AAAyCkH,UAAAA,YAAY,EAAEX;AAAvD,SAhBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA9B;AAkBAX,MAAAA,UAAU,CAACgB,GAAX,CAAe,gBAAf,eAAiC,oBAAC,qBAAD;AAC7B,QAAA,QAAQ,EAAE,KAAKzI,KAAL,CAAWS,KAAX,CAAiBoB,QADE;AAE7B,QAAA,UAAU,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBC,UAFA;AAG7B,QAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBiI,UAHA;AAI7B,QAAA,SAAS,EAAE,sBAJkB;AAK7B,QAAA,UAAU,EAAE,KAAK3F,KAAL,CAAWsF,UALM;AAM7B,QAAA,WAAW,EAAE;AAAE3H,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAA/B;AAA2CmB,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB;AAAtE,SANgB;AAO7B,QAAA,SAAS,EAAE;AAAEnB,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAA/B;AAA2CmB,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB;AAAtE,SAPkB;AAQ7B,QAAA,SAAS,EAAE,KAAKkB,KAAL,CAAWsC,mBARO;AAS7B,QAAA,UAAU,EAAE,KAAKrF,KAAL,CAAWS,KAAX,CAAiBoI,UAAjB,IAA+B,IATd;AAU7B,QAAA,gBAAgB,EAAE,IAVW;AAW7B,QAAA,eAAe,EAAE,KAAKF,eAXO;AAY7B,QAAA,YAAY,EAAE,KAAKxO,sBAZU;AAa7B,QAAA,WAAW,EAAE,KAAKC,qBAbW;AAc7B,QAAA,qBAAqB,EAAE,KAAK2I,KAAL,CAAW+F,qBAdL;AAe7B,QAAA,UAAU,EAAC,gBAfkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAjC;AAiBArB,MAAAA,UAAU,CAACgB,GAAX,CAAe,cAAf,eAA+B,oBAAC,YAAD;AAC3B,QAAA,QAAQ,EAAE,KAAKzI,KAAL,CAAWS,KAAX,CAAiBoB,QADA;AAE3B,QAAA,UAAU,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBC,UAFF;AAG3B,QAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBiI,UAHF;AAI3B,QAAA,SAAS,EAAE,oBAJgB;AAK3B,QAAA,UAAU,EAAE,KAAK3F,KAAL,CAAWsF,UALI;AAM3B,QAAA,WAAW,EAAE;AAAE3H,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAA/B;AAA2CmB,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB;AAAtE,SANc;AAO3B,QAAA,SAAS,EAAE;AAAEnB,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAA/B;AAA2CmB,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB;AAAtE,SAPgB;AAQ3B,QAAA,SAAS,EAAE,KAAKkB,KAAL,CAAWuC,iBARK;AAS3B,QAAA,UAAU,EAAE,KAAKtF,KAAL,CAAWS,KAAX,CAAiBoI,UAAjB,IAA+B,IAThB;AAU3B,QAAA,gBAAgB,EAAE,IAVS;AAW3B,QAAA,eAAe,EAAE,KAAKF,eAXK;AAY3B,QAAA,YAAY,EAAE,KAAKK,oBAZQ;AAa3B,QAAA,WAAW,EAAE,KAAKhJ,KAAL,CAAWlG,mBAbG;AAc3B,QAAA,qBAAqB,EAAE,KAAKiJ,KAAL,CAAW+F,qBAdP;AAe3B,QAAA,UAAU,EAAC,cAfgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA/B;AAiBArB,MAAAA,UAAU,CAACgB,GAAX,CAAe,UAAf,eAA2B,oBAAC,kBAAD;AACvB,QAAA,QAAQ,EAAE,KAAKzI,KAAL,CAAWS,KAAX,CAAiBoB,QADJ;AAEvB,QAAA,UAAU,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBC,UAFN;AAGvB,QAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBiI,UAHN;AAIvB,QAAA,SAAS,EAAE,gBAJY;AAKvB,QAAA,kBAAkB,EAAE,KAAKO,kBALF;AAMvB,QAAA,UAAU,EAAE,KAAKlG,KAAL,CAAWsF,UANA;AAOvB,QAAA,WAAW,EAAE;AACT3H,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UADpB;AACgCmB,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB,QAD3D;AAET0G,UAAAA,YAAY,EAAE,KAAKxF,KAAL,CAAWsF,UAAX,CAAsBC,GAAtB,CAA0B,sBAA1B,KAAqD,KAAKvF,KAAL,CAAWsF,UAAX,CAAsBpB,GAAtB,CAA0B,sBAA1B,EAAkDsB;AAF5G,SAPU;AAWvB,QAAA,SAAS,EAAE;AACP7H,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UADtB;AACkCmB,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB,QAD7D;AAEP0G,UAAAA,YAAY,EAAE,KAAKxF,KAAL,CAAWsF,UAAX,CAAsBC,GAAtB,CAA0B,oBAA1B,KAAmD,KAAKvF,KAAL,CAAWsF,UAAX,CAAsBpB,GAAtB,CAA0B,oBAA1B,EAAgDsB;AAF1G,SAXY;AAevB,QAAA,SAAS,EAAE,KAAKxF,KAAL,CAAWwC,aAfC;AAgBvB,QAAA,UAAU,EAAE,KAAKvF,KAAL,CAAWS,KAAX,CAAiBoI,UAAjB,IAA+B,IAhBpB;AAiBvB,QAAA,gBAAgB,EAAE,IAjBK;AAkBvB,QAAA,eAAe,EAAE,KAAKF,eAlBC;AAmBvB,QAAA,YAAY,EAAE,KAAKtO,gBAnBI;AAoBvB,QAAA,WAAW,EAAE,KAAKC,eApBK;AAqBvB,QAAA,qBAAqB,EAAE,KAAKyI,KAAL,CAAW+F,qBArBX;AAsBvB,QAAA,UAAU,EAAC,UAtBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA3B;AAuBArB,MAAAA,UAAU,CAACgB,GAAX,CAAe,qBAAf,eAAsC,oBAAC,WAAD;AAClC,QAAA,UAAU,EAAC,qBADuB;AAElC,QAAA,cAAc,EAAC,gBAFmB;AAGlC,QAAA,WAAW,EAAE,KAAKS,qBAHgB;AAIlC,QAAA,UAAU,EAAE,KAAKnG,KAAL,CAAWsF,UAJW;AAKlC,QAAA,qBAAqB,EAAE,KAAKtF,KAAL,CAAW+F,qBALA;AAMlC,QAAA,UAAU,EAAEN,gBANsB;AAOlC,QAAA,iBAAiB,EAAE,gCAPe;AAQlC,QAAA,WAAW,EAAE,KAAKxI,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByI,0BAA5B,IAA0D,EARrC;AASlC,QAAA,YAAY,EAAE,KAAKnJ,KAAL,CAAWzE,gBATS;AAUlC,QAAA,WAAW,EAAE,KAAKyE,KAAL,CAAW1E,kBAVU;AAWlC,QAAA,OAAO,EAAE,mBAXyB;AAYlC,QAAA,QAAQ,EAAE,oBAZwB;AAalC,QAAA,UAAU,EAAE,sBAbsB;AAclC,QAAA,QAAQ,EAAE,oBAdwB;AAelC,QAAA,SAAS,EAAE,gBAfuB;AAgBlC,QAAA,cAAc,EAAE,KAAK0E,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BuF,cAhBV;AAiBlC,QAAA,SAAS,EAAE,CAAC;AAAE,WAAC3I,gBAAgB,CAAC8L,KAAlB,GAA0B;AAA5B,SAAD,EAA+C;AAAE,WAAC9L,gBAAgB,CAAC8L,KAAlB,GAA0B;AAA5B,SAA/C,CAjBuB;AAmBlC,QAAA,WAAW,EACP;AACIC,UAAAA,SAAS,EAAE,gBADf;AAEI5E,UAAAA,oBAFJ;AAGI5C,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB,QAH/B;AAIInB,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAJjC;AAKI4I,UAAAA,WAAW,EAAE,KAAKtJ,KAAL,CAAWS,KAAX,CAAiBqI,qBALlC;AAMI3H,UAAAA,UAAU,EAAE;AANhB,SApB8B;AA8BlC,QAAA,SAAS,EAAE;AACPkI,UAAAA,SAAS,EAAE,gBADJ;AAEP5E,UAAAA,oBAFO;AAGP5C,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB,QAHpB;AAIPnB,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAJtB;AAKP4I,UAAAA,WAAW,EAAE,KAAKtJ,KAAL,CAAWS,KAAX,CAAiBqI,qBALvB;AAMP3H,UAAAA,UAAU,EAAE,qBANL;AAOPoI,UAAAA,UAAU,EAAE,KAAKvJ,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH;AAPjC,SA9BuB;AAuClC,QAAA,gBAAgB,EAAC,WAvCiB;AAwClC,QAAA,WAAW,EAAC,cAxCsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAtC;AA0CAF,MAAAA,UAAU,CAACgB,GAAX,CAAe,kBAAf,eAAmC,oBAAC,QAAD;AAC/B,QAAA,UAAU,EAAC,kBADoB;AAE/B,QAAA,cAAc,EAAC,gBAFgB;AAG/B,QAAA,WAAW,EAAE,KAAKe,mBAHa;AAI/B,QAAA,UAAU,EAAE,KAAKzG,KAAL,CAAWsF,UAJQ;AAK/B,QAAA,qBAAqB,EAAE,KAAKtF,KAAL,CAAW+F,qBALH;AAM/B,QAAA,QAAQ,EAAE,KAAK9I,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B+I,uBAA5B,IAAuD,EANlC;AAO/B,QAAA,WAAW,EAAE,KAAKzJ,KAAL,CAAWxE,gBAPO;AAQ/B,QAAA,OAAO,EAAE,gBARsB;AAS/B,QAAA,QAAQ,EAAE,iBATqB;AAU/B,QAAA,UAAU,EAAE,mBAVmB;AAW/B,QAAA,SAAS,EAAE,aAXoB;AAY/B,QAAA,UAAU,EAAEgN,gBAZmB;AAa/B,QAAA,iBAAiB,EAAE,6BAbY;AAc/B,QAAA,eAAe,EAAE,kBAdc;AAe/B,QAAA,SAAS,EAAE,KAAKzF,KAAL,CAAW2C,oBAfS;AAgB/B,QAAA,eAAe,EAAE,KAAKiD,eAhBS;AAiB/B,QAAA,aAAa,EAAE,IAjBgB;AAkB/B,QAAA,WAAW,EACP;AACIU,UAAAA,SAAS,EAAE,aADf;AAEI5E,UAAAA,oBAFJ;AAGI5C,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB,QAH/B;AAIInB,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAJjC;AAKI4I,UAAAA,WAAW,EAAE,KAAKtJ,KAAL,CAAWS,KAAX,CAAiBqI,qBALlC;AAMI3H,UAAAA,UAAU,EAAE,kBANhB;AAOIoI,UAAAA,UAAU,EAAE,KAAKvJ,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAP5C;AAQIoB,UAAAA,YAAY,EAAE,KAAKhG,KAAL,CAAWsF,UAAX,CAAsBC,GAAtB,CAA0B,mBAA1B,KAAkD,KAAKvF,KAAL,CAAWsF,UAAX,CAAsBpB,GAAtB,CAA0B,mBAA1B,EAA+CsB;AARnH,SAnB2B;AA+B/B,QAAA,SAAS,EAAE;AACPc,UAAAA,SAAS,EAAE,aADJ;AAEP5E,UAAAA,oBAFO;AAGP5C,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB,QAHpB;AAIPnB,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAJtB;AAKP4I,UAAAA,WAAW,EAAE,KAAKtJ,KAAL,CAAWS,KAAX,CAAiBqI,qBALvB;AAMP3H,UAAAA,UAAU,EAAE,kBANL;AAOPC,UAAAA,SAAS,EAAE,QAPJ;AAQPmI,UAAAA,UAAU,EAAE,KAAKvJ,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cARjC;AASPoB,UAAAA,YAAY,EAAE,KAAKhG,KAAL,CAAWsF,UAAX,CAAsBC,GAAtB,CAA0B,iBAA1B,KAAgD,KAAKvF,KAAL,CAAWsF,UAAX,CAAsBpB,GAAtB,CAA0B,iBAA1B,EAA6CsB;AATpG,SA/BoB;AA2C/B,QAAA,gBAAgB,EAAC,WA3Cc;AA4C/B,QAAA,WAAW,EAAC,cA5CmB;AA6C/B,QAAA,UAAU,EAAE,KAAKvI,KAAL,CAAWS,KAAX,CAAiBoI,UAAjB,IAA+B,IA7CZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAnC;AA+CApB,MAAAA,UAAU,CAACgB,GAAX,CAAe,yBAAf,eAA0C,oBAAC,sBAAD;AACtC,QAAA,QAAQ,EAAE,KAAKzI,KAAL,CAAWS,KAAX,CAAiBoB,QADW;AAEtC,QAAA,2BAA2B,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BgJ,mBAA5B,IAAmD,EAF1C;AAGtC,QAAA,UAAU,EAAE,KAAK1J,KAAL,CAAWS,KAAX,CAAiBiI,UAHS;AAItC,QAAA,SAAS,EAAE,KAAK3F,KAAL,CAAW0C,qBAJgB;AAKtC,QAAA,eAAe,EAAE,KAAKkD,eALgB;AAMtC,QAAA,UAAU,EAAC,yBAN2B;AAOtC,QAAA,UAAU,EAAE,KAAK5F,KAAL,CAAWsF,UAPe;AAQtC,QAAA,qBAAqB,EAAE,KAAKtF,KAAL,CAAW+F,qBARI;AAStC,QAAA,UAAU,EAAE,IAT0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA1C;AAaA,aAAOrB,UAAP;AACH,KAzsBkB;;AAAA,SA2sBnBkC,qBA3sBmB,GA2sBMtJ,KAAD,IAAW;AAC/B,cAAQ,KAAKL,KAAL,CAAWS,KAAX,CAAiBmJ,eAAzB;AACI,aAAK,qBAAL;AACI,eAAKzJ,QAAL,CAAc;AACV0J,YAAAA,sBAAsB,EAAExJ,KAAK,CAACyJ;AADpB,WAAd;AAGA;;AACJ;AACI,eAAK3J,QAAL,CAAc;AACV4J,YAAAA,mBAAmB,EAAE1J,KAAK,CAACyJ;AADjB,WAAd;AAGA;AAVR;AAYH,KAxtBkB;;AAAA,SA0tBnBE,yBA1tBmB,GA0tBU3J,KAAD,IAAW;AACnC,WAAKF,QAAL,CAAc;AAAE4J,QAAAA,mBAAmB,EAAE1J,KAAK,CAACyJ;AAA7B,OAAd;AACH,KA5tBkB;;AAAA,SA8tBnBnB,eA9tBmB,GA8tBAtI,KAAD,IAAW;AACzB,cAAQ,KAAKL,KAAL,CAAWS,KAAX,CAAiBiE,aAAzB;AACI,aAAK,aAAL;AACI,eAAKvE,QAAL,CAAc;AACViF,YAAAA,eAAe,EAAE/E,KAAK,CAACyJ;AADb,WAAd;AAGA;;AACJ,aAAK,gBAAL;AACI,eAAK3J,QAAL,CAAc;AACVkF,YAAAA,mBAAmB,EAAEhF,KAAK,CAACyJ;AADjB,WAAd;AAGA;;AACJ,aAAK,cAAL;AACI,eAAK3J,QAAL,CAAc;AACVmF,YAAAA,iBAAiB,EAAEjF,KAAK,CAACyJ;AADf,WAAd;AAGA;;AACJ,aAAK,UAAL;AACI,eAAK3J,QAAL,CAAc;AACVoF,YAAAA,aAAa,EAAElF,KAAK,CAACyJ;AADX,WAAd;AAGA;;AACJ,aAAK,qBAAL;AACI,eAAK3J,QAAL,CAAc;AACVkF,YAAAA,mBAAmB,EAAEhF,KAAK,CAACyJ;AADjB,WAAd;AAGA;;AACJ,aAAK,kBAAL;AACI,eAAK3J,QAAL,CAAc;AACVuF,YAAAA,oBAAoB,EAAErF,KAAK,CAACyJ;AADlB,WAAd;AAGA;;AACJ,aAAK,eAAL;AACI,eAAK3J,QAAL,CAAc;AACVqF,YAAAA,iBAAiB,EAAEnF,KAAK,CAACyJ;AADf,WAAd;AAGA;;AACJ,aAAK,yBAAL;AACI,eAAK3J,QAAL,CAAc;AACVsF,YAAAA,qBAAqB,EAAEpF,KAAK,CAACyJ;AADnB,WAAd;AAGA;;AACJ;AACI,eAAK3J,QAAL,CAAc;AACViF,YAAAA,eAAe,EAAE/E,KAAK,CAACyJ;AADb,WAAd;AAGA;AA7CR;AA+CH,KA9wBkB;;AAAA,SA4yBnBG,eA5yBmB,GA4yBD,MAAM;AACpB,YAAMC,MAAM,GAAG,IAAIxC,GAAJ,EAAf;AAEA,UAAIyC,SAAS,GAAG,KAAKnK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,GAA+C,KAAKpK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,CAA6CxC,GAA7C,CAAiDyC,MAAM,IAAIA,MAAM,CAACF,SAAlE,EAA6ErC,IAA7E,CAAkF,GAAlF,CAA/C,GAAwI,IAAxJ,CAHoB,CAIpB;;AAEAoC,MAAAA,MAAM,CAACzB,GAAP,CAAW,uBAAX,eAAoC,oBAAC,WAAD;AAChC,QAAA,UAAU,EAAC,uBADqB;AAEhC,QAAA,cAAc,EAAC,kBAFiB;AAGhC,QAAA,WAAW,EAAE,KAAKS,qBAHc;AAIhC,QAAA,UAAU,EAAE,KAAKnG,KAAL,CAAWsF,UAJS;AAKhC,QAAA,qBAAqB,EAAE,KAAKtF,KAAL,CAAW+F,qBALF;AAMhC,QAAA,WAAW,EAAE,KAAK9I,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4J,sBAA5B,IAAsD,EANnC;AAOhC,QAAA,YAAY,EAAE,KAAKtK,KAAL,CAAWzE,gBAPO;AAQhC,QAAA,WAAW,EAAE,KAAKyE,KAAL,CAAW1E,kBARQ;AAShC,QAAA,UAAU,EAAE,KAAK0E,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBATR;AAUhC,QAAA,iBAAiB,EAAE,iCAVa;AAWhC,QAAA,OAAO,EAAE,qBAXuB;AAYhC,QAAA,QAAQ,EAAE,sBAZsB;AAahC,QAAA,UAAU,EAAE,wBAboB;AAchC,QAAA,QAAQ,EAAE,sBAdsB;AAehC,QAAA,SAAS,EAAE,kBAfqB;AAgBhC,QAAA,WAAW,EACP;AACIf,UAAAA,SAAS,EAAE,kBADf;AAEIc,UAAAA,SAFJ;AAGItI,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB,QAH/B;AAIInB,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAJjC;AAKI4I,UAAAA,WAAW,EAAE,KAAKtJ,KAAL,CAAWS,KAAX,CAAiBqI,qBALlC;AAMI3H,UAAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWS,KAAX,CAAiBU;AANjC,SAjB4B;AA2BhC,QAAA,SAAS,EAAE;AACPkI,UAAAA,SAAS,EAAE,kBADJ;AAEPc,UAAAA,SAFO;AAGPtI,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB,QAHpB;AAIPnB,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAJtB;AAKP4I,UAAAA,WAAW,EAAE,KAAKtJ,KAAL,CAAWS,KAAX,CAAiBqI;AALvB,SA3BqB;AAmChC,QAAA,gBAAgB,EAAC,YAnCe;AAoChC,QAAA,WAAW,EAAC,OApCoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAApC;AAuCAoB,MAAAA,MAAM,CAACzB,GAAP,CAAW,qBAAX,eAAkC,oBAAC,qBAAD;AAC9B,QAAA,QAAQ,EAAE,KAAKzI,KAAL,CAAWS,KAAX,CAAiBoB,QADG;AAE9B,QAAA,eAAe,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B3B,qBAFf;AAG9B,QAAA,UAAU,EAAE,KAAKiB,KAAL,CAAWS,KAAX,CAAiBiI,UAHC;AAI9B,QAAA,SAAS,EAAE,KAAK3F,KAAL,CAAW8G,sBAJQ;AAK9B,QAAA,eAAe,EAAE,KAAKF,qBALQ;AAM9B,QAAA,UAAU,EAAC,qBANmB;AAO9B,QAAA,UAAU,EAAE,KAAK5G,KAAL,CAAWsF,UAPO;AAQ9B,QAAA,qBAAqB,EAAE,KAAKtF,KAAL,CAAW+F,qBARJ;AAS9B,QAAA,UAAU,EAAE,IATkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAlC,EA7CoB,CAwDpB;AACA;AACA;AACA;;AACA,aAAOoB,MAAP;AACH,KAz2BkB;;AAAA,SA22BnBK,iBA32BmB,GA22BEC,QAAD,IAAc;AAC9B,UAAI,KAAKxK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,IAAgD,KAAKpK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,CAA6CK,MAA7C,GAAsD,CAA1G,EAA6G;AACzG,cAAMb,eAAe,GAAGY,QAAQ,CAACrJ,UAAjC;;AACA,YAAIyI,eAAe,KAAK,KAAK5J,KAAL,CAAWS,KAAX,CAAiBmJ,eAAzC,EAA0D;AACtD,cAAIlI,SAAS,GAAG;AACZhB,YAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UADjB;AAEZ+D,YAAAA,oBAAoB,EAAE,KAAKzE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,GAA6C,KAAK3H,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,CAA2CC,GAA3C,CAA+CC,IAAI,IAAIA,IAAI,CAACpD,oBAA5D,EAAkFqD,IAAlF,CAAuF,GAAvF,EAA4F4C,QAA5F,EAA7C,GAAsJ,EAFhK;AAGZP,YAAAA,SAAS,EAAE,KAAKnK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,GAA+C,KAAKpK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,CAA6CxC,GAA7C,CAAiD+C,QAAQ,IAAIA,QAAQ,CAACR,SAAtE,EAAiFrC,IAAjF,CAAsF,GAAtF,EAA2F4C,QAA3F,EAA/C,GAAuJ,EAHtJ;AAIZE,YAAAA,sBAAsB,EAAE,KAAK5K,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BmK,mBAA5B,GAAkD,KAAK7K,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BmK,mBAA5B,CAAgDjD,GAAhD,CAAoDkD,aAAa,IAAIA,aAAa,CAACF,sBAAnF,EAA2G9C,IAA3G,CAAgH,GAAhH,EAAqH4C,QAArH,EAAlD,GAAoL,EAJhM;AAKZN,YAAAA,gBAAgB,EAAE,KAAKpK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,GAA+C,KAAKpK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA3E,GAA8F,EALpG;AAMZvH,YAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QANf;AAOZ+H,YAAAA,eAAe,EAAEA,eAPL;AAQZzI,YAAAA,UAAU,EAAEyI;AARA,WAAhB;AAUA,eAAK5J,KAAL,CAAWnE,yBAAX,CAAqC6F,SAArC;AACH;AACJ,OAfD,MAgBK;AACD3E,QAAAA,KAAK,CAAC6I,IAAN,CAAW,KAAK5F,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KA/3BkB;;AAAA,SAi4BnBgF,eAj4BmB,GAi4BAP,QAAD,IAAc;AAC5B,YAAM9F,aAAa,GAAG8F,QAAQ,CAACrJ,UAA/B;;AACA,UAAIuD,aAAa,KAAK,KAAK1E,KAAL,CAAWS,KAAX,CAAiBiE,aAAvC,EAAsD;AAClD,YAAI,KAAK1E,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,IAA8C,KAAK3H,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,CAA2C8C,MAA3C,GAAoD,CAAtG,EAAyG;AACrG,cAAI/I,SAAS,GAAG;AACZhB,YAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UADjB;AAEZ+D,YAAAA,oBAAoB,EAAE,KAAKzE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,GAA6C,KAAK3H,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,CAA2CC,GAA3C,CAA+CC,IAAI,IAAIA,IAAI,CAACpD,oBAA5D,EAAkFqD,IAAlF,CAAuF,GAAvF,EAA4F4C,QAA5F,EAA7C,GAAsJ,EAFhK;AAGZP,YAAAA,SAAS,EAAE,KAAKnK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,GAA+C,KAAKpK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,CAA6CxC,GAA7C,CAAiD+C,QAAQ,IAAIA,QAAQ,CAACR,SAAtE,EAAiFrC,IAAjF,CAAsF,GAAtF,EAA2F4C,QAA3F,EAA/C,GAAuJ,EAHtJ;AAIZ/C,YAAAA,cAAc,EAAE,KAAK3H,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,GAA6C,KAAK3H,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAAzE,GAA0F,EAJ9F;AAKZ;AACA;AACA;AACA9E,YAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QARf;AASZ6C,YAAAA,aAAa,EAAEA,aATH;AAUZvD,YAAAA,UAAU,EAAEuD,aAVA;AAWZU,YAAAA,eAAe,EAAE,KAAKrC,KAAL,CAAWqC,eAXhB;AAYZC,YAAAA,mBAAmB,EAAE,KAAKtC,KAAL,CAAWsC,mBAZpB;AAaZC,YAAAA,iBAAiB,EAAE,KAAKvC,KAAL,CAAWuC,iBAblB;AAcZC,YAAAA,aAAa,EAAE,KAAKxC,KAAL,CAAWwC,aAdd;AAeZC,YAAAA,iBAAiB,EAAE,KAAKzC,KAAL,CAAWyC,iBAflB;AAgBZC,YAAAA,qBAAqB,EAAE,KAAK1C,KAAL,CAAW0C,qBAhBtB;AAiBZC,YAAAA,oBAAoB,EAAE,KAAK3C,KAAL,CAAW2C;AAjBrB,WAAhB;AAmBA,eAAK1F,KAAL,CAAWpG,uBAAX,CAAmC8H,SAAnC,EAA8C,IAA9C;AACH,SArBD,MAqBO;AACH3E,UAAAA,KAAK,CAAC6I,IAAN,CAAW,KAAK5F,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAAX;AACH;AACJ;AACJ,KA75BkB;;AAAA,SAi6BnB/L,oBAj6BmB,GAi6BK6N,IAAD,IAAU;AAC7B,WAAK7H,KAAL,CAAWhG,oBAAX,CAAgC6N,IAAhC;AACH,KAn6BkB;;AAAA,SAq6BnB5N,eAr6BmB,GAq6BA4N,IAAD,IAAU;AACxB,WAAK7H,KAAL,CAAW/F,eAAX,CAA2B4N,IAA3B;AACH,KAv6BkB;;AAAA,SAw6BnB1N,sBAx6BmB,GAw6BO0N,IAAD,IAAU;AAE/B,UAAIa,UAAU,GAAG;AACbhH,QAAAA,SAAS,EAAE,EAAE,GAAGmG,IAAL;AAAW,sBAAY,KAAK7H,KAAL,CAAWS,KAAX,CAAiBoB;AAAxC,SADE;AAEb;AACA;AACAT,QAAAA,SAAS,EAAE,kBAJE;AAKbD,QAAAA,UAAU,EAAE,wBALC;AAMb6J,QAAAA,WAAW,EAAE,KAAKhL,KAAL,CAAWS,KAAX,CAAiBiI,UAAjB,CAA4BsC,WAN5B,CAMwC;AACrD;;AAPa,OAAjB;;AAUA,UAAIrO,SAAS,CAAC,KAAKqD,KAAL,CAAWS,KAAX,CAAiBqI,qBAAlB,EAAyC,KAAK9I,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoJ,SAAnE,EAA8EpD,IAAI,CAACkB,YAAnF,CAAb,EAA+G;AAC3G,cAAMnI,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAElD,cADK;AAEfmD,UAAAA,IAAI,EAAE;AACFE,YAAAA,SAAS,EAAE,IADT;AAEFkK,YAAAA,UAAU,EAAE;AAAExC,cAAAA,UAAF;AAAchI,cAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC;AAA3C,aAFV;AAGFO,YAAAA,SAAS,EAAE,IAHT;AAIFE,YAAAA,UAAU,EAAE,wBAJV;AAKFC,YAAAA,SAAS,EAAE;AALT;AAFS,SAAnB;AAUA,aAAKpB,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB;AACH,OAZD,MAaK;AACD,aAAKZ,KAAL,CAAW7F,sBAAX,CAAkC0N,IAAlC;AACH;AAGJ,KAt8BkB;;AAAA,SAu8BnBzN,qBAv8BmB,GAu8BMyN,IAAD,IAAU;AAC9B,WAAK7H,KAAL,CAAW5F,qBAAX,CAAiCyN,IAAjC;AACH,KAz8BkB;;AAAA,SA28BnBxN,gBA38BmB,GA28BCwN,IAAD,IAAU;AACzB,UAAIa,UAAU,GAAG;AACbhH,QAAAA,SAAS,EAAE,EAAE,GAAGmG,IAAL;AAAW,sBAAY,KAAK7H,KAAL,CAAWS,KAAX,CAAiBoB;AAAxC,SADE;AAEb;AACA;AACAT,QAAAA,SAAS,EAAE,YAJE;AAKb4J,QAAAA,WAAW,EAAE,KAAKhL,KAAL,CAAWS,KAAX,CAAiBiI,UAAjB,CAA4BsC,WAL5B,CAKwC;AACrD;;AANa,OAAjB;;AASA,UAAIrO,SAAS,CAAC,KAAKqD,KAAL,CAAWS,KAAX,CAAiBqI,qBAAlB,EAAyC,KAAK9I,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoJ,SAAnE,EAA8EpD,IAAI,CAACkB,YAAnF,CAAb,EAA+G;AAC3G,cAAMnI,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAElD,cADK;AAEfmD,UAAAA,IAAI,EAAE;AACFE,YAAAA,SAAS,EAAE,IADT;AAEFkK,YAAAA,UAAU,EAAE;AAAExC,cAAAA,UAAF;AAAchI,cAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC;AAA3C,aAFV;AAGFO,YAAAA,SAAS,EAAE,IAHT;AAIFE,YAAAA,UAAU,EAAE,kBAJV;AAKFC,YAAAA,SAAS,EAAE;AALT;AAFS,SAAnB;AAUA,aAAKpB,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB;AACH,OAZD,MAaK;AACD,aAAKZ,KAAL,CAAW3F,gBAAX,CAA4BwN,IAA5B;AACH;AAEJ,KAt+BkB;;AAAA,SAu+BnBvN,eAv+BmB,GAu+BAuN,IAAD,IAAU;AACxB,WAAK7H,KAAL,CAAW1F,eAAX,CAA2BuN,IAA3B;AACH,KAz+BkB;;AAAA,SA0+BnBoB,kBA1+BmB,GA0+BGvH,SAAD,IAAe;AAChC,UAAIlB,cAAc,GAAG,EAArB;AACAA,MAAAA,cAAc,GAAG;AACb2J,QAAAA,SAAS,EAAEzI,SAAS,CAACyI,SADR;AAEb1F,QAAAA,oBAAoB,EAAE/C,SAAS,CAAC+C,oBAFnB;AAGb0G,QAAAA,YAAY,EAAEzJ,SAAS,CAACyJ;AAHX,OAAjB;AAKA,YAAMvK,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAElD,cADK;AAEfmD,QAAAA,IAAI,EAAE;AACFN,UAAAA,cAAc,EAAEA,cADd;AAEFY,UAAAA,SAAS,EAAE,QAFT;AAGFD,UAAAA,UAAU,EAAE,UAHV;AAIFF,UAAAA,SAAS,EAAE,IAJT;AAKFyD,UAAAA,aAAa,EAAE,UALb;AAMF6D,UAAAA,YAAY,EAAE7G,SAAS,CAAC0J,mBANtB;AAOFvC,UAAAA,UAAU,EAAE;AAPV;AAFS,OAAnB;AAYA,WAAK7I,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB;AAEH,KA//BkB;;AAAA,SAigCnBpG,eAjgCmB,GAigCA6Q,aAAD,IAAmB;AACjC,WAAKrL,KAAL,CAAWxF,eAAX,CAA2B6Q,aAA3B,EAA0C,KAAKrL,KAAL,CAAWS,KAAX,CAAiBoB,QAA3D;AACH,KAngCkB;;AAAA,SAogCnBlH,UApgCmB,GAogCN,CAAC0Q,aAAD,EAAgBxJ,QAAhB,EAA0BnB,UAA1B,EAAsC4K,KAAtC,EAA6CjL,KAA7C,KAAuD;AAChE,WAAKF,QAAL,CAAc;AACVoL,QAAAA,UAAU,EAAElL,KAAK,CAACmL;AADR,OAAd;AAGA,WAAKxL,KAAL,CAAWrF,UAAX,CAAsB0Q,aAAtB,EAAqCxJ,QAArC,EAA+CnB,UAA/C,EAA2D4K,KAA3D,EAAkE,KAAKvI,KAAL,CAAWvC,cAA7E;AACH,KAzgCkB;;AAAA,SA0gCnBxF,gBA1gCmB,GA0gCA,MAAM;AACrB,YAAMwF,cAAc,GAAG,KAAKuC,KAAL,CAAWvC,cAAX,IAA6B,EAApD;AACA,YAAMiL,qBAAqB,GAAGjL,cAAc,CAACiL,qBAAf,IAAwC,EAAtE;AACA,UAAIC,gBAAgB,GAAG,EAAvB;;AAEA,UAAID,qBAAJ,EAA2B;AACvBA,QAAAA,qBAAqB,CAAC7D,GAAtB,CAA0B+D,aAAa,IACnCD,gBAAgB,CAACE,IAAjB,CAAsBD,aAAtB,CADJ;AAGA,cAAMjK,SAAS,GAAG;AACdhB,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UADf;AAEdgL,UAAAA,gBAAgB,EAAEA,gBAFJ;AAGd7J,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB,QAHb;AAIdrB,UAAAA,cAAc,EAAEA,cAJF;AAKdqL,UAAAA,mBAAmB,EAAE,KAAK9I,KAAL,CAAWvC,cAAX,CAA0BqL,mBALjC;AAMdC,UAAAA,eAAe,EAAE,KAAK/I,KAAL,CAAWvC,cAAX,CAA0BsL,eAA1B,IAA6C;AANhD,SAAlB;AAQA,aAAK9L,KAAL,CAAWhF,gBAAX,CAA4B0G,SAA5B;AACH;AACJ,KA7hCkB;;AAAA,SAglCnBqK,YAhlCmB,GAglCJ,MAAM;AACjB,WAAK/L,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BC,kBAA5B,GAAiD,EAAjD;AACA,YAAMC,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAElD,cADK;AAEfmD,QAAAA,IAAI,EAAE;AACFM,UAAAA,SAAS,EAAE,QADT;AAEFD,UAAAA,UAAU,EAAE,sBAFV;AAGFF,UAAAA,SAAS,EAAE,IAHT;AAIFI,UAAAA,QAAQ,EAAE,IAJR;AAKFqD,UAAAA,aAAa,EAAE,aALb;AAMFhE,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC;AAN3B;AAFS,OAAnB;AAWA,WAAKV,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB;AACH,KA9lCkB;;AAAA,SAgmCnBoL,WAhmCmB,GAgmCL,MAAM;AAEhB,YAAMpL,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAElD,cADK;AAEfmD,QAAAA,IAAI,EAAE;AAAEmL,UAAAA,UAAU,EAAE;AAAd;AAFS,OAAnB;AAIA,WAAKjM,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB;AACH,KAvmCkB;;AAAA,SAymCnBsL,gBAzmCmB,GAymCA9F,CAAC,IAAI;AACpB,WAAKjG,QAAL,CAAc;AACVgM,QAAAA,IAAI,EAAE/F,CAAC,CAAC+F,IADE;AAEVC,QAAAA,IAAI,EAAEhG,CAAC,CAACgG;AAFE,OAAd;AAIAC,MAAAA,UAAU,CAAC,MAAM;AAAE,aAAKC,aAAL,CAAmBC,YAAnB;AAAmC,OAA5C,CAAV;AACH,KA/mCkB;;AAAA,SAgnCnBC,yBAhnCmB,GAgnCSpG,CAAC,IAAI;AAC7B,WAAKjG,QAAL,CAAc;AACVsM,QAAAA,aAAa,EAAErG,CAAC,CAAC+F,IADP;AAEVO,QAAAA,aAAa,EAAEtG,CAAC,CAACgG;AAFP,OAAd;AAIAC,MAAAA,UAAU,CAAC,MAAM;AAAE,aAAKC,aAAL,CAAmBC,YAAnB;AAAmC,OAA5C,CAAV;AACH,KAtnCkB;;AAAA,SAunCnBI,oBAvnCmB,GAunCIvG,CAAC,IAAI;AACxB,WAAKjG,QAAL,CAAc;AACV4H,QAAAA,QAAQ,EAAE3B,CAAC,CAAC+F,IADF;AAEVnE,QAAAA,QAAQ,EAAE5B,CAAC,CAACgG,IAFF;AAGVQ,QAAAA,mBAAmB,EAAExG,CAAC,CAACgG;AAHb,OAAd;AAKH,KA7nCkB;;AAAA,SA8nCnBS,sBA9nCmB,GA8nCOxG,GAAD,IAAS;AAC9B,WAAKlG,QAAL,CAAc;AACV2M,QAAAA,oBAAoB,EAAEzG,GAAG,GAAG;AADlB,OAAd;AAGH,KAloCkB;;AAAA,SA4mEnB0G,cA5mEmB,GA4mEF,CAACC,mBAAD,EAAsBrF,cAAtB,EAAsCyC,gBAAtC,EAAwD6C,YAAxD,EAAsElF,QAAtE,EAAgFC,QAAhF,KAA6F;AAC1G,YAAM3F,YAAY,GAAG,KAAKrC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,CAA6C9B,YAAlE;AACA,YAAME,eAAe,GAAG,KAAKvC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,CAAgD7B,eAAxE;AACA,UAAI2K,QAAQ,GAAG,CAAC,GAAG,KAAKlN,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwH,OAAhC,CAAf;AACAgF,MAAAA,QAAQ,GAAGA,QAAQ,CAACC,MAAT,CAAgBpF,QAAhB,EAA0BA,QAAQ,GAAGC,QAArC,CAAX;AACA,UAAIoF,cAAc,GAAG7N,0BAA0B,CAAC2N,QAAD,EAAW,KAAKlN,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAAvC,EAAuD,sBAAvD,CAA/C;;AACA,UAAIyF,cAAc,IAAIA,cAAc,CAAC3C,MAAf,GAAwB,CAA9C,EAAiD;AAC7C,YAAI/B,UAAU,GAAG;AACb2E,UAAAA,QAAQ,EAAE,qBADG;AAEbhE,UAAAA,SAAS,EAAE,cAFE;AAGb3H,UAAAA,SAAS,EAAE;AAAE,wBAAY,KAAK1B,KAAL,CAAWS,KAAX,CAAiBoB,QAA/B;AAAyC,4BAAgBQ,YAAzD;AAAuE,+BAAmBE,eAA1F;AAA2G,4BAAgB0K;AAA3H,WAHE;AAIb;AACA;AACA7L,UAAAA,SAAS,EAAE,SANE;AAOb4J,UAAAA,WAAW,EAAE,KAAKhL,KAAL,CAAWS,KAAX,CAAiBiI,UAAjB,CAA4BsC,WAP5B;AAOwC;AACrDgC,UAAAA,mBAAmB,EAAE,EAAE,GAAGA,mBAAL;AAA0BzE,YAAAA,YAAY,EAAE0E;AAAxC,WARR;AASbtF,UAAAA,cAAc,EAAEyF,cATH;AAUbhD,UAAAA,gBAAgB,EAAEA;AAVL,SAAjB;;AAaA,YAAIzN,SAAS,CAAC,KAAKqD,KAAL,CAAWS,KAAX,CAAiBqI,qBAAlB,EAAyC,KAAK9I,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoJ,SAAnE,EAA8EgC,YAA9E,CAAb,EAA0G;AACtG,gBAAMrM,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAElD,cADK;AAEfmD,YAAAA,IAAI,EAAE;AACFE,cAAAA,SAAS,EAAE,IADT;AAEFkK,cAAAA,UAAU,EAAE;AAAExC,gBAAAA,UAAF;AAAchI,gBAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC;AAA3C,eAFV;AAGFO,cAAAA,SAAS,EAAE,IAHT;AAIFE,cAAAA,UAAU,EAAE,eAJV;AAKFC,cAAAA,SAAS,EAAE;AALT;AAFS,WAAnB;AAUA,eAAKpB,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB;AACH,SAZD,MAaK;AACD,eAAKZ,KAAL,CAAWtF,WAAX,CAAuBgO,UAAU,CAACsE,mBAAlC,EAAuDI,cAAvD,EAAuEhD,gBAAvE,EAAyF/H,YAAzF,EAAuGE,eAAvG;AACH;AACJ,OA9BD,MA+BK;AACDxF,QAAAA,KAAK,CAAC6I,IAAN,CAAW,KAAK5F,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AAEJ,KArpEkB;;AAAA,SAupEnBuH,eAvpEmB,GAupED,CAACN,mBAAD,EAAsBrF,cAAtB,EAAsC9F,QAAtC,EAAgD0L,gBAAhD,EAAkExF,QAAlE,EAA4EC,QAA5E,KAAyF;AAEvG,UAAIkF,QAAQ,GAAG,CAAC,GAAG,KAAKlN,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwH,OAAhC,CAAf;AACAgF,MAAAA,QAAQ,GAAGA,QAAQ,CAACC,MAAT,CAAgBpF,QAAhB,EAA0BA,QAAQ,GAAGC,QAArC,CAAX;AACA,UAAIoF,cAAc,GAAG7N,0BAA0B,CAAC2N,QAAD,EAAW,KAAKlN,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAAvC,EAAuD,sBAAvD,CAA/C;;AAEA,UAAIyF,cAAc,IAAIA,cAAc,CAAC3C,MAAf,GAAwB,CAA9C,EAAiD;AAC7C,YAAI/B,UAAU,GAAG;AACb2E,UAAAA,QAAQ,EAAE,qBADG;AAEbhE,UAAAA,SAAS,EAAE,cAFE;AAGb3H,UAAAA,SAAS,EAAE;AAAE,wBAAY,KAAK1B,KAAL,CAAWS,KAAX,CAAiBoB,QAA/B;AAAyC,4BAAgB0L;AAAzD,WAHE;AAIb;AACA;AACAnM,UAAAA,SAAS,EAAE,UANE;AAOboM,UAAAA,aAAa,EAAE,KAAKA,aAPP;AAQbxC,UAAAA,WAAW,EAAE,KAAKhL,KAAL,CAAWS,KAAX,CAAiBiI,UAAjB,CAA4BsC,WAR5B;AAQwC;AACrDgC,UAAAA,mBAAmB,EAAEA,mBATR;AAUbrF,UAAAA,cAAc,EAAEyF,cAVH;AAWbjB,UAAAA,IAAI,EAAE,KAAKpJ,KAAL,CAAWoJ,IAXJ;AAYbC,UAAAA,IAAI,EAAE,KAAKrJ,KAAL,CAAWqJ,IAZJ;AAabrE,UAAAA,QAAQ,EAAE,KAAKhF,KAAL,CAAWgF,QAbR;AAcbC,UAAAA,QAAQ,EAAE,KAAKjF,KAAL,CAAWiF;AAdR,SAAjB;;AAiBA,YAAIrL,SAAS,CAAC,KAAKqD,KAAL,CAAWS,KAAX,CAAiBqI,qBAAlB,EAAyC,KAAK9I,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoJ,SAAnE,EAA8EsC,gBAA9E,CAAb,EAA8G;AAC1G,gBAAM3M,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAElD,cADK;AAEfmD,YAAAA,IAAI,EAAE;AACFE,cAAAA,SAAS,EAAE,IADT;AAEFkK,cAAAA,UAAU,EAAE;AAAExC,gBAAAA,UAAF;AAAchI,gBAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC;AAA3C,eAFV;AAGFO,cAAAA,SAAS,EAAE,IAHT;AAIFE,cAAAA,UAAU,EAAE,UAJV;AAKFC,cAAAA,SAAS,EAAE;AALT;AAFS,WAAnB;AAUA,eAAKpB,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB;AACH,SAZD,MAaK;AACD,eAAKZ,KAAL,CAAWjG,YAAX,CAAwB2O,UAAxB,EAAoC0E,cAApC,EAAoDvL,QAApD,EAA8D0L,gBAA9D;AACH;AACJ,OAlCD,MAmCK;AACDxQ,QAAAA,KAAK,CAAC6I,IAAN,CAAW,KAAK5F,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KAnsEkB;;AAAA,SAqsEnBtL,eArsEmB,GAqsED,CAAC+F,cAAD,EAAiBqB,QAAjB,EAA2BQ,YAA3B,EAAyCE,eAAzC,KAA6D;AAE3E,UAAI5F,SAAS,CAAC,KAAKqD,KAAL,CAAWS,KAAX,CAAiBqI,qBAAlB,EAAyC,KAAK9I,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoJ,SAAnE,EAA8E,KAAKjL,KAAL,CAAWS,KAAX,CAAiBsI,YAA/F,CAAb,EAA2H;AACvH,YAAIL,UAAU,GAAG;AACb,uBAAa;AAAE7F,YAAAA,QAAQ,EAAEhB;AAAZ;AADA,SAAjB;AAGA,cAAMjB,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAElD,cADK;AAEfmD,UAAAA,IAAI,EAAE;AACFE,YAAAA,SAAS,EAAE,IADT;AAEFkK,YAAAA,UAAU,EAAE;AAAE1K,cAAAA,cAAF;AAAkBqB,cAAAA,QAAlB;AAA4BQ,cAAAA,YAA5B;AAA0CE,cAAAA,eAA1C;AAA2DmG,cAAAA,UAA3D;AAAuEtH,cAAAA,SAAS,EAAE;AAAlF,aAFV;AAGFH,YAAAA,SAAS,EAAE,IAHT;AAIFG,YAAAA,SAAS,EAAE;AAJT;AAFS,SAAnB;AASA,aAAKpB,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB;AACH,OAdD,MAeK;AACD,aAAKZ,KAAL,CAAWvF,eAAX,CAA2B+F,cAA3B,EAA2CqB,QAA3C,EAAqDQ,YAArD,EAAmEE,eAAnE;AACH;AAEJ,KA1tEkB;;AAAA,SA4tEnBkL,aA5tEmB,GA4tEH,MAAM;AAClB,YAAM/E,UAAU,GAAG;AACfhH,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAK1B,KAAL,CAAWS,KAAX,CAAiBoB,QADZ;AAER6L,YAAAA,OAAO,EAAE,KAAK3K,KAAL,CAAWvC,cAAX,CAA0B,eAA1B;AAFD,WADL;AAKPmN,UAAAA,QAAQ,EAAE,KAAK5K,KAAL,CAAWvC,cAAX,CAA0B,eAA1B;AALH,SADI;AAQf0K,QAAAA,UAAU,EAAE,KAAKlL,KAAL,CAAWS,KAAX,CAAiByK;AARd,OAAnB;;AAUA,UAAI,KAAKlL,KAAL,CAAWS,KAAX,CAAiBW,SAAjB,KAA+B,UAA/B,IAA6C,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SAAjB,KAA+B,SAA5E,IAAyF,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SAAjB,KAA+B,iBAAxH,IACA,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SAAjB,KAA+B,kBAD/B,IACqD,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SAAjB,KAA+B,cADpF,IACsG,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SAAjB,KAA+B,YADrI,IACqJ,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SAAjB,KAA+B,yBADxL,EACmN;AAC/M,aAAKpB,KAAL,CAAW3E,+BAAX,CAA2CqN,UAA3C,EAAuD,WAAvD;AACH,OAHD,MAKK;AACD,aAAK1I,KAAL,CAAWpE,uBAAX,CAAmC8M,UAAnC,EAA+C,WAA/C;AACH;AACJ,KA/uEkB;;AAAA,SAivEnBkF,oBAjvEmB,GAivEKvN,KAAD,IAAW;AAE9B,YAAMG,cAAc,GAAG,KAAKuC,KAAL,CAAWvC,cAAX,IAA6B,EAApD;;AACA,UAAIH,KAAK,CAACwN,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClCtN,QAAAA,cAAc,CAACH,KAAK,CAACwN,MAAN,CAAaE,IAAd,CAAd,GAAoC1N,KAAK,CAACwN,MAAN,CAAaG,OAAb,KAAyB,IAAzB,GAAgC9Q,iBAAiB,CAAC+Q,GAAlD,GAAwD/Q,iBAAiB,CAACgR,EAA9G;AACH,OAFD,MAGK;AACD1N,QAAAA,cAAc,CAACH,KAAK,CAACwN,MAAN,CAAaE,IAAd,CAAd,GAAoC1N,KAAK,CAACwN,MAAN,CAAa7K,KAAjD;AACH;;AACD,WAAK7C,QAAL,CAAc;AAAEK,QAAAA;AAAF,OAAd;AAEH,KA5vEkB;;AAAA,SA6vEnB2N,eA7vEmB,GA6vEA9N,KAAD,IAAW;AAEzB,YAAMG,cAAc,GAAG,KAAKuC,KAAL,CAAWvC,cAAX,IAA6B,EAApD;;AACA,UAAIH,KAAK,CAACwN,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClCtN,QAAAA,cAAc,CAACH,KAAK,CAACwN,MAAN,CAAaE,IAAd,CAAd,GAAoC1N,KAAK,CAACwN,MAAN,CAAaG,OAAb,KAAyB,IAAzB,GAAgC9Q,iBAAiB,CAAC+Q,GAAlD,GAAwD/Q,iBAAiB,CAACgR,EAA9G;AACH,OAFD,MAGK;AACD1N,QAAAA,cAAc,CAACH,KAAK,CAACwN,MAAN,CAAaE,IAAd,CAAd,GAAoC1N,KAAK,CAACwN,MAAN,CAAa7K,KAAjD;AACH;;AACD,WAAK7C,QAAL,CAAc;AAAEK,QAAAA;AAAF,OAAd;AAEH,KAxwEkB;;AAAA,SAywEnB4N,eAzwEmB,GAywED,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACrC,YAAM3N,kBAAkB,GAAG,KAAKX,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BC,kBAAvD;AACA,YAAM4N,YAAY,GAAG5N,kBAAkB,GAAGA,kBAAkB,CAAC6N,SAAtB,GAAkC,EAAzE;AACA,YAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB,CAHqC,CAKrC;;AACA,UAAIH,YAAY,IAAIA,YAAY,CAAC9D,MAAb,GAAsB,CAA1C,EAA6C;AACzC8D,QAAAA,YAAY,CAACI,OAAb,CAAqB,CAACrO,IAAD,EAAOgL,KAAP,KAAiB;AAClCmD,UAAAA,QAAQ,CAACG,MAAT,CAAgB,iBAAiBtD,KAAjC,EAAwChL,IAAxC;AACH,SAFD;AAGAmO,QAAAA,QAAQ,CAACG,MAAT,CAAgB,WAAhB,EAA6BL,YAAY,CAAC9D,MAA1C;AACH,OALD,MAKO;AACH,eAAO1N,KAAK,CAAC6I,IAAN,CAAW,KAAK5F,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX,CAAP;AACH;;AAED0I,MAAAA,QAAQ,CAACG,MAAT,CAAgB,UAAhB,EAA4BC,IAAI,CAACC,SAAL,CAAe,KAAK9O,KAAL,CAAWS,KAAX,CAAiBoB,QAAhC,CAA5B;AACA4M,MAAAA,QAAQ,CAACG,MAAT,CAAgB,cAAhB,EAAgCC,IAAI,CAACC,SAAL,CAAe,KAAK9O,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,CAA6C9B,YAA5D,CAAhC;AACAoM,MAAAA,QAAQ,CAACG,MAAT,CAAgB,iBAAhB,EAAmCC,IAAI,CAACC,SAAL,CAAe,KAAK9O,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,CAAgD7B,eAA/D,CAAnC;AACAkM,MAAAA,QAAQ,CAACG,MAAT,CAAgB,sBAAhB,EAAwCC,IAAI,CAACC,SAAL,CAAe,KAAK9O,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,GAA6C,KAAK3H,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,CAA2CC,GAA3C,CAA+CmH,CAAC,IAAIA,CAAC,CAACtK,oBAAtD,EAA4EqD,IAA5E,CAAiF,GAAjF,CAA7C,GAAqI,IAApJ,CAAxC;AACA,WAAK9H,KAAL,CAAWtE,gBAAX,CAA4B+S,QAA5B,EAAsC,KAAKzO,KAAL,CAAWS,KAAX,CAAiBC,UAAvD;AACH,KA7xEkB;;AAAA,SA+xEnBsO,UA/xEmB,GA+xELT,YAAD,IAAkB;AAC3B;AACA;AACA,WAAKvO,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BC,kBAA5B,CAA+C,WAA/C,IAA8D4N,YAA9D;AAEA,YAAM3N,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAElD,cADK;AAEfmD,QAAAA,IAAI,EAAE;AAAEJ,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC;AAA/B;AAFS,OAAnB;AAIA,WAAKV,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB,EAT2B,CAU3B;AACH,KA1yEkB;;AAAA,SA4yEnBqO,oBA5yEmB,GA4yEI,CAAC5O,KAAD,EAAQiL,KAAR,EAAe4D,MAAf,KAA0B;AAC7C,UAAI1O,cAAc,GAAG,KAAKuC,KAAL,CAAWvC,cAAhC;AACA,UAAIiL,qBAAqB,GAAG,KAAK1I,KAAL,CAAWvC,cAAX,CAA0BiL,qBAA1B,IAAmD,EAA/E;AACA,UAAI0D,iBAAiB,GAAG,KAAKpM,KAAL,CAAWvC,cAAX,CAA0B2O,iBAA1B,IAA+C,EAAvE;AACA,UAAIC,oBAAoB,GAAG,EAA3B;;AAEA,UAAI/O,KAAJ,EAAW;AACP,YAAI6O,MAAM,CAACG,wBAAP,KAAoChS,gBAAgB,CAACiS,OAAzD,EAAkE;AAC9D,gBAAMtM,KAAK,GAAG3C,KAAK,CAACwN,MAAN,CAAa7K,KAAb,CAAmBuM,OAAnB,CAA2B,WAA3B,EAAwC,EAAxC,CAAd;;AACA,cAAI,WAAW1H,IAAX,CAAgB7E,KAAhB,KAA0BA,KAAK,KAAK,EAAxC,EAA4C;AACxC,gBAAI,KAAKD,KAAL,CAAWvC,cAAX,CAA0BgP,YAA9B,EAA4C;AACxCJ,cAAAA,oBAAoB,CAACK,OAArB,GAA+BzM,KAA/B;AACAoM,cAAAA,oBAAoB,CAACM,UAArB,GAAkCR,MAAM,CAACS,YAAzC;AACAlE,cAAAA,qBAAqB,CAACH,KAAD,CAArB,GAA+B8D,oBAA/B;AACAD,cAAAA,iBAAiB,CAAC7D,KAAD,CAAjB,GAA2BjL,KAAK,CAACwN,MAAN,CAAa7K,KAAxC;AACH;AACJ;;AACDxC,UAAAA,cAAc,CAAC,uBAAD,CAAd,GAA0CiL,qBAA1C;AACAjL,UAAAA,cAAc,CAAC,mBAAD,CAAd,GAAsC2O,iBAAtC;AAEA,eAAKhP,QAAL,CAAc;AAAEK,YAAAA,cAAc,EAAEA;AAAlB,WAAd;AACH,SAdD,MAcO;AACH,gBAAMwC,KAAK,GAAG3C,KAAK,CAACwN,MAAN,CAAa7K,KAAb,CAAmBuM,OAAnB,CAA2B,YAA3B,EAAyC,EAAzC,CAAd;;AACA,cAAI,kBAAkB1H,IAAlB,CAAuB7E,KAAvB,KAAiCA,KAAK,KAAK,EAA/C,EAAmD;AAC/C,gBAAI,KAAKD,KAAL,CAAWvC,cAAX,CAA0BgP,YAA9B,EAA4C;AACxCJ,cAAAA,oBAAoB,CAACK,OAArB,GAA+BzM,KAA/B;AACAoM,cAAAA,oBAAoB,CAACM,UAArB,GAAkCR,MAAM,CAACS,YAAzC;AACAlE,cAAAA,qBAAqB,CAACH,KAAD,CAArB,GAA+B8D,oBAA/B;AACAD,cAAAA,iBAAiB,CAAC7D,KAAD,CAAjB,GAA2BjL,KAAK,CAACwN,MAAN,CAAa7K,KAAxC;AACH;AACJ,WATE,CAUH;AACA;AACA;AAEA;;;AACAxC,UAAAA,cAAc,CAAC,uBAAD,CAAd,GAA0CiL,qBAA1C;AACAjL,UAAAA,cAAc,CAAC,mBAAD,CAAd,GAAsC2O,iBAAtC;AAEA,eAAKhP,QAAL,CAAc;AAAEK,YAAAA,cAAc,EAAEA;AAAlB,WAAd;AACH;AACJ;AACJ,KAt1EkB;;AAAA,SAw1EnBoP,qBAx1EmB,GAw1EK,CAACvP,KAAD,EAAQwP,OAAR,KAAoB;AACxC,UAAIrP,cAAc,GAAG9B,qBAAqB,CAAC,CAAD,EAAI,KAAKqE,KAAL,CAAWvC,cAAf,EAA+BH,KAA/B,EAAsCwP,OAAtC,CAA1C;AACA,WAAK1P,QAAL,CAAc;AAAEK,QAAAA;AAAF,OAAd,EAFwC,CAIxC;AACA;AACA;AACA;AACA;AACH,KAj2EkB;;AAAA,SAk2EnBsP,qBAl2EmB,GAk2EK,CAACC,SAAD,EAAYF,OAAZ,KAAwB;AAC5C,UAAIrP,cAAc,GAAG9B,qBAAqB,CAAC,CAAD,EAAI,KAAKqE,KAAL,CAAWvC,cAAf,EAA+BuP,SAA/B,EAA0CF,OAA1C,CAA1C;AACA,WAAK1P,QAAL,CAAc;AAAEK,QAAAA;AAAF,OAAd,EAF4C,CAG5C;AACA;AACA;AACA;AACA;AACH,KA12EkB;;AAAA,SA22EnBwP,oBA32EmB,GA22EI,CAACC,QAAD,EAAWJ,OAAX,KAAuB;AAC1C,UAAIrP,cAAc,GAAG9B,qBAAqB,CAAC,CAAD,EAAI,KAAKqE,KAAL,CAAWvC,cAAf,EAA+ByP,QAA/B,EAAyCJ,OAAzC,CAA1C,CAD0C,CAE1C;AACA;AACA;AACA;AACA;AACA;;AACA,WAAK1P,QAAL,CAAc;AAAEK,QAAAA;AAAF,OAAd;AACH,KAp3EkB;;AAAA,SAs3EnB0P,gBAt3EmB,GAs3EA,CAACC,QAAD,EAAWC,SAAX,KAAyB;AACxC,YAAM;AAAE5P,QAAAA;AAAF,UAAqB,KAAKuC,KAAhC;;AACA,UAAIqN,SAAS,KAAK,IAAlB,EAAwB;AACpBA,QAAAA,SAAS,GAAG,IAAIC,IAAJ,EAAZ;AACH;;AACD7P,MAAAA,cAAc,CAAC2P,QAAD,CAAd,GAA2BC,SAA3B;AACA,WAAKjQ,QAAL,CAAc;AAAEK,QAAAA;AAAF,OAAd;AACH,KA73EkB;;AAAA,SA+3EnB8P,aA/3EmB,GA+3EH,CAACC,IAAD,EAAOxC,IAAP,KAAgB;AAC5B,YAAMvN,cAAc,GAAG,KAAKuC,KAAL,CAAWvC,cAAX,IAA6B,EAApD;;AACA,UAAI+P,IAAJ,EAAU;AACN/P,QAAAA,cAAc,CAACuN,IAAD,CAAd,GAAuBwC,IAAI,CAAC1C,MAAL,CAAY7K,KAAnC,CADM,CAEN;AACH,OAHD,MAIK;AACDxC,QAAAA,cAAc,CAACuN,IAAD,CAAd,GAAuB,EAAvB,CADC,CAED;AACH;;AACD,WAAK5N,QAAL,CAAc;AAAEK,QAAAA;AAAF,OAAd,EAV4B,CAY5B;AACA;AACA;AACA;AACA;AACH,KAh5EkB;;AAAA,SAk5EnBgQ,eAl5EmB,GAk5ED,CAACC,WAAD,EAAcC,WAAd,KAA8B;AAC5C,YAAMlQ,cAAc,GAAG,KAAKuC,KAAL,CAAWvC,cAAX,IAA6B,EAApD;;AACA,UAAIiQ,WAAJ,EAAiB;AACb,YAAIC,WAAW,KAAK,WAApB,EAAiC;AAC7BlQ,UAAAA,cAAc,CAACkQ,WAAD,CAAd,GAA8BD,WAA9B,CAD6B,CAE7B;AACH,SAHD,MAGO;AACHjQ,UAAAA,cAAc,CAACkQ,WAAD,CAAd,GAA8BD,WAAW,CAAC5C,MAAZ,CAAmB7K,KAAjD,CADG,CAEH;AACH;AACJ,OARD,MASK;AACDxC,QAAAA,cAAc,CAACkQ,WAAD,CAAd,GAA8B,EAA9B,CADC,CAED;AACH;;AACD,WAAKvQ,QAAL,CAAc;AAAEK,QAAAA;AAAF,OAAd,EAf4C,CAiB5C;AACA;AACA;AACA;AACA;AACH,KAx6EkB;;AAAA,SA06EnBmQ,YA16EmB,GA06EJ,CAACR,QAAD,EAAWC,SAAX,KAAyB;AACpC,YAAM5P,cAAc,GAAG,KAAKuC,KAAL,CAAWvC,cAAX,IAA6B,EAApD;AACAA,MAAAA,cAAc,CAAC2P,QAAD,CAAd,GAA2BC,SAA3B;;AACA,UAAID,QAAQ,KAAK,WAAb,IAA4BA,QAAQ,KAAK,SAA7C,EAAwD;AACpD,aAAKhQ,QAAL,CAAc;AAAEK,UAAAA;AAAF,SAAd,EADoD,CAEpD;AACA;AACA;AACA;AACA;AACH;AAEJ,KAt7EkB;;AAAA,SAw7EnBoQ,qBAx7EmB,GAw7EMvQ,KAAD,IAAW;AAC/B,YAAM2N,OAAO,GAAG3N,KAAK,CAACwQ,cAAN,CAAqBhD,MAArB,CAA4BG,OAA5C;AACA,UAAI8C,qBAAqB,GAAG,KAAK/N,KAAL,CAAW+N,qBAAX,IAAoC,EAAhE;AACA,UAAIC,qBAAqB,GAAG,KAAKhO,KAAL,CAAWgO,qBAAX,IAAoC,IAAIrJ,GAAJ,EAAhE;;AACA,UAAIsG,OAAJ,EAAa;AACT,cAAMlN,IAAI,GAAGgQ,qBAAqB,CAAClJ,GAAtB,CAA0B3E,IAAI,IAAI;AAC3CA,UAAAA,IAAI,CAAC+N,QAAL,GAAgBhD,OAAhB;AACA+C,UAAAA,qBAAqB,CAACtI,GAAtB,CAA0BxF,IAAI,CAACgO,sBAA/B,EAAuDhO,IAAI,CAACiO,OAA5D;AACA,iBAAOjO,IAAP;AACH,SAJY,CAAb;AAMA,YAAIkO,iBAAiB,GAAG,EAAxB;AACA,YAAIC,qBAAqB,GAAG,CAA5B;AACA,YAAIC,IAAI,GAAG,CAAX;;AACA,YAAIN,qBAAqB,CAACM,IAAtB,GAA6B,CAAjC,EAAoC;AAChC,WAAC,GAAGN,qBAAqB,CAACO,MAAtB,EAAJ,EAAoC3C,OAApC,CAA4C1L,IAAI,IAC5CA,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,EAA1B,IACKkO,iBAAiB,GAAGA,iBAAiB,KAAK,EAAtB,GAA2BlO,IAA3B,GAAkCkO,iBAAiB,GAAG,GAApB,GAA0BlO,IAAhF,EACGoO,IAAI,GAAGA,IAAI,GAAG,CADjB,EAEGD,qBAAqB,GAAGjP,QAAQ,CAACiP,qBAAD,CAAR,GAAkCjP,QAAQ,CAACc,IAAD,CAH1E,IAGoF,EAJxF;AAMAmO,UAAAA,qBAAqB,GAAGA,qBAAqB,GAAGC,IAAhD;AACH;;AAED,aAAKlR,QAAL,CAAc;AACV2Q,UAAAA,qBAAqB,EAAEhQ,IADb;AACmBiQ,UAAAA,qBADnB;AAC0CI,UAAAA,iBAD1C;AAEVI,UAAAA,QAAQ,EAAEH,qBAFA;AAGVI,UAAAA,SAAS,EAAExD;AAHD,SAAd;AAKH,OAzBD,MA0BK;AACD,cAAMlN,IAAI,GAAGgQ,qBAAqB,CAAClJ,GAAtB,CAA0B3E,IAAI,IAAI;AAC3CA,UAAAA,IAAI,CAAC+N,QAAL,GAAgBhD,OAAhB;AACA,iBAAO/K,IAAP;AACH,SAHY,CAAb;AAKA,aAAK9C,QAAL,CAAc;AACV2Q,UAAAA,qBAAqB,EAAEhQ,IADb;AACmBiQ,UAAAA,qBAAqB,EAAE,IAAIrJ,GAAJ,EAD1C;AAEVyJ,UAAAA,iBAAiB,EAAE,EAFT;AAGVI,UAAAA,QAAQ,EAAE,EAHA;AAIVC,UAAAA,SAAS,EAAExD;AAJD,SAAd;AAMH;AACJ,KAn+EkB;;AAAA,SAq+EnByD,eAr+EmB,GAq+EApR,KAAD,IAAW;AACzB,UAAIyQ,qBAAqB,GAAG,KAAK/N,KAAL,CAAW+N,qBAAX,IAAoC,EAAhE;AACA,UAAIC,qBAAqB,GAAG,KAAKhO,KAAL,CAAWgO,qBAAX,IAAoC,IAAIrJ,GAAJ,EAAhE;AACAoJ,MAAAA,qBAAqB,CAAClJ,GAAtB,CAA0B3E,IAAI,IAAI;AAC9B,YAAIA,IAAI,CAACgO,sBAAL,KAAgC5Q,KAAK,CAACqR,QAAN,CAAeT,sBAAnD,EAA2E;AACvEhO,UAAAA,IAAI,CAAC+N,QAAL,GAAgB,CAAC3Q,KAAK,CAACqR,QAAN,CAAeV,QAAhC;AACH;;AACD,eAAO/N,IAAP;AACH,OALD;;AAMA,UAAI5C,KAAK,CAACqR,QAAN,CAAeV,QAAnB,EAA6B;AACzBD,QAAAA,qBAAqB,CAACtI,GAAtB,CAA0BpI,KAAK,CAACqR,QAAN,CAAeT,sBAAzC,EAAiE5Q,KAAK,CAACqR,QAAN,CAAeR,OAAhF;AACH,OAFD,MAGK;AACD,YAAIH,qBAAqB,CAACzI,GAAtB,CAA0BjI,KAAK,CAACqR,QAAN,CAAeT,sBAAzC,CAAJ,EAAsE;AAClEF,UAAAA,qBAAqB,CAACY,MAAtB,CAA6BtR,KAAK,CAACqR,QAAN,CAAeT,sBAA5C;AACH;AACJ;;AACD,UAAIE,iBAAiB,GAAG,EAAxB;AACA,UAAIC,qBAAqB,GAAG,CAA5B;AACA,UAAIC,IAAI,GAAG,CAAX;;AACA,UAAIN,qBAAqB,CAACM,IAAtB,GAA6B,CAAjC,EAAoC;AAChC,SAAC,GAAGN,qBAAqB,CAACO,MAAtB,EAAJ,EAAoC3C,OAApC,CAA4C1L,IAAI,IAC5CA,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,EAA1B,IACKkO,iBAAiB,GAAGA,iBAAiB,KAAK,EAAtB,GAA2BlO,IAA3B,GAAkCkO,iBAAiB,GAAG,GAApB,GAA0BlO,IAAhF,EACGoO,IAAI,GAAGA,IAAI,GAAG,CADjB,EAEGD,qBAAqB,GAAGjP,QAAQ,CAACiP,qBAAD,CAAR,GAAkCjP,QAAQ,CAACc,IAAD,CAH1E,IAGoF,EAJxF;AAMAmO,QAAAA,qBAAqB,GAAGA,qBAAqB,GAAGC,IAAhD;AACH;;AAED,WAAKlR,QAAL,CAAc;AACV2Q,QAAAA,qBADU;AACaC,QAAAA,qBADb;AACoCI,QAAAA,iBADpC;AACuDI,QAAAA,QAAQ,EAAEH,qBADjE;AAEVI,QAAAA,SAAS,EAAE,KAAKI,eAAL,CAAqBd,qBAArB;AAFD,OAAd;AAIH,KAvgFkB;;AAAA,SA6hFnBe,iBA7hFmB,GA6hFC,CAAC9B,SAAD,EAAY+B,SAAZ,KAA0B;AAC1C,YAAMf,qBAAqB,GAAG,KAAKhO,KAAL,CAAWgO,qBAAX,IAAoC,EAAlE;AACAA,MAAAA,qBAAqB,CAACe,SAAD,CAArB,GAAmC/B,SAAS,CAAC,CAAD,CAA5C;AACA,UAAIjP,IAAI,GAAG,EAAX;;AACA,UAAIiQ,qBAAqB,CAAC,gBAAD,CAArB,KAA4C7K,SAAhD,EAA2D;AACvDpF,QAAAA,IAAI,GAAGiP,SAAS,CAAC,CAAD,CAAT,CAAa/M,KAApB;AACH,OAFD,MAGK;AACDlC,QAAAA,IAAI,GAAGiQ,qBAAqB,CAAC,gBAAD,CAArB,GAA0C,GAA1C,GAAgDhB,SAAS,CAAC,CAAD,CAAT,CAAa/M,KAApE;AACH;;AACD+N,MAAAA,qBAAqB,CAAC,gBAAD,CAArB,GAA0CjQ,IAA1C;AACA,WAAKX,QAAL,CAAc;AAAE4Q,QAAAA;AAAF,OAAd;AACH,KAziFkB;;AAAA,SAgjFnBgB,qBAhjFmB,GAgjFK,CAAChC,SAAD,EAAY+B,SAAZ,KAA0B;AAC9C,YAAMtR,cAAc,GAAG,KAAKuC,KAAL,CAAWvC,cAAX,IAA6B,EAApD;;AACA,UAAIuP,SAAJ,EAAe;AACXvP,QAAAA,cAAc,CAACsR,SAAD,CAAd,GAA4B/B,SAA5B,CADW,CAEX;AACH,OAHD,MAGO;AACHvP,QAAAA,cAAc,CAACsR,SAAD,CAAd,GAA4B,EAA5B,CADG,CAEH;AACH;;AACD,cAAQA,SAAR;AACI,aAAK,mBAAL;AACI,eAAK9R,KAAL,CAAWjE,2BAAX,CAAuC;AAAEyE,YAAAA,cAAF;AAAkBqB,YAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB;AAA7C,WAAvC;AACA;;AACJ,aAAK,kBAAL;AACI,eAAK7B,KAAL,CAAWhE,uBAAX,CAAmC;AAAEwE,YAAAA,cAAF;AAAkBqB,YAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB;AAA7C,WAAnC;AACA;;AACJ,aAAK,eAAL;AACI,eAAK7B,KAAL,CAAW/D,gCAAX,CAA4C;AAAEuE,YAAAA,cAAF;AAAkBqB,YAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB;AAA7C,WAA5C;AACA;;AACJ;AACI,eAAK7B,KAAL,CAAW5D,4BAAX,CAAwC;AAAEoE,YAAAA,cAAF;AAAkBqB,YAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB;AAA7C,WAAxC;AACA;AAZR;AAeH,KAxkFkB;;AAAA,SAykFnBmQ,aAzkFmB,GAykFH,CAACjC,SAAD,EAAY+B,SAAZ,KAA0B;AACtC,YAAMtR,cAAc,GAAG,KAAKuC,KAAL,CAAWvC,cAAX,IAA6B,EAApD;;AACA,UAAIuP,SAAJ,EAAe;AACXvP,QAAAA,cAAc,CAACsR,SAAD,CAAd,GAA4B/B,SAA5B,CADW,CAEX;AACH,OAHD,MAGO;AACHvP,QAAAA,cAAc,CAACsR,SAAD,CAAd,GAA4B,EAA5B,CADG,CAEH;AACH;;AACD,WAAK3R,QAAL,CAAc;AAAEK,QAAAA;AAAF,OAAd,EATsC,CAWtC;AACA;AACA;AACA;AACA;AACH,KAzlFkB;;AAAA,SA2lFnByR,YA3lFmB,GA2lFJ,CAACnG,eAAD,EAAkBR,KAAlB,EAAyB4G,SAAzB,KAAuC;AAClD,UAAIpG,eAAe,CAACrB,MAAhB,GAAyB,CAAzB,IAA8BqB,eAAe,CAACR,KAAD,CAAf,KAA2BpF,SAAzD,IAAsE4F,eAAe,CAACR,KAAD,CAAf,CAAuB4F,OAAvB,KAAmC,IAA7G,EAAmH;AAC/G,YAAI1Q,cAAc,GAAG,KAAKuC,KAAL,CAAWvC,cAAX,IAA6B,EAAlD;AACA,YAAIqL,mBAAmB,GAAG,KAAK9I,KAAL,CAAWvC,cAAX,CAA0BqL,mBAA1B,IAAiD,EAA3E;;AACA,YAAIqG,SAAS,CAACC,kBAAV,KAAiCnV,aAAa,CAACoV,OAAnD,EAA4D;AACxDvG,UAAAA,mBAAmB,CAACP,KAAD,CAAnB,GAA6B;AACzB+G,YAAAA,UAAU,EAAEvG,eAAe,CAACR,KAAD,CAAf,CAAuB4F,OAAvB,KAAmC,EAAnC,GACRtS,YAAY,CAACsT,SAAD,EAAYvT,gBAAgB,CAAC2T,UAAU,CAACxG,eAAe,CAACR,KAAD,CAAf,CAAuB4F,OAAxB,CAAX,EAA6C/O,QAAQ,CAAC+P,SAAS,CAACK,eAAX,CAArD,CAA5B,CADJ,GACqH,CAAC;AAFzG,WAA7B;AAIH;;AACD,YAAIL,SAAS,CAACC,kBAAV,KAAiCnV,aAAa,CAACwV,UAAnD,EAA+D;AAC3D,cAAI1G,eAAe,CAACR,KAAD,CAAf,CAAuB4F,OAAvB,KAAmC,IAAvC,EAA6C;AACzCrF,YAAAA,mBAAmB,CAACP,KAAD,CAAnB,GAA6B;AAAE+G,cAAAA,UAAU,EAAEvG,eAAe,CAACR,KAAD,CAAf,CAAuB+G;AAArC,aAA7B;AACH,WAFD,MAGK;AACDxG,YAAAA,mBAAmB,CAACP,KAAD,CAAnB,GAA6B;AAAE+G,cAAAA,UAAU,EAAE;AAAd,aAA7B;AACH;AACJ;;AACD,YAAIH,SAAS,CAACC,kBAAV,KAAiCnV,aAAa,CAACyV,SAAnD,EAA8D;AAC1D,cAAI3G,eAAe,CAACR,KAAD,CAAf,CAAuB4F,OAAvB,KAAmC,IAAvC,EAA6C;AACzCrF,YAAAA,mBAAmB,CAACP,KAAD,CAAnB,GAA6B;AAAE+G,cAAAA,UAAU,EAAEvG,eAAe,CAACR,KAAD,CAAf,CAAuB+G;AAArC,aAA7B;AACH,WAFD,MAGK;AACDxG,YAAAA,mBAAmB,CAACP,KAAD,CAAnB,GAA6B;AAAE+G,cAAAA,UAAU,EAAE;AAAd,aAA7B;AACH;AACJ,SAxB8G,CAyB/G;;;AACA7R,QAAAA,cAAc,CAACqL,mBAAf,GAAqCA,mBAArC;AAEA,aAAK1L,QAAL,CAAc;AACVK,UAAAA;AADU,SAAd,EA5B+G,CAgC/G;AACA;AACA;AACA;AACA;AACH;AACJ,KAloFkB;;AAAA,SAooFnBgJ,mBApoFmB,GAooFG,CAAC6E,QAAD,EAAWC,OAAX,EAAoB9N,cAApB,KAAuC;AACzD,YAAME,UAAU,GAAG,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAApC;AACA,UAAIgB,SAAS,GAAG,EAAhB;AACA,UAAIgH,UAAU,GAAG,EAAjB;AACAhH,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAK1B,KAAL,CAAWS,KAAX,CAAiBoB,QAAzC;AACA,UAAI;AAAEkG,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAAyB,KAAKjF,KAAlC;AACA,UAAIkF,QAAQ,GAAG,CAAC,GAAG,KAAKjI,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwH,OAAhC,CAAf;AACAD,MAAAA,QAAQ,GAAGA,QAAQ,CAACE,KAAT,CAAeJ,QAAf,EAAyBA,QAAQ,GAAGC,QAApC,CAAX;AACA,UAAIQ,gBAAgB,GAAGjJ,0BAA0B,CAAC0I,QAAD,EAAW,KAAKjI,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAAvC,EAAuD,sBAAvD,CAAjD;;AACA,UAAI,KAAK3H,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,kBAApC,EAAwD;AACpD,YAAIuR,SAAS,GAAG;AACZ7Q,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB,QADf;AAEZ8Q,UAAAA,aAAa,EAAE,KAAK3S,KAAL,CAAW2S,aAFd;AAGZnS,UAAAA,cAHY;AAIZE,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAJjB;AAKZ2N,UAAAA,QALY;AAKFC,UAAAA,OALE;AAMZlN,UAAAA,SAAS,EAAE,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SANhB;AAOZqD,UAAAA,oBAAoB,EAAE,KAAKzE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,GAA6C,KAAK3H,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,CAA2CC,GAA3C,CAA+CmH,CAAC,IAAIA,CAAC,CAACtK,oBAAtD,EAA4EqD,IAA5E,CAAiF,GAAjF,CAA7C,GAAqI;AAP/I,SAAhB;AASAY,QAAAA,UAAU,GAAGrJ,kBAAkB,CAACqT,SAAD,EAAYlK,gBAAZ,CAA/B;AACH;;AACD,UAAI7L,SAAS,CAAC,KAAKqD,KAAL,CAAWS,KAAX,CAAiBqI,qBAAlB,EAAyC,KAAK9I,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoJ,SAAnE,EAA8E,KAAKjL,KAAL,CAAWS,KAAX,CAAiBsI,YAA/F,CAAb,EAA2H;AACvH,cAAMnI,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAElD,cADK;AAEfmD,UAAAA,IAAI,EAAE;AACFE,YAAAA,SAAS,EAAE,IADT;AAEFkK,YAAAA,UAAU,EAAE;AAAExC,cAAAA,UAAF;AAAchI,cAAAA;AAAd,aAFV;AAGFU,YAAAA,SAAS,EAAE,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SAH1B;AAIFD,YAAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWS,KAAX,CAAiBU;AAJ3B;AAFS,SAAnB;AASA,aAAKnB,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB;AACH,OAXD,MAYK;AACD,aAAKZ,KAAL,CAAWxG,UAAX,CAAsBkP,UAAtB,EAAkChI,UAAlC,EAA8C,kBAA9C;AACH;AACJ,KAxqFkB;;AAAA,SAyqFnBwI,qBAzqFmB,GAyqFK,CAACmF,QAAD,EAAWC,OAAX,EAAoB9N,cAApB,KAAuC;AAC3D,YAAME,UAAU,GAAG,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAApC;AACA,UAAIgB,SAAS,GAAG,EAAhB;AACA,UAAIgH,UAAU,GAAG,EAAjB;AACAhH,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAK1B,KAAL,CAAWS,KAAX,CAAiBoB,QAAzC;AACA,UAAI;AAAEkG,QAAAA,QAAF;AAAYC,QAAAA,QAAZ;AAAsBmE,QAAAA,IAAtB;AAA4BC,QAAAA;AAA5B,UAAqC,KAAKrJ,KAA9C;AACA,UAAIkF,QAAQ,GAAG,CAAC,GAAG,KAAKjI,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwH,OAAhC,CAAf;AACAD,MAAAA,QAAQ,GAAGA,QAAQ,CAACE,KAAT,CAAeJ,QAAf,EAAyBA,QAAQ,GAAGC,QAApC,CAAX;AACA,UAAIQ,gBAAgB,GAAGjJ,0BAA0B,CAAC0I,QAAD,EAAW,KAAKjI,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAAvC,EAAuD,sBAAvD,CAAjD;AACA,UAAIiL,UAAU,GAAG,CAAC,GAAG,KAAK5S,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BmS,SAAhC,CAAjB;AACAD,MAAAA,UAAU,GAAGA,UAAU,CAACzK,KAAX,CAAiBgE,IAAjB,EAAuBA,IAAI,GAAGC,IAA9B,CAAb;AACA,UAAI0G,kBAAkB,GAAGvT,0BAA0B,CAACqT,UAAD,EAAa,KAAK5S,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAAzC,EAA2D,WAA3D,CAAnD;;AACA,UAAI,KAAKpK,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,uBAApC,EAA6D;AACzD,YAAIuR,SAAS,GAAG;AACZ7Q,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB,QADf;AAEZrB,UAAAA,cAFY;AAGZE,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAHjB;AAIZ2N,UAAAA,QAJY;AAIFC,UAAAA,OAJE;AAKZlN,UAAAA,SAAS,EAAE,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SALhB;AAMZ2R,UAAAA,cAAc,EAAE,KAAK/S,KAAL,CAAW+S,cANf;AAOZ5I,UAAAA,SAAS,EAAE,KAAKnK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,GAA+C,KAAKpK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,CAA6CxC,GAA7C,CAAiDmH,CAAC,IAAIA,CAAC,CAAC5E,SAAxD,EAAmErC,IAAnE,CAAwE,GAAxE,CAA/C,GAA8H;AAP7H,SAAhB;AASAY,QAAAA,UAAU,GAAGvJ,sBAAsB,CAACuT,SAAD,EAAYI,kBAAZ,CAAnC;AACH,OAXD,MAWO,IAAI,KAAK9S,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,qBAApC,EAA2D;AAC9D,YAAIuR,SAAS,GAAG;AACZ7Q,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB,QADf;AAEZrB,UAAAA,cAFY;AAGZE,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAHjB;AAIZ2N,UAAAA,QAJY;AAIFC,UAAAA,OAJE;AAKZlN,UAAAA,SAAS,EAAE,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SALhB;AAMZqD,UAAAA,oBAAoB,EAAE,KAAKzE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,GAA6C,KAAK3H,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,CAA2CC,GAA3C,CAA+CmH,CAAC,IAAIA,CAAC,CAACtK,oBAAtD,EAA4EqD,IAA5E,CAAiF,GAAjF,CAA7C,GAAqI;AAN/I,SAAhB;AAQAY,QAAAA,UAAU,GAAGtJ,oBAAoB,CAACsT,SAAD,EAAYlK,gBAAZ,CAAjC;AACH;;AACD,UAAI7L,SAAS,CAAC,KAAKqD,KAAL,CAAWS,KAAX,CAAiBqI,qBAAlB,EAAyC,KAAK9I,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoJ,SAAnE,EAA8E,KAAKjL,KAAL,CAAWS,KAAX,CAAiBsI,YAA/F,CAAb,EAA2H;AACvH,cAAMnI,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAElD,cADK;AAEfmD,UAAAA,IAAI,EAAE;AACFE,YAAAA,SAAS,EAAE,IADT;AAEFkK,YAAAA,UAAU,EAAE;AAAExC,cAAAA,UAAF;AAAchI,cAAAA;AAAd,aAFV;AAGFU,YAAAA,SAAS,EAAE,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SAH1B;AAIFD,YAAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWS,KAAX,CAAiBU;AAJ3B;AAFS,SAAnB;AASA,aAAKnB,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB;AACH,OAXD,MAYK;AACD,aAAKZ,KAAL,CAAWxG,UAAX,CAAsBkP,UAAtB,EAAkChI,UAAlC,EAA8C,qBAA9C;AACH;AACJ,KA1tFkB;;AAAA,SA4tFnBsS,UA5tFmB,GA4tFN,CAAC3S,KAAD,EAAQiL,KAAR,EAAe2H,kBAAf,KAAsC;AAC/C,UAAI5S,KAAK,CAAC6S,OAAN,KAAkB,EAAtB,EAA0B;AACtB,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG9S,KAAK,CAACwN,MAAN,CAAauF,IAAb,CAAkBC,QAAlB,CAA2B5I,MAA/C,EAAuD0I,CAAC,EAAxD,EAA4D;AACxD,cAAIhR,QAAQ,CAAC9B,KAAK,CAACwN,MAAN,CAAauF,IAAb,CAAkBC,QAAlB,CAA2BF,CAA3B,EAA8BpN,EAA/B,CAAR,KAA+CkN,kBAAkB,CAAC3H,KAAK,GAAG,CAAT,CAArE,EAAkF;AAC9EjL,YAAAA,KAAK,CAACwN,MAAN,CAAauF,IAAb,CAAkBC,QAAlB,CAA2BF,CAA3B,EAA8BG,KAA9B;AACA;AACH;AACJ;;AACDjT,QAAAA,KAAK,CAACkT,cAAN;AACH;AACJ,KAtuFkB;;AAAA,SAyuFnBC,mBAzuFmB,GAyuFG,CAACnT,KAAD,EAAQiL,KAAR,EAAe4G,SAAf,KAA6B;AAC/C;AACA,UAAI1R,cAAc,GAAG,KAAKuC,KAAL,CAAWvC,cAAX,IAA6B,EAAlD;AACA,UAAIsL,eAAe,GAAG,KAAK/I,KAAL,CAAWvC,cAAX,CAA0BsL,eAA1B,GAA4C,KAAK/I,KAAL,CAAWvC,cAAX,CAA0BsL,eAAtE,GAAwF,EAA9G;AACA,UAAIoF,OAAO,GAAG,EAAd;AACA,UAAIlO,KAAK,GAAG,CAAC,CAAb;AACA,UAAIuL,YAAY,GAAG,EAAnB;AACA,UAAIkF,iBAAJ;;AAEA,UAAIvB,SAAS,CAACC,kBAAV,KAAiCnV,aAAa,CAACoV,OAAnD,EAA4D;AACxD,YAAI,kBAAkBvK,IAAlB,CAAuBxH,KAAK,CAACwN,MAAN,CAAa7K,KAApC,KAA8C3C,KAAK,CAACwN,MAAN,CAAa7K,KAAb,KAAuB,EAAzE,EAA6E;AACzEkO,UAAAA,OAAO,GAAG7Q,KAAK,CAACwN,MAAN,CAAa7K,KAAvB;AACAyQ,UAAAA,iBAAiB,GAAG,CAApB;AACH,SAHD,MAGO;AACHvC,UAAAA,OAAO,GAAGpF,eAAe,CAACR,KAAD,CAAf,CAAuB,SAAvB,MAAsC,IAAtC,GAA6C,EAA7C,GAAkDQ,eAAe,CAACR,KAAD,CAAf,CAAuB,SAAvB,CAA5D;AACAmI,UAAAA,iBAAiB,GAAG3H,eAAe,CAACR,KAAD,CAAf,CAAuB,mBAAvB,CAApB;AACH;AACJ;;AACD,UAAI4G,SAAS,CAACC,kBAAV,KAAiCnV,aAAa,CAACwV,UAAnD,EAA+D;AAC3D,YAAInS,KAAK,IAAI,IAAb,EAAmB;AACf6Q,UAAAA,OAAO,GAAG7Q,KAAK,CAAC4C,IAAN,CAAWyQ,eAArB;AACA1Q,UAAAA,KAAK,GAAG3C,KAAK,CAAC4C,IAAN,CAAWoP,UAAnB;AACAoB,UAAAA,iBAAiB,GAAG,CAApB;AACH,SAJD,MAKK;AACDvC,UAAAA,OAAO,GAAG,EAAV;AACAlO,UAAAA,KAAK,GAAG,CAAC,CAAT;AACAyQ,UAAAA,iBAAiB,GAAG,CAApB;AACH;AACJ;;AACD,UAAIvB,SAAS,CAACC,kBAAV,KAAiCnV,aAAa,CAACyV,SAAnD,EAA8D;AAC1DvB,QAAAA,OAAO,GAAG7Q,KAAK,CAACwN,MAAN,CAAa7K,KAAvB;AACAyQ,QAAAA,iBAAiB,GAAG,CAApB;AACH;;AACD,UAAIvB,SAAS,CAACC,kBAAV,KAAiCnV,aAAa,CAAC2W,UAAnD,EAA+D;AAC3DzC,QAAAA,OAAO,GAAG7Q,KAAK,CAAC,CAAD,CAAL,CAAS0N,IAAnB;AACAQ,QAAAA,YAAY,GAAGlO,KAAf;AACAoT,QAAAA,iBAAiB,GAAG,CAApB;AACH;;AACD3H,MAAAA,eAAe,CAACR,KAAD,CAAf,CAAuB,SAAvB,IAAoC4F,OAApC;AACApF,MAAAA,eAAe,CAACR,KAAD,CAAf,CAAuB,QAAvB,IAAmC4F,OAAnC;AACApF,MAAAA,eAAe,CAACR,KAAD,CAAf,CAAuB,cAAvB,IAAyCiD,YAAzC;AACAzC,MAAAA,eAAe,CAACR,KAAD,CAAf,CAAuB,UAAvB,IAAqC,IAArC;AACAQ,MAAAA,eAAe,CAACR,KAAD,CAAf,CAAuB,YAAvB,IAAuCtI,KAAvC;AACA8I,MAAAA,eAAe,CAACR,KAAD,CAAf,CAAuB,mBAAvB,IAA8CmI,iBAA9C,CA5C+C,CA8C/C;;AACAjT,MAAAA,cAAc,CAACsL,eAAf,GAAiCA,eAAjC;AACA,WAAK3L,QAAL,CAAc;AACVK,QAAAA,cAAc,EAAEA;AADN,OAAd,EAhD+C,CAoD/C;AACA;AACA;AACA;AACA;AACH,KAlyFkB;;AAAA,SAk2FnBoT,UAl2FmB,GAk2FLvF,QAAD,IAAc;AACvB,YAAMhM,YAAY,GAAGF,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,CAA6C9B,YAA9C,CAA7B;AACA,YAAME,eAAe,GAAGJ,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,CAAgD7B,eAAjD,CAAhC;AAEA,UAAIsR,eAAe,GAAG,KAAK7T,KAAL,CAAWS,KAAX,CAAiBqT,yBAAjB,IAA8C,EAApE,CAJuB,CAKvB;;AAEAD,MAAAA,eAAe,CAAC,mBAAD,CAAf,GAAuC,CAAvC;AACAA,MAAAA,eAAe,CAAC,SAAD,CAAf,GAA6B,KAAK9Q,KAAL,CAAWwO,QAAxC;AACAsC,MAAAA,eAAe,CAAC,QAAD,CAAf,GAA4BlV,gBAAgB,CAAC2T,UAAU,CAAC,KAAKvP,KAAL,CAAWwO,QAAZ,CAAX,EAAkCpP,QAAQ,CAAC0R,eAAe,CAACE,cAAjB,CAA1C,CAA5C;AAEAF,MAAAA,eAAe,CAAC,YAAD,CAAf,GAAgCjV,YAAY,CAACiV,eAAD,EAAkB1R,QAAQ,CAAC,KAAKY,KAAL,CAAWwO,QAAZ,CAA1B,CAA5C;AACAsC,MAAAA,eAAe,CAAC,cAAD,CAAf,GAAkC,KAAK7T,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BmS,SAA5D;AACAH,MAAAA,eAAe,CAAC,YAAD,CAAf,GAAgC,KAAK7T,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoS,SAA1D,CAbuB,CAcvB;AACA;AACA;AACA;;AAEA,YAAMxF,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,MAAAA,QAAQ,CAACG,MAAT,CAAgB,WAAhB,EAA6B,CAA7B;AACAH,MAAAA,QAAQ,CAACG,MAAT,CAAgB,cAAhB,EAAgCvM,YAAhC;AACAoM,MAAAA,QAAQ,CAACG,MAAT,CAAgB,iBAAhB,EAAmCrM,eAAnC;AACAkM,MAAAA,QAAQ,CAACG,MAAT,CAAgB,cAAhB,EAAgC,KAAK5O,KAAL,CAAWS,KAAX,CAAiB8H,YAAjD;AACAkG,MAAAA,QAAQ,CAACG,MAAT,CAAgB,qBAAhB,EAAuCiF,eAAe,CAACpP,oBAAvD;AACAgK,MAAAA,QAAQ,CAACG,MAAT,CAAgB,YAAhB,EAA8BC,IAAI,CAACC,SAAL,CAAe,CAAC+E,eAAD,CAAf,CAA9B;AAEA,YAAMnL,UAAU,GAAG;AACf2E,QAAAA,QAAQ,EAAE,qBADK;AAEfhE,QAAAA,SAAS,EAAE,qBAFI;AAGf3H,QAAAA,SAAS,EAAE;AAAEmB,UAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB;AAA7B,SAHI;AAIf4M,QAAAA,QAAQ,EAAEA,QAJK;AAKfyF,QAAAA,YAAY,EAAE,IALC;AAMf9S,QAAAA,SAAS,EAAE,QANI;AAOf4J,QAAAA,WAAW,EAAE,KAAKhL,KAAL,CAAWS,KAAX,CAAiBiI,UAAjB,CAA4BsC,WAP1B;AAOuCqD,QAAAA;AAPvC,OAAnB;AAUA,YAAM3N,UAAU,GAAG,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAApC;;AACA,UAAI/D,SAAS,CAAC,KAAKqD,KAAL,CAAWS,KAAX,CAAiBqI,qBAAlB,EAAyC,KAAK9I,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoJ,SAAnE,EAA8E,KAAKjL,KAAL,CAAWS,KAAX,CAAiB8H,YAA/F,CAAb,EAA2H;AAEvH,cAAM3H,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAElD,cADK;AAEfmD,UAAAA,IAAI,EAAE;AACFE,YAAAA,SAAS,EAAE,IADT;AACekK,YAAAA,UAAU,EAAE;AAAExC,cAAAA,UAAF;AAAchI,cAAAA;AAAd,aAD3B;AACuD2N,YAAAA;AADvD;AAFS,SAAnB;AAMA,aAAKrO,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB;AACH,OATD,MAUK;AACD,aAAKZ,KAAL,CAAWxG,UAAX,CAAsBkP,UAAtB,EAAkC,KAAK1I,KAAL,CAAWS,KAAX,CAAiBC,UAAnD,EAA+D,WAA/D;AACH;AACJ,KAr5FkB;;AAAA,SAy5FnByT,WAz5FmB,GAy5FJ9F,QAAD,IAAc;AACxB,UAAI,KAAKrO,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,mBAApC,EAAyD;AACrD,aAAKyS,UAAL,CAAgBvF,QAAhB;AACH,OAFD,MAGK;AACD,YAAIvC,eAAe,GAAG,KAAK/I,KAAL,CAAWvC,cAAX,CAA0BsL,eAA1B,IAA6C,EAAnE;AACA,YAAItL,cAAc,GAAG,KAAKuC,KAAL,CAAWvC,cAAX,IAA6B,EAAlD;AACA,YAAIqI,UAAU,GAAG,KAAK7I,KAAL,CAAWS,KAAX,CAAiBoI,UAAjB,IAA+B,IAAhD;AACA,cAAMxG,YAAY,GAAGF,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,CAA6C9B,YAA9C,CAA7B;AACA,cAAME,eAAe,GAAGJ,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,CAAgD7B,eAAjD,CAAhC;AACA,cAAM8K,QAAQ,GAAG,qBAAjB;AACA,cAAMoB,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACA,YAAI0F,SAAS,GAAG,CAAhB;AACA,YAAIC,gBAAgB,GAAG,EAAvB;AACA,YAAI3L,UAAU,GAAG,EAAjB;AACA,YAAIhH,SAAS,GAAG,EAAhB;AACA,YAAIyR,CAAC,GAAG,CAAR,CAZC,CAaD;;AACA,YAAI,KAAKnT,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,iBAApC,EAAuD;AACnD,cAAI2K,eAAe,CAACrB,MAAhB,GAAyB,CAAzB,IAA8BqB,eAAe,KAAK5F,SAAtD,EAAiE;AAC7D4F,YAAAA,eAAe,CAAClE,GAAhB,CAAoB,CAAC0M,UAAD,EAAahJ,KAAb,KAAuB;AACvC,kBAAIiJ,OAAO,GAAG,EAAd;;AACA,kBAAID,UAAU,CAACE,QAAX,KAAwB,IAA5B,EAAkC;AAC9BJ,gBAAAA,SAAS,GAAG,CAAZ;;AACA,wBAAQE,UAAU,CAACnC,kBAAnB;AACI,uBAAK,CAAL;AACIoC,oBAAAA,OAAO,CAAC,UAAD,CAAP,GAAsB;AAClBd,sBAAAA,iBAAiB,EAAEa,UAAU,CAAC,mBAAD,CADX;AAElBpD,sBAAAA,OAAO,EAAEoD,UAAU,CAACpD,OAFF;AAGlBuD,sBAAAA,MAAM,EAAEH,UAAU,CAACpD,OAAX,KAAuB,EAAvB,GAA4BvS,gBAAgB,CAAC2T,UAAU,CAACgC,UAAU,CAACpD,OAAZ,CAAX,EAAiC/O,QAAQ,CAACmS,UAAU,CAAC/B,eAAZ,CAAzC,CAA5C,GAAqH;AAH3G,qBAAtB;AAKAgC,oBAAAA,OAAO,CAAC,YAAD,CAAP,GAAwB1F,IAAI,CAACC,SAAL,CAAeyF,OAAO,CAAC,UAAD,CAAtB,CAAxB;AACAA,oBAAAA,OAAO,CAAC,mBAAD,CAAP,GAA+BD,UAAU,CAAC,mBAAD,CAAzC;AACAC,oBAAAA,OAAO,CAAC,SAAD,CAAP,GAAqBD,UAAU,CAACpD,OAAhC;AACAqD,oBAAAA,OAAO,CAAC,QAAD,CAAP,GAAoBD,UAAU,CAACpD,OAAX,KAAuB,EAAvB,GAChBvS,gBAAgB,CAAC2T,UAAU,CAACgC,UAAU,CAACpD,OAAZ,CAAX,EAAiC/O,QAAQ,CAACmS,UAAU,CAAC/B,eAAZ,CAAzC,CADA,GACyE,EAD7F;AAEAgC,oBAAAA,OAAO,CAAC,YAAD,CAAP,GAAwBD,UAAU,CAACpD,OAAX,KAAuB,EAAvB,GACpBtS,YAAY,CAAC0V,UAAD,EAAaC,OAAO,CAAC,QAAD,CAApB,CADQ,GAC0B,CAAC,CADnD;AAEAA,oBAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,KAAKvU,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BmS,SAApD;AACAO,oBAAAA,OAAO,CAAC,YAAD,CAAP,GAAwB,KAAKvU,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoS,SAAlD;AACAM,oBAAAA,OAAO,CAAC,wBAAD,CAAP,GAAoCD,UAAU,CAACrD,sBAA/C;AACAsD,oBAAAA,OAAO,CAAC,sBAAD,CAAP,GAAkCD,UAAU,CAAC7P,oBAA7C;AACA8P,oBAAAA,OAAO,CAAC,oBAAD,CAAP,GAAgCD,UAAU,CAACnC,kBAA3C;AACA;;AACJ,uBAAK,CAAL;AACIoC,oBAAAA,OAAO,CAAC,UAAD,CAAP,GAAsB;AAClBd,sBAAAA,iBAAiB,EAAE,CADD;AAElBvC,sBAAAA,OAAO,EAAEoD,UAAU,CAACpD,OAFF;AAGlBuD,sBAAAA,MAAM,EAAEH,UAAU,CAACpD;AAHD,qBAAtB;AAKAqD,oBAAAA,OAAO,CAAC,YAAD,CAAP,GAAwB1F,IAAI,CAACC,SAAL,CAAeyF,OAAO,CAAC,UAAD,CAAtB,CAAxB;AACAA,oBAAAA,OAAO,CAAC,SAAD,CAAP,GAAqBD,UAAU,CAACpD,OAAhC;AACAqD,oBAAAA,OAAO,CAAC,mBAAD,CAAP,GAA+B,CAA/B;AACAA,oBAAAA,OAAO,CAAC,QAAD,CAAP,GAAoBD,UAAU,CAACpD,OAA/B;AACAqD,oBAAAA,OAAO,CAAC,YAAD,CAAP,GAAwBD,UAAU,CAACjC,UAAnC;AACAkC,oBAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,KAAKvU,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BmS,SAApD;AACAO,oBAAAA,OAAO,CAAC,YAAD,CAAP,GAAwB,KAAKvU,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoS,SAAlD;AACAM,oBAAAA,OAAO,CAAC,wBAAD,CAAP,GAAoCD,UAAU,CAACrD,sBAA/C;AACAsD,oBAAAA,OAAO,CAAC,sBAAD,CAAP,GAAkCD,UAAU,CAAC7P,oBAA7C;AACA8P,oBAAAA,OAAO,CAAC,oBAAD,CAAP,GAAgCD,UAAU,CAACnC,kBAA3C;AACA;;AACJ,uBAAK,CAAL;AACIoC,oBAAAA,OAAO,CAAC,UAAD,CAAP,GAAsB;AAClBd,sBAAAA,iBAAiB,EAAE,CADD;AAElBvC,sBAAAA,OAAO,EAAEoD,UAAU,CAACpD,OAFF;AAGlBuD,sBAAAA,MAAM,EAAEH,UAAU,CAACpD;AAHD,qBAAtB;AAKAqD,oBAAAA,OAAO,CAAC,YAAD,CAAP,GAAwB1F,IAAI,CAACC,SAAL,CAAeyF,OAAO,CAAC,UAAD,CAAtB,CAAxB;AACAA,oBAAAA,OAAO,CAAC,SAAD,CAAP,GAAqBD,UAAU,CAACpD,OAAhC;AACAqD,oBAAAA,OAAO,CAAC,mBAAD,CAAP,GAA+B,CAA/B;AACAA,oBAAAA,OAAO,CAAC,QAAD,CAAP,GAAoBD,UAAU,CAACpD,OAA/B;AACAqD,oBAAAA,OAAO,CAAC,YAAD,CAAP,GAAwBtX,KAAK,CAACyX,GAA9B;AACAH,oBAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,KAAKvU,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BmS,SAApD;AACAO,oBAAAA,OAAO,CAAC,YAAD,CAAP,GAAwB,KAAKvU,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoS,SAAlD;AACAM,oBAAAA,OAAO,CAAC,wBAAD,CAAP,GAAoCD,UAAU,CAACrD,sBAA/C;AACAsD,oBAAAA,OAAO,CAAC,sBAAD,CAAP,GAAkCD,UAAU,CAAC7P,oBAA7C;AACA8P,oBAAAA,OAAO,CAAC,oBAAD,CAAP,GAAgCD,UAAU,CAACnC,kBAA3C;AACA;;AACJ,uBAAK,CAAL;AACI,wBAAImC,UAAU,CAAC/F,YAAX,KAA4BrI,SAAhC,EAA2C;AACvC,4BAAMyO,gBAAgB,GAAGL,UAAU,CAAC/F,YAAX,GAA0B+F,UAAU,CAAC/F,YAAX,CAAwB,CAAxB,EAA2BR,IAA3B,CAAgC6G,KAAhC,CAAsC,GAAtC,CAA1B,GAAuE,EAAhG;AACA,4BAAMC,aAAa,GAAGP,UAAU,CAAC/F,YAAX,GAA0B+F,UAAU,CAAC/F,YAAX,CAAwB,CAAxB,EAA2BR,IAA3B,CAAgC6G,KAAhC,CAAsC,GAAtC,EAA2CD,gBAAgB,CAAClK,MAAjB,GAA0B,CAArE,CAA1B,GAAoG,EAA1H;AACA,4BAAMqK,cAAc,GAAGxY,WAAW,KAAK,GAAhB,GAAsBuY,aAA7C;AACAN,sBAAAA,OAAO,CAAC,UAAD,CAAP,GAAsB;AAClBQ,wBAAAA,eAAe,EAAED,cADC;AAElBE,wBAAAA,SAAS,EAAEV,UAAU,CAAC/F,YAAX,CAAwB,CAAxB,EAA2B8C,IAFpB;AAGlBoC,wBAAAA,iBAAiB,EAAE,CAHD;AAIlBvC,wBAAAA,OAAO,EAAEoD,UAAU,CAACpD,OAJF;AAKlBuD,wBAAAA,MAAM,EAAEH,UAAU,CAACpD;AALD,uBAAtB;AAOAqD,sBAAAA,OAAO,CAAC,YAAD,CAAP,GAAwB1F,IAAI,CAACC,SAAL,CAAeyF,OAAO,CAAC,UAAD,CAAtB,CAAxB;AACAA,sBAAAA,OAAO,CAAC,mBAAD,CAAP,GAA+B,CAA/B;AACAA,sBAAAA,OAAO,CAAC,SAAD,CAAP,GAAqBD,UAAU,CAACpD,OAAhC;AACAqD,sBAAAA,OAAO,CAAC,QAAD,CAAP,GAAoBD,UAAU,CAACpD,OAA/B;AACAqD,sBAAAA,OAAO,CAAC,YAAD,CAAP,GAAwBtX,KAAK,CAACyX,GAA9B;AACAH,sBAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,KAAKvU,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BmS,SAApD;AACAO,sBAAAA,OAAO,CAAC,YAAD,CAAP,GAAwB,KAAKvU,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoS,SAAlD;AACAM,sBAAAA,OAAO,CAAC,wBAAD,CAAP,GAAoCD,UAAU,CAACrD,sBAA/C;AACAsD,sBAAAA,OAAO,CAAC,sBAAD,CAAP,GAAkCD,UAAU,CAAC7P,oBAA7C;AACA8P,sBAAAA,OAAO,CAAC,oBAAD,CAAP,GAAgCD,UAAU,CAACnC,kBAA3C;AACAoC,sBAAAA,OAAO,CAAC,iBAAD,CAAP,GAA6BO,cAA7B;AACAP,sBAAAA,OAAO,CAAC,WAAD,CAAP,GAAuBD,UAAU,CAAC/F,YAAX,CAAwB,CAAxB,EAA2B8C,IAAlD;AACA5C,sBAAAA,QAAQ,CAACG,MAAT,CAAgB,iBAAiBtD,KAAjC,EAAwCgJ,UAAU,CAAC/F,YAAX,CAAwB,CAAxB,CAAxC;AACAE,sBAAAA,QAAQ,CAACG,MAAT,CAAgB,mBAAmBtD,KAAnC,EAA0CwJ,cAA1C;AACArG,sBAAAA,QAAQ,CAACG,MAAT,CAAgB,sBAAhB,EAAwC0F,UAAU,CAAC7P,oBAAnD;AACA0O,sBAAAA,CAAC;AACJ;;AACD;;AACJ;AACI;AArFR;;AAuFA,oBAAI8B,MAAM,CAAC3D,MAAP,CAAciD,OAAd,EAAuB9J,MAAvB,GAAgC,CAApC,EAAuC;AACnC4J,kBAAAA,gBAAgB,CAACzI,IAAjB,CAAsB2I,OAAtB;AACH;AACJ;;AACD,qBAAO,IAAP;AACH,aAhGD;;AAkGA,gBAAIH,SAAS,KAAK,CAAlB,EAAqB;AACjB,oBAAMxT,UAAU,GAAG;AACfC,gBAAAA,QAAQ,EAAElD,cADK;AAEfmD,gBAAAA,IAAI,EAAE;AAAEoU,kBAAAA,OAAO,EAAE,KAAX;AAAkBjU,kBAAAA,SAAS,EAAE;AAA7B;AAFS,eAAnB;AAIA,qBAAO,KAAKjB,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB,CAAP;AACH;;AAED6N,YAAAA,QAAQ,CAACG,MAAT,CAAgB,WAAhB,EAA6BuE,CAA7B;AACA1E,YAAAA,QAAQ,CAACG,MAAT,CAAgB,cAAhB,EAAgCvM,YAAhC;AACAoM,YAAAA,QAAQ,CAACG,MAAT,CAAgB,iBAAhB,EAAmCrM,eAAnC;AACAkM,YAAAA,QAAQ,CAACG,MAAT,CAAgB,cAAhB,EAAgC,KAAK5O,KAAL,CAAWS,KAAX,CAAiB8H,YAAjD;AACAkG,YAAAA,QAAQ,CAACG,MAAT,CAAgB,YAAhB,EAA8BC,IAAI,CAACC,SAAL,CAAeuF,gBAAf,CAA9B;AACA,kBAAMc,KAAK,GAAG,KAAKnV,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,GACV,KAAK3H,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,CAA2CC,GAA3C,CAA+CC,IAAI,IAAIA,IAAI,CAACpD,oBAA5D,EAAkFqD,IAAlF,CAAuF,GAAvF,CADU,GACoF,EADlG;AAEA2G,YAAAA,QAAQ,CAACG,MAAT,CAAgB,qBAAhB,EAAuCuG,KAAvC,EAlH6D,CAmH7D;;AACAzM,YAAAA,UAAU,GAAG;AACT2E,cAAAA,QAAQ,EAAEA,QADD;AAEThE,cAAAA,SAAS,EAAE,qBAFF;AAGT3H,cAAAA,SAAS,EAAE;AAAEmB,gBAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB;AAA7B,eAHF;AAIT4M,cAAAA,QAAQ,EAAEA,QAJD;AAKTyF,cAAAA,YAAY,EAAE,IALL;AAMT9S,cAAAA,SAAS,EAAE,QANF;AAOT4J,cAAAA,WAAW,EAAE,KAAKhL,KAAL,CAAWS,KAAX,CAAiBiI,UAAjB,CAA4BsC,WAPhC;AAO6CqD,cAAAA,QAP7C,CAOqD;;AAPrD,aAAb;AASH,WA7HD,MA8HK;AACD,kBAAMzN,UAAU,GAAG;AACfC,cAAAA,QAAQ,EAAElD,cADK;AAEfmD,cAAAA,IAAI,EAAE;AAAEoU,gBAAAA,OAAO,EAAE,KAAX;AAAkBjU,gBAAAA,SAAS,EAAE;AAA7B;AAFS,aAAnB;AAIA,mBAAO,KAAKjB,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB,CAAP;AACH;AACJ;;AAED,YAAI,KAAKZ,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,sBAApC,EAA4D;AACxDO,UAAAA,SAAS,GAAG;AACR0T,YAAAA,KAAK,EAAE,CADC;AAERtT,YAAAA,KAAK,EAAE,CAFC;AAGRI,YAAAA,eAAe,EAAE,KAAKlC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwD,mBAA5B,CAAgDhC,eAHzD;AAIRG,YAAAA,YAAY,EAAE,KAAKrC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,CAA6C9B,YAJnD;AAKRE,YAAAA,eAAe,EAAE,KAAKvC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,CAAgD7B,eALzD;AAMRE,YAAAA,UAAU,EAAE,KAAKzC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4D,qBAA5B,CAAkD1B,kBAAlD,CAAqE8H,QAArE,EANJ;AAORlG,YAAAA,SAAS,EAAE,KAAKxE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6D,iBAA5B,CAA8CC,SAPjD;AAQR2F,YAAAA,SAAS,EAAE,KAAKnK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,IAAgD,KAAKpK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,CAA6CxC,GAA7C,CAAiDyC,MAAM,IAAIA,MAAM,CAACF,SAAlE,EAA6ErC,IAA7E,CAAkF,GAAlF,CARnD;AASR8C,YAAAA,sBAAsB,EAAE,KAAK5K,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BmK,mBAA5B,IAAmD,KAAK7K,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BmK,mBAA5B,CAAgDjD,GAAhD,CAAoDyC,MAAM,IAAIA,MAAM,CAACO,sBAArE,EAA6F9C,IAA7F,CAAkG,GAAlG,CATnE;AAURuN,YAAAA,WAAW,EAAE7U,cAAc,CAAC6U,WAAf,CAA2BrS,KAVhC;AAWRsS,YAAAA,WAAW,EAAE9U,cAAc,CAAC8U,WAAf,CAA2BtS,KAXhC;AAYRyB,YAAAA,oBAAoB,EAAEjE,cAAc,CAACiE,oBAZ7B;AAaR5B,YAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QAbnB;AAcR6C,YAAAA,aAAa,EAAE,aAdP;AAeR6D,YAAAA,YAAY,EAAE,KAAKvI,KAAL,CAAWS,KAAX,CAAiB8H;AAfvB,WAAZ,CADwD,CAkBxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAK9M,sBAAL,CAA4BiG,SAA5B,EAAuC,KAAK1B,KAAL,CAAWS,KAAX,CAAiBC,UAAxD,EAAoE,KAAKV,KAAL,CAAWS,KAAX,CAAiB8H,YAArF;AACA;AACH;;AACD,YAAI,KAAKvI,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,gBAApC,EAAsD;AAClD,cAAIO,SAAS,GAAG,EAAhB;;AACA,cAAI,KAAK1B,KAAL,CAAWS,KAAX,CAAiBW,SAAjB,KAA+B,QAAnC,EAA6C;AACzCM,YAAAA,SAAS,GAAG;AACR6T,cAAAA,oBAAoB,EAAE;AAClBC,gBAAAA,yBAAyB,EAAEhV,cAAc,CAACgV,yBADxB;AAElBrL,gBAAAA,SAAS,EAAE3J,cAAc,CAAC2J,SAFR;AAGlB3D,gBAAAA,kBAAkB,EAAEhG,cAAc,CAACgG,kBAAf,CAAkCxD,KAHpC;AAIlBkE,gBAAAA,eAAe,EAAE1G,cAAc,CAAC0G,eAAf,CAA+BlE,KAJ9B;AAKlByS,gBAAAA,SAAS,EAAEhZ,eAAe,CAAC+D,cAAc,CAACiV,SAAhB,EAA2B,KAA3B,CALR;AAMlBC,gBAAAA,OAAO,EAAEjZ,eAAe,CAAC+D,cAAc,CAACkV,OAAhB,EAAyB,KAAzB,CANN;AAOlBC,gBAAAA,WAAW,EAAEnV,cAAc,CAACoV,WAAf,CAA2BC,KAPtB;AAQlBC,gBAAAA,SAAS,EAAEtV,cAAc,CAACuV,SAAf,CAAyBF,KARlB;AASlBD,gBAAAA,WAAW,EAAEpV,cAAc,CAACoV,WAAf,CAA2B5S,KATtB;AAUlB+S,gBAAAA,SAAS,EAAEvV,cAAc,CAACuV,SAAf,CAAyB/S,KAVlB;AAWlByB,gBAAAA,oBAAoB,EAAEjE,cAAc,CAACiE;AAXnB,eADd;AAeR5B,cAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QAfnB;AAgBRQ,cAAAA,YAAY,EAAEA,YAhBN;AAiBRE,cAAAA,eAAe,EAAEA,eAjBT;AAkBRkC,cAAAA,oBAAoB,EAAE,KAAKzE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,GAClB,KAAK3H,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,CAA2CC,GAA3C,CAA+CC,IAAI,IAAIA,IAAI,CAACpD,oBAA5D,EAAkFqD,IAAlF,CAAuF,GAAvF,EAA4F4C,QAA5F,EADkB,GACuF;AAnBrG,aAAZ;AAqBH,WAtBD,MAuBK;AACDhJ,YAAAA,SAAS,GAAG;AACR6T,cAAAA,oBAAoB,EAAE;AAClB9Q,gBAAAA,oBAAoB,EAAEjE,cAAc,CAACiE,oBADnB;AAElB0F,gBAAAA,SAAS,EAAE3J,cAAc,CAAC2J,SAFR;AAGlB3D,gBAAAA,kBAAkB,EAAEhG,cAAc,CAACgG,kBAAf,CAAkCxD,KAHpC;AAIlBkE,gBAAAA,eAAe,EAAE1G,cAAc,CAAC0G,eAAf,CAA+BlE,KAJ9B;AAKlByS,gBAAAA,SAAS,EAAEhZ,eAAe,CAAC+D,cAAc,CAACiV,SAAhB,EAA2B,KAA3B,CALR;AAMlBC,gBAAAA,OAAO,EAAEjZ,eAAe,CAAC+D,cAAc,CAACkV,OAAhB,EAAyB,KAAzB,CANN;AAOlBC,gBAAAA,WAAW,EAAEnV,cAAc,CAACoV,WAAf,CAA2BC,KAPtB;AAQlBC,gBAAAA,SAAS,EAAEtV,cAAc,CAACuV,SAAf,CAAyBF,KARlB;AASlBD,gBAAAA,WAAW,EAAEpV,cAAc,CAACoV,WAAf,CAA2B5S,KATtB;AAUlB+S,gBAAAA,SAAS,EAAEvV,cAAc,CAACuV,SAAf,CAAyB/S;AAVlB,eADd;AAaRH,cAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QAbnB;AAcRQ,cAAAA,YAAY,EAAEA,YAdN;AAeRE,cAAAA,eAAe,EAAEA,eAfT;AAgBRyT,cAAAA,mBAAmB,EAAE,KAAKhW,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,GACjB,KAAK3H,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,CAA2CC,GAA3C,CAA+CC,IAAI,IAAIA,IAAI,CAACpD,oBAA5D,EAAkFqD,IAAlF,CAAuF,GAAvF,CADiB,GAC6E;AAjB1F,aAAZ;AAmBH;;AACDY,UAAAA,UAAU,GAAG;AACT2E,YAAAA,QAAQ,EAAEA,QADD;AAEThE,YAAAA,SAAS,EAAE,sBAFF;AAGT3H,YAAAA,SAAS,EAAEA,SAHF;AAGamH,YAAAA,UAHb;AAITqL,YAAAA,YAAY,EAAE,KAJL;AAKTxP,YAAAA,aAAa,EAAE,gBALN;AAMTtD,YAAAA,SAAS,EAAE,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SANnB;AAOT4J,YAAAA,WAAW,EAAE,KAAKhL,KAAL,CAAWS,KAAX,CAAiBiI,UAAjB,CAA4BsC,WAPhC;AAO6CqD,YAAAA,QAP7C,CAOqD;;AAPrD,WAAb;AASH;;AACD,YAAI,KAAKrO,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,cAApC,EAAoD;AAChD,cAAIO,SAAS,GAAG,EAAhB;;AACA,cAAI4Q,UAAU,CAAC,KAAKvP,KAAL,CAAWvC,cAAX,CAA0ByV,aAA3B,CAAV,IAAuD3D,UAAU,CAAC,KAAKvP,KAAL,CAAWvC,cAAX,CAA0B0V,kBAA3B,CAArE,EAAqH;AACjH,gBAAI,KAAKlW,KAAL,CAAWS,KAAX,CAAiBW,SAAjB,KAA+B,QAAnC,EAA6C;AACzCM,cAAAA,SAAS,GAAG;AACRyU,gBAAAA,kBAAkB,EAAE;AAChBC,kBAAAA,uBAAuB,EAAE5V,cAAc,CAAC4V,uBADxB;AAEhB3R,kBAAAA,oBAAoB,EAAEjE,cAAc,CAACiE,oBAFrB;AAGhB0F,kBAAAA,SAAS,EAAE3J,cAAc,CAAC2J,SAHV;AAIhBkM,kBAAAA,iBAAiB,EAAE7V,cAAc,CAAC6V,iBAAf,CAAiCrT,KAJpC;AAKhBsT,kBAAAA,qBAAqB,EAAE9V,cALP;AAMhB+V,kBAAAA,aAAa,EAAE/V,cAAc,CAAC+V,aAAf,CAA6BvT,KAN5B;AAOhBwT,kBAAAA,cAAc,EAAEhW,cAAc,CAACiW,sBAAf,CAAsCzT,KAPtC;AAQhB0T,kBAAAA,YAAY,EAAElW,cAAc,CAACkW,YARb;AAShBC,kBAAAA,QAAQ,EAAE;AACNC,oBAAAA,KAAK,EAAEpW,cAAc,CAACoW,KADhB;AAENC,oBAAAA,WAAW,EAAErW,cAAc,CAACqW,WAFtB;AAGN1L,oBAAAA,YAAY,EAAE3K,cAAc,CAAC2K,YAHvB;AAIN2L,oBAAAA,gBAAgB,EAAEtW,cAAc,CAACuW,gBAAf,CAAgClB,KAJ5C;AAKNmB,oBAAAA,aAAa,EAAExW,cAAc,CAAC+V,aAAf,CAA6BV,KALtC;AAMNoB,oBAAAA,YAAY,EAAEzW,cAAc,CAACiW,sBAAf,CAAsCZ,KAN9C;AAONqB,oBAAAA,QAAQ,EAAE1W,cAAc,CAACyV,aAPnB;AAQNkB,oBAAAA,WAAW,EAAE3W,cAAc,CAAC2W,WARtB;AASNC,oBAAAA,YAAY,EAAE5W,cAAc,CAAC4W,YATvB;AAUNC,oBAAAA,QAAQ,EAAE7W,cAAc,CAAC6W;AAVnB;AATM,iBADZ;AAuBRC,gBAAAA,sBAAsB,EAAE;AACpBb,kBAAAA,sBAAsB,EAAEjW,cAAc,CAACiW,sBAAf,CAAsCzT,KAD1C;AAEpB0T,kBAAAA,YAAY,EAAElW,cAAc,CAACkW,YAFT;AAGpBC,kBAAAA,QAAQ,EAAE;AACNY,oBAAAA,eAAe,EAAE/W,cAAc,CAACiW,sBAAf,CAAsCZ,KADjD;AAENqB,oBAAAA,QAAQ,EAAE1W,cAAc,CAACyV;AAFnB;AAHU,iBAvBhB;AA+BRpT,gBAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QA/BnB;AAgCRQ,gBAAAA,YAAY,EAAEA,YAhCN;AAiCRE,gBAAAA,eAAe,EAAEA,eAjCT;AAkCRkC,gBAAAA,oBAAoB,EAAE,KAAKzE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,GAClB,KAAK3H,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,CAA2CC,GAA3C,CAA+CC,IAAI,IAAIA,IAAI,CAACpD,oBAA5D,EAAkFqD,IAAlF,CAAuF,GAAvF,EAA4F4C,QAA5F,EADkB,GACuF;AAnCrG,eAAZ;AAqCH,aAtCD,MAuCK;AACDhJ,cAAAA,SAAS,GAAG;AACRyU,gBAAAA,kBAAkB,EAAE;AAChB1R,kBAAAA,oBAAoB,EAAEjE,cAAc,CAACiE,oBADrB;AAEhB0F,kBAAAA,SAAS,EAAE3J,cAAc,CAAC2J,SAFV;AAGhBkM,kBAAAA,iBAAiB,EAAE7V,cAAc,CAAC6V,iBAAf,CAAiCrT,KAHpC;AAIhBsT,kBAAAA,qBAAqB,EAAE9V,cAAc,CAACuW,gBAAf,CAAgC/T,KAJvC;AAKhBuT,kBAAAA,aAAa,EAAE/V,cAAc,CAAC+V,aAAf,CAA6BvT,KAL5B;AAMhBwT,kBAAAA,cAAc,EAAEhW,cAAc,CAACiW,sBAAf,CAAsCzT,KANtC;AAOhB0T,kBAAAA,YAAY,EAAElW,cAAc,CAACkW,YAPb;AAQhBC,kBAAAA,QAAQ,EAAE;AACNC,oBAAAA,KAAK,EAAEpW,cAAc,CAACoW,KADhB;AAENC,oBAAAA,WAAW,EAAErW,cAAc,CAACqW,WAFtB;AAGN1L,oBAAAA,YAAY,EAAE3K,cAAc,CAAC2K,YAHvB;AAIN2L,oBAAAA,gBAAgB,EAAEtW,cAAc,CAACuW,gBAAf,CAAgClB,KAJ5C;AAKNmB,oBAAAA,aAAa,EAAExW,cAAc,CAAC+V,aAAf,CAA6BV,KALtC;AAMNoB,oBAAAA,YAAY,EAAEzW,cAAc,CAACiW,sBAAf,CAAsCZ,KAN9C;AAONqB,oBAAAA,QAAQ,EAAE1W,cAAc,CAACyV,aAPnB;AAQNkB,oBAAAA,WAAW,EAAE3W,cAAc,CAAC2W,WARtB;AASNC,oBAAAA,YAAY,EAAE5W,cAAc,CAAC4W,YATvB;AAUNC,oBAAAA,QAAQ,EAAE7W,cAAc,CAAC6W;AAVnB;AARM,iBADZ;AAsBRC,gBAAAA,sBAAsB,EAAE;AACpBb,kBAAAA,sBAAsB,EAAEjW,cAAc,CAACiW,sBAAf,CAAsCzT,KAD1C;AAEpB0T,kBAAAA,YAAY,EAAElW,cAAc,CAACkW,YAFT;AAGpBC,kBAAAA,QAAQ,EAAE;AACNO,oBAAAA,QAAQ,EAAE1W,cAAc,CAACyV,aADnB;AAENsB,oBAAAA,eAAe,EAAE/W,cAAc,CAACiW,sBAAf,CAAsCZ;AAFjD;AAHU,iBAtBhB;AA8BRhT,gBAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QA9BnB;AA+BRQ,gBAAAA,YAAY,EAAEA,YA/BN;AAgCRE,gBAAAA,eAAe,EAAEA,eAhCT;AAiCRyT,gBAAAA,mBAAmB,EAAE,KAAKhW,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,GACjB,KAAK3H,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,CAA2CC,GAA3C,CAA+CC,IAAI,IAAIA,IAAI,CAACpD,oBAA5D,EAAkFqD,IAAlF,CAAuF,GAAvF,CADiB,GAC6E;AAlC1F,eAAZ;AAoCH;;AACDY,YAAAA,UAAU,GAAG;AACT2E,cAAAA,QAAQ,EAAEA,QADD;AAEThE,cAAAA,SAAS,EAAE,oBAFF;AAGT3H,cAAAA,SAAS,EAAEA,SAHF;AAGamH,cAAAA,UAHb;AAITqL,cAAAA,YAAY,EAAE,KAJL;AAKTxP,cAAAA,aAAa,EAAE,cALN;AAMTtD,cAAAA,SAAS,EAAE,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SANnB;AAOT4J,cAAAA,WAAW,EAAE,KAAKhL,KAAL,CAAWS,KAAX,CAAiBiI,UAAjB,CAA4BsC,WAPhC;AAO6CqD,cAAAA,QAP7C,CAOqD;;AAPrD,aAAb;AASH,WAvFD,MAuFO;AACHtR,YAAAA,KAAK,CAAC6I,IAAN,CAAW,KAAK5F,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAA9B,CAAX;AACA,mBAAO,IAAP;AACH;AACJ;;AACD,YAAI,KAAK/F,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,UAApC,EAAgD;AAC5C,cAAKX,cAAc,CAACgX,aAAf,IAAgChX,cAAc,CAACgX,aAAf,KAAiC,EAAlE,IACIhX,cAAc,CAACiX,SAAf,IAA4BjX,cAAc,CAACiX,SAAf,KAA6B,EAD7D,IAEIjX,cAAc,CAACkX,gBAAf,IAAmClX,cAAc,CAACkX,gBAAf,KAAoC,EAF3E,IAGIlX,cAAc,CAACmX,gBAAf,IAAmCnX,cAAc,CAACmX,gBAAf,KAAoC,EAH3E,IAIInX,cAAc,CAACoX,SAAf,IAA4BpX,cAAc,CAACoX,SAAf,KAA6B,EAJjE,EAIsE;AAClE,gBAAI,KAAK5X,KAAL,CAAWS,KAAX,CAAiBW,SAAjB,KAA+B,QAAnC,EAA6C;AACzCM,cAAAA,SAAS,GAAG;AACRmW,gBAAAA,eAAe,EAAE;AACbC,kBAAAA,mBAAmB,EAAEtX,cAAc,CAACsX,mBADvB;AAEbN,kBAAAA,aAAa,EAAEhX,cAAc,CAACgX,aAAf,GAA+BhX,cAAc,CAACgX,aAA9C,GAA8D,EAFhE;AAGbO,kBAAAA,QAAQ,EAAE,KAAK/X,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BmW,SAHvB;AAIbP,kBAAAA,SAAS,EAAEjX,cAAc,CAACiX,SAAf,GAA2BjX,cAAc,CAACiX,SAA1C,GAAsD,EAJpD;AAKbC,kBAAAA,gBAAgB,EAAElX,cAAc,CAACkX,gBAAf,GAAkClX,cAAc,CAACkX,gBAAjD,GAAoE,EALzE;AAMbC,kBAAAA,gBAAgB,EAAEnX,cAAc,CAACmX,gBAAf,GAAkCnX,cAAc,CAACmX,gBAAjD,GAAoE,EANzE;AAObC,kBAAAA,SAAS,EAAEpX,cAAc,CAACoX,SAAf,GAA2BpX,cAAc,CAACoX,SAA1C,GAAsD;AAPpD,iBADT;AAUR/U,gBAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QAVnB;AAWR4C,gBAAAA,oBAAoB,EAAE,KAAKzE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,IAA8C,KAAK3H,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,CAA2CC,GAA3C,CAA+CyC,MAAM,IAAIA,MAAM,CAAC5F,oBAAhE,EAAsFqD,IAAtF,CAA2F,GAA3F,CAX5D;AAYRzF,gBAAAA,YAAY,EAAEA,YAZN;AAaRE,gBAAAA,eAAe,EAAEA;AAbT,eAAZ;AAeH,aAhBD,MAiBK;AACDb,cAAAA,SAAS,GAAG;AACRmW,gBAAAA,eAAe,EAAE;AACbpT,kBAAAA,oBAAoB,EAAEtC,QAAQ,CAAC3B,cAAc,CAACiE,oBAAhB,CADjB;AAEb+S,kBAAAA,aAAa,EAAEhX,cAAc,CAACgX,aAAf,GAA+BhX,cAAc,CAACgX,aAA9C,GAA8D,EAFhE;AAGbO,kBAAAA,QAAQ,EAAE,KAAK/X,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BmW,SAHvB;AAIbP,kBAAAA,SAAS,EAAEjX,cAAc,CAACiX,SAAf,GAA2BjX,cAAc,CAACiX,SAA1C,GAAsD,EAJpD;AAKbC,kBAAAA,gBAAgB,EAAElX,cAAc,CAACkX,gBAAf,GAAkClX,cAAc,CAACkX,gBAAjD,GAAoE,EALzE;AAMbC,kBAAAA,gBAAgB,EAAEnX,cAAc,CAACmX,gBAAf,GAAkCnX,cAAc,CAACmX,gBAAjD,GAAoE,EANzE;AAObC,kBAAAA,SAAS,EAAEpX,cAAc,CAACoX,SAAf,GAA2BpX,cAAc,CAACoX,SAA1C,GAAsD;AAPpD,iBADT;AAUR/U,gBAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QAVnB;AAWRmU,gBAAAA,mBAAmB,EAAE,KAAKhW,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,IAA8C,KAAK3H,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,CAA2CC,GAA3C,CAA+CyC,MAAM,IAAIA,MAAM,CAAC5F,oBAAhE,EAAsFqD,IAAtF,CAA2F,GAA3F,CAX3D;AAYRzF,gBAAAA,YAAY,EAAEA,YAZN;AAaRE,gBAAAA,eAAe,EAAEA;AAbT,eAAZ;AAeH;;AACDmG,YAAAA,UAAU,GAAG;AACT2E,cAAAA,QAAQ,EAAEA,QADD;AAEThE,cAAAA,SAAS,EAAE,iBAFF;AAGT3H,cAAAA,SAAS,EAAEA,SAHF;AAGamH,cAAAA,UAHb;AAITnE,cAAAA,aAAa,EAAE,UAJN;AAKTwP,cAAAA,YAAY,EAAE,KALL;AAMT9S,cAAAA,SAAS,EAAE,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SANnB;AAOT4J,cAAAA,WAAW,EAAE,KAAKhL,KAAL,CAAWS,KAAX,CAAiBiI,UAAjB,CAA4BsC,WAPhC;AAO6CqD,cAAAA,QAP7C,CAOqD;;AAPrD,aAAb;AASH,WAhDD,MAgDO;AACHtR,YAAAA,KAAK,CAACkb,IAAN,CAAW,KAAKjY,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAA9B,CAAX;AACA;AACH;AACJ;;AACD,YAAI,KAAK/F,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,uBAApC,EAA6D;AACzDO,UAAAA,SAAS,GAAG;AACR+C,YAAAA,oBAAoB,EAAEjE,cAAc,CAACiE,oBAD7B;AAERwM,YAAAA,sBAAsB,EAAEzQ,cAAc,CAACyQ,sBAF/B;AAGRiH,YAAAA,cAAc,EAAE1X,cAAc,CAAC0X,cAHvB;AAIRlC,YAAAA,mBAAmB,EAAExV,cAAc,CAACwV,mBAJ5B;AAKRnT,YAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QALnB;AAMRQ,YAAAA,YAAY,EAAEA,YANN;AAORE,YAAAA,eAAe,EAAEA,eAPT;AAQRgG,YAAAA,YAAY,EAAE,KAAKvI,KAAL,CAAWS,KAAX,CAAiB8H;AARvB,WAAZ,CADyD,CAYzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAKzM,uBAAL,CAA6B4F,SAA7B,EAAwC,KAAK1B,KAAL,CAAWS,KAAX,CAAiBC,UAAzD,EAAqEF,cAAc,CAAC+H,YAApF;AACA;AACH;;AACD,YAAI,KAAKvI,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,qBAApC,EAA2D;AACvD,cAAIgX,kBAAkB,GAAG,EAAzB;;AACA,cAAI3X,cAAc,IAAIA,cAAc,CAAC4X,QAArC,EAA+C;AAC3C5X,YAAAA,cAAc,CAAC4X,QAAf,CAAwBxQ,GAAxB,CAA4ByQ,MAAM,IAC9BF,kBAAkB,CAACvM,IAAnB,CAAwBpL,cAAc,CAAC6X,MAAD,CAAtC,CADJ;AAEA3W,YAAAA,SAAS,GAAG;AACR+C,cAAAA,oBAAoB,EAAEjE,cAAc,CAACiE,oBAAf,CAAoCiG,QAApC,EADd;AAERuG,cAAAA,sBAAsB,EAAEzQ,cAAc,CAACyQ,sBAF/B;AAGR+E,cAAAA,mBAAmB,EAAExV,cAAc,CAACwV,mBAH5B;AAIRsC,cAAAA,eAAe,EAAEH,kBAJT;AAKRtV,cAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QALnB;AAMRQ,cAAAA,YAAY,EAAEA,YANN;AAORE,cAAAA,eAAe,EAAEA;AAPT,aAAZ;AASAmG,YAAAA,UAAU,GAAG;AACT2E,cAAAA,QAAQ,EAAEA,QADD;AAEThE,cAAAA,SAAS,EAAE,sBAFF;AAGT3H,cAAAA,SAAS,EAAEA,SAHF;AAGamH,cAAAA,UAHb;AAITqL,cAAAA,YAAY,EAAE,KAJL;AAKT9S,cAAAA,SAAS,EAAE,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SALnB;AAMT4J,cAAAA,WAAW,EAAE,KAAKhL,KAAL,CAAWS,KAAX,CAAiBiI,UAAjB,CAA4BsC,WANhC;AAM6CqD,cAAAA,QAN7C,CAMqD;;AANrD,aAAb;AAQH;AACJ;;AACD,cAAM3N,UAAU,GAAG,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAApC;;AACA,YAAI/D,SAAS,CAAC,KAAKqD,KAAL,CAAWS,KAAX,CAAiBqI,qBAAlB,EAAyC,KAAK9I,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoJ,SAAnE,EAA8E,KAAKjL,KAAL,CAAWS,KAAX,CAAiB8H,YAA/F,CAAb,EAA2H;AAEvH,gBAAM3H,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAElD,cADK;AAEfmD,YAAAA,IAAI,EAAE;AACFE,cAAAA,SAAS,EAAE,IADT;AACekK,cAAAA,UAAU,EAAE;AAAExC,gBAAAA,UAAF;AAAchI,gBAAAA;AAAd,eAD3B;AACuD2N,cAAAA;AADvD;AAFS,WAAnB;AAMA,eAAKrO,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB;AACH,SATD,MAUK;AAED,eAAKZ,KAAL,CAAWxG,UAAX,CAAsBkP,UAAtB,EAAkC,KAAK1I,KAAL,CAAWS,KAAX,CAAiBC,UAAnD,EAA+D,WAA/D;AACH;AACJ;AACJ,KA51GkB;;AAEf,SAAKuE,eAAL,GAAuB7M,KAAK,CAACmgB,SAAN,EAAvB;AACA,SAAKrT,kBAAL,GAA0B9M,KAAK,CAACmgB,SAAN,EAA1B;AACA,SAAKpT,aAAL,GAAqB/M,KAAK,CAACmgB,SAAN,EAArB;AACA,SAAKxV,KAAL,GAAa;AACTgH,MAAAA,mBAAmB,EAAE;AAAEoC,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE,KAAKpM,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,GAA4BrW,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAvF,OADZ;AAETpT,MAAAA,eAAe,EAAE;AAAE+G,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE,KAAKpM,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,GAA4BrW,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAD;AAAjG,OAFR;AAGTrT,MAAAA,mBAAmB,EAAE;AAAE8G,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE,KAAKpM,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,GAA4BrW,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAD;AAAjG,OAHZ;AAITpT,MAAAA,iBAAiB,EAAE;AAAE6G,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE,KAAKpM,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,GAA4BrW,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAD;AAAjG,OAJV;AAKTnT,MAAAA,aAAa,EAAE;AAAE4G,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE,KAAKpM,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,GAA4BrW,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAD;AAAjG,OALN;AAMTlT,MAAAA,iBAAiB,EAAE;AAAE2G,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE,KAAKpM,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,GAA4BrW,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAD;AAAjG,OANV;AAOTjT,MAAAA,qBAAqB,EAAE;AAAE0G,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE,KAAKpM,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,GAA4BrW,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAD;AAAjG,OAPd;AAQThT,MAAAA,oBAAoB,EAAE;AAAEyG,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE,KAAKpM,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,GAA4BrW,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAD;AAAjG,OARb;AAST/S,MAAAA,gBAAgB,EAAE;AAAEwG,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE,KAAKpM,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,GAA4BrW,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAD;AAAjG,OATT;AAUT7O,MAAAA,sBAAsB,EAAE;AAAEsC,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE,KAAKpM,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,GAA4BrW,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAD;AAAjG,OAVf;AAWT;AACA5P,MAAAA,qBAAqB,EAAE,EAZd;AAaTT,MAAAA,UAAU,EAAE,IAAIX,GAAJ,EAbH;AAcTiR,MAAAA,YAAY,EAAE,EAdL;AAeTvR,MAAAA,KAAK,EAAE,EAfE;AAgBThG,MAAAA,SAAS,EAAE,EAhBF;AAiBTwD,MAAAA,UAAU,EAAE,KAjBH;AAkBTD,MAAAA,QAAQ,EAAE,IAlBD;AAmBTiU,MAAAA,iBAAiB,EAAE,EAnBV;AAoBTC,MAAAA,oBAAoB,EAAE,EApBb;AAqBTC,MAAAA,eAAe,EAAE,EArBR;AAsBTC,MAAAA,mBAAmB,EAAE,EAtBZ;AAuBTC,MAAAA,UAAU,EAAE,EAvBH;AAwBTC,MAAAA,cAAc,EAAE,EAxBP;AAyBTC,MAAAA,wBAAwB,EAAE,EAzBjB;AA0BTC,MAAAA,mBAAmB,EAAE,EA1BZ;AA2BTC,MAAAA,sBAAsB,EAAE,EA3Bf;AA4BTC,MAAAA,iBAAiB,EAAE,EA5BV;AA6BTC,MAAAA,aAAa,EAAE,EA7BN;AA8BT9Y,MAAAA,cAAc,EAAE,EA9BP;AA+BTe,MAAAA,0BAA0B,EAAE,EA/BnB;AAgCTnB,MAAAA,0BAA0B,EAAE,EAhCnB;AAiCT+L,MAAAA,IAAI,EAAE,CAjCG;AAkCTC,MAAAA,IAAI,EAAE,KAAKpM,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,IAA6B,KAAKxY,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,CAA0B,CAA1B,CAlC1B;AAmCT/L,MAAAA,aAAa,EAAE,CAnCN;AAoCTC,MAAAA,aAAa,EAAE,CApCN;AAqCT3E,MAAAA,QAAQ,EAAE,CArCD;AAsCTC,MAAAA,QAAQ,EAAE,KAAKhI,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,IAA6B,KAAKxY,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,CAA0B,EAA1B;AAtC9B,KAAb;AAwCA,SAAKlK,OAAL,GAAelW,KAAK,CAACmgB,SAAN,EAAf,CA7Ce,CA8Cf;AACH;;AA6bDgB,EAAAA,cAAc,GAAG;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,SAAKpZ,QAAL,CAAc;AAAEwE,MAAAA,QAAQ,EAAE,IAAZ;AAAkBC,MAAAA,UAAU,EAAE;AAA9B,KAAd;AACH,GAxf+B,CA0fhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAqhBA4U,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKC,YAAT,EAAuB;AACnB,YAAMC,MAAM,GAAG,KAAKD,YAAL,CAAkBE,YAAjC;AACA,WAAKxZ,QAAL,CAAc;AACVyZ,QAAAA,SAAS,EAAEF,MAAM,GAAG,EADV;AAEVD,QAAAA,YAAY,EAAEC;AAFJ,OAAd;AAIH;AACJ;;AACDG,EAAAA,gBAAgB,GAAG;AACf,QAAIC,GAAG,GAAG,2CAAV;;AACA,YAAQ,KAAK9Z,KAAL,CAAWS,KAAX,CAAiBiE,aAAzB;AACI,WAAK,aAAL;AACIoV,QAAAA,GAAG,GAAG,2CAAN;AACA;;AACJ,WAAK,gBAAL;AACIA,QAAAA,GAAG,GAAG,6CAAN;AACA;;AACJ,WAAK,cAAL;AACIA,QAAAA,GAAG,GAAG,2CAAN;AACA;;AACJ,WAAK,UAAL;AACIA,QAAAA,GAAG,GAAG,uCAAN;AACA;;AACJ,WAAK,qBAAL;AACIA,QAAAA,GAAG,GAAG,8BAAN;AACA;;AACJ,WAAK,kBAAL;AACIA,QAAAA,GAAG,GAAG,yBAAN;AACA;;AACJ,WAAK,eAAL;AACIA,QAAAA,GAAG,GAAG,gCAAN;AACA;;AACJ,WAAK,yBAAL;AACIA,QAAAA,GAAG,GAAG,4CAAN;AACA;;AACJ,WAAK,qBAAL;AACIA,QAAAA,GAAG,GAAG,8CAAN;AACA;;AACJ,WAAK,uBAAL;AACIA,QAAAA,GAAG,GAAG,gCAAN;AACA;;AACJ;AACIA,QAAAA,GAAG,GAAG,2CAAN;AACA;AAjCR;;AAmCA,WAAOA,GAAP;AACH;;AAsDDC,EAAAA,MAAM,GAAG;AACL,QAAIC,YAAY,GAAG,KAAKha,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BmS,SAA5B,GAAwCxW,QAAQ,CAAC,KAAK2D,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BmS,SAA7B,EAAwC,YAAxC,EAAsD,WAAtD,CAAhD,GAAqH,EAAxI;AACA,QAAIoH,eAAe,GAAG,KAAKja,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwZ,YAA5B,GAA2C7d,QAAQ,CAAC,KAAK2D,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwZ,YAA7B,EAA2C,YAA3C,EAAyD,wBAAzD,CAAnD,GAAwI,EAA9J,CAFK,CAGL;;AACA,QAAIC,UAAU,GAAG,KAAKna,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwH,OAA5B,GAAsC,KAAKlI,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwH,OAAlE,GAA4E,EAA7F;AACA,UAAMkS,SAAS,GAAI,KAAKpa,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BsD,YAA5B,IAA4C,KAAKhE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BsB,QAAxE,IAAoF,IAAIqO,IAAJ,EAAvG;AACA,UAAMgK,OAAO,GAAI,KAAKra,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BuD,UAA5B,IAA0C,KAAKjE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BkB,MAAtE,IAAgF,IAAIyO,IAAJ,EAAjG,CANK,CAQL;;AACA,QAAIvN,GAAG,GAAGtD,wBAAwB,CAAC4a,SAAD,EAAYC,OAAZ,EAAqB,KAAKra,KAAL,CAAWS,KAAX,CAAiBoB,QAAtC,CAAlC;AAEA,UAAMG,QAAQ,GAAGc,GAAG,CAACd,QAArB;AACA,UAAMJ,MAAM,GAAGkB,GAAG,CAAClB,MAAnB;AAGA,QAAI0Y,mBAAmB,GAAG;AACtB5Z,MAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UADP;AAEtBmC,MAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QAFL;AAGtBK,MAAAA,eAAe,EAAE,KAAKlC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwD,mBAA5B,IAAmD,KAAKlE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwD,mBAA5B,CAAgDhC,eAH9F;AAItBG,MAAAA,YAAY,EAAE,KAAKrC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,IAAgD,KAAKnE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,CAA6C9B,YAJrF;AAKtBE,MAAAA,eAAe,EAAE,KAAKvC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,IAAmD,KAAKpE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,CAAgD7B,eAL9F;AAMtBW,MAAAA,oBAAoB,EAAE,KAAKlD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B2D,wBAA5B,IAAwD,KAAKrE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B2D,wBAA5B,CAAqDjB,0BAN7G;AAOtBR,MAAAA,kBAAkB,EAAE,KAAK5C,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4D,qBAA5B,IAAqD,KAAKtE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4D,qBAA5B,CAAkD1B,kBAPrG;AAQtB4B,MAAAA,SAAS,EAAE,KAAKxE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6D,iBAA5B,IAAiD,KAAKvE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6D,iBAA5B,CAA8CC,SARpF;AAStB2F,MAAAA,SAAS,EAAE,KAAKnK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,IAAgD,KAAKpK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,CAA6CxC,GAA7C,CAAiDyC,MAAM,IAAIA,MAAM,CAACF,SAAlE,EAA6ErC,IAA7E,CAAkF,GAAlF,CATrC;AAUtB/F,MAAAA,QAAQ,EAAEC,QAVY;AAWtBC,MAAAA,MAAM,EAAEL,MAXc;AAYtB8C,MAAAA,aAAa,EAAE,KAAK1E,KAAL,CAAWS,KAAX,CAAiBiE,aAAjB,IAAkC,aAZ3B;AAatBkF,MAAAA,eAAe,EAAE,KAAK5J,KAAL,CAAWS,KAAX,CAAiBmJ,eAAjB,IAAoC,oBAb/B;AActB7B,MAAAA,QAAQ,EAAE,KAAKhF,KAAL,CAAWgF,QAdC;AAetBC,MAAAA,QAAQ,EAAE,KAAKjF,KAAL,CAAWiF,QAfC;AAgBtB5C,MAAAA,eAAe,EAAE,KAAKrC,KAAL,CAAWqC,eAhBN;AAiBtBC,MAAAA,mBAAmB,EAAE,KAAKtC,KAAL,CAAWsC,mBAjBV;AAkBtBC,MAAAA,iBAAiB,EAAE,KAAKvC,KAAL,CAAWuC,iBAlBR;AAmBtBC,MAAAA,aAAa,EAAE,KAAKxC,KAAL,CAAWwC,aAnBJ;AAoBtBC,MAAAA,iBAAiB,EAAE,KAAKzC,KAAL,CAAWyC,iBApBR;AAqBtBC,MAAAA,qBAAqB,EAAE,KAAK1C,KAAL,CAAW0C,qBArBZ;AAsBtBC,MAAAA,oBAAoB,EAAE,KAAK3C,KAAL,CAAW2C,oBAtBX;AAuBtBZ,MAAAA,0BAA0B,EAAE,KAAK9E,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BoE,0BAvBlC;AAwBtBI,MAAAA,kBAAkB,EAAE,KAAKA,kBAxBH;AAyBtBC,MAAAA,aAAa,EAAE,KAAKA;AAzBE,KAA1B;AA2BA,QAAIoV,cAAc,GAAG;AACjB7Z,MAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UADZ;AAEjBmC,MAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QAFV;AAGjBK,MAAAA,eAAe,EAAE,KAAKlC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwD,mBAA5B,IAAmD,KAAKlE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwD,mBAA5B,CAAgDhC,eAHnG;AAIjBG,MAAAA,YAAY,EAAE,KAAKrC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,IAAgD,KAAKnE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,CAA6C9B,YAJ1F;AAKjBE,MAAAA,eAAe,EAAE,KAAKvC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,IAAmD,KAAKpE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,CAAgD7B,eALnG;AAMjBW,MAAAA,oBAAoB,EAAE,KAAKlD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B2D,wBAA5B,IAAwD,KAAKrE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B2D,wBAA5B,CAAqDjB,0BANlH;AAOjBR,MAAAA,kBAAkB,EAAE,KAAK5C,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4D,qBAA5B,IAAqD,KAAKtE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4D,qBAA5B,CAAkD1B,kBAP1G;AAQjB4B,MAAAA,SAAS,EAAE,KAAKxE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6D,iBAA5B,IAAiD,KAAKvE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6D,iBAA5B,CAA8CC,SARzF;AASjB2F,MAAAA,SAAS,EAAE,KAAKnK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,IAAgD,KAAKpK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,CAA6CxC,GAA7C,CAAiDyC,MAAM,IAAIA,MAAM,CAACF,SAAlE,EAA6ErC,IAA7E,CAAkF,GAAlF,CAT1C;AAUjBpD,MAAAA,aAAa,EAAE,KAAK1E,KAAL,CAAWS,KAAX,CAAiBiE,aAAjB,IAAkC,aAVhC;AAWjBkF,MAAAA,eAAe,EAAE,KAAK5J,KAAL,CAAWS,KAAX,CAAiBmJ,eAAjB,IAAoC,oBAXpC;AAYjBxE,MAAAA,eAAe,EAAE,KAAKrC,KAAL,CAAWqC,eAZX;AAajBC,MAAAA,mBAAmB,EAAE,KAAKtC,KAAL,CAAWsC,mBAbf;AAcjBC,MAAAA,iBAAiB,EAAE,KAAKvC,KAAL,CAAWuC,iBAdb;AAejBC,MAAAA,aAAa,EAAE,KAAKxC,KAAL,CAAWwC,aAfT;AAgBjBC,MAAAA,iBAAiB,EAAE,KAAKzC,KAAL,CAAWyC,iBAhBb;AAiBjBC,MAAAA,qBAAqB,EAAE,KAAK1C,KAAL,CAAW0C,qBAjBjB;AAkBjBC,MAAAA,oBAAoB,EAAE,KAAK3C,KAAL,CAAW2C,oBAlBhB;AAmBjBZ,MAAAA,0BAA0B,EAAE,KAAK9E,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BoE;AAnBvC,KAArB;AAqBA,QAAIkI,mBAAmB,GAAG;AACtBtM,MAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UADP;AAEtBmC,MAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QAFL;AAGtBK,MAAAA,eAAe,EAAE,KAAKlC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwD,mBAA5B,IAAmD,KAAKlE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwD,mBAA5B,CAAgDhC,eAH9F;AAItBG,MAAAA,YAAY,EAAE,KAAKrC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,IAAgD,KAAKnE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,CAA6C9B,YAJrF;AAKtBE,MAAAA,eAAe,EAAE,KAAKvC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,IAAmD,KAAKpE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,CAAgD7B,eAL9F;AAMtBW,MAAAA,oBAAoB,EAAE,KAAKlD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B2D,wBAA5B,IAAwD,KAAKrE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B2D,wBAA5B,CAAqDjB,0BAN7G;AAOtBR,MAAAA,kBAAkB,EAAE,KAAK5C,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4D,qBAA5B,IAAqD,KAAKtE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4D,qBAA5B,CAAkD1B,kBAPrG;AAQtB4B,MAAAA,SAAS,EAAE,KAAKxE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6D,iBAA5B,IAAiD,KAAKvE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6D,iBAA5B,CAA8CC,SARpF;AAStB2F,MAAAA,SAAS,EAAE,KAAKnK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,IAAgD,KAAKpK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,CAA6CxC,GAA7C,CAAiDyC,MAAM,IAAIA,MAAM,CAACF,SAAlE,EAA6ErC,IAA7E,CAAkF,GAAlF,CATrC;AAUtB8C,MAAAA,sBAAsB,EAAE,KAAK5K,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BmK,mBAA5B,IAAmD,KAAK7K,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BmK,mBAA5B,CAAgDjD,GAAhD,CAAoDyC,MAAM,IAAIA,MAAM,CAACO,sBAArE,EAA6F9C,IAA7F,CAAkG,GAAlG,CAVrD;AAWtBpD,MAAAA,aAAa,EAAE,KAAK1E,KAAL,CAAWS,KAAX,CAAiBiE,aAAjB,IAAkC,aAX3B;AAYtB3C,MAAAA,QAAQ,EAAEC,QAZY;AAatBC,MAAAA,MAAM,EAAEL,MAbc;AActBmG,MAAAA,QAAQ,EAAE,KAAKhF,KAAL,CAAWgF,QAdC;AAetBC,MAAAA,QAAQ,EAAE,KAAKjF,KAAL,CAAWiF,QAfC;AAgBtB5C,MAAAA,eAAe,EAAE,KAAKrC,KAAL,CAAWqC,eAhBN;AAiBtBC,MAAAA,mBAAmB,EAAE,KAAKtC,KAAL,CAAWsC,mBAjBV;AAkBtBC,MAAAA,iBAAiB,EAAE,KAAKvC,KAAL,CAAWuC,iBAlBR;AAmBtBC,MAAAA,aAAa,EAAE,KAAKxC,KAAL,CAAWwC,aAnBJ;AAoBtBC,MAAAA,iBAAiB,EAAE,KAAKzC,KAAL,CAAWyC,iBApBR;AAqBtBC,MAAAA,qBAAqB,EAAE,KAAK1C,KAAL,CAAW0C,qBArBZ;AAsBtBC,MAAAA,oBAAoB,EAAE,KAAK3C,KAAL,CAAW2C,oBAtBX;AAuBtBZ,MAAAA,0BAA0B,EAAE,KAAK9E,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BoE;AAvBlC,KAA1B;AA0BA,QAAI0V,iBAAiB,GAAG,CAAC,OAAD,EAAU,cAAV,EAA0B,iBAA1B,EAA6C,gBAA7C,EAA+D,qBAA/D,EAClB,uBADkB,EACO,iBADP,EAC0B,gBAD1B,EAC4C,mBAD5C,EACiE,UADjE,EAC6E,aAD7E,EAC4F,iBAD5F,EAC+G,aAD/G,EAElB,cAFkB,EAEF,WAFE,EAEW,WAFX,EAEwB,aAFxB,EAEuC,gBAFvC,EAEyD,yBAFzD,EAEoF,YAFpF,EAEkG,sBAFlG,EAE0H,UAF1H,CAAxB;;AAGA,QAAI,KAAKxa,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,IAAmD,KAAKpE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,CAAgD7B,eAAhD,KAAoEnF,mBAAmB,CAACqd,OAA/I,EAAwJ;AAEpJD,MAAAA,iBAAiB,GAAG,CAAC,OAAD,EAAU,cAAV,EAA0B,iBAA1B,EAA6C,iBAA7C,EAAgE,cAAhE,EAAgF,WAAhF,EAA6F,YAA7F,EAA2G,uBAA3G,EAChB,aADgB,EACD,gBADC,EACiB,WADjB,EAC8B,iBAD9B,EACiD,oBADjD,EACuE,kBADvE,EAC2F,QAD3F,EACqG,UADrG,EACiH,UADjH,EAC6H,aAD7H,EAEhB,eAFgB,EAEC,eAFD,EAEkB,UAFlB,EAE8B,gBAF9B,EAEgD,kBAFhD,EAEoE,eAFpE,EAEqF,WAFrF,EAEkG,qBAFlG,CAApB;AAIH;;AACD,UAAME,iBAAiB,GAAG;AACtBC,MAAAA,aAAa,EAAE,WADO;AAEtBC,MAAAA,cAAc,EAAE,kBAFM;AAGtBhS,MAAAA,eAAe,EAAE,WAHK;AAItBiS,MAAAA,QAAQ,EAAE,2CAJY;AAKtBC,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,GAAG,EAAE,KAAK7V,kBAAZ;AAAgC8V,QAAAA,qBAAqB,EAAE;AAAvD,OAAD,EAA+E;AAAED,QAAAA,GAAG,EAAE,KAAK5V,aAAZ;AAA2B6V,QAAAA,qBAAqB,EAAE;AAAlD,OAA/E,CALW;AAMtBC,MAAAA,gBAAgB,EAAE;AACd7F,QAAAA,KAAK,EAAE,CADO;AAEdtT,QAAAA,KAAK,EAAE,CAFO;AAGd2C,QAAAA,oBAAoB,EAAE,CAHR;AAId/D,QAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAJf;AAKdmC,QAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QALb;AAMdK,QAAAA,eAAe,EAAE,KAAKlC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwD,mBAA5B,IAAmD,KAAKlE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwD,mBAA5B,CAAgDhC,eANtG;AAOdG,QAAAA,YAAY,EAAE,KAAKrC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,IAAgD,KAAKnE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,CAA6C9B,YAP7F;AAQdE,QAAAA,eAAe,EAAE,KAAKvC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,IAAmD,KAAKpE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,CAAgD7B,eARtG;AASdW,QAAAA,oBAAoB,EAAE,KAAKlD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B2D,wBAA5B,IAAwD,KAAKrE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B2D,wBAA5B,CAAqDjB,0BATrH;AAUdX,QAAAA,UAAU,EAAEC,MAAM,CAAC,KAAK1C,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4D,qBAA5B,GAAoD,KAAKtE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4D,qBAA5B,CAAkD1B,kBAAlD,GAAuE,KAAK5C,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4D,qBAA5B,CAAkD1B,kBAAlD,CAAqE8H,QAArE,EAAvE,GAAyJ,CAA7M,GAAiN,CAAlN,CAVJ;AAWdlG,QAAAA,SAAS,EAAE,KAAKxE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6D,iBAA5B,IAAiD,KAAKvE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6D,iBAA5B,CAA8CC,SAX5F;AAYd;AACAzC,QAAAA,QAAQ,EAAEC,QAbI;AAcdC,QAAAA,MAAM,EAAEL,MAdM;AAed8C,QAAAA,aAAa,EAAE,KAAK1E,KAAL,CAAWS,KAAX,CAAiBiE,aAAjB,IAAkC,aAfnC;AAgBduB,QAAAA,cAAc,EAAE,KAAKjG,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BuF,cAA5B,IAA8C,CAhBhD;AAiBdnB,QAAAA,0BAA0B,EAAE,KAAK9E,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BoE,0BAjB1C;AAkBdD,QAAAA,iBAAiB,EAAE;AAlBL,OANI;AA0BtBnE,MAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UA1BP;AA2BtB;AACAwa,MAAAA,eAAe,EAAEV,iBA5BK;AA6BtBW,MAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,SAAjB,EAA4B,gBAA5B,EACR,qBADQ,EACe,iBADf,EACkC,sBADlC,EAER,iBAFQ,EAEW,4BAFX,EAEyC,yBAFzC,EAGR,wBAHQ,EAGkB,kBAHlB,EAGsC,qBAHtC,EAG6D,gBAH7D;AA7BU,KAA1B;AAmCA,UAAMC,oBAAoB,GAAG;AACzBT,MAAAA,aAAa,EAAE,cADU;AAEzBC,MAAAA,cAAc,EAAE,qBAFS;AAGzBhS,MAAAA,eAAe,EAAE,wBAHQ;AAIzBiS,MAAAA,QAAQ,EAAE,oDAJe;AAKzBC,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,GAAG,EAAE,KAAK5V,aAAZ;AAA2B6V,QAAAA,qBAAqB,EAAE;AAAlD,OAAD,CALc;AAMzBC,MAAAA,gBAAgB,EAAE;AACd7F,QAAAA,KAAK,EAAE,CADO;AAEdtT,QAAAA,KAAK,EAAE,CAFO;AAGd2C,QAAAA,oBAAoB,EAAE,CAHR;AAId/D,QAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAJf;AAKdmC,QAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QALb;AAMdK,QAAAA,eAAe,EAAE,KAAKlC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwD,mBAA5B,IAAmD,KAAKlE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwD,mBAA5B,CAAgDhC,eANtG;AAOdG,QAAAA,YAAY,EAAE,KAAKrC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,IAAgD,KAAKnE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,CAA6C9B,YAP7F;AAQdE,QAAAA,eAAe,EAAE,KAAKvC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,IAAmD,KAAKpE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,CAAgD7B,eARtG;AASdW,QAAAA,oBAAoB,EAAE,KAAKlD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B2D,wBAA5B,IAAwD,KAAKrE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B2D,wBAA5B,CAAqDjB,0BATrH;AAUdX,QAAAA,UAAU,EAAEC,MAAM,CAAC,KAAK1C,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4D,qBAA5B,GAAoD,KAAKtE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4D,qBAA5B,CAAkD1B,kBAAlD,GAAuE,KAAK5C,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4D,qBAA5B,CAAkD1B,kBAAlD,CAAqE8H,QAArE,EAAvE,GAAyJ,CAA7M,GAAiN,CAAlN,CAVJ;AAWdlG,QAAAA,SAAS,EAAE,KAAKxE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6D,iBAA5B,IAAiD,KAAKvE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6D,iBAA5B,CAA8CC,SAX5F;AAYd;AACAzC,QAAAA,QAAQ,EAAEC,QAbI;AAcdC,QAAAA,MAAM,EAAEL,MAdM;AAed8C,QAAAA,aAAa,EAAE,KAAK1E,KAAL,CAAWS,KAAX,CAAiBiE,aAAjB,IAAkC,aAfnC;AAgBduB,QAAAA,cAAc,EAAE,KAAKjG,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BuF,cAA5B,IAA8C,CAhBhD;AAiBdnB,QAAAA,0BAA0B,EAAE,KAAK9E,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BoE,0BAjB1C;AAkBdD,QAAAA,iBAAiB,EAAE;AAlBL,OANO;AA0BzBnE,MAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UA1BJ;AA2BzB;AACAwa,MAAAA,eAAe,EAAE,CAAC,aAAD,CA5BQ;AA6BzBC,MAAAA,UAAU,EAAE,CAAC,SAAD,EAAY,gBAAZ,EACR,qBADQ,EACe,iBADf,EACkC,sBADlC,EAER,iBAFQ,EAEW,4BAFX,EAEyC,yBAFzC,EAGR,wBAHQ,EAGkB,qBAHlB,EAGyC,gBAHzC;AA7Ba,KAA7B;AAkCA,QAAIE,eAAe,GAAG;AAClBV,MAAAA,aAAa,EAAE,SADG;AAElBC,MAAAA,cAAc,EAAE,gBAFE;AAGlBhS,MAAAA,eAAe,EAAE,sBAHC;AAIlBiS,MAAAA,QAAQ,EAAE,KAAKhB,gBAAL,EAJQ;AAKlBoB,MAAAA,gBAAgB,EAAE;AACdxW,QAAAA,oBAAoB,EAAE,KAAKzE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,GAA6C,KAAK3H,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAA5B,CAA2CC,GAA3C,CAA+CC,IAAI,IAAIA,IAAI,CAACpD,oBAA5D,EAAkFqD,IAAlF,CAAuF,GAAvF,CAA7C,GAA2I,IADnJ;AAEdjF,QAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB;AAFb,OALA;AASlBnB,MAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UATX;AAUlBwa,MAAAA,eAAe,EAAE,CAAC,OAAD,EAAU,cAAV,EAA0B,kBAA1B,EAA8C,cAA9C,EAA8D,aAA9D,EAA6E,eAA7E,EAA8F,eAA9F,EAA+G,qBAA/G,EAAsI,cAAtI,CAVC;AAWlBC,MAAAA,UAAU,EAAE,CAAC,gBAAD,EACR,qBADQ,EACe,iBADf,EACkC,sBADlC,EAER,iBAFQ,EAEW,4BAFX,EAEyC,yBAFzC,EAGR,wBAHQ,EAGkB,gBAHlB,CAXM;AAelBrW,MAAAA,0BAA0B,EAAE,KAAK9E,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BoE,0BAftC;AAgBlBD,MAAAA,iBAAiB,EAAE;AAhBD,KAAtB;AAoBA,SAAK2I,aAAL,GAAqB,CACjB;AACI8N,MAAAA,gBAAgB,EAAE,gBADtB;AAEIC,MAAAA,WAAW,EAAE,IAFjB;AAGIC,MAAAA,SAAS,EAAE,KAAKvW,eAHpB;AAII2D,MAAAA,eAAe,EAAE,WAJrB;AAKIiS,MAAAA,QAAQ,EAAE,2CALd;AAMII,MAAAA,gBAAgB,EAAEP,iBANtB;AAOIE,MAAAA,cAAc,EAAE,kBAPpB;AAQID,MAAAA,aAAa,EAAE,WARnB;AASIc,MAAAA,eAAe,EAAE,EATrB;AAUIX,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,GAAG,EAAE,KAAK7V,kBAAZ;AAAgC8V,QAAAA,qBAAqB,EAAE;AAAvD,OAAD,EAA+E;AAAED,QAAAA,GAAG,EAAE,KAAK5V,aAAZ;AAA2B6V,QAAAA,qBAAqB,EAAE;AAAlD,OAA/E,CAVf;AAWIU,MAAAA,YAAY,EAAE,CAAC,qBAAD,EAAwB,iBAAxB,EAA2C,kBAA3C,EAA+D,cAA/D,EAA+E,qBAA/E,EAAsG,iBAAtG,EACV,0BADU,EACkB,sBADlB,EAC0C,uBAD1C,EACmE,mBADnE,EACwF,UADxF,EACoG,QADpG,EAEV,kBAFU,EAEU,YAFV,EAEwB,SAFxB,EAEmC,YAFnC,EAEiD,iBAFjD,EAEoE,WAFpE,EAEiF,gBAFjF,EAEmG,cAFnG;AAXlB,KADiB,EAed;AACCJ,MAAAA,gBAAgB,EAAE,mBADnB;AAECG,MAAAA,eAAe,EAAE,kBAFlB;AAGCF,MAAAA,WAAW,EAAE,IAHd;AAICC,MAAAA,SAAS,EAAE,KAAKtW,kBAJjB;AAKC0D,MAAAA,eAAe,EAAE,wBALlB;AAMCiS,MAAAA,QAAQ,EAAE,2CANX;AAOCI,MAAAA,gBAAgB,EAAEV,cAPnB;AAQCK,MAAAA,cAAc,EAAE,qBARjB;AASCE,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,GAAG,EAAE,KAAK5V,aAAZ;AAA2B6V,QAAAA,qBAAqB,EAAE;AAAlD,OAAD,CATZ;AAUCL,MAAAA,aAAa,EAAE,cAVhB;AAWCe,MAAAA,YAAY,EAAE,CAAC,qBAAD,EAAwB,iBAAxB,EAA2C,kBAA3C,EAA+D,cAA/D,EAA+E,qBAA/E,EAAsG,iBAAtG,EACV,0BADU,EACkB,sBADlB,EAC0C,uBAD1C,EACmE,mBADnE,EACwF,UADxF,EACoG,QADpG,EAEV,kBAFU,EAEU,YAFV,EAEwB,SAFxB,EAEmC,YAFnC,EAEiD,iBAFjD,EAEoE,WAFpE,EAEiF,gBAFjF,EAEmG,cAFnG;AAXf,KAfc,EA6Bd;AACCJ,MAAAA,gBAAgB,EAAE,cADnB;AAECC,MAAAA,WAAW,EAAE,KAFd;AAGCC,MAAAA,SAAS,EAAE,KAAKrW,aAHjB;AAICyD,MAAAA,eAAe,EAAE,sBAJlB;AAKCiS,MAAAA,QAAQ,EAAE,KAAKhB,gBAAL,EALX;AAMCiB,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,GAAG,EAAE,KAAK7V,kBAAZ;AAAgC8V,QAAAA,qBAAqB,EAAE;AAAvD,OAAD,EAA+E;AAAED,QAAAA,GAAG,EAAE,KAAK9V,eAAZ;AAA6B+V,QAAAA,qBAAqB,EAAE;AAApD,OAA/E,CANZ;AAOCC,MAAAA,gBAAgB,EAAEjO,mBAPnB;AAQC4N,MAAAA,cAAc,EAAE,gBARjB;AASCD,MAAAA,aAAa,EAAE,SAThB;AAUCc,MAAAA,eAAe,EAAE,aAVlB;AAWCC,MAAAA,YAAY,EAAE,CAAC,qBAAD,EAAwB,iBAAxB,EAA2C,kBAA3C,EAA+D,cAA/D,EAA+E,qBAA/E,EAAsG,iBAAtG,EACV,0BADU,EACkB,sBADlB,EAC0C,uBAD1C,EACmE,mBADnE,EACwF,UADxF,EACoG,QADpG,EAEV,kBAFU,EAEU,YAFV,EAEwB,SAFxB,EAEmC,YAFnC,EAEiD,iBAFjD,EAEoE,WAFpE,EAEiF,gBAFjF,EAEmG,cAFnG;AAXf,KA7Bc,CAArB;AA8CA,SAAKC,cAAL,GAAsB,CAClB;AACI,eAAS,UADb;AAEI,eAAS7Y,GAAG,CAAC8Y;AAFjB,KADkB,EAIf;AACC,eAAS,QADV;AAEC,eAAS9Y,GAAG,CAAC+Y;AAFd,KAJe,EAQlB;AACI,eAAS,gBADb;AAEI,eAAS,KAAK7b,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwD,mBAA5B,IAAmD,KAAKlE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwD,mBAA5B,CAAgD4X,eAAnG,GAAqH,KAAK9b,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BwD,mBAA5B,CAAgD4X,eAArK,GAAuL;AAFpM,KARkB,EAWf;AACC,eAAS,sBADV;AAEC,eAAS,KAAK9b,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,IAAgD,KAAKnE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,CAA6C4X,YAA7F,GAA4G,KAAK/b,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,CAA6C4X,YAAzJ,GAAwK;AAFlL,KAXe,EAcf;AACC,eAAS,yBADV;AAEC,eAAS,KAAK/b,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,IAAmD,KAAKpE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,CAAgD4X,eAAnG,GAAqH,KAAKhc,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,CAAgD4X,eAArK,GAAuL;AAFjM,KAde,EAiBf;AACC,eAAS,mBADV;AAEC,eAAS,KAAKhc,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B2D,wBAA5B,IAAwD,KAAKrE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B2D,wBAA5B,CAAqD4X,YAA7G,GAA4H,KAAKjc,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B2D,wBAA5B,CAAqD4X,YAAjL,GAAgM;AAF1M,KAjBe,EAoBf;AACC,eAAS,kBADV;AAEC,eAAS,KAAKjc,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4D,qBAA5B,GAAoD,KAAKtE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4D,qBAA5B,CAAkD4X,aAAtG,GAAsH;AAFhI,KApBe,EAuBf;AACC,eAAS,UADV;AAEC,eAAS,KAAKlc,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6D,iBAA5B,IAAiD,KAAKvE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6D,iBAA5B,CAA8C4G,YAA/F,GAA8G,KAAKnL,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6D,iBAA5B,CAA8C4G,YAA5J,GAA2K;AAFrL,KAvBe,CAAtB;AA8BA,UAAMgR,WAAW,GAAG,KAAKpZ,KAAL,CAAWsF,UAAX,CAAsBC,GAAtB,CAA0B,WAA1B,KAA0C,KAAKvF,KAAL,CAAWsF,UAAX,CAAsBpB,GAAtB,CAA0B,WAA1B,EAAuCsB,YAArG;AACA,UAAM6T,aAAa,GAAG,KAAKrZ,KAAL,CAAWsF,UAAX,CAAsBC,GAAtB,CAA0B,aAA1B,KAA4C,KAAKvF,KAAL,CAAWsF,UAAX,CAAsBpB,GAAtB,CAA0B,aAA1B,EAAyCsB,YAA3G;AACA,UAAMgF,gBAAgB,GAAG,KAAKxK,KAAL,CAAWsF,UAAX,CAAsBC,GAAtB,CAA0B,gBAA1B,KAA+C,KAAKvF,KAAL,CAAWsF,UAAX,CAAsBpB,GAAtB,CAA0B,gBAA1B,EAA4CsB,YAApH;AACA,UAAM0E,YAAY,GAAG,KAAKlK,KAAL,CAAWsF,UAAX,CAAsBC,GAAtB,CAA0B,kBAA1B,KAAiD,KAAKvF,KAAL,CAAWsF,UAAX,CAAsBpB,GAAtB,CAA0B,kBAA1B,EAA8CsB,YAApH;AAEA,UAAM8T,kBAAkB,GAAG,KAAKtZ,KAAL,CAAWsF,UAAX,CAAsBC,GAAtB,CAA0B,kBAA1B,KAAiD,KAAKvF,KAAL,CAAWsF,UAAX,CAAsBpB,GAAtB,CAA0B,kBAA1B,EAA8CsB,YAA1H;AACA,UAAM+T,yBAAyB,GAAG,KAAKvZ,KAAL,CAAWsF,UAAX,CAAsBC,GAAtB,CAA0B,yBAA1B,KAAwD,KAAKvF,KAAL,CAAWsF,UAAX,CAAsBpB,GAAtB,CAA0B,yBAA1B,EAAqDsB,YAA/I;AACA,UAAMgU,uBAAuB,GAAG,KAAKxZ,KAAL,CAAWsF,UAAX,CAAsBC,GAAtB,CAA0B,uBAA1B,KAAsD,KAAKvF,KAAL,CAAWsF,UAAX,CAAsBpB,GAAtB,CAA0B,uBAA1B,EAAmDsB,YAAzI,CA/QK,CAgRL;AACA;;AAGA,UAAMiU,yBAAyB,GAAG,CAAC;AAAE,mBAAa,IAAf;AAAqB,iBAAW,wBAAhC;AAA0D,mBAAa;AAAvE,KAAD,EAClC;AAAE,mBAAa,IAAf;AAAqB,iBAAW,gBAAhC;AAAkD,mBAAa,iBAA/D;AAAkF,wBAAkB,YAApG;AAAkH,qBAAe;AAAjI,KADkC,EAElC;AAAE,mBAAa,IAAf;AAAqB,iBAAW,cAAhC;AAAgD,mBAAa,WAA7D;AAA0E,wBAAkB,YAA5F;AAA0G,qBAAe;AAAzH,KAFkC,EAGlC;AAAE,mBAAa,IAAf;AAAqB,iBAAW,YAAhC;AAA8C,mBAAa,SAA3D;AAAsE,wBAAkB,YAAxF;AAAsG,qBAAe;AAArH,KAHkC,EAIlC;AAAE,mBAAa,IAAf;AAAqB,iBAAW,cAAhC;AAAgD,mBAAa,aAA7D;AAA4E,wBAAkB,YAA9F;AAA4G,qBAAe;AAA3H,KAJkC,EAKlC;AAAE,mBAAa,IAAf;AAAqB,iBAAW,cAAhC;AAAgD,mBAAa,WAA7D;AAA0E,wBAAkB,YAA5F;AAA0G,qBAAe;AAAzH,KALkC,CAAlC;AAOA,UAAMC,mBAAmB,GAAG,CAAC;AAAE,mBAAa,IAAf;AAAqB,iBAAW,qBAAhC;AAAuD,mBAAa,kBAApE;AAAwF,wBAAkB,WAA1G;AAAuH,qBAAe;AAAtI,KAAD,EAC5B;AAAE,mBAAa,IAAf;AAAqB,iBAAW,qBAAhC;AAAuD,mBAAa,kBAApE;AAAwF,wBAAkB,WAA1G;AAAuH,qBAAe;AAAtI,KAD4B,EAE5B;AAAE,mBAAa,IAAf;AAAqB,iBAAW,kBAAhC;AAAoD,mBAAa,eAAjE;AAAkF,wBAAkB,WAApG;AAAiH,qBAAe;AAAhI,KAF4B,EAG5B;AAAE,mBAAa,IAAf;AAAqB,iBAAW,cAAhC;AAAgD,mBAAa,WAA7D;AAA0E,wBAAkB,WAA5F;AAAyG,qBAAe;AAAxH,KAH4B,CAIxB;AAJwB,KAA5B;AAOA,UAAMC,+BAA+B,GAAG,CAAC;AAAE,mBAAa,IAAf;AAAqB,iBAAW,YAAhC;AAA8C,mBAAa,aAA3D;AAA0E,wBAAkB,YAA5F;AAA0G,qBAAe;AAAzH,KAAD,EACxC;AAAE,mBAAa,IAAf;AAAqB,iBAAW,YAAhC;AAA8C,mBAAa,aAA3D;AAA0E,wBAAkB,YAA5F;AAA0G,qBAAe;AAAzH,KADwC,CAAxC,CAlSK,CAqSL;AACA;;AACA,UAAMC,wBAAwB,GAAG,CAAC;AAAE,mBAAa,IAAf;AAAqB,iBAAW,uBAAhC;AAAyD,mBAAa,gBAAtE;AAAwF,wBAAkB,WAA1G;AAAuH,qBAAe;AAAtI,KAAD,CAAjC;AACA,UAAMpb,0BAA0B,GAAG,KAAKwB,KAAL,CAAWxB,0BAA9C,CAxSK,CA0SL;AACA;AACA;AACA;;AAEA,UAAMqb,eAAe,GAAG,KAAK7Z,KAAL,CAAWsF,UAAX,CAAsBC,GAAtB,CAA0B,qBAA1B,KAAoD,KAAKvF,KAAL,CAAWsF,UAAX,CAAsBpB,GAAtB,CAA0B,qBAA1B,EAAiDsB,YAA7H;AACA,wBACI,uDAEI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,iDAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,mBAAD;AAAqB,MAAA,cAAc,EAAE,KAAKoT,cAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAa,MAAA,SAAS,EAAC,oBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AAAgB,MAAA,WAAW,EAAC,MAA5B;AAAmC,MAAA,UAAU,EAAE,IAA/C;AAAqD,MAAA,YAAY,EAAE,CAAnE;AAAsE,MAAA,oBAAoB,EAAE,KAAK5Y,KAAL,CAAW3C,0BAAvG;AAAmI,MAAA,yBAAyB,EAAE,KAAKH,cAAnK;AAAmL,MAAA,cAAc,EAAE,EAAnM;AAAuM,MAAA,gBAAgB,EAAE,EAAzN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,yBAAD,CACI;AADJ;AAEI,MAAA,0BAA0B,EAAE,KAAK8C,KAAL,CAAW3C,0BAF3C;AAGI,MAAA,UAAU,EAAE,KAAKJ,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4Bmc,cAA5B,IAA8C7C,YAH9D;AAII,MAAA,cAAc,EAAE,KAAKha,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAJhD;AAKI,MAAA,eAAe,EAAC,WALpB;AAMI,MAAA,eAAe,EAAE,KAAKpK,KAAL,CAAWtG,oBANhC;AAOI,MAAA,UAAU,EAAE4gB,mBAPhB;AAQI,MAAA,eAAe,EAAE,CAAC,sBAAD,CARrB;AASI,MAAA,SAAS,EAAC,OATd;AAUI,MAAA,gBAAgB,EAAC,kBAVrB;AAWI,MAAA,UAAU,EAAC,QAXf;AAYI,MAAA,QAAQ,EAAC,YAZb;AAaI,MAAA,cAAc,EAAE,KAbpB;AAcI,MAAA,aAAa,EAAC,sBAdlB;AAeI,MAAA,iBAAiB,EAAC,0CAftB;AAgBI,MAAA,SAAS,EAAE,KAAKvX,KAAL,CAAW+Z,oBAAX,IAAmC,EAhBlD;AAiBI,MAAA,SAAS,EAAE,KAAK/Z,KAAL,CAAWga,eAjB1B;AAkBI,MAAA,UAAU,EAAE,IAlBhB;AAmBI,MAAA,eAAe,EAAE,IAnBrB;AAoBI,MAAA,UAAU,EAAE,KAAK/c,KAAL,CAAWS,KAAX,CAAiBwL,UApBjC;AAqBI,MAAA,UAAU,EAAE,KAAK+Q,UArBrB;AAsBI,MAAA,WAAW,EAAE,KAAKhR,WAtBtB;AAuBI,MAAA,cAAc,EAAE,KAAKhG,gBAvBzB;AAwBI,MAAA,gBAAgB,EAAE,KAAKhG,KAAL,CAAWrE,qBAxBjC;AAyBI,MAAA,cAAc,EAAC,gBAzBnB;AA0BI,MAAA,SAAS,EAAE,KAAKsJ,eA1BpB;AA2BI,MAAA,gBAAgB,EAAE,KAAKiH,gBA3B3B;AA4BI,MAAA,WAAW,EAAEwO,iBA5BjB;AA6BI,MAAA,IAAI,EAAE,KAAK3X,KAAL,CAAWoJ,IA7BrB;AA8BI,MAAA,IAAI,EAAE,KAAKpJ,KAAL,CAAWqJ,IA9BrB;AA+BI,MAAA,UAAU,EAAE,KA/BhB;AAgCI,MAAA,cAAc,EAAE,IAhCpB;AAiCI,MAAA,cAAc,EAAE,IAjCpB;AAkCI,MAAA,eAAe,EAAC,qBAlCpB;AAmCI,MAAA,WAAW,EAAC,oBAnChB;AAoCI,MAAA,kBAAkB,EAAC,eApCvB;AAqCI,MAAA,cAAc,EAAE,KAAKrJ,KAAL,CAAW3C,0BAAX,IAAyC,KAAK2C,KAAL,CAAW3C,0BAAX,GAAwC,EAAjF,GAAsF,YAAtF,GAAqG,KAAK2C,KAAL,CAAW3C,0BAAX,GAAwC,EAAxC,GAA6C,UAA7C,GAA0D,EArCnL;AAsCI,MAAA,YAAY,EAAE,CAAC,wBAAD,EAA2B,cAA3B,EAA2C,SAA3C,EAAsD,uBAAtD,CAtClB;AAuCI,MAAA,aAAa,EAAE,KAAK2C,KAAL,CAAWka,cAvC9B;AAwCI,MAAA,mBAAmB,EAAC,eAxCxB;AAyCI,MAAA,cAAc,EAAC,oBAzCnB;AA0CI,MAAA,SAAS,EAAE,UA1Cf;AA2CI,MAAA,gBAAgB,EAAE,IA3CtB;AA4CI,MAAA,eAAe,EAAE,CACb;AACI,sCAAiB,oBAAC,iBAAD;AACb,UAAA,QAAQ,EAAE,KAAKjd,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BsB,QAA5B,GAAuC;AAC7CvC,UAAAA,mBAAmB,CAAC,KAAKO,KAAL,CAAWS,KAAX,CAAiBoB,QAAlB,EAA4B,KAAK7B,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BsB,QAAxD,CADb,GAEJ,IAAIqO,IAAJ,EAHO;AAIb,UAAA,MAAM,EAAE,KAAKrQ,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BkB,MAA5B,GAAqC;AACzCnC,UAAAA,mBAAmB,CAAC,KAAKO,KAAL,CAAWS,KAAX,CAAiBoB,QAAlB,EAA4B,KAAK7B,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BkB,MAAxD,CADf,GAEF,IAAIyO,IAAJ,EANO;AAOb,UAAA,UAAU,EAAE,KAAKtN,KAAL,CAAWma,UAAX,IAAyB,EAPxB;AAQb,UAAA,eAAe,EAAE,KAAKld,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0B,iBAA5B,IAAiD,EARrD;AASb,UAAA,OAAO,EAAE,KAAKW,KAAL,CAAW5F,gBAAX,IAA+B,EAT3B;AAUb,UAAA,YAAY,EAAE,KAAK6C,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4B,uBAA5B,IAAuD,EAVxD;AAWb,UAAA,UAAU,EAAE,KAAKS,KAAL,CAAW3F,mBAAX,IAAkC,EAXjC;AAYb,UAAA,eAAe,EAAE,KAAK4C,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B8B,0BAA5B,IAA0D,EAZ9D;AAab,UAAA,YAAY,EAAE,KAAKO,KAAL,CAAWoa,cAAX,IAA6B,EAb9B;AAcb,UAAA,iBAAiB,EAAE,KAAKnd,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiC,mBAA5B,IAAmD,EAdzD;AAeb,UAAA,eAAe,EAAE,KAAKI,KAAL,CAAWqa,qBAAX,IAAoC,EAfxC;AAgBb,UAAA,oBAAoB,EAAE,KAAKpd,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByC,4BAA5B,IAA4D,EAhBrE;AAiBb,UAAA,WAAW,EAAE,KAAKJ,KAAL,CAAWsa,WAAX,IAA0B,EAjB1B;AAkBb,UAAA,cAAc,EAAE,KAAKrd,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4C,gBAA5B,IAAgD,EAlBnD;AAmBb,UAAA,IAAI,EAAE,KAAKP,KAAL,CAAWua,UAAX,IAAyB,EAnBlB;AAoBb,UAAA,SAAS,EAAE,KAAKtd,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B6C,iBAA5B,IAAiD,EApB/C;AAqBb,UAAA,mBAAmB,EAAE,KAAK/B,mBArBb;AAsBb,UAAA,gBAAgB,EAAE,KAAK0O,gBAtBV;AAuBb,UAAA,QAAQ,EAAE,KAAKlQ,KAAL,CAAWS,KAAX,CAAiBoB,QAvBd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADrB,OADa,CA5CrB;AAyEI,MAAA,WAAW,EACP,CAAC,KAAK7B,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,IAAgD,KAAKnE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,CAA6C9B,YAA7C,KAA8DlF,gBAAgB,CAACogB,WAA/H,GACG;AACIC,QAAAA,KAAK,EAAE,QADX;AAEIC,QAAAA,WAAW,EAAE,SAFjB;AAGIC,QAAAA,UAAU,EAAE,QAHhB;AAIIC,QAAAA,MAAM,EAAE,KAAK5a,KAAL,CAAW+F,qBAAX,CAAiC8U,OAAjC,CAAyChB,eAAzC,MAA8D,CAAC,CAJ3E;AAKIiB,QAAAA,OAAO,EAAE,KAAK7d,KAAL,CAAW9D,mBALxB;AAMIwF,QAAAA,SAAS,EAAE;AACPmB,UAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAWS,KAAX,CAAiBoB,QADpB;AAEP0G,UAAAA,YAAY,EAAEqU;AAFP;AANf,OADH,GAWO,EAXR,CA1ER;AAwFI,MAAA,aAAa,eACT,uDAEI,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAC,qDAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAGI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,kCAAlB;AAAqD,QAAA,OAAO,EAAC,MAA7D;AACI,QAAA,OAAO,EAAE,MAAM,KAAK7Y,QAAL,EADnB;AAEI,oBAAS,qBAFb;AAGI,oBAAU,KAAK/D,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAII,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEnN,MAAvB;AAA+B,QAAA,KAAK,EAAE;AAAE,mBAAS;AAAX,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CAHJ,CAFJ,CAzFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EA0GK,KAAKoH,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BuF,cAA5B,gBACG,oBAAC,SAAD;AAAW,MAAA,GAAG,EAAG8U,GAAD,IAAS;AAAE,aAAKzO,aAAL,GAAqByO,GAArB;AAA2B,OAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AACI,MAAA,eAAe,EAAC,gBADpB;AAEI,MAAA,QAAQ,MAFZ;AAGI,MAAA,WAAW,EAAC,MAHhB;AAII,MAAA,YAAY,EAAE,CAJlB;AAKI,MAAA,yBAAyB,EAAE,KAAKlO,sBALpC;AAMI,MAAA,oBAAoB,EAAE,GAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,KAAK,EAAE,KAAK9J,KAAL,CAAW4B,QAAX,KAAwB,IAAxB,GAA+B;AAAEmZ,QAAAA,OAAO,EAAE,OAAX;AAAoBC,QAAAA,UAAU,EAAE;AAAhC,OAA/B,GAA2E;AAAED,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,UAAU,EAAE;AAA/B,OAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AAAgB,MAAA,WAAW,EAAC,MAA5B;AACI,MAAA,YAAY,EAAE,CADlB;AACqB,MAAA,UAAU,EAAE,IADjC;AAEI,MAAA,oBAAoB,EAAE,KAAKhb,KAAL,CAAW3C,0BAFrC;AAGI,MAAA,yBAAyB,EAAE,KAAKH,cAHpC;AAII,MAAA,cAAc,EAAE,EAJpB;AAKI,MAAA,gBAAgB,EAAE,EALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE;AAAE+d,QAAAA,YAAY,EAAE;AAAhB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,KAAK,EAAE;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4B,KAAK9d,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAA5B,CADJ,CADJ,CADJ,eAMI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,SAAS,EAAC,mBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,yBAAD;AACI,MAAA,UAAU,EAAE,KAAKhD,KAAL,CAAW+J,oBAD3B;AAEI,MAAA,UAAU,EAAE,KAAK9M,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4Bud,iBAA5B,IAAiDhE,eAFjE;AAGI,MAAA,cAAc,EAAE,KAAKja,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BmK,mBAHhD;AAII,MAAA,eAAe,EAAC,wBAJpB;AAKI,MAAA,eAAe,EAAE,KAAK7K,KAAL,CAAWrG,eALhC;AAMI,MAAA,UAAU,EAAE4gB,cANhB;AAOI,MAAA,eAAe,EAAE,EAPrB;AAQI,MAAA,SAAS,EAAC,aARd;AASI,MAAA,gBAAgB,EAAC,qBATrB;AAUI,MAAA,UAAU,EAAC,WAVf;AAWI,MAAA,QAAQ,EAAC,eAXb;AAYI,MAAA,SAAS,EAAE,UAZf;AAaI,MAAA,gBAAgB,EAAE,IAbtB;AAcI,MAAA,SAAS,EAAE,KAAKxX,KAAL,CAAWmb,uBAd1B;AAeI,MAAA,SAAS,EAAE,KAAKnb,KAAL,CAAWob,kBAf1B;AAgBI,MAAA,cAAc,EAAE,KAhBpB;AAiBI,MAAA,eAAe,EAAE,IAjBrB;AAkBI,MAAA,UAAU,EAAE,KAlBhB;AAmBI,MAAA,IAAI,EAAE,KAAKpb,KAAL,CAAW0J,aAnBrB;AAoBI,MAAA,IAAI,EAAE,KAAK1J,KAAL,CAAW2J,aApBrB;AAqBI,MAAA,gBAAgB,EAAE,KAAKF,yBArB3B;AAsBI,MAAA,cAAc,EAAE,IAtBpB;AAuBI,MAAA,cAAc,EAAE,IAvBpB;AAwBI,MAAA,eAAe,EAAC,qBAxBpB;AAyBI,MAAA,WAAW,EAAC,oBAzBhB;AA0BI,MAAA,YAAY,EAAE,CAAC,SAAD,CA1BlB;AA2BI,MAAA,gBAAgB,EAAE,KAAKxM,KAAL,CAAWrE,qBA3BjC;AA4BI,MAAA,cAAc,EAAC,mBA5BnB;AA6BI,MAAA,SAAS,EAAE,KAAKuJ,kBA7BpB;AA8BI,MAAA,WAAW,EAAEkW,oBA9BjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CANJ,CAPJ,eAgDI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE;AAAE4C,QAAAA,YAAY,EAAE;AAAhB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,KAAK,EAAE;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4B,KAAK9d,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAA5B,CADJ,CADJ,eAII;AAAQ,MAAA,SAAS,EAAC,2BAAlB;AAA8C,MAAA,KAAK,EAAE;AAAEqY,QAAAA,KAAK,EAAE;AAAT,OAArD;AACI,MAAA,OAAO,EAAE,MAAM,KAAK7W,gBAAL,EADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE9O,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAEqD,IAFrD,EAGK,KAAKuH,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAHL,CAJJ,CADJ,eAWI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,SAAS,EAAC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,yBAAD;AACI,MAAA,UAAU,EAAE,KAAKhD,KAAL,CAAW+J,oBAD3B,CAEI;AAFJ;AAGI,MAAA,UAAU,EAAE,KAAK9M,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B2d,YAA5B,IAA4ClE,UAH5D;AAII,MAAA,cAAc,EAAE,KAAKna,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAJhD;AAKI,MAAA,eAAe,EAAC,sBALpB;AAMI,MAAA,eAAe,EAAE,KAAK3H,KAAL,CAAWpG,uBANhC;AAOI,MAAA,UAAU,EAAEoT,mBAPhB;AAQI,MAAA,eAAe,EAAE,EARrB;AASI,MAAA,SAAS,EAAC,cATd;AAUI,MAAA,gBAAgB,EAAC,gBAVrB;AAWI,MAAA,UAAU,EAAC,MAXf;AAYI,MAAA,QAAQ,EAAC,UAZb;AAaI,MAAA,QAAQ,EAAE,KAAKhN,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,IAA6B,KAAKxY,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,CAA0B,EAA1B,EAA8B5D,KAA9B,CAAoC,GAApC,EAAyChN,GAAzC,CAA6C0W,OAAO,IAAInc,QAAQ,CAACmc,OAAD,CAAhE,CAb3C;AAcI,MAAA,cAAc,EAAE,IAdpB;AAeI,MAAA,eAAe,EAAC,qBAfpB;AAgBI,MAAA,WAAW,EAAC,oBAhBhB;AAiBI,MAAA,eAAe,EAAE,IAjBrB;AAkBI,MAAA,SAAS,EAAE,KAAKvb,KAAL,CAAW+V,eAAX,IAA8B,EAlB7C;AAmBI,MAAA,SAAS,EAAE,KAAK/V,KAAL,CAAWuW,aAnB1B;AAoBI,MAAA,cAAc,EAAE,KApBpB;AAqBI,MAAA,UAAU,EAAE,KArBhB;AAsBI,MAAA,gBAAgB,EAAE,KAAKtZ,KAAL,CAAWrE,qBAtBjC;AAuBI,MAAA,cAAc,EAAC,cAvBnB;AAwBI,MAAA,SAAS,EAAE,KAAKwJ,aAxBpB;AAyBI,MAAA,WAAW,EAAEkW,eAzBjB;AA0BI,MAAA,cAAc,EAAC,oBA1BnB;AA2BI,MAAA,cAAc,EAAE,IA3BpB;AA4BI,MAAA,kBAAkB,EAAC,eA5BvB;AA6BI,MAAA,YAAY,EAAE,CAAC,gBAAD,EAAmB,sBAAnB,EAA2C,iBAA3C,EAA8D,4BAA9D,EACV,qBADU,EACa,yBADb,EACwC,qBADxC,CA7BlB;AA+BI,MAAA,aAAa,EAAE,KAAKrb,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4Byc,cAA5B,IAA8C,KAAKnd,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4D,qBAA1E,IAAmG,KAAKtE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4D,qBAA5B,CAAkD1B,kBAAlD,KAAyE1F,iBAAiB,CAACqhB,GAA9L,GAAoM,KAAKve,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4Byc,cAAhO,GAAiP,EA/BpQ;AAgCI,MAAA,IAAI,EAAE,KAAKpa,KAAL,CAAWgF,QAhCrB;AAiCI,MAAA,IAAI,EAAE,KAAKhF,KAAL,CAAWiF,QAjCrB;AAkCI,MAAA,gBAAgB,EAAE,KAAK2E,oBAlC3B;AAmCI,MAAA,mBAAmB,EAAC,eAnCxB;AAoCI,MAAA,iBAAiB,EAAE,IApCvB;AAqCI,MAAA,qBAAqB,EAAC,WArC1B;AAsCI,MAAA,WAAW,EAAE,CAtCjB;AAuCI,MAAA,SAAS,EAAE,UAvCf;AAwCI,MAAA,gBAAgB,EAAE,IAxCtB;AAyCI,MAAA,WAAW,EACP,CAAC;AAAE6Q,QAAAA,KAAK,EAAE,KAAKxd,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAT;AAAyE0X,QAAAA,WAAW,EAAE,aAAtF;AAAqGe,QAAAA,SAAS,EAAE,MAAhH;AAAwHb,QAAAA,MAAM,EAAE,KAAK5a,KAAL,CAAW+F,qBAAX,CAAiC8U,OAAjC,CAAyCvB,kBAAzC,MAAiE,CAAC,CAAlM;AAAqMwB,QAAAA,OAAO,EAAE,KAAK7jB,oBAAnN;AAAyO0jB,QAAAA,UAAU,EAAE,MAArP;AAA6Phc,QAAAA,SAAS,EAAE;AAAEhB,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAA/B;AAA2CmB,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB,QAAtE;AAAgFwa,UAAAA;AAAhF;AAAxQ,OAAD,EACA;AAAEmB,QAAAA,KAAK,EAAE,KAAKxd,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAT;AAAqE0X,QAAAA,WAAW,EAAE,cAAlF;AAAkGE,QAAAA,MAAM,EAAE,KAAK5a,KAAL,CAAW+F,qBAAX,CAAiC8U,OAAjC,CAAyCtB,yBAAzC,MAAwE,CAAC,CAAnL;AAAsLuB,QAAAA,OAAO,EAAE,KAAK5jB,eAApM;AAAqNyjB,QAAAA,UAAU,EAAE,MAAjO;AAAyOhc,QAAAA,SAAS,EAAE;AAAEhB,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAA/B;AAA2CmB,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB,QAAtE;AAAgFya,UAAAA;AAAhF;AAApP,OADA,EAEA;AAAEkB,QAAAA,KAAK,EAAE,KAAKxd,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAT;AAAmE0X,QAAAA,WAAW,EAAE,SAAhF;AAA2FE,QAAAA,MAAM,EAAE,KAAK5a,KAAL,CAAW+F,qBAAX,CAAiC8U,OAAjC,CAAyCrB,uBAAzC,MAAsE,CAAC,CAA1K;AAA6KsB,QAAAA,OAAO,EAAE,KAAK7d,KAAL,CAAW9F,aAAjM;AAAgNwjB,QAAAA,UAAU,EAAE,MAA5N;AAAoOhc,QAAAA,SAAS,EAAE;AAAEhB,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAA/B;AAA2CmB,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB,QAAtE;AAAgF0a,UAAAA;AAAhF;AAA/O,OAFA,CAGI;AAHJ,OA1CR;AAgDI,MAAA,aAAa;AAAA;AACT;AACA,0BAAC,WAAD;AAAa,QAAA,SAAS,EAAC,4CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKpC,UAAU,CAAC1P,MAAX,GAAoB,CAApB,gBACG,uDAEI,oBAAC,GAAD,CAAK,IAAL;AAAU,oBAAS,qBAAnB;AAAyC,oBAAU,KAAKzK,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAnD;AAA2G,QAAA,MAAM,EAAE,KAAKhD,KAAL,CAAW+F,qBAAX,CAAiC8U,OAAjC,CAAyCzB,WAAzC,MAA0D,CAAC,CAA9K;AAAiL,QAAA,SAAS,EAAC,kCAA3L;AAA8N,QAAA,IAAI,EAAC,QAAnO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAE7jB,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFJ,eAKI,oBAAC,GAAD,CAAK,IAAL;AAAU,oBAAS,qBAAnB;AAAyC,oBAAU,KAAK0H,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAnD;AAA6G,QAAA,MAAM,EAAE,KAAKhD,KAAL,CAAW+F,qBAAX,CAAiC8U,OAAjC,CAAyCxB,aAAzC,MAA4D,CAAC,CAAlL;AAAqL,QAAA,SAAS,EAAC,kCAA/L;AAAkO,QAAA,IAAI,EAAC,QAAvO;AAAgP,QAAA,OAAO,EAAE,MAAM,KAAKpc,KAAL,CAAWnG,eAAX,CAA2B,KAAKmG,KAAL,CAAWS,KAAX,CAAiBC,UAA5C,EAAwD,KAAKV,KAAL,CAAWS,KAAX,CAAiBoB,QAAzE,EAAmFua,aAAnF,EAAkG,KAAKrZ,KAAL,CAAWgF,QAA7G,EAAuH,KAAKhF,KAAL,CAAWiF,QAAlI,CAA/P;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEzP,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CALJ,eAQI,oBAAC,GAAD,CAAK,IAAL;AAAU,oBAAS,qBAAnB;AAAyC,oBAAU,KAAKyH,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAnD;AAAmH,QAAA,MAAM,EAAE,KAAKhD,KAAL,CAAW+F,qBAAX,CAAiC8U,OAAjC,CAAyC3Q,YAAzC,MAA2D,CAAC,CAAvL;AAA0L,QAAA,SAAS,EAAC,kCAApM;AAAuO,QAAA,IAAI,EAAC,QAA5O;AAAqP,QAAA,OAAO,EAAE,MAAM,KAAKF,cAAL,CAAoBC,mBAApB,EAAyC,KAAKhN,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAArE,EAAqF,KAAK3H,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAAjH,EAAmI6C,YAAnI,EAAiJ,KAAKlK,KAAL,CAAWgF,QAA5J,EAAsK,KAAKhF,KAAL,CAAWiF,QAAjL,CAApQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEtP,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CARJ,eAWI,oBAAC,GAAD,CAAK,IAAL;AAAU,oBAAS,qBAAnB;AAAyC,oBAAU,KAAKsH,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAnD;AAA0G,QAAA,MAAM,EAAE,KAAKhD,KAAL,CAAW+F,qBAAX,CAAiC8U,OAAjC,CAAyCrQ,gBAAzC,MAA+D,CAAC,CAAlL;AAAqL,QAAA,SAAS,EAAC,kCAA/L;AAAkO,QAAA,IAAI,EAAC,QAAvO;AAAgP,QAAA,OAAO,EAAE,MAAM,KAAKD,eAAL,CAAqBN,mBAArB,EAA0C,KAAKhN,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAAtE,EAAsF,KAAK3H,KAAL,CAAWS,KAAX,CAAiBoB,QAAvG,EAAiH0L,gBAAjH,EAAmI,KAAKxK,KAAL,CAAWgF,QAA9I,EAAwJ,KAAKhF,KAAL,CAAWiF,QAAnK,CAA/P;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAExP,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAXJ,eAcI,oBAAC,GAAD,CAAK,IAAL;AAAU,oBAAS,qBAAnB;AAAyC,oBAAU,KAAKwH,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAnD;AAA8G,QAAA,MAAM,EAAE,KAAKhD,KAAL,CAAW+F,qBAAX,CAAiC8U,OAAjC,CAAyCrQ,gBAAzC,MAA+D,CAAC,CAAtL;AAAyL,QAAA,SAAS,EAAC,kCAAnM;AAAsO,QAAA,IAAI,EAAC,QAA3O;AAAoP,QAAA,OAAO,EAAE,MAAM,KAAKxB,YAAL,CAAkBiB,mBAAlB,EAAuC,KAAKhN,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAAnE,EAAmF,KAAK3H,KAAL,CAAWS,KAAX,CAAiBoB,QAApG,EAA8G0L,gBAA9G,EAAgI,KAAKxK,KAAL,CAAWgF,QAA3I,EAAqJ,KAAKhF,KAAL,CAAWiF,QAAhK,CAAnQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAErP,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAdJ,CADH,GAmBK,EApBV,CAFS,CAyBT;AAzER;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAXJ,CADJ,CAhDJ,CADJ,CADJ,eAkJI,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAE,KAAKoK,KAAL,CAAW6B,UAAX,KAA0B,IAA1B,GAAiC;AAAEkZ,QAAAA,OAAO,EAAE;AAAX,OAAjC,GAAwD;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,SAAS,EAAC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE;AAAEE,QAAAA,YAAY,EAAE;AAAhB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,KAAK,EAAE;AAAEF,QAAAA,OAAO,EAAE,cAAX;AAA2BW,QAAAA,SAAS,EAAE;AAAtC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKze,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAAN,CADJ,CADJ,eAII;AAAQ,MAAA,SAAS,EAAC,iBAAlB;AAAoC,MAAA,KAAK,EAAE;AAAEqY,QAAAA,KAAK,EAAE;AAAT,OAA3C;AACI,MAAA,OAAO,EAAE,MAAM,KAAK7E,cAAL,EADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE9gB,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAEqD,IAFrD,EAGK,KAAKuH,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAHL,CAJJ,CADJ,eAWI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK/F,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,IAAgD,KAAKpK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,CAA6CK,MAA7C,KAAwD,CAAxG,gBACG,oBAAC,cAAD;AACI,MAAA,IAAI,EAAE,KAAKzK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,IAAgD,KAAKpK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,CAA6CK,MAA7C,GAAsD,CAAtG,GACA,KAAKzK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,CAA6C,KAAKpK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,CAA6CK,MAA7C,GAAsD,CAAnG,CADA,GACwG,EAFlH;AAGI,MAAA,UAAU,EAAE,KAAK1H,KAAL,CAAWiW,UAH3B;AAKI,MAAA,UAAU,EAAC,gBALf;AAMI,MAAA,QAAQ,EAAE,KAAKhZ,KAAL,CAAWS,KAAX,CAAiBoB,QAN/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,gBASG,oBAAC,cAAD;AACI,MAAA,cAAc,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBADhD;AAEI,MAAA,SAAS,EAAE,KAAKrH,KAAL,CAAWgH,mBAF1B;AAGI,MAAA,eAAe,EAAE,KAAKC,yBAH1B;AAII,MAAA,mBAAmB,EAAE,KAAK0U,iBAAL,CAAuB,KAAK3b,KAAL,CAAW4b,eAAlC,KAAsD,EAJ/E;AAKI,MAAA,iBAAiB,EAAE,KAAKD,iBAAL,CAAuB,KAAK3b,KAAL,CAAW6b,oBAAlC,KAA2D,EALlF;AAMI,MAAA,QAAQ,EAAE,KAAK5e,KAAL,CAAWS,KAAX,CAAiBoB,QAN/B;AAOI,MAAA,UAAU,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBiI,UAPjC;AAQI,MAAA,UAAU,EAAC,gBARf;AASI,MAAA,SAAS,EAAE,UATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVR,CAXJ,CADJ,CADJ,CADJ,CAlJJ,CARJ,eAqMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,KAAK,EAAE;AAAEgR,QAAAA,MAAM,EAAE,mBAAmB,CAAC,KAAK3W,KAAL,CAAW+J,oBAAZ,GAAmC,GAAtD,IAA6D;AAAvE,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK/J,KAAL,CAAW4B,QAAX,gBACG,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAE,KAAK3E,KAAL,CAAWS,KAAX,CAAiBiE,aAAjB,IAAkC,aAAzD;AACI,MAAA,SAAS,EAAE,KAAK8C,eAAL,EADf;AACuC,MAAA,WAAW,EAAE,KAAKuD,eADzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,gBAIG,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAE,KAAKd,eAAL,EAAvB;AAA+C,MAAA,WAAW,EAAE,KAAKM,iBAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALR,CADJ,CADJ,CArMJ,CADJ,CADH,gBAsNG,oBAAC,gBAAD;AAAkB,MAAA,GAAG,EAAGwQ,GAAD,IAAS;AAAE,aAAKzO,aAAL,GAAqByO,GAArB;AAA2B,OAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,cAAD;AAAgB,MAAA,QAAQ,MAAxB;AAAyB,MAAA,WAAW,EAAC,MAArC;AAA4C,MAAA,UAAU,EAAE,IAAxD;AAA8D,MAAA,YAAY,EAAE,CAA5E;AAA+E,MAAA,oBAAoB,EAAE,GAArG;AACI,MAAA,eAAe,EAAC,mBADpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,uDAEI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAE,KAAKhY,KAAL,CAAW4B,QAAX,KAAwB,IAAxB,GAA+B;AAAEmZ,QAAAA,OAAO,EAAE;AAAX,OAA/B,GAAsD;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,SAAS,EAAC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE;AAAEE,QAAAA,YAAY,EAAE;AAAhB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,KAAK,EAAE;AAAEF,QAAAA,OAAO,EAAE,cAAX;AAA2BW,QAAAA,SAAS,EAAE;AAAtC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKze,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAAN,CADJ,CADJ,eAII;AAAQ,MAAA,SAAS,EAAC,iBAAlB;AAAoC,MAAA,KAAK,EAAE;AAAEqY,QAAAA,KAAK,EAAE;AAAT,OAA3C;AACI,MAAA,OAAO,EAAE,MAAM,KAAK7W,gBAAL,EADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE9O,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAEqD,IAFrD,EAGK,KAAKuH,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAHL,CAJJ,CADJ,eAWI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,SAAS,EAAC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,yBAAD;AACI,MAAA,UAAU,EAAG,GAAEoU,UAAU,IAAIA,UAAU,KAAK,IAA7B,IAAqCA,UAAU,CAAC1P,MAAX,GAAoB,CAAzD,GAA6D0P,UAAU,CAAC1P,MAAX,GAAoB,EAAjF,GAAsF,CAAE,IAD3G;AAEI,MAAA,UAAU,EAAE,KAAKzK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B2d,YAA5B,IAA4ClE,UAF5D;AAGI,MAAA,cAAc,EAAE,KAAKna,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAHhD;AAII,MAAA,eAAe,EAAC,sBAJpB;AAKI,MAAA,eAAe,EAAE,KAAK3H,KAAL,CAAWpG,uBALhC;AAMI,MAAA,UAAU,EAAEoT,mBANhB;AAOI,MAAA,eAAe,EAAE,EAPrB;AAQI,MAAA,SAAS,EAAC,cARd;AASI,MAAA,gBAAgB,EAAC,gBATrB;AAUI,MAAA,UAAU,EAAC,MAVf;AAWI,MAAA,QAAQ,EAAC,UAXb;AAYI,MAAA,QAAQ,EAAE,KAAKhN,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,IAA6B,KAAKxY,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,CAA0B,EAA1B,EAA8B5D,KAA9B,CAAoC,GAApC,EAAyChN,GAAzC,CAA6C0W,OAAO,IAAInc,QAAQ,CAACmc,OAAD,CAAhE,CAZ3C;AAaI,MAAA,cAAc,EAAE,IAbpB;AAcI,MAAA,eAAe,EAAC,qBAdpB;AAeI,MAAA,WAAW,EAAC,oBAfhB;AAgBI,MAAA,eAAe,EAAE,IAhBrB;AAiBI,MAAA,SAAS,EAAE,KAAKvb,KAAL,CAAW+V,eAAX,IAA8B,EAjB7C;AAkBI,MAAA,SAAS,EAAE,KAAK/V,KAAL,CAAWuW,aAlB1B;AAmBI,MAAA,cAAc,EAAE,KAnBpB;AAoBI,MAAA,UAAU,EAAE,KApBhB;AAqBI,MAAA,gBAAgB,EAAE,KAAKtZ,KAAL,CAAWrE,qBArBjC;AAsBI,MAAA,cAAc,EAAC,cAtBnB;AAuBI,MAAA,SAAS,EAAE,KAAKwJ,aAvBpB;AAwBI,MAAA,WAAW,EAAEkW,eAxBjB;AAyBI,MAAA,cAAc,EAAC,oBAzBnB;AA0BI,MAAA,cAAc,EAAE,IA1BpB;AA2BI,MAAA,kBAAkB,EAAC,eA3BvB;AA4BI,MAAA,YAAY,EAAE,CAAC,gBAAD,EAAmB,sBAAnB,EAA2C,iBAA3C,EAA8D,4BAA9D,EACV,qBADU,EACa,yBADb,EACwC,qBADxC,CA5BlB;AA8BI,MAAA,aAAa,EAAE,KAAKrb,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4Byc,cAA5B,IAA8C,KAAKnd,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4D,qBAA1E,IAAmG,KAAKtE,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4D,qBAA5B,CAAkD1B,kBAAlD,KAAyE1F,iBAAiB,CAACqhB,GAA9L,GAAoM,KAAKve,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4Byc,cAAhO,GAAiP,EA9BpQ;AA+BI,MAAA,IAAI,EAAE,KAAKpa,KAAL,CAAWgF,QA/BrB;AAgCI,MAAA,IAAI,EAAE,KAAKhF,KAAL,CAAWiF,QAhCrB;AAiCI,MAAA,gBAAgB,EAAE,KAAK2E,oBAjC3B;AAkCI,MAAA,mBAAmB,EAAC,eAlCxB;AAmCI,MAAA,iBAAiB,EAAE,IAnCvB;AAoCI,MAAA,qBAAqB,EAAC,WApC1B;AAqCI,MAAA,WAAW,EAAE,CArCjB;AAsCI,MAAA,WAAW,EACP,CAAC;AAAE6Q,QAAAA,KAAK,EAAE,KAAKxd,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAT;AAAyE0X,QAAAA,WAAW,EAAE,aAAtF;AAAqGe,QAAAA,SAAS,EAAE,MAAhH;AAAwHb,QAAAA,MAAM,EAAE,KAAK5a,KAAL,CAAW+F,qBAAX,CAAiC8U,OAAjC,CAAyCvB,kBAAzC,MAAiE,CAAC,CAAlM;AAAqMwB,QAAAA,OAAO,EAAE,KAAK7jB,oBAAnN;AAAyO0jB,QAAAA,UAAU,EAAE,MAArP;AAA6Phc,QAAAA,SAAS,EAAE;AAAEhB,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAA/B;AAA2CmB,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB,QAAtE;AAAgFwa,UAAAA;AAAhF;AAAxQ,OAAD,EACA;AAAEmB,QAAAA,KAAK,EAAE,KAAKxd,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAT;AAAqE0X,QAAAA,WAAW,EAAE,cAAlF;AAAkGE,QAAAA,MAAM,EAAE,KAAK5a,KAAL,CAAW+F,qBAAX,CAAiC8U,OAAjC,CAAyCtB,yBAAzC,MAAwE,CAAC,CAAnL;AAAsLuB,QAAAA,OAAO,EAAE,KAAK5jB,eAApM;AAAqNyjB,QAAAA,UAAU,EAAE,MAAjO;AAAyOhc,QAAAA,SAAS,EAAE;AAAEhB,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAA/B;AAA2CmB,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB,QAAtE;AAAgFya,UAAAA;AAAhF;AAApP,OADA,EAEA;AAAEkB,QAAAA,KAAK,EAAE,KAAKxd,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAT;AAAmE0X,QAAAA,WAAW,EAAE,SAAhF;AAA2FE,QAAAA,MAAM,EAAE,KAAK5a,KAAL,CAAW+F,qBAAX,CAAiC8U,OAAjC,CAAyCrB,uBAAzC,MAAsE,CAAC,CAA1K;AAA6KsB,QAAAA,OAAO,EAAE,KAAK7d,KAAL,CAAW9F,aAAjM;AAAgNwjB,QAAAA,UAAU,EAAE,MAA5N;AAAoOhc,QAAAA,SAAS,EAAE;AAAEhB,UAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,UAA/B;AAA2CmB,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBoB,QAAtE;AAAgF0a,UAAAA;AAAhF;AAA/O,OAFA,CAGI;AAHJ,OAvCR;AA6CI,MAAA,aAAa;AAAA;AACT;AACA,0BAAC,WAAD;AAAa,QAAA,SAAS,EAAC,4CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKpC,UAAU,CAAC1P,MAAX,GAAoB,CAApB,gBACG,uDAEI,oBAAC,GAAD,CAAK,IAAL;AAAU,oBAAS,qBAAnB;AAAyC,oBAAU,KAAKzK,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAnD;AAA2G,QAAA,MAAM,EAAE,KAAKhD,KAAL,CAAW+F,qBAAX,CAAiC8U,OAAjC,CAAyCzB,WAAzC,MAA0D,CAAC,CAA9K;AAAiL,QAAA,SAAS,EAAC,kCAA3L;AAA8N,QAAA,IAAI,EAAC,QAAnO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAE7jB,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFJ,eAKI,oBAAC,GAAD,CAAK,IAAL;AAAU,oBAAS,qBAAnB;AAAyC,oBAAU,KAAK0H,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAnD;AAA6G,QAAA,MAAM,EAAE,KAAKhD,KAAL,CAAW+F,qBAAX,CAAiC8U,OAAjC,CAAyCxB,aAAzC,MAA4D,CAAC,CAAlL;AAAqL,QAAA,SAAS,EAAC,kCAA/L;AAAkO,QAAA,IAAI,EAAC,QAAvO;AAAgP,QAAA,OAAO,EAAE,MAAM,KAAKpc,KAAL,CAAWnG,eAAX,CAA2B,KAAKmG,KAAL,CAAWS,KAAX,CAAiBC,UAA5C,EAAwD,KAAKV,KAAL,CAAWS,KAAX,CAAiBoB,QAAzE,EAAmFua,aAAnF,EAAkG,KAAKrZ,KAAL,CAAWgF,QAA7G,EAAuH,KAAKhF,KAAL,CAAWiF,QAAlI,CAA/P;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEzP,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CALJ,eAQI,oBAAC,GAAD,CAAK,IAAL;AAAU,oBAAS,qBAAnB;AAAyC,oBAAU,KAAKyH,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAnD;AAAmH,QAAA,MAAM,EAAE,KAAKhD,KAAL,CAAW+F,qBAAX,CAAiC8U,OAAjC,CAAyC3Q,YAAzC,MAA2D,CAAC,CAAvL;AAA0L,QAAA,SAAS,EAAC,kCAApM;AAAuO,QAAA,IAAI,EAAC,QAA5O;AAAqP,QAAA,OAAO,EAAE,MAAM,KAAKF,cAAL,CAAoBC,mBAApB,EAAyC,KAAKhN,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAArE,EAAqF,KAAK3H,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAAjH,EAAmI6C,YAAnI,EAAiJ,KAAKlK,KAAL,CAAWgF,QAA5J,EAAsK,KAAKhF,KAAL,CAAWiF,QAAjL,CAApQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEtP,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CARJ,eAWI,oBAAC,GAAD,CAAK,IAAL;AAAU,oBAAS,qBAAnB;AAAyC,oBAAU,KAAKsH,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAnD;AAA0G,QAAA,MAAM,EAAE,KAAKhD,KAAL,CAAW+F,qBAAX,CAAiC8U,OAAjC,CAAyCrQ,gBAAzC,MAA+D,CAAC,CAAlL;AAAqL,QAAA,SAAS,EAAC,kCAA/L;AAAkO,QAAA,IAAI,EAAC,QAAvO;AAAgP,QAAA,OAAO,EAAE,MAAM,KAAKD,eAAL,CAAqBN,mBAArB,EAA0C,KAAKhN,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAAtE,EAAsF,KAAK3H,KAAL,CAAWS,KAAX,CAAiBoB,QAAvG,EAAiH0L,gBAAjH,EAAmI,KAAKxK,KAAL,CAAWgF,QAA9I,EAAwJ,KAAKhF,KAAL,CAAWiF,QAAnK,CAA/P;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAExP,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAXJ,eAcI,oBAAC,GAAD,CAAK,IAAL;AAAU,oBAAS,qBAAnB;AAAyC,oBAAU,KAAKwH,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAnD;AAA8G,QAAA,MAAM,EAAE,KAAKhD,KAAL,CAAW+F,qBAAX,CAAiC8U,OAAjC,CAAyCrQ,gBAAzC,MAA+D,CAAC,CAAtL;AAAyL,QAAA,SAAS,EAAC,kCAAnM;AAAsO,QAAA,IAAI,EAAC,QAA3O;AAAoP,QAAA,OAAO,EAAE,MAAM,KAAKxB,YAAL,CAAkBiB,mBAAlB,EAAuC,KAAKhN,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BiH,cAAnE,EAAmF,KAAK3H,KAAL,CAAWS,KAAX,CAAiBoB,QAApG,EAA8G0L,gBAA9G,EAAgI,KAAKxK,KAAL,CAAWgF,QAA3I,EAAqJ,KAAKhF,KAAL,CAAWiF,QAAhK,CAAnQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAErP,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAdJ,CADH,GAmBK,EApBV,CAFS,CAyBT;AAtER;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAXJ,CADJ,CADJ,CADJ,CADJ,CADJ,CADJ,eAqGI,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAE,KAAKoK,KAAL,CAAW6B,UAAX,KAA0B,IAA1B,GAAiC;AAAEkZ,QAAAA,OAAO,EAAE;AAAX,OAAjC,GAAwD;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,SAAS,EAAC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE;AAAEE,QAAAA,YAAY,EAAE;AAAhB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,KAAK,EAAE;AAAEF,QAAAA,OAAO,EAAE,cAAX;AAA2BW,QAAAA,SAAS,EAAE;AAAtC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKze,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAAN,CADJ,CADJ,eAII;AAAQ,MAAA,SAAS,EAAC,iBAAlB;AAAoC,MAAA,KAAK,EAAE;AAAEqY,QAAAA,KAAK,EAAE;AAAT,OAA3C;AACI,MAAA,OAAO,EAAE,MAAM,KAAK7E,cAAL,EADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE9gB,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAEqD,IAFrD,EAGK,KAAKuH,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAHL,CAJJ,CADJ,eAWI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK/F,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,IAAgD,KAAKpK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,CAA6CK,MAA7C,KAAwD,CAAxG,gBACG,oBAAC,cAAD;AACI,MAAA,IAAI,EAAE,KAAKzK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,IAAgD,KAAKpK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,CAA6CK,MAA7C,GAAsD,CAAtG,GACA,KAAKzK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,CAA6C,KAAKpK,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBAA5B,CAA6CK,MAA7C,GAAsD,CAAnG,CADA,GACwG,EAFlH;AAGI,MAAA,UAAU,EAAE,KAAK1H,KAAL,CAAWiW,UAH3B;AAII,MAAA,UAAU,EAAC,gBAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,gBAOG,oBAAC,cAAD;AACI,MAAA,cAAc,EAAE,KAAKhZ,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0J,gBADhD;AAEI,MAAA,SAAS,EAAE,KAAKrH,KAAL,CAAWgH,mBAF1B;AAGI,MAAA,eAAe,EAAE,KAAKC,yBAH1B;AAII,MAAA,mBAAmB,EAAE,KAAK0U,iBAAL,CAAuB,KAAK3b,KAAL,CAAW4b,eAAlC,KAAsD,EAJ/E;AAKI,MAAA,iBAAiB,EAAE,KAAKD,iBAAL,CAAuB,KAAK3b,KAAL,CAAW6b,oBAAlC,KAA2D,EALlF;AAMI,MAAA,QAAQ,EAAE,KAAK5e,KAAL,CAAWS,KAAX,CAAiBoB,QAN/B;AAOI,MAAA,UAAU,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBiI,UAPjC;AAQI,MAAA,UAAU,EAAC,gBARf;AASI,MAAA,SAAS,EAAE,UATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARR,CAXJ,CADJ,CADJ,CADJ,CArGJ,EA6KK,KAAK3F,KAAL,CAAW4B,QAAX,gBACG,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAE,KAAK3E,KAAL,CAAWS,KAAX,CAAiBiE,aAAjB,IAAkC,aAAzD;AACI,MAAA,SAAS,EAAE,KAAK8C,eAAL,EADf;AACuC,MAAA,WAAW,EAAE,KAAKuD,eADzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,gBAIG,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAE,KAAKd,eAAL,EAAvB;AAA+C,MAAA,WAAW,EAAE,KAAKM,iBAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjLR,CAFJ,CAFJ,CAFJ,CAFJ,CAhUR,CADJ,CADJ,CAFJ,CAFJ,CAFJ,eAwhBI,oBAAC,aAAD;AACI,MAAA,IAAI,EAAE,KAAKvK,KAAL,CAAWS,KAAX,CAAiBQ,SAD3B;AAEI,MAAA,IAAI,EAAE,KAAKjB,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,mBAAhC,GAAsD,IAAtD,GAA6D,IAFvE;AAGI,MAAA,UAAU,EAAE,KAAKJ,UAHrB;AAII,MAAA,SAAS,EAAE,KAAKf,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,iBAAhC,GAAoD,EAApD,GACL,KAAKnB,KAAL,CAAWS,KAAX,CAAiBW,SAL3B;AAMI,MAAA,UAAU,EAAE,KAAKpB,KAAL,CAAWS,KAAX,CAAiBiI,UANjC;AAOI,MAAA,UAAU,EAAE,KAAK1I,KAAL,CAAWS,KAAX,CAAiBU,UAPjC;AAQI,MAAA,cAAc,EAAE,KAAKnB,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,mBAAhC,GACZ,KAAK4B,KAAL,CAAWvC,cAAX,CAA0B2O,iBADd,GACkC,KAAKpM,KAAL,CAAWvC,cAAX,IAA6B,EATnF;AAUI,MAAA,eAAe,EAAE,KAAKR,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,gBAAhC,GAAmDqb,yBAAnD,GACb,KAAKxc,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,UAAhC,GAA6Csb,mBAA7C,GACI,KAAKzc,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,sBAAhC,GAAyDub,+BAAzD,GACI,KAAK1c,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,uBAAhC,GAA0Dwb,wBAA1D,GACI,KAAK3c,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,mBAAhC,GAAsDI,0BAAtD,GAAmF,EAdvG;AAeI,MAAA,KAAK,EAAE,KAAKvB,KAAL,CAAWS,KAAX,CAAiBO,SAf5B;AAgBI,MAAA,UAAU,EAAE,KAAKhB,KAAL,CAAWS,KAAX,CAAiBU,UAhBjC;AAiBI,MAAA,aAAa,EAAE,KAAKsM,aAjBxB;AAkBI,MAAA,WAAW,EAAE,KAAKzN,KAAL,CAAWS,KAAX,CAAiBa,YAAjB,GAAgC,KAAKtG,gBAArC,GACP,KAAKgF,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,sBAAhC,GAAyD,KAAKiN,eAA9D,GAAgF,KAAK+F,WAnB/F;AAoBI,MAAA,YAAY,EAAE,KAAKnU,KAAL,CAAWS,KAAX,CAAiBa,YApBnC;AAqBI,MAAA,UAAU,EAAE,KAAKyB,KAAL,CAAWwI,UArB3B;AAsBI,MAAA,YAAY,EAAE,KAAKvL,KAAL,CAAWS,KAAX,CAAiBO,SAAjB,gBACV,oBAAC,KAAD;AACI,QAAA,SAAS,EAAE,KAAKhB,KAAL,CAAWS,KAAX,CAAiBW,SADhC;AAEI,QAAA,eAAe,EAAE,KAAKwM,oBAF1B;AAGI,QAAA,UAAU,EAAE,KAAK5N,KAAL,CAAWS,KAAX,CAAiBiI,UAHjC;AAII,QAAA,cAAc,EAAE,KAAK3F,KAAL,CAAWvC,cAAX,IAA6B,EAJjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU,GAOV,KAAKR,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,iBAAhC,gBACI,oBAAC,eAAD;AACI,QAAA,gBAAgB,EAAE,KAAKnB,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4Bme,gBADlD;AAEI,QAAA,uBAAuB,EAAE,KAAK7e,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4Bme,gBAFzD;AAGI,QAAA,WAAW,EAAE,KAAK7e,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4Boe,WAA5B,IAA2C,EAH5D;AAII,QAAA,mBAAmB,EAAE,KAAK9e,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4Bqe,mBAJrD;AAKI,QAAA,mBAAmB,EAAE,KAAKhc,KAAL,CAAWvC,cAAX,CAA0BqL,mBAA1B,IAAiD,EAL1E;AAMI,QAAA,kBAAkB,EAAE,KAAK7L,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BuS,kBAA5B,IAAkD,EAN1E;AAOI,QAAA,gBAAgB,EAAE,KAAKlQ,KAAL,CAAWvC,cAAX,CAA0BsL,eAA1B,IAA6C,EAPnE;AAQI,QAAA,KAAK,EAAE,KAAK9L,KAAL,CAAWS,KARtB;AASI,QAAA,WAAW,EAAE,KAAKue,WATtB;AAUI,QAAA,WAAW,EAAE,KAAK7K,WAVtB;AAWI,QAAA,mBAAmB,EAAE,KAAKX,mBAX9B;AAYI,QAAA,YAAY,EAAE,KAAKvB,YAZvB;AAaI,QAAA,UAAU,EAAE,KAAKtX,UAbrB;AAcI,QAAA,cAAc,EAAE,KAAKskB,cAdzB;AAeI,QAAA,UAAU,EAAE,KAAKjM,UAfrB;AAgBI,QAAA,aAAa,EAAE,KAAKhT,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BuF,cAhB/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,GAmBI,KAAKjG,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,sBAAhC,gBACI,oBAAC,YAAD;AACI,QAAA,YAAY,EAAE,KAAKnB,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4Bwe,UAD9C;AAEI,QAAA,YAAY,EAAE,KAAKlf,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4Bye,UAF9C;AAGI,QAAA,aAAa,EAAE,KAAKpc,KAAL,CAAWvC,cAAX,IAA6B,EAHhD;AAII,QAAA,aAAa,EAAE,KAAKwR,aAJxB;AAKI,QAAA,WAAW,EAAE,KAAKgN,WALtB;AAMI,QAAA,WAAW,EAAE,KAAK7K,WANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,GASI,KAAKnU,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,gBAAhC,gBACI,oBAAC,yBAAD;AACI,QAAA,kBAAkB,EAAE,KAAKnB,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0e,kBADpD;AAEI,QAAA,eAAe,EAAE,KAAKpf,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BqG,UAFjD;AAGI,QAAA,aAAa,EAAE,KAAKhE,KAAL,CAAWvC,cAAX,IAA6B,EAHhD;AAII,QAAA,gBAAgB,EAAE,KAAKR,KAAL,CAAWS,KAAX,CAAiB4e,YAAjB,IAAiC,EAJvD;AAKI,QAAA,aAAa,EAAE,KAAKrN,aALxB;AAMI,QAAA,qBAAqB,EAAE,KAAK1L,qBANhC;AAOI,QAAA,YAAY,EAAE,KAAKqK,YAPvB;AAQI,QAAA,WAAW,EAAE,KAAKqO,WARtB;AASI,QAAA,WAAW,EAAE,KAAK7K,WATtB;AAUI,QAAA,QAAQ,EAAE,KAAKnU,KAAL,CAAWS,KAAX,CAAiBoB,QAV/B;AAWI,QAAA,aAAa,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BuF,cAX/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,GAcI,KAAKjG,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,cAAhC,gBACI,oBAAC,uBAAD;AACI,QAAA,YAAY,EAAE,KAAKnB,KAAL,CAAWS,KAAX,CAAiB6e,YADnC;AAEI,QAAA,gBAAgB,EAAE,KAAKtf,KAAL,CAAWS,KAAX,CAAiB8e,WAFvC;AAGI,QAAA,QAAQ,EAAE,KAAKvf,KAAL,CAAWS,KAAX,CAAiB+e,QAH/B;AAII,QAAA,iBAAiB,EAAE,KAAKxf,KAAL,CAAWS,KAAX,CAAiBgf,iBAJxC;AAKI,QAAA,cAAc,EAAE,KAAK1c,KAAL,CAAWvC,cAAX,IAA6B,EALjD;AAMI,QAAA,qBAAqB,EAAE,KAAKuR,qBANhC;AAOI,QAAA,eAAe,EAAE,KAAK5D,eAP1B;AAQI,QAAA,YAAY,EAAE,KAAKwC,YARvB;AASI,QAAA,WAAW,EAAE,KAAKqO,WATtB;AAUI,QAAA,WAAW,EAAE,KAAK7K,WAVtB;AAWI,QAAA,QAAQ,EAAE,KAAKnU,KAAL,CAAWS,KAAX,CAAiBoB,QAX/B;AAYI,QAAA,aAAa,EAAE,KAAK7B,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BuF,cAZ/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,GAeI,KAAKjG,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,UAAhC,gBACI,oBAAC,mBAAD;AACI,QAAA,aAAa,EAAE,KAAK4B,KAAL,CAAWvC,cAAX,IAA6B,EADhD;AAEI,QAAA,eAAe,EAAE,KAAKgQ,eAF1B;AAGI,QAAA,aAAa,EAAE,KAAKF,aAHxB;AAII,QAAA,WAAW,EAAE,KAAK0O,WAJtB;AAKI,QAAA,WAAW,EAAE,KAAK7K,WALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,GAQI,KAAKnU,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,uBAAhC,gBACI,oBAAC,2BAAD;AACI,QAAA,aAAa,EAAE,KAAK4B,KAAL,CAAWvC,cAAX,IAA6B,EADhD;AAEI,QAAA,aAAa,EAAE,KAAK8P,aAFxB;AAGI,QAAA,WAAW,EAAE,KAAK0O,WAHtB;AAII,QAAA,WAAW,EAAE,KAAK7K,WAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,GAMS,KAAKnU,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,mBAAhC,gBACD,oBAAC,sBAAD;AACI,QAAA,aAAa,EAAE,KAAKnB,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4Bgf,oBAD/C,CAEI;AAFJ;AAGI,QAAA,WAAW,EAAE,KAAKV,WAHtB;AAII,QAAA,UAAU,EAAE,KAAKhf,KAAL,CAAWS,KAAX,CAAiBU,UAJjC,CAKI;AALJ;AAMI,QAAA,oBAAoB,EAAE,KAAK8N,oBAN/B;AAOI,QAAA,KAAK,EAAE,KAAKjP,KAAL,CAAWS,KAPtB;AAQI,QAAA,YAAY,EAAE,KAAKT,KAAL,CAAWS,KAAX,CAAiBa,YARnC;AASI,QAAA,cAAc,EAAE,KAAKyB,KAAL,CAAWvC,cAAX,IAA6B,EATjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADC,GAYC,KAAKR,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,sBAAhC,gBACE,oBAAC,iBAAD;AACI,QAAA,WAAW,EAAE,KAAK6d,WADtB;AAEI,QAAA,UAAU,EAAE,KAAKhf,KAAL,CAAWS,KAAX,CAAiBU,UAFjC;AAGI,QAAA,UAAU,EAAE,KAAK6N,UAHrB;AAII,QAAA,kBAAkB,EAAE,KAAKhP,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BC,kBAA5B,IAAkD,EAJ1E;AAKI,QAAA,gBAAgB,EAAE,KAAKpF,gBAL3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,GAQE,KAAKyE,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,mBAAhC,gBACI,oBAAC,eAAD,CACI;AACA;AAFJ;AAGI,QAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWS,KAAX,CAAiBU,UAHjC;AAII,QAAA,qBAAqB,EAAE,KAAKyP,qBAJhC;AAKI,QAAA,eAAe,EAAE,KAAKa,eAL1B;AAMI,QAAA,SAAS,EAAE,KAAK1O,KAAL,CAAWyO,SAN1B;AAOI,QAAA,QAAQ,EAAE,KAAKzO,KAAL,CAAWwO,QAPzB;AAQI,QAAA,qBAAqB,EAAE,KAAKxO,KAAL,CAAW+N,qBAAX,IAAoC,EAR/D;AASI,QAAA,iBAAiB,EAAE,KAAK/N,KAAL,CAAWoO,iBATlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,GAWS,EAnIjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxhBJ,EA+pBQ,KAAKnR,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4Bif,aAA5B,IAA6C,KAAK3f,KAAL,CAAWS,KAAX,CAAiBU,UAAjB,KAAgC,qBAA7E,gBACI,oBAAC,YAAD;AACI,MAAA,YAAY,EAAE,KAAKnB,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4Bif,aAD9C;AAEI,MAAA,YAAY,EAAExd,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4ByD,gBAA5B,CAA6C9B,YAA9C,CAF1B;AAGI,MAAA,eAAe,EAAEF,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0D,mBAA5B,CAAgD7B,eAAjD,CAH7B;AAII,MAAA,cAAc,EAAE,KAAKvC,KAAL,CAAWS,KAAX,CAAiBmf,cAJrC;AAKI,MAAA,OAAO,EAAE,KAAKtR,OALlB;AAMI,MAAA,qBAAqB,EAAE,KAAKsB,qBANhC;AAOI,MAAA,WAAW,EAAE,KAAK7O,UAPtB;AAQI,MAAA,qBAAqB,EAAE,KAAK+O,qBARhC;AASI,MAAA,UAAU,EAAE,KAAK9P,KAAL,CAAWS,KAAX,CAAiBU,UATjC;AAUI,MAAA,WAAW,EAAE,KAAK1G,eAVtB;AAWI,MAAA,KAAK,EAAE,KAAKuF,KAAL,CAAWS,KAXtB;AAYI,MAAA,UAAU,EAAE,KAAKT,KAAL,CAAWS,KAAX,CAAiBS,iBAZjC;AAaI,MAAA,cAAc,EAAE,KAAK6B,KAAL,CAAWvC,cAAX,IAA6B,EAbjD;AAcI,MAAA,oBAAoB,EAAE,KAAKwP,oBAd/B;AAeI,MAAA,cAAc,EAAE,IAfpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,GAiBS,EAhrBjB,CADJ;AAqrBH;;AAgaD4B,EAAAA,eAAe,CAAC9Q,IAAD,EAAO;AAClB,QAAI0Q,SAAS,GAAG,IAAhB;;AACA,QAAI1Q,IAAI,IAAIA,IAAI,CAAC2J,MAAL,GAAc,CAA1B,EAA6B;AACzB3J,MAAAA,IAAI,CAAC6N,OAAL,CAAa+C,QAAQ,IAAI;AACrB,YAAIA,QAAQ,CAACV,QAAb,EAAuB;AACnB,cAAIU,QAAQ,CAACV,QAAT,KAAsB,KAA1B,EAAiC;AAC7BQ,YAAAA,SAAS,GAAG,KAAZ;AACH;AACJ,SAJD,MAKK;AACDA,UAAAA,SAAS,GAAG,KAAZ;AACH;AACJ,OATD;AAUH,KAXD,MAYK;AACDA,MAAAA,SAAS,GAAG,KAAZ;AACH;;AACD,WAAOA,SAAP;AACH;;AAyQD/V,EAAAA,sBAAsB,CAACiG,SAAD,EAAYhB,UAAZ,EAAwB6H,YAAxB,EAAsC;AACxD,QAAIG,UAAU,GAAG;AAEbhH,MAAAA,SAAS,EAAE,EAAE,GAAGA,SAAL;AAAgB,oBAAY,KAAK1B,KAAL,CAAWS,KAAX,CAAiBoB,QAA7C;AAAuD0G,QAAAA;AAAvD,OAFE;AAGb;AACA;AACAnH,MAAAA,SAAS,EAAE,cALE;AAMbD,MAAAA,UAAU,EAAE,sBANC;AAOb6J,MAAAA,WAAW,EAAE,KAAKhL,KAAL,CAAWS,KAAX,CAAiBiI,UAAjB,CAA4BsC,WAP5B;AAOwC;AACrD;AACAtK,MAAAA,UAAU,EAAEA;AATC,KAAjB;;AAYA,QAAI/D,SAAS,CAAC,KAAKqD,KAAL,CAAWS,KAAX,CAAiBqI,qBAAlB,EAAyC,KAAK9I,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoJ,SAAnE,EAA8E1C,YAA9E,CAAb,EAA0G;AACtG,YAAM3H,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAElD,cADK;AAEfmD,QAAAA,IAAI,EAAE;AACFE,UAAAA,SAAS,EAAE,IADT;AAEFkK,UAAAA,UAAU,EAAE;AAAExC,YAAAA,UAAF;AAAchI,YAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC;AAA3C,WAFV;AAGFO,UAAAA,SAAS,EAAE,IAHT;AAIF;AACAG,UAAAA,SAAS,EAAE;AALT;AAFS,OAAnB;AAUA,WAAKpB,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB;AACH,KAZD,MAaK;AACD,WAAKZ,KAAL,CAAWvE,sBAAX,CAAkCiG,SAAlC,EAA6ChB,UAA7C;AACH;AACJ;;AAID5E,EAAAA,uBAAuB,CAAC4F,SAAD,EAAYhB,UAAZ,EAAwB6H,YAAxB,EAAsC;AACzD;AACA,QAAIG,UAAU,GAAG;AACbhH,MAAAA,SAAS,EAAE,EAAE,GAAGA,SAAL;AAAgB6G,QAAAA,YAAhB;AAA8B,oBAAY,KAAKvI,KAAL,CAAWS,KAAX,CAAiBoB;AAA3D,OADE;AAEbT,MAAAA,SAAS,EAAE,KAAKpB,KAAL,CAAWS,KAAX,CAAiBW,SAFf;AAGbD,MAAAA,UAAU,EAAE,YAHC;AAIb6J,MAAAA,WAAW,EAAE,KAAKhL,KAAL,CAAWS,KAAX,CAAiBiI,UAAjB,CAA4BsC,WAJ5B;AAIwC;AACrD;AACAtK,MAAAA,UAAU,EAAEA;AANC,KAAjB;;AASA,QAAI/D,SAAS,CAAC,KAAKqD,KAAL,CAAWS,KAAX,CAAiBqI,qBAAlB,EAAyC,KAAK9I,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoJ,SAAnE,EAA8E1C,YAA9E,CAAb,EAA0G;AACtG,YAAM3H,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAElD,cADK;AAEfmD,QAAAA,IAAI,EAAE;AACFE,UAAAA,SAAS,EAAE,IADT;AAEFkK,UAAAA,UAAU,EAAE;AAAExC,YAAAA,UAAF;AAAchI,YAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,KAAX,CAAiBC;AAA3C,WAFV;AAGFO,UAAAA,SAAS,EAAE,IAHT;AAIF;AACAG,UAAAA,SAAS,EAAE;AALT;AAFS,OAAnB;AAUA,WAAKpB,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB;AACH,KAZD,MAaK;AACD,WAAKZ,KAAL,CAAWlE,uBAAX,CAAmC4F,SAAnC,EAA8ChB,UAA9C;AACH;AACJ;;AA6fDge,EAAAA,iBAAiB,CAAC5d,IAAD,EAAO;AACpB;AACA,UAAM+e,SAAS,GAAG/e,IAAI,IAAIA,IAAI,CAAC8G,GAAL,CAAUkY,MAAD,IAAY;AAC3C,aAAO;AAAE,mBAAWA,MAAM,CAACxiB,gBAAgB,CAACyiB,KAAlB,CAAN,CAA+B,KAAK/f,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0Bme,iBAAzD,CAAb;AAA0F,qBAAaF,MAAM,CAACxiB,gBAAgB,CAAC8L,KAAlB,CAA7G;AAAuI,iBAAS,OAAhJ;AAAyJ,sBAAc;AAAvK,OAAP;AACH,KAFyB,CAA1B;AAGA,WAAOyW,SAAP;AACH;;AACDI,EAAAA,eAAe,CAACC,IAAD,EAAO;AAElB,QAAIC,OAAO,GAAG,EAAd;;AACA,QAAID,IAAI,CAACzV,MAAL,GAAc,CAAlB,EAAqB;AACjByV,MAAAA,IAAI,CAACtY,GAAL,CAAUuL,CAAD,IAAO;AACZgN,QAAAA,OAAO,CAACvU,IAAR,CAAa;AAAE,WAACtO,gBAAgB,CAACyiB,KAAlB,GAA0B5M,CAA5B;AAA+B,WAAC7V,gBAAgB,CAAC8L,KAAlB,GAA0B+J;AAAzD,SAAb;AACH,OAFD;AAGH;;AACD,WAAOgN,OAAP;AACH;;AAEDC,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAC9B,QAAI;AAAE1b,MAAAA,QAAF;AAAYC,MAAAA,UAAZ;AAAwBkE,MAAAA,qBAAxB;AAA+CT,MAAAA,UAA/C;AAA2DjD,MAAAA,eAA3D;AAA4EC,MAAAA,mBAA5E;AACAC,MAAAA,iBADA;AACmBC,MAAAA,aADnB;AACkCC,MAAAA,iBADlC;AACqDC,MAAAA,qBADrD;AAC4EC,MAAAA,oBAD5E;AAEAC,MAAAA,gBAFA;AAEkBiT,MAAAA,iBAFlB;AAEqCC,MAAAA,oBAFrC;AAE2DC,MAAAA,eAF3D;AAGAE,MAAAA,UAHA;AAGYG,MAAAA,mBAHZ;AAGiCC,MAAAA,sBAHjC;AAGyDC,MAAAA,iBAHzD;AAIAJ,MAAAA,cAJA;AAIgBC,MAAAA,wBAJhB;AAI0C6D,MAAAA,eAJ1C;AAI2DoB,MAAAA,kBAJ3D;AAKA7E,MAAAA,aALA;AAKe9Y,MAAAA,cALf;AAK+B0c,MAAAA,UAL/B;AAK2C/f,MAAAA,gBAL3C;AAK6DC,MAAAA,mBAL7D;AAMA+f,MAAAA,cANA;AAMgBE,MAAAA,WANhB;AAM6BC,MAAAA,UAN7B;AAMyCF,MAAAA,qBANzC;AAMgEN,MAAAA,oBANhE;AAOAoB,MAAAA,uBAPA;AAOyBoC,MAAAA,kBAPzB;AAO6C3B,MAAAA,eAP7C;AAO8DC,MAAAA,oBAP9D;AAQArd,MAAAA,0BARA;AAQ4B4K,MAAAA,IAR5B;AAQkCC,MAAAA,IARlC;AAQwCrE,MAAAA,QARxC;AAQkDC,MAAAA,QARlD;AAQ4DiV,MAAAA;AAR5D,QAQ+E,KAAKla,KARxF;AASA,QAAIwd,IAAI,GAAG,KAAX;;AAEA,QAAI,KAAKvgB,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoJ,SAA1B,KAAwCoV,aAAa,CAAC5f,KAAd,CAAoBoB,QAApB,CAA6BoJ,SAAzE,EAAoF;AAChFnC,MAAAA,qBAAqB,GAAG,EAAxB;;AACA,UAAI,KAAK9I,KAAL,CAAWS,KAAX,CAAiBqI,qBAArB,EAA4C;AACxCyX,QAAAA,IAAI,GAAG,IAAP;AACA,aAAKvgB,KAAL,CAAWS,KAAX,CAAiBqI,qBAAjB,CAAuC,KAAK9I,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoJ,SAAjE,KAA+EgK,MAAM,CAAC3D,MAAP,CAAc,KAAKtR,KAAL,CAAWS,KAAX,CAAiBqI,qBAAjB,CAAuC,KAAK9I,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoJ,SAAjE,CAAd,EAA2FrD,GAA3F,CAA+F3E,IAAI,IAC9K6F,qBAAqB,CAAC8C,IAAtB,CAA2B3I,IAAI,CAACsF,YAAhC,CAD2E,CAA/E;AAEH;;AACDF,MAAAA,UAAU,GAAG9L,aAAa,CAAC,KAAKyD,KAAL,CAAWS,KAAX,CAAiBqI,qBAAlB,EAAyC,KAAK9I,KAAL,CAAWS,KAAX,CAAiBoB,QAAjB,CAA0BoJ,SAAnE,CAA1B;AACH;;AACD,QAAI,KAAKjL,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B8f,aAA5B,IAA6C,KAAKxgB,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B8f,aAA5B,KAA8CH,aAAa,CAAC5f,KAAd,CAAoBC,UAApB,CAA+B8f,aAA9H,EAA6I;AACzI,YAAMC,aAAa,GAAG5R,IAAI,CAAC6R,KAAL,CAAW,KAAK1gB,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B8f,aAA5B,CAA0C7J,QAA1C,CAAmD3T,KAA9D,CAAtB;AACA8Z,MAAAA,oBAAoB,GAAG2D,aAAa,CAACE,cAAd,GAA+BF,aAAa,CAACE,cAA7C,GAA8D,EAArF;AACAzC,MAAAA,uBAAuB,GAAGuC,aAAa,CAACG,iBAAd,GAAkCH,aAAa,CAACG,iBAAhD,GAAoE,EAA9F;AACAN,MAAAA,kBAAkB,GAAGG,aAAa,CAACI,YAAd,GAA6BJ,aAAa,CAACI,YAA3C,GAA0D,EAA/E;AAEAlC,MAAAA,eAAe,GAAG8B,aAAa,CAACK,cAAd,GAA+BL,aAAa,CAACK,cAA7C,GAA8D,EAAhF;AACAlC,MAAAA,oBAAoB,GAAG6B,aAAa,CAACM,kBAAd,GAAmCN,aAAa,CAACM,kBAAjD,GAAsE,EAA7F;AAEA/H,MAAAA,UAAU,GAAGyH,aAAa,CAACO,mBAAd,GAAoCP,aAAa,CAACO,mBAAlD,GAAwE,EAArF;AACA1H,MAAAA,aAAa,GAAGmH,aAAa,CAACQ,gBAAd,GAAiCR,aAAa,CAACQ,gBAA/C,GAAkE,EAAlF;AACAnI,MAAAA,eAAe,GAAG2H,aAAa,CAACI,YAAd,GAA6BJ,aAAa,CAACI,YAA3C,GAA0D,EAA5E;AACAN,MAAAA,IAAI,GAAG,IAAP;AACH;;AACD,QAAI,KAAKvgB,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BtD,mBAA5B,IACA,KAAK4C,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BtD,mBAA5B,KAAoDijB,aAAa,CAAC5f,KAAd,CAAoBC,UAApB,CAA+BtD,mBADvF,EAC4G;AACxG,UAAI8jB,QAAQ,GAAG;AAAE/U,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE,KAAKpM,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,GAA4BrW,QAAQ,CAAC,KAAKnC,KAAL,CAAWS,KAAX,CAAiB+X,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAG,GAAE,KAAK1Y,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BuF,cAA5B,GAA6C,aAA7C,GAA6D,OAAQ;AAAjF,SAAD;AAAjG,OAAf;AACAsa,MAAAA,IAAI,GAAG,IAAP;AACAnb,MAAAA,eAAe,GAAG8b,QAAlB;AACA7b,MAAAA,mBAAmB,GAAG6b,QAAtB;AACA5b,MAAAA,iBAAiB,GAAG4b,QAApB;AACA3b,MAAAA,aAAa,GAAG2b,QAAhB;AACA1b,MAAAA,iBAAiB,GAAG0b,QAApB;AACAzb,MAAAA,qBAAqB,GAAGyb,QAAxB;AACAvb,MAAAA,gBAAgB,GAAGub,QAAnB;AACAxb,MAAAA,oBAAoB,GAAGwb,QAAvB;AACH;;AACD,QAAI,KAAKlhB,KAAL,CAAWS,KAAX,CAAiBD,cAAjB,KAAoC6f,aAAa,CAAC5f,KAAd,CAAoBD,cAA5D,EAA4E;AACxE+f,MAAAA,IAAI,GAAG,IAAP;AACA/f,MAAAA,cAAc,GAAG,KAAKR,KAAL,CAAWS,KAAX,CAAiBD,cAAlC;AACH;;AACD,QAAI,KAAKR,KAAL,CAAWS,KAAX,CAAiBc,0BAAjB,KAAgD8e,aAAa,CAAC5f,KAAd,CAAoBc,0BAAxE,EAAoG;AAChGgf,MAAAA,IAAI,GAAG,IAAP;AACAhf,MAAAA,0BAA0B,GAAG,KAAKvB,KAAL,CAAWS,KAAX,CAAiBc,0BAA9C;AACH;;AACD,QAAI,KAAKvB,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,KAAgC2f,aAAa,CAAC5f,KAAd,CAAoBC,UAAxD,EAAoE;AAChE6f,MAAAA,IAAI,GAAG,IAAP;AACArD,MAAAA,UAAU,GAAGtgB,mBAAmB,CAAC,KAAKoD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4Bwc,UAA5B,IAA0C,EAA3C,EAA+C,iBAA/C,EAAkE,iBAAlE,EAAqF,iBAArF,EAAwG,WAAxG,EAAqH,iBAArH,EAAwI,KAAxI,CAAhC;AACA/f,MAAAA,gBAAgB,GAAGP,mBAAmB,CAAC,KAAKoD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BvD,gBAA5B,IAAgD,EAAjD,EAAqD,cAArD,EAAqE,cAArE,EAAqF,SAArF,EAAgG,WAAhG,EAA6G,cAA7G,EAA6H,KAA7H,CAAtC;AACAC,MAAAA,mBAAmB,GAAGR,mBAAmB,CAAC,KAAKoD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4BtD,mBAA5B,IAAmD,EAApD,EAAwD,iBAAxD,EAA2E,iBAA3E,EAA8F,SAA9F,EAAyG,WAAzG,EAAsH,iBAAtH,EAAyI,KAAzI,CAAzC;AACA+f,MAAAA,cAAc,GAAGvgB,mBAAmB,CAAC,KAAKoD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4Byc,cAA5B,IAA8C,EAA/C,EAAmD,oBAAnD,EAAyE,eAAzE,EAA0F,YAA1F,EAAwG,oBAAxG,EAA8H,KAA9H,CAApC;AACAE,MAAAA,WAAW,GAAGzgB,mBAAmB,CAAC,KAAKoD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B2c,WAA5B,IAA2C,EAA5C,EAAgD,gBAAhD,EAAkE,mBAAlE,EAAuF,WAAvF,EAAoG,gBAApG,EAAsH,KAAtH,CAAjC;AACAC,MAAAA,UAAU,GAAG1gB,mBAAmB,CAAC,KAAKoD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B4c,UAA5B,IAA0C,EAA3C,EAA+C,WAA/C,EAA4D,cAA5D,EAA4E,WAA5E,EAAyF,WAAzF,EAAsG,KAAtG,CAAhC;AACAF,MAAAA,qBAAqB,GAAGxgB,mBAAmB,CAAC,KAAKoD,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4B0c,qBAA5B,IAAqD,EAAtD,EAA0D,4BAA1D,EAAwF,cAAxF,EACvC,WADuC,EAC1B,4BAD0B,EACI,KADJ,CAA3C;AAEAjR,MAAAA,IAAI,GAAG,KAAKnM,KAAL,CAAWS,KAAX,CAAiB0L,IAAjB,KAA0BjG,SAA1B,GAAsCiG,IAAtC,GAA6C,KAAKnM,KAAL,CAAWS,KAAX,CAAiB0L,IAArE;AACAC,MAAAA,IAAI,GAAG,KAAKpM,KAAL,CAAWS,KAAX,CAAiB2L,IAAjB,IAAyBA,IAAhC;AACArE,MAAAA,QAAQ,GAAG,KAAK/H,KAAL,CAAWS,KAAX,CAAiBsH,QAAjB,KAA8B7B,SAA9B,GAA0C6B,QAA1C,GAAqD,KAAK/H,KAAL,CAAWS,KAAX,CAAiBsH,QAAjF;AACAC,MAAAA,QAAQ,GAAG,KAAKhI,KAAL,CAAWS,KAAX,CAAiBuH,QAAjB,IAA6BA,QAAxC;;AACA,UAAI,KAAKhI,KAAL,CAAWS,KAAX,CAAiB2E,eAAjB,IAAoC,KAAKpF,KAAL,CAAWS,KAAX,CAAiB2E,eAAjB,KAAqCib,aAAa,CAAC5f,KAAd,CAAoB2E,eAAjG,EAAkH;AAC9GA,QAAAA,eAAe,GAAG,KAAKpF,KAAL,CAAWS,KAAX,CAAiB2E,eAAnC;AACH;;AACD,UAAI,KAAKpF,KAAL,CAAWS,KAAX,CAAiB4E,mBAAjB,IAAwC,KAAKrF,KAAL,CAAWS,KAAX,CAAiB4E,mBAAjB,KAAyCgb,aAAa,CAAC5f,KAAd,CAAoB4E,mBAAzG,EAA8H;AAC1HA,QAAAA,mBAAmB,GAAG,KAAKrF,KAAL,CAAWS,KAAX,CAAiB4E,mBAAvC;AACH;;AACD,UAAI,KAAKrF,KAAL,CAAWS,KAAX,CAAiB8E,aAAjB,IAAkC,KAAKvF,KAAL,CAAWS,KAAX,CAAiB8E,aAAjB,KAAmC8a,aAAa,CAAC5f,KAAd,CAAoB8E,aAA7F,EAA4G;AACxGA,QAAAA,aAAa,GAAG,KAAKvF,KAAL,CAAWS,KAAX,CAAiB8E,aAAjC;AACH;;AACD,UAAI,KAAKvF,KAAL,CAAWS,KAAX,CAAiBgF,qBAAjB,IAA0C,KAAKzF,KAAL,CAAWS,KAAX,CAAiBgF,qBAAjB,KAA2C4a,aAAa,CAAC5f,KAAd,CAAoBgF,qBAA7G,EAAoI;AAChIA,QAAAA,qBAAqB,GAAG,KAAKzF,KAAL,CAAWS,KAAX,CAAiBgF,qBAAzC;AACH;;AACD,UAAI,KAAKzF,KAAL,CAAWS,KAAX,CAAiBkF,gBAAjB,IAAqC,KAAK3F,KAAL,CAAWS,KAAX,CAAiBkF,gBAAjB,KAAsC0a,aAAa,CAAC5f,KAAd,CAAoBkF,gBAAnG,EAAqH;AACjHA,QAAAA,gBAAgB,GAAG,KAAK3F,KAAL,CAAWS,KAAX,CAAiBkF,gBAApC;AACH;;AACD,UAAI,KAAK3F,KAAL,CAAWS,KAAX,CAAiBiF,oBAAjB,IAAyC,KAAK1F,KAAL,CAAWS,KAAX,CAAiBiF,oBAAjB,KAA0C2a,aAAa,CAAC5f,KAAd,CAAoBiF,oBAA3G,EAAiI;AAC7HA,QAAAA,oBAAoB,GAAG,KAAK1F,KAAL,CAAWS,KAAX,CAAiBiF,oBAAxC;AACH,OA/B+D,CAiChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,UAAIyb,kBAAkB,GAAG;AAAEve,QAAAA,kBAAkB,EAAE1F,iBAAiB,CAACkkB,OAAxC;AAAiDlF,QAAAA,aAAa,EAAE,KAAKlc,KAAL,CAAW6F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAhE;AAAsHsb,QAAAA,aAAa,EAAE;AAArI,OAAzB;AACA,YAAMC,eAAe,GAAG,KAAKthB,KAAL,CAAWS,KAAX,CAAiBC,UAAjB,CAA4Byc,cAA5B,IAA8C,EAAtE;AAEA,YAAMoE,kBAAkB,GAAG1S,IAAI,CAAC6R,KAAL,CAAW7R,IAAI,CAACC,SAAL,CAAewS,eAAf,CAAX,CAA3B;AAEA,YAAMhW,KAAK,GAAGiW,kBAAkB,CAACC,SAAnB,CAA6Bve,IAAI,IAAIA,IAAI,CAACL,kBAAL,KAA4B1F,iBAAiB,CAACkkB,OAAnF,CAAd;;AACA,UAAIG,kBAAkB,CAAC9W,MAAnB,GAA4B,CAA5B,IAAiCa,KAAK,KAAK,CAAC,CAAhD,EAAmD;AAC/CiW,QAAAA,kBAAkB,CAAC3V,IAAnB,CAAwBuV,kBAAxB;AACH;;AACDlE,MAAAA,cAAc,GAAGsE,kBAAjB,CA1DgE,CA2DhE;AACA;AACA;AACA;AACA;;AACArE,MAAAA,UAAU,GAAGA,UAAU,CAACjW,GAAX,CAAe,YAAf,CAAb;AACA9J,MAAAA,gBAAgB,GAAEA,gBAAgB,CAAC8J,GAAjB,CAAqB,YAArB,CAAlB;AACA7J,MAAAA,mBAAmB,GAAEA,mBAAmB,CAAC6J,GAApB,CAAwB,YAAxB,CAArB;AACAkW,MAAAA,cAAc,GAAEA,cAAc,CAAClW,GAAf,CAAmB,YAAnB,CAAhB;AACAoW,MAAAA,WAAW,GAAEA,WAAW,CAACpW,GAAZ,CAAgB,YAAhB,CAAb;AACAqW,MAAAA,UAAU,GAAEA,UAAU,CAACrW,GAAX,CAAe,YAAf,CAAZ;AACAmW,MAAAA,qBAAqB,GAAEA,qBAAqB,CAACnW,GAAtB,CAA0B,YAA1B,CAAvB;AACH;;AACD,QAAIsZ,IAAJ,EAAU;AACN,WAAKpgB,QAAL,CAAc;AACVwE,QAAAA,QADU;AACAC,QAAAA,UADA;AACYkE,QAAAA,qBADZ;AACmCT,QAAAA,UADnC;AAC+CjD,QAAAA,eAD/C;AACgEC,QAAAA,mBADhE;AAEVC,QAAAA,iBAFU;AAESC,QAAAA,aAFT;AAEwBC,QAAAA,iBAFxB;AAE2CC,QAAAA,qBAF3C;AAEkEC,QAAAA,oBAFlE;AAGVC,QAAAA,gBAHU;AAGQiT,QAAAA,iBAHR;AAG2BC,QAAAA,oBAH3B;AAGiDC,QAAAA,eAHjD;AAIVE,QAAAA,UAJU;AAIEG,QAAAA,mBAJF;AAIuBC,QAAAA,sBAJvB;AAI+CC,QAAAA,iBAJ/C;AAKVJ,QAAAA,cALU;AAKMC,QAAAA,wBALN;AAKgC6D,QAAAA,eALhC;AAKiDoB,QAAAA,kBALjD;AAMV7E,QAAAA,aANU;AAMK9Y,QAAAA,cANL;AAOV0c,QAAAA,UAPU;AAQV/f,QAAAA,gBARU;AASVC,QAAAA,mBATU;AAUV+f,QAAAA,cAVU;AAWVE,QAAAA,WAXU;AAYVC,QAAAA,UAZU;AAaVF,QAAAA,qBAbU;AAcV7b,QAAAA,0BAdU;AAeV4K,QAAAA,IAfU;AAeJC,QAAAA,IAfI;AAeErE,QAAAA,QAfF;AAeYC,QAAAA,QAfZ;AAesBiV,QAAAA,cAftB;AAgBVH,QAAAA,oBAhBU;AAgBYoB,QAAAA,uBAhBZ;AAgBqCoC,QAAAA,kBAhBrC;AAiBV3B,QAAAA,eAjBU;AAiBOC,QAAAA;AAjBP,OAAd;AAmBH;;AAED,QAAI,KAAK5e,KAAL,CAAWS,KAAX,CAAiBqQ,qBAAjB,KAA2CuP,aAAa,CAAC5f,KAAd,CAAoBqQ,qBAAnE,EAA0F;AACtF,WAAK3Q,QAAL,CAAc;AAAE2Q,QAAAA,qBAAqB,EAAE,KAAK9Q,KAAL,CAAWS,KAAX,CAAiBqQ;AAA1C,OAAd;AACH;AACJ;;AAED2Q,EAAAA,oBAAoB,GAAG;AACnB,UAAM7gB,UAAU,GAAG;AACfC,MAAAA,QAAQ,EAAElD,cADK;AAEfmD,MAAAA,IAAI,EAAE;AACFJ,QAAAA,UAAU,EAAE,EADV;AACcgI,QAAAA,UAAU,EAAExC;AAD1B;AAFS,KAAnB;AAMA,SAAKlG,KAAL,CAAWvG,WAAX,CAAuBmH,UAAvB;AACH;;AAE8B,SAAxB8gB,wBAAwB,CAAC1hB,KAAD,EAAQ+C,KAAR,EAAe;AAC1C,QAAI/C,KAAK,CAACS,KAAN,CAAYkY,YAAZ,KAA6B,EAAjC,EAAqC;AACjC,UAAI3Y,KAAK,CAACS,KAAN,CAAYkhB,SAAZ,KAA0B,GAA1B,IAAiC3hB,KAAK,CAACS,KAAN,CAAYkhB,SAAZ,KAA0B,GAA/D,EAAoE;AAChE5kB,QAAAA,KAAK,CAAC6I,IAAN,CAAW5F,KAAK,CAACS,KAAN,CAAYkY,YAAvB;AACA3Y,QAAAA,KAAK,CAACS,KAAN,CAAYkY,YAAZ,GAA2B,EAA3B;AACH;AACJ;;AACD,QAAI3Y,KAAK,CAACS,KAAN,CAAY2G,KAAZ,KAAsBrE,KAAK,CAACqE,KAAhC,EAAuC;AACnCrK,MAAAA,KAAK,CAACqK,KAAN,CAAYpH,KAAK,CAACS,KAAN,CAAY2G,KAAxB;AACApH,MAAAA,KAAK,CAACS,KAAN,CAAY2G,KAAZ,GAAoB,EAApB;AACH,KAVyC,CAW1C;AACA;AACA;;;AACA,WAAO,IAAP;AACH;;AApiH+B;;AAwiHpC,MAAMwa,eAAe,GAAI7e,KAAD,IAAW;AAC/B,SAAO;AACHtC,IAAAA,KAAK,EAAEsC,KAAK,CAACtC;AADV,GAAP;AAGH,CAJD;;AAMA,eAAetH,OAAO,CAACyoB,eAAD,EAAkB;AACpCpoB,EAAAA,UADoC;AACxBC,EAAAA,WADwB;AACXC,EAAAA,oBADW;AACWC,EAAAA,eADX;AAC4BC,EAAAA,uBAD5B;AACqDC,EAAAA,eADrD;AAEpCE,EAAAA,YAFoC;AAEtBC,EAAAA,oBAFsB;AAEAC,EAAAA,eAFA;AAEiBC,EAAAA,aAFjB;AAEgCC,EAAAA,sBAFhC;AAEwDC,EAAAA,qBAFxD;AAE+EC,EAAAA,gBAF/E;AAEiGC,EAAAA,eAFjG;AAGpCC,EAAAA,eAHoC;AAGnBC,EAAAA,eAHmB;AAGFC,EAAAA,eAHE;AAGeC,EAAAA,WAHf;AAG4BC,EAAAA,UAH5B;AAGwCC,EAAAA,qBAHxC;AAG+DC,EAAAA,wBAH/D;AAGwFf,EAAAA,mBAHxF;AAIpCgB,EAAAA,0BAJoC;AAIRC,EAAAA,qBAJQ;AAIeC,EAAAA,gBAJf;AAIiCC,EAAAA,iBAJjC;AAIoDC,EAAAA,mBAJpD;AAIyEC,EAAAA,cAJzE;AAIyFU,EAAAA,yBAJzF;AAKpCT,EAAAA,cALoC;AAKpBE,EAAAA,kBALoB;AAKAC,EAAAA,gBALA;AAKkBG,EAAAA,gBALlB;AAKoCL,EAAAA,+BALpC;AAKqEG,EAAAA,gBALrE;AAKuFC,EAAAA,sBALvF;AAMpCE,EAAAA,qBANoC;AAMbC,EAAAA,uBANa;AAMYE,EAAAA,uBANZ;AAMqCI,EAAAA,mBANrC;AAM0DC,EAAAA,+BAN1D;AAM2FJ,EAAAA,2BAN3F;AAMwHC,EAAAA,uBANxH;AAMiJC,EAAAA,gCANjJ;AAMmLG,EAAAA;AANnL,CAAlB,CAAP,CAQZlD,UAAU,CAAC4G,WAAD,CARE,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { faPlay, faAddressBook, faCheckCircle, faEye, faPencilRuler, faFileImport, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { Card, Col, Row, Nav, Button } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport { ContentPanel } from '../../components/App.styles';\r\nimport {\r\n    crudMaster, updateStore, getsubSampleREDetail, getTestREDetail, getTestChildTabREDetail, resultGetModule,fetchMaterialRecord,\r\n    completeTest, testMethodSourceEdit, addREInstrument, addREMaterial, deleteInstrumentRecord, fetchInstrumentRecord, deleteTaskRecord,\r\n    fetchTaskRecord, parameterRecord, checkListRecord, onSaveCheckList, defaultTest, getFormula, getRERegistrationType, getRERegistrationSubType,\r\n    getREApprovalConfigVersion, getResultEntryDetails, calculateFormula, getREFilterStatus, getREFilterTestData, getREJobStatus,\r\n    viewAttachment, validateEsignCredentialComplete, getAttachmentCombo, deleteAttachment, getCommentsCombo, updateTestMethodSource, resultImportFile,\r\n    filterTransactionList, validateEsignCredential, getSampleChildTabREDetail, updateParameterComments, getREMaterialCategoryByType, getREMaterialByCategory, getREMaterialInvertoryByMaterial,\r\n    previewSampleReport, getMeanCalculationTestParameter, getAvailableMaterialQuantity\r\n} from '../../actions';\r\nimport { sortData, create_UUID, getControlMap, listDataFromDynamicArray, formatInputDate, validateTwoDigitDate, showEsign, constructOptionList, deleteAttachmentDropZone } from '../../components/CommonScript';\r\nimport rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport { parameterType, grade, transactionStatus, RegistrationType, RegistrationSubType, FORMULAFIELDTYPE, designProperties } from '../../components/Enumeration';\r\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\r\nimport { ProductList } from '../product/product.styled';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\nimport ResultEntryResultsTab from './ResultEntryResultsTab';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport ResultEntryFilter from './ResultEntryFilter';\r\nimport ResultEntryInstrumentForm from './ResultEntryInstrumentForm';\r\nimport ResultEntryForm from './ResultEntryForm';\r\nimport TestEditForm from './TestEditForm';\r\nimport SampleInfoView from '../approval/SampleInfoView';\r\nimport SampleInfoGrid from '../approval/SampleInfoGrid';\r\nimport ApprovalInstrumentTab from '../approval/ApprovalInstrumentTab';\r\nimport ResultEntryTaskTab from './ResultEntryTaskTab';\r\nimport ResultEntryTaskForm from './ResultEntryTaskForm';\r\nimport ResultEntryParamCommetsForm from './ResultEntryParamCommetsForm';\r\nimport TemplateForm from '../checklist/checklist/TemplateForm';\r\nimport { templateChangeHandler } from '../checklist/checklist/checklistMethods';\r\nimport { numberConversion, numericGrade } from './ResultEntryValidation';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport ResultEntryFormulaForm from './ResultEntryFormulaForm';\r\nimport SampleApprovalHistory from '../approval/SampleApprovalHistory';\r\nimport ResultChangeHistoryTab from '../approval/ResultChangeHistoryTab';\r\nimport Attachments from '../attachmentscomments/attachments/Attachments';\r\nimport Comments from '../attachmentscomments/comments/Comments';\r\nimport { onSaveSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\r\nimport { onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\r\nimport ResultEntryImport from './ResultEntryImport';\r\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript'\r\n// import ReactTooltip from 'react-tooltip';\r\nimport ResultEntryMean from './ResultEntryMean';\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\nimport ResultEntryMaterialForm from './ResultEntryMaterialForm';\r\nimport UsedMaterial from './UsedMaterial';\r\n\r\nclass ResultEntry extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.searchSampleRef = React.createRef();\r\n        this.searchSubSampleRef = React.createRef();\r\n        this.searchTestRef = React.createRef();\r\n        this.state = {\r\n            sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            resultDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            instrumentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            materialDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            taskDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            documentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            resultChangeDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            testCommentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            historyDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'stestsynonym' }] },\r\n            sampleHistoryDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // historyDataState: { skip: 0, take: 5, group: [{ field: 'ArNo' }, { field: 'stestsynonym' }] },\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            operation: \"\",\r\n            showSample: false,\r\n            showTest: true,\r\n            sampleListColumns: [],\r\n            subSampleListColumns: [],\r\n            testListColumns: [],\r\n            TableExpandableItem: [],\r\n            SingleItem: [],\r\n            SampleGridItem: [],\r\n            SampleGridExpandableItem: [],\r\n            sampleListMainField: [],\r\n            subSampleListMainField: [],\r\n            testListMainField: [],\r\n            testMoreField: [],\r\n            selectedRecord: {},\r\n            validateFormulaMandyFields: [],\r\n            splitChangeWidthPercentage: 22,\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            subSampleSkip: 0,\r\n            subSampleTake: 5,\r\n            testskip: 0,\r\n            testtake: this.props.Login.settings && this.props.Login.settings[12],\r\n        }\r\n        this.formRef = React.createRef();\r\n        //this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\r\n    }\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.props.Login.masterData.selectedImportFile\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData: { ...this.props.Login.masterData, selectedImportFile: selectedRecord } }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let openTemplateModal = this.props.Login.openTemplateModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let screenName = this.props.Login.screenName;\r\n        let operation = this.props.Login.operation;\r\n        let loadFile = this.props.Login.loadFile;\r\n        let updateInfo = {};\r\n        if (screenName === \"IDS_RESULTFORMULA\") {\r\n            screenName = \"IDS_RESULTENTRY\";\r\n            operation = \"update\";\r\n            let showValidate = !this.props.Login.showValidate;\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { screenName, operation, showValidate, validateFormulaMandyFields: [] }\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.Login.loadEsign) {\r\n                if (this.props.Login.operation === \"delete\"\r\n                    || this.props.Login.operation === \"complete\"\r\n                    || this.props.Login.operation === \"default\"\r\n                    || this.props.Login.operation === \"deleteTask\"\r\n                    || this.props.Login.operation === \"deleteInstrument\") {\r\n                    loadEsign = false;\r\n                    openModal = false;\r\n                    selectedRecord = {};\r\n                }\r\n                else if (this.props.Login.operation === \"updatechecklist\") {\r\n                    loadEsign = false;\r\n                    openModal = false;\r\n                }\r\n                else {\r\n                    loadEsign = false;\r\n                }\r\n            } else {\r\n                openModal = false;\r\n                openTemplateModal = false;\r\n                selectedRecord = {};\r\n                loadFile = false;\r\n            }\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { openModal, screenName, loadEsign, selectedRecord, openTemplateModal, loadFile }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onFilterComboChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            let inputData = [];\r\n\r\n            if (fieldname === \"fromDate\") {\r\n                let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n                inputData = {\r\n                    nflag: 2,\r\n                    fromdate: dateObj.fromDate,//this.OnDateConverstion(event, fieldname),\r\n                    todate: dateObj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREApprovalConfigVersion(inputData)\r\n            }\r\n            if (fieldname === \"toDate\") {\r\n\r\n                let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo)\r\n\r\n                inputData = {\r\n                    nflag: 2,\r\n                    fromdate: dateObj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: dateObj.toDate,//this.OnDateConverstion(event, fieldname),\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREApprovalConfigVersion(inputData)\r\n            }\r\n\r\n            // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \r\n            //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \r\n\r\n            if (fieldname === \"nsampletypecode\") {\r\n\r\n                let obj = convertDateValuetoString((this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    (this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 2,\r\n                    nsampletypecode: parseInt(event.value),\r\n                    fromdate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultSampleType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getRERegistrationType(inputData)\r\n            }\r\n            else if (fieldname === \"nregtypecode\") {\r\n\r\n                let obj = convertDateValuetoString((this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    (this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n\r\n                inputData = {\r\n                    nflag: 3,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    fromdate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    nregtypecode: parseInt(event.value),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultRegistrationType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getRERegistrationSubType(inputData)\r\n            }\r\n            else if (fieldname === \"nregsubtypecode\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 4,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultRegistrationSubType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREApprovalConfigVersion(inputData)\r\n            }\r\n            else if (fieldname === \"version\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 4,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultApprovalConfigVersion: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREJobStatus(inputData)\r\n            }\r\n            else if (fieldname === \"jobstatus\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 5,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\r\n                    njobstatuscode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultjobstatus: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREFilterStatus(inputData)\r\n            }\r\n            else if (fieldname === \"filter\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 5,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\r\n                    njobstatuscode: 1,// parseInt(this.props.Login.masterData.defaultjobstatus.njobstatuscode),\r\n                    ntranscode: String(event.value),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultFilterStatus: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREFilterTestData(inputData)\r\n            }\r\n            else if (fieldname === \"test\") {\r\n\r\n                let defaultTestvalues = event.item;\r\n                this.props.Login.masterData.defaultTestvalues = defaultTestvalues;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData: { ...this.props.Login.masterData } }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n    }\r\n    OnDateConverstion = (date, fieldname) => {\r\n        const month = validateTwoDigitDate(String(date.getMonth() + 1));\r\n        const day = validateTwoDigitDate(String(date.getDate()));\r\n        if (fieldname === \"fromDate\") {\r\n            date = date.getFullYear() + '-' + month + '-' + day + \"T00:00:00\";\r\n        }\r\n        else {\r\n            date = date.getFullYear() + '-' + month + '-' + day + \"T23:59:00\";\r\n        }\r\n        return date;\r\n    }\r\n    onReload = () => {\r\n        let { realFromDate, realToDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realApproveConfigVersion,\r\n            realFilterStatusValue, realTestcodeValue } = this.props.Login.masterData\r\n        //let obj = this.covertDatetoString(realFromDate, realToDate)\r\n        let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\r\n        let masterData = { ...this.props.Login.masterData, realFromDate: obj.fromDate, realToDate: obj.toDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realFilterStatusValue, realApproveConfigVersion, realTestcodeValue }\r\n        let inputData = {\r\n            nsampletypecode: (realSampleTypeValue && realSampleTypeValue.nsampletypecode) || -1,\r\n            nregtypecode: (realRegTypeValue && realRegTypeValue.nregtypecode) || -1,\r\n            nregsubtypecode: (realRegSubTypeValue && realRegSubTypeValue.nregsubtypecode) || -1,\r\n            napprovalversioncode: (realApproveConfigVersion && realApproveConfigVersion.napprovalconfigversioncode) || -1,\r\n            ntranscode: String(realFilterStatusValue ? realFilterStatusValue.ntransactionstatus : -1),\r\n            ntestcode: realTestcodeValue ? realTestcodeValue.ntestcode : -1,\r\n            ntransactiontestcode: 0,\r\n            njobstatuscode: (this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode) || 1,\r\n            fromdate: obj.fromDate,\r\n            todate: obj.toDate,\r\n            userinfo: this.props.Login.userInfo,\r\n            activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\r\n            showTest: true,\r\n            showSample: false,\r\n            checkBoxOperation: 3,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\r\n        }\r\n        const inpuParamData = {\r\n            inputData,\r\n            masterData,\r\n            refs: { searchSampleRef: this.searchSampleRef, searchSubSampleRef: this.searchSubSampleRef, searchTestRef: this.searchTestRef },\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState,\r\n        }\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1\r\n            && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== -1) {\r\n            this.props.getResultEntryDetails(inpuParamData)\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n    onREFilterSubmit = (event) => {\r\n        // let realFromDate = new Date(this.props.Login.masterData.fromDate)\r\n        // let realToDate = new Date(this.props.Login.masterData.toDate)\r\n        let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\r\n        let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\r\n        let realSampleTypeValue = this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType\r\n        let realRegTypeValue = this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType\r\n        let realRegSubTypeValue = this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType\r\n        let realApproveConfigVersion = this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion\r\n        let realFilterStatusValue = this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus\r\n        let realTestcodeValue = this.props.Login.masterData.defaultTestvalues && this.props.Login.masterData.defaultTestvalues\r\n\r\n        //let obj = this.covertDatetoString(realFromDate, realToDate)\r\n        let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\r\n        let masterData = { ...this.props.Login.masterData, realFromDate: obj.fromDate, realToDate: obj.toDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realFilterStatusValue, realApproveConfigVersion, realTestcodeValue }\r\n        let inputData = {\r\n            nsampletypecode: (this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType.nsampletypecode) || -1,\r\n            nregtypecode: (this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType.nregtypecode) || -1,\r\n            nregsubtypecode: (this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode) || -1,\r\n            napprovalversioncode: (this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode) || -1,\r\n            ntranscode: String(this.props.Login.masterData.defaultFilterStatus ? this.props.Login.masterData.defaultFilterStatus.ntransactionstatus : -1),\r\n            ntestcode: this.props.Login.masterData.defaultTestvalues ? this.props.Login.masterData.defaultTestvalues.ntestcode : -1,\r\n            ntransactiontestcode: 0,\r\n            njobstatuscode: (this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode) || 1,\r\n            fromdate: obj.fromDate,\r\n            todate: obj.toDate,\r\n            userinfo: this.props.Login.userInfo,\r\n            activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\r\n            showTest: true,\r\n            showSample: false,\r\n            nneedsubsample: this.props.Login.masterData.nneedsubsample || false,\r\n            checkBoxOperation: 3,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\r\n        }\r\n        const inpuParamData = {\r\n            inputData,\r\n            masterData,\r\n            refs: { searchSampleRef: this.searchSampleRef, searchSubSampleRef: this.searchSubSampleRef, searchTestRef: this.searchTestRef },\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState\r\n        }\r\n\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1\r\n            && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== undefined) {\r\n            this.props.getResultEntryDetails(inpuParamData)\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    // covertDatetoString(startDateValue, endDateValue) {\r\n    //     const startDate = new Date(startDateValue);\r\n    //     const endDate = new Date(endDateValue);\r\n\r\n    //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\r\n    //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\r\n    //     const prevDay = validateTwoDigitDate(String(startDate.getDate()));\r\n    //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\r\n\r\n    //     const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay;\r\n    //     const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay;\r\n\r\n    //     const fromDate = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay + \"T00:00:00\";\r\n    //     const toDate = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay + \"T23:59:59\";\r\n    //     return ({ fromDate, toDate, breadCrumbFrom: fromDateOnly, breadCrumbto: toDateOnly })\r\n    // }\r\n    onSecondaryPaneSizeChange = (e, val) => {\r\n\r\n        // let hGrand = this.state.grandparentheight\r\n        // let check = e - 400;\r\n        // if (check > 1) {\r\n        //     hGrand = this.state.parentHeight + check\r\n        // }\r\n        // this.setState({\r\n        //     paneHeight: e - val,\r\n        //     secondPaneHeight: hGrand - e - 70,\r\n        //     grandparentheight: hGrand\r\n        // })\r\n        // this.setState({\r\n        //     paneHeight: e - val,\r\n        //     secondPaneHeight: this.state.parentHeight - e - 70\r\n        // })\r\n    }\r\n\r\n    onComboCategoryChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            let uRL = \"\";\r\n            let inputData = [];\r\n            uRL = 'resultentrybysample/getResultUsedInstrumentCombo';\r\n            if (fieldname === \"ninstrumentcatcode\") {\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 2,\r\n                    ninstrumentcatcode: event.value,\r\n                    ncalibrationRequired: event.item.ncalibrationreq\r\n                }\r\n            }\r\n            rsapi.post(uRL, inputData)\r\n                .then(response => {\r\n                    const TagInstrument = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\r\n                        \"sinstrumentid\", undefined, undefined, undefined);\r\n                    const TagListInstrument = TagInstrument.get(\"OptionList\")\r\n\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            masterData: { ...this.props.Login.masterData, Instrument: TagListInstrument },\r\n                            selectedRecord: {\r\n                                ...this.props.Login.selectedRecord,\r\n                                [fieldname]: event,\r\n                                ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n\r\n                    // const selectedRecord = this.state.selectedRecord || {};\r\n                    // selectedRecord[fieldname] = event;\r\n                    // this.setState({ selectedRecord });\r\n\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    showRESampleInfo = () => {\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         showSample: true, \r\n        //         showTest: false \r\n        //         }\r\n        //     }\r\n\r\n        // this.props.updateStore(updateInfo);\r\n        this.setState({ showSample: true, showTest: false })\r\n    }\r\n\r\n    showRETestList() {\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         showSample: false, \r\n        //         showTest: true \r\n        //         }\r\n        //     }\r\n\r\n        // this.props.updateStore(updateInfo);\r\n        this.setState({ showTest: true, showSample: false })\r\n    }\r\n\r\n    // getMeanTestParameter =(meanParam)=>{\r\n    //     const inputData = {npreregno:meanParam.selectedRecord.npreregno,\r\n    //                        userinfo:this.props.Login.userInfo}\r\n    //     return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\r\n    //         .then(response => {\r\n    //            const list =  response.data || [];\r\n    //            const optionList = [];\r\n    //            list.map(item=>{optionList.push({item:item, label:item.stestsynonym+\"-\"+item.sparametername+\"-\"+item.sresult, value:item.ntransactiontestresultcode})})\r\n    //            this.setState({meanTestParameterList:optionList});                \r\n    //         })\r\n    //         .catch(error => {\r\n    //             if (error.response.status === 500) {\r\n    //                 toast.error(error.message);\r\n    //             } else {\r\n    //                 toast.warn(error.response.data);\r\n    //             }\r\n    //         })\r\n    // }\r\n\r\n    testRETabDetail = () => {\r\n        const testTabMap = new Map();\r\n        //let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        let { testskip, testtake } = this.state\r\n        let testList = this.props.Login.masterData.RE_TEST || [];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n\r\n        const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode\r\n\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        testTabMap.set(\"IDS_RESULTS\", <ResultEntryResultsTab\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            fetchRecord={this.props.parameterRecord}\r\n            controlMap={this.state.controlMap}\r\n            parameterParam={{ primaryKeyField: \"ntransactionresultcode\", masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            checkListRecord={this.checkListRecord}\r\n            checklistParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            viewFile={this.props.viewAttachment}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_RESULTS\"\r\n            getMeanTestParameter={this.props.getMeanCalculationTestParameter}\r\n            meanParam={{ \"userInfo\": this.props.Login.userInfo, ncontrolCode: meanControlId }}\r\n        />)\r\n        testTabMap.set(\"IDS_INSTRUMENT\", <ApprovalInstrumentTab\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            methodUrl={\"ResultUsedInstrument\"}\r\n            controlMap={this.state.controlMap}\r\n            deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            dataState={this.state.instrumentDataState}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            isActionRequired={true}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteRecord={this.deleteInstrumentRecord}\r\n            fetchRecord={this.fetchInstrumentRecord}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_INSTRUMENT\"\r\n        />)\r\n        testTabMap.set(\"IDS_MATERIAL\", <UsedMaterial\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            methodUrl={\"ResultUsedMaterial\"}\r\n            controlMap={this.state.controlMap}\r\n            deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            dataState={this.state.materialDataState}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            isActionRequired={true}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteRecord={this.deleteMaterialRecord}\r\n            fetchRecord={this.props.fetchMaterialRecord}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_MATERIAL\"\r\n        />)\r\n        testTabMap.set(\"IDS_TASK\", <ResultEntryTaskTab\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            methodUrl={\"ResultUsedTask\"}\r\n            addResultEntryTask={this.addResultEntryTask}\r\n            controlMap={this.state.controlMap}\r\n            deleteParam={{\r\n                masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\r\n            }}\r\n            editParam={{\r\n                masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\r\n            }}\r\n            dataState={this.state.taskDataState}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            isActionRequired={true}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteRecord={this.deleteTaskRecord}\r\n            fetchRecord={this.fetchTaskRecord}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_TASK\" />)\r\n        testTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_TESTATTACHMENTS\"\r\n            selectedMaster=\"RESelectedTest\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n            attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            addName={\"AddTestAttachment\"}\r\n            editName={\"EditTestAttachment\"}\r\n            deleteName={\"DeleteTestAttachment\"}\r\n            viewName={\"ViewTestAttachment\"}\r\n            methodUrl={\"TestAttachment\"}\r\n            nsubsampleneed={this.props.Login.masterData.nneedsubsample}\r\n            subFields={[{ [designProperties.VALUE]: \"stestsynonym\" }, { [designProperties.VALUE]: \"dcreateddate\" }]}\r\n\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestAttachment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTATTACHMENTS\",\r\n                masterList: this.props.Login.masterData.RESelectedTest\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        testTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n            screenName=\"IDS_TESTCOMMENTS\"\r\n            selectedMaster=\"RESelectedTest\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddTestComment\"}\r\n            editName={\"EditTestComment\"}\r\n            deleteName={\"DeleteTestComment\"}\r\n            methodUrl={\"TestComment\"}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDCOMMENTS\"}\r\n            primaryKeyField={\"ntestcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            isTestComment={true}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\",\r\n                    masterList: this.props.Login.masterData.RESelectedTest,\r\n                    ncontrolCode: this.state.controlMap.has(\"DeleteTestComment\") && this.state.controlMap.get(\"DeleteTestComment\").ncontrolcode\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestComment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTCOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RESelectedTest,\r\n                ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\r\n\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />)\r\n        testTabMap.set(\"IDS_RESULTCHANGEHISTORY\", <ResultChangeHistoryTab\r\n            userInfo={this.props.Login.userInfo}\r\n            ApprovalResultChangeHistory={this.props.Login.masterData.ResultChangeHistory || []}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultChangeDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            screenName=\"IDS_RESULTCHANGEHISTORY\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            selectedId={null}\r\n\r\n        />)\r\n\r\n        return testTabMap;\r\n    }\r\n\r\n    sampleDataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleKey) {\r\n            case \"IDS_APPROVALHISTORY\":\r\n                this.setState({\r\n                    sampleHistoryDataState: event.dataState\r\n                })\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    sampleGridDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    sampleGridDataStateChange = (event) => {\r\n        this.setState({ sampleGridDataState: event.dataState })\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        switch (this.props.Login.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                this.setState({\r\n                    instrumentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                this.setState({\r\n                    materialDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TASK\":\r\n                this.setState({\r\n                    taskDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    instrumentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                this.setState({\r\n                    documentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                this.setState({\r\n                    resultChangeDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    // sampleTabDetail = () => {\r\n    //     const tabMap = new Map();\r\n\r\n    //     {\r\n    //         this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ?\r\n    //             tabMap.set(\"IDS_SAMPLEINFO\", <SampleInfoView\r\n    //                 data={this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0 ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {}}\r\n    //                 SingleItem={this.state.SingleItem}\r\n    //                 screenName=\"IDS_SAMPLEINFO\"\r\n    //             />) :\r\n    //             tabMap.set(\"IDS_SAMPLEGRID\", <SampleInfoGrid\r\n    //                 selectedSample={this.props.Login.masterData.RESelectedSample}\r\n    //                 dataState={this.state.dataState}\r\n    //                 dataStateChange={this.dataStateChange}\r\n    //                 detailedFieldList={this.state.SampleGridExpandableItem}\r\n    //                 extractedColumnList={this.state.SampleGridItem}\r\n    //                 userInfo={this.props.Login.userInfo}\r\n    //                 inputParam={this.props.Login.inputParam}\r\n    //                 screenName=\"IDS_SAMPLEGRID\"\r\n    //             />)\r\n    //         // tabMap.set(\"IDS_SAMPLEATTACHMENTS\", <></>)\r\n    //         // tabMap.set(\"IDS_SAMPLECOMMENTS\", <></>)\r\n    //         // tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <></>)\r\n    //         // tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <></>)\r\n    //         return tabMap;\r\n    //     }\r\n    // }\r\n\r\n    sampleTabDetail = () => {\r\n        const tabMap = new Map();\r\n\r\n        let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        //let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n\r\n        tabMap.set(\"IDS_SAMPLEATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n            selectedMaster=\"RESelectedSample\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            masterList={this.props.Login.masterData.RESelectedSample}\r\n            masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHMENT\"}\r\n            addName={\"AddSampleAttachment\"}\r\n            editName={\"EditSampleAttachment\"}\r\n            deleteName={\"DeleteSampleAttachment\"}\r\n            viewName={\"ViewSampleAttachment\"}\r\n            methodUrl={\"SampleAttachment\"}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: this.props.Login.screenName\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleAttachment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights\r\n\r\n            }}\r\n            selectedListName=\"IDS_SAMPLE\"\r\n            displayName=\"sarno\"\r\n        />)\r\n\r\n        tabMap.set(\"IDS_APPROVALHISTORY\", <SampleApprovalHistory\r\n            userInfo={this.props.Login.userInfo}\r\n            ApprovalHistory={this.props.Login.masterData.SampleApprovalHistory}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.sampleHistoryDataState}\r\n            dataStateChange={this.sampleDataStateChange}\r\n            screenName=\"IDS_APPROVALHISTORY\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            selectedId={null}\r\n        />)\r\n        // tabMap.set(\"IDS_SAMPLEATTACHMENTS\", <></>)\r\n        // tabMap.set(\"IDS_SAMPLECOMMENTS\", <></>)\r\n        // tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <></>)\r\n        // tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <></>)\r\n        return tabMap;\r\n    }\r\n\r\n    onSampleTabChange = (tabProps) => {\r\n        if (this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0) {\r\n            const activeSampleKey = tabProps.screenName;\r\n            if (activeSampleKey !== this.props.Login.activeSampleKey) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                    npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\r\n                    ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(subsamplecode => subsamplecode.ntransactionsamplecode).join(\",\").toString() : \"\",\r\n                    RESelectedSample: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample : \"\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeSampleKey: activeSampleKey,\r\n                    screenName: activeSampleKey\r\n                }\r\n                this.props.getSampleChildTabREDetail(inputData)\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }));\r\n        }\r\n    }\r\n\r\n    onTestTabChange = (tabProps) => {\r\n        const activeTestKey = tabProps.screenName;\r\n        if (activeTestKey !== this.props.Login.activeTestKey) {\r\n            if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                    npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\r\n                    RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\r\n                    // ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                    //     this.props.Login.masterData.selectedTestCode : this.props.Login.masterData.RESelectedTest ?\r\n                    //         String(this.props.Login.masterData.RESelectedTest.ntransactiontestcode) : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestKey: activeTestKey,\r\n                    screenName: activeTestKey,\r\n                    resultDataState: this.state.resultDataState,\r\n                    instrumentDataState: this.state.instrumentDataState,\r\n                    materialDataState: this.state.materialDataState,\r\n                    taskDataState: this.state.taskDataState,\r\n                    documentDataState: this.state.documentDataState,\r\n                    resultChangeDataState: this.state.resultChangeDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                }\r\n                this.props.getTestChildTabREDetail(inputData, true);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    testMethodSourceEdit = (test) => {\r\n        this.props.testMethodSourceEdit(test)\r\n    }\r\n\r\n    addREInstrument = (test) => {\r\n        this.props.addREInstrument(test)\r\n    }\r\n    deleteInstrumentRecord = (test) => {\r\n\r\n        let inputParam = {\r\n            inputData: { ...test, 'userinfo': this.props.Login.userInfo },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n            operation: \"deleteInstrument\",\r\n            screenName: \"deleteInstrumentAction\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //test: test\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: \"deleteInstrumentAction\",\r\n                    operation: \"deleteInstrument\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.deleteInstrumentRecord(test)\r\n        }\r\n\r\n\r\n    }\r\n    fetchInstrumentRecord = (test) => {\r\n        this.props.fetchInstrumentRecord(test)\r\n    }\r\n\r\n    deleteTaskRecord = (test) => {\r\n        let inputParam = {\r\n            inputData: { ...test, 'userinfo': this.props.Login.userInfo },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n            operation: \"deleteTask\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //test: test\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: \"deleteTaskaction\",\r\n                    operation: \"deleteTask\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.deleteTaskRecord(test)\r\n        }\r\n\r\n    }\r\n    fetchTaskRecord = (test) => {\r\n        this.props.fetchTaskRecord(test)\r\n    }\r\n    addResultEntryTask = (inputData) => {\r\n        let selectedRecord = {}\r\n        selectedRecord = {\r\n            npreregno: inputData.npreregno,\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            stestsynonym: inputData.stestsynonym\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: selectedRecord,\r\n                operation: \"create\",\r\n                screenName: \"IDS_TASK\",\r\n                openModal: true,\r\n                activeTestKey: \"IDS_TASK\",\r\n                ncontrolcode: inputData.addResultUsedTaskId,\r\n                selectedId: null\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    checkListRecord = (parameterData) => {\r\n        this.props.checkListRecord(parameterData, this.props.Login.userInfo)\r\n    }\r\n    getFormula = (parameterData, userInfo, masterData, index, event) => {\r\n        this.setState({\r\n            modalEvent: event.currentTarget\r\n        })\r\n        this.props.getFormula(parameterData, userInfo, masterData, index, this.state.selectedRecord)\r\n    }\r\n    calculateFormula = () => {\r\n        const selectedRecord = this.state.selectedRecord || []\r\n        const selectedForumulaInput = selectedRecord.selectedForumulaInput || []\r\n        let lstDynamicFields = [];\r\n\r\n        if (selectedForumulaInput) {\r\n            selectedForumulaInput.map(dynamicfields =>\r\n                lstDynamicFields.push(dynamicfields)\r\n            );\r\n            const inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                lstDynamicFields: lstDynamicFields,\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord: selectedRecord,\r\n                selectedResultGrade: this.state.selectedRecord.selectedResultGrade,\r\n                ResultParameter: this.state.selectedRecord.ResultParameter || {}\r\n            }\r\n            this.props.calculateFormula(inputData)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height\r\n            });\r\n        }\r\n    }\r\n    getActiveTestURL() {\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (this.props.Login.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                url = \"resultentrybysample/getResultUsedInstrument\"\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                url = \"resultentrybysample/getResultUsedMaterial\"\r\n                break;\r\n            case \"IDS_TASK\":\r\n                url = \"resultentrybysample/getResultUsedTask\"\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                url = \"resultentrybysample/getResultChangeHistory\"\r\n                break;\r\n            case \"IDS_APPROVALHISTORY\":\r\n                url = \"resultentrybysample/getSampleApprovalHistory\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            default:\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                break;\r\n        }\r\n        return url;\r\n    }\r\n\r\n    resultImport = () => {\r\n        this.props.Login.masterData.selectedImportFile = []\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                operation: \"create\",\r\n                screenName: \"IDS_RESULTIMPORTFILE\",\r\n                openModal: true,\r\n                loadFile: true,\r\n                activeTestKey: \"IDS_RESULTS\",\r\n                masterData: this.props.Login.masterData\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    }\r\n    handleSubSamplePageChange = e => {\r\n        this.setState({\r\n            subSampleSkip: e.skip,\r\n            subSampleTake: e.take\r\n        });\r\n        setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    }\r\n    handleTestPageChange = e => {\r\n        this.setState({\r\n            testskip: e.skip,\r\n            testtake: e.take,\r\n            sampletakeDataState: e.take\r\n        });\r\n    };\r\n    verticalPaneSizeChange = (val) => {\r\n        this.setState({\r\n            initialVerticalWidth: val - 150\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let sampleListRE = this.props.Login.masterData.RE_SAMPLE ? sortData(this.props.Login.masterData.RE_SAMPLE, \"descending\", \"npreregno\") : [];\r\n        let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\r\n        // let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\r\n        let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : []\r\n        const startDate = (this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date());\r\n        const endDate = (this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date());\r\n\r\n        // let obj = this.covertDatetoString(startDate, endDate)\r\n        let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\r\n\r\n        const fromDate = obj.fromDate;\r\n        const toDate = obj.toDate;\r\n\r\n\r\n        let subSampleGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            fromdate: fromDate,\r\n            todate: toDate,\r\n            activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\r\n            activeSampleKey: this.props.Login.activeSampleKey || 'IDS_IDS_SAMPLEINFO',\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            searchSubSampleRef: this.searchSubSampleRef,\r\n            searchTestRef: this.searchTestRef\r\n        }\r\n        let testGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\r\n            activeSampleKey: this.props.Login.activeSampleKey || 'IDS_IDS_SAMPLEINFO',\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\r\n        }\r\n        let testChildGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n            activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\r\n            fromdate: fromDate,\r\n            todate: toDate,\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\r\n        }\r\n\r\n        let sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"seprotocolname\", \"stransdisplaystatus\"\r\n            , \"sstorageconditionname\", \"sdecisionstatus\", \"scomponentname\", \"splasmafilenumber\", \"sversion\", \"sbulkvolume\", \"sregsubtypename\", \"smanuflotno\"\r\n            , \"sregtypename\", \"sspecname\", \"saddress1\", \"sclientname\", \"smanufsitename\", \"sproductcertificatename\", \"smanufname\", \"sstoragelocationname\", \"dregdate\"];\r\n        if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n\r\n            sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\",\r\n                \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\",\r\n                \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"\r\n            ]\r\n        }\r\n        const filterSampleParam = {\r\n            inputListName: \"RE_SAMPLE\",\r\n            selectedObject: \"RESelectedSample\",\r\n            primaryKeyField: \"npreregno\",\r\n            fetchUrl: \"resultentrybysample/getResultEntryDetails\",\r\n            childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n            fecthInputObject: {\r\n                ntype: 2,\r\n                nflag: 2,\r\n                ntransactiontestcode: 0,\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n                ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\r\n                ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                fromdate: fromDate,\r\n                todate: toDate,\r\n                activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\r\n                nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                checkBoxOperation: 3\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\r\n            searchFieldList: sampleSearchField,\r\n            changeList: [\"RE_SUBSAMPLE\", \"RE_TEST\", \"TestParameters\",\r\n                \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"RESelectedSample\", \"RESelectedSubSample\", \"RESelectedTest\"]\r\n        };\r\n\r\n        const filterSubSampleParam = {\r\n            inputListName: \"RE_SUBSAMPLE\",\r\n            selectedObject: \"RESelectedSubSample\",\r\n            primaryKeyField: \"ntransactionsamplecode\",\r\n            fetchUrl: \"resultentrybysample/getResultEntrySubSampleDetails\",\r\n            childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n            fecthInputObject: {\r\n                ntype: 2,\r\n                nflag: 2,\r\n                ntransactiontestcode: 0,\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n                ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\r\n                ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                fromdate: fromDate,\r\n                todate: toDate,\r\n                activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\r\n                nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                checkBoxOperation: 3\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\r\n            searchFieldList: ['ssamplearno'],\r\n            changeList: [\"RE_TEST\", \"TestParameters\",\r\n                \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"RESelectedSubSample\", \"RESelectedTest\"]\r\n        };\r\n        let filterTestParam = {\r\n            inputListName: \"RE_TEST\",\r\n            selectedObject: \"RESelectedTest\",\r\n            primaryKeyField: \"ntransactiontestcode\",\r\n            fetchUrl: this.getActiveTestURL(),\r\n            fecthInputObject: {\r\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"sarno\", \"stestsynonym\", \"dtransactiondate\", \"ssectionname\", \"ssourcename\", \"ntestrepeatno\", \"ntestretestno\", \"stransdisplaystatus\", \"stestsynonym\"],\r\n            changeList: [\"TestParameters\",\r\n                \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"RESelectedTest\"],\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: 3\r\n\r\n        }\r\n\r\n        this.postParamList = [\r\n            {\r\n                filteredListName: \"searchedSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSampleRef,\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"resultentrybysample/getResultEntryDetails\",\r\n                fecthInputObject: filterSampleParam,\r\n                selectedObject: \"RESelectedSample\",\r\n                inputListName: \"RE_SAMPLE\",\r\n                updatedListname: \"\",\r\n                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }, {\r\n                filteredListName: \"searchedSubSample\",\r\n                updatedListname: \"updatedSubSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSubSampleRef,\r\n                primaryKeyField: \"ntransactionsamplecode\",\r\n                fetchUrl: \"resultentrybysample/getResultEntryDetails\",\r\n                fecthInputObject: testGetREParam,\r\n                selectedObject: \"RESelectedSubSample\",\r\n                childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                inputListName: \"RE_SUBSAMPLE\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }, {\r\n                filteredListName: \"searchedTest\",\r\n                clearFilter: \"yes\",\r\n                searchRef: this.searchTestRef,\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: this.getActiveTestURL(),\r\n                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchSampleRef, childFilteredListName: \"\" }],\r\n                fecthInputObject: testChildGetREParam,\r\n                selectedObject: \"RESelectedTest\",\r\n                inputListName: \"RE_TEST\",\r\n                updatedListname: \"updatedTest\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }];\r\n\r\n\r\n        this.breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": obj.breadCrumbFrom\r\n            }, {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": obj.breadCrumbto\r\n            },\r\n            {\r\n                \"label\": \"IDS_SAMPLETYPE\",\r\n                \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\r\n            }, {\r\n                \"label\": \"IDS_REGISTRATIONTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"Batch\"\r\n            }, {\r\n                \"label\": \"IDS_REGISTRATIONSUBTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"EU\"\r\n            }, {\r\n                \"label\": \"IDS_CONFIGVERSION\",\r\n                \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\r\n            }, {\r\n                \"label\": \"IDS_FILTERSTATUS\",\r\n                \"value\": this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.sfilterstatus : \"NA\"\r\n            }, {\r\n                \"label\": \"IDS_TEST\",\r\n                \"value\": this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.stestsynonym ? this.props.Login.masterData.realTestcodeValue.stestsynonym : \"NA\"\r\n            }\r\n        ]\r\n\r\n\r\n        const testStartId = this.state.controlMap.has(\"TestStart\") && this.state.controlMap.get(\"TestStart\").ncontrolcode\r\n        const resultEnterId = this.state.controlMap.has(\"ResultEnter\") && this.state.controlMap.get(\"ResultEnter\").ncontrolcode\r\n        const completeResultId = this.state.controlMap.has(\"CompleteResult\") && this.state.controlMap.get(\"CompleteResult\").ncontrolcode\r\n        const setDefaultId = this.state.controlMap.has(\"SetDefaultResult\") && this.state.controlMap.get(\"SetDefaultResult\").ncontrolcode\r\n\r\n        const editSourceMethodId = this.state.controlMap.has(\"EditSourceMethod\") && this.state.controlMap.get(\"EditSourceMethod\").ncontrolcode\r\n        const addResultUsedInstrumentId = this.state.controlMap.has(\"AddResultUsedInstrument\") && this.state.controlMap.get(\"AddResultUsedInstrument\").ncontrolcode\r\n        const addResultUsedMaterailId = this.state.controlMap.has(\"AddResultUsedMaterial\") && this.state.controlMap.get(\"AddResultUsedMaterial\").ncontrolcode\r\n        //const addResultUsedTaskId = this.state.controlMap.has(\"AddResultUsedTask\") && this.state.controlMap.get(\"AddResultUsedTask\").ncontrolcode\r\n        //const parameterCommentsId = this.state.controlMap.has(\"AddParameterComments\") && this.state.controlMap.get(\"AddParameterComments\").ncontrolcode\r\n\r\n\r\n        const mandatoryFieldsInstrument = [{ \"mandatory\": true, \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"ninstrumentcatcode\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_INSTRUMENT\", \"dataField\": \"ninstrumentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_FORMDATE\", \"dataField\": \"dfromdate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_TODATE\", \"dataField\": \"dtodate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzfromdate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntztodate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }]\r\n\r\n        const mandatoryFieldsTask = [{ \"mandatory\": true, \"idsName\": \"IDS_PREANALYSISTIME\", \"dataField\": \"spreanalysistime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_PREPARATIONTIME\", \"dataField\": \"spreparationtime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_ANALYSISTIME\", \"dataField\": \"sanalysistime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_MISCTIME\", \"dataField\": \"smisctime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            //{ \"mandatory\": true, \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\" }\r\n        ]\r\n\r\n        const mandatoryFieldsTestMethodSource = [{ \"mandatory\": true, \"idsName\": \"IDS_SOURCE\", \"dataField\": \"nsourcecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_METHOD\", \"dataField\": \"nmethodcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }]\r\n\r\n        // const mandatoryFieldsCheckList=[{\"mandatory\": true, \"idsName\": \"IDS_SOURCE\", \"dataField\": \"nsourcecode\" },\r\n        //    { \"mandatory\": true, \"idsName\": \"IDS_METHOD\", \"dataField\": \"nmethodcode\"}]\r\n        const mandatoryFieldsParameter = [{ \"mandatory\": true, \"idsName\": \"IDS_PARAMETERCOMMENTS\", \"dataField\": \"sresultcomment\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }]\r\n        const validateFormulaMandyFields = this.state.validateFormulaMandyFields;\r\n\r\n        // const mandatoryFieldsTask = [{ \"mandatory\": true, \"idsName\": \"IDS_PREANALYSISTIME\", \"dataField\": \"spreanalysistime\" },\r\n        // { \"mandatory\": true, \"idsName\": \"IDS_PREPARATIONTIME\", \"dataField\": \"spreparationtime\" },\r\n        // { \"mandatory\": true, \"idsName\": \"IDS_ANALYSISTIME\", \"dataField\": \"sanalysistime\" },\r\n        // { \"mandatory\": true, \"idsName\": \"IDS_MISCTIME\", \"dataField\": \"smisctime\" }]\r\n\r\n        const reportPreviewId = this.state.controlMap.has(\"SamplePreviewReport\") && this.state.controlMap.get(\"SamplePreviewReport\").ncontrolcode\r\n        return (\r\n            <>\r\n                {/* <PerfectScrollbar> */}\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n                    <Row noGutters={true}>\r\n                        {/* sticky_head_parent ref={(parentHeight) => { this.parentHeight = parentHeight }} secondaryInitialSize={40}*/}\r\n                        <Col md={12} className=\"parent-port-height\" >\r\n                            <ListWrapper>\r\n                                <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1} secondaryInitialSize={this.state.splitChangeWidthPercentage} onSecondaryPaneSizeChange={this.paneSizeChange} primaryMinSize={40} secondaryMinSize={20}>\r\n                                    <TransactionListMasterJson\r\n                                        // paneHeight={this.state.parentHeight}\r\n                                        splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                        masterList={this.props.Login.masterData.searchedSample || sampleListRE}\r\n                                        selectedMaster={this.props.Login.masterData.RESelectedSample}\r\n                                        primaryKeyField=\"npreregno\"\r\n                                        getMasterDetail={this.props.getsubSampleREDetail}\r\n                                        inputParam={subSampleGetREParam}\r\n                                        additionalParam={['napprovalversioncode']}\r\n                                        mainField=\"sarno\"\r\n                                        selectedListName=\"RESelectedSample\"\r\n                                        objectName=\"sample\"\r\n                                        listName=\"IDS_SAMPLE\"\r\n                                        needValidation={false}\r\n                                        validationKey=\"napprovalversioncode\"\r\n                                        validationFailMsg=\"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\"\r\n                                        subFields={this.state.DynamicSampleColumns || []}\r\n                                        moreField={this.state.sampleMoreField}\r\n                                        needFilter={true}\r\n                                        needMultiSelect={true}\r\n                                        showFilter={this.props.Login.showFilter}\r\n                                        openFilter={this.openFilter}\r\n                                        closeFilter={this.closeFilter}\r\n                                        onFilterSubmit={this.onREFilterSubmit}\r\n                                        filterColumnData={this.props.filterTransactionList}\r\n                                        searchListName=\"searchedSample\"\r\n                                        searchRef={this.searchSampleRef}\r\n                                        handlePageChange={this.handlePageChange}\r\n                                        filterParam={filterSampleParam}\r\n                                        skip={this.state.skip}\r\n                                        take={this.state.take}\r\n                                        hidePaging={false}\r\n                                        showStatusLink={true}\r\n                                        showStatusName={true}\r\n                                        statusFieldName=\"stransdisplaystatus\"\r\n                                        statusField=\"ntransactionstatus\"\r\n                                        selectionFieldName=\"sfilterstatus\"\r\n                                        splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                        childTabsKey={[\"RegistrationAttachment\", \"RE_SUBSAMPLE\", \"RE_TEST\", \"SampleApprovalHistory\"]}\r\n                                        selectionList={this.state.selectedFilter}\r\n                                        selectionColorField=\"scolorhexcode\"\r\n                                        selectionField=\"ntransactionstatus\"\r\n                                        jsonField={'jsondata'}\r\n                                        jsonDesignFields={true}\r\n                                        filterComponent={[\r\n                                            {\r\n                                                \"Sample Filter\": <ResultEntryFilter\r\n                                                    fromDate={this.props.Login.masterData.fromDate ? //new Date(this.props.Login.masterData.fromDate) \r\n                                                        rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate)\r\n                                                        : new Date()}\r\n                                                    toDate={this.props.Login.masterData.toDate ? //new Date(this.props.Login.masterData.toDate) \r\n                                                        rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate)\r\n                                                        : new Date()}\r\n                                                    SampleType={this.state.SampleType || []}\r\n                                                    SampleTypeValue={this.props.Login.masterData.defaultSampleType || []}\r\n                                                    RegType={this.state.RegistrationType || []}\r\n                                                    RegTypeValue={this.props.Login.masterData.defaultRegistrationType || []}\r\n                                                    RegSubType={this.state.RegistrationSubType || []}\r\n                                                    RegSubTypeValue={this.props.Login.masterData.defaultRegistrationSubType || []}\r\n                                                    FilterStatus={this.state.REFilterStatus || []}\r\n                                                    FilterStatusValue={this.props.Login.masterData.defaultFilterStatus || []}\r\n                                                    ApprovalVersion={this.state.ApprovalConfigVersion || []}\r\n                                                    ApprovalVersionValue={this.props.Login.masterData.defaultApprovalConfigVersion || []}\r\n                                                    REJobStatus={this.state.REJobStatus || []}\r\n                                                    JobStatusValue={this.props.Login.masterData.defaultjobstatus || []}\r\n                                                    Test={this.state.Testvalues || []}\r\n                                                    TestValue={this.props.Login.masterData.defaultTestvalues || []}\r\n                                                    onFilterComboChange={this.onFilterComboChange}\r\n                                                    handleDateChange={this.handleDateChange}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                />\r\n                                            }\r\n                                        ]}\r\n                                        actionIcons={\r\n                                            [this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ?\r\n                                                {\r\n                                                    title: \"Report\",\r\n                                                    controlname: \"reports\",\r\n                                                    objectName: \"sample\",\r\n                                                    hidden: this.state.userRoleControlRights.indexOf(reportPreviewId) === -1,\r\n                                                    onClick: this.props.previewSampleReport,\r\n                                                    inputData: {\r\n                                                        userinfo: this.props.Login.userInfo,\r\n                                                        ncontrolcode: reportPreviewId\r\n                                                    },\r\n                                                } : {}\r\n                                            ]\r\n                                        }\r\n                                        commonActions={\r\n                                            <>\r\n                                                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                                <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n\r\n                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                    <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                        onClick={() => this.onReload()}\r\n                                                        data-for=\"tooltip-common-wrap\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                        <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                    </Button>\r\n                                                    {/* </Tooltip> */}\r\n                                                </ProductList>\r\n                                            </>\r\n                                        }\r\n                                    />\r\n                                    {this.props.Login.masterData.nneedsubsample ?\r\n                                        <ScrollBar ref={(ref) => { this._scrollBarRef = ref; }}>\r\n                                            <SplitterLayout\r\n                                                customClassName=\"detailed-inner\"\r\n                                                vertical\r\n                                                borderColor=\"#999\"\r\n                                                primaryIndex={1}\r\n                                                onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\r\n                                                secondaryInitialSize={400}\r\n                                            >\r\n                                                <div>\r\n                                                    <div style={this.state.showTest === true ? { display: \"block\", background: \"#FFFF\" } : { display: \"none\", background: \"#FFFF\" }} >\r\n                                                        <SplitterLayout borderColor=\"#999\"\r\n                                                            primaryIndex={1} percentage={true}\r\n                                                            secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                                            onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                                            primaryMinSize={40}\r\n                                                            secondaryMinSize={30}\r\n                                                        >\r\n                                                            <Card>\r\n                                                                <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                    <span style={{ display: \"inline-block\" }}>\r\n                                                                        <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}</h4>\r\n                                                                    </span>\r\n                                                                </Card.Header>\r\n                                                                <Card.Body className='p-0 spliterHeight'>\r\n                                                                    <TransactionListMasterJson\r\n                                                                        paneHeight={this.state.initialVerticalWidth}\r\n                                                                        masterList={this.props.Login.masterData.searchedSubSample || subSampleListRE}\r\n                                                                        selectedMaster={this.props.Login.masterData.RESelectedSubSample}\r\n                                                                        primaryKeyField=\"ntransactionsamplecode\"\r\n                                                                        getMasterDetail={this.props.getTestREDetail}\r\n                                                                        inputParam={testGetREParam}\r\n                                                                        additionalParam={[]}\r\n                                                                        mainField=\"ssamplearno\"\r\n                                                                        selectedListName=\"RESelectedSubSample\"\r\n                                                                        objectName=\"subSample\"\r\n                                                                        listName=\"IDS_SUBSAMPLE\"\r\n                                                                        jsonField={'jsondata'}\r\n                                                                        jsonDesignFields={true}\r\n                                                                        subFields={this.state.DynamicSubSampleColumns}\r\n                                                                        moreField={this.state.subSampleMoreField}\r\n                                                                        needValidation={false}\r\n                                                                        needMultiSelect={true}\r\n                                                                        needFilter={false}\r\n                                                                        skip={this.state.subSampleSkip}\r\n                                                                        take={this.state.subSampleTake}\r\n                                                                        handlePageChange={this.handleSubSamplePageChange}\r\n                                                                        showStatusLink={true}\r\n                                                                        showStatusName={true}\r\n                                                                        statusFieldName=\"stransdisplaystatus\"\r\n                                                                        statusField=\"ntransactionstatus\"\r\n                                                                        childTabsKey={[\"RE_TEST\"]}\r\n                                                                        filterColumnData={this.props.filterTransactionList}\r\n                                                                        searchListName=\"searchedSubSample\"\r\n                                                                        searchRef={this.searchSubSampleRef}\r\n                                                                        filterParam={filterSubSampleParam}\r\n                                                                    />\r\n                                                                </Card.Body>\r\n                                                            </Card>\r\n                                                            <ContentPanel>\r\n                                                                <Card>\r\n                                                                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                        <span style={{ display: \"inline-block\" }} >\r\n                                                                            <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                                                                        </span>\r\n                                                                        <button className=\"btn btn-primary headerBtn\" style={{ float: \"right\" }}\r\n                                                                            onClick={() => this.showRESampleInfo()}>\r\n                                                                            <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                                                                        </button>\r\n                                                                    </Card.Header>\r\n                                                                    <Card.Body className='p-0'>\r\n                                                                        {/* <PerfectScrollbar> */}\r\n                                                                        <TransactionListMasterJson\r\n                                                                            paneHeight={this.state.initialVerticalWidth}\r\n                                                                            // paneHeight={`${testListRE && testListRE !== null && testListRE.length > 0 ? testListRE.length * 13 : 5}vh`}\r\n                                                                            masterList={this.props.Login.masterData.searchedTest || testListRE}\r\n                                                                            selectedMaster={this.props.Login.masterData.RESelectedTest}\r\n                                                                            primaryKeyField=\"ntransactiontestcode\"\r\n                                                                            getMasterDetail={this.props.getTestChildTabREDetail}\r\n                                                                            inputParam={testChildGetREParam}\r\n                                                                            additionalParam={[]}\r\n                                                                            mainField=\"stestsynonym\"\r\n                                                                            selectedListName=\"RESelectedTest\"\r\n                                                                            objectName=\"test\"\r\n                                                                            listName=\"IDS_TEST\"\r\n                                                                            pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                                                                            showStatusLink={true}\r\n                                                                            statusFieldName=\"stransdisplaystatus\"\r\n                                                                            statusField=\"ntransactionstatus\"\r\n                                                                            needMultiSelect={true}\r\n                                                                            subFields={this.state.testListColumns || []}\r\n                                                                            moreField={this.state.testMoreField}\r\n                                                                            needValidation={false}\r\n                                                                            needFilter={false}\r\n                                                                            filterColumnData={this.props.filterTransactionList}\r\n                                                                            searchListName=\"searchedTest\"\r\n                                                                            searchRef={this.searchTestRef}\r\n                                                                            filterParam={filterTestParam}\r\n                                                                            selectionField=\"ntransactionstatus\"\r\n                                                                            showStatusName={true}\r\n                                                                            selectionFieldName=\"sfilterstatus\"\r\n                                                                            childTabsKey={[\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                                                                                \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"]}\r\n                                                                            selectionList={this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.REFilterStatus : []}\r\n                                                                            skip={this.state.testskip}\r\n                                                                            take={this.state.testtake}\r\n                                                                            handlePageChange={this.handleTestPageChange}\r\n                                                                            selectionColorField=\"scolorhexcode\"\r\n                                                                            showMoreResetList={true}\r\n                                                                            showMoreResetListName=\"RE_SAMPLE\"\r\n                                                                            buttonCount={5}\r\n                                                                            jsonField={'jsondata'}\r\n                                                                            jsonDesignFields={true}\r\n                                                                            actionIcons={\r\n                                                                                [{ title: this.props.intl.formatMessage({ id: \"IDS_EDITMETHODSSOURCE\" }), controlname: \"faPencilAlt\", dataplace: \"left\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                                                                                { title: this.props.intl.formatMessage({ id: \"IDS_ADDINSTRUMENT\" }), controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                                                                                { title: this.props.intl.formatMessage({ id: \"IDS_ADDMATERIAL\" }), controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1, onClick: this.props.addREMaterial, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedMaterailId } }\r\n                                                                                    // { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }\r\n                                                                                ]\r\n                                                                            }\r\n                                                                            commonActions={\r\n                                                                                // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\r\n                                                                                <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                                                                    {testListRE.length > 0 ?\r\n                                                                                        <>\r\n                                                                                            {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                                                            <Nav.Link data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_TESTSTART\" })} hidden={this.state.userRoleControlRights.indexOf(testStartId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\">\r\n                                                                                                <FontAwesomeIcon icon={faPlay} />\r\n                                                                                            </Nav.Link>\r\n                                                                                            <Nav.Link data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_ENTERRESULT\" })} hidden={this.state.userRoleControlRights.indexOf(resultEnterId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.props.resultGetModule(this.props.Login.masterData, this.props.Login.userInfo, resultEnterId, this.state.testskip, this.state.testtake)} >\r\n                                                                                                <FontAwesomeIcon icon={faAddressBook} />\r\n                                                                                            </Nav.Link>\r\n                                                                                            <Nav.Link data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_FILLDEFAULTRESULT\" })} hidden={this.state.userRoleControlRights.indexOf(setDefaultId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.defaultActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.masterData.RESelectedSample, setDefaultId, this.state.testskip, this.state.testtake)}>\r\n                                                                                                <FontAwesomeIcon icon={faPencilRuler} />\r\n                                                                                            </Nav.Link>\r\n                                                                                            <Nav.Link data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" })} hidden={this.state.userRoleControlRights.indexOf(completeResultId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake)}>\r\n                                                                                                <FontAwesomeIcon icon={faCheckCircle} />\r\n                                                                                            </Nav.Link>\r\n                                                                                            <Nav.Link data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_IMPORTRESULT\" })} hidden={this.state.userRoleControlRights.indexOf(completeResultId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.resultImport(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake)}>\r\n                                                                                                <FontAwesomeIcon icon={faFileImport} />\r\n                                                                                            </Nav.Link>\r\n                                                                                        </>\r\n                                                                                        : \"\"}\r\n                                                                                </ProductList>\r\n\r\n                                                                                // </Tooltip>\r\n                                                                            }\r\n                                                                        />\r\n                                                                        {/* </PerfectScrollbar> */}\r\n                                                                    </Card.Body>\r\n                                                                </Card>\r\n                                                            </ContentPanel>\r\n                                                        </SplitterLayout>\r\n                                                    </div>\r\n                                                    <ContentPanel style={this.state.showSample === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                        <Card className=\"border-0\">\r\n                                                            <Card.Body className='p-0'>\r\n                                                                <Card className='p-0'>\r\n                                                                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                            <h4 >{this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}</h4>\r\n                                                                        </span>\r\n                                                                        <button className=\"btn btn-primary\" style={{ float: \"right\" }}\r\n                                                                            onClick={() => this.showRETestList()}>\r\n                                                                            <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                        </button>\r\n                                                                    </Card.Header>\r\n                                                                    <Card.Body>\r\n                                                                        {this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ?\r\n                                                                            <SampleInfoView\r\n                                                                                data={this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0\r\n                                                                                    ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {}}\r\n                                                                                SingleItem={this.state.SingleItem}\r\n\r\n                                                                                screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                userInfo={this.props.Login.userInfo}\r\n                                                                            /> :\r\n                                                                            <SampleInfoGrid\r\n                                                                                selectedSample={this.props.Login.masterData.RESelectedSample}\r\n                                                                                dataState={this.state.sampleGridDataState}\r\n                                                                                dataStateChange={this.sampleGridDataStateChange}\r\n                                                                                extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                                                                detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}\r\n                                                                                userInfo={this.props.Login.userInfo}\r\n                                                                                inputParam={this.props.Login.inputParam}\r\n                                                                                screenName=\"IDS_SAMPLEGRID\"\r\n                                                                                jsonField={\"jsondata\"}\r\n                                                                            />\r\n                                                                        }\r\n                                                                        {/* <CustomTabs tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} paneHeight={this.state.paneHeight} /> */}\r\n                                                                    </Card.Body>\r\n                                                                </Card>\r\n                                                            </Card.Body>\r\n                                                        </Card>\r\n                                                    </ContentPanel>\r\n                                                </div>\r\n                                                <div>\r\n                                                    <PerfectScrollbar>\r\n                                                        <div style={{ height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\" }}>\r\n                                                            {this.state.showTest ?\r\n                                                                <CustomTabs activeKey={this.props.Login.activeTestKey || \"IDS_RESULTS\"}\r\n                                                                    tabDetail={this.testRETabDetail()} onTabChange={this.onTestTabChange} />\r\n                                                                :\r\n                                                                <CustomTabs tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} />\r\n                                                            }\r\n                                                        </div>\r\n                                                    </PerfectScrollbar>\r\n                                                </div>\r\n                                            </SplitterLayout>\r\n                                        </ScrollBar>\r\n                                        :\r\n                                        <PerfectScrollbar ref={(ref) => { this._scrollBarRef = ref; }}>\r\n\r\n                                            <SplitterLayout vertical borderColor=\"#999\" percentage={true} primaryIndex={1} secondaryInitialSize={400}\r\n                                                customClassName=\"fixed_list_height\">\r\n                                                <PerfectScrollbar>\r\n                                                    {/* <div> */}\r\n                                                    <>\r\n                                                        {/* <PerfectScrollbar> */}\r\n                                                        <div className=\"card_group\">\r\n                                                            <ContentPanel style={this.state.showTest === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                                <Card className=\"border-0\" >\r\n                                                                    <Card.Body className='p-0'>\r\n                                                                        <Row className='no-gutters'>\r\n                                                                            <Col md={12}>\r\n                                                                                <Card>\r\n                                                                                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                                            <h4 >{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                                                                                        </span>\r\n                                                                                        <button className=\"btn btn-primary\" style={{ float: \"right\" }}\r\n                                                                                            onClick={() => this.showRESampleInfo()}>\r\n                                                                                            <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                                                                            {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                                                                                        </button>\r\n                                                                                    </Card.Header>\r\n                                                                                    <Card.Body className='p-0'>\r\n                                                                                        {/* <PerfectScrollbar> */}\r\n                                                                                        <TransactionListMasterJson\r\n                                                                                            paneHeight={`${testListRE && testListRE !== null && testListRE.length > 0 ? testListRE.length * 13 : 5}vh`}\r\n                                                                                            masterList={this.props.Login.masterData.searchedTest || testListRE}\r\n                                                                                            selectedMaster={this.props.Login.masterData.RESelectedTest}\r\n                                                                                            primaryKeyField=\"ntransactiontestcode\"\r\n                                                                                            getMasterDetail={this.props.getTestChildTabREDetail}\r\n                                                                                            inputParam={testChildGetREParam}\r\n                                                                                            additionalParam={[]}\r\n                                                                                            mainField=\"stestsynonym\"\r\n                                                                                            selectedListName=\"RESelectedTest\"\r\n                                                                                            objectName=\"test\"\r\n                                                                                            listName=\"IDS_TEST\"\r\n                                                                                            pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                                                                                            showStatusLink={true}\r\n                                                                                            statusFieldName=\"stransdisplaystatus\"\r\n                                                                                            statusField=\"ntransactionstatus\"\r\n                                                                                            needMultiSelect={true}\r\n                                                                                            subFields={this.state.testListColumns || []}\r\n                                                                                            moreField={this.state.testMoreField}\r\n                                                                                            needValidation={false}\r\n                                                                                            needFilter={false}\r\n                                                                                            filterColumnData={this.props.filterTransactionList}\r\n                                                                                            searchListName=\"searchedTest\"\r\n                                                                                            searchRef={this.searchTestRef}\r\n                                                                                            filterParam={filterTestParam}\r\n                                                                                            selectionField=\"ntransactionstatus\"\r\n                                                                                            showStatusName={true}\r\n                                                                                            selectionFieldName=\"sfilterstatus\"\r\n                                                                                            childTabsKey={[\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                                                                                                \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"]}\r\n                                                                                            selectionList={this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.REFilterStatus : []}\r\n                                                                                            skip={this.state.testskip}\r\n                                                                                            take={this.state.testtake}\r\n                                                                                            handlePageChange={this.handleTestPageChange}\r\n                                                                                            selectionColorField=\"scolorhexcode\"\r\n                                                                                            showMoreResetList={true}\r\n                                                                                            showMoreResetListName=\"RE_SAMPLE\"\r\n                                                                                            buttonCount={5}\r\n                                                                                            actionIcons={\r\n                                                                                                [{ title: this.props.intl.formatMessage({ id: \"IDS_EDITMETHODSSOURCE\" }), controlname: \"faPencilAlt\", dataplace: \"left\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                                                                                                { title: this.props.intl.formatMessage({ id: \"IDS_ADDINSTRUMENT\" }), controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                                                                                                { title: this.props.intl.formatMessage({ id: \"IDS_ADDMATERIAL\" }), controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1, onClick: this.props.addREMaterial, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedMaterailId } }\r\n                                                                                                    // { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }\r\n                                                                                                ]\r\n                                                                                            }\r\n                                                                                            commonActions={\r\n                                                                                                // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\r\n                                                                                                <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                                                                                    {testListRE.length > 0 ?\r\n                                                                                                        <>\r\n                                                                                                            {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                                                                            <Nav.Link data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_TESTSTART\" })} hidden={this.state.userRoleControlRights.indexOf(testStartId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\">\r\n                                                                                                                <FontAwesomeIcon icon={faPlay} />\r\n                                                                                                            </Nav.Link>\r\n                                                                                                            <Nav.Link data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_ENTERRESULT\" })} hidden={this.state.userRoleControlRights.indexOf(resultEnterId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.props.resultGetModule(this.props.Login.masterData, this.props.Login.userInfo, resultEnterId, this.state.testskip, this.state.testtake)} >\r\n                                                                                                                <FontAwesomeIcon icon={faAddressBook} />\r\n                                                                                                            </Nav.Link>\r\n                                                                                                            <Nav.Link data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_FILLDEFAULTRESULT\" })} hidden={this.state.userRoleControlRights.indexOf(setDefaultId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.defaultActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.masterData.RESelectedSample, setDefaultId, this.state.testskip, this.state.testtake)}>\r\n                                                                                                                <FontAwesomeIcon icon={faPencilRuler} />\r\n                                                                                                            </Nav.Link>\r\n                                                                                                            <Nav.Link data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" })} hidden={this.state.userRoleControlRights.indexOf(completeResultId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake)}>\r\n                                                                                                                <FontAwesomeIcon icon={faCheckCircle} />\r\n                                                                                                            </Nav.Link>\r\n                                                                                                            <Nav.Link data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_IMPORTRESULT\" })} hidden={this.state.userRoleControlRights.indexOf(completeResultId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.resultImport(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake)}>\r\n                                                                                                                <FontAwesomeIcon icon={faFileImport} />\r\n                                                                                                            </Nav.Link>\r\n                                                                                                        </>\r\n                                                                                                        : \"\"}\r\n                                                                                                </ProductList>\r\n\r\n                                                                                                // </Tooltip>\r\n                                                                                            }\r\n                                                                                        />\r\n                                                                                        {/* </PerfectScrollbar> */}\r\n                                                                                    </Card.Body>\r\n                                                                                </Card>\r\n                                                                            </Col>\r\n                                                                        </Row>\r\n                                                                    </Card.Body>\r\n                                                                </Card>\r\n                                                            </ContentPanel>\r\n                                                            {/* <div> */}\r\n                                                            <ContentPanel style={this.state.showSample === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                                <Card className=\"border-0\">\r\n                                                                    <Card.Body className='p-0'>\r\n                                                                        <Card className='p-0'>\r\n                                                                            <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                                    <h4 >{this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}</h4>\r\n                                                                                </span>\r\n                                                                                <button className=\"btn btn-primary\" style={{ float: \"right\" }}\r\n                                                                                    onClick={() => this.showRETestList()}>\r\n                                                                                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                                                                    {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                                </button>\r\n                                                                            </Card.Header>\r\n                                                                            <Card.Body>\r\n                                                                                {this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ?\r\n                                                                                    <SampleInfoView\r\n                                                                                        data={this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0\r\n                                                                                            ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {}}\r\n                                                                                        SingleItem={this.state.SingleItem}\r\n                                                                                        screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                    /> :\r\n                                                                                    <SampleInfoGrid\r\n                                                                                        selectedSample={this.props.Login.masterData.RESelectedSample}\r\n                                                                                        dataState={this.state.sampleGridDataState}\r\n                                                                                        dataStateChange={this.sampleGridDataStateChange}\r\n                                                                                        extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                                                                        detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}\r\n                                                                                        userInfo={this.props.Login.userInfo}\r\n                                                                                        inputParam={this.props.Login.inputParam}\r\n                                                                                        screenName=\"IDS_SAMPLEGRID\"\r\n                                                                                        jsonField={\"jsondata\"}\r\n                                                                                    />\r\n                                                                                }\r\n                                                                                {/* <CustomTabs tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} paneHeight={this.state.paneHeight} /> */}\r\n                                                                            </Card.Body>\r\n                                                                        </Card>\r\n                                                                    </Card.Body>\r\n                                                                </Card>\r\n                                                            </ContentPanel>\r\n\r\n                                                            {/* </div>\r\n                                            </div> */}\r\n\r\n                                                            {/* </SplitterLayout> */}\r\n                                                            {/* </div> */}\r\n                                                            {/* </SplitterLayout>\r\n                                    </SplitterLayout> */}\r\n                                                            {/* </div > */}\r\n                                                            {/* </SplitterLayout > */}\r\n                                                            {/* </ListWrapper > */}\r\n                                                            {/* <SplitterLayout\r\n                                        vertical\r\n                                        borderColor=\"#999\"\r\n                                        percentage={true}\r\n                                        primaryIndex={0}\r\n                                        secondaryInitialSize={0}>\r\n                                        <SplitterLayout\r\n                                            vertical\r\n                                            borderColor=\"#999\"\r\n                                            percentage={true}\r\n                                            primaryIndex={0}\r\n                                            secondaryInitialSize={20}> */}\r\n\r\n                                                            {/* </SplitterLayout> */}\r\n                                                            {/* <ListWrapper>\r\n                                            <ContentPanel className=\"panel-main-content\">\r\n                                                <Card className=\"border-0\">\r\n                                                    <Card.Body className='p-0'>\r\n                                                        <Row className='no-gutters'>\r\n                                                            <Col md={12}> */}\r\n                                                            {/* <PerfectScrollbar> */}\r\n                                                            {this.state.showTest ?\r\n                                                                <CustomTabs activeKey={this.props.Login.activeTestKey || \"IDS_RESULTS\"}\r\n                                                                    tabDetail={this.testRETabDetail()} onTabChange={this.onTestTabChange} />\r\n                                                                :\r\n                                                                <CustomTabs tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} />}\r\n                                                        </div>\r\n                                                        {/* </PerfectScrollbar> */}\r\n                                                    </>\r\n                                                    {/* </PerfectScrollbar> */}\r\n                                                    {/* </Col>\r\n                                                        </Row>\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                            </ContentPanel>\r\n                                        </ListWrapper> */}\r\n                                                </PerfectScrollbar>\r\n\r\n                                            </SplitterLayout>\r\n                                        </PerfectScrollbar>\r\n                                    }\r\n                                </SplitterLayout >\r\n                            </ListWrapper >\r\n                            {/* </PerfectScrollbar> */}\r\n                        </Col >\r\n                    </Row >\r\n                </ListWrapper >\r\n                {/* </PerfectScrollbar> */}\r\n                <SlideOutModal\r\n                    show={this.props.Login.openModal}\r\n                    size={this.props.Login.screenName === 'IDS_MEANPARAMETER' ? \"xl\" : \"lg\"}\r\n                    closeModal={this.closeModal}\r\n                    operation={this.props.Login.screenName === 'IDS_RESULTENTRY' ? \"\"\r\n                        : this.props.Login.operation}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName}\r\n                    selectedRecord={this.props.Login.screenName === 'IDS_RESULTFORMULA' ?\r\n                        this.state.selectedRecord.selectedMandatory : this.state.selectedRecord || {}}\r\n                    mandatoryFields={this.props.Login.screenName === 'IDS_INSTRUMENT' ? mandatoryFieldsInstrument :\r\n                        this.props.Login.screenName === 'IDS_TASK' ? mandatoryFieldsTask :\r\n                            this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ? mandatoryFieldsTestMethodSource :\r\n                                this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ? mandatoryFieldsParameter :\r\n                                    this.props.Login.screenName === 'IDS_RESULTFORMULA' ? validateFormulaMandyFields : []}\r\n                    esign={this.props.Login.loadEsign}\r\n                    innerPopup={this.props.Login.screenName}\r\n                    validateEsign={this.validateEsign}\r\n                    onSaveClick={this.props.Login.showValidate ? this.calculateFormula\r\n                        : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ? this.onSaveFileClick : this.onSaveClick}\r\n                    showValidate={this.props.Login.showValidate}\r\n                    modalEvent={this.state.modalEvent}\r\n                    addComponent={this.props.Login.loadEsign ?\r\n                        <Esign\r\n                            operation={this.props.Login.operation}\r\n                            onInputOnChange={this.onEsignInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        /> :\r\n                        this.props.Login.screenName === 'IDS_RESULTENTRY' ?\r\n                            <ResultEntryForm\r\n                                predefinedValues={this.props.Login.masterData.PredefinedValues}\r\n                                defaultPredefinedValues={this.props.Login.masterData.PredefinedValues}\r\n                                gradeValues={this.props.Login.masterData.GradeValues || []}\r\n                                selectedNumericData={this.props.Login.masterData.selectedNumericData}\r\n                                selectedResultGrade={this.state.selectedRecord.selectedResultGrade || []}\r\n                                paremterResultcode={this.props.Login.masterData.paremterResultcode || []}\r\n                                parameterResults={this.state.selectedRecord.ResultParameter || []}\r\n                                Login={this.props.Login}\r\n                                handleClose={this.handleClose}\r\n                                onSaveClick={this.onSaveClick}\r\n                                onResultInputChange={this.onResultInputChange}\r\n                                onGradeEvent={this.onGradeEvent}\r\n                                getFormula={this.getFormula}\r\n                                onDropTestFile={this.onDropTestFile}\r\n                                onKeyPress={this.onKeyPress}\r\n                                needSubSample={this.props.Login.masterData.nneedsubsample}\r\n                            /> :\r\n                            this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ?\r\n                                <TestEditForm\r\n                                    methodValues={this.props.Login.masterData.MethodData}\r\n                                    sourceValues={this.props.Login.masterData.SourceData}\r\n                                    selecteRecord={this.state.selectedRecord || {}}\r\n                                    onComboChange={this.onComboChange}\r\n                                    handleClose={this.handleClose}\r\n                                    onSaveClick={this.onSaveClick}\r\n                                /> :\r\n                                this.props.Login.screenName === 'IDS_INSTRUMENT' ?\r\n                                    <ResultEntryInstrumentForm\r\n                                        instrumentcatValue={this.props.Login.masterData.InstrumentCategory}\r\n                                        instrumentValue={this.props.Login.masterData.Instrument}\r\n                                        selecteRecord={this.state.selectedRecord || {}}\r\n                                        timeZoneListData={this.props.Login.timeZoneList || []}\r\n                                        onComboChange={this.onComboChange}\r\n                                        onComboCategoryChange={this.onComboCategoryChange}\r\n                                        onDateChange={this.onDateChange}\r\n                                        handleClose={this.handleClose}\r\n                                        onSaveClick={this.onSaveClick}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        needSubSample={this.props.Login.masterData.nneedsubsample}\r\n                                    /> :\r\n                                    this.props.Login.screenName === 'IDS_MATERIAL' ?\r\n                                        <ResultEntryMaterialForm\r\n                                            materialType={this.props.Login.materialType}\r\n                                            materialCategory={this.props.Login.materialCat}\r\n                                            material={this.props.Login.material}\r\n                                            materialInventory={this.props.Login.materialInventory}\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onMaterialComboChange={this.onMaterialComboChange}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onDateChange={this.onDateChange}\r\n                                            handleClose={this.handleClose}\r\n                                            onSaveClick={this.onSaveClick}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            needSubSample={this.props.Login.masterData.nneedsubsample}\r\n                                        /> :\r\n                                        this.props.Login.screenName === 'IDS_TASK' ?\r\n                                            <ResultEntryTaskForm\r\n                                                selecteRecord={this.state.selectedRecord || {}}\r\n                                                onNumericChange={this.onNumericChange}\r\n                                                onInputChange={this.onInputChange}\r\n                                                handleClose={this.handleClose}\r\n                                                onSaveClick={this.onSaveClick}\r\n                                            /> :\r\n                                            this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ?\r\n                                                <ResultEntryParamCommetsForm\r\n                                                    selecteRecord={this.state.selectedRecord || {}}\r\n                                                    onInputChange={this.onInputChange}\r\n                                                    handleClose={this.handleClose}\r\n                                                    onSaveClick={this.onSaveClick}\r\n                                                /> : this.props.Login.screenName === 'IDS_RESULTFORMULA' ?\r\n                                                    <ResultEntryFormulaForm\r\n                                                        DynamicFields={this.props.Login.masterData.DynamicFormulaFields}\r\n                                                        // formRef={this.formRef}\r\n                                                        handleClose={this.handleClose}\r\n                                                        screenName={this.props.Login.screenName}\r\n                                                        //selectedForumulaInput={this.state.selectedForumulaInput || []}\r\n                                                        onFormulaInputChange={this.onFormulaInputChange}\r\n                                                        Login={this.props.Login}\r\n                                                        showValidate={this.props.Login.showValidate}\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                    />\r\n                                                    : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ?\r\n                                                        <ResultEntryImport\r\n                                                            handleClose={this.handleClose}\r\n                                                            screenName={this.props.Login.screenName}\r\n                                                            onDropFile={this.onDropFile}\r\n                                                            selectedImportFile={this.props.Login.masterData.selectedImportFile || {}}\r\n                                                            deleteAttachment={this.deleteAttachment}\r\n                                                        /> :\r\n                                                        this.props.Login.screenName === 'IDS_MEANPARAMETER' ?\r\n                                                            <ResultEntryMean\r\n                                                                // onInputOnChange={this.onMeanInputOnChange}\r\n                                                                // onComboChange={this.onMeanComboChange}\r\n                                                                screenName={this.props.Login.screenName}\r\n                                                                headerSelectionChange={this.headerSelectionChange}\r\n                                                                selectionChange={this.selectionChange}\r\n                                                                selectAll={this.state.selectAll}\r\n                                                                testMean={this.state.testMean}\r\n                                                                meanTestParameterList={this.state.meanTestParameterList || []}\r\n                                                                selectedTestParam={this.state.selectedTestParam}\r\n                                                            /> : \"\"\r\n                    }\r\n                />\r\n                {\r\n                    this.props.Login.masterData.ChecklistData && this.props.Login.screenName === 'IDS_CHECKLISTRESULT' ?\r\n                        <TemplateForm\r\n                            templateData={this.props.Login.masterData.ChecklistData}\r\n                            nregtypecode={parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode)}\r\n                            nregsubtypecode={parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode)}\r\n                            needSaveButton={this.props.Login.needSaveButton}\r\n                            formRef={this.formRef}\r\n                            onTemplateInputChange={this.onTemplateInputChange}\r\n                            handleClose={this.closeModal}\r\n                            onTemplateComboChange={this.onTemplateComboChange}\r\n                            screenName={this.props.Login.screenName}\r\n                            onSaveClick={this.onSaveCheckList}\r\n                            Login={this.props.Login}\r\n                            viewScreen={this.props.Login.openTemplateModal}\r\n                            selectedRecord={this.state.selectedRecord || []}\r\n                            onTemplateDateChange={this.onTemplateDateChange}\r\n                            needValidation={true}\r\n                        /> : \"\"\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n    defaultActions = (testChildGetREParam, RESelectedTest, RESelectedSample, setDefaultId, testskip, testtake) => {\r\n        const nregtypecode = this.props.Login.masterData.realRegTypeValue.nregtypecode;\r\n        const nregsubtypecode = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\r\n        let TestList = [...this.props.Login.masterData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            let inputParam = {\r\n                classUrl: 'resultentrybysample',\r\n                methodUrl: \"completeTest\",\r\n                inputData: { 'userinfo': this.props.Login.userInfo, 'nregtypecode': nregtypecode, 'nregsubtypecode': nregsubtypecode, 'ncontrolcode': setDefaultId },\r\n                // formData: formData,\r\n                // isFileupload: true,\r\n                operation: \"default\",\r\n                displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n                testChildGetREParam: { ...testChildGetREParam, ncontrolcode: setDefaultId },\r\n                RESelectedTest: acceptTestList,\r\n                RESelectedSample: RESelectedSample\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, setDefaultId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"defaultaction\",\r\n                        operation: \"default\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.defaultTest(inputParam.testChildGetREParam, acceptTestList, RESelectedSample, nregtypecode, nregsubtypecode)\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTTEST\" }));\r\n        }\r\n\r\n    }\r\n\r\n    completeActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake) => {\r\n\r\n        let TestList = [...this.props.Login.masterData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            let inputParam = {\r\n                classUrl: 'resultentrybysample',\r\n                methodUrl: \"completeTest\",\r\n                inputData: { 'userinfo': this.props.Login.userInfo, 'ncontrolcode': completeResultId },\r\n                // formData: formData,\r\n                // isFileupload: true,\r\n                operation: \"complete\",\r\n                postParamList: this.postParamList,\r\n                displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n                testChildGetREParam: testChildGetREParam,\r\n                RESelectedTest: acceptTestList,\r\n                skip: this.state.skip,\r\n                take: this.state.take,\r\n                testskip: this.state.testskip,\r\n                testtake: this.state.testtake,\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"complete\",\r\n                        operation: \"complete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.completeTest(inputParam, acceptTestList, userInfo, completeResultId)\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCOMPLETE\" }));\r\n        }\r\n    }\r\n\r\n    onSaveCheckList = (selectedRecord, userInfo, nregtypecode, nregsubtypecode) => {\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            let inputParam = {\r\n                \"inputData\": { userinfo: userInfo }\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { selectedRecord, userInfo, nregtypecode, nregsubtypecode, inputParam, operation: \"updatechecklist\" },\r\n                    openModal: true,\r\n                    operation: \"updatechecklist\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode)\r\n        }\r\n\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        if (this.props.Login.operation === 'complete' || this.props.Login.operation === 'default' || this.props.Login.operation === \"updatechecklist\" ||\r\n            this.props.Login.operation === 'deleteInstrument' || this.props.Login.operation === 'createMethod' || this.props.Login.operation === 'deleteTask' || this.props.Login.operation === 'updateParameterComments') {\r\n            this.props.validateEsignCredentialComplete(inputParam, \"openModal\");\r\n        }\r\n\r\n        else {\r\n            this.props.validateEsignCredential(inputParam, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n    onSaveFileClick = (saveType, formRef) => {\r\n        const selectedImportFile = this.props.Login.masterData.selectedImportFile;\r\n        const acceptedFile = selectedImportFile ? selectedImportFile.sfilename : [];\r\n        const formData = new FormData();\r\n\r\n        // if(nattachmenttypecode === attachmentType.FTP) {\r\n        if (acceptedFile && acceptedFile.length > 0) {\r\n            acceptedFile.forEach((file, index) => {\r\n                formData.append(\"uploadedFile\" + index, file);\r\n            });\r\n            formData.append(\"filecount\", acceptedFile.length);\r\n        } else {\r\n            return toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYONEFILETOSUBMIT\" }))\r\n        }\r\n\r\n        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n        formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.realRegTypeValue.nregtypecode));\r\n        formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode));\r\n        formData.append(\"stransactiontestcode\", JSON.stringify(this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"));\r\n        this.props.resultImportFile(formData, this.props.Login.masterData);\r\n    }\r\n\r\n    onDropFile = (acceptedFile) => {\r\n        // let selectedImportFile = this.props.Login.masterData.selectedImportFile || [];\r\n        // selectedImportFile['sfilename'] = acceptedFile;\r\n        this.props.Login.masterData.selectedImportFile['sfilename'] = acceptedFile\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData: this.props.Login.masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        // this.setState({selectedImportFile});\r\n    }\r\n\r\n    onFormulaInputChange = (event, index, fields) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        let selectedForumulaInput = this.state.selectedRecord.selectedForumulaInput || [];\r\n        let selectedMandatory = this.state.selectedRecord.selectedMandatory || [];\r\n        let dynamicformulafields = {};\r\n\r\n        if (event) {\r\n            if (fields.ndynamicformulafieldcode === FORMULAFIELDTYPE.INTEGER) {\r\n                const value = event.target.value.replace(/[^-^0-9]/g, '');\r\n                if (/^-?\\d*?$/.test(value) || value === \"\") {\r\n                    if (this.state.selectedRecord.formulainput) {\r\n                        dynamicformulafields.svalues = value;\r\n                        dynamicformulafields.sparameter = fields.sdescription;\r\n                        selectedForumulaInput[index] = dynamicformulafields;\r\n                        selectedMandatory[index] = event.target.value;\r\n                    }\r\n                }\r\n                selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\r\n                selectedRecord[\"selectedMandatory\"] = selectedMandatory;\r\n\r\n                this.setState({ selectedRecord: selectedRecord });\r\n            } else {\r\n                const value = event.target.value.replace(/[^-^0-9.]/g, '');\r\n                if (/^-?\\d*?\\.?\\d*?$/.test(value) || value === \"\") {\r\n                    if (this.state.selectedRecord.formulainput) {\r\n                        dynamicformulafields.svalues = value;\r\n                        dynamicformulafields.sparameter = fields.sdescription;\r\n                        selectedForumulaInput[index] = dynamicformulafields;\r\n                        selectedMandatory[index] = event.target.value;\r\n                    }\r\n                }\r\n                // else {\r\n                //     dynamicformulafields.svalues = selectedForumulaInput.length > 0 ? selectedForumulaInput[index].svalues : \"\";\r\n                //     selectedForumulaInput[index].svalues = selectedForumulaInput.length > 0 ? selectedForumulaInput[index].svalues : \"\";\r\n\r\n                // }\r\n                selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\r\n                selectedRecord[\"selectedMandatory\"] = selectedMandatory;\r\n\r\n                this.setState({ selectedRecord: selectedRecord });\r\n            }\r\n        }\r\n    }\r\n\r\n    onTemplateInputChange = (event, control) => {\r\n        let selectedRecord = templateChangeHandler(1, this.state.selectedRecord, event, control)\r\n        this.setState({ selectedRecord });\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n    onTemplateComboChange = (comboData, control) => {\r\n        let selectedRecord = templateChangeHandler(2, this.state.selectedRecord, comboData, control)\r\n        this.setState({ selectedRecord });\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n    onTemplateDateChange = (dateData, control) => {\r\n        let selectedRecord = templateChangeHandler(3, this.state.selectedRecord, dateData, control)\r\n        //this.setState({selectedRecord});\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputChange = (Data, name) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        if (Data) {\r\n            selectedRecord[name] = Data.target.value;\r\n            //this.setState({selectedRecord});\r\n        }\r\n        else {\r\n            selectedRecord[name] = [];\r\n            //this.setState({selectedRecord});\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onNumericChange = (numericData, numericName) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        if (numericData) {\r\n            if (numericName !== \"scomments\") {\r\n                selectedRecord[numericName] = numericData;\r\n                //this.setState({selectedRecord});\r\n            } else {\r\n                selectedRecord[numericName] = numericData.target.value;\r\n                //this.setState({selectedRecord});\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[numericName] = \"\";\r\n            //this.setState({selectedRecord});\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onDateChange = (dateName, dateValue) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        selectedRecord[dateName] = dateValue;\r\n        if (dateName === \"dfromdate\" || dateName === \"dtodate\") {\r\n            this.setState({ selectedRecord });\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: { selectedRecord: selectedRecord }\r\n            // }\r\n            //this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    headerSelectionChange = (event) => {\r\n        const checked = event.syntheticEvent.target.checked;\r\n        let meanTestParameterList = this.state.meanTestParameterList || [];\r\n        let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\r\n        if (checked) {\r\n            const data = meanTestParameterList.map(item => {\r\n                item.selected = checked;\r\n                selectedMeanTestParam.set(item.ntransactionresultcode, item.sresult);\r\n                return item;\r\n            });\r\n\r\n            let selectedTestParam = \"\";\r\n            let selectedTestParamMean = 0;\r\n            let size = 0;\r\n            if (selectedMeanTestParam.size > 0) {\r\n                [...selectedMeanTestParam.values()].forEach(item => (\r\n                    item !== null && item !== \"\" ?\r\n                        (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item,\r\n                            size = size + 1,\r\n                            selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\"\r\n                ));\r\n                selectedTestParamMean = selectedTestParamMean / size;\r\n            }\r\n\r\n            this.setState({\r\n                meanTestParameterList: data, selectedMeanTestParam, selectedTestParam,\r\n                testMean: selectedTestParamMean,\r\n                selectAll: checked\r\n            });\r\n        }\r\n        else {\r\n            const data = meanTestParameterList.map(item => {\r\n                item.selected = checked;\r\n                return item;\r\n            });\r\n\r\n            this.setState({\r\n                meanTestParameterList: data, selectedMeanTestParam: new Map(),\r\n                selectedTestParam: \"\",\r\n                testMean: \"\",\r\n                selectAll: checked\r\n            });\r\n        }\r\n    }\r\n\r\n    selectionChange = (event) => {\r\n        let meanTestParameterList = this.state.meanTestParameterList || [];\r\n        let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\r\n        meanTestParameterList.map(item => {\r\n            if (item.ntransactionresultcode === event.dataItem.ntransactionresultcode) {\r\n                item.selected = !event.dataItem.selected;\r\n            }\r\n            return item;\r\n        });\r\n        if (event.dataItem.selected) {\r\n            selectedMeanTestParam.set(event.dataItem.ntransactionresultcode, event.dataItem.sresult);\r\n        }\r\n        else {\r\n            if (selectedMeanTestParam.has(event.dataItem.ntransactionresultcode)) {\r\n                selectedMeanTestParam.delete(event.dataItem.ntransactionresultcode)\r\n            }\r\n        }\r\n        let selectedTestParam = \"\";\r\n        let selectedTestParamMean = 0;\r\n        let size = 0;\r\n        if (selectedMeanTestParam.size > 0) {\r\n            [...selectedMeanTestParam.values()].forEach(item => (\r\n                item !== null && item !== \"\" ?\r\n                    (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item,\r\n                        size = size + 1,\r\n                        selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\"\r\n            ));\r\n            selectedTestParamMean = selectedTestParamMean / size;\r\n        }\r\n\r\n        this.setState({\r\n            meanTestParameterList, selectedMeanTestParam, selectedTestParam, testMean: selectedTestParamMean,\r\n            selectAll: this.valiateCheckAll(meanTestParameterList)\r\n        });\r\n    }\r\n\r\n    valiateCheckAll(data) {\r\n        let selectAll = true;\r\n        if (data && data.length > 0) {\r\n            data.forEach(dataItem => {\r\n                if (dataItem.selected) {\r\n                    if (dataItem.selected === false) {\r\n                        selectAll = false;\r\n                    }\r\n                }\r\n                else {\r\n                    selectAll = false;\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            selectAll = false;\r\n        }\r\n        return selectAll;\r\n    }\r\n\r\n    onMeanComboChange = (comboData, comboName) => {\r\n        const selectedMeanTestParam = this.state.selectedMeanTestParam || [];\r\n        selectedMeanTestParam[comboName] = comboData[0];\r\n        let data = \"\";\r\n        if (selectedMeanTestParam[\"parametervalue\"] === undefined) {\r\n            data = comboData[0].value;\r\n        }\r\n        else {\r\n            data = selectedMeanTestParam[\"parametervalue\"] + \"+\" + comboData[0].value;\r\n        }\r\n        selectedMeanTestParam[\"parametervalue\"] = data;\r\n        this.setState({ selectedMeanTestParam });\r\n    }\r\n\r\n    // onMeanInputOnChange = (event) => {\r\n    //     const selectedMeanTestParam = this.state.selectedMeanTestParam || [];\r\n    //     selectedMeanTestParam[event.target.name] = selectedMeanTestParam[event.target.name] + \"+\" + event.target.value;\r\n    //     this.setState({selectedMeanTestParam});\r\n    // }\r\n    onMaterialComboChange = (comboData, comboName) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n            //this.setState({ selectedRecord });\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n            //this.setState({ selectedRecord });\r\n        }\r\n        switch (comboName) {\r\n            case 'nmaterialtypecode':\r\n                this.props.getREMaterialCategoryByType({ selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            case 'nmaterialcatcode':\r\n                this.props.getREMaterialByCategory({ selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            case 'nmaterialcode':\r\n                this.props.getREMaterialInvertoryByMaterial({ selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            default:\r\n                this.props.getAvailableMaterialQuantity({ selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n\r\n        }\r\n    }\r\n    onComboChange = (comboData, comboName) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n            //this.setState({ selectedRecord });\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n            //this.setState({ selectedRecord });\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onGradeEvent = (ResultParameter, index, parameter) => {\r\n        if (ResultParameter.length > 0 && ResultParameter[index] !== undefined && ResultParameter[index].sresult !== null) {\r\n            let selectedRecord = this.state.selectedRecord || [];\r\n            let selectedResultGrade = this.state.selectedRecord.selectedResultGrade || [];\r\n            if (parameter.nparametertypecode === parameterType.NUMERIC) {\r\n                selectedResultGrade[index] = {\r\n                    ngradecode: ResultParameter[index].sresult !== \"\" ?\r\n                        numericGrade(parameter, numberConversion(parseFloat(ResultParameter[index].sresult), parseInt(parameter.nroundingdigits))) : -1\r\n                };\r\n            }\r\n            if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n                if (ResultParameter[index].sresult !== null) {\r\n                    selectedResultGrade[index] = { ngradecode: ResultParameter[index].ngradecode };\r\n                }\r\n                else {\r\n                    selectedResultGrade[index] = { ngradecode: 0 };\r\n                }\r\n            }\r\n            if (parameter.nparametertypecode === parameterType.CHARACTER) {\r\n                if (ResultParameter[index].sresult !== null) {\r\n                    selectedResultGrade[index] = { ngradecode: ResultParameter[index].ngradecode };\r\n                }\r\n                else {\r\n                    selectedResultGrade[index] = { ngradecode: 4 };\r\n                }\r\n            }\r\n            //this.props.Login.masterData[\"selectedResultGrade\"] = selectedResultGrade;\r\n            selectedRecord.selectedResultGrade = selectedResultGrade;\r\n\r\n            this.setState({\r\n                selectedRecord\r\n            });\r\n\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: { masterData: this.props.Login.masterData }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let { testskip, testtake } = this.state\r\n        let testList = [...this.props.Login.masterData.RE_TEST];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestComments(saveParam, selectedTestList);\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\r\n        }\r\n    }\r\n    onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let { testskip, testtake, skip, take } = this.state\r\n        let testList = [...this.props.Login.masterData.RE_TEST];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        let sampleList = [...this.props.Login.masterData.RE_SAMPLE];\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\r\n        if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleAttachment(saveParam, selectedSampleList);\r\n        } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestAttachment(saveParam, selectedTestList);\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\r\n        }\r\n    }\r\n\r\n    onKeyPress = (event, index, paremterResultcode) => {\r\n        if (event.keyCode === 13) {\r\n            for (let i = 0; i < event.target.form.elements.length; i++) {\r\n                if (parseInt(event.target.form.elements[i].id) === paremterResultcode[index + 1]) {\r\n                    event.target.form.elements[i].focus();\r\n                    break;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n\r\n    onResultInputChange = (event, index, parameter) => {\r\n        //let ResultParameter = this.props.Login.masterData.ResultParameter ? this.props.Login.masterData.ResultParameter : [];\r\n        let selectedRecord = this.state.selectedRecord || [];\r\n        let ResultParameter = this.state.selectedRecord.ResultParameter ? this.state.selectedRecord.ResultParameter : [];\r\n        let sresult = \"\";\r\n        let value = -1;\r\n        let acceptedFile = [];\r\n        let ncalculatedresult;\r\n\r\n        if (parameter.nparametertypecode === parameterType.NUMERIC) {\r\n            if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value) || event.target.value === \"\") {\r\n                sresult = event.target.value;\r\n                ncalculatedresult = 4\r\n            } else {\r\n                sresult = ResultParameter[index]['sresult'] === null ? \"\" : ResultParameter[index]['sresult'];\r\n                ncalculatedresult = ResultParameter[index]['ncalculatedresult'];\r\n            }\r\n        }\r\n        if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n            if (event != null) {\r\n                sresult = event.item.spredefinedname;\r\n                value = event.item.ngradecode;\r\n                ncalculatedresult = 4\r\n            }\r\n            else {\r\n                sresult = \"\";\r\n                value = -1;\r\n                ncalculatedresult = 4\r\n            }\r\n        }\r\n        if (parameter.nparametertypecode === parameterType.CHARACTER) {\r\n            sresult = event.target.value;\r\n            ncalculatedresult = 4\r\n        }\r\n        if (parameter.nparametertypecode === parameterType.ATTACHMENT) {\r\n            sresult = event[0].name;\r\n            acceptedFile = event;\r\n            ncalculatedresult = 4\r\n        }\r\n        ResultParameter[index]['sresult'] = sresult\r\n        ResultParameter[index]['sfinal'] = sresult\r\n        ResultParameter[index]['acceptedFile'] = acceptedFile\r\n        ResultParameter[index]['editable'] = true\r\n        ResultParameter[index]['ngradecode'] = value\r\n        ResultParameter[index]['ncalculatedresult'] = ncalculatedresult\r\n\r\n        // this.props.Login.masterData.ResultParameter = ResultParameter;\r\n        selectedRecord.ResultParameter = ResultParameter\r\n        this.setState({\r\n            selectedRecord: selectedRecord\r\n        });\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { masterData: this.props.Login.masterData }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    updateTestMethodSource(inputData, masterData, ncontrolcode) {\r\n        let inputParam = {\r\n\r\n            inputData: { ...inputData, 'userinfo': this.props.Login.userInfo, ncontrolcode },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n            operation: \"createMethod\",\r\n            screenName: \"IDS_TESTMETHODSOURCE\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //inputData1: inputData,\r\n            masterData: masterData\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    //screenName: \"completeaction\",\r\n                    operation: \"createMethod\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.updateTestMethodSource(inputData, masterData)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    updateParameterComments(inputData, masterData, ncontrolcode) {\r\n        // let inputData1 = { ...inputData, ncontrolcode }\r\n        let inputParam = {\r\n            inputData: { ...inputData, ncontrolcode, 'userinfo': this.props.Login.userInfo },\r\n            operation: this.props.Login.operation,\r\n            screenName: \"IDS_RESULT\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //inputData: inputData1,\r\n            masterData: masterData\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    //screenName: \"completeaction\",\r\n                    operation: \"updateParameterComments\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.updateParameterComments(inputData, masterData)\r\n        }\r\n    }\r\n\r\n    onSaveMean = (saveType) => {\r\n        const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n        const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n\r\n        let resultParameter = this.props.Login.selectedTestParameterMean || {};\r\n        //let resultParameter = { };\r\n\r\n        resultParameter[\"ncalculatedresult\"] = 4;\r\n        resultParameter[\"sresult\"] = this.state.testMean;\r\n        resultParameter[\"sfinal\"] = numberConversion(parseFloat(this.state.testMean), parseInt(resultParameter.nroundingdigit));\r\n\r\n        resultParameter[\"ngradecode\"] = numericGrade(resultParameter, parseInt(this.state.testMean));\r\n        resultParameter['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n        resultParameter['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n        // resultParameter['ntransactionresultcode'] = meanParameter.ntransactionresultcode;\r\n        // resultParameter['ntransactiontestcode'] = meanParameter.ntransactiontestcode;\r\n        // resultParameter['nparametertypecode'] = meanParameter.nparametertypecode;\r\n        //console.log(\"result:\", resultParameter);\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"filecount\", 0);\r\n        formData.append(\"nregtypecode\", nregtypecode);\r\n        formData.append(\"nregsubtypecode\", nregsubtypecode);\r\n        formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\r\n        formData.append(\"transactiontestcode\", resultParameter.ntransactiontestcode);\r\n        formData.append(\"resultData\", JSON.stringify([resultParameter]));\r\n\r\n        const inputParam = {\r\n            classUrl: \"resultentrybysample\",\r\n            methodUrl: \"TestParameterResult\",\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: \"update\",\r\n            displayName: this.props.Login.inputParam.displayName, saveType\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onSaveClick = (saveType) => {\r\n        if (this.props.Login.screenName === \"IDS_MEANPARAMETER\") {\r\n            this.onSaveMean(saveType);\r\n        }\r\n        else {\r\n            let ResultParameter = this.state.selectedRecord.ResultParameter || [];\r\n            let selectedRecord = this.state.selectedRecord || {};\r\n            let selectedId = this.props.Login.selectedId || null;\r\n            const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n            const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n            const classUrl = \"resultentrybysample\";\r\n            const formData = new FormData();\r\n            let neditable = 0;\r\n            let resultParameters = [];\r\n            let inputParam = {};\r\n            let inputData = [];\r\n            let i = 0;\r\n            //const postParam = {inputListName: \"RESelectedTest\", selectedObject: \"RESelectedTest\", primaryKeyField: \"ntransactionstestcode\" };\r\n            if (this.props.Login.screenName === \"IDS_RESULTENTRY\") {\r\n                if (ResultParameter.length > 0 && ResultParameter !== undefined) {\r\n                    ResultParameter.map((resultData, index) => {\r\n                        let results = {};\r\n                        if (resultData.editable === true) {\r\n                            neditable = 1;\r\n                            switch (resultData.nparametertypecode) {\r\n                                case 1:\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: resultData[\"ncalculatedresult\"],\r\n                                        sresult: resultData.sresult,\r\n                                        sfinal: resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\"\r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"ncalculatedresult\"] = resultData[\"ncalculatedresult\"];\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                    results[\"sfinal\"] = resultData.sresult !== \"\" ?\r\n                                        numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\";\r\n                                    results[\"ngradecode\"] = resultData.sresult !== \"\" ?\r\n                                        numericGrade(resultData, results[\"sfinal\"]) : -1;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    break;\r\n                                case 2:\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: 4,\r\n                                        sresult: resultData.sresult,\r\n                                        sfinal: resultData.sresult\r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                    results[\"ncalculatedresult\"] = 4;\r\n                                    results[\"sfinal\"] = resultData.sresult;\r\n                                    results[\"ngradecode\"] = resultData.ngradecode;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    break;\r\n                                case 3:\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: 4,\r\n                                        sresult: resultData.sresult,\r\n                                        sfinal: resultData.sresult\r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                    results[\"ncalculatedresult\"] = 4;\r\n                                    results[\"sfinal\"] = resultData.sresult;\r\n                                    results[\"ngradecode\"] = grade.FIO;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    break;\r\n                                case 4:\r\n                                    if (resultData.acceptedFile !== undefined) {\r\n                                        const splittedFileName = resultData.acceptedFile ? resultData.acceptedFile[0].name.split('.') : \"\";\r\n                                        const fileExtension = resultData.acceptedFile ? resultData.acceptedFile[0].name.split('.')[splittedFileName.length - 1] : \"\";\r\n                                        const uniquefilename = create_UUID() + '.' + fileExtension;\r\n                                        results[\"jsondata\"] = {\r\n                                            ssystemfilename: uniquefilename,\r\n                                            nfilesize: resultData.acceptedFile[0].size,\r\n                                            ncalculatedresult: 4,\r\n                                            sresult: resultData.sresult,\r\n                                            sfinal: resultData.sresult\r\n                                        }\r\n                                        results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                        results[\"ncalculatedresult\"] = 4;\r\n                                        results[\"sresult\"] = resultData.sresult;\r\n                                        results[\"sfinal\"] = resultData.sresult;\r\n                                        results[\"ngradecode\"] = grade.FIO;\r\n                                        results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\r\n                                        results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\r\n                                        results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\r\n                                        results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\r\n                                        results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                        results[\"ssystemfilename\"] = uniquefilename;\r\n                                        results[\"nfilesize\"] = resultData.acceptedFile[0].size;\r\n                                        formData.append(\"uploadedFile\" + index, resultData.acceptedFile[0]);\r\n                                        formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                                        formData.append(\"ntransactiontestcode\", resultData.ntransactiontestcode);\r\n                                        i++;\r\n                                    }\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                            if (Object.values(results).length > 0) {\r\n                                resultParameters.push(results);\r\n                            }\r\n                        }\r\n                        return null;\r\n                    });\r\n\r\n                    if (neditable === 0) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: { loading: false, openModal: false }\r\n                        }\r\n                        return this.props.updateStore(updateInfo);\r\n                    }\r\n\r\n                    formData.append(\"filecount\", i);\r\n                    formData.append(\"nregtypecode\", nregtypecode);\r\n                    formData.append(\"nregsubtypecode\", nregsubtypecode);\r\n                    formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\r\n                    formData.append(\"resultData\", JSON.stringify(resultParameters));\r\n                    const tests = this.props.Login.masterData.RESelectedTest ?\r\n                        this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\r\n                    formData.append(\"transactiontestcode\", tests);\r\n                    //let postParam = {inputListName: \"RE_TEST\", selectedObject: \"\", primaryKeyField: \"ntransactionresultcode\" };\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"TestParameterResult\",\r\n                        inputData: { userinfo: this.props.Login.userInfo },\r\n                        formData: formData,\r\n                        isFileupload: true,\r\n                        operation: \"update\",\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//, postParam\r\n                    }\r\n                }\r\n                else {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { loading: false, openModal: false }\r\n                    }\r\n                    return this.props.updateStore(updateInfo);\r\n                }\r\n            }\r\n\r\n            if (this.props.Login.screenName === \"IDS_TESTMETHODSOURCE\") {\r\n                inputData = {\r\n                    ntype: 3,\r\n                    nflag: 3,\r\n                    nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                    ntranscode: this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString(),\r\n                    ntestcode: this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                    npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                    ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n                    nmethodcode: selectedRecord.nmethodcode.value,\r\n                    nsourcecode: selectedRecord.nsourcecode.value,\r\n                    ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestKey: \"IDS_RESULTS\",\r\n                    ncontrolcode: this.props.Login.ncontrolcode\r\n                }\r\n                // inputParam = {\r\n                //     classUrl: classUrl,\r\n                //     methodUrl: \"TestMethodSource\",\r\n                //     inputData: inputData,\r\n                //     isFileupload: false,\r\n                //     operation: \"update\",\r\n                //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                // }\r\n\r\n                this.updateTestMethodSource(inputData, this.props.Login.masterData, this.props.Login.ncontrolcode);\r\n                return;\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_INSTRUMENT\") {\r\n                let inputData = [];\r\n                if (this.props.Login.operation === \"update\") {\r\n                    inputData = {\r\n                        ResultUsedInstrument: {\r\n                            nresultusedinstrumentcode: selectedRecord.nresultusedinstrumentcode,\r\n                            npreregno: selectedRecord.npreregno,\r\n                            ninstrumentcatcode: selectedRecord.ninstrumentcatcode.value,\r\n                            ninstrumentcode: selectedRecord.ninstrumentcode.value,\r\n                            dfromdate: formatInputDate(selectedRecord.dfromdate, false),\r\n                            dtodate: formatInputDate(selectedRecord.dtodate, false),\r\n                            stzfromdate: selectedRecord.ntzfromdate.label,\r\n                            stztodate: selectedRecord.ntztodate.label,\r\n                            ntzfromdate: selectedRecord.ntzfromdate.value,\r\n                            ntztodate: selectedRecord.ntztodate.value,\r\n                            ntransactiontestcode: selectedRecord.ntransactiontestcode\r\n\r\n                        },\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nregtypecode: nregtypecode,\r\n                        nregsubtypecode: nregsubtypecode,\r\n                        ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                            this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                    }\r\n                }\r\n                else {\r\n                    inputData = {\r\n                        ResultUsedInstrument: {\r\n                            ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                            npreregno: selectedRecord.npreregno,\r\n                            ninstrumentcatcode: selectedRecord.ninstrumentcatcode.value,\r\n                            ninstrumentcode: selectedRecord.ninstrumentcode.value,\r\n                            dfromdate: formatInputDate(selectedRecord.dfromdate, false),\r\n                            dtodate: formatInputDate(selectedRecord.dtodate, false),\r\n                            stzfromdate: selectedRecord.ntzfromdate.label,\r\n                            stztodate: selectedRecord.ntztodate.label,\r\n                            ntzfromdate: selectedRecord.ntzfromdate.value,\r\n                            ntztodate: selectedRecord.ntztodate.value\r\n                        },\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nregtypecode: nregtypecode,\r\n                        nregsubtypecode: nregsubtypecode,\r\n                        transactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                            this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                    }\r\n                }\r\n                inputParam = {\r\n                    classUrl: classUrl,\r\n                    methodUrl: \"ResultUsedInstrument\",\r\n                    inputData: inputData, selectedId,\r\n                    isFileupload: false,\r\n                    activeTestKey: \"IDS_INSTRUMENT\",\r\n                    operation: this.props.Login.operation,\r\n                    displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                }\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_MATERIAL\") {\r\n                let inputData = [];\r\n                if (parseFloat(this.state.selectedRecord.susedquantity) <= parseFloat(this.state.selectedRecord.savailablequantity)) {\r\n                    if (this.props.Login.operation === \"update\") {\r\n                        inputData = {\r\n                            ResultUsedMaterial: {\r\n                                nresultusedmaterialcode: selectedRecord.nresultusedmaterialcode,\r\n                                ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                                npreregno: selectedRecord.npreregno,\r\n                                nmaterialtypecode: selectedRecord.nmaterialtypecode.value,\r\n                                nmaterialcategorycode: selectedRecord,\r\n                                nmaterialcode: selectedRecord.nmaterialcode.value,\r\n                                ninventorycode: selectedRecord.nmaterialinventorycode.value,\r\n                                nsectioncode: selectedRecord.nsectioncode,\r\n                                jsondata: {\r\n                                    sarno: selectedRecord.sarno,\r\n                                    ssamplearno: selectedRecord.ssamplearno,\r\n                                    stestsynonym: selectedRecord.stestsynonym,\r\n                                    smaterialcatname: selectedRecord.nmaterialcatcode.label,\r\n                                    smaterialname: selectedRecord.nmaterialcode.label,\r\n                                    sinventoryid: selectedRecord.nmaterialinventorycode.label,\r\n                                    nqtyused: selectedRecord.susedquantity,\r\n                                    scarriergas: selectedRecord.scarriergas,\r\n                                    smobilephase: selectedRecord.smobilephase,\r\n                                    sremarks: selectedRecord.sremarks\r\n                                }\r\n                            },\r\n                            MaterialInventoryTrans: {\r\n                                nmaterialinventorycode: selectedRecord.nmaterialinventorycode.value,\r\n                                nsectioncode: selectedRecord.nsectioncode,\r\n                                jsondata: {\r\n                                    IDS_INVENTORYID: selectedRecord.nmaterialinventorycode.label,\r\n                                    nqtyused: selectedRecord.susedquantity,\r\n                                }\r\n                            },\r\n                            userinfo: this.props.Login.userInfo,\r\n                            nregtypecode: nregtypecode,\r\n                            nregsubtypecode: nregsubtypecode,\r\n                            ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                                this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                        }\r\n                    }\r\n                    else {\r\n                        inputData = {\r\n                            ResultUsedMaterial: {\r\n                                ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                                npreregno: selectedRecord.npreregno,\r\n                                nmaterialtypecode: selectedRecord.nmaterialtypecode.value,\r\n                                nmaterialcategorycode: selectedRecord.nmaterialcatcode.value,\r\n                                nmaterialcode: selectedRecord.nmaterialcode.value,\r\n                                ninventorycode: selectedRecord.nmaterialinventorycode.value,\r\n                                nsectioncode: selectedRecord.nsectioncode,\r\n                                jsondata: {\r\n                                    sarno: selectedRecord.sarno,\r\n                                    ssamplearno: selectedRecord.ssamplearno,\r\n                                    stestsynonym: selectedRecord.stestsynonym,\r\n                                    smaterialcatname: selectedRecord.nmaterialcatcode.label,\r\n                                    smaterialname: selectedRecord.nmaterialcode.label,\r\n                                    sinventoryid: selectedRecord.nmaterialinventorycode.label,\r\n                                    nqtyused: selectedRecord.susedquantity,\r\n                                    scarriergas: selectedRecord.scarriergas,\r\n                                    smobilephase: selectedRecord.smobilephase,\r\n                                    sremarks: selectedRecord.sremarks\r\n                                }\r\n                            },\r\n                            MaterialInventoryTrans: {\r\n                                nmaterialinventorycode: selectedRecord.nmaterialinventorycode.value,\r\n                                nsectioncode: selectedRecord.nsectioncode,\r\n                                jsondata: {\r\n                                    nqtyused: selectedRecord.susedquantity,\r\n                                    IDS_INVENTORYID: selectedRecord.nmaterialinventorycode.label\r\n                                }\r\n                            },\r\n                            userinfo: this.props.Login.userInfo,\r\n                            nregtypecode: nregtypecode,\r\n                            nregsubtypecode: nregsubtypecode,\r\n                            transactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                                this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                        }\r\n                    }\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"ResultUsedMaterial\",\r\n                        inputData: inputData, selectedId,\r\n                        isFileupload: false,\r\n                        activeTestKey: \"IDS_MATERIAL\",\r\n                        operation: this.props.Login.operation,\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"Quantity Not available\" }))\r\n                    return null;\r\n                }\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_TASK\") {\r\n                if ((selectedRecord.sanalysistime && selectedRecord.sanalysistime !== \"\")\r\n                    || (selectedRecord.smisctime && selectedRecord.smisctime !== \"\")\r\n                    || (selectedRecord.spreanalysistime && selectedRecord.spreanalysistime !== \"\")\r\n                    || (selectedRecord.spreparationtime && selectedRecord.spreparationtime !== \"\")\r\n                    || (selectedRecord.scomments && selectedRecord.scomments !== \"\")) {\r\n                    if (this.props.Login.operation === \"update\") {\r\n                        inputData = {\r\n                            ResultUsedTasks: {\r\n                                nresultusedtaskcode: selectedRecord.nresultusedtaskcode,\r\n                                sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\r\n                                sanalyst: this.props.Login.userInfo.susername,\r\n                                smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\r\n                                spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\r\n                                spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\r\n                                scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\"\r\n                            },\r\n                            userinfo: this.props.Login.userInfo,\r\n                            ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\r\n                            nregtypecode: nregtypecode,\r\n                            nregsubtypecode: nregsubtypecode\r\n                        }\r\n                    }\r\n                    else {\r\n                        inputData = {\r\n                            ResultUsedTasks: {\r\n                                ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\r\n                                sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\r\n                                sanalyst: this.props.Login.userInfo.susername,\r\n                                smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\r\n                                spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\r\n                                spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\r\n                                scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\"\r\n                            },\r\n                            userinfo: this.props.Login.userInfo,\r\n                            transactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\r\n                            nregtypecode: nregtypecode,\r\n                            nregsubtypecode: nregsubtypecode,\r\n                        }\r\n                    }\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"ResultUsedTasks\",\r\n                        inputData: inputData, selectedId,\r\n                        activeTestKey: \"IDS_TASK\",\r\n                        isFileupload: false,\r\n                        operation: this.props.Login.operation,\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                    }\r\n                } else {\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERTASKTIME\" }));\r\n                    return;\r\n                }\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_PARAMETERCOMMENTS\") {\r\n                inputData = {\r\n                    ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                    ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                    sresultcomment: selectedRecord.sresultcomment,\r\n                    transactiontestcode: selectedRecord.transactiontestcode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nregtypecode: nregtypecode,\r\n                    nregsubtypecode: nregsubtypecode,\r\n                    ncontrolcode: this.props.Login.ncontrolcode\r\n\r\n                }\r\n                // inputParam = {\r\n                //     classUrl: classUrl,\r\n                //     methodUrl: \"ParameterComments\",\r\n                //     inputData: inputData, selectedId,\r\n                //     isFileupload: false,\r\n                //     operation: this.props.Login.operation,\r\n                //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                // }\r\n                this.updateParameterComments(inputData, this.props.Login.masterData, selectedRecord.ncontrolcode);\r\n                return;\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_CHECKLISTRESULT\") {\r\n                let lstResultCheckList = [];\r\n                if (selectedRecord && selectedRecord.editedQB) {\r\n                    selectedRecord.editedQB.map(qbcode =>\r\n                        lstResultCheckList.push(selectedRecord[qbcode]));\r\n                    inputData = {\r\n                        ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\r\n                        ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                        transactiontestcode: selectedRecord.transactiontestcode,\r\n                        ResultCheckList: lstResultCheckList,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nregtypecode: nregtypecode,\r\n                        nregsubtypecode: nregsubtypecode\r\n                    }\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"ResultEntryChecklist\",\r\n                        inputData: inputData, selectedId,\r\n                        isFileupload: false,\r\n                        operation: this.props.Login.operation,\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                    }\r\n                }\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n    gridfillingColumn(data) {\r\n        //  const tempArray = [];\r\n        const temparray = data && data.map((option) => {\r\n            return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode], \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\" };\r\n        });\r\n        return temparray;\r\n    }\r\n    constructDesign(list) {\r\n\r\n        let newList = []\r\n        if (list.length > 0) {\r\n            list.map((i) => {\r\n                newList.push({ [designProperties.LABEL]: i, [designProperties.VALUE]: i })\r\n            })\r\n        }\r\n        return newList;\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let { showTest, showSample, userRoleControlRights, controlMap, resultDataState, instrumentDataState,\r\n            materialDataState, taskDataState, documentDataState, resultChangeDataState, testCommentDataState,\r\n            historyDataState, sampleListColumns, subSampleListColumns, testListColumns,\r\n            SingleItem, sampleListMainField, subSampleListMainField, testListMainField,\r\n            SampleGridItem, SampleGridExpandableItem, sampleMoreField, subSampleMoreField,\r\n            testMoreField, selectedRecord, SampleType, RegistrationType, RegistrationSubType,\r\n            REFilterStatus, REJobStatus, Testvalues, ApprovalConfigVersion, DynamicSampleColumns,\r\n            DynamicSubSampleColumns, DynamicTestColumns, DynamicGridItem, DynamicGridMoreField,\r\n            validateFormulaMandyFields, skip, take, testskip, testtake, selectedFilter } = this.state;\r\n        let bool = false;\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                bool = true;\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n        }\r\n        if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n            const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n            DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\r\n            DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\r\n            DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\r\n\r\n            DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n            DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n\r\n            SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\r\n            testMoreField = dynamicColumn.testlistmoreitem ? dynamicColumn.testlistmoreitem : [];\r\n            testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\r\n            bool = true;\r\n        }\r\n        if (this.props.Login.masterData.RegistrationSubType &&\r\n            this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\r\n            let dataSate = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}` }] }\r\n            bool = true;\r\n            resultDataState = dataSate;\r\n            instrumentDataState = dataSate;\r\n            materialDataState = dataSate;\r\n            taskDataState = dataSate;\r\n            documentDataState = dataSate;\r\n            resultChangeDataState = dataSate;\r\n            historyDataState = dataSate;\r\n            testCommentDataState = dataSate;\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            bool = true;\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n        }\r\n        if (this.props.Login.validateFormulaMandyFields !== previousProps.Login.validateFormulaMandyFields) {\r\n            bool = true;\r\n            validateFormulaMandyFields = this.props.Login.validateFormulaMandyFields;\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\r\n            RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\r\n            RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\r\n            REFilterStatus = constructOptionList(this.props.Login.masterData.REFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", 'descending', \"ntransactionstatus\", false);\r\n            REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\r\n            Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestsynonym', 'ascending', 'ntestcode', false);\r\n            ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname',\r\n                'ascending', 'napprovalconfigversioncode', false);\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\r\n                resultDataState = this.props.Login.resultDataState;\r\n            }\r\n            if (this.props.Login.instrumentDataState && this.props.Login.instrumentDataState !== previousProps.Login.instrumentDataState) {\r\n                instrumentDataState = this.props.Login.instrumentDataState;\r\n            }\r\n            if (this.props.Login.taskDataState && this.props.Login.taskDataState !== previousProps.Login.taskDataState) {\r\n                taskDataState = this.props.Login.taskDataState;\r\n            }\r\n            if (this.props.Login.resultChangeDataState && this.props.Login.resultChangeDataState !== previousProps.Login.resultChangeDataState) {\r\n                resultChangeDataState = this.props.Login.resultChangeDataState;\r\n            }\r\n            if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\r\n                historyDataState = this.props.Login.historyDataState;\r\n            }\r\n            if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\r\n                testCommentDataState = this.props.Login.testCommentDataState;\r\n            }\r\n\r\n            // if (this.props.Login.masterData.DynamicColumns && this.props.Login.masterData.DynamicColumns !== previousProps.Login.masterData.DynamicColumns) {\r\n            //     bool = true;\r\n            //     sampleListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 3);\r\n            //     subSampleListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], 3);\r\n            //     testListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], 3);\r\n            //     sampleListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 8);\r\n            //     subSampleListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], 8);\r\n            //     testListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], 8);\r\n            //     SingleItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 4)\r\n            //     SampleGridItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 5)\r\n            //     SampleGridExpandableItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 6)\r\n            //     sampleMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 7)\r\n            //     subSampleMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], 7)\r\n            //     testMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], 7)\r\n            // }\r\n\r\n            let selectFilterStatus = { ntransactionstatus: transactionStatus.PARTIAL, sfilterstatus: this.props.intl.formatMessage({ id: \"IDS_PARTIAL\" }), scolorhexcode: \"#800000\" }\r\n            const selectedFilters = this.props.Login.masterData.REFilterStatus || [];\r\n\r\n            const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\r\n\r\n            const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL)\r\n            if (selectedFiltersNew.length > 0 && index === -1) {\r\n                selectedFiltersNew.push(selectFilterStatus)\r\n            }\r\n            selectedFilter = selectedFiltersNew;\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {masterData: this.props.Login.masterData,showTest,showSample }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            SampleType=  SampleType.get(\"OptionList\")\r\n            RegistrationType= RegistrationType.get(\"OptionList\")\r\n            RegistrationSubType= RegistrationSubType.get(\"OptionList\")\r\n            REFilterStatus= REFilterStatus.get(\"OptionList\")\r\n            REJobStatus= REJobStatus.get(\"OptionList\")\r\n            Testvalues= Testvalues.get(\"OptionList\")\r\n            ApprovalConfigVersion= ApprovalConfigVersion.get(\"OptionList\")\r\n        }\r\n        if (bool) {\r\n            this.setState({\r\n                showTest, showSample, userRoleControlRights, controlMap, resultDataState, instrumentDataState,\r\n                materialDataState, taskDataState, documentDataState, resultChangeDataState, testCommentDataState,\r\n                historyDataState, sampleListColumns, subSampleListColumns, testListColumns,\r\n                SingleItem, sampleListMainField, subSampleListMainField, testListMainField,\r\n                SampleGridItem, SampleGridExpandableItem, sampleMoreField, subSampleMoreField,\r\n                testMoreField, selectedRecord,\r\n                SampleType,\r\n                RegistrationType,\r\n                RegistrationSubType,\r\n                REFilterStatus,\r\n                REJobStatus,\r\n                Testvalues,\r\n                ApprovalConfigVersion,\r\n                validateFormulaMandyFields,\r\n                skip, take, testskip, testtake, selectedFilter,\r\n                DynamicSampleColumns, DynamicSubSampleColumns, DynamicTestColumns,\r\n                DynamicGridItem, DynamicGridMoreField\r\n            })\r\n        }\r\n\r\n        if (this.props.Login.meanTestParameterList !== previousProps.Login.meanTestParameterList) {\r\n            this.setState({ meanTestParameterList: this.props.Login.meanTestParameterList });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        // if (props.Login.selectedRecord !== state.selectedRecord) {\r\n        //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\r\n        // }\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nconst mapStatetoProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStatetoProps, {\r\n    crudMaster, updateStore, getsubSampleREDetail, getTestREDetail, getTestChildTabREDetail, resultGetModule,\r\n    completeTest, testMethodSourceEdit, addREInstrument, addREMaterial, deleteInstrumentRecord, fetchInstrumentRecord, deleteTaskRecord, fetchTaskRecord,\r\n    parameterRecord, checkListRecord, onSaveCheckList, defaultTest, getFormula, getRERegistrationType, getRERegistrationSubType,fetchMaterialRecord,\r\n    getREApprovalConfigVersion, getResultEntryDetails, calculateFormula, getREFilterStatus, getREFilterTestData, getREJobStatus, getSampleChildTabREDetail,\r\n    viewAttachment, getAttachmentCombo, deleteAttachment, resultImportFile, validateEsignCredentialComplete, getCommentsCombo, updateTestMethodSource,\r\n    filterTransactionList, validateEsignCredential, updateParameterComments, previewSampleReport, getMeanCalculationTestParameter, getREMaterialCategoryByType, getREMaterialByCategory, getREMaterialInvertoryByMaterial, getAvailableMaterialQuantity\r\n\r\n})(injectIntl(ResultEntry));"]},"metadata":{},"sourceType":"module"}