{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nimport { sortData, constructOptionList } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nexport function getSelectedSampleStorageLocation(inputParam, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/getSelectedSampleStorageLocation\", {\n      'userinfo': userInfo,\n      \"nsamplestoragelocationcode\": parseInt(inputParam.nsamplestoragelocationcode)\n    }).then(response => {\n      masterData = { ...masterData,\n        selectedSampleStorageLocation: response.data[\"selectedSampleStorageLocation\"],\n        sampleStorageVersion: response.data[\"sampleStorageVersion\"],\n        selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\n      }; // sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSelectedSampleStorageVersion(inputParam, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/getActiveSampleStorageVersion\", {\n      'userinfo': userInfo,\n      \"nsamplestorageversioncode\": parseInt(inputParam.nsamplestorageversioncode)\n    }).then(response => {\n      masterData = { ...masterData,\n        selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\n      }; // sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function editSampleStorageLocation(inputParam, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let selectedRecord = {};\n    let urlArray = [];\n    const getSampleStorageService = rsapi.post(\"/samplestoragelocation/getSampleStorageVersionByID\", {\n      'userinfo': userInfo,\n      \"nsamplestorageversioncode\": inputParam.nsamplestorageversioncode\n    });\n    const geStorageCategory = rsapi.post(\"/storagecategory/getStorageCategory\", {\n      'userinfo': userInfo\n    });\n    urlArray = [getSampleStorageService, geStorageCategory];\n    Axios.all(urlArray).then(response => {\n      // masterData = {\n      //     ...masterData\n      // };\n      selectedRecord[\"ssamplestoragelocationname\"] = response[0].data[\"selectedSampleStorageVersion\"][\"ssamplestoragelocationname\"];\n      const storageCategoryMap = constructOptionList(response[1].data || [], \"nstoragecategorycode\", \"sstoragecategoryname\", undefined, undefined, true);\n      const storageCategoryList = storageCategoryMap.get(\"OptionList\");\n      storageCategoryList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nstoragecategorycode\"] ? selectedRecord[\"nstoragecategorycode\"] = {\n        \"label\": item.label,\n        \"value\": item.value,\n        \"item\": item.item\n      } : \"\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // masterData,\n          loading: false,\n          treeData: JSON.parse(response[0].data[\"selectedSampleStorageVersion\"][\"jsondata\"].value).data,\n          selectedRecord,\n          openModal: true,\n          operation: \"update\",\n          loadTreeProperties: false,\n          storageCategoryList\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function approveSampleStorageLocation(userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/ApproveSampleStorageLocation\", {\n      'userinfo': userInfo,\n      \"approvalStatus\": masterData.selectedSampleStorageVersion[\"napprovalstatus\"],\n      \"sampleStorageVersionCode\": masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"],\n      \"sampleStorageLocationCode\": masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"]\n    }).then(response => {\n      masterData = { ...masterData,\n        sampleStorageVersion: response.data[\"sampleStorageVersion\"],\n        selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\n      }; // sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const openPropertyModal = clickedItem => dispatch => {\n  let selectedRecord = {};\n  selectedRecord[\"locationlastnode\"] = clickedItem.item.locationlastnode === undefined ? false : clickedItem.item.locationlastnode;\n  selectedRecord[\"containerfirstnode\"] = clickedItem.item.containerfirstnode === undefined ? false : clickedItem.item.containerfirstnode;\n  selectedRecord[\"containerlastnode\"] = clickedItem.item.containerlastnode === undefined ? false : clickedItem.item.containerlastnode;\n  dispatch({\n    type: DEFAULT_RETURN,\n    payload: {\n      selectedRecord,\n      loadTreeProperties: true,\n      openModal: true,\n      clickedItem,\n      operation: \"update\"\n    }\n  });\n};\nexport function fetchStorageCategory(param) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/storagecategory/getStorageCategory\", {\n      'userinfo': param.userInfo\n    }).then(response => {\n      const storageCategoryMap = constructOptionList(response.data || [], \"nstoragecategorycode\", \"sstoragecategoryname\", undefined, undefined, true);\n      const storageCategoryList = storageCategoryMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          storageCategoryList,\n          openModal: true,\n          selectedRecord: {\n            nstoragecategorycode: param.nfilterStorageCategory\n          },\n          loadTreeProperties: false,\n          treeData: [{\n            text: \"root\",\n            expanded: true,\n            editable: true,\n            root: true,\n            id: param.id\n          }],\n          operation: \"create\",\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const changeStorageCategoryFilter = (inputParam, filterStorageCategory) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/getSampleStorageLocationByCategory\", inputParam.inputData).then(response => {\n      const masterData = response.data; // sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData: { ...masterData,\n            filterStorageCategory,\n            nfilterStorageCategory: inputParam.inputData.nfilterStorageCategory\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport function copySampleStorageVersion(inputParam, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/copySampleStorageVersion\", {\n      'userinfo': userInfo,\n      \"sampleStorageVersionCode\": parseInt(inputParam.nsamplestorageversioncode),\n      \"sampleStorageLocationCode\": parseInt(inputParam.nsamplestoragelocationcode)\n    }).then(response => {\n      masterData = { ...masterData,\n        selectedSampleStorageLocation: response.data[\"selectedSampleStorageLocation\"],\n        sampleStorageVersion: response.data[\"sampleStorageVersion\"],\n        selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/SampleStorageLocationAction.js"],"names":["rsapi","DEFAULT_RETURN","initRequest","sortData","constructOptionList","toast","Axios","getSelectedSampleStorageLocation","inputParam","userInfo","masterData","dispatch","post","parseInt","nsamplestoragelocationcode","then","response","selectedSampleStorageLocation","data","sampleStorageVersion","selectedSampleStorageVersion","type","payload","loading","catch","error","status","message","warn","getSelectedSampleStorageVersion","nsamplestorageversioncode","editSampleStorageLocation","selectedRecord","urlArray","getSampleStorageService","geStorageCategory","all","storageCategoryMap","undefined","storageCategoryList","get","map","item","value","label","treeData","JSON","parse","openModal","operation","loadTreeProperties","approveSampleStorageLocation","openPropertyModal","clickedItem","locationlastnode","containerfirstnode","containerlastnode","fetchStorageCategory","param","nstoragecategorycode","nfilterStorageCategory","text","expanded","editable","root","id","changeStorageCategoryFilter","filterStorageCategory","inputData","copySampleStorageVersion"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { sortData, constructOptionList } from '../components/CommonScript';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\n\r\nexport function getSelectedSampleStorageLocation(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/getSelectedSampleStorageLocation\",\r\n            { 'userinfo': userInfo, \"nsamplestoragelocationcode\": parseInt(inputParam.nsamplestoragelocationcode) })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, selectedSampleStorageLocation: response.data[\"selectedSampleStorageLocation\"],\r\n                    sampleStorageVersion: response.data[\"sampleStorageVersion\"],\r\n                    selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\r\n                };\r\n                // sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function getSelectedSampleStorageVersion(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/getActiveSampleStorageVersion\",\r\n            { 'userinfo': userInfo, \"nsamplestorageversioncode\": parseInt(inputParam.nsamplestorageversioncode) })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\r\n                };\r\n                // sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function editSampleStorageLocation(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let selectedRecord = {};\r\n        let urlArray = [];\r\n        const getSampleStorageService = rsapi.post(\"/samplestoragelocation/getSampleStorageVersionByID\",\r\n            { 'userinfo': userInfo, \"nsamplestorageversioncode\": inputParam.nsamplestorageversioncode });\r\n\r\n        const geStorageCategory = rsapi.post(\"/storagecategory/getStorageCategory\",\r\n            { 'userinfo': userInfo });\r\n\r\n\r\n        urlArray = [getSampleStorageService, geStorageCategory];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                // masterData = {\r\n                //     ...masterData\r\n                // };\r\n\r\n                selectedRecord[\"ssamplestoragelocationname\"] = response[0].data[\"selectedSampleStorageVersion\"][\"ssamplestoragelocationname\"]\r\n                const storageCategoryMap = constructOptionList(response[1].data || [], \"nstoragecategorycode\",\r\n                    \"sstoragecategoryname\", undefined, undefined, true);\r\n\r\n                const storageCategoryList = storageCategoryMap.get(\"OptionList\");\r\n\r\n                storageCategoryList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nstoragecategorycode\"] ?\r\n                    selectedRecord[\"nstoragecategorycode\"] = {\r\n                        \"label\": item.label,\r\n                        \"value\": item.value,\r\n                        \"item\": item.item\r\n                    }\r\n                    : \"\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        // masterData,\r\n                        loading: false,\r\n                        treeData: JSON.parse(response[0].data[\"selectedSampleStorageVersion\"][\"jsondata\"].value).data,\r\n                        selectedRecord, openModal: true, operation: \"update\", loadTreeProperties: false, storageCategoryList\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function approveSampleStorageLocation(userInfo, masterData) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/ApproveSampleStorageLocation\",\r\n            {\r\n                'userinfo': userInfo, \"approvalStatus\": masterData.selectedSampleStorageVersion[\"napprovalstatus\"], \"sampleStorageVersionCode\": masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"],\r\n                \"sampleStorageLocationCode\": masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"]\r\n            })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, sampleStorageVersion: response.data[\"sampleStorageVersion\"], selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\r\n                };\r\n                // sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const openPropertyModal = (clickedItem) => (dispatch) => {\r\n    let selectedRecord = {};\r\n    selectedRecord[\"locationlastnode\"] = clickedItem.item.locationlastnode === undefined ? false : clickedItem.item.locationlastnode;\r\n    selectedRecord[\"containerfirstnode\"] = clickedItem.item.containerfirstnode === undefined ? false : clickedItem.item.containerfirstnode;\r\n    selectedRecord[\"containerlastnode\"] = clickedItem.item.containerlastnode === undefined ? false : clickedItem.item.containerlastnode;\r\n    dispatch({\r\n        type: DEFAULT_RETURN,\r\n        payload: { selectedRecord, loadTreeProperties: true, openModal: true, clickedItem, operation: \"update\" }\r\n    });\r\n};\r\n\r\nexport function fetchStorageCategory(param) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/storagecategory/getStorageCategory\",\r\n            { 'userinfo': param.userInfo })\r\n            .then(response => {\r\n\r\n                const storageCategoryMap = constructOptionList(response.data || [], \"nstoragecategorycode\",\r\n                    \"sstoragecategoryname\", undefined, undefined, true);\r\n\r\n                const storageCategoryList = storageCategoryMap.get(\"OptionList\");\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        storageCategoryList, openModal: true, selectedRecord: {nstoragecategorycode: param.nfilterStorageCategory}, loadTreeProperties: false,\r\n                        treeData: [\r\n                            {\r\n                                text: \"root\",\r\n                                expanded: true,\r\n                                editable: true,\r\n                                root: true,\r\n                                id: param.id,\r\n                            },\r\n                        ], operation: \"create\",\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const changeStorageCategoryFilter = (inputParam, filterStorageCategory) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/getSampleStorageLocationByCategory\", inputParam.inputData)\r\n            .then(response => {\r\n                const masterData = response.data\r\n                // sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterStorageCategory,\r\n                            nfilterStorageCategory: inputParam.inputData.nfilterStorageCategory,\r\n                            \r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport function copySampleStorageVersion(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/copySampleStorageVersion\",\r\n            { 'userinfo': userInfo, \"sampleStorageVersionCode\": parseInt(inputParam.nsamplestorageversioncode), \r\n            \"sampleStorageLocationCode\": parseInt(inputParam.nsamplestoragelocationcode) })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, selectedSampleStorageLocation: response.data[\"selectedSampleStorageLocation\"],\r\n                    sampleStorageVersion: response.data[\"sampleStorageVersion\"],\r\n                    selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\r\n                };\r\n                \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}