{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\designtemplatemapping\\\\ConfigureReportFilterType.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport 'rc-tabs/assets/index.css';\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\nimport Tabs, { TabPane } from 'rc-tabs';\nimport ReactTooltip from 'react-tooltip';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { SampleType, designProperties, formCode } from '../../components/Enumeration';\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\nimport { toast } from 'react-toastify';\nimport { queryBuilderfillingColumns, getFilterConditionsBasedonDataType } from '../../components/CommonScript';\nimport { Col, Card } from \"react-bootstrap\";\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\n\nclass ConfigureReportFilterType extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTabChange = tab => {\n      this.setState({\n        selectedScreen: this.state.screens.find(screen => screen.eventKey === tab) // awesomeTree:this.state.awesomeTree,\n        //,extractedColumnList:\n        //  tab==='sample'||tab==='master'?this.state.sampleColumnList:this.state.subsampleColumnList\n\n      });\n    };\n\n    this.onChangeReportFilterTypeFields = (event, dataItem, field, dataIndex, formCode, operation) => {\n      let comboValues = this.state.comboValues || [];\n      let count = 0;\n      const sampleReportFilterTypeData = this.props.sampleReportFilterTypeData;\n      sampleReportFilterTypeData[formCode][dataIndex] = { ...sampleReportFilterTypeData[formCode][dataIndex],\n        samplefiltertypefields: event.target.checked\n      };\n      sampleReportFilterTypeData.sample.map(x => {\n        if (x.samplefiltertypefields === true) {\n          count++;\n        }\n      });\n\n      if (count > this.props.settingsCount) {\n        sampleReportFilterTypeData[formCode][dataIndex] = { ...sampleReportFilterTypeData[formCode][dataIndex],\n          samplefiltertypefields: false\n        };\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_MAXIMUMSELECTIONEXCEEDSFILTEERTYPE\"\n        }));\n      } else {\n        // let  extractedColumnList=this.props.extractedColumnList(this.props.sampleReportFilterTypeData[\"sample\"])\n        let extractedColumnList = queryBuilderfillingColumns(this.props.sampleReportFilterTypeData[\"sample\"], this.props.userInfo.slanguagetypecode);\n        sampleReportFilterTypeData[\"sample\"].map(x => {\n          if (x.realData[designProperties.LISTITEM] === \"combo\") {\n            comboValues = { ...comboValues,\n              [x.realData[designProperties.LABEL][this.props.userInfo.slanguagetypecode]]: [{\n                \"value\": -1,\n                \"title\": 'NA'\n              }]\n            };\n          }\n        });\n        let fields = getFilterConditionsBasedonDataType(extractedColumnList, comboValues);\n        let data = {\n          sampleReportFilterTypeData: sampleReportFilterTypeData,\n          fields: fields\n        };\n        this.setState({\n          sampleReportFilterTypeData: sampleReportFilterTypeData,\n          fields: { ...fields\n          },\n          isRender: true,\n          comboValues\n        });\n        this.props.childDataChange(data);\n      }\n    };\n\n    this.onChangeAwesomeQueryBuilder = (immutableTree, config) => {\n      const filterquery = QbUtils.sqlFormat(immutableTree, config);\n      const filterQueryTreeStr = QbUtils.getTree(immutableTree);\n      let data = {\n        awesomeTree: immutableTree,\n        awesomeConfig: config,\n        filterquery,\n        filterQueryTreeStr\n      };\n      this.setState({\n        awesomeTree: immutableTree,\n        awesomeConfig: config,\n        filterquery,\n        filterQueryTreeStr,\n        isRender: false\n      });\n      this.props.childDataChange(data);\n    };\n\n    const screens = [{\n      eventKey: 'sample',\n      name: \"IDS_SAMPLE\"\n    }, {\n      eventKey: 'configuredfilterinputs',\n      name: \"IDS_CONFIGUREDFILTERINPUTS\"\n    }];\n    let sampleColumnList = [{\n      \"title\": \"IDS_REPORTFILTERTYPE\",\n      \"field\": \"samplefiltertypefields\",\n      \"width\": \"600px\"\n    }];\n    this.state = {\n      screens,\n      sampleColumnList,\n      extractedColumnList: sampleColumnList,\n      selectedScreen: {\n        eventKey: 'sample',\n        name: \"IDS_SAMPLE\"\n      },\n      fields: this.props.fields,\n      awesomeTree: this.props.awesomeTree //fields:this.props.fields||[]\n\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AtTabs, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      activeKey: this.state.selectedScreen.eventKey,\n      moreIcon: \"...\",\n      onChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }\n    }, this.state.screens.map(screen =>\n    /*#__PURE__*/\n    //{\n    React.createElement(TabPane, {\n      name: screen.eventKey,\n      tab: this.props.intl.formatMessage({\n        id: screen.name\n      }),\n      key: screen.eventKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 29\n      }\n    }, this.state.selectedScreen.eventKey === 'sample' && /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      className: \"active-paging\",\n      style: {\n        height: '550px'\n      },\n      resizable: true,\n      reorderable: true,\n      scrollable: \"scrollable\",\n      data: this.props.dataResult[this.state.selectedScreen.eventKey] ? this.props.dataResult[this.state.selectedScreen.eventKey] : []\n    }, this.state.dataState, {\n      onDataStateChange: this.dataStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      field: \"label\",\n      title: this.props.intl.formatMessage({\n        id: \"IDS_FIELDS\"\n      }),\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"]['label'],\n        \"data-for\": \"tooltip-grid-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 61\n        }\n      }, row[\"dataItem\"]['label']),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 53\n      }\n    }), this.state.extractedColumnList.map(column => /*#__PURE__*/React.createElement(GridColumn, {\n      field: column.field,\n      title: this.props.intl.formatMessage({\n        id: column.title\n      }),\n      headerClassName: \"text-center\",\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        },\n        \"data-tip\": this.props.intl.formatMessage({\n          id: column.title\n        }),\n        \"data-for\": \"tooltip-grid-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][column.field],\n        onChange: event => this.onChangeReportFilterTypeFields(event, row[\"dataItem\"], column.field, row.dataIndex, this.state.selectedScreen.eventKey, this.props.operation),\n        checked: row[\"dataItem\"][column.field] || false,\n        name: row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 73\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 61\n      }\n    })))))))) //}\n    ))), /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      className: \"pb-0 mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, this.state.selectedScreen.eventKey === 'configuredfilterinputs' && /*#__PURE__*/React.createElement(FilterQueryBuilder, {\n      fields: this.state.fields || {},\n      onChange: this.onChangeAwesomeQueryBuilder,\n      tree: this.state.isRender ? undefined : this.state.awesomeTree //config={this.props.awesomeConfig}\n      ,\n      skip: this.props.kendoSkip || 0,\n      take: this.props.kendoTake || 5,\n      handlePageChange: this.props.handlePageChange,\n      gridColumns: this.props.gridColumns || [],\n      filterData: this.props.filterDataRecord,\n      onRowClick: this.props.handleKendoRowClick,\n      handleExecuteClick: this.props.handleExecuteClick,\n      userInfo: this.props.userInfo,\n      static: true,\n      isRender: this.state.isRender,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    })));\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    let {\n      selectedRecord,\n      sampleReportFilterTypeData,\n      fields,\n      awesomeTree\n    } = this.state;\n    let bool = false;\n\n    if (this.props.sampleReportFilterTypeData !== previousProps.sampleReportFilterTypeData) {\n      bool = true;\n      sampleReportFilterTypeData = this.props.sampleReportFilterTypeData || {};\n    }\n\n    if (this.props.fields !== previousProps.fields) {\n      bool = true;\n      fields = this.props.fields || {};\n    }\n\n    if (this.props.awesomeTree !== previousProps.awesomeTree) {\n      bool = true;\n      awesomeTree = this.props.awesomeTree || {};\n    }\n\n    if (this.state.awesomeTree !== previousState.awesomeTree) {\n      bool = true;\n      awesomeTree = this.state.awesomeTree || {};\n    }\n\n    if (bool) {\n      this.setState({\n        selectedRecord,\n        sampleReportFilterTypeData,\n        fields,\n        awesomeTree\n      });\n    }\n  }\n\n}\n\nexport default injectIntl(ConfigureReportFilterType);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/designtemplatemapping/ConfigureReportFilterType.jsx"],"names":["React","FormattedMessage","injectIntl","AtTabs","Tabs","TabPane","ReactTooltip","Grid","GridColumn","CustomSwitch","LocalizationProvider","AtTableWrap","PerfectScrollbar","SampleType","designProperties","formCode","FilterQueryBuilder","toast","queryBuilderfillingColumns","getFilterConditionsBasedonDataType","Col","Card","DEFAULT_RETURN","Utils","QbUtils","ConfigureReportFilterType","Component","constructor","props","onTabChange","tab","setState","selectedScreen","state","screens","find","screen","eventKey","onChangeReportFilterTypeFields","event","dataItem","field","dataIndex","operation","comboValues","count","sampleReportFilterTypeData","samplefiltertypefields","target","checked","sample","map","x","settingsCount","warn","intl","formatMessage","id","extractedColumnList","userInfo","slanguagetypecode","realData","LISTITEM","LABEL","fields","data","isRender","childDataChange","onChangeAwesomeQueryBuilder","immutableTree","config","filterquery","sqlFormat","filterQueryTreeStr","getTree","awesomeTree","awesomeConfig","name","sampleColumnList","render","height","dataResult","dataState","dataStateChange","row","column","title","textAlign","columnIndex","undefined","kendoSkip","kendoTake","handlePageChange","gridColumns","filterDataRecord","handleKendoRowClick","handleExecuteClick","componentDidUpdate","previousProps","previousState","selectedRecord","bool"],"mappings":"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","sourcesContent":["\r\nimport React from 'react'\r\nimport { FormattedMessage, injectIntl } from 'react-intl'\r\nimport 'rc-tabs/assets/index.css';\r\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\r\nimport Tabs, { TabPane } from 'rc-tabs';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { Grid,GridColumn } from '@progress/kendo-react-grid';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { SampleType, designProperties, formCode } from '../../components/Enumeration';\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\nimport { toast } from 'react-toastify';\r\nimport {queryBuilderfillingColumns,getFilterConditionsBasedonDataType} from '../../components/CommonScript'\r\nimport {  Col, Card,  } from \"react-bootstrap\";\r\nimport {DEFAULT_RETURN} from '../../actions/LoginTypes';\r\nimport {Utils as QbUtils,} from \"@react-awesome-query-builder/ui\";\r\n\r\n\r\nclass ConfigureReportFilterType extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n            const screens = [{ eventKey: 'sample', name: \"IDS_SAMPLE\" },\r\n            { eventKey: 'configuredfilterinputs', name: \"IDS_CONFIGUREDFILTERINPUTS\" }];\r\n\r\n            let sampleColumnList = [{ \"title\": \"IDS_REPORTFILTERTYPE\", \"field\": \"samplefiltertypefields\", \"width\": \"600px\" },\r\n            ];\r\n\r\n\r\n            this.state = {\r\n                screens, sampleColumnList, extractedColumnList: sampleColumnList,\r\n                selectedScreen: { eventKey: 'sample', name: \"IDS_SAMPLE\" },fields:this.props.fields,\r\n                awesomeTree:this.props.awesomeTree\r\n                //fields:this.props.fields||[]\r\n            }\r\n\r\n    }\r\n\r\n    onTabChange = (tab) => {\r\n        this.setState({\r\n            selectedScreen: this.state.screens.find(screen => screen.eventKey === tab),\r\n           // awesomeTree:this.state.awesomeTree,\r\n\r\n            //,extractedColumnList:\r\n          //  tab==='sample'||tab==='master'?this.state.sampleColumnList:this.state.subsampleColumnList\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <AtTabs>\r\n\r\n                    <Tabs activeKey={this.state.selectedScreen.eventKey} moreIcon=\"...\" onChange={this.onTabChange}>\r\n                        {this.state.screens.map(screen =>//{\r\n                            <TabPane name={screen.eventKey} tab={this.props.intl.formatMessage({ id: screen.name })} key={screen.eventKey}>\r\n                                {this.state.selectedScreen.eventKey==='sample'&&\r\n                                <PerfectScrollbar>\r\n                                    {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                                    <AtTableWrap className=\"at-list-table\">\r\n                                        <LocalizationProvider language=\"lang\">\r\n                                            <>\r\n                                                <Grid\r\n                                                    className={\"active-paging\"}\r\n                                                    style={{ height: '550px' }}\r\n                                                    resizable\r\n                                                    reorderable\r\n                                                    scrollable={\"scrollable\"}\r\n                                                    data={this.props.dataResult[this.state.selectedScreen.eventKey]?this.props.dataResult[this.state.selectedScreen.eventKey]:[]}\r\n                                                    {...this.state.dataState}\r\n                                                    onDataStateChange={this.dataStateChange}>\r\n                                                    <GridColumn\r\n                                                        field=\"label\"\r\n                                                        title={this.props.intl.formatMessage({ id: \"IDS_FIELDS\" })}\r\n                                                        cell={(row) => (\r\n                                                            <td data-tip={row[\"dataItem\"]['label']} data-for=\"tooltip-grid-wrap\">\r\n                                                                {row[\"dataItem\"]['label']}\r\n                                                            </td>\r\n                                                        )}\r\n                                                    />\r\n                                                    {this.state.extractedColumnList.map(column =>\r\n                                                            <GridColumn\r\n                                                                field={column.field}\r\n                                                                title={this.props.intl.formatMessage({ id: column.title })}\r\n                                                                headerClassName=\"text-center\"\r\n                                                                cell={(row) => (\r\n                                                                    <td style={{ textAlign: \"center\" }} data-tip={this.props.intl.formatMessage({ id: column.title })} data-for=\"tooltip-grid-wrap\">\r\n                                                                        <CustomSwitch type=\"switch\" id={row[\"dataItem\"][column.field]}\r\n                                                                            onChange={(event) => this.onChangeReportFilterTypeFields(event, row[\"dataItem\"], column.field,\r\n                                                                                row.dataIndex, this.state.selectedScreen.eventKey,\r\n                                                                                this.props.operation)}\r\n                                                                            checked={row[\"dataItem\"][column.field] || false}\r\n                                                                            name={row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n\r\n\r\n                                                                    </td>)}\r\n                                                            />\r\n\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n                                            </>\r\n\r\n                                        </LocalizationProvider>\r\n                                    </AtTableWrap>\r\n                                    {/* <ReactTooltip /> */}\r\n                                </PerfectScrollbar>}\r\n\r\n                            </TabPane>\r\n                            //}\r\n                        )}\r\n                    </Tabs>\r\n                </AtTabs>\r\n                <Col md='12'className='pb-0 mt-4'>\r\n                      {/* <Card.Title >\r\n                        <FormattedMessage\r\n                          id=\"IDS_CONFIGUREDFILTERINPUTS\" />\r\n                      </Card.Title> */}\r\n                      \r\n                      {this.state.selectedScreen.eventKey==='configuredfilterinputs'&&\r\n                <FilterQueryBuilder\r\n                            fields={this.state.fields || {}}\r\n                            onChange={this.onChangeAwesomeQueryBuilder}\r\n                            tree={this.state.isRender?undefined:this.state.awesomeTree}\r\n                            //config={this.props.awesomeConfig}\r\n                            skip={this.props.kendoSkip||0}\r\n                            take={this.props.kendoTake||5}\r\n                            handlePageChange={this.props.handlePageChange}\r\n                            gridColumns={this.props.gridColumns || []}\r\n                            filterData={this.props.filterDataRecord}\r\n                            onRowClick={this.props.handleKendoRowClick}\r\n                            handleExecuteClick={this.props.handleExecuteClick}\r\n                            userInfo={this.props.userInfo}\r\n\r\n                            static={true}\r\n                            isRender={this.state.isRender}\r\n                         \r\n                          />\r\n                         \r\n                       }\r\n                        </Col>\r\n            </>\r\n        );\r\n    }\r\n\r\n    onChangeReportFilterTypeFields = (event, dataItem, field, dataIndex, formCode, operation) => {\r\n        let   comboValues=this.state.comboValues||[];\r\n        let count=0;\r\n        const sampleReportFilterTypeData = this.props.sampleReportFilterTypeData\r\n        sampleReportFilterTypeData[formCode][dataIndex] = { ...sampleReportFilterTypeData[formCode][dataIndex], samplefiltertypefields: event.target.checked }\r\n\r\n        sampleReportFilterTypeData.sample.map(x=>{\r\n            if(x.samplefiltertypefields===true){\r\n                count++\r\n            }\r\n        })\r\n        if(count>this.props.settingsCount){\r\n            sampleReportFilterTypeData[formCode][dataIndex] = { ...sampleReportFilterTypeData[formCode][dataIndex], samplefiltertypefields: false }\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDSFILTEERTYPE\" })) \r\n         }else{\r\n           // let  extractedColumnList=this.props.extractedColumnList(this.props.sampleReportFilterTypeData[\"sample\"])\r\n            let  extractedColumnList=queryBuilderfillingColumns(this.props.sampleReportFilterTypeData[\"sample\"],this.props.userInfo.slanguagetypecode)\r\n             sampleReportFilterTypeData[\"sample\"].map(x=>{\r\n                if(x.realData[designProperties.LISTITEM]===\"combo\"){\r\n                    comboValues={...comboValues,\r\n                        [x.realData[designProperties.LABEL][this.props.userInfo.slanguagetypecode]]:\r\n                    [{\"value\":-1,\"title\":'NA'}]}\r\n                }})\r\n            let fields =getFilterConditionsBasedonDataType(extractedColumnList,comboValues);\r\n        let data={sampleReportFilterTypeData:sampleReportFilterTypeData,fields:fields}\r\n        \r\n        this.setState({sampleReportFilterTypeData:sampleReportFilterTypeData,fields:{...fields},isRender:true,comboValues})\r\n       this.props.childDataChange(data);\r\n    }\r\n    }\r\n    onChangeAwesomeQueryBuilder = (immutableTree, config) => {\r\n        const filterquery = QbUtils.sqlFormat(immutableTree, config);\r\n        const filterQueryTreeStr = QbUtils.getTree(immutableTree);\r\n        let data={awesomeTree: immutableTree, awesomeConfig: config, filterquery, filterQueryTreeStr}\r\n        this.setState({awesomeTree: immutableTree, awesomeConfig: config, filterquery, filterQueryTreeStr,isRender:false})\r\n        this.props.childDataChange(data);\r\n    };\r\n    \r\n    componentDidUpdate(previousProps,previousState) {\r\n        let { selectedRecord , sampleReportFilterTypeData,fields,awesomeTree\r\n        } = this.state\r\n        let bool = false;\r\n\r\n        if (this.props.sampleReportFilterTypeData !== previousProps.sampleReportFilterTypeData) {\r\n            bool = true;\r\n            sampleReportFilterTypeData = this.props.sampleReportFilterTypeData || {};\r\n        }\r\n        if (this.props.fields !== previousProps.fields) {\r\n            bool = true;\r\n            fields = this.props.fields || {};\r\n        }\r\n        if (this.props.awesomeTree !== previousProps.awesomeTree) {\r\n            bool = true;\r\n            awesomeTree = this.props.awesomeTree || {};\r\n        }\r\n        if (this.state.awesomeTree !== previousState.awesomeTree) {\r\n            bool = true;\r\n            awesomeTree = this.state.awesomeTree || {};\r\n        }\r\n        if (bool) {\r\n            this.setState({\r\n                selectedRecord ,sampleReportFilterTypeData,fields,awesomeTree\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n}\r\nexport default injectIntl(ConfigureReportFilterType)"]},"metadata":{},"sourceType":"module"}