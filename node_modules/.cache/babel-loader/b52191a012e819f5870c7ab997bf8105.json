{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\CustomPager.jsx\";\nimport React, { useRef } from 'react';\nimport '../pages/registration/registration.css';\nimport { Pager } from '@progress/kendo-react-data-tools';\nimport { injectIntl } from 'react-intl'; // import { withResizeDetector } from 'react-resize-detector';\n\nimport { loadMessages, LocalizationProvider } from '@progress/kendo-react-intl';\nimport messages_en from '../assets/translations/en.json';\nimport messages_de from '../assets/translations/de.json';\nimport messages_ru from '../assets/translations/ru.json';\nimport messages_tg from '../assets/translations/tg.json';\nconst messages = {\n  'en-US': messages_en,\n  'ko-KR': messages_de,\n  'ru-RU': messages_ru,\n  'tg-TG': messages_tg\n};\n\nconst CustomPager = props => {\n  const ref = useRef(null);\n\n  const handlePageChange = e => {\n    props.handlePageChange(e);\n  };\n\n  loadMessages(messages[props.userInfo && props.userInfo.slanguagetypecode], \"lang\");\n\n  const AdaptiveComponent = () => {\n    // let divWidth =  JSON.parse(JSON.stringify(width) )\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: `pager_wrap ${props.width && props.width < (props.pagershowwidth ? props.pagershowwidth : 33) ? 'show-list' : 'wrap-class'}`,\n      ref: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Pager, {\n      className: \"k-pagerheight\",\n      skip: parseInt(props.skip),\n      take: parseInt(props.take),\n      onPageChange: e => handlePageChange(e),\n      total: props.total,\n      buttonCount: props.buttonCount,\n      info: props.info,\n      pageSizes: props.pageSize // messagesMap={loadMessages(enMessages, \"en\")}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    })));\n  }; // const AdaptiveWithDetector = withResizeDetector(AdaptiveComponent);\n\n\n  return (\n    /*#__PURE__*/\n    // <AdaptiveWithDetector />\n    React.createElement(AdaptiveComponent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 5\n      }\n    })\n  );\n};\n\nexport default injectIntl(CustomPager);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/CustomPager.jsx"],"names":["React","useRef","Pager","injectIntl","loadMessages","LocalizationProvider","messages_en","messages_de","messages_ru","messages_tg","messages","CustomPager","props","ref","handlePageChange","e","userInfo","slanguagetypecode","AdaptiveComponent","width","pagershowwidth","parseInt","skip","take","total","buttonCount","info","pageSize"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAO,wCAAP;AACA,SAASC,KAAT,QAAsB,kCAAtB;AACA,SAASC,UAAT,QAA2B,YAA3B,C,CACA;;AACA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,4BAAnD;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AAEA,MAAMC,QAAQ,GAAG;AACf,WAASJ,WADM;AAEf,WAASC,WAFM;AAGf,WAASC,WAHM;AAIf,WAASC;AAJM,CAAjB;;AAOA,MAAME,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAMC,GAAG,GAAGZ,MAAM,CAAC,IAAD,CAAlB;;AACA,QAAMa,gBAAgB,GAAIC,CAAD,IAAO;AAC9BH,IAAAA,KAAK,CAACE,gBAAN,CAAuBC,CAAvB;AACD,GAFD;;AAGAX,EAAAA,YAAY,CAACM,QAAQ,CAACE,KAAK,CAACI,QAAN,IAAkBJ,KAAK,CAACI,QAAN,CAAeC,iBAAlC,CAAT,EAA+D,MAA/D,CAAZ;;AACA,QAAMC,iBAAiB,GAAG,MAAM;AAC9B;AACA,wBAAO;AAAK,MAAA,SAAS,EAAG,cAAaN,KAAK,CAACO,KAAN,IAAeP,KAAK,CAACO,KAAN,IAAeP,KAAK,CAACQ,cAAN,GAAuBR,KAAK,CAACQ,cAA7B,GAA4C,EAA3D,CAAf,GAAgF,WAAhF,GAA8F,YAAa,EAAzI;AAA4I,MAAA,GAAG,EAAEP,GAAjJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACL,oBAAC,oBAAD;AAAsB,MAAA,QAAQ,EAAC,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,SAAS,EAAC,eADZ;AAEE,MAAA,IAAI,EAAEQ,QAAQ,CAACT,KAAK,CAACU,IAAP,CAFhB;AAGE,MAAA,IAAI,EAAED,QAAQ,CAACT,KAAK,CAACW,IAAP,CAHhB;AAIE,MAAA,YAAY,EAAGR,CAAD,IAAOD,gBAAgB,CAACC,CAAD,CAJvC;AAKE,MAAA,KAAK,EAAEH,KAAK,CAACY,KALf;AAME,MAAA,WAAW,EAAEZ,KAAK,CAACa,WANrB;AAOE,MAAA,IAAI,EAAEb,KAAK,CAACc,IAPd;AAQE,MAAA,SAAS,EAAEd,KAAK,CAACe,QARnB,CASA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADK,CAAP;AAeD,GAjBD,CAN6B,CAwB7B;;;AACA;AAAA;AACE;AACA,wBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAID,CA7BD;;AA8BA,eAAexB,UAAU,CAACQ,WAAD,CAAzB","sourcesContent":["import React, { useRef } from 'react';\r\nimport '../pages/registration/registration.css'\r\nimport { Pager } from '@progress/kendo-react-data-tools';\r\nimport { injectIntl } from 'react-intl';\r\n// import { withResizeDetector } from 'react-resize-detector';\r\nimport { loadMessages, LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport messages_en from '../assets/translations/en.json';\r\nimport messages_de from '../assets/translations/de.json';\r\nimport messages_ru from '../assets/translations/ru.json';\r\nimport messages_tg from '../assets/translations/tg.json';\r\n\r\nconst messages = {\r\n  'en-US': messages_en,\r\n  'ko-KR': messages_de,\r\n  'ru-RU': messages_ru,\r\n  'tg-TG': messages_tg\r\n}\r\n\r\nconst CustomPager = (props) => {\r\n  const ref = useRef(null);\r\n  const handlePageChange = (e) => {\r\n    props.handlePageChange(e)\r\n  }\r\n  loadMessages(messages[props.userInfo && props.userInfo.slanguagetypecode], \"lang\");\r\n  const AdaptiveComponent = () => {\r\n    // let divWidth =  JSON.parse(JSON.stringify(width) )\r\n    return <div className={`pager_wrap ${props.width && props.width < (props.pagershowwidth ? props.pagershowwidth:33) ? 'show-list' : 'wrap-class'}`} ref={ref}>\r\n      <LocalizationProvider language=\"lang\">\r\n        <Pager\r\n          className=\"k-pagerheight\"\r\n          skip={parseInt(props.skip)}\r\n          take={parseInt(props.take)}\r\n          onPageChange={(e) => handlePageChange(e)}\r\n          total={props.total}\r\n          buttonCount={props.buttonCount}\r\n          info={props.info}\r\n          pageSizes={props.pageSize}\r\n        // messagesMap={loadMessages(enMessages, \"en\")}\r\n        />\r\n      </LocalizationProvider>\r\n    </div>;\r\n  };\r\n  // const AdaptiveWithDetector = withResizeDetector(AdaptiveComponent);\r\n  return (\r\n    // <AdaptiveWithDetector />\r\n    <AdaptiveComponent />\r\n  )\r\n}\r\nexport default injectIntl(CustomPager);\r\n"]},"metadata":{},"sourceType":"module"}