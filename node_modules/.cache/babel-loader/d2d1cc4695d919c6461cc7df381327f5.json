{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\ResultEntryBySample\\\\ResultEntryFormulaForm.jsx\";\nimport { faCalculator, faSave, faSync } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { Col, Row, Button, Nav } from 'react-bootstrap';\nimport { FormattedMessage } from 'react-intl';\nimport { MediaHeader, MediaSubHeader } from '../../components/App.styles';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport FormInput from '../../components/form-input/form-input.component';\n\nconst ResultEntryFormulaForm = props => {\n  //      test(a,b){\n  //    }\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, props.selectedRecord && props.selectedRecord.parameterData ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(MediaHeader, {\n    className: `labelfont`,\n    style: {\n      color: \"#007bff\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 25\n    }\n  }, props.selectedRecord ? props.selectedRecord.formulainput ? props.selectedRecord.formulainput : \"\" : \"\")), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 21\n    }\n  }, props.selectedRecord.parameterData.sarno ? /*#__PURE__*/React.createElement(MediaHeader, {\n    className: `labelfont`,\n    style: {\n      color: \"#172b4d\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 29\n    }\n  }, props.selectedRecord.parameterData.sarno) : \"\", props.selectedRecord.parameterData.stestsynonym ? /*#__PURE__*/React.createElement(MediaHeader, {\n    className: `labelfont`,\n    style: {\n      color: \"#505f79\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 29\n    }\n  }, \" \", props.selectedRecord.parameterData.stestsynonym, \" \", props.selectedRecord.parameterData.sretestrepeatcount) : \"\", props.selectedRecord.parameterData.sparametersynonym ? /*#__PURE__*/React.createElement(MediaSubHeader, {\n    className: `labelfont`,\n    style: {\n      color: \"#97a0af\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 29\n    }\n  }, \" \", props.selectedRecord.parameterData.sparametersynonym) : \"\")) : \"\", props.DynamicFields.map((fields, index) => {\n    const test = props.selectedRecord.ResultParameter.filter(x => x.ntestparametercode === fields.ndynamicformulafieldcode);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n      md: \"8\",\n      className: \"mt-4\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      name: `dynamicformulafield_${index}`,\n      label: fields.sdynamicfieldname,\n      type: \"text\",\n      required: true,\n      isMandatory: true,\n      value: props.selectedRecord.selectedForumulaInput && props.selectedRecord.selectedForumulaInput.length > 0 ? props.selectedRecord.selectedForumulaInput[index] ? props.selectedRecord.selectedForumulaInput[index].svalues : \"\" : \"\" //value={test.length > 0 ?\n      //     test[0].sresult : \"\" }\n      //value={props.selectedRecord[\"formulainput\"] ? props.selectedRecord[\"formulainput\"][`dynamicformulafield_${index}`] : \"\"}\n      ,\n      placeholder: fields.sdynamicfieldname,\n      onChange: event => props.onFormulaInputChange(event, index, fields),\n      maxLength: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 29\n      }\n    })), fields.nisaverageneed > 1 ? /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch, {\n      label: \"Average\",\n      type: \"switch\",\n      name: `dynamicaveragefield_${index}`,\n      onChange: event => props.getAverageResult(event, fields, index, props.selectedRecord.selectedForumulaInput, props.masterData, props.selectedRecord),\n      defaultValue: props.selectedRecord ? props.selectedRecord.selectedForumulaInput ? props.selectedRecord.selectedForumulaInput.senableAverage : false : false,\n      isMandatory: false,\n      required: true,\n      checked: props.selectedRecord ? props.selectedRecord.selectedForumulaInput ? props.selectedRecord.selectedForumulaInput.senableAverage : false : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 37\n      }\n    })) : \"\");\n  }));\n};\n\nexport default ResultEntryFormulaForm;","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntryFormulaForm.jsx"],"names":["faCalculator","faSave","faSync","FontAwesomeIcon","React","Col","Row","Button","Nav","FormattedMessage","MediaHeader","MediaSubHeader","CustomSwitch","FormInput","ResultEntryFormulaForm","props","selectedRecord","parameterData","color","formulainput","sarno","stestsynonym","sretestrepeatcount","sparametersynonym","DynamicFields","map","fields","index","test","ResultParameter","filter","x","ntestparametercode","ndynamicformulafieldcode","sdynamicfieldname","selectedForumulaInput","length","svalues","event","onFormulaInputChange","nisaverageneed","getAverageResult","masterData","senableAverage"],"mappings":";AAAA,SAASA,YAAT,EAAuBC,MAAvB,EAA+BC,MAA/B,QAA6C,mCAA7C;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,MAAnB,EAA2BC,GAA3B,QAAsC,iBAAtC;AACA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,6BAA5C;AACA,OAAOC,YAAP,MAAyB,wDAAzB;AACA,OAAOC,SAAP,MAAsB,kDAAtB;;AAEA,MAAMC,sBAAsB,GAAIC,KAAD,IAAW;AAEtC;AAEA;AAEA,sBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,KAAK,CAACC,cAAN,IAAwBD,KAAK,CAACC,cAAN,CAAqBC,aAA7C,gBACG,uDACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAG,WAAzB;AAAqC,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,KAAK,CAACC,cAAN,GAAuBD,KAAK,CAACC,cAAN,CAAqBG,YAArB,GAAoCJ,KAAK,CAACC,cAAN,CAAqBG,YAAzD,GAAuE,EAA9F,GAAkG,EADvG,CADJ,CADJ,eAQI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKJ,KAAK,CAACC,cAAN,CAAqBC,aAArB,CAAmCG,KAAnC,gBACG,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAG,WAAzB;AAAqC,IAAA,KAAK,EAAE;AAAEF,MAAAA,KAAK,EAAE;AAAT,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,KAAK,CAACC,cAAN,CAAqBC,aAArB,CAAmCG,KADxC,CADH,GAIK,EALV,EAMKL,KAAK,CAACC,cAAN,CAAqBC,aAArB,CAAmCI,YAAnC,gBACG,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAG,WAAzB;AAAqC,IAAA,KAAK,EAAE;AAAEH,MAAAA,KAAK,EAAE;AAAT,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACYH,KAAK,CAACC,cAAN,CAAqBC,aAArB,CAAmCI,YAD/C,OAC8DN,KAAK,CAACC,cAAN,CAAqBC,aAArB,CAAmCK,kBADjG,CADH,GAIK,EAVV,EAWKP,KAAK,CAACC,cAAN,CAAqBC,aAArB,CAAmCM,iBAAnC,gBACG,oBAAC,cAAD;AAAgB,IAAA,SAAS,EAAG,WAA5B;AAAwC,IAAA,KAAK,EAAE;AAAEL,MAAAA,KAAK,EAAE;AAAT,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACYH,KAAK,CAACC,cAAN,CAAqBC,aAArB,CAAmCM,iBAD/C,CADH,GAIK,EAfV,CARJ,CADH,GA4BK,EA7BV,EA8BKR,KAAK,CAACS,aAAN,CAAoBC,GAApB,CAAwB,CAACC,MAAD,EAASC,KAAT,KAAmB;AACxC,UAAMC,IAAI,GAAGb,KAAK,CAACC,cAAN,CAAqBa,eAArB,CAAqCC,MAArC,CAA4CC,CAAC,IAAIA,CAAC,CAACC,kBAAF,KAAyBN,MAAM,CAACO,wBAAjF,CAAb;AAEA,wBACI,uDACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAY,MAAA,SAAS,EAAC,MAAtB;AAA6B,MAAA,GAAG,EAAEN,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AACI,MAAA,IAAI,EAAG,uBAAsBA,KAAM,EADvC;AAEI,MAAA,KAAK,EAAED,MAAM,CAACQ,iBAFlB;AAGI,MAAA,IAAI,EAAC,MAHT;AAII,MAAA,QAAQ,EAAE,IAJd;AAKI,MAAA,WAAW,EAAE,IALjB;AAMI,MAAA,KAAK,EAAEnB,KAAK,CAACC,cAAN,CAAqBmB,qBAArB,IAA8CpB,KAAK,CAACC,cAAN,CAAqBmB,qBAArB,CAA2CC,MAA3C,GAAoD,CAAlG,GACHrB,KAAK,CAACC,cAAN,CAAqBmB,qBAArB,CAA2CR,KAA3C,IAAoDZ,KAAK,CAACC,cAAN,CAAqBmB,qBAArB,CAA2CR,KAA3C,EAAkDU,OAAtG,GAAgH,EAD7G,GACkH,EAP7H,CAQI;AACA;AACA;AAVJ;AAWI,MAAA,WAAW,EAAEX,MAAM,CAACQ,iBAXxB;AAYI,MAAA,QAAQ,EAAGI,KAAD,IAAWvB,KAAK,CAACwB,oBAAN,CAA2BD,KAA3B,EAAkCX,KAAlC,EAAyCD,MAAzC,CAZzB;AAaI,MAAA,SAAS,EAAE,CAbf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,EAmBQA,MAAM,CAACc,cAAP,GAAwB,CAAxB,gBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOI,oBAAC,YAAD;AACI,MAAA,KAAK,EAAE,SADX;AAEI,MAAA,IAAI,EAAC,QAFT;AAGI,MAAA,IAAI,EAAG,uBAAsBb,KAAM,EAHvC;AAII,MAAA,QAAQ,EAAGW,KAAD,IAAWvB,KAAK,CAAC0B,gBAAN,CAAuBH,KAAvB,EAA8BZ,MAA9B,EAAsCC,KAAtC,EAA6CZ,KAAK,CAACC,cAAN,CAAqBmB,qBAAlE,EAAyFpB,KAAK,CAAC2B,UAA/F,EAA2G3B,KAAK,CAACC,cAAjH,CAJzB;AAKI,MAAA,YAAY,EAAED,KAAK,CAACC,cAAN,GAAuBD,KAAK,CAACC,cAAN,CAAqBmB,qBAArB,GAA6CpB,KAAK,CAACC,cAAN,CAAqBmB,qBAArB,CAA2CQ,cAAxF,GAAyG,KAAhI,GAAwI,KAL1J;AAMI,MAAA,WAAW,EAAE,KANjB;AAOI,MAAA,QAAQ,EAAE,IAPd;AAQI,MAAA,OAAO,EAAE5B,KAAK,CAACC,cAAN,GAAuBD,KAAK,CAACC,cAAN,CAAqBmB,qBAArB,GAA6CpB,KAAK,CAACC,cAAN,CAAqBmB,qBAArB,CAA2CQ,cAAxF,GAAyG,KAAhI,GAAwI,KARrJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,CADJ,GAoBM,EAvCd,CADJ;AA8CH,GAjDA,CA9BL,CADJ;AAqFH,CA3FD;;AA8FA,eAAe7B,sBAAf","sourcesContent":["import { faCalculator, faSave, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Col, Row, Button, Nav } from 'react-bootstrap';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nimport { MediaHeader, MediaSubHeader } from '../../components/App.styles';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\n\r\nconst ResultEntryFormulaForm = (props) => {\r\n\r\n    //      test(a,b){\r\n\r\n    //    }\r\n\r\n    return (\r\n        <Row>\r\n            {props.selectedRecord && props.selectedRecord.parameterData ?\r\n                <>\r\n                    <Col md={12}>\r\n                        <MediaHeader className={`labelfont`} style={{ color: \"#007bff\" }}>\r\n                            {props.selectedRecord ? props.selectedRecord.formulainput ? props.selectedRecord.formulainput :\"\" :\"\"}\r\n                        </MediaHeader>\r\n\r\n                    </Col>\r\n\r\n                    <Col md={12}>\r\n                        {props.selectedRecord.parameterData.sarno ?\r\n                            <MediaHeader className={`labelfont`} style={{ color: \"#172b4d\" }}>\r\n                                {props.selectedRecord.parameterData.sarno}\r\n                            </MediaHeader>\r\n                            : \"\"}\r\n                        {props.selectedRecord.parameterData.stestsynonym ?\r\n                            <MediaHeader className={`labelfont`} style={{ color: \"#505f79\" }}>\r\n                                { }{ } {props.selectedRecord.parameterData.stestsynonym} {props.selectedRecord.parameterData.sretestrepeatcount}\r\n                            </MediaHeader>\r\n                            : \"\"}\r\n                        {props.selectedRecord.parameterData.sparametersynonym ?\r\n                            <MediaSubHeader className={`labelfont`} style={{ color: \"#97a0af\" }}>\r\n                                { }{ } {props.selectedRecord.parameterData.sparametersynonym}{ }{ }\r\n                            </MediaSubHeader>\r\n                            : \"\"}\r\n                    </Col>\r\n\r\n                </>\r\n                : \"\"}\r\n            {props.DynamicFields.map((fields, index) => {\r\n                const test = props.selectedRecord.ResultParameter.filter(x => x.ntestparametercode === fields.ndynamicformulafieldcode)\r\n\r\n                return (\r\n                    <>\r\n                        <Col md=\"8\" className=\"mt-4\" key={index}>\r\n                            <FormInput\r\n                                name={`dynamicformulafield_${index}`}\r\n                                label={fields.sdynamicfieldname}\r\n                                type=\"text\"\r\n                                required={true}\r\n                                isMandatory={true}\r\n                                value={props.selectedRecord.selectedForumulaInput && props.selectedRecord.selectedForumulaInput.length > 0 ?\r\n                                    props.selectedRecord.selectedForumulaInput[index] ? props.selectedRecord.selectedForumulaInput[index].svalues : \"\" : \"\"}\r\n                                //value={test.length > 0 ?\r\n                                //     test[0].sresult : \"\" }\r\n                                //value={props.selectedRecord[\"formulainput\"] ? props.selectedRecord[\"formulainput\"][`dynamicformulafield_${index}`] : \"\"}\r\n                                placeholder={fields.sdynamicfieldname}\r\n                                onChange={(event) => props.onFormulaInputChange(event, index, fields)}\r\n                                maxLength={9}\r\n                            />\r\n                        </Col>\r\n                        {\r\n                            fields.nisaverageneed > 1 ?\r\n                                <Col md={2}>\r\n                                    {/* average_button_style d-flex product-category justify-content-end icon-group-wrap */}\r\n                                    {/* <Button className=\"btn-user btn-primary-blue average_button_style\" \r\n                         onClick={() => props.getAverageResult(fields,index,props.selectedRecord.selectedForumulaInput,props.masterData,props.selectedRecord)}\r\n                         >\r\n                            <FormattedMessage id='IDS_AVERAGE' defaultMessage='Average' />\r\n                        </Button> */}\r\n                                    <CustomSwitch\r\n                                        label={\"Average\"}\r\n                                        type=\"switch\"\r\n                                        name={`dynamicaveragefield_${index}`}\r\n                                        onChange={(event) => props.getAverageResult(event, fields, index, props.selectedRecord.selectedForumulaInput, props.masterData, props.selectedRecord)}\r\n                                        defaultValue={props.selectedRecord ? props.selectedRecord.selectedForumulaInput ? props.selectedRecord.selectedForumulaInput.senableAverage : false : false}\r\n                                        isMandatory={false}\r\n                                        required={true}\r\n                                        checked={props.selectedRecord ? props.selectedRecord.selectedForumulaInput ? props.selectedRecord.selectedForumulaInput.senableAverage : false : false}\r\n                                    />\r\n\r\n                                </Col>\r\n                                : \"\"\r\n                        }\r\n                        {/* // </Col> */}\r\n                    </>\r\n\r\n                )\r\n            }\r\n            )\r\n            }\r\n        </Row >\r\n    )\r\n}\r\n\r\n\r\nexport default ResultEntryFormulaForm;"]},"metadata":{},"sourceType":"module"}