{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\mail\\\\emailstatus\\\\EmailStatus.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../../components/data-grid/data-grid.component';\nimport { ListWrapper } from '../../../components/client-group.styles';\nimport { callService, crudMaster, validateEsignCredential, updateStore } from '../../../actions';\nimport { getControlMap, showEsign } from '../../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../../audittrail/Esign';\nimport { transactionStatus } from '../../../components/Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass EmailStatus extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        loadEsign = false;\n        openModal = false;\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.reSent = (event, operation, ncontrolcode) => {\n      const inputParam = {\n        classUrl: \"emailstatus\",\n        methodUrl: \"reSentMail\",\n        inputData: {\n          \"nrunningno\": event.nrunningno,\n          \"ncontrolcode\": ncontrolcode,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: \"create\",\n        displayName: this.props.Login.inputParam.displayName,\n        dataState: this.state.dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: \"create\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"EmailStatus\",\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.fieldList = [];\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"controlType\": \"textbox\",\n        \"idsName\": \"IDS_SUBJECT\",\n        \"dataField\": \"ssubject\",\n        \"width\": \"250px\"\n      }, {\n        \"controlType\": \"textbox\",\n        \"idsName\": \"IDS_RECIPICIENT\",\n        \"dataField\": \"srecipientusers\",\n        \"width\": \"250px\"\n      }, {\n        \"controlType\": \"textbox\",\n        \"idsName\": \"IDS_MAILSTATUS\",\n        \"dataField\": \"ssentstatus\",\n        \"width\": \"250px\"\n      }, {\n        \"controlType\": \"textbox\",\n        \"idsName\": \"IDS_SENTDATE\",\n        \"dataField\": \"stransdate\",\n        \"width\": \"250px\"\n      }];\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nrunningno\",\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList // detailedFieldList={this.detailedFieldList}\n      //expandField=\"expanded\"\n      ,\n      formatMessage: this.props.intl.formatMessage,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo //fetchRecord={this.props.fetchEmailHostById}\n      //  deleteRecord={this.deleteRecord}\n      ,\n      reloadData: this.reloadData //editParam={editParam}\n      // deleteParam={deleteParam}\n      // addRecord={() => this.props.openEmailHostModal(\"IDS_MAILHOST\", \"create\", \"nemailhostcode\", this.props.Login.masterData, this.props.Login.userInfo, addId)}\n      // isComponent={true}\n      ,\n      pageable: true,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      scrollable: \"scrollable\",\n      selectedId: this.props.Login.selectedId,\n      reSent: this.reSent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 29\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  updateStore\n})(injectIntl(EmailStatus));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/mail/emailstatus/EmailStatus.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DataGrid","ListWrapper","callService","crudMaster","validateEsignCredential","updateStore","getControlMap","showEsign","DEFAULT_RETURN","SlideOutModal","Esign","transactionStatus","mapStateToProps","state","Login","EmailStatus","Component","constructor","props","dataStateChange","event","setState","dataResult","masterData","dataState","closeModal","loadEsign","openModal","selectedRecord","updateInfo","typeName","data","selectedId","onInputOnChange","target","type","name","checked","YES","NO","value","reSent","operation","ncontrolcode","inputParam","classUrl","methodUrl","inputData","nrunningno","userInfo","displayName","esignNeeded","userRoleControlRights","nformcode","screenData","screenName","intl","formatMessage","id","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","reloadData","formRef","createRef","extractedColumnList","fieldList","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","getDerivedStateFromProps","warn","render","undefined","onSaveClick","componentDidUpdate","previousProps","Object","values","map","item","push","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../../components/data-grid/data-grid.component';\r\nimport { ListWrapper } from '../../../components/client-group.styles';\r\nimport { callService, crudMaster, validateEsignCredential, updateStore } from '../../../actions';\r\nimport { getControlMap, showEsign } from '../../../components/CommonScript';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../../audittrail/Esign';\r\nimport { transactionStatus } from '../../../components/Enumeration';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass EmailStatus extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.fieldList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n                loadEsign = false;\r\n                openModal = false;\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord,selectedId:null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.Login.inputParam !== undefined) {\r\n\r\n            this.extractedColumnList = [\r\n                { \"controlType\": \"textbox\", \"idsName\": \"IDS_SUBJECT\", \"dataField\": \"ssubject\", \"width\": \"250px\" },\r\n                { \"controlType\": \"textbox\", \"idsName\": \"IDS_RECIPICIENT\", \"dataField\": \"srecipientusers\", \"width\": \"250px\" },\r\n                { \"controlType\": \"textbox\", \"idsName\": \"IDS_MAILSTATUS\", \"dataField\": \"ssentstatus\", \"width\": \"250px\" },\r\n                { \"controlType\": \"textbox\", \"idsName\": \"IDS_SENTDATE\", \"dataField\": \"stransdate\", \"width\": \"250px\" },\r\n            ]\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={\"nrunningno\"}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                   // detailedFieldList={this.detailedFieldList}\r\n                                    //expandField=\"expanded\"\r\n                                    formatMessage={this.props.intl.formatMessage}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    //fetchRecord={this.props.fetchEmailHostById}\r\n                                  //  deleteRecord={this.deleteRecord}\r\n                                    reloadData={this.reloadData}\r\n                                    //editParam={editParam}\r\n                                   // deleteParam={deleteParam}\r\n                                   // addRecord={() => this.props.openEmailHostModal(\"IDS_MAILHOST\", \"create\", \"nemailhostcode\", this.props.Login.masterData, this.props.Login.userInfo, addId)}\r\n                                    // isComponent={true}\r\n                                    pageable={true}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    scrollable={\"scrollable\"}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    reSent={this.reSent}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>   \r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : \"\"\r\n                        }\r\n                    />\r\n                }\r\n               \r\n            </>\r\n        );\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    reSent=(event,operation,ncontrolcode)=>{\r\n        const inputParam = {\r\n            classUrl: \"emailstatus\",\r\n            methodUrl: \"reSentMail\",\r\n\r\n            inputData: {\r\n                \"nrunningno\": event.nrunningno,\r\n                \"ncontrolcode\": ncontrolcode,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: \"create\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            dataState: this.state.dataState\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: \"create\"\r\n\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        } \r\n    }\r\n\r\n   \r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"EmailStatus\",\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.inputParam.displayName\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n   \r\n\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster, validateEsignCredential, updateStore })(injectIntl(EmailStatus));"]},"metadata":{},"sourceType":"module"}