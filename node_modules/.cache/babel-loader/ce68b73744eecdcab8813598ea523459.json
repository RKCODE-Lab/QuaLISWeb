{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, getComboLabelValue, constructOptionList } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { transactionStatus, reportTypeEnum } from '../components/Enumeration';\nexport function getReportMasterComboService(inputParam) {\n  return function (dispatch) {\n    // if (inputParam.operation === \"create\" || (inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus !== transactionStatus.APPROVED))\n    // {      \n    dispatch(initRequest(true));\n    let nreportcode = null;\n\n    if (inputParam.operation === \"update\") {\n      nreportcode = inputParam.mastertoedit[inputParam.primaryKeyName];\n    }\n\n    return rsapi.post(\"reportconfig/getReportMasterComboData\", {\n      nreportcode,\n      userinfo: inputParam.userInfo,\n      filterreporttype: inputParam.filterReportType\n    }).then(response => {\n      const reportTypeMap = constructOptionList(response.data[\"ReportType\"] || [], \"nreporttypecode\", \"sdisplayname\", undefined, undefined, true);\n      const reportModuleMap = constructOptionList(response.data[\"ReportModule\"] || [], \"nreportmodulecode\", \"sdisplayname\", undefined, undefined, true);\n      const reportSubTypeMap = constructOptionList(response.data[\"COAReportType\"] || [], \"ncoareporttypecode\", \"scoareporttypename\", undefined, undefined, true);\n      const sampleTypeMap = constructOptionList(response.data[\"SampleType\"] || [], \"nsampletypecode\", \"ssampletypename\", undefined, undefined, true);\n      const regTypeMap = constructOptionList(response.data[\"RegistrationType\"] || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, true);\n      const regSubTypeMap = constructOptionList(response.data[\"RegistrationSubType\"] || [], \"nregsubtypecode\", \"sregsubtypename\", undefined, undefined, true);\n      const approvaConfigVersionMap = constructOptionList(response.data[\"ApprovalConfigVersion\"] || [], \"napproveconfversioncode\", \"sversionname\", undefined, undefined, false);\n      const sectionMap = constructOptionList(response.data[\"SectionList\"] || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n      const decisionTypeMap = constructOptionList(response.data[\"ReportDecisionType\"] || [], \"nreportdecisiontypecode\", \"sdecisiontypename\", undefined, undefined, true);\n      const certificateTypeMap = constructOptionList(response.data[\"CertificateType\"] || [], \"ncertificatetypecode\", \"scertificatetype\", undefined, undefined, true);\n      const controlScreenTypeMap = constructOptionList(response.data[\"ControlScreen\"] || [], \"nformcode\", \"sdisplayname\", undefined, undefined, true);\n      const reportTypeList = reportTypeMap.get(\"OptionList\");\n      const reportModuleList = reportModuleMap.get(\"OptionList\");\n      const reportSubTypeList = reportSubTypeMap.get(\"OptionList\");\n      const regTypeList = regTypeMap.get(\"OptionList\");\n      const sampleTypeList = sampleTypeMap.get(\"OptionList\");\n      const regSubTypeList = regSubTypeMap.get(\"OptionList\");\n      const sectionList = sectionMap.get(\"OptionList\");\n      const decisionTypeList = decisionTypeMap.get(\"OptionList\");\n      const certificateTypeList = certificateTypeMap.get(\"OptionList\");\n      const controlScreenTypeList = controlScreenTypeMap.get(\"OptionList\");\n      const ApproveConfigList = approvaConfigVersionMap.get(\"OptionList\");\n      let selectedRecord = {\n        ntransactionstatus: transactionStatus.ACTIVE\n      };\n      let respObject = {\n        \"reportVersionStatus\": transactionStatus.DRAFT\n      };\n\n      if (inputParam.operation === \"update\") {\n        if (response.status === 202) {\n          respObject[\"reportVersionStatus\"] = transactionStatus.APPROVED;\n          respObject[\"ApprovedReportMaster\"] = response.data[\"SelectedReportDesigner\"];\n        }\n\n        selectedRecord = JSON.parse(JSON.stringify(response.data[\"SelectedReportDesigner\"]));\n\n        if (selectedRecord.nreporttypecode === reportTypeEnum.SAMPLE || selectedRecord.nreporttypecode === reportTypeEnum.COA) {\n          selectedRecord[\"nsampletypecode\"] = {\n            value: response.data[\"SelectedReportDesigner\"].nsampletypecode,\n            label: response.data[\"SelectedReportDesigner\"].ssampletypename\n          }; // selectedRecord[\"nregtypecode\"] = {\n          //     value: response.data[\"SelectedReportDesigner\"].nregtypecode,\n          //     label: response.data[\"SelectedReportDesigner\"].sregtypename\n          // };\n\n          if (response.data[\"SelectedReportDesigner\"].nregtypecode !== -1) {\n            selectedRecord[\"nregtypecode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].nregtypecode,\n              label: response.data[\"SelectedReportDesigner\"].sregtypename\n            };\n          } else {\n            selectedRecord[\"nregtypecode\"] = undefined;\n          }\n\n          if (response.data[\"SelectedReportDesigner\"].nregsubtypecode !== -1) {\n            selectedRecord[\"nregsubtypecode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].nregsubtypecode,\n              label: response.data[\"SelectedReportDesigner\"].sregsubtypename\n            };\n          } else {\n            selectedRecord[\"nregsubtypecode\"] = undefined;\n          }\n\n          if (response.data[\"SelectedReportDesigner\"].nregsubtypecode !== -1) {\n            selectedRecord[\"napproveconfversioncode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].napproveconfversioncode,\n              label: response.data[\"SelectedReportDesigner\"].sapproveversionname\n            };\n          } else {\n            selectedRecord[\"nregsubtypecode\"] = undefined;\n          }\n\n          if (response.data[\"SelectedReportDesigner\"].nsectioncode !== -1) {\n            selectedRecord[\"nsectioncode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].nsectioncode,\n              label: response.data[\"SelectedReportDesigner\"].ssectionname\n            };\n          } else {\n            selectedRecord[\"nsectioncode\"] = undefined;\n          }\n\n          if (response.data[\"SelectedReportDesigner\"].ncoareporttypecode !== -1) {\n            selectedRecord[\"ncoareporttypecode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].ncoareporttypecode,\n              label: response.data[\"SelectedReportDesigner\"].scoareporttypename\n            };\n          } else {\n            selectedRecord[\"ncoareporttypecode\"] = undefined;\n          }\n\n          if (selectedRecord.nreporttypecode === reportTypeEnum.SAMPLE) {\n            selectedRecord[\"nreportdecisiontypecode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].nreportdecisiontypecode,\n              label: response.data[\"SelectedReportDesigner\"].sdecisiontypename\n            };\n          }\n        } else if (selectedRecord.nreporttypecode === reportTypeEnum.MIS) {\n          selectedRecord[\"nreportmodulecode\"] = {\n            value: response.data[\"SelectedReportDesigner\"].nreportmodulecode,\n            label: response.data[\"SelectedReportDesigner\"].smoduledisplayname\n          };\n          selectedRecord[\"nreportmodule\"] = {\n            value: response.data[\"SelectedReportDesigner\"].smoduledisplayname,\n            label: response.data[\"SelectedReportDesigner\"].smoduledisplayname\n          };\n        } else if (selectedRecord.nreporttypecode === reportTypeEnum.SCREENWISE) {\n          selectedRecord[\"ncontrolcode\"] = {\n            value: response.data[\"SelectedReportDesigner\"].ncontrolcode,\n            label: response.data[\"SelectedReportDesigner\"].scontrolids\n          };\n          selectedRecord[\"nformcode\"] = {\n            value: response.data[\"SelectedReportDesigner\"].nformcode,\n            label: response.data[\"SelectedReportDesigner\"].sdisplayname\n          };\n        }\n\n        if (selectedRecord.nreporttypecode === reportTypeEnum.SAMPLE || selectedRecord.nreporttypecode === reportTypeEnum.BATCH) {\n          if (response.data[\"SelectedReportDesigner\"].ncoareporttypecode !== -1) {\n            selectedRecord[\"ncoareporttypecode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].ncoareporttypecode,\n              label: response.data[\"SelectedReportDesigner\"].scoareporttypename\n            };\n          } else {\n            selectedRecord[\"ncoareporttypecode\"] = undefined;\n          }\n\n          selectedRecord[\"ncertificatetypecode\"] = {\n            value: response.data[\"SelectedReportDesigner\"].ncertificatetypecode,\n            label: response.data[\"SelectedReportDesigner\"].scertificatetype\n          };\n          selectedRecord[\"sbatchtypename\"] = response.data[\"SelectedReportDesigner\"].sbatchtypename;\n        }\n\n        selectedRecord[\"ntransactionstatus\"] = response.data[\"SelectedReportDesigner\"].ntransactionstatus;\n        selectedRecord[\"nreporttypecode\"] = {\n          item: response.data[\"SelectedReportDesigner\"],\n          value: response.data[\"SelectedReportDesigner\"].nreporttypecode,\n          label: response.data[\"SelectedReportDesigner\"].sreportdisplayname\n        };\n      }\n\n      respObject = { ...respObject,\n        reportSubTypeList,\n        //:response.data[\"COAReportType\"]  || [], \n        sampleTypeList,\n        regTypeList,\n        //:response.data[\"RegistrationType\"]  || [],                                                               \n        regSubTypeList,\n        //:response.data[\"RegistrationSubType\"]  || [],  \n        sectionList,\n        ApproveConfigList,\n        //:response.data[\"SectionList\"] || [],   \n        certificateTypeList,\n        reportDecisionTypeList: decisionTypeList,\n        controlScreen: controlScreenTypeList //masterData:{...inputParam.masterData, SelectedFilterReportType:response.data[\"SelectedReportType\"] }                                                             \n\n      };\n\n      if (inputParam.operation === \"create\") {\n        selectedRecord[\"nreporttypecode\"] = {\n          item: response.data[\"SelectedReportType\"],\n          label: response.data[\"SelectedReportType\"].sdisplayname,\n          value: response.data[\"SelectedReportType\"].nreporttypecode\n        };\n\n        if (selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE && selectedRecord[\"nreporttypecode\"]['item'].isneedregtype === transactionStatus.YES) {\n          // selectedRecord[\"nregtypecode\"] = getComboLabelValue(response.data[\"SelectedRegType\"],\n          //     response.data[\"RegistrationType\"], \"nregtypecode\", \"sregtypename\")\n          selectedRecord[\"nsampletypecode\"] = getComboLabelValue(response.data[\"SelectedSampleType\"], response.data[\"SampleType\"], \"nsampletypecode\", \"ssampletypename\");\n\n          if (selectedRecord[\"nreporttypecode\"]['item'].isneedsection === transactionStatus.YES) {\n            selectedRecord[\"nsectioncode\"] = sectionMap.get(\"DefaultValue\");\n          }\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          reportTypeList,\n          //:response.data[\"ReportType\"] || [], \n          reportModuleList,\n          //:response.data[\"ReportModule\"] || [] ,\n          ...respObject,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          selectedRecord,\n          openModal: true,\n          ncontrolCode: inputParam.ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); // }\n    // else{       \n    //     toast.warn(intl.formatMessage({id: \"IDS_CANNOTUPDATEAPPROVEDREPORT\"}));\n    // }\n  };\n}\nexport function getReportDetailComboService(inputParam) {\n  return function (dispatch) {\n    if (inputParam.operation === \"create\" || inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus === transactionStatus.DRAFT) {\n      if (inputParam.masterData.SelectedReportMaster !== null) {\n        dispatch(initRequest(true));\n        let nreportdetailcode = null;\n\n        if (inputParam.operation === \"update\") {\n          nreportdetailcode = inputParam.detailtoedit[inputParam.primaryKeyName];\n        }\n\n        return rsapi.post(\"reportconfig/getReportDetailComboData\", {\n          nreportdetailcode,\n          reportmaster: inputParam.masterData.SelectedReportMaster,\n          userinfo: inputParam.userInfo\n        }).then(response => {\n          // const reportType = response.data[\"SelectedReportType\"];\n          // const reportSubTypeMap  = constructOptionList(response.data[\"COAReportType\"] ||[], \"ncoareporttypecode\",\n          //                             \"scoareporttypename\" , undefined, undefined, true);    \n          // const sectionMap  = constructOptionList(response.data[\"SectionList\"] ||[], \"nsectioncode\",\n          //                             \"ssectionname\", undefined, undefined, true);\n          // const decisionTypeMap  = constructOptionList(response.data[\"ReportDecisionType\"] ||[], \"nreportdecisiontypecode\",\n          //                             \"sdecisiontypename\" , undefined, undefined, true);   \n          // const certificateTypeMap  = constructOptionList(response.data[\"CertificateType\"] ||[], \"ncertificatetypecode\",\n          //                             \"scertificatetype\" , undefined, undefined, true);\n          // const  reportSubTypeList = reportSubTypeMap.get(\"OptionList\");\n          // const  sectionList = sectionMap.get(\"OptionList\"); \n          // const  decisionTypeList = decisionTypeMap.get(\"OptionList\");\n          // const  certificateTypeList = certificateTypeMap.get(\"OptionList\");  \n          let selectedRecord = {};\n          let respObject = {};\n\n          if (inputParam.operation === \"update\") {\n            selectedRecord = response.data[\"SelectedReportDetail\"];\n          }\n\n          selectedRecord[\"ntransactionstatus\"] = transactionStatus.DRAFT; //    console.log(\"selected in action:\", selectedRecord);\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...respObject,\n              operation: inputParam.operation,\n              screenName: inputParam.screenName,\n              selectedRecord,\n              openModal: true,\n              ncontrolCode: inputParam.ncontrolcode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_REPORTNOTFOUND\"\n        }));\n      }\n    } else if (inputParam.operation === \"create\" || inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus === transactionStatus.APPROVED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_CANNOTEDITAPPROVEDREPORT\"\n      }));\n    } else if (inputParam.operation === \"create\" || inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_CANNOTEDITRETIREDREPORT\"\n      }));\n    }\n  };\n}\nexport function getSelectedReportMasterDetail(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getReportDesigner\", {\n      nreportcode: parseInt(inputParam.nreportcode),\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      const masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSelectedReportDetail(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getReportDetail\", {\n      nreportdetailcode: parseInt(inputParam.nreportdetailcode),\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      const masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getConfigReportComboService(inputParam) {\n  return function (dispatch) {\n    if (inputParam.reportMaster.nreporttypecode === reportTypeEnum.MIS) {\n      if (inputParam.reportDetail.ntransactionstatus === transactionStatus.DRAFT) {\n        dispatch(initRequest(true));\n        return rsapi.post(\"reportconfig/getReportAddDesignComboData\", {\n          nreportdetailcode: parseInt(inputParam.reportDetail.nreportdetailcode),\n          userinfo: inputParam.userInfo\n        }).then(response => {\n          const parameterMap = constructOptionList(response.data[\"ReportParameter\"] || [], \"nreportparametercode\", \"sreportparametername\", undefined, undefined, true);\n          const reportParameterList = parameterMap.get(\"OptionList\");\n          const designComponentMap = constructOptionList(response.data[\"DesignComponents\"] || [], \"ndesigncomponentcode\", \"sdesigncomponentname\", undefined, undefined, true);\n          const designComponentList = designComponentMap.get(\"OptionList\");\n          const sqlQueryMap = constructOptionList(response.data[\"SQLQuery\"] || [], \"nsqlquerycode\", \"ssqlqueryname\", undefined, undefined, true);\n          const sqlQueryList = sqlQueryMap.get(\"OptionList\");\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              reportParameterList,\n              //:response.data[\"ReportParameter\"] || [], \n              designComponentList,\n              //:response.data[\"DesignComponents\"] || [],\n              sqlQueryList,\n              //:response.data[\"SQLQuery\"] || [], \n              operation: inputParam.operation,\n              screenName: inputParam.screenName,\n              //selectedRecord:{nmandatory:transactionStatus.YES}, \n              selectedRecord: {},\n              openModal: true,\n              ncontrolCode: inputParam.ncontrolCode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_CANNOTCONFIGUREAPPROVEDREPORT\"\n        }));\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_CANCONFIGUREMISREPORT\"\n      }));\n    }\n  };\n}\nexport function getParameterMappingComboService(inputParam) {\n  return function (dispatch) {\n    if (inputParam.reportMaster.nreporttypecode === reportTypeEnum.MIS) {\n      if (inputParam.reportDetail.ntransactionstatus === transactionStatus.DRAFT) {\n        dispatch(initRequest(true));\n        return rsapi.post(\"reportconfig/getReportParameterMappingComboData\", {\n          nreportdetailcode: parseInt(inputParam.reportDetail.nreportdetailcode),\n          userinfo: inputParam.userInfo\n        }).then(response => {\n          if (response.data[\"ChildComponentList\"].length > 0) {\n            const parentComponentMap = constructOptionList(response.data[\"ParentComponentList\"] || [], \"nreportdesigncode\", \"sdisplayname\", undefined, undefined, true);\n            const parentComponentList = parentComponentMap.get(\"OptionList\");\n            const childComponentMap = constructOptionList(response.data[\"ChildComponentList\"] || [], \"nreportdesigncode\", \"sdisplayname\", undefined, undefined, true);\n            const childComponentList = childComponentMap.get(\"OptionList\");\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                parentComponentList,\n                //:response.data[\"ParentComponenList\"] || [],\n                childComponentList,\n                //:response.data[\"ChildComponentList\"] || [], \n                operation: inputParam.operation,\n                screenName: inputParam.screenName,\n                selectedRecord: {},\n                openModal: true,\n                ncontrolCode: inputParam.ncontrolCode,\n                loading: false\n              }\n            });\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false\n              }\n            });\n            toast.warn(intl.formatMessage({\n              id: \"IDS_NOPARAMETERSTOMAP\"\n            }));\n          }\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_CANNOTMAPAPPROVEDREPORT\"\n        }));\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_CANMAPMISREPORT\"\n      }));\n    }\n  };\n}\nexport function viewReportDetail(reportmaster, userInfo, masterData) {\n  return function (dispatch) {\n    if (reportmaster !== undefined) {\n      dispatch(initRequest(true));\n      return rsapi.post(\"reportview/viewReport\", {\n        reportmaster,\n        userinfo: userInfo\n      }).then(response => {\n        // console.log(\"report action:\", response);\n        masterData = { ...masterData,\n          ...response.data\n        };\n\n        if (response.data[\"ViewReportDesignConfig\"] !== undefined) {\n          masterData[\"ReportPDFFile\"] = undefined;\n        } // else{\n        //     document.getElementById(\"download_data\").setAttribute(\"href\", masterData[\"ReportPDFFile\"]);\n        //     document.getElementById(\"download_data\").click();\n        // }\n\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_REPORTNOTFOUND\"\n      }));\n    }\n  };\n} // export function getActionMappingComboService(inputParam) {\n//     return function (dispatch) {   \n//     if (inputParam.reportDetail.ntransactionstatus === transactionStatus.DRAFT){\n//             dispatch(initRequest(true));\n//             return rsapi.post(\"reportconfig/getActionMappingComboData\", {nreportdetailcode:parseInt(inputParam.reportDetail.nreportdetailcode),\n//                                         userinfo:inputParam.userInfo})\n//         .then(response=>{ \n//             if (response.data[\"ActionMappingChild\"].length > 0)\n//             {     \n//                     dispatch({type: DEFAULT_RETURN, payload:{actionMappingParentList:response.data[\"ActionMappingParent\"] || [],\n//                                                             actionMappingChildList:response.data[\"ActionMappingChild\"] || [], \n//                                                             operation:inputParam.operation, \n//                                                             screenName:inputParam.screenName,   \n//                                                             selectedRecord:{}, \n//                                                             openModal : true,\n//                                                             ncontrolCode:inputParam.ncontrolCode,\n//                                                             loading:false\n//                                                             }}); \n//             }\n//             else{\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\n//                 toast.warn(intl.formatMessage({id:\"IDS_NOACTIONSTOMAP\"}))\n//             }\n//         })\n//         .catch(error=>{\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\n//             if (error.response.status === 500){\n//                 toast.error(error.message);\n//             } \n//             else{               \n//                 toast.warn(error.response.data);\n//             }  \n//         })\n//     }\n//     else{\n//         toast.warn(intl.formatMessage({id:\"IDS_CANNOTACTIONMAPAPPROVEDREPORT\"}))\n//     }\n// }}\n\nexport function getReportViewChildDataList(inputParam) {\n  return function (dispatch) {\n    // dispatch(initRequest(true));\n    return rsapi.post(\"reportview/getChildDataList\", { ...inputParam[\"inputData\"]\n    }).then(response => {\n      const controlList = inputParam.viewReportDesignConfigList;\n      const selectedRecord = inputParam.selectedRecord;\n      Object.keys(response.data).map(displayName => {\n        const index = controlList.findIndex(item => displayName === item.sdisplayname);\n        const comboMap = constructOptionList(response.data[displayName] || [], controlList[index].svaluemember, controlList[index].sdisplaymember, undefined, undefined, true);\n        const comboList = comboMap.get(\"OptionList\");\n        selectedRecord[controlList[index].svaluemember] = undefined;\n        return controlList[index][\"dataList\"] = comboList; //response.data[displayName]\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          viewReportDesignConfigList: controlList,\n          loading: false,\n          inputFieldData: inputParam.inputData.inputfielddata,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function viewReportDetailWithParameters(viewReportParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportview/viewReportWithParameters\", { ...viewReportParam\n    }).then(response => {\n      const masterData = { ...viewReportParam.masterData,\n        ...response.data,\n        ReportPDFFile: response.data[\"ReportPDFFile\"],\n        SelectedReportDetails: response.data[\"SelectedReportDetails\"],\n        ReportPDFPath: response.data[\"ReportPDFPath\"],\n        ViewReportDesignConfig: undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false //openModal:false\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportsByModule(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportview/getReportView\", {\n      nreportmodulecode: inputParam.nreportmodulecode,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      const masterData = { ...inputParam.masterData,\n        ...response.data\n      }; // const  reportModuleMap  = constructOptionList(masterData.ViewReportModuleList ||[], \"nreportmodulecode\",\n      //                          \"smoduledisplayname\" , undefined, undefined, true);\n      // const  reportModuleList  = reportModuleMap.get(\"OptionList\");\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          //viewReportModuleList:reportModuleList,\n          operation: null,\n          modalName: undefined,\n          loading: false,\n          selectedRecord: inputParam.selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getControlButton(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getControlButton\", {\n      nformcode: inputParam.ControlScreen.nformcode,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      const controlButtonMap = constructOptionList(response.data || [], \"ncontrolcode\", \"scontrolids\", undefined, undefined, true);\n      const controlButtonList = controlButtonMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          controlButton: controlButtonList,\n          //: response.data,                                            \n          loading: false,\n          selectedRecord: { ...inputParam.selectedRecord,\n            nregsubtypecode: undefined //nregsubtypecode:{label:\"Please Select...\", value:-4}\n\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportRegSubType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getReportRegistrationSubType\", {\n      nregtypecode: inputParam.registrationType.nregtypecode,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      const regSubTypeMap = constructOptionList(response.data || [], \"nregsubtypecode\", \"sregsubtypename\", undefined, undefined, true);\n      const regSubTypeList = regSubTypeMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          regSubTypeList,\n          //: response.data,                                            \n          loading: false,\n          ApproveConfigList: [],\n          selectedRecord: { ...inputParam.selectedRecord,\n            nregsubtypecode: undefined,\n            napproveconfversioncode: undefined //nregsubtypecode:{label:\"Please Select...\", value:-4}\n\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportSubType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getReportSubType\", {\n      nreporttypecode: inputParam.reportType.nreporttypecode,\n      nreporttypecode: inputParam.reportType.nreporttypecode,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      // const reportSubTypeMap = constructOptionList(response.data.COAReportType || [], \"ncoareporttypecode\",\n      //     \"scoareporttypename\", undefined, undefined, true);\n      // const reportSubTypeList = reportSubTypeMap.get(\"OptionList\");\n      const certificateTypeMap = constructOptionList(response.data.CertificateType || [], \"ncertificatetypecode\", \"scertificatetype\", undefined, undefined, true);\n      const certificateTypeList = certificateTypeMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // reportSubTypeList,\n          certificateTypeList,\n          loading: false,\n          selectedRecord: { ...inputParam.selectedRecord,\n            ncoareporttypecode: undefined,\n            ncertificatetypecode: \"\" // ncoareporttypecode:{label:\"Please Select...\", value:-4}\n\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportSampletype(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getReportSampleType\", {\n      nsampletypecode: inputParam.nsampletypecode,\n      nreporttypecode: inputParam.reportType.nreporttypecode,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      // const reportRegTypeMap  = constructOptionList(response.data.Regtype ||[], \"nregtypecode\",\n      //                          \"sregtypename\" , undefined, undefined, true);   \n      // const  reportRegTypeList = reportRegTypeMap.get(\"OptionList\");\n      // // const reportRegSubTypeMap  = constructOptionList(response.data.RegSubtype ||[], \"nregsubtypecode\",\n      // // \"sregsubtypename\" , undefined, undefined, true);   \n      // //   const  reportRegSubTypeList = reportRegSubTypeMap.get(\"OptionList\");\n      const sampleTypeMap = constructOptionList(response.data[\"SampleType\"] || [], \"nsampletypecode\", \"ssampletypename\", undefined, undefined, true);\n      const sampleTypeList = sampleTypeMap.get(\"OptionList\");\n      const regTypeMap = constructOptionList(response.data[\"RegistrationType\"] || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, true);\n      const regTypeList = regTypeMap.get(\"OptionList\"); // const regSubTypeMap = constructOptionList(response.data[\"RegistrationSubType\"] || [], \"nregsubtypecode\",\n      //     \"sregsubtypename\", undefined, undefined, true);\n      // const regSubTypeList = regSubTypeMap.get(\"OptionList\");\n\n      const coaReportTypeMap = constructOptionList(response.data.COAReportType || [], \"ncoareporttypecode\", \"scoareporttypename\", undefined, undefined, true);\n      const reportSubTypeList = coaReportTypeMap.get(\"OptionList\");\n      const certificateType = constructOptionList(response.data.CertificateType || [], \"ncertificatetypecode\", \"scertificatetype\", undefined, undefined, true);\n      const certificateTypeList = certificateType.get(\"OptionList\");\n      const nsampletypecode = getComboLabelValue(response.data[\"SelectedSampleType\"], response.data[\"SampleType\"], \"nsampletypecode\", \"ssampletypename\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          sampleTypeList,\n          regTypeList,\n          //  regSubTypeList,\n          reportSubTypeList,\n          loading: false,\n          certificateTypeList,\n          selectedRecord: { ...inputParam.selectedRecord,\n            nsampletypecode: nsampletypecode,\n            nregtypecode: undefined,\n            ncoareporttypecode: undefined,\n            ncertificatetypecode: \"\"\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getregtype(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getRegistrationtypeForSample\", {\n      nsampletypecode: inputParam.sampleType.nsampletypecode,\n      nregtypecode: inputParam.nregtypecode,\n      nreporttypecode: inputParam.selectedRecord.nreporttypecode.value,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      // const reportRegTypeMap  = constructOptionList(response.data.Regtype ||[], \"nregtypecode\",\n      //                          \"sregtypename\" , undefined, undefined, true);   \n      // const  reportRegTypeList = reportRegTypeMap.get(\"OptionList\");\n      // // const reportRegSubTypeMap  = constructOptionList(response.data.RegSubtype ||[], \"nregsubtypecode\",\n      // // \"sregsubtypename\" , undefined, undefined, true);   \n      // //   const  reportRegSubTypeList = reportRegSubTypeMap.get(\"OptionList\");\n      // const sampleTypeMap = constructOptionList(response.data[\"SampleType\"] || [], \"nsampletypecode\",\n      // \"ssampletypename\", undefined, undefined, true);\n      // const sampleTypeList = sampleTypeMap.get(\"OptionList\");\n      const regTypeMap = constructOptionList(response.data[\"RegistrationType\"] || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, true);\n      const regTypeList = regTypeMap.get(\"OptionList\"); // const regSubTypeMap = constructOptionList(response.data[\"RegistrationSubType\"] || [], \"nregsubtypecode\",\n      //     \"sregsubtypename\", undefined, undefined, true);\n      // const regSubTypeList = regSubTypeMap.get(\"OptionList\");\n\n      const coaReportTypeMap = constructOptionList(response.data.COAReportType || [], \"ncoareporttypecode\", \"scoareporttypename\", undefined, undefined, true);\n      const reportSubTypeList = coaReportTypeMap.get(\"OptionList\");\n      const certificateType = constructOptionList(response.data.CertificateType || [], \"ncertificatetypecode\", \"scertificatetype\", undefined, undefined, true);\n      const certificateTypeList = certificateType.get(\"OptionList\"); //    const nregtypecode = getComboLabelValue(response.data[\"SelectedRegType\"],\n      //      response.data[\"RegistrationType\"], \"nregtypecode\", \"sregtypename\")\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          //   sampleTypeList,\n          regTypeList,\n          regSubTypeList: [],\n          ApproveConfigList: [],\n          reportSubTypeList,\n          loading: false,\n          certificateTypeList,\n          selectedRecord: { ...inputParam.selectedRecord,\n            nregtypecode: undefined,\n            nregsubtypecode: undefined,\n            ncoareporttypecode: undefined,\n            ncertificatetypecode: \"\",\n            napproveconfversioncode: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportRegSubTypeApproveConfigVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getReportRegSubTypeApproveConfigVersion\", {\n      nregtypecode: inputParam.selectedRecord.nregtypecode.value,\n      nregsubtypecode: inputParam.registrationsubType.nregsubtypecode,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      const ApproveConfigVersionMap = constructOptionList(response.data || [], \"napproveconfversioncode\", \"sversionname\", undefined, undefined, false);\n      const ApproveConfigList = ApproveConfigVersionMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ApproveConfigList,\n          //: response.data,                                            \n          loading: false,\n          selectedRecord: { ...inputParam.selectedRecord,\n            napproveconfversioncode: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ReportDesignerAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","getComboLabelValue","constructOptionList","toast","initRequest","intl","transactionStatus","reportTypeEnum","getReportMasterComboService","inputParam","dispatch","nreportcode","operation","mastertoedit","primaryKeyName","post","userinfo","userInfo","filterreporttype","filterReportType","then","response","reportTypeMap","data","undefined","reportModuleMap","reportSubTypeMap","sampleTypeMap","regTypeMap","regSubTypeMap","approvaConfigVersionMap","sectionMap","decisionTypeMap","certificateTypeMap","controlScreenTypeMap","reportTypeList","get","reportModuleList","reportSubTypeList","regTypeList","sampleTypeList","regSubTypeList","sectionList","decisionTypeList","certificateTypeList","controlScreenTypeList","ApproveConfigList","selectedRecord","ntransactionstatus","ACTIVE","respObject","DRAFT","status","APPROVED","JSON","parse","stringify","nreporttypecode","SAMPLE","COA","value","nsampletypecode","label","ssampletypename","nregtypecode","sregtypename","nregsubtypecode","sregsubtypename","napproveconfversioncode","sapproveversionname","nsectioncode","ssectionname","ncoareporttypecode","scoareporttypename","nreportdecisiontypecode","sdecisiontypename","MIS","nreportmodulecode","smoduledisplayname","SCREENWISE","ncontrolcode","scontrolids","nformcode","sdisplayname","BATCH","ncertificatetypecode","scertificatetype","sbatchtypename","item","sreportdisplayname","reportDecisionTypeList","controlScreen","isneedregtype","YES","isneedsection","type","payload","screenName","openModal","ncontrolCode","loading","catch","error","message","warn","getReportDetailComboService","detailtoedit","masterData","SelectedReportMaster","nreportdetailcode","reportmaster","formatMessage","id","RETIRED","getSelectedReportMasterDetail","parseInt","modalName","getSelectedReportDetail","getConfigReportComboService","reportMaster","reportDetail","parameterMap","reportParameterList","designComponentMap","designComponentList","sqlQueryMap","sqlQueryList","getParameterMappingComboService","length","parentComponentMap","parentComponentList","childComponentMap","childComponentList","viewReportDetail","getReportViewChildDataList","controlList","viewReportDesignConfigList","Object","keys","map","displayName","index","findIndex","comboMap","svaluemember","sdisplaymember","comboList","inputFieldData","inputData","inputfielddata","viewReportDetailWithParameters","viewReportParam","ReportPDFFile","SelectedReportDetails","ReportPDFPath","ViewReportDesignConfig","getReportsByModule","getControlButton","ControlScreen","controlButtonMap","controlButtonList","controlButton","getReportRegSubType","registrationType","getReportSubType","reportType","CertificateType","getReportSampletype","coaReportTypeMap","COAReportType","certificateType","getregtype","sampleType","getReportRegSubTypeApproveConfigVersion","registrationsubType","ApproveConfigVersionMap"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { sortData, getComboLabelValue, constructOptionList } from '../components/CommonScript';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { transactionStatus, reportTypeEnum } from '../components/Enumeration';\r\n\r\nexport function getReportMasterComboService(inputParam) {\r\n    return function (dispatch) {\r\n        // if (inputParam.operation === \"create\" || (inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus !== transactionStatus.APPROVED))\r\n        // {      \r\n        dispatch(initRequest(true));\r\n        let nreportcode = null;\r\n        if (inputParam.operation === \"update\") {\r\n            nreportcode = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n        }\r\n        return rsapi.post(\"reportconfig/getReportMasterComboData\", {\r\n            nreportcode,\r\n            userinfo: inputParam.userInfo,\r\n            filterreporttype: inputParam.filterReportType\r\n        })\r\n            .then(response => {\r\n\r\n                const reportTypeMap = constructOptionList(response.data[\"ReportType\"] || [], \"nreporttypecode\",\r\n                    \"sdisplayname\", undefined, undefined, true);\r\n                const reportModuleMap = constructOptionList(response.data[\"ReportModule\"] || [], \"nreportmodulecode\",\r\n                    \"sdisplayname\", undefined, undefined, true);\r\n                const reportSubTypeMap = constructOptionList(response.data[\"COAReportType\"] || [], \"ncoareporttypecode\",\r\n                    \"scoareporttypename\", undefined, undefined, true);\r\n                const sampleTypeMap = constructOptionList(response.data[\"SampleType\"] || [], \"nsampletypecode\",\r\n                    \"ssampletypename\", undefined, undefined, true);\r\n                const regTypeMap = constructOptionList(response.data[\"RegistrationType\"] || [], \"nregtypecode\",\r\n                    \"sregtypename\", undefined, undefined, true);                \r\n                const regSubTypeMap = constructOptionList(response.data[\"RegistrationSubType\"] || [], \"nregsubtypecode\",\r\n                    \"sregsubtypename\", undefined, undefined, true);\r\n                 const approvaConfigVersionMap = constructOptionList(response.data[\"ApprovalConfigVersion\"] || [], \"napproveconfversioncode\",\r\n                    \"sversionname\", undefined, undefined, false);\r\n                const sectionMap = constructOptionList(response.data[\"SectionList\"] || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, true);\r\n                const decisionTypeMap = constructOptionList(response.data[\"ReportDecisionType\"] || [], \"nreportdecisiontypecode\",\r\n                    \"sdecisiontypename\", undefined, undefined, true);\r\n                const certificateTypeMap = constructOptionList(response.data[\"CertificateType\"] || [], \"ncertificatetypecode\",\r\n                    \"scertificatetype\", undefined, undefined, true);\r\n                const controlScreenTypeMap = constructOptionList(response.data[\"ControlScreen\"] || [], \"nformcode\",\r\n                    \"sdisplayname\", undefined, undefined, true);\r\n\r\n                const reportTypeList = reportTypeMap.get(\"OptionList\");\r\n                const reportModuleList = reportModuleMap.get(\"OptionList\");\r\n                const reportSubTypeList = reportSubTypeMap.get(\"OptionList\");\r\n                const regTypeList = regTypeMap.get(\"OptionList\");\r\n                const sampleTypeList = sampleTypeMap.get(\"OptionList\");\r\n                const regSubTypeList = regSubTypeMap.get(\"OptionList\");\r\n                const sectionList = sectionMap.get(\"OptionList\");\r\n                const decisionTypeList = decisionTypeMap.get(\"OptionList\");\r\n                const certificateTypeList = certificateTypeMap.get(\"OptionList\");\r\n                const controlScreenTypeList = controlScreenTypeMap.get(\"OptionList\");\r\n               const  ApproveConfigList=approvaConfigVersionMap.get(\"OptionList\");\r\n\r\n                let selectedRecord = { ntransactionstatus: transactionStatus.ACTIVE };\r\n                let respObject = { \"reportVersionStatus\": transactionStatus.DRAFT };\r\n\r\n                if (inputParam.operation === \"update\") {\r\n                    if (response.status === 202) {\r\n                        respObject[\"reportVersionStatus\"] = transactionStatus.APPROVED;\r\n                        respObject[\"ApprovedReportMaster\"] = response.data[\"SelectedReportDesigner\"];\r\n                    }\r\n                    selectedRecord = JSON.parse(JSON.stringify(response.data[\"SelectedReportDesigner\"]));\r\n                    if (selectedRecord.nreporttypecode === reportTypeEnum.SAMPLE\r\n                        || selectedRecord.nreporttypecode === reportTypeEnum.COA) {\r\n                            selectedRecord[\"nsampletypecode\"] = {\r\n                                value: response.data[\"SelectedReportDesigner\"].nsampletypecode,\r\n                                label: response.data[\"SelectedReportDesigner\"].ssampletypename\r\n                            };\r\n                        // selectedRecord[\"nregtypecode\"] = {\r\n                        //     value: response.data[\"SelectedReportDesigner\"].nregtypecode,\r\n                        //     label: response.data[\"SelectedReportDesigner\"].sregtypename\r\n                        // };\r\n                        if (response.data[\"SelectedReportDesigner\"].nregtypecode !== -1) {\r\n                            selectedRecord[\"nregtypecode\"] = {\r\n                                value: response.data[\"SelectedReportDesigner\"].nregtypecode,\r\n                                label: response.data[\"SelectedReportDesigner\"].sregtypename\r\n                            };\r\n                        }\r\n                        else {\r\n                            selectedRecord[\"nregtypecode\"] = undefined;\r\n                        }\r\n                        if (response.data[\"SelectedReportDesigner\"].nregsubtypecode !== -1) {\r\n                            selectedRecord[\"nregsubtypecode\"] = {\r\n                                value: response.data[\"SelectedReportDesigner\"].nregsubtypecode,\r\n                                label: response.data[\"SelectedReportDesigner\"].sregsubtypename\r\n                            };\r\n                        }\r\n                        else {\r\n                            selectedRecord[\"nregsubtypecode\"] = undefined;\r\n                        }\r\n\r\n\r\n                        if (response.data[\"SelectedReportDesigner\"].nregsubtypecode !== -1) {\r\n                            selectedRecord[\"napproveconfversioncode\"] = {\r\n                                value: response.data[\"SelectedReportDesigner\"].napproveconfversioncode,\r\n                                label: response.data[\"SelectedReportDesigner\"].sapproveversionname\r\n                            };\r\n                        }\r\n                        else {\r\n                            selectedRecord[\"nregsubtypecode\"] = undefined;\r\n                        }\r\n\r\n                        if (response.data[\"SelectedReportDesigner\"].nsectioncode !== -1) {\r\n                            selectedRecord[\"nsectioncode\"] = {\r\n                                value: response.data[\"SelectedReportDesigner\"].nsectioncode,\r\n                                label: response.data[\"SelectedReportDesigner\"].ssectionname\r\n                            };\r\n                        }\r\n                        else {\r\n                            selectedRecord[\"nsectioncode\"] = undefined;\r\n                        }\r\n\r\n                        if (response.data[\"SelectedReportDesigner\"].ncoareporttypecode !== -1) {\r\n                            selectedRecord[\"ncoareporttypecode\"] = {\r\n                                value: response.data[\"SelectedReportDesigner\"].ncoareporttypecode,\r\n                                label: response.data[\"SelectedReportDesigner\"].scoareporttypename\r\n                            };\r\n                        }\r\n                        else {\r\n                            selectedRecord[\"ncoareporttypecode\"] = undefined;\r\n                        }\r\n\r\n                        if (selectedRecord.nreporttypecode === reportTypeEnum.SAMPLE) {\r\n                            selectedRecord[\"nreportdecisiontypecode\"] = {\r\n                                value: response.data[\"SelectedReportDesigner\"].nreportdecisiontypecode,\r\n                                label: response.data[\"SelectedReportDesigner\"].sdecisiontypename\r\n                            };\r\n                        }\r\n\r\n                    }\r\n                    else if (selectedRecord.nreporttypecode === reportTypeEnum.MIS) {\r\n                        selectedRecord[\"nreportmodulecode\"] = {\r\n                            value: response.data[\"SelectedReportDesigner\"].nreportmodulecode,\r\n                            label: response.data[\"SelectedReportDesigner\"].smoduledisplayname,\r\n\r\n                        };\r\n\r\n                        selectedRecord[\"nreportmodule\"] = {\r\n                            value: response.data[\"SelectedReportDesigner\"].smoduledisplayname,\r\n                            label: response.data[\"SelectedReportDesigner\"].smoduledisplayname\r\n                        }\r\n\r\n                    }\r\n\r\n                    else if (selectedRecord.nreporttypecode === reportTypeEnum.SCREENWISE) {\r\n                        selectedRecord[\"ncontrolcode\"] = {\r\n                            value: response.data[\"SelectedReportDesigner\"].ncontrolcode,\r\n                            label: response.data[\"SelectedReportDesigner\"].scontrolids\r\n                        };\r\n\r\n                        selectedRecord[\"nformcode\"] = {\r\n                            value: response.data[\"SelectedReportDesigner\"].nformcode,\r\n                            label: response.data[\"SelectedReportDesigner\"].sdisplayname\r\n                        };\r\n                    }\r\n\r\n                    if (selectedRecord.nreporttypecode === reportTypeEnum.SAMPLE\r\n                        || selectedRecord.nreporttypecode === reportTypeEnum.BATCH) {\r\n                        if (response.data[\"SelectedReportDesigner\"].ncoareporttypecode !== -1) {\r\n                            selectedRecord[\"ncoareporttypecode\"] = {\r\n                                value: response.data[\"SelectedReportDesigner\"].ncoareporttypecode,\r\n                                label: response.data[\"SelectedReportDesigner\"].scoareporttypename\r\n                            };\r\n                        }\r\n                        else {\r\n                            selectedRecord[\"ncoareporttypecode\"] = undefined;\r\n                        }\r\n                        selectedRecord[\"ncertificatetypecode\"] = {\r\n                            value: response.data[\"SelectedReportDesigner\"].ncertificatetypecode,\r\n                            label: response.data[\"SelectedReportDesigner\"].scertificatetype\r\n                        };\r\n\r\n                        selectedRecord[\"sbatchtypename\"] = response.data[\"SelectedReportDesigner\"].sbatchtypename\r\n                    }\r\n\r\n                    selectedRecord[\"ntransactionstatus\"] = response.data[\"SelectedReportDesigner\"].ntransactionstatus;\r\n\r\n                    selectedRecord[\"nreporttypecode\"] = {\r\n                        item: response.data[\"SelectedReportDesigner\"],\r\n                        value: response.data[\"SelectedReportDesigner\"].nreporttypecode,\r\n                        label: response.data[\"SelectedReportDesigner\"].sreportdisplayname\r\n                    };\r\n\r\n                }\r\n\r\n                respObject = {\r\n                    ...respObject, reportSubTypeList,//:response.data[\"COAReportType\"]  || [], \r\n                    sampleTypeList,\r\n                    regTypeList,//:response.data[\"RegistrationType\"]  || [],                                                               \r\n                    regSubTypeList,//:response.data[\"RegistrationSubType\"]  || [],  \r\n                    sectionList,\r\n                    ApproveConfigList,//:response.data[\"SectionList\"] || [],   \r\n                    certificateTypeList,\r\n                    reportDecisionTypeList: decisionTypeList,\r\n                    controlScreen: controlScreenTypeList,\r\n                    //masterData:{...inputParam.masterData, SelectedFilterReportType:response.data[\"SelectedReportType\"] }                                                             \r\n                };\r\n\r\n                if (inputParam.operation === \"create\") {\r\n                    selectedRecord[\"nreporttypecode\"] = {\r\n                        item: response.data[\"SelectedReportType\"], label: response.data[\"SelectedReportType\"].sdisplayname,\r\n                        value: response.data[\"SelectedReportType\"].nreporttypecode\r\n                    }\r\n\r\n                    if (selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE\r\n                        && selectedRecord[\"nreporttypecode\"]['item'].isneedregtype === transactionStatus.YES) {\r\n                        // selectedRecord[\"nregtypecode\"] = getComboLabelValue(response.data[\"SelectedRegType\"],\r\n                        //     response.data[\"RegistrationType\"], \"nregtypecode\", \"sregtypename\")\r\n                        selectedRecord[\"nsampletypecode\"] = getComboLabelValue(response.data[\"SelectedSampleType\"],\r\n                            response.data[\"SampleType\"], \"nsampletypecode\", \"ssampletypename\")\r\n\r\n                        if (selectedRecord[\"nreporttypecode\"]['item'].isneedsection === transactionStatus.YES) {\r\n                            selectedRecord[\"nsectioncode\"] = sectionMap.get(\"DefaultValue\");\r\n                        }\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        reportTypeList,//:response.data[\"ReportType\"] || [], \r\n                        reportModuleList,//:response.data[\"ReportModule\"] || [] ,\r\n                        ...respObject,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        selectedRecord,\r\n                        openModal: true,\r\n                        ncontrolCode: inputParam.ncontrolcode,\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        // }\r\n        // else{       \r\n        //     toast.warn(intl.formatMessage({id: \"IDS_CANNOTUPDATEAPPROVEDREPORT\"}));\r\n        // }\r\n\r\n    }\r\n}\r\n\r\nexport function getReportDetailComboService(inputParam) {\r\n    return function (dispatch) {\r\n        if (inputParam.operation === \"create\" || (inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus === transactionStatus.DRAFT)) {\r\n            if (inputParam.masterData.SelectedReportMaster !== null) {\r\n                dispatch(initRequest(true));\r\n                let nreportdetailcode = null;\r\n                if (inputParam.operation === \"update\") {\r\n                    nreportdetailcode = inputParam.detailtoedit[inputParam.primaryKeyName];\r\n                }\r\n                return rsapi.post(\"reportconfig/getReportDetailComboData\", {\r\n                    nreportdetailcode,\r\n                    reportmaster: inputParam.masterData.SelectedReportMaster,\r\n                    userinfo: inputParam.userInfo\r\n                })\r\n                    .then(response => {\r\n\r\n                        // const reportType = response.data[\"SelectedReportType\"];\r\n                        // const reportSubTypeMap  = constructOptionList(response.data[\"COAReportType\"] ||[], \"ncoareporttypecode\",\r\n                        //                             \"scoareporttypename\" , undefined, undefined, true);    \r\n                        // const sectionMap  = constructOptionList(response.data[\"SectionList\"] ||[], \"nsectioncode\",\r\n                        //                             \"ssectionname\", undefined, undefined, true);\r\n\r\n                        // const decisionTypeMap  = constructOptionList(response.data[\"ReportDecisionType\"] ||[], \"nreportdecisiontypecode\",\r\n                        //                             \"sdecisiontypename\" , undefined, undefined, true);   \r\n\r\n                        // const certificateTypeMap  = constructOptionList(response.data[\"CertificateType\"] ||[], \"ncertificatetypecode\",\r\n                        //                             \"scertificatetype\" , undefined, undefined, true);\r\n\r\n                        // const  reportSubTypeList = reportSubTypeMap.get(\"OptionList\");\r\n                        // const  sectionList = sectionMap.get(\"OptionList\"); \r\n                        // const  decisionTypeList = decisionTypeMap.get(\"OptionList\");\r\n                        // const  certificateTypeList = certificateTypeMap.get(\"OptionList\");  \r\n\r\n                        let selectedRecord = {};\r\n                        let respObject = {};\r\n                        if (inputParam.operation === \"update\") {\r\n                            selectedRecord = response.data[\"SelectedReportDetail\"];\r\n\r\n                        }\r\n                        selectedRecord[\"ntransactionstatus\"] = transactionStatus.DRAFT;\r\n\r\n                        //    console.log(\"selected in action:\", selectedRecord);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                ...respObject,\r\n                                operation: inputParam.operation,\r\n                                screenName: inputParam.screenName,\r\n                                selectedRecord,\r\n                                openModal: true,\r\n                                ncontrolCode: inputParam.ncontrolcode,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_REPORTNOTFOUND\" }));\r\n            }\r\n        }\r\n        else if (inputParam.operation === \"create\" || (inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus === transactionStatus.APPROVED)) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_CANNOTEDITAPPROVEDREPORT\" }));\r\n        }\r\n        else if (inputParam.operation === \"create\" || (inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus === transactionStatus.RETIRED)) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_CANNOTEDITRETIREDREPORT\" }));\r\n        }\r\n    }\r\n}\r\n\r\nexport function getSelectedReportMasterDetail(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportconfig/getReportDesigner\", {\r\n            nreportcode: parseInt(inputParam.nreportcode),\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                const masterData = { ...inputParam.masterData, ...response.data };\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, operation: null, modalName: undefined,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSelectedReportDetail(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportconfig/getReportDetail\", {\r\n            nreportdetailcode: parseInt(inputParam.nreportdetailcode),\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                const masterData = { ...inputParam.masterData, ...response.data };\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, operation: null, modalName: undefined,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getConfigReportComboService(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        if (inputParam.reportMaster.nreporttypecode === reportTypeEnum.MIS) {\r\n            if (inputParam.reportDetail.ntransactionstatus === transactionStatus.DRAFT) {\r\n                dispatch(initRequest(true));\r\n                return rsapi.post(\"reportconfig/getReportAddDesignComboData\", {\r\n                    nreportdetailcode: parseInt(inputParam.reportDetail.nreportdetailcode),\r\n                    userinfo: inputParam.userInfo\r\n                })\r\n                    .then(response => {\r\n\r\n                        const parameterMap = constructOptionList(response.data[\"ReportParameter\"] || [], \"nreportparametercode\",\r\n                            \"sreportparametername\", undefined, undefined, true);\r\n\r\n                        const reportParameterList = parameterMap.get(\"OptionList\");\r\n\r\n                        const designComponentMap = constructOptionList(response.data[\"DesignComponents\"] || [], \"ndesigncomponentcode\",\r\n                            \"sdesigncomponentname\", undefined, undefined, true);\r\n\r\n                        const designComponentList = designComponentMap.get(\"OptionList\");\r\n\r\n                        const sqlQueryMap = constructOptionList(response.data[\"SQLQuery\"] || [], \"nsqlquerycode\",\r\n                            \"ssqlqueryname\", undefined, undefined, true);\r\n\r\n                        const sqlQueryList = sqlQueryMap.get(\"OptionList\");\r\n\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                reportParameterList,//:response.data[\"ReportParameter\"] || [], \r\n                                designComponentList,//:response.data[\"DesignComponents\"] || [],\r\n                                sqlQueryList,//:response.data[\"SQLQuery\"] || [], \r\n                                operation: inputParam.operation,\r\n                                screenName: inputParam.screenName,\r\n                                //selectedRecord:{nmandatory:transactionStatus.YES}, \r\n                                selectedRecord: {},\r\n                                openModal: true,\r\n                                ncontrolCode: inputParam.ncontrolCode,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n\r\n                    })\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_CANNOTCONFIGUREAPPROVEDREPORT\" }))\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_CANCONFIGUREMISREPORT\" }))\r\n        }\r\n    }\r\n}\r\n\r\nexport function getParameterMappingComboService(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        if (inputParam.reportMaster.nreporttypecode === reportTypeEnum.MIS) {\r\n            if (inputParam.reportDetail.ntransactionstatus === transactionStatus.DRAFT) {\r\n                dispatch(initRequest(true));\r\n                return rsapi.post(\"reportconfig/getReportParameterMappingComboData\", {\r\n                    nreportdetailcode: parseInt(inputParam.reportDetail.nreportdetailcode),\r\n                    userinfo: inputParam.userInfo\r\n                })\r\n                    .then(response => {\r\n                        if (response.data[\"ChildComponentList\"].length > 0) {\r\n\r\n                            const parentComponentMap = constructOptionList(response.data[\"ParentComponentList\"] || [], \"nreportdesigncode\",\r\n                                \"sdisplayname\", undefined, undefined, true);\r\n                            const parentComponentList = parentComponentMap.get(\"OptionList\");\r\n\r\n                            const childComponentMap = constructOptionList(response.data[\"ChildComponentList\"] || [], \"nreportdesigncode\",\r\n                                \"sdisplayname\", undefined, undefined, true);\r\n                            const childComponentList = childComponentMap.get(\"OptionList\");\r\n\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN, payload: {\r\n                                    parentComponentList,//:response.data[\"ParentComponenList\"] || [],\r\n                                    childComponentList,//:response.data[\"ChildComponentList\"] || [], \r\n                                    operation: inputParam.operation,\r\n                                    screenName: inputParam.screenName,\r\n                                    selectedRecord: {},\r\n                                    openModal: true,\r\n                                    ncontrolCode: inputParam.ncontrolCode,\r\n                                    loading: false\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                            toast.warn(intl.formatMessage({ id: \"IDS_NOPARAMETERSTOMAP\" }))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n\r\n                    })\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_CANNOTMAPAPPROVEDREPORT\" }))\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_CANMAPMISREPORT\" }))\r\n        }\r\n    }\r\n}\r\n\r\nexport function viewReportDetail(reportmaster, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        if (reportmaster !== undefined) {\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"reportview/viewReport\", { reportmaster, userinfo: userInfo })\r\n                .then(response => {\r\n                    // console.log(\"report action:\", response);\r\n                    masterData = { ...masterData, ...response.data };\r\n\r\n                    if (response.data[\"ViewReportDesignConfig\"] !== undefined) {\r\n                        masterData[\"ReportPDFFile\"] = undefined;\r\n                    }\r\n                    // else{\r\n                    //     document.getElementById(\"download_data\").setAttribute(\"href\", masterData[\"ReportPDFFile\"]);\r\n                    //     document.getElementById(\"download_data\").click();\r\n                    // }\r\n\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_REPORTNOTFOUND\" }))\r\n        }\r\n    }\r\n}\r\n\r\n// export function getActionMappingComboService(inputParam) {\r\n//     return function (dispatch) {   \r\n\r\n//     if (inputParam.reportDetail.ntransactionstatus === transactionStatus.DRAFT){\r\n//             dispatch(initRequest(true));\r\n//             return rsapi.post(\"reportconfig/getActionMappingComboData\", {nreportdetailcode:parseInt(inputParam.reportDetail.nreportdetailcode),\r\n//                                         userinfo:inputParam.userInfo})\r\n//         .then(response=>{ \r\n//             if (response.data[\"ActionMappingChild\"].length > 0)\r\n//             {     \r\n//                     dispatch({type: DEFAULT_RETURN, payload:{actionMappingParentList:response.data[\"ActionMappingParent\"] || [],\r\n//                                                             actionMappingChildList:response.data[\"ActionMappingChild\"] || [], \r\n//                                                             operation:inputParam.operation, \r\n//                                                             screenName:inputParam.screenName,   \r\n//                                                             selectedRecord:{}, \r\n//                                                             openModal : true,\r\n//                                                             ncontrolCode:inputParam.ncontrolCode,\r\n//                                                             loading:false\r\n//                                                             }}); \r\n//             }\r\n//             else{\r\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n//                 toast.warn(intl.formatMessage({id:\"IDS_NOACTIONSTOMAP\"}))\r\n//             }\r\n//         })\r\n//         .catch(error=>{\r\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n//             if (error.response.status === 500){\r\n//                 toast.error(error.message);\r\n//             } \r\n//             else{               \r\n//                 toast.warn(error.response.data);\r\n//             }  \r\n\r\n//         })\r\n//     }\r\n//     else{\r\n//         toast.warn(intl.formatMessage({id:\"IDS_CANNOTACTIONMAPAPPROVEDREPORT\"}))\r\n//     }\r\n// }}\r\n\r\nexport function getReportViewChildDataList(inputParam) {\r\n    return function (dispatch) {\r\n        // dispatch(initRequest(true));\r\n        return rsapi.post(\"reportview/getChildDataList\", { ...inputParam[\"inputData\"] })\r\n            .then(response => {\r\n                const controlList = inputParam.viewReportDesignConfigList;\r\n\r\n                const selectedRecord = inputParam.selectedRecord;\r\n\r\n                Object.keys(response.data).map(displayName => {\r\n                    const index = controlList.findIndex(item => displayName === item.sdisplayname);\r\n\r\n                    const comboMap = constructOptionList(response.data[displayName] || [], controlList[index].svaluemember,\r\n                        controlList[index].sdisplaymember, undefined, undefined, true);\r\n\r\n                    const comboList = comboMap.get(\"OptionList\");\r\n                    selectedRecord[controlList[index].svaluemember] = undefined;\r\n\r\n                    return controlList[index][\"dataList\"] = comboList;//response.data[displayName]\r\n                })\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        viewReportDesignConfigList: controlList,\r\n                        loading: false,\r\n                        inputFieldData: inputParam.inputData.inputfielddata,\r\n                        selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function viewReportDetailWithParameters(viewReportParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportview/viewReportWithParameters\", { ...viewReportParam })\r\n            .then(response => {\r\n                const masterData = {\r\n                    ...viewReportParam.masterData, ...response.data,\r\n                    ReportPDFFile: response.data[\"ReportPDFFile\"],\r\n                    SelectedReportDetails: response.data[\"SelectedReportDetails\"],\r\n                    ReportPDFPath: response.data[\"ReportPDFPath\"],\r\n                    ViewReportDesignConfig: undefined\r\n                };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, loading: false, //openModal:false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReportsByModule(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportview/getReportView\", {\r\n            nreportmodulecode: inputParam.nreportmodulecode,\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                const masterData = { ...inputParam.masterData, ...response.data };\r\n\r\n                // const  reportModuleMap  = constructOptionList(masterData.ViewReportModuleList ||[], \"nreportmodulecode\",\r\n                //                          \"smoduledisplayname\" , undefined, undefined, true);\r\n                // const  reportModuleList  = reportModuleMap.get(\"OptionList\");\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, //viewReportModuleList:reportModuleList,\r\n                        operation: null, modalName: undefined,\r\n                        loading: false, selectedRecord: inputParam.selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getControlButton(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportconfig/getControlButton\", {\r\n            nformcode: inputParam.ControlScreen.nformcode,\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                const controlButtonMap = constructOptionList(response.data || [], \"ncontrolcode\",\r\n                    \"scontrolids\", undefined, undefined, true);\r\n                const controlButtonList = controlButtonMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        controlButton: controlButtonList,//: response.data,                                            \r\n                        loading: false,\r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            nregsubtypecode: undefined\r\n                            //nregsubtypecode:{label:\"Please Select...\", value:-4}\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReportRegSubType(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportconfig/getReportRegistrationSubType\", {\r\n            nregtypecode: inputParam.registrationType.nregtypecode,\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                const regSubTypeMap = constructOptionList(response.data || [], \"nregsubtypecode\",\r\n                    \"sregsubtypename\", undefined, undefined, true);\r\n                const regSubTypeList = regSubTypeMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        regSubTypeList,//: response.data,                                            \r\n                        loading: false,\r\n                        ApproveConfigList:[],                                           \r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            nregsubtypecode: undefined,\r\n                            napproveconfversioncode: undefined\r\n\r\n                            //nregsubtypecode:{label:\"Please Select...\", value:-4}\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReportSubType(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportconfig/getReportSubType\", {\r\n            nreporttypecode: inputParam.reportType.nreporttypecode,\r\n            nreporttypecode: inputParam.reportType.nreporttypecode,\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n               // const reportSubTypeMap = constructOptionList(response.data.COAReportType || [], \"ncoareporttypecode\",\r\n               //     \"scoareporttypename\", undefined, undefined, true);\r\n               // const reportSubTypeList = reportSubTypeMap.get(\"OptionList\");\r\n\r\n                const certificateTypeMap = constructOptionList(response.data.CertificateType || [], \"ncertificatetypecode\",\r\n                    \"scertificatetype\", undefined, undefined, true);\r\n                const certificateTypeList = certificateTypeMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                       // reportSubTypeList,\r\n                        certificateTypeList,\r\n                        loading: false,\r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            ncoareporttypecode: undefined,\r\n                            ncertificatetypecode: \"\"\r\n                            // ncoareporttypecode:{label:\"Please Select...\", value:-4}\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\nexport function getReportSampletype(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportconfig/getReportSampleType\", {\r\n            nsampletypecode: inputParam.nsampletypecode, nreporttypecode: inputParam.reportType.nreporttypecode,\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                // const reportRegTypeMap  = constructOptionList(response.data.Regtype ||[], \"nregtypecode\",\r\n                //                          \"sregtypename\" , undefined, undefined, true);   \r\n                // const  reportRegTypeList = reportRegTypeMap.get(\"OptionList\");\r\n\r\n                // // const reportRegSubTypeMap  = constructOptionList(response.data.RegSubtype ||[], \"nregsubtypecode\",\r\n                // // \"sregsubtypename\" , undefined, undefined, true);   \r\n                // //   const  reportRegSubTypeList = reportRegSubTypeMap.get(\"OptionList\");\r\n                \r\n                const sampleTypeMap = constructOptionList(response.data[\"SampleType\"] || [], \"nsampletypecode\",\r\n                \"ssampletypename\", undefined, undefined, true);\r\n                const sampleTypeList = sampleTypeMap.get(\"OptionList\");\r\n                \r\n                const regTypeMap = constructOptionList(response.data[\"RegistrationType\"] || [], \"nregtypecode\",\r\n                    \"sregtypename\", undefined, undefined, true);\r\n                const regTypeList = regTypeMap.get(\"OptionList\");\r\n\r\n                // const regSubTypeMap = constructOptionList(response.data[\"RegistrationSubType\"] || [], \"nregsubtypecode\",\r\n                //     \"sregsubtypename\", undefined, undefined, true);\r\n                // const regSubTypeList = regSubTypeMap.get(\"OptionList\");\r\n\r\n                const coaReportTypeMap = constructOptionList(response.data.COAReportType || [], \"ncoareporttypecode\",\r\n                    \"scoareporttypename\", undefined, undefined, true);\r\n                const reportSubTypeList = coaReportTypeMap.get(\"OptionList\");\r\n\r\n                const certificateType = constructOptionList(response.data.CertificateType || [], \"ncertificatetypecode\",\r\n                    \"scertificatetype\", undefined, undefined, true);\r\n                const certificateTypeList = certificateType.get(\"OptionList\");\r\n\r\n\r\n                const nsampletypecode = getComboLabelValue(response.data[\"SelectedSampleType\"],\r\n                    response.data[\"SampleType\"], \"nsampletypecode\", \"ssampletypename\")\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        sampleTypeList,\r\n                        regTypeList,\r\n                      //  regSubTypeList,\r\n                        reportSubTypeList,\r\n                        loading: false,\r\n                        certificateTypeList,\r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            nsampletypecode: nsampletypecode, nregtypecode: undefined,\r\n                            ncoareporttypecode: undefined,\r\n                            ncertificatetypecode: \"\"\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getregtype(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportconfig/getRegistrationtypeForSample\", {\r\n            nsampletypecode: inputParam.sampleType.nsampletypecode,\r\n            nregtypecode: inputParam.nregtypecode, nreporttypecode: inputParam.selectedRecord.nreporttypecode.value,\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                // const reportRegTypeMap  = constructOptionList(response.data.Regtype ||[], \"nregtypecode\",\r\n                //                          \"sregtypename\" , undefined, undefined, true);   \r\n                // const  reportRegTypeList = reportRegTypeMap.get(\"OptionList\");\r\n\r\n                // // const reportRegSubTypeMap  = constructOptionList(response.data.RegSubtype ||[], \"nregsubtypecode\",\r\n                // // \"sregsubtypename\" , undefined, undefined, true);   \r\n                // //   const  reportRegSubTypeList = reportRegSubTypeMap.get(\"OptionList\");\r\n                // const sampleTypeMap = constructOptionList(response.data[\"SampleType\"] || [], \"nsampletypecode\",\r\n                // \"ssampletypename\", undefined, undefined, true);\r\n                // const sampleTypeList = sampleTypeMap.get(\"OptionList\");\r\n                \r\n                const regTypeMap = constructOptionList(response.data[\"RegistrationType\"] || [], \"nregtypecode\",\r\n                    \"sregtypename\", undefined, undefined, true);\r\n                const regTypeList = regTypeMap.get(\"OptionList\");\r\n\r\n                // const regSubTypeMap = constructOptionList(response.data[\"RegistrationSubType\"] || [], \"nregsubtypecode\",\r\n                //     \"sregsubtypename\", undefined, undefined, true);\r\n                // const regSubTypeList = regSubTypeMap.get(\"OptionList\");\r\n\r\n                const coaReportTypeMap = constructOptionList(response.data.COAReportType || [], \"ncoareporttypecode\",\r\n                    \"scoareporttypename\", undefined, undefined, true);\r\n                const reportSubTypeList = coaReportTypeMap.get(\"OptionList\");\r\n\r\n                const certificateType = constructOptionList(response.data.CertificateType || [], \"ncertificatetypecode\",\r\n                    \"scertificatetype\", undefined, undefined, true);\r\n                const certificateTypeList = certificateType.get(\"OptionList\");\r\n\r\n\r\n            //    const nregtypecode = getComboLabelValue(response.data[\"SelectedRegType\"],\r\n              //      response.data[\"RegistrationType\"], \"nregtypecode\", \"sregtypename\")\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                     //   sampleTypeList,\r\n                        regTypeList,\r\n                        regSubTypeList: [],\r\n                        ApproveConfigList:[],                                           \r\n                        reportSubTypeList,\r\n                        loading: false,\r\n                        certificateTypeList,\r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            nregtypecode: undefined, nregsubtypecode: undefined,\r\n                            ncoareporttypecode: undefined,\r\n                            ncertificatetypecode: \"\",\r\n                            napproveconfversioncode: undefined\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReportRegSubTypeApproveConfigVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportconfig/getReportRegSubTypeApproveConfigVersion\", {\r\n            nregtypecode: inputParam.selectedRecord.nregtypecode.value,\r\n            nregsubtypecode: inputParam.registrationsubType.nregsubtypecode,\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                const ApproveConfigVersionMap = constructOptionList(response.data || [], \"napproveconfversioncode\",\r\n                    \"sversionname\", undefined, undefined, false);\r\n                const ApproveConfigList = ApproveConfigVersionMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        ApproveConfigList,//: response.data,                                            \r\n                        loading: false,\r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            napproveconfversioncode: undefined\r\n\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}