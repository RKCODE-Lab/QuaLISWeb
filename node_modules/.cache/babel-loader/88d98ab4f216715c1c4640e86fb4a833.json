{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\contactmaster\\\\Courier.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport AddCourier from './AddCourier';\nimport Esign from '../audittrail/Esign';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { callService, crudMaster, fetchCourierById, validateEsignCredential, openCourierModal, updateStore } from '../../actions';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { constructOptionList, getControlMap, showEsign, validateEmail, validatePhoneNumber } from '../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Courier extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          //selectedRecord['agree'] = 4;\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          selectedId = null;\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        if (event.target.name === \"sphoneno\" || event.target.name === \"smobileno\") {\n          //event.target.value = validatePhoneNumber(event.target.value);\n          if (event.target.value !== \"\") {\n            event.target.value = validatePhoneNumber(event.target.value);\n            selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name]; // selectedRecord[event.target.name] = event.target.value;                    \n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        } //this.state.clearSelectedRecordField.length === 0 ||\n        // if( this.state.clearSelectedRecordField.includes(event.target.name)===false )\n        //     {\n        //         this.state.clearSelectedRecordField.push(event.target.name); \n        //     }         \n\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.deleteRecord = inputData => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: inputData.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: \"delete\",\n        displayName: this.props.Login.inputParam.displayName,\n        dataState: this.state.dataState,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      delete inputParam.inputData[\"courier\"]['expanded'];\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: 'delete'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.state.selectedRecord['semail'] ? validateEmail(this.state.selectedRecord['semail']) : true) {\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = undefined;\n\n        if (this.props.Login.operation === \"update\") {\n          // edit\n          postParam = {\n            inputListName: \"courier\",\n            selectedObject: \"selectedCourier\",\n            primaryKeyField: \"ncouriercode\"\n          };\n          inputData[\"courier\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n          this.fieldList.map(item => {\n            return inputData[\"courier\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n          });\n        } else {\n          inputData[\"courier\"] = {\n            \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n          };\n          this.fieldList.map(item => {\n            return inputData[\"courier\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n          });\n        } //let clearSelectedRecordField=[\"scouriername\",\"scontactperson\",\"saddress1\",\"saddress2\",\"saddress3\",\"semail\",\"smobileno\",\"sphoneno\",\"sfaxno\"];\n\n\n        let clearSelectedRecordField = [{\n          \"controlType\": \"textbox\",\n          \"idsName\": \"IDS_COURIERNAME\",\n          \"dataField\": \"scouriername\",\n          \"width\": \"200px\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textbox\",\n          \"idsName\": \"IDS_PHONENO\",\n          \"dataField\": \"sphoneno\",\n          \"width\": \"150px\",\n          \"isClearField\": true\n        }, {\n          \"idsName\": \"IDS_CONTACTPERSON\",\n          \"dataField\": \"scontactperson\",\n          \"width\": \"250px\",\n          \"isClearField\": true\n        }, {\n          \"idsName\": \"IDS_ADDRESS\",\n          \"dataField\": \"saddress1\",\n          \"width\": \"255px\",\n          \"isClearField\": true\n        }, {\n          \"idsName\": \"IDS_ADDRESS\",\n          \"dataField\": \"saddress2\",\n          \"width\": \"255px\",\n          \"isClearField\": true\n        }, {\n          \"idsName\": \"IDS_ADDRESS\",\n          \"dataField\": \"saddress3\",\n          \"width\": \"255px\",\n          \"isClearField\": true\n        }, {\n          \"idsName\": \"IDS_EMAIL\",\n          \"dataField\": \"email\",\n          \"width\": \"150px\",\n          \"isClearField\": true\n        }, {\n          \"idsName\": \"IDS_MOBILENO\",\n          \"dataField\": \"smobileno\",\n          \"width\": \"150px\",\n          \"isClearField\": true\n        }, {\n          \"idsName\": \"IDS_FAXNO\",\n          \"dataField\": \"sfaxno\",\n          \"width\": \"150px\",\n          \"isClearField\": true\n        }];\n        inputData[\"courier\"][\"ncountrycode\"] = this.state.selectedRecord[\"ncountrycode\"] ? this.state.selectedRecord[\"ncountrycode\"].value : -1; // inputData[\"courier\"][\"saddress\"] = this.state.selectedRecord[\"ninterfacetype\"] ? this.state.selectedRecord[\"ninterfacetype\"].value : -1;\n\n        inputData[\"courier\"][\"nstatus\"] = this.state.selectedRecord[\"nstatus\"];\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: this.props.Login.inputParam.methodUrl,\n          displayName: \"IDS_COURIER\",\n          inputData: inputData,\n          operation: this.props.Login.operation,\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef,\n          selectedRecord: { ...this.state.selectedRecord\n          }\n        };\n        const masterData = this.props.Login.masterData;\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\", \"\", \"\", clearSelectedRecordField);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALIDEMAIL\"\n        }));\n      } // this.props.crudMaster(inputParam, this.props.Login.masterData,\"openModal\");\n\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.closeModal = this.closeModal.bind(this);\n    this.extractedColumnList = [];\n    this.extractedColumnListClear = [];\n    this.fieldList = [];\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      isOpen: false,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      Country: [] //clearSelectedRecordField:[]\n\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"controlType\": \"textbox\",\n        \"idsName\": \"IDS_COURIERNAME\",\n        \"dataField\": \"scouriername\",\n        \"width\": \"200px\"\n      }, {\n        \"controlType\": \"textbox\",\n        \"idsName\": \"IDS_COUNTRY\",\n        \"dataField\": \"scountryname\",\n        \"width\": \"150px\"\n      }, {\n        \"controlType\": \"textbox\",\n        \"idsName\": \"IDS_PHONENO\",\n        \"dataField\": \"sphoneno\",\n        \"width\": \"150px\"\n      }, {\n        \"idsName\": \"IDS_CONTACTPERSON\",\n        \"dataField\": \"scontactperson\",\n        \"width\": \"250px\"\n      }];\n      this.detailedFieldList = [//{ \"idsName\": \"IDS_CONTACTPERSON\", \"dataField\": \"scontactperson\", \"width\": \"250px\", columnSize:\"3\" },\n      {\n        \"idsName\": \"IDS_EMAIL\",\n        \"dataField\": \"semail\",\n        \"width\": \"250px\",\n        columnSize: \"4\"\n      }, {\n        \"idsName\": \"IDS_MOBILENO\",\n        \"dataField\": \"smobileno\",\n        \"width\": \"250px\",\n        columnSize: \"4\"\n      }, {\n        \"idsName\": \"IDS_FAXNO\",\n        \"dataField\": \"sfaxno\",\n        \"width\": \"250px\",\n        columnSize: \"4\"\n      }, {\n        \"idsName\": \"IDS_ADDRESS1\",\n        \"dataField\": \"saddress1\",\n        \"width\": \"250px\",\n        columnSize: \"4\"\n      }, {\n        \"idsName\": \"IDS_ADDRESS2\",\n        \"dataField\": \"saddress2\",\n        \"width\": \"250px\",\n        columnSize: \"4\"\n      }, {\n        \"idsName\": \"IDS_ADDRESS3\",\n        \"dataField\": \"saddress3\",\n        \"width\": \"250px\",\n        columnSize: \"4\"\n      }];\n      primaryKeyField = \"ncouriercode\";\n      this.fieldList = [\"scouriername\", \"scontactperson\", \"saddress1\", \"saddress2\", \"saddress3\", \"ncountrycode\", \"sphoneno\", \"smobileno\", \"semail\", \"sfaxno\"];\n    }\n\n    const mandatoryFields = [{\n      \"controlType\": \"textbox\",\n      \"mandatory\": true,\n      \"idsName\": \"IDS_COURIERNAME\",\n      \"dataField\": \"scouriername\",\n      \"mandatoryLabel\": \"IDS_ENTER\"\n    }, {\n      \"controlType\": \"selectbox\",\n      \"mandatory\": true,\n      \"idsName\": \"IDS_COUNTRY\",\n      \"dataField\": \"ncountrycode\",\n      \"mandatoryLabel\": \"IDS_SELECT\"\n    }];\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      primaryKeyField: \"ncouriercode\",\n      operation: \"update\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editID\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      detailedFieldList: this.detailedFieldList,\n      expandField: \"expanded\",\n      formatMessage: this.props.intl.formatMessage,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.fetchCourierById,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      addRecord: () => this.props.openCourierModal(\"IDS_COURIER\", \"create\", \"ncouriercode\", this.props.Login.masterData, this.props.Login.userInfo, addId) // isComponent={true}\n      ,\n      gridHeight: \"600px\",\n      pageable: true,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      scrollable: \"scrollable\",\n      selectedId: this.props.Login.selectedId,\n      hasDynamicColSize: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      showSaveContinue: true,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddCourier, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        Country: this.state.Country || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          // isOpen: false,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState,\n          selectedRecord: {}\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.Country !== previousProps.Login.Country) {\n      const Country = constructOptionList(this.props.Login.Country || [], \"ncountrycode\", \"scountryname\", undefined, undefined, undefined);\n      const CountryList = Country.get(\"OptionList\");\n      this.setState({\n        Country: CountryList\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  fetchCourierById,\n  validateEsignCredential,\n  openCourierModal,\n  updateStore\n})(injectIntl(Courier));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/contactmaster/Courier.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DataGrid","AddCourier","Esign","SlideOutModal","ListWrapper","callService","crudMaster","fetchCourierById","validateEsignCredential","openCourierModal","updateStore","transactionStatus","constructOptionList","getControlMap","showEsign","validateEmail","validatePhoneNumber","DEFAULT_RETURN","mapStateToProps","state","Login","Courier","Component","constructor","props","dataStateChange","event","setState","dataResult","masterData","dataState","closeModal","loadEsign","openModal","selectedRecord","selectedId","operation","updateInfo","typeName","data","onInputOnChange","target","type","name","checked","YES","NO","value","onComboChange","comboData","fieldName","deleteRecord","inputData","inputParam","classUrl","methodUrl","toLowerCase","userInfo","displayName","esignNeeded","userRoleControlRights","nformcode","ncontrolCode","screenData","screenName","intl","formatMessage","id","reloadData","onSaveClick","saveType","formRef","postParam","undefined","inputListName","selectedObject","primaryKeyField","JSON","parse","stringify","fieldList","map","item","nmastersitecode","clearSelectedRecordField","searchRef","ncontrolcode","warn","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","createRef","bind","extractedColumnList","extractedColumnListClear","skip","take","settings","parseInt","masterStatus","error","isOpen","controlMap","Map","Country","getDerivedStateFromProps","render","detailedFieldList","columnSize","mandatoryFields","addId","has","concat","get","editID","editParam","deleteParam","componentDidUpdate","previousProps","Object","values","push","CountryList","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport AddCourier from './AddCourier';\r\nimport Esign from '../audittrail/Esign';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { callService, crudMaster, fetchCourierById, validateEsignCredential, openCourierModal, updateStore } from '../../actions';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { constructOptionList, getControlMap, showEsign,validateEmail,validatePhoneNumber } from '../../components/CommonScript';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Courier extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.closeModal = this.closeModal.bind(this);\r\n        this.extractedColumnList = [];\r\n        this.extractedColumnListClear = [];\r\n        this.fieldList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            isOpen: false,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            Country:[]\r\n            //clearSelectedRecordField:[]\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                //selectedRecord['agree'] = 4;\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                selectedId = null;\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\";\r\n                selectedRecord['esigncomments'] = \"\";\r\n                selectedRecord['esignreason']=\"\";\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId=null;\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord,selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    \r\n    render() {\r\n\r\n        let primaryKeyField = \"\";\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n\r\n            this.extractedColumnList = [\r\n                { \"controlType\": \"textbox\", \"idsName\": \"IDS_COURIERNAME\", \"dataField\": \"scouriername\", \"width\": \"200px\" },\r\n                { \"controlType\": \"textbox\", \"idsName\": \"IDS_COUNTRY\", \"dataField\": \"scountryname\", \"width\": \"150px\" },\r\n                { \"controlType\": \"textbox\", \"idsName\": \"IDS_PHONENO\", \"dataField\": \"sphoneno\", \"width\": \"150px\" },\r\n                { \"idsName\": \"IDS_CONTACTPERSON\", \"dataField\": \"scontactperson\", \"width\": \"250px\" },\r\n\r\n            ]\r\n            this.detailedFieldList = [\r\n                //{ \"idsName\": \"IDS_CONTACTPERSON\", \"dataField\": \"scontactperson\", \"width\": \"250px\", columnSize:\"3\" },\r\n               \r\n                { \"idsName\": \"IDS_EMAIL\", \"dataField\": \"semail\", \"width\": \"250px\", columnSize:\"4\" },\r\n                { \"idsName\": \"IDS_MOBILENO\", \"dataField\": \"smobileno\", \"width\": \"250px\", columnSize:\"4\" },\r\n                { \"idsName\": \"IDS_FAXNO\", \"dataField\": \"sfaxno\", \"width\": \"250px\", columnSize:\"4\" },\r\n                { \"idsName\": \"IDS_ADDRESS1\", \"dataField\": \"saddress1\", \"width\": \"250px\", columnSize:\"4\" },\r\n                { \"idsName\": \"IDS_ADDRESS2\", \"dataField\": \"saddress2\", \"width\": \"250px\", columnSize:\"4\" },              \r\n                { \"idsName\": \"IDS_ADDRESS3\", \"dataField\": \"saddress3\", \"width\": \"250px\", columnSize:\"4\" } ,               \r\n              \r\n            ];\r\n            \r\n            primaryKeyField = \"ncouriercode\";\r\n            this.fieldList = [\"scouriername\", \"scontactperson\",\"saddress1\",\"saddress2\",\"saddress3\",\"ncountrycode\",\"sphoneno\", \"smobileno\", \"semail\",\"sfaxno\"];\r\n        }\r\n\r\n        const mandatoryFields=[ { \"controlType\": \"textbox\",\"mandatory\": true, \"idsName\": \"IDS_COURIERNAME\", \"dataField\": \"scouriername\", \"mandatoryLabel\":\"IDS_ENTER\" },\r\n                             { \"controlType\": \"selectbox\",\"mandatory\": true, \"idsName\": \"IDS_COUNTRY\", \"dataField\": \"ncountrycode\", \"mandatoryLabel\":\"IDS_SELECT\"}\r\n     \r\n          ];\r\n       \r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editParam = {\r\n            screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), primaryKeyField: \"ncouriercode\", operation: \"update\",\r\n            inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editID\r\n        };\r\n        const deleteParam = { operation: \"delete\" };\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                           \r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    detailedFieldList={this.detailedFieldList}\r\n                                    expandField=\"expanded\"\r\n                                    formatMessage={this.props.intl.formatMessage}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.fetchCourierById}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    reloadData={this.reloadData}\r\n                                    editParam={editParam}\r\n                                    deleteParam={deleteParam}\r\n                                    addRecord = {() => this.props.openCourierModal(\"IDS_COURIER\", \"create\", \"ncouriercode\", this.props.Login.masterData, this.props.Login.userInfo, addId)}\r\n                                    // isComponent={true}\r\n                                    gridHeight = {\"600px\"}\r\n                                    pageable={true}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    scrollable={\"scrollable\"}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    hasDynamicColSize={true}\r\n                                   \r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        showSaveContinue={true}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddCourier\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                Country={this.state.Country || []}\r\n                               \r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                   // isOpen: false,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState,\r\n                    selectedRecord:{}\r\n                });\r\n            }\r\n        } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if(this.props.Login.Country!==previousProps.Login.Country){\r\n            const Country=constructOptionList(this.props.Login.Country ||[], \"ncountrycode\",\r\n            \"scountryname\" , undefined, undefined, undefined);\r\n            const CountryList=Country.get(\"OptionList\")\r\n            this.setState({Country:CountryList})\r\n        }\r\n    }\r\n\r\n    onInputOnChange=(event)=>  {\r\n        \r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox')\r\n        {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else  {\r\n            if (event.target.name === \"sphoneno\" || event.target.name === \"smobileno\"){\r\n                //event.target.value = validatePhoneNumber(event.target.value);\r\n                if (event.target.value !== \"\"){\r\n                    event.target.value = validatePhoneNumber(event.target.value);\r\n                    selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value:selectedRecord[event.target.name];\r\n                   // selectedRecord[event.target.name] = event.target.value;                    \r\n                }\r\n                else{     \r\n                    selectedRecord[event.target.name] = event.target.value;               \r\n                }\r\n            }  \r\n            else{     \r\n                selectedRecord[event.target.name] = event.target.value;               \r\n            }\r\n            //this.state.clearSelectedRecordField.length === 0 ||\r\n            // if( this.state.clearSelectedRecordField.includes(event.target.name)===false )\r\n            //     {\r\n            //         this.state.clearSelectedRecordField.push(event.target.name); \r\n            //     }         \r\n        }     \r\n        this.setState({selectedRecord});\r\n        \r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    deleteRecord = (inputData) => {\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: inputData.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            \r\n            operation: \"delete\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            dataState: this.state.dataState,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n\r\n        }\r\n        delete inputParam.inputData[\"courier\"]['expanded']\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation:'delete'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.inputParam.displayName\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if(this.state.selectedRecord['semail']? validateEmail(this.state.selectedRecord['semail']):true){\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let postParam = undefined;\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"courier\", selectedObject: \"selectedCourier\", primaryKeyField: \"ncouriercode\" }\r\n            inputData[\"courier\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n            this.fieldList.map(item => {\r\n                return inputData[\"courier\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            })\r\n        } else {\r\n            inputData[\"courier\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n            this.fieldList.map(item => {\r\n                return inputData[\"courier\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            });\r\n        }\r\n\r\n        //let clearSelectedRecordField=[\"scouriername\",\"scontactperson\",\"saddress1\",\"saddress2\",\"saddress3\",\"semail\",\"smobileno\",\"sphoneno\",\"sfaxno\"];\r\n        let clearSelectedRecordField = [\r\n            { \"controlType\": \"textbox\", \"idsName\": \"IDS_COURIERNAME\", \"dataField\": \"scouriername\", \"width\": \"200px\",\"isClearField\":true },\r\n            { \"controlType\": \"textbox\", \"idsName\": \"IDS_PHONENO\", \"dataField\": \"sphoneno\", \"width\": \"150px\",\"isClearField\":true },\r\n            { \"idsName\": \"IDS_CONTACTPERSON\", \"dataField\": \"scontactperson\", \"width\": \"250px\",\"isClearField\":true },\r\n            { \"idsName\": \"IDS_ADDRESS\", \"dataField\": \"saddress1\", \"width\": \"255px\",\"isClearField\":true },\r\n            { \"idsName\": \"IDS_ADDRESS\", \"dataField\": \"saddress2\", \"width\": \"255px\",\"isClearField\":true },\r\n            { \"idsName\": \"IDS_ADDRESS\", \"dataField\": \"saddress3\", \"width\": \"255px\",\"isClearField\":true },\r\n            { \"idsName\": \"IDS_EMAIL\", \"dataField\": \"email\", \"width\": \"150px\",\"isClearField\":true },\r\n            { \"idsName\": \"IDS_MOBILENO\", \"dataField\": \"smobileno\", \"width\": \"150px\",\"isClearField\":true },\r\n            { \"idsName\": \"IDS_FAXNO\", \"dataField\": \"sfaxno\", \"width\": \"150px\",\"isClearField\":true }\r\n           ];\r\n        inputData[\"courier\"][\"ncountrycode\"] = this.state.selectedRecord[\"ncountrycode\"] ? this.state.selectedRecord[\"ncountrycode\"].value : -1;\r\n       // inputData[\"courier\"][\"saddress\"] = this.state.selectedRecord[\"ninterfacetype\"] ? this.state.selectedRecord[\"ninterfacetype\"].value : -1;\r\n        inputData[\"courier\"][\"nstatus\"] = this.state.selectedRecord[\"nstatus\"] ;\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName:\"IDS_COURIER\",\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        const esignNeeded  = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            \r\n            this.props.crudMaster(inputParam, masterData, \"openModal\",\"\",\"\",clearSelectedRecordField);\r\n        }\r\n    }else{\r\n        toast.warn(this.props.intl.formatMessage({id:\"IDS_ENTERVALIDEMAIL\"}));\r\n    }\r\n        // this.props.crudMaster(inputParam, this.props.Login.masterData,\"openModal\");\r\n    }\r\n    componentWillUnmount(){\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                 masterData :[], inputParam:undefined, operation:null,modalName:undefined\r\n                }\r\n            }\r\n        this.props.updateStore(updateInfo);\r\n    }    \r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster, fetchCourierById, validateEsignCredential, openCourierModal, updateStore })(injectIntl(Courier));"]},"metadata":{},"sourceType":"module"}