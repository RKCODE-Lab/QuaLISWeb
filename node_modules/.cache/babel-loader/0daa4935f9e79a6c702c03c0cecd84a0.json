{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\contactmaster\\\\Country.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Row, Col, FormGroup, FormLabel } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport AddCountry from './AddCountry';\nimport Esign from '../../pages/audittrail/Esign';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { ListWrapper, PrimaryHeader } from '../../components/client-group.styles';\nimport { MediaLabel } from '../../components/add-client.styles';\nimport rsapi from '../../rsapi';\nimport { callService, crudMaster, updateStore, validateEsignCredential, fetchRecord } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { getControlMap, showEsign } from '../../components/CommonScript';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Country extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.openModal = ncontrolCode => {\n      let selectedRecord = {\n        \"ndefaultstatus\": 4\n      }; //let selectedRecord = {};\n\n      if (this.props.Login.userInfo.nformcode === 12) {\n        selectedRecord = {\n          \"nsafetymarkermand\": 4\n        };\n      } else if (this.props.Login.userInfo.nformcode === 13) {\n        selectedRecord = {\n          \"nproducttypemand\": 4\n        };\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord,\n          operation: \"create\",\n          ncontrolCode,\n          selectedId: null,\n          openModal: true,\n          screenName: this.props.Login.inputParam.displayName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          selectedId = null;\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.expandChange = event => {\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\n      event.dataItem.expanded = !isExpanded;\n      this.setState({ ...this.props\n      });\n    };\n\n    this.detailBand = props => {\n      const Dataitem = props.dataItem;\n      const OptionalFieldList = [{\n        datafield: \"scountryshortname\",\n        Column: \"Country Short Name\"\n      }, {\n        datafield: \"stwocharcountry\",\n        Column: \"Two Char Country\"\n      }, {\n        datafield: \"sthreecharcountry\",\n        Column: \"Three Char Country\"\n      }];\n      return /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 17\n        }\n      }, OptionalFieldList.map(fields => {\n        return /*#__PURE__*/React.createElement(Col, {\n          md: \"6\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: fields.Column,\n          message: fields.Column,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 40\n          }\n        })), /*#__PURE__*/React.createElement(MediaLabel, {\n          className: \"readonly-text font-weight-normal\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 29\n          }\n        }, Dataitem[fields.datafield])));\n      }));\n    };\n\n    this.detailedFieldList = [{\n      dataField: \"scountryshortname\",\n      idsName: \"IDS_COUNTRYSHORTNAME\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"stwocharcountry\",\n      idsName: \"IDS_TWOCHARCOUNTRY\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"sthreecharcountry\",\n      idsName: \"IDS_THREECHARCOUNTRY\",\n      columnSize: \"4\"\n    }];\n\n    this.fetchRecord = (primaryKeyName, primaryKeyValue, operation) => {\n      const url = this.props.Login.inputParam.classUrl + \"/getActive\" + this.props.Login.inputParam.methodUrl + \"ById\";\n      rsapi.post(url, {\n        [primaryKeyName]: primaryKeyValue,\n        \"userinfo\": this.props.Login.userInfo\n      }).then(response => {\n        this.setState({\n          selectedRecord: response.data,\n          operation,\n          isOpen: true\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        //if (event.target.name === \"agree\") {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4; //}\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      if (deleteParam.selectedRecord.expanded !== undefined) {\n        delete deleteParam.selectedRecord.expanded;\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: deleteParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [deleteParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            selectedId: deleteParam.selectedRecord.ncountrycode,\n            screenName: deleteParam.screenName,\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit      \n      let dataState = undefined;\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        selectedId = this.props.Login.selectedId;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = this.state.selectedRecord; // this.extractedColumnList.map(item => {\n        //     let fieldName = item.dataField;\n        //     if (item.controlType === \"checkbox\") {\n        //         fieldName = item.controlName\n        //     }\n        //     return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\n        // })\n\n        this.fieldList.map(item => {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item];\n        });\n        dataState = this.state.dataState;\n      } else {\n        //add               \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        }; // this.extractedColumnList.map(item => {\n        //     let fieldName = item.dataField;\n        //     if (item.controlType === \"checkbox\") {\n        //         fieldName = item.controlName\n        //     }\n        //     return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\n        // })\n\n        this.fieldList.map(item => {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item];\n        });\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        selectedId,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation,\n            selectedId\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.fieldList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      isOpen: false,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_COUNTRYNAME\",\n      \"dataField\": \"scountryname\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_COUNTRYSHORTNAME\",\n      \"dataField\": \"scountryshortname\",\n      \"width\": \"200px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_TWOCHARCOUNTRY\",\n      \"dataField\": \"stwocharcountry\",\n      \"width\": \"200px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_THREECHARCOUNTRY\",\n      \"dataField\": \"sthreecharcountry\",\n      \"width\": \"200px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    } // { \"idsName\": \"IDS_POOLCOUNTRY\", \"dataField\": \"spoolcountrystatus\", \"width\": \"200px\", \"isIdsField\": true, \"controlName\": \"npoolcountry\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\n    // { \"idsName\": \"IDS_BATCHCOUNTRY\", \"dataField\": \"sbatchcountrystatus\", \"width\": \"200px\", \"isIdsField\": true, \"controlName\": \"nbatchcountry\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}\n    ];\n    this.validationColumnList = [{\n      \"idsName\": \"IDS_COUNTRYNAME\",\n      \"dataField\": \"scountryname\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_COUNTRYSHORTNAME\",\n      \"dataField\": \"scountryshortname\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_TWOCHARCOUNTRY\",\n      \"dataField\": \"stwocharcountry\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    } // { \"idsName\": \"IDS_THREECHARCOUNTRY\", \"dataField\": \"sthreecharcountry\", \"width\": \"200px\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\n    // { \"idsName\": \"IDS_POOLCOUNTRY\", \"dataField\": \"spoolcountrystatus\", \"width\": \"200px\", \"isIdsField\": true, \"controlName\": \"npoolcountry\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\n    // { \"idsName\": \"IDS_BATCHCOUNTRY\", \"dataField\": \"sbatchcountrystatus\", \"width\": \"200px\", \"isIdsField\": true, \"controlName\": \"nbatchcountry\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" }\n    ];\n    this.fieldList = [\"scountryname\", \"scountryshortname\", \"stwocharcountry\", \"sthreecharcountry\"];\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      operation: \"update\",\n      primaryKeyField: \"ncountrycode\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      screenName: \"Country\",\n      methodUrl: \"Country\",\n      operation: \"delete\"\n    };\n    const mandatoryFields = [];\n    this.validationColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(PrimaryHeader, {\n      className: \"d-flex justify-content-between mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 29\n      }\n    }), this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"ncountrycode\" // expandField=\"expanded\"\n      ,\n      detailedFieldList: this.detailedFieldList,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.fetchRecord,\n      editParam: editParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: deleteParam,\n      reloadData: this.reloadData,\n      addRecord: () => this.openModal(addId),\n      pageable: {\n        buttonCount: 4,\n        pageSizes: true\n      },\n      scrollable: \"scrollable\",\n      gridHeight: 600,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      hideColumnFilter: false,\n      selectedId: this.props.Login.selectedId,\n      hasDynamicColSize: true //isComponent={true}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddCountry, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        formatMessage: this.props.intl.formatMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  fetchRecord\n})(injectIntl(Country));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/contactmaster/Country.jsx"],"names":["React","connect","FormattedMessage","injectIntl","Row","Col","FormGroup","FormLabel","toast","process","DataGrid","AddCountry","Esign","SlideOutModal","ListWrapper","PrimaryHeader","MediaLabel","rsapi","callService","crudMaster","updateStore","validateEsignCredential","fetchRecord","DEFAULT_RETURN","getControlMap","showEsign","mapStateToProps","state","Login","Country","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","openModal","ncontrolCode","selectedRecord","userInfo","nformcode","updateInfo","typeName","operation","selectedId","screenName","inputParam","displayName","closeModal","loadEsign","expandChange","isExpanded","dataItem","expanded","undefined","aggregates","detailBand","Dataitem","OptionalFieldList","datafield","Column","map","fields","detailedFieldList","dataField","idsName","columnSize","primaryKeyName","primaryKeyValue","url","classUrl","methodUrl","post","then","response","isOpen","catch","error","status","message","warn","onInputOnChange","target","type","name","checked","value","deleteRecord","deleteParam","inputData","toLowerCase","userRoleControlRights","screenData","masterData","ncountrycode","reloadData","onSaveClick","saveType","formRef","fieldList","item","nmastersitecode","intl","formatMessage","id","validateEsign","sreason","password","createRef","extractedColumnList","skip","take","settings","parseInt","masterStatus","controlMap","Map","getDerivedStateFromProps","render","validationColumnList","addId","has","concat","get","ncontrolcode","editId","editParam","primaryKeyField","mandatoryFields","forEach","mandatory","push","buttonCount","pageSizes","componentDidUpdate","previousProps","Object","values"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Row, Col, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport AddCountry from './AddCountry';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { ListWrapper, PrimaryHeader } from '../../components/client-group.styles';\r\nimport { MediaLabel } from '../../components/add-client.styles';\r\nimport rsapi from '../../rsapi';\r\nimport { callService, crudMaster, updateStore, validateEsignCredential, fetchRecord } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { getControlMap, showEsign } from '../../components/CommonScript';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Country extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.fieldList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            isOpen: false,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n        };\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    openModal = (ncontrolCode) => {\r\n        let selectedRecord = { \"ndefaultstatus\": 4 };\r\n        //let selectedRecord = {};\r\n        if (this.props.Login.userInfo.nformcode === 12) {\r\n            selectedRecord = { \"nsafetymarkermand\": 4 }\r\n        }\r\n        else if (this.props.Login.userInfo.nformcode === 13) {\r\n            selectedRecord = { \"nproducttypemand\": 4 }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord, operation: \"create\", ncontrolCode, selectedId: null,\r\n                openModal: true, screenName: this.props.Login.inputParam.displayName\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                selectedId = null;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId = null;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_COUNTRYNAME\", \"dataField\": \"scountryname\", \"width\": \"200px\",\"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            { \"idsName\": \"IDS_COUNTRYSHORTNAME\", \"dataField\": \"scountryshortname\", \"width\": \"200px\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            { \"idsName\": \"IDS_TWOCHARCOUNTRY\", \"dataField\": \"stwocharcountry\", \"width\": \"200px\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            { \"idsName\": \"IDS_THREECHARCOUNTRY\", \"dataField\": \"sthreecharcountry\", \"width\": \"200px\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            // { \"idsName\": \"IDS_POOLCOUNTRY\", \"dataField\": \"spoolcountrystatus\", \"width\": \"200px\", \"isIdsField\": true, \"controlName\": \"npoolcountry\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            // { \"idsName\": \"IDS_BATCHCOUNTRY\", \"dataField\": \"sbatchcountrystatus\", \"width\": \"200px\", \"isIdsField\": true, \"controlName\": \"nbatchcountry\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}\r\n        ]\r\n\r\n        this.validationColumnList = [\r\n            { \"idsName\": \"IDS_COUNTRYNAME\", \"dataField\": \"scountryname\", \"width\": \"200px\",\"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            { \"idsName\": \"IDS_COUNTRYSHORTNAME\", \"dataField\": \"scountryshortname\", \"width\": \"150px\",\"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n             { \"idsName\": \"IDS_TWOCHARCOUNTRY\", \"dataField\": \"stwocharcountry\", \"width\": \"150px\",\"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            // { \"idsName\": \"IDS_THREECHARCOUNTRY\", \"dataField\": \"sthreecharcountry\", \"width\": \"200px\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            // { \"idsName\": \"IDS_POOLCOUNTRY\", \"dataField\": \"spoolcountrystatus\", \"width\": \"200px\", \"isIdsField\": true, \"controlName\": \"npoolcountry\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            // { \"idsName\": \"IDS_BATCHCOUNTRY\", \"dataField\": \"sbatchcountrystatus\", \"width\": \"200px\", \"isIdsField\": true, \"controlName\": \"nbatchcountry\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n        ]\r\n        \r\n        this.fieldList = [\"scountryname\", \"scountryshortname\", \"stwocharcountry\", \"sthreecharcountry\"];\r\n\r\n\r\n\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editParam = {\r\n            screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation: \"update\",\r\n            primaryKeyField: \"ncountrycode\", inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editId\r\n        };\r\n\r\n        const deleteParam = { screenName: \"Country\", methodUrl: \"Country\", operation: \"delete\" };\r\n        const mandatoryFields = [];\r\n        this.validationColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            <PrimaryHeader className=\"d-flex justify-content-between mb-3\">\r\n                                {/* <HeaderName className=\"header-primary-md\">\r\n                                    {this.props.Login.inputParam && this.props.Login.inputParam.displayName ?\r\n                                        <FormattedMessage id={this.props.Login.inputParam.displayName} /> : \"\"}\r\n                                </HeaderName> */}\r\n\r\n                                {/* <Button className=\"btn btn-user btn-primary-blue\"\r\n                                    hidden={this.props.Login.inputParam && this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                    onClick={() => this.openModal(addId)} role=\"button\">\r\n                                    <FontAwesomeIcon icon={faPlus} /> {}\r\n                                    <FormattedMessage id={\"IDS_ADD\"} defaultMessage='Add' />\r\n                                </Button> */}\r\n                            </PrimaryHeader>\r\n\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={\"ncountrycode\"}\r\n                                    // expandField=\"expanded\"\r\n                                    detailedFieldList={this.detailedFieldList}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.fetchRecord}\r\n                                    editParam={editParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    deleteParam={deleteParam}\r\n                                    reloadData={this.reloadData}\r\n                                    addRecord={() => this.openModal(addId)}\r\n                                    pageable={{ buttonCount: 4, pageSizes: true }}\r\n                                    scrollable={\"scrollable\"}\r\n                                    gridHeight={600}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    hideColumnFilter={false}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    hasDynamicColSize={true}\r\n                                //isComponent={true}\r\n\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddCountry\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n\r\n                            />}\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    expandChange = (event) => {\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined ?\r\n                event.dataItem.aggregates : event.dataItem.expanded;\r\n        event.dataItem.expanded = !isExpanded;\r\n        this.setState({ ...this.props });\r\n    }\r\n    detailBand = (props) => {\r\n\r\n        const Dataitem = props.dataItem\r\n        const OptionalFieldList = [\r\n            { datafield: \"scountryshortname\", Column: \"Country Short Name\" },\r\n            { datafield: \"stwocharcountry\", Column: \"Two Char Country\" },\r\n            { datafield: \"sthreecharcountry\", Column: \"Three Char Country\" },\r\n\r\n        ];\r\n        return (<Row>\r\n            {OptionalFieldList.map((fields) => {\r\n                return (\r\n                    <Col md='6'>\r\n                        <FormGroup>\r\n                            <FormLabel><FormattedMessage id={fields.Column} message={fields.Column} /></FormLabel>\r\n                            <MediaLabel className=\"readonly-text font-weight-normal\">{Dataitem[fields.datafield]}</MediaLabel>\r\n                        </FormGroup>\r\n                    </Col>\r\n                )\r\n            })\r\n            }\r\n        </Row>)\r\n    }\r\n    detailedFieldList = [\r\n        { dataField: \"scountryshortname\", idsName: \"IDS_COUNTRYSHORTNAME\", columnSize:\"4\"},\r\n        { dataField: \"stwocharcountry\", idsName: \"IDS_TWOCHARCOUNTRY\",columnSize:\"4\" },\r\n        { dataField: \"sthreecharcountry\", idsName: \"IDS_THREECHARCOUNTRY\",columnSize:\"4\" },\r\n\r\n    ];\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.settings ? parseInt(this.props.settings[14]) : 5 }\r\n                }\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    fetchRecord = (primaryKeyName, primaryKeyValue, operation) => {\r\n\r\n\r\n        const url = this.props.Login.inputParam.classUrl + \"/getActive\" + this.props.Login.inputParam.methodUrl + \"ById\";\r\n        rsapi.post(url, { [primaryKeyName]: primaryKeyValue, \"userinfo\": this.props.Login.userInfo })\r\n            .then(response => {\r\n\r\n                this.setState({ selectedRecord: response.data, operation, isOpen: true });\r\n            })\r\n            .catch(error => {\r\n\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            //if (event.target.name === \"agree\") {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            //}\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        if (deleteParam.selectedRecord.expanded !== undefined) {\r\n            delete deleteParam.selectedRecord.expanded\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: deleteParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n\r\n                [deleteParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n\r\n            operation: deleteParam.operation\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, selectedId: deleteParam.selectedRecord.ncountrycode,\r\n\r\n                    screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        //add / edit      \r\n        let dataState = undefined;\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let selectedId = null;\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            selectedId = this.props.Login.selectedId;\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = this.state.selectedRecord;\r\n            // this.extractedColumnList.map(item => {\r\n            //     let fieldName = item.dataField;\r\n            //     if (item.controlType === \"checkbox\") {\r\n            //         fieldName = item.controlName\r\n            //     }\r\n            //     return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\r\n            // })\r\n\r\n            this.fieldList.map(item => {\r\n                return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item]\r\n            })\r\n            dataState = this.state.dataState;\r\n        }\r\n        else {\r\n            //add               \r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n            // this.extractedColumnList.map(item => {\r\n            //     let fieldName = item.dataField;\r\n            //     if (item.controlType === \"checkbox\") {\r\n            //         fieldName = item.controlName\r\n            //     }\r\n            //     return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][fieldName] = this.state.selectedRecord[fieldName] ? this.state.selectedRecord[fieldName] : \"\";\r\n            // })\r\n\r\n            this.fieldList.map(item => {\r\n                return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item]\r\n            })\r\n        }\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData, selectedId,\r\n            operation: this.props.Login.operation, saveType, formRef, dataState\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: this.props.Login.operation, selectedId\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential,\r\n    fetchRecord\r\n})(injectIntl(Country));"]},"metadata":{},"sourceType":"module"}