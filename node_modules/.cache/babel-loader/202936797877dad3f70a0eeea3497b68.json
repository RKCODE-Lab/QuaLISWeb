{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\templatemaster\\\\templatemaster.component.jsx\";\nimport FormInput from '../../components/form-input/form-input.component';\nimport { Row, Col, Card, Nav, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTrashAlt, faThumbsUp } from '@fortawesome/free-solid-svg-icons';\nimport { connect } from 'react-redux';\nimport '../../assets/./styles/tree.css';\nimport React, { Component } from 'react';\nimport { NavHeader } from '../../components/sidebar/sidebar.styles';\nimport { ContentPanel, ListWrapper } from './../userroletemplate/userroletemplate.styles';\nimport { callService, crudMaster, updateStore, addModel, validateEsignCredential, fetchRecordByTemplateID, getTemplateMasterTree, filterColumnData, getSampleTypeProductCategory, getStudyTemplateByCategoryType } from '../../actions';\nimport { injectIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { sortData, getControlMap, showEsign, constructOptionList } from '../../components/CommonScript';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport TemplateMasterFilter from './../templatemaster/TemplateMasterFilter';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport Esign from '../audittrail/Esign'; // import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\n\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { transactionStatus } from '../../components/Enumeration'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { Affix } from 'rsuite';\nimport ReactTooltip from 'react-tooltip';\n\nclass templatemaster extends Component {\n  constructor(props) {\n    super(props);\n\n    this.closeModel = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\") {\n          loadEsign = false;\n          openModal = false;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (event, fieldName) => {\n      //if (event !== null) {\n      const filterSelectedRecord = this.state.filterSelectedRecord || {};\n      filterSelectedRecord[fieldName] = event;\n\n      if (fieldName === \"sampleType\") {\n        const url = 'templatemaster/getSampleTypeComboChange';\n        const inputData = {\n          userinfo: this.props.Login.userInfo,\n          nsampletypecode: event.item[\"nsampletypecode\"]\n        };\n        filterSelectedRecord[\"sampletype\"] = event;\n        const inputParam = {\n          inputData,\n          url\n        };\n        this.props.getSampleTypeProductCategory(filterSelectedRecord, inputParam, this.props.Login.masterData);\n      } else {\n        //categoryType\n        const masterData = this.props.Login.masterData;\n        masterData[\"SelectedCategoryFilter\"] = event.item; //masterData[\"SelectedCategory\"] = event.item;\n\n        masterData[\"SelectedSample\"] = this.props.Login.masterData.SelectedSampleFilter; //masterData[\"selectedValues\"].ncategorycode = event.value;\n\n        filterSelectedRecord[\"categorytype\"] = event;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            masterData,\n            filterSelectedRecord\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteRecord(\"delete\", deleteId));\n    };\n\n    this.onFilterSubmit = () => {\n      const filterSelectedRecord = this.state.filterSelectedRecord || {};\n      const url = 'templatemaster/getTemplateMasterVersion';\n      const dummyNumber = -12;\n      const inputData = {\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: filterSelectedRecord[\"sampletype\"] ? filterSelectedRecord[\"sampletype\"].value : dummyNumber,\n        ncategorycode: filterSelectedRecord[\"categorytype\"] ? filterSelectedRecord[\"categorytype\"].value : dummyNumber,\n        nformcode: filterSelectedRecord[\"categorytype\"] ? filterSelectedRecord[\"categorytype\"][\"item\"][\"nformcode\"] : dummyNumber\n      };\n      const inputParam = {\n        url,\n        inputData\n      };\n      this.props.getStudyTemplateByCategoryType(inputParam, this.props.Login.masterData, filterSelectedRecord, true);\n    };\n\n    this.approveRecord = (operation, ncontrolCode) => {\n      const selectedRecord = this.props.Login.selectedRecord ? this.props.Login.selectedRecord : \"\"; ///const selected = this.props.Login.masterData[\"selected\"];\n\n      const selected = this.props.Login.masterData.SelectedTreeVersionTemplate;\n\n      if (selectedRecord[\"ntransactionstatus\"] === transactionStatus.APPROVED || selectedRecord[\"ntransactionstatus\"] === transactionStatus.RETIRED) {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTRECORDTOAPPROVE\"\n        }));\n      } else {\n        let inputData = [];\n        inputData = {\n          \"userinfo\": this.props.Login.userInfo,\n          \"ntreeversiontempcode\": selected.ntreeversiontempcode,\n          // \"ncategorycode\": this.props.Login.masterData.selectedValues[\"ncategorycode\"],\n          // \"nformcode\": this.props.Login.masterData.selectedValues[\"nformcode\"],\n          \"ncategorycode\": parseInt(this.props.Login.masterData.SelectedCategory[this.props.Login.masterData.SelectedCategoryFilterTextLabel]),\n          \"nformcode\": parseInt(this.props.Login.masterData.SelectedCategory.nformcode),\n          \"ntemplatecode\": selected.ntemplatecode ? selected.ntemplatecode : undefined\n        };\n        const postParam = {\n          inputListName: \"lstTreeversionTemplate\",\n          //selectedObject: \"selectedTempVersion\",\n          selectedObject: \"SelectedTreeVersionTemplate\",\n          primaryKeyField: \"ntreeversiontempcode\",\n          primaryKeyValue: selected.ntreeversiontempcode,\n          fetchUrl: \"templatemaster/getTemplateVersionById\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        const inputParam = {\n          methodUrl: \"TemplateMasterVersion\",\n          classUrl: this.props.Login.inputParam.classUrl,\n          inputData: inputData,\n          operation: operation,\n          postParam\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              openModal: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              operation: operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.deleteRecord = (operation, ncontrolCode) => {\n      // const selected = this.props.Login.masterData[\"selected\"];\n      const selected = this.props.Login.masterData.SelectedTreeVersionTemplate;\n      const selectedLevel = this.props.Login.masterData.lstTemplateMasterlevel;\n\n      if (this.props.Login.selectedRecord[\"ntransactionstatus\"] === transactionStatus.APPROVED || this.props.Login.selectedRecord[\"ntransactionstatus\"] === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTRECORDTODELETE\"\n        }));\n      } else {\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData = {\n          \"userinfo\": this.props.Login.userInfo,\n          \"ntreeversiontempcode\": selected.ntreeversiontempcode,\n          \"ntreecontrolcode\": selectedLevel.map(item => item.ntreecontrolcode).join(\",\"),\n          // \"ncategorycode\": this.props.Login.masterData.selectedValues[\"ncategorycode\"],\n          // \"nformcode\": this.props.Login.masterData.selectedValues[\"nformcode\"]\n          \"ncategorycode\": parseInt(this.props.Login.masterData.SelectedCategory[this.props.Login.masterData.SelectedCategoryFilterTextLabel]),\n          \"nformcode\": parseInt(this.props.Login.masterData.SelectedCategory.nformcode)\n        };\n        const postParam = {\n          inputListName: \"lstTreeversionTemplate\",\n          //selectedObject: \"selectedTempVersion\",\n          selectedObject: \"SelectedTreeVersionTemplate\",\n          primaryKeyField: \"ntreeversiontempcode\",\n          primaryKeyValue: selected.ntreeversiontempcode,\n          fetchUrl: \"templatemaster/getTemplateVersionById\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        const inputParam = {\n          methodUrl: \"TemplateMaster\",\n          classUrl: this.props.Login.inputParam.classUrl,\n          inputData: inputData,\n          operation: operation,\n          postParam\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              openModal: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              operation: operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.saveTMTreetemplate = (saveType, formRef) => {\n      let listTemplateMasterTree = [];\n      let levelno = 0; //const selected = this.props.Login.masterData[\"selected\"];\n\n      const selected = this.props.Login.masterData.SelectedTreeVersionTemplate;\n      const selectedLevel = this.props.Login.masterData.lstTemplateMasterlevel;\n\n      for (let index = 0; index < this.props.Login.totalLevel; index++) {\n        levelno = index + 1;\n\n        if (this.props.Login.selectedRecord[index]) {\n          listTemplateMasterTree.push(this.props.Login.selectedRecord[index].toString());\n        } else {\n          return toast.info(this.props.intl.formatMessage({\n            id: \"IDS_PLESEENTERTHELEVEL\"\n          }) + levelno);\n        }\n      }\n\n      let inputData = [];\n      let methodUrl = \"\";\n      inputData = {\n        \"userinfo\": this.props.Login.userInfo,\n        \"ncategorycode\": parseInt(this.props.Login.masterData.SelectedCategory[this.props.Login.masterData.SelectedCategoryFilterTextLabel]),\n        \"nformcode\": parseInt(this.props.Login.masterData.SelectedCategory.nformcode),\n        \"ntreecontrolcode\": selectedLevel.map(item => item.ntreecontrolcode).join(\",\"),\n        \"ntemplatecode\": selected ? selected.ntemplatecode : -1,\n        \"ntreeversiontempcode\": selected ? selected.ntreeversiontempcode : -1,\n        \"specname\": this.props.Login.selectedInput.sversiondescription,\n        \"treetemptranstestgroup\": listTemplateMasterTree,\n        \"nsampletypecode\": parseInt(this.props.Login.masterData.SelectedSample[\"nsampletypecode\"])\n      };\n      let postParam = undefined;\n\n      if (this.props.Login.operation === \"create\") {\n        methodUrl = \"Templatemaster\";\n      } else {\n        methodUrl = \"EditTemplatemasterSubmit\";\n        postParam = {\n          inputListName: \"lstTreeversionTemplate\",\n          selectedObject: \"selectedTempVersion\",\n          primaryKeyField: \"ntreeversiontempcode\"\n        };\n      }\n\n      const inputParam = {\n        methodUrl: methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        searchRef: this.searchRef,\n        formRef,\n        postParam\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onInputOnChange = (event, levelno) => {\n      const selectedRecord = this.props.Login.selectedRecord || {};\n      const selectedInput = this.props.Login.selectedInput || {};\n\n      if (levelno === \"version\") {\n        selectedInput[event.target.name] = event.target.value;\n      } else {\n        if (event.target.value.trim() !== \"\") {\n          selectedRecord[levelno] = event.target.value;\n        } else {\n          selectedRecord[levelno] = undefined;\n        }\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedInput,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.reloadData = () => {\n      console.log(\"stdy pla reload:\", this.props.Login.masterData, this.state.selectedRecord);\n      this.searchRef.current.value = \"\";\n      const url = 'templatemaster/getTemplateMasterVersion';\n      const dummyNumber = -12;\n      const inputData = {\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.SelectedSample ? this.props.Login.masterData.SelectedSample.ssampletypename : dummyNumber,\n        ncategorycode: this.props.Login.masterData.SelectedCategory ? this.props.Login.masterData.SelectedCategory[this.props.Login.masterData.SelectedCategoryFilterTextLabel] : dummyNumber,\n        nformcode: this.props.Login.masterData.SelectedCategory ? this.props.Login.masterData.SelectedCategory.nformcode : dummyNumber\n      };\n      const masterData = { ...this.props.Login.masterData,\n        searchedData: undefined\n      };\n      const inputParam = {\n        url,\n        inputData\n      };\n      this.props.getStudyTemplateByCategoryType(inputParam, masterData, this.state.selectedRecord, false); //--------------------------------------------------\n      // this.searchRef.current.value = \"\";\n      // const inputParam = {\n      //     inputData: { \"userinfo\": this.props.Login.userInfo },\n      //     classUrl: \"templatemaster\",\n      //     methodUrl: \"TemplateMaster\",\n      //     userInfo: this.props.Login.userInfo,\n      //     displayName: \"IDS_STUDYPLANTEMPLATE\"\n      // };\n      // this.props.callService(inputParam);\n      //////////////////---------------------------\n    };\n\n    this.state = {\n      openModal: false,\n      userRoleControlRights: [],\n      templateTreeData: [],\n      TMvalues: [{\n        TMvalue: \"\"\n      }],\n      selected: {},\n      selectedValues: undefined,\n      error: \"\",\n      controlMap: new Map()\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.searchFieldList = [\"stransdisplaystatus\", \"sversionstatus\", \"sversiondescription\"];\n  }\n\n  appendInputLevel(e) {\n    if (this.props.Login.selectedRecord[this.props.Login.id] !== undefined) {\n      if (this.props.Login.id < 9) {\n        const totalLevel = this.props.Login.totalLevel ? this.props.Login.totalLevel : 1;\n        let id = parseInt(this.props.Login.id) + 1;\n        let totalid = totalLevel;\n\n        if (totalid === id) {\n          var newInput = `input-${totalLevel}`;\n          var templateTreeData = this.props.Login.templateTreeData.concat([newInput]);\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              templateTreeData,\n              totalLevel: totalLevel + 1,\n              id\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    } else {\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_PLSENTERTEMPLATELEVEL\"\n      }));\n    }\n  }\n\n  removeTree(event, i) {\n    const selectedRecord = this.props.Login.selectedRecord ? this.props.Login.selectedRecord : \"\";\n    const totalLevel = this.props.Login.totalLevel ? this.props.Login.totalLevel : 1;\n    let templateTreeData = this.props.Login.templateTreeData;\n    templateTreeData.splice(i, 10);\n\n    if (selectedRecord[i]) {\n      for (let j = i; j < totalLevel; j++) {\n        delete selectedRecord[j];\n      }\n\n      ;\n    }\n\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        templateTreeData,\n        selectedRecord,\n        totalLevel: i,\n        id: i - 1\n      }\n    };\n    this.props.updateStore(updateInfo);\n  } // onComboChange = (event, fieldname) => {\n  //     if (event !== null) {\n  //         let uRL = \"\";\n  //         let inputData = [];\n  //         if (fieldname === \"sampleType\") {\n  //             uRL = 'templatemaster/getSampleTypeProductCatrgory';\n  //             inputData = {\n  //                 userinfo: this.props.Login.userInfo,\n  //                 nsampletypecode: event.item[\"nsampletypecode\"]\n  //             }\n  //         }\n  //         else {\n  //             uRL = 'templatemaster/getTemplateMasterVersion';\n  //             inputData = {\n  //                 userinfo: this.props.Login.userInfo,\n  //                 nsampletypecode: event.item[\"nsampletypecode\"],\n  //                 ncategorycode: event.item[this.props.Login.masterData.categoryValuemember],\n  //                 nformcode: event.item[\"nformcode\"]\n  //             }\n  //         }\n  //         rsapi.post(uRL, inputData)\n  //             .then(response => {\n  //                 const categroyLable = response.data.lstcategory ? Object.keys(response.data.lstcategory)[0] : this.props.Login.masterData.categroyLable;\n  //                 const categoryValuemember = response.data.lstcategory ? Object.keys(response.data.lstcategory[categroyLable][0])[0] : this.props.Login.masterData.categoryValuemember;\n  //                 const categoryDisplaymemeber = response.data.lstcategory ? Object.keys(response.data.lstcategory[categroyLable][0])[1] : this.props.Login.masterData.categoryDisplaymemeber;\n  //                 const selectedValues = this.props.Login.masterData.selectedValues || [];\n  //                 const selectedRecord = this.props.Login.selectedRecord || {};\n  //                 let Taglstcategory;\n  //                 if (response.data.lstcategory) {\n  //                     Taglstcategory = constructOptionList(response.data.lstcategory[categroyLable] || [], categoryValuemember,\n  //                         categoryDisplaymemeber, categoryValuemember, \"ascending\", undefined);\n  //                 }\n  //                 // let TaglstSampleType;\n  //                 // if (response.data.lstSampleType) {\n  //                 //     TaglstSampleType = constructOptionList(response.data.lstSampleType || [], \"nsampletypecode\",\n  //                 //         \"ssampletypename\", \"nsampletypecode\", \"ascending\", undefined);\n  //                 // }\n  //                 selectedValues[\"nsampletypecode\"] = event.item[\"nsampletypecode\"] ? event.item[\"nsampletypecode\"] : this.props.Login.masterData.selectedValues[\"nsampletypecode\"];\n  //                 selectedValues[\"nformcode\"] = (fieldname === \"sampleType\") ? response.data.lstcategory ?\n  //                     response.data.lstcategory[categroyLable][0][\"nformcode\"] : event.item[\"nformcode\"] ? event.item[\"nformcode\"] :\n  //                         this.props.Login.masterData.selectedValues[\"nformcode\"] : this.props.Login.masterData.selectedValues[\"nformcode\"];\n  //                 selectedValues[\"ncategorycode\"] = (fieldname === \"sampleType\") ? Taglstcategory ?\n  //                     Taglstcategory.get(\"OptionList\")[0].item[categoryValuemember] : this.props.Login.masterData.selectedValues[\"ncategorycode\"]\n  //                         ? event.item[this.props.Login.masterData.categoryValuemember] : \"\" :\n  //                     event.item[this.props.Login.masterData.categoryValuemember] ? event.item[this.props.Login.masterData.categoryValuemember] : \"\";\n  //                 if (response.data.lstTreeversionTemplate) {\n  //                     sortData(response.data.lstTreeversionTemplate, \"descending\", \"ntreeversiontempcode\")\n  //                 }\n  //                 if (response.data.lstTemplateMasterlevel) {\n  //                     sortData(response.data.lstTemplateMasterlevel, \"ascending\", \"nlevelno\")\n  //                 }\n  //                 selectedRecord[\"ntransactionstatus\"] = response.data.lstTreeversionTemplate.length > 0 ? response.data.lstTreeversionTemplate[0][\"ntransactionstatus\"] : \"\"\n  //                 this.setState({\n  //                     selectedSampleType: (fieldname === \"sampleType\" ? parseInt(event.value) : this.state.selectedSampleType)\n  //                 });\n  //                 this.props.Login.masterData[\"defaultsampletype\"] = (fieldname === \"sampleType\") ? event : response.data.lstSampleType ? response.data.lstSampleType.length > 0 ?\n  //                     {\n  //                         \"value\": response.data.lstSampleType[0][\"nsampletypecode\"],\n  //                         \"label\": response.data.lstSampleType[0][\"ssampletypename\"]\n  //                     } : this.props.Login.masterData.defaultsampletype : this.props.Login.masterData.defaultsampletype;\n  //                 // this.props.Login.masterData[\"lstSampleType\"] = TaglstSampleType ? TaglstSampleType.get(\"OptionList\") : this.props.Login.masterData.lstSampleType;\n  //                 this.props.Login.masterData[\"lstcategory\"] = Taglstcategory ? Taglstcategory.get(\"OptionList\") : fieldname === \"cateogryType\" ? this.props.Login.masterData[\"lstcategory\"] : \"\";\n  //                 this.props.Login.masterData[\"lstTreeversionTemplate\"] = response.data.lstTreeversionTemplate ? response.data.lstTreeversionTemplate : \"\";\n  //                 this.props.Login.masterData[\"lstTemplateMasterlevel\"] = response.data.lstTemplateMasterlevel ? response.data.lstTemplateMasterlevel : \"\";\n  //                 this.props.Login.masterData[\"selected\"] = response.data.lstTreeversionTemplate ? response.data.lstTreeversionTemplate.length > 0 ?\n  //                     response.data.lstTreeversionTemplate[0] : {} : this.props.Login.masterData[\"selected\"];\n  //                 this.props.Login.masterData[\"selectedValues\"] = selectedValues;\n  //                 this.props.Login.masterData[\"defaultCatogoryType\"] = (fieldname === \"cateogryType\") ? event : Taglstcategory ? Taglstcategory.get(\"OptionList\") ? {\n  //                     \"value\": Taglstcategory.get(\"OptionList\")[0].item[categoryValuemember],\n  //                     \"label\": Taglstcategory.get(\"OptionList\")[0].item[categoryDisplaymemeber]\n  //                 } : this.props.Login.masterData.defaultCatogoryType : this.props.Login.masterData.defaultCatogoryType;\n  //                 this.props.Login.masterData[\"categroyLable\"] = categroyLable;\n  //                 this.props.Login.masterData[\"categoryValuemember\"] = categoryValuemember;\n  //                 this.props.Login.masterData[\"categoryDisplaymemeber\"] = categoryDisplaymemeber;\n  //                 this.props.Login.masterData[\"searchedData\"] = undefined;\n  //                 this.searchRef.current.value = \"\";\n  //                 const updateInfo = {\n  //                     typeName: DEFAULT_RETURN,\n  //                     data: { masterData: this.props.Login.masterData, selectedRecord }\n  //                 }\n  //                 this.props.updateStore(updateInfo);\n  //             })\n  //             .catch(error => {\n  //                 if (error.response.status === 500) {\n  //                     toast.error(error.message);\n  //                 }\n  //                 else {\n  //                     toast.info(error.response.data);\n  //                 }\n  //             })\n  //     }\n  // }\n\n\n  render() {\n    const {\n      masterData,\n      userInfo,\n      openModal,\n      templateTreeData,\n      selectedInput,\n      selectedRecord,\n      totalLevel\n    } = this.props.Login;\n    let {\n      lstTreeversionTemplate,\n      //selected, \n      lstTemplateMasterlevel\n    } = this.props.Login.masterData;\n    const addId = this.state.controlMap.has(\"AddTempalateMaster\") && this.state.controlMap.get(\"AddTempalateMaster\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditTempalateMaster\") && this.state.controlMap.get(\"EditTempalateMaster\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteTempalateMaster\") && this.state.controlMap.get(\"DeleteTempalateMaster\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"ApproveTempalateMaster\") && this.state.controlMap.get(\"ApproveTempalateMaster\").ncontrolcode;\n    lstTemplateMasterlevel = lstTemplateMasterlevel ? sortData(lstTemplateMasterlevel, 'ascending', 'nlevelno') : [];\n    const filterParam = {\n      inputListName: \"lstTreeversionTemplate\",\n      selectedObject: \"selectedTempVersion\",\n      primaryKeyField: \"ntreeversiontempcode\",\n      fetchUrl: \"templatemaster/getTemplateVersionById\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    const mandatoryFields = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TEMPLATENAME\",\n      \"dataField\": \"sversiondescription\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    const breadCrumbData = this.generateBreadCrumData() || [];\n    const selected = this.props.Login.masterData.SelectedTreeVersionTemplate;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      masterData: masterData,\n      formatMessage: this.props.intl.formatMessage,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_TEMPLATE\"\n      }),\n      masterList: this.props.Login.masterData.searchedData || lstTreeversionTemplate,\n      userInfo: this.props.Login.userInfo,\n      getMasterDetail: TMvalue => this.props.getTemplateMasterTree(TMvalue, masterData, userInfo) //selectedMaster={this.props.Login.masterData.selected}\n      ,\n      selectedMaster: selected,\n      primaryKeyField: \"ntreeversiontempcode\",\n      mainField: \"sversiondescription\",\n      firstField: \"sversiondescription\",\n      secondField: \"stransdisplaystatus\",\n      isIDSField: \"No\",\n      openModal: () => this.props.addModel(\"create\", addId, this.props.Login.masterData.lstcategory, selectedInput) // needAccordianFilter={true}\n      ,\n      userRoleControlRights: this.state.userRoleControlRights,\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      searchRef: this.searchRef,\n      addId: addId,\n      reloadData: this.reloadData,\n      hidePaging: true,\n      needAccordianFilter: false,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      filterComponent: [{\n        \"IDS_TEMPLATEMASTERFILTER\": /*#__PURE__*/React.createElement(TemplateMasterFilter, {\n          formatMessage: this.props.intl.formatMessage,\n          filterSampleType: this.state.TaglstSampleType || [],\n          filterCateogryType: this.state.Taglstcategory || [],\n          catogryValuemember: this.props.Login.masterData.SelectedCategoryFilterTextLabel || \"\",\n          categoryDisplaymemeber: this.props.Login.masterData.SelectedCategoryFilterValueLabel || \"\" //labelName={this.state.selectedRecord.categroyLable || \"\"}\n          ,\n          labelName: this.props.Login.masterData.lstcategory && Object.keys(this.props.Login.masterData.lstcategory)[0] || this.state.filterSelectedRecord && this.state.filterSelectedRecord.categroyLable,\n          selectedInput: this.state.selectedInput || [],\n          onComboChange: this.onComboChange,\n          filterSelectedRecord: this.state.filterSelectedRecord || {},\n          defaultsampletype: this.props.Login.masterData.SelectedSampleFilter && {\n            label: this.props.Login.masterData.SelectedSampleFilter.ssampletypename,\n            value: this.props.Login.masterData.SelectedSampleFilter.nsampletypecode,\n            item: this.props.Login.masterData.SelectedSampleFilter\n          },\n          defaultCatogoryType: this.props.Login.masterData.SelectedCategoryFilter && {\n            label: this.props.Login.masterData.SelectedCategoryFilter[this.props.Login.masterData.SelectedCategoryFilterValueLabel],\n            value: this.props.Login.masterData.SelectedCategoryFilter[this.props.Login.masterData.SelectedCategoryFilterTextLabel],\n            item: this.props.Login.masterData.SelectedCategoryFilter\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 29\n      }\n    })), this.props.Login.masterData.selectedTempVersion && selected ? /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 53\n      }\n    }, selected.sversiondescription))), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      className: \"readonly-text font-weight-normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      className: \"d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"product-title-sub\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 57\n      }\n    }, \"Version : \", selected.nversionno === -1 ? \"-\" : selected.nversionno), /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${selected.ntransactionstatus === transactionStatus.DRAFT ? \"outline-secondary\" : selected.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-danger\"} btn-sm mx-md-3 mx-sm-2`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 57\n      }\n    }, selected.stransdisplaystatus)), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(Nav, {\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\" //onClick={() => this.props.fetchRecordByTemplateID(\"ntreeversiontempcode\", selected.ntreeversiontempcode, \"update\", selectedRecord, selectedInput, userInfo, editId)}\n      ,\n      onClick: () => this.props.fetchRecordByTemplateID(\"ntreeversiontempcode\", selected.ntreeversiontempcode, \"update\", {\n        ntransactionstatus: this.props.Login.masterData[\"lstTemplateMasterlevel\"][0][\"ntransactionstatus\"]\n      }, {}, userInfo, editId),\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 \",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.ConfirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      onClick: () => this.approveRecord(\"approve\", approveId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 65\n      }\n    }))))))))), /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 34\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"tree-view1 border-left tree-left \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 45\n      }\n    }, lstTemplateMasterlevel ? lstTemplateMasterlevel.map((input, i) => /*#__PURE__*/React.createElement(ListWrapper, {\n      key: i,\n      className: \"form-label-group tree-level list_get\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(NavHeader, {\n      className: \"line\",\n      style: {\n        width: (i + 1) * 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 57\n      }\n    }, \" \"), /*#__PURE__*/React.createElement(NavHeader, {\n      id: i,\n      value: totalLevel,\n      className: \"add_field_button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 57\n      }\n    }, \"+\"), /*#__PURE__*/React.createElement(NavHeader, {\n      className: \"levelcolour\",\n      md: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 57\n      }\n    }, \"Level \", i + 1), /*#__PURE__*/React.createElement(ListWrapper, {\n      style: {\n        marginLeft: (i + 8) * 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      className: \"input_custom\",\n      value: input.slabelname,\n      id: \"levelname\",\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 61\n      }\n    })))) : \"\"))))) : \"\")), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      operation: this.props.Login.operation,\n      onSaveClick: this.saveTMTreetemplate,\n      validateEsign: this.validateEsign,\n      esign: this.props.Login.loadEsign,\n      screenName: \"IDS_TEMPLATEMASTER\",\n      closeModal: this.closeModel,\n      selectedRecord: this.props.Login.loadEsign ? this.state.selectedRecord : selectedInput,\n      mandatoryFields: mandatoryFields,\n      show: openModal,\n      inputParam: this.props.Login.inputParam,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation //formatMessage={this.props.intl.formatMessage}\n        ,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATENAME\"\n        }),\n        name: \"sversiondescription\",\n        as: \"text\",\n        onChange: event => this.onInputOnChange(event, \"version\"),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATENAME\"\n        }),\n        defaultValue: selectedInput ? selectedInput[\"sversiondescription\"] : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(ListWrapper, {\n        className: \"tree-view border-left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 37\n        }\n      }, templateTreeData ? templateTreeData.map((input, i) => /*#__PURE__*/React.createElement(ListWrapper, {\n        className: \"form-label-group tree-level\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(NavHeader, {\n        className: \"line\",\n        style: {\n          width: (i + 1) * 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 53\n        }\n      }, \" \"), /*#__PURE__*/React.createElement(NavHeader, {\n        id: i,\n        value: totalLevel,\n        className: \"add_field_button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 53\n        }\n      }, \"+\"), /*#__PURE__*/React.createElement(NavHeader, {\n        md: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 53\n        }\n      }, \"level \", /*#__PURE__*/React.createElement(NavHeader, {\n        className: \"tree-value\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 77\n        }\n      }, i + 1)), /*#__PURE__*/React.createElement(Nav, {\n        className: \"btn mr-2 action-icons-wrap\",\n        style: {\n          float: \"right\",\n          visibility: i === 0 ? 'hidden' : 'visible'\n        },\n        onClick: event => this.removeTree(event, i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faTrashAlt,\n        className: \"ActionIconColor\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 57\n        }\n      })), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        style: {\n          marginLeft: (i + 3) * 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        name: \"slabelname\",\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event, i),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_ENTERTEMPLATELEVEL\"\n        }),\n        defaultValue: selectedRecord ? selectedRecord[i] : \"\",\n        maxLength: 50,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 65\n        }\n      })))))) : \"\"), /*#__PURE__*/React.createElement(NavHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: e => this.appendInputLevel(e),\n        className: \"btn btn-circle solid-blue\",\n        role: \"button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 41\n        }\n      }, \"+\")))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.filterSelectedRecord !== previousProps.Login.filterSelectedRecord) {\n      this.setState({\n        filterSelectedRecord: this.props.Login.filterSelectedRecord\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      if (this.props.Login.masterData !== previousProps.Login.masterData) {\n        const userRoleControlRights = this.state.userRoleControlRights || [];\n        let controlMap = this.state.controlMap || {};\n        let filterSelectedRecord = this.state.filterSelectedRecord || {}; // if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) \n        // {\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode); //}\n\n        const selectedValues = {};\n        const categroyLable = this.props.Login.masterData.categroyLable ? this.props.Login.masterData.categroyLable : this.props.Login.masterData.lstcategory ? Object.keys(this.props.Login.masterData.lstcategory)[0] : \"\";\n        const categoryValuemember = this.props.Login.masterData.SelectedCategoryFilterTextLabel;\n        const categoryDisplaymemeber = this.props.Login.masterData.SelectedCategoryFilterValueLabel;\n        filterSelectedRecord[\"ntransactionstatus\"] = this.props.Login.masterData.lstTemplateMasterlevel ? this.props.Login.masterData.lstTemplateMasterlevel.length > 0 ? this.props.Login.masterData.lstTemplateMasterlevel[0][\"ntransactionstatus\"] : this.props.Login.filterSelectedRecord ? this.props.Login.filterSelectedRecord[\"ntransactionstatus\"] : [] : [];\n        let TaglstSampleType = [];\n        let Taglstcategory = [];\n\n        if (this.props.Login.masterData.lstSampleType && !this.props.Login.masterData.lstSampleType[0].item) {\n          const sampleTypeMap = constructOptionList(this.props.Login.masterData.lstSampleType || [], \"nsampletypecode\", \"ssampletypename\", \"nsampletypecode\", \"ascending\", undefined);\n          TaglstSampleType = sampleTypeMap.get(\"OptionList\");\n        }\n\n        if (this.props.Login.masterData.lstcategory && this.props.Login.masterData.lstcategory[categroyLable]) {\n          const categoryTypeMap = this.props.Login.masterData.lstcategory[categroyLable] ? constructOptionList(this.props.Login.masterData.lstcategory[categroyLable] || [], categoryValuemember, categoryDisplaymemeber, categoryValuemember, \"ascending\", undefined) : this.props.Login.masterData.lstcategory;\n          Taglstcategory = categoryTypeMap.get(\"OptionList\");\n        }\n\n        if (this.props.Login.masterData.lstTemplateMasterlevel) {\n          sortData(this.props.Login.masterData.lstTemplateMasterlevel, \"ascending\", \"nlevelno\");\n        }\n\n        selectedValues[\"ncategorycode\"] = this.props.Login.masterData.selectedValues ? this.props.Login.masterData.selectedValues[\"ncategorycode\"] : Taglstcategory.length > 0 ? Taglstcategory[0].item[categoryValuemember] : -2;\n        selectedValues[\"nformcode\"] = this.props.Login.masterData.selectedValues ? this.props.Login.masterData.selectedValues[\"nformcode\"] : Taglstcategory.length > 0 ? Taglstcategory[0].item[\"nformcode\"] : -2;\n        selectedValues[\"nsampletypecode\"] = TaglstSampleType.length > 0 ? TaglstSampleType[0].item[\"nsampletypecode\"] : this.props.Login.masterData.selectedValues ? this.props.Login.masterData.selectedValues[\"nsampletypecode\"] : -2;\n        filterSelectedRecord[\"categroyLable\"] = categroyLable;\n        filterSelectedRecord[\"categoryValuemember\"] = categoryValuemember;\n        filterSelectedRecord[\"categoryDisplaymemeber\"] = categoryDisplaymemeber;\n        filterSelectedRecord[\"sampletype\"] = TaglstSampleType[0];\n        filterSelectedRecord[\"categorytype\"] = Taglstcategory[0];\n        this.setState({\n          TaglstSampleType,\n          Taglstcategory,\n          filterSelectedRecord,\n          userRoleControlRights: userRoleControlRights ? userRoleControlRights : this.state.userRoleControlRights,\n          controlMap: controlMap ? controlMap : this.state.controlMap\n        });\n      }\n    } else {\n      if (this.props.Login.masterData.lstcategory !== previousProps.Login.masterData.lstcategory) {\n        this.setState({\n          Taglstcategory: this.props.Login.Taglstcategory\n        });\n      }\n    }\n  } // componentDidUpdate1(previousProps) {\n  //     if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n  //         this.setState({ selectedRecord: this.props.Login.selectedRecord });\n  //     }\n  //     if (this.props.Login.masterData !== previousProps.Login.masterData) {\n  //         // if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n  //         //     this.setState({ selectedRecord: this.props.Login.selectedRecord });\n  //         // }\n  //         const userRoleControlRights = this.state.userRoleControlRights || [];\n  //         let controlMap = this.state.controlMap || {};\n  //         let selectedRecord = this.state.selectedRecord || {};\n  //         if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n  //             if (this.props.Login.userRoleControlRights) {\n  //                 this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\n  //                     userRoleControlRights.push(item.ncontrolcode))\n  //             }\n  //             controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\n  //             // selectedRecord[\"defaultsampletype\"] =  this.props.Login.masterData && this.props.Login.masterData.defaultsampletype ? this.props.Login.masterData.defaultsampletype : TaglstSampleType ? {\n  //             //     \"value\": TaglstSampleType.get(\"OptionList\")[0].item[\"nsampletypecode\"],\n  //             //     \"label\": TaglstSampleType.get(\"OptionList\")[0].item[\"ssampletypename\"]\n  //             // } : \"\";\n  //             // selectedRecord[\"defaultCatogoryType\"] = this.props.Login.masterData && this.props.Login.masterData.defaultCatogoryType && this.props.Login.masterData.defaultCatogoryType !== \"\" ?\n  //             //                 this.props.Login.masterData.defaultCatogoryType : Taglstcategory ? Taglstcategory.get(\"OptionList\").length > 0 ? {\n  //             //                     \"value\": Taglstcategory.get(\"OptionList\")[0].item[categoryValuemember],\n  //             //                     \"label\": Taglstcategory.get(\"OptionList\")[0].item[categoryDisplaymemeber]\n  //             //                 } : \"\" : \"\";\n  //         }\n  //        // const selectedRecord = {}; \n  //         const selectedInput = {}; const selectedValues = {};\n  //         const categroyLable = this.props.Login.masterData.categroyLable ? this.props.Login.masterData.categroyLable : this.props.Login.masterData.lstcategory ? Object.keys(this.props.Login.masterData.lstcategory)[0] : \"\";\n  //         const categoryValuemember = this.props.Login.masterData.categoryValuemember ? this.props.Login.masterData.categoryValuemember : this.props.Login.masterData.lstcategory ? Object.keys(this.props.Login.masterData.lstcategory[categroyLable][0])[0] : \"\";\n  //         const categoryDisplaymemeber = this.props.Login.masterData.categoryDisplaymemeber ? this.props.Login.masterData.categoryDisplaymemeber : this.props.Login.masterData.lstcategory ? Object.keys(this.props.Login.masterData.lstcategory[categroyLable][0])[1] : \"\";\n  //         selectedRecord[\"ntransactionstatus\"] = this.props.Login.masterData.lstTemplateMasterlevel ? this.props.Login.masterData.lstTemplateMasterlevel.length > 0 ?\n  //             this.props.Login.masterData.lstTemplateMasterlevel[0][\"ntransactionstatus\"] :\n  //             this.props.Login.selectedRecord ? this.props.Login.selectedRecord[\"ntransactionstatus\"] : [] : [];\n  //         let TaglstSampleType;\n  //         let Taglstcategory;\n  //         if (this.props.Login.masterData.lstSampleType && !this.props.Login.masterData.lstSampleType[0].item) {\n  //             TaglstSampleType = constructOptionList(this.props.Login.masterData.lstSampleType || [], \"nsampletypecode\",\n  //                 \"ssampletypename\", \"nsampletypecode\", \"ascending\", undefined);\n  //         }\n  //         if (this.props.Login.masterData.lstcategory && this.props.Login.masterData.lstcategory[categroyLable]) {\n  //             Taglstcategory = this.props.Login.masterData.lstcategory[categroyLable] ? constructOptionList(this.props.Login.masterData.lstcategory[categroyLable]\n  //                 || [], categoryValuemember, categoryDisplaymemeber, categoryValuemember, \"ascending\", undefined) : this.props.Login.masterData.lstcategory;\n  //         }\n  //         if (this.props.Login.masterData.lstTemplateMasterlevel) {\n  //             sortData(this.props.Login.masterData.lstTemplateMasterlevel, \"ascending\", \"nlevelno\")\n  //         }\n  //         selectedValues[\"ncategorycode\"] = this.props.Login.masterData.selectedValues ? this.props.Login.masterData.selectedValues[\"ncategorycode\"] : Taglstcategory ?\n  //             Taglstcategory.get(\"OptionList\")[0].item[categoryValuemember] : -2;\n  //         selectedValues[\"nformcode\"] = this.props.Login.masterData.selectedValues ? this.props.Login.masterData.selectedValues[\"nformcode\"] : Taglstcategory ?\n  //             Taglstcategory.get(\"OptionList\")[0].item[\"nformcode\"] : -2;\n  //         selectedValues[\"nsampletypecode\"] = TaglstSampleType ? TaglstSampleType.get(\"OptionList\").length > 0\n  //             ? TaglstSampleType.get(\"OptionList\")[0].item[\"nsampletypecode\"] : this.props.Login.masterData.selectedValues\n  //                 ? this.props.Login.masterData.selectedValues[\"nsampletypecode\"] : -2 : this.props.Login.masterData.selectedValues ? this.props.Login.masterData.selectedValues[\"nsampletypecode\"] : -2;\n  //             // selectedRecord[\"defaultsampletype\"] = this.state.selectedRecord ?  this.state.selectedRecord.defaultsampletype \n  //             //         : this.props.Login.masterData.defaultsampletype ? this.props.Login.masterData.defaultsampletype : TaglstSampleType ? {\n  //             //     \"value\": TaglstSampleType.get(\"OptionList\")[0].item[\"nsampletypecode\"],\n  //             //     \"label\": TaglstSampleType.get(\"OptionList\")[0].item[\"ssampletypename\"], item:TaglstSampleType.get(\"OptionList\")[0]\n  //             // } : \"\";\n  //             // selectedRecord[\"defaultCatogoryType\"] = this.state.selectedRecord ?  this.state.selectedRecord.defaultCatogoryType \n  //             // : this.props.Login.masterData.defaultCatogoryType && this.props.Login.masterData.defaultCatogoryType !== \"\" ?\n  //             //                 this.props.Login.masterData.defaultCatogoryType : Taglstcategory ? Taglstcategory.get(\"OptionList\").length > 0 ? {\n  //             //                     \"value\": Taglstcategory.get(\"OptionList\")[0].item[categoryValuemember],\n  //             //                     \"label\": Taglstcategory.get(\"OptionList\")[0].item[categoryDisplaymemeber], item: Taglstcategory.get(\"OptionList\")[0]\n  //             //                 } : \"\" : \"\";\n  //         let openModal = false;\n  //         this.props.Login.masterData[\"lstcategory\"] = Taglstcategory ? Taglstcategory.get(\"OptionList\") : this.props.Login.masterData.lstcategory;\n  //         this.props.Login.masterData[\"lstTreeversionTemplate\"] = this.props.Login.masterData.lstTreeversionTemplate ? this.props.Login.masterData.lstTreeversionTemplate : this.props.Login.masterData[\"lstTreeversionTemplate\"];\n  //         this.props.Login.masterData[\"lstTemplateMasterlevel\"] = this.props.Login.masterData.lstTemplateMasterlevel ? this.props.Login.masterData.lstTemplateMasterlevel : this.props.Login.masterData[\"lstTemplateMasterlevel\"];\n  //         this.props.Login.masterData[\"selected\"] = this.props.Login.masterData[\"selectedTempVersion\"] ? this.props.Login.masterData[\"selectedTempVersion\"] :\n  //             this.props.Login.masterData[\"selected\"];\n  //        // this.props.Login.masterData[\"selectedValues\"] = selectedValues;\n  //         this.props.Login.masterData[\"defaultCatogoryType\"] = this.props.Login.masterData.defaultCatogoryType \n  //              && this.props.Login.masterData.defaultCatogoryType !== \"\" ?\n  //             this.props.Login.masterData.defaultCatogoryType : Taglstcategory ? Taglstcategory.get(\"OptionList\").length > 0 ? {\n  //                 \"value\": Taglstcategory.get(\"OptionList\")[0].item[categoryValuemember],\n  //                 \"label\": Taglstcategory.get(\"OptionList\")[0].item[categoryDisplaymemeber],\n  //                 \"item\": Taglstcategory.get(\"OptionList\")[0].item\n  //             } : \"\" : \"\";\n  //         this.props.Login.masterData[\"categroyLable\"] = categroyLable;\n  //         this.props.Login.masterData[\"categoryValuemember\"] = categoryValuemember;\n  //         this.props.Login.masterData[\"categoryDisplaymemeber\"] = categoryDisplaymemeber;\n  //         this.props.Login.masterData[\"lstSampleType\"] = TaglstSampleType ? TaglstSampleType.get(\"OptionList\") : this.props.Login.masterData.lstSampleType ? this.props.Login.masterData.lstSampleType : -2;\n  //         this.props.Login.masterData[\"defaultsampletype\"] = this.props.Login.masterData.defaultsampletype ? this.props.Login.masterData.defaultsampletype : TaglstSampleType ? {\n  //             \"value\": TaglstSampleType.get(\"OptionList\")[0].item[\"nsampletypecode\"],\n  //             \"label\": TaglstSampleType.get(\"OptionList\")[0].item[\"ssampletypename\"],\n  //             \"item\": TaglstSampleType.get(\"OptionList\")[0].item\n  //         } : -2;\n  //         //let filterData = this.generateBreadCrumData();\n  //         this.setState({//filterData,\n  //             selectedRecord, userRoleControlRights: userRoleControlRights ? userRoleControlRights : this.state.userRoleControlRights,\n  //             controlMap: controlMap ? controlMap : this.state.controlMap,\n  //             selected: this.props.Login.masterData.lstTreeversionTemplate ? this.props.Login.masterData.lstTreeversionTemplate.length > 0 ?\n  //                 this.props.Login.masterData.lstTreeversionTemplate[0] : {} : this.state.selected,\n  //             selectedSampleType: TaglstSampleType ? TaglstSampleType.get(\"OptionList\")[0][\"nsampletypecode\"] : this.state.selectedSampleType,\n  //         });\n  //         const updateInfo = {\n  //             typeName: DEFAULT_RETURN,\n  //             data: { openModal, masterData: this.props.Login.masterData, selectedRecord, selectedInput }\n  //         }\n  //         this.props.updateStore(updateInfo);\n  //     }\n  // }\n\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData) {\n      breadCrumbData.push({\n        \"label\": \"IDS_SAMPLETYPE\",\n        // \"value\": this.props.Login.masterData.defaultsampletype && this.props.Login.masterData.defaultsampletype.label || '-';\n        \"value\": this.props.Login.masterData.SelectedSample && this.props.Login.masterData.SelectedSample.ssampletypename || '-'\n      }, {\n        \"label\": \"IDS_SAMPLECATEGORY\",\n        //  \"value\": this.props.Login.masterData.defaultCatogoryType && this.props.Login.masterData.defaultCatogoryType.label || '-'\n        \"value\": this.props.Login.masterData.SelectedCategory && this.props.Login.masterData.SelectedCategory[this.props.Login.masterData.SelectedCategoryFilterValueLabel] || '-'\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n        props.Login.openModal = false;\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n      props.Login.openModal = false;\n    }\n\n    if (!props.Login.loadEsign) {\n      return {\n        selectedRecord: { ...state.selectedRecord,\n          agree: 4,\n          esigncomments: '',\n          esignpassword: ''\n        }\n      };\n    }\n\n    return null;\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nconst mapStatetoProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStatetoProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  addModel,\n  fetchRecordByTemplateID,\n  getTemplateMasterTree,\n  validateEsignCredential,\n  filterColumnData,\n  getSampleTypeProductCategory,\n  getStudyTemplateByCategoryType\n})(injectIntl(templatemaster));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/templatemaster/templatemaster.component.jsx"],"names":["FormInput","Row","Col","Card","Nav","Button","FontAwesomeIcon","faPencilAlt","faTrashAlt","faThumbsUp","connect","React","Component","NavHeader","ContentPanel","ListWrapper","callService","crudMaster","updateStore","addModel","validateEsignCredential","fetchRecordByTemplateID","getTemplateMasterTree","filterColumnData","getSampleTypeProductCategory","getStudyTemplateByCategoryType","injectIntl","toast","sortData","getControlMap","showEsign","constructOptionList","ListMaster","TemplateMasterFilter","SlideOutModal","DEFAULT_RETURN","Esign","ConfirmMessage","transactionStatus","BreadcrumbComponent","Affix","ReactTooltip","templatemaster","constructor","props","closeModel","loadEsign","Login","openModal","operation","updateInfo","typeName","data","onComboChange","event","fieldName","filterSelectedRecord","state","url","inputData","userinfo","userInfo","nsampletypecode","item","inputParam","masterData","SelectedSampleFilter","openFilter","showFilter","closeFilter","ConfirmDelete","deleteId","confirmMessage","confirm","intl","formatMessage","id","deleteRecord","onFilterSubmit","dummyNumber","value","ncategorycode","nformcode","approveRecord","ncontrolCode","selectedRecord","selected","SelectedTreeVersionTemplate","APPROVED","RETIRED","info","ntreeversiontempcode","parseInt","SelectedCategory","SelectedCategoryFilterTextLabel","ntemplatecode","undefined","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","fetchUrl","fecthInputObject","methodUrl","classUrl","userRoleControlRights","screenData","selectedLevel","lstTemplateMasterlevel","warn","map","ntreecontrolcode","join","saveTMTreetemplate","saveType","formRef","listTemplateMasterTree","levelno","index","totalLevel","push","toString","selectedInput","sversiondescription","SelectedSample","searchRef","onInputOnChange","target","name","trim","onEsignInputOnChange","type","checked","setState","validateEsign","sreason","password","reloadData","console","log","current","ssampletypename","searchedData","templateTreeData","TMvalues","TMvalue","selectedValues","error","controlMap","Map","createRef","searchFieldList","appendInputLevel","e","totalid","newInput","concat","removeTree","i","splice","j","render","lstTreeversionTemplate","addId","has","get","ncontrolcode","editId","approveId","filterParam","mandatoryFields","breadCrumbData","generateBreadCrumData","length","lstcategory","TaglstSampleType","Taglstcategory","SelectedCategoryFilterValueLabel","Object","keys","categroyLable","label","SelectedCategoryFilter","selectedTempVersion","nversionno","ntransactionstatus","DRAFT","stransdisplaystatus","float","indexOf","input","width","marginLeft","slabelname","visibility","componentDidUpdate","previousProps","values","categoryValuemember","categoryDisplaymemeber","lstSampleType","sampleTypeMap","categoryTypeMap","getDerivedStateFromProps","masterStatus","errorCode","agree","esigncomments","esignpassword","componentWillUnmount","mapStatetoProps"],"mappings":"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","sourcesContent":["import FormInput from '../../components/form-input/form-input.component';\r\nimport { Row, Col, Card, Nav, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrashAlt, faThumbsUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { connect } from 'react-redux';\r\nimport '../../assets/./styles/tree.css';\r\nimport React, { Component } from 'react';\r\nimport { NavHeader } from '../../components/sidebar/sidebar.styles';\r\nimport { ContentPanel, ListWrapper } from './../userroletemplate/userroletemplate.styles';\r\nimport {\r\n    callService, crudMaster, updateStore, addModel, validateEsignCredential,\r\n    fetchRecordByTemplateID, getTemplateMasterTree, filterColumnData, getSampleTypeProductCategory,\r\n    getStudyTemplateByCategoryType\r\n} from '../../actions';\r\nimport { injectIntl } from 'react-intl';\r\n\r\nimport { toast } from 'react-toastify';\r\nimport { sortData, getControlMap, showEsign, constructOptionList } from '../../components/CommonScript';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport TemplateMasterFilter from './../templatemaster/TemplateMasterFilter';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport Esign from '../audittrail/Esign';\r\n// import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { Affix } from 'rsuite';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nclass templatemaster extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            openModal: false,\r\n            userRoleControlRights: [],\r\n            templateTreeData: [],\r\n            TMvalues: [{ TMvalue: \"\" }],\r\n            selected: {},\r\n            selectedValues: undefined,\r\n            error: \"\",\r\n            controlMap: new Map()\r\n        }\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.searchFieldList = [\"stransdisplaystatus\", \"sversionstatus\", \"sversiondescription\"];\r\n    }\r\n\r\n\r\n    closeModel = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    appendInputLevel(e) {\r\n        if (this.props.Login.selectedRecord[this.props.Login.id] !== undefined) {\r\n            if (this.props.Login.id < 9) {\r\n                const totalLevel = this.props.Login.totalLevel ? this.props.Login.totalLevel : 1;\r\n                let id = parseInt(this.props.Login.id) + 1;\r\n                let totalid = totalLevel;\r\n                if (totalid === id) {\r\n                    var newInput = `input-${totalLevel}`;\r\n                    var templateTreeData = this.props.Login.templateTreeData.concat([newInput])\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { templateTreeData, totalLevel: totalLevel + 1, id }\r\n                    }\r\n\r\n                    this.props.updateStore(updateInfo)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_PLSENTERTEMPLATELEVEL\" }));\r\n        }\r\n    }\r\n\r\n    removeTree(event, i) {\r\n        const selectedRecord = this.props.Login.selectedRecord ? this.props.Login.selectedRecord : \"\";\r\n        const totalLevel = this.props.Login.totalLevel ? this.props.Login.totalLevel : 1;\r\n        let templateTreeData = this.props.Login.templateTreeData\r\n        templateTreeData.splice(i, 10);\r\n\r\n        if (selectedRecord[i]) {\r\n            for (let j = i; j < totalLevel; j++) {\r\n                delete selectedRecord[j];\r\n            };\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { templateTreeData, selectedRecord, totalLevel: i, id: i - 1 }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    // onComboChange = (event, fieldname) => {\r\n    //     if (event !== null) {\r\n    //         let uRL = \"\";\r\n    //         let inputData = [];\r\n    //         if (fieldname === \"sampleType\") {\r\n    //             uRL = 'templatemaster/getSampleTypeProductCatrgory';\r\n    //             inputData = {\r\n    //                 userinfo: this.props.Login.userInfo,\r\n    //                 nsampletypecode: event.item[\"nsampletypecode\"]\r\n    //             }\r\n    //         }\r\n    //         else {\r\n    //             uRL = 'templatemaster/getTemplateMasterVersion';\r\n    //             inputData = {\r\n    //                 userinfo: this.props.Login.userInfo,\r\n    //                 nsampletypecode: event.item[\"nsampletypecode\"],\r\n    //                 ncategorycode: event.item[this.props.Login.masterData.categoryValuemember],\r\n    //                 nformcode: event.item[\"nformcode\"]\r\n    //             }\r\n    //         }\r\n    //         rsapi.post(uRL, inputData)\r\n    //             .then(response => {\r\n    //                 const categroyLable = response.data.lstcategory ? Object.keys(response.data.lstcategory)[0] : this.props.Login.masterData.categroyLable;\r\n    //                 const categoryValuemember = response.data.lstcategory ? Object.keys(response.data.lstcategory[categroyLable][0])[0] : this.props.Login.masterData.categoryValuemember;\r\n    //                 const categoryDisplaymemeber = response.data.lstcategory ? Object.keys(response.data.lstcategory[categroyLable][0])[1] : this.props.Login.masterData.categoryDisplaymemeber;\r\n    //                 const selectedValues = this.props.Login.masterData.selectedValues || [];\r\n    //                 const selectedRecord = this.props.Login.selectedRecord || {};\r\n    //                 let Taglstcategory;\r\n\r\n    //                 if (response.data.lstcategory) {\r\n    //                     Taglstcategory = constructOptionList(response.data.lstcategory[categroyLable] || [], categoryValuemember,\r\n    //                         categoryDisplaymemeber, categoryValuemember, \"ascending\", undefined);\r\n    //                 }\r\n    //                 // let TaglstSampleType;\r\n    //                 // if (response.data.lstSampleType) {\r\n    //                 //     TaglstSampleType = constructOptionList(response.data.lstSampleType || [], \"nsampletypecode\",\r\n    //                 //         \"ssampletypename\", \"nsampletypecode\", \"ascending\", undefined);\r\n    //                 // }\r\n\r\n    //                 selectedValues[\"nsampletypecode\"] = event.item[\"nsampletypecode\"] ? event.item[\"nsampletypecode\"] : this.props.Login.masterData.selectedValues[\"nsampletypecode\"];\r\n    //                 selectedValues[\"nformcode\"] = (fieldname === \"sampleType\") ? response.data.lstcategory ?\r\n    //                     response.data.lstcategory[categroyLable][0][\"nformcode\"] : event.item[\"nformcode\"] ? event.item[\"nformcode\"] :\r\n    //                         this.props.Login.masterData.selectedValues[\"nformcode\"] : this.props.Login.masterData.selectedValues[\"nformcode\"];\r\n\r\n    //                 selectedValues[\"ncategorycode\"] = (fieldname === \"sampleType\") ? Taglstcategory ?\r\n    //                     Taglstcategory.get(\"OptionList\")[0].item[categoryValuemember] : this.props.Login.masterData.selectedValues[\"ncategorycode\"]\r\n    //                         ? event.item[this.props.Login.masterData.categoryValuemember] : \"\" :\r\n    //                     event.item[this.props.Login.masterData.categoryValuemember] ? event.item[this.props.Login.masterData.categoryValuemember] : \"\";\r\n\r\n    //                 if (response.data.lstTreeversionTemplate) {\r\n    //                     sortData(response.data.lstTreeversionTemplate, \"descending\", \"ntreeversiontempcode\")\r\n    //                 }\r\n    //                 if (response.data.lstTemplateMasterlevel) {\r\n    //                     sortData(response.data.lstTemplateMasterlevel, \"ascending\", \"nlevelno\")\r\n    //                 }\r\n\r\n    //                 selectedRecord[\"ntransactionstatus\"] = response.data.lstTreeversionTemplate.length > 0 ? response.data.lstTreeversionTemplate[0][\"ntransactionstatus\"] : \"\"\r\n\r\n    //                 this.setState({\r\n    //                     selectedSampleType: (fieldname === \"sampleType\" ? parseInt(event.value) : this.state.selectedSampleType)\r\n\r\n    //                 });\r\n    //                 this.props.Login.masterData[\"defaultsampletype\"] = (fieldname === \"sampleType\") ? event : response.data.lstSampleType ? response.data.lstSampleType.length > 0 ?\r\n    //                     {\r\n    //                         \"value\": response.data.lstSampleType[0][\"nsampletypecode\"],\r\n    //                         \"label\": response.data.lstSampleType[0][\"ssampletypename\"]\r\n    //                     } : this.props.Login.masterData.defaultsampletype : this.props.Login.masterData.defaultsampletype;\r\n    //                 // this.props.Login.masterData[\"lstSampleType\"] = TaglstSampleType ? TaglstSampleType.get(\"OptionList\") : this.props.Login.masterData.lstSampleType;\r\n    //                 this.props.Login.masterData[\"lstcategory\"] = Taglstcategory ? Taglstcategory.get(\"OptionList\") : fieldname === \"cateogryType\" ? this.props.Login.masterData[\"lstcategory\"] : \"\";\r\n    //                 this.props.Login.masterData[\"lstTreeversionTemplate\"] = response.data.lstTreeversionTemplate ? response.data.lstTreeversionTemplate : \"\";\r\n    //                 this.props.Login.masterData[\"lstTemplateMasterlevel\"] = response.data.lstTemplateMasterlevel ? response.data.lstTemplateMasterlevel : \"\";\r\n    //                 this.props.Login.masterData[\"selected\"] = response.data.lstTreeversionTemplate ? response.data.lstTreeversionTemplate.length > 0 ?\r\n    //                     response.data.lstTreeversionTemplate[0] : {} : this.props.Login.masterData[\"selected\"];\r\n    //                 this.props.Login.masterData[\"selectedValues\"] = selectedValues;\r\n\r\n    //                 this.props.Login.masterData[\"defaultCatogoryType\"] = (fieldname === \"cateogryType\") ? event : Taglstcategory ? Taglstcategory.get(\"OptionList\") ? {\r\n    //                     \"value\": Taglstcategory.get(\"OptionList\")[0].item[categoryValuemember],\r\n    //                     \"label\": Taglstcategory.get(\"OptionList\")[0].item[categoryDisplaymemeber]\r\n    //                 } : this.props.Login.masterData.defaultCatogoryType : this.props.Login.masterData.defaultCatogoryType;\r\n\r\n    //                 this.props.Login.masterData[\"categroyLable\"] = categroyLable;\r\n    //                 this.props.Login.masterData[\"categoryValuemember\"] = categoryValuemember;\r\n    //                 this.props.Login.masterData[\"categoryDisplaymemeber\"] = categoryDisplaymemeber;\r\n    //                 this.props.Login.masterData[\"searchedData\"] = undefined;\r\n    //                 this.searchRef.current.value = \"\";\r\n    //                 const updateInfo = {\r\n    //                     typeName: DEFAULT_RETURN,\r\n    //                     data: { masterData: this.props.Login.masterData, selectedRecord }\r\n    //                 }\r\n    //                 this.props.updateStore(updateInfo);\r\n    //             })\r\n    //             .catch(error => {\r\n\r\n    //                 if (error.response.status === 500) {\r\n    //                     toast.error(error.message);\r\n    //                 }\r\n    //                 else {\r\n    //                     toast.info(error.response.data);\r\n    //                 }\r\n    //             })\r\n    //     }\r\n    // }\r\n\r\n    onComboChange = (event, fieldName) => {\r\n        //if (event !== null) {\r\n        const filterSelectedRecord = this.state.filterSelectedRecord || {};\r\n        filterSelectedRecord[fieldName] = event;\r\n\r\n        if (fieldName === \"sampleType\") {\r\n            const url = 'templatemaster/getSampleTypeComboChange';\r\n            const inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: event.item[\"nsampletypecode\"]\r\n            }\r\n            filterSelectedRecord[\"sampletype\"] = event;\r\n            const inputParam = { inputData, url };\r\n            this.props.getSampleTypeProductCategory(filterSelectedRecord, inputParam,\r\n                this.props.Login.masterData)\r\n\r\n        }\r\n        else {\r\n\r\n            //categoryType\r\n\r\n            const masterData = this.props.Login.masterData;\r\n            masterData[\"SelectedCategoryFilter\"] = event.item;\r\n            //masterData[\"SelectedCategory\"] = event.item;\r\n            masterData[\"SelectedSample\"] = this.props.Login.masterData.SelectedSampleFilter;\r\n            //masterData[\"selectedValues\"].ncategorycode = event.value;\r\n            filterSelectedRecord[\"categorytype\"] = event;\r\n            const updateInfo = { typeName: DEFAULT_RETURN, data: { masterData, filterSelectedRecord } };\r\n\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { masterData, userInfo, openModal, templateTreeData, selectedInput, selectedRecord, totalLevel } = this.props.Login;\r\n        let { lstTreeversionTemplate, //selected, \r\n            lstTemplateMasterlevel } = this.props.Login.masterData;\r\n        const addId = this.state.controlMap.has(\"AddTempalateMaster\") && this.state.controlMap.get(\"AddTempalateMaster\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditTempalateMaster\") && this.state.controlMap.get(\"EditTempalateMaster\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteTempalateMaster\") && this.state.controlMap.get(\"DeleteTempalateMaster\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"ApproveTempalateMaster\") && this.state.controlMap.get(\"ApproveTempalateMaster\").ncontrolcode;\r\n        lstTemplateMasterlevel = lstTemplateMasterlevel ? sortData(lstTemplateMasterlevel,'ascending','nlevelno') :[];\r\n\r\n        const filterParam = {\r\n            inputListName: \"lstTreeversionTemplate\", selectedObject: \"selectedTempVersion\", primaryKeyField: \"ntreeversiontempcode\",\r\n            fetchUrl: \"templatemaster/getTemplateVersionById\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData, searchFieldList: this.searchFieldList\r\n        };\r\n        const mandatoryFields = [\r\n            { \"mandatory\": true, \"idsName\": \"IDS_TEMPLATENAME\", \"dataField\": \"sversiondescription\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}\r\n\r\n        ];\r\n\r\n        const breadCrumbData = this.generateBreadCrumData() || [];\r\n\r\n        const selected = this.props.Login.masterData.SelectedTreeVersionTemplate;\r\n\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n\r\n                    }\r\n                    {/* <Preloader loading={loading} /> */}\r\n                    {/* <div className=\"client-listing-wrap mtop-4\"> */}\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n                            <ListMaster\r\n                                masterData={masterData}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_TEMPLATE\" })}\r\n                                masterList={this.props.Login.masterData.searchedData || lstTreeversionTemplate}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                getMasterDetail={(TMvalue) => this.props.getTemplateMasterTree(TMvalue, masterData, userInfo)}\r\n                                //selectedMaster={this.props.Login.masterData.selected}\r\n                                selectedMaster={selected}\r\n                                primaryKeyField=\"ntreeversiontempcode\"\r\n                                mainField=\"sversiondescription\"\r\n                                firstField=\"sversiondescription\"\r\n                                secondField=\"stransdisplaystatus\"\r\n                                isIDSField=\"No\"\r\n                                openModal={() => this.props.addModel(\"create\", addId, this.props.Login.masterData.lstcategory, selectedInput)}\r\n                                // needAccordianFilter={true}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                searchRef={this.searchRef}\r\n                                addId={addId}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={true}\r\n\r\n\r\n                                needAccordianFilter={false}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_TEMPLATEMASTERFILTER\":\r\n                                            <TemplateMasterFilter\r\n                                                formatMessage={this.props.intl.formatMessage}\r\n                                                filterSampleType={this.state.TaglstSampleType || []}\r\n                                                filterCateogryType={this.state.Taglstcategory || []}\r\n                                                catogryValuemember={this.props.Login.masterData.SelectedCategoryFilterTextLabel || \"\"}\r\n                                                categoryDisplaymemeber={this.props.Login.masterData.SelectedCategoryFilterValueLabel || \"\"}\r\n                                                //labelName={this.state.selectedRecord.categroyLable || \"\"}\r\n                                                labelName={(this.props.Login.masterData.lstcategory && Object.keys(this.props.Login.masterData.lstcategory)[0])\r\n                                                    || (this.state.filterSelectedRecord && this.state.filterSelectedRecord.categroyLable)}\r\n                                                selectedInput={this.state.selectedInput || []}\r\n                                                onComboChange={this.onComboChange}\r\n                                                filterSelectedRecord={this.state.filterSelectedRecord || {}}\r\n                                                defaultsampletype={this.props.Login.masterData.SelectedSampleFilter\r\n                                                    && {\r\n                                                        label: this.props.Login.masterData.SelectedSampleFilter.ssampletypename,\r\n                                                    value: this.props.Login.masterData.SelectedSampleFilter.nsampletypecode,\r\n                                                    item: this.props.Login.masterData.SelectedSampleFilter\r\n                                                }}\r\n\r\n                                                defaultCatogoryType={this.props.Login.masterData.SelectedCategoryFilter\r\n                                                    && {\r\n                                                        label: this.props.Login.masterData.SelectedCategoryFilter[this.props.Login.masterData.SelectedCategoryFilterValueLabel],\r\n                                                    value: this.props.Login.masterData.SelectedCategoryFilter[this.props.Login.masterData.SelectedCategoryFilterTextLabel],\r\n                                                    item: this.props.Login.masterData.SelectedCategoryFilter\r\n                                                }}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n\r\n                        {/* {this.props.Login.masterData.selectedTempVersion && lstTreeversionTemplate && lstTreeversionTemplate.length > 0 ? */}\r\n\r\n                        {this.props.Login.masterData.selectedTempVersion && selected ?\r\n                            <Col md={8}>\r\n                                <ListWrapper className=\"panel-main-content\">\r\n                                    <Card className=\"border-0\">\r\n                                        {/* {(selected) && */}\r\n                                        <Card.Header>\r\n                                            <Card.Title>\r\n                                                <>\r\n                                                    <h1 className=\"product-title-main\">{selected.sversiondescription}</h1>\r\n                                                </>\r\n                                            </Card.Title>\r\n                                            <Card.Subtitle className=\"readonly-text font-weight-normal\">\r\n                                                <Row>\r\n                                                    <Col md={8} className=\"d-flex\">\r\n                                                        <h3 className=\"product-title-sub\">Version : {selected.nversionno === -1 ? \"-\" : selected.nversionno}</h3>\r\n                                                        <span className={`btn btn-outlined ${selected.ntransactionstatus === transactionStatus.DRAFT ? \"outline-secondary\" : selected.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-danger\"} btn-sm mx-md-3 mx-sm-2`}>\r\n                                                            {selected.stransdisplaystatus}</span>\r\n                                                    </Col>\r\n                                                    <Col md={4}>\r\n                                                        <ReactTooltip place=\"bottom\" globalEventOff='click' />\r\n                                                        {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                        <Nav style={{ float: \"right\" }}>\r\n                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                data-for=\"tooltip_list_wrap\"\r\n                                                                //onClick={() => this.props.fetchRecordByTemplateID(\"ntreeversiontempcode\", selected.ntreeversiontempcode, \"update\", selectedRecord, selectedInput, userInfo, editId)}\r\n                                                                onClick={() => this.props.fetchRecordByTemplateID(\"ntreeversiontempcode\", selected.ntreeversiontempcode, \"update\",\r\n                                                                    { ntransactionstatus: this.props.Login.masterData[\"lstTemplateMasterlevel\"][0][\"ntransactionstatus\"] },\r\n                                                                    {}, userInfo, editId)}\r\n\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(editId) === -1}>\r\n                                                                <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 \"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                data-for=\"tooltip_list_wrap\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                onClick={() => this.ConfirmDelete(deleteId)}>\r\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n\r\n                                                                {/* <ConfirmDialog\r\n                                                                            name=\"deleteMessage\"\r\n                                                                            message=\"Are you sure?\"\r\n                                                                            doLabel=\"Ok\"\r\n                                                                            doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                            icon={faTrashAlt}\r\n                                                                            // title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                            hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                            handleClickDelete={() => this.deleteRecord(\"delete\", deleteId)}\r\n                                                                        /> */}\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                data-for=\"tooltip_list_wrap\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                onClick={() => this.approveRecord(\"approve\", approveId)}>\r\n                                                                <FontAwesomeIcon icon={faThumbsUp} />\r\n                                                            </Nav.Link>\r\n                                                        </Nav>\r\n                                                        {/* </Tooltip> */}\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </Card.Subtitle>\r\n                                        </Card.Header>\r\n                                        {/* } */}\r\n                                    </Card>\r\n                                </ListWrapper>\r\n\r\n                                {<ContentPanel className=\"panel-main-content\">\r\n                                    <ListWrapper className=\"card-body\">\r\n                                        <React.Fragment>\r\n                                            <ListWrapper className=\"tree-view1 border-left tree-left \">\r\n                                                {lstTemplateMasterlevel ? lstTemplateMasterlevel.map((input, i) =>\r\n                                                    <ListWrapper key={i} className=\"form-label-group tree-level list_get\">\r\n                                                        <NavHeader className=\"line\" style={{ width: (i + 1) * 10 }}> </NavHeader>\r\n                                                        <NavHeader id={i} value={totalLevel}\r\n                                                            className=\"add_field_button\">+</NavHeader>\r\n                                                        <NavHeader className=\"levelcolour\" md={1}>Level {i + 1}</NavHeader>\r\n                                                        <ListWrapper style={{ marginLeft: (i + 8) * 10 }}>\r\n                                                            <FormInput className=\"input_custom\" value={input.slabelname} id=\"levelname\" type=\"text\" />\r\n                                                        </ListWrapper>\r\n                                                    </ListWrapper>\r\n                                                ) : \"\"\r\n                                                }\r\n                                            </ListWrapper>\r\n                                        </React.Fragment>\r\n                                    </ListWrapper>\r\n                                </ContentPanel>}\r\n                            </Col>\r\n                            : \"\"}\r\n                    </Row >\r\n                    {/* </div> */}\r\n                </ListWrapper>\r\n\r\n                {this.props.Login.openModal ?\r\n                    < SlideOutModal\r\n                        operation={this.props.Login.operation}\r\n                        onSaveClick={this.saveTMTreetemplate}\r\n                        validateEsign={this.validateEsign}\r\n                        esign={this.props.Login.loadEsign}\r\n                        screenName=\"IDS_TEMPLATEMASTER\"\r\n                        closeModal={this.closeModel}\r\n                        selectedRecord={this.props.Login.loadEsign ? this.state.selectedRecord : selectedInput}\r\n                        mandatoryFields={mandatoryFields}\r\n                        show={openModal}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                //formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> :\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <FormInput\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_TEMPLATENAME\" })}\r\n                                        name={\"sversiondescription\"}\r\n                                        as=\"text\"\r\n                                        onChange={(event) => this.onInputOnChange(event, \"version\")}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_TEMPLATENAME\" })}\r\n                                        defaultValue={selectedInput ? selectedInput[\"sversiondescription\"] : \"\"}\r\n                                        isMandatory={true}\r\n                                        required={true}\r\n                                        maxLength={100}\r\n                                    />\r\n                                </Col>\r\n                                <Col md={12}>\r\n                                    <ListWrapper className=\"tree-view border-left\">\r\n                                        {templateTreeData ?\r\n                                            templateTreeData.map((input, i) =>\r\n                                                <ListWrapper className=\"form-label-group tree-level\">\r\n                                                    <NavHeader className=\"line\" style={{ width: (i + 1) * 10 }}> </NavHeader>\r\n                                                    <NavHeader id={i} value={totalLevel}\r\n                                                        className=\"add_field_button\">+</NavHeader>\r\n                                                    <NavHeader md={1}>level <NavHeader className=\"tree-value\">{i + 1}</NavHeader>\r\n\r\n                                                    </NavHeader>\r\n                                                    <Nav className=\"btn mr-2 action-icons-wrap\" style={{ float: \"right\", visibility: i === 0 ? 'hidden' : 'visible' }} onClick={(event) => this.removeTree(event, i)}>\r\n                                                        <FontAwesomeIcon icon={faTrashAlt} className=\"ActionIconColor\" />\r\n                                                    </Nav>\r\n                                                    <Row>\r\n                                                        <Col md={12} style={{ marginLeft: (i + 3) * 10 }}>\r\n                                                            <Col md={12}>\r\n                                                                <FormInput\r\n                                                                    name={\"slabelname\"}\r\n                                                                    type=\"text\"\r\n                                                                    onChange={(event) => this.onInputOnChange(event, i)}\r\n                                                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_ENTERTEMPLATELEVEL\" })}\r\n                                                                    defaultValue={selectedRecord ? selectedRecord[i] : \"\"}\r\n                                                                    maxLength={50}\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </ListWrapper>\r\n                                            ) : \"\"}\r\n                                    </ListWrapper>\r\n                                    <NavHeader>\r\n                                        <Button onClick={(e) => this.appendInputLevel(e)} className=\"btn btn-circle solid-blue\" role=\"button\">+</Button>\r\n                                    </NavHeader>\r\n\r\n                                </Col>\r\n                            </Row>\r\n                        } />\r\n                    : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteRecord(\"delete\", deleteId));\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n\r\n        const filterSelectedRecord = this.state.filterSelectedRecord || {};\r\n        const url = 'templatemaster/getTemplateMasterVersion';\r\n        const dummyNumber = -12;\r\n        const inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: filterSelectedRecord[\"sampletype\"] ? filterSelectedRecord[\"sampletype\"].value : dummyNumber,\r\n            ncategorycode: filterSelectedRecord[\"categorytype\"] ? filterSelectedRecord[\"categorytype\"].value : dummyNumber,\r\n            nformcode: filterSelectedRecord[\"categorytype\"] ? filterSelectedRecord[\"categorytype\"][\"item\"][\"nformcode\"] : dummyNumber\r\n        }\r\n        const inputParam = { url, inputData };\r\n        this.props.getStudyTemplateByCategoryType(inputParam, this.props.Login.masterData, filterSelectedRecord, true);\r\n    }\r\n\r\n    approveRecord = (operation, ncontrolCode) => {\r\n        const selectedRecord = this.props.Login.selectedRecord ? this.props.Login.selectedRecord : \"\";\r\n        ///const selected = this.props.Login.masterData[\"selected\"];\r\n        const selected = this.props.Login.masterData.SelectedTreeVersionTemplate;\r\n        if (selectedRecord[\"ntransactionstatus\"] === transactionStatus.APPROVED || selectedRecord[\"ntransactionstatus\"] === transactionStatus.RETIRED) {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTOAPPROVE\" }));\r\n        }\r\n        else {\r\n            let inputData = [];\r\n            inputData = {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                \"ntreeversiontempcode\": selected.ntreeversiontempcode,\r\n                // \"ncategorycode\": this.props.Login.masterData.selectedValues[\"ncategorycode\"],\r\n                // \"nformcode\": this.props.Login.masterData.selectedValues[\"nformcode\"],\r\n                \"ncategorycode\": parseInt(this.props.Login.masterData.SelectedCategory[this.props.Login.masterData.SelectedCategoryFilterTextLabel]),\r\n                \"nformcode\": parseInt(this.props.Login.masterData.SelectedCategory.nformcode),\r\n                \"ntemplatecode\": selected.ntemplatecode ? selected.ntemplatecode : undefined,\r\n            }\r\n\r\n            const postParam = {\r\n                inputListName: \"lstTreeversionTemplate\",\r\n                //selectedObject: \"selectedTempVersion\",\r\n                selectedObject: \"SelectedTreeVersionTemplate\",\r\n                primaryKeyField: \"ntreeversiontempcode\",\r\n                primaryKeyValue: selected.ntreeversiontempcode,\r\n                fetchUrl: \"templatemaster/getTemplateVersionById\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            }\r\n\r\n            const inputParam = {\r\n                methodUrl: \"TemplateMasterVersion\",\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                inputData: inputData,\r\n                operation: operation,\r\n                postParam\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, openModal: true, screenData: { inputParam, masterData },\r\n                        operation: operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    //to delete a recored\r\n    deleteRecord = (operation, ncontrolCode) => {\r\n        // const selected = this.props.Login.masterData[\"selected\"];\r\n        const selected = this.props.Login.masterData.SelectedTreeVersionTemplate;\r\n        const selectedLevel = this.props.Login.masterData.lstTemplateMasterlevel\r\n        if (this.props.Login.selectedRecord[\"ntransactionstatus\"] === transactionStatus.APPROVED || this.props.Login.selectedRecord[\"ntransactionstatus\"] === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTODELETE\" }));\r\n        }\r\n        else {\r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData = {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                \"ntreeversiontempcode\": selected.ntreeversiontempcode,\r\n                \"ntreecontrolcode\": selectedLevel.map(item => item.ntreecontrolcode).join(\",\"),\r\n                // \"ncategorycode\": this.props.Login.masterData.selectedValues[\"ncategorycode\"],\r\n                // \"nformcode\": this.props.Login.masterData.selectedValues[\"nformcode\"]\r\n                \"ncategorycode\": parseInt(this.props.Login.masterData.SelectedCategory[this.props.Login.masterData.SelectedCategoryFilterTextLabel]),\r\n                \"nformcode\": parseInt(this.props.Login.masterData.SelectedCategory.nformcode),\r\n\r\n            }\r\n\r\n\r\n            const postParam = {\r\n                inputListName: \"lstTreeversionTemplate\",\r\n                //selectedObject: \"selectedTempVersion\",\r\n                selectedObject: \"SelectedTreeVersionTemplate\",\r\n                primaryKeyField: \"ntreeversiontempcode\",\r\n                primaryKeyValue: selected.ntreeversiontempcode,\r\n                fetchUrl: \"templatemaster/getTemplateVersionById\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            }\r\n\r\n\r\n            const inputParam = {\r\n                methodUrl: \"TemplateMaster\",\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                inputData: inputData,\r\n                operation: operation,\r\n                postParam\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, openModal: true, screenData: { inputParam, masterData },\r\n                        operation: operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    saveTMTreetemplate = (saveType, formRef) => {\r\n        let listTemplateMasterTree = [];\r\n        let levelno = 0;\r\n        //const selected = this.props.Login.masterData[\"selected\"];\r\n        const selected = this.props.Login.masterData.SelectedTreeVersionTemplate;\r\n        const selectedLevel = this.props.Login.masterData.lstTemplateMasterlevel\r\n\r\n        for (let index = 0; index < this.props.Login.totalLevel; index++) {\r\n            levelno = index + 1;\r\n            if (this.props.Login.selectedRecord[index]) {\r\n                listTemplateMasterTree.push((this.props.Login.selectedRecord[index]).toString())\r\n            }\r\n            else {\r\n                return toast.info(this.props.intl.formatMessage({ id: \"IDS_PLESEENTERTHELEVEL\" }) + levelno);\r\n            }\r\n        }\r\n\r\n        let inputData = [];\r\n        let methodUrl = \"\";\r\n        inputData = {\r\n            \"userinfo\": this.props.Login.userInfo,\r\n            \"ncategorycode\": parseInt(this.props.Login.masterData.SelectedCategory[this.props.Login.masterData.SelectedCategoryFilterTextLabel]),\r\n            \"nformcode\": parseInt(this.props.Login.masterData.SelectedCategory.nformcode),\r\n            \"ntreecontrolcode\": selectedLevel.map(item => item.ntreecontrolcode).join(\",\"),\r\n            \"ntemplatecode\": selected ? selected.ntemplatecode : -1,\r\n            \"ntreeversiontempcode\": selected ? selected.ntreeversiontempcode : -1,\r\n            \"specname\": this.props.Login.selectedInput.sversiondescription,\r\n            \"treetemptranstestgroup\": listTemplateMasterTree,\r\n            \"nsampletypecode\": parseInt(this.props.Login.masterData.SelectedSample[\"nsampletypecode\"])\r\n        }\r\n\r\n        let postParam = undefined;\r\n\r\n        if (this.props.Login.operation === \"create\") {\r\n            methodUrl = \"Templatemaster\";\r\n        }\r\n        else {\r\n            methodUrl = \"EditTemplatemasterSubmit\";\r\n            postParam = { inputListName: \"lstTreeversionTemplate\", selectedObject: \"selectedTempVersion\", primaryKeyField: \"ntreeversiontempcode\" };\r\n        }\r\n\r\n        const inputParam = {\r\n            methodUrl: methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            searchRef: this.searchRef, formRef, postParam\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event, levelno) => {\r\n        const selectedRecord = this.props.Login.selectedRecord || {};\r\n        const selectedInput = this.props.Login.selectedInput || {};\r\n        if (levelno === \"version\") {\r\n            selectedInput[event.target.name] = event.target.value;\r\n        }\r\n        else {\r\n            if (event.target.value.trim() !== \"\") {\r\n                selectedRecord[levelno] = event.target.value;\r\n            }\r\n            else {\r\n                selectedRecord[levelno] = undefined;\r\n            }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { selectedInput, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    reloadData = () => {\r\n\r\n        console.log(\"stdy pla reload:\", this.props.Login.masterData, this.state.selectedRecord);\r\n        this.searchRef.current.value = \"\";\r\n        const url = 'templatemaster/getTemplateMasterVersion';\r\n        const dummyNumber = -12;\r\n        const inputData = {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nsampletypecode: this.props.Login.masterData.SelectedSample ? this.props.Login.masterData.SelectedSample.ssampletypename :dummyNumber,\r\n                        ncategorycode: this.props.Login.masterData.SelectedCategory ? this.props.Login.masterData.SelectedCategory[this.props.Login.masterData.SelectedCategoryFilterTextLabel] :dummyNumber,\r\n                        nformcode: this.props.Login.masterData.SelectedCategory ? this.props.Login.masterData.SelectedCategory.nformcode : dummyNumber,\r\n\r\n                    }\r\n        const masterData = {...this.props.Login.masterData, searchedData:undefined}\r\n        const inputParam = {url, inputData};\r\n        this.props.getStudyTemplateByCategoryType(inputParam, masterData, this.state.selectedRecord, false) ;\r\n        //--------------------------------------------------\r\n        // this.searchRef.current.value = \"\";\r\n        // const inputParam = {\r\n        //     inputData: { \"userinfo\": this.props.Login.userInfo },\r\n        //     classUrl: \"templatemaster\",\r\n        //     methodUrl: \"TemplateMaster\",\r\n        //     userInfo: this.props.Login.userInfo,\r\n        //     displayName: \"IDS_STUDYPLANTEMPLATE\"\r\n        // };\r\n\r\n        // this.props.callService(inputParam);\r\n        //////////////////---------------------------\r\n       \r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.filterSelectedRecord !== previousProps.Login.filterSelectedRecord) {\r\n            this.setState({ filterSelectedRecord: this.props.Login.filterSelectedRecord });\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n                const userRoleControlRights = this.state.userRoleControlRights || [];\r\n                let controlMap = this.state.controlMap || {};\r\n                let filterSelectedRecord = this.state.filterSelectedRecord || {};\r\n\r\n                // if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) \r\n                // {\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]\r\n                        && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                            userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                //}\r\n                const selectedValues = {};\r\n                const categroyLable = this.props.Login.masterData.categroyLable ? this.props.Login.masterData.categroyLable : this.props.Login.masterData.lstcategory ? Object.keys(this.props.Login.masterData.lstcategory)[0] : \"\";\r\n                const categoryValuemember = this.props.Login.masterData.SelectedCategoryFilterTextLabel;\r\n                const categoryDisplaymemeber = this.props.Login.masterData.SelectedCategoryFilterValueLabel;\r\n\r\n                filterSelectedRecord[\"ntransactionstatus\"] = this.props.Login.masterData.lstTemplateMasterlevel ? this.props.Login.masterData.lstTemplateMasterlevel.length > 0 ?\r\n                    this.props.Login.masterData.lstTemplateMasterlevel[0][\"ntransactionstatus\"] :\r\n                    this.props.Login.filterSelectedRecord ? this.props.Login.filterSelectedRecord[\"ntransactionstatus\"] : [] : [];\r\n\r\n                let TaglstSampleType = [];\r\n                let Taglstcategory = [];\r\n                if (this.props.Login.masterData.lstSampleType && !this.props.Login.masterData.lstSampleType[0].item) {\r\n                    const sampleTypeMap = constructOptionList(this.props.Login.masterData.lstSampleType || [], \"nsampletypecode\",\r\n                        \"ssampletypename\", \"nsampletypecode\", \"ascending\", undefined);\r\n                    TaglstSampleType = sampleTypeMap.get(\"OptionList\");\r\n                }\r\n                if (this.props.Login.masterData.lstcategory && this.props.Login.masterData.lstcategory[categroyLable]) {\r\n                    const categoryTypeMap = this.props.Login.masterData.lstcategory[categroyLable] ? constructOptionList(this.props.Login.masterData.lstcategory[categroyLable]\r\n                        || [], categoryValuemember, categoryDisplaymemeber, categoryValuemember, \"ascending\", undefined) : this.props.Login.masterData.lstcategory;\r\n                    Taglstcategory = categoryTypeMap.get(\"OptionList\");\r\n                }\r\n                if (this.props.Login.masterData.lstTemplateMasterlevel) {\r\n                    sortData(this.props.Login.masterData.lstTemplateMasterlevel, \"ascending\", \"nlevelno\")\r\n                }\r\n\r\n                selectedValues[\"ncategorycode\"] = this.props.Login.masterData.selectedValues ? this.props.Login.masterData.selectedValues[\"ncategorycode\"] :\r\n                    Taglstcategory.length > 0 ? Taglstcategory[0].item[categoryValuemember] : -2;\r\n\r\n                selectedValues[\"nformcode\"] = this.props.Login.masterData.selectedValues ? this.props.Login.masterData.selectedValues[\"nformcode\"] : Taglstcategory.length > 0 ?\r\n                    Taglstcategory[0].item[\"nformcode\"] : -2;\r\n\r\n                selectedValues[\"nsampletypecode\"] = TaglstSampleType.length > 0 ?\r\n                    TaglstSampleType[0].item[\"nsampletypecode\"] : this.props.Login.masterData.selectedValues\r\n                        ? this.props.Login.masterData.selectedValues[\"nsampletypecode\"] : -2\r\n\r\n                filterSelectedRecord[\"categroyLable\"] = categroyLable;\r\n                filterSelectedRecord[\"categoryValuemember\"] = categoryValuemember;\r\n                filterSelectedRecord[\"categoryDisplaymemeber\"] = categoryDisplaymemeber;\r\n                filterSelectedRecord[\"sampletype\"] = TaglstSampleType[0];\r\n                filterSelectedRecord[\"categorytype\"] = Taglstcategory[0];\r\n                this.setState({\r\n                    TaglstSampleType, Taglstcategory,\r\n                    filterSelectedRecord,\r\n                    userRoleControlRights: userRoleControlRights ? userRoleControlRights : this.state.userRoleControlRights,\r\n                    controlMap: controlMap ? controlMap : this.state.controlMap\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.Login.masterData.lstcategory !== previousProps.Login.masterData.lstcategory) {\r\n                this.setState({ Taglstcategory: this.props.Login.Taglstcategory })\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // componentDidUpdate1(previousProps) {\r\n    //     if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n    //         this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n    //     }\r\n    //     if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n    //         // if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n    //         //     this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n    //         // }\r\n    //         const userRoleControlRights = this.state.userRoleControlRights || [];\r\n    //         let controlMap = this.state.controlMap || {};\r\n    //         let selectedRecord = this.state.selectedRecord || {};\r\n\r\n    //         if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n    //             if (this.props.Login.userRoleControlRights) {\r\n    //                 this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n    //                     userRoleControlRights.push(item.ncontrolcode))\r\n    //             }\r\n    //             controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n    //             // selectedRecord[\"defaultsampletype\"] =  this.props.Login.masterData && this.props.Login.masterData.defaultsampletype ? this.props.Login.masterData.defaultsampletype : TaglstSampleType ? {\r\n    //             //     \"value\": TaglstSampleType.get(\"OptionList\")[0].item[\"nsampletypecode\"],\r\n    //             //     \"label\": TaglstSampleType.get(\"OptionList\")[0].item[\"ssampletypename\"]\r\n    //             // } : \"\";\r\n\r\n    //             // selectedRecord[\"defaultCatogoryType\"] = this.props.Login.masterData && this.props.Login.masterData.defaultCatogoryType && this.props.Login.masterData.defaultCatogoryType !== \"\" ?\r\n    //             //                 this.props.Login.masterData.defaultCatogoryType : Taglstcategory ? Taglstcategory.get(\"OptionList\").length > 0 ? {\r\n    //             //                     \"value\": Taglstcategory.get(\"OptionList\")[0].item[categoryValuemember],\r\n    //             //                     \"label\": Taglstcategory.get(\"OptionList\")[0].item[categoryDisplaymemeber]\r\n    //             //                 } : \"\" : \"\";\r\n    //         }\r\n    //        // const selectedRecord = {}; \r\n    //         const selectedInput = {}; const selectedValues = {};\r\n    //         const categroyLable = this.props.Login.masterData.categroyLable ? this.props.Login.masterData.categroyLable : this.props.Login.masterData.lstcategory ? Object.keys(this.props.Login.masterData.lstcategory)[0] : \"\";\r\n    //         const categoryValuemember = this.props.Login.masterData.categoryValuemember ? this.props.Login.masterData.categoryValuemember : this.props.Login.masterData.lstcategory ? Object.keys(this.props.Login.masterData.lstcategory[categroyLable][0])[0] : \"\";\r\n    //         const categoryDisplaymemeber = this.props.Login.masterData.categoryDisplaymemeber ? this.props.Login.masterData.categoryDisplaymemeber : this.props.Login.masterData.lstcategory ? Object.keys(this.props.Login.masterData.lstcategory[categroyLable][0])[1] : \"\";\r\n\r\n    //         selectedRecord[\"ntransactionstatus\"] = this.props.Login.masterData.lstTemplateMasterlevel ? this.props.Login.masterData.lstTemplateMasterlevel.length > 0 ?\r\n    //             this.props.Login.masterData.lstTemplateMasterlevel[0][\"ntransactionstatus\"] :\r\n    //             this.props.Login.selectedRecord ? this.props.Login.selectedRecord[\"ntransactionstatus\"] : [] : [];\r\n\r\n    //         let TaglstSampleType;\r\n    //         let Taglstcategory;\r\n    //         if (this.props.Login.masterData.lstSampleType && !this.props.Login.masterData.lstSampleType[0].item) {\r\n    //             TaglstSampleType = constructOptionList(this.props.Login.masterData.lstSampleType || [], \"nsampletypecode\",\r\n    //                 \"ssampletypename\", \"nsampletypecode\", \"ascending\", undefined);\r\n    //         }\r\n    //         if (this.props.Login.masterData.lstcategory && this.props.Login.masterData.lstcategory[categroyLable]) {\r\n    //             Taglstcategory = this.props.Login.masterData.lstcategory[categroyLable] ? constructOptionList(this.props.Login.masterData.lstcategory[categroyLable]\r\n    //                 || [], categoryValuemember, categoryDisplaymemeber, categoryValuemember, \"ascending\", undefined) : this.props.Login.masterData.lstcategory;\r\n    //         }\r\n    //         if (this.props.Login.masterData.lstTemplateMasterlevel) {\r\n    //             sortData(this.props.Login.masterData.lstTemplateMasterlevel, \"ascending\", \"nlevelno\")\r\n    //         }\r\n\r\n    //         selectedValues[\"ncategorycode\"] = this.props.Login.masterData.selectedValues ? this.props.Login.masterData.selectedValues[\"ncategorycode\"] : Taglstcategory ?\r\n    //             Taglstcategory.get(\"OptionList\")[0].item[categoryValuemember] : -2;\r\n\r\n    //         selectedValues[\"nformcode\"] = this.props.Login.masterData.selectedValues ? this.props.Login.masterData.selectedValues[\"nformcode\"] : Taglstcategory ?\r\n    //             Taglstcategory.get(\"OptionList\")[0].item[\"nformcode\"] : -2;\r\n\r\n    //         selectedValues[\"nsampletypecode\"] = TaglstSampleType ? TaglstSampleType.get(\"OptionList\").length > 0\r\n    //             ? TaglstSampleType.get(\"OptionList\")[0].item[\"nsampletypecode\"] : this.props.Login.masterData.selectedValues\r\n    //                 ? this.props.Login.masterData.selectedValues[\"nsampletypecode\"] : -2 : this.props.Login.masterData.selectedValues ? this.props.Login.masterData.selectedValues[\"nsampletypecode\"] : -2;\r\n\r\n\r\n    //             // selectedRecord[\"defaultsampletype\"] = this.state.selectedRecord ?  this.state.selectedRecord.defaultsampletype \r\n    //             //         : this.props.Login.masterData.defaultsampletype ? this.props.Login.masterData.defaultsampletype : TaglstSampleType ? {\r\n    //             //     \"value\": TaglstSampleType.get(\"OptionList\")[0].item[\"nsampletypecode\"],\r\n    //             //     \"label\": TaglstSampleType.get(\"OptionList\")[0].item[\"ssampletypename\"], item:TaglstSampleType.get(\"OptionList\")[0]\r\n    //             // } : \"\";\r\n\r\n    //             // selectedRecord[\"defaultCatogoryType\"] = this.state.selectedRecord ?  this.state.selectedRecord.defaultCatogoryType \r\n    //             // : this.props.Login.masterData.defaultCatogoryType && this.props.Login.masterData.defaultCatogoryType !== \"\" ?\r\n    //             //                 this.props.Login.masterData.defaultCatogoryType : Taglstcategory ? Taglstcategory.get(\"OptionList\").length > 0 ? {\r\n    //             //                     \"value\": Taglstcategory.get(\"OptionList\")[0].item[categoryValuemember],\r\n    //             //                     \"label\": Taglstcategory.get(\"OptionList\")[0].item[categoryDisplaymemeber], item: Taglstcategory.get(\"OptionList\")[0]\r\n    //             //                 } : \"\" : \"\";\r\n    //         let openModal = false;\r\n    //         this.props.Login.masterData[\"lstcategory\"] = Taglstcategory ? Taglstcategory.get(\"OptionList\") : this.props.Login.masterData.lstcategory;\r\n    //         this.props.Login.masterData[\"lstTreeversionTemplate\"] = this.props.Login.masterData.lstTreeversionTemplate ? this.props.Login.masterData.lstTreeversionTemplate : this.props.Login.masterData[\"lstTreeversionTemplate\"];\r\n    //         this.props.Login.masterData[\"lstTemplateMasterlevel\"] = this.props.Login.masterData.lstTemplateMasterlevel ? this.props.Login.masterData.lstTemplateMasterlevel : this.props.Login.masterData[\"lstTemplateMasterlevel\"];\r\n    //         this.props.Login.masterData[\"selected\"] = this.props.Login.masterData[\"selectedTempVersion\"] ? this.props.Login.masterData[\"selectedTempVersion\"] :\r\n    //             this.props.Login.masterData[\"selected\"];\r\n    //        // this.props.Login.masterData[\"selectedValues\"] = selectedValues;\r\n    //         this.props.Login.masterData[\"defaultCatogoryType\"] = this.props.Login.masterData.defaultCatogoryType \r\n    //              && this.props.Login.masterData.defaultCatogoryType !== \"\" ?\r\n    //             this.props.Login.masterData.defaultCatogoryType : Taglstcategory ? Taglstcategory.get(\"OptionList\").length > 0 ? {\r\n    //                 \"value\": Taglstcategory.get(\"OptionList\")[0].item[categoryValuemember],\r\n    //                 \"label\": Taglstcategory.get(\"OptionList\")[0].item[categoryDisplaymemeber],\r\n    //                 \"item\": Taglstcategory.get(\"OptionList\")[0].item\r\n    //             } : \"\" : \"\";\r\n    //         this.props.Login.masterData[\"categroyLable\"] = categroyLable;\r\n    //         this.props.Login.masterData[\"categoryValuemember\"] = categoryValuemember;\r\n    //         this.props.Login.masterData[\"categoryDisplaymemeber\"] = categoryDisplaymemeber;\r\n    //         this.props.Login.masterData[\"lstSampleType\"] = TaglstSampleType ? TaglstSampleType.get(\"OptionList\") : this.props.Login.masterData.lstSampleType ? this.props.Login.masterData.lstSampleType : -2;\r\n    //         this.props.Login.masterData[\"defaultsampletype\"] = this.props.Login.masterData.defaultsampletype ? this.props.Login.masterData.defaultsampletype : TaglstSampleType ? {\r\n    //             \"value\": TaglstSampleType.get(\"OptionList\")[0].item[\"nsampletypecode\"],\r\n    //             \"label\": TaglstSampleType.get(\"OptionList\")[0].item[\"ssampletypename\"],\r\n    //             \"item\": TaglstSampleType.get(\"OptionList\")[0].item\r\n    //         } : -2;\r\n\r\n\r\n\r\n    //         //let filterData = this.generateBreadCrumData();\r\n    //         this.setState({//filterData,\r\n    //             selectedRecord, userRoleControlRights: userRoleControlRights ? userRoleControlRights : this.state.userRoleControlRights,\r\n    //             controlMap: controlMap ? controlMap : this.state.controlMap,\r\n    //             selected: this.props.Login.masterData.lstTreeversionTemplate ? this.props.Login.masterData.lstTreeversionTemplate.length > 0 ?\r\n    //                 this.props.Login.masterData.lstTreeversionTemplate[0] : {} : this.state.selected,\r\n    //             selectedSampleType: TaglstSampleType ? TaglstSampleType.get(\"OptionList\")[0][\"nsampletypecode\"] : this.state.selectedSampleType,\r\n\r\n    //         });\r\n\r\n    //         const updateInfo = {\r\n    //             typeName: DEFAULT_RETURN,\r\n    //             data: { openModal, masterData: this.props.Login.masterData, selectedRecord, selectedInput }\r\n    //         }\r\n    //         this.props.updateStore(updateInfo);\r\n    //     }\r\n    // }\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    // \"value\": this.props.Login.masterData.defaultsampletype && this.props.Login.masterData.defaultsampletype.label || '-';\r\n                    \"value\": (this.props.Login.masterData.SelectedSample && this.props.Login.masterData.SelectedSample.ssampletypename) || '-'\r\n                },\r\n                {\r\n                    \"label\": \"IDS_SAMPLECATEGORY\",\r\n                    //  \"value\": this.props.Login.masterData.defaultCatogoryType && this.props.Login.masterData.defaultCatogoryType.label || '-'\r\n                    \"value\": (this.props.Login.masterData.SelectedCategory && this.props.Login.masterData.SelectedCategory[this.props.Login.masterData.SelectedCategoryFilterValueLabel]) || '-'\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n                props.Login.openModal = false;\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n            props.Login.openModal = false;\r\n        }\r\n        if (!props.Login.loadEsign) {\r\n            return { selectedRecord: { ...state.selectedRecord, agree: 4, esigncomments: '', esignpassword: '' } }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n}\r\n\r\nconst mapStatetoProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nexport default connect(mapStatetoProps, {\r\n    callService, crudMaster, updateStore, addModel,\r\n    fetchRecordByTemplateID, getTemplateMasterTree, validateEsignCredential, filterColumnData,\r\n    getSampleTypeProductCategory, getStudyTemplateByCategoryType\r\n})(injectIntl(templatemaster));\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}