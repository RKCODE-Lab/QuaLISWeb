{"ast":null,"code":"import _defineProperty from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _toConsumableArray from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{toast}from'react-toastify';import{initRequest}from'./LoginAction';import{constructOptionList,fillRecordBasedOnCheckBoxSelection,getRecordBasedOnPrimaryKeyName,replaceUpdatedObject,sortData,getSameRecordFromTwoArrays,getSameRecordFromTwoDifferentArrays,filterRecordBasedOnPrimaryKeyName}from'../components/CommonScript';import{postCRUDOrganiseTransSearch}from'./ServiceAction';import Axios from'axios';export function getMyJobsubSampleDetailTestWise(inputData,isServiceRequired){return function(dispatch){var inputParamData={ntype:2,// nflag: 2,\nnsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,ntransactionstatus:inputData.ntransactionstatus,nsectioncode:inputData.nsectioncode,ntestcode:inputData.ntestcode,napprovalversioncode:inputData.napprovalversioncode,napprovalconfigcode:inputData.napprovalconfigcode,activeTestTab:inputData.activeTestTab,activeSampleTab:inputData.activeSampleTab,userinfo:inputData.userinfo,nneedsubsample:inputData.masterData.realRegSubTypeValue.nneedsubsample,ndesigntemplatemappingcode:inputData.masterData.ndesigntemplatemappingcode,checkBoxOperation:inputData.masterData.searchedSubSample?inputData.masterData.searchedSubSample.length>0?inputData.checkBoxOperation:3:inputData.checkBoxOperation};var activeName=\"\";var dataStateName=\"\";var subSample=inputData.nneedsubsample;dispatch(initRequest(true));if(isServiceRequired){rsapi.post(\"testwisemyjobs/getMyJobsSubSampleDetails\",inputParamData).then(function(response){var responseData=_objectSpread(_objectSpread({},response.data),{},{MJSelectedSample:inputData.MJSelectedSample});responseData=sortData(responseData);var oldSelectedTest=inputData.masterData.MJSelectedTest?inputData.masterData.MJSelectedTest:[];inputData.masterData.MJSelectedTest=responseData.MJSelectedTest?responseData.MJSelectedTest:inputData.masterData.MJ_TEST.length>0?[inputData.masterData.MJ_TEST[0]]:[];var skipInfo={};var masterData={};if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTests']=undefined;}if(subSample){var oldSelectedSubSample=inputData.masterData.MJSelectedSubSample;fillRecordBasedOnCheckBoxSelection(inputData.masterData,response.data,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{MJSelectedSample:inputData.MJSelectedSample,selectedPreregno:inputData.npreregno,MJSelectedSubSample:inputData.masterData.MJ_SUBSAMPLE.length>0?[inputData.masterData.MJ_SUBSAMPLE[0]]:[]});if(inputData.searchSubSampleRef!==undefined&&inputData.searchSubSampleRef.current!==null){inputData.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputData.checkBoxOperation===1||inputData.checkBoxOperation===7||inputData.checkBoxOperation===5){var wholeSubSampleList=masterData.MJ_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample.forEach(function(subsample,index){if(!wholeSubSampleList.includes(subsample.ntransactionsamplecode)){oldSelectedSubSample.splice(index,1);}});if(oldSelectedSubSample.length>0){masterData=_objectSpread(_objectSpread({},masterData),{},{MJSelectedSubSample:oldSelectedSubSample});}var MJSelectedTest=oldSelectedTest.length>0?getSameRecordFromTwoArrays(oldSelectedTest,masterData.MJSelectedSubSample,'npreregno'):responseData.MJSelectedTest;masterData=_objectSpread(_objectSpread({},masterData),{},{MJSelectedTest:MJSelectedTest,ApprovalParameter:responseData.ApprovalParameter?responseData.ApprovalParameter.length>0?responseData.ApprovalParameter:masterData.ApprovalParameter:masterData.ApprovalParameter});}if(inputData.checkBoxOperation===3){masterData=_objectSpread(_objectSpread({},masterData),{},{MJSelectedTest:masterData.MJ_TEST.length>0?[masterData.MJ_TEST[0]]:[],ApprovalParameter:responseData.ApprovalParameter?responseData.ApprovalParameter.length>0?responseData.ApprovalParameter:masterData.ApprovalParameter:masterData.ApprovalParameter});}var _inputData=inputData,testskip=_inputData.testskip,testtake=_inputData.testtake,subSampleSkip=_inputData.subSampleSkip,subSampleTake=_inputData.subSampleTake;var bool=false;if(inputData.masterData.MJ_SUBSAMPLE.length<inputData.subSampleSkip){testskip=0;subSampleSkip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake,subSampleSkip:subSampleSkip,subSampleTake:subSampleTake};}}else{fillRecordBasedOnCheckBoxSelection(inputData.masterData,responseData,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var _masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{MJSelectedSample:inputData.MJSelectedSample,MJSelectedSubSample:inputData.masterData.MJSelectedSubSample,MJSelectedTest:inputData.masterData.MJSelectedTest||[],selectedPreregno:inputData.npreregno});if(inputData.searchSubSampleRef!==undefined&&inputData.searchSubSampleRef.current!==null){inputData.searchSubSampleRef.current.value=\"\";_masterData['searchedSubSample']=undefined;}if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";_masterData['searchedTests']=undefined;}var _inputData2=inputData,_testskip=_inputData2.testskip,_testtake=_inputData2.testtake;var _bool=false;if(inputData.masterData.MJ_TEST.length<=inputData.testskip){_testskip=0;_bool=true;}if(_bool){skipInfo={testskip:_testskip,testtake:_testtake};}var ApprovalParameter=[];var ResultUsedInstrument=[];var ResultUsedTasks=[];var RegistrationTestAttachment=[];var ApprovalResultChangeHistory=[];var RegistrationTestComment=[];var ApprovalHistory=[];if(inputData.checkBoxOperation===1){var wholeTestList=_masterData.MJ_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var ntransactiontestcode;if(oldSelectedTest.length>0){keepOld=true;_masterData=_objectSpread(_objectSpread({},_masterData),{},{selectedTest:oldSelectedTest});}else{ntransactiontestcode=_masterData.selectedTest[0].ntransactiontestcode;}switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;default:RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;}}else if(inputData.checkBoxOperation===5){_masterData=_objectSpread(_objectSpread({},_masterData),{},{selectedTest:inputData.masterData.MJ_TEST.length>0?[inputData.masterData.MJ_TEST[0]]:[]});//let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : 0;\nvar list=[];var dbData=[];switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.MJ_TEST.length>0?inputData.masterData.MJ_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":dbData=response.data.RegistrationTestComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestComment),_toConsumableArray(dbData));RegistrationTestComment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.MJ_TEST.length>0?inputData.masterData.MJ_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;default:dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.MJ_TEST.length>0?inputData.masterData.MJ_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else{_masterData=_objectSpread(_objectSpread({},_masterData),{},{selectedTest:inputData.masterData.MJ_TEST.length>0?[inputData.masterData.MJ_TEST[0]]:[]});//let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : 0\nvar _list=[];switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":_list=response.data.RegistrationTestAttachment||[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.MJ_TEST.length>0?inputData.masterData.MJ_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_TESTCOMMENTS\":_list=response.data.RegistrationTestComment||[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.MJ_TEST.length>0?inputData.masterData.MJ_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;default:_list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(response.data.RegistrationTestAttachment));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.MJ_TEST.length>0?inputData.masterData.MJ_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";break;}}_masterData=_objectSpread(_objectSpread({},_masterData),{},{ApprovalParameter:ApprovalParameter,ResultUsedInstrument:ResultUsedInstrument,ResultUsedTasks:ResultUsedTasks,RegistrationTestAttachment:RegistrationTestAttachment,ApprovalResultChangeHistory:ApprovalResultChangeHistory,RegistrationTestComment:RegistrationTestComment,ApprovalHistory:ApprovalHistory});}if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{samplePrintHistoryDataState:_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined}),sampleHistoryDataState:_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})});dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTestTab:inputData.activeTestTab,activeSampleTab:inputData.activeSampleTab,skip:undefined,take:undefined},skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{var skipInfo={};var bool=false;var _inputData3=inputData,testskip=_inputData3.testskip,testtake=_inputData3.testtake,subsampletake=_inputData3.subsampletake,subsampleskip=_inputData3.subsampleskip;var oldSelectedTest=inputData.masterData.MJSelectedTest;var oldSelectedSubSample=inputData.masterData.MJSelectedSubSample;var TestSelected=[];var subSampleSelected=[];if(inputData[\"statusNone\"]){TestSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest,inputData.removeElementFromArray[0].npreregno,\"npreregno\");subSampleSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedSubSample,inputData.removeElementFromArray[0].npreregno,\"npreregno\");}else{TestSelected=filterRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest,inputData.removeElementFromArray[0].npreregno,\"npreregno\");subSampleSelected=filterRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedSubSample,inputData.removeElementFromArray[0].npreregno,\"npreregno\");}var isGrandChildGetRequired=false;var ApprovalParameter=[];var ResultUsedInstrument=[];var ResultUsedTasks=[];var RegistrationTestAttachment=[];var ApprovalResultChangeHistory=[];var RegistrationTestComment=[];var ApprovalHistory=[];// if(subSample)\n// {\n//     if (TestSelected.length > 0) {\n//         isGrandChildGetRequired = false;\n//     } else {\n// if( TestSelected.length == 0 && subSampleSelected.length == 0)\n// {\n//     isGrandChildGetRequired = true;\n// }\n// else if(TestSelected.length == 0){\n//     isGrandChildGetRequired = true;\n// }\n//         else\n//         {\n//             isGrandChildGetRequired = false;\n//         }\n//          isGrandChildGetRequired = true;\n//     }\n// }\n// else\n// {\nif(TestSelected.length>0){isGrandChildGetRequired=false;}else{isGrandChildGetRequired=true;}// }\nfillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.MJSelectedSample,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);if(isGrandChildGetRequired){var ntransactiontestcode=inputData.masterData.MJ_TEST.length>0?inputData.masterData.MJ_TEST[0].ntransactiontestcode.toString():\"\";var MJSelectedSample=inputData.MJSelectedSample;var selectedPreregno=inputData.npreregno;var MJSelectedTest=inputData.masterData.MJ_TEST.length>0?[inputData.masterData.MJ_TEST[0]]:[];var MJSelectedSubSample=inputData.masterData.MJ_SUBSAMPLE;if(subSample){var filterSelectedSubSample=getSameRecordFromTwoArrays(oldSelectedSubSample,inputData.masterData.MJ_SUBSAMPLE,\"ntransactionsamplecode\");MJSelectedSubSample=filterSelectedSubSample.length>0?filterSelectedSubSample:[inputData.masterData.MJ_SUBSAMPLE[0]];if(inputData.masterData.MJ_SUBSAMPLE.length<=inputData.subsampleskip){subsampleskip=0;skipInfo={subsampletake:subsampletake,subsampleskip:subsampleskip};}}var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{MJSelectedSample:MJSelectedSample,MJSelectedSubSample:MJSelectedSubSample,MJSelectedTest:MJSelectedTest});if(inputData.masterData.MJ_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{testskip:testskip,testtake:testtake});}inputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"ApprovalParameter\",\"ApprovalResultChangeHistory\",\"ResultUsedInstrument\",\"ResultUsedTasks\",\"RegistrationTestAttachment\",\"RegistrationTestComment\"],ntransactiontestcode:ntransactiontestcode,MJSelectedSample:MJSelectedSample,selectedPreregno:selectedPreregno,MJSelectedTest:MJSelectedTest,MJSelectedSubSample:MJSelectedSubSample,checkBoxOperation:3,masterData:masterData},skipInfo);if(subSample){if(MJSelectedTest.length===0){inputData[\"npreregno\"]=MJSelectedSubSample.map(function(x){return x.npreregno;}).join(\",\");inputData[\"ntransactionsamplecode\"]=MJSelectedSubSample.map(function(x){return x.ntransactionsamplecode;}).join(\",\");inputData[\"checkBoxOperation\"]=3;inputData[\"childTabsKey\"]=[\"MJ_TEST\"];dispatch(getMyJobTestDetailTestWise(inputData,true));}else{dispatch(getMJTestChildTabDetailTestWise(inputData,true));}}else{dispatch(getMJTestChildTabDetailTestWise(inputData,true));}// dispatch(getMJTestChildTabDetailTestWise(inputData, true));\n}else{//added by sudharshanan for test select issue while sample click\nvar _masterData2=_objectSpread(_objectSpread({},inputData.masterData),{},{MJSelectedTest:TestSelected?TestSelected:inputData.masterData.MJ_TEST.length>0?[inputData.masterData.MJ_TEST[0]]:[],MJSelectedSample:inputData.MJSelectedSample,MJSelectedSubSample:subSampleSelected?subSampleSelected:inputData.masterData.MJ_SUBSAMPLE.length>0?[inputData.masterData.MJ_SUBSAMPLE[0]]:[]});var wholeTestList=_masterData2.MJ_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});if(subSample){if(inputData.masterData.MJ_SUBSAMPLE.length<=inputData.subsampleskip){subsampleskip=0;skipInfo={subsampletake:subsampletake,subsampleskip:subsampleskip};}}var keepOld=false;var _ntransactiontestcode;if(inputData.masterData.MJ_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{testskip:testskip,testtake:testtake});}if(oldSelectedTest.length>0){keepOld=true;_masterData2=_objectSpread(_objectSpread({},_masterData2),{},{selectedTest:oldSelectedTest});}else{_ntransactiontestcode=inputData.masterData.MJ_TEST.length>0?inputData.masterData.MJ_TEST[0].ntransactiontestcode:\"-1\";}switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,_ntransactiontestcode,\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,_ntransactiontestcode,\"ntransactiontestcode\");break;default:RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,_ntransactiontestcode,\"ntransactiontestcode\");break;}dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({masterData:_objectSpread(_objectSpread({},_masterData2),{},{// wholeApprovalParameter,\nApprovalParameter:ApprovalParameter,// wholeResultUsedInstrument,\nResultUsedInstrument:ResultUsedInstrument,// wholeResultUsedTasks,\nResultUsedTasks:ResultUsedTasks,// wholeRegistrationTestAttachment,\nRegistrationTestAttachment:RegistrationTestAttachment,// wholeApprovalResultChangeHistory,\nApprovalResultChangeHistory:ApprovalResultChangeHistory,// wholeRegistrationTestComments,\nRegistrationTestComment:RegistrationTestComment,ApprovalHistory:ApprovalHistory},skipInfo)},skipInfo),{},{loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestTab:inputData.activeTestTab})});}}};}export function getMyJobTestDetailTestWise(inputData,isServiceRequired){return function(dispatch){var inputParamData={ntype:2,// nflag: 3,\nnsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,// ntranscode: inputData.ntransactionstatus,\nnapprovalversioncode:inputData.napprovalversioncode,napprovalconfigcode:inputData.napprovalconfigcode,ntransactionsamplecode:inputData.ntransactionsamplecode,ntransactiontestcode:0,nsectioncode:inputData.nsectioncode,ntestcode:inputData.ntestcode,activeTestTab:inputData.activeTestTab,activeSampleTab:inputData.activeSampleTab,userinfo:inputData.userinfo,ntransactionstatus:inputData.ntransactionstatus,ndesigntemplatemappingcode:inputData.masterData.ndesigntemplatemappingcode,checkBoxOperation:inputData.checkBoxOperation};var activeName=\"\";var dataStateName=\"\";//let masterData = {};\n//let subSample = inputData.nneedsubsample;\ndispatch(initRequest(true));if(isServiceRequired){rsapi.post(\"testwisemyjobs/getMyJobsTestDetails\",inputParamData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData,'descending','npreregno');inputData.searchTestRef.current.null=\"\";var oldSelectedTest=inputData.masterData.MJSelectedTest;inputData.masterData.MJSelectedTest=oldSelectedTest.length>0?oldSelectedTest:responseData.MJSelectedTest?responseData.MJSelectedTest:inputData.masterData.MJ_TEST.length>0?[inputData.masterData.MJ_TEST[0]]:[];fillRecordBasedOnCheckBoxSelection(inputData.masterData,responseData,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{MJSelectedTest:inputData.masterData.MJSelectedTest,MJSelectedSubSample:inputData.MJSelectedSubSample,selectedPreregno:inputData.npreregno});if(inputData.searchSubSampleRef!==undefined&&inputData.searchSubSampleRef.current!==null){inputData.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTests']=undefined;}var _inputData4=inputData,testskip=_inputData4.testskip,testtake=_inputData4.testtake;var bool=false;if(inputData.masterData.MJ_TEST.length<=inputData.testskip){testskip=0;bool=true;}var skipInfo={};if(bool){skipInfo={testskip:testskip,testtake:testtake};}var ApprovalParameter=[];var ResultUsedInstrument=[];var ResultUsedTasks=[];var RegistrationTestAttachment=[];var ApprovalResultChangeHistory=[];var RegistrationTestComment=[];var ApprovalHistory=[];if(inputData.checkBoxOperation===1){var wholeTestList=masterData.MJ_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var ntransactiontestcode;// if (oldSelectedTest.length > 0) {\n//     keepOld = true\n//     masterData = {\n//         ...masterData,\n//         selectedTest: oldSelectedTest\n//     }\n// } else {\nntransactiontestcode=masterData.MJSelectedTest[0].ntransactiontestcode;// }\nswitch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;default:RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;}}else if(inputData.checkBoxOperation===5){masterData=_objectSpread(_objectSpread({},masterData),{},{MJSelectedTest:inputData.masterData.MJ_TEST.length>0?[inputData.masterData.MJ_TEST[0]]:[]});//let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : 0;\nvar list=[];var dbData=[];switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.MJ_TEST.length>0?inputData.masterData.MJ_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":dbData=response.data.RegistrationTestComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestComment),_toConsumableArray(dbData));RegistrationTestComment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.MJ_TEST.length>0?inputData.masterData.MJ_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;default:dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.MJ_TEST.length>0?inputData.masterData.MJ_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else if(inputData.checkBoxOperation===7){//  let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode)\n//let wholeTestListForSelectAll = masterData.MJ_TEST\n// let wholeTestListForSelectSingleSelect =\n//     oldSelectedTest.forEach((test, index) => {\n//         if (!wholeTestList.includes(test.ntransactiontestcode)) {\n//             oldSelectedTest.splice(index, 1)\n//         }\n//     })\nvar _keepOld=false;var _ntransactiontestcode2;if(oldSelectedTest.length>0){_keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{MJSelectedTest:oldSelectedTest//oldSelectedTest\n});}else{_ntransactiontestcode2=inputData.masterData.MJ_TEST.length>0?inputData.masterData.MJ_TEST[0].ntransactiontestcode:\"\";}switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=_keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,_ntransactiontestcode2,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=_keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,_ntransactiontestcode2,\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;default:RegistrationTestAttachment=_keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,_ntransactiontestcode2,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;}}else{masterData=_objectSpread(_objectSpread({},masterData),{},{MJSelectedTest:inputData.masterData.MJ_TEST.length>0?[inputData.masterData.MJ_TEST[0]]:[]});// let ntransactiontestcode = response.data.MJSelectedTest ? response.data.MJSelectedTest.length > 0 ? \n//      response.data.MJSelectedTest[0].ntransactiontestcode : inputData.masterData.MJ_TEST ? inputData.masterData.MJ_TEST.length > 0 ?  inputData.masterData.MJ_TEST[0].ntransactiontestcode :-1:-1:-1\n//inputData.masterData.MJ_TEST ? inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode: -1 : -1\nvar _list2=[];switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":_list2=response.data.RegistrationTestAttachment||[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.MJ_TEST.length>0?inputData.masterData.MJ_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_TESTCOMMENTS\":_list2=response.data.RegistrationTestComment||[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.MJ_TEST.length>0?inputData.masterData.MJ_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;default:_list2=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(response.data.RegistrationTestAttachment));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.MJ_TEST.length>0?inputData.masterData.MJ_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;}}masterData=_objectSpread(_objectSpread({},masterData),{},{ApprovalParameter:ApprovalParameter,ResultUsedInstrument:ResultUsedInstrument,ResultUsedTasks:ResultUsedTasks,RegistrationTestAttachment:RegistrationTestAttachment,ApprovalResultChangeHistory:ApprovalResultChangeHistory,RegistrationTestComment:RegistrationTestComment,ApprovalHistory:ApprovalHistory});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{samplePrintHistoryDataState:_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined}),sampleHistoryDataState:_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})});dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({masterData:_objectSpread(_objectSpread({},masterData),{},{MJSelectedSubSample:inputData.MJSelectedSubSample,selectedPreregno:inputData.npreregno,selectedSampleCode:inputData.ntransactionsamplecode,activeTestTab:inputData.activeTestTab,activeSampleTab:inputData.activeSampleTab,skip:undefined,take:undefined},skipInfo)},skipInfo),{},{loading:false,showFilter:false,activeTestTab:inputData.activeTestTab})});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{var bool=false;var skipInfo={};var _inputData5=inputData,testskip=_inputData5.testskip,testtake=_inputData5.testtake;var oldSelectedTest=inputData.masterData.MJSelectedTest;var TestSelected=inputData[\"statusNone\"]?getRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest,inputData.removeElementFromArray[0].ntransactionsamplecode,\"ntransactionsamplecode\"):filterRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest,inputData.removeElementFromArray[0].ntransactionsamplecode,\"ntransactionsamplecode\");var isGrandChildGetRequired=false;if(TestSelected.length>0){isGrandChildGetRequired=false;}else{isGrandChildGetRequired=true;}var ApprovalParameter=[];var ResultUsedInstrument=[];var ResultUsedTasks=[];var RegistrationTestAttachment=[];var ApprovalResultChangeHistory=[];var RegistrationTestComment=[];var ApprovalHistory=[];fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.MJSelectedSubSample,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactionsamplecode\",inputData.removeElementFromArray);if(isGrandChildGetRequired){//let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode.toString() : \"\";\nvar MJSelectedSample=inputData.masterData.MJSelectedSample;var selectedPreregno=inputData.npreregno;//let selectedTest = inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [];\nvar MJSelectedSubSample=inputData.MJSelectedSubSample;var filterTestSameOldSelectedTest=getSameRecordFromTwoDifferentArrays(oldSelectedTest,inputData.masterData.MJ_TEST,\"ntransactiontestcode\");var MJSelectedTest=filterTestSameOldSelectedTest.length>0?filterTestSameOldSelectedTest:[inputData.masterData.MJ_TEST[0]];var ntransactiontestcode=MJSelectedTest.length>0?MJSelectedTest.map(function(x){return x.ntransactiontestcode;}).join(\",\"):\"-1\";if(inputData.masterData.MJ_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}inputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"ApprovalParameter\",\"ApprovalResultChangeHistory\",\"ResultUsedInstrument\",\"ResultUsedTasks\",\"RegistrationTestAttachment\",\"RegistrationTestComment\"],ntransactiontestcode:ntransactiontestcode,MJSelectedSample:MJSelectedSample,selectedPreregno:selectedPreregno,MJSelectedTest:MJSelectedTest,MJSelectedSubSample:MJSelectedSubSample,checkBoxOperation:3,skipInfo:skipInfo});dispatch(getMJTestChildTabDetailTestWise(inputData,true));}else{var keepOld=false;var _ntransactiontestcode3;var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{MJSelectedSubSample:inputData.MJSelectedSubSample,selectedTransactioncode:inputData.ntransactionsamplecode,MJSelectedTest:TestSelected?TestSelected:inputData.masterData.MJ_TEST.length>0?[inputData.masterData.MJ_TEST[0]]:[]});var wholeTestList=masterData.MJ_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.forEach(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});if(inputData.masterData.MJ_TEST.length<=inputData.testskip){testskip=0;bool=true;}var _skipInfo={};if(bool){_skipInfo={testskip:testskip,testtake:testtake};}if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{MJSelectedTest:oldSelectedTest});}else{_ntransactiontestcode3=inputData.masterData.MJ_TEST.length>0?inputData.masterData.MJ_TEST[0].ntransactiontestcode:\"-1\";}switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,_ntransactiontestcode3,\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,_ntransactiontestcode3,\"ntransactiontestcode\");break;default:RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,_ntransactiontestcode3,\"ntransactiontestcode\");break;}dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({masterData:_objectSpread(_objectSpread({},masterData),{},{ApprovalParameter:ApprovalParameter,ResultUsedInstrument:ResultUsedInstrument,ResultUsedTasks:ResultUsedTasks,RegistrationTestAttachment:RegistrationTestAttachment,ApprovalResultChangeHistory:ApprovalResultChangeHistory,RegistrationTestComment:RegistrationTestComment,ApprovalHistory:ApprovalHistory}),loading:false,showFilter:false},_skipInfo),{},{activeSampleTab:inputData.activeSampleTab,activeTestTab:inputData.activeTestTab})});}}//}\n};}export function getMJTestChildTabDetailTestWise(inputData,isServiceRequired){return function(dispatch){if(inputData.ntransactiontestcode&&inputData.ntransactiontestcode.length>0){var inputParamData={ntransactiontestcode:inputData.ntransactiontestcode,npreregno:inputData.npreregno,userinfo:inputData.userinfo};var url=null;var testtake=inputData.testtake;var activeName=\"\";var dataStateName=\"\";switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":url=\"attachment/getTestAttachment\";activeName=\"RegistrationTestAttachment\";break;case\"IDS_TESTCOMMENTS\":url=\"comments/getTestComment\";activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_SAMPLEATTACHMENTS\":url=\"attachment/getSampleAttachment\";break;default:url=\"attachment/getTestAttachment\";activeName=\"RegistrationTestAttachment\";break;}if(url!==null){dispatch(initRequest(true));if(isServiceRequired){rsapi.post(url,inputParamData).then(function(response){var skipInfo={};var responseData=_objectSpread(_objectSpread({},response.data),{},{MJSelectedSubSample:inputData.MJSelectedSubSample||inputData.masterData.MJSelectedSubSample,selectedTest:inputData.MJSelectedTest});//responseData = sortData(responseData)\n// fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\nfillRecordBasedOnCheckBoxSelection(inputData.masterData,responseData,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{MJSelectedSample:inputData.MJSelectedSample||inputData.masterData.MJSelectedSample,MJSelectedSubSample:inputData.MJSelectedSubSample||inputData.masterData.MJSelectedSubSample,MJSelectedTest:inputData.MJSelectedTest,selectedPreregno:inputData.npreregno,selectedSampleCode:inputData.ntransactionsamplecode,selectedTestCode:inputData.ntransactiontestcode});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTabIndex:inputData.activeTabIndex,activeTestTab:inputData.activeTestTab,screenName:inputData.screenName,testtake:testtake,testskip:undefined},skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.MJSelectedTest,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactiontestcode\",inputData.removeElementFromArray);var skipInfo={};var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{MJSelectedTest:inputData.MJSelectedTest,selectedPreregno:inputData.npreregno,selectedSampleCode:inputData.ntransactionsamplecode,selectedTestCode:inputData.ntransactiontestcode});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTestTab:inputData.activeTestTab,screenName:inputData.screenName,testtake:testtake,testskip:undefined},skipInfo)});}}else{dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread({},inputData.masterData),loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab}});}}else{var _inputData$masterData=inputData.masterData,ApprovalParameter=_inputData$masterData.ApprovalParameter,ResultUsedInstrument=_inputData$masterData.ResultUsedInstrument,ResultUsedTasks=_inputData$masterData.ResultUsedTasks,RegistrationTestAttachment=_inputData$masterData.RegistrationTestAttachment,ApprovalResultChangeHistory=_inputData$masterData.ApprovalResultChangeHistory,RegistrationTestComment=_inputData$masterData.RegistrationTestComment,ApprovalHistory=_inputData$masterData.ApprovalHistory;switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=[];break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=[];break;default:RegistrationTestAttachment=[];break;}dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),{},{selectedTest:[],ApprovalParameter:ApprovalParameter,ResultUsedInstrument:ResultUsedInstrument,ResultUsedTasks:ResultUsedTasks,RegistrationTestAttachment:RegistrationTestAttachment,ApprovalResultChangeHistory:ApprovalResultChangeHistory,RegistrationTestComment:RegistrationTestComment,ApprovalHistory:ApprovalHistory}),loading:false}});}};}export function getMJSampleChildTabDetailTestWise(inputData){return function(dispatch){if(inputData.npreregno.length>0){var inputParamData={npreregno:inputData.npreregno,userinfo:inputData.userinfo};var url=null;switch(inputData.activeSampleTab){case\"IDS_SAMPLEATTACHMENTS\":url=\"attachment/getSampleAttachment\";break;case\"IDS_SAMPLECOMMENTS\":url=\"comments/getSampleComment\";break;case\"IDS_SUBSAMPLEATTACHMENTS\":url=\"resultentrybysample/getResultUsedMaterial\";break;case\"IDS_SUBSAMPLECOMMENTS\":url=\"resultentrybysample/getResultUsedTask\";break;case\"IDS_SOURCE\":url=\"registration/getRegistrationSourceCountry\";break;case\"IDS_SAMPLEAPPROVALHISTORY\":url=\"approval/getSampleApprovalHistory\";break;case\"IDS_PRINTHISTORY\":url=\"approval/getPrintHistory\";break;case\"IDS_REPORTHISTORY\":url=\"approval/getCOAHistory\";break;default:url=null;break;}if(url!==null){dispatch(initRequest(true));rsapi.post(url,inputParamData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{selectedSample:inputData.selectedSample,selectedTestCode:inputData.ntransactiontestcode}),loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,screenName:inputData.screenName}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),{},{selectedSample:inputData.selectedSample}),loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab}});}}else{toast.warn(\"Please Select a Sample\");}};}export function performAction(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"approval/performAction\",inputParam.inputData).then(function(response){var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.masterData),response.data),{},{MJ_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam.masterData.MJ_SAMPLE,'npreregno'),MJ_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.masterData.MJ_SUBSAMPLE,'ntransactionsamplecode'),MJ_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.masterData.MJ_TEST,'ntransactiontestcode')});// dispatch({type: DEFAULT_RETURN, payload:{\n// masterData:{\n//     ...inputParam.inputData.masterData,\n//     ...response.data, \n//     MJ_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam   .inputData.masterData.MJ_SAMPLE,'npreregno'),\n//     MJ_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.inputData.masterData.MJ_SUBSAMPLE,'ntransactionsamplecode'),\n//     MJ_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.inputData.masterData.MJ_TEST,'ntransactiontestcode')\n// },\n//     loading:false ,\n//     loadEsign:false,\n//     openChildModal:false                     \n// }}) \nvar respObject={masterData:masterData,inputParam:inputParam,openChildModal:false,operation:\"dynamic\",masterStatus:\"\",errorCode:undefined,loadEsign:false,showEsign:false,selectedRecord:{},loading:false};dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function updateDecision(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"approval/updateDecision\",inputParam.inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);// dispatch({type: DEFAULT_RETURN, payload:{\n//     masterData:{\n//         ...inputParam.masterData,\n//         ...responseData, \n//         MJ_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam.masterData.MJ_SAMPLE,'npreregno'),\n//         MJ_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.masterData.MJ_SUBSAMPLE,'ntransactionsamplecode'),\n//         MJ_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.masterData.MJ_TEST,'ntransactiontestcode')\n//     },\n//     loading:false                      \n// }}) \nvar masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.masterData),responseData),{},{MJ_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam.masterData.MJ_SAMPLE,'npreregno'),MJ_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.masterData.MJ_SUBSAMPLE,'ntransactionsamplecode'),MJ_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.masterData.MJ_TEST,'ntransactiontestcode')});var respObject={masterData:masterData,inputParam:inputParam,openChildModal:false,operation:\"dynamic\",masterStatus:\"\",errorCode:undefined,loadEsign:false,showEsign:false,selectedRecord:{},loading:false};dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getRegTypeTestWise(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"testwisemyjobs/getRegistrationTypeBySampleType\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultSampleTypeValue:inputData.defaultSampleTypeValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getRegSubTypeTestWise(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"testwisemyjobs/getRegistrationsubTypeByRegType\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultRegTypeValue:inputData.defaultRegTypeValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getTestStatusTestWise(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"testwisemyjobs/getFilterStatusByApproveVersion\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{RegSubTypeValue:inputData.RegSubTypeValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getAppConfigVersionTestWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"testwisemyjobs/getApprovalConfigVersionByRegSubType\",inputParam.inputData).then(function(response){if(response.data[\"Success\"]){toast.warn(response.data.Success);}var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputParam.masterData),responseData),{},{defaultRegSubTypeValue:inputParam.masterData.defaultRegSubTypeValue,RegSubTypeValue:inputParam.masterData.realRegSubTypeValue//nneedsubsample:inputParam.masterData.realRegSubTypeValue.nneedsubsample\n}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getFilterStatusSectionTestWise(inputData){return function(dispatch){var testStatusService=rsapi.post(\"testwisemyjobs/getFilterStatusByApproveVersion\",inputData);var sectionService=rsapi.post(\"testwisemyjobs/getSectionByApproveVersion\",inputData);var urlArray=[];urlArray=[testStatusService,sectionService];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultApprovalVersionValue:inputData.masterData.defaultApprovalVersionValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getSectionTestWise(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"testwisemyjobs/getTestComboBySection\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultUserSectionValue:inputData.masterData.defaultUserSectionValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getFilterStatusTestWise(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"testwisemyjobs/getTestComboBySection\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultFilterStatusValue:inputData.masterData.defaultFilterStatusValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getMyJobsSampleTestWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"testwisemyjobs/getMyTestWiseJobsDetails\",inputParam.inputData).then(function(response){var responseData=_objectSpread({},response.data);// responseData = sortData(responseData)\nvar masterData=_objectSpread(_objectSpread({},inputParam.masterData),responseData);if(inputParam.searchSampleRef!==undefined&&inputParam.searchSampleRef.current!==null){inputParam.searchSampleRef.current.value=\"\";masterData['searchedSample']=undefined;}if(inputParam.searchSubSampleRef!==undefined&&inputParam.searchSubSampleRef.current!==null){inputParam.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputParam.searchTestRef!==undefined&&inputParam.searchTestRef.current!==null){inputParam.searchTestRef.current.value=\"\";masterData['searchedTest']=undefined;// masterData['searchedTests'] = undefined\n}sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false,showTest:inputParam.inputData.showTest,activeTestTab:inputParam.inputData.activeTestTab,showFilter:false,skip:0,take:inputParam.take,testskip:0,testtake:inputParam.testtake,documentDataState:_objectSpread(_objectSpread({},inputParam.documentDataState),{},{sort:undefined,filter:undefined}),testCommentDataState:_objectSpread(_objectSpread({},inputParam.testCommentDataState),{},{sort:undefined,filter:undefined})}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getStatusCombo(inputParam){return function(dispatch){var inputData={ntransactionresultcode:inputParam.primaryKeyValue,userinfo:inputParam.userInfo};dispatch(initRequest(true));rsapi.post(\"approval/getStatusCombo\",inputData).then(function(response){var responseData=_objectSpread({},response.data);//responseData = sortData(responseData)\nvar GradeListMap=constructOptionList(response.data.Grade||[],\"ngradecode\",\"sgradename\",'ascending','ngradecode',false);var Grade=GradeListMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputParam.masterData),responseData),{},{Grade:Grade,selectedParamId:inputParam.primaryKeyValue}),loading:false,showFilter:false,openChildModal:true,ncontrolCode:inputParam.ncontrolCode,selectedRecord:{senforcestatuscomment:response.data.parameterComment&&response.data.parameterComment.senforcestatuscomment,ntransactionresultcode:response.data.parameterComment&&response.data.parameterComment.ntransactionresultcode,ntransactiontestcode:response.data.parameterComment&&response.data.parameterComment.ntransactiontestcode},operation:\"enforce\",screenName:\"IDS_STATUS\"}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}// export function getAcceptTestTestWise(action,inputParam,MJSelectedTest,userInfo) {\n//     return function (dispatch) {\n//         let inputData = {\n//             nflag:3,\n//             ncheck:1,\n//             nsampletypecode :inputParam.nsampletypecode,\n//             nregtypecode :inputParam.nregtypecode,\n//             nregsubtypecode : inputParam.nregsubtypecode,\n//             ntransactionstatus :inputParam.ntransactionstatus,\n//             napprovalversioncode :inputParam.napprovalversioncode,\n//             nsectioncode :inputParam.nsectioncode,\n//             ntestcode :inputParam.ntestcode,\n//             fromdate: inputParam.dfrom,\n//             todate: inputParam.dto,\n//             npreregno :MJSelectedTest ? MJSelectedTest.map(sample => sample.npreregno).join(\",\") : \"\",\n//             ntransactionsamplecode : MJSelectedTest ? MJSelectedTest.map(subsample => subsample.ntransactionsamplecode).join(\",\") : \"\",\n//             transactiontestcode: MJSelectedTest ? MJSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n//             ntransactiontestcode: 0,\n//             ncontrolcode : action.ncontrolcode,\n//             nneedsubsample:inputParam.masterData.nneedsubsample,\n//             ndesigntemplatemappingcode :inputParam.ndesigntemplatemappingcode,\n//             checkBoxOperation:3,\n//             scontrolname : action.scontrolname,\n//             userinfo: userInfo\n//         }\n//         if (inputData.transactiontestcode && inputData.transactiontestcode.length > 0) {\n//             dispatch(initRequest(true));\n//             rsapi.post(\"testwisemyjobs/CreateAcceptTest\", inputData)\n//                 .then(response => {\n//                     let responseData = { ...response.data }\n//                     responseData = sortData(responseData)\n//                    let MJ_TEST= replaceUpdatedObject (response.data.MJ_TEST, inputParam.masterData.MJ_TEST, 'ntransactiontestcode');\n//                    delete response.data.MJ_TEST;\n//                    let MJSelectedTest=replaceUpdatedObject(response.data[\"MJSelectedTest\"], inputParam.masterData.MJSelectedTest, \"ntransactiontestcode\");\n//                    // let MJ_TEST =[];\n//                    // MJ_TEST =responseData[\"MJ_TEST\"]\n//                     let masterData = {\n//                         ...inputParam.masterData,\n//                         ...response.data,\n//                         MJ_TEST, \n//                         MJSelectedTest\n//                     };\n//                     let respObject = {\n//                         masterData,\n//                         ...inputParam.inputData,\n//                         loading: false,\n//                         loadEsign: false,\n//                         openModal: false,\n//                         showSample: undefined\n//                     }\n//                     dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n//                     dispatch({\n//                         type: DEFAULT_RETURN, payload: {\n//                             ...responseData,\n//                             masterData,\n//                             loading: false,\n//                             operation: \"update\",              \n//                         }\n//                     })\n//                 })\n//                 .catch(error => {\n//                     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                     if (error.response.status === 500) {\n//                         toast.error(error.message);\n//                     }\n//                     else {\n//                         toast.warn(error.response.data);\n//                     }\n//                 })\n//         } else {\n//             dispatch({\n//                 type: DEFAULT_RETURN,\n//                 payload: {\n//                     multilingualMsg: \"IDS_SELECTTEST\",\n//                 }\n//             });\n//         }\n//     }\n// }\nexport function getAcceptTestTestWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"testwisemyjobs/CreateAcceptTest\",inputParam.inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);var MJ_TEST=replaceUpdatedObject(response.data.MJ_TEST,inputParam.masterData.MJ_TEST,'ntransactiontestcode');delete response.data.MJ_TEST;var MJSelectedTest=replaceUpdatedObject(response.data[\"MJSelectedTest\"],inputParam.masterData.MJSelectedTest,\"ntransactiontestcode\");var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.masterData),response.data),{},{MJ_TEST:MJ_TEST,MJSelectedTest:MJSelectedTest});var respObject=_objectSpread(_objectSpread({masterData:masterData},inputParam.inputData),{},{loading:false,loadEsign:false,openModal:false,showSample:undefined});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({},responseData),{},{masterData:masterData,loading:false,operation:\"update\"})});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function validateEsignforAccept(inputParam){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"login/validateEsignCredential\",inputParam.inputData).then(function(response){if(response.data===\"Success\"){var methodUrl=\"performaction\";inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"]=inputParam.inputData.userinfo;if(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]&&inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]){delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];}if(inputParam[\"operation\"]===\"accept\"){dispatch(getAcceptTestTestWise(inputParam[\"screenData\"][\"inputParam\"],inputParam[\"screenData\"][\"inputParam\"][\"MJSelectedTest\"],inputParam.inputData.userinfo));}}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/TestWiseMyJobsAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","constructOptionList","fillRecordBasedOnCheckBoxSelection","getRecordBasedOnPrimaryKeyName","replaceUpdatedObject","sortData","getSameRecordFromTwoArrays","getSameRecordFromTwoDifferentArrays","filterRecordBasedOnPrimaryKeyName","postCRUDOrganiseTransSearch","Axios","getMyJobsubSampleDetailTestWise","inputData","isServiceRequired","dispatch","inputParamData","ntype","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntransactionstatus","nsectioncode","ntestcode","napprovalversioncode","napprovalconfigcode","activeTestTab","activeSampleTab","userinfo","nneedsubsample","masterData","realRegSubTypeValue","ndesigntemplatemappingcode","checkBoxOperation","searchedSubSample","length","activeName","dataStateName","subSample","post","then","response","responseData","data","MJSelectedSample","oldSelectedTest","MJSelectedTest","MJ_TEST","skipInfo","searchTestRef","undefined","current","value","oldSelectedSubSample","MJSelectedSubSample","childTabsKey","removeElementFromArray","selectedPreregno","MJ_SUBSAMPLE","searchSubSampleRef","wholeSubSampleList","map","b","ntransactionsamplecode","forEach","subsample","index","includes","splice","ApprovalParameter","testskip","testtake","subSampleSkip","subSampleTake","bool","ResultUsedInstrument","ResultUsedTasks","RegistrationTestAttachment","ApprovalResultChangeHistory","RegistrationTestComment","ApprovalHistory","wholeTestList","ntransactiontestcode","test","keepOld","selectedTest","list","dbData","skip","sort","filter","samplePrintHistoryDataState","sampleHistoryDataState","type","payload","loading","showFilter","take","catch","error","status","message","warn","subsampletake","subsampleskip","TestSelected","subSampleSelected","isGrandChildGetRequired","toString","filterSelectedSubSample","x","join","getMyJobTestDetailTestWise","getMJTestChildTabDetailTestWise","null","selectedSampleCode","filterTestSameOldSelectedTest","selectedTransactioncode","url","selectedTestCode","activeTabIndex","screenName","getMJSampleChildTabDetailTestWise","selectedSample","performAction","inputParam","MJ_SAMPLE","updatedSample","updatedSubSample","updatedTest","respObject","openChildModal","operation","masterStatus","errorCode","loadEsign","showEsign","selectedRecord","postParamList","updateDecision","getRegTypeTestWise","defaultSampleTypeValue","getRegSubTypeTestWise","defaultRegTypeValue","getTestStatusTestWise","RegSubTypeValue","getAppConfigVersionTestWise","Success","defaultRegSubTypeValue","getFilterStatusSectionTestWise","testStatusService","sectionService","urlArray","all","defaultApprovalVersionValue","getSectionTestWise","defaultUserSectionValue","getFilterStatusTestWise","defaultFilterStatusValue","getMyJobsSampleTestWise","searchSampleRef","showTest","documentDataState","testCommentDataState","getStatusCombo","ntransactionresultcode","primaryKeyValue","userInfo","GradeListMap","Grade","get","selectedParamId","ncontrolCode","senforcestatuscomment","parameterComment","getAcceptTestTestWise","openModal","showSample","validateEsignforAccept","methodUrl","toLowerCase"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, replaceUpdatedObject, sortData, getSameRecordFromTwoArrays, getSameRecordFromTwoDifferentArrays, filterRecordBasedOnPrimaryKeyName } from '../components/CommonScript';\r\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\r\nimport Axios from 'axios';\r\n\r\nexport function getMyJobsubSampleDetailTestWise(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n           // nflag: 2,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            nsectioncode: inputData.nsectioncode,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            ndesigntemplatemappingcode : inputData.masterData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.masterData.searchedSubSample ?  \r\n                inputData.masterData.searchedSubSample.length > 0 ? inputData.checkBoxOperation:3:inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        const subSample = inputData.nneedsubsample\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"testwisemyjobs/getMyJobsSubSampleDetails\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data, MJSelectedSample: inputData.MJSelectedSample }\r\n                    responseData = sortData(responseData)\r\n                    let oldSelectedTest = inputData.masterData.MJSelectedTest ? inputData.masterData.MJSelectedTest : []\r\n                    inputData.masterData.MJSelectedTest = responseData.MJSelectedTest ? responseData.MJSelectedTest : inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\r\n                    let skipInfo = {}\r\n                    let masterData = {}\r\n                    \r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    if (subSample) {\r\n                        let oldSelectedSubSample = inputData.masterData.MJSelectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            MJSelectedSample: inputData.MJSelectedSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            MJSelectedSubSample: inputData.masterData.MJ_SUBSAMPLE.length > 0 ?\r\n                                [inputData.masterData.MJ_SUBSAMPLE[0]] : [],\r\n                        }\r\n                        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                            inputData.searchSubSampleRef.current.value = \"\";\r\n                            masterData['searchedSubSample'] = undefined\r\n                        }\r\n                        if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 5) {\r\n\r\n                            const wholeSubSampleList = masterData.MJ_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((subsample, index) => {\r\n                                if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n                            if (oldSelectedSubSample.length > 0) {\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    MJSelectedSubSample: oldSelectedSubSample\r\n                                }\r\n                            }\r\n                            const MJSelectedTest = oldSelectedTest.length >0 ? getSameRecordFromTwoArrays(oldSelectedTest,\r\n                                masterData.MJSelectedSubSample, 'npreregno') : responseData.MJSelectedTest\r\n                            masterData = {\r\n                                ...masterData,\r\n                                MJSelectedTest,\r\n                                ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                            }\r\n                        }\r\n                        if (inputData.checkBoxOperation === 3) {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                MJSelectedTest: masterData.MJ_TEST.length > 0 ? [masterData.MJ_TEST[0]] : [],\r\n                                ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter :masterData.ApprovalParameter : masterData.ApprovalParameter\r\n                            }\r\n                        }\r\n\r\n\r\n                        let { testskip, testtake, subSampleSkip, subSampleTake } = inputData\r\n                        let bool = false;\r\n\r\n                        if (inputData.masterData.MJ_SUBSAMPLE.length < inputData.subSampleSkip) {\r\n                            testskip = 0;\r\n                            subSampleSkip = 0;\r\n                            bool = true\r\n                        }\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake, subSampleSkip, subSampleTake }\r\n                        }\r\n                    }\r\n                    else {\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n                        let masterData = {\r\n                            ...inputData.masterData,\r\n                            MJSelectedSample: inputData.MJSelectedSample,\r\n                            MJSelectedSubSample: inputData.masterData.MJSelectedSubSample,\r\n                            MJSelectedTest: inputData.masterData.MJSelectedTest || [],\r\n                            selectedPreregno: inputData.npreregno,\r\n                        }\r\n                        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                            inputData.searchSubSampleRef.current.value = \"\";\r\n                            masterData['searchedSubSample'] = undefined\r\n                        }\r\n                        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                            inputData.searchTestRef.current.value = \"\"\r\n                            masterData['searchedTests'] = undefined\r\n                        }\r\n                        let { testskip, testtake } = inputData\r\n                        let bool = false;\r\n                        if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\r\n                            testskip = 0;\r\n                            bool = true\r\n                        }\r\n\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake }\r\n                        }\r\n\r\n                        let ApprovalParameter = [];\r\n                        let ResultUsedInstrument = [];\r\n                        let ResultUsedTasks = [];\r\n                        let RegistrationTestAttachment = [];\r\n                        let ApprovalResultChangeHistory = [];\r\n                        let RegistrationTestComment = [];\r\n                        let ApprovalHistory = [];\r\n\r\n                        if (inputData.checkBoxOperation === 1) {\r\n\r\n                            let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.map((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedTest: oldSelectedTest\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = masterData.selectedTest[0].ntransactiontestcode\r\n                            }\r\n                            switch (inputData.activeTestTab) {\r\n                                  \r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    break;\r\n                              \r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                \r\n                                default:\r\n                                    RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    break;\r\n                            }\r\n                        } else if (inputData.checkBoxOperation === 5) {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\r\n                            }\r\n                            //let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : 0;\r\n                            let list = [];\r\n                            let dbData = []\r\n                            switch (inputData.activeTestTab) {\r\n                               \r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    dbData = response.data.RegistrationTestAttachment || []\r\n                                    list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                               \r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    dbData = response.data.RegistrationTestComment || []\r\n                                    list = [...inputData.masterData.RegistrationTestComment, ...dbData]\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                               \r\n                                default:\r\n                                    dbData = response.data.RegistrationTestAttachment || []\r\n                                    list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                            }\r\n                        } else {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\r\n                            }\r\n                            //let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : 0\r\n                            let list = [];\r\n                            switch (inputData.activeTestTab) {\r\n                               \r\n                               \r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    list = response.data.RegistrationTestAttachment || []\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    break;\r\n                                \r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    list = response.data.RegistrationTestComment || []\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                              \r\n                                default:\r\n                                    list = [...inputData.masterData.RegistrationTestAttachment, ...response.data.RegistrationTestAttachment]\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    break;\r\n                            }\r\n                        }\r\n\r\n                        masterData = {\r\n                            ...masterData,\r\n                            ApprovalParameter,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            ApprovalResultChangeHistory,\r\n                            RegistrationTestComment,\r\n                            ApprovalHistory\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    skipInfo = {\r\n                        ...skipInfo,\r\n                        samplePrintHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        },\r\n                        sampleHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let skipInfo = {};\r\n            let bool = false;\r\n            let { testskip, testtake, subsampletake, subsampleskip } = inputData;\r\n            let oldSelectedTest = inputData.masterData.MJSelectedTest\r\n            let oldSelectedSubSample = inputData.masterData.MJSelectedSubSample\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n            if(inputData[\"statusNone\"])\r\n            {\r\n             TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n             subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n            else\r\n            {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n          \r\n            let isGrandChildGetRequired = false;\r\n            let ApprovalParameter = [];\r\n            let ResultUsedInstrument = [];\r\n            let ResultUsedTasks = [];\r\n            let RegistrationTestAttachment = [];\r\n            let ApprovalResultChangeHistory = [];\r\n            let RegistrationTestComment = [];\r\n            let ApprovalHistory = [];\r\n\r\n            // if(subSample)\r\n            // {\r\n            //     if (TestSelected.length > 0) {\r\n            //         isGrandChildGetRequired = false;\r\n            //     } else {\r\n                   \r\n                    // if( TestSelected.length == 0 && subSampleSelected.length == 0)\r\n                    // {\r\n                    //     isGrandChildGetRequired = true;\r\n                    // }\r\n                    // else if(TestSelected.length == 0){\r\n                    //     isGrandChildGetRequired = true;\r\n                    // }\r\n            //         else\r\n            //         {\r\n            //             isGrandChildGetRequired = false;\r\n            //         }\r\n            //          isGrandChildGetRequired = true;\r\n                   \r\n            //     }\r\n            // }\r\n            // else\r\n            // {\r\n                if (TestSelected.length > 0) {\r\n                    isGrandChildGetRequired = false;\r\n                } else {\r\n                    isGrandChildGetRequired = true;\r\n                }\r\n           // }\r\n\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.MJSelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n        \r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let MJSelectedSample = inputData.MJSelectedSample;\r\n                let selectedPreregno = inputData.npreregno;\r\n                let MJSelectedTest = inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [];\r\n                let MJSelectedSubSample = inputData.masterData.MJ_SUBSAMPLE\r\n\r\n                if (subSample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.MJ_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    MJSelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.MJ_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.MJ_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n\r\n                }\r\n                let masterData = { ...inputData.masterData, MJSelectedSample, MJSelectedSubSample, MJSelectedTest }\r\n                if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                        \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, MJSelectedSample, selectedPreregno, MJSelectedTest,\r\n                        MJSelectedSubSample, checkBoxOperation: 3,masterData,...skipInfo\r\n                }\r\n\r\n                if (subSample) {\r\n                    if (MJSelectedTest.length === 0) {\r\n                        inputData[\"npreregno\"] = MJSelectedSubSample.map(x => x.npreregno).join(\",\")\r\n                        inputData[\"ntransactionsamplecode\"] = MJSelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\")\r\n                        inputData[\"checkBoxOperation\"] = 3\r\n                        inputData[\"childTabsKey\"] = [\"MJ_TEST\"]\r\n                        dispatch(getMyJobTestDetailTestWise(inputData, true));\r\n                    } else {\r\n                        dispatch(getMJTestChildTabDetailTestWise(inputData, true));\r\n                    }\r\n                } else {\r\n                    dispatch(getMJTestChildTabDetailTestWise(inputData, true));\r\n                }\r\n\r\n                // dispatch(getMJTestChildTabDetailTestWise(inputData, true));\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    MJSelectedTest: TestSelected ? TestSelected :inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [],\r\n                    MJSelectedSample: inputData.MJSelectedSample,\r\n                    MJSelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.MJ_SUBSAMPLE.length>0 ? [inputData.masterData.MJ_SUBSAMPLE[0]]:[]\r\n                }\r\n                let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                });\r\n\r\n                if(subSample)\r\n                {\r\n                    if (inputData.masterData.MJ_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n    \r\n                }\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"-1\";\r\n                }\r\n                switch (inputData.activeTestTab) {\r\n                    \r\n                    case \"IDS_TESTATTACHMENTS\":\r\n                        RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                   \r\n                    case \"IDS_TESTCOMMENTS\":\r\n                        RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                  \r\n                    default:\r\n                        RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            // wholeApprovalParameter,\r\n                            ApprovalParameter,\r\n                            // wholeResultUsedInstrument,\r\n                            ResultUsedInstrument,\r\n                            // wholeResultUsedTasks,\r\n                            ResultUsedTasks,\r\n                            // wholeRegistrationTestAttachment,\r\n                            RegistrationTestAttachment,\r\n                            // wholeApprovalResultChangeHistory,\r\n                            ApprovalResultChangeHistory,\r\n                            // wholeRegistrationTestComments,\r\n                            RegistrationTestComment,\r\n                            ApprovalHistory,\r\n                            ...skipInfo,\r\n                        },\r\n                        ...skipInfo,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function getMyJobTestDetailTestWise(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n           // nflag: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n           // ntranscode: inputData.ntransactionstatus,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            ntransactiontestcode :0,\r\n            nsectioncode: inputData.nsectioncode,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            ntransactionstatus:inputData.ntransactionstatus,\r\n            ndesigntemplatemappingcode : inputData.masterData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        //let masterData = {};\r\n        //let subSample = inputData.nneedsubsample;\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"testwisemyjobs/getMyJobsTestDetails\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData,'descending', 'npreregno')\r\n                    inputData.searchTestRef.current.null = \"\"\r\n\r\n                    let oldSelectedTest = inputData.masterData.MJSelectedTest\r\n                    inputData.masterData.MJSelectedTest = oldSelectedTest.length > 0 ? oldSelectedTest : responseData.MJSelectedTest ? responseData.MJSelectedTest : inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\r\n\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        MJSelectedTest: inputData.masterData.MJSelectedTest,\r\n                        MJSelectedSubSample: inputData.MJSelectedSubSample,\r\n                        selectedPreregno: inputData.npreregno,\r\n                    }\r\n\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n\r\n                    let { testskip, testtake } = inputData\r\n                    let bool = false;\r\n                    if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    let skipInfo = {}\r\n                    if (bool) {\r\n                        skipInfo = { testskip, testtake }\r\n                    }\r\n\r\n                    let ApprovalParameter = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ApprovalResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n                    let ApprovalHistory = [];\r\n\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        // if (oldSelectedTest.length > 0) {\r\n                        //     keepOld = true\r\n                        //     masterData = {\r\n                        //         ...masterData,\r\n                        //         selectedTest: oldSelectedTest\r\n                        //     }\r\n                        // } else {\r\n                        ntransactiontestcode = masterData.MJSelectedTest[0].ntransactiontestcode\r\n                        // }\r\n                        switch (inputData.activeTestTab) {\r\n                            \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            \r\n                            default:\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            MJSelectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\r\n                        }\r\n                        //let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : 0;\r\n                        let list = [];\r\n                        let dbData = []\r\n                        switch (inputData.activeTestTab) {\r\n                          \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData]\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            \r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 7) {\r\n                      //  let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode)\r\n                        //let wholeTestListForSelectAll = masterData.MJ_TEST\r\n                        // let wholeTestListForSelectSingleSelect =\r\n                        //     oldSelectedTest.forEach((test, index) => {\r\n                        //         if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        //             oldSelectedTest.splice(index, 1)\r\n                        //         }\r\n\r\n                        //     })\r\n\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                MJSelectedTest: oldSelectedTest\r\n                                //oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\"\r\n                        }\r\n                        switch (inputData.activeTestTab) {\r\n                           \r\n                           \r\n                            \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            \r\n                            default:\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                        }\r\n\r\n                    } else {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            MJSelectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\r\n                        }\r\n                       // let ntransactiontestcode = response.data.MJSelectedTest ? response.data.MJSelectedTest.length > 0 ? \r\n                          //      response.data.MJSelectedTest[0].ntransactiontestcode : inputData.masterData.MJ_TEST ? inputData.masterData.MJ_TEST.length > 0 ?  inputData.masterData.MJ_TEST[0].ntransactiontestcode :-1:-1:-1\r\n                                \r\n                                //inputData.masterData.MJ_TEST ? inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode: -1 : -1\r\n                        let list = [];\r\n                        switch (inputData.activeTestTab) {\r\n                           \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment || []\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment || []\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                           \r\n                            default:\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...response.data.RegistrationTestAttachment]\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        ApprovalParameter,\r\n                        ResultUsedInstrument,\r\n                        ResultUsedTasks,\r\n                        RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory,\r\n                        RegistrationTestComment,\r\n                        ApprovalHistory\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    skipInfo = {\r\n                        ...skipInfo,\r\n                        samplePrintHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        },\r\n                        sampleHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                MJSelectedSubSample: inputData.MJSelectedSubSample,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode,\r\n                                activeTestTab: inputData.activeTestTab,\r\n                                activeSampleTab: inputData.activeSampleTab,\r\n                                skip: undefined,\r\n                                take: undefined,\r\n                                ...skipInfo\r\n                            },\r\n                            ...skipInfo,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            let bool = false;\r\n            let skipInfo = {};\r\n            let { testskip, testtake } = inputData;\r\n            let oldSelectedTest = inputData.masterData.MJSelectedTest\r\n            let TestSelected = \r\n          inputData[\"statusNone\"] ?\r\n            getRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\"):\r\n            filterRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n\r\n            let ApprovalParameter = [];\r\n            let ResultUsedInstrument = [];\r\n            let ResultUsedTasks = [];\r\n            let RegistrationTestAttachment = [];\r\n            let ApprovalResultChangeHistory = [];\r\n            let RegistrationTestComment = [];\r\n\r\n            let ApprovalHistory = [];\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.MJSelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                //let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let MJSelectedSample = inputData.masterData.MJSelectedSample;\r\n                let selectedPreregno = inputData.npreregno;\r\n                //let selectedTest = inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [];\r\n                let MJSelectedSubSample = inputData.MJSelectedSubSample\r\n                let filterTestSameOldSelectedTest = getSameRecordFromTwoDifferentArrays(oldSelectedTest, inputData.masterData.MJ_TEST, \"ntransactiontestcode\");\r\n                let MJSelectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest : [inputData.masterData.MJ_TEST[0]];\r\n                let ntransactiontestcode = MJSelectedTest.length > 0 ? MJSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\r\n\r\n                if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true;\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { testskip, testtake }\r\n                }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                        \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, MJSelectedSample, selectedPreregno, MJSelectedTest,\r\n                        MJSelectedSubSample, checkBoxOperation: 3, skipInfo\r\n                }\r\n                dispatch(getMJTestChildTabDetailTestWise(inputData, true));\r\n            } \r\n            else {\r\n                    let keepOld = false;\r\n                    let ntransactiontestcode;\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        MJSelectedSubSample: inputData.MJSelectedSubSample,\r\n                        selectedTransactioncode: inputData.ntransactionsamplecode,\r\n                        MJSelectedTest: TestSelected ? TestSelected : inputData.masterData.MJ_TEST.length > 0 ?\r\n                            [inputData.masterData.MJ_TEST[0]] : [],\r\n                    }\r\n\r\n                    const wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode)\r\n                    oldSelectedTest.forEach((test, index) => {\r\n                        if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                            oldSelectedTest.splice(index, 1)\r\n                        }\r\n                        return null;\r\n                    });\r\n                    if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    let skipInfo = {}\r\n                    if (bool) {\r\n                        skipInfo = { testskip, testtake }\r\n                    }\r\n\r\n                    if (oldSelectedTest.length > 0) {\r\n                        keepOld = true\r\n                        masterData = {\r\n                            ...masterData,\r\n                            MJSelectedTest: oldSelectedTest,\r\n                        }\r\n                    } else {\r\n                        ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ?\r\n                            inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"-1\"\r\n                    }\r\n\r\n\r\n                    switch (inputData.activeTestTab) {\r\n                        \r\n                        case \"IDS_TESTATTACHMENTS\":\r\n                            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                       \r\n                        case \"IDS_TESTCOMMENTS\":\r\n                            RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                       \r\n                        default:\r\n                            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                ApprovalParameter,\r\n                                ResultUsedInstrument,\r\n                                ResultUsedTasks,\r\n                                RegistrationTestAttachment,\r\n                                ApprovalResultChangeHistory,\r\n                                RegistrationTestComment,\r\n                                ApprovalHistory\r\n                            },\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            ...skipInfo,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        //}\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getMJTestChildTabDetailTestWise(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\r\n            let inputParamData = {\r\n                ntransactiontestcode: inputData.ntransactiontestcode,\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            let { testtake } = inputData;\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    url = \"attachment/getTestAttachment\"\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    url = \"comments/getTestComment\"\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                default:\r\n                    url = \"attachment/getTestAttachment\"\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                if (isServiceRequired) {\r\n                    rsapi.post(url, inputParamData)\r\n                        .then(response => {\r\n                            let skipInfo = {};\r\n                            let responseData = { ...response.data, MJSelectedSubSample: inputData.MJSelectedSubSample || inputData.masterData.MJSelectedSubSample, selectedTest: inputData.MJSelectedTest }\r\n                            //responseData = sortData(responseData)\r\n                            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\r\n                            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                            let masterData = {\r\n                                ...inputData.masterData,\r\n                                MJSelectedSample: inputData.MJSelectedSample || inputData.masterData.MJSelectedSample,\r\n                                MJSelectedSubSample: inputData.MJSelectedSubSample || inputData.masterData.MJSelectedSubSample,\r\n                                MJSelectedTest: inputData.MJSelectedTest,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode,\r\n                                selectedTestCode: inputData.ntransactiontestcode,\r\n                            }\r\n                            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                                skipInfo = {\r\n\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        skip: 0,\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                skipInfo = {\r\n                                    ...skipInfo,\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            }\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN, payload: {\r\n                                    masterData,\r\n                                    loading: false,\r\n                                    showFilter: false,\r\n                                    activeTabIndex:inputData.activeTabIndex,\r\n                                    activeTestTab: inputData.activeTestTab,\r\n                                    screenName: inputData.screenName,\r\n                                    testtake, testskip: undefined,\r\n                                    ...skipInfo\r\n                                }\r\n                            })\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                            if (error.response.status === 500) {\r\n                                toast.error(error.message);\r\n                            }\r\n                            else {\r\n                                toast.warn(error.response.data);\r\n                            }\r\n                        })\r\n                } else {\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.MJSelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n                    let skipInfo = {};\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        MJSelectedTest: inputData.MJSelectedTest,\r\n                        selectedPreregno: inputData.npreregno,\r\n                        selectedSampleCode: inputData.ntransactionsamplecode,\r\n                        selectedTestCode: inputData.ntransactiontestcode,\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.screenName,\r\n                            testtake, testskip: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                }\r\n\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            let { ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment, ApprovalResultChangeHistory,\r\n                RegistrationTestComment, ApprovalHistory } = inputData.masterData\r\n            switch (inputData.activeTestTab) {\r\n                \r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    RegistrationTestAttachment = []\r\n                    break;\r\n               \r\n                case \"IDS_TESTCOMMENTS\":\r\n                    RegistrationTestComment = []\r\n                    break;\r\n               \r\n                default:\r\n                    RegistrationTestAttachment = []\r\n                    break;\r\n            }\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData: {\r\n                        ...inputData.masterData,\r\n                        selectedTest: [],\r\n                        ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory, RegistrationTestComment, ApprovalHistory\r\n                    }, loading: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\nexport function getMJSampleChildTabDetailTestWise(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.npreregno.length > 0) {\r\n            let inputParamData = {\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            switch (inputData.activeSampleTab) {\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                case \"IDS_SAMPLECOMMENTS\":\r\n                    url = \"comments/getSampleComment\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                    url = \"resultentrybysample/getResultUsedMaterial\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLECOMMENTS\":\r\n                    url = \"resultentrybysample/getResultUsedTask\"\r\n                    break;\r\n                case \"IDS_SOURCE\":\r\n                    url = \"registration/getRegistrationSourceCountry\"\r\n                    break;\r\n                case \"IDS_SAMPLEAPPROVALHISTORY\":\r\n                    url = \"approval/getSampleApprovalHistory\"\r\n                    break;\r\n\r\n                case \"IDS_PRINTHISTORY\":\r\n                    url = \"approval/getPrintHistory\"\r\n                    break;\r\n                case \"IDS_REPORTHISTORY\":\r\n                    url = \"approval/getCOAHistory\"\r\n                    break;\r\n                default:\r\n                    url = null\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                rsapi.post(url, inputParamData)\r\n                    .then(response => {\r\n                        let responseData = { ...response.data }\r\n                        responseData = sortData(responseData)\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData: {\r\n                                    ...inputData.masterData,\r\n                                    ...responseData,\r\n                                    selectedSample: inputData.selectedSample,\r\n                                    selectedTestCode: inputData.ntransactiontestcode,\r\n                                },\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                activeSampleTab: inputData.activeSampleTab,\r\n                                screenName: inputData.screenName\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            toast.warn(\"Please Select a Sample\");\r\n        }\r\n    }\r\n}\r\nexport function performAction(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/performAction\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...response.data,\r\n                    MJ_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.MJ_SAMPLE, 'npreregno'),\r\n                    MJ_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.MJ_SUBSAMPLE, 'ntransactionsamplecode'),\r\n                    MJ_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.MJ_TEST, 'ntransactiontestcode')\r\n                }\r\n                // dispatch({type: DEFAULT_RETURN, payload:{\r\n                // masterData:{\r\n                //     ...inputParam.inputData.masterData,\r\n                //     ...response.data, \r\n                //     MJ_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam   .inputData.masterData.MJ_SAMPLE,'npreregno'),\r\n                //     MJ_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.inputData.masterData.MJ_SUBSAMPLE,'ntransactionsamplecode'),\r\n                //     MJ_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.inputData.masterData.MJ_TEST,'ntransactiontestcode')\r\n                // },\r\n                //     loading:false ,\r\n                //     loadEsign:false,\r\n                //     openChildModal:false                     \r\n                // }}) \r\n                let respObject = {\r\n                    masterData,\r\n                    inputParam,\r\n                    openChildModal: false,\r\n                    operation: \"dynamic\",\r\n                    masterStatus: \"\",\r\n                    errorCode: undefined,\r\n                    loadEsign: false,\r\n                    showEsign: false,\r\n                    selectedRecord: {},\r\n                    loading: false\r\n                }\r\n\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function updateDecision(inputParam) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/updateDecision\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                // dispatch({type: DEFAULT_RETURN, payload:{\r\n                //     masterData:{\r\n                //         ...inputParam.masterData,\r\n                //         ...responseData, \r\n                //         MJ_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam.masterData.MJ_SAMPLE,'npreregno'),\r\n                //         MJ_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.masterData.MJ_SUBSAMPLE,'ntransactionsamplecode'),\r\n                //         MJ_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.masterData.MJ_TEST,'ntransactiontestcode')\r\n\r\n                //     },\r\n                //     loading:false                      \r\n                // }}) \r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                    MJ_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.MJ_SAMPLE, 'npreregno'),\r\n                    MJ_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.MJ_SUBSAMPLE, 'ntransactionsamplecode'),\r\n                    MJ_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.MJ_TEST, 'ntransactiontestcode')\r\n\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    inputParam,\r\n                    openChildModal: false,\r\n                    operation: \"dynamic\",\r\n                    masterStatus: \"\",\r\n                    errorCode: undefined,\r\n                    loadEsign: false,\r\n                    showEsign: false,\r\n                    selectedRecord: {},\r\n                    loading: false\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegTypeTestWise(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testwisemyjobs/getRegistrationTypeBySampleType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultSampleTypeValue: inputData.defaultSampleTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegSubTypeTestWise(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testwisemyjobs/getRegistrationsubTypeByRegType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultRegTypeValue: inputData.defaultRegTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getTestStatusTestWise(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testwisemyjobs/getFilterStatusByApproveVersion\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAppConfigVersionTestWise(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testwisemyjobs/getApprovalConfigVersionByRegSubType\", inputParam.inputData)\r\n            .then(response => {\r\n\r\n                if(response.data[\"Success\"]){\r\n                    toast.warn(response.data.Success);\r\n                }\r\n\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            defaultRegSubTypeValue: inputParam.masterData.defaultRegSubTypeValue,\r\n                            RegSubTypeValue: inputParam.masterData.realRegSubTypeValue\r\n                            //nneedsubsample:inputParam.masterData.realRegSubTypeValue.nneedsubsample\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getFilterStatusSectionTestWise(inputData) {\r\n    return function (dispatch) {\r\n        const testStatusService = rsapi.post(\"testwisemyjobs/getFilterStatusByApproveVersion\", inputData );\r\n        const sectionService = rsapi.post(\"testwisemyjobs/getSectionByApproveVersion\",  inputData );\r\n        let urlArray = [];\r\n        urlArray = [testStatusService,sectionService];\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultApprovalVersionValue: inputData.masterData.defaultApprovalVersionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSectionTestWise(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testwisemyjobs/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultUserSectionValue: inputData.masterData.defaultUserSectionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterStatusTestWise(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testwisemyjobs/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultFilterStatusValue: inputData.masterData.defaultFilterStatusValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getMyJobsSampleTestWise(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testwisemyjobs/getMyTestWiseJobsDetails\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                     masterData['searchedTest'] = undefined\r\n                   // masterData['searchedTests'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showTest: inputParam.inputData.showTest,\r\n                        activeTestTab: inputParam.inputData.activeTestTab,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        take: inputParam.take,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getStatusCombo(inputParam) {\r\n    return function (dispatch) {\r\n        let inputData = {\r\n            ntransactionresultcode: inputParam.primaryKeyValue,\r\n            userinfo: inputParam.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getStatusCombo\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                //responseData = sortData(responseData)\r\n                const GradeListMap = constructOptionList(response.data.Grade || [], \"ngradecode\", \"sgradename\", 'ascending', 'ngradecode', false);\r\n                let Grade = GradeListMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            Grade,\r\n                            selectedParamId: inputParam.primaryKeyValue\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openChildModal: true,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord: {\r\n                            senforcestatuscomment: response.data.parameterComment && response.data.parameterComment.senforcestatuscomment,\r\n                            ntransactionresultcode: response.data.parameterComment && response.data.parameterComment.ntransactionresultcode,\r\n                            ntransactiontestcode: response.data.parameterComment && response.data.parameterComment.ntransactiontestcode\r\n                        },\r\n                        operation: \"enforce\",\r\n                        screenName: \"IDS_STATUS\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n// export function getAcceptTestTestWise(action,inputParam,MJSelectedTest,userInfo) {\r\n//     return function (dispatch) {\r\n//         let inputData = {\r\n//             nflag:3,\r\n//             ncheck:1,\r\n//             nsampletypecode :inputParam.nsampletypecode,\r\n//             nregtypecode :inputParam.nregtypecode,\r\n//             nregsubtypecode : inputParam.nregsubtypecode,\r\n//             ntransactionstatus :inputParam.ntransactionstatus,\r\n//             napprovalversioncode :inputParam.napprovalversioncode,\r\n//             nsectioncode :inputParam.nsectioncode,\r\n//             ntestcode :inputParam.ntestcode,\r\n//             fromdate: inputParam.dfrom,\r\n//             todate: inputParam.dto,\r\n//             npreregno :MJSelectedTest ? MJSelectedTest.map(sample => sample.npreregno).join(\",\") : \"\",\r\n//             ntransactionsamplecode : MJSelectedTest ? MJSelectedTest.map(subsample => subsample.ntransactionsamplecode).join(\",\") : \"\",\r\n//             transactiontestcode: MJSelectedTest ? MJSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n//             ntransactiontestcode: 0,\r\n//             ncontrolcode : action.ncontrolcode,\r\n//             nneedsubsample:inputParam.masterData.nneedsubsample,\r\n//             ndesigntemplatemappingcode :inputParam.ndesigntemplatemappingcode,\r\n//             checkBoxOperation:3,\r\n//             scontrolname : action.scontrolname,\r\n\r\n//             userinfo: userInfo\r\n//         }\r\n        \r\n//         if (inputData.transactiontestcode && inputData.transactiontestcode.length > 0) {\r\n//             dispatch(initRequest(true));\r\n//             rsapi.post(\"testwisemyjobs/CreateAcceptTest\", inputData)\r\n//                 .then(response => {\r\n//                     let responseData = { ...response.data }\r\n//                     responseData = sortData(responseData)\r\n\r\n//                    let MJ_TEST= replaceUpdatedObject (response.data.MJ_TEST, inputParam.masterData.MJ_TEST, 'ntransactiontestcode');\r\n//                    delete response.data.MJ_TEST;\r\n//                    let MJSelectedTest=replaceUpdatedObject(response.data[\"MJSelectedTest\"], inputParam.masterData.MJSelectedTest, \"ntransactiontestcode\");\r\n\r\n//                    // let MJ_TEST =[];\r\n//                    // MJ_TEST =responseData[\"MJ_TEST\"]\r\n\r\n//                     let masterData = {\r\n//                         ...inputParam.masterData,\r\n//                         ...response.data,\r\n//                         MJ_TEST, \r\n//                         MJSelectedTest\r\n//                     };\r\n//                     let respObject = {\r\n//                         masterData,\r\n//                         ...inputParam.inputData,\r\n//                         loading: false,\r\n//                         loadEsign: false,\r\n//                         openModal: false,\r\n//                         showSample: undefined\r\n//                     }\r\n//                     dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN, payload: {\r\n//                             ...responseData,\r\n//                             masterData,\r\n//                             loading: false,\r\n//                             operation: \"update\",              \r\n//                         }\r\n//                     })\r\n//                 })\r\n//                 .catch(error => {\r\n//                     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                     if (error.response.status === 500) {\r\n//                         toast.error(error.message);\r\n//                     }\r\n//                     else {\r\n//                         toast.warn(error.response.data);\r\n//                     }\r\n//                 })\r\n//         } else {\r\n//             dispatch({\r\n//                 type: DEFAULT_RETURN,\r\n//                 payload: {\r\n//                     multilingualMsg: \"IDS_SELECTTEST\",\r\n//                 }\r\n//             });\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\nexport function getAcceptTestTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"testwisemyjobs/CreateAcceptTest\",inputParam.inputData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n\r\n                   let MJ_TEST= replaceUpdatedObject (response.data.MJ_TEST, inputParam.masterData.MJ_TEST, 'ntransactiontestcode');\r\n                   delete response.data.MJ_TEST;\r\n                   let MJSelectedTest=replaceUpdatedObject(response.data[\"MJSelectedTest\"], inputParam.masterData.MJSelectedTest, \"ntransactiontestcode\");\r\n                   let masterData = {\r\n                        ...inputParam.masterData,\r\n                        ...response.data,\r\n                        MJ_TEST, \r\n                        MJSelectedTest\r\n                    };\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            ...responseData,\r\n                            masterData,\r\n                            loading: false,\r\n                            operation: \"update\",              \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n} \r\nexport function validateEsignforAccept(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n\r\n\r\n                    const methodUrl = \"performaction\"\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n                    }\r\n                    if (inputParam[\"operation\"] === \"accept\") {\r\n                        dispatch(getAcceptTestTestWise(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"MJSelectedTest\"], inputParam.inputData.userinfo))\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}    "]},"metadata":{},"sourceType":"module"}