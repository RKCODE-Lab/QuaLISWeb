{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\worklist\\\\AddWorklistSample.js\";\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Row, Col, Button } from 'react-bootstrap';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport DataGridWithSelection from '../../components/data-grid/DataGridWithSelection';\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { MediaHeader } from '../product/product.styled';\nimport { process } from \"@progress/kendo-data-query\";\nimport { toast } from 'react-toastify'; // ADDed by Neeraj-ALPD-5136\n//WorkList Screen -> Including filter in Data selection Kendo Grid \n//Changed functional component into class component\n\nclass AddWorklistSample extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addSaveDataGrid = () => {\n      let filterdata1 = this.state.dataState ? process(this.state.addComponentDataListCopy || [], { ...this.state.dataState,\n        take: this.state.addComponentDataList.length\n      }).data : [];\n      let sortListedData1 = filterdata1.filter(x => this.state.addedComponentList.some(item => item.ntransactiontestcode === x.ntransactiontestcode));\n      let exists = this.state.dataState && this.state.dataState.filter !== null && this.state.dataState.filter !== undefined ? sortListedData1.length > 0 ? true : false : true;\n      let sortListedDataList = this.state.addedComponentList && this.state.addedComponentList.filter(addedItem => process(this.state.addComponentDataList || [], this.state.dataState).data.some(item => addedItem.ntransactiontestcode === item.ntransactiontestcode)) || [];\n\n      if (sortListedDataList && sortListedDataList.length > 0 && exists) {\n        let addComponentSortedList = [];\n        let updatedList = [];\n        let ListedData = [];\n        let sortListedData = [];\n        let updatedDataList = [];\n\n        if (this.state.dataState && this.state.dataState.filter !== null && this.state.dataState.filter !== undefined) {\n          let filterdata = process(this.state.addComponentDataListCopy || this.state.addComponentDataList || [], this.state.dataState).data || [];\n          sortListedData = filterdata.filter(x => this.state.addedComponentList.some(item => item.ntransactiontestcode === x.ntransactiontestcode));\n          updatedDataList = this.state.addedComponentList.filter(item => !sortListedData.some(addedItem => addedItem.ntransactiontestcode === item.ntransactiontestcode));\n          updatedList = process(this.state.addComponentDataListCopy || this.state.addComponentDataList || [], { ...this.state.dataState,\n            skip: 0,\n            take: this.state.addComponentDataList.length\n          }).data.filter(item => !sortListedData.some(addedItem => addedItem.ntransactiontestcode === item.ntransactiontestcode));\n          updatedDataList.map(x => {\n            if (x.selected) {\n              ListedData.push(x);\n            }\n          });\n        } else {\n          ListedData = this.state.addedComponentList.filter(addedItem => !process(this.state.addComponentDataList || [], this.state.dataState).data.some(item => addedItem.ntransactiontestcode === item.ntransactiontestcode)) || [];\n          sortListedData = this.state.addedComponentList.filter(addedItem => process(this.state.addComponentDataList || [], this.state.dataState).data.some(item => addedItem.ntransactiontestcode === item.ntransactiontestcode));\n          updatedList = this.state.addComponentDataList.filter(item => !sortListedData.some(addedItem => addedItem.ntransactiontestcode === item.ntransactiontestcode));\n        }\n\n        if (this.state.addComponentSortedList.length > 0) {\n          this.state.addComponentSortedList.map(item => {\n            const newItem = JSON.parse(JSON.stringify(item));\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            newItem[\"jsondata\"]['worklist'] = item;\n            newItem[\"jsonuidata\"]['worklist'] = item;\n            addComponentSortedList.push(newItem);\n          });\n        }\n\n        sortListedData.map(item => {\n          const newItem = JSON.parse(JSON.stringify(item));\n          newItem[\"jsondata\"] = {};\n          newItem[\"jsonuidata\"] = {};\n          newItem[\"jsondata\"]['worklist'] = item;\n          newItem[\"jsonuidata\"]['worklist'] = item;\n          addComponentSortedList.push(newItem);\n        });\n        this.props.childDataChange(addComponentSortedList);\n        this.setState({\n          addComponentDataList: updatedList || [],\n          addSelectAll: this.valiateCheckAll(this.state.dataState && this.state.dataState.filter !== null && this.state.dataState.filter !== undefined ? process(updatedList || [], { ...this.state.dataState,\n            skip: 0,\n            take: updatedList.length\n          }).data || [] : updatedList),\n          addComponentSortedList: addComponentSortedList,\n          addedComponentList: ListedData,\n          addComponentDataListCopy: this.valiateCopy(addComponentSortedList || [], updatedList || [], ListedData || []),\n          dataState: this.dataStateValidation()\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELCETONESAMPLE\"\n        }));\n      }\n    };\n\n    this.dataStateChangeWorklistSample = event => {\n      let updatedList = [];\n\n      if (event.dataState && event.dataState.filter === null) {\n        let addComponentDataListCopy = this.state.addComponentDataListCopy || this.state.addComponentDataList || [];\n        addComponentDataListCopy.forEach(x => {\n          const exists = this.state.addComponentSortedList.some(item => item.ntransactiontestcode === x.ntransactiontestcode);\n\n          if (!exists) {\n            updatedList.push(x);\n          }\n        });\n      } else {\n        updatedList = this.state.addComponentDataList || [];\n      }\n\n      this.setState({\n        dataResult: process(this.state.addComponentDataList || [], event.dataState),\n        dataState: event.dataState,\n        addComponentDataList: updatedList,\n        addSelectAll: event.dataState && event.dataState.filter === null ? this.valiateCheckAll(updatedList) : this.valiateCheckAll(process(updatedList || [], event.dataState).data)\n      });\n    };\n\n    this.headerSelectionChange = event => {\n      const checked = event.syntheticEvent.target.checked;\n      const eventData = event.target.props.data.hasOwnProperty('data') ? event.target.props.data.data || [] : event.target.props.data || [];\n      let addComponentDataList = //event.target.props.data \n      this.state.addComponentDataList || [];\n      let addedComponentList = this.state.addedComponentList || [];\n\n      if (checked) {\n        const data = addComponentDataList.map(item => {\n          const matchingData = eventData.find(dataItem => dataItem.ntransactiontestcode === item.ntransactiontestcode);\n\n          if (matchingData) {\n            const existingIndex = addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode);\n\n            if (existingIndex === -1) {\n              const newItem = { ...item,\n                selected: true,\n                jsondata: {\n                  worklist: item\n                },\n                jsonuidata: {\n                  worklist: item\n                }\n              };\n              addedComponentList.push(newItem);\n            } else {\n              const oldItem = { ...addedComponentList[existingIndex],\n                selected: true\n              };\n              const newItem = { ...oldItem,\n                selected: true,\n                jsondata: {\n                  worklist: oldItem\n                },\n                jsonuidata: {\n                  worklist: oldItem\n                }\n              };\n              addedComponentList.push(newItem);\n            }\n\n            return { ...item,\n              selected: true\n            };\n          } else {\n            return { ...item,\n              selected: item.selected ? true : false\n            };\n          }\n        });\n        this.setState({\n          addComponentDataList: data,\n          addedComponentList,\n          addComponentDataListCopy: this.valiateCopy(this.state.addComponentSortedList || [], data || [], addedComponentList || []),\n          addSelectAll: this.valiateCheckAll(process(data || [], this.state.dataState)),\n          addSelectAll: checked,\n          deleteSelectAll: false\n        });\n      } else {\n        let addedComponentData = this.state.addedComponentList || [];\n        let deletedListdData = this.state.deletedList || [];\n        const data = addComponentDataList.map(x => {\n          const matchedItem = eventData.find(item => x.ntransactiontestcode === item.ntransactiontestcode);\n\n          if (matchedItem) {\n            addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== matchedItem.npreregno);\n            deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== matchedItem.npreregno);\n            matchedItem.selected = false;\n            return matchedItem;\n          }\n\n          return x;\n        });\n        this.setState({\n          addComponentDataList: data,\n          addedComponentList: addedComponentData,\n          deletedList: deletedListdData,\n          addSelectAll: this.valiateCheckAll(addedComponentList),\n          deleteSelectAll: this.valiateCheckAll(addedComponentList),\n          addSelectAll: checked,\n          deleteSelectAll: false,\n          addComponentDataListCopy: this.valiateCopy(this.state.addComponentSortedList || [], data || [], addedComponentData || [])\n        });\n      }\n    };\n\n    this.selectionChange = event => {\n      let addedComponentList = this.state.addedComponentList || [];\n      const addComponentDataList = this.state.addComponentDataList.map(item => {\n        if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\n          item.selected = !event.dataItem.selected;\n\n          if (item.selected) {\n            const newItem = JSON.parse(JSON.stringify(item));\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            delete newItem['selected'];\n            newItem.selected = true;\n            newItem[\"jsondata\"]['worklist'] = item;\n            newItem[\"jsonuidata\"]['worklist'] = item;\n            addedComponentList.push(newItem);\n          } else {\n            addedComponentList = addedComponentList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode);\n          }\n        }\n\n        return item;\n      });\n      this.setState({\n        addSelectAll: this.valiateCheckAll(process(addComponentDataList || [], this.state.dataState).data),\n        addComponentDataList,\n        addedComponentList,\n        deleteSelectAll: this.valiateCheckAll(addedComponentList),\n        addComponentDataListCopy: this.valiateCopy(this.state.addComponentSortedList || [], addComponentDataList || [], addedComponentList || [])\n      });\n    };\n\n    this.handleClickDelete = row => {\n      let updatedAddList = [];\n\n      if (row) {\n        const ntransactiontestcode = row && row.dataItem && row.dataItem.ntransactiontestcode;\n        const updatedList = this.state.addComponentSortedList && this.state.addComponentSortedList.filter(item => item.ntransactiontestcode !== ntransactiontestcode);\n        const exists = this.state.addComponentDataList && this.state.addComponentDataList.some(item => item.ntransactiontestcode === ntransactiontestcode);\n\n        if (!exists) {\n          updatedAddList = this.state.addComponentDataList && this.state.addComponentDataList.map(item => {\n            return item;\n          });\n          updatedAddList.push({ ...row.dataItem,\n            selected: false\n          });\n        }\n\n        this.props.childDataChange(updatedList);\n        this.setState({\n          addComponentDataList: updatedAddList,\n          addComponentSortedList: updatedList,\n          addComponentDataListCopy: this.valiateCopy(updatedList || [], updatedAddList || []),\n          addSelectAll: this.valiateCheckAll(updatedAddList)\n        });\n      }\n    };\n\n    const dataState = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      addComponentSortedList: [],\n      dataState\n    };\n    this.formRef = React.createRef();\n  }\n\n  render() {\n    console.log(this.state.addComponentDataList);\n    const extractedColumnList = [];\n    let count = (this.state.addComponentSortedList || []).length;\n    extractedColumnList.push({\n      idsName: \"IDS_ARNO\",\n      dataField: \"sarno\",\n      \"width\": \"155px\"\n    });\n\n    if (this.props.nneedsubsample) {\n      extractedColumnList.push({\n        idsName: \"IDS_SAMPLEARNO\",\n        dataField: \"ssamplearno\",\n        \"width\": \"155px\"\n      });\n    }\n\n    extractedColumnList.push({\n      idsName: \"IDS_TEST\",\n      dataField: \"stestname\",\n      \"width\": \"155px\"\n    }, {\n      idsName: \"IDS_SAMPLENAME\",\n      dataField: \"ssamplename\",\n      \"width\": \"155px\"\n    }, {\n      idsName: \"IDS_REGISTRATIONDATE\",\n      dataField: \"sregistereddate\",\n      \"width\": \"200px\"\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      className: \"d-flex justify-content-end p-2\",\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.addSaveDataGrid(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 57\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ADD\",\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 57\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(DataGridWithSelection, {\n      primaryKeyField: \"nworklistsamplecode\",\n      userInfo: this.props.userInfo,\n      data: this.state.addComponentDataList || [],\n      selectAll: this.state.addSelectAll,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_SELECTTODELETE\"\n      }),\n      selectionChange: this.selectionChange,\n      headerSelectionChange: this.headerSelectionChange,\n      extractedColumnList: extractedColumnList,\n      dataState: this.state.dataState ? this.state.dataState : {\n        skip: 0,\n        take: 10\n      },\n      dataResult: this.state.dataResult ? this.state.dataResult : process(this.state.addComponentDataList || [], this.state.dataState ? this.state.dataState : {\n        skip: 0,\n        take: 10\n      }),\n      dataStateChange: this.dataStateChangeWorklistSample,\n      scrollable: 'scrollable',\n      pageable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 57\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: '12',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(MediaHeader, {\n      className: \"mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontWeight: \"bold\",\n        color: \"black\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 65\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SELECTEDSAMPLES\"\n    }) + \" : \"), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontWeight: \"bold\",\n        color: \"blue\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 65\n      }\n    }, count))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(DataGridWithSelection, {\n      primaryKeyField: \"nworklistsamplecode\",\n      userInfo: this.props.userInfo,\n      data: this.state.addComponentSortedList || [],\n      title: this.props.intl.formatMessage({\n        id: \"IDS_SELECTTODELETE\"\n      }),\n      extractedColumnList: extractedColumnList,\n      hideColumnFilter: true,\n      isHidemulipleselect: true,\n      isActionRequired: true,\n      handleClickDelete: this.handleClickDelete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 57\n      }\n    })))));\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    if (this.props.addComponentDataLists !== previousProps.addComponentDataLists) {\n      this.setState({\n        addComponentDataList: this.props.addComponentDataLists || []\n      });\n    }\n\n    if (this.state.addComponentDataList !== previousState.addComponentDataList) {\n      this.setState({\n        dataResult: process(this.state.addComponentDataList || [], this.state.dataState)\n      });\n    }\n  }\n\n  dataStateValidation() {\n    let dataState = { ...this.state.dataState\n    };\n    let count = 0;\n    this.state.dataResult.data.map(x => {\n      if (x.selected) {\n        count++;\n      }\n    });\n\n    if (this.state.dataResult.data) {\n      if (parseInt(this.state.dataResult.total) === parseInt(count) + parseInt(this.state.dataState.skip)) {\n        let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n        dataState = { ...dataState,\n          skip: skipcount,\n          take: this.state.dataState.take\n        };\n      }\n    }\n\n    return dataState;\n  }\n\n  valiateCopy(sortedList, addComponentDataList, addedComponentList) {\n    let addedComponentLists = addedComponentList || this.state.addedComponentList || [];\n    let listData = this.props.addComponentDataLists || [];\n    let copyingList = listData.filter(item1 => !sortedList.some(item2 => item1.ntransactiontestcode === item2.ntransactiontestcode)) || [];\n    let copyingListData = copyingList.map(item => {\n      const existsInAddComponentDataList = addedComponentLists.some(item1 => item1.ntransactiontestcode === item.ntransactiontestcode);\n\n      if (existsInAddComponentDataList) {\n        return { ...item,\n          selected: true\n        };\n      } else {\n        return { ...item,\n          selected: false\n        };\n      }\n    });\n    return copyingListData;\n  }\n\n  valiateCheckAll(data) {\n    let selectAll = true;\n\n    if (data && data.length > 0) {\n      data.forEach(dataItem => {\n        if (dataItem.selected) {\n          if (dataItem.selected === false) {\n            selectAll = false;\n          }\n        } else {\n          selectAll = false;\n        }\n      });\n    } else {\n      selectAll = false;\n    }\n\n    return selectAll;\n  }\n\n}\n\nexport default injectIntl(AddWorklistSample);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/worklist/AddWorklistSample.js"],"names":["React","Component","FormattedMessage","injectIntl","Row","Col","Button","DataGrid","DataGridWithSelection","faSave","FontAwesomeIcon","MediaHeader","process","toast","AddWorklistSample","constructor","props","addSaveDataGrid","filterdata1","state","dataState","addComponentDataListCopy","take","addComponentDataList","length","data","sortListedData1","filter","x","addedComponentList","some","item","ntransactiontestcode","exists","undefined","sortListedDataList","addedItem","addComponentSortedList","updatedList","ListedData","sortListedData","updatedDataList","filterdata","skip","map","selected","push","newItem","JSON","parse","stringify","childDataChange","setState","addSelectAll","valiateCheckAll","valiateCopy","dataStateValidation","warn","intl","formatMessage","id","dataStateChangeWorklistSample","event","forEach","dataResult","headerSelectionChange","checked","syntheticEvent","target","eventData","hasOwnProperty","matchingData","find","dataItem","existingIndex","findIndex","jsondata","worklist","jsonuidata","oldItem","deleteSelectAll","addedComponentData","deletedListdData","deletedList","matchedItem","item1","npreregno","selectionChange","handleClickDelete","row","updatedAddList","formRef","createRef","render","console","log","extractedColumnList","count","idsName","dataField","nneedsubsample","marginTop","userInfo","fontWeight","color","componentDidUpdate","previousProps","previousState","addComponentDataLists","parseInt","total","skipcount","sortedList","addedComponentLists","listData","copyingList","item2","copyingListData","existsInAddComponentDataList","selectAll"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Row, Col, Button } from 'react-bootstrap';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport DataGridWithSelection from '../../components/data-grid/DataGridWithSelection';\r\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { MediaHeader } from '../product/product.styled';\r\nimport { process } from \"@progress/kendo-data-query\";\r\nimport { toast } from 'react-toastify';\r\n\r\n// ADDed by Neeraj-ALPD-5136\r\n//WorkList Screen -> Including filter in Data selection Kendo Grid \r\n//Changed functional component into class component\r\nclass AddWorklistSample extends Component {\r\n        constructor(props) {\r\n                super(props);\r\n                const dataState = { skip: 0, take: 10 };\r\n                this.state = {\r\n                        addComponentSortedList: [], dataState\r\n                };\r\n                this.formRef = React.createRef();\r\n        }\r\n\r\n        render() {\r\n                console.log(this.state.addComponentDataList);\r\n                const extractedColumnList = [];\r\n                let count = (this.state.addComponentSortedList || []).length;\r\n                extractedColumnList.push({ idsName: \"IDS_ARNO\", dataField: \"sarno\", \"width\": \"155px\" });\r\n                if (this.props.nneedsubsample) {\r\n                        extractedColumnList.push({ idsName: \"IDS_SAMPLEARNO\", dataField: \"ssamplearno\", \"width\": \"155px\" });\r\n                }\r\n                extractedColumnList.push({ idsName: \"IDS_TEST\", dataField: \"stestname\", \"width\": \"155px\" },\r\n                        { idsName: \"IDS_SAMPLENAME\", dataField: \"ssamplename\", \"width\": \"155px\" },\r\n                        { idsName: \"IDS_REGISTRATIONDATE\", dataField: \"sregistereddate\", \"width\": \"200px\" });\r\n                return (\r\n                        <>\r\n                                <Row>\r\n                                        <Col className=\"d-flex justify-content-end p-2\" md={12}>\r\n                                                <Button className=\"btn-user btn-primary-blue\"\r\n                                                        onClick={() => this.addSaveDataGrid()}>\r\n                                                        <FontAwesomeIcon icon={faSave} /> { }\r\n                                                        <FormattedMessage id='IDS_ADD' defaultMessage='Add' />\r\n                                                </Button>\r\n                                        </Col>\r\n                                        <Row style={{ marginTop: '10px' }}>\r\n                                                <Col>\r\n                                                        <DataGridWithSelection\r\n                                                                primaryKeyField={\"nworklistsamplecode\"}\r\n                                                                userInfo={this.props.userInfo}\r\n                                                                data={this.state.addComponentDataList || []}\r\n                                                                selectAll={this.state.addSelectAll}\r\n                                                                title={this.props.intl.formatMessage({ id: \"IDS_SELECTTODELETE\" })}\r\n                                                                selectionChange={this.selectionChange}\r\n                                                                headerSelectionChange={this.headerSelectionChange}\r\n                                                                extractedColumnList={extractedColumnList}\r\n                                                                dataState={this.state.dataState\r\n                                                                        ? this.state.dataState : { skip: 0, take: 10 }}\r\n                                                                dataResult={this.state.dataResult ? this.state.dataResult :\r\n                                                                        process(this.state.addComponentDataList || [], this.state.dataState\r\n                                                                                ? this.state.dataState : { skip: 0, take: 10 })}\r\n                                                                dataStateChange={this.dataStateChangeWorklistSample}\r\n                                                                scrollable={'scrollable'}\r\n                                                                pageable={true}\r\n                                                        />\r\n                                                </Col>\r\n                                        </Row>\r\n                                        <br>\r\n                                        </br>\r\n                                        <Row style={{ marginTop: '10px' }}>\r\n                                                <Col md={'12'}>\r\n                                                        <MediaHeader className='mb-3'>\r\n                                                                <span style={{ fontWeight: \"bold\", color: \"black\" }}>\r\n                                                                        {this.props.intl.formatMessage({ id: \"IDS_SELECTEDSAMPLES\" }) + \" : \"}\r\n                                                                </span>\r\n                                                                <span style={{ fontWeight: \"bold\", color: \"blue\" }}>\r\n                                                                        {count}\r\n                                                                </span>\r\n                                                        </MediaHeader>\r\n                                                </Col>\r\n                                                <Col>\r\n                                                        <DataGridWithSelection\r\n                                                                primaryKeyField={\"nworklistsamplecode\"}\r\n                                                                userInfo={this.props.userInfo}\r\n                                                                data={this.state.addComponentSortedList || []}\r\n                                                                title={this.props.intl.formatMessage({ id: \"IDS_SELECTTODELETE\" })}\r\n                                                                extractedColumnList={extractedColumnList}\r\n                                                                hideColumnFilter={true}\r\n                                                                isHidemulipleselect={true}\r\n                                                                isActionRequired={true}\r\n                                                                handleClickDelete={this.handleClickDelete}\r\n                                                        />\r\n                                                </Col>\r\n                                        </Row>\r\n                                </Row>\r\n                        </>\r\n                );\r\n        }\r\n\r\n        componentDidUpdate(previousProps,previousState) {\r\n                if (this.props.addComponentDataLists !== previousProps.addComponentDataLists) {\r\n                        this.setState({ addComponentDataList: this.props.addComponentDataLists || [] });\r\n                }\r\n                if(this.state.addComponentDataList!==previousState.addComponentDataList){\r\n                        this.setState({ dataResult: process(this.state.addComponentDataList || [], this.state.dataState) });\r\n                }\r\n        }\r\n\r\n        addSaveDataGrid = () => {\r\n                let filterdata1 = this.state.dataState ? process(this.state.addComponentDataListCopy || [], { ...this.state.dataState, take: this.state.addComponentDataList.length }).data : [];\r\n                let sortListedData1 = filterdata1.filter(x =>\r\n                        this.state.addedComponentList.some(item => item.ntransactiontestcode === x.ntransactiontestcode)\r\n                );\r\n                let exists = this.state.dataState && this.state.dataState.filter !== null && this.state.dataState.filter !== undefined ?\r\n                        sortListedData1.length > 0 ? true : false : true;\r\n                let sortListedDataList = this.state.addedComponentList && this.state.addedComponentList.filter(\r\n                        (addedItem) => process(this.state.addComponentDataList || [], this.state.dataState).data.some(\r\n                                (item) => addedItem.ntransactiontestcode === item.ntransactiontestcode\r\n                        )\r\n                ) || [];\r\n                if (sortListedDataList && sortListedDataList.length > 0 && exists) {\r\n                        let addComponentSortedList = [];\r\n                        let updatedList = [];\r\n                        let ListedData = [];\r\n                        let sortListedData = [];\r\n                        let updatedDataList = [];\r\n                        if (this.state.dataState && this.state.dataState.filter !== null && this.state.dataState.filter !== undefined) {\r\n                                let filterdata = process(this.state.addComponentDataListCopy || this.state.addComponentDataList || [],\r\n                                        this.state.dataState ).data || [];\r\n                                sortListedData = filterdata.filter(x =>\r\n                                        this.state.addedComponentList.some(item => item.ntransactiontestcode === x.ntransactiontestcode)\r\n                                );\r\n                                updatedDataList = this.state.addedComponentList.filter(\r\n                                        (item) => !sortListedData.some(\r\n                                                (addedItem) => addedItem.ntransactiontestcode === item.ntransactiontestcode\r\n                                        )\r\n                                );\r\n                                updatedList = process(this.state.addComponentDataListCopy || this.state.addComponentDataList || [],{ ...this.state.dataState,skip:0, take: this.state.addComponentDataList.length } ).data.filter(\r\n                                        (item) => !sortListedData.some(\r\n                                                (addedItem) => addedItem.ntransactiontestcode === item.ntransactiontestcode\r\n                                        )\r\n                                );\r\n                                updatedDataList.map(x => { if (x.selected) { ListedData.push(x) } });\r\n\r\n                        } else {\r\n\r\n                                ListedData = this.state.addedComponentList.filter(\r\n                                        (addedItem) => !process(this.state.addComponentDataList || [], this.state.dataState).data.some(\r\n                                                (item) => addedItem.ntransactiontestcode === item.ntransactiontestcode\r\n                                        )\r\n                                ) || [];\r\n\r\n                                sortListedData = this.state.addedComponentList.filter(\r\n                                        (addedItem) => process(this.state.addComponentDataList || [], this.state.dataState).data.some(\r\n                                                (item) => addedItem.ntransactiontestcode === item.ntransactiontestcode\r\n                                        )\r\n                                );\r\n                                updatedList = this.state.addComponentDataList.filter(\r\n                                        (item) => !sortListedData.some(\r\n                                                (addedItem) => addedItem.ntransactiontestcode === item.ntransactiontestcode\r\n                                        )\r\n                                );\r\n                        }\r\n                        if (this.state.addComponentSortedList.length > 0) {\r\n                                this.state.addComponentSortedList.map(item => {\r\n                                        const newItem = JSON.parse(JSON.stringify(item));\r\n                                        newItem[\"jsondata\"] = {}\r\n                                        newItem[\"jsonuidata\"] = {}\r\n                                        newItem[\"jsondata\"]['worklist'] = item\r\n                                        newItem[\"jsonuidata\"]['worklist'] = item\r\n                                        addComponentSortedList.push(newItem)\r\n                                })\r\n                        }\r\n                        sortListedData.map(item => {\r\n                                const newItem = JSON.parse(JSON.stringify(item));\r\n                                newItem[\"jsondata\"] = {}\r\n                                newItem[\"jsonuidata\"] = {}\r\n                                newItem[\"jsondata\"]['worklist'] = item\r\n                                newItem[\"jsonuidata\"]['worklist'] = item\r\n                                addComponentSortedList.push(newItem)\r\n                        })\r\n                        this.props.childDataChange(addComponentSortedList);\r\n                        this.setState({\r\n                                addComponentDataList:   updatedList||[],\r\n                                addSelectAll: this.valiateCheckAll(this.state.dataState && this.state.dataState.filter !== null && this.state.dataState.filter !== undefined\r\n                                        ? process(updatedList || [],\r\n                                                { ...this.state.dataState,skip:0, take: updatedList.length }).data || [] : updatedList)\r\n                                , addComponentSortedList: addComponentSortedList\r\n                                , addedComponentList: ListedData,\r\n                                addComponentDataListCopy: this.valiateCopy(addComponentSortedList || [], updatedList || [], ListedData || []),\r\n                                dataState: this.dataStateValidation()\r\n                        })\r\n                } else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELCETONESAMPLE\" }));\r\n                }\r\n        }\r\n        dataStateValidation() {\r\n                let dataState = { ...this.state.dataState };\r\n                let count=0;\r\n                this.state.dataResult.data.map(x=>{if(x.selected){count++}});\r\n                if (this.state.dataResult.data) {\r\n                        if (parseInt(this.state.dataResult.total) ===  (parseInt(count)+parseInt(this.state.dataState.skip))) {\r\n                                let skipcount = this.state.dataState.skip > 0 ? (this.state.dataState.skip - this.state.dataState.take) :\r\n                                        this.state.dataState.skip\r\n                                dataState = { ...dataState,skip: skipcount, take: this.state.dataState.take }\r\n                        }\r\n                }\r\n               return dataState;\r\n        }\r\n\r\n\r\n        dataStateChangeWorklistSample = (event) => {\r\n                let updatedList = [];\r\n                if (event.dataState && event.dataState.filter === null) {\r\n                        let addComponentDataListCopy = this.state.addComponentDataListCopy || this.state.addComponentDataList || [];\r\n                        addComponentDataListCopy.forEach(x => {\r\n                                const exists = this.state.addComponentSortedList.some(\r\n                                        item => item.ntransactiontestcode === x.ntransactiontestcode\r\n                                );\r\n                                if (!exists) {\r\n                                        updatedList.push(x);\r\n                                }\r\n                        });\r\n                } else {\r\n                        updatedList = this.state.addComponentDataList || []\r\n                }\r\n                this.setState({\r\n                        dataResult: process(this.state.addComponentDataList || [], event.dataState),\r\n                        dataState: event.dataState, addComponentDataList: updatedList, addSelectAll: event.dataState && event.dataState.filter === null ?\r\n                                this.valiateCheckAll(updatedList) :\r\n                                this.valiateCheckAll(process(updatedList || [], event.dataState).data)\r\n                });\r\n        }\r\n\r\n\r\n        headerSelectionChange = (event) => {\r\n                const checked = event.syntheticEvent.target.checked;\r\n                const eventData = event.target.props.data.hasOwnProperty('data') ? event.target.props.data.data || [] : event.target.props.data || [];\r\n                let addComponentDataList = //event.target.props.data \r\n                        this.state.addComponentDataList || [];\r\n                let addedComponentList = this.state.addedComponentList || [];\r\n                if (checked) {\r\n                        const data = addComponentDataList.map(item => {\r\n                                const matchingData = eventData.find(dataItem => dataItem.ntransactiontestcode === item.ntransactiontestcode);\r\n                                if (matchingData) {\r\n                                        const existingIndex = addedComponentList.findIndex(\r\n                                                x => x.ntransactiontestcode === item.ntransactiontestcode\r\n                                        );\r\n\r\n                                        if (existingIndex === -1) {\r\n                                                const newItem = {\r\n                                                        ...item,\r\n                                                        selected: true,\r\n                                                        jsondata: { worklist: item },\r\n                                                        jsonuidata: { worklist: item },\r\n                                                };\r\n                                                addedComponentList.push(newItem);\r\n                                        } else {\r\n                                                const oldItem = { ...addedComponentList[existingIndex], selected: true };\r\n                                                const newItem = {\r\n                                                        ...oldItem,\r\n                                                        selected: true,\r\n                                                        jsondata: { worklist: oldItem },\r\n                                                        jsonuidata: { worklist: oldItem },\r\n                                                };\r\n                                                addedComponentList.push(newItem);\r\n                                        }\r\n\r\n                                        return { ...item, selected: true };\r\n                                } else {\r\n                                        return { ...item, selected: item.selected ? true : false };\r\n                                }\r\n                        });\r\n                        this.setState({\r\n                                addComponentDataList: data, addedComponentList,\r\n                                addComponentDataListCopy: this.valiateCopy(this.state.addComponentSortedList || [], data || [], addedComponentList || []),\r\n                                addSelectAll: this.valiateCheckAll(process(data || [], this.state.dataState)),\r\n                                addSelectAll: checked, deleteSelectAll: false\r\n                        });\r\n                } else {\r\n                        let addedComponentData = this.state.addedComponentList || [];\r\n                        let deletedListdData = this.state.deletedList || [];\r\n                        const data = addComponentDataList.map(x => {\r\n                                const matchedItem = eventData.find(item => x.ntransactiontestcode === item.ntransactiontestcode);\r\n                                if (matchedItem) {\r\n                                        addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== matchedItem.npreregno);\r\n                                        deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== matchedItem.npreregno);\r\n                                        matchedItem.selected = false;\r\n                                        return matchedItem;\r\n                                }\r\n                                return x;\r\n                        });\r\n\r\n                        this.setState({\r\n                                addComponentDataList: data, addedComponentList: addedComponentData, deletedList: deletedListdData,\r\n                                addSelectAll: this.valiateCheckAll(addedComponentList),\r\n                                deleteSelectAll: this.valiateCheckAll(addedComponentList),\r\n                                addSelectAll: checked, deleteSelectAll: false,\r\n                                addComponentDataListCopy: this.valiateCopy(this.state.addComponentSortedList || [], data || [], addedComponentData || []),\r\n                        });\r\n                }\r\n        }\r\n\r\n        selectionChange = (event) => {\r\n                let addedComponentList = this.state.addedComponentList || [];\r\n                const addComponentDataList = this.state.addComponentDataList.map(item => {\r\n                        if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\r\n                                item.selected = !event.dataItem.selected;\r\n                                if (item.selected) {\r\n                                        const newItem = JSON.parse(JSON.stringify(item));\r\n                                        newItem[\"jsondata\"] = {}\r\n                                        newItem[\"jsonuidata\"] = {}\r\n                                        delete newItem['selected']\r\n                                        newItem.selected = true;\r\n                                        newItem[\"jsondata\"]['worklist'] = item\r\n                                        newItem[\"jsonuidata\"]['worklist'] = item\r\n                                        addedComponentList.push(newItem);\r\n                                }\r\n                                else {\r\n                                        addedComponentList = addedComponentList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode)\r\n                                }\r\n                        }\r\n                        return item;\r\n                });\r\n                this.setState({\r\n                        addSelectAll: this.valiateCheckAll(process(addComponentDataList || [], this.state.dataState).data),\r\n                        addComponentDataList, addedComponentList,\r\n                        deleteSelectAll: this.valiateCheckAll(addedComponentList),\r\n                        addComponentDataListCopy: this.valiateCopy(this.state.addComponentSortedList || [], addComponentDataList || [], addedComponentList || [])\r\n                });\r\n        }\r\n\r\n        valiateCopy(sortedList, addComponentDataList, addedComponentList) {\r\n                let addedComponentLists = addedComponentList || this.state.addedComponentList || [];\r\n                let listData = this.props.addComponentDataLists || [];\r\n                let copyingList = listData.filter(item1 =>\r\n                        !sortedList.some(item2 => item1.ntransactiontestcode === item2.ntransactiontestcode)\r\n                ) || [];\r\n                let copyingListData = copyingList.map(item => {\r\n                        const existsInAddComponentDataList = addedComponentLists.some(\r\n                                item1 => item1.ntransactiontestcode === item.ntransactiontestcode\r\n                        );\r\n                        if (existsInAddComponentDataList) {\r\n                                return { ...item, selected: true };\r\n                        } else {\r\n                                return { ...item, selected: false };\r\n                        }\r\n                });\r\n                return copyingListData;\r\n        }\r\n        valiateCheckAll(data) {\r\n                let selectAll = true;\r\n                if (data && data.length > 0) {\r\n                        data.forEach(dataItem => {\r\n                                if (dataItem.selected) {\r\n                                        if (dataItem.selected === false) {\r\n                                                selectAll = false;\r\n                                        }\r\n                                } else {\r\n                                        selectAll = false;\r\n                                }\r\n                        })\r\n                } else {\r\n                        selectAll = false;\r\n                }\r\n                return selectAll;\r\n        }\r\n\r\n        handleClickDelete = (row) => {\r\n                let updatedAddList = [];\r\n                if (row) {\r\n                        const ntransactiontestcode = row && row.dataItem && row.dataItem.ntransactiontestcode;\r\n                        const updatedList = this.state.addComponentSortedList && this.state.addComponentSortedList.filter(\r\n                                (item) => item.ntransactiontestcode !== ntransactiontestcode\r\n                        );\r\n                        const exists = this.state.addComponentDataList && this.state.addComponentDataList.some(\r\n                                (item) => item.ntransactiontestcode === ntransactiontestcode\r\n                        );\r\n                        if (!exists) {\r\n                                updatedAddList = this.state.addComponentDataList && this.state.addComponentDataList.map(item => {\r\n                                        return item\r\n                                })\r\n                                updatedAddList.push({ ...row.dataItem, selected: false });\r\n                        }\r\n                        this.props.childDataChange(updatedList);\r\n                        this.setState({\r\n                                addComponentDataList: updatedAddList, addComponentSortedList: updatedList,\r\n                                addComponentDataListCopy: this.valiateCopy(updatedList || [], updatedAddList || []),\r\n                                addSelectAll: this.valiateCheckAll(updatedAddList)\r\n                        })\r\n                }\r\n        }\r\n}\r\n\r\nexport default (injectIntl(AddWorklistSample));"]},"metadata":{},"sourceType":"module"}