{"ast":null,"code":"import _classCallCheck from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from'react';import{connect}from'react-redux';import{injectIntl}from'react-intl';import FormSelectSearch from'../../components/form-select-search/form-select-search.component';import{Row,Col}from'react-bootstrap';import{callService,crudMaster,validateEsignCredential,updateStore,getSQLQueryDetail,getSQLQueryComboService,filterColumnData,comboChangeQueryType,executeUserQuery,comboColumnValues}from'../../actions';import rsapi from'../../rsapi';import{toast}from'react-toastify';import{constructOptionList}from'../../components/CommonScript';var ComboBoxControl=/*#__PURE__*/function(_React$Component){_inherits(ComboBoxControl,_React$Component);var _super=_createSuper(ComboBoxControl);function ComboBoxControl(props){var _this;_classCallCheck(this,ComboBoxControl);_this=_super.call(this,props);_this.state={//data: items.slice(),\nComboVal:'',dataarr:[],Fieldarr:[],FieldColValue:[],ChartTempType:0,DBType:[],SqlQuery:[],QueryCode:0};_this.onChange=_this.onChange.bind(_assertThisInitialized(_this));return _this;}_createClass(ComboBoxControl,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;var url=\"sqlquery/getColumnValues\";rsapi.post(url,{\"tablename\":this.props.tableName,\"fieldname\":this.props.fieldName,\"displayparam\":this.props.displayParam}).then(function(response){_this2.setState({FieldColValue:constructOptionList(response.data[1],_this2.props.fieldName,_this2.props.displayParam,undefined,undefined,undefined).get(\"OptionList\")});}).catch(function(error){if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}},{key:\"onChange\",value:function onChange(event){if(event.label!=null){this.setState({ComboVal:event.label});this.props.onvaluechange(event.value);//event.target.value);\n}}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{lg:12},/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:this.props.intl.formatMessage({id:this.props.labelName}),isSearchable:true,name:this.props.fieldName,placeholder:\"Please Select...\",isMandatory:true,options:this.state.FieldColValue||[],optionId:this.props.fieldName,optionValue:this.props.displayParam.length>0?this.props.displayParam:this.props.fieldName,showOption:true,onChange:this.onChange.bind(this),closeMenuOnSelect:true,alphabeticalSort:true})));}}]);return ComboBoxControl;}(React.Component);var mapStateToProps=function mapStateToProps(state){return{Login:state.Login};};export default connect(mapStateToProps,{callService:callService,crudMaster:crudMaster,updateStore:updateStore,filterColumnData:filterColumnData,validateEsignCredential:validateEsignCredential,getSQLQueryDetail:getSQLQueryDetail,getSQLQueryComboService:getSQLQueryComboService,comboChangeQueryType:comboChangeQueryType,executeUserQuery:executeUserQuery,comboColumnValues:comboColumnValues})(injectIntl(ComboBoxControl));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/dashboard/ComboBoxControl.jsx"],"names":["React","connect","injectIntl","FormSelectSearch","Row","Col","callService","crudMaster","validateEsignCredential","updateStore","getSQLQueryDetail","getSQLQueryComboService","filterColumnData","comboChangeQueryType","executeUserQuery","comboColumnValues","rsapi","toast","constructOptionList","ComboBoxControl","props","state","ComboVal","dataarr","Fieldarr","FieldColValue","ChartTempType","DBType","SqlQuery","QueryCode","onChange","bind","url","post","tableName","fieldName","displayParam","then","response","setState","data","undefined","get","catch","error","status","message","warn","event","label","onvaluechange","value","intl","formatMessage","id","labelName","length","Component","mapStateToProps","Login"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\n\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSQLQueryDetail,\r\n    getSQLQueryComboService, filterColumnData, comboChangeQueryType, executeUserQuery, comboColumnValues\r\n} from '../../actions';\r\nimport rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport { constructOptionList } from '../../components/CommonScript';\r\n\r\nclass ComboBoxControl extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //data: items.slice(),\r\n            ComboVal: '', dataarr: [], Fieldarr: [], FieldColValue: [],\r\n            ChartTempType: 0, DBType: [], SqlQuery: [], QueryCode: 0\r\n\r\n        }\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const url = \"sqlquery/getColumnValues\";\r\n        rsapi.post(url, { \"tablename\": this.props.tableName, \r\n                            \"fieldname\": this.props.fieldName, \r\n                            \"displayparam\": this.props.displayParam })\r\n        .then(response => {\r\n                    this.setState({ FieldColValue: constructOptionList(response.data[1], this.props.fieldName,\r\n                        this.props.displayParam, undefined, undefined, undefined).get(\"OptionList\") });         \r\n        })\r\n        .catch(error => {\r\n\r\n            if (error.response.status === 500) {\r\n                toast.error(error.message);\r\n            }\r\n            else {\r\n                toast.warn(error.response.data);\r\n            }\r\n        })\r\n    }\r\n\r\n    onChange(event) {\r\n        if (event.label != null) {\r\n            this.setState({ComboVal: event.label});\r\n            this.props.onvaluechange(event.value)   //event.target.value);\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <FormSelectSearch\r\n                        formLabel={this.props.intl.formatMessage({ id: this.props.labelName })}\r\n                        isSearchable={true}\r\n                        name={this.props.fieldName}\r\n                        placeholder=\"Please Select...\"\r\n                        isMandatory={true}\r\n                        options={this.state.FieldColValue || []}\r\n                        optionId={this.props.fieldName}\r\n                        optionValue={this.props.displayParam.length > 0 ? this.props.displayParam : this.props.fieldName}\r\n\r\n                        showOption={true}\r\n                        onChange={this.onChange.bind(this)}\r\n                        closeMenuOnSelect={true}\r\n                        alphabeticalSort={true}\r\n\r\n                    />\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, filterColumnData, validateEsignCredential, getSQLQueryDetail, getSQLQueryComboService, comboChangeQueryType, executeUserQuery, comboColumnValues\r\n})(injectIntl(ComboBoxControl));"]},"metadata":{},"sourceType":"module"}