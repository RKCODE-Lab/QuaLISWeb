{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\designtemplatemapping\\\\configureSendToStoreFields.jsx\";\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport React from 'react';\nimport { injectIntl, FormattedMessage } from 'react-intl'; // import ReactTooltip from 'react-tooltip';\n\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\nimport { ReadOnlyText } from '../../components/App.styles';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport Tabs, { TabPane } from \"rc-tabs\";\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\nimport { formCode, SampleType } from '../../components/Enumeration';\nimport 'rc-tabs/assets/index.css';\nimport { Col, Row, Card } from 'react-bootstrap';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\n\nclass ConfigureSendToStoreFields extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTabChange = tab => {\n      this.setState({\n        selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\n      });\n    };\n\n    const screens = [{\n      eventKey: 'Sample',\n      name: \"Sample\"\n    }]; // if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedjoballocation === true)  {\n    //     screens.push({ eventKey: 'joballocation', name: \"IDS_JOBALLOCATION\", formcode: formCode.JOBALLOCATION });\n    // }\n    // if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedmyjob === true) {\n    //     screens.push({ eventKey: 'myjobs', name: \"IDS_MYJOBS\", formcode: formCode.MYJOBS });\n    // }\n\n    if (this.props.needSubSample === true) {\n      screens.push({\n        eventKey: 'SubSample',\n        name: \"IDS_SUBSAMPLE\"\n      });\n    } // let extractedColumnList = [];\n    // if (this.props.selectedTemplateType === SampleType.Masters) {\n    //     extractedColumnList.push(\n    //         { \"title\": \"IDS_GRIDITEM\", \"field\": \"griditem\", \"width\": \"600px\" },\n    //         { \"title\": \"IDS_GRIDMOREITEM\", \"field\": \"gridmoreitem\", \"width\": \"600px\" }\n    //     );\n    // }\n    // else {\n    //     extractedColumnList.push(\n    //         { \"title\": \"IDS_EDITABLESTATUS\", \"field\": \"editablestatus\", \"width\": \"600px\" },\n    //     );\n    // }\n\n\n    this.state = {\n      screens,\n      // extractedColumnList,\n      selectedScreen: {\n        eventKey: 'Sample',\n        name: \"Sample\"\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.selectedTemplateType === SampleType.Masters ? /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null)))) : /*#__PURE__*/React.createElement(AtTabs, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      activeKey: this.state.selectedScreen.eventKey,\n      moreIcon: \"...\",\n      onChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }\n    }, this.state.screens.map(screen => /*#__PURE__*/React.createElement(TabPane, {\n      name: screen.eventKey,\n      tab: this.props.intl.formatMessage({\n        id: screen.name\n      }),\n      key: screen.eventKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_FIELDS\",\n      message: \"Fields\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 69\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_MAPPINGFIELD\",\n      message: \"Mapping Field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 69\n      }\n    }))))), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        height: \"350px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 65\n      }\n    }, this.props.intl.formatMessage({\n      id: 'IDS_QUANTITY'\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch // name={this.props.intl.formatMessage({ id: 'IDS_QUANTITY' })}\n    , {\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.selectedScreen.eventKey === \"SubSample\" ? this.props.SampleList || [] : this.props.MainSampleList || [],\n      optionId: \"value\",\n      optionValue: \"label\",\n      value: this.state.selectedScreen.eventKey === \"SubSample\" ? this.props.selectedRecord.SubQuantity === undefined ? this.props.selectedValue && this.props.selectedValue.SubQuantity || [] : this.props.selectedRecord.SubQuantity || [] : this.props.selectedRecord.Quantity === undefined ? this.props.selectedValue && this.props.selectedValue.Quantity || [] : this.props.selectedRecord.Quantity || [],\n      isSearchable: false,\n      isMandatory: false,\n      isClearable: true,\n      isDisabled: false,\n      onChange: event => this.props.onComboChange(event, 'Quantity', this.state.selectedScreen.eventKey),\n      closeMenuOnSelect: true,\n      alphabeticalSort: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 65\n      }\n    }, \" \", this.props.intl.formatMessage({\n      id: 'IDS_UNIT'\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch //  name={this.props.intl.formatMessage({ id: 'IDS_QUANTITY' })}\n    , {\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.selectedScreen.eventKey === \"SubSample\" ? this.props.SubSampleList || [] : this.props.MainSubSampleList || [],\n      optionId: \"value\",\n      optionValue: \"label\",\n      value: this.state.selectedScreen.eventKey === \"SubSample\" ? this.props.selectedRecord.SubUnit === undefined ? this.props.selectedValue && this.props.selectedValue.SubUnit || [] : this.props.selectedRecord.SubUnit || [] : this.props.selectedRecord.Unit === undefined ? this.props.selectedValue && this.props.selectedValue.Unit || [] : this.props.selectedRecord.Unit || [],\n      isMandatory: false,\n      isClearable: true,\n      disableSearch: false,\n      isSearchable: false,\n      isDisabled: false,\n      onChange: event => this.props.onComboChange(event, 'Unit', this.state.selectedScreen.eventKey),\n      closeMenuOnSelect: true,\n      alphabeticalSort: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 65\n      }\n    })))))))))))));\n  }\n\n}\n\nexport default injectIntl(ConfigureSendToStoreFields);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/designtemplatemapping/configureSendToStoreFields.jsx"],"names":["LocalizationProvider","React","injectIntl","FormattedMessage","AtTabs","ReadOnlyText","PerfectScrollbar","Tabs","TabPane","AtTableWrap","formCode","SampleType","Col","Row","Card","FormSelectSearch","ConfigureSendToStoreFields","Component","constructor","props","onTabChange","tab","setState","selectedScreen","state","screens","find","screen","eventKey","name","needSubSample","push","render","selectedTemplateType","Masters","map","intl","formatMessage","id","height","SampleList","MainSampleList","selectedRecord","SubQuantity","undefined","selectedValue","Quantity","event","onComboChange","SubSampleList","MainSubSampleList","SubUnit","Unit"],"mappings":"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","sourcesContent":["import { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport React from 'react'\r\nimport { injectIntl, FormattedMessage } from 'react-intl'\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\r\nimport { ReadOnlyText } from '../../components/App.styles';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Tabs, { TabPane } from \"rc-tabs\";\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport { formCode, SampleType } from '../../components/Enumeration';\r\nimport 'rc-tabs/assets/index.css';\r\nimport { Col, Row, Card } from 'react-bootstrap';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\n\r\nclass ConfigureSendToStoreFields extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const screens = [{ eventKey: 'Sample', name: \"Sample\" }];\r\n        // if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedjoballocation === true)  {\r\n        //     screens.push({ eventKey: 'joballocation', name: \"IDS_JOBALLOCATION\", formcode: formCode.JOBALLOCATION });\r\n        // }\r\n\r\n        // if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedmyjob === true) {\r\n        //     screens.push({ eventKey: 'myjobs', name: \"IDS_MYJOBS\", formcode: formCode.MYJOBS });\r\n        // }\r\n        if (this.props.needSubSample === true) {\r\n            screens.push({ eventKey: 'SubSample', name: \"IDS_SUBSAMPLE\" });\r\n        }\r\n        // let extractedColumnList = [];\r\n        // if (this.props.selectedTemplateType === SampleType.Masters) {\r\n        //     extractedColumnList.push(\r\n        //         { \"title\": \"IDS_GRIDITEM\", \"field\": \"griditem\", \"width\": \"600px\" },\r\n        //         { \"title\": \"IDS_GRIDMOREITEM\", \"field\": \"gridmoreitem\", \"width\": \"600px\" }\r\n        //     );\r\n        // }\r\n        // else {\r\n        //     extractedColumnList.push(\r\n        //         { \"title\": \"IDS_EDITABLESTATUS\", \"field\": \"editablestatus\", \"width\": \"600px\" },\r\n\r\n        //     );\r\n        // }\r\n        this.state = {\r\n            screens,\r\n            // extractedColumnList,\r\n            selectedScreen: { eventKey: 'Sample', name: \"Sample\" }\r\n        }\r\n    }\r\n    onTabChange = (tab) => {\r\n        this.setState({\r\n            selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\r\n        })\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                {this.props.selectedTemplateType === SampleType.Masters ?\r\n                    <PerfectScrollbar>\r\n                        {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                        <AtTableWrap className=\"at-list-table\">\r\n                            <LocalizationProvider language=\"lang\">\r\n                                <>\r\n\r\n                                </>\r\n                            </LocalizationProvider>\r\n                        </AtTableWrap>\r\n                        {/* <ReactTooltip /> */}\r\n                    </PerfectScrollbar>\r\n\r\n                    :\r\n                    <AtTabs>\r\n                        <Tabs activeKey={this.state.selectedScreen.eventKey} moreIcon=\"...\" onChange={this.onTabChange}>\r\n                            {this.state.screens.map(screen =>\r\n                                <TabPane name={screen.eventKey} tab={this.props.intl.formatMessage({ id: screen.name })} key={screen.eventKey}>\r\n                                    <PerfectScrollbar>\r\n                                        {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                                        <AtTableWrap className=\"at-list-table\">\r\n                                            <LocalizationProvider language=\"lang\">\r\n                                                <Card className=\"border-0\">\r\n\r\n                                                    <Card.Header>\r\n                                                        <Row>\r\n                                                            <Col md={6}>\r\n                                                                <ReadOnlyText>\r\n                                                                    <FormattedMessage id=\"IDS_FIELDS\" message=\"Fields\" />\r\n                                                                </ReadOnlyText>\r\n                                                            </Col>\r\n                                                            <Col md={6}>\r\n                                                                <ReadOnlyText>\r\n                                                                    <FormattedMessage id=\"IDS_MAPPINGFIELD\" message=\"Mapping Field\" />\r\n                                                                </ReadOnlyText>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </Card.Header>\r\n                                                    <Card.Body style={{height:\"350px\"}} >\r\n                                                        <Row>\r\n                                                            <Col md={6}>\r\n\r\n                                                                <ReadOnlyText>{this.props.intl.formatMessage({ id: 'IDS_QUANTITY' })}</ReadOnlyText>\r\n\r\n                                                            </Col>\r\n                                                            <Col md={6}>\r\n\r\n                                                                <FormSelectSearch\r\n                                                                    // name={this.props.intl.formatMessage({ id: 'IDS_QUANTITY' })}\r\n                                                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                    options={this.state.selectedScreen.eventKey === \"SubSample\" ? this.props.SampleList || [] : this.props.MainSampleList || []}\r\n                                                                    optionId=\"value\"\r\n                                                                    optionValue=\"label\"\r\n                                                                    value={this.state.selectedScreen.eventKey === \"SubSample\" ? this.props.selectedRecord.SubQuantity === undefined ? this.props.selectedValue && this.props.selectedValue.SubQuantity || [] :\r\n                                                                        this.props.selectedRecord.SubQuantity || [] : this.props.selectedRecord.Quantity === undefined ?\r\n                                                                        this.props.selectedValue && this.props.selectedValue.Quantity || [] : this.props.selectedRecord.Quantity || []}\r\n                                                                    isSearchable={false}\r\n                                                                    isMandatory={false}\r\n                                                                    isClearable={true}\r\n                                                                    isDisabled={false}\r\n                                                                    onChange={(event) => this.props.onComboChange(event, 'Quantity', this.state.selectedScreen.eventKey)}\r\n                                                                    closeMenuOnSelect={true}\r\n                                                                    alphabeticalSort={true}\r\n                                                                />\r\n                                                            </Col>\r\n                                                            <Col md={6}>\r\n                                                                <ReadOnlyText> {this.props.intl.formatMessage({ id: 'IDS_UNIT' })}</ReadOnlyText>\r\n                                                            </Col>\r\n                                                            <Col md={6}>\r\n                                                                <FormSelectSearch\r\n\r\n                                                                    //  name={this.props.intl.formatMessage({ id: 'IDS_QUANTITY' })}\r\n                                                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                    options={this.state.selectedScreen.eventKey === \"SubSample\" ? this.props.SubSampleList || [] : this.props.MainSubSampleList || []}\r\n                                                                    optionId=\"value\"\r\n                                                                    optionValue=\"label\"\r\n                                                                    value={this.state.selectedScreen.eventKey === \"SubSample\" ? this.props.selectedRecord.SubUnit === undefined ? this.props.selectedValue && this.props.selectedValue.SubUnit || [] : this.props.selectedRecord.SubUnit || [] : this.props.selectedRecord.Unit === undefined ? this.props.selectedValue && this.props.selectedValue.Unit || [] : this.props.selectedRecord.Unit || []}\r\n                                                                    isMandatory={false}\r\n                                                                    isClearable={true}\r\n                                                                    disableSearch={false}\r\n                                                                    isSearchable={false}\r\n                                                                    isDisabled={false}\r\n                                                                    onChange={(event) => this.props.onComboChange(event, 'Unit', this.state.selectedScreen.eventKey)}\r\n                                                                    closeMenuOnSelect={true}\r\n                                                                    alphabeticalSort={true}\r\n                                                                />\r\n                                                                {/* </FormGroup> */}\r\n                                                            </Col>\r\n                                                        </Row>\r\n\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n\r\n\r\n                                            </LocalizationProvider>\r\n                                        </AtTableWrap>\r\n                                        {/* <ReactTooltip /> */}\r\n                                    </PerfectScrollbar>\r\n                                </TabPane>\r\n                            )}\r\n                        </Tabs>\r\n                    </AtTabs>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default injectIntl(ConfigureSendToStoreFields)"]},"metadata":{},"sourceType":"module"}