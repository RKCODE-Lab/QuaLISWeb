{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboardtypes\\\\charts\\\\BubbleChart.jsx\";\nimport React from 'react';\nimport { Chart, ChartLegend, ChartSeries, ChartSeriesItem, ChartTooltip, ChartYAxis, ChartYAxisItem } from '@progress/kendo-react-charts';\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\nimport { faFilePdf } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Col, Nav, Row } from 'react-bootstrap';\nimport { ProductList } from '../../../pages/product/product.styled';\nimport { ReactComponent as ChartRefresh } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/image/chart-refresh.svg\";\nimport { injectIntl } from 'react-intl';\nimport '../../../assets/styles/dashboard.css';\nimport 'hammerjs';\nimport { designComponents } from '../../../components/Enumeration';\nimport ScrollContainer from 'react-indiana-drag-scroll';\nimport { Breadcrumb } from 'react-bootstrap';\nimport { convertDatetoStringByTimeZone } from '../../../components/CommonScript';\nimport { Attachments } from '../../../components/dropzone/dropzone.styles';\n\nclass BubbleChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.exportPDF = () => {\n      this.pdfExportComponent.save();\n    };\n\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {}\n    };\n  }\n\n  BreadcrumDesign(viewDashBoardDesignConfigList) {\n    let breadCrumValue = \"\";\n    let arryalist = [];\n    let selectedRecord = this.props.selectedRecord || {};\n    viewDashBoardDesignConfigList.forEach(item => {\n      if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n        breadCrumValue = selectedRecord ? selectedRecord[item.sfieldname] ? convertDatetoStringByTimeZone(this.props.userInfo, selectedRecord[item.sfieldname]) : convertDatetoStringByTimeZone(this.props.userInfo, new Date(item.dataList[0])) : convertDatetoStringByTimeZone(this.props.userInfo, new Date(item.dataList[0]));\n      } else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n        let listvalue = [];\n\n        if (selectedRecord && selectedRecord[item.sfieldname]) {\n          listvalue.push({\n            [item.sdisplaymember]: selectedRecord[item.sfieldname].label\n          });\n        } else {\n          listvalue = item.dataList.filter(lst => {\n            return lst[item.sfieldname] === parseInt(item.sdefaultvalue);\n          });\n        }\n\n        breadCrumValue = listvalue[0][item.sdisplaymember];\n      } else if (item.ndesigncomponentcode === designComponents.USERINFO) {\n        let listvalue = []; //commenting now for restricting breadcrumbs\n        // if(selectedRecord && selectedRecord[item.sfieldname]) {\n        //     listvalue.push({ [item.sfieldname]: selectedRecord[item.sfieldname] })\n        // }else{\n        //     listvalue.push({ [item.sfieldname]: this.props.userInfo && this.props.userInfo[item.sfieldname] })\n        // }\n        //breadCrumValue = listvalue && listvalue.length > 0 ? listvalue[0][item.sfieldname] : \"-\";\n\n        breadCrumValue = listvalue && listvalue.length == 0 ? \"\" : \"-\";\n      } else {\n        breadCrumValue = selectedRecord ? selectedRecord[item.sfieldname] ? selectedRecord[item.sfieldname] : item.sdefaultvalue : item.sdefaultvalue;\n      }\n\n      if (item.ndesigncomponentcode !== designComponents.USERINFO) {\n        arryalist.push({\n          \"label\": item.sdisplayname,\n          \"value\": breadCrumValue\n        });\n      }\n    });\n    return /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ScrollContainer, {\n      className: \"breadcrumbs-scroll-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Breadcrumb, {\n      className: \"filter-breadcrumbs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 25\n      }\n    }, arryalist.map((item, index) => /*#__PURE__*/React.createElement(Breadcrumb.Item, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 37\n      }\n    }, item[\"label\"], \" \", \":\", \" \"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 37\n      }\n    }, item[\"value\"])))))));\n  }\n\n  render() {\n    let Series = []; // const labelContent = (props) => {\n    //     return `${props.dataItem}`;\n    // }\n    // if (this.props.bubbleSeries !== undefined) {\n    //     this.props.bubbleSeries.map(item => {\n    //         Series.push(\n    //         <ChartSeriesItem type=\"bubble\" data={item.Series} name={item.yField} color={item.colors} aggregate=\"count\" stack={this.props.chartTypeName === 'area' ? true : false}\n    //         />               \n    //         );\n    //         return null;\n    //     })color={item.colorFill}\n    // }\n\n    if (this.props.bubbleSeries !== undefined) {\n      this.props.bubbleSeries.forEach(item => {\n        Series.push( /*#__PURE__*/React.createElement(ChartSeriesItem, {\n          type: \"bubble\",\n          data: this.props.chartData,\n          xField: item.xFieldBubble,\n          yField: item.ySeriesBubble,\n          sizeField: item.sizeSeriesBubble,\n          categoryField: item.categorySeriesBubble,\n          name: item.sizeSeriesBubbleForLegend,\n          color: item.colorFill,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }\n        }));\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.viewDashBoardDesignConfigList && this.BreadcrumDesign(this.props.viewDashBoardDesignConfigList), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      hidden: this.props.hiddenExport,\n      className: \"text-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }\n    }, this.props.masterData.selectedDashBoardTypes && this.props.masterData.selectedDashBoardTypes.sdashboardtypename)), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"d-inline dropdown badget_menu d-flex justify-content-end \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.props.hiddenParam,\n      title: \"ChartRefresh\",\n      onClick: () => this.props.checkParametersAvailable(this.props.masterData.selectedDashBoardTypes, this.props.userInfo, this.props.masterData, this.props.dashBoardTypeNo, this.props.templateCode),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ChartRefresh, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      style: {\n        marginLeft: '0.35rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      href: \"#\",\n      hidden: this.props.hiddenExport,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFilePdf,\n      className: \"ActionIconColor\",\n      onClick: () => this.exportPDF(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 33\n      }\n    }))))), this.props.bubbleSeries && this.props.bubbleSeries.length > 0 ? /*#__PURE__*/React.createElement(PDFExport, {\n      ref: component => this.pdfExportComponent = component,\n      paperSize: \"auto\",\n      margin: 40,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      pannable: true,\n      zoomable: true,\n      style: this.props.style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ChartSeries, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 29\n      }\n    }, Series), /*#__PURE__*/React.createElement(ChartLegend, {\n      position: \"bottom\",\n      orientation: \"horizontal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(ChartYAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ChartYAxisItem, {\n      labels: {\n        format: '{0:N0}'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(ChartTooltip, {\n      format: \"{3}: {2:N0}\",\n      opacity: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 29\n      }\n    }))) : /*#__PURE__*/React.createElement(Attachments, {\n      className: \"norecordchart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_NORECORDSAVAILABLE\"\n    })));\n  }\n\n}\n\nexport default injectIntl(BubbleChart);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/dashboardtypes/charts/BubbleChart.jsx"],"names":["React","Chart","ChartLegend","ChartSeries","ChartSeriesItem","ChartTooltip","ChartYAxis","ChartYAxisItem","PDFExport","faFilePdf","FontAwesomeIcon","Col","Nav","Row","ProductList","injectIntl","designComponents","ScrollContainer","Breadcrumb","convertDatetoStringByTimeZone","Attachments","BubbleChart","Component","constructor","props","exportPDF","pdfExportComponent","save","state","data","masterStatus","error","selectedRecord","BreadcrumDesign","viewDashBoardDesignConfigList","breadCrumValue","arryalist","forEach","item","ndesigncomponentcode","DATEPICKER","sfieldname","userInfo","Date","dataList","COMBOBOX","listvalue","push","sdisplaymember","label","filter","lst","parseInt","sdefaultvalue","USERINFO","length","sdisplayname","map","index","render","Series","bubbleSeries","undefined","chartData","xFieldBubble","ySeriesBubble","sizeSeriesBubble","categorySeriesBubble","sizeSeriesBubbleForLegend","colorFill","hiddenExport","masterData","selectedDashBoardTypes","sdashboardtypename","hiddenParam","checkParametersAvailable","dashBoardTypeNo","templateCode","marginLeft","component","style","format","intl","formatMessage","id"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n    Chart, ChartLegend, ChartSeries, ChartSeriesItem, ChartTooltip,\r\n    ChartYAxis, ChartYAxisItem\r\n} from '@progress/kendo-react-charts';\r\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\r\nimport { faFilePdf } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Col, Nav, Row } from 'react-bootstrap';\r\nimport { ProductList } from '../../../pages/product/product.styled';\r\nimport { ReactComponent as ChartRefresh } from '../../../assets/image/chart-refresh.svg';\r\nimport { injectIntl } from 'react-intl';\r\nimport '../../../assets/styles/dashboard.css';\r\nimport 'hammerjs';\r\nimport { designComponents } from '../../../components/Enumeration';\r\nimport ScrollContainer from 'react-indiana-drag-scroll';\r\nimport { Breadcrumb } from 'react-bootstrap';\r\nimport { convertDatetoStringByTimeZone } from '../../../components/CommonScript';\r\nimport { Attachments } from '../../../components/dropzone/dropzone.styles';\r\n\r\n\r\n\r\nclass BubbleChart extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {}\r\n\r\n        }\r\n    }\r\n    exportPDF = () => {\r\n        this.pdfExportComponent.save();\r\n    }\r\n    BreadcrumDesign(viewDashBoardDesignConfigList) {\r\n        let breadCrumValue = \"\";\r\n        let arryalist = [];\r\n        let selectedRecord = this.props.selectedRecord || {}\r\n        \r\n        viewDashBoardDesignConfigList.forEach(item => {\r\n\r\n            if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n                breadCrumValue = selectedRecord ? selectedRecord[item.sfieldname] ? convertDatetoStringByTimeZone(this.props.userInfo, selectedRecord[item.sfieldname]) :\r\n                    convertDatetoStringByTimeZone(this.props.userInfo, new Date(item.dataList[0])) : convertDatetoStringByTimeZone(this.props.userInfo, new Date(item.dataList[0]));\r\n            }\r\n            else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n                let listvalue = [];\r\n                if (selectedRecord && selectedRecord[item.sfieldname]) {\r\n                    listvalue.push({ [item.sdisplaymember]: selectedRecord[item.sfieldname].label })\r\n                } else {\r\n                    listvalue = item.dataList.filter(lst => {\r\n                        return lst[item.sfieldname] === parseInt(item.sdefaultvalue);\r\n                    });\r\n                }\r\n\r\n                breadCrumValue = listvalue[0][item.sdisplaymember];\r\n            }else if (item.ndesigncomponentcode === designComponents.USERINFO) {\r\n                let listvalue = [];\r\n                //commenting now for restricting breadcrumbs\r\n                // if(selectedRecord && selectedRecord[item.sfieldname]) {\r\n                //     listvalue.push({ [item.sfieldname]: selectedRecord[item.sfieldname] })\r\n                // }else{\r\n                //     listvalue.push({ [item.sfieldname]: this.props.userInfo && this.props.userInfo[item.sfieldname] })\r\n                // }\r\n                //breadCrumValue = listvalue && listvalue.length > 0 ? listvalue[0][item.sfieldname] : \"-\";\r\n               breadCrumValue = listvalue && listvalue.length == 0 ? \"\" : \"-\";\r\n            }\r\n            else {\r\n                breadCrumValue = selectedRecord ? selectedRecord[item.sfieldname] ? selectedRecord[item.sfieldname] : item.sdefaultvalue : item.sdefaultvalue;\r\n            }\r\n            if(item.ndesigncomponentcode !== designComponents.USERINFO){\r\n                arryalist.push({ \"label\": item.sdisplayname, \"value\": breadCrumValue });\r\n            }\r\n           \r\n        });\r\n\r\n\r\n        return (\r\n            < Row >\r\n                <Col md={12} className=\"p-0\">\r\n                    < ScrollContainer className=\"breadcrumbs-scroll-container\">\r\n                        <Breadcrumb className=\"filter-breadcrumbs\">\r\n                            {arryalist.map((item, index) =>\r\n                                <Breadcrumb.Item key={index}>\r\n                                    <span>{item[\"label\"]}{\" \"}:{\" \"}</span>\r\n                                    <span>{item[\"value\"]}</span>\r\n                                </Breadcrumb.Item>\r\n                            )}\r\n                        </Breadcrumb>\r\n                    </ScrollContainer>\r\n                </Col >\r\n            </Row >\r\n        )\r\n\r\n    }\r\n\r\n    render() {\r\n        let Series = [];\r\n        // const labelContent = (props) => {\r\n        //     return `${props.dataItem}`;\r\n        // }\r\n\r\n        // if (this.props.bubbleSeries !== undefined) {\r\n        //     this.props.bubbleSeries.map(item => {\r\n        //         Series.push(\r\n        //         <ChartSeriesItem type=\"bubble\" data={item.Series} name={item.yField} color={item.colors} aggregate=\"count\" stack={this.props.chartTypeName === 'area' ? true : false}\r\n        //         />               \r\n        //         );\r\n        //         return null;\r\n        //     })color={item.colorFill}\r\n\r\n        // }\r\n        if (this.props.bubbleSeries !== undefined) {\r\n            this.props.bubbleSeries.forEach(item => {\r\n                Series.push(<ChartSeriesItem type=\"bubble\" data={this.props.chartData} xField={item.xFieldBubble} yField={item.ySeriesBubble} sizeField={item.sizeSeriesBubble}\r\n                    categoryField={item.categorySeriesBubble} name={item.sizeSeriesBubbleForLegend} color={item.colorFill} />);\r\n            });\r\n        }\r\n\r\n        return (\r\n            <>\r\n\r\n                {this.props.viewDashBoardDesignConfigList &&\r\n                    this.BreadcrumDesign(this.props.viewDashBoardDesignConfigList)\r\n                }\r\n                <Row>\r\n                    <Col md={8} >\r\n                        <h4 hidden={this.props.hiddenExport} className=\"text-left\">{this.props.masterData.selectedDashBoardTypes && this.props.masterData.selectedDashBoardTypes.sdashboardtypename}</h4>\r\n                    </Col>\r\n                    <Col md={4} >\r\n                        <ProductList className=\"d-inline dropdown badget_menu d-flex justify-content-end \">\r\n                            <Nav.Link\r\n\r\n                                className=\"btn btn-circle outline-grey mr-2\" hidden={this.props.hiddenParam}\r\n                                title={\"ChartRefresh\"}\r\n                                onClick={() => this.props.checkParametersAvailable(this.props.masterData.selectedDashBoardTypes, this.props.userInfo, this.props.masterData,\r\n                                    this.props.dashBoardTypeNo, this.props.templateCode)} >\r\n                                <ChartRefresh className=\"custom_icons\" width=\"20\" height=\"20\" style={{ marginLeft: '0.35rem' }} />\r\n\r\n                            </Nav.Link>\r\n                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"#\" hidden={this.props.hiddenExport}\r\n                            >\r\n                                <FontAwesomeIcon icon={faFilePdf} className=\"ActionIconColor\"\r\n                                    onClick={() => this.exportPDF()} />\r\n                            </Nav.Link>\r\n                        </ProductList>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n                {this.props.bubbleSeries && this.props.bubbleSeries.length > 0 ?\r\n                    <PDFExport\r\n                        ref={component => (this.pdfExportComponent = component)}\r\n                        paperSize=\"auto\"\r\n                        margin={40}\r\n                    >\r\n\r\n                        <Chart pannable={true} zoomable={true} style={this.props.style}>\r\n                            <ChartSeries>\r\n                                {Series}\r\n                            </ChartSeries>\r\n                            <ChartLegend position=\"bottom\" orientation=\"horizontal\" />\r\n                            <ChartYAxis>\r\n                                <ChartYAxisItem labels={{ format: '{0:N0}' }} />\r\n                            </ChartYAxis>\r\n\r\n                            <ChartTooltip format=\"{3}: {2:N0}\" opacity={1} />\r\n                        </Chart>\r\n\r\n\r\n                    </PDFExport>\r\n                    :\r\n                    <Attachments className=\"norecordchart\">\r\n                        {this.props.intl.formatMessage({ id: \"IDS_NORECORDSAVAILABLE\" })}\r\n                    </Attachments>\r\n                }\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default injectIntl(BubbleChart);"]},"metadata":{},"sourceType":"module"}