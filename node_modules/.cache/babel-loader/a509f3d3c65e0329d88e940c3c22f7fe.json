{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboardtypes\\\\charts\\\\AreaChart.jsx\";\nimport React from 'react';\nimport { Chart, ChartLegend, ChartSeries, ChartSeriesItem, ChartCategoryAxis, ChartCategoryAxisItem, ChartTooltip } from '@progress/kendo-react-charts';\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\nimport { faFilePdf } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Col, Nav, Row } from 'react-bootstrap';\nimport { ProductList } from '../../../pages/product/product.styled';\nimport { ReactComponent as ChartRefresh } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/image/chart-refresh.svg\";\nimport { injectIntl } from 'react-intl';\nimport '../../../assets/styles/dashboard.css';\nimport 'hammerjs';\nimport { designComponents } from '../../../components/Enumeration';\nimport { convertDatetoStringByTimeZone, rearrangeDateFormat } from '../../../components/CommonScript';\nimport ScrollContainer from 'react-indiana-drag-scroll';\nimport { Breadcrumb } from 'react-bootstrap';\nimport { Attachments } from '../../../components/dropzone/dropzone.styles'; // const mapStateToProps = state => {\n//     return ({ Login: state.Login })\n// }\n\nclass AreaChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.exportPDF = () => {\n      this.pdfExportComponent.save();\n    };\n\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {}\n    };\n  }\n\n  breadcrumDesign(viewDashBoardDesignConfigList) {\n    let breadCrumValue = \"\";\n    let arryalist = [];\n    let selectedRecord = this.props.selectedRecord || {};\n    viewDashBoardDesignConfigList.forEach(item => {\n      if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n        let date = rearrangeDateFormat(this.props.userInfo, item.dataList[0]);\n        breadCrumValue = selectedRecord ? selectedRecord[item.sfieldname] ? convertDatetoStringByTimeZone(this.props.userInfo, selectedRecord[item.sfieldname]) : convertDatetoStringByTimeZone(this.props.userInfo, date) : convertDatetoStringByTimeZone(this.props.userInfo, date);\n      } else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n        let listvalue = [];\n\n        if (selectedRecord && selectedRecord[item.sfieldname]) {\n          listvalue.push({\n            [item.sdisplaymember]: selectedRecord[item.sfieldname].label\n          });\n        } else {\n          listvalue = item.dataList.filter(lst => {\n            return lst[item.sfieldname] === parseInt(item.sdefaultvalue);\n          });\n        }\n\n        breadCrumValue = listvalue && listvalue.length > 0 ? listvalue[0][item.sdisplaymember] : \"-\";\n      } else {\n        breadCrumValue = selectedRecord ? selectedRecord[item.sfieldname] ? selectedRecord[item.sfieldname] : item.sdefaultvalue : item.sdefaultvalue;\n      }\n\n      arryalist.push({\n        \"label\": item.sdisplayname,\n        \"value\": breadCrumValue\n      });\n    });\n    return /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ScrollContainer, {\n      className: \"breadcrumbs-scroll-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Breadcrumb, {\n      className: \"filter-breadcrumbs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 25\n      }\n    }, arryalist.map((item, index) => /*#__PURE__*/React.createElement(Breadcrumb.Item, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 37\n      }\n    }, item[\"label\"], \" \", \":\", \" \"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 37\n      }\n    }, item[\"value\"])))))));\n  }\n\n  render() {\n    let Series = [];\n\n    const labelContent = props => {\n      return `${props.dataItem === null ? 0 : props.dataItem}`;\n    };\n\n    if (this.props.ySeries !== undefined) {\n      this.props.ySeries.map(item => {\n        Series.push( /*#__PURE__*/React.createElement(ChartSeriesItem, {\n          type: this.props.chartTypeName,\n          line: {\n            style: \"smooth\"\n          },\n          data: item.Series,\n          name: item.yField //color={item.colors} \n          ,\n          aggregate: \"count\",\n          stack: this.props.chartTypeName === 'area' ? true : false,\n          labels: this.props.chartTypeName !== 'area' ? {\n            visible: true,\n            content: labelContent,\n            position: \"center\"\n          } : {},\n          gap: 1.5,\n          overlay: false,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 21\n          }\n        }));\n        return null;\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"text-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 25\n      }\n    }, this.props.isStaticDashBoard ? this.props.staticTitle : this.props.dashBoardType.selectedDashBoardTypes && this.props.dashBoardType.selectedDashBoardTypes.sdashboardtypename)), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"d-inline dropdown badget_menu d-flex justify-content-end \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      //className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"#\"\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.props.hiddenParam //title={\"ChartRefresh\"}\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REFRESHCHART\"\n      }),\n      onClick: e => this.props.checkParametersAvailable(this.props.dashBoardType.selectedDashBoardTypes, this.props.userInfo, this.props.masterData, this.props.dashBoardTypeNo, this.props.templateCode),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ChartRefresh, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      style: {\n        marginLeft: '0.35rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      href: \"#\",\n      hidden: this.props.hiddenExport,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DOWNLOADPDF\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFilePdf,\n      className: \"ActionIconColor\",\n      onClick: () => this.exportPDF(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 33\n      }\n    }))))), this.props.dashBoardType.viewDashBoardDesignConfigList && this.breadcrumDesign(this.props.dashBoardType.viewDashBoardDesignConfigList), this.props.ySeries && this.props.ySeries.length > 0 ? /*#__PURE__*/React.createElement(PDFExport, {\n      ref: component => this.pdfExportComponent = component,\n      paperSize: \"auto\",\n      margin: 40,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      pannable: true,\n      zoomable: false,\n      style: this.props.style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ChartTooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(ChartLegend, {\n      position: \"bottom\",\n      orientation: \"horizontal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(ChartCategoryAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ChartCategoryAxisItem, {\n      labels: {\n        rotation: \"auto\"\n      } //labels={{ visible: true, content: labelContent }}\n      ,\n      categories: this.props.xSeries,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(ChartSeries, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 29\n      }\n    }, Series))) : /*#__PURE__*/React.createElement(Attachments, {\n      className: \"norecordchart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_NORECORDSAVAILABLE\"\n    })));\n  }\n\n}\n\nexport default injectIntl(AreaChart);","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/dashboardtypes/charts/AreaChart.jsx"],"names":["React","Chart","ChartLegend","ChartSeries","ChartSeriesItem","ChartCategoryAxis","ChartCategoryAxisItem","ChartTooltip","PDFExport","faFilePdf","FontAwesomeIcon","Col","Nav","Row","ProductList","injectIntl","designComponents","convertDatetoStringByTimeZone","rearrangeDateFormat","ScrollContainer","Breadcrumb","Attachments","AreaChart","Component","constructor","props","exportPDF","pdfExportComponent","save","state","data","masterStatus","error","selectedRecord","breadcrumDesign","viewDashBoardDesignConfigList","breadCrumValue","arryalist","forEach","item","ndesigncomponentcode","DATEPICKER","date","userInfo","dataList","sfieldname","COMBOBOX","listvalue","push","sdisplaymember","label","filter","lst","parseInt","sdefaultvalue","length","sdisplayname","map","index","render","Series","labelContent","dataItem","ySeries","undefined","chartTypeName","style","yField","visible","content","position","isStaticDashBoard","staticTitle","dashBoardType","selectedDashBoardTypes","sdashboardtypename","hiddenParam","intl","formatMessage","id","e","checkParametersAvailable","masterData","dashBoardTypeNo","templateCode","marginLeft","hiddenExport","component","rotation","xSeries"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,WAAhB,EAA6BC,WAA7B,EAA0CC,eAA1C,EAA2DC,iBAA3D,EAA8EC,qBAA9E,EAAqGC,YAArG,QAAyH,8BAAzH;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,SAAT,QAA0B,mCAA1B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,GAAnB,QAA8B,iBAA9B;AACA,SAASC,WAAT,QAA4B,uCAA5B;;AAEA,SAASC,UAAT,QAA2B,YAA3B;AACA,OAAO,sCAAP;AACA,OAAO,UAAP;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,6BAAT,EAAwCC,mBAAxC,QAAmE,kCAAnE;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,WAAT,QAA4B,8CAA5B,C,CAGA;AACA;AACA;;AAGA,MAAMC,SAAN,SAAwBtB,KAAK,CAACuB,SAA9B,CAAwC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAMnBC,SANmB,GAMP,MAAM;AACd,WAAKC,kBAAL,CAAwBC,IAAxB;AACH,KARkB;;AAEf,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,EADG;AACCC,MAAAA,YAAY,EAAE,EADf;AACmBC,MAAAA,KAAK,EAAE,EAD1B;AAC8BC,MAAAA,cAAc,EAAE;AAD9C,KAAb;AAGH;;AAKDC,EAAAA,eAAe,CAACC,6BAAD,EAAgC;AAC3C,QAAIC,cAAc,GAAG,EAArB;AACA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIJ,cAAc,GAAG,KAAKR,KAAL,CAAWQ,cAAX,IAA6B,EAAlD;AACAE,IAAAA,6BAA6B,CAACG,OAA9B,CAAsCC,IAAI,IAAI;AAE1C,UAAIA,IAAI,CAACC,oBAAL,KAA8BxB,gBAAgB,CAACyB,UAAnD,EAA+D;AAC3D,YAAIC,IAAI,GAAGxB,mBAAmB,CAAC,KAAKO,KAAL,CAAWkB,QAAZ,EAAqBJ,IAAI,CAACK,QAAL,CAAc,CAAd,CAArB,CAA9B;AACAR,QAAAA,cAAc,GAAGH,cAAc,GAAGA,cAAc,CAACM,IAAI,CAACM,UAAN,CAAd,GAAkC5B,6BAA6B,CAAC,KAAKQ,KAAL,CAAWkB,QAAZ,EAAsBV,cAAc,CAACM,IAAI,CAACM,UAAN,CAApC,CAA/D,GAC9B5B,6BAA6B,CAAC,KAAKQ,KAAL,CAAWkB,QAAZ,EAAsBD,IAAtB,CADF,GACgCzB,6BAA6B,CAAC,KAAKQ,KAAL,CAAWkB,QAAZ,EAAsBD,IAAtB,CAD5F;AAEH,OAJD,MAKK,IAAIH,IAAI,CAACC,oBAAL,KAA8BxB,gBAAgB,CAAC8B,QAAnD,EAA6D;AAC9D,YAAIC,SAAS,GAAG,EAAhB;;AACA,YAAId,cAAc,IAAIA,cAAc,CAACM,IAAI,CAACM,UAAN,CAApC,EAAuD;AACnDE,UAAAA,SAAS,CAACC,IAAV,CAAe;AAAE,aAACT,IAAI,CAACU,cAAN,GAAuBhB,cAAc,CAACM,IAAI,CAACM,UAAN,CAAd,CAAgCK;AAAzD,WAAf;AACH,SAFD,MAEO;AACHH,UAAAA,SAAS,GAAGR,IAAI,CAACK,QAAL,CAAcO,MAAd,CAAqBC,GAAG,IAAI;AACpC,mBAAOA,GAAG,CAACb,IAAI,CAACM,UAAN,CAAH,KAAyBQ,QAAQ,CAACd,IAAI,CAACe,aAAN,CAAxC;AACH,WAFW,CAAZ;AAGH;;AAEDlB,QAAAA,cAAc,GAAGW,SAAS,IAAIA,SAAS,CAACQ,MAAV,GAAmB,CAAhC,GAAoCR,SAAS,CAAC,CAAD,CAAT,CAAaR,IAAI,CAACU,cAAlB,CAApC,GAAwE,GAAzF;AACH,OAXI,MAYA;AACDb,QAAAA,cAAc,GAAGH,cAAc,GAAGA,cAAc,CAACM,IAAI,CAACM,UAAN,CAAd,GAAkCZ,cAAc,CAACM,IAAI,CAACM,UAAN,CAAhD,GAAoEN,IAAI,CAACe,aAA5E,GAA4Ff,IAAI,CAACe,aAAhI;AACH;;AACDjB,MAAAA,SAAS,CAACW,IAAV,CAAe;AAAE,iBAAST,IAAI,CAACiB,YAAhB;AAA8B,iBAASpB;AAAvC,OAAf;AACH,KAvBD;AA0BA,wBACI,oBAAE,GAAF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAa,MAAA,SAAS,EAAC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAE,eAAF;AAAkB,MAAA,SAAS,EAAC,8BAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAC,oBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKC,SAAS,CAACoB,GAAV,CAAc,CAAClB,IAAD,EAAOmB,KAAP,kBACX,oBAAC,UAAD,CAAY,IAAZ;AAAiB,MAAA,GAAG,EAAEA,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOnB,IAAI,CAAC,OAAD,CAAX,EAAsB,GAAtB,OAA4B,GAA5B,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOA,IAAI,CAAC,OAAD,CAAX,CAFJ,CADH,CADL,CADJ,CADJ,CADJ,CADJ;AAgBH;;AAGDoB,EAAAA,MAAM,GAAG;AACL,QAAIC,MAAM,GAAG,EAAb;;AACA,UAAMC,YAAY,GAAIpC,KAAD,IAAW;AAC5B,aAAQ,GAAEA,KAAK,CAACqC,QAAN,KAAmB,IAAnB,GAA0B,CAA1B,GAA8BrC,KAAK,CAACqC,QAAS,EAAvD;AACH,KAFD;;AAIA,QAAI,KAAKrC,KAAL,CAAWsC,OAAX,KAAuBC,SAA3B,EAAsC;AAClC,WAAKvC,KAAL,CAAWsC,OAAX,CAAmBN,GAAnB,CAAuBlB,IAAI,IAAI;AAC3BqB,QAAAA,MAAM,CAACZ,IAAP,eACI,oBAAC,eAAD;AAAiB,UAAA,IAAI,EAAE,KAAKvB,KAAL,CAAWwC,aAAlC;AACI,UAAA,IAAI,EAAE;AAAEC,YAAAA,KAAK,EAAE;AAAT,WADV;AAEI,UAAA,IAAI,EAAE3B,IAAI,CAACqB,MAFf;AAGI,UAAA,IAAI,EAAErB,IAAI,CAAC4B,MAHf,CAII;AAJJ;AAKI,UAAA,SAAS,EAAC,OALd;AAMI,UAAA,KAAK,EAAE,KAAK1C,KAAL,CAAWwC,aAAX,KAA6B,MAA7B,GAAsC,IAAtC,GAA6C,KANxD;AAOI,UAAA,MAAM,EAAE,KAAKxC,KAAL,CAAWwC,aAAX,KAA6B,MAA7B,GACJ;AAAEG,YAAAA,OAAO,EAAE,IAAX;AAAiBC,YAAAA,OAAO,EAAER,YAA1B;AAAwCS,YAAAA,QAAQ,EAAE;AAAlD,WADI,GAC2D,EARvE;AASI,UAAA,GAAG,EAAE,GATT;AAUI,UAAA,OAAO,EAAE,KAVb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaA,eAAO,IAAP;AAAyB,OAd7B;AAeH;;AACD,wBACI,uDAII,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKI;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK7C,KAAL,CAAW8C,iBAAX,GAA+B,KAAK9C,KAAL,CAAW+C,WAA1C,GAAwD,KAAK/C,KAAL,CAAWgD,aAAX,CAAyBC,sBAAzB,IAClD,KAAKjD,KAAL,CAAWgD,aAAX,CAAyBC,sBAAzB,CAAgDC,kBAF3D,CALJ,CADJ,eAWI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,2DAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD,CAAK,IAAL;AACI;AACA,MAAA,SAAS,EAAC,kCAFd;AAGI,MAAA,MAAM,EAAE,KAAKlD,KAAL,CAAWmD,WAHvB,CAII;AAJJ;AAKI,kBAAU,KAAKnD,KAAL,CAAWoD,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CALd;AAMI,MAAA,OAAO,EAAGC,CAAD,IAAO,KAAKvD,KAAL,CAAWwD,wBAAX,CAAoC,KAAKxD,KAAL,CAAWgD,aAAX,CAAyBC,sBAA7D,EAAqF,KAAKjD,KAAL,CAAWkB,QAAhG,EAA0G,KAAKlB,KAAL,CAAWyD,UAArH,EACZ,KAAKzD,KAAL,CAAW0D,eADC,EACgB,KAAK1D,KAAL,CAAW2D,YAD3B,CANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAQI,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAC,cAAxB;AAAuC,MAAA,KAAK,EAAC,IAA7C;AAAkD,MAAA,MAAM,EAAC,IAAzD;AAA8D,MAAA,KAAK,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,CADJ,eAYI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,oDAApB;AACI,MAAA,IAAI,EAAC,GADT;AACa,MAAA,MAAM,EAAE,KAAK5D,KAAL,CAAW6D,YADhC;AAEI,kBAAU,KAAK7D,KAAL,CAAWoD,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAEtE,SAAvB;AAAkC,MAAA,SAAS,EAAC,iBAA5C;AACI,MAAA,OAAO,EAAE,MAAM,KAAKiB,SAAL,EADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CAZJ,CADJ,CAXJ,CAJJ,EAuCK,KAAKD,KAAL,CAAWgD,aAAX,CAAyBtC,6BAAzB,IACG,KAAKD,eAAL,CAAqB,KAAKT,KAAL,CAAWgD,aAAX,CAAyBtC,6BAA9C,CAxCR,EA2CK,KAAKV,KAAL,CAAWsC,OAAX,IAAsB,KAAKtC,KAAL,CAAWsC,OAAX,CAAmBR,MAAnB,GAA4B,CAAlD,gBACG,oBAAC,SAAD;AACI,MAAA,GAAG,EAAEgC,SAAS,IAAK,KAAK5D,kBAAL,GAA0B4D,SADjD;AAEI,MAAA,SAAS,EAAC,MAFd;AAGI,MAAA,MAAM,EAAE,EAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII,oBAAC,KAAD;AAAO,MAAA,QAAQ,EAAE,IAAjB;AAAuB,MAAA,QAAQ,EAAE,KAAjC;AAAwC,MAAA,KAAK,EAAE,KAAK9D,KAAL,CAAWyC,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAGI,oBAAC,WAAD;AAAa,MAAA,QAAQ,EAAC,QAAtB;AAA+B,MAAA,WAAW,EAAC,YAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,eAII,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,qBAAD;AAAuB,MAAA,MAAM,EAAE;AAAEsB,QAAAA,QAAQ,EAAE;AAAZ,OAA/B,CACI;AADJ;AAEI,MAAA,UAAU,EAAE,KAAK/D,KAAL,CAAWgE,OAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAJJ,eAUI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK7B,MADL,CAVJ,CAJJ,CADH,gBAqBG,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,eAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKnC,KAAL,CAAWoD,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CADL,CAhER,CADJ;AAyEH;;AA5JmC;;AAgKxC,eAAehE,UAAU,CAACO,SAAD,CAAzB","sourcesContent":["import React from 'react';\r\nimport { Chart, ChartLegend, ChartSeries, ChartSeriesItem, ChartCategoryAxis, ChartCategoryAxisItem, ChartTooltip } from '@progress/kendo-react-charts';\r\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\r\nimport { faFilePdf } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Col, Nav, Row } from 'react-bootstrap';\r\nimport { ProductList } from '../../../pages/product/product.styled';\r\nimport { ReactComponent as ChartRefresh } from '../../../assets/image/chart-refresh.svg';\r\nimport { injectIntl } from 'react-intl';\r\nimport '../../../assets/styles/dashboard.css';\r\nimport 'hammerjs';\r\nimport { designComponents } from '../../../components/Enumeration';\r\nimport { convertDatetoStringByTimeZone, rearrangeDateFormat } from '../../../components/CommonScript'\r\nimport ScrollContainer from 'react-indiana-drag-scroll';\r\nimport { Breadcrumb } from 'react-bootstrap';\r\nimport { Attachments } from '../../../components/dropzone/dropzone.styles';\r\n\r\n\r\n// const mapStateToProps = state => {\r\n//     return ({ Login: state.Login })\r\n// }\r\n\r\n\r\nclass AreaChart extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {}\r\n        }\r\n    }\r\n    exportPDF = () => {\r\n        this.pdfExportComponent.save();\r\n    }\r\n\r\n    breadcrumDesign(viewDashBoardDesignConfigList) {\r\n        let breadCrumValue = \"\";\r\n        let arryalist = [];\r\n        let selectedRecord = this.props.selectedRecord || {}\r\n        viewDashBoardDesignConfigList.forEach(item => {\r\n\r\n            if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n                let date = rearrangeDateFormat(this.props.userInfo,item.dataList[0])\r\n                breadCrumValue = selectedRecord ? selectedRecord[item.sfieldname] ? convertDatetoStringByTimeZone(this.props.userInfo, selectedRecord[item.sfieldname]) :\r\n                    convertDatetoStringByTimeZone(this.props.userInfo, date) : convertDatetoStringByTimeZone(this.props.userInfo, date);\r\n            }\r\n            else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n                let listvalue = [];\r\n                if (selectedRecord && selectedRecord[item.sfieldname]) {\r\n                    listvalue.push({ [item.sdisplaymember]: selectedRecord[item.sfieldname].label })\r\n                } else {\r\n                    listvalue = item.dataList.filter(lst => {\r\n                        return lst[item.sfieldname] === parseInt(item.sdefaultvalue);\r\n                    });\r\n                }\r\n\r\n                breadCrumValue = listvalue && listvalue.length > 0 ? listvalue[0][item.sdisplaymember] : \"-\";\r\n            }\r\n            else {\r\n                breadCrumValue = selectedRecord ? selectedRecord[item.sfieldname] ? selectedRecord[item.sfieldname] : item.sdefaultvalue : item.sdefaultvalue;\r\n            }\r\n            arryalist.push({ \"label\": item.sdisplayname, \"value\": breadCrumValue });\r\n        });\r\n\r\n\r\n        return (\r\n            < Row >\r\n                <Col md={12} className=\"p-0\">\r\n                    < ScrollContainer className=\"breadcrumbs-scroll-container\">\r\n                        <Breadcrumb className=\"filter-breadcrumbs\">\r\n                            {arryalist.map((item, index) =>\r\n                                <Breadcrumb.Item key={index}>\r\n                                    <span>{item[\"label\"]}{\" \"}:{\" \"}</span>\r\n                                    <span>{item[\"value\"]}</span>\r\n                                </Breadcrumb.Item>\r\n                            )}\r\n                        </Breadcrumb>\r\n                    </ScrollContainer>\r\n                </Col >\r\n            </Row >\r\n        )\r\n    }\r\n\r\n\r\n    render() {\r\n        let Series = [];\r\n        const labelContent = (props) => {\r\n            return `${props.dataItem === null ? 0 : props.dataItem}`;\r\n        }\r\n\r\n        if (this.props.ySeries !== undefined) {\r\n            this.props.ySeries.map(item => {\r\n                Series.push(\r\n                    <ChartSeriesItem type={this.props.chartTypeName}\r\n                        line={{ style: \"smooth\" }}\r\n                        data={item.Series}\r\n                        name={item.yField}\r\n                        //color={item.colors} \r\n                        aggregate=\"count\"\r\n                        stack={this.props.chartTypeName === 'area' ? true : false}\r\n                        labels={this.props.chartTypeName !== 'area' ?\r\n                            { visible: true, content: labelContent, position: \"center\" } : {}}\r\n                        gap={1.5}\r\n                        overlay={false}\r\n                    />);\r\n                return null;            })\r\n        }\r\n        return (\r\n            <>\r\n                {/* {this.props.viewDashBoardDesignConfigList &&\r\n                    this.breadcrumDesign(this.props.viewDashBoardDesignConfigList)\r\n                } */}\r\n                <Row>\r\n                    <Col md={8} >\r\n                        {/* <h4 hidden={this.props.hiddenExport} className=\"text-left\">\r\n                            {this.props.masterData.selectedDashBoardTypes && \r\n                            this.props.masterData.selectedDashBoardTypes.sdashboardtypename}\r\n                        </h4> */}\r\n                        <h4 className=\"text-left\">\r\n                            {this.props.isStaticDashBoard ? this.props.staticTitle : this.props.dashBoardType.selectedDashBoardTypes\r\n                                && this.props.dashBoardType.selectedDashBoardTypes.sdashboardtypename}\r\n                        </h4>\r\n                    </Col>\r\n                    <Col md={4} >\r\n                        <ProductList className=\"d-inline dropdown badget_menu d-flex justify-content-end \">\r\n                            <Nav.Link\r\n                                //className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"#\"\r\n                                className=\"btn btn-circle outline-grey mr-2\"\r\n                                hidden={this.props.hiddenParam}\r\n                                //title={\"ChartRefresh\"}\r\n                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESHCHART\" })}\r\n                                onClick={(e) => this.props.checkParametersAvailable(this.props.dashBoardType.selectedDashBoardTypes, this.props.userInfo, this.props.masterData,\r\n                                    this.props.dashBoardTypeNo, this.props.templateCode)} >\r\n                                <ChartRefresh className=\"custom_icons\" width=\"20\" height=\"20\" style={{ marginLeft: '0.35rem' }} />\r\n\r\n                            </Nav.Link>\r\n                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                href=\"#\" hidden={this.props.hiddenExport}\r\n                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADPDF\" })}\r\n                            >\r\n                                <FontAwesomeIcon icon={faFilePdf} className=\"ActionIconColor\"\r\n                                    onClick={() => this.exportPDF()} />\r\n                            </Nav.Link>\r\n                        </ProductList>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {this.props.dashBoardType.viewDashBoardDesignConfigList &&\r\n                    this.breadcrumDesign(this.props.dashBoardType.viewDashBoardDesignConfigList)\r\n                }\r\n\r\n                {this.props.ySeries && this.props.ySeries.length > 0 ?\r\n                    <PDFExport\r\n                        ref={component => (this.pdfExportComponent = component)}\r\n                        paperSize=\"auto\"\r\n                        margin={40} >\r\n                        <Chart pannable={true} zoomable={false} style={this.props.style}>\r\n                            <ChartTooltip />\r\n\r\n                            <ChartLegend position=\"bottom\" orientation=\"horizontal\" />\r\n                            <ChartCategoryAxis>\r\n                                <ChartCategoryAxisItem labels={{ rotation: \"auto\" }}\r\n                                    //labels={{ visible: true, content: labelContent }}\r\n                                    categories={this.props.xSeries} />\r\n                            </ChartCategoryAxis>\r\n\r\n                            <ChartSeries>\r\n                                {Series}\r\n                            </ChartSeries>\r\n                        </Chart>\r\n                    </PDFExport>\r\n                    :\r\n                    <Attachments className=\"norecordchart\">\r\n                        {this.props.intl.formatMessage({ id: \"IDS_NORECORDSAVAILABLE\" })}\r\n                    </Attachments>\r\n                }\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default injectIntl(AreaChart);"]},"metadata":{},"sourceType":"module"}