{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport { replaceUpdatedObject, sortData } from \"../components/CommonScript\";\nimport { transactionStatus } from \"../components/Enumeration\";\nimport rsapi from \"../rsapi\";\nimport { initRequest, updateStore } from \"./LoginAction\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nimport { postCRUDOrganiseTransSearch } from \"./ServiceAction\";\nexport function getBAFilterStatus(filterRecord, masterData, userinfo) {\n  return function (dispatch) {\n    let inputData = {\n      napprovalversioncode: filterRecord.napproveconfversioncode.value,\n      userinfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"batchapproval/getFilterStatus\", inputData).then(response => {\n      masterData = { ...masterData,\n        BA_FilterStatus: response.data.BA_FilterStatus\n      };\n      filterRecord = { ...filterRecord,\n        ntransactionstatus: {\n          label: response.data.BA_FilterStatusValue.sfilterstatus,\n          value: response.data.BA_FilterStatusValue.ntransactionstatus,\n          item: response.data.BA_FilterStatusValue\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          filterRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getBatchCreation(inputParam) {\n  return function (dispatch) {\n    let inputData = {};\n\n    if (inputParam.inputData) {\n      inputData = inputParam.inputData;\n    } else {\n      inputData = {\n        nreleasebatchcode: parseInt(inputParam.nreleasebatchcode),\n        dfrom: inputParam.dfrom,\n        dto: inputParam.dto,\n        napprovalversioncode: inputParam.napprovalversioncode,\n        ntransactionstatus: inputParam.ntransactionstatus,\n        activeBATab: inputParam.activeBATab,\n        userinfo: inputParam.userinfo\n      };\n    }\n\n    let {\n      componentDataState,\n      parameterDataState,\n      testCommentDataState,\n      sampleHistoryDataState,\n      batchApprovalDataState,\n      decisionDataState,\n      batchClockDataState,\n      checklistDataState,\n      batchAttachmentDataState,\n      sampleapprovalDataState\n    } = inputParam;\n    dispatch(initRequest(true));\n    rsapi.post(\"batchapproval/getBatchCreation\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\n        inputParam.searchRef.current.value = \"\";\n        masterData['searchedData'] = undefined;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          updateDataState: true,\n          componentDataState: { ...componentDataState,\n            skip: 0,\n            take: 5,\n            sort: undefined,\n            filter: undefined\n          },\n          parameterDataState: { ...parameterDataState,\n            skip: 0,\n            take: 5,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...testCommentDataState,\n            skip: 0,\n            take: 5,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...sampleHistoryDataState,\n            skip: 0,\n            take: 5,\n            sort: undefined,\n            filter: undefined\n          },\n          batchApprovalDataState: { ...batchApprovalDataState,\n            skip: 0,\n            take: 5,\n            sort: undefined,\n            filter: undefined\n          },\n          decisionDataState: { ...decisionDataState,\n            skip: 0,\n            take: 5,\n            sort: undefined,\n            filter: undefined\n          },\n          batchClockDataState: { ...batchClockDataState,\n            skip: 0,\n            take: 5,\n            sort: undefined,\n            filter: undefined\n          },\n          checklistDataState: { ...checklistDataState,\n            skip: 0,\n            take: 5,\n            sort: undefined,\n            filter: undefined\n          },\n          batchAttachmentDataState: { ...batchAttachmentDataState,\n            skip: 0,\n            take: 5,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleapprovalDataState: { ...sampleapprovalDataState,\n            skip: 0,\n            take: 5,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRoleChecklist(nchecklistversioncode, nreleasebatchcode, userinfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"batchapproval/viewBatchTemplate\", {\n      nchecklistversioncode,\n      nreleasebatchcode,\n      nuserrolecode: userinfo.nuserrole,\n      userinfo\n    }).then(response => {\n      let selectedRecord = {};\n      let editedQB = [];\n      response.data && response.data.map(qb => {\n        if (qb.sdefaultvalue !== null) {\n          selectedRecord[qb.nchecklistversionqbcode] = {\n            nchecklistversioncode: qb.nchecklistversioncode,\n            nchecklistversionqbcode: qb.nchecklistversionqbcode,\n            nchecklistqbcode: qb.nchecklistqbcode,\n            sdefaultvalue: qb.sdefaultvalue\n          };\n          editedQB.push(qb.nchecklistversionqbcode);\n          selectedRecord['editedQB'] = editedQB;\n        }\n\n        return null;\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          templateData: response.data,\n          loading: false,\n          openTemplateModal: true,\n          selectedRecord: { ...selectedRecord,\n            nreleasebatchcode\n          },\n          needSaveButton: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onSaveBatchChecklist(selectedRecord, userInfo) {\n  return function (dispatch) {\n    let listChecklistVersionTemplate = [];\n\n    if (selectedRecord && selectedRecord.editedQB) {\n      selectedRecord.editedQB.map(qbcode => listChecklistVersionTemplate.push(selectedRecord[qbcode]));\n      dispatch(initRequest(true));\n      rsapi.post(\"batchapproval/createUpdateBatchChecklist\", {\n        checklistversiontemplate: listChecklistVersionTemplate,\n        nreleasebatchcode: selectedRecord[\"nreleasebatchcode\"],\n        \"userinfo\": userInfo\n      }).then(response => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            selectedRecord: {},\n            templateData: undefined,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openTemplateModal: false,\n          selectedRecord: {},\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function validateBatchTest(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"batchapproval/validateBatchTests\", inputParam.inputData).then(response => {\n      if (response.data) {\n        if (inputParam.action.nesignneed === transactionStatus.YES) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: inputParam.masterData\n              },\n              openChildModal: true,\n              screenName: \"performaction\",\n              operation: \"dynamic\",\n              showConfirmAlert: false,\n              loading: false\n            }\n          };\n          dispatch(updateStore(updateInfo)); // dispatch({\n          //     type: DEFAULT_RETURN, payload: {\n          //         loadEsign: true,\n          //         screenData: { inputParam, masterData: inputParam.masterData },\n          //         openChildModal: true,\n          //         screenName: \"performaction\",\n          //         operation: \"dynamic\",\n          //         showConfirmAlert: false,\n          //         loading: false\n          //     }\n          // })\n        } else {\n          dispatch(performBatchAction(inputParam, true));\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            showConfirmAlert: true,\n            loading: false,\n            inputParam\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function performBatchAction(inputParam) {\n  return function (dispatch) {\n    let URL = \"batchapproval/updateApproval\";\n\n    if (inputParam.type === 1) {\n      URL = \"batchapproval/updateDecision\";\n    }\n\n    dispatch(initRequest(true));\n    rsapi.post(URL, inputParam.inputData).then(response => {\n      const responseData = { ...response.data\n      };\n      sortData(responseData);\n      let masterData = { ...inputParam.masterData,\n        ...responseData,\n        BA_BatchCreation: replaceUpdatedObject(response.data.updatedBatchCreation, inputParam.masterData.BA_BatchCreation, 'nreleasebatchcode')\n      };\n      let respObject = {\n        masterData,\n        inputParam,\n        openChildModal: false,\n        operation: \"dynamic\",\n        masterStatus: \"\",\n        errorCode: undefined,\n        loadEsign: false,\n        showEsign: false,\n        selectedRecord: {},\n        loading: false,\n        showConfirmAlert: false\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject)); // dispatch({ type: DEFAULT_RETURN, payload: { ...respObject } })\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          showConfirmAlert: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getBAChildTabDetail(inputData) {\n  return function (dispatch) {\n    if (inputData.nreleasebatchcode) {\n      let inputParamData = {\n        nreleasebatchcode: parseInt(inputData.nreleasebatchcode),\n        activeBATab: inputData.activeBATab,\n        userinfo: inputData.userinfo,\n        nflag: inputData.nflag,\n        napprovalversioncode: inputData.napprovalversioncode\n      };\n      let {\n        componentDataState,\n        parameterDataState,\n        testCommentDataState,\n        sampleHistoryDataState,\n        batchApprovalDataState,\n        decisionDataState,\n        batchClockDataState,\n        checklistDataState,\n        batchAttachmentDataState,\n        sampleapprovalDataState\n      } = inputData;\n      dispatch(initRequest(true));\n      rsapi.post(\"batchapproval/getBAChildTab\", inputParamData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...responseData,\n              BA_SelectedBatchCreation: inputData.BA_SelectedBatchCreation\n            },\n            loading: false,\n            activeBATab: inputData.activeBATab,\n            screenName: inputData.screenName,\n            updateDataState: inputData.updateDataState !== undefined ? inputData.updateDataState : true,\n            componentDataState: { ...componentDataState,\n              skip: 0,\n              take: 5,\n              sort: undefined,\n              filter: undefined\n            },\n            parameterDataState: { ...parameterDataState,\n              skip: 0,\n              take: 5,\n              sort: undefined,\n              filter: undefined\n            },\n            testCommentDataState: { ...testCommentDataState,\n              skip: 0,\n              take: 5,\n              sort: undefined,\n              filter: undefined\n            },\n            sampleHistoryDataState: { ...sampleHistoryDataState,\n              skip: 0,\n              take: 5,\n              sort: undefined,\n              filter: undefined\n            },\n            batchApprovalDataState: { ...batchApprovalDataState,\n              skip: 0,\n              take: 5,\n              sort: undefined,\n              filter: undefined\n            },\n            decisionDataState: { ...decisionDataState,\n              skip: 0,\n              take: 5,\n              sort: undefined,\n              filter: undefined\n            },\n            batchClockDataState: { ...batchClockDataState,\n              skip: 0,\n              take: 5,\n              sort: undefined,\n              filter: undefined\n            },\n            checklistDataState: { ...checklistDataState,\n              skip: 0,\n              take: 5,\n              sort: undefined,\n              filter: undefined\n            },\n            batchAttachmentDataState: { ...batchAttachmentDataState,\n              skip: 0,\n              take: 5,\n              sort: undefined,\n              filter: undefined\n            },\n            sampleapprovalDataState: { ...sampleapprovalDataState,\n              skip: 0,\n              take: 5,\n              sort: undefined,\n              filter: undefined\n            }\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData\n          },\n          loading: false,\n          activeBATab: inputData.activeBATab\n        }\n      });\n    }\n  };\n}\nexport function getBASampleApprovalHistory(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"batchapproval/getBASampleApprovalHistory\", inputParam.inputData).then(response => {\n      let historyMap = inputParam.historyMap;\n      historyMap = { ...historyMap,\n        ...response.data.BA_SampleApprovalHistory\n      };\n      const masterData = { ...inputParam.masterData,\n        BA_SampleApprovalHistory: historyMap\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function BA_viewCheckList(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      nreleasebatchcode: inputData.selectedRecord.nreleasebatchcode,\n      nchecklistversioncode: inputData.selectedRecord.nchecklistversioncode,\n      nuserrolecode: inputData.selectedRecord.nuserrolecode,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"batchapproval/viewBatchTemplate\", inputParamData).then(response => {\n      let selectedRecord = {};\n      let editedQB = [];\n      response.data && response.data.map(qb => {\n        if (qb.sdefaultvalue !== null) {\n          selectedRecord[qb.nchecklistversionqbcode] = {\n            nchecklistversioncode: qb.nchecklistversioncode,\n            nchecklistversionqbcode: qb.nchecklistversionqbcode,\n            nchecklistqbcode: qb.nchecklistqbcode,\n            sdefaultvalue: qb.sdefaultvalue\n          };\n          editedQB.push(qb.nchecklistversionqbcode);\n          selectedRecord['editedQB'] = editedQB;\n        }\n\n        return null;\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          templateData: response.data,\n          loading: false,\n          openTemplateModal: true,\n          selectedRecord: { ...selectedRecord\n          },\n          needSaveButton: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validateEsignforBatchApproval(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"performaction\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        }\n\n        dispatch(performBatchAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSpecComponentView(inputParam) {\n  return function (dispatch) {\n    let inputData = {\n      testgroupspecification: {\n        nallottedspeccode: inputParam.nallottedspeccode\n      },\n      userinfo: inputParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"testgroup/getTestGroupSampleType\", inputData).then(response => {\n      let selectedRecord = {\n        sproductname: inputParam.sproductname,\n        sspecname: inputParam.sspecname\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          [inputParam.modalName]: true,\n          selectedRecord: { ...selectedRecord\n          },\n          SpecComponents: response.data,\n          operation: \"view\",\n          screenName: \"IDS_TESTGROUP\",\n          noSave: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/actions/BatchApprovalAction.js"],"names":["toast","replaceUpdatedObject","sortData","transactionStatus","rsapi","initRequest","updateStore","DEFAULT_RETURN","postCRUDOrganiseTransSearch","getBAFilterStatus","filterRecord","masterData","userinfo","dispatch","inputData","napprovalversioncode","napproveconfversioncode","value","post","then","response","BA_FilterStatus","data","ntransactionstatus","label","BA_FilterStatusValue","sfilterstatus","item","type","payload","loading","catch","error","status","message","warn","getBatchCreation","inputParam","nreleasebatchcode","parseInt","dfrom","dto","activeBATab","componentDataState","parameterDataState","testCommentDataState","sampleHistoryDataState","batchApprovalDataState","decisionDataState","batchClockDataState","checklistDataState","batchAttachmentDataState","sampleapprovalDataState","responseData","searchRef","undefined","current","showFilter","updateDataState","skip","take","sort","filter","getRoleChecklist","nchecklistversioncode","nuserrolecode","nuserrole","selectedRecord","editedQB","map","qb","sdefaultvalue","nchecklistversionqbcode","nchecklistqbcode","push","templateData","openTemplateModal","needSaveButton","onSaveBatchChecklist","userInfo","listChecklistVersionTemplate","qbcode","checklistversiontemplate","validateBatchTest","action","nesignneed","YES","updateInfo","typeName","loadEsign","screenData","openChildModal","screenName","operation","showConfirmAlert","performBatchAction","URL","BA_BatchCreation","updatedBatchCreation","respObject","masterStatus","errorCode","showEsign","postParamList","getBAChildTabDetail","inputParamData","nflag","BA_SelectedBatchCreation","getBASampleApprovalHistory","historyMap","BA_SampleApprovalHistory","BA_viewCheckList","validateEsignforBatchApproval","methodUrl","toLowerCase","getSpecComponentView","testgroupspecification","nallottedspeccode","sproductname","sspecname","modalName","SpecComponents","noSave"],"mappings":"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","sourcesContent":["import { toast } from \"react-toastify\";\r\nimport { replaceUpdatedObject, sortData } from \"../components/CommonScript\";\r\nimport { transactionStatus } from \"../components/Enumeration\";\r\nimport rsapi from \"../rsapi\";\r\nimport { initRequest, updateStore } from \"./LoginAction\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\nimport { postCRUDOrganiseTransSearch } from \"./ServiceAction\";\r\n\r\nexport function getBAFilterStatus(filterRecord,masterData,userinfo){\r\n    return function (dispatch){\r\n        let inputData={napprovalversioncode:filterRecord.napproveconfversioncode.value,userinfo};\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"batchapproval/getFilterStatus\", inputData)\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    BA_FilterStatus:response.data.BA_FilterStatus,\r\n                }\r\n                filterRecord={\r\n                    ...filterRecord,\r\n                    ntransactionstatus:{label:response.data.BA_FilterStatusValue.sfilterstatus,value:response.data.BA_FilterStatusValue.ntransactionstatus,item:response.data.BA_FilterStatusValue}\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        filterRecord\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getBatchCreation(inputParam) {\r\n    return function (dispatch) {\r\n        let inputData = {};\r\n        if (inputParam.inputData) {\r\n            inputData = inputParam.inputData\r\n        } else {\r\n            inputData = {\r\n                nreleasebatchcode: parseInt(inputParam.nreleasebatchcode),\r\n                dfrom: inputParam.dfrom,\r\n                dto: inputParam.dto,\r\n                napprovalversioncode: inputParam.napprovalversioncode,\r\n                ntransactionstatus: inputParam.ntransactionstatus,\r\n                activeBATab: inputParam.activeBATab,\r\n                userinfo: inputParam.userinfo\r\n            }\r\n        }\r\n        let {componentDataState,parameterDataState,testCommentDataState,sampleHistoryDataState,\r\n            batchApprovalDataState,decisionDataState,batchClockDataState,checklistDataState,\r\n            batchAttachmentDataState,sampleapprovalDataState} = inputParam\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"batchapproval/getBatchCreation\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\r\n                    inputParam.searchRef.current.value = \"\";\r\n                    masterData['searchedData'] = undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        updateDataState :true,\r\n                        componentDataState:{...componentDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                        parameterDataState:{...parameterDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                        testCommentDataState:{...testCommentDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                        sampleHistoryDataState:{...sampleHistoryDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                        batchApprovalDataState:{...batchApprovalDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                        decisionDataState:{...decisionDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                        batchClockDataState:{...batchClockDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                        checklistDataState:{...checklistDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                        batchAttachmentDataState:{...batchAttachmentDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                        sampleapprovalDataState:{...sampleapprovalDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRoleChecklist(nchecklistversioncode, nreleasebatchcode, userinfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"batchapproval/viewBatchTemplate\", { nchecklistversioncode, nreleasebatchcode,nuserrolecode:userinfo.nuserrole, userinfo })\r\n            .then(response => {\r\n                let selectedRecord = {}\r\n                let editedQB = []\r\n                response.data && response.data.map(qb => {\r\n                    if (qb.sdefaultvalue !== null) {\r\n                        selectedRecord[qb.nchecklistversionqbcode] = { nchecklistversioncode: qb.nchecklistversioncode, nchecklistversionqbcode: qb.nchecklistversionqbcode, nchecklistqbcode: qb.nchecklistqbcode, sdefaultvalue: qb.sdefaultvalue }\r\n                        editedQB.push(qb.nchecklistversionqbcode)\r\n                        selectedRecord['editedQB'] = editedQB\r\n                    }\r\n                    return null;\r\n                })\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        templateData: response.data,\r\n                        loading: false,\r\n                        openTemplateModal: true,\r\n                        selectedRecord: { ...selectedRecord, nreleasebatchcode },\r\n                        needSaveButton:true\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function onSaveBatchChecklist(selectedRecord, userInfo) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let listChecklistVersionTemplate = [];\r\n        if (selectedRecord && selectedRecord.editedQB) {\r\n            selectedRecord.editedQB.map(qbcode =>\r\n                listChecklistVersionTemplate.push(selectedRecord[qbcode]))\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"batchapproval/createUpdateBatchChecklist\",\r\n                { checklistversiontemplate: listChecklistVersionTemplate, nreleasebatchcode: selectedRecord[\"nreleasebatchcode\"], \"userinfo\": userInfo })\r\n\r\n                .then(response => {\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            selectedRecord: {},\r\n                            templateData: undefined,\r\n                            loading: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    openTemplateModal: false, selectedRecord: {}, loading: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function validateBatchTest(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"batchapproval/validateBatchTests\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data) {\r\n                    if (inputParam.action.nesignneed === transactionStatus.YES) {\r\n\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true,  screenData: { inputParam, masterData: inputParam.masterData },\r\n                                openChildModal: true,\r\n                                screenName: \"performaction\",\r\n                                operation: \"dynamic\",\r\n                                showConfirmAlert: false,\r\n                                loading: false\r\n                            }\r\n                        }\r\n                         dispatch(updateStore(updateInfo));\r\n                        // dispatch({\r\n                        //     type: DEFAULT_RETURN, payload: {\r\n                        //         loadEsign: true,\r\n                        //         screenData: { inputParam, masterData: inputParam.masterData },\r\n                        //         openChildModal: true,\r\n                        //         screenName: \"performaction\",\r\n                        //         operation: \"dynamic\",\r\n                        //         showConfirmAlert: false,\r\n                        //         loading: false\r\n                        //     }\r\n                        // })\r\n                    } else {\r\n                        dispatch(performBatchAction(inputParam,true));\r\n                    }\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            showConfirmAlert: true,\r\n                            loading: false,\r\n                            inputParam\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\nexport function performBatchAction(inputParam) {\r\n    return function (dispatch) {\r\n        \r\n            let URL = \"batchapproval/updateApproval\";\r\n            if (inputParam.type === 1) {\r\n                URL = \"batchapproval/updateDecision\";\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(URL, inputParam.inputData)\r\n                .then(response => {\r\n                    const responseData={...response.data}\r\n                    sortData(responseData);\r\n                    let masterData = {\r\n                        ...inputParam.masterData,\r\n                        ...responseData,\r\n                        BA_BatchCreation: replaceUpdatedObject(response.data.updatedBatchCreation, inputParam.masterData.BA_BatchCreation, 'nreleasebatchcode'),\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        inputParam,\r\n                        openChildModal: false,\r\n                        operation: \"dynamic\",\r\n                        masterStatus: \"\",\r\n                        errorCode: undefined,\r\n                        loadEsign: false,\r\n                        showEsign: false,\r\n                        selectedRecord: {},\r\n                        loading: false,\r\n                        showConfirmAlert: false,\r\n                    }\r\n\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    // dispatch({ type: DEFAULT_RETURN, payload: { ...respObject } })\r\n\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        \r\n    }\r\n}\r\nexport function getBAChildTabDetail(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.nreleasebatchcode) {\r\n            let inputParamData = {\r\n                nreleasebatchcode: parseInt(inputData.nreleasebatchcode),\r\n                activeBATab: inputData.activeBATab,\r\n                userinfo: inputData.userinfo,\r\n                nflag: inputData.nflag,\r\n                napprovalversioncode: inputData.napprovalversioncode\r\n\r\n            }\r\n            let {componentDataState,parameterDataState,testCommentDataState,sampleHistoryDataState,\r\n                batchApprovalDataState,decisionDataState,batchClockDataState,checklistDataState,\r\n                batchAttachmentDataState,sampleapprovalDataState} = inputData\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"batchapproval/getBAChildTab\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...responseData,\r\n                                BA_SelectedBatchCreation:inputData.BA_SelectedBatchCreation\r\n                            },\r\n                            loading: false,\r\n                            activeBATab: inputData.activeBATab,\r\n                            screenName: inputData.screenName,\r\n                            updateDataState :inputData.updateDataState !==undefined ? inputData.updateDataState :true,\r\n                            componentDataState:{...componentDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                            parameterDataState:{...parameterDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                            testCommentDataState:{...testCommentDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                            sampleHistoryDataState:{...sampleHistoryDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                            batchApprovalDataState:{...batchApprovalDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                            decisionDataState:{...decisionDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                            batchClockDataState:{...batchClockDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                            checklistDataState:{...checklistDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                            batchAttachmentDataState:{...batchAttachmentDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                            sampleapprovalDataState:{...sampleapprovalDataState,skip:0,take:5,sort:undefined,filter:undefined},\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData: {\r\n                        ...inputData.masterData\r\n                    },\r\n                    loading: false,\r\n                    activeBATab: inputData.activeBATab\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\nexport function getBASampleApprovalHistory(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"batchapproval/getBASampleApprovalHistory\", inputParam.inputData)\r\n            .then(response => {\r\n                let historyMap = inputParam.historyMap\r\n                historyMap = { ...historyMap, ...response.data.BA_SampleApprovalHistory }\r\n                const masterData = {\r\n                    ...inputParam.masterData,\r\n                    BA_SampleApprovalHistory: historyMap\r\n                };\r\n                sortData(masterData);\r\n                dispatch(\r\n                    {\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false\r\n                        }\r\n                    }\r\n                );\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function BA_viewCheckList(inputData) {\r\n\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nreleasebatchcode: inputData.selectedRecord.nreleasebatchcode,\r\n            nchecklistversioncode: inputData.selectedRecord.nchecklistversioncode,\r\n            nuserrolecode:inputData.selectedRecord.nuserrolecode,\r\n            userinfo: inputData.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"batchapproval/viewBatchTemplate\", inputParamData)\r\n            .then(response => {\r\n                let selectedRecord = {}\r\n                let editedQB = []\r\n                response.data && response.data.map(qb => {\r\n                    if (qb.sdefaultvalue !== null) {\r\n                        selectedRecord[qb.nchecklistversionqbcode] = { nchecklistversioncode: qb.nchecklistversioncode, nchecklistversionqbcode: qb.nchecklistversionqbcode, nchecklistqbcode: qb.nchecklistqbcode, sdefaultvalue: qb.sdefaultvalue }\r\n                        editedQB.push(qb.nchecklistversionqbcode)\r\n                        selectedRecord['editedQB'] = editedQB\r\n                    }\r\n                    return null;\r\n                })\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        templateData: response.data,\r\n                        loading: false,\r\n                        openTemplateModal: true,\r\n                        selectedRecord: { ...selectedRecord },\r\n                        needSaveButton:false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function validateEsignforBatchApproval(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = \"performaction\"\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];                        \r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n                    }\r\n                    dispatch(performBatchAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\nexport function getSpecComponentView(inputParam) {\r\n\r\n    return function (dispatch) {\r\n        let inputData = {\r\n            testgroupspecification:{nallottedspeccode:inputParam.nallottedspeccode},\r\n            userinfo:inputParam.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testgroup/getTestGroupSampleType\", inputData)\r\n            .then(response => {\r\n                let selectedRecord = {\r\n                    sproductname:inputParam.sproductname,\r\n                    sspecname:inputParam.sspecname,\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false,\r\n                        [inputParam.modalName]: true,\r\n                        selectedRecord: { ...selectedRecord },\r\n                        SpecComponents:response.data,\r\n                        operation:\"view\",\r\n                        screenName:\"IDS_TESTGROUP\",\r\n                        noSave:true\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}