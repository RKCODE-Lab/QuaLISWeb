{"ast":null,"code":"import _defineProperty from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import Axios from'axios';import{toast}from'react-toastify';import{constructOptionList}from'../components/CommonScript';import{initRequest}from'./LoginAction';import{intl}from'../components/App';//export function fetchRecordSafetyMarker (screenName, primaryKeyName, primaryKeyValue, operation, inputParam, userInfo, ncontrolCode, masterData){\nexport function fetchRecordSafetyMarker(fetchRecordParam){return function(dispatch){var testCategory=rsapi.post(\"testcategory/getTestCategory\",{\"userinfo\":fetchRecordParam.userInfo});var urlArray=[];var nTestCategoryCode=0;var selectedId=null;if(fetchRecordParam.operation===\"update\"){var _rsapi$post;fetchRecordParam.data.map(function(item){if(item.nsafetymarkercode===parseInt(fetchRecordParam.primaryKeyValue)){return nTestCategoryCode=item.ntestcategorycode;}return nTestCategoryCode;});var safetyMarker=rsapi.post(fetchRecordParam.inputParam.classUrl+\"/getActiveSafetyMarkerById\",(_rsapi$post={},_defineProperty(_rsapi$post,fetchRecordParam.primaryKeyField,fetchRecordParam.primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",fetchRecordParam.userInfo),_rsapi$post));var testMasterData=rsapi.post(\"testmaster/getTestMasterBasedOnTestCategory\",{\"userinfo\":fetchRecordParam.userInfo,\"ntestcategorycode\":parseInt(nTestCategoryCode)});urlArray=[testCategory,testMasterData,safetyMarker];selectedId=fetchRecordParam.primaryKeyValue;}else{urlArray=[testCategory];}dispatch(initRequest(true));Axios.all(urlArray).then(Axios.spread(function(){var selectedRecord={};var ntestcategorycode=[];var ntestcode=[];// const testmasterMap = [];\nvar testmasterList=[];for(var _len=arguments.length,response=new Array(_len),_key=0;_key<_len;_key++){response[_key]=arguments[_key];}var testCategoryMap=constructOptionList(response[0].data||[],\"ntestcategorycode\",\"stestcategoryname\",undefined,undefined,true);var testCategoryList=testCategoryMap.get(\"OptionList\");if(fetchRecordParam.operation===\"update\"){selectedRecord=response[2].data;selectedRecord[\"ntestcategorycode\"]={label:response[2].data[\"stestcategoryname\"],value:response[2].data[\"ntestcategorycode\"]};selectedRecord[\"ntestcode\"]={label:response[2].data[\"stestname\"],value:response[2].data[\"ntestcode\"]};var testmasterMap=constructOptionList(response[1].data||[],\"ntestcode\",\"stestname\",undefined,undefined,true);testmasterList=testmasterMap.get(\"OptionList\");// ntestcategorycode.push({\n//     label: response[2].data[\"stestcategoryname\"],\n//     value: response[2].data[\"ntestcategorycode\"]\n// });\n// ntestcode.push({\n//     label: response[2].data[\"stestname\"],\n//     value: response[2].data[\"ntestcode\"]\n// });\n}dispatch({type:DEFAULT_RETURN,payload:{testCategory:testCategoryList,testMaster:fetchRecordParam.operation===\"update\"?testmasterList:[],ntestcategorycode:ntestcategorycode,ntestcode:ntestcode,selectedRecord:fetchRecordParam.operation===\"update\"?selectedRecord:undefined,operation:fetchRecordParam.operation,screenName:\"IDS_EDQMSAFETYMARKER\",openModal:true,ncontrolCode:fetchRecordParam.ncontrolCode,loading:false,selectedId:selectedId}});})).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response.data}));}});};}export function getTestMasterDataService(nTestCategoryCode,selectedRecord,userInfo){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"testmaster/getTestMasterBasedOnTestCategory\",{\"userinfo\":userInfo,\"ntestcategorycode\":parseInt(nTestCategoryCode)}).then(function(response){var ntestcode=[];var testmasterMap=constructOptionList(response.data||[],\"ntestcode\",\"stestname\",undefined,undefined,true);var testmasterList=testmasterMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{testMaster:testmasterList,ntestcode:ntestcode,selectedRecord:selectedRecord,loading:false}});console.log(\"Checking Here : \",response.data);}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});console.log('error: ',error);});};}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/EDQMSafetyMarkerAction.js"],"names":["rsapi","DEFAULT_RETURN","Axios","toast","constructOptionList","initRequest","intl","fetchRecordSafetyMarker","fetchRecordParam","dispatch","testCategory","post","userInfo","urlArray","nTestCategoryCode","selectedId","operation","data","map","item","nsafetymarkercode","parseInt","primaryKeyValue","ntestcategorycode","safetyMarker","inputParam","classUrl","primaryKeyField","testMasterData","all","then","spread","selectedRecord","ntestcode","testmasterList","response","testCategoryMap","undefined","testCategoryList","get","label","value","testmasterMap","type","payload","testMaster","screenName","openModal","ncontrolCode","loading","catch","error","status","formatMessage","id","message","warn","getTestMasterDataService","console","log"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport Axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport {constructOptionList} from '../components/CommonScript';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\n\r\n\r\n\r\n//export function fetchRecordSafetyMarker (screenName, primaryKeyName, primaryKeyValue, operation, inputParam, userInfo, ncontrolCode, masterData){\r\nexport function fetchRecordSafetyMarker(fetchRecordParam) {\r\n    return function (dispatch) {\r\n\r\n        const testCategory = rsapi.post(\"testcategory/getTestCategory\", { \"userinfo\": fetchRecordParam.userInfo });\r\n\r\n        let urlArray = [];\r\n        let nTestCategoryCode = 0;\r\n        let selectedId = null;\r\n        if (fetchRecordParam.operation === \"update\") {\r\n\r\n            fetchRecordParam.data.map(item => {\r\n                if (item.nsafetymarkercode === parseInt(fetchRecordParam.primaryKeyValue)) {\r\n                    return nTestCategoryCode = item.ntestcategorycode;\r\n                }\r\n                return nTestCategoryCode;\r\n            })\r\n            const safetyMarker = rsapi.post(fetchRecordParam.inputParam.classUrl + \"/getActiveSafetyMarkerById\", { [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo });\r\n            const testMasterData = rsapi.post(\"testmaster/getTestMasterBasedOnTestCategory\", { \"userinfo\": fetchRecordParam.userInfo, \"ntestcategorycode\": parseInt(nTestCategoryCode) });\r\n\r\n            urlArray = [testCategory, testMasterData, safetyMarker];\r\n            selectedId = fetchRecordParam.primaryKeyValue;\r\n        }\r\n        else {\r\n            urlArray = [testCategory];\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(Axios.spread((...response) => {\r\n\r\n                let selectedRecord = {};\r\n                let ntestcategorycode = [];\r\n                let ntestcode = [];\r\n                // const testmasterMap = [];\r\n                let testmasterList = [];\r\n\r\n                const testCategoryMap = constructOptionList(response[0].data || [], \"ntestcategorycode\",\r\n                    \"stestcategoryname\", undefined, undefined, true);\r\n\r\n                const testCategoryList = testCategoryMap.get(\"OptionList\");\r\n\r\n                if (fetchRecordParam.operation === \"update\") {\r\n\r\n                    selectedRecord = response[2].data;\r\n                    selectedRecord[\"ntestcategorycode\"] = {\r\n                        label: response[2].data[\"stestcategoryname\"],\r\n                        value: response[2].data[\"ntestcategorycode\"]\r\n                    };\r\n                    selectedRecord[\"ntestcode\"] = {\r\n                        label: response[2].data[\"stestname\"],\r\n                        value: response[2].data[\"ntestcode\"]\r\n                    };\r\n\r\n                    const testmasterMap = constructOptionList(response[1].data || [], \"ntestcode\",\r\n                        \"stestname\", undefined, undefined, true);\r\n\r\n                    testmasterList = testmasterMap.get(\"OptionList\");\r\n                    // ntestcategorycode.push({\r\n                    //     label: response[2].data[\"stestcategoryname\"],\r\n                    //     value: response[2].data[\"ntestcategorycode\"]\r\n                    // });\r\n\r\n                    // ntestcode.push({\r\n                    //     label: response[2].data[\"stestname\"],\r\n                    //     value: response[2].data[\"ntestcode\"]\r\n                    // });\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        testCategory: testCategoryList, testMaster: fetchRecordParam.operation === \"update\" ? testmasterList : [],\r\n                        ntestcategorycode: ntestcategorycode, ntestcode: ntestcode,\r\n                        selectedRecord: fetchRecordParam.operation === \"update\" ? selectedRecord : undefined, operation: fetchRecordParam.operation,\r\n                        screenName: \"IDS_EDQMSAFETYMARKER\",\r\n                        openModal: true, ncontrolCode: fetchRecordParam.ncontrolCode,\r\n                        loading: false, selectedId\r\n                    }\r\n                });\r\n            }))\r\n\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestMasterDataService(nTestCategoryCode, selectedRecord, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testmaster/getTestMasterBasedOnTestCategory\", { \"userinfo\": userInfo, \"ntestcategorycode\": parseInt(nTestCategoryCode) })\r\n            .then(response => {\r\n\r\n                let ntestcode = [];\r\n\r\n               const testmasterMap = constructOptionList(response.data || [], \"ntestcode\",\r\n                \"stestname\", undefined, undefined, true);\r\n\r\n                const testmasterList = testmasterMap.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        testMaster: testmasterList, ntestcode: ntestcode, selectedRecord, loading: false\r\n                    }\r\n                });\r\n                console.log(\"Checking Here : \", response.data);\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                console.log('error: ', error);\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}