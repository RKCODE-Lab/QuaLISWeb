{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes'; //import { sortData, getComboLabelValue, searchData } from '../components/CommonScript'\n\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction'; //export function getClientComboService(screenName, operation, primaryKeyName, primaryKeyValue, userInfo, ncontrolCode) {\n//export function getClientComboService(screenName, primaryKeyName, primaryKeyValue, operation, inputParam, userInfo, ncontrolCode) {\n\nexport function getClientComboService(clientparam) {\n  return function (dispatch) {\n    if (clientparam.operation === \"create\" || clientparam.operation === \"update\") {\n      const countryService = rsapi.post(\"country/getCountry\", {\n        userinfo: clientparam.userInfo\n      });\n      let urlArray = [];\n      let selectedId = null;\n\n      if (clientparam.operation === \"create\") {\n        urlArray = [countryService];\n      } else {\n        const clientById = rsapi.post(\"client/getActiveClientById\", {\n          [clientparam.primaryKeyField]: clientparam.primaryKeyValue,\n          \"userinfo\": clientparam.userInfo\n        });\n        urlArray = [countryService, clientById];\n        selectedId = clientparam.primaryKeyValue;\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let country = [];\n        let selectedRecord = {};\n\n        if (clientparam.operation === \"update\") {\n          selectedRecord = response[1].data;\n          country.push({\n            \"value\": response[1].data[\"ncountrycode\"],\n            \"label\": response[1].data[\"scountryname\"]\n          });\n          selectedRecord[\"ncountrycode\"] = country[0];\n        } else {\n          selectedRecord[\"ntransactionstatus\"] = 1;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            countryList: response[0].data || [],\n            selectedRecord,\n            openModal: true,\n            operation: clientparam.operation,\n            screenName: clientparam.screenName,\n            ncontrolCode: clientparam.ncontrolCode,\n            loading: false,\n            selectedId\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } // else {\n    //     toast.warn(this.props.formatMessage({ id: masterData.SelectedMAHolder.stranstatus }));\n    // }\n\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/ClientAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","getClientComboService","clientparam","dispatch","operation","countryService","post","userinfo","userInfo","urlArray","selectedId","clientById","primaryKeyField","primaryKeyValue","all","then","response","country","selectedRecord","data","push","type","payload","countryList","openModal","screenName","ncontrolCode","loading","catch","error","status","message","warn"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\n//import { sortData, getComboLabelValue, searchData } from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\n\r\n//export function getClientComboService(screenName, operation, primaryKeyName, primaryKeyValue, userInfo, ncontrolCode) {\r\n//export function getClientComboService(screenName, primaryKeyName, primaryKeyValue, operation, inputParam, userInfo, ncontrolCode) {\r\nexport function getClientComboService(clientparam) {\r\n    return function (dispatch) {\r\n        if (clientparam.operation === \"create\" || clientparam.operation === \"update\") {\r\n            const countryService = rsapi.post(\"country/getCountry\", { userinfo: clientparam.userInfo });\r\n            let urlArray = [];\r\n            let selectedId = null;\r\n            if (clientparam.operation === \"create\") {\r\n\r\n                urlArray = [countryService];\r\n            }\r\n            else {\r\n                const clientById = rsapi.post(\"client/getActiveClientById\", { [clientparam.primaryKeyField]: clientparam.primaryKeyValue, \"userinfo\": clientparam.userInfo });\r\n\r\n                urlArray = [countryService, clientById];\r\n                selectedId = clientparam.primaryKeyValue;\r\n            }\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let country = [];\r\n                    let selectedRecord = {};\r\n                    if (clientparam.operation === \"update\") {\r\n                        selectedRecord = response[1].data;\r\n                        country.push({ \"value\": response[1].data[\"ncountrycode\"], \"label\": response[1].data[\"scountryname\"] });\r\n                        selectedRecord[\"ncountrycode\"] = country[0];\r\n                    } else {\r\n                        selectedRecord[\"ntransactionstatus\"] = 1;\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            countryList: response[0].data || [],\r\n\r\n                            selectedRecord, openModal: true,\r\n                            operation: clientparam.operation, screenName: clientparam.screenName,\r\n                            ncontrolCode: clientparam.ncontrolCode, loading: false, selectedId\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        // else {\r\n        //     toast.warn(this.props.formatMessage({ id: masterData.SelectedMAHolder.stranstatus }));\r\n        // }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}