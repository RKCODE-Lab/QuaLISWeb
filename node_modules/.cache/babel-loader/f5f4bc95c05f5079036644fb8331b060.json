{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicmaster\\\\DynamicMaster.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DynamicDataGrid from '../../components/data-grid/data-grid.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../../pages/audittrail/Esign';\nimport { callService, crudMaster, updateStore, validateEsignCredential, getEditDynamicMasterCombo, //fetchRecord,\ngetDynamicMasterCombo, getChildValues } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, deleteAttachmentDropZone, getSameRecordFromTwoArrays, onDropAttachFileList, convertDateTimetoString, validateEmail, formatDate, sortData } from '../../components/CommonScript';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout.jsx';\nimport { transactionStatus } from '../../components/Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass DynamicMaster extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data || [], event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.openModal = () => {\n      const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\") && this.state.controlMap.get(\"Add\").ncontrolcode;\n      this.props.getDynamicMasterCombo(this.props.Login.masterData, this.props.Login.userInfo, addId, this.state.designData, this.state.selectedRecord, this.state.childColumnList, this.state.comboComponents, this.state.withoutCombocomponent, false, true, new Map(), true, \"create\", this.props.Login.displayName);\n    };\n\n    this.fetchRecord = fetchRecordParam => {\n      this.props.getEditDynamicMasterCombo(fetchRecordParam, this.state.designData, this.state.selectedRecord, this.state.childColumnList, this.state.comboComponents, this.state.withoutCombocomponent);\n    };\n\n    this.onNumericBlur = (value, control) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[control.label]) {\n        if (control.max) {\n          if (!(selectedRecord[control.label] < parseFloat(control.max))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedRecord[control.label] > parseFloat(control.min))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.comboChild = (data, columnList, childColumnList, slice) => {\n      let retunObj = {}; // if (data.findIndex(x => x.label === columnList.label) !== -1) {\n\n      if (!childColumnList.hasOwnProperty(columnList.label)) {\n        if (childColumnList[columnList.label] === undefined) {\n          if (columnList.hasOwnProperty(\"child\")) {\n            let childList = [];\n            columnList.child.map(childData => {\n              const index = data.findIndex(x => x.label === childData.label);\n\n              if (index !== -1) {\n                childList.push(data[index]);\n\n                if (slice) {\n                  data = [...data.slice(0, index), ...data.slice(index + 1)];\n                }\n              }\n            });\n            childColumnList[columnList.label] = childList;\n\n            if (childList.length > 0) {\n              childList.map(y => {\n                if (y.hasOwnProperty(\"child\")) {\n                  const val = this.comboChild(data, y, childColumnList, slice);\n                  retunObj[\"data\"] = val.data;\n                  retunObj[\"childColumnList\"] = val.childColumnList;\n                } else {\n                  retunObj[\"data\"] = data;\n                  retunObj[\"childColumnList\"] = childColumnList;\n                }\n              });\n            } else {\n              retunObj[\"data\"] = data;\n              retunObj[\"childColumnList\"] = childColumnList;\n            }\n          } else {\n            retunObj[\"data\"] = data;\n            retunObj[\"childColumnList\"] = childColumnList;\n          }\n        } else {\n          retunObj[\"data\"] = data;\n          retunObj[\"childColumnList\"] = childColumnList;\n        }\n      } else {\n        retunObj[\"data\"] = data;\n        retunObj[\"childColumnList\"] = childColumnList;\n      }\n\n      return retunObj;\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData) {\n        comboData[\"item\"] = { ...comboData[\"item\"],\n          \"pkey\": control.valuemember,\n          \"nquerybuildertablecode\": control.nquerybuildertablecode,\n          \"source\": control.source\n        };\n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      if (control.child && control.child.length > 0) {\n        const childComboList = getSameRecordFromTwoArrays(this.state.comboComponents, control.child, \"label\");\n        let childColumnList = {};\n        childComboList.map(columnList => {\n          const val = this.comboChild(this.state.comboComponents, columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        const parentList = getSameRecordFromTwoArrays(this.state.withoutCombocomponent, control.child, \"label\");\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData.value,\n          item: comboData.item\n        };\n        this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.state.withoutCombocomponent, [...childComboList, ...parentList]);\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onDrop = (value, type, oldVlaue) => {\n      const design = this.state.design;\n      let columns = design[0].children;\n      let designData = this.props.Login.ReactInputFields;\n      value = JSON.parse(value.fields);\n      value = { ...value,\n        type: \"component\"\n      };\n      let designDataIndex = designData.findIndex(item => item.label === value.label);\n      let firstIndex = columns[0] ? columns[0].children.findIndex(item => item.label === value.label) : -1;\n      let secondIndex = columns[1] ? columns[1].children.findIndex(item => item.label === value.label) : -1;\n      if (designDataIndex >= 0) designData.splice(designDataIndex, 1);\n\n      if (firstIndex >= 0) {\n        if (type !== 1) {\n          columns[0].children.splice(firstIndex, 1); // columns[0].splice(to, 0, columns[0].splice(from, 1)[0]);\n        } else {\n          if (oldVlaue) {\n            oldVlaue = JSON.parse(oldVlaue);\n            let from = columns[0].children.findIndex(item => item.label === value.label);\n            let to = columns[0].children.findIndex(item => item.label === oldVlaue.label);\n            columns[0].children.splice(to, 0, columns[0].children.splice(from, 1)[0]);\n          }\n        }\n      } else if (type === 1) {\n        if (columns[0]) {\n          columns[0].children.push(value);\n        } else {\n          columns[0] = {\n            id: \"1\",\n            type: \"column\",\n            children: []\n          };\n          columns[0].children.push(value);\n        }\n      }\n\n      if (secondIndex >= 0) {\n        if (type !== 2) {\n          columns[1].splice(secondIndex, 1);\n        } else {\n          if (oldVlaue) {\n            oldVlaue = JSON.parse(oldVlaue);\n            let from = columns[1].children.findIndex(item => item.label === value.label);\n            let to = columns[1].children.findIndex(item => item.label === oldVlaue.label);\n            columns[1].children.splice(to, 0, columns[1].children.splice(from, 1)[0]);\n          }\n        }\n      } else if (type === 2) {\n        if (columns[1]) {\n          columns[1].children.push(value);\n        } else {\n          columns[1] = {\n            id: \"2\",\n            type: \"column\",\n            children: []\n          };\n          columns[1].children.push(value);\n        }\n      } // design.push(columns)\n\n\n      this.setState({\n        designData,\n        design\n      });\n    };\n\n    this.onDropFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.onInputOnChange = (event, value) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'toggle') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'numeric') {\n        if (/\\D/.test(event.target.value)) selectedRecord[event.target.name] = event.target.value;\n      } else if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = value;\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: \"dynamicmaster\",\n        methodUrl: \"DynamicMaster\",\n        displayName: this.props.Login.displayName,\n        inputData: {\n          [\"dynamicmaster\"]: {\n            \"ndynamicmastercode\": deleteParam.selectedRecord.ndynamicmastercode\n          },\n          //.dataItem,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: \"delete\",\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.displayName,\n            operation: \"delete\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit  \n      let inputData = [];\n      let dataState = undefined;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"masterdateconstraints\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdateconstraints;\n      inputData[\"masterdatefields\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdatefields;\n      inputData[\"mastercombinationunique\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.mastercombinationunique;\n      let selectedId = null;\n      let operation = \"\";\n      let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        dataState = this.state.dataState;\n        inputData[\"dynamicmaster\"] = {\n          ndynamicmastercode: this.state.selectedRecord[\"ndynamicmastercode\"]\n        }; //this.state.selectedRecord;\n\n        inputData[\"dynamicmaster\"][\"jsondata\"] = {};\n        inputData[\"dynamicmaster\"][\"jsonuidata\"] = {};\n        selectedId = this.props.Login.selectedId;\n        operation = \"update\";\n      } else {\n        //add                          \n        inputData[\"dynamicmaster\"] = {\n          //\"nsitecode\": this.props.Login.userInfo.nmastersitecode, \n          nformcode: this.props.Login.userInfo.nformcode,\n          ndesigntemplatemappingcode: this.props.Login.masterData.DynamicMasterDesign.ndesigntemplatemappingcode,\n          jsondata: {},\n          jsonuidata: {}\n        };\n        operation = \"create\";\n      }\n\n      const dateList = [];\n      const defaulttimezone = this.props.Login.defaulttimezone;\n      const userInfo = this.props.Login.userInfo;\n      this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.slideoutdesign.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ? {\n                    value: selectedRecord[componentrow.label].value,\n                    label: selectedRecord[componentrow.label].label,\n                    pkey: selectedRecord[componentrow.label].item.pkey,\n                    nquerybuildertablecode: selectedRecord[componentrow.label].item.nquerybuildertablecode,\n                    source: selectedRecord[componentrow.label].item.source\n                  } : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label].label : \"\";\n                } else if (componentrow.inputtype === \"date\") {\n                  if (componentrow.mandatory) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedRecord[componentrow.label], false);\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? formatDate(selectedRecord[componentrow.label] || new Date(), false) : selectedRecord[componentrow.label] ? formatDate(selectedRecord[componentrow.label], false) : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                  }\n\n                  if (componentrow.timezone) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ? {\n                      value: selectedRecord[`tz${componentrow.label}`].value,\n                      label: selectedRecord[`tz${componentrow.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`];\n                  }\n\n                  dateList.push(componentrow.label);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\n                }\n\n                return inputData[\"dynamicmaster\"];\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedRecord[component.label] ? {\n                  value: selectedRecord[component.label].value,\n                  label: selectedRecord[component.label].label,\n                  pkey: selectedRecord[component.label].item.pkey,\n                  nquerybuildertablecode: selectedRecord[component.label].item.nquerybuildertablecode,\n                  source: selectedRecord[component.label].item.source\n                } : -1;\n                inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label; //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\n              } else if (component.inputtype === \"date\") {\n                if (component.mandatory) {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedRecord[component.label], false); // convertDateTimetoString(selectedRecord[component.label] ?\n                  // selectedRecord[component.label] : new Date(), userInfo);\n\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ? //convertDateTimetoString(selectedRecord[component.label] ?                                      \n                  //    selectedRecord[component.label] : new Date(), userInfo) :\n                  formatDate(selectedRecord[component.label] || new Date(), false) : selectedRecord[component.label] ? // convertDateTimetoString(selectedRecord[component.label] ?\n                  //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\n                  formatDate(selectedRecord[component.label], false) : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo)\n                }\n\n                if (component.timezone) {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ? {\n                    value: selectedRecord[`tz${component.label}`].value,\n                    label: selectedRecord[`tz${component.label}`].label\n                  } : defaulttimezone ? defaulttimezone : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`];\n                }\n\n                dateList.push(component.label);\n              } else {\n                inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedRecord[component.label] ? selectedRecord[component.label] : \"\";\n                inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label];\n              }\n            }\n\n            return inputData[\"dynamicmaster\"];\n          });\n          return inputData[\"dynamicmaster\"];\n        });\n        return inputData[\"dynamicmaster\"];\n      });\n      inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\n      inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\n      inputData[\"masterdatelist\"] = dateList;\n      const inputParam = {\n        classUrl: \"dynamicmaster\",\n        methodUrl: \"DynamicMaster\",\n        displayName: this.props.Login.displayName,\n        inputData: inputData,\n        operation: operation,\n        saveType,\n        formRef,\n        selectedId,\n        dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.displayName,\n            operation: \"create\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.detailedColumnList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      comboComponents: [],\n      withoutCombocomponent: []\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"ndynamicmastercode\";\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\") && this.state.controlMap.get(\"Edit\").ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      operation: \"update\",\n      primaryKeyField,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    }; // const mandatoryFields=[];\n    // this.extractedColumnList.forEach(item=>item.mandatory === true ? \n    //     mandatoryFields.push(item) :\"\"\n    // );   \n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DynamicDataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      detailedFieldList: this.detailedColumnList,\n      expandField: this.detailedColumnList.length > 0 ? \"expanded\" : false,\n      methodUrl: \"\",\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.fetchRecord,\n      editParam: editParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: deleteParam,\n      reloadData: this.reloadData,\n      addRecord: this.openModal,\n      pageable: true,\n      scrollable: 'scrollable',\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation ? this.props.Login.operation : \"create\",\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.state.mandatoryFields || [],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(DynamicSlideout, {\n        selectedRecord: this.props.Login.selectedRecord,\n        templateData: this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.slideoutdesign // handleChange={this.handleChange}\n        ,\n        handleDateChange: this.handleDateChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        comboData: this.props.Login.comboData,\n        onComboChange: this.onComboChange,\n        onDropFile: this.onDropFile,\n        deleteAttachment: this.deleteAttachment,\n        onNumericBlur: this.onNumericBlur,\n        userInfo: this.props.Login.userInfo,\n        timeZoneList: this.props.Login.timeZoneList,\n        defaultTimeZone: this.props.Login.defaultTimeZone,\n        Login: this.props.Login,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 33\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.extractedColumnList = [];\n        this.detailedColumnList = [];\n\n        if (this.props.Login.masterData && this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.screendesign) {\n          this.props.Login.masterData.DynamicMasterDesign.screendesign.griditem.map(row => {\n            // console.log(\"data:\", row);\n            this.extractedColumnList.push({\n              \"idsName\": row[\"1\"][this.props.Login.userInfo.slanguagetypecode],\n              \"dataField\": row[\"2\"]\n            });\n          });\n          this.props.Login.masterData.DynamicMasterDesign.screendesign.gridmoreitem.map(row => {\n            this.detailedColumnList.push({\n              \"idsName\": row[\"1\"][this.props.Login.userInfo.slanguagetypecode],\n              \"dataField\": row[\"2\"]\n            });\n          });\n        }\n\n        let data = [];\n        const withoutCombocomponent = [];\n        const mandatoryFields = [];\n        const Layout = this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.slideoutdesign || [];\n        Layout.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    data.push(componentrow);\n                  } else {\n                    withoutCombocomponent.push(componentrow);\n                  }\n\n                  if (componentrow.mandatory === true) {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                });\n              } else {\n                component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component);\n\n                if (component.mandatory === true) {\n                  if (component.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": component.label,\n                      \"dataField\": component.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  } else {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": component.label,\n                      \"dataField\": component.label,\n                      \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                    });\n                  }\n                }\n              }\n            });\n          });\n        });\n        const comboComponents = data;\n        let childColumnList = {};\n        data.map(columnList => {\n          const val = this.comboChild(data, columnList, childColumnList, true);\n          data = val.data;\n          childColumnList = val.childColumnList;\n        });\n        const masterData = this.props.Login.masterData.DynamicMasterData ? sortData(this.props.Login.masterData.DynamicMasterData, \"descending\", \"ndynamicmastercode\") : [];\n        this.setState({\n          withoutCombocomponent,\n          comboComponents,\n          childColumnList,\n          designData: data,\n          mandatoryFields,\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData.DynamicMasterData || [],\n          dataResult: process(masterData || [], this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        const masterData = this.props.Login.masterData.DynamicMasterData ? sortData(this.props.Login.masterData.DynamicMasterData, \"descending\", \"ndynamicmastercode\") : [];\n        this.setState({\n          data: this.props.Login.masterData.DynamicMasterData || [],\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(masterData || [], dataState),\n          dataState //, comboComponents, withoutCombocomponent\n\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  getChildValues,\n  getEditDynamicMasterCombo,\n  //fetchRecord,\n  getDynamicMasterCombo\n})(injectIntl(DynamicMaster));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dynamicmaster/DynamicMaster.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DynamicDataGrid","SlideOutModal","Esign","callService","crudMaster","updateStore","validateEsignCredential","getEditDynamicMasterCombo","getDynamicMasterCombo","getChildValues","DEFAULT_RETURN","showEsign","getControlMap","deleteAttachmentDropZone","getSameRecordFromTwoArrays","onDropAttachFileList","convertDateTimetoString","validateEmail","formatDate","sortData","ListWrapper","DynamicSlideout","transactionStatus","mapStateToProps","state","Login","DynamicMaster","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","selectedId","addId","inputParam","controlMap","has","get","ncontrolcode","masterData","userInfo","designData","childColumnList","comboComponents","withoutCombocomponent","Map","displayName","fetchRecord","fetchRecordParam","onNumericBlur","value","control","label","max","parseFloat","precision","parseInt","min","comboChild","columnList","slice","retunObj","hasOwnProperty","undefined","childList","child","map","childData","index","findIndex","x","push","length","y","val","onComboChange","comboData","customName","comboName","valuemember","nquerybuildertablecode","source","childComboList","parentList","inputParem","primarykeyField","item","onNumericInputChange","name","handleDateChange","dateValue","dateName","onDrop","type","oldVlaue","design","columns","children","ReactInputFields","JSON","parse","fields","designDataIndex","firstIndex","secondIndex","splice","from","to","id","onDropFile","attachedFiles","fieldName","maxSize","actionType","deleteAttachment","file","onInputOnChange","target","checked","YES","NO","test","deleteRecord","deleteParam","classUrl","methodUrl","inputData","ndynamicmastercode","userRoleControlRights","nformcode","ncontrolCode","screenData","screenName","reloadData","onSaveClick","saveType","formRef","DynamicMasterDesign","screendesign","masterdateconstraints","masterdatefields","mastercombinationunique","ndesigntemplatemappingcode","jsondata","jsonuidata","dateList","defaulttimezone","slideoutdesign","row","column","component","componentrow","inputtype","pkey","mandatory","loadcurrentdate","Date","timezone","stringify","esignNeeded","validateEsign","sreason","nreasoncode","spredefinedreason","password","createRef","extractedColumnList","detailedColumnList","skip","take","settings","masterStatus","error","getDerivedStateFromProps","warn","render","primaryKeyField","editId","editParam","intl","formatMessage","mandatoryFields","timeZoneList","defaultTimeZone","componentDidUpdate","previousProps","Object","values","griditem","slanguagetypecode","gridmoreitem","Layout","DynamicMasterData"],"mappings":"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","sourcesContent":["import React  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col} from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DynamicDataGrid from '../../components/data-grid/data-grid.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport { callService, crudMaster, updateStore, validateEsignCredential, \r\n    getEditDynamicMasterCombo,\r\n    //fetchRecord,\r\n    getDynamicMasterCombo, getChildValues } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap, deleteAttachmentDropZone, \r\n    getSameRecordFromTwoArrays, onDropAttachFileList,convertDateTimetoString,\r\n    validateEmail, formatDate, sortData} from '../../components/CommonScript';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout.jsx';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass DynamicMaster extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.detailedColumnList= [];\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            comboComponents: [],\r\n            withoutCombocomponent: []\r\n        };\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data ||[], event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId:null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }         \r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        \r\n        let primaryKeyField = \"ndynamicmastercode\";\r\n\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\")\r\n               && this.state.controlMap.get(\"Edit\").ncontrolcode;\r\n    \r\n        const editParam = {screenName:this.props.Login.inputParam && this.props.Login.inputParam.displayName \r\n                            && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation:\"update\",  primaryKeyField, \r\n            inputParam:this.props.Login.inputParam,   userInfo:this.props.Login.userInfo,  ncontrolCode:editId};\r\n\r\n        const deleteParam ={operation:\"delete\"};\r\n\r\n        // const mandatoryFields=[];\r\n        // this.extractedColumnList.forEach(item=>item.mandatory === true ? \r\n        //     mandatoryFields.push(item) :\"\"\r\n        // );   \r\n        \r\n        return (<>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">                           \r\n                            {this.state.data ?\r\n                                <DynamicDataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    detailedFieldList={this.detailedColumnList}\r\n                                    expandField={ this.detailedColumnList.length > 0 ? \"expanded\":false}\r\n                                    methodUrl={\"\"}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.fetchRecord}\r\n                                    editParam={editParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    deleteParam={deleteParam}\r\n                                    reloadData={this.reloadData}\r\n                                    addRecord = {this.openModal}\r\n                                    pageable={true}\r\n                                    scrollable={'scrollable'}\r\n                                    gridHeight = {'600px'}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n \r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {this.props.Login.openModal ? \r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation ? this.props.Login.operation : \"create\"}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.state.mandatoryFields || []}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> :\r\n                                <DynamicSlideout\r\n                                    selectedRecord={this.props.Login.selectedRecord}\r\n                                    templateData={this.props.Login.masterData.DynamicMasterDesign &&\r\n                                        this.props.Login.masterData.DynamicMasterDesign.slideoutdesign}\r\n                                   // handleChange={this.handleChange}\r\n                                    handleDateChange={this.handleDateChange}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onNumericInputChange={this.onNumericInputChange}\r\n                                    comboData={this.props.Login.comboData}\r\n                                    onComboChange={this.onComboChange}\r\n                                    onDropFile={this.onDropFile}\r\n                                    deleteAttachment={this.deleteAttachment}\r\n                                    onNumericBlur={this.onNumericBlur}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    timeZoneList={this.props.Login.timeZoneList}\r\n                                    defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                    Login={this.props.Login}\r\n                                />\r\n                            }\r\n                          \r\n                    /> :\"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    openModal = () => {       \r\n     \r\n        const addId =  this.props.Login.inputParam && this.state.controlMap.has(\"Add\")\r\n                             && this.state.controlMap.get(\"Add\").ncontrolcode;\r\n     \r\n        this.props.getDynamicMasterCombo(this.props.Login.masterData, this.props.Login.userInfo, addId,\r\n                                            this.state.designData, this.state.selectedRecord, this.state.childColumnList, \r\n                                            this.state.comboComponents, this.state.withoutCombocomponent, \r\n                                            false, true, new Map(), true, \"create\", this.props.Login.displayName);\r\n    }\r\n\r\n    fetchRecord = (fetchRecordParam) => {     \r\n\r\n            this.props.getEditDynamicMasterCombo(fetchRecordParam,\r\n                    this.state.designData, this.state.selectedRecord, this.state.childColumnList,\r\n                    this.state.comboComponents, this.state.withoutCombocomponent) \r\n\r\n    }\r\n\r\n    \r\n    onNumericBlur= (value, control) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (selectedRecord[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedRecord[control.label] < parseFloat(control.max))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedRecord[control.label] > parseFloat(control.min))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    comboChild = (data, columnList, childColumnList, slice) => {\r\n        let retunObj = {}\r\n        // if (data.findIndex(x => x.label === columnList.label) !== -1) {\r\n        if (!childColumnList.hasOwnProperty(columnList.label)) {\r\n            if (childColumnList[columnList.label] === undefined) {\r\n                if (columnList.hasOwnProperty(\"child\")) {\r\n                    let childList = []\r\n                    columnList.child.map(childData => {\r\n                        const index = data.findIndex(x => x.label === childData.label)\r\n                        if (index !== -1) {\r\n                            childList.push(data[index])\r\n                            if (slice) {\r\n                                data = [...data.slice(0, index), ...data.slice(index + 1)]\r\n                            }\r\n                        }\r\n                    })\r\n                    childColumnList[columnList.label] = childList;\r\n                    if (childList.length > 0) {\r\n                        childList.map(y => {\r\n                            if (y.hasOwnProperty(\"child\")) {\r\n                                const val = this.comboChild(data, y, childColumnList, slice)\r\n                                retunObj[\"data\"] = val.data;\r\n                                retunObj[\"childColumnList\"] = val.childColumnList;\r\n                            } else {\r\n                                retunObj[\"data\"] = data;\r\n                                retunObj[\"childColumnList\"] = childColumnList;\r\n                            }\r\n                        })\r\n                    } else {\r\n                        retunObj[\"data\"] = data;\r\n                        retunObj[\"childColumnList\"] = childColumnList;\r\n                    }\r\n                } else {\r\n                    retunObj[\"data\"] = data;\r\n                    retunObj[\"childColumnList\"] = childColumnList;\r\n                }\r\n            } else {\r\n                retunObj[\"data\"] = data;\r\n                retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n            }\r\n        } else {\r\n            retunObj[\"data\"] = data;\r\n            retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n        }\r\n        return retunObj;\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (comboData) {\r\n            comboData[\"item\"] = {...comboData[\"item\"], \"pkey\":control.valuemember, \"nquerybuildertablecode\":control.nquerybuildertablecode,\r\n                                \"source\": control.source};\r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = [];\r\n        }\r\n        if (control.child && control.child.length > 0) {\r\n            const childComboList = getSameRecordFromTwoArrays(this.state.comboComponents, control.child, \"label\")\r\n            let childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = this.comboChild(this.state.comboComponents, columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            const parentList = getSameRecordFromTwoArrays(this.state.withoutCombocomponent, control.child, \"label\")\r\n\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData.value,\r\n                item: comboData.item\r\n            }\r\n            this.props.getChildValues(inputParem,\r\n                this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                childComboList, childColumnList, this.state.withoutCombocomponent, [...childComboList, ...parentList])\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    \r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onDrop = (value, type, oldVlaue) => {\r\n        const design = this.state.design;\r\n        let columns = design[0].children;\r\n        let designData = this.props.Login.ReactInputFields;\r\n        value = JSON.parse(value.fields);\r\n        value = { ...value, type: \"component\" }\r\n        let designDataIndex = designData.findIndex(item => item.label === value.label);\r\n        let firstIndex = columns[0] ? columns[0].children.findIndex(item => item.label === value.label) : -1;\r\n        let secondIndex = columns[1] ? columns[1].children.findIndex(item => item.label === value.label) : -1;\r\n\r\n        if (designDataIndex >= 0)\r\n            designData.splice(designDataIndex, 1);\r\n        if (firstIndex >= 0) {\r\n            if (type !== 1) {\r\n                columns[0].children.splice(firstIndex, 1);\r\n                // columns[0].splice(to, 0, columns[0].splice(from, 1)[0]);\r\n            } else {\r\n                if (oldVlaue) {\r\n                    oldVlaue = JSON.parse(oldVlaue);\r\n                    let from = columns[0].children.findIndex(item => item.label === value.label);\r\n                    let to = columns[0].children.findIndex(item => item.label === oldVlaue.label);\r\n                    columns[0].children.splice(to, 0, columns[0].children.splice(from, 1)[0]);\r\n                }\r\n            }\r\n\r\n        } else if (type === 1) {\r\n            if (columns[0]) {\r\n                columns[0].children.push(value);\r\n            } else {\r\n                columns[0] = {\r\n                    id: \"1\",\r\n                    type: \"column\",\r\n                    children: []\r\n                }\r\n\r\n                columns[0].children.push(value);\r\n            }\r\n        }\r\n        if (secondIndex >= 0) {\r\n            if (type !== 2) {\r\n                columns[1].splice(secondIndex, 1);\r\n            } else {\r\n                if (oldVlaue) {\r\n                    oldVlaue = JSON.parse(oldVlaue);\r\n                    let from = columns[1].children.findIndex(item => item.label === value.label);\r\n                    let to = columns[1].children.findIndex(item => item.label === oldVlaue.label);\r\n                    columns[1].children.splice(to, 0, columns[1].children.splice(from, 1)[0]);\r\n                }\r\n            }\r\n        } else if (type === 2) {\r\n            if (columns[1]) {\r\n                columns[1].children.push(value);\r\n            } else {\r\n                columns[1] = {\r\n                    id: \"2\",\r\n                    type: \"column\",\r\n                    children: []\r\n                }\r\n                columns[1].children.push(value);\r\n            }\r\n        }\r\n\r\n        // design.push(columns)\r\n        this.setState({ designData, design })\r\n    }\r\n\r\n    onDropFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {       \r\n   \r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n              \r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.extractedColumnList = [];    \r\n                this.detailedColumnList = [];            \r\n                              \r\n                if (this.props.Login.masterData && this.props.Login.masterData.DynamicMasterDesign &&\r\n                    this.props.Login.masterData.DynamicMasterDesign.screendesign)\r\n                {\r\n                    this.props.Login.masterData.DynamicMasterDesign.screendesign.griditem.map(row => {\r\n                       // console.log(\"data:\", row);\r\n                        this.extractedColumnList.push({\"idsName\":row[\"1\"][this.props.Login.userInfo.slanguagetypecode], \"dataField\":row[\"2\"]}) ;                     \r\n                    })\r\n                    this.props.Login.masterData.DynamicMasterDesign.screendesign.gridmoreitem.map(row => {\r\n                        this.detailedColumnList.push({\"idsName\":row[\"1\"][this.props.Login.userInfo.slanguagetypecode], \"dataField\":row[\"2\"]}) ;                     \r\n                    })\r\n                }\r\n\r\n                let data = [];\r\n                const withoutCombocomponent = [];\r\n                const mandatoryFields = [];\r\n                const Layout = (this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.slideoutdesign ) || [];\r\n                Layout.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\") ){\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        data.push(componentrow)\r\n                                    } else {\r\n                                        withoutCombocomponent.push(componentrow)\r\n                                    }\r\n                                    if (componentrow.mandatory === true){\r\n                                        if (componentrow.inputtype === \"email\") {\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                        } \r\n                                        else {\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                })\r\n                            }\r\n                            else\r\n                            {\r\n                                component.inputtype === \"combo\" ? \r\n                                    data.push(component) \r\n                                : withoutCombocomponent.push(component)\r\n\r\n                                if (component.mandatory === true){\r\n                                    if (component.inputtype === \"email\") {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true, \"idsName\": component.label,\r\n                                            \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        })\r\n                                    } \r\n                                    else {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label,\r\n                                            \"dataField\": component.label,\r\n                                            \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": component.inputtype === \"combo\" ?\r\n                                                \"selectbox\" : \"textbox\"\r\n                                        })\r\n                                    }\r\n                                }\r\n                            }   \r\n                        })\r\n                    })\r\n                })\r\n                const comboComponents = data;\r\n                let childColumnList = {};\r\n                data.map(columnList => {\r\n                    const val = this.comboChild(data, columnList, childColumnList, true);\r\n                    data = val.data;\r\n                    childColumnList = val.childColumnList\r\n                })\r\n\r\n                const masterData =  this.props.Login.masterData.DynamicMasterData ? sortData(this.props.Login.masterData.DynamicMasterData, \"descending\",\"ndynamicmastercode\") : [];\r\n\r\n               this.setState({ withoutCombocomponent, comboComponents, childColumnList,designData : data,mandatoryFields,\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData.DynamicMasterData || [],\r\n                    dataResult: process(masterData || [], this.state.dataState),\r\n                });\r\n            }\r\n            else {        \r\n                let {dataState}=this.state;\r\n                if(this.props.Login.dataState === undefined){\r\n                    dataState={skip:0,take:this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n                }  \r\n            \r\n                const masterData =  this.props.Login.masterData.DynamicMasterData ? sortData(this.props.Login.masterData.DynamicMasterData, \"descending\",\"ndynamicmastercode\") : [];\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData.DynamicMasterData || [], selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(masterData ||[],dataState),\r\n                    dataState//, comboComponents, withoutCombocomponent\r\n                });               \r\n            }  \r\n        }     \r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });          \r\n        }        \r\n    }\r\n\r\n    onInputOnChange = (event, value) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n      \r\n        if (event.target.type === 'toggle') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else if (event.target.type === 'numeric') {\r\n            if (/\\D/.test(event.target.value))\r\n                selectedRecord[event.target.name] = event.target.value;\r\n        } else if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = value;\r\n        } else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = value\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    //deleteRecord = (selectedRecord, operation, ncontrolCode) => {\r\n    deleteRecord = (deleteParam) =>{\r\n        const inputParam = {\r\n            classUrl: \"dynamicmaster\",\r\n            methodUrl: \"DynamicMaster\",\r\n            displayName: this.props.Login.displayName,\r\n            inputData: {\r\n                [\"dynamicmaster\"]: {\"ndynamicmastercode\":deleteParam.selectedRecord.ndynamicmastercode},//.dataItem,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation:\"delete\",\r\n            dataState:this.state.dataState\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.Login.displayName,\r\n                    operation:\"delete\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.inputParam.displayName\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        //add / edit  \r\n\r\n        let inputData = [];\r\n        let dataState =undefined;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"masterdateconstraints\"] =  this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdateconstraints;\r\n        inputData[\"masterdatefields\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.masterdatefields;\r\n        inputData[\"mastercombinationunique\"] = this.props.Login.masterData.DynamicMasterDesign.screendesign.mastercombinationunique;\r\n        let selectedId = null;\r\n        let operation = \"\";\r\n        let selectedRecord = this.state.selectedRecord;\r\n        if (this.props.Login.operation === \"update\") {    // edit\r\n            dataState=this.state.dataState\r\n            inputData[\"dynamicmaster\"] = {ndynamicmastercode:this.state.selectedRecord[\"ndynamicmastercode\"]};//this.state.selectedRecord;\r\n            inputData[\"dynamicmaster\"][\"jsondata\"] = {}; \r\n            inputData[\"dynamicmaster\"][\"jsonuidata\"] = {}; \r\n            selectedId = this.props.Login.selectedId; \r\n            operation = \"update\";\r\n        }\r\n        else {\r\n            //add                          \r\n            inputData[\"dynamicmaster\"] = { //\"nsitecode\": this.props.Login.userInfo.nmastersitecode, \r\n                                            nformcode:this.props.Login.userInfo.nformcode, \r\n                                            ndesigntemplatemappingcode:this.props.Login.masterData.DynamicMasterDesign.ndesigntemplatemappingcode, \r\n                                            jsondata:{}, jsonuidata:{} };\r\n\r\n           operation = \"create\";\r\n           \r\n        }\r\n\r\n        const dateList = [];\r\n        const defaulttimezone = this.props.Login.defaulttimezone;\r\n        const userInfo = this.props.Login.userInfo;\r\n\r\n        this.props.Login.masterData.DynamicMasterDesign &&\r\n            this.props.Login.masterData.DynamicMasterDesign.slideoutdesign.map(row => {\r\n                row.children.map(column => {\r\n                    column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                          \r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ?\r\n                                        { value: selectedRecord[componentrow.label].value,\r\n                                          label: selectedRecord[componentrow.label].label,\r\n                                          pkey: selectedRecord[componentrow.label].item.pkey,\r\n                                          nquerybuildertablecode: selectedRecord[componentrow.label].item.nquerybuildertablecode,\r\n                                          source: selectedRecord[componentrow.label].item.source  } : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label].label : \"\"\r\n                                    \r\n                                }\r\n                                else if (componentrow.inputtype === \"date\") {\r\n                                    if (componentrow.mandatory) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedRecord[componentrow.label], false)\r\n                                        \r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                        //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                    } \r\n                                    else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                             formatDate(selectedRecord[componentrow.label] || new Date(), false):\r\n                                            selectedRecord[componentrow.label] ? formatDate(selectedRecord[componentrow.label], false)\r\n                                            : \"\";\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] =  inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label];\r\n                                        //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                    }\r\n                                    if (componentrow.timezone) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                                            { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] =  inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`]\r\n                                    }\r\n                                    dateList.push(componentrow.label)\r\n                                }\r\n\r\n                                else {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ?\r\n                                        selectedRecord[componentrow.label] : \"\"\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                        // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n\r\n                                }\r\n                                return inputData[\"dynamicmaster\"];\r\n                            })\r\n                         }\r\n                        else {\r\n                            if (component.inputtype === \"combo\") {\r\n                                inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedRecord[component.label] ?\r\n                                    { value: selectedRecord[component.label].value, \r\n                                      label: selectedRecord[component.label].label,\r\n                                      pkey: selectedRecord[component.label].item.pkey,\r\n                                      nquerybuildertablecode: selectedRecord[component.label].item.nquerybuildertablecode,\r\n                                      source: selectedRecord[component.label].item.source  } : -1\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label;\r\n                                    //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\r\n                            }\r\n                            else if (component.inputtype === \"date\") {\r\n                                if (component.mandatory) {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedRecord[component.label] , false);\r\n                                        // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                        // selectedRecord[component.label] : new Date(), userInfo);\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] =  inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                    //convertDateTimetoString(selectedRecord[component.label], userInfo);\r\n                                       \r\n                                } else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                                                //convertDateTimetoString(selectedRecord[component.label] ?                                      \r\n                                                                //    selectedRecord[component.label] : new Date(), userInfo) :\r\n                                                                formatDate(selectedRecord[component.label] || new Date(), false) :\r\n                                                                selectedRecord[component.label] ? \r\n                                                            // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                                                //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\r\n                                                                    formatDate(selectedRecord[component.label] , false) :\"\";\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo)\r\n                                      \r\n                                }\r\n                                if (component.timezone) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ?\r\n                                                            { value: selectedRecord[`tz${component.label}`].value, label: selectedRecord[`tz${component.label}`].label } :\r\n                                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] =  inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`]\r\n                                }\r\n                                dateList.push(component.label)\r\n                            }\r\n                            else {\r\n                                inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedRecord[component.label] ?\r\n                                    selectedRecord[component.label] : \"\"\r\n\r\n                                inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                            }\r\n                        }\r\n                        return inputData[\"dynamicmaster\"];\r\n                    }\r\n                    )\r\n                    return inputData[\"dynamicmaster\"];\r\n                })\r\n                return inputData[\"dynamicmaster\"];\r\n            })\r\n\r\n\r\n        inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\r\n        inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\r\n        inputData[\"masterdatelist\"] = dateList;       \r\n        \r\n        const inputParam = {\r\n            classUrl: \"dynamicmaster\",\r\n            methodUrl: \"DynamicMaster\",\r\n            displayName: this.props.Login.displayName,\r\n            inputData: inputData, operation:operation,\r\n            saveType, formRef,  selectedId,dataState\r\n\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.Login.displayName,\r\n                    operation: \"create\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster, updateStore, validateEsignCredential, \r\n    getChildValues, getEditDynamicMasterCombo,//fetchRecord,\r\n    getDynamicMasterCombo})(injectIntl(DynamicMaster));\r\n"]},"metadata":{},"sourceType":"module"}