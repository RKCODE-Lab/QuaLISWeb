{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\configurationmaster\\\\plantportalregistrationmapping\\\\PlantPortalRegistrationMapping.jsx\";\nimport React from 'react';\nimport { ListWrapper } from '../../../components/client-group.styles';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { callService, crudMaster, getPortalRegistrationType, fetchinstituiondeptTypeById, updateStore, validateEsignCredential, getPlant, getActivePortalRegistrationType } from '../../../actions';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport DataGrid from '../../../components/data-grid/data-grid.component';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport { showEsign, getControlMap } from '../../../components/CommonScript';\nimport Esign from '../../audittrail/Esign';\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\nimport FormMultiSelect from '../../../components/form-multi-select/form-multi-select.component';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PlantPortalRegistrationMapping extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      let selectedId = null;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      inputData[\"plantportalregistrationmapping\"] = {};\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        inputData[\"plantportalregistrationmapping\"] = {\n          \"nportalregtypecode\": this.state.selectedRecord.nportalregtypecode.value,\n          \"ndeptcode\": this.state.selectedRecord.ndeptcode.value,\n          \"nportalregmappingcode\": this.props.Login.SelectedPortalRegistrationType.nportalregmappingcode\n        };\n      } else {\n        inputData[\"plantportalregistrationmapping\"] = {};\n        let plantportalregistrationmapping = [];\n        plantportalregistrationmapping = this.state.selectedRecord.ndeptcode.map(item => {\n          let map = {};\n          map[\"nportalregtypecode\"] = this.state.selectedRecord.nportalregtypecode.value;\n          map[\"ndeptcode\"] = item.value;\n          return map;\n        });\n        inputData['plantportalregistrationmapping'] = plantportalregistrationmapping;\n      }\n\n      const inputParam = {\n        methodUrl: \"PlantPortalRegistrationMapping\",\n        classUrl: \"plantportalregistrationmapping\",\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState,\n        selectedId,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: 'plantportalregistrationmapping',\n        dataState: this.state.dataState,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: {\n          'plantportalregistrationmapping': deleteParam.selectedRecord,\n          //.dataItem,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: deleteParam.operation,\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n\n      if (fieldName === \"nportalregtypecode\") {\n        this.props.getPlant({\n          inputData: {\n            userinfo: this.props.Login.userInfo,\n            nportalregtypecode: selectedRecord.nportalregtypecode && selectedRecord.nportalregtypecode.value,\n            SelectedPortalRegistrationType: selectedRecord.nportalregtypecode\n          }\n        });\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.handleClose = this.handleClose.bind(this);\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      dataResult: [],\n      dataState: _dataState,\n      mandatoryFields: [{\n        \"idsName\": \"IDS_PORTALREGISTRATIONTYPE\",\n        \"dataField\": \"nportalregtypecode\",\n        \"width\": \"150px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PLANT\",\n        \"dataField\": \"ndeptcode\",\n        \"width\": \"150px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }]\n    };\n  }\n\n  //to close side out\n  handleClose() {\n    let loadEsign = this.props.Login.loadEsign;\n    let openModal = this.props.Login.openModal;\n    let selectedRecord = this.props.Login.selectedRecord;\n    let selectedId = this.props.Login.selectedId;\n\n    if (this.props.Login.loadEsign) {\n      if (this.props.Login.operation === \"delete\") {\n        loadEsign = false;\n        openModal = false;\n      } else {\n        loadEsign = false;\n      }\n    } else {\n      openModal = false;\n      selectedRecord = {};\n      selectedId = null;\n    }\n\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        openModal,\n        loadEsign,\n        selectedRecord,\n        selectedId\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"idsName\": \"IDS_PORTALREGISTRATIONTYPE\",\n        \"dataField\": \"sportalregtypename\",\n        \"width\": \"250px\"\n      }, {\n        \"idsName\": \"IDS_PLANT\",\n        \"dataField\": \"sdeptname\",\n        \"width\": \"250px\"\n      }];\n      primaryKeyField = \"nportalregmappingcode\";\n    }\n\n    const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddPlantPortalRegistrationMapping\") && this.state.controlMap.get('AddPlantPortalRegistrationMapping').ncontrolcode;\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"EditPlantPortalRegistrationMapping\") && this.state.controlMap.get('EditPlantPortalRegistrationMapping').ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName,\n      operation: \"update\",\n      primaryKeyField: primaryKeyField,\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName,\n      methodUrl: \"PlantPortalRegistrationMapping\",\n      operation: \"delete\"\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      fetchRecord: this.props.getActivePortalRegistrationType,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      pageable: true,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      gridHeight: '600px',\n      scrollable: \"scrollable\",\n      selectedId: this.props.Login.selectedId,\n      addRecord: () => this.props.getPortalRegistrationType({\n        userInfo: this.props.Login.userInfo,\n        ncontrolCode: addID,\n        operation: \"create\",\n        masterData: this.props.Login.masterData\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: this.props.Login.inputParam.displayName,\n      closeModal: this.handleClose,\n      show: this.props.Login.openModal,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord,\n      mandatoryFields: this.state.mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation ? this.props.Login.operation : '',\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        name: \"nportalregtypecode\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_PORTALREGISTRATIONTYPE\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        value: this.state.selectedRecord && this.state.selectedRecord[\"nportalregtypecode\"] ? this.state.selectedRecord[\"nportalregtypecode\"] || [] : [],\n        options: this.props.Login.portalRegistrationTypeList || [],\n        optionId: \"nportalregtypecode\",\n        optionValue: \"sportalregtypename\",\n        isMandatory: true,\n        closeMenuOnSelect: true,\n        alphabeticalSort: true,\n        isSearchable: true,\n        onChange: event => this.onComboChange(event, \"nportalregtypecode\"),\n        isDisabled: this.props.Login.operation === 'update' ? true : false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 37\n        }\n      })), this.props.Login.operation === 'update' ? /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        name: \"ndeptcode\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_PLANT\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        value: this.state.selectedRecord && this.state.selectedRecord[\"ndeptcode\"] ? this.state.selectedRecord[\"ndeptcode\"] || [] : [],\n        options: this.props.Login.plantList || [],\n        optionId: \"ndeptcode\",\n        optionValue: \"sdeptname\",\n        isMandatory: true,\n        closeMenuOnSelect: true,\n        alphabeticalSort: true,\n        isSearchable: true,\n        onChange: event => this.onComboChange(event, \"ndeptcode\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 41\n        }\n      })) : /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormMultiSelect, {\n        name: \"ndeptcode\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_PLANT\"\n        }),\n        options: this.props.Login.plantList || [],\n        optionId: \"value\",\n        optionValue: \"label\",\n        value: this.state.selectedRecord && this.state.selectedRecord[\"ndeptcode\"] ? this.state.selectedRecord[\"ndeptcode\"] || [] : [],\n        isMandatory: true,\n        disableSearch: false,\n        disabled: false,\n        closeMenuOnSelect: false,\n        alphabeticalSort: true,\n        allItemSelectedLabel: this.props.intl.formatMessage({\n          id: \"IDS_ALLITEMSAREMSELECTED\"\n        }),\n        noOptionsLabel: this.props.intl.formatMessage({\n          id: \"IDS_NOOPTION\"\n        }),\n        searchLabel: this.props.intl.formatMessage({\n          id: \"IDS_SEARCH\"\n        }),\n        selectAllLabel: this.props.intl.formatMessage({\n          id: \"IDS_SELECTALL\"\n        }),\n        onChange: event => this.onComboChange(event, \"ndeptcode\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 41\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.state.dataState.take\n          };\n        }\n\n        if (this.state.dataResult.data) {\n          if (this.state.dataResult.data.length === 1) {\n            let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n            dataState = {\n              skip: skipcount,\n              take: this.state.dataState.take\n            };\n          }\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  getPortalRegistrationType,\n  fetchinstituiondeptTypeById,\n  updateStore,\n  validateEsignCredential,\n  getPlant,\n  getActivePortalRegistrationType\n})(injectIntl(PlantPortalRegistrationMapping));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/configurationmaster/plantportalregistrationmapping/PlantPortalRegistrationMapping.jsx"],"names":["React","ListWrapper","Row","Col","toast","process","connect","injectIntl","callService","crudMaster","getPortalRegistrationType","fetchinstituiondeptTypeById","updateStore","validateEsignCredential","getPlant","getActivePortalRegistrationType","DEFAULT_RETURN","DataGrid","SlideOutModal","showEsign","getControlMap","Esign","FormSelectSearch","FormMultiSelect","mapStateToProps","state","Login","PlantPortalRegistrationMapping","Component","constructor","props","dataStateChange","event","setState","dataResult","masterData","dataState","onSaveClick","saveType","formRef","inputData","selectedId","userInfo","undefined","operation","selectedRecord","nportalregtypecode","value","ndeptcode","SelectedPortalRegistrationType","nportalregmappingcode","plantportalregistrationmapping","map","item","inputParam","methodUrl","classUrl","displayName","userRoleControlRights","nformcode","ncontrolcode","updateInfo","typeName","data","loadEsign","screenData","deleteRecord","deleteParam","ncontrolCode","openModal","screenName","reloadData","userinfo","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","onComboChange","comboData","fieldName","createRef","extractedColumnList","handleClose","bind","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","mandatoryFields","getDerivedStateFromProps","warn","render","primaryKeyField","addID","has","get","editId","editParam","onInputOnChange","intl","formatMessage","id","portalRegistrationTypeList","plantList","componentDidUpdate","previousProps","Object","values","push","length","skipcount"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { ListWrapper } from '../../../components/client-group.styles'\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport {\r\n    callService, crudMaster, getPortalRegistrationType, fetchinstituiondeptTypeById, updateStore,\r\n    validateEsignCredential, getPlant, getActivePortalRegistrationType\r\n} from '../../../actions';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport DataGrid from '../../../components/data-grid/data-grid.component';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport { showEsign, getControlMap } from '../../../components/CommonScript';\r\nimport Esign from '../../audittrail/Esign';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\nimport FormMultiSelect from '../../../components/form-multi-select/form-multi-select.component';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass PlantPortalRegistrationMapping extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.handleClose = this.handleClose.bind(this);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {}, userRoleControlRights: [], controlMap: new Map(),\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            mandatoryFields: [\r\n                { \"idsName\": \"IDS_PORTALREGISTRATIONTYPE\", \"dataField\": \"nportalregtypecode\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_PLANT\", \"dataField\": \"ndeptcode\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            ]\r\n        };\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    //to close side out\r\n    handleClose() {\r\n\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId = null;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    };\r\n\r\n    //to open side out\r\n\r\n    //to perform save action for both add and edit\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let selectedId = null;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        inputData[\"plantportalregistrationmapping\"] = {};\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            inputData[\"plantportalregistrationmapping\"] = {\r\n                \"nportalregtypecode\": this.state.selectedRecord.nportalregtypecode.value,\r\n                \"ndeptcode\": this.state.selectedRecord.ndeptcode.value,\r\n                \"nportalregmappingcode\": this.props.Login.SelectedPortalRegistrationType.nportalregmappingcode\r\n            }\r\n        }\r\n        else {\r\n            inputData[\"plantportalregistrationmapping\"] = {};\r\n\r\n            let plantportalregistrationmapping = []\r\n            plantportalregistrationmapping = this.state.selectedRecord.ndeptcode.map(item => {\r\n                let map = {}\r\n                map[\"nportalregtypecode\"] = this.state.selectedRecord.nportalregtypecode.value;\r\n                map[\"ndeptcode\"] = item.value\r\n                return map;\r\n            });\r\n            inputData['plantportalregistrationmapping'] = plantportalregistrationmapping;\r\n\r\n        }\r\n        const inputParam = {\r\n            methodUrl: \"PlantPortalRegistrationMapping\",\r\n            classUrl: \"plantportalregistrationmapping\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, dataState, selectedId,\r\n            selectedRecord: { ...this.state.selectedRecord }\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n    //to delete a recoed\r\n    deleteRecord = (deleteParam) => {\r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: 'plantportalregistrationmapping',\r\n            dataState: this.state.dataState,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            inputData: {\r\n                'plantportalregistrationmapping': deleteParam.selectedRecord,//.dataItem,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: deleteParam.operation,\r\n            selectedRecord: { ...this.state.selectedRecord }\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, operation: deleteParam.operation, openModal: true,\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n    //to reload data\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n        if (this.props.Login.inputParam !== undefined) {\r\n            this.extractedColumnList = [\r\n                { \"idsName\": \"IDS_PORTALREGISTRATIONTYPE\", \"dataField\": \"sportalregtypename\", \"width\": \"250px\" },\r\n                { \"idsName\": \"IDS_PLANT\", \"dataField\": \"sdeptname\", \"width\": \"250px\" },\r\n            ]\r\n            primaryKeyField = \"nportalregmappingcode\";\r\n        }\r\n\r\n        const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddPlantPortalRegistrationMapping\")\r\n            && this.state.controlMap.get('AddPlantPortalRegistrationMapping').ncontrolcode;\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"EditPlantPortalRegistrationMapping\")\r\n            && this.state.controlMap.get('EditPlantPortalRegistrationMapping').ncontrolcode;\r\n        const editParam = {\r\n            screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName, operation: \"update\", primaryKeyField: primaryKeyField,\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, ncontrolCode: editId\r\n        };\r\n\r\n        const deleteParam = {\r\n            screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName,\r\n            methodUrl: \"PlantPortalRegistrationMapping\", operation: \"delete\"\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    fetchRecord={this.props.getActivePortalRegistrationType}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    reloadData={this.reloadData}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    editParam={editParam}\r\n                                    deleteParam={deleteParam}\r\n                                    pageable={true}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    gridHeight={'600px'}\r\n                                    scrollable={\"scrollable\"}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    addRecord={() => this.props.getPortalRegistrationType({ userInfo: this.props.Login.userInfo, ncontrolCode: addID, operation: \"create\", masterData: this.props.Login.masterData })}\r\n                                />\r\n                                : \"\"}\r\n\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        onSaveClick={this.onSaveClick}\r\n                        operation={this.props.Login.operation}\r\n                        screenName={this.props.Login.inputParam.displayName}\r\n                        closeModal={this.handleClose}\r\n                        show={this.props.Login.openModal}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord}\r\n                        mandatoryFields={this.state.mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation ? this.props.Login.operation : ''}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <FormSelectSearch\r\n                                        name={\"nportalregtypecode\"}\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_PORTALREGISTRATIONTYPE\" })}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                        value={this.state.selectedRecord && this.state.selectedRecord[\"nportalregtypecode\"] ? this.state.selectedRecord[\"nportalregtypecode\"] || [] : []}\r\n                                        options={this.props.Login.portalRegistrationTypeList || []}\r\n                                        optionId=\"nportalregtypecode\"\r\n                                        optionValue=\"sportalregtypename\"\r\n                                        isMandatory={true}\r\n                                        closeMenuOnSelect={true}\r\n                                        alphabeticalSort={true}\r\n                                        isSearchable={true}\r\n                                        onChange={(event) => this.onComboChange(event, \"nportalregtypecode\")}\r\n                                        isDisabled={this.props.Login.operation==='update'?true:false}\r\n                                    >\r\n                                    </FormSelectSearch>\r\n                                </Col>\r\n\r\n\r\n                                {this.props.Login.operation === 'update' ?\r\n                                    <Col md={12}>\r\n                                        <FormSelectSearch\r\n                                            name={\"ndeptcode\"}\r\n                                            formLabel={this.props.intl.formatMessage({ id: \"IDS_PLANT\" })}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                            value={this.state.selectedRecord && this.state.selectedRecord[\"ndeptcode\"] ? this.state.selectedRecord[\"ndeptcode\"] || [] : []}\r\n                                            options={this.props.Login.plantList || []}\r\n                                            optionId=\"ndeptcode\"\r\n                                            optionValue=\"sdeptname\"\r\n                                            isMandatory={true}\r\n                                            closeMenuOnSelect={true}\r\n                                            alphabeticalSort={true}\r\n                                            isSearchable={true}\r\n                                            onChange={(event) => this.onComboChange(event, \"ndeptcode\")}\r\n                                        >\r\n                                        </FormSelectSearch>\r\n                                    </Col> :\r\n                                    <Col md={12}>\r\n                                        <FormMultiSelect\r\n                                            name={\"ndeptcode\"}\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_PLANT\" })}\r\n                                            options={this.props.Login.plantList || []}\r\n                                            optionId=\"value\"\r\n                                            optionValue=\"label\"\r\n                                            value={this.state.selectedRecord && this.state.selectedRecord[\"ndeptcode\"] ? this.state.selectedRecord[\"ndeptcode\"] || [] : []}\r\n                                            isMandatory={true}\r\n                                            disableSearch={false}\r\n                                            disabled={false}\r\n                                            closeMenuOnSelect={false}\r\n                                            alphabeticalSort={true}\r\n                                            allItemSelectedLabel={this.props.intl.formatMessage({ id: \"IDS_ALLITEMSAREMSELECTED\" })}\r\n                                            noOptionsLabel={this.props.intl.formatMessage({ id: \"IDS_NOOPTION\" })}\r\n                                            searchLabel={this.props.intl.formatMessage({ id: \"IDS_SEARCH\" })}\r\n                                            selectAllLabel={this.props.intl.formatMessage({ id: \"IDS_SELECTALL\" })}\r\n                                            onChange={(event) => this.onComboChange(event, \"ndeptcode\")}\r\n                                        />\r\n                                    </Col>\r\n                                }\r\n                            </Row>\r\n                        } />\r\n                    : \"\"}\r\n            </>\r\n\r\n        );\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState)\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.state.dataState.take }\r\n                }\r\n                if (this.state.dataResult.data) {\r\n                    if (this.state.dataResult.data.length === 1) {\r\n                        let skipcount = this.state.dataState.skip > 0 ? (this.state.dataState.skip - this.state.dataState.take) :\r\n                            this.state.dataState.skip\r\n                        dataState = { skip: skipcount, take: this.state.dataState.take }\r\n                    }\r\n                }\r\n                this.setState({\r\n                    data: this.props.Login.masterData, selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        if (fieldName === \"nportalregtypecode\") {\r\n            this.props.getPlant({\r\n                inputData: {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nportalregtypecode: selectedRecord.nportalregtypecode && selectedRecord.nportalregtypecode.value,\r\n                    SelectedPortalRegistrationType: selectedRecord.nportalregtypecode\r\n                }\r\n            });\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, getPortalRegistrationType, fetchinstituiondeptTypeById,\r\n    updateStore, validateEsignCredential, getPlant, getActivePortalRegistrationType\r\n})(injectIntl(PlantPortalRegistrationMapping));\r\n\r\n"]},"metadata":{},"sourceType":"module"}