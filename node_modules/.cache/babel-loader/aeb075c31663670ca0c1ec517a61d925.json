{"ast":null,"code":"'use strict';\n\nvar _ = require('underscore');\n\nvar dialectsHash = {\n  base: require('./dialects/base'),\n  mssql: require('./dialects/mssql'),\n  postgresql: require('./dialects/postgresql'),\n  sqlite: require('./dialects/sqlite'),\n  mysql: require('./dialects/mysql')\n};\n\nvar Builder = module.exports = function (options) {\n  this.configure(options);\n};\n\nBuilder.prototype._reset = function () {\n  if (this.options.separatedValues) {\n    this._placeholderId = 1;\n    this._values = this.options.namedValues ? {} : [];\n  } else {\n    delete this._placeholderId;\n    delete this._values;\n  }\n\n  this._query = '';\n};\n\nBuilder.prototype._getPlaceholder = function () {\n  var placeholder = '';\n  if (this.options.namedValues) placeholder += 'p';\n  if (this.options.indexedValues) placeholder += this._placeholderId++;\n  return placeholder;\n};\n\nBuilder.prototype._wrapPlaceholder = function (name) {\n  return this.options.valuesPrefix + name;\n};\n\nBuilder.prototype._pushValue = function (value) {\n  if (_.isUndefined(value) || _.isNull(value)) {\n    return 'null';\n  } else if (_.isNumber(value) || _.isBoolean(value)) {\n    return String(value);\n  } else if (_.isString(value) || _.isDate(value)) {\n    if (this.options.separatedValues) {\n      var placeholder = this._getPlaceholder();\n\n      if (this.options.namedValues) {\n        this._values[placeholder] = value;\n      } else {\n        this._values.push(value);\n      }\n\n      return this._wrapPlaceholder(placeholder);\n    } else {\n      if (_.isDate(value)) value = value.toISOString();\n      return '\\'' + value + '\\'';\n    }\n  } else {\n    throw new Error('Wrong value type \"' + typeof value + '\"');\n  }\n};\n\nBuilder.prototype.configure = function (options) {\n  options = _.defaults({}, options, {\n    separatedValues: true,\n    namedValues: true,\n    valuesPrefix: '$',\n    dialect: 'base',\n    wrappedIdentifiers: true,\n    indexedValues: true\n  });\n\n  if (options.namedValues && !options.indexedValues) {\n    throw new Error('Option `indexedValues`: false is ' + 'not allowed together with option `namedValues`: true');\n  }\n\n  this.options = options;\n  this.setDialect(this.options.dialect);\n\n  this._reset();\n};\n\nBuilder.prototype.build = function (params) {\n  var builder = this;\n\n  this._reset();\n\n  this._query = this.dialect.buildTemplate('query', {\n    queryBody: params\n  }) + ';';\n\n  if (this.options.separatedValues) {\n    return {\n      query: this._query,\n      values: this._values,\n      prefixValues: function prefixValues() {\n        var values = {};\n\n        _(this.getValuesObject()).each(function (value, name) {\n          values[builder._wrapPlaceholder(name)] = value;\n        });\n\n        return values;\n      },\n      getValuesArray: function getValuesArray() {\n        return _.isArray(this.values) ? this.values : _(this.values).values();\n      },\n      getValuesObject: function getValuesObject() {\n        return _.isArray(this.values) ? _(_.range(1, this.values.length + 1)).object(this.values) : this.values;\n      }\n    };\n  } else {\n    return {\n      query: this._query\n    };\n  }\n};\n\nBuilder.prototype.setDialect = function (name) {\n  if (!dialectsHash[name]) {\n    throw new Error('Unknown dialect \"' + name + '\"');\n  }\n\n  this.dialect = new dialectsHash[name](this);\n};","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/node_modules/json-sql/lib/builder.js"],"names":["_","require","dialectsHash","base","mssql","postgresql","sqlite","mysql","Builder","module","exports","options","configure","prototype","_reset","separatedValues","_placeholderId","_values","namedValues","_query","_getPlaceholder","placeholder","indexedValues","_wrapPlaceholder","name","valuesPrefix","_pushValue","value","isUndefined","isNull","isNumber","isBoolean","String","isString","isDate","push","toISOString","Error","defaults","dialect","wrappedIdentifiers","setDialect","build","params","builder","buildTemplate","queryBody","query","values","prefixValues","getValuesObject","each","getValuesArray","isArray","range","length","object"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('underscore');\n\nvar dialectsHash = {\n\tbase: require('./dialects/base'),\n\tmssql: require('./dialects/mssql'),\n\tpostgresql: require('./dialects/postgresql'),\n\tsqlite: require('./dialects/sqlite'),\n\tmysql: require('./dialects/mysql')\n};\n\nvar Builder = module.exports = function(options) {\n\tthis.configure(options);\n};\n\nBuilder.prototype._reset = function() {\n\tif (this.options.separatedValues) {\n\t\tthis._placeholderId = 1;\n\t\tthis._values = this.options.namedValues ? {} : [];\n\t} else {\n\t\tdelete this._placeholderId;\n\t\tdelete this._values;\n\t}\n\n\tthis._query = '';\n};\n\nBuilder.prototype._getPlaceholder = function () {\n\tvar placeholder = '';\n\tif (this.options.namedValues) placeholder += 'p';\n\tif (this.options.indexedValues) placeholder += this._placeholderId++;\n\treturn placeholder;\n};\n\nBuilder.prototype._wrapPlaceholder = function(name) {\n\treturn this.options.valuesPrefix + name;\n};\n\nBuilder.prototype._pushValue = function(value) {\n\tif (_.isUndefined(value) || _.isNull(value)) {\n\t\treturn 'null';\n\t} else if (_.isNumber(value) || _.isBoolean(value)) {\n\t\treturn String(value);\n\t} else if (_.isString(value) || _.isDate(value)) {\n\t\tif (this.options.separatedValues) {\n\t\t\tvar placeholder = this._getPlaceholder();\n\n\t\t\tif (this.options.namedValues) {\n\t\t\t\tthis._values[placeholder] = value;\n\t\t\t} else {\n\t\t\t\tthis._values.push(value);\n\t\t\t}\n\n\t\t\treturn this._wrapPlaceholder(placeholder);\n\t\t} else {\n\t\t\tif (_.isDate(value)) value = value.toISOString();\n\n\t\t\treturn '\\'' + value + '\\'';\n\t\t}\n\t} else {\n\t\tthrow new Error('Wrong value type \"' + (typeof value) + '\"');\n\t}\n};\n\nBuilder.prototype.configure = function(options) {\n\toptions = _.defaults({}, options, {\n\t\tseparatedValues: true,\n\t\tnamedValues: true,\n\t\tvaluesPrefix: '$',\n\t\tdialect: 'base',\n\t\twrappedIdentifiers: true,\n\t\tindexedValues: true\n\t});\n\n\tif (options.namedValues && !options.indexedValues) {\n\t\tthrow new Error(\n\t\t\t'Option `indexedValues`: false is ' +\n\t\t\t'not allowed together with option `namedValues`: true'\n\t\t);\n\t}\n\n\tthis.options = options;\n\n\tthis.setDialect(this.options.dialect);\n\n\tthis._reset();\n};\n\nBuilder.prototype.build = function(params) {\n\tvar builder = this;\n\n\tthis._reset();\n\n\tthis._query = this.dialect.buildTemplate('query', {queryBody: params}) + ';';\n\n\tif (this.options.separatedValues) {\n\t\treturn {\n\t\t\tquery: this._query,\n\t\t\tvalues: this._values,\n\t\t\tprefixValues: function() {\n\t\t\t\tvar values = {};\n\t\t\t\t_(this.getValuesObject()).each(function(value, name) {\n\t\t\t\t\tvalues[builder._wrapPlaceholder(name)] = value;\n\t\t\t\t});\n\t\t\t\treturn values;\n\t\t\t},\n\t\t\tgetValuesArray: function() {\n\t\t\t\treturn _.isArray(this.values) ? this.values : _(this.values).values();\n\t\t\t},\n\t\t\tgetValuesObject: function() {\n\t\t\t\treturn _.isArray(this.values) ? _(_.range(1, this.values.length + 1)).object(this.values) :\n\t\t\t\t\tthis.values;\n\t\t\t}\n\t\t};\n\t} else {\n\t\treturn {query: this._query};\n\t}\n};\n\nBuilder.prototype.setDialect = function(name) {\n\tif (!dialectsHash[name]) {\n\t\tthrow new Error('Unknown dialect \"' + name + '\"');\n\t}\n\n\tthis.dialect = new (dialectsHash[name])(this);\n};\n"]},"metadata":{},"sourceType":"script"}