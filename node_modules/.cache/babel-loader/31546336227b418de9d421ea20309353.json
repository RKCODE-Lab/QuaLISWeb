{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5294\\\\QuaLISWeb\\\\src\\\\pages\\\\release\\\\ReleaseTestComment.jsx\";\nimport React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { updateStore } from '../../actions';\nimport { connect } from 'react-redux';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { process } from '@progress/kendo-data-query';\nimport rsapi from '../../rsapi';\nimport { toast } from 'react-toastify';\nimport { constructOptionList } from \"../../components/CommonScript\";\nimport Axios from \"axios\";\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\n\nclass ReleaseTestComment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getSampleDetails = (event, ncontrolCode, operation) => {\n      const url = \"release/getActiveReleaseTestCommentById\";\n      let masterData = this.props.masterData;\n      const isInitialRender = true;\n\n      if (this.props.masterData.selectedReleaseHistory[0].ntransactionstatus !== transactionStatus.RELEASED && this.props.masterData.selectedReleaseHistory[0].ntransactionstatus !== transactionStatus.PRELIMINARYRELEASE) {\n        if (operation === \"update\") {\n          let urlArray = [];\n          urlArray.push(rsapi.post(url, {\n            \"ncoaparentcode\": event.editRow.ncoaparentcode,\n            \"npreregno\": event.editRow.npreregno,\n            \"ntransactionsamplecode\": event.editRow.ntransactionsamplecode,\n            \"ntransactiontestcode\": event.editRow.ntransactiontestcode,\n            \"nreleasetestcommentcode\": event.editRow.nreleasetestcommentcode,\n            \"userinfo\": this.props.userInfo\n          }));\n          urlArray.push(rsapi.post(\"/comments/getSampleTestCommentsListById\", {\n            userinfo: this.props.userInfo,\n            ncommentsubtypecode: event.editRow && event.editRow.ncommentsubtypecode && event.editRow.ncommentsubtypecode\n          }));\n          Axios.all(urlArray).then(response => {\n            let responseData = response[0].data;\n            const lstSampleTestComments = constructOptionList(response[1].data.SampleTestComments || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, true);\n            const SampleTestComments = lstSampleTestComments.get(\"OptionList\");\n\n            if (responseData.ntransactionstatus !== transactionStatus.RELEASED && responseData.ntransactionstatus !== transactionStatus.PRELIMINARYRELEASE) {\n              let selectedReleaseTestComment = event.editRow;\n              let nneedreport = responseData && responseData.nneedreport ? responseData.nneedreport : transactionStatus.NO;\n              let scomments = responseData && responseData.scomments ? responseData.scomments : \"\";\n              let npreregno;\n              let ntransactionsamplecode;\n              let ntransactiontestcode;\n              let sarno;\n              let ssamplearno;\n              let stestsynonym;\n              masterData.RegistrationArno.map(item => {\n                if (item.value === responseData.npreregno) {\n                  npreregno = item;\n                  sarno = item.label;\n                }\n              });\n              masterData.RegistrationSampleArno.map(item => {\n                if (item.value === responseData.ntransactionsamplecode) {\n                  ntransactionsamplecode = item;\n                  ssamplearno = item.label;\n                }\n              });\n              masterData.RegistrationTest.map(item => {\n                if (item.value === responseData.ntransactiontestcode) {\n                  ntransactiontestcode = item;\n                  stestsynonym = item.label;\n                }\n              });\n              let selectedRecord = { ...this.state.selectedRecord,\n                npreregno,\n                ntransactionsamplecode,\n                ntransactiontestcode,\n                sarno,\n                ssamplearno,\n                stestsynonym,\n                nneedreport,\n                scomments,\n                selectedReleaseTestComment\n              };\n              selectedRecord[\"scommentsubtype\"] = responseData.scommentsubtype;\n              selectedRecord[\"ncommentsubtypecode\"] = {\n                label: responseData.scommentsubtype,\n                value: responseData.ncommentsubtypecode\n              };\n              selectedRecord[\"spredefinedname\"] = responseData.spredefinedname;\n              selectedRecord[\"nsampletestcommentscode\"] = {\n                label: responseData.spredefinedname,\n                value: responseData.nsampletestcommentscode\n              };\n              masterData[\"selectedRecord\"] = selectedRecord;\n              let screenName = \"IDS_EDITRELEASETESTCOMMENT\";\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  isReleaseTestComment: false,\n                  isAddReleaseTestComment: true,\n                  masterData,\n                  operation,\n                  selectedRecord,\n                  screenName,\n                  ncontrolCode,\n                  isInitialRender,\n                  SampleTestComments\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_SELECTDRAFTCORRECTEDRECORD\"\n              }));\n            }\n          }).catch(error => {\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n\n            this.setState({\n              loading: false\n            });\n          });\n        } else {\n          let screenName = \"IDS_ADDRELEASETESTCOMMENT\";\n          let RegistrationArno = this.props.masterData.RegistrationArno;\n          let commentSubType = this.props.CommentSubType;\n          let SampleTestComments = this.props.SampleTestComments;\n          let selectedRecord = {\n            RegistrationArno: RegistrationArno,\n            ReleaseTestCommentDetails: this.props.masterData.ReleaseTestCommentDetails,\n            nneedreport: transactionStatus.NO,\n            ncommentsubtypecode: commentSubType && commentSubType[0],\n            scommentsubtype: commentSubType && commentSubType[0] && commentSubType[0].label,\n            //ALPD-4948 Passed sampletestcomments and predefined details when open add test comment slideout\n            nsampletestcommentscode: SampleTestComments && SampleTestComments[0],\n            spredefinedname: SampleTestComments && SampleTestComments[0] && SampleTestComments[0].label\n          };\n          masterData[\"selectedRecord\"] = selectedRecord;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              isReleaseTestComment: false,\n              isAddReleaseTestComment: true,\n              masterData,\n              operation,\n              selectedRecord,\n              screenName,\n              ncontrolCode,\n              isInitialRender\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTCORRECTEDRECORD\"\n        }));\n      }\n    };\n\n    const dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      loading: false,\n      ReleaseTestCommentDetails: this.props.ReleaseTestCommentDetails,\n      dataState: dataState,\n      openModal: false,\n      inputParam: this.props.inputParam,\n      loadEsign: false,\n      operation: \"\",\n      selectedRecord: {},\n      isneedReport: this.props.isneedReport\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.ReleaseTestCommentDetails !== prevProps.ReleaseTestCommentDetails) {\n      this.setState({\n        ReleaseTestCommentDetails: this.props.ReleaseTestCommentDetails\n      });\n    }\n\n    if (this.props.inputParam !== prevProps.inputParam) {\n      this.setState({\n        inputParam: this.props.inputParam\n      });\n    }\n  }\n\n  render() {\n    const addReleaseTestComment = this.props.controlMap.has(\"AddReleaseTestComment\") && this.props.controlMap.get(\"AddReleaseTestComment\").ncontrolcode;\n    const editReleaseTestComment = this.props.controlMap.has(\"EditReleaseTestComment\") && this.props.controlMap.get(\"EditReleaseTestComment\").ncontrolcode;\n    const editReleaseTestCommentParam = {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_RELEASETESTCOMMENT\"\n      }),\n      operation: \"update\",\n      primaryKeyField: \"nreleasetestcommentcode\",\n      inputParam: this.state.inputParam,\n      userInfo: this.props.userInfo,\n      ncontrolCode: editReleaseTestComment\n    };\n    this.fieldsForReleasedTestCommentGrid = [{\n      \"idsName\": \"IDS_ARNO\",\n      \"dataField\": \"sarno\",\n      \"width\": \"200px\"\n    }];\n    {\n      this.props.masterData.realRegSubTypeValue && this.props.masterData.realRegSubTypeValue.nneedsubsample && this.fieldsForReleasedTestCommentGrid.push({\n        \"idsName\": \"IDS_SAMPLEARNO\",\n        \"dataField\": \"ssamplearno\",\n        \"width\": \"200px\"\n      });\n    }\n    this.fieldsForReleasedTestCommentGrid.push({\n      \"idsName\": \"IDS_TESTSYNONYM\",\n      \"dataField\": \"stestsynonym\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SCREENNAME\",\n      \"dataField\": \"sformname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_COMMENTNAME\",\n      \"dataField\": \"scommentsubtype\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ABBREVIATIONNAME\",\n      \"dataField\": \"spredefinedname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_INCULDEINREPORT\",\n      \"dataField\": \"sneedreport\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_USERROLENAME\",\n      \"dataField\": \"suserrolename\",\n      \"width\": \"200px\"\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nreleasetestcommentcode\",\n      data: this.state.ReleaseTestCommentDetails || [],\n      dataResult: process(this.state.ReleaseTestCommentDetails && this.state.ReleaseTestCommentDetails || [], this.props.dataState),\n      dataState: this.props.dataState,\n      isExportExcelRequired: false,\n      controlMap: this.props.controlMap,\n      userRoleControlRights: this.props.userRoleControlRights,\n      userInfo: this.props.userInfo,\n      editParam: editReleaseTestCommentParam,\n      extractedColumnList: this.fieldsForReleasedTestCommentGrid,\n      pageable: true,\n      dataStateChange: this.props.dataStateChange,\n      scrollable: 'scrollable',\n      gridHeight: '630px',\n      isActionRequired: true,\n      addRecord: event => this.getSampleDetails(event, addReleaseTestComment, \"create\"),\n      isToolBarRequired: true,\n      methodUrl: 'ReleaseTestComment',\n      isAddRequired: this.props.isAddRequired,\n      isRefreshRequired: this.props.isRefreshRequired,\n      isImportRequired: this.props.isImportRequired,\n      isDownloadPDFRequired: this.props.isDownloadPDFRequired,\n      isDownloadExcelRequired: this.props.isDownloadExcelRequired,\n      fetchRecord: event => {\n        this.getSampleDetails(event, editReleaseTestComment, \"update\");\n      },\n      deleteRecord: this.props.deleteRecord,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default connect(null, {\n  updateStore\n})(injectIntl(ReleaseTestComment));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/pages/release/ReleaseTestComment.jsx"],"names":["React","Col","Row","injectIntl","transactionStatus","updateStore","connect","DataGrid","process","rsapi","toast","constructOptionList","Axios","DEFAULT_RETURN","ReleaseTestComment","Component","constructor","props","getSampleDetails","event","ncontrolCode","operation","url","masterData","isInitialRender","selectedReleaseHistory","ntransactionstatus","RELEASED","PRELIMINARYRELEASE","urlArray","push","post","editRow","ncoaparentcode","npreregno","ntransactionsamplecode","ntransactiontestcode","nreleasetestcommentcode","userInfo","userinfo","ncommentsubtypecode","all","then","response","responseData","data","lstSampleTestComments","SampleTestComments","get","selectedReleaseTestComment","nneedreport","NO","scomments","sarno","ssamplearno","stestsynonym","RegistrationArno","map","item","value","label","RegistrationSampleArno","RegistrationTest","selectedRecord","state","scommentsubtype","spredefinedname","nsampletestcommentscode","screenName","updateInfo","typeName","isReleaseTestComment","isAddReleaseTestComment","warn","intl","formatMessage","id","catch","error","status","message","setState","loading","commentSubType","CommentSubType","ReleaseTestCommentDetails","dataState","skip","take","settings","parseInt","openModal","inputParam","loadEsign","isneedReport","componentDidUpdate","prevProps","render","addReleaseTestComment","controlMap","has","ncontrolcode","editReleaseTestComment","editReleaseTestCommentParam","primaryKeyField","fieldsForReleasedTestCommentGrid","realRegSubTypeValue","nneedsubsample","userRoleControlRights","dataStateChange","isAddRequired","isRefreshRequired","isImportRequired","isDownloadPDFRequired","isDownloadExcelRequired","deleteRecord"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { updateStore } from '../../actions';\r\nimport { connect } from 'react-redux';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport { constructOptionList } from \"../../components/CommonScript\";\r\nimport Axios from \"axios\";\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\n\r\nclass ReleaseTestComment extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            loading: false,\r\n            ReleaseTestCommentDetails: this.props.ReleaseTestCommentDetails,\r\n            dataState: dataState,\r\n            openModal: false,\r\n            inputParam: this.props.inputParam,\r\n            loadEsign: false,\r\n            operation: \"\",\r\n            selectedRecord: {},\r\n            isneedReport: this.props.isneedReport\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.ReleaseTestCommentDetails !== prevProps.ReleaseTestCommentDetails) {\r\n            this.setState({ ReleaseTestCommentDetails: this.props.ReleaseTestCommentDetails })\r\n        }\r\n        if (this.props.inputParam !== prevProps.inputParam) {\r\n            this.setState({ inputParam: this.props.inputParam })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const addReleaseTestComment =\r\n            this.props.controlMap.has(\"AddReleaseTestComment\") &&\r\n            this.props.controlMap.get(\"AddReleaseTestComment\").ncontrolcode;\r\n\r\n        const editReleaseTestComment =\r\n            this.props.controlMap.has(\"EditReleaseTestComment\") &&\r\n            this.props.controlMap.get(\"EditReleaseTestComment\").ncontrolcode;\r\n\r\n        const editReleaseTestCommentParam = {\r\n            screenName: this.props.intl.formatMessage({ id: \"IDS_RELEASETESTCOMMENT\" }),\r\n            operation: \"update\", primaryKeyField: \"nreleasetestcommentcode\",\r\n            inputParam: this.state.inputParam,\r\n            userInfo: this.props.userInfo,\r\n            ncontrolCode: editReleaseTestComment\r\n        };\r\n\r\n        this.fieldsForReleasedTestCommentGrid = [\r\n            { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"200px\" },\r\n        ];\r\n        {\r\n            this.props.masterData.realRegSubTypeValue && this.props.masterData.realRegSubTypeValue.nneedsubsample &&\r\n                this.fieldsForReleasedTestCommentGrid.push(\r\n                    { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"200px\" }\r\n                )\r\n        }\r\n        this.fieldsForReleasedTestCommentGrid.push(\r\n            { \"idsName\": \"IDS_TESTSYNONYM\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_SCREENNAME\", \"dataField\": \"sformname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_COMMENTNAME\", \"dataField\": \"scommentsubtype\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_ABBREVIATIONNAME\", \"dataField\": \"spredefinedname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_INCULDEINREPORT\", \"dataField\": \"sneedreport\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_USERROLENAME\", \"dataField\": \"suserrolename\", \"width\": \"200px\" }\r\n        )\r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <DataGrid\r\n                            primaryKeyField=\"nreleasetestcommentcode\"\r\n                            data={this.state.ReleaseTestCommentDetails || []}\r\n                            dataResult={process(this.state.ReleaseTestCommentDetails && this.state.ReleaseTestCommentDetails || [], this.props.dataState)}\r\n                            dataState={this.props.dataState}\r\n                            isExportExcelRequired={false}\r\n                            controlMap={this.props.controlMap}\r\n                            userRoleControlRights={this.props.userRoleControlRights}\r\n                            userInfo={this.props.userInfo}\r\n                            editParam={editReleaseTestCommentParam}\r\n                            extractedColumnList={this.fieldsForReleasedTestCommentGrid}\r\n                            pageable={true}\r\n                            dataStateChange={this.props.dataStateChange}\r\n                            scrollable={'scrollable'}\r\n                            gridHeight={'630px'}\r\n                            isActionRequired={true}\r\n                            addRecord={(event) => this.getSampleDetails(event, addReleaseTestComment, \"create\")}\r\n                            isToolBarRequired={true}\r\n                            methodUrl={'ReleaseTestComment'}\r\n                            isAddRequired={this.props.isAddRequired}\r\n                            isRefreshRequired={this.props.isRefreshRequired}\r\n                            isImportRequired={this.props.isImportRequired}\r\n                            isDownloadPDFRequired={this.props.isDownloadPDFRequired}\r\n                            isDownloadExcelRequired={this.props.isDownloadExcelRequired}\r\n                            fetchRecord={(event) => { this.getSampleDetails(event, editReleaseTestComment, \"update\") }}\r\n                            deleteRecord={this.props.deleteRecord}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        );\r\n    };\r\n\r\n    getSampleDetails = (event, ncontrolCode, operation) => {\r\n        const url = \"release/getActiveReleaseTestCommentById\";\r\n        let masterData = this.props.masterData;\r\n        const isInitialRender = true;\r\n        if (this.props.masterData.selectedReleaseHistory[0].ntransactionstatus !== transactionStatus.RELEASED\r\n            && this.props.masterData.selectedReleaseHistory[0].ntransactionstatus !== transactionStatus.PRELIMINARYRELEASE) {\r\n            if (operation === \"update\") {\r\n                let urlArray = [];\r\n                urlArray.push(rsapi.post(url, {\r\n                    \"ncoaparentcode\": event.editRow.ncoaparentcode,\r\n                    \"npreregno\": event.editRow.npreregno,\r\n                    \"ntransactionsamplecode\": event.editRow.ntransactionsamplecode,\r\n                    \"ntransactiontestcode\": event.editRow.ntransactiontestcode,\r\n                    \"nreleasetestcommentcode\": event.editRow.nreleasetestcommentcode,\r\n                    \"userinfo\": this.props.userInfo\r\n                }));\r\n                urlArray.push(\r\n                    rsapi.post(\"/comments/getSampleTestCommentsListById\", {\r\n                        userinfo: this.props.userInfo,\r\n                        ncommentsubtypecode: event.editRow && event.editRow.ncommentsubtypecode && event.editRow.ncommentsubtypecode\r\n                    })\r\n                );\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        let responseData = response[0].data;\r\n                        const lstSampleTestComments = constructOptionList(response[1].data.SampleTestComments || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, true);\r\n                        const SampleTestComments = lstSampleTestComments.get(\"OptionList\");\r\n                        if (responseData.ntransactionstatus !== transactionStatus.RELEASED && responseData.ntransactionstatus !== transactionStatus.PRELIMINARYRELEASE) {\r\n                            let selectedReleaseTestComment = event.editRow;\r\n                            let nneedreport = responseData && responseData.nneedreport ? responseData.nneedreport : transactionStatus.NO;\r\n                            let scomments = responseData && responseData.scomments ? responseData.scomments : \"\";\r\n                            let npreregno;\r\n                            let ntransactionsamplecode;\r\n                            let ntransactiontestcode;\r\n                            let sarno;\r\n                            let ssamplearno;\r\n                            let stestsynonym;\r\n                            masterData.RegistrationArno.map(item => {\r\n                                if (item.value === responseData.npreregno) {\r\n                                    npreregno = item;\r\n                                    sarno = item.label;\r\n                                }\r\n                            });\r\n                            masterData.RegistrationSampleArno.map(item => {\r\n                                if (item.value === responseData.ntransactionsamplecode) {\r\n                                    ntransactionsamplecode = item;\r\n                                    ssamplearno = item.label;\r\n                                }\r\n                            });\r\n                            masterData.RegistrationTest.map(item => {\r\n                                if (item.value === responseData.ntransactiontestcode) {\r\n                                    ntransactiontestcode = item;\r\n                                    stestsynonym = item.label;\r\n                                }\r\n                            });\r\n\r\n                            let selectedRecord = {\r\n                                ...this.state.selectedRecord, npreregno, ntransactionsamplecode, ntransactiontestcode, sarno, ssamplearno, stestsynonym, nneedreport,\r\n                                scomments, selectedReleaseTestComment,\r\n                            };\r\n                            selectedRecord[\"scommentsubtype\"] = responseData.scommentsubtype;\r\n                            selectedRecord[\"ncommentsubtypecode\"] = {\r\n                                label: responseData.scommentsubtype,\r\n                                value: responseData.ncommentsubtypecode\r\n                            };\r\n                            selectedRecord[\"spredefinedname\"] = responseData.spredefinedname;\r\n                            selectedRecord[\"nsampletestcommentscode\"] = {\r\n                                label: responseData.spredefinedname,\r\n                                value: responseData.nsampletestcommentscode\r\n                            };\r\n                            masterData[\"selectedRecord\"] = selectedRecord;\r\n                            let screenName = \"IDS_EDITRELEASETESTCOMMENT\";\r\n                            const updateInfo = {\r\n                                typeName: DEFAULT_RETURN,\r\n                                data: { isReleaseTestComment: false, isAddReleaseTestComment: true, masterData, operation, selectedRecord, screenName, ncontrolCode, isInitialRender, SampleTestComments }\r\n                            }\r\n                            this.props.updateStore(updateInfo);\r\n                        } else {\r\n                            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTCORRECTEDRECORD\" }));\r\n                        }\r\n                    }).catch(error => {\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                        this.setState({\r\n                            loading: false\r\n                        });\r\n                    });\r\n            } else {\r\n                let screenName = \"IDS_ADDRELEASETESTCOMMENT\";\r\n                let RegistrationArno = this.props.masterData.RegistrationArno;\r\n                let commentSubType = this.props.CommentSubType;\r\n                let SampleTestComments = this.props.SampleTestComments;\r\n                let selectedRecord = {\r\n                    RegistrationArno: RegistrationArno,\r\n                    ReleaseTestCommentDetails: this.props.masterData.ReleaseTestCommentDetails,\r\n                    nneedreport: transactionStatus.NO,\r\n                    ncommentsubtypecode: commentSubType && commentSubType[0],\r\n                    scommentsubtype: commentSubType && commentSubType[0] && commentSubType[0].label,\r\n                    //ALPD-4948 Passed sampletestcomments and predefined details when open add test comment slideout\r\n                    nsampletestcommentscode: SampleTestComments && SampleTestComments[0],\r\n                    spredefinedname: SampleTestComments && SampleTestComments[0] && SampleTestComments[0].label\r\n                };\r\n                masterData[\"selectedRecord\"] = selectedRecord;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { isReleaseTestComment: false, isAddReleaseTestComment: true, masterData, operation, selectedRecord, screenName, ncontrolCode, isInitialRender }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTCORRECTEDRECORD\" }));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, { updateStore })(injectIntl(ReleaseTestComment));"]},"metadata":{},"sourceType":"module"}