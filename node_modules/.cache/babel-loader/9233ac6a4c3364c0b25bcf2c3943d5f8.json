{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes'; //import {getComboLabelValue, constructOptionList} from '../components/CommonScript'\n\nimport { sortData, getComboLabelValue, constructOptionList, formatInputDate, rearrangeDateFormat, formatDate } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { parameterType, transactionStatus, operators, attachmentType, FORMULAFIELDTYPE } from \"../components/Enumeration\"; //import { intl } from '../components/App';\n\nexport function getMethodDetail(method, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"method/getMethod\", {\n      nmethodcode: method.nmethodcode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} //export function getMethodComboService (screenName, primaryKeyName, primaryKeyValue, operation, inputParam , userInfo, ncontrolCode) {            \n\nexport function getMethodComboService(methodParam) {\n  return function (dispatch) {\n    const methodCategoryService = rsapi.post(\"methodcategory/getMethodCategory\", {\n      userinfo: methodParam.userInfo\n    });\n    const DateService = rsapi.post(\"/timezone/getLocalTimeByZone\", {\n      \"userinfo\": methodParam.userInfo\n    });\n    let urlArray = [];\n    let selectedId = null;\n\n    if (methodParam.operation === \"create\") {\n      urlArray = [methodCategoryService, DateService];\n    } else {\n      // const url = methodParam.inputParam.classUrl+ \"/getActive\" + methodParam.inputParam.methodUrl + \"ById\";   //\"method/getActiveMethodById\"      \n      const url = \"method/getActiveMethodById\"; //\"method/getActiveMethodById\"      \n\n      const methodById = rsapi.post(url, {\n        [methodParam.primaryKeyName]: methodParam.masterData.SelectedMethod[methodParam.primaryKeyName],\n        \"userinfo\": methodParam.userInfo\n      });\n      urlArray = [methodCategoryService, methodById];\n      selectedId = methodParam.primaryKeyValue;\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      const methodCatMap = constructOptionList(response[0].data || [], \"nmethodcatcode\", \"smethodcatname\", undefined, undefined, true);\n      const methodCategoryList = methodCatMap.get(\"OptionList\");\n      selectedRecord[\"dcurrentdate\"] = rearrangeDateFormat(methodParam.userInfo, response[1].data); //selectedRecord[\"dvaliditystartdate\"]= selectedRecord[\"dvalidityenddate\"];\n\n      if (methodParam.operation === \"update\") {\n        selectedRecord = response[1].data;\n        selectedRecord[\"nmethodcatcode\"] = getComboLabelValue(selectedRecord, response[0].data, \"nmethodcatcode\", \"smethodcatname\");\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          methodCategoryList,\n          //:response[0].data || [],                               \n          operation: methodParam.operation,\n          screenName: methodParam.screenName,\n          selectedRecord,\n          openModal: true,\n          ncontrolCode: methodParam.ncontrolcode,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getMethodValidityUTCDate(methodParam) {\n  return function (dispatch) {\n    const DateService = rsapi.post(\"/timezone/getLocalTimeByZone\", {\n      \"userinfo\": methodParam.userInfo\n    });\n    let urlArray = [];\n    let selectedId = null;\n    urlArray = [DateService];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      selectedRecord[\"dcurrentdate\"] = rearrangeDateFormat(methodParam.userInfo, response[0].data); //selectedRecord[\"dvaliditystartdate\"]= selectedRecord[\"dvalidityenddate\"];\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          operation: methodParam.operation,\n          screenName: methodParam.screenName,\n          selectedRecord,\n          openChildModal: true,\n          //ncontrolCode:methodParam.ncontrolcode,\n          loading: false //,selectedId\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const getAvailableValidityData = (methodItem, url, key, screenName, userInfo, ncontrolCode) => {\n  return dispatch => {\n    const inputParam = {\n      \"userinfo\": userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"method/\" + url, inputParam).then(response => {\n      const availableDataMap = constructOptionList(response.data, key === \"methodvalidity\" ? \"nmethodvaliditycode\" : key === \"method\" ? \"nmethodcode\" : key == \"instrumentcategory\" ? \"ninstrumentcatcode\" : key == \"package\" ? \"ntestpackagecode\" : \"ncontainertypecode\", key === \"section\" ? \"ssectionname\" : key === \"method\" ? \"smethodname\" : key == \"instrumentcategory\" ? \"sinstrumentcatname\" : key == \"package\" ? \"stestpackagename\" : \"scontainertype\", false, false, true);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          showSaveContinue: false,\n          // otherTestData: {\n          //     [key]: availableDataMap.get(\"OptionList\")\n          // },\n          screenName: screenName,\n          selectedRecord: {\n            availableData: \"\"\n          },\n          operation: \"create\",\n          ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 417) {\n        toast.info(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport function fetchMethodValidityById(editParam) {\n  return function (dispatch) {\n    if (editParam.editRow.ntransactionstatus === transactionStatus.DRAFT) {\n      const URL3 = rsapi.post(\"/method/getActiveMethodValidityById\", {\n        [editParam.primaryKeyName]: editParam.editRow.nmethodvaliditycode,\n        \"userinfo\": editParam.userInfo\n      });\n      dispatch(initRequest(true));\n      Axios.all([URL3]).then(response => {\n        let selectedRecord = {};\n        let selectedId = editParam.editRow.nmethodvaliditycode;\n        selectedRecord = response[0].data.body.MethodValidity[0];\n\n        if (selectedRecord[\"svaliditystartdate\"] !== \"\") {\n          selectedRecord[\"dvaliditystartdate\"] = rearrangeDateFormat(editParam.userInfo, selectedRecord[\"svaliditystartdate\"]); //new Date(response[7].data[\"smanufacdate\"]);\n        }\n\n        if (selectedRecord[\"svalidityenddate\"] !== \"\") {\n          selectedRecord[\"dvalidityenddate\"] = rearrangeDateFormat(editParam.userInfo, selectedRecord[\"svalidityenddate\"]); //new Date(response[7].data[\"spodate\"]);\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            selectedRecord,\n            operation: editParam.operation,\n            openChildModal: true,\n            screenName: editParam.screenName,\n            ncontrolcode: editParam.ncontrolCode,\n            loading: false,\n            selectedId\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_NOTEDITDELETEMETHODVALIDITY\"\n      }));\n    }\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/MethodAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","getComboLabelValue","constructOptionList","formatInputDate","rearrangeDateFormat","formatDate","toast","Axios","initRequest","intl","parameterType","transactionStatus","operators","attachmentType","FORMULAFIELDTYPE","getMethodDetail","method","userInfo","masterData","dispatch","post","nmethodcode","userinfo","then","response","data","type","payload","operation","modalName","undefined","loading","catch","error","status","message","warn","getMethodComboService","methodParam","methodCategoryService","DateService","urlArray","selectedId","url","methodById","primaryKeyName","SelectedMethod","primaryKeyValue","all","selectedRecord","methodCatMap","methodCategoryList","get","screenName","openModal","ncontrolCode","ncontrolcode","getMethodValidityUTCDate","openChildModal","getAvailableValidityData","methodItem","key","inputParam","availableDataMap","showSaveContinue","availableData","info","fetchMethodValidityById","editParam","editRow","ntransactionstatus","DRAFT","URL3","nmethodvaliditycode","body","MethodValidity","formatMessage","id"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\n//import {getComboLabelValue, constructOptionList} from '../components/CommonScript'\r\nimport {sortData, getComboLabelValue, constructOptionList,formatInputDate, rearrangeDateFormat, formatDate} from '../components/CommonScript';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl} from '../components/App';\r\nimport {\r\n    parameterType,\r\n    transactionStatus,\r\n    operators,\r\n    attachmentType,\r\n    FORMULAFIELDTYPE,\r\n  } from \"../components/Enumeration\";\r\n//import { intl } from '../components/App';\r\n\r\nexport function getMethodDetail (method, userInfo, masterData) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"method/getMethod\", {nmethodcode:method.nmethodcode, userinfo:userInfo})\r\n   .then(response=>{     \r\n        masterData = {...masterData, ...response.data};       \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, operation:null, modalName:undefined, \r\n             loading:false}});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}\r\n}\r\n\r\n//export function getMethodComboService (screenName, primaryKeyName, primaryKeyValue, operation, inputParam , userInfo, ncontrolCode) {            \r\nexport function getMethodComboService (methodParam) {            \r\n    return function (dispatch) {   \r\n    const methodCategoryService = rsapi.post(\"methodcategory/getMethodCategory\", \r\n                                    {userinfo:methodParam.userInfo});\r\n    const DateService= rsapi.post(\"/timezone/getLocalTimeByZone\", {\r\n                                        \"userinfo\": methodParam.userInfo\r\n                                    })\r\n    let urlArray = [];\r\n    let selectedId = null;\r\n    if (methodParam.operation === \"create\"){\r\n        urlArray = [methodCategoryService,DateService];\r\n    }\r\n    else{           \r\n       // const url = methodParam.inputParam.classUrl+ \"/getActive\" + methodParam.inputParam.methodUrl + \"ById\";   //\"method/getActiveMethodById\"      \r\n       const url = \"method/getActiveMethodById\";   //\"method/getActiveMethodById\"      \r\n        const methodById =  rsapi.post(url, { [methodParam.primaryKeyName] :methodParam.masterData.SelectedMethod[methodParam.primaryKeyName], \"userinfo\": methodParam.userInfo} );\r\n        urlArray = [methodCategoryService, methodById];\r\n        selectedId = methodParam.primaryKeyValue;\r\n    }\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response=>{                  \r\n            \r\n            let selectedRecord =  {};\r\n\r\n            const methodCatMap = constructOptionList(response[0].data || [], \"nmethodcatcode\",\r\n                                \"smethodcatname\", undefined, undefined, true);\r\n            const methodCategoryList = methodCatMap.get(\"OptionList\");\r\n            selectedRecord[\"dcurrentdate\"]= rearrangeDateFormat(methodParam.userInfo, response[1].data);\r\n            //selectedRecord[\"dvaliditystartdate\"]= selectedRecord[\"dvalidityenddate\"];\r\n            if (methodParam.operation === \"update\"){\r\n                selectedRecord = response[1].data;\r\n                selectedRecord[\"nmethodcatcode\"] = getComboLabelValue(selectedRecord, response[0].data, \r\n                    \"nmethodcatcode\", \"smethodcatname\");                   \r\n            }\r\n           \r\n            dispatch({type: DEFAULT_RETURN, payload:{methodCategoryList,//:response[0].data || [],                               \r\n                        operation:methodParam.operation, screenName:methodParam.screenName, selectedRecord, \r\n                        openModal : true,\r\n                        ncontrolCode:methodParam.ncontrolcode,\r\n                        loading:false,selectedId\r\n                    }});\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })        \r\n    }\r\n}\r\n\r\nexport function getMethodValidityUTCDate (methodParam) {            \r\n    return function (dispatch) {   \r\n    \r\n    const DateService= rsapi.post(\"/timezone/getLocalTimeByZone\", {\r\n                                        \"userinfo\": methodParam.userInfo\r\n                                    })\r\n    let urlArray = [];\r\n    let selectedId = null;\r\n    \r\n        urlArray = [DateService];\r\n    \r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response=>{                  \r\n            \r\n            let selectedRecord =  {};\r\n\r\n            \r\n            selectedRecord[\"dcurrentdate\"]= rearrangeDateFormat(methodParam.userInfo, response[0].data);\r\n            //selectedRecord[\"dvaliditystartdate\"]= selectedRecord[\"dvalidityenddate\"];\r\n                       \r\n            dispatch({type: DEFAULT_RETURN, payload:{          \r\n                        operation:methodParam.operation, screenName:methodParam.screenName, selectedRecord, \r\n                        openChildModal : true,\r\n                        //ncontrolCode:methodParam.ncontrolcode,\r\n                        loading:false//,selectedId\r\n                    }});\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })        \r\n    }\r\n}\r\n\r\nexport const getAvailableValidityData = (methodItem, url, key, screenName, userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        const inputParam = {\r\n            \"userinfo\": userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"method/\" + url, inputParam)\r\n            .then(response => {\r\n                const availableDataMap = constructOptionList(response.data, key === \"methodvalidity\" ? \"nmethodvaliditycode\" : key === \"method\" ? \"nmethodcode\" : key == \"instrumentcategory\" ?\"ninstrumentcatcode\" : key == \"package\" ?\"ntestpackagecode\" : \"ncontainertypecode\",\r\n                    key === \"section\" ? \"ssectionname\" : key === \"method\" ? \"smethodname\" :  key == \"instrumentcategory\" ? \"sinstrumentcatname\"  :  key == \"package\" ? \"stestpackagename\" : \"scontainertype\", false, false, true);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal: true,\r\n                        showSaveContinue: false,\r\n                        // otherTestData: {\r\n                        //     [key]: availableDataMap.get(\"OptionList\")\r\n                        // },\r\n                        screenName: screenName,\r\n                        selectedRecord: {\r\n                            availableData: \"\"\r\n                        },\r\n                        operation: \"create\",\r\n                        ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 417) {\r\n                    toast.info(error.response.data)\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function fetchMethodValidityById (editParam){  \r\n    return function(dispatch){\r\n        if (editParam.editRow.ntransactionstatus === transactionStatus.DRAFT) {\r\n        const URL3=rsapi.post(\"/method/getActiveMethodValidityById\", { [editParam.primaryKeyName] :editParam.editRow.nmethodvaliditycode , \"userinfo\": editParam.userInfo} )\r\n        dispatch(initRequest(true));\r\n        Axios.all([URL3])\r\n        .then(response=> { \r\n            let selectedRecord={}\r\n            let selectedId = editParam.editRow.nmethodvaliditycode;\r\n            selectedRecord=response[0].data.body.MethodValidity[0];\r\n\r\n            if (selectedRecord[\"svaliditystartdate\"] !== \"\") {\r\n\r\n                selectedRecord[\"dvaliditystartdate\"] = rearrangeDateFormat(editParam.userInfo, selectedRecord[\"svaliditystartdate\"]); //new Date(response[7].data[\"smanufacdate\"]);\r\n            }\r\n\r\n            if (selectedRecord[\"svalidityenddate\"] !== \"\") {\r\n                selectedRecord[\"dvalidityenddate\"] = rearrangeDateFormat(editParam.userInfo, selectedRecord[\"svalidityenddate\"]); //new Date(response[7].data[\"spodate\"]);\r\n            }\r\n            \r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload:{\r\n                selectedRecord ,\r\n                operation:editParam.operation,\r\n                openChildModal: true,\r\n                screenName:editParam.screenName,\r\n                ncontrolcode:editParam.ncontrolCode,\r\n                loading:false,selectedId\r\n            }\r\n            }); \r\n            \r\n        })\r\n        .catch(error => {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }         \r\n        })\r\n    }\r\n    else {\r\n        toast.warn(intl.formatMessage({ id: \"IDS_NOTEDITDELETEMETHODVALIDITY\" }));\r\n    }\r\n    }\r\n }"]},"metadata":{},"sourceType":"module"}