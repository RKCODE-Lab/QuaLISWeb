{"ast":null,"code":"import _defineProperty from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import rsapi from'../rsapi';import Axios from'axios';import{toast}from'react-toastify';import{DEFAULT_RETURN}from'./LoginTypes';import{initRequest}from'./LoginAction';export function openEmailHostModal(screenName,operation,primaryKeyName,masterData,userInfo,ncontrolcode){return function(dispatch){dispatch({type:DEFAULT_RETURN,payload:{selectedRecord:{},screenName:screenName,operation:\"create\",openModal:true,ncontrolcode:ncontrolcode}});};}export function fetchEmailHostById(editParam){return function(dispatch){var _rsapi$post;var URL1=rsapi.post('emailhost/getActiveEmailHostById',(_rsapi$post={},_defineProperty(_rsapi$post,editParam.primaryKeyField,editParam.primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",editParam.userInfo),_rsapi$post));// const URL2=rsapi.post(\"instrumentcategory/getActiveInstrumentCategoryById\", { [editParam.primaryKeyField] :editParam.primaryKeyValue , \"userinfo\": editParam.userInfo} )\n// const URL3= rsapi.post('instrumentcategory/getInterfacetype',{\"userinfo\":editParam.userInfo})\ndispatch(initRequest(true));Axios.all([URL1]).then(function(response){var selectedRecord={};var selectedId=editParam.primaryKeyValue;selectedRecord=response[0].data;//let EmailTagParameter = response[0].data[\"EmailTagParameter\"];\n// getComboLabelValue(selectedRecord, Tag, \"nemailtagcode\", \"stagname\");\n//     getComboLabelValue(selectedRecord, Interfacetype, \"ninterfacetype\", \"sinterfacetypename\");\ndispatch({type:DEFAULT_RETURN,payload:{selectedRecord:selectedRecord,operation:editParam.operation,openModal:true,screenName:editParam.screenName,ncontrolcode:editParam.ncontrolCode,loading:false,selectedId:selectedId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/EmailHostAction.js"],"names":["rsapi","Axios","toast","DEFAULT_RETURN","initRequest","openEmailHostModal","screenName","operation","primaryKeyName","masterData","userInfo","ncontrolcode","dispatch","type","payload","selectedRecord","openModal","fetchEmailHostById","editParam","URL1","post","primaryKeyField","primaryKeyValue","all","then","response","selectedId","data","ncontrolCode","loading","catch","error","status","message","warn"],"mappings":"oKAAA,MAAOA,CAAAA,KAAP,KAAkB,UAAlB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OACIC,KADJ,KAEO,gBAFP,CAGA,OACIC,cADJ,KAEO,cAFP,CAGA,OAASC,WAAT,KAA4B,eAA5B,CAIA,MAAO,SAASC,CAAAA,kBAAT,CAA4BC,UAA5B,CAAwCC,SAAxC,CAAmDC,cAAnD,CAAmEC,UAAnE,CAA+EC,QAA/E,CAAyFC,YAAzF,CAAuG,CAC1G,MAAO,UAACC,QAAD,CAAc,CACjBA,QAAQ,CAAC,CAACC,IAAI,CAAEV,cAAP,CAAuBW,OAAO,CAAC,CAACC,cAAc,CAAG,EAAlB,CAAsBT,UAAU,CAAEA,UAAlC,CACpCC,SAAS,CAAE,QADyB,CACfS,SAAS,CAAE,IADI,CACEL,YAAY,CAAZA,YADF,CAA/B,CAAD,CAAR,CAEH,CAHD,CAIH,CAED,MAAO,SAASM,CAAAA,kBAAT,CAA4BC,SAA5B,CAAuC,CAC1C,MAAO,UAAUN,QAAV,CAAoB,iBACvB,GAAMO,CAAAA,IAAI,CAAGnB,KAAK,CAACoB,IAAN,CAAW,kCAAX,6CAAkDF,SAAS,CAACG,eAA5D,CAA8EH,SAAS,CAACI,eAAxF,8BAAyG,UAAzG,CAAqHJ,SAAS,CAACR,QAA/H,eAAb,CACA;AACA;AACAE,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR,CACAH,KAAK,CAACsB,GAAN,CAAU,CAACJ,IAAD,CAAV,EACKK,IADL,CACU,SAAAC,QAAQ,CAAI,CACd,GAAIV,CAAAA,cAAc,CAAG,EAArB,CACA,GAAIW,CAAAA,UAAU,CAAGR,SAAS,CAACI,eAA3B,CACAP,cAAc,CAAGU,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAA7B,CAEA;AACD;AACC;AACAf,QAAQ,CAAC,CACLC,IAAI,CAAEV,cADD,CACiBW,OAAO,CAAE,CAC3BC,cAAc,CAAdA,cAD2B,CAE3BR,SAAS,CAAEW,SAAS,CAACX,SAFM,CAG3BS,SAAS,CAAE,IAHgB,CAI3BV,UAAU,CAAEY,SAAS,CAACZ,UAJK,CAK3BK,YAAY,CAAEO,SAAS,CAACU,YALG,CAM3BC,OAAO,CAAE,KANkB,CAMXH,UAAU,CAAVA,UANW,CAD1B,CAAD,CAAR,CAWH,CApBL,EAqBKI,KArBL,CAqBW,SAAAC,KAAK,CAAI,CACZnB,QAAQ,CAAC,CAAEC,IAAI,CAAEV,cAAR,CAAwBW,OAAO,CAAE,CAAEe,OAAO,CAAE,KAAX,CAAjC,CAAD,CAAR,CACA,GAAIE,KAAK,CAACN,QAAN,CAAeO,MAAf,GAA0B,GAA9B,CAAmC,CAC/B9B,KAAK,CAAC6B,KAAN,CAAYA,KAAK,CAACE,OAAlB,EACH,CAFD,IAGK,CACD/B,KAAK,CAACgC,IAAN,CAAWH,KAAK,CAACN,QAAN,CAAeE,IAA1B,EACH,CACJ,CA7BL,EA8BH,CAnCD,CAoCH","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\n\r\n\r\n\r\nexport function openEmailHostModal(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolcode) {\r\n    return (dispatch) => {\r\n        dispatch({type: DEFAULT_RETURN, payload:{selectedRecord : {}, screenName: screenName,\r\n            operation: \"create\", openModal: true, ncontrolcode}});\r\n    }\r\n}\r\n\r\nexport function fetchEmailHostById(editParam) {\r\n    return function (dispatch) {\r\n        const URL1 = rsapi.post('emailhost/getActiveEmailHostById', { [editParam.primaryKeyField]: editParam.primaryKeyValue, \"userinfo\": editParam.userInfo })\r\n        // const URL2=rsapi.post(\"instrumentcategory/getActiveInstrumentCategoryById\", { [editParam.primaryKeyField] :editParam.primaryKeyValue , \"userinfo\": editParam.userInfo} )\r\n        // const URL3= rsapi.post('instrumentcategory/getInterfacetype',{\"userinfo\":editParam.userInfo})\r\n        dispatch(initRequest(true));\r\n        Axios.all([URL1])\r\n            .then(response => {\r\n                let selectedRecord = {}\r\n                let selectedId = editParam.primaryKeyValue;\r\n                selectedRecord = response[0].data\r\n               \r\n                //let EmailTagParameter = response[0].data[\"EmailTagParameter\"];\r\n               // getComboLabelValue(selectedRecord, Tag, \"nemailtagcode\", \"stagname\");\r\n                //     getComboLabelValue(selectedRecord, Interfacetype, \"ninterfacetype\", \"sinterfacetypename\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        selectedRecord,\r\n                        operation: editParam.operation,\r\n                        openModal: true,\r\n                        screenName: editParam.screenName,\r\n                        ncontrolcode: editParam.ncontrolCode,\r\n                        loading: false, selectedId\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}