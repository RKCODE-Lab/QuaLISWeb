{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5500\\\\QuaLISWeb\\\\src\\\\pages\\\\submitter\\\\institutiondepartment\\\\InstitutionDepartment.jsx\";\nimport React from 'react';\nimport { ListWrapper } from '../../../components/client-group.styles';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { callService, crudMaster, showInstitutionDepartmentAddScreen, fetchinstituiondeptTypeById, updateStore, validateEsignCredential } from '../../../actions';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport DataGrid from '../../../components/data-grid/data-grid.component';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport { showEsign, getControlMap } from '../../../components/CommonScript';\nimport Esign from '../../audittrail/Esign';\nimport FormInput from '../../../components/form-input/form-input.component';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass InstitutionDepartment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      let selectedId = null;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        selectedId = this.state.selectedRecord.ninstitutiondeptcode;\n        dataState = this.state.dataState;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = this.state.selectedRecord;\n        this.extractedColumnList.map(item => {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField] = this.state.selectedRecord[item.dataField] ? this.state.selectedRecord[item.dataField] : \"\";\n        });\n      } else {\n        //add                                \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        this.extractedColumnList.map(item => {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField] = this.state.selectedRecord[item.dataField] ? this.state.selectedRecord[item.dataField] : \"\";\n        });\n      }\n\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState,\n        selectedId,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        dataState: this.state.dataState,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          //.dataItem,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: deleteParam.operation,\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[event.target.name] = event.target.value;\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.handleClose = this.handleClose.bind(this);\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      dataResult: [],\n      dataState: _dataState,\n      mandatoryFields: [{\n        \"idsName\": \"IDS_INSTITUTIONDEPARTMENTNAME\",\n        \"dataField\": \"sinstitutiondeptname\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_INSTITUTIONDEPARTMENTCODE\",\n        \"dataField\": \"sinstitutiondeptcode\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }]\n    };\n  }\n\n  //to close side out\n  handleClose() {\n    let loadEsign = this.props.Login.loadEsign;\n    let openModal = this.props.Login.openModal;\n    let selectedRecord = this.props.Login.selectedRecord;\n    let selectedId = this.props.Login.selectedId;\n\n    if (this.props.Login.loadEsign) {\n      if (this.props.Login.operation === \"delete\") {\n        loadEsign = false;\n        openModal = false;\n      } else {\n        loadEsign = false;\n      }\n    } else {\n      openModal = false;\n      selectedRecord = {};\n      selectedId = null;\n    }\n\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        openModal,\n        loadEsign,\n        selectedRecord,\n        selectedId\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"idsName\": \"IDS_INSTITUTIONDEPARTMENTNAME\",\n        \"dataField\": \"sinstitutiondeptname\",\n        \"width\": \"250px\"\n      }, {\n        \"idsName\": \"IDS_INSTITUTIONDEPARTMENTCODE\",\n        \"dataField\": \"sinstitutiondeptcode\",\n        \"width\": \"250px\"\n      }];\n      primaryKeyField = \"ninstitutiondeptcode\";\n    }\n\n    const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddInstitutionDepartment\") && this.state.controlMap.get('AddInstitutionDepartment').ncontrolcode;\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"EditInstitutionDepartment\") && this.state.controlMap.get('EditInstitutionDepartment').ncontrolcode;\n    const editParam = {\n      screenName: \"InstitutionDepartment\",\n      operation: \"update\",\n      primaryKeyField: primaryKeyField,\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      screenName: \"InstitutionDepartment\",\n      methodUrl: \"InstitutionDepartment\",\n      operation: \"delete\",\n      key: 'institutiondepartment'\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      fetchRecord: this.props.fetchinstituiondeptTypeById,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      pageable: true,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      gridHeight: '600px',\n      scrollable: \"scrollable\",\n      selectedId: this.props.Login.selectedId,\n      addRecord: () => this.props.showInstitutionDepartmentAddScreen(this.props.Login.userInfo, addID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: this.props.Login.inputParam.displayName,\n      closeModal: this.handleClose,\n      show: this.props.Login.openModal,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord,\n      mandatoryFields: this.state.mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation ? this.props.Login.operation : '',\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        name: \"sinstitutiondeptname\",\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_INSTITUTIONDEPARTMENTNAME\"\n        }),\n        label: this.props.intl.formatMessage({\n          id: \"IDS_INSTITUTIONDEPARTMENTNAME\"\n        }),\n        value: this.state.selectedRecord.sinstitutiondeptname ? this.state.selectedRecord.sinstitutiondeptname : \"\",\n        isMandatory: true,\n        required: true,\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event),\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 41\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        name: \"sinstitutiondeptcode\",\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_INSTITUTIONDEPARTMENTCODE\"\n        }),\n        onChange: event => this.onInputOnChange(event),\n        isMandatory: true,\n        required: true,\n        rows: \"1\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_INSTITUTIONDEPARTMENTCODE\"\n        }),\n        type: \"text\",\n        value: this.state.selectedRecord.sinstitutiondeptcode ? this.state.selectedRecord.sinstitutiondeptcode : \"\",\n        maxLength: \"5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 41\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        if (this.props.Login.operation === \"create\" && this.props.Login.inputParam.saveType === 2) {\n          this.props.Login.inputParam.formRef.current.reset();\n        }\n\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState,\n          selectedRecord: {\n            sregtypename: '',\n            sdescription: ''\n          }\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  showInstitutionDepartmentAddScreen,\n  fetchinstituiondeptTypeById,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(InstitutionDepartment));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/submitter/institutiondepartment/InstitutionDepartment.jsx"],"names":["React","ListWrapper","Row","Col","toast","process","connect","injectIntl","callService","crudMaster","showInstitutionDepartmentAddScreen","fetchinstituiondeptTypeById","updateStore","validateEsignCredential","DEFAULT_RETURN","DataGrid","SlideOutModal","showEsign","getControlMap","Esign","FormInput","mapStateToProps","state","Login","InstitutionDepartment","Component","constructor","props","dataStateChange","event","setState","dataResult","masterData","dataState","onSaveClick","saveType","formRef","inputData","selectedId","userInfo","undefined","operation","selectedRecord","ninstitutiondeptcode","inputParam","methodUrl","toLowerCase","extractedColumnList","map","item","dataField","nmastersitecode","classUrl","displayName","userRoleControlRights","nformcode","ncontrolcode","updateInfo","typeName","data","loadEsign","screenData","deleteRecord","deleteParam","ncontrolCode","openModal","screenName","reloadData","userinfo","validateEsign","sreason","nreasoncode","value","spredefinedreason","label","password","onInputOnChange","target","name","type","checked","createRef","handleClose","bind","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","mandatoryFields","getDerivedStateFromProps","warn","render","primaryKeyField","addID","has","get","editId","editParam","key","intl","formatMessage","id","sinstitutiondeptname","sinstitutiondeptcode","componentDidUpdate","previousProps","Object","values","push","current","reset","sregtypename","sdescription"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { ListWrapper } from '../../../components/client-group.styles'\r\nimport { Row, Col} from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { callService, crudMaster, showInstitutionDepartmentAddScreen, fetchinstituiondeptTypeById, updateStore, validateEsignCredential } from '../../../actions';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport DataGrid from '../../../components/data-grid/data-grid.component';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport { showEsign, getControlMap } from '../../../components/CommonScript';\r\nimport Esign from '../../audittrail/Esign';\r\nimport FormInput from '../../../components/form-input/form-input.component';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass InstitutionDepartment extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.handleClose = this.handleClose.bind(this);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {}, userRoleControlRights: [], controlMap: new Map(),\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            mandatoryFields: [\r\n                { \"idsName\": \"IDS_INSTITUTIONDEPARTMENTNAME\", \"dataField\": \"sinstitutiondeptname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_INSTITUTIONDEPARTMENTCODE\", \"dataField\": \"sinstitutiondeptcode\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n\r\n            ]\r\n        };\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    //to close side out\r\n    handleClose() {\r\n\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId = null;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    };\r\n\r\n     //to open side out\r\n\r\n    //to perform save action for both add and edit\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let selectedId = null;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            selectedId = this.state.selectedRecord.ninstitutiondeptcode\r\n            dataState=this.state.dataState\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = this.state.selectedRecord;\r\n            this.extractedColumnList.map(item => {\r\n                return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField] = this.state.selectedRecord[item.dataField] ? this.state.selectedRecord[item.dataField] : \"\";\r\n            })\r\n        }\r\n        else {\r\n            //add                                \r\n          inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n          this.extractedColumnList.map(item => {\r\n              return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField] = this.state.selectedRecord[item.dataField] ? this.state.selectedRecord[item.dataField]:\"\"\r\n          })\r\n            }               \r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, dataState, selectedId,\r\n            selectedRecord: {...this.state.selectedRecord}\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n    //to delete a recoed\r\n    deleteRecord = (deleteParam) => {\r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            dataState: this.state.dataState,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,//.dataItem,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: deleteParam.operation,\r\n            selectedRecord: {...this.state.selectedRecord}\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, operation: deleteParam.operation, openModal: true,\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n    //to reload data\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n        if (this.props.Login.inputParam !== undefined) {\r\n            this.extractedColumnList = [\r\n                { \"idsName\": \"IDS_INSTITUTIONDEPARTMENTNAME\", \"dataField\": \"sinstitutiondeptname\", \"width\": \"250px\" },\r\n                { \"idsName\": \"IDS_INSTITUTIONDEPARTMENTCODE\", \"dataField\": \"sinstitutiondeptcode\", \"width\": \"250px\" },\r\n            ]\r\n            primaryKeyField = \"ninstitutiondeptcode\";\r\n        }\r\n\r\n        const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddInstitutionDepartment\")\r\n            && this.state.controlMap.get('AddInstitutionDepartment').ncontrolcode;\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"EditInstitutionDepartment\")\r\n            && this.state.controlMap.get('EditInstitutionDepartment').ncontrolcode;\r\n        const editParam = {\r\n            screenName: \"InstitutionDepartment\", operation: \"update\", primaryKeyField: primaryKeyField,\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, ncontrolCode: editId\r\n        };\r\n\r\n        const deleteParam = { screenName: \"InstitutionDepartment\", methodUrl: \"InstitutionDepartment\", operation: \"delete\", key: 'institutiondepartment' };\r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    fetchRecord={this.props.fetchinstituiondeptTypeById}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    reloadData={this.reloadData}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    editParam={editParam}\r\n                                    deleteParam={deleteParam}\r\n                                    pageable={true}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    gridHeight={'600px'}\r\n                                    scrollable={\"scrollable\"}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    addRecord={() => this.props.showInstitutionDepartmentAddScreen(this.props.Login.userInfo, addID)}\r\n                                />\r\n                                : \"\"}\r\n\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        onSaveClick={this.onSaveClick}\r\n                        operation={this.props.Login.operation}\r\n                        screenName={this.props.Login.inputParam.displayName}\r\n                        closeModal={this.handleClose}\r\n                        show={this.props.Login.openModal}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord}\r\n                        mandatoryFields={this.state.mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation ? this.props.Login.operation : ''}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                                :\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <FormInput\r\n                                            name={\"sinstitutiondeptname\"}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_INSTITUTIONDEPARTMENTNAME\" })}\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_INSTITUTIONDEPARTMENTNAME\" })}\r\n                                            value={this.state.selectedRecord.sinstitutiondeptname ? this.state.selectedRecord.sinstitutiondeptname : \"\"}\r\n                                            isMandatory={true}\r\n                                            required={true}\r\n                                            type=\"text\"\r\n                                            onChange={(event) => this.onInputOnChange(event)}\r\n                                            maxLength={100}\r\n                                        />\r\n                                    </Col>\r\n                                   \r\n                                    <Col md={12}>\r\n                                        <FormInput\r\n                                            name={\"sinstitutiondeptcode\"}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_INSTITUTIONDEPARTMENTCODE\" })}\r\n                                            onChange={(event) => this.onInputOnChange(event)}\r\n                                            isMandatory={true}\r\n                                            required={true}\r\n                                            rows=\"1\"\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_INSTITUTIONDEPARTMENTCODE\" })}\r\n                                            type=\"text\"\r\n                                            value={this.state.selectedRecord.sinstitutiondeptcode ? this.state.selectedRecord.sinstitutiondeptcode : \"\"}\r\n                                            maxLength={\"5\"}\r\n                                        />\r\n\r\n                                    </Col>\r\n                                </Row>\r\n                        } />\r\n                    : \"\"}\r\n            </>\r\n\r\n        );\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState)\r\n                });\r\n            }\r\n            else {\r\n                if (this.props.Login.operation === \"create\" && this.props.Login.inputParam.saveType === 2) {\r\n                    this.props.Login.inputParam.formRef.current.reset();\r\n                }\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState,\r\n                    selectedRecord: { sregtypename: '', sdescription: '' }\r\n                });\r\n            }\r\n        }\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n           \r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[event.target.name] = event.target.value;\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    \r\n}    \r\nexport default connect(mapStateToProps,{\r\n    callService, crudMaster, showInstitutionDepartmentAddScreen, fetchinstituiondeptTypeById,\r\n    updateStore, validateEsignCredential\r\n})(injectIntl(InstitutionDepartment));\r\n    \r\n"]},"metadata":{},"sourceType":"module"}