{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\worklist\\\\WorkList.jsx\";\nimport React, { Component } from \"react\";\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport WorklistPreparationFilter from './WorklistPreparationFilter';\nimport { rearrangeDateFormat, convertDateValuetoString, formatInputDate } from '../../components/CommonScript';\nimport { injectIntl } from \"react-intl\";\nimport Esign from \"../audittrail/Esign\";\nimport AddWorklistSection from '../worklist/AddWorklistSection';\nimport AddWorklistSample from '../worklist/AddWorklistSample';\nimport CustomTab from \"../../components/custom-tabs/custom-tabs.component\";\nimport WorklistHistoryTab from \"./WorklistHistoryTab\";\nimport WorklistSampleTab from \"./WorklistSampleTab\";\nimport { designProperties, transactionStatus, REPORTTYPE, SUBSAMPLEAUDITMULTILINGUALFIELDS, designComponents } from '../../components/Enumeration';\nimport SpecificationInfo from '../testgroup/SpecificationInfo'; //import { ReactComponent as Closure } from '../../assets/image/prepared-worklist.svg';\n\nimport { ReactComponent as Closure } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/prepared.svg\";\nimport { ReactComponent as ReportIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/report-Icon.svg\"; //import { ReactComponent as ReportIcon } from '../../assets/image/report-svgrepo-com.svg';\n\nimport { ReactComponent as Report } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/Report.svg\";\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSectionAndTest, getWorklistDetail, OpenDate, CloseDate, viewAttachment, getInstrumentCombo, getWorklistSample, getRegTypeTestWise, getRegTypeWorklist, getSectionbaseTest, onWorklistApproveClick, getWorklistDetailFilter, getEditSectionAndTest, createWorklistCreation, filterColumnData, getConfigVersionTestWise, ViewSampleDetails, getWorklisthistoryAction, reportWorklist, getRegSubTypeWise, insertWorklist, generateControlBasedReport, validateEsignforWorklist } from \"../../actions\";\nimport ListMaster from \"../../components/list-master/list-master.component\";\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\nimport SlideOutModal from \"../../components/slide-out-modal/SlideOutModal\";\nimport { showEsign, getControlMap, constructOptionList } from \"../../components/CommonScript\";\nimport { ContentPanel, MediaLabel } from \"../../components/App.styles\";\nimport { process } from \"@progress/kendo-data-query\";\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\nimport BreadcrumbComponent from \"../../components/Breadcrumb.Component\";\nimport { Affix } from \"rsuite\";\nimport DataGrid from '../../components/data-grid/data-grid.component';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass WorkList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sidebarExpandCollapse = () => {\n      this.setState({\n        sidebarview: true\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      if (dateValue === null) {\n        dateValue = new Date();\n      } // let toDate;\n      // let fromDate;\n\n\n      let fromdate = this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date();\n      let todate = this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date();\n      let obj = {};\n\n      if (dateName === 'fromDate') {\n        obj = convertDateValuetoString(dateValue, todate, this.props.Login.userInfo);\n        fromdate = obj.fromDate;\n        todate = obj.toDate;\n        let fromDate = obj.fromDate;\n        let toDate = obj.toDate;\n      } else {\n        obj = convertDateValuetoString(fromdate, dateValue, this.props.Login.userInfo);\n        fromdate = obj.fromDate;\n        todate = obj.toDate;\n        let fromDate = obj.fromDate;\n        let toDate = obj.toDate;\n      }\n\n      let inputParam = {\n        inputData: {\n          nflag: 2,\n          nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\n          nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n          fromdate: String(fromdate),\n          todate: String(todate),\n          userinfo: this.props.Login.userInfo,\n          realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n          realApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue\n        },\n        masterData: this.props.Login.masterData\n      };\n      this.props.getConfigVersionTestWise(inputParam);\n    };\n\n    this.onFilterComboChange = (comboData, fieldName) => {\n      if (comboData) {\n        let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n        let inputParamData = {};\n\n        if (fieldName === 'nsampletypecode') {\n          //if (comboData.value !== this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode) {\n          inputParamData = {\n            nflag: 2,\n            fromdate: obj.fromDate,\n            todate: obj.toDate,\n            nsampletypecode: comboData.value,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            defaultSampleTypeValue: comboData.item,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue\n          };\n          this.props.getRegTypeWorklist(inputParamData); // }\n        } else if (fieldName === 'nregtypecode') {\n          //  if (comboData.value !== this.props.Login.masterData.defaultRegTypeValue.nregtypecode) {\n          inputParamData = {\n            nflag: 3,\n            fromdate: obj.fromDate,\n            todate: obj.toDate,\n            nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode,\n            nregtypecode: comboData.value,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            nregtypecode: comboData.value,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue,\n            masterData: { ...this.props.Login.masterData,\n              RegTypeValue: comboData.item //RegistrationSubTypeList: inputParam.masterData.RegistrationSubTypeList\n\n            } //defaultRegTypeValue: comboData.item\n\n          };\n          this.props.getRegSubTypeWise(inputParamData); //  }\n        } else if (fieldName === 'nregsubtypecode') {\n          //  if (comboData.value !== this.props.Login.masterData.RegSubTypeValue.nregsubtypecode) {\n          let inputData = {\n            nflag: 4,\n            fromdate: obj.fromDate,\n            todate: obj.toDate,\n            nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode,\n            nregtypecode: this.props.Login.masterData.RegTypeValue.nregtypecode,\n            nneedtemplatebasedflow: comboData.item.nneedtemplatebasedflow,\n            nregsubtypecode: comboData.value,\n            userinfo: this.props.Login.userInfo,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue\n          };\n          inputParamData = {\n            inputData,\n            masterData: { ...this.props.Login.masterData,\n              RegSubTypeValue: comboData.item //RegistrationSubTypeList: inputParam.masterData.RegistrationSubTypeList\n\n            }\n          };\n          this.props.getConfigVersionTestWise(inputParamData); // }\n        } else if (fieldName === 'ntransactionstatus') {\n          // if (comboData.value !== this.props.Login.masterData.FilterStatusValue.ntransactionstatus) {\n          let masterData = { ...this.props.Login.masterData,\n            FilterStatusValue: comboData.item\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo); //   }\n        } else if (fieldName === 'napproveconfversioncode') {\n          // if (comboData.value !== this.props.Login.masterData.defaultApprovalVersionValue.napproveconfversioncode) {\n          let masterData = { ...this.props.Login.masterData,\n            defaultApprovalVersionValue: comboData.item\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo); //  }\n        } //\n\n      }\n    };\n\n    this.onInputOnChange = (event, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = optional;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      // this.searchRef.current.value = \"\";\n      let inputData = [];\n      let instSection = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromdate, this.props.Login.masterData.todate, this.props.Login.userInfo);\n      inputData['fromdate'] = obj.fromDate;\n      inputData['todate'] = obj.toDate;\n\n      if (this.props.Login.screenName === \"IDS_WORKLIST\") {\n        let postParam = undefined;\n        inputData[\"worklist\"] = {\n          nstatus: this.props.Login.userInfo.nmastersitecode\n        };\n        inputData[\"worklist\"][\"nsampletypecode\"] = this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode;\n        inputData[\"worklist\"][\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"].value;\n        inputData[\"worklist\"][\"ntestcode\"] = this.state.selectedRecord[\"ntestcode\"].value; //inputData[\"worklist\"][\"nregtypecode\"] = this.props.Login.masterData.RegTypeValue.nregtypecode\n\n        inputData[\"worklist\"][\"nregtypecode\"] = this.props.Login.masterData.defaultRegTypeValue.nregtypecode; //inputData[\"worklist\"][\"nregsubtypecode\"] = this.props.Login.masterData.RegSubTypeValue.nregsubtypecode\n\n        inputData[\"worklist\"][\"nregsubtypecode\"] = this.props.Login.masterData.defaultRegSubTypeValue.nregsubtypecode;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\n        inputData[\"napprovalconfigversioncode\"] = this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode;\n        inputData[\"ncontrolCode\"] = this.state.controlMap.has(\"AddSamples\") && this.state.controlMap.get(\"AddSamples\").ncontrolcode; // let defaultFilterStatusValue={};\n        // let FilterStatusValue={};\n\n        inputData[\"ntransactionstatus\"] = (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1; // this.props.Login.masterData.FilterStatus.map(item => {if(item.ntransactionstatus === transactionStatus.DRAFT){\n        //   defaultFilterStatusValue = item;\n        //   FilterStatusValue = item;}\n        // });\n        // let defaultFilterStatusValue=this.props.Login.masterData.FilterStatus[1];\n        // let FilterStatusValue=this.props.Login.masterData.FilterStatus[1];\n\n        if (this.props.Login.operation === \"update\") {\n          inputData[\"worklist\"][\"nworklistcode\"] = this.props.Login.masterData.selectedWorklist.nworklistcode;\n        }\n\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: \"Worklist\",\n          inputData: inputData,\n          operation: this.props.Login.operation,\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef\n        };\n        const masterData = this.props.Login.masterData; // let masterData = {...this.props.Login.masterData\n        //   ,defaultFilterStatusValue,\n        //   FilterStatusValue      }\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: {\n                  masterData\n                }\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          //this.props.crudMaster(inputParam, masterData, \"openModal\");\n          this.props.insertWorklist(inputParam, masterData);\n        }\n      } //add / edit  \n\n\n      let validList = true;\n\n      if (this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\" && this.state.addedComponentList.length > 1000) {\n        validList = false;\n      }\n\n      if (validList) {\n        let saveList = [];\n\n        if (this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\") {\n          const compList = this.state.addComponentSortedList.map(x => {\n            delete x.selected; //return {...x, 'sregistereddate':formatInputDate(x.sregistereddate, false)}\n\n            return x;\n          }) || []; //compList.map(item=>saveList.push({\"npreregno\": item.npreregno}));\n\n          if (compList.length > 0) {\n            compList.map(item => saveList.indexOf(item.ntransactionsamplecode) === -1 ? saveList.push(item) : \"\");\n            const masterData = this.props.Login.masterData;\n            const inputData = {\n              worklistcompcreationlist: saveList,\n              userinfo: this.props.Login.userInfo,\n              worklistcreation: this.props.Login.masterData.selectedWorklist,\n              ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\n            };\n            let dataState = undefined;\n            let selectedId = null;\n            let postParam = undefined;\n            const inputParam = {\n              classUrl: \"worklist\",\n              methodUrl: \"WorklistCreation\",\n              inputData: inputData,\n              selectedId,\n              dataState,\n              postParam,\n              operation: \"create\",\n              saveType,\n              masterData\n            };\n\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData: masterData\n                  },\n                  saveType\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              //this.props.crudMaster(inputParam,masterData, \"openChildModal\");\n              this.props.createWorklistCreation(inputParam);\n            }\n          } else {\n            //this.props.crudMaster(inputParam,masterData, \"openChildModal\");\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELCETONESAMPLE\"\n            }));\n          }\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_EXCEEDSMAXINSERT\"\n        }));\n      }\n    };\n\n    this.DeleteWorklistSample = (operation, ncontrolCode) => {\n      let inputData = [];\n\n      if (operation.screenName === \"IDS_WORKLISTSAMPLE\") {\n        const dataState = this.state.sectionDataState;\n        inputData[\"worklistsample\"] = {\n          nsitecode: this.props.Login.userInfo.ntranssitecode\n        };\n        inputData[\"worklistsample\"][\"nworklistcode\"] = operation.selectedRecord.nworklistcode;\n        inputData[\"worklistsample\"][\"nworklistsamplecode\"] = operation.selectedRecord.nworklistsamplecode;\n        inputData[\"worklistsample\"][\"ntransactiontestcode\"] = operation.selectedRecord.ntransactiontestcode;\n        inputData[\"worklistsample\"][\"ntransactionsamplecode\"] = operation.selectedRecord.ntransactionsamplecode;\n        inputData[\"worklistsample\"][\"sarno\"] = operation.selectedRecord.sarno;\n        inputData[\"worklistsample\"][\"ssamplearno\"] = operation.selectedRecord.ssamplearno;\n        inputData[\"worklistsample\"][\"stestname\"] = operation.selectedRecord.stestsynonym;\n        inputData[\"worklistsample\"][\"nregsubtypecode\"] = operation.selectedRecord.nregsubtypecode;\n        inputData[\"worklistsample\"][\"nregtypecode\"] = operation.selectedRecord.nregtypecode;\n        inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        const inputParam = {\n          methodUrl: \"WorklistSample\",\n          classUrl: this.props.Login.inputParam.classUrl,\n          inputData: inputData,\n          operation: \"delete\",\n          dataState: dataState\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, operation.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openChildModal: true,\n              screenName: \"worklistSample\",\n              operation: operation.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openChildModal\");\n        }\n      }\n    };\n\n    this.selectionChange = event => {\n      let addedComponentList = this.state.addedComponentList || [];\n      const addComponentDataList = this.state.addComponentDataList.map(item => {\n        if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\n          item.selected = !event.dataItem.selected;\n\n          if (item.selected) {\n            const newItem = JSON.parse(JSON.stringify(item));\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            delete newItem['selected']; //newItem.selected = false;\n\n            newItem[\"jsondata\"]['worklist'] = item;\n            newItem[\"jsonuidata\"]['worklist'] = item;\n            addedComponentList.push(newItem);\n          } else {\n            addedComponentList = addedComponentList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode);\n          }\n        }\n\n        return item;\n      });\n      this.setState({\n        addComponentDataList,\n        addedComponentList,\n        addSelectAll: this.valiateCheckAll(addComponentDataList),\n        deleteSelectAll: this.valiateCheckAll(addedComponentList)\n      });\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataState: event.dataState\n      });\n    };\n\n    this.specificationReport = ncontrolCode => {\n      if (this.props.Login.masterData.selectedWorklist) {\n        const inputParam = {\n          stablename: \"worklistcode\",\n          primaryKeyField: \"nworklistcode\",\n          sreportlink: this.props.Login.reportSettings[15],\n          smrttemplatelink: this.props.Login.reportSettings[16],\n          nreporttypecode: REPORTTYPE.CONTROLBASED,\n          ncontrolcode: ncontrolCode,\n          primaryKeyValue: this.props.Login.masterData.selectedWorklist.nworklistcode,\n          nworklistcode: this.props.Login.masterData.selectedWorklist.nworklistcode,\n          nworklistcode_componentcode: REPORTTYPE.CONTROLBASED,\n          nworklistcode_componentname: designComponents.NUMBER,\n          ntranscode: this.props.Login.masterData.selectedWorklist.ntransactionstatus,\n          userinfo: this.props.Login.userInfo\n        }; //this.props.reportWorklist(inputParam['inputData']);\n\n        this.props.generateControlBasedReport(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_REPORTCANNOTGENERATEFORCOMPWITHOUTTEST\"\n        }));\n      }\n    };\n\n    this.headerSelectionChange = event => {\n      const checked = event.syntheticEvent.target.checked;\n      let addComponentDataList = event.target.props.data; //this.state.addedComponentList || [];\n\n      let addedComponentList = [];\n\n      if (checked) {\n        const data = event.target.props.data.map(item => {\n          //const data = this.state.addComponentDataList.map(item => {\n          if (addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\n            // addedComponentList.push({ ...item, selected: false });\n            item.selected = checked;\n            const newItem = JSON.parse(JSON.stringify(item));\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            delete newItem['selected']; //newItem.selected = false;\n\n            newItem[\"jsondata\"]['worklist'] = item;\n            newItem[\"jsonuidata\"]['worklist'] = item;\n            addedComponentList.push(newItem); //item.selected = false;\n\n            return item;\n          } else {\n            let olditem = JSON.parse(JSON.stringify(addedComponentList[addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]));\n            olditem.selected = checked;\n            let newItem = JSON.parse(JSON.stringify(olditem));\n            newItem.selected = false;\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            delete newItem['selected'];\n            newItem[\"jsondata\"]['worklist'] = olditem;\n            newItem[\"jsonuidata\"]['worklist'] = olditem;\n            addedComponentList.push(newItem);\n            return olditem;\n          }\n        });\n        this.setState({\n          addComponentDataList: data,\n          addedComponentList,\n          addSelectAll: this.valiateCheckAll(addedComponentList),\n          deleteSelectAll: this.valiateCheckAll(addedComponentList),\n          addSelectAll: checked,\n          deleteSelectAll: false\n        });\n      } //   if (checked) {\n      //     const data = event.dataItems.map(item => {\n      //         if (addComponentDataList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\n      //           addComponentDataList.push({ ...item, selected: false });\n      //             item.selected = checked;  \n      //             let newItem = JSON.parse(JSON.stringify(item));\n      //             newItem.selected = false;\n      //             newItem[\"jsondata\"]={};\n      //             newItem[\"jsonuidata\"]={};\n      //             newItem[\"jsondata\"]['worklist'] = item\n      //             newItem[\"jsonuidata\"]['worklist'] = item    \n      //             addedComponentList.push(newItem);\n      //             return item;\n      //         } else {\n      //             let olditem = JSON.parse(JSON.stringify(addComponentDataList[addComponentDataList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\n      //             olditem.selected = checked;\n      //             let newItem = JSON.parse(JSON.stringify(olditem));\n      //             newItem.selected = false;\n      //             newItem[\"jsondata\"]={};\n      //             newItem[\"jsonuidata\"]={};\n      //             newItem[\"jsondata\"]['worklist'] = olditem\n      //             newItem[\"jsonuidata\"]['worklist'] = olditem\n      //             addedComponentList.push(newItem);\n      //             return olditem;\n      //         }\n      //     });\n      //     this.setState({\n      //       addComponentDataList: data,\n      //         addedComponentList:addedComponentList,\n      //         addComponentDataList,\n      //         addSelectAll: checked,\n      //         deleteSelectAll: false\n      //     });\n      // }\n      else {\n        let addedComponentData = this.state.addedComponentList || [];\n        let deletedListdData = this.state.deletedList || [];\n        const data = this.state.addComponentDataList.map(item => {\n          addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== item.npreregno);\n          deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\n          item.selected = checked;\n          return item;\n        }); // console.log(\"data:\",data1, data2);\n\n        this.setState({\n          addComponentDataList: data,\n          addedComponentList: addedComponentData,\n          deletedList: deletedListdData,\n          addSelectAll: this.valiateCheckAll(addedComponentList),\n          deleteSelectAll: this.valiateCheckAll(addedComponentList),\n          addSelectAll: checked,\n          deleteSelectAll: false\n        });\n      }\n    };\n\n    this.addSaveDataGrid = () => {\n      if (this.state.addedComponentList.length > 0) {\n        let addComponentSortedList = [];\n        const updatedList = this.state.addComponentDataList.filter(item => !this.state.addedComponentList.some(addedItem => addedItem.ntransactiontestcode === item.ntransactiontestcode));\n\n        if (this.state.addComponentSortedList.length > 0) {\n          this.state.addComponentSortedList.map(item => {\n            addComponentSortedList.push(item);\n          });\n        }\n\n        this.state.addedComponentList.map(item => {\n          addComponentSortedList.push(item);\n        });\n        this.setState({\n          addComponentDataList: updatedList,\n          addSelectAll: this.valiateCheckAll(updatedList),\n          addComponentSortedList: addComponentSortedList,\n          addedComponentList: []\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELCETONESAMPLE\"\n        }));\n      }\n    };\n\n    this.handleClickDelete = row => {\n      let updatedAddList = [];\n      const ntransactiontestcode = row.dataItem.ntransactiontestcode;\n      const updatedList = this.state.addComponentSortedList.filter(item => item.ntransactiontestcode !== ntransactiontestcode);\n      const exists = this.state.addComponentDataList.some(item => item.ntransactiontestcode === ntransactiontestcode);\n\n      if (!exists) {\n        updatedAddList = this.state.addComponentDataList.map(item => {\n          return item;\n        });\n        updatedAddList.push({ ...row.dataItem,\n          selected: false\n        });\n      }\n\n      this.setState({\n        addComponentDataList: updatedAddList,\n        addComponentSortedList: updatedList\n      });\n    };\n\n    this.validateEsign = () => {\n      let modalName = this.props.Login.screenName === \"worklistSample\" ? \"openChildModal\" : \"openModal\";\n      const inputParam = {\n        inputData: {\n          userinfo: { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n\n      if (this.props.Login.operation === \"prepare\") {\n        this.props.validateEsignforWorklist(inputParam, modalName, this.confirmMessage);\n      } else {\n        this.props.validateEsignCredential(inputParam, modalName);\n      } // this.props.validateEsignCredential(inputParam, \"openModal\");\n\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      const deleteSecId = this.state.controlMap.has(\"DeleteWorklistSample\") && this.state.controlMap.get(\"DeleteWorklistSample\").ncontrolcode;\n      const addSampleId = this.state.controlMap.has(\"AddSamples\") && this.state.controlMap.get(\"AddSamples\").ncontrolcode;\n      const viewSampleId = this.state.controlMap.has(\"ViewWorklistSample\") && this.state.controlMap.get(\"ViewWorklistSample\").ncontrolcode;\n      tabMap.set(\"IDS_WORKLISTSAMPLE\", /*#__PURE__*/React.createElement(WorklistSampleTab, {\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        dataState: this.state.WorklistSamples,\n        selectedWorklist: this.state.WorklistSamples,\n        extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n        detailedFieldList: this.gridfillingColumnGridMoreItem(this.state.DynamicGridMoreItem) || [],\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        deleteRecord: this.DeleteWorklistSample,\n        deleteSecId: deleteSecId,\n        defaultRecord: this.defaultRecord,\n        WorklistSamples: this.state.WorklistSamples || [],\n        viewSample: this.viewSample,\n        screenName: \"IDS_WORKLISTSAMPLE\",\n        selectedRecord: this.state.selectedRecord,\n        settings: this.props.Login.settings,\n        getWorklistSample: this.props.getWorklistSample,\n        masterData: this.props.Login.masterData,\n        addSampleId: addSampleId,\n        viewSampleId: viewSampleId,\n        dataStateSample: this.state.dataState,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1048,\n          columnNumber: 7\n        }\n      }));\n      tabMap.set(\"IDS_WORKLISTHISTORY\", /*#__PURE__*/React.createElement(WorklistHistoryTab, {\n        dataState: this.props.Login.masterData.WorklistHistory,\n        selectedWorklistHistory: this.props.Login.masterData.WorklistHistory,\n        InstrumentSection: this.props.Login.masterData.WorklistHistory || [],\n        userInfo: this.props.Login.userInfo //inputParam={this.props.Login.inputParam}\n        // deleteRecord={this.DeleteWorklistSample}\n        // deleteSecId={deleteSecId}\n        // defaultSecId={defaultSecId}\n        // defaultRecord={this.defaultRecord}\n        ,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_WORKLISTHISTORY\",\n        selectedRecord: this.state.selectedRecord,\n        settings: this.props.Login.settings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1075,\n          columnNumber: 7\n        }\n      }));\n      return tabMap;\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n\n      if (screenName == \"IDS_WORKLISTHISTORY\") {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          nworklistcode: this.props.Login.masterData.selectedWorklist.nworklistcode\n        };\n        this.props.getWorklisthistoryAction(inputData, true);\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName,\n            activeKey: \"IDS_WORKLISTSAMPLE\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      this.props.Login.masterData.searchedData = undefined;\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromdate, this.props.Login.masterData.todate, this.props.Login.userInfo);\n      let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\n      let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\n      let defaultSampleTypeValue = this.props.Login.masterData.defaultSampleTypeValue;\n      let defaultRegTypeValue = this.props.Login.masterData.defaultRegTypeValue;\n      let defaultRegSubTypeValue = this.props.Login.masterData.defaultRegSubTypeValue;\n      let defaultFilterStatusValue = this.props.Login.masterData.defaultFilterStatusValue;\n      let defaultApprovalVersionValue = this.props.Login.masterData.defaultApprovalVersion;\n      let defaultApprovalVersion = this.props.Login.masterData.defaultApprovalVersionValue;\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate,\n        realToDate,\n        defaultSampleTypeValue,\n        defaultRegTypeValue,\n        defaultRegSubTypeValue,\n        defaultFilterStatusValue,\n        defaultApprovalVersionValue\n      };\n      let inputData = {\n        nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue && this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: parseInt(this.props.Login.masterData.defaultRegTypeValue && this.props.Login.masterData.defaultRegTypeValue.nregtypecode) || -1,\n        nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegSubTypeValue && this.props.Login.masterData.defaultRegSubTypeValue.nregsubtypecode) || -1,\n        //  ntransactionstatus: (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1,\n        ntransactionstatus: (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1,\n        userinfo: this.props.Login.userInfo,\n        napprovalconfigversioncode: this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode || -1\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalconfigversioncode !== -1 && inputData.ntransactionstatus !== \"-1\") {\n        inputData['fromdate'] = obj.fromDate;\n        inputData['todate'] = obj.toDate;\n        inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\n        let inputParam = {\n          masterData,\n          inputData,\n          searchTestRef: this.searchTestRef,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake,\n          isClearSearch: this.props.Login.isClearSearch\n        };\n        this.props.getWorklistDetailFilter(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.ConfirmDelete = (operation, deleteId) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.DeleteWorklist(operation, deleteId, operation.screenName ? operation.screenName : \"IDS_WORKLIST\"));\n    };\n\n    this.DeleteWorklist = (operation, ncontrolCode) => {\n      let inputData = [];\n      inputData[\"worklist\"] = this.props.Login.masterData.selectedWorklist;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromdate, this.props.Login.masterData.todate, this.props.Login.userInfo);\n      inputData['fromdate'] = obj.fromDate;\n      inputData['todate'] = obj.toDate;\n      inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\n      inputData[\"napprovalconfigversioncode\"] = this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode;\n      inputData[\"ntransactionstatus\"] = (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1;\n      const postParam = {\n        inputListName: \"Worklist\",\n        selectedObject: \"selectedWorklist\",\n        primaryKeyField: \"nworklistcode\",\n        primaryKeyValue: this.props.Login.masterData.selectedWorklist.nworklistcode,\n        fetchUrl: \"worklist/getWorklistSelectSample\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo,\n          ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n          nneedsampleandhistory: transactionStatus.YES\n        }\n      };\n      const inputParam = {\n        methodUrl: \"Worklist\",\n        postParam,\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        operation: operation.operation\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"Worklist\",\n            operation: operation.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onApproveClick = () => {\n      //onClick={() => this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, approvalId)}\n      //if (this.props.Login.masterData.SelectedSupplier.ntransactionstatus === transactionStatus.DRAFT) {\n      const ncontrolCode = this.state.controlMap.has(\"GenerateWorklist\") && this.state.controlMap.get(\"GenerateWorklist\").ncontrolcode;\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      const masterData = this.props.Login.masterData; // //add               \n\n      let postParam = undefined;\n      inputData[\"worklist\"] = masterData.selectedWorklist;\n      inputData[\"ncontrolCode\"] = ncontrolCode;\n      inputData[\"ndesigntemplatemappingcode\"] = masterData.ndesigntemplatemappingcode;\n      inputData[\"ntransactionstatus\"] = (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1; // inputData[\"supplier\"] = this.props.Login.masterData.SelectedSupplier;\n\n      postParam = {\n        inputListName: \"Worklist\",\n        selectedObject: \"selectedWorklist\",\n        primaryKeyField: \"nworklistcode\",\n        primaryKeyValue: this.props.Login.masterData.selectedWorklist.nworklistcode,\n        fetchUrl: \"worklist/getWorklistSelectSample\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo,\n          ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n          nneedsampleandhistory: transactionStatus.YES\n        }\n      };\n      const inputParam = {\n        classUrl: 'worklist',\n        methodUrl: \"Worklist\",\n        inputData: inputData,\n        operation: \"prepare\",\n        postParam\n      };\n      let saveType;\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            openModal: true,\n            operation: \"prepare\",\n            screenName: \"Worklist\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        //this.props.crudMaster(inputParam, masterData, \"openModal\");\n        this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, ncontrolCode);\n      }\n    };\n\n    this.dataStateChange1 = event => {\n      this.setState({\n        dataResult: process(this.state.addComponentDataList || [], event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData !== null) {\n        switch (caseNo) {\n          case 1:\n            if (selectedRecord[fieldName] && selectedRecord[fieldName].value !== comboData.value) {\n              delete selectedRecord[\"ntestcode\"];\n            }\n\n            selectedRecord[fieldName] = comboData; //this.setState({ selectedRecord });\n\n            this.props.getSectionbaseTest(selectedRecord, this.props.Login.userInfo, this.props.Login.masterData, this.props.Login.ncontrolCode);\n            break;\n\n          default:\n            break;\n        }\n      } else {\n        if (selectedRecord[\"nsectioncode\"]) {\n          delete selectedRecord[\"nsectioncode\"];\n          delete selectedRecord[\"nusercode\"];\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let modalShow = this.props.Login.modalShow;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let openChildModal = this.props.Login.openChildModal;\n\n      if (this.props.Login.loadEsign) {\n        if ((this.props.Login.operation.operation ? this.props.Login.operation.operation : this.props.Login.operation) === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false; // selectedRecord[\"agree\"] = transactionStatus.NO;\n\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n          modalShow = true;\n          openModal = false;\n          openChildModal = false;\n        }\n      } else {\n        openModal = false;\n        modalShow = false;\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          modalShow,\n          loadEsign,\n          selectedRecord,\n          selectedId: null,\n          openChildModal\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.viewSample = viewdetails => {\n      //let openModal = this.props.Login.openModal;\n      //let openModal = true;\n      //let screenName = 'IDS_VIEWDETAILS'\n      this.props.ViewSampleDetails(this.props.Login.masterData, \"IDS_PREVIOUSRESULTVIEW\", this.props.Login.userInfo, viewdetails);\n    };\n\n    this.closeModalShow = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let modalShow = this.props.Login.modalShow;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        loadEsign = false;\n      } else {\n        modalShow = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          modalShow,\n          selectedRecord,\n          selectedId: null,\n          loadEsign\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      let inputValues = {\n        RegistrationSubType: this.props.Login.masterData.realRegistrationSubTypeList || [],\n        RegistrationType: this.props.Login.masterData.realRegistrationTypeList || [],\n        FilterStatus: this.props.Login.masterData.realFilterStatusList || [],\n        SampleType: this.props.Login.masterData.realSampleTypeList || [],\n        ApprovalConfigVersion: this.props.Login.masterData.realApprovalConfigVersionList || [],\n        FilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\n        ApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue || {},\n        RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue || {},\n        RegTypeValue: this.props.Login.masterData.realRegTypeValue || {},\n        SampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\n        fromDate: this.props.Login.masterData.fromdate || new Date(),\n        // ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date(),\n        toDate: this.props.Login.masterData.todate || new Date(),\n        // ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date(),\n        defaultSampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\n        defaultApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue || {}\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false,\n          masterData: { ...this.props.Login.masterData,\n            ...inputValues\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.searchRef.current.value = \"\";\n      this.props.Login.masterData.searchedData = undefined;\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n      let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\n      let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\n      let fromdate = this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date();\n      let todate = this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date();\n      let defaultSampleTypeValue = this.props.Login.masterData.defaultSampleTypeValue;\n      let defaultRegTypeValue = this.props.Login.masterData.RegTypeValue;\n      let defaultRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue;\n      let defaultFilterStatusValue = this.props.Login.masterData.FilterStatusValue;\n      let defaultApprovalVersion = this.props.Login.masterData.defaultApprovalVersionValue;\n      let RealSampleTypeValue = this.props.Login.masterData.defaultSampleTypeValue;\n      let realApprovalVersionValue = this.props.Login.masterData.defaultApprovalVersionValue;\n      let realRegTypeValue = this.props.Login.masterData.RegTypeValue;\n      let realRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue;\n      let RealFilterStatusValue = this.props.Login.masterData.FilterStatusValue;\n      let realApprovalConfigVersionList = this.props.Login.masterData.ApprovalConfigVersion;\n      let realFilterStatusList = this.props.Login.masterData.FilterStatus;\n      let realRegistrationTypeList = this.props.Login.masterData.RegistrationType;\n      let realRegistrationSubTypeList = this.props.Login.masterData.RegistrationSubType;\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate,\n        realToDate,\n        defaultSampleTypeValue,\n        defaultRegTypeValue,\n        defaultRegSubTypeValue,\n        defaultFilterStatusValue,\n        defaultApprovalVersion,\n        fromdate,\n        todate,\n        RealSampleTypeValue,\n        realApprovalVersionValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        RealFilterStatusValue,\n        realApprovalConfigVersionList,\n        realFilterStatusList,\n        realRegistrationTypeList,\n        realRegistrationSubTypeList\n      };\n      let inputData = {\n        //npreregno: \"0\",\n        nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue && this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: parseInt(this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode) || -1,\n        nregsubtypecode: parseInt(this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode) || -1,\n        // ntransactionstatus: (this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus) || -1,\n        ntransactionstatus: this.props.Login.masterData.FilterStatusValue && (this.props.Login.masterData.FilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.FilterStatusValue.ntransactionstatus),\n        napprovalconfigversioncode: this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode || -1,\n        userinfo: this.props.Login.userInfo // activeTestTab: this.props.Login.activeTestTab,\n\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalconfigversioncode !== -1 && inputData.ntransactionstatus !== \"-1\") {\n        inputData['fromdate'] = obj.fromDate;\n        inputData['todate'] = obj.toDate;\n        inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\n        let inputParam = {\n          masterData,\n          inputData,\n          searchTestRef: this.searchTestRef,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake\n        };\n        this.props.getWorklistDetailFilter(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    const sectionDataState = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      selectedRecord: {},\n      error: \"\",\n      userRoleControlRights: [],\n      selectedWorklist: undefined,\n      controlMap: new Map(),\n      Instrument: [],\n      sectionDataState,\n      addComponentDataList: [],\n      addedComponentList: [],\n      addComponentSortedList: [],\n      RegistrationSubTypeList: [],\n      FilterStatusList: [],\n      SampletypeList: [],\n      RegTypeValue: [],\n      ConfigVersionList: [],\n      sidebarview: false\n    };\n    this.searchRef = React.createRef();\n    this.searchFieldList = [\"sworklistno\", \"stestname\"];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  gridfillingColumn(data) {\n    const temparray = [];\n    data && data.map(option => {\n      if (option[designProperties.VALUE] !== \"dregdate\") {\n        temparray.push({\n          \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n          \"dataField\": option[designProperties.VALUE],\n          \"width\": \"200px\",\n          \"columnSize\": \"3\"\n        });\n      }\n    });\n\n    if (temparray) {\n      temparray.push({\n        \"idsName\": \"IDS_REGISTRATIONDATE\",\n        \"dataField\": \"sregistereddate\",\n        \"width\": \"250px\",\n        \"columnSize\": \"3\"\n      });\n    }\n\n    return temparray;\n  }\n\n  gridfillingColumnGridMoreItem(data) {\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n        \"dataField\": option[designProperties.VALUE],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\"\n      };\n    });\n    return temparray;\n  } // onNumericInputOnChange = (value, name) => {\n  //   const selectedRecord = this.state.selectedRecord || {};\n  //   selectedRecord[name] = value;\n  //   this.setState({ selectedRecord });\n  // };\n  // ADDed by Neeraj-ALPD-5136\n  //WorkList Screen -> Including filter in Data selection Kendo Grid \n  //Command by neeraj\n  // selectionChange = (event) => {\n  //   let addedComponentList = this.state.addedComponentList || [];\n  //   const addComponentDataList = this.state.addComponentDataList.map(item => {\n  //     let newItem;\n  //     if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\n  //       item.selected = !event.dataItem.selected;\n  //       newItem = JSON.parse(JSON.stringify(item));\n  //       newItem[\"jsondata\"] = {}\n  //       newItem[\"jsonuidata\"] = {}\n  //       //delete newItem['selected']\n  //       newItem[\"jsondata\"]['worklist'] = item\n  //       newItem[\"jsonuidata\"]['worklist'] = item\n  //       if (item.selected) {\n  //         newItem.selected = true;\n  //         addedComponentList.push(newItem);\n  //       }\n  //       else {\n  //         addedComponentList = addedComponentList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode)\n  //       }\n  //     }\n  //     return newItem || item;\n  //   });\n  //   this.setState({\n  //     addComponentDataList, addedComponentList,\n  //     addSelectAll: this.valiateCheckAll(this.state.dataState && this.state.dataState.filter && this.state.dataState.filter !== null\n  //       ? process(addComponentDataList || [], this.state.dataState).data : addComponentDataList),\n  //     deleteSelectAll: this.valiateCheckAll(addedComponentList)\n  //   });\n  // }\n\n\n  // onApproveClick = () => {\n  //   //if (this.props.Login.masterData.SelectedSupplier.ntransactionstatus === transactionStatus.DRAFT) {\n  //   const ncontrolCode = this.state.controlMap.has(\"ApproveSupplier\") && this.state.controlMap.get(\"ApproveSupplier\").ncontrolcode\n  //   let inputData = [];\n  //   inputData[\"userinfo\"] = this.props.Login.userInfo;\n  //   //add               \n  //   let postParam = undefined;\n  //   inputData[\"supplier\"] = { \"nsuppliercode\": this.props.Login.masterData.SelectedSupplier[\"nsuppliercode\"] ? this.props.Login.masterData.SelectedSupplier[\"nsuppliercode\"].Value : \"\" };\n  //   inputData[\"supplier\"] = this.props.Login.masterData.SelectedSupplier;\n  //   postParam = { inputListName: \"Supplier\", selectedObject: \"SelectedSupplier\", primaryKeyField: \"nsuppliercode\" };\n  //   const inputParam = {\n  //     classUrl: 'supplier',\n  //     methodUrl: \"Supplier\",\n  //     inputData: inputData,\n  //     operation: \"approve\", postParam\n  //   }\n  //   let saveType;\n  //   const masterData = this.props.Login.masterData;\n  //   const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n  //   if (esignNeeded) {\n  //     const updateInfo = {\n  //       typeName: DEFAULT_RETURN,\n  //       data: {\n  //         loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"approve\"\n  //       }\n  //     }\n  //     this.props.updateStore(updateInfo);\n  //   }\n  //   else {\n  //     this.props.crudMaster(inputParam, masterData, \"openModal\");\n  //   }\n  //   // }\n  //   // else {\n  //   //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTOAPPROVE\" }));\n  //   // }\n  // }\n  valiateCheckAll(data) {\n    let selectAll = true; // let checkRepeatComponent;\n    //  let addedComponentList = this.state.addedComponentList || [];\n\n    if (data && data.length > 0) {\n      data.forEach(dataItem => {\n        if (dataItem.selected) {\n          if (dataItem.selected === false) {\n            selectAll = false;\n          }\n        } else {\n          selectAll = false; // checkRepeatComponent=this.state.addComponentDataList.filter(item=>item.npreregno==data.npreregno)\n          // if(checkRepeatComponent.length>0){\n          //     selectAll = true;\n          // }else{\n          //     selectAll = false;\n          // }\n        }\n      });\n    } else {\n      //if (gridType === \"originalgrid\"){\n      selectAll = false; // }\n    }\n\n    return selectAll;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n    let mandatoryFields = []; // this.feildsForGrid =\n    //   [\n    //     // { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },       \n    //     { \"idsName\": \"IDS_PARAMETER\", \"dataField\": \"sparametersynonym\", \"width\": \"100px\" },\n    //     { \"idsName\": \"IDS_RESULT\", \"dataField\": \"sfinal\", \"width\": \"100px\" },\n    //     { \"idsName\": \"IDS_GRADE\", \"dataField\": \"sgradename\", \"width\": \"200px\" },\n    //   ];\n\n    this.feildsForGrid = [// { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\n    {\n      \"idsName\": \"IDS_REPORTREFNO\",\n      \"dataField\": \"sreportno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      \"dataField\": \"sarno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      \"dataField\": \"ssamplearno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PARAMETER\",\n      \"dataField\": \"sparametersynonym\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_RESULT\",\n      \"dataField\": \"sfinal\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_GRADE\",\n      \"dataField\": \"sgradename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_REGISTRATIONDATE\",\n      \"dataField\": \"sregdate\",\n      \"width\": \"200px\"\n    }];\n    this.extractedColumnList = [//  { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"350px\" },\n    {\n      \"idsName\": \"IDS_NEWCOMMENTS\",\n      \"dataField\": \"scomments\",\n      \"width\": \"350px\"\n    }, {\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_USERROLE\",\n      \"dataField\": \"suserrolename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ACTIONTYPE\",\n      \"dataField\": \"sactiontype\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_MODULENAME\",\n      \"dataField\": \"smodulename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_FORMNAME\",\n      \"dataField\": \"sformname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_REASON\",\n      \"dataField\": \"spredefinedreason\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ESIGNCOMMENTS\",\n      \"dataField\": \"sreason\",\n      \"width\": \"200px\"\n    }]; // const auditInfoFields = [{ \"fieldName\": \"sarno\", \"label\": \"IDS_ARNO\" }, \n    // { \"fieldName\": \"spatientid\", \"label\": \"IDS_PATIENTID\" },   \n    // { \"fieldName\": \"sfirstname\", \"label\": \"IDS_PATIENTNAME\" },\n    // { \"fieldName\": \"sage\", \"label\": \"IDS_AGE\" },\n    // { \"fieldName\": \"sgendername\", \"label\": \"IDS_GENDER\" },\n    // { \"fieldName\": \"stestsynonym\", \"label\": \"IDS_TEST\" },\n    // { \"fieldName\": \"sregdate\", \"label\": \"IDS_REGISTRATIONDATE\" },\n    // { \"fieldName\": \"scompletedate\", \"label\": \"IDS_COMPLETEDDATEANDTIME\" }\n    // ];\n\n    const auditInfoFields = [{\n      \"label\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      \"fieldName\": \"sarno\"\n    }, {\n      \"fieldName\": \"stestsynonym\",\n      \"label\": \"IDS_TEST\"\n    }, {\n      \"fieldName\": \"sfirstname\",\n      \"label\": \"IDS_PATIENTNAME\"\n    }, {\n      \"fieldName\": \"sgendername\",\n      \"label\": \"IDS_GENDER\"\n    }];\n\n    if (this.props.Login.screenName === \"IDS_WORKLIST\") {\n      mandatoryFields.push({\n        mandatory: true,\n        idsName: \"IDS_ADDSECTION\",\n        dataField: \"nsectioncode\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      }, {\n        mandatory: true,\n        idsName: \"IDS_TEST\",\n        dataField: \"ntestcode\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      });\n    }\n\n    const addId = this.state.controlMap.has(\"AddWorklist\") && this.state.controlMap.get(\"AddWorklist\").ncontrolcode; // const editId =\n    //   this.state.controlMap.has(\"EditWorklist\") &&\n    //   this.state.controlMap.get(\"EditWorklist\").ncontrolcode;\n\n    const deleteId = this.state.controlMap.has(\"DeleteWorklist\") && this.state.controlMap.get(\"DeleteWorklist\").ncontrolcode;\n    const approvalId = this.state.controlMap.has(\"GenerateWorklist\") && this.state.controlMap.get(\"GenerateWorklist\").ncontrolcode;\n    const reportId = this.state.controlMap.has(\"WorklistReport\") && this.state.controlMap.get(\"WorklistReport\").ncontrolcode; // const addSampleId =\n    //   this.state.controlMap.has(\"AddWorklistSample\") &&\n    //   this.state.controlMap.get(\"AddWorklistSample\").ncontrolcode;\n    // const deleteSampleId =\n    // this.state.controlMap.has(\"DeleteWorklistSample\") &&\n    // this.state.controlMap.get(\"DeleteWorklistSample\").ncontrolcode;\n\n    const {\n      selectedWorklist\n    } = this.props.Login.masterData;\n    const filterParam = {\n      inputListName: \"Worklist\",\n      selectedObject: \"selectedWorklist\",\n      primaryKeyField: \"nworklistcode\",\n      fetchUrl: \"worklist/getWorklistSample\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    const breadCrumbData = this.state.filterData || [];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1213,\n        columnNumber: 9\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1215,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1216,\n        columnNumber: 15\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1221,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1222,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: \"worklist\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.Worklist,\n      getMasterDetail: worklist => this.props.getWorklistDetail(worklist, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedWorklist,\n      primaryKeyField: \"nworklistcode\",\n      mainField: \"sworklistno\",\n      firstField: \"stestname\",\n      secondField: \"ssectionname\",\n      isIDSField: \"Yes\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      searchRef: this.searchRef,\n      addId: addId,\n      hideCheckLabel: true,\n      hidePaging: false,\n      reloadData: this.reloadData,\n      openModal: () => this.props.getSectionAndTest(\"IDS_WORKLIST\", \"create\", \"nworklistcode\", this.props.Login.masterData, this.props.Login.userInfo, addId),\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      callCloseFunction: true,\n      filterComponent: [{\n        IDS_WORKLISTFILTER: /*#__PURE__*/React.createElement(WorklistPreparationFilter, {\n          SampleTypeValue: this.props.Login.masterData.defaultSampleTypeValue || {},\n          RegTypeValue: this.props.Login.masterData.RegTypeValue || {},\n          RegSubTypeValue: this.props.Login.masterData.RegSubTypeValue || {},\n          RegSubType: this.state.RegistrationSubTypeList || [],\n          RegType: this.state.RegistrationTypeList || [],\n          userInfo: this.props.Login.userInfo || {},\n          ApprovalVersion: this.state.ConfigVersionList || [],\n          ApprovalVersionValue: this.props.Login.masterData.defaultApprovalVersionValue || [] //SampleType={this.state.stateSampleType || []}\n          ,\n          FilterStatusValue: this.props.Login.masterData.FilterStatusValue || {},\n          FilterStatus: this.state.FilterStatusList || [],\n          RegistrationType: this.state.stateRegistrationType || [],\n          RegistrationSubType: this.state.stateRegistrationSubType || [],\n          fromDate: this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date(),\n          toDate: this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date(),\n          handleDateChange: this.handleDateChange,\n          onFilterComboChange: this.onFilterComboChange,\n          SampleType: this.state.SampletypeList || [],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1272,\n            columnNumber: 23\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1223,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '8' : \"10\"}`,\n      className: \"position-relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1299,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1300,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn \",\n      onClick: this.props.parentFunction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1301,\n        columnNumber: 17\n      }\n    }, !this.props.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1303,\n        columnNumber: 21\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1304,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1308,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1309,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1310,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1311,\n        columnNumber: 21\n      }\n    }, this.props.Login.masterData.Worklist && this.props.Login.masterData.Worklist.length > 0 && this.props.Login.masterData.selectedWorklist ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1315,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1316,\n        columnNumber: 31\n      }\n    }, this.props.Login.masterData.selectedWorklist.sworklistno), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1322,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1323,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1324,\n        columnNumber: 35\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn btn-outlined ${this.props.Login.masterData.selectedWorklist.ntransactionstatus === 83 ? \"outline-success\" : \"outline-secondary\"} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1325,\n        columnNumber: 37\n      }\n    }, this.props.Login.masterData.selectedWorklist.ntransactionstatus === 83 && /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1326,\n        columnNumber: 114\n      }\n    }), this.props.Login.masterData.selectedWorklist.stransdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1330,\n        columnNumber: 35\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteWorklist\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //   data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.ConfirmDelete({\n        operation: \"delete\",\n        screenName: \"IDS_WORKLIST\"\n      }, deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1350,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1372,\n        columnNumber: 39\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approvalId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_PREPARED\"\n      }) //onClick={() => this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, approvalId)}\n      ,\n      onClick: () => this.onApproveClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1375,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Closure, {\n      className: \"custom_icons\",\n      width: \"18\",\n      height: \"23\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1382,\n        columnNumber: 39\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(reportId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REPORT\"\n      }) //onClick={() => this.specificationReport(reportId)}\n      ,\n      onClick: () => this.props.generateControlBasedReport(reportId, this.props.Login.masterData.selectedWorklist, this.props.Login, \"worklist\", this.props.Login.masterData.selectedWorklist.nworklistcode),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1386,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Report, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1393,\n        columnNumber: 39\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1403,\n        columnNumber: 29\n      }\n    }, selectedWorklist && /*#__PURE__*/React.createElement(CustomTab, {\n      activeKey: this.props.Login.activeKey ? this.props.Login.activeKey : \"IDS_WORKLISTSAMPLE\",\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1406,\n        columnNumber: 33\n      }\n    }))) : \"\"))))))), (this.props.Login.openModal || this.props.Login.openChildModal) && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal || this.props.Login.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      mandatoryFields: mandatoryFields,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      hideSave: this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" ? true : false,\n      size: this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" || this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\" ? \"xl\" : \"lg\",\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1447,\n          columnNumber: 17\n        }\n      }) : this.props.Login.screenName === \"IDS_WORKLIST\" ? /*#__PURE__*/React.createElement(AddWorklistSection //onNumericInputOnChange={this.onNumericInputOnChange}\n      , {\n        selectedRecord: this.props.Login.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        SectionValue: this.props.Login.Section,\n        TestValue: this.props.Login.Test,\n        handleDateChange: this.handleDateChange,\n        dataState: this.state.dataState,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1455,\n          columnNumber: 19\n        }\n      }) : this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\" ? /*#__PURE__*/React.createElement(AddWorklistSample, {\n        selectionChange: this.selectionChange,\n        headerSelectionChange: this.headerSelectionChange,\n        addComponentDataList: this.state.addComponentDataList || [],\n        addSelectAll: this.state.addSelectAll //onNumericInputOnChange={this.onNumericInputOnChange}\n        ,\n        selectedRecord: this.props.Login.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        TestValue: this.props.Login.Test,\n        userInfo: this.props.Login.userInfo,\n        handleDateChange: this.handleDateChange,\n        dataResult: this.state.dataResult ? this.state.dataResult : process(this.state.addComponentDataList || [], this.state.dataState ? this.state.dataState : {\n          skip: 0,\n          take: 10\n        }),\n        dataState: this.state.dataState ? this.state.dataState : {\n          skip: 0,\n          take: 10\n        },\n        dataStateChange1: this.dataStateChange1,\n        nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        addSaveDataGrid: this.addSaveDataGrid,\n        addComponentSortedList: this.state.addComponentSortedList || [],\n        handleClickDelete: this.handleClickDelete,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1469,\n          columnNumber: 21\n        }\n      }) : this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n        className: \"one\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1497,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1498,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(SpecificationInfo, {\n        controlMap: this.state.controlMap,\n        auditInfoFields: auditInfoFields,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedSpecification: this.props.Login.masterData.viewdetails,\n        userInfo: this.props.Login.userInfo,\n        selectedNode: this.props.Login.masterData.selectedNode,\n        selectedRecord: this.state.filterData,\n        approvalRoleActionDetail: this.props.Login.masterData.ApprovalRoleActionDetail,\n        screenName: \"IDS_PREVIOUSRESULTVIEW\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1499,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1513,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"ntransactiontestcode\",\n        data: this.props.Login.masterData.AuditModifiedComments || [],\n        detailedFieldList: this.feildsForGrid,\n        extractedColumnList: this.feildsForGrid,\n        dataResult: this.props.Login.masterData.AuditModifiedComments && this.props.Login.masterData.AuditModifiedComments.length > 0 && process(this.props.Login.masterData.AuditModifiedComments, this.state.dataState ? this.state.dataState : {\n          skip: 0,\n          take: 10\n        }) //dataState={{ skip: 0, take: 10 }}\n        ,\n        dataState: this.state.dataState ? this.state.dataState : {\n          skip: 0,\n          take: 10\n        },\n        selectionChange: this.selectionChange,\n        headerSelectionChange: this.headerSelectionChange,\n        pageable: true,\n        scrollable: 'scrollable',\n        dataStateChange: this.dataStateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1515,\n          columnNumber: 25\n        }\n      })) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1429,\n        columnNumber: 11\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      selectedRecord,\n      addedComponentList,\n      userRoleControlRights,\n      controlMap,\n      filterData,\n      nfilterInstrumentCategory,\n      filterInstrumentCategory,\n      RegistrationSubTypeList,\n      FilterStatusList,\n      SampletypeList,\n      RegistrationTypeList,\n      DynamicGridItem,\n      DynamicGridMoreItem,\n      ConfigVersionList,\n      subsampleGridItem,\n      sampleGridItem,\n      testGridItem = [],\n      samplegridmoreitem,\n      testGridItems,\n      addSelectAll,\n      deleteSelectAll\n    } = this.state;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      updateState = true;\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      updateState = true;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\n      RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\n      const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\n      RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\n      const FilterStatusListMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\", \"stransdisplaystatus\", undefined, undefined, false);\n      FilterStatusList = FilterStatusListMap.get(\"OptionList\");\n      const SampletypeListMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'ascending', 'nsampletypecode', false);\n      SampletypeList = SampletypeListMap.get(\"OptionList\");\n      const ConfigVersionListMap = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], \"napprovalconfigversioncode\", \"sversionname\", 'descending', 'ntransactionstatus', false);\n      ConfigVersionList = ConfigVersionListMap.get(\"OptionList\");\n      nfilterInstrumentCategory = this.state.nfilterInstrumentCategory || {};\n      addSelectAll = false;\n      deleteSelectAll = true;\n\n      if (this.props.Login.masterData.SelectedInsCat && this.props.Login.masterData.SelectedInsCat !== previousProps.Login.masterData.SelectedInsCat) {\n        nfilterInstrumentCategory = {\n          label: this.props.Login.masterData.SelectedInsCat.stestsynonym,\n          value: this.props.Login.masterData.SelectedInsCat.ntestcode,\n          item: this.props.Login.masterData.SelectedInsCat\n        };\n      }\n\n      filterData = this.generateBreadCrumData();\n      updateState = true;\n    }\n\n    if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n      const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n      testGridItem[0] = dynamicColumn.testListFields.releasetestfields[0] ? dynamicColumn.testListFields.releasetestfields[0] : [];\n      sampleGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n      subsampleGridItem = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n      testGridItems = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : []; //testGridItem= dynamicColumn.conditionfields ? dynamicColumn.conditionfields : [];\n\n      DynamicGridItem = [...sampleGridItem, ...subsampleGridItem, ...testGridItems.slice(1), ...testGridItem];\n      samplegridmoreitem = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n      DynamicGridMoreItem = [...samplegridmoreitem]; //DynamicGridItem.push(dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [])\n    }\n\n    if (this.props.Login.masterData.filterInstrumentCategory !== previousProps.Login.masterData.filterInstrumentCategory) {\n      const insCategoryMap = constructOptionList(this.props.Login.masterData.filterInstrumentCategory || [], \"ntestcode\", \"stestsynonym\", \"ntestcategorycode\", \"ascending\", false);\n      filterInstrumentCategory = insCategoryMap.get(\"OptionList\");\n\n      if (insCategoryMap.get(\"DefaultValue\")) {\n        nfilterInstrumentCategory = insCategoryMap.get(\"DefaultValue\");\n      } else if (filterInstrumentCategory && filterInstrumentCategory.length > 0) {\n        nfilterInstrumentCategory = filterInstrumentCategory[0];\n      }\n\n      updateState = true;\n    } // let updateState = false;\n\n\n    let updateStateObject = {};\n\n    if (this.props.Login.addedComponentList !== previousProps.Login.addedComponentList) {\n      addSelectAll = false;\n      deleteSelectAll = true;\n      this.setState({\n        addedComponentList: this.props.Login.addedComponentList,\n        addSelectAll,\n        deleteSelectAll\n      });\n    }\n\n    if (this.props.addedComponentList !== previousProps.addedComponentList) {\n      // this.setState({ addedComponentList : this.props.addedComponentList});\n      updateState = true;\n      updateStateObject = { ...updateStateObject,\n        addedComponentList: this.props.addedComponentList\n      };\n    }\n\n    if (this.props.Login.dataState !== previousProps.Login.dataState) {\n      if (this.props.Login.dataState) {\n        delete this.props.Login.dataState.filter;\n        delete this.props.Login.dataState.sort;\n        this.setState({\n          dataState: this.props.Login.dataState\n        });\n      }\n    }\n\n    if (this.props.Login.addComponentDataList !== previousProps.Login.addComponentDataList) {\n      this.setState({\n        addComponentDataList: this.props.Login.addComponentDataList\n      });\n    }\n\n    if (this.props.Login.addComponentSortedList !== previousProps.Login.addComponentSortedList) {\n      this.setState({\n        addComponentSortedList: this.props.Login.addComponentSortedList\n      });\n    } //ADDed by Neeraj-ALPD-5136\n    //WorkList Screen -> Including filter in Data selection Kendo Grid\n\n\n    if (this.props.Login.masterData.WorklistSamples !== previousProps.Login.masterData.WorklistSamples) {\n      let worklistSamplesList = this.props.Login.masterData.WorklistSamples || [];\n      let updatedSortedList = worklistSamplesList.sort((a, b) => {\n        const A = a.nworklistsamplecode;\n        const B = b.nworklistsamplecode; // Corrected from 'a' to 'b'\n\n        return A - B; // Sort in ascending order\n      });\n      this.setState({\n        WorklistSamples: updatedSortedList\n      });\n    }\n\n    if (updateState) {\n      this.setState({\n        selectedRecord,\n        userRoleControlRights,\n        controlMap,\n        filterData,\n        nfilterInstrumentCategory,\n        filterInstrumentCategory,\n        RegistrationSubTypeList,\n        FilterStatusList,\n        SampletypeList,\n        RegistrationTypeList,\n        DynamicGridItem,\n        ConfigVersionList,\n        DynamicGridMoreItem,\n        addSelectAll,\n        deleteSelectAll\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    //obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.Worklist) {\n      const obj = convertDateValuetoString(this.props.Login.masterData.fromdate, this.props.Login.masterData.todate, this.props.Login.userInfo);\n      breadCrumbData.push({\n        \"label\": \"IDS_FROM\",\n        \"value\": obj.breadCrumbFrom\n      }, {\n        \"label\": \"IDS_TO\",\n        \"value\": obj.breadCrumbto\n      }, // {\n      //   \"label\": \"IDS_SAMPLETYPE\",\n      //   \"value\": this.props.Login.masterData.defaultSampleTypeValue ? this.props.Login.masterData.defaultSampleTypeValue.ssampletypename || \"NA\" :\n      //     this.props.Login.masterData.defaultSampleTypeValue ? this.props.Login.masterData.defaultSampleTypeValue.ssampletypename || \"NA\" : \"NA\"\n      // },\n      {\n        \"label\": \"IDS_REGTYPE\",\n        \"value\": this.props.Login.masterData.defaultRegTypeValue ? this.props.Login.masterData.defaultRegTypeValue.sregtypename || \"NA\" : this.props.Login.masterData.defaultRegTypeValue ? this.props.Login.masterData.defaultRegTypeValue.sregtypename || \"NA\" : \"NA\"\n      }, {\n        \"label\": \"IDS_REGSUBTYPE\",\n        \"value\": this.props.Login.masterData.defaultRegSubTypeValue ? this.props.Login.masterData.defaultRegSubTypeValue.sregsubtypename || \"NA\" : this.props.Login.masterData.defaultRegSubTypeValue ? this.props.Login.masterData.defaultRegSubTypeValue.sregsubtypename : \"NA\"\n      }, // {\n      //   \"label\": \"IDS_CONFIGVERSION\",\n      //   \"value\": this.props.Login.masterData.defaultApprovalVersion ?\n      //     this.props.Login.masterData.defaultApprovalVersion.sversionname || \"NA\" :\n      //     this.props.Login.masterData.defaultApprovalVersion ? this.props.Login.masterData.defaultApprovalVersion.sversionname || \"NA\" : \"NA\"\n      // },\n      {\n        \"label\": \"IDS_WORKLISTSTATUS\",\n        \"value\": this.props.Login.masterData.defaultFilterStatusValue ? this.props.Login.masterData.defaultFilterStatusValue.stransdisplaystatus || \"NA\" : this.props.Login.masterData.defaultFilterStatusValue ? this.props.Login.masterData.defaultFilterStatusValue.stransdisplaystatus || \"NA\" : \"NA\"\n      } //];\n      );\n    }\n\n    return breadCrumbData;\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  getWorklistDetail,\n  filterColumnData,\n  getSectionAndTest,\n  updateStore,\n  validateEsignCredential,\n  onWorklistApproveClick,\n  OpenDate,\n  CloseDate,\n  viewAttachment,\n  getInstrumentCombo,\n  getWorklistSample,\n  getRegTypeTestWise,\n  getRegTypeWorklist,\n  getSectionbaseTest,\n  getWorklistDetailFilter,\n  getEditSectionAndTest,\n  createWorklistCreation,\n  getConfigVersionTestWise,\n  ViewSampleDetails,\n  getWorklisthistoryAction,\n  reportWorklist,\n  getRegSubTypeWise,\n  insertWorklist,\n  generateControlBasedReport,\n  validateEsignforWorklist\n})(injectIntl(WorkList));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/worklist/WorkList.jsx"],"names":["React","Component","Row","Col","Card","Nav","FormGroup","FormLabel","connect","toast","FontAwesomeIcon","faCheck","faTrashAlt","WorklistPreparationFilter","rearrangeDateFormat","convertDateValuetoString","formatInputDate","injectIntl","Esign","AddWorklistSection","AddWorklistSample","CustomTab","WorklistHistoryTab","WorklistSampleTab","designProperties","transactionStatus","REPORTTYPE","SUBSAMPLEAUDITMULTILINGUALFIELDS","designComponents","SpecificationInfo","callService","crudMaster","validateEsignCredential","updateStore","getSectionAndTest","getWorklistDetail","OpenDate","CloseDate","viewAttachment","getInstrumentCombo","getWorklistSample","getRegTypeTestWise","getRegTypeWorklist","getSectionbaseTest","onWorklistApproveClick","getWorklistDetailFilter","getEditSectionAndTest","createWorklistCreation","filterColumnData","getConfigVersionTestWise","ViewSampleDetails","getWorklisthistoryAction","reportWorklist","getRegSubTypeWise","insertWorklist","generateControlBasedReport","validateEsignforWorklist","ListMaster","DEFAULT_RETURN","SlideOutModal","showEsign","getControlMap","constructOptionList","ContentPanel","MediaLabel","process","ConfirmMessage","BreadcrumbComponent","Affix","DataGrid","mapStateToProps","state","Login","WorkList","constructor","props","sidebarExpandCollapse","setState","sidebarview","handleDateChange","dateName","dateValue","Date","fromdate","masterData","fromDate","userInfo","todate","toDate","obj","inputParam","inputData","nflag","nregtypecode","RegTypeValue","nregsubtypecode","RegSubTypeValue","nneedtemplatebasedflow","String","userinfo","realApprovalConfigVersionList","realApprovalVersionValue","onFilterComboChange","comboData","fieldName","inputParamData","nsampletypecode","value","defaultSampleTypeValue","item","FilterStatusValue","updateInfo","typeName","data","defaultApprovalVersionValue","onInputOnChange","event","optional","selectedRecord","target","type","name","checked","onSaveClick","saveType","formRef","instSection","screenName","postParam","undefined","nstatus","nmastersitecode","defaultRegTypeValue","defaultRegSubTypeValue","ndesigntemplatemappingcode","napprovalconfigversioncode","controlMap","has","get","ncontrolcode","defaultFilterStatusValue","ntransactionstatus","ALL","FilterStatus","map","join","operation","selectedWorklist","nworklistcode","classUrl","methodUrl","searchRef","userRoleControlRights","nformcode","ncontrolCode","loadEsign","screenData","validList","addedComponentList","length","saveList","compList","addComponentSortedList","x","selected","indexOf","ntransactionsamplecode","push","worklistcompcreationlist","worklistcreation","dataState","selectedId","warn","intl","formatMessage","id","DeleteWorklistSample","sectionDataState","nsitecode","ntranssitecode","nworklistsamplecode","ntransactiontestcode","sarno","ssamplearno","stestsynonym","openChildModal","selectionChange","addComponentDataList","dataItem","newItem","JSON","parse","stringify","filter","item1","addSelectAll","valiateCheckAll","deleteSelectAll","dataStateChange","specificationReport","stablename","primaryKeyField","sreportlink","reportSettings","smrttemplatelink","nreporttypecode","CONTROLBASED","primaryKeyValue","nworklistcode_componentcode","nworklistcode_componentname","NUMBER","ntranscode","headerSelectionChange","syntheticEvent","findIndex","olditem","addedComponentData","deletedListdData","deletedList","npreregno","addSaveDataGrid","updatedList","some","addedItem","handleClickDelete","row","updatedAddList","exists","validateEsign","modalName","sreason","password","confirmMessage","tabDetail","tabMap","Map","deleteSecId","addSampleId","viewSampleId","set","WorklistSamples","gridfillingColumn","DynamicGridItem","gridfillingColumnGridMoreItem","DynamicGridMoreItem","defaultRecord","viewSample","settings","WorklistHistory","onTabChange","tabProps","activeKey","reloadData","current","searchedData","realFromDate","realToDate","defaultApprovalVersion","parseInt","searchTestRef","skip","take","testskip","testtake","isClearSearch","ConfirmDelete","deleteId","confirm","DeleteWorklist","inputListName","selectedObject","fetchUrl","fecthInputObject","nneedsampleandhistory","YES","openModal","onApproveClick","esignNeeded","dataStateChange1","dataResult","onComboChange","caseNo","closeModal","modalShow","viewdetails","closeModalShow","openFilter","showFilter","closeFilter","inputValues","RegistrationSubType","realRegistrationSubTypeList","RegistrationType","realRegistrationTypeList","realFilterStatusList","SampleType","realSampleTypeList","ApprovalConfigVersion","RealFilterStatusValue","ApprovalVersionValue","realRegSubTypeValue","realRegTypeValue","SampleTypeValue","RealSampleTypeValue","onFilterSubmit","error","Instrument","RegistrationSubTypeList","FilterStatusList","SampletypeList","ConfigVersionList","createRef","searchFieldList","temparray","option","VALUE","LABEL","slanguagetypecode","selectAll","forEach","getDerivedStateFromProps","masterStatus","errorCode","render","mandatoryFields","feildsForGrid","genericLabel","extractedColumnList","auditInfoFields","mandatory","idsName","dataField","mandatoryLabel","controlType","addId","approvalId","reportId","filterParam","breadCrumbData","filterData","Worklist","worklist","IDS_WORKLISTFILTER","RegistrationTypeList","stateRegistrationType","stateRegistrationSubType","parentFunction","sworklistno","stransdisplaystatus","Section","Test","nneedsubsample","selectedNode","ApprovalRoleActionDetail","AuditModifiedComments","componentDidUpdate","previousProps","updateState","nfilterInstrumentCategory","filterInstrumentCategory","subsampleGridItem","sampleGridItem","testGridItem","samplegridmoreitem","testGridItems","Object","values","RegistrationSubTypeListMap","RegistrationTypeListMap","FilterStatusListMap","SampletypeListMap","ConfigVersionListMap","SelectedInsCat","label","ntestcode","generateBreadCrumData","DynamicDesign","dynamicColumn","jsondata","testListFields","releasetestfields","samplegriditem","subsamplelistitem","testlistitem","slice","insCategoryMap","updateStateObject","sort","worklistSamplesList","updatedSortedList","a","b","A","B","breadCrumbFrom","breadCrumbto","sregtypename","sregsubtypename"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport WorklistPreparationFilter from './WorklistPreparationFilter'\r\nimport { rearrangeDateFormat, convertDateValuetoString, formatInputDate } from '../../components/CommonScript';\r\nimport { injectIntl } from \"react-intl\";\r\nimport Esign from \"../audittrail/Esign\";\r\nimport AddWorklistSection from '../worklist/AddWorklistSection';\r\nimport AddWorklistSample from '../worklist/AddWorklistSample';\r\nimport CustomTab from \"../../components/custom-tabs/custom-tabs.component\";\r\nimport WorklistHistoryTab from \"./WorklistHistoryTab\";\r\nimport WorklistSampleTab from \"./WorklistSampleTab\";\r\nimport { designProperties, transactionStatus, REPORTTYPE, SUBSAMPLEAUDITMULTILINGUALFIELDS, designComponents } from '../../components/Enumeration';\r\nimport SpecificationInfo from '../testgroup/SpecificationInfo';\r\n//import { ReactComponent as Closure } from '../../assets/image/prepared-worklist.svg';\r\nimport { ReactComponent as Closure } from '../../assets/image/prepared.svg';\r\nimport { ReactComponent as ReportIcon } from '../../assets/image/report-Icon.svg';\r\n//import { ReactComponent as ReportIcon } from '../../assets/image/report-svgrepo-com.svg';\r\nimport { ReactComponent as Report } from '../../assets/image/Report.svg';\r\nimport {\r\n  callService,\r\n  crudMaster,\r\n  validateEsignCredential,\r\n  updateStore,\r\n  getSectionAndTest,\r\n  getWorklistDetail,\r\n  OpenDate,\r\n  CloseDate, viewAttachment, getInstrumentCombo, getWorklistSample, getRegTypeTestWise,\r\n  getRegTypeWorklist, getSectionbaseTest, onWorklistApproveClick\r\n  , getWorklistDetailFilter, getEditSectionAndTest, createWorklistCreation, filterColumnData, getConfigVersionTestWise,\r\n  ViewSampleDetails, getWorklisthistoryAction, reportWorklist, getRegSubTypeWise,\r\n  insertWorklist, generateControlBasedReport, validateEsignforWorklist\r\n} from \"../../actions\";\r\n\r\nimport ListMaster from \"../../components/list-master/list-master.component\";\r\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\r\nimport SlideOutModal from \"../../components/slide-out-modal/SlideOutModal\";\r\n\r\nimport {\r\n  showEsign,\r\n  getControlMap,\r\n  constructOptionList,\r\n} from \"../../components/CommonScript\";\r\nimport { ContentPanel, MediaLabel } from \"../../components/App.styles\";\r\n\r\nimport { process } from \"@progress/kendo-data-query\";\r\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\r\n\r\nimport BreadcrumbComponent from \"../../components/Breadcrumb.Component\";\r\nimport { Affix } from \"rsuite\";\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nconst mapStateToProps = (state) => {\r\n  return { Login: state.Login };\r\n};\r\n\r\nclass WorkList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const sectionDataState = { skip: 0, take: 10 };\r\n    this.state = {\r\n      selectedRecord: {},\r\n      error: \"\",\r\n      userRoleControlRights: [],\r\n      selectedWorklist: undefined,\r\n      controlMap: new Map(),\r\n      Instrument: [],\r\n      sectionDataState,\r\n      addComponentDataList: [],\r\n      addedComponentList: [],\r\n      addComponentSortedList: [],\r\n      RegistrationSubTypeList: [], FilterStatusList: [], SampletypeList: [], RegTypeValue: [], ConfigVersionList: [],\r\n      sidebarview: false\r\n    };\r\n    this.searchRef = React.createRef();\r\n    this.searchFieldList = [\"sworklistno\", \"stestname\"];\r\n    this.confirmMessage = new ConfirmMessage();\r\n  }\r\n  sidebarExpandCollapse = () => {\r\n    this.setState({\r\n      sidebarview: true\r\n    })\r\n  }\r\n\r\n  handleDateChange = (dateName, dateValue) => {\r\n\r\n\r\n    if (dateValue === null) {\r\n      dateValue = new Date();\r\n    }\r\n    // let toDate;\r\n    // let fromDate;\r\n    let fromdate = this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date()\r\n    let todate = this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date()\r\n    let obj = {}\r\n    if (dateName === 'fromDate') {\r\n      obj = convertDateValuetoString(dateValue, todate, this.props.Login.userInfo)\r\n      fromdate = obj.fromDate\r\n      todate = obj.toDate\r\n      let fromDate = obj.fromDate\r\n      let toDate = obj.toDate\r\n    } else {\r\n      obj = convertDateValuetoString(fromdate, dateValue, this.props.Login.userInfo)\r\n      fromdate = obj.fromDate\r\n      todate = obj.toDate\r\n      let fromDate = obj.fromDate\r\n      let toDate = obj.toDate\r\n\r\n    }\r\n    let inputParam = {\r\n      inputData: {\r\n        nflag: 2,\r\n        nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\r\n        nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\r\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n        fromdate: String(fromdate),\r\n        todate: String(todate),\r\n        userinfo: this.props.Login.userInfo,\r\n        realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n        realApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue,\r\n      },\r\n      masterData: this.props.Login.masterData\r\n\r\n    }\r\n    this.props.getConfigVersionTestWise(inputParam)\r\n\r\n  };\r\n\r\n\r\n\r\n  onFilterComboChange = (comboData, fieldName) => {\r\n\r\n    if (comboData) {\r\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n      let inputParamData = {};\r\n      if (fieldName === 'nsampletypecode') {\r\n        //if (comboData.value !== this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode) {\r\n        inputParamData = {\r\n          nflag: 2,\r\n          fromdate: obj.fromDate,\r\n          todate: obj.toDate,\r\n          nsampletypecode: comboData.value,\r\n          userinfo: this.props.Login.userInfo,\r\n          masterData: this.props.Login.masterData,\r\n          defaultSampleTypeValue: comboData.item,\r\n          realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n          realApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue,\r\n        };\r\n        this.props.getRegTypeWorklist(inputParamData)\r\n        // }\r\n      } else if (fieldName === 'nregtypecode') {\r\n        //  if (comboData.value !== this.props.Login.masterData.defaultRegTypeValue.nregtypecode) {\r\n        inputParamData = {\r\n          nflag: 3,\r\n          fromdate: obj.fromDate,\r\n          todate: obj.toDate,\r\n          nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode,\r\n          nregtypecode: comboData.value,\r\n          userinfo: this.props.Login.userInfo,\r\n          masterData: this.props.Login.masterData,\r\n          nregtypecode: comboData.value,\r\n          realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n          realApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue,\r\n          masterData: {\r\n            ...this.props.Login.masterData,\r\n            RegTypeValue: comboData.item,\r\n            //RegistrationSubTypeList: inputParam.masterData.RegistrationSubTypeList\r\n          }\r\n          //defaultRegTypeValue: comboData.item\r\n\r\n\r\n        }\r\n        this.props.getRegSubTypeWise(inputParamData)\r\n        //  }\r\n\r\n\r\n\r\n      } else if (fieldName === 'nregsubtypecode') {\r\n\r\n        //  if (comboData.value !== this.props.Login.masterData.RegSubTypeValue.nregsubtypecode) {\r\n        let inputData = {\r\n          nflag: 4,\r\n          fromdate: obj.fromDate,\r\n          todate: obj.toDate,\r\n          nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode,\r\n          nregtypecode: this.props.Login.masterData.RegTypeValue.nregtypecode,\r\n          nneedtemplatebasedflow: comboData.item.nneedtemplatebasedflow,\r\n          nregsubtypecode: comboData.value,\r\n          userinfo: this.props.Login.userInfo,\r\n          realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n          realApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue,\r\n        }\r\n        inputParamData = {\r\n          inputData,\r\n          masterData: {\r\n            ...this.props.Login.masterData,\r\n            RegSubTypeValue: comboData.item,\r\n            //RegistrationSubTypeList: inputParam.masterData.RegistrationSubTypeList\r\n          }\r\n        }\r\n        this.props.getConfigVersionTestWise(inputParamData)\r\n        // }\r\n      }\r\n\r\n      else if (fieldName === 'ntransactionstatus') {\r\n        // if (comboData.value !== this.props.Login.masterData.FilterStatusValue.ntransactionstatus) {\r\n        let masterData = { ...this.props.Login.masterData, FilterStatusValue: comboData.item }\r\n        const updateInfo = {\r\n          typeName: DEFAULT_RETURN,\r\n          data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        //   }\r\n      }\r\n\r\n\r\n      else if (fieldName === 'napproveconfversioncode') {\r\n        // if (comboData.value !== this.props.Login.masterData.defaultApprovalVersionValue.napproveconfversioncode) {\r\n        let masterData = { ...this.props.Login.masterData, defaultApprovalVersionValue: comboData.item }\r\n        const updateInfo = {\r\n          typeName: DEFAULT_RETURN,\r\n          data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        //  }\r\n      }\r\n\r\n      //\r\n    }\r\n  }\r\n\r\n  onInputOnChange = (event, optional) => {\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n    if (event.target.type === \"checkbox\") {\r\n      selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n    } else if (event.target.type === 'radio') {\r\n      selectedRecord[event.target.name] = optional;\r\n    } else {\r\n      selectedRecord[event.target.name] = event.target.value;\r\n    }\r\n    this.setState({ selectedRecord });\r\n  };\r\n\r\n\r\n\r\n  onSaveClick = (saveType, formRef) => {\r\n    // this.searchRef.current.value = \"\";\r\n    let inputData = [];\r\n    let instSection = [];\r\n    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromdate, this.props.Login.masterData.todate, this.props.Login.userInfo)\r\n    inputData['fromdate'] = obj.fromDate;\r\n    inputData['todate'] = obj.toDate;\r\n    if (this.props.Login.screenName === \"IDS_WORKLIST\") {\r\n      let postParam = undefined;\r\n      inputData[\"worklist\"] = {\r\n        nstatus: this.props.Login.userInfo.nmastersitecode,\r\n      };\r\n      inputData[\"worklist\"][\"nsampletypecode\"] = this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode\r\n      inputData[\"worklist\"][\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"].value\r\n      inputData[\"worklist\"][\"ntestcode\"] = this.state.selectedRecord[\"ntestcode\"].value\r\n      //inputData[\"worklist\"][\"nregtypecode\"] = this.props.Login.masterData.RegTypeValue.nregtypecode\r\n      inputData[\"worklist\"][\"nregtypecode\"] = this.props.Login.masterData.defaultRegTypeValue.nregtypecode\r\n      //inputData[\"worklist\"][\"nregsubtypecode\"] = this.props.Login.masterData.RegSubTypeValue.nregsubtypecode\r\n      inputData[\"worklist\"][\"nregsubtypecode\"] = this.props.Login.masterData.defaultRegSubTypeValue.nregsubtypecode\r\n      inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode\r\n      inputData[\"napprovalconfigversioncode\"] = (this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode)\r\n      inputData[\"ncontrolCode\"] =\r\n        this.state.controlMap.has(\"AddSamples\") &&\r\n        this.state.controlMap.get(\"AddSamples\").ncontrolcode;\r\n      // let defaultFilterStatusValue={};\r\n      // let FilterStatusValue={};\r\n      inputData[\"ntransactionstatus\"] = (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1;\r\n      // this.props.Login.masterData.FilterStatus.map(item => {if(item.ntransactionstatus === transactionStatus.DRAFT){\r\n      //   defaultFilterStatusValue = item;\r\n      //   FilterStatusValue = item;}\r\n      // });\r\n      // let defaultFilterStatusValue=this.props.Login.masterData.FilterStatus[1];\r\n      // let FilterStatusValue=this.props.Login.masterData.FilterStatus[1];\r\n      if (this.props.Login.operation === \"update\") { inputData[\"worklist\"][\"nworklistcode\"] = this.props.Login.masterData.selectedWorklist.nworklistcode }\r\n\r\n      const inputParam = {\r\n        classUrl: this.props.Login.inputParam.classUrl,\r\n        methodUrl: \"Worklist\",\r\n        inputData: inputData,\r\n        operation: this.props.Login.operation,\r\n        saveType,\r\n        formRef,\r\n        postParam,\r\n        searchRef: this.searchRef,\r\n      };\r\n      const masterData = this.props.Login.masterData;\r\n      // let masterData = {...this.props.Login.masterData\r\n      //   ,defaultFilterStatusValue,\r\n      //   FilterStatusValue      }\r\n      if (\r\n        showEsign(\r\n          this.props.Login.userRoleControlRights,\r\n          this.props.Login.userInfo.nformcode,\r\n          this.props.Login.ncontrolCode\r\n        )\r\n      ) {\r\n        const updateInfo = {\r\n          typeName: DEFAULT_RETURN,\r\n          data: {\r\n            loadEsign: true,\r\n            screenData: {\r\n              inputParam, masterData: {\r\n                masterData\r\n              }\r\n            },\r\n            saveType,\r\n          },\r\n        };\r\n        this.props.updateStore(updateInfo);\r\n      } else {\r\n        //this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        this.props.insertWorklist(inputParam, masterData);\r\n      }\r\n    }\r\n\r\n\r\n\r\n    //add / edit  \r\n\r\n    let validList = true;\r\n    if (this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\" && this.state.addedComponentList.length > 1000) {\r\n      validList = false;\r\n    }\r\n\r\n    if (validList) {\r\n      let saveList = [];\r\n      if (this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\") {\r\n        const compList = this.state.addComponentSortedList.map(x => {\r\n          delete (x.selected);\r\n          //return {...x, 'sregistereddate':formatInputDate(x.sregistereddate, false)}\r\n          return x;\r\n        }) || [];\r\n        //compList.map(item=>saveList.push({\"npreregno\": item.npreregno}));\r\n        if (compList.length > 0) {\r\n\r\n          compList.map(item => saveList.indexOf(item.ntransactionsamplecode) === -1 ?\r\n            saveList.push(item) : \"\");\r\n          const masterData = this.props.Login.masterData;\r\n          const inputData = {\r\n            worklistcompcreationlist: saveList,\r\n            userinfo: this.props.Login.userInfo,\r\n            worklistcreation: this.props.Login.masterData.selectedWorklist,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\r\n          };\r\n\r\n          let dataState = undefined;\r\n          let selectedId = null;\r\n          let postParam = undefined;\r\n\r\n          const inputParam = {\r\n            classUrl: \"worklist\",\r\n            methodUrl: \"WorklistCreation\",\r\n            inputData: inputData, selectedId, dataState, postParam,\r\n            operation: \"create\", saveType, masterData\r\n          };\r\n\r\n\r\n\r\n          if (\r\n            showEsign(\r\n              this.props.Login.userRoleControlRights,\r\n              this.props.Login.userInfo.nformcode,\r\n              this.props.Login.ncontrolCode\r\n            )\r\n          ) {\r\n            const updateInfo = {\r\n              typeName: DEFAULT_RETURN,\r\n              data: {\r\n                loadEsign: true, screenData: { inputParam, masterData: masterData }, saveType\r\n              }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n          }\r\n          else {\r\n            //this.props.crudMaster(inputParam,masterData, \"openChildModal\");\r\n            this.props.createWorklistCreation(inputParam);\r\n          }\r\n\r\n\r\n        }\r\n        else {\r\n          //this.props.crudMaster(inputParam,masterData, \"openChildModal\");\r\n          toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELCETONESAMPLE\" }));\r\n        }\r\n\r\n\r\n      }\r\n\r\n\r\n\r\n\r\n    }\r\n    else {\r\n      toast.warn(this.props.intl.formatMessage({ id: \"IDS_EXCEEDSMAXINSERT\" }));\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  DeleteWorklistSample = (operation, ncontrolCode) => {\r\n    let inputData = [];\r\n    if (operation.screenName === \"IDS_WORKLISTSAMPLE\") {\r\n      const dataState = this.state.sectionDataState;\r\n      inputData[\"worklistsample\"] = {\r\n        nsitecode: this.props.Login.userInfo.ntranssitecode,\r\n      };\r\n      inputData[\"worklistsample\"][\"nworklistcode\"] =\r\n        operation.selectedRecord.nworklistcode;\r\n      inputData[\"worklistsample\"][\"nworklistsamplecode\"] =\r\n        operation.selectedRecord.nworklistsamplecode;\r\n      inputData[\"worklistsample\"][\"ntransactiontestcode\"] =\r\n        operation.selectedRecord.ntransactiontestcode;\r\n      inputData[\"worklistsample\"][\"ntransactionsamplecode\"] =\r\n        operation.selectedRecord.ntransactionsamplecode;\r\n      inputData[\"worklistsample\"][\"sarno\"] =\r\n        operation.selectedRecord.sarno;\r\n      inputData[\"worklistsample\"][\"ssamplearno\"] =\r\n        operation.selectedRecord.ssamplearno;\r\n      inputData[\"worklistsample\"][\"stestname\"] =\r\n        operation.selectedRecord.stestsynonym;\r\n      inputData[\"worklistsample\"][\"nregsubtypecode\"] =\r\n        operation.selectedRecord.nregsubtypecode;\r\n      inputData[\"worklistsample\"][\"nregtypecode\"] =\r\n        operation.selectedRecord.nregtypecode;\r\n      inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n\r\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n      const inputParam = {\r\n        methodUrl: \"WorklistSample\",\r\n        classUrl: this.props.Login.inputParam.classUrl,\r\n        inputData: inputData,\r\n        operation: \"delete\",\r\n        dataState: dataState,\r\n      };\r\n      const masterData = this.props.Login.masterData;\r\n      if (\r\n        showEsign(\r\n          this.props.Login.userRoleControlRights,\r\n          this.props.Login.userInfo.nformcode,\r\n          operation.ncontrolCode\r\n        )\r\n      ) {\r\n        const updateInfo = {\r\n          typeName: DEFAULT_RETURN,\r\n          data: {\r\n            loadEsign: true,\r\n            screenData: { inputParam, masterData },\r\n            openChildModal: true,\r\n            screenName: \"worklistSample\",\r\n            operation: operation.operation,\r\n          },\r\n        };\r\n        this.props.updateStore(updateInfo);\r\n      } else {\r\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\");\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  gridfillingColumn(data) {\r\n    const temparray = [];\r\n    data && data.map((option) => {\r\n      if (option[designProperties.VALUE] !== \"dregdate\") {\r\n        temparray.push({\r\n          \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\r\n          \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\"\r\n        })\r\n      }\r\n    });\r\n    if (temparray) {\r\n      temparray.push({ \"idsName\": \"IDS_REGISTRATIONDATE\", \"dataField\": \"sregistereddate\", \"width\": \"250px\", \"columnSize\": \"3\" })\r\n    }\r\n    return temparray;\r\n  }\r\n  gridfillingColumnGridMoreItem(data) {\r\n    const temparray = data && data.map((option) => {\r\n      return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode], \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\" };\r\n    });\r\n    return temparray;\r\n  }\r\n  // onNumericInputOnChange = (value, name) => {\r\n  //   const selectedRecord = this.state.selectedRecord || {};\r\n  //   selectedRecord[name] = value;\r\n  //   this.setState({ selectedRecord });\r\n  // };\r\n\r\n  // ADDed by Neeraj-ALPD-5136\r\n  //WorkList Screen -> Including filter in Data selection Kendo Grid \r\n  //Command by neeraj\r\n  // selectionChange = (event) => {\r\n  //   let addedComponentList = this.state.addedComponentList || [];\r\n  //   const addComponentDataList = this.state.addComponentDataList.map(item => {\r\n  //     let newItem;\r\n  //     if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\r\n  //       item.selected = !event.dataItem.selected;\r\n  //       newItem = JSON.parse(JSON.stringify(item));\r\n  //       newItem[\"jsondata\"] = {}\r\n  //       newItem[\"jsonuidata\"] = {}\r\n  //       //delete newItem['selected']\r\n  //       newItem[\"jsondata\"]['worklist'] = item\r\n  //       newItem[\"jsonuidata\"]['worklist'] = item\r\n  //       if (item.selected) {\r\n  //         newItem.selected = true;\r\n  //         addedComponentList.push(newItem);\r\n  //       }\r\n  //       else {\r\n  //         addedComponentList = addedComponentList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode)\r\n  //       }\r\n  //     }\r\n  //     return newItem || item;\r\n  //   });\r\n  //   this.setState({\r\n  //     addComponentDataList, addedComponentList,\r\n  //     addSelectAll: this.valiateCheckAll(this.state.dataState && this.state.dataState.filter && this.state.dataState.filter !== null\r\n  //       ? process(addComponentDataList || [], this.state.dataState).data : addComponentDataList),\r\n  //     deleteSelectAll: this.valiateCheckAll(addedComponentList)\r\n  //   });\r\n  // }\r\n  selectionChange = (event) => {\r\n    let addedComponentList = this.state.addedComponentList || [];\r\n    const addComponentDataList = this.state.addComponentDataList.map(item => {\r\n      if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\r\n        item.selected = !event.dataItem.selected;\r\n        if (item.selected) {\r\n          const newItem = JSON.parse(JSON.stringify(item));\r\n          newItem[\"jsondata\"] = {}\r\n          newItem[\"jsonuidata\"] = {}\r\n          delete newItem['selected']\r\n          //newItem.selected = false;\r\n          newItem[\"jsondata\"]['worklist'] = item\r\n          newItem[\"jsonuidata\"]['worklist'] = item\r\n          addedComponentList.push(newItem);\r\n        }\r\n        else {\r\n          addedComponentList = addedComponentList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode)\r\n        }\r\n      }\r\n      return item;\r\n    });\r\n    this.setState({\r\n      addComponentDataList, addedComponentList,\r\n      addSelectAll: this.valiateCheckAll(addComponentDataList),\r\n      deleteSelectAll: this.valiateCheckAll(addedComponentList)\r\n    });\r\n  }\r\n\r\n  dataStateChange = (event) => {\r\n    this.setState({ dataState: event.dataState })\r\n  }\r\n\r\n\r\n  specificationReport = (ncontrolCode) => {\r\n    if (this.props.Login.masterData.selectedWorklist) {\r\n      const inputParam = {\r\n\r\n        stablename: \"worklistcode\",\r\n        primaryKeyField: \"nworklistcode\",\r\n        sreportlink: this.props.Login.reportSettings[15],\r\n        smrttemplatelink: this.props.Login.reportSettings[16],\r\n        nreporttypecode: REPORTTYPE.CONTROLBASED,\r\n        ncontrolcode: ncontrolCode,\r\n        primaryKeyValue: this.props.Login.masterData.selectedWorklist.nworklistcode,\r\n        nworklistcode: this.props.Login.masterData.selectedWorklist.nworklistcode,\r\n        nworklistcode_componentcode: REPORTTYPE.CONTROLBASED,\r\n        nworklistcode_componentname: designComponents.NUMBER,\r\n        ntranscode: this.props.Login.masterData.selectedWorklist.ntransactionstatus,\r\n        userinfo: this.props.Login.userInfo\r\n      }\r\n      //this.props.reportWorklist(inputParam['inputData']);\r\n      this.props.generateControlBasedReport(inputParam);\r\n\r\n    } else {\r\n      toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTCANNOTGENERATEFORCOMPWITHOUTTEST\" }));\r\n    }\r\n  }\r\n  // ADDed by Neeraj-ALPD-5136\r\n  //WorkList Screen -> Including filter in Data selection Kendo Grid \r\n  //Command by neeraj\r\n  // headerSelectionChange = (event) => {\r\n  //   const checked = event.syntheticEvent.target.checked;\r\n  //   let addComponentDataList = event.target.props.data //this.state.addedComponentList || [];\r\n  //   let addedComponentList = [];\r\n\r\n\r\n  //   if (checked) {\r\n  //     const data = event.target.props.data.map(item => {\r\n  //       //const data = this.state.addComponentDataList.map(item => {\r\n  //       if (addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\r\n\r\n\r\n  //         // addedComponentList.push({ ...item, selected: false });\r\n  //         item.selected = checked;\r\n  //         const newItem = JSON.parse(JSON.stringify(item));\r\n  //         newItem[\"jsondata\"] = {}\r\n  //         newItem[\"jsonuidata\"] = {}\r\n  //         delete newItem['selected']\r\n  //         newItem.selected = true;\r\n  //         newItem[\"jsondata\"]['worklist'] = item\r\n  //         newItem[\"jsonuidata\"]['worklist'] = item\r\n  //         addedComponentList.push(newItem);\r\n  //         //item.selected = false;\r\n  //         return item;\r\n  //       } else {\r\n  //         let olditem = JSON.parse(JSON.stringify(addedComponentList[addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\r\n  //         olditem.selected = checked;\r\n  //         let newItem = JSON.parse(JSON.stringify(olditem));\r\n  //         newItem.selected = false;\r\n  //         newItem[\"jsondata\"] = {};\r\n  //         newItem[\"jsonuidata\"] = {};\r\n  //         delete newItem['selected']\r\n  //         newItem[\"jsondata\"]['worklist'] = olditem\r\n  //         newItem[\"jsonuidata\"]['worklist'] = olditem\r\n  //         addedComponentList.push(newItem);\r\n  //         return olditem;\r\n  //       }\r\n\r\n  //     });\r\n\r\n\r\n  //     this.setState({\r\n  //       addComponentDataList: addedComponentList, addedComponentList,\r\n  //       addSelectAll: this.valiateCheckAll(addedComponentList),\r\n  //       deleteSelectAll: this.valiateCheckAll(addedComponentList),\r\n  //       addSelectAll: checked, deleteSelectAll: false\r\n  //     });\r\n  //   }\r\n\r\n\r\n  //   //   if (checked) {\r\n  //   //     const data = event.dataItems.map(item => {\r\n  //   //         if (addComponentDataList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\r\n  //   //           addComponentDataList.push({ ...item, selected: false });\r\n  //   //             item.selected = checked;   \r\n  //   //             let newItem = JSON.parse(JSON.stringify(item));\r\n  //   //             newItem.selected = false;\r\n  //   //             newItem[\"jsondata\"]={};\r\n  //   //             newItem[\"jsonuidata\"]={};\r\n  //   //             newItem[\"jsondata\"]['worklist'] = item\r\n  //   //             newItem[\"jsonuidata\"]['worklist'] = item    \r\n  //   //             addedComponentList.push(newItem);\r\n  //   //             return item;\r\n  //   //         } else {\r\n  //   //             let olditem = JSON.parse(JSON.stringify(addComponentDataList[addComponentDataList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\r\n  //   //             olditem.selected = checked;\r\n  //   //             let newItem = JSON.parse(JSON.stringify(olditem));\r\n  //   //             newItem.selected = false;\r\n  //   //             newItem[\"jsondata\"]={};\r\n  //   //             newItem[\"jsonuidata\"]={};\r\n  //   //             newItem[\"jsondata\"]['worklist'] = olditem\r\n  //   //             newItem[\"jsonuidata\"]['worklist'] = olditem\r\n  //   //             addedComponentList.push(newItem);\r\n  //   //             return olditem;\r\n\r\n  //   //         }\r\n\r\n  //   //     });\r\n\r\n\r\n  //   //     this.setState({\r\n  //   //       addComponentDataList: data,\r\n  //   //         addedComponentList:addedComponentList,\r\n  //   //         addComponentDataList,\r\n  //   //         addSelectAll: checked, \r\n  //   //         deleteSelectAll: false\r\n  //   //     });\r\n  //   // }\r\n  //   else {\r\n  //     let addedComponentData = this.state.addedComponentList || [];\r\n  //     let deletedListdData = this.state.deletedList || [];\r\n\r\n  //     const data = this.state.addComponentDataList.map(item => {\r\n  //       addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== item.npreregno);\r\n  //       deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\r\n  //       item.selected = checked;\r\n  //       return item;\r\n  //     });\r\n\r\n  //     // console.log(\"data:\",data1, data2);\r\n  //     this.setState({\r\n  //       addComponentDataList: data, addedComponentList: addedComponentData, deletedList: deletedListdData,\r\n  //       addSelectAll: this.valiateCheckAll(addedComponentList),\r\n  //       deleteSelectAll: this.valiateCheckAll(addedComponentList),\r\n  //       addSelectAll: checked, deleteSelectAll: false\r\n  //     });\r\n  //   }\r\n\r\n\r\n\r\n  // }\r\n  headerSelectionChange = (event) => {\r\n    const checked = event.syntheticEvent.target.checked;\r\n    let addComponentDataList = event.target.props.data //this.state.addedComponentList || [];\r\n    let addedComponentList=[];\r\n   \r\n \r\n    if (checked) {\r\n      const data = event.target.props.data.map(item => {\r\n        //const data = this.state.addComponentDataList.map(item => {\r\n        if (addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\r\n         \r\n         \r\n         // addedComponentList.push({ ...item, selected: false });\r\n          item.selected = checked;\r\n          const newItem = JSON.parse(JSON.stringify(item));\r\n          newItem[\"jsondata\"] = {}\r\n          newItem[\"jsonuidata\"] = {}\r\n          delete newItem['selected']\r\n          //newItem.selected = false;\r\n          newItem[\"jsondata\"]['worklist'] = item\r\n          newItem[\"jsonuidata\"]['worklist'] = item\r\n          addedComponentList.push(newItem);\r\n          //item.selected = false;\r\n          return item;\r\n        } else {\r\n          let olditem = JSON.parse(JSON.stringify(addedComponentList[addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\r\n          olditem.selected = checked;\r\n          let newItem = JSON.parse(JSON.stringify(olditem));\r\n          newItem.selected = false;\r\n                    newItem[\"jsondata\"]={};\r\n                    newItem[\"jsonuidata\"]={};\r\n                    delete newItem['selected']\r\n                    newItem[\"jsondata\"]['worklist'] = olditem\r\n                    newItem[\"jsonuidata\"]['worklist'] = olditem\r\n                    addedComponentList.push(newItem);\r\n          return olditem;\r\n        }\r\n \r\n      });\r\n \r\n \r\n      this.setState({\r\n        addComponentDataList: data, addedComponentList,\r\n        addSelectAll: this.valiateCheckAll(addedComponentList),\r\n        deleteSelectAll: this.valiateCheckAll(addedComponentList),\r\n        addSelectAll: checked, deleteSelectAll: false\r\n      });\r\n    }\r\n \r\n \r\n  //   if (checked) {\r\n  //     const data = event.dataItems.map(item => {\r\n  //         if (addComponentDataList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\r\n  //           addComponentDataList.push({ ...item, selected: false });\r\n  //             item.selected = checked;  \r\n  //             let newItem = JSON.parse(JSON.stringify(item));\r\n  //             newItem.selected = false;\r\n  //             newItem[\"jsondata\"]={};\r\n  //             newItem[\"jsonuidata\"]={};\r\n  //             newItem[\"jsondata\"]['worklist'] = item\r\n  //             newItem[\"jsonuidata\"]['worklist'] = item    \r\n  //             addedComponentList.push(newItem);\r\n  //             return item;\r\n  //         } else {\r\n  //             let olditem = JSON.parse(JSON.stringify(addComponentDataList[addComponentDataList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\r\n  //             olditem.selected = checked;\r\n  //             let newItem = JSON.parse(JSON.stringify(olditem));\r\n  //             newItem.selected = false;\r\n  //             newItem[\"jsondata\"]={};\r\n  //             newItem[\"jsonuidata\"]={};\r\n  //             newItem[\"jsondata\"]['worklist'] = olditem\r\n  //             newItem[\"jsonuidata\"]['worklist'] = olditem\r\n  //             addedComponentList.push(newItem);\r\n  //             return olditem;\r\n             \r\n  //         }\r\n \r\n  //     });\r\n \r\n \r\n  //     this.setState({\r\n  //       addComponentDataList: data,\r\n  //         addedComponentList:addedComponentList,\r\n  //         addComponentDataList,\r\n  //         addSelectAll: checked,\r\n  //         deleteSelectAll: false\r\n  //     });\r\n  // }\r\n    else {\r\n      let addedComponentData = this.state.addedComponentList || [];\r\n      let deletedListdData = this.state.deletedList || [];\r\n \r\n      const data = this.state.addComponentDataList.map(item => {\r\n        addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== item.npreregno);\r\n        deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\r\n        item.selected = checked;\r\n        return item;\r\n      });\r\n \r\n      // console.log(\"data:\",data1, data2);\r\n      this.setState({\r\n        addComponentDataList: data, addedComponentList: addedComponentData, deletedList: deletedListdData,\r\n        addSelectAll: this.valiateCheckAll(addedComponentList),\r\n        deleteSelectAll: this.valiateCheckAll(addedComponentList),\r\n        addSelectAll: checked, deleteSelectAll: false\r\n      });\r\n    }\r\n \r\n \r\n \r\n  }\r\n  // ADDed by Neeraj-ALPD-5136\r\n  //WorkList Screen -> Including filter in Data selection Kendo Grid \r\n  addSaveDataGrid = () => {\r\n\r\n    if (this.state.addedComponentList.length > 0) {\r\n     let addComponentSortedList=[];\r\n      const updatedList = this.state.addComponentDataList.filter(\r\n        (item) => !this.state.addedComponentList.some(\r\n          (addedItem) => addedItem.ntransactiontestcode === item.ntransactiontestcode\r\n        )\r\n      );\r\n      if(this.state.addComponentSortedList.length>0){\r\n         this.state.addComponentSortedList.map(item => {\r\n          addComponentSortedList.push(item)\r\n        })\r\n      }\r\n       this.state.addedComponentList.map(item => {\r\n          addComponentSortedList.push(item)\r\n      })\r\n      this.setState({ addComponentDataList: updatedList,  addSelectAll: this.valiateCheckAll(updatedList) \r\n        ,addComponentSortedList: addComponentSortedList\r\n        ,addedComponentList:[] })\r\n    } else {\r\n      toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELCETONESAMPLE\" }));\r\n    }\r\n  }\r\n  // ADDed by Neeraj-ALPD-5136\r\n  //WorkList Screen -> Including filter in Data selection Kendo Grid \r\n  handleClickDelete = (row) => {\r\n    let updatedAddList=[];\r\n    const ntransactiontestcode = row.dataItem.ntransactiontestcode;\r\n    const updatedList = this.state.addComponentSortedList.filter(\r\n      (item) => item.ntransactiontestcode !== ntransactiontestcode\r\n    );\r\n\r\n    const exists = this.state.addComponentDataList.some(\r\n      (item) => item.ntransactiontestcode === ntransactiontestcode\r\n    );\r\n    if (!exists) {\r\n       updatedAddList = this.state.addComponentDataList.map(item => {\r\n        return item\r\n      })\r\n       updatedAddList.push({...row.dataItem,selected:false});\r\n    }\r\n\r\n    this.setState({ addComponentDataList: updatedAddList, addComponentSortedList: updatedList })\r\n\r\n  }\r\n\r\n  // onApproveClick = () => {\r\n  //   //if (this.props.Login.masterData.SelectedSupplier.ntransactionstatus === transactionStatus.DRAFT) {\r\n  //   const ncontrolCode = this.state.controlMap.has(\"ApproveSupplier\") && this.state.controlMap.get(\"ApproveSupplier\").ncontrolcode\r\n  //   let inputData = [];\r\n  //   inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n  //   //add               \r\n  //   let postParam = undefined;\r\n  //   inputData[\"supplier\"] = { \"nsuppliercode\": this.props.Login.masterData.SelectedSupplier[\"nsuppliercode\"] ? this.props.Login.masterData.SelectedSupplier[\"nsuppliercode\"].Value : \"\" };\r\n  //   inputData[\"supplier\"] = this.props.Login.masterData.SelectedSupplier;\r\n  //   postParam = { inputListName: \"Supplier\", selectedObject: \"SelectedSupplier\", primaryKeyField: \"nsuppliercode\" };\r\n  //   const inputParam = {\r\n  //     classUrl: 'supplier',\r\n  //     methodUrl: \"Supplier\",\r\n  //     inputData: inputData,\r\n  //     operation: \"approve\", postParam\r\n  //   }\r\n  //   let saveType;\r\n\r\n  //   const masterData = this.props.Login.masterData;\r\n\r\n  //   const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n  //   if (esignNeeded) {\r\n  //     const updateInfo = {\r\n  //       typeName: DEFAULT_RETURN,\r\n  //       data: {\r\n  //         loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"approve\"\r\n  //       }\r\n  //     }\r\n  //     this.props.updateStore(updateInfo);\r\n  //   }\r\n  //   else {\r\n  //     this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n  //   }\r\n\r\n  //   // }\r\n  //   // else {\r\n  //   //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTOAPPROVE\" }));\r\n  //   // }\r\n  // }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  valiateCheckAll(data) {\r\n\r\n    let selectAll = true;\r\n\r\n    // let checkRepeatComponent;\r\n\r\n    //  let addedComponentList = this.state.addedComponentList || [];\r\n\r\n    if (data && data.length > 0) {\r\n\r\n      data.forEach(dataItem => {\r\n\r\n        if (dataItem.selected) {\r\n\r\n          if (dataItem.selected === false) {\r\n\r\n            selectAll = false;\r\n\r\n          }\r\n\r\n        }\r\n\r\n        else {\r\n\r\n          selectAll = false;\r\n\r\n          // checkRepeatComponent=this.state.addComponentDataList.filter(item=>item.npreregno==data.npreregno)\r\n\r\n          // if(checkRepeatComponent.length>0){\r\n\r\n          //     selectAll = true;\r\n\r\n          // }else{\r\n\r\n          //     selectAll = false;\r\n\r\n          // }\r\n\r\n        }\r\n\r\n      })\r\n\r\n    }\r\n\r\n    else {\r\n\r\n      //if (gridType === \"originalgrid\"){\r\n\r\n      selectAll = false;\r\n\r\n      // }\r\n\r\n    }\r\n\r\n    return selectAll;\r\n\r\n  }\r\n\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.Login.masterStatus !== \"\") {\r\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n        toast.warn(props.Login.masterStatus);\r\n        props.Login.masterStatus = \"\";\r\n      }\r\n    }\r\n    if (props.Login.error !== state.error) {\r\n      toast.error(props.Login.error);\r\n      props.Login.error = \"\";\r\n    }\r\n    if (props.Login.selectedRecord === undefined) {\r\n      return { selectedRecord: {} };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  validateEsign = () => {\r\n    let modalName = this.props.Login.screenName === \"worklistSample\" ? \"openChildModal\" : \"openModal\";\r\n    const inputParam = {\r\n      inputData: {\r\n        userinfo: {\r\n          ...this.props.Login.userInfo,\r\n          sreason: this.state.selectedRecord[\"esigncomments\"],\r\n        },\r\n        password: this.state.selectedRecord[\"esignpassword\"],\r\n      },\r\n      screenData: this.props.Login.screenData,\r\n    };\r\n    if (this.props.Login.operation === \"prepare\") {\r\n      this.props.validateEsignforWorklist(inputParam, modalName, this.confirmMessage);\r\n    }\r\n    else {\r\n      this.props.validateEsignCredential(inputParam, modalName);\r\n    }\r\n    // this.props.validateEsignCredential(inputParam, \"openModal\");\r\n\r\n  };\r\n\r\n\r\n\r\n  // onSwitchChange = (item, key, methodUrl) => {\r\n  //   let dataItem = item;\r\n  //   dataItem[\"ndefaultstatus\"] = 3;\r\n  //   const inputParam = {\r\n  //     inputData: {\r\n  //       [key]: dataItem,\r\n  //       userinfo: this.props.userInfo,\r\n  //     },\r\n  //     classUrl: \"testmaster\",\r\n  //     operation: \"setDefault\",\r\n  //     methodUrl: methodUrl,\r\n  //   };\r\n  //   this.props.crudMaster(\r\n  //     inputParam,\r\n  //     this.props.masterData,\r\n  //     \"openChildModal\",\r\n  //     {}\r\n  //   );\r\n  // };\r\n\r\n  tabDetail = () => {\r\n    const tabMap = new Map();\r\n    const deleteSecId =\r\n      this.state.controlMap.has(\"DeleteWorklistSample\") &&\r\n      this.state.controlMap.get(\"DeleteWorklistSample\").ncontrolcode;\r\n    const addSampleId =\r\n      this.state.controlMap.has(\"AddSamples\") &&\r\n      this.state.controlMap.get(\"AddSamples\").ncontrolcode;\r\n\r\n    const viewSampleId =\r\n      this.state.controlMap.has(\"ViewWorklistSample\") &&\r\n      this.state.controlMap.get(\"ViewWorklistSample\").ncontrolcode;\r\n\r\n    tabMap.set(\r\n      \"IDS_WORKLISTSAMPLE\",\r\n      <WorklistSampleTab\r\n        controlMap={this.state.controlMap}\r\n        userRoleControlRights={this.state.userRoleControlRights}\r\n        dataState={this.state.WorklistSamples}\r\n        selectedWorklist={this.state.WorklistSamples}\r\n        extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n        detailedFieldList={this.gridfillingColumnGridMoreItem(this.state.DynamicGridMoreItem) || []}\r\n        userInfo={this.props.Login.userInfo}\r\n        inputParam={this.props.Login.inputParam}\r\n        deleteRecord={this.DeleteWorklistSample}\r\n        deleteSecId={deleteSecId}\r\n        defaultRecord={this.defaultRecord}\r\n        WorklistSamples={this.state.WorklistSamples || []}\r\n        viewSample={this.viewSample}\r\n        screenName=\"IDS_WORKLISTSAMPLE\"\r\n        selectedRecord={this.state.selectedRecord}\r\n        settings={this.props.Login.settings}\r\n        getWorklistSample={this.props.getWorklistSample}\r\n        masterData={this.props.Login.masterData}\r\n        addSampleId={addSampleId}\r\n        viewSampleId={viewSampleId}\r\n        dataStateSample={this.state.dataState}\r\n      />\r\n\r\n    );\r\n    tabMap.set(\r\n      \"IDS_WORKLISTHISTORY\",\r\n      <WorklistHistoryTab\r\n        dataState={this.props.Login.masterData.WorklistHistory}\r\n        selectedWorklistHistory={this.props.Login.masterData.WorklistHistory}\r\n        InstrumentSection={this.props.Login.masterData.WorklistHistory || []}\r\n        userInfo={this.props.Login.userInfo}\r\n        //inputParam={this.props.Login.inputParam}\r\n        // deleteRecord={this.DeleteWorklistSample}\r\n        // deleteSecId={deleteSecId}\r\n        // defaultSecId={defaultSecId}\r\n        // defaultRecord={this.defaultRecord}\r\n        controlMap={this.state.controlMap}\r\n        userRoleControlRights={this.state.userRoleControlRights}\r\n        screenName=\"IDS_WORKLISTHISTORY\"\r\n        selectedRecord={this.state.selectedRecord}\r\n        settings={this.props.Login.settings}\r\n      />\r\n    );\r\n\r\n\r\n    return tabMap;\r\n  };\r\n\r\n\r\n\r\n  render() {\r\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n    let mandatoryFields = [];\r\n    // this.feildsForGrid =\r\n    //   [\r\n    //     // { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },       \r\n    //     { \"idsName\": \"IDS_PARAMETER\", \"dataField\": \"sparametersynonym\", \"width\": \"100px\" },\r\n    //     { \"idsName\": \"IDS_RESULT\", \"dataField\": \"sfinal\", \"width\": \"100px\" },\r\n    //     { \"idsName\": \"IDS_GRADE\", \"dataField\": \"sgradename\", \"width\": \"200px\" },\r\n    //   ];\r\n\r\n    this.feildsForGrid =\r\n      [\r\n        // { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_REPORTREFNO\", \"dataField\": \"sreportno\", \"width\": \"200px\" },\r\n        { \"idsName\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode], \"dataField\": \"sarno\", \"width\": \"200px\" },\r\n        { \"idsName\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode], \"dataField\": \"ssamplearno\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_PARAMETER\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_RESULT\", \"dataField\": \"sfinal\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_GRADE\", \"dataField\": \"sgradename\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_REGISTRATIONDATE\", \"dataField\": \"sregdate\", \"width\": \"200px\" },\r\n      ];\r\n    this.extractedColumnList = [\r\n\r\n      //  { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"350px\" },\r\n      { \"idsName\": \"IDS_NEWCOMMENTS\", \"dataField\": \"scomments\", \"width\": \"350px\" },\r\n      { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_ACTIONTYPE\", \"dataField\": \"sactiontype\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_MODULENAME\", \"dataField\": \"smodulename\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_FORMNAME\", \"dataField\": \"sformname\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_REASON\", \"dataField\": \"spredefinedreason\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_ESIGNCOMMENTS\", \"dataField\": \"sreason\", \"width\": \"200px\" },\r\n\r\n\r\n    ]\r\n\r\n    // const auditInfoFields = [{ \"fieldName\": \"sarno\", \"label\": \"IDS_ARNO\" }, \r\n    // { \"fieldName\": \"spatientid\", \"label\": \"IDS_PATIENTID\" },   \r\n    // { \"fieldName\": \"sfirstname\", \"label\": \"IDS_PATIENTNAME\" },\r\n    // { \"fieldName\": \"sage\", \"label\": \"IDS_AGE\" },\r\n    // { \"fieldName\": \"sgendername\", \"label\": \"IDS_GENDER\" },\r\n    // { \"fieldName\": \"stestsynonym\", \"label\": \"IDS_TEST\" },\r\n    // { \"fieldName\": \"sregdate\", \"label\": \"IDS_REGISTRATIONDATE\" },\r\n    // { \"fieldName\": \"scompletedate\", \"label\": \"IDS_COMPLETEDDATEANDTIME\" }\r\n\r\n    // ];\r\n    const auditInfoFields = [\r\n      { \"label\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode], \"fieldName\": \"sarno\", },\r\n      { \"fieldName\": \"stestsynonym\", \"label\": \"IDS_TEST\" },\r\n      { \"fieldName\": \"sfirstname\", \"label\": \"IDS_PATIENTNAME\" },\r\n      { \"fieldName\": \"sgendername\", \"label\": \"IDS_GENDER\" },\r\n\r\n\r\n    ];\r\n\r\n    if (this.props.Login.screenName === \"IDS_WORKLIST\") {\r\n      mandatoryFields.push(\r\n        {\r\n          mandatory: true,\r\n          idsName: \"IDS_ADDSECTION\",\r\n          dataField: \"nsectioncode\",\r\n          mandatoryLabel: \"IDS_SELECT\",\r\n          controlType: \"selectbox\",\r\n        }, {\r\n        mandatory: true,\r\n        idsName: \"IDS_TEST\",\r\n        dataField: \"ntestcode\",\r\n        mandatoryLabel: \"IDS_SELECT\",\r\n        controlType: \"selectbox\",\r\n      }\r\n      );\r\n\r\n    }\r\n\r\n    const addId =\r\n      this.state.controlMap.has(\"AddWorklist\") &&\r\n      this.state.controlMap.get(\"AddWorklist\").ncontrolcode;\r\n    // const editId =\r\n    //   this.state.controlMap.has(\"EditWorklist\") &&\r\n    //   this.state.controlMap.get(\"EditWorklist\").ncontrolcode;\r\n    const deleteId =\r\n      this.state.controlMap.has(\"DeleteWorklist\") &&\r\n      this.state.controlMap.get(\"DeleteWorklist\").ncontrolcode;\r\n\r\n    const approvalId =\r\n      this.state.controlMap.has(\"GenerateWorklist\") &&\r\n      this.state.controlMap.get(\"GenerateWorklist\").ncontrolcode;\r\n\r\n    const reportId =\r\n      this.state.controlMap.has(\"WorklistReport\") &&\r\n      this.state.controlMap.get(\"WorklistReport\").ncontrolcode;\r\n\r\n    // const addSampleId =\r\n    //   this.state.controlMap.has(\"AddWorklistSample\") &&\r\n    //   this.state.controlMap.get(\"AddWorklistSample\").ncontrolcode;\r\n    // const deleteSampleId =\r\n    // this.state.controlMap.has(\"DeleteWorklistSample\") &&\r\n    // this.state.controlMap.get(\"DeleteWorklistSample\").ncontrolcode;\r\n\r\n    const { selectedWorklist } = this.props.Login.masterData;\r\n    const filterParam = {\r\n      inputListName: \"Worklist\",\r\n      selectedObject: \"selectedWorklist\",\r\n      primaryKeyField: \"nworklistcode\",\r\n      fetchUrl: \"worklist/getWorklistSample\",\r\n      fecthInputObject: { userinfo: this.props.Login.userInfo, ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode },\r\n      masterData: this.props.Login.masterData,\r\n      searchFieldList: this.searchFieldList,\r\n\r\n    };\r\n    const breadCrumbData = this.state.filterData || [];\r\n    return (\r\n      <>\r\n        <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n          {breadCrumbData.length > 0 ? (\r\n            <Affix top={53}>\r\n              <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n            </Affix>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <Row noGutters={true}>\r\n            <Col md={`${!this.props.sidebarview ? '4' : \"2\"}`}>\r\n              <ListMaster\r\n                formatMessage={this.props.intl.formatMessage}\r\n                screenName={\"worklist\"}\r\n                masterData={this.props.Login.masterData}\r\n                userInfo={this.props.Login.userInfo}\r\n                masterList={\r\n                  this.props.Login.masterData.searchedData ||\r\n                  this.props.Login.masterData.Worklist\r\n                }\r\n                getMasterDetail={(worklist) =>\r\n                  this.props.getWorklistDetail(\r\n                    worklist,\r\n                    this.props.Login.userInfo,\r\n                    this.props.Login.masterData\r\n                  )\r\n                }\r\n                selectedMaster={this.props.Login.masterData.selectedWorklist}\r\n                primaryKeyField=\"nworklistcode\"\r\n                mainField=\"sworklistno\"\r\n                firstField=\"stestname\"\r\n                secondField=\"ssectionname\"\r\n                isIDSField=\"Yes\"\r\n                filterColumnData={this.props.filterColumnData}\r\n                filterParam={filterParam}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                searchRef={this.searchRef}\r\n                addId={addId}\r\n                hideCheckLabel={true}\r\n                hidePaging={false}\r\n                reloadData={this.reloadData}\r\n                openModal={() =>\r\n                  this.props.getSectionAndTest(\r\n                    \"IDS_WORKLIST\",\r\n                    \"create\",\r\n                    \"nworklistcode\",\r\n                    this.props.Login.masterData,\r\n                    this.props.Login.userInfo,\r\n                    addId\r\n                  )\r\n                }\r\n                openFilter={this.openFilter}\r\n                closeFilter={this.closeFilter}\r\n                onFilterSubmit={this.onFilterSubmit}\r\n                showFilterIcon={true}\r\n                showFilter={this.props.Login.showFilter}\r\n                callCloseFunction={true}\r\n                filterComponent={[\r\n                  {\r\n                    IDS_WORKLISTFILTER: (\r\n                      <WorklistPreparationFilter\r\n                        SampleTypeValue={this.props.Login.masterData.defaultSampleTypeValue || {}}\r\n                        RegTypeValue={this.props.Login.masterData.RegTypeValue || {}}\r\n                        RegSubTypeValue={this.props.Login.masterData.RegSubTypeValue || {}}\r\n                        RegSubType={this.state.RegistrationSubTypeList || []}\r\n                        RegType={this.state.RegistrationTypeList || []}\r\n                        userInfo={this.props.Login.userInfo || {}}\r\n                        ApprovalVersion={this.state.ConfigVersionList || []}\r\n                        ApprovalVersionValue={this.props.Login.masterData.defaultApprovalVersionValue || []}\r\n\r\n                        //SampleType={this.state.stateSampleType || []}\r\n                        FilterStatusValue={this.props.Login.masterData.FilterStatusValue || {}}\r\n                        FilterStatus={this.state.FilterStatusList || []}\r\n                        RegistrationType={this.state.stateRegistrationType || []}\r\n                        RegistrationSubType={this.state.stateRegistrationSubType || []}\r\n                        fromDate={this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date()}\r\n                        toDate={this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date()}\r\n                        handleDateChange={this.handleDateChange}\r\n                        onFilterComboChange={this.onFilterComboChange}\r\n                        SampleType={this.state.SampletypeList || []}\r\n\r\n                      />\r\n                    ),\r\n                  },\r\n                ]}\r\n              />\r\n            </Col>\r\n            <Col md={`${!this.props.sidebarview ? '8' : \"10\"}`} className=\"position-relative\">\r\n              <div className=\"sidebar-view-btn-block\">\r\n                <div className=\"sidebar-view-btn \" onClick={this.props.parentFunction}>\r\n                  {!this.props.sidebarview ?\r\n                    <i class=\"fa fa-less-than\"></i> :\r\n                    <i class=\"fa fa-greater-than\"></i>\r\n                  }\r\n                </div>\r\n              </div>\r\n              <Row>\r\n                <Col md={12}>\r\n                  <ContentPanel className=\"panel-main-content\">\r\n                    <Card className=\"border-0\">\r\n                      {this.props.Login.masterData.Worklist && this.props.Login.masterData.Worklist.length > 0 && this.props.Login.masterData.selectedWorklist\r\n                        ? (\r\n                          <>\r\n                            <Card.Header>\r\n                              <Card.Title className=\"product-title-main\">\r\n                                {\r\n                                  this.props.Login.masterData.selectedWorklist\r\n                                    .sworklistno\r\n                                }\r\n                              </Card.Title>\r\n                              <Card.Subtitle>\r\n                                <div className=\"d-flex product-category\">\r\n                                  <h2 className=\"product-title-sub flex-grow-1\">\r\n                                    <MediaLabel className={`btn btn-outlined ${this.props.Login.masterData.selectedWorklist.ntransactionstatus === 83 ? \"outline-success\" : \"outline-secondary\"} btn-sm ml-3`}>\r\n                                      {this.props.Login.masterData.selectedWorklist.ntransactionstatus === 83 && <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>}\r\n                                      {this.props.Login.masterData.selectedWorklist.stransdisplaystatus}\r\n                                    </MediaLabel>\r\n                                  </h2>\r\n                                  <div className=\"d-inline\">\r\n                                    {/* <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                    //    data-for=\"tooltip_list_wrap\"\r\n                                    hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                    onClick={() => this.props.getEditSectionAndTest(\r\n                                      \"IDS_WORKLIST\",\r\n                                      \"update\",\r\n                                      \"nworklistcode\",\r\n                                      this.props.Login.masterData,\r\n                                      this.props.Login.userInfo,\r\n                                      editId\r\n                                    )\r\n\r\n                                      //\"Checklist\",\"nchecklistcode\",this.props.Login.masterData.selectedchecklist.nchecklistcode)\r\n                                    }>\r\n                                    <FontAwesomeIcon icon={faPencilAlt} title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} />\r\n                                  </Nav.Link> */}\r\n\r\n\r\n                                    <Nav.Link\r\n                                      name=\"deleteWorklist\"\r\n                                      className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                      data-tip={this.props.intl.formatMessage({\r\n                                        id: \"IDS_DELETE\",\r\n                                      })}\r\n                                      //   data-for=\"tooltip_list_wrap\"\r\n                                      hidden={\r\n                                        this.state.userRoleControlRights.indexOf(\r\n                                          deleteId\r\n                                        ) === -1\r\n                                      }\r\n                                      onClick={() =>\r\n                                        this.ConfirmDelete(\r\n                                          {\r\n                                            operation: \"delete\",\r\n                                            screenName: \"IDS_WORKLIST\",\r\n                                          },\r\n                                          deleteId\r\n                                        )\r\n                                      }\r\n                                    >\r\n                                      <FontAwesomeIcon icon={faTrashAlt} />\r\n                                    </Nav.Link>\r\n\r\n                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                      hidden={this.state.userRoleControlRights.indexOf(approvalId) === -1}\r\n                                      data-tip={this.props.intl.formatMessage({ id: \"IDS_PREPARED\" })}\r\n                                      //onClick={() => this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, approvalId)}\r\n                                      onClick={() => this.onApproveClick()}\r\n                                    >\r\n                                      {/* <FontAwesomeIcon icon={faThumbsUp} title={this.props.intl.formatMessage({ id: \"IDS_PREPARED\" })} /> */}\r\n                                      <Closure className=\"custom_icons\" width=\"18\" height=\"23\" />\r\n                                    </Nav.Link>\r\n\r\n\r\n                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                      hidden={this.state.userRoleControlRights.indexOf(reportId) === -1}\r\n                                      data-tip={this.props.intl.formatMessage({ id: \"IDS_REPORT\" })}\r\n                                      //onClick={() => this.specificationReport(reportId)}\r\n                                      onClick={() => this.props.generateControlBasedReport(reportId, this.props.Login.masterData.selectedWorklist, this.props.Login, \"worklist\", this.props.Login.masterData.selectedWorklist.nworklistcode)}\r\n\r\n                                    >\r\n                                      <Report />\r\n                                      {/* <ReportIcon className=\"custom_icons\" width=\"17\" height=\"20\" /> */}\r\n                                    </Nav.Link>\r\n\r\n                                  </div>\r\n                                </div>\r\n                              </Card.Subtitle>\r\n                            </Card.Header>\r\n\r\n\r\n                            <Card.Body>\r\n\r\n                              {selectedWorklist && (\r\n                                <CustomTab\r\n                                  activeKey={this.props.Login.activeKey ? this.props.Login.activeKey : \"IDS_WORKLISTSAMPLE\"}\r\n                                  tabDetail={this.tabDetail()}\r\n                                  onTabChange={this.onTabChange}\r\n                                />\r\n                              )}\r\n                            </Card.Body>\r\n                          </>\r\n                        ) : (\r\n                          \"\"\r\n                        )\r\n                      }\r\n                    </Card>\r\n                  </ContentPanel>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n\r\n\r\n\r\n          </Row>\r\n        </div>\r\n        {(this.props.Login.openModal || this.props.Login.openChildModal) && (\r\n          <SlideOutModal\r\n            show={this.props.Login.openModal || this.props.Login.openChildModal}\r\n            closeModal={this.closeModal}\r\n            operation={this.props.Login.operation}\r\n            inputParam={this.props.Login.inputParam}\r\n            screenName={this.props.Login.screenName}\r\n            onSaveClick={this.onSaveClick}\r\n            esign={this.props.Login.loadEsign}\r\n            validateEsign={this.validateEsign}\r\n            masterStatus={this.props.Login.masterStatus}\r\n            mandatoryFields={mandatoryFields}\r\n            updateStore={this.props.updateStore}\r\n            selectedRecord={this.state.selectedRecord || {}}\r\n            hideSave={this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" ? true : false}\r\n            size={(this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" || this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\") ? \"xl\" : \"lg\"}\r\n\r\n            addComponent={\r\n              this.props.Login.loadEsign ? (\r\n                <Esign\r\n                  operation={this.props.Login.operation}\r\n                  onInputOnChange={this.onInputOnChange}\r\n                  inputParam={this.props.Login.inputParam}\r\n                  selectedRecord={this.state.selectedRecord || {}}\r\n                />\r\n              )\r\n                : this.props.Login.screenName === \"IDS_WORKLIST\" ? (\r\n                  <AddWorklistSection\r\n                    //onNumericInputOnChange={this.onNumericInputOnChange}\r\n                    selectedRecord={this.props.Login.selectedRecord || {}}\r\n                    onInputOnChange={this.onInputOnChange}\r\n                    onComboChange={this.onComboChange}\r\n                    SectionValue={this.props.Login.Section}\r\n                    TestValue={this.props.Login.Test}\r\n                    handleDateChange={this.handleDateChange}\r\n                    dataState={this.state.dataState}\r\n                  />\r\n                )\r\n\r\n\r\n                  : this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\" ? (\r\n                    <AddWorklistSample\r\n                      selectionChange={this.selectionChange}\r\n                      headerSelectionChange={this.headerSelectionChange}\r\n                      addComponentDataList={this.state.addComponentDataList || []}\r\n                      addSelectAll={this.state.addSelectAll}\r\n                      //onNumericInputOnChange={this.onNumericInputOnChange}\r\n                      selectedRecord={this.props.Login.selectedRecord || {}}\r\n                      onInputOnChange={this.onInputOnChange}\r\n                      onComboChange={this.onComboChange}\r\n                      TestValue={this.props.Login.Test}\r\n                      userInfo={this.props.Login.userInfo}\r\n                      handleDateChange={this.handleDateChange}\r\n                      dataResult={this.state.dataResult ? this.state.dataResult : process(this.state.addComponentDataList || [], this.state.dataState\r\n                        ? this.state.dataState : { skip: 0, take: 10 })}\r\n                      dataState={this.state.dataState\r\n                        ? this.state.dataState : { skip: 0, take: 10 }}\r\n                      dataStateChange1={this.dataStateChange1}\r\n                      nneedsubsample={this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                      addSaveDataGrid={this.addSaveDataGrid}\r\n                      addComponentSortedList={this.state.addComponentSortedList || []}\r\n                      handleClickDelete={this.handleClickDelete}\r\n                    />\r\n                  )\r\n\r\n\r\n                    : this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" ? (\r\n                      <>\r\n\r\n                        <Card className='one' >\r\n                          <Card.Body>\r\n                            <SpecificationInfo\r\n                              controlMap={this.state.controlMap}\r\n                              auditInfoFields={auditInfoFields}\r\n                              userRoleControlRights={this.state.userRoleControlRights}\r\n                              selectedSpecification={this.props.Login.masterData.viewdetails}\r\n                              userInfo={this.props.Login.userInfo}\r\n                              selectedNode={this.props.Login.masterData.selectedNode}\r\n                              selectedRecord={this.state.filterData}\r\n                              approvalRoleActionDetail={this.props.Login.masterData.ApprovalRoleActionDetail}\r\n                              screenName=\"IDS_PREVIOUSRESULTVIEW\"\r\n\r\n                            />\r\n                          </Card.Body>\r\n                        </Card>\r\n                        <br></br>\r\n\r\n                        <DataGrid\r\n                          primaryKeyField={\"ntransactiontestcode\"}\r\n                          data={this.props.Login.masterData.AuditModifiedComments || []}\r\n                          detailedFieldList={this.feildsForGrid}\r\n                          extractedColumnList={this.feildsForGrid}\r\n                          dataResult={this.props.Login.masterData.AuditModifiedComments && this.props.Login.masterData.AuditModifiedComments.length > 0\r\n                            && process(this.props.Login.masterData.AuditModifiedComments, this.state.dataState ? this.state.dataState : { skip: 0, take: 10 })}\r\n                          //dataState={{ skip: 0, take: 10 }}\r\n                          dataState={this.state.dataState\r\n                            ? this.state.dataState : { skip: 0, take: 10 }}\r\n                          selectionChange={this.selectionChange}\r\n                          headerSelectionChange={this.headerSelectionChange}\r\n                          pageable={true}\r\n                          scrollable={'scrollable'}\r\n                          dataStateChange={this.dataStateChange}\r\n\r\n                        />\r\n                      </>\r\n                    )\r\n\r\n                      : (\r\n                        \"\"\r\n                      )\r\n            }\r\n\r\n\r\n          />\r\n        )}\r\n\r\n\r\n      </>\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n  onTabChange = (tabProps) => {\r\n    const screenName = tabProps.screenName;\r\n    if (screenName == \"IDS_WORKLISTHISTORY\") {\r\n      let inputData = {\r\n        masterData: this.props.Login.masterData,\r\n        userInfo: this.props.Login.userInfo,\r\n        nworklistcode: this.props.Login.masterData.selectedWorklist.nworklistcode\r\n      }\r\n      this.props.getWorklisthistoryAction(inputData, true);\r\n    } else {\r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: { screenName, activeKey: \"IDS_WORKLISTSAMPLE\" }\r\n      }\r\n\r\n      this.props.updateStore(updateInfo);\r\n\r\n    }\r\n  };\r\n\r\n\r\n  // dataStateChange = (event) => {\r\n  //   this.setState({\r\n  //     dataResult: process(\r\n  //       this.props.Login.masterData[\"selectedSection\"],\r\n  //       event.dataState\r\n  //     ),\r\n  //     sectionDataState: event.dataState,\r\n  //   });\r\n  // };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  reloadData = () => {\r\n    this.searchRef.current.value = \"\";\r\n    this.props.Login.masterData.searchedData = undefined;\r\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromdate, this.props.Login.masterData.todate, this.props.Login.userInfo)\r\n    let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\r\n    let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\r\n\r\n    let defaultSampleTypeValue = this.props.Login.masterData.defaultSampleTypeValue\r\n    let defaultRegTypeValue = this.props.Login.masterData.defaultRegTypeValue\r\n    let defaultRegSubTypeValue = this.props.Login.masterData.defaultRegSubTypeValue\r\n    let defaultFilterStatusValue = this.props.Login.masterData.defaultFilterStatusValue\r\n    let defaultApprovalVersionValue = this.props.Login.masterData.defaultApprovalVersion\r\n    let defaultApprovalVersion = this.props.Login.masterData.defaultApprovalVersionValue\r\n    let masterData = { ...this.props.Login.masterData, realFromDate, realToDate, defaultSampleTypeValue, defaultRegTypeValue, defaultRegSubTypeValue, defaultFilterStatusValue, defaultApprovalVersionValue }\r\n    let inputData = {\r\n      nsampletypecode: (this.props.Login.masterData.defaultSampleTypeValue && this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode) || -1,\r\n      nregtypecode: parseInt(this.props.Login.masterData.defaultRegTypeValue && this.props.Login.masterData.defaultRegTypeValue.nregtypecode) || -1,\r\n      nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegSubTypeValue && this.props.Login.masterData.defaultRegSubTypeValue.nregsubtypecode) || -1,\r\n      //  ntransactionstatus: (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1,\r\n      ntransactionstatus: (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1,\r\n\r\n      userinfo: this.props.Login.userInfo,\r\n      napprovalconfigversioncode: (this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode) || -1,\r\n\r\n    }\r\n    if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalconfigversioncode !== -1 && inputData.ntransactionstatus !== \"-1\") {\r\n\r\n      inputData['fromdate'] = obj.fromDate;\r\n      inputData['todate'] = obj.toDate;\r\n      inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n      let inputParam = {\r\n        masterData,\r\n        inputData,\r\n        searchTestRef: this.searchTestRef,\r\n        skip: this.state.skip,\r\n        take: this.state.take,\r\n        testskip: this.state.testskip,\r\n        testtake: this.state.testtake,\r\n        isClearSearch: this.props.Login.isClearSearch,\r\n\r\n\r\n      }\r\n      this.props.getWorklistDetailFilter(inputParam)\r\n    } else {\r\n      toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }))\r\n    }\r\n  };\r\n\r\n\r\n\r\n  ConfirmDelete = (operation, deleteId) => {\r\n    this.confirmMessage.confirm(\r\n      \"deleteMessage\",\r\n      this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n      () =>\r\n        this.DeleteWorklist(\r\n          operation,\r\n          deleteId,\r\n          operation.screenName ? operation.screenName : \"IDS_WORKLIST\"\r\n        )\r\n    );\r\n  };\r\n\r\n\r\n\r\n  DeleteWorklist = (operation, ncontrolCode) => {\r\n    let inputData = [];\r\n\r\n    inputData[\"worklist\"] = this.props.Login.masterData.selectedWorklist;\r\n    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromdate, this.props.Login.masterData.todate, this.props.Login.userInfo)\r\n    inputData['fromdate'] = obj.fromDate;\r\n    inputData['todate'] = obj.toDate;\r\n    inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n    inputData[\"napprovalconfigversioncode\"] = (this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode)\r\n    inputData[\"ntransactionstatus\"] = (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1\r\n    const postParam = {\r\n      inputListName: \"Worklist\",\r\n      selectedObject: \"selectedWorklist\",\r\n      primaryKeyField: \"nworklistcode\",\r\n      primaryKeyValue:\r\n        this.props.Login.masterData.selectedWorklist.nworklistcode,\r\n      fetchUrl: \"worklist/getWorklistSelectSample\",\r\n      fecthInputObject: { userinfo: this.props.Login.userInfo, ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode, nneedsampleandhistory: transactionStatus.YES },\r\n    };\r\n\r\n    const inputParam = {\r\n      methodUrl: \"Worklist\",\r\n      postParam,\r\n      classUrl: this.props.Login.inputParam.classUrl,\r\n      inputData: inputData,\r\n      operation: operation.operation,\r\n    };\r\n    const masterData = this.props.Login.masterData;\r\n    if (\r\n      showEsign(\r\n        this.props.Login.userRoleControlRights,\r\n        this.props.Login.userInfo.nformcode,\r\n        ncontrolCode\r\n      )\r\n    ) {\r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: {\r\n          loadEsign: true,\r\n          screenData: { inputParam, masterData },\r\n          openModal: true,\r\n          screenName: \"Worklist\",\r\n          operation: operation.operation,\r\n        },\r\n      };\r\n      this.props.updateStore(updateInfo);\r\n    } else {\r\n      this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n    }\r\n\r\n  };\r\n\r\n\r\n\r\n  onApproveClick = () => {\r\n\r\n\r\n    //onClick={() => this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, approvalId)}\r\n    //if (this.props.Login.masterData.SelectedSupplier.ntransactionstatus === transactionStatus.DRAFT) {\r\n    const ncontrolCode = this.state.controlMap.has(\"GenerateWorklist\") && this.state.controlMap.get(\"GenerateWorklist\").ncontrolcode\r\n    let inputData = [];\r\n    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    const masterData = this.props.Login.masterData;\r\n    // //add               \r\n    let postParam = undefined;\r\n    inputData[\"worklist\"] = masterData.selectedWorklist;\r\n    inputData[\"ncontrolCode\"] = ncontrolCode;\r\n    inputData[\"ndesigntemplatemappingcode\"] = masterData.ndesigntemplatemappingcode;\r\n    inputData[\"ntransactionstatus\"] = (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1;\r\n\r\n    // inputData[\"supplier\"] = this.props.Login.masterData.SelectedSupplier;\r\n    postParam = {\r\n      inputListName: \"Worklist\",\r\n      selectedObject: \"selectedWorklist\",\r\n      primaryKeyField: \"nworklistcode\",\r\n      primaryKeyValue:\r\n        this.props.Login.masterData.selectedWorklist.nworklistcode,\r\n      fetchUrl: \"worklist/getWorklistSelectSample\",\r\n      fecthInputObject: { userinfo: this.props.Login.userInfo, ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode, nneedsampleandhistory: transactionStatus.YES },\r\n    };\r\n    const inputParam = {\r\n      classUrl: 'worklist',\r\n      methodUrl: \"Worklist\",\r\n      inputData: inputData,\r\n      operation: \"prepare\", postParam\r\n    }\r\n    let saveType;\r\n\r\n\r\n\r\n    const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n    if (esignNeeded) {\r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: {\r\n          loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"prepare\", screenName: \"Worklist\"\r\n        }\r\n      }\r\n      this.props.updateStore(updateInfo);\r\n    }\r\n    else {\r\n      //this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n      this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, ncontrolCode)\r\n    }\r\n\r\n\r\n  }\r\n  // ADDed by Neeraj-ALPD-5136\r\n  //WorkList Screen -> Including filter in Data selection Kendo Grid \r\n  //Command by neeraj\r\n  // dataStateChange1 = (event) => {\r\n  //   let addedComponentList = [];\r\n  //   let addComponentDataList = [];\r\n  //   if (event.dataState.filter && event.dataState.filter !== null) {\r\n  //     let selectedList = this.state.addComponentDataList || []\r\n  //     let filterList = process(this.state.addComponentDataList || [], event.dataState).data;\r\n  //     selectedList.map((x, index) => {\r\n  //       filterList.map((item) => {\r\n  //         if (item.ntransactiontestcode === x.ntransactiontestcode && x.selected) {\r\n  //           // Check if the record is already in addedComponentList\r\n  //           if (!addedComponentList.some(component => component.ntransactiontestcode === x.ntransactiontestcode)) {\r\n  //             addedComponentList.push(x);\r\n  //           }\r\n  //           // Check if the record is already in addComponentDataList\r\n  //           if (!addComponentDataList.some(data => data.ntransactiontestcode === x.ntransactiontestcode)) {\r\n  //             addComponentDataList.push({ ...x, 'selected': x.selected ? true : false });\r\n  //           }\r\n  //         } else {\r\n  //           // Check if the record is already in addComponentDataList\r\n  //           if (!addComponentDataList.some(data => data.ntransactiontestcode === x.ntransactiontestcode)) {\r\n  //             addComponentDataList.push({ ...x, 'selected': x.selected ? true : false });\r\n  //           }\r\n  //         }\r\n  //       });\r\n  //     });\r\n  //   } else {\r\n  //     if (event.dataState.sort && event.dataState.sort !== null && event.dataState.filter !== null) {\r\n  //       addedComponentList = this.state.addedComponentList || [];\r\n  //       addComponentDataList = this.state.addComponentDataList || [];\r\n  //     } else {\r\n  //       addedComponentList = [];\r\n  //       addComponentDataList = this.props.Login.addComponentDataList.map(x => {\r\n  //         return { ...x, 'selected': false }\r\n  //       }\r\n  //       );\r\n  //       delete (event.dataState.filter);\r\n  //     }\r\n  //   }\r\n  //   this.setState({\r\n  //     dataResult: process(this.state.addComponentDataList || [], event.dataState),\r\n  //     dataState: event.dataState, addedComponentList,\r\n  //     addComponentDataList,\r\n  //     addSelectAll: this.valiateCheckAll(event.dataState.filter && event.dataState.filter !== null ?\r\n  //       process(addComponentDataList || [], event.dataState).data : addComponentDataList),\r\n  //     deleteSelectAll: this.valiateCheckAll(addComponentDataList)\r\n  //   });\r\n  // }\r\n  dataStateChange1 = (event) => {\r\n    this.setState({\r\n      dataResult: process(this.state.addComponentDataList || [], event.dataState),\r\n      dataState: event.dataState});\r\n  }\r\n\r\n  onComboChange = (comboData, fieldName, caseNo) => {\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n\r\n    if (comboData !== null) {\r\n      switch (caseNo) {\r\n        case 1:\r\n          if (selectedRecord[fieldName] && selectedRecord[fieldName].value !== comboData.value) {\r\n            delete selectedRecord[\"ntestcode\"]\r\n          }\r\n          selectedRecord[fieldName] = comboData;\r\n          //this.setState({ selectedRecord });\r\n          this.props.getSectionbaseTest(selectedRecord, this.props.Login.userInfo, this.props.Login.masterData, this.props.Login.ncontrolCode)\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    else {\r\n      if (selectedRecord[\"nsectioncode\"]) {\r\n        delete selectedRecord[\"nsectioncode\"];\r\n        delete selectedRecord[\"nusercode\"];\r\n\r\n      }\r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: { selectedRecord }\r\n      }\r\n      this.props.updateStore(updateInfo);\r\n    }\r\n  };\r\n\r\n  closeModal = () => {\r\n    let loadEsign = this.props.Login.loadEsign;\r\n    let openModal = this.props.Login.openModal;\r\n    let modalShow = this.props.Login.modalShow;\r\n    let selectedRecord = this.props.Login.selectedRecord;\r\n    let openChildModal = this.props.Login.openChildModal;\r\n    if (this.props.Login.loadEsign) {\r\n      if ((this.props.Login.operation.operation ? this.props.Login.operation.operation : this.props.Login.operation) === \"delete\") {\r\n        loadEsign = false;\r\n        openModal = false;\r\n        openChildModal = false;\r\n        selectedRecord = {};\r\n      } else {\r\n        loadEsign = false;\r\n        // selectedRecord[\"agree\"] = transactionStatus.NO;\r\n        selectedRecord['esignpassword'] = \"\"\r\n        selectedRecord['esigncomments'] = \"\"\r\n        selectedRecord['esignreason'] = \"\"\r\n        modalShow = true;\r\n        openModal = false;\r\n        openChildModal = false;\r\n\r\n      }\r\n    } else {\r\n      openModal = false;\r\n      modalShow = false;\r\n      openChildModal = false;\r\n      selectedRecord = {};\r\n    }\r\n\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { openModal, modalShow, loadEsign, selectedRecord, selectedId: null, openChildModal },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n\r\n\r\n  viewSample = (viewdetails) => {\r\n    //let openModal = this.props.Login.openModal;\r\n    //let openModal = true;\r\n    //let screenName = 'IDS_VIEWDETAILS'\r\n\r\n    this.props.ViewSampleDetails(this.props.Login.masterData, \"IDS_PREVIOUSRESULTVIEW\", this.props.Login.userInfo, viewdetails);\r\n  };\r\n\r\n  closeModalShow = () => {\r\n    let loadEsign = this.props.Login.loadEsign;\r\n\r\n    let modalShow = this.props.Login.modalShow;\r\n    let selectedRecord = this.props.Login.selectedRecord;\r\n    if (this.props.Login.loadEsign) {\r\n      loadEsign = false;\r\n    } else {\r\n      modalShow = false;\r\n      selectedRecord = {};\r\n    }\r\n\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { modalShow, selectedRecord, selectedId: null, loadEsign },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n  componentDidUpdate(previousProps) {\r\n    let updateState = false;\r\n    let {\r\n      selectedRecord, addedComponentList,\r\n      userRoleControlRights,\r\n      controlMap,\r\n      filterData,\r\n      nfilterInstrumentCategory,\r\n      filterInstrumentCategory, RegistrationSubTypeList, FilterStatusList, SampletypeList,\r\n      RegistrationTypeList, DynamicGridItem, DynamicGridMoreItem, ConfigVersionList, subsampleGridItem, sampleGridItem, testGridItem = [], samplegridmoreitem, testGridItems\r\n      , addSelectAll, deleteSelectAll } = this.state;\r\n    if (\r\n      this.props.Login.selectedRecord !== previousProps.Login.selectedRecord\r\n    ) {\r\n      selectedRecord = this.props.Login.selectedRecord;\r\n      updateState = true;\r\n    }\r\n    if (\r\n      this.props.Login.userInfo.nformcode !==\r\n      previousProps.Login.userInfo.nformcode\r\n    ) {\r\n      userRoleControlRights = [];\r\n      if (this.props.Login.userRoleControlRights) {\r\n        this.props.Login.userRoleControlRights[\r\n          this.props.Login.userInfo.nformcode\r\n        ] &&\r\n          Object.values(\r\n            this.props.Login.userRoleControlRights[\r\n            this.props.Login.userInfo.nformcode\r\n            ]\r\n          ).map((item) => userRoleControlRights.push(item.ncontrolcode));\r\n      }\r\n      controlMap = getControlMap(\r\n        this.props.Login.userRoleControlRights,\r\n        this.props.Login.userInfo.nformcode\r\n      );\r\n      updateState = true;\r\n    }\r\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n      const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\r\n      RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\r\n\r\n      const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\r\n      RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\r\n\r\n      const FilterStatusListMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\", \"stransdisplaystatus\", undefined, undefined, false);\r\n      FilterStatusList = FilterStatusListMap.get(\"OptionList\");\r\n\r\n      const SampletypeListMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'ascending', 'nsampletypecode', false);\r\n      SampletypeList = SampletypeListMap.get(\"OptionList\");\r\n      const ConfigVersionListMap = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], \"napprovalconfigversioncode\", \"sversionname\", 'descending', 'ntransactionstatus', false);\r\n      ConfigVersionList = ConfigVersionListMap.get(\"OptionList\");\r\n      nfilterInstrumentCategory = this.state.nfilterInstrumentCategory || {};\r\n      addSelectAll = false;\r\n      deleteSelectAll = true;\r\n      if (\r\n        this.props.Login.masterData.SelectedInsCat &&\r\n        this.props.Login.masterData.SelectedInsCat !==\r\n        previousProps.Login.masterData.SelectedInsCat\r\n      ) {\r\n        nfilterInstrumentCategory = {\r\n          label: this.props.Login.masterData.SelectedInsCat.stestsynonym,\r\n          value: this.props.Login.masterData.SelectedInsCat.ntestcode,\r\n          item: this.props.Login.masterData.SelectedInsCat,\r\n        };\r\n      }\r\n      filterData = this.generateBreadCrumData();\r\n      updateState = true;\r\n    }\r\n\r\n    if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n      const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n\r\n\r\n      testGridItem[0] = dynamicColumn.testListFields.releasetestfields[0] ? dynamicColumn.testListFields.releasetestfields[0] : [];\r\n      sampleGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n      subsampleGridItem = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\r\n      testGridItems = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : [];\r\n      //testGridItem= dynamicColumn.conditionfields ? dynamicColumn.conditionfields : [];\r\n\r\n      DynamicGridItem = [...sampleGridItem, ...subsampleGridItem, ...testGridItems.slice(1), ...testGridItem]\r\n      samplegridmoreitem = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n      DynamicGridMoreItem = [...samplegridmoreitem]\r\n      //DynamicGridItem.push(dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [])\r\n    }\r\n\r\n\r\n    if (\r\n      this.props.Login.masterData.filterInstrumentCategory !==\r\n      previousProps.Login.masterData.filterInstrumentCategory\r\n    ) {\r\n      const insCategoryMap = constructOptionList(\r\n        this.props.Login.masterData.filterInstrumentCategory || [],\r\n        \"ntestcode\",\r\n        \"stestsynonym\",\r\n        \"ntestcategorycode\",\r\n        \"ascending\",\r\n        false\r\n      );\r\n      filterInstrumentCategory = insCategoryMap.get(\"OptionList\");\r\n      if (insCategoryMap.get(\"DefaultValue\")) {\r\n        nfilterInstrumentCategory = insCategoryMap.get(\"DefaultValue\");\r\n      } else if (\r\n        filterInstrumentCategory &&\r\n        filterInstrumentCategory.length > 0\r\n      ) {\r\n        nfilterInstrumentCategory = filterInstrumentCategory[0];\r\n      }\r\n      updateState = true;\r\n    }\r\n\r\n\r\n    // let updateState = false;\r\n    let updateStateObject = {};\r\n    if (this.props.Login.addedComponentList !== previousProps.Login.addedComponentList) {\r\n\r\n      addSelectAll = false;\r\n      deleteSelectAll = true;\r\n\r\n      this.setState({\r\n        addedComponentList: this.props.Login.addedComponentList,\r\n        addSelectAll, deleteSelectAll\r\n      });\r\n    }\r\n\r\n    if (this.props.addedComponentList !== previousProps.addedComponentList) {\r\n      // this.setState({ addedComponentList : this.props.addedComponentList});\r\n      updateState = true;\r\n      updateStateObject = { ...updateStateObject, addedComponentList: this.props.addedComponentList };\r\n    }\r\n    if (this.props.Login.dataState !== previousProps.Login.dataState) {\r\n      if (this.props.Login.dataState) {\r\n        delete (this.props.Login.dataState.filter)\r\n        delete (this.props.Login.dataState.sort)\r\n        this.setState({ dataState: this.props.Login.dataState });\r\n      }\r\n    }\r\n    if (this.props.Login.addComponentDataList !== previousProps.Login.addComponentDataList) {\r\n      this.setState({ addComponentDataList: this.props.Login.addComponentDataList });\r\n    }\r\n    if (this.props.Login.addComponentSortedList !== previousProps.Login.addComponentSortedList) {\r\n      this.setState({ addComponentSortedList: this.props.Login.addComponentSortedList });\r\n    }\r\n    //ADDed by Neeraj-ALPD-5136\r\n    //WorkList Screen -> Including filter in Data selection Kendo Grid\r\n    if (this.props.Login.masterData.WorklistSamples !== previousProps.Login.masterData.WorklistSamples) {\r\n      let worklistSamplesList=this.props.Login.masterData.WorklistSamples||[]\r\n      let updatedSortedList = worklistSamplesList.sort((a, b) => {\r\n        const A = a.nworklistsamplecode;\r\n        const B = b.nworklistsamplecode; // Corrected from 'a' to 'b'\r\n    \r\n        return A - B; // Sort in ascending order\r\n    });\r\n      this.setState({ WorklistSamples: updatedSortedList });\r\n    }\r\n\r\n    if (updateState) {\r\n      this.setState({\r\n        selectedRecord,\r\n        userRoleControlRights,\r\n        controlMap,\r\n        filterData,\r\n        nfilterInstrumentCategory,\r\n        filterInstrumentCategory, RegistrationSubTypeList, FilterStatusList, SampletypeList,\r\n        RegistrationTypeList, DynamicGridItem, ConfigVersionList, DynamicGridMoreItem, addSelectAll, deleteSelectAll\r\n      });\r\n    }\r\n  }\r\n\r\n  generateBreadCrumData() {\r\n    //obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n\r\n    const breadCrumbData = [];\r\n    if (this.props.Login.masterData && this.props.Login.masterData.Worklist) {\r\n      const obj = convertDateValuetoString(this.props.Login.masterData.fromdate, this.props.Login.masterData.todate, this.props.Login.userInfo)\r\n\r\n      breadCrumbData.push({\r\n\r\n        \"label\": \"IDS_FROM\",\r\n        \"value\": obj.breadCrumbFrom\r\n      }, {\r\n        \"label\": \"IDS_TO\",\r\n        \"value\": obj.breadCrumbto\r\n      },\r\n        // {\r\n        //   \"label\": \"IDS_SAMPLETYPE\",\r\n        //   \"value\": this.props.Login.masterData.defaultSampleTypeValue ? this.props.Login.masterData.defaultSampleTypeValue.ssampletypename || \"NA\" :\r\n        //     this.props.Login.masterData.defaultSampleTypeValue ? this.props.Login.masterData.defaultSampleTypeValue.ssampletypename || \"NA\" : \"NA\"\r\n        // },\r\n        {\r\n          \"label\": \"IDS_REGTYPE\",\r\n          \"value\": this.props.Login.masterData.defaultRegTypeValue ? this.props.Login.masterData.defaultRegTypeValue.sregtypename || \"NA\" :\r\n            this.props.Login.masterData.defaultRegTypeValue ? this.props.Login.masterData.defaultRegTypeValue.sregtypename || \"NA\" : \"NA\"\r\n        }, {\r\n        \"label\": \"IDS_REGSUBTYPE\",\r\n        \"value\": this.props.Login.masterData.defaultRegSubTypeValue ? this.props.Login.masterData.defaultRegSubTypeValue.sregsubtypename || \"NA\" :\r\n          this.props.Login.masterData.defaultRegSubTypeValue ?\r\n            this.props.Login.masterData.defaultRegSubTypeValue.sregsubtypename : \"NA\"\r\n      },\r\n\r\n        // {\r\n        //   \"label\": \"IDS_CONFIGVERSION\",\r\n        //   \"value\": this.props.Login.masterData.defaultApprovalVersion ?\r\n        //     this.props.Login.masterData.defaultApprovalVersion.sversionname || \"NA\" :\r\n        //     this.props.Login.masterData.defaultApprovalVersion ? this.props.Login.masterData.defaultApprovalVersion.sversionname || \"NA\" : \"NA\"\r\n        // },\r\n\r\n\r\n        {\r\n          \"label\": \"IDS_WORKLISTSTATUS\",\r\n          \"value\": this.props.Login.masterData.defaultFilterStatusValue ?\r\n            this.props.Login.masterData.defaultFilterStatusValue.stransdisplaystatus || \"NA\" :\r\n            this.props.Login.masterData.defaultFilterStatusValue ?\r\n              this.props.Login.masterData.defaultFilterStatusValue.stransdisplaystatus || \"NA\" : \"NA\"\r\n        }\r\n        //];\r\n      );\r\n    }\r\n    return breadCrumbData;\r\n  }\r\n\r\n  openFilter = () => {\r\n    let showFilter = !this.props.Login.showFilter;\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { showFilter },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n  closeFilter = () => {\r\n    let inputValues = {\r\n      RegistrationSubType: this.props.Login.masterData.realRegistrationSubTypeList || [],\r\n      RegistrationType: this.props.Login.masterData.realRegistrationTypeList || [],\r\n      FilterStatus: this.props.Login.masterData.realFilterStatusList || [],\r\n      SampleType: this.props.Login.masterData.realSampleTypeList || [],\r\n      ApprovalConfigVersion: this.props.Login.masterData.realApprovalConfigVersionList || [],\r\n      FilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\r\n      ApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue || {},\r\n      RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue || {},\r\n      RegTypeValue: this.props.Login.masterData.realRegTypeValue || {},\r\n      SampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\r\n      fromDate: this.props.Login.masterData.fromdate || new Date(),// ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date(),\r\n      toDate: this.props.Login.masterData.todate || new Date(),// ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date(),\r\n      defaultSampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\r\n      defaultApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue || {},\r\n\r\n    }\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { showFilter: false, masterData: { ...this.props.Login.masterData, ...inputValues } },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n  onFilterSubmit = () => {\r\n    this.searchRef.current.value = \"\";\r\n\r\n    this.props.Login.masterData.searchedData = undefined;\r\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n\r\n    let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\r\n    let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\r\n    let fromdate = this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date();\r\n    let todate = this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date();\r\n\r\n    let defaultSampleTypeValue = this.props.Login.masterData.defaultSampleTypeValue\r\n    let defaultRegTypeValue = this.props.Login.masterData.RegTypeValue\r\n    let defaultRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue\r\n    let defaultFilterStatusValue = this.props.Login.masterData.FilterStatusValue\r\n    let defaultApprovalVersion = this.props.Login.masterData.defaultApprovalVersionValue\r\n    let RealSampleTypeValue = this.props.Login.masterData.defaultSampleTypeValue\r\n    let realApprovalVersionValue = this.props.Login.masterData.defaultApprovalVersionValue\r\n    let realRegTypeValue = this.props.Login.masterData.RegTypeValue\r\n    let realRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue\r\n    let RealFilterStatusValue = this.props.Login.masterData.FilterStatusValue\r\n    let realApprovalConfigVersionList = this.props.Login.masterData.ApprovalConfigVersion\r\n    let realFilterStatusList = this.props.Login.masterData.FilterStatus\r\n    let realRegistrationTypeList = this.props.Login.masterData.RegistrationType\r\n    let realRegistrationSubTypeList = this.props.Login.masterData.RegistrationSubType\r\n    let masterData = {\r\n      ...this.props.Login.masterData, realFromDate, realToDate,\r\n      defaultSampleTypeValue, defaultRegTypeValue, defaultRegSubTypeValue, defaultFilterStatusValue, defaultApprovalVersion,\r\n      fromdate, todate, RealSampleTypeValue, realApprovalVersionValue, realRegTypeValue, realRegSubTypeValue, RealFilterStatusValue, realApprovalConfigVersionList,\r\n      realFilterStatusList, realRegistrationTypeList, realRegistrationSubTypeList\r\n    };\r\n\r\n    let inputData = {\r\n      //npreregno: \"0\",\r\n      nsampletypecode: (this.props.Login.masterData.defaultSampleTypeValue && this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode) || -1,\r\n      nregtypecode: parseInt(this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode) || -1,\r\n      nregsubtypecode: parseInt(this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode) || -1,\r\n      // ntransactionstatus: (this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus) || -1,\r\n      ntransactionstatus: this.props.Login.masterData.FilterStatusValue\r\n        && (this.props.Login.masterData.FilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.FilterStatusValue.ntransactionstatus),\r\n\r\n      napprovalconfigversioncode: (this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode) || -1,\r\n\r\n      userinfo: this.props.Login.userInfo,\r\n      // activeTestTab: this.props.Login.activeTestTab,\r\n\r\n    }\r\n    if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalconfigversioncode !== -1\r\n      && inputData.ntransactionstatus !== \"-1\") {\r\n\r\n      inputData['fromdate'] = obj.fromDate;\r\n      inputData['todate'] = obj.toDate;\r\n      inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n      let inputParam = {\r\n        masterData,\r\n        inputData,\r\n        searchTestRef: this.searchTestRef,\r\n        skip: this.state.skip,\r\n        take: this.state.take,\r\n        testskip: this.state.testskip,\r\n        testtake: this.state.testtake,\r\n\r\n\r\n      }\r\n      this.props.getWorklistDetailFilter(inputParam)\r\n    } else {\r\n      toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }))\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n  callService,\r\n  crudMaster,\r\n  getWorklistDetail,\r\n  filterColumnData,\r\n  getSectionAndTest,\r\n  updateStore,\r\n  validateEsignCredential,\r\n  onWorklistApproveClick,\r\n  OpenDate,\r\n  CloseDate, viewAttachment, getInstrumentCombo, getWorklistSample, getRegTypeTestWise, getRegTypeWorklist,\r\n  getSectionbaseTest, getWorklistDetailFilter, getEditSectionAndTest, createWorklistCreation, getConfigVersionTestWise,\r\n  ViewSampleDetails, getWorklisthistoryAction, reportWorklist, getRegSubTypeWise, insertWorklist,\r\n  generateControlBasedReport, validateEsignforWorklist\r\n})(injectIntl(WorkList));\r\n"]},"metadata":{},"sourceType":"module"}